@java.lang.Override protected com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ Group@@ Fiel@@ d.@@ UUID@@ .getName@@ ()@@ ).get@@ As@@ String@@ ()); return group@@ Cache@@ .get@@ ().get@@ (@@ u@@ u@@ id@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ ); }
@java.lang.Override protected com.google.gerrit.server.project.Project@@ Data from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ Project@@ Fiel@@ d.@@ NAME@@ .getName@@ ()@@ ).get@@ As@@ String@@ ()); return project@@ Cache@@ .get@@ ().get@@ (@@ name@@ Key@@ ).to@@ Project@@ Data@@ (); }
protected abstract java.lang.String from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject do@@ c@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s);
@java.lang.Override protected com.google.gerrit.server.account.Account@@ State from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ ID@@ .getName@@ ()@@ ).get@@ As@@ In@@ t@@ ()); return account@@ Cache@@ .get@@ ().get@@ (id@@ ); }
@java.lang.Override public com.google.gwtorm.server.@@ Result@@ Set<@@ V@@ > read@@ () throw@@ s com.google.gwtorm.server.OrmException { return read@@ Im@@ pl@@ (@@ do@@ c@@ ) -@@ > this@@ .@@ from@@ Doc@@ (@@ do@@ c@@ , op@@ t@@ s.@@ fi@@ el@@ d@@ s@@ ())); }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open@@ () throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = de@@ leg@@ ate.@@ open@@ (); if (m@@ igration.@@ read@@ Changes@@ ()) { if (m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ()) { db = new com.google.gerrit.server.@@ schema.@@ No@@ Changes@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } db = new com.google.gerrit.reviewdb.server.@@ Dis@@ allow@@ Read@@ From@@ Changes@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } if (@@ group@@ s@@ M@@ igration.@@ read@@ From@@ NoteDb@@ ()) { if (@@ group@@ s@@ M@@ igration.@@ dis@@ able@@ Group@@ Review@@ Db@@ ()) { db = new com.google.gerrit.server.@@ schema.@@ No@@ Group@@ s@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } db = new com.google.gerrit.reviewdb.server.@@ Dis@@ allow@@ Read@@ From@@ Group@@ s@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } return db@@ ; }
static java.lang.String get@@ Group@@ Name@@ (com.google.gerrit.server.@@ account.@@ Group@@ Cach@@ e group@@ Cache@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { java.lang.String u@@ id = group@@ U@@ u@@ id@@ .get(); java.lang.String name = group@@ Cache@@ .get(@@ group@@ U@@ u@@ id@@ ).@@ map@@ (@@ In@@ ternal@@ :@@ get@@ Name@@ ).@@ or@@ E@@ l@@ se@@ (@@ u@@ id); return com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update@@ s@@ .@@ for@@ m@@ at@@ Name@@ Email@@ (@@ name, u@@ id); }
@org.junit.Test public void in@@ clu@@ de@@ External@@ Group@@ () throw@@ s java.lang.Exception { java.lang.String g = create@@ Group@@ ("@@ group@@ "); java.lang.String sub@@ U@@ u@@ id = Sy@@ st@@ em@@ Group@@ Back@@ en@@ d.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ .get(); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ ).@@ add@@ Group@@ s(@@ sub@@ group@@ U@@ u@@ id); java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> sub@@ s = g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ ).@@ in@@ clu@@ des@@ Group@@ s(); assert@@ Th@@ at(@@ sub@@ group@@ s).@@ hasSize@@ (1); assert@@ Th@@ at(@@ sub@@ group@@ s.get(@@ 0@@ ).@@ id@@ ).@@ isEqualTo(@@ sub@@ group@@ U@@ u@@ id@@ .@@ replace@@ ("@@ :@@ ", "@@ %@@ 3@@ A@@ ")); assert@@ Th@@ at(@@ sub@@ s.get(@@ 0@@ )@@ .g@@ roup@@ Id@@ ).@@ isNull@@ (); if (@@ group@@ s@@ M@@ igration.@@ write@@ To@@ NoteDb@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ ).get@@ ().@@ id); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = com.google.gerrit.server.g@@ roup.@@ roup.@@ Group@@ Test@@ Util.@@ log@@ (repo, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ message@@ ().@@ isEqualTo@@ ("@@ Update group@@ \n@@ Add@@ -@@ group@@ :@@ Re@@ gist@@ er@@ ed@@ User@@ s <@@ g@@ lobal@@ :@@ Re@@ gist@@ er@@ ed@@ User@@ s@@ :@@ Re@@ gist@@ er@@ ed@@ User@@ s@@ >@@ "); java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ di@@ t = group@@ s.get@@ Sub@@ s@@ Au@@ dit@@ (db, repo@@ , id); assert@@ Th@@ at(@@ au@@ dit@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ 0@@ ).get@@ Inclu@@ de@@ UUID@@ ()).@@ isEqualTo(@@ Sy@@ st@@ em@@ Group@@ Back@@ en@@ d.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); } }
@java.lang.Override protected void configure() { bind(@@ com.google.gerrit.extensions.@@ config.@@ Capabili@@ ty@@ De@@ fin@@ i@@ tion@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (@@ M@@ on@@ it@@ o@@ ring@@ Capabili@@ ty.@@ ID@@ )).@@ to@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ M@@ on@@ it@@ o@@ ring@@ Capabili@@ ty@@ .@@ class@@ ); if (c@@ fg@@ .get@@ Boolean@@ ("@@ allow@@ To@@ p@@ M@@ enu@@ ", true@@ )) { com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ To@@ p@@ M@@ enu@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ M@@ on@@ it@@ o@@ ring@@ To@@ p@@ M@@ enu@@ .@@ class@@ ); } final java.nio.file.@@ Pat@@ h di@@ rec@@ tor@@ y = TE@@ M@@ P@@ OR@@ Y_@@ D@@ I@@ RE@@ C@@ T@@ Y@@ .@@ res@@ ol@@ ve@@ (@@ plugin@@ Name); final java.nio.file.@@ Pat@@ h st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y@@ ; if ((@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ di@@ rec@@ tor@@ y@@ )) && (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ di@@ rec@@ tor@@ y@@ ))) { st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y = di@@ rec@@ tor@@ y@@ ; } else { st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y = t@@ mp@@ Di@@ r.@@ res@@ ol@@ ve@@ (@@ plugin@@ Name); } if ((@@ java.lang.@@ Sy@@ st@@ em@@ .get@@ Pro@@ per@@ ty@@ (((@@ plugin@@ Name) + "@@ .@@ st@@ or@@ age@@ -@@ di@@ rec@@ tor@@ y@@ "@@ ))) == null@@ ) { java.lang.@@ Sy@@ ste@@ m.@@ set@@ Pro@@ per@@ ty@@ (((@@ plugin@@ Name) + "@@ .@@ st@@ or@@ age@@ -@@ di@@ rec@@ tor@@ y@@ "), cfg@@ .get@@ String@@ ("@@ st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y@@ ", st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y.@@ toString@@ ())); } }
private java.lang.String get@@ St@@ or@@ age@@ Di@@ r@@ () { final java.nio.file.@@ Pat@@ h t@@ m@@ p = com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ Fil@@ ter.@@ d@@ y@@ Fil@@ ter.@@ TE@@ M@@ P@@ OR@@ AR@@ Y_@@ D@@ I@@ RE@@ C@@ T@@ OR@@ Y@@ .@@ res@@ ol@@ ve@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ d@@ y@@ Fil@@ ter.@@ J@@ A@@ V@@ A@@ ME@@ LO@@ D@@ Y_@@ P@@ RE@@ FI@@ X@@ ); if (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ t@@ mp@@ )) { return t@@ mp@@ .@@ toString@@ (); } if (!(@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y@@ (@@ default@@ Data@@ Di@@ r@@ ))) { try { java.nio.file.@@ File@@ s.@@ create@@ Di@@ rec@@ to@@ ri@@ es@@ (@@ default@@ Data@@ Di@@ r@@ ); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.@@ java@@ me@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ d@@ y@@ Fil@@ ter.@@ log.error@@ ("@@ Cre@@ ation of java@@ me@@ d@@ y dat@@ a di@@ r [@@ {}@@ ] f@@ ai@@ le@@ d.@@ ", default@@ Data@@ Di@@ r@@ , e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } } return default@@ Data@@ Di@@ r.@@ toString@@ (); }
private org.eclipse.jgit.lib.ObjectId create@@ Commit@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.lang.String commit@@ Message@@ ) throw@@ s java.io.IOException { return create@@ Commit@@ (repo, commit@@ Message@@ , null@@ ); }
private org.eclipse.jgit.lib.ObjectId create@@ Commit@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.lang.String commit@@ Message@@ , @@@ com.google.gerrit.common.@@ Null@@ able org.eclipse.jgit.lib.ObjectId t@@ ree@@ Id@@ ) throw@@ s java.io.IOException { try (@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter o@@ i = repo@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()) { if (t@@ ree@@ Id == null@@ ) { t@@ ree@@ Id = o@@ i.@@ insert@@ (@@ Con@@ stant@@ s.@@ O@@ B@@ J@@ _@@ T@@ RE@@ E@@ , new byte@@ [@@ ]@@ { }); } org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ .get(), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); org.eclipse.jgit.lib.@@ Commit@@ Builder c@@ b = new org.eclipse.jgit.lib.@@ Commit@@ Builder@@ (); c@@ b.@@ set@@ Tree@@ Id@@ (t@@ ree@@ Id); c@@ b.@@ set@@ Commit@@ ter@@ (id@@ ent@@ ); c@@ b.@@ set@@ Author@@ (id@@ ent@@ ); c@@ b.@@ set@@ Message@@ (@@ commit@@ Message@@ ); org.eclipse.jgit.lib.ObjectId commit = o@@ i.@@ insert@@ (c@@ b@@ ); o@@ i.@@ f@@ lu@@ sh@@ (); return commit@@ ; } }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .g@@ roup@@ s().@@ create(@@ name@@ ("@@ fo@@ "@@ )@@ ).get@@ ().@@ id@@ )); assert@@ Push@@ To@@ Group@@ (@@ all@@ User@@ s, group@@ Ref@@ , true@@ , "@@ g@@ roup updat@@ e not allow@@ ed@@ "); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ S@@ and@@ bo@@ x@@ ed public void can@@ not@@ Delete@@ Group@@ Branch@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group admin@@ Group = group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "@@ )).@@ or@@ E@@ l@@ se@@ (@@ null@@ ); assert@@ Th@@ at(@@ admin@@ Group@@ ).@@ is@@ Not@@ Null@@ (); test@@ Can@@ not@@ Delete@@ Branch@@ (((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ .get@@ Group@@ UUID@@ ())); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ all@@ User@@ s.@@ equals(@@ re@@ ce@@ ive@@ Ev@@ ent.@@ project@@ .getName@@ Key@@ ()))) { return java.util.Collections.@@ empty@@ List(); } if (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ )) { return java.util.Collections.@@ empty@@ List(); } if (((@@ re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ )) || (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ TE@@ D@@ _@@ G@@ RO@@ U@@ P@@ S@@ ))) || (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().equals(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ M@@ ES@@ ))) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ g@@ roup updat@@ e not allow@@ ed@@ "); } return java.util.Collections.@@ empty@@ List(); }
private void create@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref@@ , java.lang.String commit@@ Message@@ ) throw@@ s java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository r = repo@@ Manager.@@ open@@ Repository(@@ project@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter o@@ i = r@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (r@@ )) { org.eclipse.jgit.lib.ObjectId empty@@ Commit = create@@ Commit@@ (r@@ , commit@@ Message@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update update@@ Re@@ f = r.@@ update@@ Ref@@ (ref@@ ); update@@ Ref@@ .set@@ Ex@@ p@@ ec@@ ted@@ O@@ ld@@ Object@@ Id(@@ org.eclipse.jgit.lib.Object@@ Id.@@ z@@ er@@ o@@ Id()); update@@ Ref@@ (r@@ w@@ )).@@ isEqualTo(@@ Ref@@ Update.@@ Result.@@ N@@ EW@@ ); } }
@java.lang.Override public void on@@ Pre@@ Merge@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , com.google.gerrit.server.git.CodeReview@@ Commit commit@@ , com.google.gerrit.server.project.Project@@ State dest@@ Project@@ , com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key dest@@ Branch@@ , com.google.gerrit.reviewdb.client.PatchSet.@@ Id patchSet@@ Id, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User call@@ er@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception { if ((!@@ (@@ all@@ User@@ s@@ Name.@@ equals(@@ dest@@ Project@@ .getName@@ Key@@ ()))) || ((@@ dest@@ Branch@@ .get().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ))) && (!(@@ dest@@ Branch@@ .get().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ TE@@ D@@ _@@ G@@ RO@@ U@@ P@@ S@@ )))) && (!(@@ dest@@ Branch@@ .get().@@ equals(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NA@@ M@@ ES@@ )@@ )))) { return@@ ; } throw new com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception("@@ g@@ roup updat@@ e not allow@@ ed@@ "); }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ s@@ Branch@@ For@@ N@@ on@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { assert@@ Create@@ Group@@ Branch@@ (project@@ , null@@ ); java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .g@@ roup@@ s().@@ create(@@ name@@ ("@@ fo@@ "@@ )@@ ).get@@ ().@@ id@@ )); assert@@ Push@@ To@@ Group@@ (project@@ , group@@ Ref@@ , true@@ , null@@ ); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ Not@@ In@@ s@@ File@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ((("@@ " + ("@@ [@@ p@@ lu@@ gin \"@@ so@@ me@@ Plugin@@ \"@@ ]@@ \n@@ " + "@@ key@@ 1 = ")) + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ())) + "@@ \n@@ "@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()).@@ hasSize@@ (1); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()@@ ).get@@ Message@@ ()).@@ isEqualTo@@ ((@@ (("@@ project.@@ config@@ : g@@ roup \"@@ " + (@@ st@@ a@@ ff@@ .getName@@ ())) + "@@ \@@ " in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAME@@ ))); }
@org.junit.Test public void read@@ Config@@ Label@@ S@@ core@@ s() throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", (("@@ " + "@@ [@@ l@@ abe@@ l \"@@ C@@ u@@ st@@ o@@ m@@ Label@@ \"@@ ]@@ \n@@ ") + (com.google.gerrit.server.git.@@ Project@@ Config@@ Test.@@ L@@ AB@@ E@@ L@@ _S@@ CO@@ RES@@ _@@ CON@@ FI@@ G@@ )@@ )).@@ create@@ (); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); java.util.Map<java.lang.String, com.google.gerrit.common.data.@@ Label@@ Type@@ > label@@ s = cfg@@ .get@@ Label@@ Section@@ s(); com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ s.@@ en@@ try@@ Set@@ ().@@ iter@@ ator@@ ().@@ next@@ ().get@@ Value@@ (); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ M@@ in@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y_@@ IN@@ _S@@ CO@@ RE@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ Ma@@ x@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ A@@ X@@ _S@@ CO@@ RE@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ On@@ Merge@@ Fi@@ rst@@ Parent@@ Update@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ AL@@ L@@ _S@@ CO@@ RES@@ _@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ A@@ TE@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ On@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y_@@ AL@@ L@@ _S@@ CO@@ RES@@ _@@ CO@@ RES@@ S@@ ON@@ _@@ RE@@ B@@ A@@ S@@ E@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ I@@ f@@ No@@ Code@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ AL@@ L@@ _S@@ CO@@ D@@ E_@@ CHANG@@ E@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ I@@ f@@ No@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ AL@@ L@@ _S@@ I@@ F@@ _@@ CO@@ _@@ NO@@ _@@ CHANG@@ E@@ ); }
@org.junit.Test public void edit@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ((("@@ " + ("@@ [@@ p@@ lu@@ gin \"@@ so@@ me@@ Plugin@@ \"@@ ]@@ \n@@ " + "@@ key@@ 1 = ")) + (@@ de@@ ve@@ lo@@ per@@ s.@@ to@@ Value@@ ())) + "@@ \n@@ "@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.server.config.@@ Plugin@@ Config plugin@@ C@@ f@@ g = cfg@@ .get@@ Plugin@@ Config@@ ("@@ so@@ me@@ Plugin@@ "); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Nam@@ es().@@ size@@ ()).@@ isEqualTo@@ (1); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Group@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ "@@ )).@@ isEqualTo(@@ de@@ ve@@ lo@@ per@@ s); plugin@@ C@@ f@@ g.@@ set@@ Group@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ ", st@@ a@@ ff@@ ); re@@ v = commit@@ (c@@ fg@@ ); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ project.@@ config@@ "@@ )).@@ isEqualTo@@ ((@@ (("@@ " + ("@@ [@@ p@@ lu@@ gin \"@@ so@@ me@@ Plugin@@ \"@@ ]@@ \n@@ " + "@@ \@@ t@@ key@@ 1 = ")) + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ())) + "@@ \n@@ ")); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ group@@ s@@ "@@ )).@@ isEqualTo@@ ((((@@ (("@@ # UUID@@ \@@ t@@ Group Name@@ \n@@ " + "@@ #@@ \n@@ ") + (@@ st@@ a@@ ff@@ .get@@ UUID@@ ().get@@ ())) + " \@@ t@@ ") + (@@ st@@ a@@ ff@@ .getName@@ ())) + "@@ \n@@ ")); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ((("@@ " + ("@@ [@@ p@@ lu@@ gin \"@@ so@@ me@@ Plugin@@ \"@@ ]@@ \n@@ " + "@@ key@@ 1 = ")) + (@@ de@@ ve@@ lo@@ per@@ s.@@ to@@ Value@@ ())) + "@@ \n@@ "@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.server.config.@@ Plugin@@ Config plugin@@ C@@ f@@ g = cfg@@ .get@@ Plugin@@ Config@@ ("@@ so@@ me@@ Plugin@@ "); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Nam@@ es().@@ size@@ ()).@@ isEqualTo@@ (1); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Group@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ "@@ )).@@ isEqualTo(@@ de@@ ve@@ lo@@ per@@ s); }
private java.lang.String get@@ St@@ or@@ age@@ Di@@ r@@ () { final java.nio.file.@@ Pat@@ h t@@ m@@ p = java.nio.file.@@ Path@@ s.get(@@ java.lang.@@ Sy@@ st@@ em@@ .get@@ Pro@@ per@@ ty@@ ("@@ java.io.@@ t@@ mp@@ di@@ r@@ "@@ )).@@ res@@ ol@@ ve@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ d@@ y@@ Fil@@ ter.@@ J@@ A@@ V@@ A@@ ME@@ LO@@ D@@ Y_@@ P@@ RE@@ FI@@ X@@ ); if (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ t@@ mp@@ )) { return t@@ mp@@ .@@ toString@@ (); } java.nio.file.@@ Pat@@ h st@@ or@@ age@@ Di@@ r = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ d@@ y@@ Fil@@ ter.@@ ST@@ OR@@ A@@ G@@ E_@@ D@@ I@@ R@@ )).@@ map@@ (@@ ( path@@ ) -@@ > { if (p@@ at@@ h == null@@ ) { return default@@ Data@@ Di@@ r@@ ; } return java.nio.file.@@ Path@@ s.get(@@ path@@ ); }@@ ).get@@ (); } if (!(@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ st@@ or@@ age@@ Di@@ r@@ ))) { try { java.nio.file.@@ File@@ s.@@ create@@ Di@@ rec@@ to@@ ri@@ es(@@ st@@ or@@ age@@ Di@@ r@@ ); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.@@ java@@ me@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ d@@ y@@ Fil@@ ter.@@ log.error@@ ("@@ Cre@@ ation of java@@ me@@ d@@ lo@@ d@@ y dat@@ a di@@ r [@@ {}@@ ] f@@ ai@@ le@@ d.@@ ", st@@ or@@ age@@ Di@@ r@@ , e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } } return st@@ or@@ age@@ Di@@ r.@@ toString@@ (); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); if ((@@ in@@ pu@@ t == null@@ ) || ((@@ (in@@ put.@@ check@@ Account@@ s) == null@@ ) && ((@@ input.@@ check@@ Account@@ s) == null@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ pu@@ t requ@@ i@@ red@@ "); } com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info@@ (); if ((@@ input.@@ check@@ Account@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Account@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Account@@ s@@ Result@@ Info@@ (account@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } if ((@@ input.@@ check@@ Account@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Account@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Account@@ s@@ Result@@ Info@@ (@@ ext@@ er@@ n@@ al@@ Id@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } if ((@@ input.@@ check@@ Group@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Group@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Result@@ Info@@ (@@ group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } return con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info@@ ; }
void set@@ Al@@ low@@ S@@ ave@@ E@@ mpty@@ Name@@ (@@ boolean allow@@ S@@ ave@@ E@@ mpty@@ Name) { this@@ .@@ allow@@ S@@ ave@@ E@@ mpty@@ Name = allow@@ S@@ ave@@ E@@ mpty@@ Name@@ ; }
private Group@@ B@@ und@@ le.@@ Builder new@@ B@@ und@@ le@@ () { java.sql.@@ Tim@@ est@@ am@@ p t@@ s = new java.sql.@@ Tim@@ est@@ amp@@ (@@ Test@@ Time@@ Util.@@ ST@@ AR@@ T@@ .@@ to@@ E@@ po@@ ch@@ il@@ li@@ ()); com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = new com.google.gerrit.reviewdb.client.Account@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ group@@ "), new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (1@@ ), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ group@@ -@@ 1@@ "), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er me@@ mb@@ er = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 0@@ ), group@@ .getId@@ ())); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t me@@ mber@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ me@@ mber@@ , new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ 00@@ 0@@ ), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id by@@ Id = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ group@@ .getId@@ (), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ sub@@ group@@ "@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d by@@ Id@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ by@@ Id, new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 3@@ 00@@ 0@@ ), t@@ s); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ group@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ Au@@ dit@@ ).@@ Au@@ dit@@ (@@ me@@ mber@@ Au@@ dit@@ ); }
private static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ From@@ Note@@ Data@@ (@@ byte@@ [] note@@ Data@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ note@@ Data@@ , java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); java.lang.String u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , null@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ UUID@@ _@@ P@@ AR@@ A@@ M@@ ); java.lang.String name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , null@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ NA@@ M@@ E_@@ P@@ AR@@ A@@ M@@ )); if (@@ u@@ id == null@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ UU@@ I@@ D for g@@ roup '@@ %s@@ '@@ ", name@@ )); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ u@@ u@@ id@@ ), name); }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.lang.@@ Sy@@ ste@@ m.@@ id@@ enti@@ ty@@ Hash@@ Code@@ (@@ this@@ ); }
private java.util.@@ Optional@@ <java.lang.String> get@@ New@@ Name@@ () { if (@@ group@@ Update.@@ is@@ P@@ res@@ ent@@ ()) { return group@@ Update@@ .get@@ ().get@@ Name@@ ().@@ map@@ (@@ java.util.@@ Optional@@ .@@ of@@ (@@ group@@ Cre@@ ation@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ group@@ Cre@@ ation@@ )); } return com.google.common.collect.Immutable@@ Set.@@ of@@ (); }
default boolean ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (@@ @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { return false@@ ; }
@java.lang.Override public boolean ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id id : ext@@ er@@ n@@ al@@ Id@@ s) { if (id@@ .@@ toString@@ ().@@ contains(@@ com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ )) { return true@@ ; } } return false@@ ; }
@java.lang.Override public boolean ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id id : ext@@ er@@ n@@ al@@ Id@@ s) { if (id@@ .@@ toString@@ ().@@ contains(@@ com.google.gerrit.server.@@ auth.@@ o@@ auth.@@ S@@ CH@@ E@@ M@@ E_@@ E@@ X@@ T@@ ER@@ N@@ AL@@ )) { return true@@ ; } } return false@@ ; }
private boolean pro@@ cess@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ ) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.@@ de@@ bug@@ (("@@ pro@@ cess@@ ing ac@@ count " + (account@@ .getUser@@ Name@@ ()))); try { if (((@@ account@@ .getUser@@ Name@@ ()) != null@@ ) && (!(@@ re@@ al@@ m.@@ is@@ Active@@ (account@@ Name@@ ()@@ )))) { java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > id@@ s = ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getAccount@@ ().get@@ Id()); if (re@@ al@@ m.@@ ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (id@@ s@@ )) { s@@ .@@ de@@ ac@@ ti@@ v@@ ate@@ (account@@ Id()); com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.@@ info@@ (("@@ de@@ ac@@ ti@@ v@@ ate@@ d ac@@ count " + (account@@ .getUser@@ Name@@ ()))); return true@@ ; } } catch (@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception e) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.@@ info@@ ("@@ Account {@@ } al@@ read@@ y de@@ ac@@ ti@@ v@@ ated@@ , cont@@ in@@ u@@ ing.@@ .@@ ", account@@ .getUser@@ Name()); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.error@@ ("@@ E@@ rror de@@ ac@@ ti@@ v@@ at@@ ing account@@ : {@@ } {}@@ ) {}@@ ", account@@ .getUser@@ Name@@ (), account@@ .getAccount@@ ().get@@ Id(), e.get@@ Message@@ (), e); } return false@@ ; }
private static boolean a@@ re@@ By@@ Id@@ Au@@ dit@@ s@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > review@@ Db@@ By@@ Id@@ Au@@ dit@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > note@@ Db@@ By@@ Id@@ Au@@ dit@@ s) { com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > review@@ Db@@ By@@ Id@@ Au@@ dit@@ s@@ By@@ Id = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ review@@ Db@@ By@@ Id@@ Au@@ dit@@ s); com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > note@@ Db@@ By@@ Id@@ Au@@ dit@@ s@@ By@@ Id = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ note@@ Db@@ By@@ Id@@ Au@@ dit@@ s); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ a@@ re@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ review@@ Db@@ By@@ Id@@ Au@@ dit@@ s@@ Au@@ dit@@ By@@ Id, note@@ Db@@ By@@ Id@@ Au@@ dit@@ s@@ By@@ Id@@ Au@@ dit@@ Id); }
private static com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > to@@ Member@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Member@@ Id(@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > me@@ mber@@ Au@@ dit@@ s) { return me@@ mber@@ Au@@ dit@@ s.@@ stream@@ ().@@ f@@ l@@ at@@ Map@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le@@ :@@ to@@ Au@@ dit@@ Ent@@ ri@@ es@@ ).@@ collec@@ t(@@ com.google.common.collect.@@ Multimap@@ s.@@ to@@ Multimap@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ :@@ get@@ T@@ arget@@ , java.util.@@ f@@ unc@@ tion.@@ F@@ unc@@ tion.@@ id@@ enti@@ ty@@ (), com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ t@@ ree@@ Set@@ Val@@ u@@ es(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ A@@ U@@ D@@ I@@ T_@@ N@@ T@@ R@@ Y_@@ CO@@ M@@ P@@ AR@@ )@@ :@@ bu@@ ild@@ )); }
private static boolean a@@ re@@ Member@@ Au@@ dit@@ s@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > review@@ Db@@ Member@@ Au@@ dit@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > note@@ Db@@ Member@@ Au@@ dit@@ s) { com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ to@@ Member@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Member@@ Au@@ dit@@ s); com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > note@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ to@@ Member@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Member@@ Id(@@ note@@ Db@@ Member@@ Au@@ dit@@ s); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ a@@ re@@ Con@@ si@@ der@@ E@@ qual@@ (@@ review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Au@@ dit@@ ); }
private static boolean a@@ re@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id, com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > note@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id@@ ) { for (java.lang.String me@@ mber@@ Id : review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id.@@ key@@ Set@@ ()) { java.util.List<@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > review@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es = com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ .get(@@ me@@ mber@@ Id@@ )); java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > note@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es = note@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Id@@ .get(@@ me@@ mber@@ Id); int review@@ Db@@ In@@ de@@ x = 0; for (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try note@@ Db@@ Au@@ dit@@ : note@@ Db@@ Au@@ dit@@ es) { java.util.Set<@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try : note@@ Db@@ Au@@ dit@@ In@@ de@@ x = new java.util.Hash@@ Set<@@ >(); while (@@ review@@ Db@@ In@@ de@@ x < (@@ review@@ Db@@ Au@@ dit@@ ); } ri@@ es.@@ size@@ ())) { com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try = review@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es@@ .get(@@ review@@ Db@@ Index@@ Db@@ Db@@ Index@@ ); if (!(@@ review@@ Db@@ Au@@ dit@@ E@@ n@@ try@@ .get@@ Action@@ ().equals(@@ note@@ Db@@ Au@@ dit@@ E@@ n@@ try@@ .get@@ Action@@ ()))) { break@@ ; } } return true@@ ; }
private static com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > by@@ Id@@ Au@@ dit@@ s) { return com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ t@@ ree@@ Set@@ Multimap@@ .@@ remove@@ Key@@ s(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ :@@ get@@ T@@ arget@@ , java.util.@@ f@@ unc@@ tion.@@ F@@ unc@@ tion.@@ F@@ unc@@ tion.@@ id@@ enti@@ ty@@ (), com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ t@@ ree@@ Set@@ Val@@ u@@ es(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ D@@ I@@ T_@@ N@@ T@@ R@@ Y_@@ CO@@ M@@ P@@ AR@@ )@@ :@@ bu@@ ild@@ )); }
public java.lang.String get@@ Name@@ () { return ext@@ er@@ n@@ al@@ Id@@ ; }
private static org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ U@@ ti@@ l note@@ Util@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ , java.lang.String an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name, com.google.gerrit.server.@@ Current@@ User u@@ , java.util.@@ D@@ ate wh@@ en@@ ) { com.google.gerrit.server.notedb.@@ Ab@@ str@@ act@@ Change@@ Update.@@ check@@ User@@ Type@@ (@@ u@@ ); if (@@ u instanceof com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) { return note@@ Util@@ .@@ new@@ Ident@@ (@@ u@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Account@@ (), wh@@ en@@ , server@@ Ident@@ ); } else if (@@ u instanceof com.google.gerrit.server.@@ In@@ ternal@@ User@@ ) { return server@@ Ident@@ ; } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); }
public java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (!(@@ group@@ s@@ M@@ igration.@@ write@@ To@@ NoteDb@@ ())) { return new java.util.ArrayList<@@ >(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = repo@@ .get@@ All@@ Ref@@ s(); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); com.google.common.collect.@@ B@@ i@@ Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , java.lang.String> name@@ Ma@@ p = com.google.common.collect.@@ Hash@@ B@@ i@@ Map.@@ create@@ (); read@@ Group@@ s(@@ repo@@ , ref@@ s, pro@@ ble@@ m@@ s, by@@ UUID@@ ); read@@ Group@@ Nam@@ es@@ (repo, ref@@ s, pro@@ ble@@ m@@ s, pro@@ ble@@ m@@ s, pro@@ ble@@ m@@ s.@@ isEmpty())) { return pro@@ ble@@ ms@@ ; } pro@@ ble@@ m@@ s = check@@ G@@ lobal@@ Con@@ si@@ st@@ en@@ c@@ y(@@ by@@ UUID@@ , name@@ Map@@ ); return pro@@ ble@@ ms@@ ; }
public java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ () throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > group@@ s = new java.util.Hash@@ Map@@ <@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = g@@ lobal@@ Check@@ er.@@ check@@ (repo, group@@ s); if (!(@@ pro@@ ble@@ m@@ s.@@ isEmpty())) { return pro@@ ble@@ ms@@ ; } for (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g : group@@ s.@@ values@@ ()) { pro@@ ble@@ m@@ s.@@ add@@ All(@@ check@@ Group@@ (@@ g@@ , group@@ s@@ )); } return pro@@ ble@@ ms@@ ; } }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result check@@ (@@ org.eclipse.jgit.lib.Repository repo@@ ) throw@@ s java.io.IOException { com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result r = do@@ Check@@ (repo@@ ); if (!(@@ r.@@ pro@@ ble@@ m@@ s.@@ isEmpty())) { r.@@ u@@ u@@ id@@ To@@ Group@@ Ma@@ p = null@@ ; } return r@@ ; }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (@@ h@@ e@@ al@@ th@@ y@@ ) { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ OK@@ ); } else { try { r@@ s@@ p.@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ .@@ H@@ e@@ al@@ Servlet.@@ LO@@ G@@ .@@ error@@ ("@@ Fai@@ le@@ d to sen@@ d er@@ ror res@@ pon@@ se@@ ", e); } } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { this@@ .@@ h@@ al@@ th@@ y = true@@ ; }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { wh@@ en@@ (c@@ urrent@@ User@@ Provider@@ Mo@@ ck@@ .get@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ urrent@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (c@@ urrent@@ User@@ Mo@@ ck@@ .get@@ Capabili@@ ti@@ es@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ ap@@ abili@@ ty@@ Control@@ Mo@@ ck@@ ); wh@@ en@@ (c@@ ap@@ abili@@ ty@@ Control@@ Mo@@ c@@ k.@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); servle@@ t = new com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ H@@ e@@ al@@ th@@ Servlet@@ (@@ te@@ mp@@ F@@ ol@@ der@@ .get@@ R@@ oo@@ t@@ ().to@@ Path@@ (), current@@ User@@ Provider@@ Mo@@ ck@@ ); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ HttpServlet@@ Response r@@ sp@@ ) { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ F@@ OR@@ B@@ ID@@ DE@@ N@@ ); return@@ ; } try { set@@ Un@@ h@@ e@@ al@@ th@@ y@@ (); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t un@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ HttpServlet@@ Response r@@ sp@@ ) { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ F@@ OR@@ B@@ ID@@ DE@@ N@@ ); return@@ ; } try { set@@ H@@ e@@ al@@ th@@ y@@ (); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
private void send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ HttpServlet@@ Response r@@ sp@@ , int status@@ Code@@ ) { try { r@@ s@@ p.@@ send@@ Error@@ (@@ status@@ Code@@ ); } catch (java.io.IOException e) { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); com.ericsson.gerrit.plugins.highavailability.@@ h@@ al@@ th@@ e@@ .@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to sen@@ d er@@ ror res@@ pon@@ se@@ ", e); } }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ HttpServlet@@ Response r@@ sp@@ ) { if (@@ un@@ h@@ e@@ al@@ th@@ y@@ File@@ .@@ ex@@ ist@@ s()) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ .@@ SC_@@ S@@ ER@@ V@@ I@@ C@@ E_@@ U@@ NA@@ V@@ A@@ IL@@ AB@@ LE@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { this@@ .@@ h@@ e@@ al@@ th@@ y = false@@ ; }
private static int get@@ In@@ t(@@ org.eclipse.jgit.lib.@@ Config cfg@@ , java.lang.String s@@ ection@@ , java.lang.String name, int default@@ Value@@ ) { try { return cfg@@ .get@@ In@@ t@@ (s@@ ection@@ , name, default@@ Value@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.error@@ ("@@ in@@ vali@@ d valu@@ e for {@@ }; us@@ ing default valu@@ e {}@@ ", name, default@@ Value@@ ); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.@@ de@@ bug@@ (("@@ Fai@@ le@@ d to ret@@ ri@@ ev@@ e int@@ e@@ g@@ er value@@ : " + (@@ e.get@@ Message@@ ()@@ )), e); return default@@ Value@@ ; } }
private static boolean get@@ Boolean@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , java.lang.String s@@ ection@@ , java.lang.String name, boolean default@@ Value@@ ) { try { return cfg@@ .get@@ Boolean@@ (s@@ ection@@ , name, default@@ Value@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.error@@ ("@@ in@@ vali@@ d valu@@ e for {@@ }; us@@ ing default valu@@ e {}@@ ", name, default@@ Value@@ ); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.@@ de@@ bug@@ (("@@ Fai@@ le@@ d to ret@@ ri@@ ev@@ e boolean value@@ : " + (@@ e.get@@ Message@@ ()@@ )), e); return default@@ Value@@ ; } }
private void e@@ vi@@ ct@@ Cache@@ (@@ com.google.common.@@ cache.@@ Cache@@ <?@@ , ?@@ > cach@@ e@@ , java.lang.String cach@@ e@@ Name, java.lang.O@@ bject key@@ ) { if (@@ Con@@ stant@@ s.@@ P@@ RO@@ JEC@@ T_@@ L@@ IS@@ T@@ .equals(@@ cach@@ e@@ Name@@ )) { cache.@@ in@@ vali@@ date@@ All@@ (); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ In@@ vali@@ d al@@ l {}@@ ", cach@@ e@@ Name); } else { cache.@@ in@@ vali@@ date@@ (key@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ In@@ vali@@ d {@@ } f@@ ro@@ m {}@@ ", key@@ , cach@@ e@@ Name); } }
public java.lang.String@@ [] get@@ I@@ s@@ s@@ s@@ s@@ ue@@ Id@@ s(@@ java.lang.String h@@ a@@ y@@ st@@ ack@@ ) { java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ ter@@ n pat@@ ter@@ n = it@@ s@@ Config@@ .get@@ I@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ (); if (p@@ at@@ ter@@ n == null@@ ) return new java.lang.String@@ [@@ ]@@ { }; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ base.@@ I@@ s@@ s@@ s@@ s@@ ue@@ Ex@@ tr@@ actor@@ .@@ log.@@ de@@ bug@@ ("@@ Match@@ ing '@@ {}@@ ' ag@@ ain@@ s@@ t '@@ ", h@@ a@@ y@@ st@@ ack@@ , pat@@ tern@@ .@@ pat@@ tern@@ ()); java.util.@@ Set@@ <java.lang.String> is@@ s@@ ue@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); java.util.@@ re@@ g@@ ex@@ .@@ Match@@ er match@@ er = pat@@ tern@@ .@@ match@@ er@@ (@@ h@@ a@@ y@@ st@@ ack@@ ); int group@@ Id@@ x = it@@ s@@ Config@@ .get@@ I@@ s@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ Group@@ Index@@ (); while (@@ match@@ er.@@ fin@@ d@@ ()) { java.lang.String is@@ s@@ ue@@ Id = match@@ er@@ .g@@ roup@@ (@@ group@@ Id@@ x@@ ); if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ is@@ s@@ ue@@ Id@@ ))) { is@@ su@@ es.@@ add(@@ is@@ s@@ ue@@ Id); } } return is@@ su@@ es.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ is@@ su@@ es.@@ size@@ ()@@ ]@@ ); }
public boolean isE@@ n@@ able@@ d(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ N@@ K@@ , java.lang.String ref@@ Name) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get(@@ project@@ N@@ K@@ ); if (project@@ State == null@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config.@@ log.error@@ ("@@ Fai@@ le@@ d to ch@@ ec@@ k if {@@ } is enable@@ d for project {}@@ : P@@ roject not fo@@ und@@ ", plugin@@ Name, project@@ .get(), project@@ .get()); return false@@ ; } if (@@ isE@@ n@@ for@@ ce@@ d@@ By@@ An@@ y@@ Parent@@ Project@@ (ref@@ Name, project@@ State@@ )) { return true@@ ; } return (!(@@ "@@ .equals(@@ plugin@@ C@@ fg@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ State@@ , plugin@@ Name@@ ).get@@ String@@ ("@@ enable@@ d@@ ", false@@ "@@ )))) && (@@ isE@@ n@@ able@@ d@@ For@@ Branch@@ (project@@ State@@ , ref@@ Name@@ )); }
@org.junit.Test public void re@@ buil@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ M@@ igration.@@ write@@ To@@ NoteDb@@ ()).@@ is@@ True@@ (); as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ M@@ igration.@@ read@@ Changes@@ ()).@@ is@@ F@@ alse@@ (); com.google.gerrit.extensions.common.@@ Group@@ Info g = g@@ Api@@ .g@@ roup@@ s().@@ create(@@ name@@ ("@@ group@@ "@@ )@@ ).get@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g.@@ id); java.lang.String ref@@ Name = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ id); org.eclipse.jgit.lib.ObjectId old@@ Id@@ ; com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le old@@ B@@ und@@ le@@ ; try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { old@@ Id = repo.@@ ex@@ act@@ Ref@@ (ref@@ Name@@ ).get@@ Object@@ Id(); old@@ B@@ und@@ le = b@@ und@@ le@@ Factory.@@ from@@ NoteDb@@ (repo, u@@ u@@ id); org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ repo@@ ).@@ delete@@ (ref@@ Name); } assert@@ Th@@ at(@@ admin@@ Rest@@ Session@@ .@@ post@@ ((("@@ /@@ group@@ s/@@ " + u@@ u@@ id@@ ) + "@@ /@@ re@@ bu@@ ild@@ "), "@@ ).get@@ En@@ ti@@ ty@@ Content@@ ()).@@ isEqualTo@@ ("@@ N@@ o d@@ if@@ f@@ eren@@ ce@@ s b@@ et@@ we@@ en ReviewDb an@@ d NoteDb@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (ref@@ Name); assert@@ Th@@ at(@@ ref@@ ).@@ is@@ Not@@ Null@@ (); assert@@ Th@@ at(@@ ref@@ .get@@ Object@@ Id@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ old@@ Id); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le new@@ B@@ und@@ le = b@@ und@@ le@@ Factory.@@ from@@ NoteDb@@ (repo, u@@ u@@ u@@ u@@ id); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le@@ .g@@ roup@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le@@ .g@@ roup@@ ()); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le.@@ me@@ mber@@ s@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le.@@ by@@ Id@@ Au@@ dit@@ ()); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le.@@ by@@ Id@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le.@@ by@@ Id@@ Au@@ dit@@ ()); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le.@@ by@@ Id@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le.@@ by@@ Id@@ Au@@ dit@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le.@@ by@@ Id@@ Au@@ dit@@ ()); } }
private java.lang.String get@@ Comment@@ Change@@ Event@@ (java.lang.String action@@ , java.lang.String pre@@ fix@@ , java.util.Map<java.lang.String, java.lang.String> map@@ ) { java.lang.String re@@ t = "@@ "; java.lang.String change@@ N@@ u@@ mb@@ er = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ change@@ Number@@ ")); if (!@@ (change@@ N@@ u@@ mb@@ er.@@ isEmpty())) { change@@ N@@ u@@ mb@@ er +@@ = " + "; } re@@ t +@@ = ("@@ Change " + change@@ Number@@ ) + action@@ ; java.lang.String submit@@ ter = for@@ m@@ at@@ Per@@ son@@ (p@@ re@@ fix@@ , map@@ ); if (!(@@ submit@@ ter.@@ isEmpty())) { re@@ t +@@ = " b@@ y " + submit@@ ter@@ ; } java.lang.String sub@@ ject = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ sub@@ ject@@ ")); if (!(@@ sub@@ ject.@@ isEmpty())) { re@@ t +@@ = "@@ :@@ \n@@ " + sub@@ ject@@ ; } java.lang.String re@@ as@@ on = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ re@@ as@@ on@@ ")); if (!(@@ re@@ as@@ on.@@ isEmpty())) { re@@ t +@@ = "@@ \n@@ Re@@ as@@ on@@ :@@ \n@@ " + re@@ as@@ on@@ ; } java.lang.String ur@@ l = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ change@@ Url@@ ")); if (!(@@ ur@@ l.@@ isEmpty())) { re@@ t +@@ = "@@ \n@@ " + (@@ it@@ s.@@ create@@ Link@@ For@@ W@@ e@@ bu@@ i@@ url@@ , url@@ )); } return ret@@ ; }
private java.lang.String for@@ m@@ at@@ Per@@ son@@ (java.lang.String pre@@ fix@@ , java.util.Map<java.lang.String, java.lang.String> map@@ ) { java.lang.String re@@ t = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ((@@ pre@@ fi@@ x + "@@ Name@@ "@@ ))); if (re@@ t.@@ isEmpty()) { return ret@@ ; } return ret@@ ; }
static java.lang.String get@@ Owner@@ s@@ File@@ Name@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.query.change.Change@@ Data c@@ ) { if (((@@ com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ ) != null@@ ) && (project@@ State != null@@ )) { java.lang.String name = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ State@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ ).get@@ String@@ (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S_@@ F@@ IL@@ E_@@ NAME@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S@@ ); if (@@ name.@@ tri@@ m@@ ().@@ e@@ quals("@@ ")) { com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ log.error@@ ((((@@ (("@@ P@@ roject " + (c@@ .@@ project@@ ())) + " h@@ a@@ s w@@ ron@@ g ") + (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S_@@ F@@ IL@@ E_@@ NAME@@ )) + "@@ : \"@@ ") + name@@ ) + "@@ \@@ " for (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config@@ .getChange@@ Id@@ (c@@ )@@ ))); return com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S@@ ; } return name@@ ; }
private boolean sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ State.@@ .@@ . st@@ at@@ es) { try { com.google.gerrit.server.project.Project@@ State project@@ State@@ ; try { project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (java.io.IOException e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } return sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ , user@@ Provider@@ .get()); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception err@@ ) { state@@ Lo@@ g.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ s@@ our@@ ce project %s not avail@@ able@@ ", project@@ ), err@@ , st@@ at@@ es@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (@@ e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } return false@@ ; }
public java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ ter@@ n get@@ I@@ s@@ ue@@ Pat@@ tern@@ () { java.util.@@ Optional@@ <java.lang.String> m@@ atch = com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (get@@ Comment@@ Link@@ Info@@ ()@@ )).@@ filter@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ base.@@ it@@ s.@@ Predicate@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ >() { @java.lang.Override public boolean apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info input@@ ) { return ((@@ input.@@ match@@ ) != null@@ ) && (!@@ (in@@ put.@@ match@@ .@@ tri@@ m@@ ().@@ isEmpty@@ ())); } }@@ ).@@ tran@@ s@@ for@@ m@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ F@@ unc@@ tion@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ , java.lang.String@@ >() { @java.lang.Override public java.lang.String apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info input@@ ) { return input.@@ match@@ ; } }@@ ).@@ last@@ (); java.lang.String de@@ f@@ Pat@@ ter@@ n = gerrit@@ Config@@ .get@@ String@@ ("@@ comment@@ link@@ ", get@@ Comment@@ Link@@ Name@@ (), "@@ match@@ "); }
public java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > ext@@ r@@ act@@ From@@ (@@ PatchSet@@ Attri@@ but@@ e patchSet@@ Attribute@@ ) { java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ revision@@ ", patchSet@@ Attri@@ but@@ e.@@ revision@@ )); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ patch@@ -@@ set@@ -@@ n@@ umber@@ ", java.lang.String.@@ value@@ Of(@@ patchSet@@ Attri@@ but@@ e.@@ n@@ umber@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ patchSet@@ Number@@ ", java.lang.String.@@ value@@ Of(@@ patchSet@@ Attri@@ but@@ e.@@ n@@ umber@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ ref@@ ", patchSet@@ Attri@@ but@@ e.@@ ref@@ )); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ cre@@ ated@@ -@@ on@@ ", patchSet@@ Attri@@ but@@ e.@@ cre@@ ated@@ On@@ .@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ cre@@ ated@@ On@@ ", patchSet@@ Attri@@ but@@ e.@@ cre@@ ated@@ On@@ .@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ parent@@ s", patchSet@@ Attri@@ but@@ e.@@ parent@@ s.@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ de@@ le@@ tion@@ s", java.lang.@@ Integ@@ er.@@ toString@@ (@@ patchSet@@ Attri@@ but@@ e.@@ size@@ De@@ le@@ tion@@ s@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ in@@ ser@@ tion@@ s", java.lang.@@ Integ@@ er.@@ toString@@ (@@ patchSet@@ Attri@@ but@@ e.@@ size@@ In@@ ser@@ tion@@ s@@ ))); pro@@ per@@ ti@@ es.@@ add@@ All(@@ ext@@ r@@ act@@ From@@ (@@ patchSet@@ Attri@@ but@@ e.@@ upload@@ er, "@@ upload@@ er@@ ")); pro@@ per@@ ti@@ es.@@ add@@ All(@@ ext@@ r@@ act@@ From@@ (@@ patchSet@@ Attri@@ but@@ e.@@ author@@ , "@@ author@@ ")); }
public static com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le compare@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le check@@ Db@@ B@@ und@@ le = true@@ ; return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le@@ ) ? check@@ Not@@ Null@@ (@@ check@@ State@@ ((!@@ (@@ review@@ Db@@ B@@ und@@ le@@ Db@@ B@@ und@@ le@@ , true@@ ); }
private void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ IO@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { if (c@@ an@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Permission@@ (@@ notes@@ .getChange@@ (), current@@ User@@ , va@@ l@@ )) { return@@ ; } per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (@@ notes@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REV@@ I@@ EW@@ ER@@ ); }
public void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { check@@ Remo@@ ve@@ Reviewer@@ (@@ notes@@ , current@@ User@@ , reviewer@@ , 0); }
@org.junit.Test public void test@@ H@@ e@@ al@@ th@@ Check@@ Enabled(@@ ) throw@@ s java.lang.Exception { wh@@ en@@ (@@ config@@ Mo@@ ck@@ .get@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _S@@ EC@@ T@@ ION@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ NA@@ B@@ LE@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ DE@@ FA@@ U@@ L@@ T_@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _@@ E@@ NA@@ B@@ L@@ ED@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ false@@ ); in@@ iti@@ ali@@ ze@@ Config@@ ur@@ ation@@ (); assert@@ Th@@ at(@@ config@@ ur@@ ation.@@ h@@ e@@ al@@ th@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ F@@ alse@@ (); }
@java.lang.Override public org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment apply(@@ org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment base@@ , org.@@ junit.@@ run@@ n@@ er.@@ Des@@ crip@@ tion des@@ cription@@ ) { return new org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment@@ () { @java.lang.Override public void e@@ valu@@ ate@@ () throw@@ s java.lang.@@ Throwable { if ((@@ com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test@@ ) == null@@ ) { com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test = des@@ cription@@ ; } b@@ e@@ for@@ e@@ Test@@ (@@ des@@ cription@@ ); try (com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter re@@ set@@ ter = re@@ set@@ Project@@ s(@@ all@@ Project@@ s, all@@ User@@ s@@ )) { base.@@ e@@ valu@@ ate@@ (); } final@@ l@@ y { af@@ ter@@ Test@@ (); } } }; }
protected com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter re@@ set@@ Project@@ s(@@ com.google.gerrit.reviewdb.client.@@ Project.@@ .@@ . project@@ s) throw@@ s java.lang.Exception { return new com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter@@ (repo@@ Manag@@ er, met@@ a@@ Data@@ Update@@ Factory@@ , project@@ Cache@@ , project@@ s); }
@java.lang.Override public void e@@ valu@@ ate@@ () throw@@ s java.lang.@@ Throwable { if ((@@ com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test@@ ) == null@@ ) { com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test = des@@ cription@@ ; } b@@ e@@ for@@ e@@ Test@@ (@@ des@@ cription@@ ); try (com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter re@@ set@@ ter = re@@ set@@ Project@@ s(@@ all@@ Project@@ s, all@@ User@@ s@@ )) { base.@@ e@@ valu@@ ate@@ (); } final@@ l@@ y { af@@ ter@@ Test@@ (); } }
public static com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > load@@ All@@ Group@@ Ref@@ eren@@ ces@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ sitor@@ y.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ M@@ ES@@ ); if (re@@ f == null@@ ) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } try (@@ org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ sitor@@ y@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er read@@ er = rev@@ Wal@@ k@@ .get@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.revwalk.RevCommit notes@@ Commit = rev@@ Wal@@ k.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = org.eclipse.jgit.@@ not@@ es.@@ Note@@ Map.@@ read@@ (@@ read@@ er, notes@@ Commit@@ ); com.google.common.collect.Immutable@@ Set.@@ Builder@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ eren@@ ce@@ s = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , java.lang.String> u@@ u@@ id@@ Ma@@ p = new java.util.Hash@@ Map@@ <@@ >(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > name@@ Ma@@ p = new java.util.Hash@@ Map@@ <@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e : note@@ Map@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ .get@@ Notes@@ Ref@@ eren@@ ce@@ (@@ read@@ er, note@@ .get@@ Data@@ ()); group@@ Ref@@ eren@@ ce@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ Ref@@ eren@@ ce@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ check@@ Con@@ si@@ st@@ en@@ c@@ y(@@ group@@ Ref@@ eren@@ ce@@ , u@@ u@@ id@@ Map@@ , name@@ Map@@ ); } return group@@ Ref@@ eren@@ ces.@@ bu@@ ild@@ (); } }
public static com.google.gerrit.server.g@@ roup.@@ Group@@ Config create@@ For@@ New@@ Group@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup.@@ Group@@ Config@@ (@@ group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), repo@@ sitor@@ y@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ ); group@@ Config.@@ set@@ Cre@@ ation@@ (@@ group@@ Cre@@ ation@@ ); return group@@ Config@@ ; }
public static com.google.gerrit.server.g@@ roup.@@ Group@@ Config load@@ For@@ Group@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup.@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, repo@@ sitor@@ y@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ ); return group@@ Config@@ ; }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > get@@ Load@@ ed@@ Group@@ () { check@@ Load@@ ed@@ (); load@@ ed@@ Group@@ .@@ P@@ res@@ ent@@ (@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > check@@ Load@@ ed@@ Group@@ s = get@@ Notes@@ (t@@ )); return load@@ ed@@ Group@@ ; }
public static com.google.gerrit.server.g@@ roup.@@ Group@@ Config load@@ For@@ Group@@ S@@ n@@ ap@@ sh@@ o@@ t(@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, org.eclipse.jgit.lib.ObjectId commit@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup.@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, repo@@ sitor@@ y@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ , commit@@ Id); return group@@ Config@@ ; }
private java.util.@@ Optional@@ <@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ ternal@@ > load@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ ternal@@ > g@@ roup = group@@ Cache@@ .get(@@ group@@ Ref@@ eren@@ ce@@ .get@@ UUID@@ ()).@@ map@@ (@@ In@@ ternal@@ Group@@ Description@@ :@@ new@@ ); if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ As@@ W@@ ar@@ n@@ ing@@ ("@@ Group %s (@@ %@@ s) f@@ ro@@ m g@@ roup name is f@@ ai@@ le@@ d to lo@@ ad f@@ ro@@ m g@@ roup ref@@ "); } return group@@ ; }
private java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> suggest@@ Group@@ s() throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gwtorm.server.OrmException { if (@@ con@@ flict@@ ing@@ Su@@ ggest@@ Parameter@@ s()) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ Y@@ o@@ u sh@@ o@@ ul@@ d on@@ l@@ y h@@ av@@ e n@@ o m@@ or@@ e th@@ on@@ e --@@ project an@@ d -@@ n w@@ it@@ h --@@ suggest@@ "); } java.util.List<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.collect.I@@ terable@@ s.@@ li@@ mit@@ (@@ group@@ Back@@ en@@ d.@@ suggest@@ (@@ suggest@@ , projects.@@ stream@@ ().@@ fin@@ d@@ Fi@@ rst@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ )), ((@@ li@@ mit@@ ) <@@ = 0 ? 1@@ 0 : java.lang.@@ M@@ ath@@ .@@ min@@ (@@ li@@ mit@@ , 1@@ 0@@ )@@ ))); java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> group@@ Info@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ group@@ Ref@@ s.@@ size()); for (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f : group@@ Ref@@ s) { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c des@@ c = group@@ Back@@ end@@ .get(@@ ref@@ .get@@ UUID@@ ()); if (@@ des@@ c != null@@ ) { group@@ Info@@ s.add(@@ j@@ son.@@ add@@ Option@@ s(@@ o@@ ption@@ s@@ )@@ .@@ for@@ m@@ at(@@ des@@ c@@ )); } else if ((@@ group@@ Back@@ end@@ ) instanceof com.google.gerrit.server.account.@@ In@@ ternal@@ Group@@ Back@@ end@@ ) { com.google.gerrit.server.g@@ roup.@@ db.@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ W@@ ar@@ n@@ ing@@ ("@@ Group %s (@@ %@@ s) f@@ ro@@ m g@@ roup name is f@@ ai@@ le@@ d to lo@@ ad f@@ ro@@ m g@@ roup ref@@ .getName@@ (), ref@@ .get@@ UUID@@ ()); } } return group@@ Info@@ s; }
int fin@@ d@@ Approval@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cache@@ , com.google.gerrit.server.account.@@ Email@@ s email@@ s) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Check@@ er.@@ is@@ Ex@@ e@@ mp@@ t@@ From@@ Owner@@ (change@@ Data@@ )) { return 0; } com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Owner@@ s@@ Db db = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Cache@@ .get@@ Instance@@ ().get@@ (project@@ State@@ , account@@ Cache@@ , email@@ s, repo@@ sitor@@ y@@ , change@@ Data@@ ); if ((@@ db@@ .get@@ N@@ um@@ Owner@@ s()) <@@ = 0) { return 0; } if ((@@ min@@ Vo@@ te@@ L@@ ev@@ el@@ ) <@@ = 0) { min@@ Vo@@ te@@ L@@ e@@ ve@@ l = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config@@ .get@@ M@@ in@@ Owner@@ Vo@@ te@@ L@@ ev@@ el@@ (project@@ State@@ ); } com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Check@@ er.@@ log.@@ tr@@ a@@ ce@@ (("@@ fin@@ d@@ Ap@@ prova@@ l k@@ ey = " + (@@ db.@@ key@@ ))); return fin@@ d@@ Approval@@ (account@@ Cache@@ , db@@ ); }
static int get@@ M@@ in@@ Owner@@ Vo@@ te@@ L@@ ev@@ el@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ ) throw@@ s com.google.gwtorm.server.OrmException { return (@@ com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ ) == null@@ ) || (project@@ State == null@@ ) ? com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ min@@ Owner@@ Vo@@ te@@ L@@ e@@ ve@@ l : com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ State@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ ).get@@ In@@ t@@ (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ M@@ IN@@ _@@ O@@ W@@ N@@ ER@@ _@@ V@@ O@@ TE@@ _@@ LE@@ V@@ E@@ L@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ min@@ Owner@@ Vo@@ te@@ L@@ ev@@ el@@ ); }
public static com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info create@@ Tag@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , org.eclipse.jgit.revwalk.RevWalk r@@ w, com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, com.google.gerrit.server.@@ Web@@ Link@@ s link@@ s) throw@@ s java.io.IOException, org.eclipse.jgit.errors.@@ M@@ is@@ s@@ ing@@ Object@@ Exception { org.eclipse.jgit.revwalk.Rev@@ O@@ bject ob@@ ject = rw.@@ parse@@ An@@ y(@@ ref@@ .get@@ Object@@ Id()); boolean can@@ De@@ le@@ te = per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> web@@ Link@@ s = link@@ s.get@@ Tag@@ Link@@ s(@@ project@@ Name@@ .get(), ref@@ .getName@@ ()); if (@@ ob@@ ject instanceof org.eclipse.jgit.revwalk.Rev@@ Tag@@ ) { org.eclipse.jgit.revwalk.Rev@@ T@@ a@@ g t@@ a@@ g = ((@@ org.eclipse.jgit.revwalk.Rev@@ Tag@@ ) (@@ o@@ bject@@ )); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent tag@@ g@@ er = tag@@ .get@@ Tag@@ g@@ er@@ Ident@@ (); return new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ (ref@@ .getName@@ (), tag@@ .getName@@ (), tag@@ .get@@ Object@@ ().get@@ Name@@ (), tag@@ .get@@ F@@ ull@@ Message@@ ().@@ tri@@ m@@ (), (t@@ ag@@ g@@ er != null ? com.google.gerrit.server.@@ Comm@@ on@@ Con@@ ver@@ ter@@ s.@@ to@@ Git@@ Per@@ son@@ (t@@ ag@@ g@@ er@@ ) : null@@ ), can@@ Delete@@ , (t@@ ag@@ g@@ er != null ? new java.sql.@@ Tim@@ est@@ amp@@ (t@@ ag@@ g@@ er@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ()) : null@@ ), (@@ web@@ Link@@ s.@@ isEmpty@@ () ? null : web@@ Link@@ s@@ )); } java.sql.@@ Tim@@ est@@ am@@ p ti@@ m@@ est@@ am@@ p = (@@ ob@@ ject instanceof org.eclipse.jgit.revwalk.Rev@@ Commit@@ ) ? new java.sql.@@ Tim@@ est@@ amp@@ (((@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ ) (@@ o@@ bject@@ )@@ ).get@@ Commit@@ ter@@ Ident@@ ().get@@ Wh@@ en@@ ().get@@ Time@@ ()) : null@@ ; return new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ (ref@@ .getName@@ (), ref@@ .get@@ Object@@ Id@@ ().get@@ Name@@ (), can@@ Delete@@ , ti@@ m@@ est@@ amp@@ , web@@ Link@@ s.@@ isEmpty@@ () ? null : web@@ Link@@ s@@ )); }
@org.junit.Test public void li@@ ght@@ w@@ eight@@ Tag@@ () throw@@ s java.lang.Exception { g@@ ran@@ t@@ Tag@@ Permission@@ s(); com.google.gerrit.acceptance.@@ PushOne@@ Commit pu@@ s@@ h = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), test@@ Repo@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ .@@ to@@ ("@@ refs/heads/@@ master@@ "); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input@@ (); input.@@ re@@ f = "@@ v@@ 1@@ .@@ 0@@ "; input.@@ re@@ vi@@ sion = r@@ .get@@ Commit@@ ().get@@ Name@@ (); com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info result = tag@@ (in@@ put.@@ ref@@ ).@@ create@@ (in@@ put@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ ref@@ ).@@ isEqualTo@@ (((@@ R@@ _@@ T@@ A@@ G@@ S@@ ) + (in@@ put.@@ ref@@ ))); assert@@ Th@@ at(@@ result.@@ revision@@ ).@@ isEqualTo@@ (in@@ put.@@ revision@@ ); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ True@@ (); assert@@ Th@@ at(@@ result.@@ cre@@ ated@@ ).@@ isEqualTo(@@ ti@@ m@@ est@@ amp@@ (r@@ )); input.@@ re@@ f = "@@ refs/@@ tag@@ s/@@ v@@ 2.@@ 0@@ "; result = tag@@ (in@@ put.@@ ref@@ ).@@ create@@ (in@@ put@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ ref@@ ).@@ isEqualTo@@ (in@@ put.@@ ref@@ ); assert@@ Th@@ at(@@ result.@@ revision@@ ).@@ isEqualTo@@ (in@@ put.@@ revision@@ ); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ True@@ (); assert@@ Th@@ at(@@ result.@@ cre@@ ated@@ ).@@ isEqualTo(@@ ti@@ m@@ est@@ amp@@ (r@@ )); set@@ Api@@ User@@ (user@@ ); result = tag@@ put.@@ ref@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ F@@ alse@@ (); event@@ Recor@@ der@@ .@@ assert@@ Ref@@ Updated@@ Event@@ s(@@ project@@ .get(), result.@@ ref@@ , null@@ , result.@@ revision@@ ); }
public void set@@ Account@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ Load@@ ed@@ (); this@@ .@@ load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (@@ check@@ Not@@ Null@@ (account@@ )); this@@ .@@ re@@ gist@@ er@@ ed@@ O@@ n = account@@ .get@@ Re@@ gist@@ er@@ ed@@ On@@ (); }
public com.google.common.base.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Load@@ ed@@ () { return load@@ ed@@ Account@@ ; }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ revision@@ ) != null@@ ) { rw.@@ re@@ set@@ (); rw.@@ mar@@ k@@ Start@@ (@@ revision@@ ); rw.@@ s@@ ort@@ (@@ Rev@@ S@@ ort.@@ REV@@ ER@@ S@@ E@@ ); re@@ gist@@ er@@ ed@@ O@@ n = new java.sql.@@ Tim@@ est@@ amp@@ ((@@ (r@@ w.@@ next@@ ().get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ )); org.eclipse.jgit.lib.@@ Config cf@@ g = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (c@@ fg@@ , revision@@ .@@ name@@ ())); } is@@ Load@@ ed = true@@ ; } }
private java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Change.@@ Id, com.google.gerrit.server.notedb.Change@@ Notes@@ > open@@ Changes@@ By@@ Id@@ By@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key branch@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Change.@@ Id, com.google.gerrit.server.notedb.Change@@ Notes@@ > r = new java.util.Hash@@ Map@@ <@@ >(); for (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d : query@@ Provider@@ .get().@@ by@@ Branch@@ Open@@ (@@ branch@@ )) { r.@@ put@@ (c@@ d.@@ change@@ ().get@@ Id(), c@@ d.@@ notes@@ ()); } return r@@ ; }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ H@@ e@@ al@@ ty@@ () throw@@ s java.io.IOException { java.nio.file.@@ File@@ s.@@ create@@ File@@ (@@ te@@ mp@@ F@@ ol@@ der@@ .@@ new@@ F@@ ol@@ der@@ ("@@ un@@ h@@ e@@ al@@ th@@ y.@@ t@@ xt@@ ").@@ to@@ Path@@ ().@@ res@@ ol@@ ve@@ ("@@ ch@@ ild@@ ")); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Po@@ st@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ Mo@@ ck@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (@@ un@@ h@@ e@@ al@@ th@@ y@@ File@@ .@@ ex@@ ist@@ s()) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ .@@ SC_@@ S@@ ER@@ V@@ I@@ C@@ E_@@ U@@ NA@@ V@@ A@@ IL@@ AB@@ LE@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ Un@@ h@@ e@@ al@@ ty@@ () throw@@ s java.io.IOException { te@@ mp@@ F@@ ol@@ der.@@ delete@@ (); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Delete@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { set@@ H@@ e@@ al@@ th@@ y@@ (); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t h@@ al@@ th@@ e@@ al@@ th@@ y@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ al@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { servle@@ t = new com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ H@@ e@@ al@@ th@@ Servlet@@ (@@ te@@ mp@@ F@@ ol@@ der@@ .get@@ R@@ oo@@ t@@ ().to@@ Path@@ ()); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { set@@ Un@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ al@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t un@@ h@@ al@@ th@@ e@@ al@@ th@@ e@@ w w w w w {}@@ ", com.google.gerrit.httpd.@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ .@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t un@@ h@@ al@@ th@@ e@@ al@@ th@@ e@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ al@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Pu@@ re@@ Rev@@ er@@ t@@ Info pu@@ re@@ Rev@@ er@@ t(@@ @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String c@@ l@@ ai@@ m@@ ed@@ O@@ ri@@ gin@@ al@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return cal@@ c@@ ul@@ ate@@ Pu@@ Rev@@ er@@ t@@ Rev@@ er@@ t@@ ("@@ Pu@@ s@@ t fo@@ und@@ "); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot com@@ e p@@ ur@@ e rev@@ er@@ t@@ ", e); } }
@@@ com.google.gerrit.common.@@ Null@@ able public java.lang.@@ B@@ oolean is@@ Pu@@ re@@ Rev@@ er@@ t@@ () throw@@ s com.google.gwtorm.server.OrmException { if ((@@ change@@ ().get@@ Rev@@ er@@ t@@ Of@@ ()) == null@@ ) { return null@@ ; } try { return re@@ pu@@ re@@ Rev@@ er@@ t@@ .get@@ Pu@@ re@@ Rev@@ er@@ t(@@ notes@@ (), null@@ ).@@ is@@ Pu@@ re@@ Rev@@ er@@ t@@ ; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ co@@ ul@@ d not com@@ e put@@ e p@@ ur@@ e rev@@ er@@ t@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Pu@@ re@@ Rev@@ er@@ t@@ Info apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { return cal@@ c@@ ul@@ ate@@ Pu@@ re@@ Rev@@ er@@ t@@ .get@@ Pu@@ re@@ Rev@@ er@@ t@@ (rsrc@@ .get@@ Notes@@ (), c@@ l@@ ai@@ m@@ ed@@ O@@ ri@@ gin@@ al@@ ); }
private void set@@ Up@@ (@@ java.lang.O@@ bject t@@ arget@@ ) throw@@ s java.lang.Exception { in@@ jec@@ tor = com.google.inject.@@ G@@ ui@@ ce@@ .@@ create@@ Injector@@ (@@ new com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ ()); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); l@@ if@@ ec@@ yc@@ le = new com.google.gerrit.@@ l@@ if@@ ec@@ yc@@ le.@@ L@@ if@@ ec@@ yc@@ le@@ Manag@@ er@@ (); l@@ if@@ ec@@ yc@@ le.@@ add(@@ in@@ jec@@ tor@@ ); l@@ if@@ ec@@ yc@@ le.@@ start@@ (); try (@@ com.google.gerrit.reviewdb.server.ReviewDb un@@ der@@ ly@@ ing@@ Db = in@@ M@@ em@@ ory@@ Dat@@ abase@@ .get@@ Dat@@ abase@@ ().@@ open@@ ()) { schema@@ Cre@@ ator@@ .@@ create(@@ un@@ der@@ ly@@ ing@@ Db@@ ); } db = schema@@ Factory.@@ open@@ (); set@@ Api@@ User@@ (account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id()); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s(@@ t@@ arget@@ ); }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ Un@@ H@@ e@@ al@@ th@@ y@@ () throw@@ s java.io.IOException { te@@ mp@@ F@@ ol@@ der.@@ delete@@ (); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Delete@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ Mo@@ ck@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
private java.lang.String get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , Site@@ Path@@ s sit@@ e) { java.lang.String loc@@ ation = cfg@@ .get@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ J@@ G@@ RO@@ U@@ P@@ S@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ RO@@ T@@ O@@ L@@ _S@@ T@@ AC@@ K@@ _@@ K@@ E@@ Y@@ ); if (@@ loc@@ ation == null@@ ) { return null@@ ; } java.nio.file.@@ Pat@@ h p = java.nio.file.@@ Path@@ s.get(@@ loc@@ ation@@ ); if (@@ p.@@ is@@ Ab@@ so@@ lu@@ te@@ ()) { return loc@@ ation@@ ; } return sit@@ e.@@ et@@ c@@ _@@ di@@ r.@@ res@@ ol@@ ve@@ (@@ loc@@ ation@@ ).@@ toString@@ (); }
public java.lang.String pro@@ to@@ co@@ l@@ St@@ ack@@ () { return pro@@ to@@ co@@ l@@ ; }
private org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l get@@ Ch@@ an@@ ne@@ l@@ () { java.lang.String pro@@ to@@ co@@ l@@ ac@@ k = "@@ "; try { pro@@ to@@ co@@ l@@ ac@@ k = group@@ s@@ Config.@@ pro@@ to@@ co@@ l@@ (); return pro@@ to@@ co@@ l@@ ac@@ k == null ? new org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l@@ () : new org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l@@ (@@ pro@@ to@@ co@@ l@@ St@@ ack@@ ); } catch (@@ java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ j@@ Group@@ J@@ ava@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.error@@ ("@@ Un@@ able to cre@@ ate a new ch@@ an@@ ne@@ l w@@ it@@ h {}@@ ", pro@@ to@@ co@@ l@@ St@@ ack@@ , e); return null@@ ; } }
public void con@@ n@@ ec@@ t@@ () { try { list@@ Ch@@ an@@ ne@@ l = get@@ Ch@@ an@@ ne@@ l@@ (); java.util.@@ Optional@@ <@@ java.@@ net.@@ In@@ et@@ Add@@ ress@@ > add@@ res@@ s = fin@@ der.@@ fin@@ d@@ Add@@ res@@ s(); if (@@ add@@ res@@ s.@@ is@@ P@@ res@@ ent@@ ()) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ J@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ de@@ bug@@ (("@@ Pro@@ to@@ co@@ l st@@ ack@@ : " + (@@ ch@@ an@@ ne@@ l@@ .get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ ()))); ch@@ an@@ ne@@ l@@ .get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ ().get@@ T@@ ran@@ sp@@ ort@@ ().set@@ B@@ ind@@ Add@@ res@@ s(@@ add@@ res@@ s.get@@ ()); com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ J@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ de@@ bug@@ ("@@ Ch@@ an@@ ne@@ l bo@@ un@@ d to {}@@ ", add@@ res@@ s.get@@ ()); } else { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ J@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.warn@@ ("@@ Ch@@ an@@ ne@@ l not bo@@ und@@ : add@@ res@@ s not p@@ res@@ ent@@ "); } } ch@@ an@@ ne@@ l.@@ set@@ Rece@@ i@@ ver@@ (@@ this@@ ); ch@@ an@@ ne@@ l.@@ set@@ Dis@@ c@@ ard@@ Ow@@ n@@ Messag@@ es@@ (@@ true@@ ); ch@@ an@@ ne@@ l.@@ con@@ n@@ ec@@ t(@@ j@@ s@@ Config.@@ st@@ er@@ Name()); com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ J@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ info@@ ("@@ Ch@@ an@@ ne@@ l {@@ } su@@ c@@ cess@@ f@@ ull@@ y j@@ o@@ in@@ ed j@@ s group@@ s {}@@ ", ch@@ an@@ ne@@ l@@ .getName@@ (), j@@ s@@ Config.@@ clu@@ st@@ er@@ Name()); } catch (@@ java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ s.@@ J@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.error@@ ("@@ j@@ o@@ ing {@@ } st@@ er {@@ } for ch@@ an@@ ne@@ l {@@ } f@@ ai@@ le@@ d@@ ", group@@ s@@ Config.@@ clu@@ st@@ er@@ Name@@ (), ch@@ an@@ ne@@ l@@ .getName@@ (), e); } }
protected void set@@ U@@ se@@ Sig@@ ned@@ O@@ ff@@ B@@ y(@@ com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ B@@ oolean valu@@ e) throw@@ s java.lang.Exception { try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = met@@ a@@ Data@@ Update@@ Factory.create@@ (project@@ )) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); config@@ .getProject@@ ().set@@ Boolean@@ Config@@ (@@ Boolean@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ B@@ Y@@ , valu@@ e); config.@@ commit@@ (m@@ d); project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ st@@ ate.@@ is@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ B@@ Y@@ ))) { return java.util.Collections.@@ empty@@ List(); } org.eclipse.jgit.revwalk.RevCommit commit = re@@ ce@@ ive@@ Ev@@ ent.@@ commit@@ ; org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent commit@@ ter = commit@@ .get@@ Commit@@ ter@@ Ident@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent auth@@ or = commit@@ .get@@ Author@@ Ident@@ (); boolean s@@ bo@@ Auth@@ or = false@@ ; boolean s@@ bo@@ Commit@@ ter = false@@ ; boolean s@@ bo@@ M@@ e = false@@ ; for (@@ org.eclipse.jgit.revwalk.@@ F@@ oo@@ ter@@ Lin@@ e foo@@ ter : commit@@ .get@@ F@@ oo@@ ter@@ Lin@@ es@@ ()) { if (@@ foo@@ ter.@@ match@@ es(@@ F@@ oo@@ ter@@ Key@@ .@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ _@@ B@@ Y@@ )) { java.lang.String e = foo@@ ter@@ .get@@ Email@@ Add@@ res@@ s(); if (@@ e != null@@ ) { s@@ bo@@ Auth@@ or |@@ = author@@ .get@@ Email@@ Add@@ res@@ s().@@ equals(@@ e); s@@ bo@@ Commit@@ ter |@@ = commit@@ ter@@ .get@@ Email@@ Add@@ res@@ s().@@ equals(@@ e); s@@ bo@@ M@@ e |@@ = user@@ .@@ has@@ Email@@ Add@@ res@@ s(@@ e); } } if ((@@ (!@@ s@@ bo@@ Author@@ ) && (!@@ s@@ bo@@ Commit@@ ter@@ )) { try { per@@ m.@@ check@@ (@@ Ref@@ Permission@@ .@@ F@@ OR@@ G@@ E_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ not Sig@@ ned@@ -@@ o@@ ff@@ -@@ b@@ y author@@ /@@ commit@@ ter@@ /@@ upload@@ er in commit messag@@ e foo@@ ter@@ "); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ log.error@@ ("@@ can@@ not ch@@ ec@@ k F@@ OR@@ G@@ E_@@ CO@@ M@@ IT@@ T@@ ER@@ ", e); throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception(@@ "@@ int@@ er@@ n@@ al a@@ ut@@ h error@@ "); } } return java.util.Collections.@@ empty@@ List(); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return is@@ Visible@@ (); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case F@@ OR@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case F@@ OR@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case F@@ OR@@ G@@ E_@@ CO@@ M@@ M@@ IT@@ TE@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case F@@ OR@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ A@@ TE@@ _@@ CHANG@@ E : return can@@ Up@@ load@@ (); case U@@ P@@ D@@ A@@ TE@@ _@@ B@@ Y_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (("@@ ref@@ s@@ /@@ for@@ /@@ " + (get@@ Ref@@ Name@@ ()@@ )@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ A@@ TE@@ _@@ CHANG@@ E@@ S : return can@@ View@@ P@@ riv@@ ate@@ Changes@@ (); case RE@@ AD@@ _@@ CON@@ FI@@ G : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ .@@ name@@ ()); case W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G : return is@@ Owner@@ (); case S@@ K@@ I@@ P@@ _@@ V@@ AL@@ ID@@ AT@@ IO@@ N : return ((((@@ can@@ For@@ g@@ e@@ Commit@@ ter@@ ()) && (c@@ an@@ For@@ g@@ e@@ Commit@@ ter@@ ())) && (c@@ an@@ Up@@ load@@ Merg@@ es@@ ())) && (!(@@ project@@ Control@@ .getProject@@ State@@ ().@@ is@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ F@@ _@@ CON@@ FI@@ G@@ ))); } throw new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception@@ ((@@ " + " + " un@@ sup@@ p@@ orted@@ ")); }
@org.junit.Test public void create@@ Project@@ With@@ Pro@@ per@@ ti@@ es@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Project@@ Name = name@@ (@@ "@@ new@@ Project@@ "); com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input in = new com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input@@ (); in.@@ name = new@@ Project@@ Name@@ ; in.@@ des@@ crip@@ tion = "@@ Test des@@ cription@@ "; in.@@ submit@@ Type = com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ CH@@ ER@@ R@@ Y_@@ P@@ I@@ C@@ K@@ ; in.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ use@@ Sig@@ ned@@ O@@ ff@@ B@@ y = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ use@@ Content@@ Merg@@ e = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ requ@@ i@@ re@@ Change@@ Id = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; com.google.gerrit.extensions.common.@@ Project@@ Info p = gApi.@@ project@@ s().@@ create@@ (in@@ ).get@@ (); assert@@ Th@@ at(@@ p.@@ name@@ ).@@ isEqualTo@@ (@@ new@@ Project@@ Name); com.google.gerrit.reviewdb.client.@@ P@@ roject project = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ new@@ Project@@ Name@@ )@@ ).get@@ Project@@ (); com.google.gerrit.acceptance.@@ rest.@@ project.@@ Project@@ As@@ sert@@ .@@ assert@@ Project@@ Info@@ (project@@ , p@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Description@@ ()).@@ isEqualTo@@ (in@@ .@@ des@@ cription@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Submit@@ Type@@ ()).@@ isEqualTo@@ (in@@ .@@ submit@@ Typ@@ e); assert@@ Th@@ at(@@ project@@ .get@@ Config@@ (@@ Boolean@@ Project@@ Config.@@ US@@ E_@@ CON@@ T@@ R@@ I@@ B@@ UT@@ OR@@ _@@ G@@ E@@ RE@@ ME@@ N@@ T@@ S@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ B@@ Y@@ B@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Sig@@ ned@@ O@@ ff@@ By@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ CON@@ TE@@ N@@ T_@@ M@@ ER@@ G@@ E@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Content@@ Merge@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ (@@ Project@@ Config.@@ RE@@ Q@@ U@@ I@@ RE@@ _@@ CHANG@@ E_@@ ID@@ )).@@ isEqualTo@@ (in@@ .@@ requ@@ i@@ re@@ Change@@ Id); }
private java.util.Set<@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 4@@ .@@ Account@@ Set@@ ter@@ >> get@@ Fiel@@ d@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db@@ ) throw@@ s java.sql.@@ SQL@@ Exception { com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ S@@ che@@ m@@ a s@@ che@@ m@@ a = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )); java.sql.@@ Con@@ n@@ ec@@ tion con@@ n@@ ec@@ tion = schema@@ .get@@ Con@@ n@@ ection@@ (); java.util.@@ Set@@ <java.lang.String> co@@ lu@@ m@@ n@@ s = schema@@ .get@@ Di@@ a@@ lec@@ t@@ ().@@ list@@ Co@@ lu@@ m@@ n@@ s(@@ con@@ n@@ ection@@ , com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 4@@ .@@ T@@ AB@@ LE@@ ); return com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 3@@ .@@ AC@@ CO@@ UN@@ T_@@ FI@@ E@@ L@@ D@@ S_@@ M@@ AP@@ .@@ en@@ try@@ Set@@ ().@@ stream@@ ().@@ filter@@ (@@ ( e) -@@ > co@@ lu@@ m@@ n@@ s.@@ contains(@@ e.get@@ Key@@ ()@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > s@@ can@@ Account@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or m@@ ) throw@@ s java.sql.@@ SQL@@ Exception { java.util.Set<@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 4@@ .@@ Account@@ Set@@ ter@@ >> fi@@ el@@ d@@ s = get@@ Fiel@@ d@@ s(@@ db@@ ); if (@@ fi@@ el@@ d@@ s.@@ isEmpty()) { return java.util.Collections.@@ empty@@ Set@@ (); } java.lang.String quer@@ y = fi@@ el@@ d@@ s.@@ stream@@ ().@@ map@@ (@@ ( f@@ ) -@@ > f@@ .getKey@@ ()).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ ing@@ ("@@ , "@@ S@@ E@@ L@@ EC@@ T account@@ _@@ id, re@@ gist@@ er@@ ed@@ _@@ on@@ , java.lang.String@@ .@@ for@@ m@@ at(@@ " F@@ RO@@ M M M M M M M _@@ 1@@ 5@@ 5@@ 4@@ .@@ T@@ AB@@ LE@@ ))); try (@@ java.sql.@@ State@@ ment st@@ m@@ t = new@@ State@@ ment@@ (db@@ )@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Quer@@ y(@@ query@@ )) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > s = new java.util.Hash@@ Set<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.@@ Account a = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (r@@ s.get@@ In@@ t@@ (1@@ )), r@@ s.get@@ Tim@@ est@@ amp@@ (@@ 2@@ )); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 4@@ .@@ Account@@ Set@@ ter@@ > fi@@ el@@ d : fi@@ el@@ d@@ s) { fi@@ el@@ d@@ .getValue@@ ().set@@ (@@ a@@ , r@@ s, fi@@ el@@ d@@ .getKey@@ ()); } } return a@@ ); }
protected boolean is@@ Rest@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ ) { return re@@ st@@ ri@@ .@@ match@@ er@@ (get@@ URI@@ (req@@ )).@@ match@@ es@@ (); }
public synchronized boolean in@@ G@@ ra@@ ce@@ Per@@ i@@ o@@ d(@@ ) { if ((@@ ra@@ w@@ ) < 0) { g@@ ra@@ cep@@ ted@@ Th@@ read@@ ()@@ )@@ --@@ ; } return false@@ ; }
private final com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ com.google.gerrit.reviewdb.client.Account.Id key@@ ) throw@@ s java.lang.Exception { return create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ fin@@ der.@@ fi@@ rst@@ Match@@ ing@@ (@@ li@@ mit@@ s@@ Config@@ Type@@ , user@@ Factory.create@@ (key@@ ))); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.httpd.@@ All@@ Request@@ Filter@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ for@@ c@@ er@@ .@@ class@@ ); cach@@ e@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ C@@ A@@ CH@@ E_@@ NA@@ M@@ E_@@ RES@@ T@@ I@@ AP@@ _@@ AC@@ CO@@ UN@@ T@@ ID@@ , Account.@@ Id@@ .@@ class@@ , load@@ er@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ Res@@ tApi@@ Load@@ er@@ Account@@ Id@@ .@@ class@@ ); cach@@ e@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ C@@ A@@ CH@@ E_@@ NA@@ M@@ E_@@ RES@@ T@@ I@@ _@@ RE@@ M@@ O@@ TE@@ H@@ O@@ ST@@ , java.lang.String@@ .@@ class@@ ).@@ load@@ er@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ Res@@ tApi@@ Load@@ er@@ Remote@@ H@@ o@@ st@@ .@@ class@@ ); bin@@ d@@ Con@@ stant@@ ().@@ annot@@ ated@@ With@@ (@@ com.google.inject.@@ name.@@ Nam@@ ed@@ (@@ R@@ ate@@ M@@ s@@ g@@ H@@ el@@ p@@ er.@@ RES@@ T@@ I@@ AP@@ _@@ CON@@ FI@@ G@@ UR@@ AB@@ L@@ E_@@ M@@ S@@ G@@ _@@ AN@@ NO@@ T@@ AT@@ ION@@ )).@@ to@@ (@@ RES@@ T@@ I@@ M@@ L@@ I@@ T_@@ E@@ X@@ C@@ E@@ DE@@ D@@ _@@ M@@ S@@ ); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ , javax.servlet.@@ Servlet@@ Response res@@ , final javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { if (@@ is@@ Rest@@ (req@@ )) { com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der = null@@ ; com.google.gerrit.server.@@ Current@@ User u = user@@ .get(); com.google.gerrit.reviewdb.client.Account.Id account@@ Id = null@@ ; if (@@ u@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { account@@ Id = u@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Account@@ Id(); try { r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der = li@@ mit@@ Per@@ s@@ Account@@ .get(@@ account@@ Id); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Cannot g@@ e@@ t r@@ ate for ac@@ count '@@ {}@@ '@@ ", account@@ Id); com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ for@@ m@@ er.@@ log.warn@@ (@@ msg@@ , e); } } else { try { r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der = li@@ s@@ Per@@ H@@ o@@ st@@ .get(@@ req@@ .get@@ Remote@@ H@@ o@@ st@@ ()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Cannot g@@ e@@ t r@@ ate li@@ mit@@ s for an@@ on@@ y@@ mo@@ u@@ s ac@@ ces@@ s f@@ ro@@ m remo@@ te ho@@ s@@ t '@@ {@@ 0@@ }@@ '@@ ", req@@ .get@@ Remote@@ H@@ o@@ st@@ ()); com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ for@@ m@@ at(@@ n@@ for@@ m@@ at@@ er.@@ log.warn@@ (@@ msg@@ , e); } } if ((@@ (!(@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der.@@ in@@ G@@ ra@@ ce@@ Per@@ i@@ o@@ d@@ ())) && ((@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der@@ .get@@ ()) != null@@ )) && (!(@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der@@ .get@@ ()@@ .@@ try@@ Ac@@ qu@@ i@@ re@@ ()))) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at(@@ li@@ mit@@ Ex@@ ce@@ ed@@ M@@ s@@ g@@ , ((@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der@@ .get@@ ().get@@ R@@ ate@@ ()) * (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ t@@ Res@@ tApi@@ Servlet.@@ S@@ EC@@ ON@@ D@@ S_@@ P@@ ER@@ _@@ W@@ H@@ ER@@ )), "@@ )), r@@ ate@@ Li@@ mit@@ er@@ .get@@ Li@@ mit@@ ()); } } ch@@ er@@ for@@ m@@ at(@@ quer@@ y(@@ com.google.gerrit.httpd.@@ Token@@ .@@ for@@ m@@ at@@ ter.@@ DE@@ T@@ I@@ M@@ ES@@ S@@ U@@ RE@@ Q@@ U@@ ES@@ T@@ O@@ _@@ M@@ RE@@ Q@@ U@@ ES@@ T@@ , msg@@ )).@@ send@@ Error@@ (@@ msg@@ ); return@@ ; }
private final com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ com.google.common.base.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Li@@ mit@@ s@@ Config.@@ R@@ ate@@ Li@@ mit@@ > li@@ mit@@ ) throw@@ s java.lang.Exception { if (@@ li@@ m@@ it.@@ is@@ P@@ res@@ ent@@ ()) { return com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der.@@ create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ li@@ mit@@ ); } return com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der.@@ E@@ M@@ P@@ T@@ Y@@ ; }
@java.lang.Override public final com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der load@@ (@@ Key key@@ ) throw@@ s java.lang.Exception { if (((@@ k@@ ind@@ ) == (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ Ab@@ str@@ act@@ H@@ ol@@ der@@ Cache@@ Load@@ er.@@ Load@@ er@@ Type.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ )) && (@@ k@@ ey instanceof java.lang.String@@ )) { return create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (); } if (((@@ k@@ ind@@ ) == (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ Ab@@ str@@ act@@ H@@ ol@@ der@@ Cache@@ Load@@ er.@@ Load@@ er@@ Type.@@ AC@@ CO@@ UN@@ T@@ ID@@ )) && (@@ k@@ ey instanceof com.google.gerrit.reviewdb.client.Account.@@ Id@@ )) { return create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (((@@ com.google.gerrit.reviewdb.client.Account.@@ Id@@ ) (key@@ ))); } return com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der.@@ E@@ M@@ P@@ T@@ Y@@ ; }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ Action@@ <@@ com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factory@@ , T> action@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { return execute@@ (@@ action@@ , default@@ s()); }
@java.lang.Override protected boolean r@@ e@@ try@@ On@@ t@@ ) { if (@@ (@@ t instanceof com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ ) { t = t@@ .get@@ C@@ au@@ se@@ (); } return t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ; }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ Action@@ <@@ com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factory@@ , T> action@@ , com.google.gerrit.server.@@ update.@@ Option@@ s op@@ t@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { try { if (!(@@ m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ())) { return do@@ Execu@@ te@@ (@@ update@@ Factory@@ , action@@ , com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Buil@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ der.@@ bu@@ ild@@ ()); } return do@@ Execu@@ te@@ (@@ update@@ Factory@@ , action@@ , t@@ s); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gerrit.extensions.restapi.RestApi@@ Exception@@ .@@ class@@ ); throw new com.google.gerrit.server.@@ update.@@ Update@@ Exception(@@ t@@ ); } }
private com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ Ref@@ s@@ Met@@ a@@ ExternalId@@ s@@ Update update@@ Note@@ Map@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ ExternalId@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ updat@@ er, ( i@@ ) -@@ > { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter in@@ s = repo@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()) { org.eclipse.jgit.lib.ObjectId re@@ v = read@@ Revision@@ (repo@@ ); af@@ ter@@ Read@@ Revision@@ .@@ run@@ (); try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = read@@ Note@@ Map@@ (r@@ w, rev@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s updat@@ ed@@ Ex@@ t@@ Id@@ s = i.@@ update@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ Open@@ Repo@@ .@@ create@@ (repo, r@@ w, in@@ s, note@@ Map@@ )); return commit@@ (repo, r@@ w, in@@ s, rev@@ , note@@ Map@@ , updat@@ ed@@ Ex@@ t@@ Id@@ s); } } }); } }
public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey parent@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , com.google.gerrit.reviewdb.client.@@ Project@@ > project@@ s = read@@ All@@ Project@@ s(); com.google.common.collect.@@ Multimap@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , > ch@@ ild@@ re@@ n = parent@@ To@@ Ch@@ ild@@ ren@@ (project@@ s); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ With@@ User per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> result@@ s = new java.util.ArrayList<@@ >(); de@@ p@@ th@@ Fi@@ rst@@ F@@ orm@@ at(@@ result@@ s, per@@ m@@ , project@@ s, ch@@ ild@@ ren@@ , parent@@ ); return result@@ s; }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> apply(@@ com.google.gerrit.server.project.Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (re@@ cur@@ si@@ ve@@ ) { return ch@@ ild@@ Project@@ List@@ er.@@ re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); } return re@@ di@@ re@@ ct@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); }
com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s as@@ User@@ (com.google.gerrit.server.@@ Current@@ User other@@ User@@ ) { return new com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s(@@ db, query@@ Provider@@ , re@@ wri@@ ter@@ , op@@ F@@ ac@@ to@@ ri@@ es@@ , has@@ O@@ per@@ and@@ s, user@@ Factory@@ , com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (@@ other@@ User@@ ), per@@ mission@@ Back@@ end@@ , notes@@ Factory@@ , change@@ Data@@ Factory@@ , comment@@ s@@ Util@@ , account@@ Res@@ ol@@ ver@@ , group@@ Back@@ end@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, patch@@ List@@ Cache@@ , repo@@ Manag@@ er, project@@ Cache@@ , ch@@ ild@@ Project@@ List@@ er, submit@@ D@@ ry@@ Run@@ , con@@ flict@@ s@@ Cache@@ , index@@ Config@@ , list@@ Member@@ s, star@@ red@@ Changes@@ Util@@ , account@@ Cache@@ , allow@@ s@@ Draft@@ s, notes@@ M@@ ig@@ r@@ ation@@ ); }
@@@ com.google.gerrit.server.query.@@ change.@@ O@@ per@@ at@@ or public com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData> parent@@ project@@ (java.lang.String name@@ ) { return new com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predicate@@ (@@ args.@@ project@@ Cache@@ , args.@@ ch@@ ild@@ Project@@ List@@ , name); }
public boolean is@@ Re@@ ach@@ able@@ From@@ (com.google.gerrit.server.project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ , java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s) { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { ref@@ s = ref@@ Fil@@ ter.@@ create(@@ state@@ , repo@@ ).@@ filter@@ (ref@@ s, true@@ ); return com.google.gerrit.server.change.@@ Inclu@@ ded@@ In@@ Res@@ ol@@ v@@ er.@@ in@@ clu@@ ded@@ In@@ An@@ y(@@ repo@@ , r@@ w, commit@@ , refs.@@ values@@ ()); } catch (java.io.IOException e) { com.google.gerrit.server.project.@@ Re@@ ach@@ able@@ .@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ve@@ r@@ if@@ y per@@ mission@@ s to commit ob@@ ject %s in repo@@ sitor@@ y %s", comm@@ it.@@ name@@ (), state@@ .getName@@ Key@@ ()), e); return false@@ ; } }
public boolean can@@ Read@@ (com.google.gerrit.server.project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = state@@ .getName@@ Key@@ (); try { java.util.List<@@ com.google.gerrit.server.query.change.ChangeData> change@@ s = query@@ Provider@@ .get().@@ en@@ for@@ ce@@ Vi@@ si@@ b@@ ili@@ ty@@ (@@ true@@ ).@@ by@@ Project@@ (project@@ , commit@@ ); if (!(@@ changes.@@ isEmpty())) { return true@@ ; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.@@ Commit@@ s@@ Collec@@ tion.@@ log.error@@ ((@@ (("@@ Cannot l@@ oo@@ k up change for commit " + (@@ comm@@ it.@@ name@@ ())) + " in ") + project@@ ), e); } return re@@ ach@@ able@@ .is@@ Re@@ ach@@ able@@ From@@ (@@ state@@ , repo@@ , commit@@ , repo@@ .get@@ All@@ Ref@@ s()); }
boolean is@@ Re@@ ach@@ able@@ From@@ Head@@ s@@ Or@@ Tag@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { try { org.eclipse.jgit.lib.@@ Ref@@ Dat@@ ab@@ ase ref@@ db = repo@@ .getRef@@ Dat@@ abase@@ (); java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > head@@ s = ref@@ db@@ .getRef@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ values@@ (); java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > tag@@ s = ref@@ db@@ .getRef@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ).@@ values@@ (); java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (((@@ head@@ s.@@ size@@ ()) + (t@@ ag@@ s.@@ size@@ ()))); for (@@ org.eclipse.jgit.lib.@@ Re@@ f r : com.google.common.collect.I@@ terable@@ s.@@ con@@ c@@ at(@@ head@@ s, tag@@ s@@ )) { refs.@@ put@@ (r@@ .getName@@ (), r@@ ); } return re@@ ach@@ able@@ .is@@ Re@@ ach@@ able@@ From@@ (@@ state@@ , repo@@ , ref@@ s); } catch (java.io.IOException e) { com.google.gerrit.server.project.Project@@ Contro@@ l.@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ve@@ r@@ if@@ y per@@ mission@@ s to commit ob@@ ject %s in repo@@ sitor@@ y %s", comm@@ it.@@ name@@ (), get@@ Project@@ ().get@@ NameKey@@ ()), e); return false@@ ; } }
protected static java.util.List<@@ com.google.gerrit.@@ index.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> pre@@ di@@ c@@ at@@ es@@ (com.google.gerrit.server.project.@@ Project@@ Cach@@ e project@@ Cache@@ , com.google.gerrit.server.project.@@ Ch@@ ild@@ Project@@ List@@ er ch@@ ild@@ Project@@ List@@ er, com.google.inject.@@ Provider@@ <@@ com.google.gerrit.server.@@ Current@@ User@@ > self@@ , java.lang.String valu@@ e) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ value@@ )); if (project@@ State == null@@ ) { return java.util.Collections.@@ empty@@ List(); } java.util.List<@@ com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> r = new java.util.ArrayList<@@ >(); r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (project@@ State@@ .getName@@ ())); try { com.google.gerrit.server.project.Project@@ Resource pro@@ j = new com.google.gerrit.server.project.Project@@ Resource@@ (project@@ State@@ , self@@ .get()); for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info p : ch@@ ild@@ Project@@ List@@ er.@@ re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ pro@@ j@@ .getName@@ Key@@ ())) { r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (@@ p.@@ name@@ )); } } } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predi@@ c@@ ate.@@ log.warn@@ ("@@ can@@ not ch@@ ec@@ k per@@ mission@@ s to exp@@ an@@ d ch@@ il@@ d project@@ s", e); } return r@@ ; }
public void fi@@ re@@ (@@ com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.@@ Account account@@ , java.sql.@@ Tim@@ est@@ am@@ p wh@@ en@@ , boolean is@@ P@@ riv@@ ate@@ ) { if (!(@@ list@@ ener@@ s.@@ iter@@ ator@@ ().@@ has@@ N@@ ext@@ ())) { return@@ ; } try { com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ d.@@ Change@@ Event ev@@ ent = new com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ Change@@ d.@@ Event@@ (@@ util.@@ change@@ Info@@ (change@@ ), util.@@ account@@ Info@@ (account@@ ), is@@ P@@ riv@@ ate@@ , wh@@ en@@ ); for (@@ com.google.gerrit.extensions.@@ events.@@ P@@ riv@@ ate@@ Change@@ d@@ List@@ en@@ er l : list@@ ener@@ s) { try { l.@@ on@@ P@@ riv@@ ate@@ State@@ Change@@ d(@@ event@@ ); } catch (@@ java.lang.Exception e) { util.@@ log@@ Event@@ List@@ ener@@ Error@@ (@@ event@@ , l@@ , e); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ Change@@ d.@@ log.error@@ ("@@ Co@@ ul@@ d@@ n@@ '@@ t fi@@ r@@ e event@@ ", e); } }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) { private@@ State@@ Change@@ d.@@ fi@@ re@@ (change, ctx@@ .getAccount@@ (), ctx@@ .get@@ Wh@@ en@@ (), is@@ P@@ riv@@ ate@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!@@ (c@@ an@@ Delete@@ P@@ riv@@ ate@@ (rsrc@@ ).@@ value@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to un@@ mar@@ k private@@ "); } if (!(@@ rsrc@@ .getChange@@ ().@@ is@@ P@@ riv@@ ate@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is not private@@ "); } com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p o@@ p = set@@ P@@ riv@@ ate@@ Op@@ Factory.create@@ (cm@@ Util@@ , false@@ , input@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (rsrc@@ .getId@@ (), op@@ ).@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
public com.google.gerrit.server.@@ data.@@ Change@@ Attri@@ but@@ e as@@ Change@@ Attribute@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change@@ ) { com.google.gerrit.server.@@ data.@@ Change@@ Attri@@ but@@ e a = new com.google.gerrit.server.@@ data.@@ Change@@ Attribute@@ (); a.@@ project = change@@ .getProject@@ ().get@@ (); a.@@ b@@ ran@@ ch = change@@ .get@@ Dest@@ ().get@@ Sh@@ ort@@ Name@@ (); a.@@ to@@ p@@ i@@ c = change@@ .get@@ To@@ pic@@ (); a.@@ id = change@@ .getKey@@ ().get@@ (); a.@@ n@@ u@@ mb@@ er = change@@ .getId@@ ().get@@ (); a.@@ sub@@ ject = change@@ .get@@ Sub@@ ject@@ (); try { a.@@ commit@@ Messag@@ e = change@@ Data@@ Factory.create@@ (db, change@@ ).@@ commit@@ Message@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.@@ events.@@ Event@@ Factory.@@ log.error@@ (("@@ E@@ rror get@@ t@@ ing f@@ ull commit messag@@ e for change " + (@@ a.@@ n@@ umber@@ ))); } a.@@ ur@@ l = get@@ Change@@ Url@@ (change@@ ); a.@@ ne@@ r = as@@ Account@@ Attribute@@ (change@@ .get@@ Owner@@ ()); a.@@ as@@ signe@@ e = as@@ Account@@ Attribute@@ (change@@ .get@@ As@@ signe@@ e@@ ()); a.@@ statu@@ s = change@@ .getStatu@@ s(); a.@@ cre@@ ated@@ O@@ n = (change@@ .get@@ Cre@@ ated@@ On@@ ().get@@ Time@@ ()) / 1@@ 00@@ 0@@ L@@ ; a.@@ is@@ W@@ i@@ p = (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) ? true : null@@ ; a.@@ is@@ P@@ riv@@ ate = (@@ change.@@ is@@ P@@ riv@@ ate@@ ()) ? true : null@@ ; return a@@ ; } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!@@ (c@@ an@@ Set@@ P@@ riv@@ ate@@ (rsrc@@ ).@@ value@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to mar@@ k private@@ "); } if (rsrc@@ .getChange@@ ().@@ is@@ P@@ riv@@ ate@@ ()) { return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); } com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p o@@ p = set@@ P@@ riv@@ ate@@ Op@@ Factory.create@@ (cm@@ Util@@ , true@@ , input@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (rsrc@@ .getId@@ (), op@@ ).@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ cre@@ ated@@ ("@@ "); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ group@@ ); if (@@ resource@@ .get@@ Control@@ ().@@ can@@ E@@ l@@ se@@ PatchSet@@ ()) { return group@@ Member@@ s.get@@ T@@ ran@@ si@@ tive@@ Group@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return group@@ Member@@ s.get@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
private void add@@ In@@ ternal@@ Detail@@ s(@@ com.google.gerrit.extensions.common.@@ Group@@ Info info@@ , com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group@@ , java.util.@@ f@@ unc@@ tion.@@ Sup@@ pli@@ er@@ <@@ com.google.gerrit.server.account.@@ Group@@ Control@@ > group@@ Control@@ Sup@@ pli@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException { info.@@ des@@ crip@@ tion = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ int@@ er@@ n@@ al@@ Group@@ .get@@ Description@@ ()); info@@ .g@@ roup@@ Id = int@@ er@@ n@@ al@@ Group@@ .getId@@ ().get@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D owner@@ Group@@ UU@@ I@@ D = int@@ er@@ n@@ al@@ Group@@ .get@@ Owner@@ Group@@ UUID@@ (); if (@@ owner@@ Group@@ UU@@ I@@ D != null@@ ) { info.@@ owner@@ Id = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (@@ owner@@ Group@@ UUID@@ .get()); com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c o = group@@ Back@@ end@@ .get(@@ owner@@ Group@@ UUID@@ ); if (@@ o != null@@ ) { info.@@ ow@@ ne@@ r = o@@ .getName@@ (); } } info.@@ cre@@ ated@@ O@@ n = int@@ er@@ n@@ al@@ Group@@ .get@@ Cre@@ ated@@ On@@ (); if (@@ o@@ ption@@ s.@@ contains(@@ com.google.gerrit.server.g@@ roup.@@ ME@@ M@@ B@@ ER@@ S@@ )) { info.@@ me@@ mber@@ s = group@@ Member@@ s.get@@ Di@@ re@@ ct@@ Member@@ s@@ (@@ int@@ er@@ n@@ al@@ Group@@ , group@@ Control@@ Sup@@ pli@@ er@@ .get()); } if (@@ o@@ ption@@ s.@@ contains(@@ com.google.gerrit.server.g@@ roup.@@ IN@@ C@@ L@@ U@@ D@@ ES@@ )) { info.@@ in@@ clu@@ de@@ s = list@@ Sub@@ s.get@@ ().get@@ Di@@ re@@ ct@@ Sub@@ s@@ (@@ int@@ er@@ n@@ al@@ Group@@ , group@@ Control@@ Sup@@ pli@@ er@@ .get()); } }
com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s as@@ User@@ (com.google.gerrit.server.@@ Current@@ User other@@ User@@ ) { return new com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s(@@ db, query@@ Provider@@ , re@@ wri@@ ter@@ , op@@ F@@ ac@@ to@@ ri@@ es@@ , has@@ O@@ per@@ and@@ s, user@@ Factory@@ , com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (@@ other@@ User@@ ), per@@ mission@@ Back@@ end@@ , notes@@ Factory@@ , change@@ Data@@ Factory@@ , comment@@ s@@ Util@@ , account@@ Res@@ ol@@ ver@@ , group@@ Back@@ end@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, patch@@ List@@ Cache@@ , repo@@ Manag@@ er, project@@ Cache@@ , ch@@ ild@@ Project@@ s, submit@@ D@@ ry@@ Run@@ , con@@ flict@@ s@@ Cache@@ , index@@ Config@@ , group@@ Member@@ s, star@@ red@@ Changes@@ Util@@ , account@@ Cache@@ , allow@@ s@@ Draft@@ s, notes@@ M@@ ig@@ r@@ ation@@ ); }
void display(@@ java.io.@@ P@@ r@@ int@@ Wri@@ ter wri@@ ter@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > g@@ roup = group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ name@@ )); java.lang.String error@@ T@@ ex@@ t = "@@ Group not fo@@ un@@ d or not vi@@ sible@@ \n@@ "; if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { wri@@ ter.@@ write@@ (@@ error@@ Text@@ ); wri@@ ter.@@ f@@ lu@@ sh@@ (); return@@ ; } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> me@@ mber@@ s = group@@ Member@@ s.get@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ .get()); com.google.gerrit.server.@@ i@@ o@@ util.@@ Co@@ lu@@ m@@ n@@ Format@@ ter for@@ m@@ at@@ ter = new com.google.gerrit.server.@@ i@@ o@@ util.@@ Co@@ lu@@ m@@ n@@ Format@@ ter@@ (@@ wri@@ ter@@ , '@@ \@@ t@@ '); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ id@@ "); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ user@@ name@@ "); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ f@@ ull name@@ "); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ email@@ "); for@@ m@@ at@@ ter.@@ next@@ Line@@ (); for (@@ com.google.gerrit.extensions.common.@@ Account@@ Info me@@ mb@@ er : me@@ mber@@ s) { if (@@ me@@ mb@@ er == null@@ ) { continue@@ ; } for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (java.lang.@@ Integ@@ er.@@ toString@@ (@@ me@@ mb@@ er.@@ _@@ account@@ Id@@ )); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ me@@ mb@@ er.@@ user@@ name, "@@ n@@ /@@ a@@ ")); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ me@@ mb@@ er.@@ name@@ ), "@@ n@@ /@@ a@@ ")); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ me@@ mb@@ er.@@ email@@ , "@@ n@@ ")); for@@ m@@ at@@ ter.@@ next@@ Line@@ (); } for@@ m@@ at@@ ter.@@ fin@@ is@@ h@@ (); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ api.@@ allow@@ ed@@ Id@@ ent@@ if@@ i@@ er@@ s", value@@ s = { "@@ P@@ RO@@ JEC@@ T_@@ N@@ U@@ M@@ ER@@ I@@ C_@@ ID@@ ", "@@ N@@ U@@ M@@ ER@@ I@@ C_@@ ID@@ " }@@ ) public void pre@@ de@@ pre@@ c@@ ated@@ Change@@ Id@@ Ret@@ ur@@ n@@ s@@ B@@ adRequest@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i c@@ 1 = gApi.changes().id(@@ project@@ .get(), change@@ Info.@@ _@@ n@@ umber@@ ); assert@@ Th@@ at@@ (c@@ 1@@ .get().@@ changeId@@ ).@@ isEqualTo@@ (change@@ Info.@@ change@@ Id); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i c@@ 2 = gApi.changes().id(@@ change@@ Info.@@ _@@ n@@ umber@@ ); assert@@ Th@@ at@@ (c@@ 2@@ .get().@@ changeId@@ ).@@ isEqualTo@@ (change@@ Info.@@ change@@ Id); com.google.gerrit.extensions.common.@@ Change@@ Info c@@ i = gApi.changes().@@ create@@ (@@ new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ d@@ if@@ f@@ er@@ ent message@@ "@@ )@@ ).get@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((("@@ Th@@ e pro@@ vi@@ de@@ d change id@@ ent@@ if@@ i@@ er " + (c@@ i.@@ changeId@@ )) + " is de@@ c@@ . U@@ se '@@ ~@@ project@@ Number@@ ' in@@ st@@ ead@@ ")); gApi.changes().id(@@ c@@ i.@@ change@@ Id); }
private void check@@ Id@@ Type@@ (com.google.gerrit.server.@@ Change@@ F@@ in@@ der.@@ Change@@ Id@@ Type type@@ , boolean en@@ for@@ ce@@ De@@ pre@@ c@@ ation@@ , java.lang.String va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception { if (@@ en@@ for@@ ce@@ De@@ pre@@ c@@ ation && (!(@@ allow@@ ed@@ Id@@ Typ@@ es.@@ contains(@@ type@@ )))) { throw new com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ Th@@ e pro@@ vi@@ de@@ d change id@@ ent@@ if@@ i@@ er %s is pre@@ c@@ ated@@ . " + "@@ U@@ se '@@ project@@ ~@@ change@@ Number@@ ' in@@ st@@ ead@@ .@@ "), va@@ l@@ )); } changeId@@ Coun@@ ter.@@ in@@ cre@@ ment@@ (@@ typ@@ e); }
public java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > fin@@ d(@@ java.lang.String id@@ ) throw@@ s com.google.gwtorm.server.OrmException { try { return fin@@ d(@@ id, false@@ ); } catch (@@ com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception e) { return com.google.common.collect.Immutable@@ List.@@ of@@ (); } }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource@@ .@@ St@@ a@@ r parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parent@@ .getUser@@ (); com.google.gerrit.server.change.Change@@ Resource change = changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id); java.util.@@ Set@@ <java.lang.String> label@@ s = star@@ red@@ Changes@@ Util@@ .get@@ Label@@ s(@@ user@@ .getAccount@@ Id(), change@@ .getId()); return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Star@@ (user@@ , change, label@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.account.Account@@ Resource@@ , com.google.gerrit.server.account.@@ Star@@ red@@ Chang@@ es.@@ E@@ mpty@@ Input@@ > create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception { try { return create@@ Provider@@ .get().@@ set@@ Change@@ (@@ changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id@@ )); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s not fo@@ und@@ ", id@@ .get@@ ())); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.account.@@ Star@@ red@@ Chang@@ es.@@ log.error@@ ("@@ can@@ not res@@ ol@@ v@@ e change@@ ", e); throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ "@@ int@@ er@@ n@@ al serv@@ er error@@ "); } }
@java.lang.Override public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id@@ .@@ en@@ cod@@ ed@@ (), true@@ ); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return change@@ Resource@@ Factory.create@@ (change, user@@ .get()); }
@java.lang.Override public Account@@ Resource@@ .@@ Star@@ red@@ Change parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parent@@ .getUser@@ (); com.google.gerrit.server.change.Change@@ Resource change = changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id); if (@@ star@@ red@@ Changes@@ Util@@ .get@@ Label@@ s(@@ user@@ .getAccount@@ Id(), change@@ .getId@@ ()).@@ contains(@@ Star@@ red@@ Changes@@ Util.@@ DE@@ FA@@ U@@ L@@ T_@@ L@@ AB@@ E@@ L@@ )) { return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Star@@ red@@ Change@@ (user@@ , change@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public void delete@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ ext@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ ) -@@ > { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Remo@@ ve@@ (@@ o@@ , n@@ , remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s); } }); }
private void add@@ Ex@@ t@@ Id(@@ org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <?@@ > test@@ Repo@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ .@@ . ext@@ Id@@ s) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ Note@@ s = ext@@ er@@ n@@ al@@ Id@@ Notes@@ Factory.@@ load@@ (@@ test@@ Repo@@ .get@@ Repository@@ ()); ext@@ Id@@ Not@@ es.@@ insert@@ (@@ java.util.Array@@ s.@@ as@@ List(@@ ext@@ Id@@ s@@ )); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = new com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update@@ (com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ IS@@ AB@@ L@@ ED@@ , null@@ , test@@ Repo@@ .get@@ Repository@@ ())) { met@@ a@@ Data@@ Update@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (@@ admin@@ .getId@@ ent@@ ()); met@@ a@@ Data@@ Update@@ .get@@ Commit@@ Builder@@ ().set@@ Commit@@ ter@@ (@@ admin@@ .getId@@ ent@@ ()); ext@@ Id@@ Not@@ es.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void r@@ e@@ try@@ On@@ Lo@@ ck@@ Failure@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key foo@@ Id = External@@ Id.@@ Key@@ .@@ create@@ ("@@ foo@@ ", "@@ foo@@ "); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key b@@ ar@@ Id = External@@ Id.@@ Key@@ .@@ create@@ ("@@ b@@ ar@@ ", "@@ b@@ ar@@ "); final java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean do@@ ne@@ B@@ g@@ Update = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update updat@@ e = new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update@@ (repo@@ Manag@@ er, -@@ > com.google.gerrit.acceptance.@@ rest.@@ account.@@ met@@ a@@ Data@@ Update@@ Factory.create@@ (com.google.gerrit.acceptance.@@ rest.@@ account.@@ all@@ User@@ s@@ ), account@@ Cache@@ , all@@ User@@ s, met@@ ri@@ c@@ Ma@@ k@@ er, ext@@ er@@ n@@ al@@ Id@@ s, new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ Dis@@ able@@ d@@ ExternalId@@ Cache@@ (), new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ (c@@ fg@@ , r@@ e@@ try@@ Met@@ ri@@ c@@ s, null@@ , null@@ , null@@ , null@@ , null@@ , null@@ , null@@ ); }
@@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key key@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { check@@ Read@@ Enable@@ d@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ load@@ Read@@ On@@ l@@ y(@@ repo@@ )@@ .get(@@ key@@ ); } }
private void update@@ Note@@ Map@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ ExternalId@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { r@@ e@@ try@@ H@@ el@@ p@@ er.@@ <@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ Updat@@ er, java.lang.O@@ bject@@ >@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ Update.@@ update@@ Note@@ Map@@ (@@ new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Key@@ (), (@@ ext@@ Id@@ ), new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Notes@@ (@@ ext@@ er@@ n@@ al@@ Id@@ Cache@@ , account@@ Cache@@ , repo@@ ).set@@ Read@@ After@@ Revision@@ (@@ af@@ ter@@ Read@@ Revision@@ ).@@ load@@ (); i.@@ update@@ (@@ ext@@ Id@@ Notes@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = met@@ a@@ Data@@ Update@@ Factory.create@@ ()) { ext@@ Id@@ Not@@ es.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } update@@ Coun@@ t.@@ in@@ cre@@ ment@@ (); return null@@ ; } }); }
public void up@@ sert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { up@@ sert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); }
public java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > all@@ () throw@@ s java.io.IOException { check@@ Load@@ ed@@ (); try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e not@@ e : note@@ Map@@ ) { byte@@ [] ra@@ w = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ read@@ Note@@ Data@@ (r@@ w, note@@ .get@@ Data@@ ()); try { com.google.gerrit.server.account.@@ ext@@ Id@@ s.add(@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ parse@@ (@@ note@@ .getName@@ (), ra@@ w, note@@ .get@@ Data@@ ())); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ I@@ g@@ no@@ rin@@ g in@@ vali@@ d ext@@ er@@ n@@ al I@@ D not@@ e %s", note@@ .getName@@ ()), e); } } return ext@@ Id@@ s; } }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remove@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } org.eclipse.jgit.lib.ObjectId note@@ Data = note@@ Map@@ .get(@@ note@@ Id); byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Data@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ TE@@ _S@@ Z@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id act@@ u@@ al@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ ); check@@ State@@ (@@ ext@@ Id.@@ equals(@@ act@@ u@@ al@@ Ex@@ t@@ Id@@ ), "@@ ext@@ er@@ n@@ al id %s sh@@ o@@ ul@@ d b@@ e remo@@ v@@ ed@@ , bu@@ t it@@ '@@ s not match@@ ing th@@ e act@@ u@@ al ext@@ er@@ n@@ al id %s", ext@@ Id.@@ toString@@ (), act@@ u@@ al@@ Ex@@ t@@ Id.@@ toString@@ ()); note@@ Map.@@ remove@@ (@@ note@@ Id); return act@@ u@@ al@@ Ex@@ t@@ Id@@ ; }
public void delete@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > ext@@ Id@@ Key@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remo@@ v@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , account@@ Id); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ ( o@@ , n@@ ) -@@ > { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Remo@@ ve@@ (@@ o@@ , n@@ , remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s); }
public void replace@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > to@@ Delete@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > to@@ Add@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ check@@ S@@ ame@@ Account@@ (@@ to@@ Add@@ , account@@ Id); check@@ ExternalId@@ Key@@ s@@ D@@ on@@ Ex@@ t@@ Id@@ Key@@ .@@ from@@ (@@ to@@ Add@@ ), to@@ Delete@@ ); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ ( r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key : to@@ Delete@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remo@@ v@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , account@@ Id); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ Key@@ .@@ replace@@ (@@ to@@ Add@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ up@@ sert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); updat@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ al@@ Id@@ ) -@@ > ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Replace@@ (@@ o@@ , account@@ Id, remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s, updat@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ (account@@ Id); }
public void delete@@ By@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > ext@@ Id@@ Key@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key : ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , null@@ ); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ ext@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ ) -@@ > { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Remo@@ ve@@ (@@ o@@ , n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ s); } }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ read@@ Only@@ ) { throw new java.io.IO@@ Exception("@@ Updat@@ ing ext@@ er@@ n@@ al ID@@ s is dis@@ able@@ d@@ "); } if (@@ note@@ Map@@ Updat@@ es.@@ isEmpty()) { return false@@ ; } if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ commit@@ .get@@ Message@@ ())) { comm@@ it.@@ set@@ Message@@ ("@@ Update ext@@ er@@ n@@ al ID@@ s@@ \n@@ "); } try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ Note@@ Map@@ Update note@@ Map@@ : note@@ Map@@ Updat@@ es) { try { note@@ Map@@ Update.@@ execute@@ (r@@ w, note@@ Map@@ ); } catch (@@ com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } org.eclipse.jgit.revwalk.Rev@@ T@@ re@@ e old@@ T@@ re@@ e = ((@@ revision@@ ) != null@@ ) ? rw.@@ parse@@ Tree@@ (@@ revision@@ ) : null@@ ; org.eclipse.jgit.lib.ObjectId new@@ Tree@@ Id = note@@ Map.@@ write@@ Tree@@ (in@@ sert@@ er@@ ); if (@@ new@@ Tree@@ Id.@@ equals(@@ old@@ Tree@@ )) { return false@@ ; } comm@@ it.@@ set@@ Tree@@ Id@@ (@@ new@@ Tree@@ Id); return true@@ ; }
private void e@@ vi@@ ct@@ Account@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) throw@@ s java.io.IOException { if ((@@ account@@ Cach@@ e) != null@@ ) { for (@@ com.google.gerrit.reviewdb.client.Account.Id id : ext@@ Id@@ s.@@ stream@@ ().@@ map@@ (@@ ExternalId@@ :@@ account@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())) { account@@ Cache.@@ e@@ vi@@ ct@@ (id@@ ); } } }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id up@@ sert@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter in@@ s, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ (); org.eclipse.jgit.lib.@@ Config c = new org.eclipse.jgit.lib.@@ Config@@ (); if (@@ note@@ Map.@@ contains(@@ ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ ())) { byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Map@@ .get(@@ note@@ Id@@ ), com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ TE@@ _S@@ Z@@ ); try { c.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ ra@@ w, java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException e) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ In@@ vali@@ d ext@@ er@@ n@@ al id con@@ fig for not@@ e %s@@ : %s", note@@ Id, e.get@@ Message@@ ())); } ext@@ Id.@@ write@@ To@@ Config@@ (c@@ ); byte@@ [] ra@@ w = c.@@ to@@ Text@@ ().get@@ By@@ t@@ es(@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); org.eclipse.jgit.lib.ObjectId note@@ Data = in@@ s.@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ , ra@@ w@@ ); note@@ Map@@ .set@@ (@@ note@@ Id, note@@ Data@@ ); return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create(@@ ext@@ Id, note@@ Data@@ ); }
public com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder update@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { updat@@ ed@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
@@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key key@@ , org.eclipse.jgit.lib.ObjectId rev@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { check@@ Read@@ Enable@@ d@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ load@@ On@@ l@@ y(@@ repo@@ , rev@@ )@@ .get(@@ key@@ ); } }
public void up@@ sert@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id updat@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ up@@ sert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); updat@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ updat@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ al@@ ); }
public void insert@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); check@@ ExternalId@@ s@@ D@@ on@@ Ex@@ ist@@ (@@ ext@@ Id@@ s); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > new@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id insert@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ up@@ sert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); new@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ ) -@@ > { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Create@@ (@@ o@@ , n@@ , new@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s@@ (@@ new@@ Ex@@ t@@ Id@@ s); } }); }
public void replace@@ By@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > to@@ Delete@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > to@@ Add@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); check@@ ExternalId@@ Key@@ s@@ D@@ on@@ t@@ Ex@@ ist@@ (@@ External@@ Id.@@ Key@@ .@@ from@@ (@@ to@@ Add@@ ), to@@ Delete@@ ); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key : to@@ Delete@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remo@@ v@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , null@@ ); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id); } for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : to@@ Add@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id insert@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ from@@ (@@ o.@@ insert@@ er, note@@ Map@@ , ext@@ Id); updat@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ ( o@@ , n@@ ) -@@ > { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Replace@@ (@@ o@@ , n@@ al@@ Ex@@ t@@ Id@@ s, updat@@ ed@@ Ex@@ t@@ Id@@ s, updat@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s(@@ com.google.common.collect.@@ Stream@@ s.@@ con@@ c@@ at(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.@@ stream@@ (), updat@@ ed@@ Ex@@ t@@ Id@@ s.@@ stream@@ (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), (), updat@@ ed@@ Ex@@ t@@ Id@@ s.@@ stream@@ ()).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())); } }); }
com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder add@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { cre@@ ated@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
public com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder delete@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { de@@ le@@ ted@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key key@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { check@@ Load@@ ed@@ (); org.eclipse.jgit.lib.ObjectId note@@ Id = key@@ .@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.lib.ObjectId note@@ Id = note@@ Map@@ .get(@@ note@@ Id); byte@@ [] ra@@ w = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ read@@ Note@@ Data@@ (r@@ w, note@@ Data@@ Id); return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ Id); } }
public static java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > from@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { return ext@@ Id@@ Key@@ s.@@ stream@@ ().@@ map@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ :@@ key@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remove@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key@@ , com.google.gerrit.reviewdb.client.Account.Id expected@@ Account@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id@@ Key@@ .@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } org.eclipse.jgit.lib.ObjectId note@@ Data = note@@ Map@@ .get(@@ note@@ Id); byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Data@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ TE@@ _S@@ Z@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ ); if (@@ expected@@ Account@@ Id != null@@ ) { check@@ State@@ (@@ expected@@ Account@@ Id.@@ equals(@@ ext@@ Id.@@ account@@ Id@@ ()), ("@@ ext@@ er@@ n@@ al id %s sh@@ o@@ ul@@ d b@@ e remove@@ d for ac@@ count %s@@ ,@@ " + " bu@@ t ext@@ er@@ n@@ al id b@@ e@@ long@@ s to ac@@ count %s@@ "), ext@@ Id@@ Key@@ .get(), expected@@ Account@@ Id@@ Key@@ .get(), ext@@ Id.@@ account@@ Id@@ ().get@@ ()); note@@ Map.@@ remove@@ (@@ note@@ Id); return ext@@ Id@@ ; }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , com.google.gerrit.extensions.api.@@ account@@ s.@@ Statu@@ s@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Statu@@ s@@ Input@@ (); } java.lang.String new@@ Statu@@ s = input.@@ statu@@ s; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ( u@@ ) -@@ > u@@ .@@ update@@ ().set@@ Statu@@ s(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ E@@ mpty@@ (@@ new@@ Statu@@ s@@ ))); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .getStatu@@ s()) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (account@@ .getStatu@@ s()); }
public static com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder buil@@ der@@ () { return new com.google.gerrit.server.account.@@ Au@@ to@@ Value@@ _@@ Account@@ Update.@@ Builder@@ (); }
private void update@@ Account@@ Info@@ () { if ((@@ set@@ F@@ ull@@ Name@@ To@@ ) == null@@ ) { return@@ ; } log@@ De@@ bug@@ ("@@ Updat@@ ing f@@ name of call@@ er@@ "); try { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), account@@ ); } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException | javax.@@ nam@@ es.@@ E@@ rror check@@ Exception e) { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ .@@ account@@ ().get@@ F@@ ull@@ Name@@ ())) { u@@ .@@ update@@ ().set@@ F@@ ull@@ Name(@@ set@@ F@@ ull@@ Name@@ To@@ ); } }
public com.google.gerrit.server.account.@@ Auth@@ Result link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request who@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ Auth@@ n@@ al@@ Id@@ s.get(@@ who@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ to@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id.@@ key@@ ().get@@ ())) + "@@ ' in u@@ se b@@ y an@@ oth@@ er account@@ ")); } update@@ (@@ who@@ , ext@@ Id); } else { ext@@ er@@ n@@ al@@ Id@@ s@@ Update@@ Factory.create@@ ().@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create@@ With@@ Email@@ (@@ who@@ .get@@ ExternalId@@ Key@@ (), to@@ , who@@ .get@@ Email@@ Add@@ ress@@ ())); if ((@@ who@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { account@@ s@@ Update@@ Factory.create@@ ().@@ update@@ (@@ to@@ , ( u@@ ) -@@ > { if ((@@ u@@ .@@ account@@ ().get@@ Pref@@ er@@ red@@ Email@@ ()) == null@@ ) { u@@ .@@ update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (@@ who@@ .get@@ Email@@ Add@@ ress@@ ()); } } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ to@@ , who@@ .get@@ ExternalId@@ Key@@ (), false@@ ); }
public void un@@ link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key@@ > ext@@ Id@@ Key@@ s) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ ext@@ Id@@ Key@@ s.@@ isEmpty()) { return@@ ; } java.util.List<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s = new java.util.Array@@ List(@@ ext@@ Id@@ Key@@ s.@@ size()); for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ Key ext@@ Id@@ Key : ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ Key@@ s.get(@@ ext@@ Id@@ Key@@ ); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ from@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id@@ Key@@ .get@@ ())) + "@@ ' in u@@ se b@@ y an@@ oth@@ er account@@ ")); } ext@@ Id@@ s.add(@@ ext@@ Id); } else { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id@@ Key@@ .get@@ ())) + "@@ ' not fo@@ und@@ ")); } } ext@@ er@@ n@@ al@@ Id@@ s@@ Update@@ Factory.create@@ ().@@ delete@@ (@@ ext@@ Id@@ s); if (@@ ext@@ Id@@ s.@@ stream@@ ().@@ an@@ y@@ Match@@ (@@ ( e) -@@ > e.@@ email@@ ()) != null@@ )) { account@@ s@@ Update@@ Factory.create@@ ().@@ update@@ (@@ from@@ , ( u@@ -@@ > { if ((@@ u@@ .@@ account@@ ().get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { if (@@ u@@ .@@ account@@ ().get@@ Pref@@ er@@ red@@ Email@@ ().equals(@@ ext@@ Id.@@ email@@ ())) { u@@ .@@ update@@ ().set@@ Pref@@ er@@ red@@ Email@@ ("@@ "); break@@ ; } } } }); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > de@@ ac@@ ti@@ v@@ ate@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ In@@ ac@@ ti@@ v@@ e = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (account@@ Id, ( u@@ ) -@@ > if (!(@@ u@@ .@@ account@@ ().@@ is@@ Active@@ ())) { al@@ read@@ y@@ In@@ ac@@ ti@@ v@@ e.set@@ (@@ true@@ ); } else { u@@ .@@ update@@ ().set@@ Active@@ (@@ false@@ ); } }); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } if (@@ al@@ read@@ y@@ In@@ ac@@ tive@@ .get@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ ac@@ count not ac@@ tive@@ "); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> ac@@ ti@@ v@@ ate@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ Ac@@ ti@@ v@@ e = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (account@@ Id, ( u@@ ) -@@ > { if (@@ u@@ .@@ account@@ ().@@ is@@ Active@@ ()) { al@@ read@@ y@@ Ac@@ ti@@ v@@ e.set@@ (@@ true@@ ); } else { u@@ .@@ update@@ Active@@ (@@ true@@ ); } } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ Injector@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ .@@ new@@ Default@@ Config@@ (); cf@@ g.@@ set@@ In@@ t@@ ("@@ re@@ ce@@ ive@@ ", null@@ , "@@ max@@ Tr@@ u@@ st@@ De@@ p@@ th@@ ", 2); cf@@ g.@@ set@@ String@@ List@@ ("@@ re@@ ce@@ ive@@ ", null@@ , "@@ tr@@ u@@ st@@ ed@@ Key@@ ", com.google.common.collect.Immutable@@ List.@@ of@@ (@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ B@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ ()), com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ D@@ ().get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ ()))); com.google.inject.@@ Injec@@ tor in@@ jec@@ tor = com.google.inject.@@ G@@ ui@@ ce@@ .@@ create@@ Injector@@ (@@ new com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ (c@@ fg@@ , com.google.gerrit.@@ test@@ ing.@@ NoteDb@@ Mo@@ de@@ .@@ new@@ Notes@@ M@@ ig@@ r@@ ation@@ From@@ En@@ v@@ ())); l@@ if@@ ec@@ yc@@ le = new com.google.gerrit.@@ l@@ if@@ ec@@ yc@@ le.@@ L@@ if@@ ec@@ yc@@ le@@ Manag@@ er@@ (); l@@ if@@ ec@@ yc@@ le.@@ add(@@ in@@ jec@@ tor@@ ); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); l@@ if@@ ec@@ yc@@ le.@@ start@@ (); db = schema@@ Factory.@@ open@@ (); schema@@ Factory.@@ create@@ (db@@ ); user@@ Id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id(); account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ Id, ( u@@ ) -@@ > update@@ ().set@@ Pref@@ er@@ red@@ Email@@ ("@@ user@@ @@@ ex@@ amp@@ le.@@ com@@ ")); user = re@@ load@@ User@@ (); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new com.google.gerrit.server.@@ util.@@ Request@@ Context@@ () { @java.lang.Override public com.google.gerrit.server.@@ Current@@ User get@@ User@@ () { return user@@ ; } @java.lang.Override public com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > get@@ Review@@ Db@@ Provider@@ () { return com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (db@@ ); } }); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ Pref@@ er@@ re@@ d = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ( u@@ ) -@@ > { if (@@ e@@ mail.@@ equals(@@ u@@ .@@ account@@ ().get@@ Pref@@ er@@ red@@ Email@@ ())) { al@@ read@@ y@@ Pref@@ er@@ re@@ d.@@ set@@ (@@ true@@ ); } else { u@@ .@@ update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); } }); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return al@@ read@@ y@@ Pref@@ er@@ red@@ Pref@@ er@@ red@@ () ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ ") : com.google.gerrit.extensions.restapi.Respon@@ se.@@ cre@@ ated@@ ("@@ "); } }
protected void set@@ Up@@ Dat@@ abase@@ () throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb un@@ der@@ ly@@ ing@@ Db = in@@ M@@ em@@ ory@@ Dat@@ abase@@ .get@@ Dat@@ abase@@ ().@@ open@@ ()) { schema@@ Cre@@ ator@@ .@@ create(@@ un@@ der@@ ly@@ ing@@ Db@@ ); } db = schema@@ Factory.@@ open@@ (); user@@ Id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id(); java.lang.String e@@ mai@@ l = "@@ user@@ @@@ ex@@ amp@@ le.@@ com@@ "; ext@@ er@@ n@@ al@@ Id@@ s@@ Update.@@ create@@ ().@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create@@ Email@@ (user@@ Id, email@@ )); account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ Id, ( u@@ ) -@@ > u@@ .@@ update@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ )); user = user@@ Factory.create@@ (user@@ Id); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ Id@@ )); } }
@org.junit.Test public void push@@ Account@@ Config@@ To@@ User@@ Branch@@ Invalid@@ Pref@@ er@@ red@@ Email@@ B@@ ut@@ Not@@ Change@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Test@@ Account fo@@ o = account@@ Cre@@ ator@@ .@@ create(@@ name@@ ("@@ foo@@ "), ((@@ name@@ ("@@ foo@@ ")) + "@@ @@@ ex@@ amp@@ le.@@ com@@ "), "@@ F@@ oo@@ "); java.lang.String user@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ foo@@ .@@ id); java.lang.String no@@ E@@ mai@@ l = "@@ no@@ .@@ email@@ "; account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ foo@@ .@@ id, ( u@@ -@@ > update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (@@ no@@ Email@@ )); account@@ Index@@ ed@@ Coun@@ ter.@@ c@@ le@@ ar@@ (); g@@ ran@@ t(@@ all@@ User@@ s, user@@ Ref@@ , Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s, foo@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (@@ all@@ User@@ s@@ Repo@@ , (user@@ Re@@ f + "@@ :@@ user@@ Ref@@ :@@ ")); all@@ User@@ s@@ Repo@@ .@@ re@@ set@@ ("@@ user@@ Ref@@ "); java.lang.String statu@@ s = "@@ in va@@ c@@ ation@@ "; org.eclipse.jgit.lib.@@ Config a@@ c = get@@ Account@@ Config@@ (@@ all@@ User@@ s@@ Repo@@ ); ac@@ .set@@ String@@ (@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T@@ , null@@ , Account@@ Config.@@ K@@ E@@ Y_@@ ST@@ AT@@ US@@ , statu@@ s); push@@ Factory.create@@ (db, foo@@ .getId@@ ent@@ (), all@@ User@@ s@@ Repo@@ , "@@ Update ac@@ count config@@ ", Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , ac@@ .@@ to@@ Text@@ ()).@@ to@@ (user@@ Ref@@ )@@ .@@ assert@@ O@@ k@@ Statu@@ s(); account@@ Index@@ ed@@ Coun@@ ter@@ .@@ assert@@ Re@@ index@@ Of(@@ foo@@ ); com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo = gApi.@@ account@@ s().@@ id(@@ foo@@ .@@ id@@ .get@@ ()@@ ).get@@ (); assert@@ Th@@ at@@ (info.@@ email@@ ).@@ isEqualTo(@@ foo@@ .@@ f@@ ull@@ Name); assert@@ Th@@ at@@ (info.@@ statu@@ s).@@ isEqualTo(@@ statu@@ s); }
@org.junit.Test public void update@@ Account@@ With@@ out@@ Account@@ Config@@ NoteDb@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Test@@ Account an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d = account@@ Cre@@ ator@@ .@@ create@@ (); assert@@ User@@ Branch@@ With@@ out@@ Account@@ Config@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId()); java.lang.String statu@@ s = "@@ O@@ O@@ "; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId@@ (), ( u@@ ) -@@ > update@@ ().set@@ Statu@@ s(@@ status@@ )); assert@@ Th@@ at(@@ account@@ ).@@ is@@ Not@@ Null@@ (); assert@@ Th@@ at(@@ account@@ .get@@ F@@ ull@@ Name@@ ()).@@ isNull@@ (); assert@@ Th@@ at(@@ account@@ .getStatu@@ s@@ ()).@@ isEqualTo(@@ statu@@ s); assert@@ User@@ Branch@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId@@ (), null@@ , statu@@ s); }
@org.junit.Test public void l@@ ook@@ Up@@ By@@ Pref@@ er@@ red@@ Email@@ () throw@@ s java.lang.Exception { java.lang.String pre@@ fi@@ x = "@@ foo@@ .@@ p@@ ref@@ er@@ red@@ "; java.lang.String p@@ ref@@ E@@ mai@@ l = pre@@ fi@@ x + "@@ @@@ ex@@ amp@@ le.@@ com@@ "; com.google.gerrit.acceptance.@@ Test@@ Account fo@@ o = account@@ Cre@@ ator@@ .@@ create(@@ name@@ ("@@ foo@@ ")); account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ foo@@ .@@ id, ( u@@ -@@ > u@@ .@@ update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ Email@@ )); com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s@@ By@@ E@@ mai@@ l = email@@ s.get@@ Account@@ (p@@ ref@@ ); assert@@ Th@@ at(@@ account@@ s@@ By@@ Pref@@ Email@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ s@@ By@@ Email@@ )).@@ isEqualTo(@@ foo@@ .@@ id); account@@ s@@ By@@ Pref@@ E@@ mai@@ l = email@@ s.get@@ For@@ Account@@ (p@@ re@@ fix@@ ); assert@@ Th@@ at(@@ account@@ s@@ By@@ Pref@@ Pref@@ Pref@@ E@@ mai@@ l = email@@ By@@ Account@@ s.get@@ For@@ (p@@ ref@@ E@@ mail.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )); assert@@ Th@@ at(@@ account@@ s@@ By@@ Email@@ ).@@ isEmpty@@ (); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , com.google.gerrit.extensions.common.@@ Name@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ F@@ U@@ L@@ _@@ NAME@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w edit@@ ing name@@ "); } java.lang.String new@@ Name = input.@@ name@@ ; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ( u@@ ) -@@ > u@@ .@@ update@@ ().set@@ F@@ ull@@ Name(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ E@@ mpty@@ (@@ new@@ Name@@ ))); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .get@@ F@@ ull@@ Name@@ ()) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (account@@ .get@@ F@@ ull@@ Name()); }
public com.google.gerrit.reviewdb.client.@@ Account update@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.Account@@ Update@@ > con@@ su@@ m@@ er@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update@@ (account@@ Id, com.google.common.collect.Immutable@@ List.@@ of@@ (@@ con@@ su@@ m@@ er@@ )); }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.reviewdb.client.@@ Account update@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.List<@@ java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.Account@@ Update@@ >> con@@ su@@ m@@ er@@ s) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ con@@ su@@ m@@ er@@ s.@@ isEmpty()) { return null@@ ; } com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (account@@ Id); java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); if (@@ account.@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ Update account@@ Update = create@@ (account@@ .get()); con@@ su@@ m@@ er@@ s.@@ stream@@ ()@@ .@@ for@@ E@@ ach@@ (@@ ( c@@ ) -@@ > c.@@ accept@@ (account@@ Update@@ )); account@@ Config.@@ set@@ Account@@ Update@@ (account@@ Update.@@ bu@@ ild@@ ()); commit@@ (account@@ Config@@ ); } return account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); }
public com.google.gerrit.reviewdb.client.@@ Account insert@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.Account@@ Update@@ > init@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (); com.google.gerrit.server.account.Account@@ Update account@@ Update = account@@ Update@@ Factory.create@@ (account@@ ); init.@@ accept@@ Update@@ (account@@ Config.@@ set@@ Account@@ Update@@ (account@@ Update@@ Factory@@ , account@@ Update@@ .get@@ O@@ ld@@ Account@@ ().get@@ (), account@@ ); return account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { check@@ Load@@ ed@@ (); if ((@@ revision@@ ) != null@@ ) { comm@@ it.@@ set@@ Message@@ ("@@ Update account@@ \n@@ "); } else { comm@@ it.@@ set@@ Message@@ ("@@ Cre@@ ate account@@ \n@@ "); comm@@ it.@@ set@@ Author@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ commit@@ .get@@ Author@@ (), re@@ gist@@ er@@ ed@@ On@@ )); comm@@ it.@@ set@@ Commit@@ ter@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ commit@@ .get@@ Commit@@ ter@@ (), re@@ gist@@ er@@ ed@@ On@@ )); } org.eclipse.jgit.lib.@@ Config cf@@ g = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); if (account@@ Update.@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ Config.@@ write@@ To@@ Config@@ (account@@ Update@@ .get(), cfg@@ ); } save@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , cfg@@ ); load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (c@@ fg@@ , null@@ )); return true@@ ; }
public void set@@ Account@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ Load@@ ed@@ (); this@@ .@@ load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (account@@ ); this@@ .@@ account@@ Update = java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ account.@@ In@@ ternal@@ Account@@ Update.@@ buil@@ der@@ ().set@@ Active@@ (@@ account.@@ is@@ Active@@ ()).@@ set@@ F@@ ull@@ Name(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .get@@ F@@ ull@@ Name@@ ()@@ )).@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()@@ )).@@ set@@ Statu@@ s(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .getStatu@@ s@@ ()@@ )).@@ bu@@ ild@@ ()); this@@ .@@ re@@ gist@@ er@@ ed@@ O@@ n = account@@ .get@@ Re@@ gist@@ er@@ ed@@ On@@ (); }
private Account.@@ Id create@@ Account@@ Out@@ side@@ Request@@ Context@@ (java.lang.String user@@ name, java.lang.String f@@ ull@@ Name, java.lang.String email@@ , boolean ac@@ tive@@ ) throw@@ s java.lang.Exception { try (com.google.gerrit.server.@@ util.@@ M@@ an@@ u@@ al@@ Request@@ Context ct@@ x = one@@ O@@ ff@@ Request@@ Contex@@ t.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Account.Id id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ (user@@ name@@ )@@ ).get@@ Account@@ Id(); if (@@ e@@ mai@@ l != null@@ ) { account@@ Manager.@@ link@@ (id@@ , com.google.gerrit.server.account.@@ Auth@@ Request@@ .@@ for@@ Email@@ (@@ email@@ )); } account@@ s@@ Update.@@ create@@ ().@@ update@@ (id@@ , ( u@@ ) -@@ > { u@@ .@@ update@@ ().set@@ F@@ ull@@ Name(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ f@@ ull@@ Name@@ )).@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ email@@ )).@@ set@@ Active@@ (@@ ac@@ tive@@ ); }); return id@@ ; } } }
@org.junit.Test public void check@@ Met@@ a@@ Id@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ account@@ s.get(@@ admin@@ .getId@@ ()@@ ).get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ admin@@ .getId@@ ())); com.google.gerrit.server.account.Account@@ s@@ Update u = account@@ s@@ Update.@@ create@@ (); com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ se@@ q@@ .@@ next@@ Account@@ Id()); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = au@@ .@@ insert@@ (account@@ Id, ( u@@ ) -@@ > { }); assert@@ Th@@ at(@@ account@@ .get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ account@@ Id@@ )); com.google.gerrit.reviewdb.client.@@ Account updat@@ ed@@ Account = au@@ .@@ update@@ (account@@ Id, u@@ ) -@@ > u@@ .@@ update@@ ().set@@ F@@ ull@@ Name@@ ("@@ foo@@ ")); assert@@ Th@@ at(@@ account@@ .get@@ Met@@ a@@ Id@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ updat@@ ed@@ Account@@ .get@@ Met@@ a@@ Id()); assert@@ Th@@ at(@@ updat@@ ed@@ Account@@ .get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ account@@ Id@@ )); }
private void in@@ vo@@ k@@ e@@ (@@ java.lang.String.@@ .@@ . par@@ ameter@@ s) throw@@ s java.io.IOException { org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Par@@ ser parse@@ r = new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Par@@ ser@@ (@@ this@@ ); try { par@@ ser@@ .@@ parse@@ Argument@@ (@@ par@@ ameter@@ s); if (in@@ put@@ File@@ s.@@ isEmpty()) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ par@@ ser@@ , "@@ as@@ c@@ i@@ i@@ do@@ c@@ tor@@ : FA@@ IL@@ ED@@ : in@@ pu@@ t fi@@ le mis@@ s@@ ing@@ "); } } catch (@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception e) { java.lang.@@ Sy@@ ste@@ m.@@ er@@ r.@@ p@@ r@@ int@@ l@@ n@@ (@@ e.get@@ Message()); par@@ ser@@ .@@ p@@ r@@ int@@ U@@ s@@ age@@ (java.lang.@@ Sy@@ ste@@ m.@@ err@@ ); java.lang.@@ Sy@@ ste@@ m.@@ ex@@ it@@ (1); return@@ ; } if ((@@ rev@@ n@@ umber@@ File@@ ) != null@@ ) { try (@@ java.io.@@ Bu@@ ff@@ er@@ ed@@ Read@@ er read@@ er = java.nio.file.@@ File@@ s@@ .@@ new@@ Bu@@ ff@@ er@@ ed@@ Read@@ er@@ (@@ rev@@ n@@ umber@@ File@@ .@@ to@@ Path@@ ())) { rev@@ n@@ u@@ mb@@ er = read@@ er.@@ read@@ Line@@ (); } } if (m@@ k@@ t@@ mp@@ ) { t@@ mp@@ di@@ r = java.nio.file.@@ File@@ s.@@ create@@ T@@ e@@ mp@@ Di@@ rec@@ tor@@ y@@ ("@@ as@@ c@@ i@@ do@@ c@@ tor@@ -@@ ").@@ to@@ File@@ (); } if (@@ b@@ a@@ z@@ el@@ ) { render@@ File@@ s(@@ input@@ File@@ s, null@@ ); } else { try (@@ java.util.@@ z@@ i@@ p.@@ Z@@ ip@@ Output@@ Stream z@@ i@@ p = new java.util.@@ z@@ i@@ p.@@ Z@@ ip@@ Output@@ Stream@@ (@@ java.nio.file.@@ File@@ s@@ .@@ new@@ Output@@ Stream@@ (@@ java.nio.file.@@ Path@@ s.get(@@ z@@ ip@@ File@@ )))) { render@@ File@@ s(@@ input@@ File@@ s, z@@ ip@@ ); java.io.File@@ [] c@@ s@@ File@@ s = t@@ mp@@ di@@ r.@@ list@@ File@@ s@@ (@@ new java.io.File@@ Filter@@ () { @java.lang.Override public boolean accept@@ (@@ java.io.File di@@ r@@ , java.lang.String name@@ ) { return name.@@ end@@ sWith@@ ("@@ .cs@@ s@@ "); } }); for (@@ java.io.File c@@ s : c@@ s@@ s) { File@@ s) { As@@ c@@ i@@ Doc@@ tor@@ .@@ z@@ ip@@ File@@ (c@@ s@@ .getName@@ (), c@@ ip@@ ); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Builder@@ <@@ T> r@@ e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ Builder@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ .@@ default@@ s@@ (), ( t@@ ) -@@ > t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ); try { return r@@ e@@ try@@ er@@ Buil@@ der.@@ bu@@ ild@@ ().@@ call@@ ((@@ ) -@@ > ac@@ tion.@@ call@@ ()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Exception e) { java.lang.@@ Throwable t = e@@ ; if ((@@ e.get@@ C@@ au@@ se@@ ()) != null@@ ) { t = e.get@@ C@@ au@@ se@@ (); } com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Change@@ Action@@ <@@ T> change@@ Action@@ , com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ <@@ T> r@@ e@@ try@@ er@@ ) throw@@ s java.lang.@@ Throwable { try { return r@@ e@@ try@@ er.@@ call@@ ((@@ -@@ > change@@ Ac@@ tion.@@ call@@ (@@ update@@ Factory@@ )); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Exception e) { if (@@ e instanceof com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Exception@@ ) { met@@ ri@@ c@@ s.@@ time@@ out@@ Coun@@ t.@@ in@@ cre@@ ment@@ (); } if ((@@ e.get@@ C@@ au@@ se@@ ()) != null@@ ) { throw e.get@@ C@@ au@@ se@@ (); } throw e@@ ; } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Builder@@ <@@ T> r@@ e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ Builder@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ .@@ default@@ s@@ (), ex@@ cepti@@ on@@ Predicate@@ ); try { return r@@ e@@ try@@ er@@ Buil@@ der.@@ bu@@ ild@@ ().@@ call@@ ((@@ -@@ > ac@@ tion.@@ call@@ ()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Exception e) { java.lang.@@ Throwable t = e@@ ; if ((@@ e.get@@ C@@ au@@ se@@ ()) != null@@ ) { t = e.get@@ C@@ au@@ se@@ (); } com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Change@@ Action@@ <@@ T> change@@ Action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { try { if (!(@@ m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ())) { return execute@@ (change@@ Action@@ , com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Buil@@ der.@@ er@@ (@@ new@@ Builder@@ ().@@ bu@@ ild@@ ()); } com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ en@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Builder@@ <@@ T> T> r@@ e@@ try@@ .get@@ R@@ e@@ try@@ Builder@@ (@@ op@@ t@@ s, ( t@@ ) -@@ > { if (@@ t instanceof com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ ) { t = t@@ .get@@ C@@ au@@ se@@ (); } return com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ; }); e@@ try@@ er@@ Buil@@ der.@@ w@@ ith@@ R@@ e@@ try@@ List@@ ener@@ (@@ list@@ ener@@ ); return execute@@ (change@@ Action@@ , r@@ e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ()); } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ s.@@ re@@ cor@@ d(@@ list@@ ener@@ .get@@ At@@ te@@ mp@@ t@@ Count@@ ()); } } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gerrit.extensions.restapi.RestApi@@ Exception@@ .@@ class@@ ); throw new com.google.gerrit.server.@@ update.@@ Update@@ Exception(@@ t@@ ); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute@@ (@@ action@@ , ( t@@ ) -@@ > ((@@ com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ) -@@ > { com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ); }
private void re@@ cur@@ si@@ v@@ el@@ y@@ Ex@@ p@@ and@@ Group@@ s@@ (@@ final java.util.@@ Set@@ <java.lang.String> group@@ D@@ N@@ s, final com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ H@@ el@@ p@@ er.@@ L@@ d@@ ap@@ S@@ che@@ m@@ a schema@@ , final javax.@@ nam@@ ing.@@ di@@ rec@@ tor@@ y.@@ Di@@ r@@ Context ctx@@ , final java.lang.String group@@ D@@ N@@ ) { if (((@@ group@@ D@@ N@@ s.add(@@ group@@ D@@ N@@ )) && ((@@ schema.@@ account@@ Member@@ Fiel@@ d) != null@@ )) && (s@@ chema@@ .@@ account@@ Member@@ Ex@@ p@@ and@@ Group@@ s@@ )) { com.google.common.collect.Immutable@@ Set@@ <java.lang.String> cach@@ ed@@ Parent@@ s@@ D@@ N@@ s = parent@@ Group@@ s.get@@ I@@ f@@ P@@ res@@ ent@@ (@@ group@@ D@@ N@@ ); if (c@@ ach@@ ed@@ Parent@@ s@@ D@@ N@@ s == null@@ ) { com.google.common.collect.Immutable@@ Set.@@ Builder@@ <java.lang.String> d@@ n@@ s = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); try { final javax.@@ nam@@ ing.@@ Name com@@ po@@ sit@@ e@@ Group@@ Name = new javax.@@ nam@@ ing.@@ Co@@ m@@ po@@ sit@@ e@@ Name@@ ().@@ add(@@ group@@ D@@ N@@ ); final javax.@@ nam@@ ing.@@ di@@ rec@@ tor@@ y.@@ Attri@@ but@@ e in = ctx@@ .get@@ Attri@@ but@@ es(@@ com@@ po@@ sit@@ e@@ Group@@ Name, account@@ Member@@ Fiel@@ d@@ Array@@ )@@ .get(@@ schema.@@ account@@ Member@@ Fiel@@ d); if (@@ in != null@@ ) { final javax.@@ nam@@ ing.@@ Nam@@ ing@@ En@@ um@@ er@@ ation@@ <?@@ > group@@ s = in@@ .get@@ All@@ (); try { while (@@ group@@ s.@@ has@@ Mo@@ re@@ ()) { d@@ n@@ s.@@ add@@ (((@@ java.lang.String@@ ) (@@ group@@ s.@@ next@@ ()))); } } catch (@@ javax.@@ nam@@ ing.@@ Par@@ ti@@ al@@ Result@@ Exception e) { } } } catch (@@ javax.@@ nam@@ ing.@@ Nam@@ ing@@ Exception e) { L@@ d@@ ap@@ Re@@ al@@ m.@@ log.warn@@ (("@@ Co@@ ul@@ d not fin@@ d ac@@ count " + group@@ D@@ N@@ ), e); } cach@@ ed@@ Parent@@ s@@ D@@ N@@ s = d@@ n@@ s.@@ bu@@ ild@@ (); parent@@ Group@@ s.@@ put(@@ group@@ D@@ N@@ , cach@@ ed@@ Parent@@ s@@ D@@ N@@ s); } for (java.lang.String d@@ n : cach@@ ed@@ Parent@@ s@@ D@@ N@@ s) { re@@ cur@@ si@@ v@@ el@@ y@@ Ex@@ p@@ and@@ Group@@ s(@@ group@@ D@@ N@@ s, schema@@ , d@@ n@@ ); } } }
com.google.gerrit.server.@@ api.@@ changes.@@ File@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource r@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ Resource group@@ ) throw@@ s com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Member@@ Description@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Vo@@ te@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Vo@@ te@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Reviewer@@ Resource reviewer@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { if (((@@ reviewer@@ .get@@ Revision@@ Resource@@ ()) != null@@ ) && (!(@@ reviewer@@ .get@@ Revision@@ Resource@@ ().@@ is@@ Current@@ ()))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ Cannot ac@@ ces@@ s on n@@ on@@ -@@ cur@@ ren@@ t p@@ atch set@@ "); } return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Vo@@ te@@ Resource@@ (@@ reviewer@@ , id@@ .get()); }
@java.lang.Override public Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { if (!(@@ hand@@ le@@ s(@@ u@@ id@@ ))) { return null@@ ; } java.lang.String group@@ D@@ n = u@@ u@@ id@@ .get().@@ substring@@ (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ H@@ el@@ p@@ er.@@ L@@ D@@ AP@@ _@@ UUID@@ .@@ length@@ ()); com.google.gerrit.server.@@ Current@@ User user = user@@ Provider@@ .get(); if ((!@@ (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) || (!(@@ me@@ mber@@ sh@@ i@@ ps@@ Of@@ (user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()).@@ contains(@@ u@@ id@@ )))) { try { if (!(@@ ex@@ ist@@ s@@ Cache@@ .get(@@ group@@ D@@ n@@ ))) { return null@@ ; } } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ ook@@ up ac@@ count %s in L@@ D@@ AP@@ ", group@@ D@@ ), e); return null@@ ; } final java.lang.String name = (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ L@@ D@@ AP@@ _@@ NAME@@ ) + (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ c@@ n@@ For@@ (@@ group@@ D@@ n@@ )); return new com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ ic@@ () { @java.lang.Override public Account@@ Group.@@ UU@@ I@@ D get@@ Group@@ UUID@@ () { return u@@ u@@ id@@ ; } @java.lang.Override public java.lang.String get@@ Name@@ () { return name@@ ; } @java.lang.Override public java.lang.String get@@ Email@@ Add@@ res@@ s() { return null@@ ; } @java.lang.Override public java.lang.String get@@ Name@@ () { return null@@ ; } @java.lang.Override public java.lang.String get@@ Name@@ () { return null@@ ; } }; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ D@@ ashbo@@ ard@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ resource@@ .is@@ Project@@ Default@@ ()) { com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input in = new com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input@@ (); in.@@ commit@@ Messag@@ e = (in@@ pu@@ t != null@@ ) ? input.@@ commit@@ Messag@@ e : null@@ ; return default@@ Set@@ .get().@@ apply(@@ resource@@ , in@@ ); } throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ (); }
@org.junit.Test public void update@@ Group@@ Nam@@ es@@ With@@ E@@ mpty@@ Collection@@ C@@ le@@ ar@@ s@@ All@@ Notes@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 1 = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 2 = new@@ Group@@ ("@@ b@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Notes@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ , g@@ 1, g@@ 2); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Test@@ Util.@@ read@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ a@@ -@@ 1@@ ", "@@ b@@ ", "@@ b@@ -@@ 2@@ "); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Nam@@ ing.@@ Test@@ Util.@@ read@@ Name@@ To@@ U@@ u@@ id@@ (repo@@ )).@@ isEmpty@@ (); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ log@@ .get(@@ 1@@ )).@@ message@@ ().@@ isEqualTo@@ ("@@ St@@ or@@ e ac@@ count nam@@ es@@ "); }
@org.junit.Test public void empty@@ Group@@ Name@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g = new@@ Group@@ ("@@ "); update@@ Group@@ Nam@@ es(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Notes@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (), g@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup.@@ db.@@ test@@ ing.@@ Test@@ Group@@ Name@@ Util.@@ read@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ ", "@@ -@@ 1@@ "); assert@@ Th@@ at(@@ read@@ Name@@ Note@@ (@@ g@@ )).@@ isEqualTo@@ ("@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = -@@ 1@@ \n@@ \@@ t@@ name = \n@@ "); }
@org.junit.Test public void update@@ Group@@ Nam@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 1 = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 2 = new@@ Group@@ ("@@ b@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = db.@@ db.@@ Group@@ Name@@ Notes@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ , g@@ 1, com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ parent@@ s().@@ isEmpty@@ (); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ isEqualTo@@ ("@@ St@@ or@@ e 2 ac@@ count nam@@ es@@ "); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ author@@ ().@@ match@@ es@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ commit@@ ter@@ ().@@ match@@ es@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup.@@ db.@@ test@@ ing.@@ read@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ ", "@@ a@@ -@@ 1@@ ", "@@ b@@ ", "@@ b@@ -@@ 2@@ "); java.lang.String commit = log@@ .get(@@ 0@@ ).@@ commit@@ ; update@@ Group@@ Nam@@ es(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Test@@ Notes@@ .@@ new@@ Per@@ son@@ Ident@@ (), 1, g@@ 2); lo@@ g = log@@ .get(@@ assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ commit@@ ().@@ isEqualTo(@@ commit@@ ); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Member@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ P@@ ut@@ Me@@ mb@@ er create@@ (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource group@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) { return new com.google.gerrit.server.@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ P@@ ut@@ Member@@ (@@ put@@ , id@@ .get()); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Member@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = pa@@ rent.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = account@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id@@ ).get@@ User@@ (); if ((@@ parent@@ .get@@ Control@@ ().@@ can@@ Se@@ e@@ Member@@ (user@@ .getAccount@@ Id@@ ())) && (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Member@@ s@@ Collec@@ tion.@@ is@@ Member@@ (@@ group@@ , user@@ ))) { return new com.google.gerrit.server.@@ re@@ st@@ i@@ .g@@ roup.@@ Member@@ Resource@@ (p@@ arent@@ , user@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { return list@@ .get(); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ Fi@@ x@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Fi@@ x@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource revision@@ Resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String fix@@ Id = id@@ .get(); com.google.gerrit.server.notedb.Change@@ Note@@ s change@@ Note@@ s = revision@@ Resource@@ .get@@ Notes@@ (); java.util.List<@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ botComment@@ > ro@@ botComment@@ s = comment@@ s@@ Util.@@ ro@@ botComment@@ s@@ By@@ PatchSet@@ (change@@ Notes@@ , revision@@ Resource@@ .get@@ PatchSet@@ ().get@@ Id()); for (@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ bot@@ Comm@@ ent ro@@ bot@@ Comm@@ ent : ro@@ botComment@@ s) { for (@@ com.google.gerrit.reviewdb.client.@@ Fi@@ x@@ Su@@ gg@@ es@@ tion fix@@ Su@@ gg@@ es@@ tion : ro@@ bot@@ Comm@@ ent.@@ fix@@ Su@@ gg@@ es@@ tion@@ s) { if (@@ java.util.@@ Object@@ s.@@ equals(@@ fix@@ Id, fix@@ Su@@ gg@@ es@@ tion.@@ fix@@ Id@@ )) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Fi@@ x@@ Resource@@ (@@ revision@@ Resource@@ , fix@@ Su@@ gg@@ es@@ tion.@@ replace@@ ment@@ s); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ re@@ stapi.@@ Resource req@@ , To@@ pic@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { req@@ .@@ per@@ mission@@ s().@@ check@@ (@@ Change@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ ); if ((@@ (in@@ pu@@ t != null@@ ) && ((@@ input.@@ topic@@ ) != null@@ )) && ((@@ input.@@ to@@ p@@ i@@ c.@@ length@@ ()) > (com.google.gerrit.server.@@ Change@@ Util.@@ T@@ O@@ P@@ I@@ C_@@ M@@ A@@ X@@ _@@ LE@@ N@@ T@@ H@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ to@@ p@@ i@@ c g@@ len@@ g@@ t@@ h ex@@ ce@@ ed@@ s th@@ e li@@ m@@ it (@@ %s@@ )@@ ", Change@@ Util.@@ T@@ O@@ P@@ I@@ C_@@ A@@ X@@ _@@ LE@@ N@@ G@@ H@@ T@@ )); } com.google.gerrit.server.@@ re@@ stapi.@@ P@@ ut@@ To@@ p@@ i@@ c.@@ O@@ p o@@ p = new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ P@@ ut@@ To@@ p@@ i@@ c.@@ Op@@ ((@@ in@@ pu@@ t != null ? in@@ pu@@ t : new To@@ pic@@ Input@@ ())); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), req@@ .getChange@@ ().get@@ Project@@ (), req@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (req@@ .getId@@ (), op@@ ); u@@ .@@ execute@@ (); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ op@@ .@@ new@@ To@@ pic@@ Name) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ op@@ .@@ new@@ To@@ pic@@ Name); }
@org.junit.Test public void by@@ Label@@ Group@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ "); create@@ Account@@ ("@@ user@@ 2@@ "); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); java.lang.String g@@ 1 = create@@ Group@@ ("@@ group@@ 1@@ ", "@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "); java.lang.String g@@ 2 = create@@ Group@@ ("@@ group@@ 2@@ ", "@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ 1@@ ).@@ add@@ Member@@ s("@@ user@@ 1@@ "); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ 2@@ ).@@ add@@ Member@@ s("@@ user@@ 2@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo, new@@ Change@@ (repo@@ ), user@@ 1); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ 1@@ )); gApi.changes().id(@@ change@@ 1@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ ().@@ label@@ ("@@ Code@@ -@@ Review@@ ", 1@@ )); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ Id@@ )); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ group@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ account@@ =@@ group@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ user@@ =@@ user@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ user@@ 2@@ "); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ account@@ =@@ group@@ 2@@ "); }
@org.junit.Test public void submit@@ Recor@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ "); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo, new@@ Change@@ (repo@@ )); com.google.gerrit.reviewdb.client.Change change@@ 2 = insert@@ (repo, new@@ Change@@ (repo@@ )); gApi.changes().id(@@ change@@ 1@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ 1@@ )); gApi.changes().id(@@ change@@ 2@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ re@@ comm@@ end@@ ()); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ .getAccount@@ Id@@ ())); assert@@ Query@@ ("@@ is@@ :@@ submit@@ table@@ ", change@@ 1); assert@@ Query@@ ("@@ -@@ is@@ :@@ submit@@ table@@ ", change@@ 2); assert@@ Query@@ ("@@ submit@@ table@@ :@@ o@@ k@@ ", change@@ 1); assert@@ Query@@ ("@@ submit@@ table@@ :@@ not@@ _@@ read@@ y@@ ", change@@ 2); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ -@@ Re@@ vi@@ e@@ W@@ =@@ W@@ e@@ o@@ k@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ W@@ o@@ k@@ ,@@ user@@ =@@ user@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ o@@ k@@ ,@@ Ad@@ min@@ ist@@ r@@ ator@@ s", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ o@@ k@@ ,@@ account@@ =@@ Ad@@ min@@ ist@@ r@@ ator@@ s", 1); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ W@@ o@@ k@@ ,@@ owner@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ user@@ 1@@ "); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ -@@ Re@@ vi@@ e@@ =@@ W@@ ne@@ ed@@ ", change@@ 2); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ E@@ Re@@ vi@@ e@@ =@@ label@@ :@@ Co@@ d@@ E@@ Re@@ vi@@ e@@ =@@ user@@ 1@@ "); assert@@ Query@@ ("@@ label@@ :@@ E@@ d@@ -@@ Re@@ vi@@ e@@ =@@ user@@ "); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Commit@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Commit@@ Resource rsrc@@ ) throw@@ s java.io.IOException { return com.google.gerrit.server.git.@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (rsrc@@ .get@@ Commit@@ ()); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Create@@ T@@ a@@ g create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g name@@ ) { return create@@ Tag@@ Factory.create@@ (@@ name@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ Group al@@ read@@ y ex@@ ist@@ s@@ "); }
public static java.lang.String des@@ cri@@ be@@ (com.google.gerrit.server.@@ Current@@ User user@@ ) { if (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { return user@@ .getAccount@@ Id@@ ().@@ toString@@ (); } if (@@ user instanceof com.google.gerrit.server.query.@@ change.@@ S@@ ingle@@ Group@@ User@@ ) { return "@@ account@@ :@@ " + (user@@ .get@@ E@@ ff@@ ec@@ tive@@ Group@@ s@@ ().get@@ K@@ no@@ w@@ n@@ Group@@ s().@@ iter@@ ator@@ ().@@ next@@ ().@@ toString@@ ()); } return user@@ .@@ toString@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Member@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.Account@@ Load@@ er load@@ er = info@@ Factory.create@@ (@@ true@@ ); com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo = load@@ er@@ .get(@@ rsrc@@ .get@@ Member@@ ().get@@ Account@@ Id()); load@@ er.@@ fi@@ ll@@ (); return info@@ ; }
private static java.lang.String get@@ Group@@ Name(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) { return group@@ Cache@@ .get(@@ group@@ Id@@ ).@@ map@@ (@@ Group@@ :@@ :@@ get@@ Name@@ ).@@ or@@ E@@ l@@ se@@ (("@@ De@@ le@@ ted ac@@ count " + group@@ Id@@ )); }
private void log@@ Orm@@ Exception@@ For@@ Group@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id m : values@@ ) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = m@@ .get@@ Inclu@@ de@@ UUID@@ (); java.lang.String group@@ Name = group@@ Back@@ end@@ .get(@@ group@@ U@@ u@@ id@@ ).get@@ Name@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id t@@ arget@@ Group@@ Id = m@@ .get@@ Group@@ Id(); java.lang.String t@@ arget@@ Name = get@@ Group@@ Name(@@ t@@ arget@@ Group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ ac@@ count {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , ac@@ count {@@ 2@@ }@@ /@@ {@@ 3@@ }@@ ", group@@ U@@ u@@ id, group@@ Name, t@@ arget@@ Group@@ Id, t@@ arget@@ Group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
@java.lang.Override public void on@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = new java.util.ArrayList<@@ >(); java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t a : db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ by@@ Group@@ Account@@ (m@@ .getAccount@@ Group@@ Id(), m@@ .getAccount@@ Id@@ ())) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } else { au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (m@@ , me@@ , remo@@ v@@ ed@@ On@@ ); au@@ d@@ it.@@ remo@@ v@@ ed@@ L@@ e@@ g@@ ac@@ y@@ (); au@@ dit@@ In@@ sert@@ s.add(@@ au@@ dit@@ ); } } db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m ac@@ count ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , remo@@ v@@ ed@@ , e); } }
@java.lang.Override public void on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : add@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (m@@ , me@@ , add@@ ed@@ On@@ ); au@@ dit@@ In@@ sert@@ s.add(@@ au@@ dit@@ ); } try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g ad@@ d account@@ s to ac@@ count ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ , e); } }
@java.lang.Override public void on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { final java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id g : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d a : db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ by@@ Group@@ Inclu@@ de@@ (@@ g@@ .get@@ Group@@ Id(), g@@ .get@@ Inclu@@ de@@ UUID@@ ())) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } } db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m ac@@ count ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , remo@@ v@@ ed@@ , e); } }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ E@@ di@@ t To@@ pic@@ ").@@ setVisible@@ (r@@ sr@@ c.@@ per@@ mission@@ s().@@ test@@ Con@@ d(@@ Change@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ )); }
@java.lang.Override public void on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > in@@ clu@@ des@@ Au@@ di@@ t = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id group@@ Inclu@@ de : add@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ group@@ Inclu@@ de@@ , me@@ , add@@ ed@@ On@@ ); in@@ clu@@ des@@ Au@@ d@@ it.@@ add(@@ au@@ dit@@ ); } try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (in@@ clu@@ des@@ Au@@ dit@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g ad@@ d group@@ s to ac@@ count p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ , e); } }
public static void log@@ F@@ ail@@ To@@ Load@@ From@@ Group@@ Ref@@ W@@ ar@@ n@@ ing@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { com.google.gerrit.server.g@@ roup.@@ db.@@ s@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ (@@ warn@@ ing@@ ("@@ Group w@@ it@@ h UU@@ I@@ D %s f@@ ro@@ m ac@@ count name note@@ s f@@ ai@@ le@@ d to lo@@ ad f@@ ro@@ m ac@@ count ref@@ ", u@@ id@@ )); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ With@@ Group@@ Name@@ Notes@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , java.lang.String group@@ Name, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ UUID@@ ) throw@@ s java.io.IOException { try { java.util.@@ Optional@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Re@@ f = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ load@@ Group@@ Ref@@ eren@@ ce@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Name); if (!(@@ group@@ Ref@@ .is@@ P@@ res@@ ent@@ ())) { return com.google.common.collect.Immutable@@ List.@@ of@@ (@@ warn@@ ing@@ ("@@ Group w@@ it@@ h name '@@ %s@@ ' do@@ es@@ n@@ '@@ t ex@@ is@@ t in th@@ e li@@ s@@ t of al@@ l nam@@ es@@ ", group@@ Name@@ )); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ Ref@@ .get@@ ().get@@ UUID@@ (); java.lang.String name = group@@ Ref@@ .get@@ ().get@@ Name@@ (); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); if (!(@@ java.util.@@ Object@@ s.@@ equals(@@ group@@ UUID@@ , u@@ u@@ id@@ ))) { pro@@ ble@@ m@@ s.add(@@ warn@@ ing@@ ("@@ ac@@ count w@@ it@@ h name '@@ %s@@ ' h@@ a@@ s UU@@ I@@ D '@@ %s@@ ' in '@@ t bu@@ t '@@ %s@@ ' in ac@@ count name notes@@ ", group@@ Name, group@@ Name, group@@ UUID@@ , u@@ u@@ id@@ )); } } if (!(@@ java.util.@@ Object@@ s.@@ equals(@@ group@@ Name, name@@ ))) { pro@@ ble@@ m@@ s.add(@@ warn@@ ing@@ ("@@ ac@@ count not@@ e of name '@@ %s@@ ' c@@ l@@ ai@@ m@@ s to rep@@ res@@ ent name of '@@ %s@@ '@@ ", group@@ Name, name@@ )); } return pro@@ ble@@ ms@@ ; } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException e) { return com.google.common.collect.Immutable@@ List.@@ of@@ (@@ warn@@ ing@@ ("@@ f@@ ai@@ l to ch@@ ec@@ k con@@ si@@ st@@ en@@ c@@ y w@@ it@@ h ac@@ count name : %s", e.get@@ Message@@ ())); } }
private void read@@ Group@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s, com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result result) throw@@ s java.io.IOException { for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > en@@ try : refs.@@ en@@ try@@ Set@@ ()) { if (!(@@ en@@ try@@ .getKey@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ))) { continue@@ ; } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = Account@@ Group.@@ UUID@@ .@@ from@@ Ref@@ (@@ en@@ try@@ .getKey@@ ()); if (@@ u@@ id == null@@ ) { result.@@ pro@@ ble@@ m@@ s.add(@@ error@@ (@@ "@@ null UU@@ I@@ D f@@ ro@@ m %s", en@@ try@@ .getKey@@ ())); continue@@ ; } try { com.google.gerrit.server.g@@ roup.@@ Group@@ Config cf@@ g = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ S@@ n@@ ap@@ sh@@ o@@ t@@ (repo, u@@ u@@ id, en@@ try@@ .getValue@@ ().get@@ Object@@ Id()); result.@@ u@@ u@@ id@@ To@@ Map.@@ put(@@ u@@ id, cfg@@ .get@@ Load@@ ed@@ Group@@ ().get@@ ()); } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException e) { result.@@ pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ ac@@ count %s do@@ es not parse@@ : %s", u@@ u@@ id, e.get@@ Message@@ ())); } } }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ projects.@@ Parent@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return apply(@@ rsrc@@ , input@@ ); }
public void vali@@ date@@ Parent@@ Update@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ Parent@@ , boolean check@@ I@@ f@@ Ad@@ min@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (@@ check@@ I@@ f@@ Ad@@ min@@ ) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); } if ((@@ project.@@ equals(@@ all@@ User@@ s@@ )) && (!(@@ all@@ Project@@ s.get@@ ().@@ e@@ qual@@ s@@ (@@ new@@ Parent@@ )))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s m@@ us@@ t in@@ her@@ it f@@ ro@@ m %s", all@@ User@@ s.get@@ (), all@@ Project@@ s.get@@ ())); } if (@@ project.@@ equals(@@ all@@ Project@@ s@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ can@@ not se@@ t of " + (@@ all@@ Project@@ s.get@@ ()))); } new@@ P@@ a@@ ren@@ t = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ new@@ Parent@@ ); if (@@ new@@ P@@ a@@ ren@@ t != null@@ ) { com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ State pa@@ ren@@ t = cach@@ e.get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ new@@ Parent@@ )); if (p@@ a@@ ren@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception@@ ((("@@ pa@@ ren@@ t project " + new@@ Parent@@ ) + " not fo@@ und@@ ")); } if (p@@ arent@@ .getName@@ ().equals(@@ project@@ .get@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ can@@ not se@@ t pa@@ ren@@ t to self@@ "); } if (@@ com.google.common.collect.I@@ terable@@ s@@ .@@ try@@ F@@ in@@ d(@@ pa@@ rent.@@ t@@ ree@@ (), ( p@@ ) -@@ > { return p@@ .getName@@ Key@@ ().equals(@@ project@@ ); }@@ ).@@ is@@ P@@ res@@ ent@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ (("@@ c@@ le ex@@ ist@@ s b@@ et@@ we@@ en " + (project@@ .get@@ ())) + " an@@ d ") + (p@@ arent@@ .getName@@ ()))); } }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Tag@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return new com.google.gerrit.server.@@ re@@ stapi.@@ Tag@@ Resource@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .getUser@@ (), list@@ .get@@ ().get@@ (rsrc@@ , id@@ )); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if (!(@@ ag@@ reement@@ s@@ Enable@@ d@@ )) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ cont@@ ri@@ bu@@ tor ag@@ reement@@ s dis@@ able@@ d@@ "); } if (!(@@ self@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ e@@ t cont@@ ri@@ bu@@ tor ag@@ reement@@ s@@ "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = self@@ .get().@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); if (@@ user != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ e@@ t cont@@ ri@@ bu@@ tor ag@@ reement@@ s@@ "); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Info> result@@ s = new java.util.ArrayList<@@ >(); java.util.Collection<@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ > c@@ a@@ s = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s(); for (@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a : c@@ as@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > group@@ Id@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e r@@ ul@@ e : c@@ a@@ .get@@ Ac@@ cep@@ ted@@ ()) { if ((@@ (r@@ ule@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ AL@@ LO@@ W@@ )) && ((@@ rule@@ .get@@ Group@@ ()) != null@@ )) { if ((@@ rule@@ .get@@ Group@@ ().get@@ UUID@@ ()) != null@@ ) { group@@ Id@@ s.add(@@ rule@@ .get@@ Group@@ ().get@@ UUID@@ ()); } else { com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Ag@@ reement@@ s.@@ log.warn@@ ((((@@ (("@@ ac@@ count \"@@ " + (r@@ ule@@ .get@@ Group@@ ().get@@ Name@@ ())) + "@@ \@@ " do@@ es not ") + "@@ ex@@ ist@@ , ref@@ eren@@ ce@@ d in C@@ L@@ A \"@@ ") + (c@@ a@@ .getName@@ ())) + "@@ \"@@ ")); } } if (user@@ .get@@ E@@ ff@@ ec@@ tive@@ Group@@ s().@@ contains@@ An@@ y@@ Of(@@ group@@ Id@@ s@@ )) { result@@ s.add(@@ ag@@ reement@@ Json@@ .@@ for@@ m@@ at@@ a@@ )); } } return result@@ s; }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : values@@ ) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = m@@ .getAccount@@ Id(); java.lang.String user@@ Name = account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ User@@ Name@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = m@@ .getAccount@@ Group@@ Id(); java.lang.String group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ ac@@ count {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , ac@@ count {@@ 2@@ }@@ /@@ {@@ 3@@ }@@ ", account@@ Id, user@@ Name, group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
@java.lang.Override protected void configure() { bind(@@ com.google.gerrit.server.@@ re@@ stapi.@@ ac@@ ces@@ s.@@ Access@@ Collection@@ .@@ class@@ ); com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map.@@ map@@ Of(@@ bin@@ der@@ (), com.google.gerrit.server.@@ re@@ stapi.@@ ac@@ ces@@ s.@@ Access@@ Resource@@ .@@ AC@@ CES@@ S_@@ K@@ IN@@ D@@ ); }
private void test@@ Can@@ not@@ Create@@ Group@@ (java.lang.String ref@@ Pat@@ tern@@ , java.lang.String group@@ Ref@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ C@@ RE@@ A@@ TE@@ ); g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ P@@ US@@ H@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), all@@ User@@ s@@ Repo@@ ).to@@ (@@ group@@ Ref@@ ); r@@ .@@ assert@@ Error@@ Statu@@ s(); assert@@ Th@@ at(@@ r@@ .get@@ Message@@ ()).@@ contain@@ s("@@ No@@ t allow@@ ed to cre@@ ate ac@@ count branch@@ .@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { assert@@ Th@@ at(@@ repo.@@ ex@@ act@@ Ref@@ (@@ group@@ Ref@@ )).@@ isNull@@ (); } }
private static <@@ T> com.google.common.collect.Immutable@@ Set<@@ T> log@@ I@@ f@@ Not@@ Un@@ i@@ qu@@ e@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ S@@ our@@ ce source@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, java.lang.I@@ terable@@ <@@ T> iter@@ able@@ , java.util.@@ Comp@@ ar@@ ator@@ <@@ T> com@@ par@@ ator@@ , java.lang.@@ Class@@ <@@ T> c@@ la@@ z@@ z@@ ) { java.util.List<@@ T> li@@ s@@ t = com.google.common.collect.@@ Stream@@ s.@@ stream@@ (@@ iter@@ ator@@ ).@@ s@@ orted@@ (@@ com@@ par@@ ator@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); com.google.common.collect.Immutable@@ Set<@@ T> se@@ t = com.google.common.collect.Immutable@@ Set.@@ copy@@ Of(@@ list@@ ); if ((@@ se@@ t.@@ size@@ ()) != (@@ li@@ s@@ t.@@ size@@ ())) { com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ log.warn@@ ("@@ ac@@ count {@@ } in {@@ } h@@ a@@ s d@@ up@@ li@@ c@@ ate {@@ } ti@@ es@@ : {}@@ ", u@@ id, source@@ , c@@ la@@ z@@ .get@@ Si@@ mp@@ le@@ Name@@ (), iter@@ able@@ ); } return set@@ ; }
public static void update@@ Group@@ File@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ , java.lang.String ref@@ Name, java.lang.String file@@ Name, java.lang.String content@@ s) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (@@ all@@ User@@ s@@ Repo@@ )) { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.jgit.lib.@@ Repository@@ > test@@ Repository = new org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ all@@ User@@ s@@ Repo@@ , r@@ w@@ ); Test@@ Repository@@ <@@ Repository@@ >@@ .@@ Commit@@ Builder buil@@ der = test@@ Repositor@@ y.@@ branch@@ (ref@@ Name@@ ).@@ commit@@ ().@@ add(@@ file@@ Name, content@@ s).@@ message@@ ("@@ updat@@ e ac@@ count file@@ ").@@ author@@ (@@ server@@ Ident@@ ).@@ commit@@ ter@@ (@@ server@@ Ident@@ ); org.eclipse.jgit.lib.@@ Re@@ f re@@ f = all@@ User@@ s@@ Repo@@ .@@ ex@@ act@@ Ref@@ (ref@@ Name); if (re@@ f != null@@ ) { org.eclipse.jgit.revwalk.RevCommit c = rw.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); if (@@ c != null@@ ) { buil@@ der.@@ parent@@ (c@@ ); } } buil@@ der.@@ create@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Project@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .getProject@@ State@@ ()); }
com.google.gerrit.server.@@ api.@@ projects.@@ Branch@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ api.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, java.lang.String ref@@ );
private com.google.gerrit.server.@@ Current@@ User resource@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return branch@@ es.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (ref@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result file@@ (java.lang.String path@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e file@@ ", e); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e file@@ ", e); } }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ UUID@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = u@@ id@@ -@@ 2@@ \n@@ t@@ name = g@@ -@@ 1@@ \n@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ Notes@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ (("@@ w@@ it@@ h name '@@ -@@ 1@@ ' h@@ a@@ s UU@@ I@@ D '@@ u@@ id@@ -@@ in '@@ config@@ ' bu@@ t '@@ u@@ u@@ id@@ -@@ 2@@ ' in ac@@ count " + "@@ name of ac@@ count for ac@@ count " + "@@ ' in ac@@ count ") + "@@ user@@ "@@ ))); }
@org.junit.Test public void group@@ Name@@ Note@@ I@@ s@@ Con@@ si@@ st@@ ent@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = u@@ id@@ -@@ 1@@ \n@@ \@@ t@@ name = g@@ -@@ 1@@ \n@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ isEmpty@@ (); }
@org.junit.Test public void group@@ Name@@ Note@@ F@@ ail@@ To@@ Par@@ se@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ valid@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ Notes@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ f@@ ai@@ l to ch@@ ec@@ k con@@ si@@ st@@ en@@ c@@ y w@@ it@@ h ac@@ count name notes@@ : notes@@ U@@ ne@@ x@@ p@@ ected en@@ d of con@@ fig file@@ ")); }
@org.junit.Test public void group@@ Name@@ Note@@ I@@ s@@ M@@ is@@ s@@ ing@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 2@@ ", "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = u@@ id@@ -@@ 2@@ \n@@ t@@ name = g@@ -@@ 2@@ \n@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ Group w@@ it@@ h name '@@ -@@ 1@@ ' do@@ es@@ n@@ '@@ t ex@@ is@@ t in th@@ e li@@ s@@ t of al@@ l nam@@ es@@ ")); }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ Name@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = u@@ id@@ -@@ 1@@ \n@@ "; java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ Notes@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ ac@@ count not@@ e of name '@@ -@@ 1@@ ' c@@ l@@ ai@@ m@@ s to rep@@ res@@ ent name of name '@@ -@@ 2@@ ")); }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ Name@@ And@@ UUID@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ u@@ id = u@@ id@@ -@@ 2@@ \n@@ t@@ name = g@@ -@@ 2@@ \n@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ Notes@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ (("@@ w@@ it@@ h name '@@ -@@ 1@@ ' h@@ a@@ s UU@@ I@@ D '@@ u@@ id@@ -@@ 1@@ ' in config@@ ' bu@@ t '@@ u@@ u@@ id@@ -@@ 2@@ ' in ac@@ count " + "@@ )), notes@@ "@@ warn@@ ing@@ ("@@ ac@@ count not@@ e of name '@@ -@@ 1@@ ' in user@@ "@@ name of project 1@@ ' in user@@ "@@ user@@ "@@ )), warn@@ ing@@ ("@@ ac@@ count not@@ e of name '@@ -@@ 1@@ ' c@@ l@@ ai@@ m@@ s to rep@@ res@@ ent name of '@@ -@@ '@@ "@@ )).@@ in@@ Or@@ der@@ (); }
com.google.gerrit.server.@@ api.@@ projects.@@ Ch@@ ild@@ Project@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Ch@@ ild@@ Project@@ Resource rsrc@@ );
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, Delete@@ Tag@@ s@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if ((@@ (in@@ pu@@ t == null@@ ) || ((@@ input.@@ tag@@ s) == null@@ )) || (in@@ put.@@ tag@@ s.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ tag@@ s m@@ us@@ t b@@ e sp@@ e@@ c@@ if@@ i@@ ed@@ "); } delete@@ Ref@@ Factory.create@@ (project@@ ).@@ ref@@ s(@@ input.@@ tag@@ s).@@ pre@@ fix@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ R@@ _@@ T@@ A@@ G@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
private static void log@@ In@@ vali@@ d(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, org.eclipse.jgit.revwalk.RevCommit c@@ , org.eclipse.jgit.revwalk.@@ F@@ oo@@ ter@@ Lin@@ e line@@ ) { com.google.gerrit.server.g@@ roup.@@ Au@@ dit@@ Log@@ Read@@ er.@@ log.@@ de@@ bug@@ ("@@ In@@ vali@@ d foo@@ ter lin@@ e in {@@ } while par@@ s@@ ing au@@ di@@ t for ac@@ count {}@@ : {}@@ ", c.@@ name@@ (), u@@ id, line@@ ); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Ch@@ ild@@ Project@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource p = project@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id); for (com.google.gerrit.server.project.@@ Project@@ State p@@ p : p@@ .getProject@@ State@@ ().@@ parent@@ s()) { if (p@@ arent@@ .getName@@ Key@@ ().equals(@@ p@@ .getProject@@ ().get@@ NameKey@@ ())) { return new com.google.gerrit.server.@@ re@@ stapi.@@ Ch@@ ild@@ Project@@ Resource@@ (p@@ arent@@ , p@@ .getProject@@ State@@ ()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override protected com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ B@@ an@@ Commit.@@ B@@ an@@ Result@@ Info appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource rsrc@@ , B@@ an@@ Commit@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception, java.io.IOException { com.google.gerrit.server.@@ re@@ stapi.@@ B@@ an@@ Commit.@@ B@@ an@@ Result@@ Info r = new com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ B@@ an@@ Commit.@@ B@@ an@@ Result@@ Info@@ (); if ((@@ (in@@ pu@@ t != null@@ ) && ((@@ input.@@ commit@@ s) != null@@ )) && (!@@ (in@@ put.@@ commit@@ s.@@ isEmpty@@ ()))) { java.util.List<@@ org.eclipse.jgit.lib.Object@@ Id> commit@@ s@@ To@@ B@@ an = new java.util.Array@@ List@@ (in@@ put.@@ commit@@ s.@@ size()); for (java.lang.String c : input.@@ commit@@ s) { try { commit@@ s@@ To@@ B@@ an@@ .@@ add(@@ org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (c@@ )); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ e.get@@ Message()); } } com.google.gerrit.server.git.@@ B@@ an@@ Commit.@@ Result result = b@@ an@@ Commit.@@ b@@ (rsrc@@ .getName@@ Key@@ (), rsrc@@ .getUser@@ (), commit@@ s@@ To@@ B@@ an@@ , input.@@ re@@ as@@ on@@ ); r@@ .@@ new@@ ly@@ B@@ an@@ ne@@ d = com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ B@@ an@@ Commit.@@ tran@@ s@@ for@@ m@@ Commit@@ s(@@ result@@ .get@@ New@@ ly@@ B@@ an@@ ned@@ Commit@@ s()); r.@@ al@@ read@@ y@@ B@@ an@@ ne@@ d = com.google.gerrit.server.@@ project.@@ B@@ an@@ Commit.@@ tran@@ s@@ for@@ m@@ s(@@ result@@ .get@@ Al@@ read@@ y@@ B@@ an@@ ned@@ Commit@@ s()); r.@@ ig@@ no@@ re@@ d = com.google.gerrit.server.@@ project.@@ B@@ an@@ Commit.@@ tran@@ s@@ for@@ m@@ Commit@@ s(@@ result@@ .get@@ I@@ g@@ no@@ red@@ Object@@ Id@@ s()); } return r@@ ; }
private Group@@ B@@ und@@ le.@@ Builder new@@ B@@ und@@ le@@ () { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = new com.google.gerrit.reviewdb.client.Account@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ group@@ "), new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (1@@ ), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ account@@ -@@ 1@@ "), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er me@@ mb@@ er = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 0@@ ), group@@ .getId@@ ())); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t me@@ mber@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ me@@ mber@@ , new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ 00@@ 0@@ ), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id by@@ Id = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ group@@ .getId@@ (), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ sub@@ "@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d by@@ Id@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ by@@ Id, new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 3@@ 00@@ 0@@ ), t@@ s); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ group@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ ).@@ me@@ mber@@ Au@@ dit@@ (@@ me@@ mber@@ Au@@ dit@@ ).@@ by@@ Id(@@ by@@ Id@@ ).@@ by@@ Id@@ Au@@ dit@@ (@@ by@@ Id@@ Au@@ dit@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ group@@ s@@ .g@@ lobal@@ :@@ An@@ on@@ y@@ mo@@ us@@ User@@ s.@@ name@@ ", valu@@ e = "@@ Al@@ l User@@ s@@ ") public void create@@ Group@@ With@@ Default@@ Name@@ Of@@ Sy@@ st@@ em@@ Group@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ ac@@ count '@@ An@@ on@@ y@@ mo@@ u@@ s User@@ s@@ ' is re@@ serv@@ ed@@ "); g@@ Api@@ .g@@ roup@@ s().@@ create@@ ("@@ an@@ on@@ y@@ mo@@ u@@ s user@@ s@@ "); }
com.google.gerrit.server.@@ api.@@ changes.@@ R@@ o@@ botComment@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ api.@@ change.@@ R@@ o@@ botComment@@ Resource c@@ );
private com.google.gerrit.extensions.common.@@ Auth@@ Info get@@ Auth@@ Info@@ (com.google.gerrit.server.@@ re@@ stapi.@@ Auth@@ Config cfg@@ , com.google.gerrit.server.account.@@ Re@@ al@@ m re@@ al@@ m@@ ) { com.google.gerrit.extensions.common.@@ Auth@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Auth@@ Info@@ (); info.@@ auth@@ Type = cfg@@ .get@@ Auth@@ Type@@ (); info.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s = com.google.gerrit.server.@@ re@@ stapi.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ f@@ g.@@ is@@ U@@ se@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s()); info.@@ edit@@ able@@ Account@@ Fiel@@ d@@ s = new java.util.Array@@ List@@ (re@@ al@@ m@@ .get@@ Edit@@ able@@ Fiel@@ d@@ s()); info@@ .@@ Account@@ Ur@@ l = cfg@@ .get@@ S@@ w@@ it@@ ch@@ Account@@ Url@@ (); info@@ .g@@ it@@ B@@ as@@ ic@@ Auth@@ Po@@ li@@ c@@ y = cfg@@ .get@@ Git@@ B@@ as@@ ic@@ Auth@@ Po@@ li@@ c@@ y@@ (); if ((@@ info.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s) != null@@ ) { java.util.Collection<@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ > ag@@ reement@@ s = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s(); if (!(@@ ag@@ reement@@ s.@@ isEmpty())) { info.@@ cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ ag@@ reement@@ s.@@ size()); for (@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment ag@@ reement@@ s) { info.@@ cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s.add(@@ ag@@ reement@@ Json@@ .@@ for@@ m@@ at(@@ ag@@ reement@@ )); } } switch (info.@@ auth@@ Typ@@ e) { case L@@ D@@ A@@ P : case L@@ D@@ AP@@ _@@ B@@ IN@@ D : info.@@ re@@ gist@@ er@@ Ur@@ l = cfg@@ .get@@ Re@@ gist@@ er@@ Url@@ (); info.@@ re@@ gist@@ er@@ T@@ ex@@ t = cfg@@ .get@@ Re@@ gist@@ er@@ Text@@ (); info.@@ edit@@ E@@ n@@ try : case F@@ ull@@ Name@@ Ur@@ l = cfg@@ .get@@ Edit@@ F@@ ull@@ Name@@ (); break@@ ; case C@@ US@@ T@@ O@@ M@@ _@@ E@@ X@@ TE@@ N@@ S@@ IO@@ N : info.@@ re@@ gist@@ er@@ Ur@@ l = cfg@@ .get@@ Re@@ gist@@ er@@ Url@@ (); info.@@ re@@ gist@@ er@@ Text@@ (); info.@@ edit@@ F@@ ull@@ Name@@ (); info.@@ cfg@@ .get@@ Edit@@ F@@ ull@@ Name@@ (); info.@@ http@@ P@@ asswor@@ d@@ Ur@@ l = cfg@@ .get@@ Http@@ P@@ asswor@@ d@@ Url@@ (); break@@ ; case H@@ T@@ P : case H@@ T@@ P : case H@@ T@@ P : case L@@ D@@ A@@ P : info.@@ _@@ C@@ lo@@ gin@@ _@@ for@@ lo@@ gin@@ Url@@ (); info.@@ cfg@@ .get@@ Lo@@ gin@@ Url@@ (); info.@@ info.@@ info.@@ info.@@ info.@@ cfg@@ .get@@ Text@@ ().@@ lo@@ gin@@ (); info.@@ ex@@ t = cfg@@ .get@@ Text@@ (); info.@@ info.@@ info.@@ info.@@ info.@@ info.@@ Lo@@ gin@@ _@@ C@@ L@@ I@@ ME@@ N@@ T_@@ B@@ L@@ I@@ ME@@ N@@ T_@@ S@@ S@@ EC@@ T : case O@@ P@@ E@@ LO@@ P@@ ME@@ N@@ T_@@ B@@ EC@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ N@@ T_@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ S@@ O : case O@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ T : case O@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ LO@@ P@@ E@@ T : case O@@ P@@ E@@ LO@@ P@@
@org.junit.Test public void push@@ To@@ Group@@ Branch@@ For@@ All@@ User@@ s@@ Repo@@ I@@ s@@ Re@@ jec@@ ted@@ On@@ Submit@@ () throw@@ s java.lang.Exception { push@@ To@@ Branch@@ For@@ Review@@ And@@ Submit@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), "@@ ac@@ count updat@@ e not allow@@ ed@@ "); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ group@@ s@@ .g@@ lobal@@ :@@ An@@ on@@ y@@ mo@@ us@@ User@@ s.@@ name@@ ", valu@@ e = "@@ Al@@ l User@@ s@@ ") public void create@@ Group@@ With@@ Config@@ u@@ red@@ Name@@ Of@@ Sy@@ st@@ em@@ Group@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ ac@@ count '@@ Al@@ l User@@ s@@ ' al@@ read@@ y ex@@ ist@@ s@@ "); g@@ Api@@ .g@@ roup@@ s().@@ create@@ ("@@ al@@ l user@@ s@@ "); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ Sy@@ st@@ em@@ Group@@ Case@@ S@@ en@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = "@@ Re@@ gist@@ er@@ ed User@@ s@@ "; ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ ac@@ count '@@ Re@@ gist@@ er@@ ed User@@ s@@ ' al@@ read@@ y ex@@ ist@@ s@@ "); g@@ Api@@ .g@@ roup@@ s().@@ create@@ (@@ new@@ Group@@ Name); }
private void test@@ Can@@ not@@ Delete@@ Group@@ (java.lang.String ref@@ Pat@@ tern@@ , java.lang.String group@@ Ref@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ DE@@ LE@@ TE@@ , true@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s); org.eclipse.jgit.transport.@@ Push@@ Result r = com.google.gerrit.acceptance.@@ Git@@ Util.@@ delete@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Ref@@ ); org.eclipse.jgit.transport.@@ Remote@@ Ref@@ Update ref@@ Update = r@@ .get@@ Remote@@ Update@@ (@@ group@@ Ref@@ ); assert@@ Th@@ at(@@ ref@@ Update@@ .getStatu@@ s@@ ()).@@ isEqualTo(@@ Remote@@ Ref@@ Update.@@ Status.@@ RE@@ JEC@@ TE@@ D@@ _@@ O@@ T@@ H@@ ER@@ _@@ RE@@ A@@ S@@ ON@@ ); assert@@ Th@@ at(@@ ref@@ Update@@ .get@@ Message@@ ()).@@ contain@@ s("@@ No@@ t allow@@ ed to de@@ le@@ te ac@@ count branch@@ .@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { assert@@ Th@@ at(@@ repo.@@ ex@@ act@@ Ref@@ (@@ group@@ Ref@@ )).@@ is@@ Not@@ Null@@ (); } }
private void push@@ To@@ Group@@ Branch@@ For@@ Review@@ And@@ Submit@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String group@@ Ref@@ , java.lang.String expected@@ Error@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); g@@ ran@@ t@@ Label@@ ("@@ Code@@ -@@ Review@@ ", (@@ -@@ 2@@ ), project, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , false@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (repo, group@@ Re@@ f + "@@ :@@ group@@ Ref@@ ")); repo.@@ re@@ set@@ ("@@ group@@ Ref@@ "); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , "@@ Update ac@@ count config@@ ", "@@ account.@@ config@@ ", "@@ so@@ m@@ e content@@ ").@@ to@@ ((@@ (com.google.gerrit.server.@@ util.@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ ) + group@@ Ref@@ )); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); assert@@ Th@@ at(@@ r@@ .getChange@@ ().@@ change@@ ().get@@ Dest@@ ().get@@ ()).@@ isEqualTo(@@ group@@ Ref@@ ); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); if (@@ expected@@ E@@ rror != null@@ ) { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ ac@@ count not allow@@ ed@@ "); } gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ ().@@ submit@@ (); }
@org.junit.Test public void push@@ To@@ Group@@ Nam@@ es@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); allow@@ G@@ lobal@@ Capabili@@ ti@@ es(@@ com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , G@@ lobal@@ Capabili@@ ty.@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); assert@@ Push@@ To@@ Branch@@ (@@ all@@ User@@ s, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NA@@ M@@ ES@@ , "@@ ac@@ count updat@@ e not allow@@ ed@@ "); }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .g@@ roup@@ s().@@ create(@@ name@@ ("@@ foo@@ "@@ )@@ ).get@@ ().@@ id@@ )); create@@ Branch@@ (@@ all@@ User@@ s, group@@ Ref@@ ); assert@@ Push@@ To@@ Group@@ (@@ all@@ User@@ s, group@@ Ref@@ , "@@ ac@@ count updat@@ e not allow@@ ed@@ "); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ In@@ ternal@@ Group@@ Case@@ S@@ en@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String d@@ up@@ Group@@ Name = name@@ ("@@ d@@ up@@ Group@@ "); g@@ Api@@ .g@@ roup@@ s().@@ create(@@ d@@ up@@ Group@@ Name); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((("@@ ac@@ count '@@ " + d@@ up@@ Group@@ Name) + "@@ ' al@@ read@@ y ex@@ ist@@ s@@ ")); g@@ Api@@ .g@@ roup@@ s().@@ create(@@ d@@ up@@ Group@@ Name); }
private void assert@@ Push@@ To@@ Group@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String group@@ Ref@@ Name, java.lang.String expected@@ Error@@ On@@ Update@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ A@@ TE@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ TE@@ D@@ _@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ A@@ TE@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ TE@@ D@@ _@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NA@@ M@@ ES@@ , Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (repo, group@@ Ref@@ Name + "@@ :@@ group@@ ")); repo.@@ re@@ set@@ ("@@ group@@ Ref@@ "); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , "@@ Update ac@@ count config@@ ", Group@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ CON@@ FI@@ G@@ ); }
private void assert@@ Create@@ Group@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expected@@ Error@@ On@@ Create@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ A@@ TE@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , "@@ Update ac@@ count config@@ ", Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E@@ , "@@ so@@ m@@ e content@@ ").@@ set@@ Parent@@ s(@@ com.google.common.collect.Immutable@@ List.@@ of@@ ()).@@ to@@ (((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + (@@ name@@ ("@@ b@@ ar@@ "@@ )@@ ))); if (@@ expected@@ Error@@ On@@ Cre@@ ate != null@@ ) { r@@ .@@ assert@@ Error@@ Statu@@ s(@@ expected@@ Error@@ On@@ Create@@ ); } else { r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); } }
@org.junit.Test public void on@@ ly@@ Visible@@ Group@@ s@@ Ret@@ ur@@ ne@@ d(@@ ) throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = name@@ (@@ "@@ new@@ Group@@ "); com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input in = new com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input@@ (); in.@@ name = new@@ Group@@ Name@@ ; in.@@ des@@ crip@@ tion = "@@ a h@@ id@@ de@@ n account@@ "; in.@@ vi@@ sible@@ To@@ Al@@ l = false@@ ; in.@@ owner@@ Id = admin@@ Group@@ U@@ u@@ id@@ ().get@@ (); g@@ Api@@ .g@@ roup@@ s().@@ create@@ (in@@ ); set@@ Api@@ User@@ (user@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .g@@ roup@@ s().@@ list@@ ().get@@ As@@ Map@@ ()@@ )@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ Key@@ (@@ new@@ Group@@ Name); set@@ Api@@ User@@ (@@ admin@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id@@ (@@ new@@ Group@@ Name@@ ).@@ add@@ Member@@ s(@@ user@@ .@@ user@@ name); set@@ Api@@ User@@ (user@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .g@@ roup@@ s().@@ list@@ ().get@@ As@@ Map@@ ()).@@ contains@@ Key@@ (@@ new@@ Group@@ Name); }
@org.junit.Test public void push@@ To@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); assert@@ Push@@ To@@ Group@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), "@@ ac@@ count updat@@ e not allow@@ ed@@ "); }
@org.junit.Test public void group@@ Description@@ () throw@@ s java.lang.Exception { java.lang.String name = name@@ ("@@ group@@ "); Api@@ .g@@ roup@@ s().@@ create(@@ name); assert@@ Th@@ at(@@ g@@ Api@@ .g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ ()).@@ isEmpty@@ (); java.lang.String des@@ c = "@@ N@@ e@@ w des@@ crip@@ tion for th@@ e account.@@ "; account.@@ g@@ Api@@ .g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ (@@ des@@ c@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ ()).@@ isEqualTo(@@ des@@ c@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ (@@ null@@ ); assert@@ Th@@ at(@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ Api@@ .g@@ roup@@ s().@@ id(@@ des@@ cription@@ ).@@ name@@ (); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ ("@@ "); assert@@ Th@@ at(@@ g@@ roup@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ ).@@ isEmpty@@ (); }
@org.junit.Test public void re@@ index@@ Permission@@ s() throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Test@@ Account group@@ Ow@@ ne@@ r = account@@ Cre@@ ator@@ .@@ user@@ 2@@ (); com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input in = new com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input@@ (); in.@@ name = name@@ ("@@ group@@ "); in.@@ me@@ mber@@ s = java.util.Collections.singleton@@ (@@ group@@ Owner@@ ).@@ stream@@ ().@@ map@@ (@@ ( u@@ ) -@@ > u@@ id@@ .@@ toString@@ ()).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); in.@@ vi@@ sible@@ To@@ Al@@ l = true@@ ; com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = Api@@ .g@@ roup@@ s().@@ create@@ (in@@ ).get@@ (); set@@ Api@@ User@@ (@@ admin@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ group@@ .@@ id@@ ).@@ index@@ (); set@@ Api@@ User@@ (@@ group@@ Owner@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ group@@ .@@ id@@ ).@@ index@@ (); set@@ Api@@ User@@ (user@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.Auth@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ not allow@@ ed to in@@ de@@ x account@@ "); account@@ Api@@ .g@@ roup@@ s().@@ id(@@ group@@ .@@ id@@ ).@@ index@@ (); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ Sy@@ st@@ em@@ Group@@ Case@@ In@@ sen@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = "@@ re@@ gist@@ er@@ ed user@@ "; ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ ac@@ count '@@ Re@@ gist@@ er@@ ed User@@ s@@ ' al@@ read@@ y ex@@ ist@@ s@@ "); g@@ Api@@ .g@@ roup@@ s().@@ create@@ (@@ new@@ Group@@ Name); }
private com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info get@@ Change@@ Info@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ ) { com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info@@ (); info.@@ allow@@ B@@ l@@ am@@ e = com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ allow@@ B@@ l@@ ame@@ ", true@@ )); info.@@ allow@@ Draft@@ s = com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ allow@@ Draft@@ s", true@@ )); boolean has@@ As@@ signe@@ e@@ In@@ de@@ x = index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ Schema@@ ().@@ has@@ Fiel@@ d(@@ Change@@ Fiel@@ d.@@ A@@ S@@ S@@ I@@ G@@ N@@ E@@ ); info.@@ show@@ As@@ signe@@ e@@ In@@ Changes@@ T@@ able = com.google.gerrit.server.@@ config.@@ re@@ stapi.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ ((@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ show@@ As@@ signe@@ e@@ In@@ Changes@@ Table@@ ", false@@ )) && has@@ As@@ signe@@ e@@ In@@ Index@@ )); info.@@ l@@ arg@@ e@@ Change = cfg@@ .get@@ In@@ t@@ ("@@ change@@ ", "@@ l@@ arg@@ e@@ Change@@ ", 5@@ 00@@ ); info@@ .@@ private@@ By@@ De@@ fa@@ ult = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ private@@ By@@ Default@@ ", false@@ )); info.@@ re@@ ply@@ T@@ oo@@ l@@ ti@@ p = (@@ java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ ("@@ change@@ ", null@@ , "@@ re@@ ply@@ T@@ oo@@ l@@ ti@@ p@@ "@@ )).@@ or@@ E@@ l@@ se@@ ("@@ Re@@ pl@@ y an@@ d s@@ core@@ ")) + " (@@ Sh@@ ort@@ c@@ ut@@ : a@@ )@@ "; info.@@ re@@ ply@@ L@@ abe@@ l = (@@ java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ ("@@ change@@ ", null@@ , "@@ re@@ ply@@ Label@@ "@@ )).@@ or@@ E@@ l@@ se@@ ("@@ Re@@ ply@@ ")) + "@@ \@@ u@@ 2@@ 0@@ 2@@ 6@@ "; info.@@ update@@ D@@ el@@ a@@ y = (@@ int@@ ) (com.google.gerrit.server.@@ config.@@ Config@@ Util@@ .get@@ Time@@ Un@@ it@@ (c@@ fg@@ , "@@ change@@ ", null@@ , "@@ update@@ D@@ el@@ a@@ y@@ ", 3@@ 0@@ 0, java.util.concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ))); info.@@ submit@@ Wh@@ o@@ le@@ To@@ p@@ i@@ c = com.google.gerrit.server.git.@@ Merge@@ Sup@@ er@@ Set.@@ who@@ le@@ To@@ pic@@ Enabled(@@ cfg@@ ); return info@@ ; }
private com.google.gerrit.extensions.common.@@ Gerrit@@ Info get@@ Gerrit@@ Info@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , com.google.gerrit.server.@@ re@@ stapi.@@ All@@ Project@@ s@@ Name all@@ Project@@ s@@ Name, com.google.gerrit.server.@@ re@@ stapi.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name) { com.google.gerrit.extensions.common.@@ Gerrit@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Gerrit@@ Info@@ (); info.@@ all@@ Project@@ s = all@@ Project@@ s@@ Name@@ .get(); info.@@ all@@ User@@ s = all@@ User@@ s@@ Name@@ .get(); info.@@ rep@@ ort@@ Bu@@ g@@ Ur@@ l = cfg@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ rep@@ ort@@ Bu@@ g@@ Url@@ "); info.@@ rep@@ ort@@ Bu@@ g@@ T@@ ex@@ t = cfg@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ rep@@ ort@@ Bu@@ g@@ Text@@ "); info@@ .@@ do@@ c@@ Ur@@ l = get@@ Doc@@ Url@@ (c@@ fg@@ ); info@@ .@@ do@@ c@@ Se@@ ar@@ ch = do@@ c@@ Se@@ arch@@ er.@@ is@@ A@@ va@@ il@@ able@@ (); info.@@ edit@@ G@@ pg@@ Key@@ s = com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (((@@ enable@@ Sig@@ ned@@ Push@@ ) && (c@@ fg@@ .get@@ Boolean@@ ("@@ gerrit@@ ", null@@ , "@@ edit@@ G@@ pg@@ Key@@ s", true@@ )@@ ))); info.@@ web@@ U@@ is = java.util.@@ En@@ um@@ Set.@@ n@@ one@@ Of(@@ com.google.gerrit.extensions.client.@@ Ui@@ Type@@ .@@ class@@ ); if (@@ gerrit@@ Option@@ s.@@ enable@@ G@@ w@@ t@@ Ui@@ ()) { info.@@ web@@ Ui@@ s.add(@@ Ui@@ Type.@@ G@@ W@@ T@@ ); } if (@@ gerrit@@ Option@@ s.@@ enable@@ P@@ ol@@ y@@ Gerrit@@ ()) { info.@@ web@@ Ui@@ s.add(@@ Ui@@ Type.@@ P@@ O@@ L@@ Y@@ G@@ ER@@ R@@ IT@@ ); } return info@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Server@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Config@@ Resource rsrc@@ ) throw@@ s java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception { com.google.gerrit.extensions.common.@@ Server@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Server@@ Info@@ (); info.@@ account@@ s = get@@ Account@@ s@@ Info@@ (account@@ Vi@@ si@@ b@@ ili@@ ty@@ Provider@@ ); info.@@ a@@ ut@@ h = get@@ Auth@@ Info@@ (@@ auth@@ Config@@ , re@@ al@@ m@@ ); info.@@ change = get@@ Change@@ Info@@ (@@ config@@ ); info@@ .@@ do@@ w@@ n@@ lo@@ ad = get@@ Down@@ load@@ Info@@ (@@ do@@ w@@ n@@ load@@ S@@ che@@ m@@ es@@ , do@@ w@@ n@@ load@@ Command@@ s, c@@ l@@ one@@ Command@@ s, arch@@ ive@@ Format@@ s); info@@ .g@@ erri@@ t = get@@ Gerrit@@ Info@@ (@@ config@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name); info.@@ note@@ Db@@ Enable@@ d = com.google.gerrit.server.@@ config.@@ re@@ stapi.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (@@ is@@ NoteDb@@ Enable@@ d@@ ()); info.@@ p@@ lu@@ gin = get@@ Plugin@@ Info@@ (); if (@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ sit@@ e@@ Path@@ s.@@ sit@@ e@@ _@@ th@@ e@@ me@@ )) { info@@ .@@ default@@ Th@@ em@@ e = "@@ /@@ static@@ /@@ " + (@@ Site@@ Path@@ s.@@ HE@@ M@@ E_@@ F@@ IL@@ E@@ NAME@@ ); } info.@@ ssh@@ d = get@@ Ssh@@ d@@ Info@@ (@@ config@@ ); info.@@ su@@ gg@@ est = get@@ Su@@ ggest@@ Info@@ (@@ config@@ ); java.util.Map<java.lang.String, java.lang.String> url@@ A@@ li@@ ase@@ s = get@@ Url@@ A@@ li@@ as@@ es@@ Info@@ (@@ config@@ ); info.@@ url@@ A@@ li@@ ase@@ s = (!(@@ url@@ A@@ li@@ as@@ es.@@ isEmpty())) ? url@@ A@@ li@@ ase@@ s : null@@ ; info.@@ user = get@@ User@@ Info@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name); info.@@ re@@ ce@@ i@@ v@@ e = get@@ Receive@@ Info@@ (); return info@@ ; }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Ch@@ ild@@ Project@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public void check@@ () throw@@ s com.google.gerrit.server.@@ Start@@ up@@ Exception { java.lang.String in@@ vali@@ d = cfg@@ .get@@ Sub@@ s@@ ection@@ s("@@ group@@ s@@ ").@@ stream@@ ().@@ filter@@ (@@ ( sub@@ ) -@@ > { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ sub@@ ); com.google.gerrit.server.account.@@ Group@@ Back@@ en@@ d group@@ Back@@ en@@ d = un@@ i@@ ver@@ s@@ al@@ Group@@ Back@@ en@@ d.@@ back@@ en@@ d(@@ u@@ id); return (@@ group@@ Back@@ en@@ d == null@@ ) || ((@@ group@@ Back@@ end@@ .get(@@ u@@ id@@ )) == null@@ ); } }@@ ).@@ map@@ (@@ ( u@@ ) -@@ > ("@@ '@@ " + u@@ ) + "@@ '@@ ").@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ ,@@ ")); if (!@@ (in@@ vali@@ d.@@ isEmpty())) { throw new com.google.gerrit.server.@@ Start@@ up@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ((((@@ ("@@ Sub@@ s@@ ection@@ s for group@@ s@@ ' in g@@ errit.@@ con@@ fig m@@ us@@ t b@@ e vali@@ d account@@ UUID@@ " + " s@@ . Th@@ e fo@@ l@@ low@@ ing ac@@ count UUID@@ s co@@ ul@@ d not b@@ e res@@ ol@@ v@@ ed@@ : ") + in@@ valid@@ ) + " P@@ le@@ ase remove@@ /@@ fi@@ x th@@ es@@ '@@ group@@ s@@ ' sub@@ s@@ ection@@ s in@@ ") + " g@@ errit.@@ config.@@ "@@ ))); } }
@@@ java.lang.@@ De@@ pre@@ cate@@ d @org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ query@@ ", ali@@ ase@@ s = { "@@ -@@ q@@ " }@@ , us@@ ag@@ e = "@@ ac@@ count to in@@ sp@@ ec@@ t pre@@ c@@ ated@@ : u@@ se --@@ account@@ /@@ account@@ /@@ g in@@ st@@ ead@@ )@@ ") void add@@ Group@@ De@@ pre@@ c@@ ated@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { add@@ Group@@ (@@ u@@ u@@ id); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { try { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource r@@ sr@@ c = group@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (@@ group@@ Name@@ )); com.google.gerrit.extensions.common.@@ Name@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); input.@@ name = new@@ Group@@ Name@@ ; put@@ Name.@@ apply(@@ rsrc@@ , input@@ ); } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw di@@ e@@ (@@ e); } }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > get@@ Group@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > account@@ Group@@ s = db.account@@ Group@@ s().@@ by@@ UUID@@ (@@ group@@ U@@ u@@ id@@ ).to@@ List(); if ((@@ account@@ Group@@ s.@@ size@@ ()) == 1@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ Group@@ s@@ )); } else if (account@@ Group@@ s.@@ isEmpty()) { return java.util.@@ Optional@@ .@@ empty@@ (); } else { throw new com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception(("@@ D@@ up@@ li@@ c@@ ate ac@@ count I@@ D " + group@@ U@@ u@@ id@@ )); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource@@ .@@ create@@ (repo@@ Manag@@ er, parent@@ .getProject@@ State@@ (), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (p@@ arent@@ .get@@ Revision@@ ()), id@@ .get()); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ Not@@ In@@ s@@ File@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ("@@ [@@ p@@ lu@@ gin \"@@ so@@ me@@ Plugin@@ \"@@ ]@@ \n@@ key@@ 1 = " + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ()@@ )@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()).@@ hasSize@@ (1); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()@@ ).get@@ Message@@ ()).@@ isEqualTo@@ ((@@ (("@@ project.@@ config@@ : ac@@ count \"@@ " + (@@ st@@ a@@ ff@@ .getName@@ ())) + "@@ \@@ " not in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAME@@ ))); }
@org.junit.Test public void edit@@ Config@@ M@@ is@@ s@@ ing@@ Group@@ Table@@ E@@ n@@ try@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .g@@ roup@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ("@@ [@@ ac@@ ces@@ s \"@@ refs/heads/@@ *@@ \"@@ ]@@ \n@@ " + (((@@ " ex@@ clu@@ si@@ ve@@ Group@@ Permission@@ s = rea@@ d submit@@ \n@@ " + " sub@@ m@@ it = ac@@ count P@@ e@@ o@@ pl@@ e Wh@@ o C@@ an Submit@@ \n@@ ") + " up@@ lo@@ ad = ac@@ count De@@ ve@@ lo@@ per@@ s@@ \n@@ ") + " rea@@ d = ac@@ count De@@ ve@@ lo@@ per@@ s@@ \n@@ "@@ )@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion = cfg@@ .get@@ Access@@ Section@@ ("@@ refs/heads/@@ *@@ "); com.google.gerrit.common.data.@@ Per@@ mis@@ sion sub@@ m@@ it = s@@ ection@@ .get@@ Permission@@ (@@ Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ ); sub@@ m@@ it.@@ add@@ (@@ new com.google.gerrit.common.data.@@ Permission@@ Rule@@ (c@@ f@@ g.@@ res@@ ol@@ ve@@ (@@ st@@ a@@ ff@@ ))); re@@ v = commit@@ (c@@ fg@@ ); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ project.@@ config@@ "@@ )).@@ isEqualTo@@ (("@@ [@@ ac@@ ces@@ s \"@@ refs/heads/@@ *@@ \"@@ ]@@ \n@@ " + ((((@@ " ex@@ clu@@ si@@ ve@@ Group@@ Permission@@ s = rea@@ d submit@@ \n@@ " + " sub@@ m@@ it = ac@@ count P@@ e@@ o@@ pl@@ e Wh@@ o C@@ an Submit@@ \n@@ ") + "@@ \@@ t@@ sub@@ m@@ it = ac@@ count St@@ a@@ ff@@ \n@@ ") + " up@@ lo@@ ad = ac@@ count s@@ \n@@ ") + " rea@@ d = ac@@ count = ac@@ count De@@ ve@@ lo@@ per@@ s@@ \n@@ "@@ ))); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ ac@@ ces@@ s.@@ Access@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ ac@@ ces@@ s.@@ Access@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Tag@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ T@@ a@@ g \"@@ " + (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ )) + "@@ \@@ " al@@ read@@ y ex@@ ist@@ s@@ ")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ ref@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); if (!(@@ query@@ Provider@@ .get().@@ set@@ Li@@ mit@@ (1@@ ).@@ by@@ Branch@@ Open@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ b@@ ran@@ ch " + (rsrc@@ .get@@ Branch@@ Key@@ ())) + " h@@ a@@ s op@@ en changes@@ ")); } delete@@ Ref@@ Factory.create@@ (rsrc@@ ).@@ ref@@ (rsrc@@ .getRef@@ ()).@@ pre@@ fix@@ (com.google.gerrit.server.@@ re@@ stapi.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ ) { return com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ J@@ son.@@ create@@ Option@@ s(@@ resource@@ .get@@ Group@@ ()); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "@@ -@@ o@@ ", us@@ ag@@ e = "@@ Out@@ pu@@ t o@@ ption@@ s p@@ er account@@ ") public void add@@ Option@@ (@@ com.google.gerrit.extensions.client.@@ Group@@ s@@ Op@@ tion o@@ ption@@ ) { o@@ ption@@ s.add(@@ o@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ query@@ 2@@ ", ali@@ ase@@ s = { "@@ -@@ q@@ 2@@ " }@@ , us@@ ag@@ e = "@@ ac@@ count query@@ ") public void set@@ Quer@@ y(@@ java.lang.String query@@ ) { this@@ .@@ quer@@ y = query@@ ; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if ((@@ in@@ herit@@ ed@@ ) && (!(@@ r@@ sr@@ c.@@ is@@ Default@@ ()))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ herit@@ ed f@@ la@@ g c@@ an on@@ l@@ y b@@ e use@@ d w@@ it@@ h default@@ "); } if (r@@ sr@@ c.@@ is@@ Default@@ ()) { r@@ sr@@ c = default@@ Of@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .getUser@@ ()); } } return com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ parse@@ (rsrc@@ .getProject@@ ().get@@ Project@@ (), rsrc@@ .getRef@@ Name@@ ().@@ substring@@ (com.google.gerrit.server.@@ config.@@ RE@@ F@@ S_@@ D@@ A@@ S@@ H@@ B@@ O@@ AR@@ D@@ S@@ .@@ length@@ ()), rsrc@@ .get@@ Path@@ Name@@ (), rsrc@@ .get@@ Config@@ (), rsrc@@ .getProject@@ State@@ ().get@@ Name@@ (), rsrc@@ ); }
private com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource default@@ Of@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = project@@ State@@ .getProject@@ ().get@@ Lo@@ cal@@ Default@@ D@@ ashbo@@ ard@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ )) { id = project@@ State@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); } if (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ (project@@ State@@ , user@@ , id); } else if (!@@ (in@@ herit@@ ed@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : project@@ State.@@ t@@ ree@@ ()) { id = ps@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); if (com.google.gerrit.server.@@ project.@@ is@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ (project@@ State@@ , user@@ , id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
private com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { java.util.List<java.lang.String> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ li@@ mit@@ (@@ 2@@ ).@@ s@@ pli@@ t@@ (id@@ )); java.lang.String re@@ f = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ 0@@ )); java.lang.String pat@@ h = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ .get(@@ 1@@ )); return d@@ ashbo@@ ard@@ s.@@ parse@@ (@@ new com.google.gerrit.server.@@ project.@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (((@@ re@@ f + '@@ :@@ '@@ ) + path@@ ))); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ R@@ o@@ botComment@@ Resource@@ >> view@@ s() { return view@@ s; }
@org.junit.Test public void by@@ Owner@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info owner@@ Group = create@@ Group@@ (@@ name@@ ("@@ owner@@ -@@ account@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = create@@ Group@@ With@@ Owner@@ (@@ name@@ ("@@ group@@ "), owner@@ Group@@ ); create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ ")); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ group@@ .@@ id@@ ))); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ owner@@ Group.@@ id@@ )), group@@ , owner@@ Group@@ ); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ owner@@ Group.@@ name@@ )), group@@ , owner@@ Group@@ ); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ R@@ o@@ botComment@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String u@@ id = id@@ .get(); com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = rev@@ .get@@ Notes@@ (); for (@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ bot@@ Comm@@ ent c : comment@@ s@@ Util.@@ ro@@ botComment@@ s@@ By@@ PatchSet@@ (@@ notes@@ , rev@@ .get@@ PatchSet@@ ().get@@ Id@@ ())) { if (@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ id@@ )) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ R@@ o@@ botComment@@ Resource@@ (@@ rev@@ c@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@org.junit.Test public void by@@ Name@@ () throw@@ s java.lang.Exception { assert@@ Query@@ ("@@ name@@ :@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); Group@@ Info g@@ roup = create@@ Group@@ (@@ name@@ ("@@ Group@@ ")); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ .@@ name@@ )), group@@ ); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ .@@ name.@@ to@@ L@@ ow@@ er@@ Case@@ (@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ ))); Group@@ Info group@@ With@@ H@@ yp@@ h@@ en = create@@ Group@@ (@@ name@@ ("@@ account@@ -@@ w@@ ith@@ -@@ h@@ yp@@ en@@ ")); create@@ Group@@ (@@ name@@ ("@@ account@@ -@@ no@@ -@@ match@@ -@@ w@@ ith@@ -@@ h@@ yp@@ h@@ en@@ ")); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ With@@ H@@ yp@@ h@@ en@@ .@@ name@@ )), group@@ With@@ H@@ yp@@ h@@ en@@ ); }
@org.junit.Test public void by@@ Default@@ Fiel@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ (@@ name@@ ("@@ foo@@ -@@ account@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 3 = create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 3@@ "), ("@@ d@@ ec@@ ri@@ p@@ tion th@@ a@@ t contain@@ s fo@@ o d th@@ e UU@@ I@@ D of group@@ 2@@ : " + (@@ group@@ 2.@@ id@@ ))); assert@@ Query@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); assert@@ Query@@ ("@@ foo@@ ", group@@ 1, group@@ 3@@ ); assert@@ Quer@@ y(@@ group@@ 2.@@ id, group@@ 2, group@@ 3@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String pat@@ h = rsrc@@ .get@@ Patch@@ Key@@ ().get@@ (); if (@@ Patch@@ .@@ CO@@ M@@ M@@ I@@ T_@@ M@@ S@@ G@@ .equals(@@ path@@ )) { java.lang.String ms@@ g = get@@ Message@@ (rsrc@@ .get@@ Revision@@ ().get@@ Change@@ Resource@@ ().get@@ Notes@@ ()); return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create(@@ msg@@ ).set@@ Content@@ Type@@ (@@ File@@ Content@@ Util.@@ TE@@ X@@ T_@@ X@@ _@@ G@@ ER@@ R@@ I@@ T_@@ CO@@ M@@ M@@ I@@ T_@@ M@@ ES@@ S@@ A@@ G@@ E@@ ).@@ base@@ 6@@ 4@@ (); } else if (@@ Patch@@ .@@ M@@ ER@@ G@@ E_@@ L@@ IS@@ T@@ .equals(@@ path@@ )) { byte@@ [] merge@@ Lis@@ t = get@@ Merge@@ List@@ (rsrc@@ .get@@ Revision@@ ().get@@ Change@@ Resource@@ ().get@@ Notes@@ ()); return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create(@@ merge@@ List@@ ).set@@ Content@@ Type@@ (@@ File@@ Content@@ Util.@@ TE@@ X@@ T_@@ X@@ _@@ G@@ ER@@ R@@ I@@ T_@@ M@@ ER@@ G@@ E_@@ L@@ IS@@ T@@ ).@@ base@@ 6@@ 4@@ (); } return file@@ Content@@ Util@@ .get@@ Content@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .get@@ Revision@@ ().get@@ Project@@ ()), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (rsrc@@ .get@@ Revision@@ ().get@@ PatchSet@@ ().get@@ Revision@@ ().get@@ ()), path@@ , parent@@ ); }
@org.junit.Test public void fix@@ up@@ Commit@@ Po@@ st@@ Dat@@ es@@ All@@ Au@@ dit@@ Event@@ s@@ Ev@@ en@@ I@@ f@@ Au@@ dit@@ Event@@ s@@ A@@ re@@ In@@ Th@@ e@@ F@@ ut@@ ure@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.util.@@ stream@@ .@@ In@@ t@@ Stream@@ .@@ r@@ ange@@ (@@ 0, 2@@ 0@@ )@@ .@@ for@@ E@@ ach@@ (@@ ( i@@ ) -@@ > com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.sql.@@ Tim@@ est@@ am@@ p f@@ ut@@ ur@@ e = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.@@ test@@ ing.@@ Test@@ Time@@ Util.@@ re@@ set@@ With@@ C@@ lock@@ St@@ e@@ p@@ (1@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ .g@@ roup@@ (@@ g@@ ).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , f@@ ut@@ ure@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ (@@ log@@ ); assert@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Th@@ at(@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ Add@@ -@@ account@@ Group <@@ x@@ >@@ ", "@@ 8@@ ", "@@ 8@@ ", "@@ @@@ server@@ -@@ id@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ -@@ <@@ account@@ \n@@ >@@ \n@@ <@@ -@@ >@@ \n@@ "); assert@@ Th@@ at(@@ map@@ (@@ ( c@@ ) -@@ > c.@@ commit@@ ter.@@ date@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ List@@ ()@@ )).@@ nam@@ ed@@ ("@@ %s", log@@ ).@@ is@@ Or@@ der@@ (); assert@@ Th@@ at(@@ com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()).@@ is@@ L@@ ess@@ Th@@ an@@ ure@@ ); }
@org.junit.Test public void me@@ mber@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 1@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, 8@@ , t@@ 2@@ ), add@@ And@@ Remo@@ ve@@ (@@ g@@ , 2, 8@@ , t@@ 1, 9@@ , t@@ 3@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ Add@@ : Account <@@ 2@@ @@@ server@@ -@@ id@@ >@@ ", "@@ Account 8@@ ", "@@ Account server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ Add@@ : <@@ 1@@ @@@ server@@ -@@ id@@ >@@ ", "@@ Account 8@@ ", "@@ 8@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), "@@ Update account@@ \n@@ Remo@@ ve@@ : Account <@@ 2@@ @@@ server@@ -@@ id@@ >@@ ", "@@ Account 9@@ ", "@@ @@@ server@@ -@@ id@@ "); }
@org.junit.Test public void un@@ au@@ dit@@ ed@@ By@@ Id@@ Add@@ ed@@ At@@ En@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ by@@ Id(@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ y@@ "), by@@ Id(@@ g@@ , "@@ z@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ Add@@ -@@ account@@ : <@@ Group x@@ >@@ ", "@@ Account 8@@ ", "@@ server@@ -@@ id@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ \n@@ Add@@ -@@ <@@ Group >@@ \n@@ "); }
@org.junit.Test public void red@@ und@@ By@@ Id@@ Au@@ dit@@ s@@ A@@ re@@ I@@ g@@ no@@ re@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 4 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 5 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ by@@ Id@@ ().@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , t@@ 3@@ ), add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 9@@ , t@@ 4@@ ), add@@ And@@ Remo@@ ve@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , t@@ 2, 9@@ , 5@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ \n@@ Add@@ -@@ account@@ : <@@ x@@ >@@ ", "@@ Account 8@@ ", "@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ -@@ <@@ x@@ >@@ ", "@@ Account 9@@ ", "@@ server@@ -@@ id@@ "); }
@org.junit.Test public void un@@ au@@ dit@@ ed@@ Member@@ sh@@ i@@ ps@@ Add@@ ed@@ At@@ En@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ ), me@@ mber@@ (@@ g@@ , 3@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ Add@@ : Account 1 <@@ 1@@ @@@ server@@ -@@ id@@ >@@ ", "@@ Account 8@@ ", "@@ @@@ server@@ -@@ id@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ Add@@ : Account <@@ 2@@ \n@@ >@@ \n@@ "); }
@org.junit.Test public void au@@ dit@@ s@@ At@@ S@@ ame@@ Tim@@ est@@ amp@@ B@@ ro@@ ken@@ Down@@ By@@ User@@ And@@ Type@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ s = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); int user@@ 1 = 8@@ ; int user@@ 2 = 9@@ ; com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ ), me@@ mber@@ (@@ g@@ , 3@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, user@@ s@@ t@@ s@@ ), add@@ Member@@ (@@ g@@ , 2, user@@ s@@ t@@ s@@ ), add@@ Member@@ (@@ g@@ , 3@@ , user@@ 1, t@@ s@@ )).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", user@@ 1, t@@ s@@ ), add@@ By@@ Id(@@ g@@ , "@@ y@@ ", user@@ @@@ t@@ s@@ ), add@@ By@@ Id(@@ g@@ , "@@ y@@ ", user@@ 2, t@@ s@@ ), add@@ By@@ Id(@@ g@@ , "@@ z@@ ", 1, t@@ s@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 5@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), ("@@ Update account@@ \n@@ " + (("@@ \n@@ " + "@@ Add@@ 1 <@@ -@@ id@@ >@@ \n@@ ") + "@@ Add@@ : <@@ -@@ id@@ >@@ \n@@ ") + "@@ Add@@ 3 <@@ 3@@ @@@ server@@ "@@ )), "@@ Account 8@@ ", "@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ "@@ Update account@@ \n@@ Add@@ -@@ <@@ Group >@@ \n@@ ", "@@ Account 8@@ ", "@@ Account 8@@ ", "@@ Account server@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ "@@ Update account@@ \n@@ \n@@ \n@@ \n@@ \n@@ "); }
@org.junit.Test public void by@@ Id@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ by@@ Id(@@ g@@ , "@@ x@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , t@@ 2@@ ), add@@ And@@ Remo@@ ve@@ By@@ Id(@@ g@@ , "@@ y@@ ", 8@@ , t@@ 1, 9@@ , t@@ 3@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ \n@@ "); }
@org.junit.Test public void me@@ mber@@ s@@ And@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ )).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 1@@ ), ("@@ Update account@@ \n@@ " + ((@@ (("@@ \n@@ " + "@@ Add@@ : 1 <@@ 1@@ @@@ server@@ -@@ id@@ >@@ \n@@ ") + "@@ Add@@ Account <@@ 2@@ @@@ server@@ -@@ id@@ >@@ \n@@ ") + "@@ Add@@ -@@ account@@ : <@@ x@@ \n@@ ") + "@@ Add@@ -@@ account@@ : <@@ x@@ \n@@ ") + "@@ Add@@ -@@ account@@ -@@ -@@ -@@ -@@ -@@ <@@ "@@ ))); }
@org.junit.Test public void all@@ Group@@ Fiel@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); g.@@ set@@ Description@@ ("@@ Description@@ "); g.@@ set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ owner@@ ")); g.@@ setVisible@@ To@@ All@@ (@@ true@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); }
@org.junit.Test public void me@@ mber@@ Au@@ dit@@ L@@ e@@ g@@ ac@@ y@@ Remo@@ v@@ ed@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 2@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ And@@ L@@ e@@ g@@ ac@@ y@@ Remo@@ ve@@ (@@ g@@ , 1, 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()), add@@ Member@@ (@@ g@@ , 2, 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), "@@ Update account@@ \n@@ Add@@ : Account <@@ 1@@ @@@ server@@ -@@ id@@ >@@ ", "@@ Account 8@@ ", "@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), "@@ Update account@@ \n@@ \n@@ \n@@ ", "@@ Account Account server@@ -@@ id@@ >@@ ", "@@ Account 8@@ ", "@@ 8@@ @@@ server@@ -@@ id@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), "@@ Update account@@ \n@@ Add@@ : 2 <@@ 2@@ @@@ server@@ -@@ >@@ ", "@@ Account 8@@ ", "@@ server@@ -@@ id@@ "); }
@org.junit.Test public void min@@ i@@ m@@ al@@ Group@@ Fiel@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .g@@ roup@@ (@@ g@@ ).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), "@@ Cre@@ ate account@@ ", com.google.gerrit.server.g@@ roup.@@ S@@ ER@@ V@@ ER@@ _@@ NAME@@ , com.google.gerrit.server.g@@ roup.@@ db.@@ S@@ ER@@ _@@ E@@ M@@ A@@ IL@@ ); assert@@ Th@@ at(@@ log@@ Group@@ Nam@@ es@@ ()).@@ isEmpty@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ File@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return file@@ Content@@ Util@@ .get@@ Content@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .get@@ Rev@@ (), rsrc@@ .get@@ Path@@ (), null@@ ); }
@org.junit.Test public void by@@ Description@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ Description@@ (@@ name@@ ("@@ group@@ 1@@ "), "@@ Th@@ is a t@@ est account.@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 2@@ "), "@@ AN@@ O@@ T@@ HE@@ R TE@@ S@@ T G@@ RO@@ U@@ P@@ .@@ "); create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 3@@ "), "@@ M@@ a@@ int@@ ain@@ er@@ s of project foo@@ .@@ "); assert@@ Query@@ ("@@ des@@ cription@@ :@@ test@@ ", group@@ 1, group@@ 2); assert@@ Query@@ ("@@ des@@ cription@@ :@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ des@@ crip@@ tion o@@ per@@ at@@ or requ@@ i@@ re@@ s a value@@ "); assert@@ Query@@ ("@@ des@@ cription@@ :@@ \"@@ "); }
@org.junit.Test public void by@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { if ((@@ get@@ Schema@@ Version@@ ()) < 4@@ ) { assert@@ M@@ is@@ s@@ ing@@ Fiel@@ d(@@ Group@@ Fiel@@ d.@@ S@@ U@@ B@@ G@@ RO@@ U@@ P@@ ); assert@@ Fai@@ lin@@ g@@ Query@@ ("@@ sub@@ :@@ so@@ me@@ Group@@ Name@@ ", "@@ '@@ sub@@ ' o@@ per@@ at@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count in@@ de@@ x ver@@ sion@@ "); return@@ ; } com.google.gerrit.extensions.common.@@ Group@@ Info super@@ Parent@@ Group = create@@ Group@@ (@@ name@@ (@@ "@@ super@@ Parent@@ Group@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info parent@@ Group@@ Info = create@@ Group@@ (@@ name@@ ("@@ parent@@ Group@@ 1@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info parent@@ Group@@ Info = create@@ Group@@ (@@ name@@ ("@@ parent@@ Group@@ 2@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info sub@@ Group = create@@ Group@@ (@@ name@@ ("@@ sub@@ Group@@ ")); g@@ Api@@ .g@@ roup@@ s().@@ id@@ (@@ super@@ Parent@@ Group.@@ id@@ ).@@ add@@ Group@@ s(@@ parent@@ Group@@ 1@@ .@@ id, parent@@ Group@@ 2.@@ id); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ parent@@ Group@@ 1@@ .@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ id); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ parent@@ Group@@ 2.@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ id); assert@@ Query@@ (("@@ group@@ :@@ " + (@@ sub@@ Group.@@ id@@ )), parent@@ Group@@ 2); assert@@ Query@@ (("@@ group@@ :@@ " + (p@@ arent@@ 1@@ .@@ id@@ )), super@@ Parent@@ Group@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id@@ (@@ super@@ Parent@@ Group.@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ id); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ parent@@ Group@@ 1@@ .@@ id@@ ).@@ remove@@ Group@@ s(@@ sub@@ Group.@@ id); assert@@ Query@@ (("@@ group@@ :@@ " + (@@ sub@@ Group.@@ id@@ )), super@@ Parent@@ Group@@ , parent@@ Group@@ 2); }
@org.junit.Test public void by@@ Member@@ () throw@@ s java.lang.Exception { if ((@@ get@@ Schema@@ Version@@ ()) < 4@@ ) { assert@@ M@@ is@@ s@@ ing@@ Fiel@@ d(@@ Group@@ Fiel@@ d.@@ ME@@ M@@ B@@ ER@@ ); assert@@ Fai@@ lin@@ g@@ Query@@ ("@@ me@@ mber@@ :@@ so@@ me@@ Name@@ ", "@@ '@@ me@@ mber@@ ' o@@ per@@ at@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count in@@ de@@ x ver@@ sion@@ "); return@@ ; } com.google.gerrit.extensions.common.@@ Account@@ Info user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ ", "@@ User@@ 1@@ ", "@@ user@@ 1@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.extensions.common.@@ Account@@ Info user@@ 2 = create@@ Account@@ ("@@ user@@ 2@@ ", "@@ User@@ 2@@ ", "@@ user@@ 2@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ (@@ name@@ ("@@ group@@ 1@@ "), user@@ 1); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ "), user@@ 2); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 3 = create@@ Group@@ (@@ name@@ ("@@ group@@ 3@@ "), user@@ 1); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ name@@ )), group@@ 3@@ ); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ email@@ )), group@@ 1, group@@ 3@@ ); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ group@@ 3@@ .@@ id@@ ).@@ remove@@ Member@@ s(@@ user@@ 1@@ .@@ user@@ name); g@@ Api@@ .g@@ roup@@ s().@@ id(@@ group@@ 2.@@ id@@ ).@@ add@@ Member@@ s(@@ user@@ 1@@ .@@ user@@ name); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ name@@ )), group@@ 1, group@@ 2); }
@org.junit.Test public void by@@ In@@ name@@ () throw@@ s java.lang.Exception { java.lang.String name@@ Par@@ t = get@@ S@@ an@@ iti@@ zed@@ Met@@ ho@@ d@@ Name@@ (); name@@ Par@@ t = com.google.common.base.@@ Char@@ Match@@ er.@@ is@@ (@@ '@@ _@@ '@@ ).@@ remove@@ From@@ (@@ name@@ P@@ art@@ ); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ (("@@ account@@ -@@ " + name@@ P@@ art@@ )); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ ((("@@ account@@ -@@ " + name@@ ) + "@@ -@@ 2@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 3 = create@@ Group@@ ((("@@ account@@ -@@ " + name@@ P@@ art@@ ) + "@@ 3@@ ")); assert@@ Query@@ (("@@ in@@ :@@ " + name@@ P@@ art@@ ), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ name@@ :@@ " + (@@ name@@ Par@@ t.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )), group@@ 1, group@@ 2, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ name@@ :@@ " + (@@ name@@ Par@@ t.@@ to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )), group@@ 1, group@@ 3@@ ); }
@org.junit.Test public void by@@ I@@ s@@ Visible@@ To@@ All@@ () throw@@ s java.lang.Exception { assert@@ Query@@ ("@@ is@@ :@@ vi@@ sible@@ to@@ all@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ Al@@ l = create@@ Group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ All(@@ name@@ ("@@ account@@ -@@ th@@ at@@ -@@ is@@ -@@ vi@@ sible@@ -@@ to@@ -@@ all@@ ")); create@@ Group@@ (@@ name@@ ("@@ group@@ ")); assert@@ Query@@ ("@@ is@@ :@@ vi@@ sible@@ to@@ all@@ ", group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ All@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ note@@ Db@@ .g@@ roup@@ s.@@ write@@ ", valu@@ e = "@@ true@@ ") public void delete@@ Group@@ Branch@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ A@@ TE@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ No@@ t allow@@ ed to de@@ le@@ te ac@@ count branch@@ "); branch@@ (@@ new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()@@ )@@ )).@@ delete@@ (); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ B@@ ran@@ ch \"@@ " + (rsrc@@ .getRef@@ ())) + "@@ \@@ " al@@ read@@ y ex@@ ist@@ s@@ ")); }
com.google.gerrit.server.@@ api.@@ changes.@@ Comment@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Comment@@ Resource c@@ );
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ Mo@@ v@@ e Change@@ ").@@ set@@ T@@ it@@ le@@ ("@@ Mo@@ v@@ e change to a d@@ if@@ f@@ er@@ ent branch@@ ").@@ setVisible@@ (@@ an@@ d(@@ change@@ .getStatu@@ s().@@ is@@ Open@@ (), an@@ d(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (rsrc@@ .getUser@@ ()).@@ ref@@ (change@@ .get@@ Dest@@ ()).@@ test@@ Con@@ d(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ C@@ RE@@ A@@ TE@@ _@@ CHANG@@ E@@ ), r@@ sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ Provider@@ ).@@ test@@ Con@@ d(@@ com.google.gerrit.server.@@ re@@ stapi.@@ AB@@ AN@@ D@@ ON@@ )@@ ))); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) { return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ rsrc@@ .getProject@@ State@@ ().get@@ Project@@ ().get@@ Description@@ ()); }
private com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource check@@ Ex@@ ist@@ s() throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if ((@@ project@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ name); } return project@@ ; }
com.google.gerrit.server.@@ api.@@ projects.@@ Project@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource project@@ );
@java.lang.Override public void on@@ Pre@@ Merge@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , com.google.gerrit.server.git.CodeReview@@ Commit commit@@ , com.google.gerrit.server.project.Project@@ State dest@@ Project@@ , com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key dest@@ Branch@@ , com.google.gerrit.reviewdb.client.PatchSet.@@ Id patchSet@@ Id, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User call@@ er@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception { if ((!@@ (@@ all@@ User@@ s@@ Name.@@ equals(@@ dest@@ Project@@ .getName@@ Key@@ ()))) || (!(@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Group@@ (@@ dest@@ Branch@@ .get@@ ()@@ )))) { return@@ ; } throw new com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception("@@ ac@@ count updat@@ e not allow@@ ed@@ "); }
public static java.lang.String get@@ Group.@@ UU@@ I@@ D ma@@ k@@ e@@ (java.lang.String group@@ Name, org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent cre@@ ator@@ ) { java.@@ s@@ ecu@@ ri@@ ty.@@ Message@@ D@@ ig@@ est m@@ d = org.eclipse.jgit.lib.@@ Con@@ stant@@ s@@ .@@ new@@ Message@@ D@@ ig@@ est@@ (); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ ((("@@ ac@@ count " + group@@ Name) + "@@ \n@@ "@@ ))); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ ((("@@ cre@@ at@@ or " + (@@ cre@@ ator@@ .@@ to@@ External@@ String@@ ())) + "@@ \n@@ "@@ ))); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ (@@ java.lang.String.@@ value@@ Of@@ (java.lang.@@ M@@ ath@@ .@@ ra@@ n@@ do@@ m@@ ()))); return new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ org.eclipse.jgit.lib.Object@@ Id.@@ from@@ R@@ a@@ w@@ (m@@ d.@@ di@@ est@@ ()).@@ name@@ ()); }
@org.junit.Test public void cre@@ ated@@ On@@ I@@ s@@ Po@@ p@@ ul@@ ated@@ For@@ Group@@ s@@ Cre@@ ated@@ B@@ e@@ for@@ e@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = create@@ Group@@ ("@@ An@@ c@@ i@@ ent ac@@ count for s@@ che@@ m@@ a ig@@ r@@ ation@@ "); set@@ Cre@@ ated@@ On@@ Ver@@ y@@ O@@ ld@@ Tim@@ est@@ amp@@ (@@ group@@ Id); remove@@ Au@@ dit@@ Ent@@ ri@@ es@@ For@@ (@@ group@@ Id); schema@@ 5@@ 1@@ .@@ m@@ ig@@ r@@ ate@@ Data@@ (db, new com.google.gerrit.@@ test@@ ing.@@ Test@@ U@@ I@@ ()); java.sql.@@ Tim@@ est@@ am@@ p cre@@ ated@@ O@@ n = get@@ Cre@@ ated@@ On@@ (@@ group@@ Id); assert@@ Th@@ at(@@ cre@@ ated@@ On@@ ).@@ isEqualTo(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ au@@ dit@@ Cre@@ ation@@ In@@ stant@@ T@@ s()); }
private com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info create@@ Branch@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , com.google.gerrit.server.project.Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s) { com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info in@@ fo = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); info.@@ re@@ f = ref@@ .getName@@ (); info.@@ re@@ vi@@ sion = ((@@ ref@@ .get@@ Object@@ Id@@ ()) != null@@ ) ? ref@@ .get@@ Object@@ Id@@ ().@@ name@@ () : null@@ ; info.@@ can@@ De@@ le@@ te = ((!@@ (t@@ arget@@ s.@@ contains(@@ ref@@ .getName@@ ()))) && (@@ per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ))) ? true : null@@ ; com.google.gerrit.server.@@ re@@ stapi.@@ Branch@@ Resource r@@ sr@@ c = new com.google.gerrit.server.@@ re@@ stapi.@@ Branch@@ Resource@@ (project@@ State@@ , user@@ , ref@@ ); for (@@ com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion d : ui@@ Action@@ s.@@ from@@ (@@ branch@@ View@@ s, rsrc@@ )) { if ((@@ info.@@ action@@ s) == null@@ ) { info.@@ action@@ s = new java.util.@@ Tree@@ Map@@ (); } info.@@ action@@ s.@@ put(@@ d@@ .getId@@ (), new com.google.gerrit.extensions.common.@@ Action@@ Info@@ (@@ d@@ )); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> link@@ s = web@@ Link@@ s.get@@ Branch@@ Link@@ s(@@ project@@ State@@ .getName@@ (), ref@@ .getName@@ ()); info.@@ web@@ Link@@ s = (@@ link@@ s.@@ isEmpty()) ? null : link@@ s; return info@@ ; }
com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info to@@ Branch@@ Info@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository db = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { org.eclipse.jgit.lib.@@ Re@@ f r = db.@@ ex@@ act@@ Ref@@ (rsrc@@ .getRef@@ ()); if (@@ r == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } return to@@ Branch@@ Info@@ (rsrc@@ , com.google.common.collect.Immutable@@ List.@@ of@@ (r@@ )@@ .get(@@ 0); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> all@@ Branch@@ es@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { java.util.List<@@ org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > head@@ s = db@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ values@@ (); ref@@ s = new java.util.Array@@ List@@ (((@@ head@@ s.@@ size@@ ()) + 3@@ )); refs.@@ add@@ All(@@ head@@ s); refs.@@ add@@ All@@ (db@@ .getRef@@ Dat@@ abase@@ ().@@ ex@@ act@@ Ref@@ (@@ Con@@ stant@@ s.@@ HE@@ AD@@ , Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ , Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ US@@ ER@@ S_@@ DE@@ FA@@ U@@ L@@ T@@ ).@@ values@@ ()); } return to@@ Branch@@ Info@@ (rsrc@@ , ref@@ s); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return new com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ re@@ g@@ ex@@ (@@ match@@ Re@@ g@@ ex@@ ).@@ start@@ (@@ start@@ ).@@ li@@ mit@@ (@@ li@@ mit@@ ).@@ filter@@ (@@ all@@ Branch@@ es@@ (rsrc@@ )); }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> to@@ Branch@@ Info@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ , java.util.List<@@ org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (1); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : ref@@ s) { if (ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ ()) { t@@ arget@@ s.add(@@ ref@@ .get@@ T@@ arget@@ ().get@@ Name()); } } com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (rsrc@@ .getName@@ Key@@ ()); java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> branch@@ es = new java.util.Array@@ List(@@ refs.@@ size()); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : ref@@ s) { if (ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ ()) { java.lang.String t@@ arg@@ e@@ t = ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ (); if (!(@@ per@@ m.@@ ref@@ (t@@ arget@@ ).@@ test@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ))) { continue@@ ; } if (t@@ arg@@ e@@ t.@@ startsWith@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ )) { t@@ arg@@ e@@ t = t@@ arg@@ e@@ t.@@ substring@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ .@@ length@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info b = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); b.@@ re@@ f = ref@@ .getName@@ (); b.@@ re@@ vi@@ sion = t@@ arget@@ ; branch@@ es.@@ add(@@ b@@ ); if (!(@@ Con@@ stant@@ s.@@ HE@@ AD@@ .equals(@@ ref@@ .getName@@ ()))) { b.@@ can@@ De@@ le@@ te = (@@ per@@ m.@@ ref@@ .getName@@ ()).@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ )) ? true : null@@ ; } continue@@ ; } if (@@ per@@ m.@@ ref@@ .getName@@ ()).@@ test@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ )) { branch@@ es.@@ add(@@ create@@ Branch@@ Info@@ (@@ per@@ m.@@ ref@@ .getName@@ ()), ref@@ .getName@@ ()), rsrc@@ .getProject@@ State@@ (), rsrc@@ .getUser@@ (), t@@ arget@@ s@@ )); } } java.util.Collections.s@@ ort@@ (@@ branch@@ es@@ , new re@@ stapi.@@ List@@ Branch@@ es.@@ Branch@@ es@@ ()); return branch@@ es@@ ; }
@java.lang.Override public synchronized void on@@ Ac@@ cep@@ ted apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input input@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource@@ .getName@@ Key@@ (); com.google.gerrit.server.git.@@ Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ .@@ T@@ as@@ k mp@@ t = new com.google.gerrit.server.git.@@ Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ (@@ com.google.common.@@ io.@@ By@@ te@@ Stream@@ s@@ .@@ Output@@ Stream@@ (), "@@ Re@@ index@@ ing project@@ ").@@ be@@ gin@@ Sub@@ Task@@ ("@@ Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ .@@ UN@@ K@@ NO@@ W@@ N@@ ); com.google.gerrit.server.index.@@ change.@@ All@@ Changes@@ Index@@ er all@@ Changes@@ Index@@ er = all@@ Changes@@ Index@@ er@@ Provider@@ .get(); all@@ Changes@@ Index@@ er.@@ set@@ Ver@@ bo@@ se@@ Out@@ (@@ null@@ ); IN@@ ST@@ AN@@ C@@ E@@ ); @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <@@ java.lang.@@ Void@@ > ig@@ no@@ re@@ d = execu@@ tor@@ .@@ submit@@ (@@ all@@ Changes@@ Index@@ er.@@ re@@ index@@ Project@@ (in@@ dex@@ er, project, mp@@ t@@ , t@@ mp@@ t@@ )); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ accep@@ ted@@ P@@ roject " + project@@ ) + " submit@@ ted for re@@ index@@ ing@@ ")); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ ow@@ ned@@ -@@ by@@ ", us@@ ag@@ e = "@@ li@@ s@@ t group@@ s ow@@ ne@@ d b@@ y th@@ e g@@ ive@@ n ac@@ count u@@ id@@ ") public void set@@ Ow@@ ned@@ B@@ y(@@ java.lang.String ow@@ ned@@ By@@ ) { this@@ .@@ ow@@ ned@@ B@@ y = ow@@ ned@@ By@@ ; }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ account@@ ", ali@@ ase@@ s = { "@@ -@@ g@@ " }@@ , us@@ ag@@ e = "@@ ac@@ count to in@@ sp@@ ec@@ t@@ ") public void add@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { group@@ s@@ To@@ In@@ sp@@ ec@@ t.@@ add(@@ u@@ id); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "@@ -@@ o@@ ", us@@ ag@@ e = "@@ Out@@ pu@@ t o@@ ption@@ s p@@ er account@@ ") void add@@ Option@@ (@@ com.google.gerrit.extensions.client.@@ Group@@ s@@ Op@@ tion o@@ ) { o@@ ption@@ s.add(@@ o@@ ption@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ re@@ g@@ ex@@ ", ali@@ ase@@ s = { "@@ -@@ r@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ RE@@ G@@ E@@ X@@ ", us@@ ag@@ e = "@@ m@@ atch ac@@ count re@@ g@@ ex@@ ") public void set@@ Match@@ Re@@ g@@ ex@@ (java.lang.String match@@ Re@@ g@@ ex@@ ) { this@@ .@@ match@@ Re@@ g@@ e@@ x = match@@ Re@@ g@@ ex@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Tag@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String t@@ a@@ g = com.google.gerrit.server.project.@@ Ref@@ Util.@@ n@@ or@@ ma@@ li@@ ze@@ Tag@@ (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ ); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ (t@@ ag@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); delete@@ Ref@@ Factory.create@@ (@@ resource@@ ).@@ ref@@ (t@@ ag@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
private static com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception get@@ Exception@@ For@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ator@@ (java.lang.String o@@ per@@ ator@@ Name) { return new com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s@@ ' o@@ per@@ ator@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count in@@ de@@ x ver@@ sion@@ ", o@@ per@@ ator@@ Name@@ )); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ user@@ .getUser@@ Name@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ "); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ External@@ Id.@@ Key@@ .@@ create@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ .getUser@@ Name@@ ())); if (@@ ext@@ Id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id new@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create@@ With@@ P@@ asswor@@ d(@@ ext@@ Id.@@ key@@ (), ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ email@@ (), new@@ P@@ asswor@@ d); ext@@ er@@ n@@ al@@ Id@@ s@@ Update.@@ create@@ ().@@ up@@ sert@@ (@@ new@@ Ex@@ t@@ Id); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@java.lang.Override void read@@ From@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group.@@ Builder group@@ , org.eclipse.jgit.lib.@@ Config config@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalidException { int id = config@@ .get@@ In@@ t(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Config@@ E@@ n@@ try@@ .@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , super@@ .@@ key@@ Name, (@@ -@@ 1@@ )); if (@@ id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ I@@ D of th@@ e ac@@ count %s m@@ us@@ t not b@@ e ne@@ g@@ ative@@ , fo@@ un@@ d %@@ d@@ ", group@@ U@@ u@@ id@@ .get(), id@@ )); } group@@ .set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Project@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Ch@@ ild@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if ((@@ re@@ cur@@ si@@ ve@@ ) || (r@@ sr@@ c.@@ is@@ Di@@ re@@ ct@@ Ch@@ ild@@ ())) { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Ch@@ ild@@ ().get@@ Project@@ ()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (rsrc@@ .get@@ Ch@@ ild@@ ().get@@ Name()); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = r@@ sr@@ c.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); return get@@ Di@@ re@@ ct@@ Sub@@ group@@ s(@@ group@@ , rsrc@@ .get@@ Control@@ ()); }
private java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> suggest@@ Account@@ s(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Su@@ ggest@@ Reviewer@@ s suggest@@ Reviewer@@ s) throw@@ s com.google.gwtorm.server.OrmException { try (@@ com.google.gerrit.@@ met@@ ri@@ c@@ s.@@ Tim@@ er@@ 0@@ .@@ Context ct@@ x = met@@ ri@@ c@@ s.@@ query@@ Account@@ s@@ L@@ at@@ en@@ c@@ y.@@ start@@ ()) { try { com.google.gerrit.@@ index.@@ Query@@ Result@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > result = query@@ Provider@@ .get().@@ set@@ User@@ Provi@@ ded@@ Li@@ mit@@ (((@@ suggest@@ Reviewer@@ s.get@@ Li@@ mit@@ ()) * (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Reviewer@@ s@@ Util.@@ C@@ AN@@ D@@ ID@@ A@@ TE@@ _@@ L@@ IS@@ T_@@ M@@ U@@ L@@ T@@ I@@ P@@ L@@ I@@ ER@@ )@@ )).@@ quer@@ y(@@ com.google.gerrit.server.query.@@ account.@@ Account@@ Predi@@ c@@ at@@ es.@@ Active@@ (account@@ Query@@ Builder@@ .@@ default@@ Quer@@ y(@@ suggest@@ Reviewer@@ s.get@@ Query@@ ()))); return result.@@ enti@@ ti@@ es().@@ stream@@ ().@@ map@@ (@@ ( a@@ ) -@@ > a@@ .getAccount@@ ().get@@ Id@@ ()).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); } catch (@@ com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception e) { return com.google.common.collect.Immutable@@ List.@@ of@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ group@@ s.@@ P@@ ut@@ Sub@@ g@@ roup create@@ (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource group@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) { return new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ group@@ s.@@ P@@ ut@@ Sub@@ group@@ (@@ add@@ Sub@@ s, group@@ .get()); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ group@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al pa@@ ren@@ t = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c me@@ mb@@ er = group@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id@@ ).get@@ Group@@ (); if ((@@ resource@@ .get@@ Control@@ ().@@ can@@ Se@@ e@@ Group@@ ()) && (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ s@@ Collec@@ tion.@@ is@@ Sub@@ group@@ (p@@ arent@@ , me@@ mber@@ ))) { return new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ mission@@ Resource@@ (@@ resource@@ , me@@ mber@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource@@ > list@@ () { return list@@ ; }
com.google.gerrit.server.@@ api.@@ changes.@@ Draft@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource d);
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ match@@ ", ali@@ ase@@ s = { "@@ -@@ m@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ M@@ AT@@ CH@@ ", us@@ ag@@ e = "@@ m@@ atch ac@@ count substring@@ ") public void set@@ Sub@@ string@@ (java.lang.String match@@ Sub@@ string@@ ) { this@@ .@@ match@@ Sub@@ st@@ rin@@ g = match@@ Sub@@ string@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ resource@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ No@@ t ac@@ count owner@@ "); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ o@@ ption@@ s ar@@ e requ@@ i@@ red@@ "); } if ((@@ input.@@ vi@@ sible@@ To@@ All@@ ) == null@@ ) { input.@@ vi@@ sible@@ To@@ Al@@ l = false@@ ; } if (@@ (@@ int@@ er@@ n@@ al@@ Group.@@ is@@ Visible@@ To@@ All@@ ()) != (in@@ put.@@ vi@@ sible@@ To@@ All@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = false@@ ; } if (@@ int@@ er@@ n@@ al@@ Group.@@ is@@ All@@ ()) { group@@ UU@@ I@@ D = group@@ U@@ u@@ id = new com.google.gerrit.server.g@@ roup.@@ Group@@ Option@@ s.@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Update group@@ Update = group@@ Option@@ s@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Visible@@ To@@ All@@ (in@@ put.@@ vi@@ sible@@ To@@ All@@ ).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ Provider@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id, group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group %s not fo@@ und@@ ", group@@ U@@ u@@ id@@ )); } } com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info o@@ ption@@ s = new com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info@@ (); if (in@@ put.@@ vi@@ sible@@ To@@ All@@ ) { o@@ ption@@ s.@@ vi@@ sible@@ To@@ Al@@ l = true@@ ; } return o@@ ption@@ s; }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ ) { com.google.gerrit.reviewdb.client.@@ P@@ roject project = resource@@ .getProject@@ State@@ ().get@@ Project@@ (); com.google.gerrit.reviewdb.client.Project.NameKey parent@@ Name = project@@ .getParent@@ (@@ all@@ Project@@ s@@ Name); return parent@@ Name != null ? parent@@ Name@@ .get@@ () : "@@ "; }
@java.lang.Override public java.lang.O@@ bject apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ , com.google.gerrit.server.@@ re@@ stapi.@@ G@@ ar@@ b@@ age@@ Collec@@ t.@@ Input input@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc@@ .getName@@ Key@@ (); if (in@@ put.@@ as@@ y@@ n@@ c@@ ) { return appl@@ y@@ Async@@ (project@@ , input@@ ); } return appl@@ y@@ Sy@@ n@@ c@@ (project@@ , input@@ ); }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) { return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ R@@ u@@ n G@@ C@@ ").@@ set@@ T@@ it@@ le@@ ("@@ T@@ ri@@ gg@@ er@@ s th@@ e G@@ it G@@ ar@@ b@@ ag@@ e this project.@@ ").@@ setVisible@@ (c@@ an@@ G@@ C@@ ); }
protected com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment configure@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ (@@ boolean au@@ to@@ V@@ er@@ if@@ y@@ ) throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a@@ ; if (@@ au@@ to@@ V@@ er@@ if@@ y@@ ) { java.lang.String g = create@@ Group@@ ("@@ c@@ la@@ -@@ account@@ "); com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Ap@@ i group@@ Ap@@ i = g@@ Api@@ .g@@ roup@@ s().@@ id(@@ g@@ ); group@@ Api.@@ des@@ cription@@ ("@@ C@@ L@@ A t@@ est account@@ "); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group c@@ a@@ Group = group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ group@@ Api.@@ d@@ et@@ ail@@ ().@@ id@@ )); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Re@@ f = new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (c@@ a@@ .get@@ Group@@ UUID@@ (), c@@ a@@ Group@@ .getName@@ ()); com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e r@@ ul@@ e = new com.google.gerrit.common.data.@@ Permission@@ Rule@@ (@@ group@@ Ref@@ ); rule@@ .set@@ Action@@ (@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ AL@@ LO@@ W@@ ); c@@ a = new com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ ("@@ c@@ la@@ -@@ test@@ "); c@@ a.@@ set@@ Au@@ to@@ V@@ er@@ if@@ y(@@ group@@ Ref@@ ); c@@ a.@@ set@@ Ac@@ cep@@ ted@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (r@@ ule@@ )); } else { c@@ a = new com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ ("@@ c@@ la@@ -@@ test@@ -@@ no@@ -@@ au@@ to@@ -@@ ve@@ r@@ if@@ y@@ "); } c@@ a.@@ set@@ Description@@ ("@@ des@@ cription@@ "); c@@ a.@@ set@@ Ag@@ reement@@ Url@@ ("@@ ag@@ reement@@ -@@ url@@ "); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ all@@ Project@@ s@@ ).get@@ Config@@ (); cf@@ g.@@ replace@@ (c@@ a@@ ); save@@ Project@@ Config@@ (@@ all@@ Project@@ s, cfg@@ ); return c@@ a@@ ; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource@@ (@@ rev@@ , id@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { try { com.google.gerrit.extensions.api.@@ projects.@@ B@@ an@@ Commit@@ Input in@@ pu@@ t = com.google.gerrit.extensions.api.@@ projects.@@ B@@ an@@ Commit@@ Input.@@ from@@ Commit@@ s(@@ com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ commit@@ s@@ To@@ B@@ an@@ , Object@@ Id@@ :@@ get@@ Name@@ )); input.@@ re@@ as@@ on = re@@ as@@ on@@ ; com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ B@@ an@@ Commit.@@ B@@ an@@ Result@@ Info r = b@@ an@@ Commit.@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), input@@ ); p@@ r@@ int@@ Commit@@ s(@@ r@@ .@@ new@@ ly@@ B@@ an@@ ne@@ d, "@@ Th@@ e fo@@ l@@ low@@ ing commit@@ s w@@ er@@ e b@@ an@@ ned@@ "); p@@ r@@ int@@ Commit@@ s(@@ r.@@ al@@ read@@ y@@ B@@ an@@ ne@@ d, "@@ Th@@ e fo@@ l@@ low@@ ing commit@@ s w@@ er@@ e al@@ read@@ y b@@ an@@ ned@@ "); p@@ r@@ int@@ Commit@@ s(@@ r.@@ ig@@ no@@ red@@ , "@@ Th@@ e fo@@ l@@ low@@ ing id@@ s do not rep@@ res@@ ent commit@@ s an@@ d w@@ er@@ e ig@@ no@@ red@@ "); } catch (@@ java.lang.Exception e) { throw di@@ e@@ (@@ e); } }
@java.lang.Override void read@@ From@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group.@@ Builder group@@ , org.eclipse.jgit.lib.@@ Config config@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String owner@@ Group@@ U@@ u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Config@@ E@@ n@@ try@@ .@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , null@@ , super@@ .@@ key@@ Name); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ owner@@ Group@@ U@@ u@@ id@@ )) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Ow@@ ne@@ r UU@@ I@@ D of th@@ e ac@@ count %s m@@ us@@ t b@@ e de@@ fin@@ ed@@ ", group@@ U@@ u@@ id@@ .get@@ ())); } group@@ .set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ owner@@ Group@@ U@@ u@@ id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, Delete@@ Branch@@ es@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if ((@@ (in@@ pu@@ t == null@@ ) || ((@@ input.@@ branch@@ es) == null@@ )) || (in@@ put.@@ branch@@ es.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ branch@@ es m@@ us@@ t b@@ e sp@@ e@@ c@@ if@@ i@@ ed@@ "); } delete@@ Ref@@ Factory.create@@ (project@@ ).@@ ref@@ s(@@ input.@@ branch@@ es@@ ).@@ pre@@ fix@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource rsrc@@ , Input in@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception, com.google.gwtorm.server.OrmException { if (((@@ in == null@@ ) || ((@@ in.@@ message@@ ) == null@@ )) || (in@@ .@@ messag@@ e.@@ tri@@ m@@ ().@@ isEmpty())) { return de@@ le@@ t@@ e.@@ appl@@ y@@ Im@@ pl@@ (@@ update@@ Factory@@ , rsrc@@ , null@@ ); } else if ((@@ (in@@ .@@ id@@ ) != null@@ ) && (!(@@ rsrc@@ .getId@@ ().equals(@@ in.@@ id@@ )))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ id m@@ us@@ t m@@ atch URL@@ "); } else if ((@@ (in@@ .@@ line@@ ) != null@@ ) && ((@@ in.@@ line@@ ) < 0@@ )) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ lin@@ e m@@ us@@ t b@@ e >@@ = 0@@ "); } else if ((((@@ in.@@ line@@ ) != null@@ ) && ((@@ in.@@ r@@ ange@@ ) != null@@ )) && ((@@ in.@@ line@@ ) != (in@@ .@@ r@@ ange@@ .@@ end@@ Line@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ r@@ ang@@ e end@@ Lin@@ e m@@ us@@ t b@@ e on th@@ e s@@ am@@ e lin@@ e a@@ s th@@ e comment@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getChange@@ ().get@@ Project@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.@@ change.@@ P@@ ut@@ Draft@@ Comm@@ ent.@@ O@@ p o@@ p = new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comm@@ ent.@@ (rsrc@@ .get@@ Comment@@ ().@@ key@@ , in@@ ); bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ ); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ comment@@ Json@@ .get().@@ set@@ Fil@@ l@@ Account@@ s@@ (@@ false@@ )@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ o@@ p.@@ comment@@ )); } }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update.@@ Update@@ Result@@ > update@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ U@@ u@@ id); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , this@@ :@@ get@@ Account@@ Name@@ Email@@ , this@@ :@@ get@@ Group@@ Name); if (!(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ is@@ P@@ res@@ ent@@ ())) { if (@@ group@@ s@@ M@@ igration.@@ read@@ From@@ NoteDb@@ ()) { throw new com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception(@@ group@@ U@@ u@@ id); } } return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group ori@@ gin@@ al@@ Group = group@@ Config@@ .get@@ ().get@@ Group@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Note@@ s group@@ Name@@ Note@@ s = null@@ ; if (@@ group@@ Update@@ .getName@@ ().@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key old@@ Name = ori@@ gin@@ al@@ Group@@ .getName@@ Key@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key new@@ Name = group@@ Update@@ .getName@@ ().get@@ (); group@@ Name@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ R@@ en@@ ame@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ U@@ u@@ id, old@@ Name, new@@ Name); } } com.google.gerrit.server.g@@ roup.@@ Create@@ Group.@@ UU@@ I@@ D group@@ Name@@ , group@@ Name@@ ); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group Group Group = group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ ().@@ se@@ ) ((@@ -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Update@@ d ac@@ count w@@ as@@ n@@ '@@ t au@@ to@@ m@@ ati@@ c@@ ally load@@ ed@@ ")); return java.util.@@ Optional@@ .@@ of@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update@@ .get@@ Result@@ (@@ ori@@ gin@@ al@@ Group@@ , updat@@ ed@@ Group@@ )); } }
public void dis@@ patch@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g ad@@ d group@@ s to ac@@ count event@@ ", e); } }
private void add@@ Member@@ s(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input in@@ pu@@ t = Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ in@@ iti@@ al@@ Member@@ s.@@ stream@@ ().@@ map@@ (@@ java.lang.O@@ bject@@ :@@ :@@ :@@ stream@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ())); add@@ Member@@ s.@@ apply(@@ rsrc@@ , input@@ ); }
private void add@@ Sub@@ group@@ s(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ group@@ s.@@ Input in@@ pu@@ t = Add@@ Sub@@ group@@ s.@@ Input.@@ from@@ Group@@ s(@@ in@@ iti@@ al@@ Group@@ s.@@ stream@@ ().@@ map@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ())); add@@ Sub@@ group@@ s.@@ apply(@@ rsrc@@ , input@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ account@@ ", ali@@ ase@@ s = "@@ -@@ g@@ ", met@@ a@@ V@@ a@@ r = "@@ G@@ RO@@ U@@ P@@ ", us@@ ag@@ e = "@@ in@@ iti@@ al se@@ t of group@@ s to b@@ e in@@ clu@@ de@@ d in th@@ e account@@ ") void add@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D id@@ ) { in@@ iti@@ al@@ Group@@ s.add(@@ id); }
@java.lang.Override public void replace@@ (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group group@@ ) throw@@ s java.io.IOException { io.@@ search@@ bo@@ x.@@ core@@ .@@ B@@ ul@@ k b@@ ul@@ k = new io.@@ search@@ bo@@ x.@@ core@@ .@@ B@@ ul@@ k.@@ Builder@@ ()@@ .@@ default@@ Index@@ (in@@ dex@@ Name@@ )@@ .@@ default@@ Type@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Group@@ Index@@ .@@ G@@ RO@@ U@@ P@@ S@@ ).@@ add@@ Action@@ (in@@ sert@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Group@@ Index@@ .@@ G@@ RO@@ U@@ P@@ S@@ , group@@ )).@@ ref@@ res@@ h@@ (@@ true@@ ).@@ bu@@ ild@@ (); io.@@ search@@ bo@@ x@@ .client.@@ J@@ est@@ Result result = client.@@ execute@@ (@@ b@@ ul@@ k@@ ); if (!(@@ result.@@ is@@ Suc@@ ce@@ ed@@ ())) { throw new java.io.IO@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to re@@ pl@@ ac@@ e ac@@ count %s in in@@ de@@ x %s@@ : %s", group@@ .get@@ Group@@ UUID@@ ().get@@ (), index@@ Name, result@@ .get@@ Error@@ Message@@ ())); } }
private void rep@@ ort@@ Group@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource group@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > group@@ U@@ u@@ id@@ List@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String id = group@@ U@@ u@@ id@@ List.@@ stream@@ ().@@ map@@ (@@ ( u@@ id@@ ) -@@ > group@@ Cache@@ .get(@@ u@@ id@@ ).@@ map@@ (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ :@@ :@@ :@@ get@@ Name@@ )).@@ f@@ l@@ at@@ Map@@ (@@ group@@ Map@@ (@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ("@@ , ")); out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group@@ s %s ac@@ count %s@@ : %s@@ \n@@ ", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ E@@ N@@ C@@ )); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Failure@@ , com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ Failure@@ , java.lang.Exception { try { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id : group@@ s) { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource res@@ our@@ ce = group@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (@@ group@@ U@@ u@@ id@@ .get@@ ())); if (!(@@ account@@ s@@ To@@ Remo@@ v@@ e.@@ isEmpty())) { delete@@ Member@@ s.@@ apply(@@ resource@@ , from@@ Member@@ s(@@ account@@ s@@ To@@ Remo@@ ve@@ )); rep@@ ort@@ Member@@ s@@ Action@@ ("@@ remove@@ d from@@ ", resource@@ , account@@ s@@ To@@ Remo@@ ve@@ ); } if (!(@@ group@@ s@@ To@@ Remo@@ v@@ e.@@ isEmpty())) { delete@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , from@@ Group@@ s(@@ group@@ s@@ To@@ Remo@@ ve@@ )); rep@@ ort@@ Group@@ s@@ Action@@ ("@@ ex@@ clu@@ de@@ d from@@ ", resource@@ , group@@ s@@ To@@ Remo@@ ve@@ ); } if (!(@@ account@@ s@@ To@@ Ad@@ d.@@ isEmpty())) { add@@ Member@@ s.@@ apply(@@ resource@@ , from@@ Member@@ s(@@ account@@ s@@ To@@ Add@@ )); rep@@ ort@@ Member@@ s@@ Action@@ ("@@ ad@@ de@@ d to@@ ", resource@@ , account@@ s@@ To@@ Add@@ ); } if (!(@@ group@@ s@@ To@@ Inclu@@ d@@ e.@@ isEmpty())) { add@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , from@@ Group@@ s(@@ group@@ s@@ To@@ Inclu@@ de@@ )); rep@@ ort@@ Group@@ s@@ Action@@ ("@@ in@@ clu@@ de@@ d to@@ ", resource@@ , group@@ s@@ To@@ Inclu@@ de@@ ); } } } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception e) { throw di@@ e@@ (@@ e.get@@ Message()); } }
private void rep@@ ort@@ Member@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.@@ re@@ st@@ .g@@ roup.@@ Group@@ Resource group@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ List@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String name@@ s = account@@ Id@@ List.@@ stream@@ ().@@ map@@ (@@ ( account@@ Id@@ ) -@@ > com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ Account@@ ().get@@ Pref@@ er@@ red@@ Email@@ (), "@@ n@@ /@@ a@@ /@@ "@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ , out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Member@@ s %s ac@@ count %s@@ \n@@ ", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ E@@ N@@ C@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ P@@ roject \"@@ " + (@@ resource@@ .getName@@ ())) + "@@ \@@ " al@@ read@@ y ex@@ ist@@ s@@ ")); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input config@@ Input = new com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input@@ (); config@@ Input.@@ requ@@ i@@ re@@ Change@@ Id = requ@@ i@@ re@@ Change@@ ID@@ ; config@@ Input.@@ submit@@ Type = submit@@ Type@@ ; config@@ Input.@@ use@@ Content@@ Merg@@ e = content@@ Merge@@ ; config@@ Input.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s = cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s; config@@ Input.@@ use@@ Sig@@ ned@@ O@@ ff@@ B@@ y = signe@@ d@@ O@@ ff@@ By@@ ; config@@ Input.@@ st@@ ate = state@@ .getProject@@ ().get@@ State@@ (); config@@ Input.@@ max@@ Object@@ Size@@ Li@@ m@@ it = max@@ Object@@ Size@@ Li@@ mit@@ ; if ((@@ com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (project@@ Description@@ )) != null@@ ) { config@@ Input.@@ des@@ crip@@ tion = project@@ Description@@ ; } else { config@@ Input.@@ des@@ crip@@ tion = project@@ State@@ .getProject@@ ().get@@ Description@@ (); } try { put@@ Config.@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), config@@ Input@@ ); } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw di@@ e@@ (@@ e); } }
com.google.gerrit.server.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ st@@ .g@@ roup.@@ Group@@ Resource rsrc@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info owner@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Ow@@ n@@ er.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot g@@ e@@ t ac@@ count owner@@ ", e); } }
@java.lang.Override public void o@@ ption@@ s(@@ com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info o@@ ption@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { put@@ Option@@ s.@@ apply(@@ rsrc@@ , o@@ ption@@ s); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count o@@ ption@@ s", e); } }
@java.lang.Override public void index@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { index.@@ apply(@@ rsrc@@ , new com.google.gerrit.extensions.common.@@ Input@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot in@@ de@@ x account@@ ", e); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> me@@ mber@@ s@@ (@@ boolean re@@ cur@@ si@@ ve@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return list@@ Member@@ s.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot li@@ s@@ t ac@@ count me@@ mber@@ s", e); } }
@java.lang.Override public void remove@@ Member@@ s(@@ java.lang.String.@@ .@@ . me@@ mber@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { delete@@ Member@@ s.@@ apply(@@ rsrc@@ , Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ java.util.Array@@ s.@@ as@@ List(@@ me@@ mber@@ s@@ ))); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot remo@@ v@@ e ac@@ count me@@ mber@@ s", e); } }
@java.lang.Override public void name@@ (java.lang.String name@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Name@@ Input in = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); in.@@ name = name@@ ; try { put@@ Name.@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count name@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info d@@ et@@ ail@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Det@@ ai@@ l.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e account@@ ", e); } }
@java.lang.Override public void add@@ Member@@ s(@@ java.lang.String.@@ .@@ . me@@ mber@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { add@@ Member@@ s.@@ apply(@@ rsrc@@ , Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ java.util.Array@@ s.@@ as@@ List(@@ me@@ mber@@ s@@ ))); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ad@@ d ac@@ count me@@ mber@@ s", e); } }
@java.lang.Override public void des@@ cription@@ (java.lang.String des@@ cription@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Description@@ Input in = new com.google.gerrit.extensions.common.@@ Description@@ Input@@ (); in.@@ des@@ crip@@ tion = des@@ cription@@ ; try { put@@ Des@@ crip@@ tion.@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count des@@ cription@@ ", e); } }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ me@@ mber@@ ", ali@@ ase@@ s = { "@@ -@@ m@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ US@@ ER@@ NAME@@ ", us@@ ag@@ e = "@@ in@@ iti@@ al se@@ t of user@@ s to com@@ e me@@ mber@@ s of th@@ e account@@ ") void add@@ Member@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { in@@ iti@@ al@@ Member@@ s.add(@@ id); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Failure@@ , com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { com.google.gerrit.server.@@ re@@ st@@ i@@ .g@@ roup.@@ Group@@ Resource r@@ sr@@ c = create@@ Group@@ (); if (!@@ (in@@ iti@@ al@@ Member@@ s.@@ isEmpty())) { add@@ Member@@ s(@@ rsrc@@ ); } if (!@@ (in@@ iti@@ al@@ Group@@ s.@@ isEmpty())) { add@@ Sub@@ Sub@@ Sub@@ group@@ s(@@ rsrc@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception e) { throw di@@ e@@ (@@ e); } }
private com.google.gerrit.server.@@ re@@ st@@ i@@ .g@@ roup.@@ Group@@ Resource create@@ Group@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input@@ (); input.@@ des@@ crip@@ tion = group@@ Description@@ ; input.@@ vi@@ sible@@ To@@ Al@@ l = vi@@ sible@@ To@@ All@@ ; if ((@@ owner@@ Group@@ Id@@ ) != null@@ ) { input.@@ owner@@ Id = java.lang.String.@@ value@@ Of(@@ owner@@ Group@@ Id@@ .get()); } com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = create@@ Group@@ Factory.create@@ (@@ group@@ Name@@ ).@@ apply(@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , input@@ ); return group@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (@@ group@@ .@@ id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Ap@@ i create(@@ com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Group@@ Input in@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if ((@@ check@@ Not@@ Null@@ (in@@ , "@@ Group@@ Input@@ ").@@ name@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ Group@@ Input m@@ us@@ t sp@@ e@@ c@@ if@@ y name@@ "); } try { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Create@@ Group i@@ mp@@ l = create@@ Group.@@ create@@ (in@@ .@@ name); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ An@@ y(@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ G@@ lobal@@ Permission@@ .@@ from@@ An@@ not@@ ation@@ (@@ i@@ m@@ pl@@ .get@@ Class@@ ())); com.google.gerrit.extensions.common.@@ Group@@ Info in@@ fo = i@@ mp@@ l.@@ apply(@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , in@@ ); return id(@@ info.@@ id); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception(("@@ Cannot cre@@ ate ac@@ count " + (in@@ .@@ name@@ )), e); } }
public static com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > load@@ All@@ Group@@ Ref@@ eren@@ ces@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ sitor@@ y.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ M@@ ES@@ ); if (re@@ f == null@@ ) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } try (@@ org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ sitor@@ y@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er read@@ er = rev@@ Wal@@ k@@ .get@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.revwalk.RevCommit notes@@ Commit = rev@@ Wal@@ k.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = org.eclipse.jgit.@@ not@@ es.@@ Note@@ Map.@@ read@@ (@@ read@@ er, notes@@ Commit@@ ); java.util.Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ eren@@ ce@@ s = new java.util.@@ Link@@ ed@@ Hash@@ Set<@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e : note@@ Map@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ .get@@ Notes@@ ().get@@ Ref@@ eren@@ ce@@ (@@ read@@ er, note@@ .get@@ Data@@ ()); boolean result = group@@ Ref@@ eren@@ ces.@@ add(@@ group@@ Ref@@ eren@@ ce@@ ); if (!@@ result) { com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ As@@ W@@ ar@@ n@@ ing@@ ("@@ Th@@ e UU@@ I@@ D of ac@@ count %s (@@ %@@ s) is d@@ up@@ li@@ c@@ ate in ac@@ count name in ac@@ count name = notes@@ ", group@@ Ref@@ eren@@ ce@@ .getName@@ (), group@@ Ref@@ eren@@ ce@@ .get@@ UUID@@ ()); } } return com.google.common.collect.Immutable@@ Set.@@ copy@@ Of(@@ group@@ Ref@@ eren@@ ces@@ ); }
private java.lang.String get@@ Commit@@ Message@@ () { if ((@@ old@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) && (@@ new@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ())) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ R@@ en@@ am@@ e ac@@ count f@@ ro@@ m '@@ %s@@ ' to '@@ %s@@ '@@ ", old@@ Group@@ Name@@ .get(), new@@ Group@@ Name@@ .get()); } if (@@ new@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cre@@ ate ac@@ count '@@ %s@@ '@@ ", new@@ Group@@ Name@@ .get()); } if (@@ old@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ De@@ le@@ te ac@@ count '@@ %s@@ '@@ ", old@@ Group@@ Name@@ .get()); } return "@@ No@@ op@@ "; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!(@@ ag@@ reement@@ s@@ Enable@@ d@@ )) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ cont@@ ri@@ bu@@ tor ag@@ reement@@ s dis@@ able@@ d@@ "); } if ((@@ self@@ .get@@ ()) != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to ent@@ er cont@@ ri@@ bu@@ tor ag@@ reement@@ "); } java.lang.String ag@@ reement@@ Name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ input.@@ name); com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ Name); if (c@@ a == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ cont@@ ri@@ bu@@ tor ag@@ ree@@ ment not fo@@ und@@ "); } if ((@@ c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ can@@ not ent@@ er a n@@ on@@ -@@ au@@ to@@ V@@ er@@ if@@ y ag@@ reement@@ "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ UUID@@ ().get@@ (); if (@@ u@@ id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ au@@ to@@ ve@@ r@@ if@@ y ac@@ count u@@ id not fo@@ und@@ "); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = self@@ .get@@ ().get@@ Account@@ (); try { add@@ Member@@ s.@@ add@@ Member@@ s(@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (account@@ .getId@@ ())); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ au@@ to@@ ve@@ r@@ if@@ y ac@@ count not fo@@ und@@ "); } ag@@ reement@@ Sig@@ n@@ up@@ .@@ fi@@ re@@ (account@@ , ag@@ reement@@ Name); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ ag@@ reement@@ Name); }
@org.junit.Test public void sh@@ a@@ red@@ Group@@ ID@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", g@@ 1@@ .@@ name); cf@@ g.@@ set@@ In@@ t@@ ("@@ group@@ ", null@@ , "@@ id@@ ", g@@ 2@@ .g@@ roup@@ Id); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ owner@@ Group@@ U@@ u@@ id@@ ", g@@ Ad@@ min@@ .@@ id); update@@ Group@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E@@ , cf@@ g.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ sh@@ a@@ re@@ d ac@@ count id@@ "); }
@org.junit.Test public void mis@@ s@@ ing@@ Group@@ Name@@ Ref@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ Update r@@ u = repo.@@ update@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ M@@ ES@@ ); r@@ u@@ .set@@ For@@ ce@@ Update@@ (@@ true@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ delete@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ Result.@@ F@@ OR@@ C@@ ED@@ ); } assert@@ Error@@ ("@@ refs/@@ met@@ a@@ /@@ account@@ -@@ name@@ s do@@ es not ex@@ ist@@ "); } }
@org.junit.Test public void name@@ With@@ out@@ Group@@ Ref@@ () throw@@ s java.lang.Exception { java.lang.String bo@@ g@@ us@@ Name = "@@ bo@@ g@@ u@@ s name@@ "; org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ u@@ id@@ ", com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ G@@ US@@ _@@ UUID@@ ); config.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", bo@@ g@@ us@@ Name); update@@ Group@@ File@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NA@@ M@@ ES@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Notes@@ .get@@ Note@@ Key@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ bo@@ g@@ us@@ Name@@ )@@ ).get@@ Name@@ (), config.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ en@@ try mis@@ s@@ ing a@@ s ac@@ count ref@@ "); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Get@@ Group@@ Cache@@ Impl.@@ log.error@@ ("@@ Fai@@ le@@ d to g@@ e@@ t g@@ roup %s in L@@ ev@@ e in L@@ ev@@ el@@ d for user %s@@ : %s", com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Util@@ .get@@ Notes@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ bo@@ g@@ us@@ Name@@ )@@ ).get@@ Name@@ (), config.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ en@@ try mis@@ s@@ ing a@@ s ac@@ count ref@@ "); } }
@org.junit.Test public void mis@@ s@@ ing@@ Name@@ E@@ n@@ try@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ R@@ en@@ am@@ e r@@ u = repo.@@ re@@ name@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (com.google.gerrit.acceptance.@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ US@@ _@@ UUID@@ ))); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ re@@ name@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ RE@@ NA@@ M@@ ED@@ ); } assert@@ Error@@ ((("@@ ac@@ count " + (com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ B@@ O@@ G@@ _@@ UUID@@ )) + " h@@ a@@ s n@@ o en@@ try in name in name ")); } }
@org.junit.Test public void unk@@ no@@ w@@ n@@ Owner@@ Group@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", g@@ 1@@ .@@ name); cf@@ g.@@ set@@ In@@ t@@ ("@@ group@@ ", null@@ , "@@ id@@ ", g@@ 1@@ .g@@ roup@@ Id); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ owner@@ Group@@ U@@ u@@ id@@ ", com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ US@@ _@@ UUID@@ ); update@@ Group@@ File@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E@@ , cf@@ g.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ n@@ on@@ ex@@ ist@@ ent ne@@ r account@@ "); }
@org.junit.Test public void mis@@ s@@ ing@@ Group@@ Ref@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ Update r@@ u = repo.@@ update@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ ))); r@@ u@@ .set@@ For@@ ce@@ Update@@ (@@ true@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ delete@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ Result.@@ F@@ OR@@ C@@ ED@@ ); } assert@@ Error@@ ("@@ mis@@ s@@ ing a@@ s ac@@ count ref@@ "); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info get@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Group.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e account@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ D@@ ashbo@@ ard@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ resource@@ .is@@ Project@@ Default@@ ()) { return default@@ Set@@ ter@@ .get().@@ apply(@@ resource@@ , input@@ ); } throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ (); }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key name@@ ) { if (@@ name == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } try { return by@@ Name@@ .get(@@ name@@ .get()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ oo@@ k up ac@@ count %s b@@ y name@@ ", name@@ .get@@ ()), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) { try { return by@@ Id@@ .get(@@ group@@ Id); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (("@@ Cannot lo@@ ad ac@@ count " + group@@ Id@@ ), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { if (@@ group@@ U@@ u@@ id == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } try { return by@@ UUID@@ .get(@@ group@@ U@@ u@@ id@@ .get()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ oo@@ k up ac@@ count %s b@@ y u@@ id@@ ", group@@ U@@ u@@ id@@ .get@@ ()), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
private void index@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ ) { try { index.@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), null@@ ); } catch (@@ java.lang.Exception e) { write@@ Error@@ ("@@ error@@ ", java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Un@@ able to in@@ de@@ x %s@@ : %s", project@@ State@@ .getName@@ (), e.get@@ Message@@ ())); } }
public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info get@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = get@@ Repository(@@ resource@@ .getName@@ Key@@ ()@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.lang.String tag@@ Name = id@@ .get(); if (!(@@ tag@@ Name.@@ startsWith@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ))) { tag@@ Name = (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ) + tag@@ Name@@ ; } org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ .getRef@@ Dat@@ abase@@ ().@@ ex@@ act@@ Ref@@ (t@@ ag@@ Name); if ((@@ re@@ f != null@@ ) && (!(@@ vi@@ sible@@ Tag@@ s(@@ resource@@ .getProject@@ State@@ (), repo@@ , com.google.common.collect.Immutable@@ Map.@@ of@@ (ref@@ .getName@@ (), ref@@ )).@@ isEmpty@@ ()))) { return com.google.gerrit.server.@@ project.@@ List@@ Tag@@ s.@@ create@@ Tag@@ Info@@ (@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ resource@@ .getUser@@ ()).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ .getName@@ Key@@ ()).@@ ref@@ (ref@@ .getName@@ ()), ref@@ , r@@ w, resource@@ .getName@@ Key@@ (), link@@ s); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info> tag@@ s = new java.util.ArrayList<@@ >(); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()); try (@@ org.eclipse.jgit.lib.Repository repo = get@@ Repository(@@ resource@@ .getName@@ Key@@ ()@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > al@@ l = vi@@ sible@@ Tag@@ s(@@ resource@@ .getProject@@ State@@ (), repo@@ , repo@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ )); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : al@@ l.@@ values@@ ()) { tag@@ s.add(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ List@@ Tag@@ s.@@ create@@ Tag@@ Info@@ (@@ per@@ m.@@ ref@@ .getName@@ ()), ref@@ , r@@ w, resource@@ .getName@@ Key@@ (), link@@ s@@ )); } java.util.Collections.s@@ ort@@ (t@@ ag@@ s, new java.util.@@ Comp@@ ar@@ ator@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ >() { @java.lang.Override public int compare@@ (@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info a@@ , com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info b@@ ) { return a.@@ ref@@ .@@ compare@@ To@@ (@@ b.@@ ref@@ ); } }); return new com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ).@@ start@@ (@@ start@@ ).@@ li@@ mit@@ (@@ start@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ re@@ g@@ ex@@ (@@ match@@ Re@@ g@@ ex@@ ).@@ filter@@ (t@@ ag@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ java.util.@@ Set@@ <java.lang.String@@ >> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.Change@@ Resource req@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = req@@ .get@@ Notes@@ ().@@ load@@ (); java.util.@@ Set@@ <java.lang.String> has@@ htag@@ s = notes@@ .get@@ H@@ as@@ htag@@ s(); if (@@ has@@ htag@@ s == null@@ ) { has@@ htag@@ s = com.google.common.collect.Immutable@@ Set.@@ of@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ has@@ htag@@ s); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ note@@ Db@@ .g@@ roup@@ s.@@ write@@ ", valu@@ e = "@@ true@@ ") public void create@@ Group@@ Branch@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ A@@ TE@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); assert@@ Create@@ F@@ ail@@ s@@ (@@ new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ foo@@ "@@ )@@ )), com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ , "@@ No@@ t allow@@ ed to ac@@ count branch@@ .@@ "); }
private java.util.@@ S@@ orted@@ Map@@ <java.lang.String, com.google.gerrit.extensions.common.@@ Group@@ Info> list@@ (com.google.gerrit.server.@@ ap@@ i@@ .g@@ roup@@ s.@@ List@@ Request req@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource t@@ l@@ r = com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ ; com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ List@@ Group@@ s li@@ s@@ t = list@@ Group@@ s.get@@ (); li@@ s@@ t.set@@ Option@@ s(@@ req@@ .get@@ Option@@ s()); for (java.lang.String project : req@@ .getProject@@ s()) { try { com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource r@@ sr@@ c = projects.@@ parse@@ (t@@ l@@ r@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (project@@ )); li@@ s@@ t.@@ add@@ Project@@ (rsrc@@ .getProject@@ State@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception(("@@ E@@ rror l@@ ook@@ ing up project " + project@@ ), e); } } for (java.lang.String g@@ roup : req@@ .get@@ Group@@ s()) { li@@ s@@ t.@@ add@@ Group@@ (@@ group@@ s.@@ parse@@ (@@ group@@ ).get@@ Group@@ UUID@@ ()); } li@@ s@@ t.set@@ Visible@@ To@@ All@@ (req@@ .get@@ Visible@@ To@@ All@@ ()); if ((@@ req@@ .get@@ Ow@@ ned@@ By@@ ()) != null@@ ) { li@@ s@@ t.set@@ Ow@@ ned@@ B@@ y(@@ req@@ .get@@ Ow@@ ned@@ By@@ ()); } if ((@@ req@@ .getUser@@ ()) != null@@ ) { try { li@@ s@@ t.set@@ User@@ (account@@ s.@@ parse@@ (req@@ .getUser@@ ()@@ ).get@@ Account@@ Id()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception(("@@ E@@ rror l@@ ook@@ ing up user " + (req@@ .getUser@@ ()@@ )), e); } } li@@ s@@ t.set@@ Ow@@ ne@@ d(@@ req@@ .get@@ Ow@@ ned@@ ()); li@@ s@@ t.set@@ Li@@ mit@@ (req@@ .get@@ Li@@ mit@@ ()); li@@ s@@ t.set@@ Start@@ (req@@ .get@@ Start@@ ()); li@@ s@@ t.set@@ Match@@ Sub@@ string@@ (req@@ .get@@ Sub@@ string@@ ()); li@@ s@@ t.set@@ Re@@ g@@ ex@@ (req@@ .get@@ Re@@ g@@ ex@@ ()); li@@ s@@ t.set@@ Su@@ ggest@@ (req@@ .get@@ Su@@ ggest@@ ()); try { return li@@ s@@ t.@@ apply(@@ t@@ l@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot li@@ s@@ t group@@ s", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info@@ >> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> p@@ ast@@ As@@ signe@@ es = rsrc@@ .get@@ Notes@@ ().@@ load@@ ().get@@ P@@ ast@@ As@@ signe@@ es@@ (); if (p@@ ast@@ As@@ signe@@ es == null@@ ) { return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ java.util.Collections.@@ empty@@ List@@ ()); } com.google.gerrit.server.account.Account@@ Load@@ er account@@ Load@@ er = account@@ Load@@ er@@ Factory.create@@ (@@ true@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> info@@ s = p@@ ast@@ As@@ signe@@ es.@@ stream@@ ().@@ map@@ (account@@ Load@@ er@@ :@@ get@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); account@@ Load@@ er.@@ fi@@ ll@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (info@@ s); }
@@@ com.google.gerrit.server.query.@@ change.@@ O@@ per@@ at@@ or public com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData> vi@@ sible@@ to@@ (java.lang.String who@@ ) throw@@ s com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ is@@ S@@ el@@ f@@ (@@ who@@ )) { return com.google.gerrit.@@ index.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ m.@@ size()); for (@@ com.google.gerrit.reviewdb.client.Account.Id id : m@@ ) { return vi@@ sible@@ to@@ (@@ args.@@ user@@ Factory.create@@ (id@@ )); } return com.google.gerrit.@@ index.@@ Predi@@ c@@ ate.@@ or@@ (p@@ ); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { final com.google.gerrit.server.@@ Current@@ User user = self@@ .get(); if (@@ user instanceof com.google.gerrit.server.@@ An@@ on@@ y@@ mo@@ us@@ User@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } else if (!(@@ user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c g@@ roup = parse@@ Id@@ (id@@ .get()); if (@@ g@@ roup == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ .get()); } com.google.gerrit.server.account.@@ Group@@ Control ct@@ l = group@@ Control@@ Factory.@@ control@@ For@@ (@@ group@@ ); if (!@@ (ct@@ l.@@ is@@ Visible@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource@@ (ct@@ l@@ ); }
public void vi@@ sit@@ (@@ org.eclipse.jgit.revwalk.RevCommit c@@ ) { check@@ State@@ ((!@@ (@@ do@@ ne@@ )), "@@ vi@@ sit@@ () cal@@ le@@ d af@@ ter get@@ Group@@ s@@ ()@@ "); java.util.Set<@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ > int@@ er@@ est@@ ing@@ Parent@@ s = get@@ In@@ ter@@ est@@ ing@@ Parent@@ s(@@ c@@ ); if (@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ size@@ ()) == 0) { group@@ s.@@ put@@ (c@@ , c.@@ name@@ ()); return@@ ; } else if (@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ size@@ ()) == 1@@ ) { group@@ s.@@ put@@ All@@ (c@@ , group@@ s.get@@ (@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ iter@@ ator@@ ().@@ next@@ ())); return@@ ; } java.util.@@ Set@@ <java.lang.String> this@@ Commit@@ s = new java.util.@@ Tree@@ Set<@@ >(); java.util.@@ Set@@ <java.lang.String> parent@@ Group@@ s@@ New@@ Th@@ is@@ Pu@@ s@@ h = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Link@@ ed@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ size()); for (@@ org.eclipse.jgit.revwalk.RevCommit p : int@@ er@@ est@@ ing@@ Parent@@ s) { java.util.Collection@@ <java.lang.String> parent@@ Group@@ s = group@@ s.get(@@ p@@ ); if (p@@ arent@@ Group@@ s.@@ isEmpty()) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ n@@ o ac@@ count as@@ signe@@ d to pa@@ ren@@ t %s of commit %s", p.@@ name@@ (), c.@@ name@@ ())); } for (java.lang.String parent@@ Group : parent@@ Group@@ s) { if (@@ is@@ From@@ Ex@@ ist@@ ing@@ PatchSet@@ (p@@ , parent@@ Group@@ )) { this@@ .@@ parent@@ s.add(@@ parent@@ Group@@ ); } } else { parent@@ Group@@ s@@ New@@ In@@ is@@ Push@@ .@@ add(@@ parent@@ ); } } java.lang.I@@ terable@@ <java.lang.String> to@@ A@@ li@@ as@@ ; if (@@ this@@ Commit@@ Group@@ s.@@ isEmpty()) { java.lang.String fi@@ rst@@ Parent@@ Group = parent@@ Group@@ s@@ New@@ In@@ is@@ Push@@ New@@ (); this@@ .@@ next@@ (); this@@ Commit@@ s = com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ fi@@ rst@@ Parent@@ Group@@ ); to@@ A@@ li@@ a@@ s = com.google.common.collect.I@@ terable@@ s.@@ s@@ kip@@ (p@@ arent@@ Group@@ s@@ In@@ is@@ Push@@ New@@ Group@@ s@@ In@@ ()) { parent@@ s = parent@@ s.@@ put@@ All@@ (c@@ , this@@ ); for (java.lang.String p@@ g : to@@ A@@ li@@ as@@ es.@@ put@@ All@@ (p@@ , this@@ ) { group@@ A@@ li@@ as@@ es.@@ put@@ All@@ (p@@ , g@@ , this@@ ); } } }
private org.eclipse.jgit.lib.ObjectId parse@@ Group@@ (@@ org.eclipse.jgit.lib.ObjectId for@@ Commit@@ , java.lang.String group@@ ) { try { return org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ group@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.google.gerrit.server.git.@@ Group@@ Collec@@ tor@@ .@@ log.warn@@ ("@@ ac@@ count for commit is not a S@@ H@@ A@@ -@@ 1@@ : {}@@ ", group@@ ); return null@@ ; } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ ); }
@org.junit.Test public void create@@ Group@@ As@@ User@@ Ident@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ di@@ t = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), user@@ Id, user@@ Tip@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ ); }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group update@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ u@@ id); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ , str@@ act@@ Group@@ UUID@@ :@@ get@@ Account@@ Name@@ Email@@ , account@@ Group@@ Name); group@@ Config.@@ commit@@ (@@ create@@ Met@@ a@@ Data@@ Update@@ (user@@ Ident@@ )); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ update@@ d ac@@ count f@@ ai@@ le@@ d@@ ")); }
@org.junit.Test public void add@@ Multi@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group sub@@ group@@ 1 = create@@ Group@@ As@@ User@@ (@@ 2, "@@ test@@ -@@ account@@ -@@ 2@@ "); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group sub@@ group@@ 2 = create@@ Group@@ As@@ User@@ (@@ 3@@ , "@@ test@@ -@@ account@@ -@@ 3@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id@@ 1 = sub@@ group@@ 1@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id@@ 2 = sub@@ group@@ 2@@ .get@@ Group@@ UUID@@ (); add@@ Sub@@ group@@ s(@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ group@@ U@@ u@@ id@@ 1, sub@@ U@@ u@@ id@@ 2@@ )); assert@@ assert@@ Tip@@ Commit@@ (@@ u@@ u@@ id, ((("@@ Update account@@ \n@@ " + "@@ \n@@ ") + (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Add@@ -@@ account@@ Group %s@@ \n@@ ", sub@@ U@@ u@@ id@@ 1@@ ))) + (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Add@@ -@@ account@@ : %s@@ >@@ ", sub@@ U@@ u@@ id@@ 2@@ )@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ Au@@ dit@@ 1 = create@@ Ex@@ p@@ Group@@ Au@@ dit@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ 1, user@@ Id, get@@ Tip@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ Au@@ dit@@ 2 = create@@ Ex@@ p@@ Group@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ 2, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Sub@@ group@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ dit@@ 1, exp@@ dit@@ 2@@ ).@@ in@@ Or@@ der@@ (); }
@org.junit.Test public void create@@ Group@@ As@@ Server@@ Ident@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ (1@@ , "@@ test@@ -@@ account@@ ", server@@ Ident@@ , null@@ ); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ .get@@ Group@@ UUID@@ ()@@ )).@@ hasSize@@ (@@ 0); }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ (@@ int next@@ , java.lang.String group@@ Name, org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent author@@ Ident@@ , com.google.gerrit.reviewdb.client.Account.Id author@@ Id@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation.@@ buil@@ der@@ ().set@@ Group@@ UUID@@ (com.google.gerrit.server.@@ account.@@ Group@@ UUID@@ .@@ ma@@ k@@ e@@ (@@ group@@ Name, server@@ Ident@@ )).@@ set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ group@@ Name@@ )).@@ set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id(@@ next@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = (@@ author@@ Id@@ ent.@@ equals(@@ server@@ Ident@@ )) ? com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Description@@ ("@@ Group@@ s@@ ").@@ buil@@ d(@@ ) : com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Description@@ ("@@ Group@@ s@@ ").@@ set@@ Member@@ Mo@@ d@@ if@@ ic@@ ation@@ (@@ ( me@@ mber@@ s) -@@ > com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ author@@ Id@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ , str@@ act@@ Group@@ Test@@ Group@@ :@@ :@@ get@@ Account@@ Name@@ Email@@ , str@@ act@@ Group@@ :@@ get@@ Group@@ Name); org.eclipse.jgit.revwalk.RevCommit commit = group@@ (@@ create@@ Met@@ a@@ Data@@ Update@@ (@@ author@@ Ident@@ )); assert@@ Create@@ Group@@ (@@ author@@ Ident@@ , commit@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ Throw@@ ((@@ -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ cre@@ ate ac@@ count f@@ ai@@ le@@ d@@ ")); }
private void assert@@ Create@@ Group@@ (@@ org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent author@@ Ident@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) throw@@ s java.lang.Exception { if (@@ author@@ Id@@ ent.@@ equals(@@ server@@ Ident@@ )) { assert@@ Server@@ (com.google.gerrit.server.git.@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (@@ commit@@ ), "@@ Cre@@ ate account@@ "); } else { assert@@ Commit@@ (com.google.gerrit.server.git.@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (@@ commit@@ ), java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cre@@ ate account@@ \n@@ Add@@ : Account %s <@@ %s@@ @@@ %s@@ @@@ %s@@ >@@ ", user@@ Id, com.google.gerrit.server.g@@ roup.@@ Create@@ Group@@ ER@@ S@@ V@@ ER@@ _@@ ID@@ ), get@@ Account@@ Name(@@ user@@ Id@@ ), get@@ Account@@ Email@@ (user@@ Id@@ )); } }
void vali@@ date@@ New@@ Project@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Create@@ Project@@ Arg@@ s arg@@ s) throw@@ s com.google.gerrit.server.@@ validators.@@ Validation@@ Exception@@ ;
@org.junit.Test public void add@@ And@@ Remo@@ ve@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (@@ 2, "@@ test@@ -@@ account@@ -@@ 2@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ group@@ U@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); add@@ Sub@@ group@@ s(@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ group@@ U@@ u@@ id@@ )); assert@@ assert@@ assert@@ Tip@@ (@@ u@@ u@@ id, java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Update account@@ \n@@ Add@@ -@@ account@@ : %s@@ <@@ %s@@ >@@ ", sub@@ group@@ U@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ di@@ t = create@@ Ex@@ p@@ Group@@ Au@@ dit@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Sub@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ dit@@ ); remove@@ Sub@@ s(@@ group@@ u@@ u@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ U@@ u@@ id@@ )); assert@@ Tip@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Update account@@ \n@@ \n@@ account@@ \n@@ Remo@@ ve@@ -@@ account@@ Group <@@ %s@@ >@@ ", sub@@ U@@ u@@ id@@ )); exp@@ id@@ )); exp@@ d@@ it.@@ remo@@ v@@ ed@@ (user@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Sub@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ i@@ ); }
@org.junit.Test public void add@@ Multi@@ Member@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = group@@ .getId@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ dit@@ 1 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ Id, user@@ Id, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 1); com.google.gerrit.reviewdb.client.Account.Id id@@ 1 = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 2); com.google.gerrit.reviewdb.client.Account.Id id@@ 2 = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 00@@ 3@@ 00@@ ); add@@ Member@@ s(@@ u@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ 1, id@@ 2@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ 2 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ Id, id@@ 1, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ dit@@ 3 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ Id, id@@ 2, user@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); assert@@ Tip@@ Commit@@ (@@ u@@ id, ("@@ Update account@@ \n@@ " + (("@@ \n@@ " + "@@ Add@@ : 1@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ @@@ server@@ -@@ id@@ >@@ \n@@ ") + "@@ Add
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ Commit@@ Resource@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Commit@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { if (@@ com.google.gerrit.reviewdb.client.Patch@@ .is@@ M@@ ag@@ ic@@ (id@@ .get@@ ())) { return new com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource@@ (p@@ arent@@ .getProject@@ State@@ (), parent@@ .get@@ Commit@@ (), id@@ .get()); } return com.google.gerrit.server.@@ project.@@ re@@ stapi.@@ File@@ Resource@@ .@@ create@@ (repo@@ Manag@@ er, parent@@ .getProject@@ State@@ (), parent@@ .get@@ Commit@@ (), parent@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input in = new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input@@ (); in.@@ _@@ one@@ Me@@ mb@@ er = id@@ ; try { java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> li@@ s@@ t = put.@@ apply(@@ resource@@ , in@@ ); if ((@@ li@@ s@@ t.@@ size@@ ()) == 1@@ ) { return list@@ .get(@@ 0); } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.@@ ap@@ i@@ .g@@ roup.@@ Member@@ Resource resource@@ , com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) { if (((@@ resource@@ .get@@ ()) != null@@ ) && (!(@@ resource@@ .get@@ Control@@ ().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()@@ )))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User s = ((@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) (@@ resource@@ .get@@ ())); if (@@ user instanceof com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ ((@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) (@@ resource@@ )@@ ).get@@ Account@@ ().get@@ ()) - 1@@ )); } else { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(("@@ N@@ o " + resource@@ )); } } return account@@ s; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return list@@ .get().@@ to@@ Branch@@ Info@@ (rsrc@@ ); }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ Create@@ Group.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Note@@ s group@@ Name@@ Note@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), commit@@ Name); commit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Name@@ ); return group@@ Config@@ .get@@ Notes@@ ().@@ or@@ E@@ l@@ se@@ ); }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) { java.lang.String ref@@ Name = cm@@ d@@ .getRef@@ Name@@ (); if ((@@ cm@@ d@@ .get@@ Type@@ ()) == (@@ Receive@@ Comman@@ d.@@ Type.@@ U@@ P@@ D@@ A@@ TE@@ )) { log@@ De@@ bug@@ ("@@ Updat@@ ing t@@ a@@ g cach@@ e on f@@ ast@@ -@@ for@@ war@@ d of {}@@ ", cm@@ d@@ .getRef@@ Name()); tag@@ Cache.@@ update@@ F@@ ast@@ For@@ war@@ d(@@ project@@ .getName@@ Key@@ (), ref@@ Name, cm@@ d@@ .get@@ O@@ ld@@ Id(), cm@@ d@@ .get@@ New@@ Id()); } if (com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ is@@ Config@@ (cm@@ d@@ )) { log@@ De@@ bug@@ ("@@ Re@@ load@@ ing project in cach@@ e@@ "); try { project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ ); } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ log.warn@@ (("@@ Cannot e@@ vi@@ c@@ t f@@ ro@@ m project cach@@ e@@ , name key@@ : " + (project@@ .getName@@ ()@@ )), e); } com.google.gerrit.server.project.Project@@ State p@@ s = project@@ Cache@@ .get(@@ project@@ .getName@@ Key@@ ()); try { log@@ De@@ bug@@ ("@@ Updat@@ ing project des@@ cription@@ "); repo@@ .set@@ Git@@ web@@ Description@@ (ps@@ .getProject@@ ().get@@ Description@@ ()); } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ log.warn@@ (("@@ can@@ not updat@@ e des@@ crip@@ tion of " + (project@@ .getName@@ ()@@ )), e); } if (@@ all@@ Project@@ s@@ Name.@@ equals(@@ project@@ .getName@@ Key@@ ())) { try { create@@ Group@@ Permission@@ Sy@@ n@@ c@@ er.@@ I@@ f@@ N@@ e@@ ed@@ (); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.@@ Receive@@ Commit@@ s.@@ log.error@@ ("@@ Can@@ '@@ t syn@@ c cre@@ ate ac@@ count per@@ mission@@ s", e); } } }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Repository@@ St@@ at@@ is@@ ti@@ c@@ s apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { org.eclipse.jgit.@@ api.@@ G@@ ar@@ b@@ age@@ Collec@@ t@@ Comman@@ d g@@ c = org.eclipse.jgit.@@ api.@@ G@@ w@@ rap@@ (repo@@ )@@ .g@@ c@@ (); return new com.google.gerrit.server.@@ re@@ stapi.@@ Repository@@ St@@ at@@ is@@ ti@@ c@@ s(@@ g@@ c@@ .get@@ St@@ at@@ is@@ ti@@ c@@ s()); } catch (@@ org.eclipse.jgit.@@ api.@@ errors.@@ Git@@ AP@@ I@@ Exception | org.eclipse.jgit.@@ api.@@ errors.@@ J@@ Git@@ In@@ ternal@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ e.get@@ Message()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (rsrc@@ .getName@@ ()); } }
@org.junit.Test public void add@@ And@@ Remo@@ ve@@ Member@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ dit@@ 1 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), user@@ Id, user@@ Tip@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 00@@ 2); add@@ Member@@ s(@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ dit@@ 2 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), id, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ u@@ id@@ )); assert@@ Tip@@ Commit@@ (@@ u@@ id, "@@ Update account@@ \n@@ Add@@ : Account 1@@ 00@@ <@@ 1@@ 00@@ 00@@ 00@@ 00@@ 00@@ @@@ server@@ -@@ id@@ >@@ "); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ u@@ u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ dit@@ 1, exp@@ Au@@ dit@@ 2@@ ).@@ in@@ Or@@ der@@ (); remove@@ Member@@ s(@@ u@@ u@@ id, com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ )); assert@@ Tip@@ Commit@@ (@@ u@@ u@@ id, "@@ Update account@@ \n@@ Remo@@ ve@@ : Account 1@@ 00@@ 00@@ 00@@ <@@ 1@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ @@@ server@@ -@@ id@@ >@@ "); exp@@ dit@@ 2.@@ remo@@ v@@ ed@@ (user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ dit@@ 1, exp@@ dit@@ 2@@ ).@@ in@@ Or@@ der@@ (); }
static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ From@@ Note@@ Data@@ (@@ byte@@ [] note@@ Data@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ note@@ Data@@ , java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); java.lang.String u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , null@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ UUID@@ _@@ P@@ AR@@ A@@ M@@ ); java.lang.String name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAME@@ , null@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ NA@@ M@@ E_@@ P@@ AR@@ A@@ M@@ )); if (@@ u@@ id == null@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ UU@@ I@@ D for ac@@ count '@@ %s@@ ' m@@ us@@ t b@@ e de@@ fin@@ ed@@ ", name@@ )); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ u@@ u@@ id@@ ), name); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Edit@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Fi@@ x@@ Resource fix@@ Resource@@ , java.lang.@@ Vo@@ id no@@ th@@ ing@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.@@ Revision@@ Resource revision@@ Resource = fix@@ Resource@@ .get@@ Revision@@ Resource@@ (); com.google.gerrit.reviewdb.client.Project.NameKey project = revision@@ Resource@@ .getProject@@ (); com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); com.google.gerrit.reviewdb.client.PatchSet patch@@ Set = revision@@ Resource@@ .get@@ PatchSet@@ (); org.eclipse.jgit.lib.ObjectId patchSet@@ Commit@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ patchSet@@ .get@@ Revision@@ ().get@@ ()); try (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y = git@@ Repository@@ Manager.@@ open@@ Repository(@@ project@@ )) { java.util.List<@@ com.google.gerrit.server.@@ edit.@@ t@@ re@@ e.@@ Tree@@ Mo@@ d@@ if@@ ic@@ ation@@ > t@@ ree@@ Mo@@ d@@ if@@ ic@@ ation@@ s = fix@@ Replace@@ ment@@ In@@ ter@@ p@@ ret@@ er.@@ to@@ Tree@@ Mo@@ d@@ if@@ ic@@ ation@@ s(@@ repo@@ sitor@@ y@@ , project@@ State@@ , patchSet@@ Commit@@ Id, fix@@ Resource@@ .get@@ Fi@@ x@@ Replace@@ ment@@ s()); com.google.gerrit.server.@@ edit.@@ Change@@ E@@ di@@ t change@@ E@@ di@@ t = change@@ Edit@@ Mo@@ d@@ if@@ i@@ er.@@ com@@ bin@@ e@@ With@@ Mo@@ d@@ if@@ i@@ ed@@ PatchSet@@ Tree@@ (repo@@ sitor@@ y@@ , revision@@ Resource@@ .get@@ Notes@@ (), patchSet@@ , t@@ ree@@ Mo@@ d@@ if@@ ic@@ ation@@ s); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (change@@ Edit@@ , false@@ )); } catch (com.google.gerrit.server.project.@@ Invalid@@ Change@@ O@@ per@@ ation@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ e.get@@ Message()); } }
com.google.gerrit.server.@@ api.@@ projects.@@ D@@ ashbo@@ ard@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ api.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, java.lang.String id);
public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Po@@ st@@ Reviewer@@ s.@@ Ad@@ di@@ tion pre@@ pare@@ Ap@@ plic@@ ation@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Add@@ Reviewer@@ Input input@@ , boolean allow@@ Group@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String review@@ er = input.@@ reviewer@@ ; com.google.gerrit.extensions.client.@@ Reviewer@@ State st@@ ate = input.@@ state@@ (); com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g not@@ if@@ y = input.@@ not@@ if@@ y@@ ; com.google.common.collect.List@@ Multimap@@ <@@ com.google.gerrit.extensions.api.changes.@@ Rec@@ ip@@ i@@ ent@@ Type@@ , com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s@@ To@@ No@@ t@@ if@@ y = null@@ ; try { account@@ s@@ To@@ No@@ t@@ if@@ y = not@@ if@@ y@@ Util.@@ res@@ ol@@ ve@@ Account@@ s(@@ input.@@ not@@ if@@ y@@ Detail@@ s); } catch (@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception e) { return f@@ ail@@ (@@ reviewer@@ , e.get@@ Message()); } boolean con@@ fi@@ r@@ me@@ d = input.@@ con@@ fi@@ r@@ m@@ ed@@ (); boolean allow@@ By@@ E@@ mai@@ l = project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .getProject@@ ()).@@ isE@@ n@@ able@@ Reviewer@@ By@@ Email@@ (); com.google.gerrit.server.@@ change.@@ Po@@ st@@ Reviewer@@ s.@@ Ad@@ di@@ tion by@@ Account@@ Id = add@@ By@@ Account@@ Id(@@ reviewer@@ , rsrc@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ , allow@@ Group@@ , allow@@ By@@ Email@@ ); if (@@ by@@ Account@@ Id != null@@ ) { return by@@ Account@@ Id@@ ; } com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Po@@ st@@ Reviewer@@ s.@@ Ad@@ di@@ tion who@@ le@@ Group = add@@ Wh@@ o@@ le@@ Group@@ (@@ reviewer@@ , rsrc@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ , con@@ fi@@ r@@ m@@ ed@@ , allow@@ Group@@ , allow@@ By@@ Email@@ ); if (@@ who@@ le@@ Group != null@@ ) { return who@@ le@@ Group@@ ; } return add@@ By@@ Email@@ (@@ reviewer@@ , rsrc@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ ); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> ori@@ gin@@ al@@ Member@@ s, java.util.@@ Optional@@ <@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id@@ >> updat@@ ed@@ Member@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > ori@@ gin@@ al@@ Sub@@ s, java.util.@@ Optional@@ <@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >> updat@@ ed@@ Sub@@ s) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >> updat@@ ed@@ Sub@@ s@@ can@@ De@@ le@@ te = com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ of@@ (@@ account@@ Cre@@ ate " : "@@ Update account@@ "; java.util.@@ String@@ J@@ o@@ in@@ er foo@@ ter@@ J@@ o@@ in@@ er = new java.util.@@ String@@ J@@ o@@ in@@ er@@ ("@@ \n@@ ", "@@ \n@@ ", "@@ foo@@ ter@@ J@@ o@@ in@@ er.@@ set@@ E@@ mpty@@ Value@@ ("@@ "); get@@ Commit@@ F@@ oo@@ ter@@ For@@ R@@ en@@ ame@@ ()@@ .@@ if@@ P@@ res@@ ent@@ (@@ foo@@ ter@@ J@@ o@@ in@@ :@@ add@@ ); updat@@ ed@@ Member@@ s@@ .@@ if@@ P@@ res@@ ent@@ (@@ ( new@@ Member@@ s) -@@ > get@@ Commit@@ F@@ oo@@ ter@@ s@@ For@@ Member@@ Mo@@ d@@ if@@ ic@@ ation@@ s(@@ ori@@ gin@@ al@@ Member@@ s, new@@ Member@@ s@@ )@@ .@@ for@@ E@@ ach@@ foo@@ ter@@ J@@ o@@ in@@ er@@ :@@ add@@ )); group@@ Sub@@ s@@ .@@ if@@ P@@ res@@ ent@@ (@@ ( new@@ Sub@@ s) -@@ > get@@ Commit@@ F@@ oo@@ ter@@ s@@ For@@ Sub@@ group@@ Mo@@ d@@ if@@ ic@@ ation@@ s(@@ ori@@ gin@@ al@@ Sub@@ s, new@@ Sub@@ s@@ )@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ J@@ o@@ in@@ :@@ add@@ add@@ )); java.lang.String foo@@ ter = foo@@ ter@@ J@@ o@@ in@@ er.@@ toString@@ (); return su@@ mm@@ ary@@ Lin@@ e foo@@ ter@@ ; }
@java.lang.Override protected void run() throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.@@ projects.@@ Head@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.api.@@ projects.@@ Head@@ Input@@ (); input.@@ re@@ f = new@@ Head@@ ; try { set@@ Head@@ .@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (project@@ , user@@ ), input@@ ); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw di@@ e@@ (@@ e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Comment@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ ()@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
private java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > get@@ Ch@@ ild@@ ren@@ For@@ Re@@ parent@@ ing@@ (com.google.gerrit.server.project.@@ Project@@ State parent@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > ch@@ ild@@ Project@@ s = new java.util.ArrayList<@@ >(); final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > ex@@ clu@@ de@@ d = new java.util.Array@@ List(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ .@@ size()); for (com.google.gerrit.server.project.@@ Project@@ State ex@@ clu@@ ded@@ Ch@@ il@@ d : ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ ) { ex@@ clu@@ ded@@ .@@ add(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ .getProject@@ ().get@@ NameKey@@ ()); } final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > au@@ to@@ m@@ ati@@ call@@ y@@ Ex@@ clu@@ de@@ d = new java.util.Array@@ List(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ .@@ size()); if (@@ new@@ Parent@@ Key@@ ) != null@@ ) { au@@ to@@ m@@ ati@@ call@@ y@@ Ex@@ clu@@ ded@@ .@@ add@@ All@@ (get@@ Parent@@ s@@ (@@ new@@ Parent@@ Key@@ )); } for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info ch@@ il@@ d : list@@ Ch@@ ild@@ Project@@ s.@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource@@ (p@@ arent@@ , user@@ ))) { final com.google.gerrit.reviewdb.client.Project.NameKey ch@@ ild@@ Name = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ ch@@ il@@ d.@@ name); if (!(@@ ex@@ clu@@ ded@@ .@@ contains(@@ ch@@ ild@@ Name@@ ))) { if (!(@@ au@@ to@@ m@@ ati@@ call@@ y@@ Ex@@ clu@@ ded@@ .@@ contains(@@ ch@@ ild@@ Name@@ ))) { ch@@ ild@@ Project@@ s.add(@@ ch@@ ild@@ Name); } else { t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ((((@@ ((("@@ Au@@ to@@ m@@ ati@@ c@@ ally ex@@ clu@@ de@@ d '@@ " + ch@@ ild@@ Name) + "@@ ' ") + "@@ f@@ ro@@ m re@@ parent@@ ing b@@ ec@@ au@@ se it is in th@@ e pa@@ ren@@ t ") + "@@ lin@@ e of th@@ e new pa@@ ren@@ t '@@ ") + (@@ new@@ Parent@@ Key@@ )) + "@@ '@@ .@@ ")); } } return ch@@ ild@@ Project@@ s; }
public com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Info for@@ m@@ at(@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a@@ ) { com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Ag@@ reement@@ Info@@ (); info.@@ name = c@@ a@@ .getName@@ (); info.@@ des@@ crip@@ tion = c@@ .get@@ Description@@ (); info.@@ ur@@ l = c@@ a@@ .get@@ Ag@@ reement@@ Url@@ (); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce au@@ to@@ V@@ er@@ if@@ y@@ Group = c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ (); if ((@@ au@@ to@@ V@@ er@@ if@@ y@@ Group != null@@ ) && (@@ self@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = id@@ ent@@ if@@ i@@ ed@@ User@@ Factory.create@@ (@@ self@@ .get@@ ().get@@ Account@@ Id()); try { com.google.gerrit.server.account.@@ Group@@ Control g@@ c = g@@ ener@@ ic@@ Group@@ Control@@ Factory.@@ control@@ For@@ (user@@ , au@@ to@@ V@@ er@@ if@@ y@@ Group@@ .get@@ UUID@@ ()); com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource g@@ roup = new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource@@ (@@ g@@ c@@ ); info.@@ au@@ to@@ V@@ er@@ if@@ y@@ Group = group@@ Json@@ .@@ for@@ m@@ at(@@ group@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.@@ re@@ stapi.@@ Ag@@ reement@@ J@@ son.@@ log.warn@@ ((((@@ ("@@ au@@ to@@ ve@@ r@@ if@@ y ac@@ count \"@@ " + (@@ au@@ to@@ V@@ er@@ if@@ y@@ Group@@ .getName@@ ())) + "@@ \@@ " do@@ es not ex@@ ist@@ , ref@@ eren@@ ce@@ d in C@@ L@@ A \"@@ ") + (c@@ a@@ .getName@@ ())) + "@@ \"@@ ")); } } return info@@ ; }
public static com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource project@@ Default@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) { return new com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource@@ (project@@ State@@ , user@@ , null@@ , null@@ , null@@ , null@@ ); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ R@@ o@@ botComment@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ R@@ o@@ botComment@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ ()@@ .@@ new@@ R@@ o@@ botComment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ resource@@ .get@@ Group@@ ()); }
@org.junit.Test public void create@@ Project@@ With@@ N@@ on@@ Ex@@ ist@@ ing@@ Owner@@ _@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input in = new com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input@@ (); in.@@ name = name@@ (@@ "@@ new@@ Project@@ Name@@ "); in.@@ owner@@ s = java.util.Collections.singleton@@ List@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ -@@ account@@ "); assert@@ Create@@ F@@ ail@@ s(@@ in@@ , com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception@@ .@@ class@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ has@@ -@@ ac@@ l@@ -@@ for@@ ", met@@ a@@ V@@ a@@ r = "@@ G@@ RO@@ U@@ P@@ ", us@@ ag@@ e = "@@ displa@@ y@@ s on@@ l@@ y project@@ s on wh@@ i@@ ch ac@@ ces@@ s ri@@ ght@@ s for this ac@@ count ar@@ di@@ re@@ ct@@ l@@ y as@@ signe@@ d@@ ") public void set@@ Group@@ U@@ u@@ id(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { this@@ .g@@ roup@@ U@@ u@@ id = group@@ U@@ u@@ id@@ ; }
com.google.gerrit.server.@@ api.@@ projects.@@ Tag@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ api.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, java.lang.String ref@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ group@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ Input in = new com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ Add@@ Sub@@ Add@@ group@@ Input@@ (); in@@ .g@@ roup@@ s = com.google.common.collect.Immutable@@ List.@@ of@@ (id@@ ); try { java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> li@@ s@@ t = add@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , in@@ ); if ((@@ li@@ s@@ t.@@ size@@ ()) == 1@@ ) { return list@@ .get(@@ 0); } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ Resource group@@ , com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { return group@@ ; }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Comment@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Comment@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String u@@ id = id@@ .get(); com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = rev@@ .get@@ Notes@@ (); for (@@ com.google.gerrit.reviewdb.client.@@ Comm@@ ent c : comment@@ s@@ Util.@@ publi@@ sh@@ ed@@ By@@ PatchSet@@ (db@@ Provider@@ .get(), rev@@ , notes@@ .get@@ PatchSet@@ ().get@@ Id@@ ())) { if (@@ u@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ id@@ )) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Comment@@ Resource@@ (@@ rev@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public static com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource create@@ (com.google.gerrit.server.git.@@ Git@@ Repository@@ Manag@@ er repo@@ Manag@@ er, com.google.gerrit.server.project.Project@@ State project@@ State@@ , org.eclipse.jgit.lib.ObjectId rev@@ , java.lang.String path@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ State@@ .getName@@ Key@@ ()@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.Rev@@ T@@ re@@ e t@@ re@@ e = rw.@@ parse@@ Tree@@ (@@ rev@@ ); if ((@@ org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k@@ .@@ for@@ Path@@ (repo, path@@ , t@@ ree@@ )) != null@@ ) { return new com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource@@ (project@@ State@@ , rev@@ , path@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (p@@ ath@@ )); }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.sql.@@ SQL@@ Exception { try (@@ org.eclipse.jgit.lib.Repository g@@ it = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = new com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update@@ (com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ IS@@ AB@@ L@@ ED@@ , all@@ User@@ s@@ Name, git@@ )) { m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (@@ server@@ User@@ ); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Commit@@ ter@@ (@@ server@@ User@@ ); m@@ d.@@ set@@ Message@@ (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 6@@ 4@@ .@@ CO@@ M@@ M@@ I@@ T_@@ M@@ S@@ G@@ ); com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); com.google.gerrit.common.data.@@ Access@@ Sec@@ tion group@@ s = config@@ .get@@ Access@@ Section@@ (((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), true@@ ); com.google.gerrit.server.@@ schema.@@ Ac@@ l@@ Util@@ .g@@ ran@@ t(@@ config@@ , group@@ s, Permission@@ .@@ RE@@ AD@@ , false@@ , true@@ , sy@@ st@@ em@@ Group@@ Back@@ end@@ .get@@ Group@@ (com.google.gerrit.server.@@ schema.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ )); config.@@ commit@@ (m@@ d); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ Fai@@ le@@ d to g@@ ran@@ t rea@@ d per@@ mission@@ s on ac@@ count branch@@ es@@ ", e); } }
private com.google.gerrit.server.@@ Current@@ User get@@ D@@ ashbo@@ ard@@ Resource resource@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return d@@ ashbo@@ ard@@ s.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (id@@ )); }
@java.lang.Override public void set@@ Default@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input@@ (); input.@@ id = id@@ ; try { se@@ t.@@ apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (project@@ .getProject@@ State@@ (), project@@ .getUser@@ ()), input@@ ); } catch (@@ java.lang.Exception e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot %s default default d@@ ashbo@@ ard@@ ", ((@@ id@@ ) != null ? "@@ set@@ " : "@@ ")); remove@@ remove@@ com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception(@@ msg@@ , e); } }
private com.google.gerrit.server.@@ Tag@@ Resource resource@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException { try { return tag@@ s.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (ref@@ )); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot lo@@ ad %s is re@@ f %s view@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); in@@ pu@@ t = com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input.@@ init@@ (in@@ put@@ ); final com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = resource@@ .get@@ Control@@ (); if (!(@@ contro@@ l.@@ can@@ Remo@@ ve@@ Member@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception(("@@ Cannot de@@ le@@ te me@@ mber@@ s f@@ ro@@ m ac@@ count " + (@@ int@@ er@@ n@@ al@@ Group@@ .getName@@ ()))); } java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> me@@ mber@@ s@@ To@@ Remo@@ v@@ e = new java.util.Hash@@ Set<@@ >(); for (java.lang.String name@@ Or@@ E@@ mai@@ l : input.@@ me@@ mber@@ s) { com.google.gerrit.reviewdb.client.@@ Account a = account@@ s.@@ parse@@ (@@ name@@ Or@@ Email@@ ).get@@ Account@@ (); me@@ mber@@ s@@ To@@ Remo@@ v@@ e.@@ add(@@ a@@ .getId()); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); try { remove@@ Group@@ Member@@ s(@@ group@@ U@@ u@@ id, me@@ mber@@ s@@ To@@ Remo@@ ve@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group %s not fo@@ und@@ ", group@@ U@@ u@@ id@@ )); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public void owner@@ (java.lang.String owner@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.api.changes.@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count owner@@ ", e); }
@org.junit.Test public void re@@ ject@@ Wh@@ en@@ F@@ e@@ atu@@ re@@ I@@ s@@ Dis@@ able@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ notes@@ M@@ igration.@@ read@@ Changes@@ ()).@@ is@@ True@@ (); com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input con@@ f = new com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input@@ (); con@@ f.@@ enable@@ Reviewer@@ By@@ E@@ mai@@ l = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ F@@ AL@@ S@@ E@@ ; gApi.@@ project@@ s().@@ name@@ (project@@ .get@@ ()).@@ config@@ (@@ con@@ f@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Add@@ Reviewer@@ Result result = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ add@@ Reviewer@@ ("@@ Fo@@ o B@@ a@@ r <@@ foo@@ .@@ b@@ ar@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ .@@ com@@ >@@ "); assert@@ Th@@ at(@@ result.@@ error@@ ).@@ isEqualTo@@ ("@@ Fo@@ o B@@ a@@ r <@@ foo@@ .@@ b@@ ar@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ .@@ com@@ > do@@ es not id@@ ent@@ if@@ y a re@@ gist@@ er@@ ed user or account@@ "); assert@@ Th@@ at(@@ result.@@ reviewer@@ s).@@ isNull@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource@@ , ?@@ > create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return create@@ Default@@ .get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (p@@ arent@@ .getProject@@ State@@ (), parent@@ .getUser@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ; try { in@@ fo = com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collection@@ .@@ new@@ D@@ ashbo@@ ard@@ Info@@ (id@@ .get()); } catch (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ Invalid@@ D@@ ashbo@@ ard@@ Id e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : parent@@ .getProject@@ State@@ ().@@ t@@ ree@@ ()) { try { return parse@@ (ps@@ , parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), info@@ ); } catch (@@ org.eclipse.jgit.errors.@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Object@@ Exception | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { continue@@ ; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource resource@@ ) { return new com.google.gerrit.server.project.@@ Config@@ Info@@ Im@@ pl@@ (@@ server@@ Enable@@ Sig@@ ned@@ Push@@ , resource@@ .getProject@@ State@@ (), resource@@ .getUser@@ (), config@@ , Config@@ Ent@@ ri@@ es@@ , cfg@@ Factory@@ , all@@ Project@@ s, ui@@ Action@@ s); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); try { com.google.gerrit.server.account.@@ Group@@ Control c = control@@ Factory.@@ vali@@ date@@ For@@ (@@ group@@ .get@@ Owner@@ Group@@ UUID@@ ()); return json@@ .@@ for@@ m@@ at@@ (c@@ .get@@ Group@@ ()); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Comment@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Comment@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ ()@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ Group@@ (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) throw@@ s java.io.IOException { java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); pro@@ ble@@ m@@ s.@@ add@@ All(@@ check@@ C@@ le@@ (@@ g@@ , by@@ UUID@@ )); if (((@@ by@@ UUID@@ .get(@@ g@@ .get@@ Owner@@ Group@@ UUID@@ ())) == null@@ ) && ((@@ group@@ Back@@ end@@ .get(@@ g@@ .get@@ Owner@@ Group@@ UUID@@ ())) == null@@ )) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ ac@@ count %s (@@ %@@ s) h@@ a@@ s n@@ on@@ ex@@ ist@@ ent ne@@ r ac@@ count %s", g@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ (), g@@ .get@@ Owner@@ Group@@ UUID@@ ())); } for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : g@@ .get@@ Sub@@ s()) { if (((@@ by@@ UUID@@ .get(@@ sub@@ U@@ u@@ id@@ )) == null@@ ) && ((@@ group@@ Back@@ end@@ .get(@@ sub@@ U@@ u@@ id@@ )) == null@@ )) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ ac@@ count %s (@@ %@@ s) h@@ a@@ s n@@ on@@ ex@@ ist@@ ent sub@@ g@@ roup %s", g@@ .getName@@ (), g@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ (), sub@@ U@@ u@@ id@@ )); } } for (@@ com.google.gerrit.reviewdb.client.Account.Id id : g@@ .get@@ Member@@ s().@@ as@@ List@@ ()) { com.google.gerrit.reviewdb.client.@@ Account account@@ ; try { ac@@ count = account@@ s.get(@@ id); } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException e) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ ac@@ count %s (@@ %@@ s) h@@ a@@ s me@@ mb@@ er %s w@@ it@@ h in@@ vali@@ d config@@ ur@@ ation@@ : %s", g@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ (), id, e.get@@ Message@@ ())); continue@@ ; } if (@@ ac@@ count == null@@ ) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ ac@@ count %s (@@ %@@ s) h@@ a@@ s on@@ ex@@ ist@@ ist@@ ist@@ me@@ mb@@ er %s", g@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ (), id@@ )); } } return pro@@ ble@@ ms@@ ; }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ C@@ le@@ (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group r@@ oo@@ t@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) { java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); java.util.Set<@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > to@@ do = new java.util.@@ Link@@ ed@@ Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > se@@ en = new java.util.Hash@@ Set<@@ >(); to@@ do@@ .@@ add(@@ r@@ oo@@ t@@ ); while (!(@@ to@@ do@@ .@@ isEmpty())) { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group t = do@@ .@@ iter@@ ator@@ ().@@ next@@ (); to@@ do@@ .@@ remove@@ (t@@ ); if (@@ se@@ en@@ .@@ contains(@@ t@@ )) { continue@@ ; } se@@ en@@ .@@ add(@@ t@@ ); for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : t@@ .get@@ Sub@@ s()) { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group g = by@@ UUID@@ .get(@@ sub@@ U@@ u@@ id); if (@@ g == null@@ ) { continue@@ ; } if (@@ java.util.@@ Object@@ s.@@ equals(@@ g@@ , r@@ oo@@ t@@ )) { pro@@ ble@@ m@@ s.add(@@ m@@ s); warn@@ ing@@ ("@@ ac@@ count %s (@@ %@@ s) a c@@ le@@ : %s (@@ %@@ s) p@@ o@@ int@@ s to a@@ s sub@@ group@@ .@@ ", r@@ .getName@@ (), r@@ oo@@ t@@ .get@@ Group@@ UUID@@ (), t@@ .getName@@ (), t@@ .get@@ Group@@ UUID@@ (), t@@ .getName@@ ())); } } } return pro@@ ble@@ ms@@ ; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Tag@@ Resource resource@@ ) { return resource@@ .get@@ Tag@@ Info@@ (); }
private com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ State parent@@ , com.google.gerrit.server.project.Project@@ State current@@ , com.google.gerrit.server.@@ Current@@ User user@@ , com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Object@@ Exception, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception { java.lang.String re@@ f = com.google.gerrit.server.@@ project.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ n@@ or@@ ma@@ li@@ ze@@ D@@ ashbo@@ ard@@ Ref@@ (info.@@ ref@@ ); try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (p@@ arent@@ .getName@@ Key@@ ()).@@ ref@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (info.@@ id); } if (!(@@ org.eclipse.jgit.lib.@@ Repositor@@ y.@@ is@@ Valid@@ Ref@@ Name(@@ ref@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (info.@@ id); } } try (@@ org.eclipse.jgit.lib.Repository g@@ it = git@@ Manager.@@ open@@ Repository(@@ parent@@ .getName@@ Key@@ ())) { org.eclipse.jgit.lib.ObjectId ob@@ j@@ Id = git.@@ res@@ ol@@ ve@@ (((@@ re@@ f + "@@ :@@ ") + (info.@@ path@@ ))); if (@@ ob@@ j@@ Id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (info.@@ id); } org.eclipse.jgit.lib.@@ B@@ lob@@ B@@ as@@ ed@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ B@@ lob@@ B@@ as@@ ed@@ Config@@ (@@ null@@ , git@@ , ob@@ j@@ Id); return new com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource@@ (c@@ urrent@@ , user@@ , ref@@ , info.@@ path@@ , false@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (info.@@ id); } }
com.google.gerrit.server.@@ api.@@ projects.@@ Commit@@ Api@@ Imp@@ l create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Commit@@ Resource r@@ );
@org.junit.Test public void id@@ In@@ Config@@ M@@ u@@ st@@ Be@@ De@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); expected@@ Excepti@@ on.@@ expec@@ t(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Z@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ Null@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ db.@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ null@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ .@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Ow@@ ne@@ r UU@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Null@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ null@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Name of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Can@@ not@@ Be@@ Updated@@ To@@ E@@ mpty@@ String@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ \@@ ti@@ d = 4@@ 2@@ \n@@ \@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ "@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Name of th@@ e ac@@ count user@@ s@@ -@@ X@@ Z@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Can@@ not@@ Be@@ Updated@@ To@@ E@@ mpty@@ String@@ () throw@@ s java.lang.Exception { java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ ti@@ d = 4@@ 2@@ \n@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ UUID@@ "@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Ow@@ ne@@ r UU@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void id@@ In@@ Config@@ M@@ u@@ st@@ Not@@ Be@@ N@@ e@@ g@@ ative@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ ti@@ d = -@@ 5@@ \n@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); expected@@ Excepti@@ on.@@ expec@@ t(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ -@@ Z@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ In@@ Config@@ M@@ u@@ st@@ Be@@ De@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ ti@@ d = 4@@ 2@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); }
@org.junit.Test public void name@@ In@@ Config@@ Ma@@ y@@ Be@@ Un@@ de@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ ti@@ d = 4@@ 2@@ \n@@ \@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); assert@@ Th@@ at(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ Name@@ ()).@@ isEmpty@@ (); }
@org.junit.Test public void name@@ Can@@ not@@ Be@@ Updated@@ To@@ Null@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ \@@ ti@@ d = 4@@ 2@@ \n@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = db.@@ In@@ ternal@@ Group@@ Group@@ Group@@ Group@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ null@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Name of th@@ e ac@@ count user@@ s@@ -@@ X@@ -@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ "@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Name of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
private void po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, java.lang.String file@@ Content@@ ) throw@@ s java.lang.Exception { test@@ Repositor@@ y.@@ branch@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ u@@ id@@ )).@@ commit@@ ().@@ message@@ ("@@ P@@ ul@@ ate config@@ ").@@ add(@@ Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E@@ , file@@ Content@@ ).@@ create@@ (); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ all@@ User@@ s.@@ equals(@@ re@@ ce@@ ive@@ Ev@@ ent.@@ project@@ .getName@@ Key@@ ()))) { return java.util.Collections.@@ empty@@ List(); } if (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ )) { return java.util.Collections.@@ empty@@ List(); } if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Group@@ (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ())) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ ac@@ count updat@@ e not allow@@ ed@@ "); } return java.util.Collections.@@ empty@@ List(); }
private static com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Po@@ st@@ Review@@ .@@ Comment@@ Set@@ E@@ n@@ try create@@ (java.lang.String file@@ name, int patchSet@@ Id, java.lang.@@ Integ@@ er line@@ , com.google.gerrit.extensions.client.@@ Si@@ de side@@ , com.google.common.@@ has@@ h@@ .@@ Hash@@ Co@@ de message@@ , com.google.gerrit.reviewdb.client.@@ Comm@@ ent.@@ R@@ ang@@ e r@@ ange@@ ) { return new com.google.gerrit.server.change.@@ Au@@ to@@ Value@@ _@@ Po@@ st@@ Review@@ _@@ Comment@@ Set@@ E@@ n@@ try@@ (@@ file@@ name, patchSet@@ Id, line@@ , side@@ , message@@ , r@@ ange@@ ); }
public void dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ actor@@ , remo@@ v@@ ed@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m ac@@ count event@@ ", e); } } }
public void dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ actor@@ , remo@@ v@@ ed@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m ac@@ count event@@ ", e); } } }
public void dis@@ patch@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g ad@@ d account@@ s to ac@@ count event@@ ", e); } }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.Change@@ Resource rsrc@@ ) { return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ rsrc@@ .getChange@@ ().get@@ To@@ pic@@ ()); }
private void load@@ Plugin@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ ) { plugin@@ Config@@ s = new java.util.Hash@@ Map@@ (); for (java.lang.String p@@ lu@@ gin : r@@ c@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ )) { org.eclipse.jgit.lib.@@ Config plugin@@ Config = new org.eclipse.jgit.lib.@@ Config@@ (); plugin@@ Config@@ s.@@ put(@@ plugin@@ , plugin@@ Config@@ ); for (java.lang.String name : r@@ c@@ .get@@ Nam@@ es@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ )) { java.lang.String valu@@ e = r@@ c@@ .get@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name); java.lang.String group@@ Name = com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ .@@ ext@@ r@@ act@@ Group@@ Name(@@ valu@@ e); if (@@ group@@ Name != null@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ group@@ Name); if (re@@ f == null@@ ) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((("@@ ac@@ count \"@@ " + group@@ Name) + "@@ \@@ " in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAME@@ )@@ ))); } r@@ c.@@ set@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, valu@@ e); } } plugin@@ Config.@@ set@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, java.util.Array@@ s.@@ as@@ List@@ (r@@ c@@ .get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name@@ ))); } }
private void load@@ Permission@@ Rule@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String va@@ r@@ Name, java.util.Map<java.lang.String, com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ s@@ By@@ Name, com.google.gerrit.common.data.@@ Per@@ mis@@ sion per@@ m@@ , boolean use@@ R@@ ange@@ ) { for (java.lang.String rule@@ Strin@@ g : r@@ c@@ .get@@ String@@ List@@ (s@@ ection@@ , sub@@ s@@ ection@@ , va@@ r@@ Name@@ )) { com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e rule@@ ; try { r@@ ul@@ e = com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ from@@ String@@ (r@@ ule@@ String@@ , use@@ R@@ ange@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception not@@ Rule@@ ) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((((@@ (("@@ In@@ vali@@ d r@@ ul@@ e in " + s@@ ection@@ ) + (@@ sub@@ s@@ ec@@ tion != null ? "@@ .@@ " + sub@@ s@@ ec@@ tion : "@@ ")) + "@@ .@@ ") + va@@ r@@ Name) + "@@ : ") + (@@ not@@ Rule@@ .get@@ Message@@ ()@@ )@@ ))); continue@@ ; } com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ rule@@ .get@@ Group@@ ().get@@ Name()); if (re@@ f == null@@ ) { re@@ f = rule@@ .get@@ Group@@ (); group@@ s@@ By@@ Name.@@ put(@@ ref@@ .getName@@ (), ref@@ ); error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((("@@ ac@@ count \"@@ " + (ref@@ .getName@@ ())) + "@@ \@@ " not in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAME@@ )@@ ))); } rule@@ .set@@ Group@@ (ref@@ ); per@@ m.@@ add(@@ rule@@ ); } }
private void save@@ Plugin@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > k@@ e@@ e@@ e@@ p@@ Group@@ s) { java.util.List<java.lang.String> ex@@ ist@@ ing = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ (r@@ c@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ )); for (java.lang.String name : ex@@ ist@@ ing@@ ) { r@@ c.@@ un@@ set@@ Section@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , name); } for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, org.eclipse.jgit.lib.@@ Config@@ > e : plugin@@ Config@@ s.@@ en@@ try@@ Set@@ ()) { java.lang.String p@@ lu@@ gin = e.get@@ Key@@ (); org.eclipse.jgit.lib.@@ Config plugin@@ Config = e.get@@ Value@@ (); for (java.lang.String name : plugin@@ Config@@ .get@@ Nam@@ es@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ )) { java.lang.String valu@@ e = plugin@@ Config@@ .get@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name); group@@ Name = com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ .@@ ext@@ r@@ act@@ Group@@ Name(@@ valu@@ e); if (@@ group@@ Name != null@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ group@@ Name); if ((@@ re@@ f != null@@ ) && ((@@ ref@@ .get@@ UUID@@ ()) != null@@ )) { k@@ e@@ p@@ Group@@ s.add(@@ ref@@ .get@@ UUID@@ ()); plugin@@ Config.@@ set@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, ("@@ ac@@ count " + (ref@@ .getName@@ ()))); } } r@@ c.@@ set@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, java.util.Array@@ s.@@ as@@ List(@@ plugin@@ Config@@ .get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name@@ ))); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Member@@ Resource resource@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User s = resource@@ .get@@ Member@@ ().get@@ Account@@ Id(); if ((@@ in@@ pu@@ t == null@@ ) || (!(@@ resource@@ .get@@ Member@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t p@@ atch se@@ t "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User wh@@ o = resource@@ .get@@ Member@@ ().get@@ Account@@ Id(); return delete@@ .get().@@ apply(@@ resource@@ , in@@ ); }
public com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { return check@@ Not@@ Null@@ (@@ u@@ u@@ id@@ s.get(@@ u@@ id@@ ), "@@ ac@@ count %s not fo@@ und@@ ", u@@ u@@ id@@ .get()); }
public static com.google.gerrit.server.git.@@ Group@@ Lis@@ t parse@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text@@ , com.google.gerrit.server.git.@@ Validation@@ Error@@ .@@ S@@ in@@ k error@@ s) throw@@ s java.io.IOException { java.util.List<@@ com.google.gerrit.server.git.@@ Row@@ > row@@ s = com.google.gerrit.server.git.@@ Group@@ List.@@ parse@@ (t@@ ext@@ , com.google.gerrit.server.git.@@ Group@@ List.@@ F@@ IL@@ E_@@ NAME@@ , com.google.gerrit.server.git.@@ T@@ R@@ I@@ M@@ , com.google.gerrit.server.git.@@ T@@ R@@ I@@ M@@ , error@@ s); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ s@@ By@@ UU@@ I@@ D = new java.util.Hash@@ Map@@ (@@ row@@ s.@@ size()); for (com.google.gerrit.server.git.@@ R@@ o@@ w : row@@ s) { if ((@@ row@@ .@@ le@@ f@@ t@@ ) == null@@ ) { com.google.gerrit.server.git.@@ Group@@ List.@@ log.warn@@ (@@ "@@ null fi@@ el@@ d in ac@@ count li@@ s@@ t for {}@@ :@@ \n@@ {}@@ ", project, text@@ ); continue@@ ; } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ row@@ .@@ le@@ f@@ t@@ ); java.lang.String name = row@@ .@@ ri@@ ght@@ ; com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ u@@ u@@ u@@ id, name); group@@ s@@ By@@ UUID@@ .@@ put(@@ u@@ u@@ id, ref@@ ); } return new com.google.gerrit.server.git.@@ Group@@ List(@@ group@@ s@@ By@@ UUID@@ ); }
private static java.lang.String get@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Name@@ (java.lang.String group@@ Name, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sy@@ st@@ em@@ Group@@ U@@ u@@ id@@ ) { return java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ Th@@ e configure@@ d name '@@ %s@@ ' for sy@@ ste@@ m ac@@ count '@@ %s@@ ' is b@@ ig@@ u@@ ou@@ s@@ " + ((@@ " w@@ it@@ h th@@ e name '@@ %s@@ ' of ex@@ ist@@ ing ac@@ count '@@ %s@@ '@@ .@@ " + " P@@ le@@ ase remove@@ /@@ change th@@ e valu@@ e for group@@ s.@@ %@@ s.@@ name in@@ ") + " g@@ errit.@@ config.@@ "@@ )), group@@ Name, sy@@ st@@ em@@ Group@@ U@@ u@@ id@@ .get(), group@@ Name, group@@ U@@ u@@ id@@ .get()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ group@@ .get@@ Description@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gwtorm.server.OrmException { if (account@@ Patch@@ Review@@ Store@@ .get().@@ mar@@ k@@ Review@@ ed@@ (@@ resource@@ .get@@ Patch@@ Key@@ ().get@@ Parent@@ Key@@ (), resource@@ .getAccount@@ Id(), resource@@ .get@@ Patch@@ Key@@ ().get@@ File@@ Name@@ ())) { return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ File@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gwtorm.server.OrmException { account@@ Patch@@ Review@@ Store@@ .get().@@ c@@ le@@ ar@@ Review@@ ed@@ (@@ resource@@ .get@@ Patch@@ Key@@ ().get@@ Parent@@ Key@@ (), resource@@ .getAccount@@ Id(), resource@@ .get@@ Patch@@ Key@@ ().get@@ File@@ Name()); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, java.io.IOException { if (!(@@ rsrc@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to in@@ de@@ x account@@ "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = rsrc@@ .get@@ Group@@ ().get@@ UUID@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ In@@ ternal@@ Group@@ ())) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Ex@@ tern@@ al No@@ t Al@@ low@@ ed@@ : %s", group@@ U@@ u@@ id@@ .get@@ ())); } java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > g@@ roup = group@@ Cache@@ .get(@@ group@@ U@@ u@@ id); if (@@ group@@ .is@@ P@@ res@@ ent@@ ()) { group@@ Cache.@@ e@@ vi@@ ct@@ (@@ group@@ .get@@ ().get@@ Group@@ UUID@@ (), group@@ .get@@ ().get@@ Id(), group@@ .get@@ ().get@@ NameKey@@ ()); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
public static void assert@@ Group@@ s(@@ java.lang.I@@ terable@@ <java.lang.String> expected@@ , java.util.@@ Set@@ <java.lang.String> act@@ u@@ al@@ ) { for (java.lang.String g : expected@@ ) { assert@@ Message@@ (("@@ mis@@ s@@ ing ac@@ count " + g@@ )).@@ th@@ at(@@ act@@ u@@ al@@ .@@ remove@@ (@@ g@@ )).@@ is@@ True@@ (); } assert@@ Message@@ (("@@ u@@ ne@@ x@@ p@@ ected group@@ s@@ : " + act@@ u@@ al@@ )).@@ th@@ at(@@ act@@ u@@ al@@ ).@@ isEmpty@@ (); }
public com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ Project@@ Access@@ Info apply(@@ com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ name@@ Key@@ .get()); } return appl@@ y@@ (@@ new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (@@ state@@ , user@@ .get@@ ())); }
private com.google.gerrit.extensions.common.@@ Group@@ Info load@@ Group@@ (@@ java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.extensions.common.@@ Group@@ Info> vi@@ sible@@ Group@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = vi@@ sible@@ Group@@ s.get(@@ id); if (@@ g@@ roup == null@@ ) { try { com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = group@@ Control@@ Factory.@@ control@@ For@@ (id@@ ); g@@ roup = com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Ac@@ ces@@ s.@@ IN@@ V@@ IS@@ I@@ B@@ L@@ E_@@ S@@ E@@ N@@ T@@ IN@@ E@@ L@@ ; if (@@ contro@@ l.@@ is@@ Visible@@ ()) { g@@ roup = group@@ Json@@ .@@ for@@ m@@ at(@@ control@@ .get@@ Group@@ ()); group@@ .@@ id = null@@ ; } } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.google.gerrit.server.@@ project.@@ Get@@ Ac@@ ces@@ s.@@ LO@@ G@@ .@@ warn@@ (("@@ NoSuch@@ Group@@ Exception@@ ; ig@@ no@@ rin@@ g ac@@ count " + id@@ ), e); g@@ roup = com.google.gerrit.server.@@ re@@ stapi.@@ Get@@ Ac@@ ces@@ s.@@ IN@@ V@@ IS@@ I@@ B@@ L@@ E_@@ S@@ E@@ N@@ T@@ IN@@ E@@ ; } vi@@ sible@@ Group@@ s.@@ put@@ (id@@ , group@@ ); } return group@@ ; }
private java.util.Collection<@@ com.google.gerrit.server.project.Project@@ State@@ > t@@ ree@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , com.google.gerrit.server.project.Project@@ State@@ > t@@ re@@ e = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ >(); for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : rsrc@@ .getProject@@ State@@ ().@@ t@@ ree@@ ()) { t@@ re@@ e.@@ put(@@ ps@@ .getName@@ Key@@ (), ps@@ ); } t@@ re@@ e.@@ key@@ Set@@ ().@@ ret@@ ain@@ All(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ filter@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ , t@@ re@@ e.@@ key@@ Set@@ ())); return t@@ re@@ e.@@ values@@ (); }
@java.lang.Override public java.util.List<@@ ?@@ > apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { java.lang.String project = rsrc@@ .getName@@ (); if (!@@ (in@@ herit@@ ed@@ )) { return s@@ can@@ (rsrc@@ .getProject@@ State@@ (), project, true@@ ); } java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info@@ >> al@@ l = new java.util.ArrayList<@@ >(); boolean set@@ De@@ fa@@ ult = true@@ ; for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : t@@ ree@@ (rsrc@@ )) { java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> li@@ s@@ t = s@@ can@@ (ps@@ , project, set@@ Default@@ ); for (@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info d : list@@ ) { if (((@@ d.@@ is@@ Default@@ ) != null@@ ) && (java.lang.@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ .equals(@@ is@@ Default@@ ))) { set@@ De@@ fa@@ ult = false@@ ; } } if (!(@@ li@@ s@@ t.@@ isEmpty())) { al@@ l.@@ add(@@ list@@ ); } } return all@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.@@ ap@@ i@@ .g@@ roup@@ s.@@ Owner@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ resource@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ No@@ t ac@@ count owner@@ "); } if ((@@ in@@ pu@@ t == null@@ ) || (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input.@@ owner@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ ow@@ ne@@ r is requ@@ i@@ red@@ "); } com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c ow@@ ne@@ r = group@@ s@@ Collec@@ tion.@@ parse@@ (in@@ put.@@ owner@@ ); if (!@@ (@@ int@@ er@@ n@@ al@@ Group@@ .get@@ Owner@@ Group@@ UUID@@ ().equals(@@ owner@@ .get@@ Group@@ UUID@@ ()))) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ Group@@ Update.@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ owner@@ .get@@ Group@@ UUID@@ ()).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ Provider@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id, group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group %s not fo@@ und@@ ", group@@ U@@ u@@ id@@ )); } return json@@ .@@ for@@ m@@ at(@@ owner@@ ); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ db.@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ "@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ .@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Ow@@ ne@@ r UU@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ Y@@ X@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@java.lang.Override public void on@@ Change@@ Merged@@ (com.google.gerrit.server.@@ event) { if ((!@@ (@@ all@@ Project@@ s.get@@ ().equals(@@ event@@ .getChange@@ ().@@ project@@ ))) || (!(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ event@@ .getChange@@ ().@@ branch@@ )))) { return@@ ; } try { sync@@ I@@ f@@ N@@ e@@ ed@@ (); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.@@ Create@@ Group@@ Sy@@ n@@ c@@ er.@@ log.error@@ ("@@ Can@@ '@@ t syn@@ cre@@ ate ac@@ count per@@ mission@@ s", e); } }
@org.junit.Test public void name@@ In@@ Config@@ Ma@@ y@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name@@ =@@ \n@@ \@@ ti@@ d = 4@@ 2@@ \n@@ to@@ w@@ ner@@ Group@@ ner@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); assert@@ Th@@ at(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ Name@@ ()).@@ isEmpty@@ (); }
protected static java.util.List<@@ com.google.gerrit.@@ index.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> pre@@ di@@ c@@ at@@ es@@ (com.google.gerrit.server.project.@@ Project@@ Cach@@ e project@@ Cache@@ , com.google.inject.@@ Provider@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ List@@ Ch@@ ild@@ Project@@ s@@ > list@@ Ch@@ ild@@ Project@@ s, com.google.inject.@@ Provider@@ <@@ com.google.gerrit.server.@@ Current@@ User@@ > self@@ , java.lang.String valu@@ e) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ value@@ )); if (project@@ State == null@@ ) { return java.util.Collections.@@ empty@@ List(); } java.util.List<@@ com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> r = new java.util.ArrayList<@@ >(); r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (project@@ State@@ .getName@@ ())); try { com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource pro@@ j = new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (project@@ State@@ , self@@ .get()); com.google.gerrit.server.@@ re@@ stapi.@@ List@@ Ch@@ ild@@ Project@@ s ch@@ ild@@ re@@ n = list@@ Ch@@ ild@@ Project@@ s.get@@ (); ch@@ ild@@ ren@@ .set@@ Rec@@ ur@@ si@@ ve@@ (@@ true@@ ); for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info p : ch@@ ild@@ ren@@ .@@ apply(@@ pro@@ j@@ )) { r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (@@ p.@@ name@@ )); } } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predi@@ c@@ ate.@@ log.warn@@ ("@@ can@@ not ch@@ ec@@ k per@@ mission@@ s to exp@@ an@@ d project@@ s", e); } return r@@ ; }
public com.google.gerrit.extensions.common.@@ Group@@ Info for@@ m@@ at@@ (com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return create@@ Group@@ Info@@ (rsrc@@ .get@@ Group@@ (), rsrc@@ :@@ get@@ Control@@ ); }
private static void check@@ S@@ ame@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al group@@ , com.google.gerrit.server.account.@@ Group@@ Control group@@ Control@@ ) { check@@ State@@ (@@ group@@ Control@@ .get@@ Group@@ ()), "@@ S@@ p@@ e@@ c@@ if@@ i@@ ed ac@@ count an@@ d group@@ Control do not match@@ "); }
@java.lang.Override public void set@@ Review@@ ed@@ (java.lang.String path@@ , boolean review@@ ed@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource@@ , com.google.gerrit.extensions.common.@@ Input@@ > view@@ ; if (@@ review@@ ed@@ ) { vi@@ e@@ w = put@@ Review@@ ed@@ ; } else { vi@@ e@@ w = delete@@ Review@@ ed@@ ; } view@@ .@@ apply(@@ file@@ s.@@ parse@@ (@@ revision@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (p@@ ath@@ )), new com.google.gerrit.extensions.common.@@ Input@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot updat@@ e review@@ ed f@@ l@@ ag@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Commit@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ Commit@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { org.eclipse.jgit.lib.ObjectId o@@ bject@@ Id@@ ; try { o@@ bject@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (id@@ .get()); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ parent@@ .getName@@ Key@@ ()@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.RevCommit commit = rw.@@ parse@@ Commit@@ (@@ o@@ bject@@ Id); rw.@@ parse@@ Bo@@ d@@ y(@@ commit@@ ); if (!@@ (c@@ an@@ Read@@ (p@@ arent@@ .getProject@@ State@@ (), repo@@ , commit@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } for (@@ int i = 0; i < (@@ commit@@ .getParent@@ Count@@ ()); i@@ ++@@ ) { rw.@@ parse@@ Bo@@ d@@ y(@@ rw.@@ parse@@ Commit@@ (@@ commit@@ .getParent@@ (@@ i@@ ))); } return new com.google.gerrit.server.@@ re@@ stapi.@@ Commit@@ Resource@@ (p@@ arent@@ , commit@@ ); } catch (@@ org.eclipse.jgit.errors.@@ M@@ is@@ s@@ ing@@ Object@@ Exception | org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
public boolean can@@ Read@@ (com.google.gerrit.server.project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = state@@ .getName@@ Key@@ (); try { java.util.List<@@ com.google.gerrit.server.query.change.ChangeData> change@@ s = query@@ Provider@@ .get().@@ en@@ for@@ ce@@ Vi@@ si@@ b@@ ili@@ ty@@ (@@ true@@ ).@@ by@@ Project@@ (project@@ , commit@@ ); if (!(@@ changes.@@ isEmpty())) { return true@@ ; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Commit@@ s@@ Collec@@ tion.@@ log.error@@ ((@@ (("@@ Cannot l@@ oo@@ k up change for change " + (@@ comm@@ it.@@ name@@ ())) + " in ") + project@@ ), e); } return is@@ Re@@ ach@@ able@@ From@@ (@@ state@@ , repo@@ , commit@@ , repo@@ .get@@ All@@ Ref@@ s()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { if (!(@@ rev@@ .@@ has@@ N@@ ext@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ rev@@ n@@ o su@@ ch not per@@ mit@@ ted@@ "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User s = ((@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) (@@ self@@ .get@@ ())); java.lang.String u@@ id = id@@ .get(); for (@@ com.google.gerrit.reviewdb.client.@@ Comm@@ ent c : comment@@ s@@ Util.@@ draft@@ By@@ PatchSet@@ (db@@ Provider@@ .get(), rev@@ .get@@ PatchSet@@ ().get@@ Id(), rev@@ .getAccount@@ Id(), rev@@ Notes@@ ())) { if (@@ u@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ u@@ u@@ id@@ )) { return new com.google.gerrit.server.@@ re@@ stapi.@@ Draft@@ Comment@@ Resource@@ (@@ rev@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource@@ > list@@ () { return list@@ .get(); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Create@@ B@@ ran@@ ch create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g name@@ ) { return create@@ Branch@@ Factory.create@@ (@@ name@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ >> view@@ s() { return view@@ s; }
@@@ com.google.gerrit.common.@@ Null@@ able private com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parse@@ (java.lang.String id, boolean Access@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (id@@ .@@ end@@ sWith@@ (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ )) { id = id@@ .@@ substring@@ (@@ 0, ((@@ id@@ .@@ length@@ ()) - (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ .@@ length@@ ()))); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (id@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { return null@@ ; } if (@@ check@@ Access@@ ) { try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return null@@ ; } } return new com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource@@ (@@ state@@ , user@@ .get()); }
public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parse@@ (java.lang.String id, boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ update.@@ Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ , check@@ Access@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ P@@ roject No@@ t Fo@@ und@@ : %s", id@@ )); } return rsrc@@ ; }
public com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource parse@@ (java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return parse@@ (id@@ , true@@ ); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ .get(), true@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return rsrc@@ ; }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getChange@@ ().get@@ Project@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Delete@@ Draft@@ Comm@@ ent.@@ O@@ p o@@ p = new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Delete@@ Draft@@ Comm@@ ent.@@ Op@@ (rsrc@@ .get@@ Comment@@ ().@@ key@@ ); bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ ); bu@@ .@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
private static com.google.gerrit.reviewdb.client.Account@@ Group get@@ Ex@@ ist@@ ing@@ Group@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > account@@ Group@@ s = db.account@@ Group@@ s().@@ by@@ UUID@@ (@@ group@@ U@@ u@@ id@@ ).to@@ List(); if ((@@ account@@ Group@@ s.@@ size@@ ()) == 1@@ ) { return com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ Group@@ s); } else if (account@@ Group@@ s.@@ isEmpty()) { throw new com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception(@@ group@@ U@@ u@@ id); } else { throw new com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception(("@@ D@@ up@@ li@@ c@@ ate ac@@ count I@@ D " + group@@ U@@ u@@ id@@ )); } }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Can@@ not@@ Be@@ Updated@@ To@@ Null@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id, "@@ [@@ account@@ ]@@ \n@@ \@@ t@@ name = user@@ s@@ \n@@ \@@ ti@@ d = 4@@ 2@@ \n@@ \@@ to@@ w@@ ner@@ Group@@ U@@ u@@ id = owner@@ s@@ \n@@ "); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ null@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Ow@@ ne@@ r UU@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource parse@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent@@ .getName@@ Key@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ f@@ ull@@ Name@@ (id@@ .get@@ ())); if (re@@ f == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (project@@ ).@@ ref@@ ((@@ ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ () ? ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : ref@@ .getName@@ ()@@ )).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); return new com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Branch@@ Resource@@ (p@@ arent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), ref@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception not@@ Al@@ low@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Draft@@ Comment@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (re@@ cur@@ si@@ ve@@ ) { return get@@ T@@ ran@@ si@@ tive@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return get@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
public com.google.gerrit.server.@@ re@@ stapi.@@ Resource get@@ Parent@@ () { return parent@@ ; }
@org.junit.Test public void id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ N@@ e@@ g@@ ative@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup.@@ db.@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ ((@@ -@@ 2@@ )@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { ex@@ cepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Z@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Resource group@@ ) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Note@@ s group@@ Name@@ Note@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), group@@ Name); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ :@@ :@@ get@@ Account@@ Name@@ Email@@ , this@@ :@@ get@@ Group@@ Name); commit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Config@@ , group@@ Name@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Get@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Create@@ d ac@@ count w@@ as@@ n@@ '@@ t au@@ to@@ m@@ ati@@ c@@ ally load@@ ed@@ ")); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource resource@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ group@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); in@@ pu@@ t = com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ group@@ s.@@ Input.@@ init@@ (in@@ put@@ ); final com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = resource@@ .get@@ Control@@ (); if (!(@@ contro@@ l.@@ can@@ Remo@@ ve@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot de@@ le@@ te group@@ s f@@ ro@@ m ac@@ count %s", int@@ er@@ n@@ al@@ Group@@ .getName@@ ())); } java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ s@@ To@@ Remo@@ v@@ e = new java.util.Hash@@ Set<@@ >(); for (java.lang.String group@@ Id@@ ent@@ if@@ i@@ er : input@@ .g@@ roup@@ s) { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c sub@@ g@@ roup = group@@ s@@ Collec@@ tion.@@ parse@@ (@@ group@@ Id@@ ent@@ if@@ i@@ er@@ ); sub@@ s@@ To@@ Remo@@ v@@ e.@@ add(@@ group@@ .get@@ Group@@ UUID@@ ()); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); try { remove@@ Sub@@ group@@ s(@@ group@@ U@@ u@@ id, group@@ s@@ To@@ Remo@@ ve@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group %s not fo@@ und@@ ", group@@ U@@ u@@ id@@ )); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Sub@@ Resource group@@ , com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Add@@ Sub@@ Input group@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User s = group@@ s.@@ parse@@ (@@ resource@@ .get@@ Member@@ ().get@@ ()); return delete@@ .get().@@ apply(@@ resource@@ , in@@ ); }
com.google.gerrit.server.@@ re@@ stapi.@@ Delete@@ Re@@ f create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource r@@ );
private void post@@ De@@ le@@ tion@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource project, org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d) { ref@@ eren@@ ce@@ Updated@@ .@@ fi@@ re@@ (project@@ .getName@@ Key@@ (), cm@@ d, id@@ ent@@ if@@ i@@ ed@@ User@@ .get@@ ().get@@ Account@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (rsrc@@ .getName@@ Key@@ ()).@@ check@@ (@@ Project@@ Permission@@ .@@ W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G@@ ); return apply(@@ rsrc@@ .getProject@@ State@@ (), input@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Vo@@ te@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Delete@@ Vo@@ te@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception, java.io.IOException { if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.extensions.api.changes.@@ Delete@@ Vo@@ te@@ Input@@ (); } if ((@@ (in@@ put.@@ label@@ ) != null@@ ) && (!(@@ rsrc@@ .get@@ Label@@ ().equals(@@ input.@@ label@@ )))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ l@@ abe@@ l m@@ us@@ t m@@ atch URL@@ "); } if ((@@ input.@@ not@@ if@@ y@@ ) == null@@ ) { input.@@ not@@ if@@ y = com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g.@@ AL@@ L@@ ; } com.google.gerrit.server.change.@@ Reviewer@@ Resource r = rsrc@@ .get@@ Reviewer@@ (); com.google.gerrit.reviewdb.client.Change change = r@@ .getChange@@ (); if ((@@ (r@@ .get@@ Revision@@ Resource@@ ()) != null@@ ) && (!(@@ r@@ .get@@ Revision@@ Resource@@ ().@@ is@@ Current@@ ()))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ Cannot de@@ le@@ te vo@@ te on n@@ on@@ -@@ cur@@ ren@@ t p@@ atch set@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), change@@ .getProject@@ (), r@@ .getChange@@ Resource@@ ().get@@ User@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (change@@ .getId@@ (), new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Delete@@ Vo@@ t@@ e.@@ Op@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (r@@ .getChange@@ ().get@@ Project@@ ()), r@@ .get@@ Reviewer@@ User@@ ().get@@ Account@@ (), rsrc@@ .get@@ Label@@ (), input@@ )); bu@@ .@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (re@@ cur@@ si@@ ve@@ ) { return re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); } return re@@ di@@ re@@ ct@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); }
@java.lang.Override public void run() { java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > name@@ s = (@@ try@@ ing@@ Ag@@ ain@@ ) ? r@@ e@@ try@@ O@@ n : project@@ Cache.@@ all@@ (); for (@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name : nam@@ es) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = project@@ Cache@@ .get(@@ project@@ Name@@ ).get@@ Config@@ (); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = config@@ .get@@ Group@@ (@@ u@@ id); if ((@@ re@@ f == null@@ ) || (@@ new@@ Name.@@ equals(@@ ref@@ .getName@@ ()))) { continue@@ ; } try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = met@@ a@@ Data@@ Update@@ Factory.create@@ (project@@ Name@@ )) { re@@ name@@ (m@@ d); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Project@@ ) { continue@@ ; } catch (@@ org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException err@@ ) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.error@@ ((@@ (("@@ Cannot ren@@ am@@ e ac@@ count " + (@@ old@@ Name@@ )) + " in ") + project@@ Name@@ ), err@@ ); } } if ((!@@ (r@@ e@@ try@@ On@@ .@@ isEmpty())) && (!@@ (@@ try@@ ing@@ Ag@@ ain@@ ))) { try@@ ing@@ Ag@@ ai@@ n = true@@ ; @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = start@@ (@@ 5@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IN@@ U@@ TE@@ S@@ ); } }
private void re@@ name@@ (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean su@@ c@@ ces@@ s = false@@ ; for (@@ int at@@ te@@ mp@@ t@@ s = 0; (!@@ su@@ c@@ cess@@ ) && (@@ at@@ te@@ mp@@ t@@ s < (com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ M@@ A@@ X@@ _@@ T@@ R@@ I@@ ES@@ )); at@@ te@@ mp@@ t@@ s@@ ++@@ ) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = config@@ .get@@ Group@@ (@@ u@@ u@@ id); if ((@@ re@@ f == null@@ ) || (@@ new@@ Name.@@ equals(@@ ref@@ .getName@@ ()))) { project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); return@@ ; } ref@@ .set@@ Name@@ (@@ new@@ Name); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (@@ author@@ ); m@@ d.@@ set@@ Message@@ ((((@@ ("@@ R@@ en@@ am@@ e ac@@ count " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + "@@ \n@@ ")); try { config.@@ commit@@ (m@@ d); project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); su@@ c@@ ces@@ s = true@@ ; } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.error@@ ((((@@ (("@@ Co@@ ul@@ d not commit ren@@ am@@ e of ac@@ count " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + " in ") + (m@@ d@@ .getProject@@ Name@@ ().get@@ Name@@ ()@@ )), e); try { java.lang.@@ Th@@ read@@ .@@ s@@ le@@ e@@ p@@ (@@ 2@@ 5@@ ); } catch (java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception w@@ a@@ k@@ e@@ Up@@ ) { continue@@ ; } } if (!@@ su@@ c@@ cess@@ ) { if (@@ try@@ ing@@ Ag@@ ain@@ ) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.warn@@ ((((@@ (("@@ Co@@ ul@@ d not ren@@ am@@ e ac@@ count " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + " in ") + (m@@ d@@ .getProject@@ Name@@ ().get@@ ()))); } else { r@@ e@@ try@@ On@@ .@@ add(@@ m@@ d@@ .getProject@@ Name()); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Set@@ Default@@ D@@ ashbo@@ ar@@ d se@@ t = set@@ Default@@ .get(); se@@ t.@@ in@@ herit@@ ed = in@@ herit@@ ed@@ ; return se@@ t.@@ apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (@@ resource@@ .getProject@@ State@@ (), resource@@ .getUser@@ ()), input@@ ); }
private void re@@ name@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al group@@ , java.lang.String new@@ Name) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ new@@ Name@@ )).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ Provider@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id, group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group %s not fo@@ und@@ ", group@@ U@@ u@@ id@@ )); } catch (@@ com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ ac@@ count w@@ it@@ h name " + new@@ Name) + " al@@ read@@ y ex@@ ist@@ s@@ ")); } }
@java.lang.Override public com.google.gerrit.extensions.api.changes.@@ Inclu@@ ded@@ In@@ Info apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ Commit@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc@@ .get@@ Commit@@ (); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc@@ .getProject@@ State@@ ().get@@ NameKey@@ (); return in@@ clu@@ ded@@ In@@ .@@ apply(@@ project, commit@@ .getId@@ ().get@@ Name()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ re@@ st@@ ap@@ i@@ .g@@ roup.@@ Group@@ Resource rsrc@@ , Name@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = r@@ sr@@ c.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ rsrc@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ No@@ t ac@@ count owner@@ "); } else if ((@@ in@@ pu@@ t == null@@ ) || (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input.@@ name@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ name is requ@@ i@@ red@@ "); } java.lang.String new@@ Name = input.@@ name.@@ tri@@ m@@ (); if (@@ new@@ Name.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ name is requ@@ i@@ red@@ "); } if (@@ int@@ er@@ n@@ al@@ Group@@ .getName@@ ().@@ e@@ qual@@ s@@ (@@ new@@ Name@@ )) { return new@@ Name@@ ; } re@@ name@@ Group@@ (@@ int@@ er@@ n@@ al@@ Group@@ , new@@ Name); return new@@ Name@@ ; }
@java.lang.Override java.lang.String group@@ Pat@@ tern@@ () { return "@@ &@@ g@@ o@@ bject@@ Class@@ Name@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ File@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String pat@@ h = rsrc@@ .get@@ Patch@@ Key@@ ().get@@ (); com.google.gerrit.server.change.@@ Revision@@ Resource re@@ v = rsrc@@ .get@@ Revision@@ (); org.eclipse.jgit.lib.ObjectId rev@@ st@@ r = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ rev@@ .get@@ PatchSet@@ ().get@@ Revision@@ ().get@@ ()); return file@@ Content@@ Util@@ .@@ do@@ w@@ n@@ load@@ Content@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (@@ rev@@ .getProject@@ ()), rev@@ str@@ , path@@ , parent@@ ); }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > by@@ Name(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name) throw@@ s com.google.gwtorm.server.OrmException { return get@@ Only@@ Group@@ (com.google.gerrit.server.@@ query@@ .g@@ roup.@@ Group@@ Predi@@ c@@ at@@ es.@@ name@@ (@@ group@@ Name@@ ()), (("@@ ac@@ count name '@@ " + group@@ Name) + "@@ '@@ ")); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.@@ resource@@ ) { return resource@@ .getName@@ (); }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > by@@ Id(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return get@@ Only@@ Group@@ (com.google.gerrit.server.@@ query@@ .g@@ roup.@@ Group@@ Predi@@ c@@ at@@ es.@@ id(@@ group@@ Id@@ ), (("@@ ac@@ count id '@@ " + group@@ Id@@ ) + "@@ '@@ ")); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Test@@ Project@@ Input@@ (re@@ ject@@ E@@ mpty@@ Commit = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ) public void submit@@ E@@ mpty@@ Commit@@ _@@ No@@ F@@ ast@@ For@@ war@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ get@@ Submit@@ Type@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Submit@@ Type.@@ FA@@ S@@ T_@@ F@@ OR@@ W@@ AR@@ D@@ _@@ ON@@ L@@ Y@@ ); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange@@ ("@@ Change 1@@ ", "@@ a.@@ t@@ xt@@ ", "@@ content@@ "); submit@@ (change@@ .getChange@@ Id()); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i rev@@ er@@ t@@ 1 = gApi.changes().id(@@ change@@ .getChange@@ Id@@ ()).@@ rev@@ er@@ t@@ (); ap@@ pro@@ ve@@ (@@ rev@@ er@@ t@@ 1@@ .@@ id@@ ()); rev@@ er@@ t@@ 1@@ .@@ current@@ ().@@ submit@@ (); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i rev@@ er@@ t@@ 2 = gApi.changes().id(@@ change@@ .getChange@@ Id@@ ()).@@ rev@@ er@@ t@@ (); ap@@ pro@@ ve@@ (@@ rev@@ er@@ t@@ 2.@@ id@@ ()); expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ (("@@ Change " + (@@ rev@@ er@@ t@@ 2@@ .get().@@ _@@ n@@ umber@@ )) + "@@ : Change co@@ ul@@ d not b@@ e merge@@ d b@@ e merge@@ d b@@ ec@@ au@@ se th@@ e commit is empty@@ . ") + "@@ P@@ roject po@@ li@@ c@@ y requ@@ i@@ re@@ s al@@ l commit@@ s to cont@@ ai@@ n mo@@ d@@ if@@ ic@@ ation@@ s to a@@ t as@@ t on@@ e file.@@ ")); rev@@ er@@ t@@ 2.@@ current@@ ().@@ submit@@ (); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Test@@ Project@@ Input@@ (re@@ ject@@ E@@ mpty@@ Commit = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ) public void submit@@ E@@ mpty@@ Commit@@ _@@ F@@ ast@@ For@@ war@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input c@@ i = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (); c@@ i.@@ sub@@ ject = "@@ E@@ mp@@ t@@ y change@@ "; c@@ i.@@ project = project@@ .get(); c@@ i.@@ b@@ ran@@ ch = "@@ master@@ "; com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i change = gApi.changes().@@ create@@ (c@@ i@@ ); ap@@ pro@@ ve@@ (@@ change.@@ id@@ ()); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ (("@@ Change " + (change@@ .get().@@ _@@ n@@ umber@@ )) + "@@ : Change co@@ ul@@ d not b@@ e merge@@ d b@@ ec@@ au@@ se th@@ e commit is empty@@ . ") + "@@ P@@ roject po@@ li@@ c@@ y requ@@ i@@ re@@ al@@ l commit@@ s to cont@@ ai@@ n mo@@ d@@ if@@ ic@@ ation@@ s to a@@ t as@@ t on@@ e file.@@ change.@@ current@@ ().@@ submit@@ (); }
public final com.google.gerrit.extensions.client.@@ Submit@@ Type config@@ u@@ red@@ Submit@@ Type@@ () { java.lang.String ra@@ w = config@@ u@@ red@@ Submit@@ Type@@ R@@ a@@ w@@ (); return ra@@ w != null ? com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ value@@ Of(@@ ra@@ w@@ ) : null@@ ; }
private native java.lang.String config@@ u@@ red@@ Submit@@ Type@@ R@@ a@@ w@@ ();
private void set@@ Submit@@ Type@@ (@@ com.google.gerrit.extensions.client.@@ Submit@@ Type new@@ Submit@@ Type@@ , com.google.gerrit.extensions.client.@@ Submit@@ Type new@@ Config@@ u@@ red@@ Submit@@ Typ@@ e) { int in@@ de@@ x = -@@ 1; if ((@@ submit@@ Typ@@ e) != null@@ ) { for (@@ int i = 0; i < (@@ submit@@ Type@@ .get@@ Item@@ Count@@ ()); i@@ ++@@ ) { if (@@ new@@ Config@@ u@@ red@@ Submit@@ Type.@@ name@@ ().equals(@@ submit@@ Type@@ .getValue@@ (@@ i@@ ))) { in@@ de@@ x = i@@ ; if (@@ new@@ Config@@ u@@ red@@ Submit@@ Type == (@@ com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ IN@@ H@@ ER@@ IT@@ )) { break@@ ; } } submit@@ Typ@@ e.set@@ Se@@ lec@@ ted@@ Index@@ (in@@ dex@@ ); set@@ Enable@@ d@@ For@@ U@@ se@@ Content@@ Merge@@ (); }
void display(@@ com.google.gerrit.client.@@ projects.@@ Config@@ Info result) { des@@ c@@ T@@ x@@ t.set@@ Text(@@ result.@@ des@@ cription@@ ()); set@@ B@@ oo@@ l@@ (@@ cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s, result.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ reement@@ s()); set@@ B@@ oo@@ l@@ (@@ signe@@ d@@ O@@ ff@@ By@@ , result.@@ use@@ Sig@@ ned@@ O@@ ff@@ By@@ ()); set@@ B@@ oo@@ l@@ (@@ content@@ Merge@@ , result.@@ use@@ Content@@ Merge@@ ()); set@@ B@@ oo@@ l@@ (@@ new@@ Change@@ For@@ All@@ Not@@ In@@ T@@ arget@@ , result.@@ create@@ New@@ Change@@ For@@ All@@ Not@@ In@@ T@@ arget@@ ()); set@@ B@@ oo@@ l@@ (re@@ qu@@ i@@ re@@ Change@@ ID@@ , result.@@ requ@@ i@@ re@@ Change@@ Id()); if (@@ com.google.gerrit.client.Gerrit.@@ info@@ ().@@ re@@ ce@@ ive@@ ().@@ enable@@ Sig@@ ned@@ Push@@ ()) { set@@ B@@ oo@@ l@@ (@@ enable@@ Sig@@ ned@@ Push@@ , result.@@ enable@@ Sig@@ ned@@ Push@@ ()); set@@ B@@ oo@@ l@@ (re@@ qu@@ i@@ re@@ Sig@@ ned@@ Push@@ , result.@@ requ@@ i@@ re@@ Sig@@ ned@@ Push@@ ()); } set@@ B@@ oo@@ l@@ (re@@ ject@@ Imp@@ li@@ c@@ it@@ Merg@@ es@@ , result.@@ re@@ ject@@ Imp@@ li@@ c@@ it@@ Merg@@ es@@ ()); set@@ B@@ oo@@ l@@ (@@ private@@ , result@@ .@@ private@@ By@@ Default@@ B@@ oo@@ l@@ (@@ enable@@ Reviewer@@ By@@ Email@@ , result.@@ enable@@ Reviewer@@ By@@ Email@@ ()); set@@ B@@ oo@@ l@@ (@@ match@@ Author@@ Author@@ , result.@@ match@@ To@@ Commit@@ ter@@ Date@@ ()); set@@ To@@ (@@ result.@@ submit@@ Type@@ ()); result.@@ config@@ u@@ red@@ Submit@@ Type@@ ()); set@@ State@@ (@@ result.@@ state@@ ()); max@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ Text(@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ config@@ u@@ red@@ Value@@ ()); if ((@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ in@@ herit@@ ed@@ Value@@ ()) != null@@ ) { e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ setVisible@@ (@@ true@@ ); e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ Text(@@ Util.@@ M@@ .@@ min@@ Messag@@ es.@@ I@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ mit@@ (@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ value@@ ())); e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ T@@ it@@ le@@ (@@ min@@ Messag@@ es.@@ I@@ .g@@ lobal@@ Ma@@ x@@ Object@@ Size@@ Li@@ mit@@ ().@@ in@@ herit@@ ed@@ Value@@ ())); } else { e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ setVisible@@ (@@ false@@ ); } save@@ Project.@@ set@@ Enable@@ d@@ (@@ false@@ ); init@@ Project@@ Option@@ s(@@ result@@ ); init@@ Project@@ Action@@ s(@@ result@@ ); }
private com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id create@@ User@@ name@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.lang.String user@@ name@@ ) throw@@ s com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ user@@ name@@ )) { return null@@ ; } if (!@@ (com.google.gerrit.server.@@ account.@@ P@@ ut@@ User@@ name.@@ is@@ Valid@@ User@@ name@@ (user@@ name@@ ))) { throw new com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot as@@ sig@@ n user \"@@ %s@@ \@@ " to ac@@ count %@@ s; } do@@ es not co@@ n@@ for@@ m.@@ user@@ name, account@@ Id@@ )); } return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ name, account@@ Id); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ dis@@ able@@ P@@ riv@@ ate@@ Changes@@ ", valu@@ e = "@@ true@@ ") public void createChange@@ With@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ True@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); input.@@ is@@ P@@ riv@@ ate = true@@ ; ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ "@@ change@@ s ar@@ e not sup@@ p@@ orted@@ "); gApi.changes().@@ create@@ (in@@ put@@ ); }
@org.junit.Test public void createChange@@ With@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ F@@ alse@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); input.@@ is@@ P@@ riv@@ ate = true@@ ; assert@@ Th@@ at(@@ gApi.changes().@@ create@@ (in@@ put@@ ).get@@ ().@@ is@@ P@@ riv@@ ate@@ ).@@ isEqualTo@@ (@@ true@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ dis@@ able@@ P@@ riv@@ ate@@ Changes@@ ", valu@@ e = "@@ true@@ ") public void createChange@@ With@@ P@@ riv@@ ate@@ By@@ Default@@ And@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ () throw@@ s java.lang.Exception { set@@ P@@ riv@@ ate@@ By@@ Default@@ (project@@ 2, In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ); com.google.gerrit.extensions.common.@@ Change@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ 2@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ "@@ change@@ s ar@@ e not sup@@ p@@ orted@@ "); gApi.changes().@@ create@@ (in@@ put@@ ); }
@java.lang.Override public java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String p@@ f@@ x@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey star@@ t = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (p@@ f@@ x@@ ); com.google.gerrit.reviewdb.client.Project.NameKey en@@ d = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ((@@ p@@ x + (java.lang.@@ Char@@ act@@ er.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E@@ ))); try { return list@@ .get@@ (com.google.gerrit.server.project.@@ Project@@ Cache@@ Impl.@@ List@@ Key@@ .@@ AL@@ L@@ ).@@ sub@@ Set@@ (@@ start@@ , end@@ ); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.project.Project@@ Cache@@ Impl.@@ log.warn@@ (("@@ Cannot l@@ oo@@ k up project@@ s for pre@@ fi@@ x " + p@@ f@@ x@@ ), e); return java.util.Collections.@@ empty@@ S@@ orted@@ Set@@ (); } }
@java.lang.Override public java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String pre@@ fix@@ ) { return java.util.Collections.@@ empty@@ S@@ orted@@ Set@@ (); }
public void set@@ C@@ le@@ an@@ ();
@java.lang.Override public java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > all@@ () { return java.util.Collections.@@ empty@@ S@@ orted@@ Set@@ (); }
private static java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String pre@@ fix@@ );
public java.util.@@ stream@@ .@@ Stream@@ <@@ T> search@@ (@@ java.util.List<@@ T> list@@ ) { com.google.gerrit.server.@@ util.@@ Re@@ g@@ ex@@ List@@ Se@@ arch@@ er.@@ check@@ Not@@ Null@@ (@@ list@@ ); int be@@ gin@@ ; int end@@ ; if (@@ 0 < (p@@ re@@ fix@@ L@@ en@@ )) { be@@ gin = fin@@ d(@@ list@@ , pre@@ fix@@ Be@@ gin@@ ); en@@ d = fin@@ d(@@ list@@ , pre@@ fix@@ En@@ d); } else { be@@ gin = 0; en@@ d = li@@ s@@ t.@@ size@@ (); } if (p@@ re@@ fix@@ Only@@ ) { return (@@ be@@ gin < en@@ d ? li@@ s@@ t.@@ sub@@ List(@@ be@@ gin@@ , end@@ ) : com.google.common.collect.Immutable@@ List.@@ <@@ T@@ >@@ of@@ ()).@@ stream@@ (); } return li@@ s@@ t.@@ sub@@ List(@@ be@@ gin@@ , end@@ ).@@ stream@@ ().@@ filter@@ (@@ ( x@@ ) -@@ > pat@@ tern@@ .@@ run@@ (@@ toString@@ F@@ un@@ c.@@ apply(@@ x@@ ))); }
public static com.google.gerrit.server.@@ util.@@ Re@@ g@@ ex@@ List@@ Se@@ arch@@ er@@ <java.lang.String> of@@ String@@ s(@@ java.lang.String re@@ ) { return new com.google.gerrit.server.@@ util.@@ Re@@ g@@ ex@@ List@@ Se@@ arch@@ er@@ (re@@ , ( in@@ ) -@@ > in@@ ); }
private static int fin@@ d(@@ java.util.List<@@ T> list@@ , java.lang.String p@@ ) { int r = java.util.Collections.@@ bin@@ ary@@ Se@@ arch@@ (@@ com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ list@@ , toString@@ F@@ unc@@ tion@@ ), p@@ ); return r < 0 ? -@@ (@@ r + 1@@ ) : r@@ ; }
private org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository add(@@ com.google.gerrit.server.git.@@ Project@@ Config p@@ c@@ ) { com.google.gerrit.server.@@ rule@@ s.@@ Pro@@ log@@ En@@ vi@@ ron@@ m@@ ent.@@ Factor@@ y en@@ v@@ Factor@@ y = null@@ ; com.google.gerrit.server.@@ rule@@ s.@@ Rule@@ s@@ Cach@@ e rule@@ s@@ Cach@@ e = null@@ ; com.google.gerrit.server.config.@@ Site@@ Path@@ s sit@@ e@@ Path@@ s = null@@ ; java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info> comment@@ Link@@ s = null@@ ; org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository repo@@ ; try { repo = repo@@ Manager.@@ create@@ Repository(@@ p@@ c@@ .getName@@ ()); if ((@@ c@@ .getProject@@ ()) == null@@ ) { p@@ c.@@ load@@ (repo@@ ); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } al@@ l.@@ put@@ (p@@ c@@ .getName@@ (), new com.google.gerrit.server.project.Project@@ State@@ (@@ sit@@ e@@ Path@@ s, project@@ Cache@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, null@@ , en@@ v@@ Factory@@ , repo@@ Manag@@ er, rule@@ s@@ Cache@@ , comment@@ Link@@ s, c@@ ap@@ abili@@ ty@@ Collection@@ Factory@@ , p@@ c@@ )); return repo@@ ; }
public com.google.gerrit.server.account.Account@@ Config set@@ E@@ ag@@ er@@ Load@@ ing@@ (@@ boolean e@@ ag@@ er@@ ) { check@@ State@@ (((@@ load@@ ed@@ Account@@ ) == null@@ ), "@@ Account %s al@@ read@@ y load@@ ed@@ ", account@@ Id@@ .get()); this@@ .@@ ag@@ e@@ ag@@ er@@ Load@@ ing = e@@ ag@@ er@@ Load@@ ing@@ ; return this@@ ; }
private java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > load@@ Account@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.lib.ObjectId commit@@ , @@@ com.google.gerrit.common.@@ Null@@ able java.util.List<java.lang.String> messag@@ es) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { rw.@@ re@@ set@@ (); com.google.gerrit.server.account.Account@@ Config account@@ Config = new com.google.gerrit.server.account.Account@@ Config@@ (account@@ Id); account@@ Config.@@ set@@ E@@ ag@@ er@@ ing@@ (@@ true@@ ).@@ load@@ (r@@ w, commit@@ ); if (@@ message@@ s != null@@ ) { messag@@ es.@@ add@@ All@@ (account@@ Config@@ .get@@ Validation@@ Error@@ s().@@ stream@@ ().@@ map@@ (@@ Validation@@ Error@@ :@@ get@@ Message@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())); } return account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ revision@@ ) != null@@ ) { rw.@@ re@@ set@@ (); rw.@@ mar@@ k@@ Start@@ (@@ revision@@ ); rw.@@ s@@ ort@@ (@@ Rev@@ S@@ ort.@@ REV@@ ER@@ S@@ E@@ ); re@@ gist@@ er@@ ed@@ O@@ n = new java.sql.@@ Tim@@ est@@ amp@@ ((@@ (r@@ w.@@ next@@ ().get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ )); org.eclipse.jgit.lib.@@ Config account@@ Config = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (account@@ Config@@ , revision@@ .@@ name@@ ())); w@@ atch@@ Config = new com.google.gerrit.server.account.@@ Watch@@ Config@@ (account@@ Id, read@@ Config@@ (@@ Watch@@ Config.@@ W@@ AT@@ CH@@ _@@ CON@@ FI@@ G@@ ), this@@ ); if (@@ e@@ ag@@ er@@ Load@@ ing@@ ) { w@@ atch@@ Config.@@ parse@@ (); } else { load@@ ed@@ Account = java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public void execute@@ (java.lang.String is@@ s@@ ue@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ Request action@@ Request@@ , java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es) throw@@ s java.io.IOException { java.lang.String te@@ m@@ pl@@ ate = action@@ Request@@ .get@@ Parameter@@ (1); if (!(@@ te@@ m@@ pl@@ ate.@@ isEmpty())) { java.lang.String comm@@ ent = so@@ y@@ Text@@ T@@ em@@ pl@@ ate@@ (@@ com.google.@@ te@@ m@@ pl@@ ate.@@ so@@ y.@@ S@@ o@@ y@@ File@@ Set.@@ buil@@ der@@ (), te@@ m@@ pl@@ ate@@ , pro@@ per@@ ti@@ es@@ ); it@@ s.@@ add@@ Comment@@ (@@ is@@ s@@ ue@@ , comment@@ ); } else { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Add@@ S@@ o@@ y@@ Comm@@ ent.@@ log.error@@ ("@@ N@@ o te@@ m@@ pl@@ ate name g@@ ive@@ n in {}@@ ", action@@ Request@@ ); } } }
@java.lang.Override void log@@ Pro@@ per@@ ty(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ ty@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ log.@@ de@@ bug@@ (@@ pro@@ per@@ ty.@@ toString@@ ()); }
@java.lang.Override public void execute@@ (java.lang.String is@@ s@@ ue@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ Request action@@ Request@@ , java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es) throw@@ s java.io.IOException { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ L@@ e@@ ve@@ l ve@@ l = com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ L@@ e@@ ve@@ l.@@ from@@ String@@ (@@ action@@ Request@@ .get@@ Parameter@@ (1@@ )); for (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ t@@ y : pro@@ per@@ ti@@ es) { ve@@ l.@@ log@@ Pro@@ per@@ ty(@@ pro@@ per@@ ty@@ ); } }
public void RO@@ K@@ E@@ N@@ _@@ test@@ I@@ s@@ Enable@@ d@@ Un@@ k@@ no@@ w@@ n@@ Event@@ () { com.google.gerrit.server.@@ events.@@ Change@@ Event ev@@ ent = create@@ Mo@@ ck@@ (com.google.gerrit.server.@@ events.@@ Change@@ Event@@ .@@ class@@ ); com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config it@@ s@@ Config = create@@ I@@ t@@ s@@ Config@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); assert@@ F@@ alse@@ (@@ it@@ s@@ Config.@@ isE@@ n@@ able@@ d(@@ event@@ )); assert@@ Log@@ Message@@ Cont@@ ain@@ s("@@ not re@@ co@@ g@@ n@@ is@@ ed an@@ d ig@@ no@@ red@@ "); }
@java.lang.Override public void on@@ Event@@ (com.google.gerrit.server.@@ events.@@ Event event) { if (!(@@ ev@@ ent instanceof com.google.gerrit.server.@@ events.@@ Ref@@ Event@@ )) { return@@ ; } com.google.gerrit.server.@@ events.@@ Ref@@ Event ref@@ Event = ((@@ com.google.gerrit.server.@@ events.@@ Ref@@ Event@@ ) (@@ event@@ )); if (!(@@ it@@ s@@ Config.@@ isE@@ n@@ able@@ d(@@ ref@@ Event@@ ))) { return@@ ; } java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ >> pro@@ per@@ ti@@ es@@ Collection@@ s = pro@@ per@@ ty@@ Ex@@ tr@@ actor@@ .@@ ext@@ r@@ act@@ From@@ (ref@@ Event@@ ); for (@@ java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es : pro@@ per@@ ti@@ es@@ Collection@@ s) { java.util.Collection<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ > action@@ s = rule@@ B@@ ase.@@ action@@ Request@@ s@@ For@@ (@@ pro@@ per@@ ti@@ es@@ ); if (!(@@ action@@ s.@@ isEmpty())) { for (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ ti@@ es@@ .getValue@@ ()) { if ("@@ is@@ s@@ ue@@ "@@ .equals(@@ pro@@ per@@ ty@@ .getKey@@ ())) { java.lang.String is@@ su@@ e = pro@@ per@@ ty@@ .getValue@@ (); action@@ Execu@@ tor@@ .@@ execute@@ (@@ is@@ s@@ ue@@ , action@@ s, pro@@ per@@ ti@@ es@@ ); } } } }
private void assert@@ Can@@ Edit@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (!@@ (c@@ urrent@@ User@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ dat@@ abase@@ (@@ review@@ Db@@ ).@@ change@@ (@@ notes@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (@@ notes@@ .getProject@@ Name@@ ()).@@ check@@ State@@ Per@@ mit@@ s@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ ed@@ it not per@@ mit@@ ted@@ ", d@@ en@@ i@@ ed@@ ); } }
boolean can@@ Add@@ PatchSet@@ () { return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (("@@ ref@@ s@@ /@@ for@@ /@@ " + (ref@@ Name@@ )@@ )).@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); }
private void en@@ su@@ re@@ Can@@ Edit@@ Commit@@ Message@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s change@@ Notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ()).@@ dat@@ abase@@ (db@@ .get@@ ()).@@ change@@ (change@@ Notes@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (change@@ .getProject@@ Name@@ ()).@@ check@@ State@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ mo@@ d@@ if@@ y@@ ing commit messag@@ e not per@@ mit@@ ted@@ ", d@@ en@@ i@@ ed@@ ); } }
public void check@@ State@@ Per@@ mit@@ Wri@@ te@@ () throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception { if (!(@@ get@@ Project@@ ().get@@ State@@ ().@@ per@@ mit@@ s@@ Wri@@ te@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ project st@@ ate do@@ es not per@@ m@@ it write@@ "); } }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Sub@@ m@@ it.@@ Out@@ pu@@ t apply(@@ com.google.gerrit.server.change.@@ Revision@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Submit@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { input.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (in@@ put.@@ on@@ Be@@ h@@ al@@ f@@ Of@@ ); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User submit@@ ter@@ ; if ((@@ input.@@ on@@ Be@@ h@@ al@@ f@@ Of@@ ) != null@@ ) { submit@@ ter = on@@ Be@@ h@@ al@@ f@@ Of@@ (rsrc@@ , input@@ ); } else { r@@ sr@@ c.@@ per@@ mission@@ s().@@ check@@ (@@ Change@@ Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ ); submit@@ ter = rsrc@@ .getUser@@ ().@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); } project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .getProject@@ ()).@@ state@@ Per@@ mit@@ s@@ Wri@@ te@@ (); return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Sub@@ m@@ it.@@ Out@@ put(@@ merge@@ Change@@ , submit@@ ter@@ , input@@ )); }
@org.junit.Test public void un@@ b@@ lock@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ () { b@@ lock@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ , com.google.gerrit.server.project.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/heads/@@ *@@ "); allow@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ , com.google.gerrit.server.project.@@ DE@@ V@@ S@@ , "@@ refs/heads/@@ *@@ ").@@ set@@ For@@ ce@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Control u = user@@ (@@ local@@ , com.google.gerrit.server.project.@@ DE@@ V@@ S@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/heads/@@ master@@ ").@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ )).@@ nam@@ ed@@ ("@@ u c@@ an ed@@ it to@@ p@@ i@@ c name@@ ").@@ is@@ True@@ (); }
@org.junit.Test public void un@@ b@@ lock@@ In@@ Lo@@ cal@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ _@@ F@@ ail@@ s() { b@@ lock@@ (p@@ arent@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ , com.google.gerrit.server.project.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/heads/@@ *@@ "); allow@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ , com.google.gerrit.server.project.@@ DE@@ V@@ S@@ , "@@ refs/heads/@@ *@@ ").@@ set@@ For@@ ce@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Control u = user@@ (@@ local@@ , com.google.gerrit.server.project.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/heads/@@ master@@ ").@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ )).@@ nam@@ ed@@ ("@@ u can@@ '@@ t ed@@ it to@@ p@@ i@@ c name@@ ").@@ is@@ F@@ alse@@ (); }
private boolean can@@ Edit@@ To@@ pic@@ Name@@ () { if (get@@ Change@@ ().get@@ Statu@@ s().@@ is@@ Open@@ ()) { return ((((@@ is@@ Owner@@ ()) || (ref@@ Contro@@ l.@@ is@@ Owner@@ ())) || (get@@ Project@@ Control@@ ().@@ is@@ Owner@@ ())) || (ref@@ Contro@@ l.@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ ))) || (get@@ Project@@ Control@@ ().@@ is@@ Ad@@ min@@ ()); } return ref@@ Contro@@ l.@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return is@@ Visible@@ (); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case F@@ OR@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case F@@ OR@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case F@@ OR@@ G@@ E_@@ CO@@ M@@ M@@ IT@@ TE@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case F@@ OR@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ A@@ TE@@ _@@ CHANG@@ E : return can@@ Up@@ load@@ (); case C@@ RE@@ A@@ TE@@ _@@ T@@ A@@ G : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ C@@ RE@@ A@@ TE@@ _@@ T@@ A@@ TE@@ _@@ P@@ U@@ P@@ D@@ A@@ TE@@ _@@ B@@ Y_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ ((@@ (com.google.gerrit.server.@@ util.@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ ) + (ref@@ Name@@ )@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ A@@ TE@@ _@@ CHANG@@ E@@ S : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ V@@ I@@ EW@@ _@@ P@@ R@@ I@@ V@@ A@@ TE@@ _@@ CHANG@@ ES@@ ); case RE@@ AD@@ _@@ CON@@ FI@@ G : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ .@@ name@@ ()); case W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G : return is@@ Owner@@ (); case S@@ K@@ I@@ V@@ AL@@ ID@@ AT@@ IO@@ N : return ((((@@ can@@ For@@ g@@ e@@ Author@@ ()) && (c@@ an@@ For@@ g@@ e@@ Commit@@ ter@@ ())) && (c@@ an@@ For@@ g@@ e@@ Commit@@ ter@@ ())) && (c@@ an@@ For@@ g@@ e@@ Commit@@ ter@@ ())) && (c@@ an@@ Up@@ load@@ ())) && (!(@@ project@@ State@@ .getProject@@ State@@ ().@@ is@@ No@@ Changes@@ ())) && (!(@@ project@@ State@@ .getProject@@ State@@ ().@@ is@@ In@@ ternal@@ .@@ can@@ P@@ US@@ H@@ _@@ B@@ Y@@ P@@ er@@ for@@ m@@ (@@ per@@ m + " ")); } throw new com.google.gerrit.server.@@ per@@ m + " un@@ sup@@ p@@ orted@@ ")); }
private void load@@ Ex@@ t@@ en@@ sion@@ Panel@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ ) { java.util.Map<java.lang.String, java.lang.String> low@@ er@@ Name@@ s = new java.util.Hash@@ Map@@ <@@ >@@ 2); exten@@ sion@@ Panel@@ Section@@ s = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ >(); for (java.lang.String name : r@@ c@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ E@@ X@@ TE@@ N@@ S@@ ION@@ _@@ P@@ AN@@ E@@ L@@ S@@ )) { java.lang.String low@@ er = name.@@ to@@ L@@ ow@@ er@@ Case@@ (); if (@@ low@@ er@@ Nam@@ es.@@ contains@@ Key@@ (@@ low@@ er@@ )) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Ex@@ t@@ en@@ sion Panel@@ s \"@@ %s@@ \@@ " con@@ flict@@ s w@@ it@@ h \"@@ %s@@ \"@@ ", name, low@@ er@@ Nam@@ es@@ .get(@@ low@@ er@@ )@@ ))); } low@@ er@@ Nam@@ es.@@ put(@@ low@@ er, name); exten@@ sion@@ Panel@@ Panel@@ s.@@ put(@@ name, new java.util.Array@@ List(@@ java.util.Array@@ s.@@ as@@ List@@ (r@@ c@@ .get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ E@@ X@@ TE@@ N@@ S@@ ION@@ _@@ P@@ AN@@ S@@ , name, com.google.gerrit.server.git.@@ Project@@ Config.@@ K@@ E@@ Y_@@ P@@ AN@@ E@@ L@@ AN@@ K@@ E@@ L@@ )@@ ))); } }
@java.lang.Override public org.eclipse.jgit.lib.@@ Config get@@ Config@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ Res@@ ol@@ ver@@ .getName@@ Key@@ (req@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache@@ .get(@@ name@@ Key@@ ); if (@@ st@@ ate != null@@ ) { org.eclipse.jgit.lib.@@ Config cf@@ g = state@@ .get@@ Config@@ ("@@ g@@ itiles.@@ config@@ "@@ ).get@@ With@@ In@@ herit@@ ance@@ (); if ((@@ cf@@ g != null@@ ) && ((@@ cfg@@ .get@@ Section@@ s().@@ size@@ ()) > 0@@ )) { return cfg@@ ; } else { st@@ ate = project@@ Cache@@ .get@@ All@@ Project@@ s(); org.eclipse.jgit.lib.@@ Config cf@@ g = state@@ .get@@ Config@@ ("@@ g@@ itiles.@@ config@@ "@@ ).get@@ (); if ((@@ cf@@ g != null@@ ) && ((@@ cfg@@ .get@@ Section@@ s().@@ size@@ ()) > 0@@ )) { return cfg@@ ; } } try { org.eclipse.jgit.lib.@@ Config cf@@ g = get@@ G@@ lobal@@ Config@@ (); cfg@@ ; return cfg@@ ; } catch (@@ java.lang.Exception e) { } } return new org.eclipse.jgit.lib.@@ Config@@ (); }
private org.eclipse.jgit.lib.@@ Config get@@ G@@ lobal@@ Config@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File sit@@ e@@ Pat@@ h = new java.io.File@@ ("@@ .@@ "@@ ).get@@ Ab@@ so@@ lu@@ te@@ File@@ (); if ("@@ .@@ "@@ .equals(@@ sit@@ e@@ Path@@ .getName@@ ())) { sit@@ e@@ Pat@@ h = sit@@ e@@ Path@@ .getParent@@ File@@ (); } java.io.File cfg@@ File = new java.io.File@@ (@@ sit@@ e@@ Path@@ , "@@ et@@ c@@ /@@ g@@ itiles.@@ config@@ "); org.eclipse.jgit.@@ st@@ or@@ ag@@ e.@@ file.@@ File@@ B@@ as@@ ed@@ Config cf@@ g = new org.eclipse.jgit.@@ st@@ or@@ ag@@ e.@@ file.@@ File@@ B@@ as@@ ed@@ Config@@ (c@@ fg@@ File@@ , org.eclipse.jgit.@@ util.@@ F@@ S@@ .@@ DE@@ TE@@ C@@ TE@@ D@@ ); if (c@@ fg@@ .get@@ File@@ ().@@ ex@@ ist@@ s()) { cf@@ g.@@ load@@ (); } return cfg@@ ; }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if (@@ o == (@@ this@@ )) { return true@@ ; } if (@@ o instanceof com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) { com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info th@@ a@@ t = ((@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) (@@ o@@ )); return (((@@ this@@ .@@ match@@ ) == null ? (@@ th@@ a@@ t.@@ match@@ ) == null : this@@ .@@ match@@ .equals(@@ th@@ a@@ t.@@ match@@ )) && (@@ this@@ .@@ link@@ ) == null ? (@@ th@@ a@@ t.@@ link@@ ) == null : this@@ .@@ lin@@ k.@@ equals(@@ th@@ a@@ t.@@ link@@ ))) && (@@ this@@ .@@ htm@@ l@@ ) == null ? (@@ th@@ a@@ t.@@ htm@@ l@@ ) : this@@ .@@ htm@@ l@@ ) == null : this@@ .@@ html.@@ equals(@@ th@@ a@@ t.@@ htm@@ l@@ ))) && (@@ this@@ .@@ enable@@ d) == null ? (@@ th@@ a@@ t.@@ enable@@ d) == null : this@@ .@@ enable@@ d.@@ equals(@@ th@@ a@@ t.@@ enable@@ d@@ )); } return false@@ ; }
com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ Filter@@ Repository create(@@ com.google.gerrit.reviewdb.client.Project.NameKey name@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name); try { if (!(@@ project@@ State@@ .getProject@@ ().get@@ State@@ ().@@ per@@ mit@@ s@@ Read@@ ())) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name); } } catch (@@ java.lang.Exception e) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name); } return new com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ Filter@@ ed@@ Repository(@@ project@@ State@@ , user@@ Provider@@ .get(), repo@@ Manager.@@ open@@ Repository(@@ name@@ ), vi@@ sible@@ Ref@@ Filter@@ Factory@@ , per@@ mission@@ Back@@ end@@ ); }
@java.lang.Override public int has@@ h@@ Code@@ () { return org.eclipse.jgit.@@ util.@@ N@@ B@@ .@@ N@@ u@@ mb@@ er.@@ fin@@ d@@ Current@@ File@@ H@@ ist@@ ory@@ (); }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if (@@ o == (@@ this@@ )) { return true@@ ; } if (@@ o instanceof com.google.gerrit.server.git.@@ Validation@@ Error@@ ) { com.google.gerrit.server.git.@@ Validation@@ E@@ rror th@@ a@@ t = ((@@ com.google.gerrit.server.git.@@ Validation@@ Error@@ ) (@@ o@@ )); return (@@ this@@ .@@ message@@ ) == null ? (@@ th@@ a@@ t.@@ message@@ ) == null : this@@ .@@ messag@@ e.@@ equals(@@ th@@ a@@ t.@@ message@@ ); } return false@@ ; }
@java.lang.Override public com.google.gerrit.server.project.Project@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ Current@@ User get@@ User@@ (); com.google.gerrit.server.project.Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ .get(), true@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return rsrc@@ ; }
public com.google.gerrit.server.project.Project@@ Resource parse@@ (java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return parse@@ (id@@ , true@@ ); }
public com.google.gerrit.server.project.Project@@ Resource parse@@ (java.lang.String id, boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ , check@@ Access@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ P@@ roject No@@ t Fo@@ und@@ : %s", id@@ )); } return rsrc@@ ; }
public void check@@ State@@ Per@@ mit@@ s@@ Read@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { if (!(@@ state@@ Per@@ mit@@ s@@ Wri@@ te@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ project st@@ ate " + (get@@ Project@@ ().get@@ State@@ ().@@ name@@ ())) + " do@@ es not per@@ m@@ it read@@ ")); } }
@java.lang.Override public com.google.gerrit.server.project.@@ Ch@@ ild@@ Project@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ Resource p = project@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id); for (com.google.gerrit.server.project.@@ Project@@ State p@@ p : p@@ .getProject@@ State@@ ().@@ parent@@ s()) { if (p@@ arent@@ .getName@@ Key@@ ().equals(@@ p@@ .getProject@@ ().get@@ NameKey@@ ())) { return new com.google.gerrit.server.project.@@ Ch@@ ild@@ Project@@ Resource@@ (p@@ arent@@ , p@@ .getProject@@ State@@ ()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return (@@ is@@ Visible@@ ()) && (get@@ Project@@ Control@@ ().get@@ Project@@ State@@ ().@@ state@@ Per@@ mit@@ s@@ Read@@ ()); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case F@@ OR@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case F@@ OR@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case F@@ OR@@ G@@ E_@@ CO@@ M@@ M@@ IT@@ TE@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case F@@ OR@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ A@@ TE@@ _@@ CHANG@@ E : return can@@ Up@@ load@@ (); case C@@ RE@@ A@@ TE@@ _@@ T@@ A@@ G : case C@@ RE@@ A@@ TE@@ _S@@ I@@ G@@ N@@ ED@@ _@@ T@@ A@@ G : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ name@@ ()); case U@@ P@@ D@@ A@@ TE@@ _@@ B@@ Y_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ ((@@ (com.google.gerrit.server.@@ util.@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ ) + (ref@@ Name@@ )@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ A@@ TE@@ _@@ CHANG@@ E@@ S : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ V@@ I@@ EW@@ _@@ P@@ R@@ I@@ V@@ A@@ TE@@ _@@ CHANG@@ ES@@ ); case RE@@ AD@@ _@@ CON@@ FI@@ G : return can@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ .@@ RE@@ AD@@ .@@ name@@ ()); case W@@ R@@ I@@ FI@@ G : return is@@ Owner@@ (); case F@@ _@@ V@@ AL@@ ID@@ (); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ())); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , (account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ ) -@@ account@@ .get@@ D@@ if@@ f@@ Preferences@@ ()))); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ 3@@ 9@@ 7@@ 5@@ b@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 4@@ 1@@ 8@@ 2@@ 4@@ 9@@ 4@@ 5@@ c@@ 5@@ 3@@ c@@ 5@@ 3@@ c@@ 5@@ 6@@ 9@@ 2@@ 3@@ 4@@ a@@ 1@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _S@@ T@@ A@@ TE@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ default@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ Instance@@ (@@ all@@ User@@ s@@ )); assert@@ Th@@ at(@@ values@@ ).@@ hasSize@@ (1); java.lang.String expected@@ Val@@ u@@ e = all@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ values@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ F@@ ull@@ Name(@@ name); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , (account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()))); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ 3@@ 9@@ 7@@ 5@@ b@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 4@@ 1@@ 8@@ 2@@ 4@@ 9@@ 4@@ 5@@ c@@ 5@@ 3@@ c@@ 5@@ 3@@ c@@ 5@@ 6@@ 9@@ 2@@ 3@@ 4@@ a@@ 1@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _S@@ T@@ A@@ TE@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()@@ )@@ ))); assert@@ Th@@ at(@@ values@@ ).@@ hasSize@@ (1); java.lang.String expected@@ Val@@ u@@ e = ((((@@ all@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ values@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ > account@@ Config@@ .get@@ D@@ if@@ f@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ > account@@ Config@@ .get@@ Edit@@ Preferences@@ ())); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ Notes@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ > account@@ Config@@ .get@@ D@@ if@@ f@@ Preferences@@ Preferences@@ ())); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , (account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ ) -@@ account@@ .get@@ D@@ if@@ f@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ Edit@@ Preferences@@ ()))); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ 3@@ 9@@ 7@@ 5@@ b@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 4@@ 1@@ 8@@ 2@@ 4@@ 9@@ 4@@ 5@@ c@@ 5@@ 3@@ c@@ 5@@ 3@@ c@@ 5@@ 6@@ 9@@ 2@@ 3@@ 4@@ a@@ 4@@ 5@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _S@@ T@@ A@@ TE@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ default@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info@@ .@@ default@@ s@@ ()@@ )@@ ))); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ values@@ ).@@ hasSize@@ (1); java.lang.String expected@@ Val@@ u@@ e = ((((@@ all@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ values@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
public com.google.gerrit.server.account.Account@@ State insert@@ (java.lang.String message@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update@@ Account@@ (@@ ( r@@ ) -@@ > { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (r@@ , account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (@@ new java.sql.@@ Tim@@ est@@ amp@@ (@@ commit@@ ter@@ Ident@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ())); com.google.gerrit.server.account.Account@@ State account@@ State = new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder update@@ Builder = com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Account@@ (); buil@@ der@@ (); updat@@ er.@@ update@@ (account@@ State@@ , update@@ ); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update updat@@ e = update@@ Buil@@ der.@@ bu@@ ild@@ (); account@@ Config.@@ set@@ Account@@ Update@@ (@@ update@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ Id@@ Note@@ s = create@@ Notes@@ (r@@ , account@@ Config@@ .get@@ ExternalId@@ s@@ Rev@@ (), account@@ Id, update@@ ); com.google.gerrit.server.account.Account@@ s@@ Updated@@ Account updat@@ ed@@ Account@@ s = new com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ (@@ all@@ User@@ s@@ Name, ext@@ er@@ n@@ al@@ Id@@ s, message@@ , account@@ Config@@ , ext@@ Id@@ Notes@@ ); updat@@ ed@@ Account@@ s.set@@ Cre@@ ated@@ (@@ true@@ ); return updat@@ ed@@ Account@@ s; } }@@ ).get@@ (); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ F@@ ull@@ Name(@@ name); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ F@@ ull@@ Name(@@ name); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private void save@@ ProjectWatch@@ es@@ () throw@@ s java.io.IOException { if ((@@ account@@ Update.@@ is@@ P@@ res@@ ent@@ ()) && ((!@@ (account@@ Update@@ .get@@ ().get@@ De@@ le@@ ted@@ ProjectWatch@@ es().@@ isEmpty())) || (!(@@ account@@ Update@@ .get@@ ().get@@ Updated@@ es().@@ isEmpty@@ ()@@ )))) { java.util.Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es = new java.util.Hash@@ Map@@ (@@ w@@ atch@@ Config@@ .getProject@@ Watch@@ es@@ ()); account@@ Update@@ .get@@ ().get@@ De@@ le@@ ted@@ ProjectWatch@@ es@@ ()@@ .@@ for@@ E@@ ach@@ (@@ ( p@@ w@@ ) -@@ > project@@ Watch@@ es.@@ remove@@ (p@@ w@@ )); account@@ Update@@ .get@@ ().get@@ ProjectWatch@@ es@@ ()@@ .@@ for@@ E@@ ach@@ (@@ ( p@@ ) -@@ > project@@ Watch@@ es.@@ put@@ (p@@ w, nt@@ )); save@@ Config@@ Watch@@ Config.@@ W@@ AT@@ CH@@ _@@ CON@@ FI@@ G@@ , w@@ atch@@ Config.@@ save@@ (@@ com.google.common.collect.Immutable@@ Map.@@ copy@@ Of@@ (project@@ Watch@@ es@@ ))); } }
public com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { check@@ Load@@ ed@@ (); return w@@ atch@@ Config@@ .getProject@@ Watch@@ es@@ (); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing public static com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> parse@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, org.eclipse.jgit.lib.@@ Config cfg@@ , com.google.gerrit.server.git.@@ Validation@@ Error@@ .@@ S@@ in@@ valid@@ ation@@ Error@@ S@@ in@@ k@@ ) { java.util.Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es = new java.util.Hash@@ Map@@ <@@ >(); for (java.lang.String project@@ Name : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ )) { java.lang.String@@ [] not@@ if@@ y@@ Value@@ s = cfg@@ .get@@ String@@ List@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , project@@ Name, com.google.gerrit.server.account.@@ Watch@@ Config.@@ K@@ E@@ Y_@@ NO@@ T@@ I@@ F@@ Y@@ ); for (java.lang.String n@@ v : not@@ if@@ y@@ Val@@ u@@ es) { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ n@@ v@@ )) { continue@@ ; } com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e not@@ if@@ y@@ Val@@ u@@ e = com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e.@@ parse@@ (account@@ Id, project@@ Name, n@@ v@@ , valid@@ ation@@ Error@@ S@@ in@@ k@@ ); if (@@ not@@ if@@ y@@ Val@@ u@@ e == null@@ ) { continue@@ ; } com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key k@@ ey = com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (project@@ Name@@ ), not@@ if@@ y@@ Val@@ u@@ e.@@ filter@@ ()); if (!(@@ project@@ Watch@@ es.@@ contains@@ Key@@ (key@@ ))) { project@@ Watch@@ es.@@ put(@@ key@@ , java.util.@@ En@@ um@@ Set.@@ n@@ one@@ Of@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ .@@ class@@ )); } } project@@ Watch@@ es@@ .get(@@ key@@ ).@@ add@@ All(@@ not@@ if@@ y@@ Val@@ u@@ e.@@ not@@ if@@ y@@ Typ@@ es@@ ()); } } return com.google.common.collect.Immutable@@ Map.@@ copy@@ Of@@ (project@@ Watch@@ es@@ ); }
public org.eclipse.jgit.lib.@@ Config save@@ (@@ com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es) { this@@ .@@ project@@ Watch@@ es = project@@ Watch@@ es@@ ; for (java.lang.String project@@ Name : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ )) { cf@@ g.@@ un@@ set@@ Section@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , project@@ Name); } com.google.common.collect.List@@ Multimap@@ <java.lang.String, java.lang.String> not@@ if@@ y@@ Val@@ u@@ es@@ By@@ P@@ roject = com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es().@@ bu@@ ild@@ (); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> e : project@@ Watch@@ es.@@ en@@ try@@ Set@@ ()) { com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e not@@ if@@ y@@ Val@@ u@@ e = com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e.@@ create(@@ e.get@@ Key@@ ().@@ filter@@ (), e.get@@ Value@@ ()); not@@ if@@ y@@ Val@@ u@@ es@@ By@@ Project.@@ put(@@ e.get@@ Key@@ ().@@ project@@ ().get@@ (), not@@ if@@ y@@ Val@@ u@@ e.@@ toString@@ ()); } for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.util.Collection@@ <java.lang.String@@ >> e : not@@ if@@ y@@ Val@@ u@@ es@@ By@@ Project.@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { cf@@ g.@@ set@@ String@@ List@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , e.get@@ Key@@ (), com.google.gerrit.server.account.@@ Watch@@ Config.@@ K@@ E@@ Y_@@ NO@@ T@@ I@@ F@@ Y@@ , new java.util.Array@@ List(@@ e.get@@ Value@@ ())); } } return cfg@@ ; }
public com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { if ((@@ project@@ Watch@@ es) == null@@ ) { parse@@ (); } return project@@ Watch@@ es@@ ; }
public com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { return project@@ Watch@@ es@@ ; }
public com.google.gerrit.server.account.Account@@ State insert@@ (java.lang.String message@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return update@@ Account@@ (@@ ( r@@ ) -@@ > { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (r@@ , account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (@@ new java.sql.@@ Tim@@ est@@ amp@@ (@@ commit@@ ter@@ Ident@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ())); com.google.gerrit.server.account.Account@@ State account@@ State = new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder update@@ Builder = com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ buil@@ der@@ (); updat@@ er.@@ update@@ (account@@ State@@ , update@@ ); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update updat@@ e = update@@ Buil@@ der.@@ bu@@ ild@@ (); account@@ Config.@@ set@@ Account@@ Update@@ (@@ update@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ Note@@ s = create@@ Note@@ (r@@ , account@@ Config@@ .get@@ ExternalId@@ s@@ (), account@@ Id, update@@ ); com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account updat@@ ed@@ Account@@ s = new com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ Updated@@ User@@ s@@ Name, ext@@ er@@ n@@ al@@ Id@@ s, message@@ , account@@ Config@@ , ext@@ Id@@ Notes@@ ); updat@@ ed@@ Account@@ s.set@@ Cre@@ ated@@ (@@ true@@ ); return updat@@ ed@@ Account@@ s; } }); }
public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ All@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.@@ re@@ g@@ ex@@ .@@ Match@@ er m = java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ .@@ * \@@ \@@ ((@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ )@@ \@@ )@@ $@@ ").@@ match@@ er@@ (@@ name@@ Or@@ Email@@ ); if (@@ m.@@ match@@ es@@ ()) { com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (m@@ .g@@ roup@@ (1@@ )); if (account@@ s.get(@@ id@@ ).@@ is@@ P@@ res@@ ent@@ ()) { return java.util.Collections.singleton@@ (id@@ ); } return java.util.Collections.@@ empty@@ Set@@ (); } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es@@ ("@@ ^@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ $@@ ")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (@@ name@@ Or@@ Email@@ ); if (account@@ s.get(@@ id@@ ).@@ is@@ P@@ res@@ ent@@ ()) { return java.util.Collections.singleton@@ (id@@ ); } return java.util.Collections.@@ empty@@ Set@@ (); } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es(@@ Account.@@ US@@ ER@@ _@@ NA@@ M@@ E_@@ P@@ AT@@ T@@ ER@@ N@@ )) { com.google.gerrit.server.account.Account@@ State wh@@ o = by@@ Id@@ .get@@ By@@ User@@ name@@ (@@ name@@ Or@@ Email@@ ); if (@@ wh@@ o != null@@ ) { return java.util.Collections.singleton@@ (@@ who@@ .getAccount@@ ().get@@ Id()); } } return fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { if (com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Permission@@ Check@@ (@@ per@@ mission@@ Back@@ end@@ , notes@@ .getChange@@ (), current@@ User@@ , reviewer@@ , va@@ l@@ )) { return@@ ; } per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (@@ notes@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REV@@ I@@ EW@@ ER@@ ); }
private static boolean can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Permission@@ Check@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d per@@ mission@@ Back@@ end@@ , com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int valu@@ e) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { if (!@@ (change@@ .getStatu@@ s().@@ is@@ Open@@ ())) { return false@@ ; } if (c@@ urrent@@ User@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { com.google.gerrit.reviewdb.client.Account.Id current@@ User@@ .getAccount@@ Id(); if (@@ a@@ Id.@@ equals(@@ reviewer@@ )) { return true@@ ; } else if ((@@ a@@ Id.@@ equals(@@ change@@ .get@@ Owner@@ ())) && (@@ 0 <@@ = value@@ )) { return true@@ ; } } com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ With@@ User w@@ ith@@ User = per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject for@@ P@@ roject = w@@ ith@@ User@@ .@@ project@@ (change@@ .getProject@@ ()); if ((@@ com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ check@@ (@@ for@@ Project.@@ ref@@ (change@@ .get@@ Dest@@ ().get@@ ()), Ref@@ Permission@@ .@@ W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G@@ )) || (com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ check@@ (@@ w@@ ith@@ User@@ , G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ))) { return true@@ ; } return false@@ ; }
public boolean test@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d, com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int valu@@ e) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Permission@@ (@@ per@@ mission@@ Back@@ end@@ , c@@ d.@@ change@@ (), current@@ User@@ , reviewer@@ , value@@ )) { return true@@ ; } return per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (c@@ d@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ test@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REV@@ I@@ EW@@ ER@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.project.Project@@ Resource@@ , ?@@ > create@@ (com.google.gerrit.server.project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { parent@@ .getProject@@ State@@ ().@@ check@@ State@@ Per@@ mit@@ s@@ Read@@ (); if (com.google.gerrit.server.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return create@@ Default@@ .get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public void test@@ Su@@ ggest@@ ed@@ N@@ on@@ Match@@ ing@@ () throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > ret@@ ; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent i@@ v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ S@@ U@@ G@@ ES@@ TE@@ D@@ ).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ it@@ s@@ Config@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ re@@ g@@ ex@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ x@@ "@@ )).@@ and@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ ").@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ commit@@ ).@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ ").@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ ue@@ Id@@ Test@@ Message@@ Id@@ s("@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); re@@ t = i@@ v@@ c.@@ on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ event@@ ); assert@@ E@@ quals("@@ Si@@ z@@ e of return@@ ed Commit@@ Validation@@ Message@@ s do@@ es not match@@ ", 1, re@@ t.@@ size()); assert@@ True@@ (("@@ Fi@@ r@@ s@@ t Commit@@ Message@@ s '@@ M@@ s@@ ing '@@ " + "@@ is@@ s@@ ue@@ '@@ "), ret@@ .get(@@ 0@@ ).get@@ Message@@ ().@@ contain@@ s("@@ M@@ s@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ")); }
public java.lang.String get@@ Comment@@ Link@@ Name@@ () { java.lang.String ret@@ ; re@@ t = get@@ Plugin@@ Config@@ String@@ ("@@ comment@@ link@@ ", null@@ ); if (re@@ t == null@@ ) { re@@ t = plugin@@ Name@@ ; } return ret@@ ; }
public java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ ter@@ n get@@ D@@ u@@ mm@@ y@@ I@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ () { return java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (get@@ Plugin@@ Config@@ String@@ ("@@ d@@ u@@ mm@@ y@@ I@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ ", "@@ ^@@ ")); }
public void test@@ M@@ an@@ dator@@ y@@ N@@ on@@ Match@@ ing@@ () { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ , null@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ M@@ AN@@ D@@ AT@@ OR@@ Y@@ ).@@ at@@ On@@ L@@ e@@ ast@@ ce@@ (); expec@@ t(@@ s@@ Config@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ "@@ )).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Message@@ ").@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ commit@@ ).@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ ").@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ ue@@ Id@@ s("@@ Test@@ Message@@ "@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ at@@ L@@ e@@ On@@ ce@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); try { i@@ v@@ c.@@ on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ event@@ ); f@@ ail@@ ("@@ on@@ Receive@@ Commit@@ d id not throw an@@ y ex@@ cepti@@ on@@ "); } catch (com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception e) { assert@@ True@@ (("@@ Messag@@ e of n n '@@ M@@ is@@ s@@ ue@@ ing '@@ "), e.get@@ Message@@ ().@@ contain@@ s("@@ M@@ s@@ ing is@@ s@@ ing is@@ s@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ing is@@ s@@ ue@@ ")); } }
private java.lang.String get@@ Plugin@@ Config@@ String@@ (java.lang.String key@@ , java.lang.String default@@ Value@@ ) { java.lang.String va@@ l = get@@ Current@@ Plugin@@ Config@@ ().get@@ String@@ (key@@ , gerrit@@ Config@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ Name, key@@ )); return va@@ l == null ? default@@ Val@@ u@@ e : va@@ l@@ ; }
public void test@@ Only@@ S@@ kip@@ Match@@ ing@@ () throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > ret@@ ; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent i@@ v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ M@@ AN@@ D@@ AT@@ OR@@ Y@@ ).@@ at@@ L@@ e@@ ast@@ On@@ (); expec@@ t(@@ it@@ s@@ Config@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ S@@ K@@ I@@ P@@ "@@ )).@@ and@@ On@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Messag@@ e S@@ K@@ I@@ P@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ commit@@ ).@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ ").@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ s@@ ue@@ Id@@ s("@@ Test@@ Messag@@ e S@@ K@@ I@@ P@@ "@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); re@@ t = i@@ c.@@ on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ event@@ ); assert@@ E@@ mpty@@ List(@@ ret@@ ); }
@java.lang.Override @@@ com.google.gerrit.common.@@ Null@@ able public synchronized java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > get@@ By@@ User@@ name@@ (java.lang.String user@@ name@@ ) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ by@@ User@@ name@@ .get(@@ user@@ name@@ )); }
private java.util.@@ Optional@@ <java.lang.String> read@@ Project@@ Config@@ (java.lang.String project@@ Name) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (project@@ Name@@ ))) { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <?@@ > t@@ r = new org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ repo@@ ); org.eclipse.jgit.revwalk.RevWalk r@@ w = tr@@ .get@@ Rev@@ Wal@@ k@@ (); org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); if (re@@ f == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } org.eclipse.jgit.lib.Object@@ Load@@ er ob@@ j = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ tr@@ .get(@@ rw.@@ parse@@ Tree@@ (ref@@ .get@@ Object@@ Id@@ ()), com.google.gerrit.acceptance.@@ rest.@@ project.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ ), com.google.gerrit.acceptance.@@ rest.@@ project.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ); return java.util.@@ Optional@@ .@@ of@@ (@@ new java.lang.String@@ (@@ ob@@ j@@ .get@@ Cach@@ ed@@ By@@ t@@ es@@ (java.lang.@@ Integ@@ er.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E@@ ), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); } }
public <@@ T> T execute@@ Index@@ Quer@@ y(@@ com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ Action@@ Type.@@ IN@@ DE@@ X@@ _@@ Q@@ U@@ ER@@ Y@@ , action@@ , java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ).@@ execute@@ (t@@ ext@@ Exception@@ ); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private <@@ T> T execute@@ With@@ At@@ te@@ mp@@ Count@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s java.lang.@@ Throwable { com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ en@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Builder@@ <@@ T> e@@ try@@ Builder = create@@ R@@ e@@ try@@ Builder@@ (@@ op@@ t@@ s, ex@@ cepti@@ on@@ Predicate@@ ); r@@ e@@ try@@ er@@ Buil@@ der.@@ w@@ ith@@ (@@ list@@ ener@@ ); return execute@@ With@@ out@@ Coun@@ t(@@ action@@ , action@@ , e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ()); } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ s.@@ re@@ cor@@ d(@@ action@@ Type@@ , list@@ ener@@ .get@@ At@@ t@@ mp@@ t@@ Count@@ ()); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s java.lang.Exception { try { return execute@@ With@@ At@@ te@@ mp@@ t(@@ action@@ Type@@ , action@@ s, op@@ t@@ s, ex@@ cepti@@ on@@ Predicate@@ ); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , java.lang.@@ Exception@@ .@@ class@@ ); throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ t@@ ); } }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ With@@ R@@ e@@ try@@ (@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type.@@ G@@ RO@@ U@@ P@@ _@@ U@@ P@@ D@@ A@@ TE@@ , () -@@ > create@@ Group@@ In@@ NoteDb@@ (@@ group@@ Cre@@ ation@@ , group@@ Update@@ ), com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ .@@ class@@ :@@ :@@ is@@ Instance@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
private <@@ T> T execute@@ Account@@ Update@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ Action@@ Type.@@ AC@@ CO@@ UN@@ T_@@ U@@ P@@ D@@ A@@ TE@@ , action@@ , ( t@@ ) -@@ > instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ); } catch (@@ java.lang.Exception t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Resource group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Note@@ s group@@ Name@@ Note@@ s = com.google.gerrit.server.g@@ roup.@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), group@@ Name); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , this@@ :@@ get@@ Account@@ Name@@ Email@@ , group@@ Name); this@@ :@@ get@@ Group@@ Name); group@@ s@@ Repo@@ , group@@ Config@@ , group@@ Name@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Create@@ d g@@ roup w@@ as@@ n@@ '@@ t au@@ to@@ m@@ ati@@ c@@ ally load@@ ed@@ ")); } }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update.@@ Update@@ Result@@ > update@@ Group@@ In@@ NoteDb@@ With@@ R@@ e@@ try@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type.@@ G@@ RO@@ U@@ P@@ _@@ U@@ P@@ D@@ A@@ TE@@ , () -@@ > update@@ Group@@ In@@ NoteDb@@ (@@ group@@ U@@ u@@ id, group@@ Update@@ ), com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ .@@ class@@ :@@ :@@ is@@ Instance@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
private com.google.gerrit.reviewdb.client.@@ Account update@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ s@@ Update.@@ Account@@ Update account@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return execute@@ Update@@ ((@@ -@@ > { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ com.google.gerrit.server.account.@@ External@@ Id.@@ from@@ (@@ update@@ Repo@@ ), account@@ Update.@@ update@@ (@@ all@@ User@@ s@@ Repo@@ ); if (@@ updat@@ ed@@ Account == null@@ ) { return null@@ ; } commit@@ (@@ all@@ User@@ s@@ Repo@@ , updat@@ ed@@ Account@@ ); updat@@ ed@@ Account@@ .getAccount@@ (); } }); }
@java.lang.Override public com.google.gerrit.server.project.@@ Branch@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent@@ .getName@@ Key@@ (); parent@@ .getProject@@ State@@ ().@@ check@@ State@@ Per@@ mit@@ s@@ Read@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ f@@ ull@@ Name@@ (id@@ .get@@ ())); if (re@@ f == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (project@@ ).@@ ref@@ ((@@ ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ () ? ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : ref@@ .getName@@ ()@@ )).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); return new com.google.gerrit.server.project.@@ Branch@@ Resource@@ (p@@ arent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), ref@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception not@@ Al@@ low@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> apply(@@ com.google.gerrit.server.project.Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { rsrc@@ .getProject@@ State@@ ().@@ check@@ State@@ Per@@ mit@@ s@@ Read@@ (); return new com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ re@@ g@@ ex@@ (@@ match@@ Re@@ g@@ ex@@ ).@@ start@@ (@@ start@@ ).@@ li@@ mit@@ (@@ li@@ mit@@ ).@@ filter@@ (@@ all@@ Branch@@ es@@ (rsrc@@ )); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ li@@ mit@@ (@@ 2@@ ).@@ s@@ pli@@ t@@ (id@@ )); java.lang.String re@@ f = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ 0@@ )); java.lang.String pat@@ h = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ 1@@ .get(@@ 1@@ )); return d@@ ashbo@@ ard@@ s.@@ parse@@ (@@ new com.google.gerrit.server.project.Project@@ Resource@@ (project@@ , user@@ ), com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (((@@ re@@ f + '@@ :@@ '@@ ) + path@@ ))); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource resource@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return d@@ ashbo@@ ard@@ s.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (id@@ )); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource default@@ Of@@ (com.google.gerrit.server.project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = project@@ State@@ .getProject@@ ().get@@ Lo@@ cal@@ Default@@ D@@ ashbo@@ ard@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ )) { id = project@@ State@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); } if (com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ (project@@ State@@ , user@@ , id); } else if (!@@ (in@@ herit@@ ed@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : project@@ State.@@ t@@ ree@@ ()) { id = ps@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); if (com.google.gerrit.server.@@ project.@@ is@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ (project@@ State@@ , user@@ , id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (p@@ arent@@ .getProject@@ State@@ (), parent@@ .getUser@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ; try { in@@ fo = com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collection@@ .@@ new@@ D@@ ashbo@@ ard@@ Info@@ (id@@ .get()); } catch (com.google.gerrit.server.@@ re@@ stapi.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ Invalid@@ D@@ ashbo@@ ard@@ Id e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } for (com.google.gerrit.server.project.@@ Project@@ State p@@ s : parent@@ .getProject@@ State@@ ().@@ t@@ ree@@ ()) { try { return parse@@ (ps@@ , parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), info@@ ); } catch (@@ org.eclipse.jgit.errors.@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Object@@ Exception | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { continue@@ ; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Changes@@ Collec@@ tion.@@ to@@ Id@@ String@@ (id@@ )); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Changes@@ Collec@@ tion.@@ to@@ Id@@ String@@ (id@@ )); } return change@@ Resource@@ Factory.create@@ (change, user@@ .get()); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Argument@@ (in@@ de@@ x = 0, requ@@ i@@ re@@ d = true@@ , m@@ ulti@@ Value@@ d = true@@ , met@@ a@@ V@@ a@@ r = "@@ CHANG@@ E@@ ", us@@ ag@@ e = "@@ change@@ s to mo@@ d@@ if@@ y@@ ") void add@@ Change@@ (java.lang.String token@@ ) { try { change@@ Argument@@ Par@@ ser@@ .@@ add@@ Change@@ (@@ token@@ , changes@@ , project@@ State@@ ); } catch (@@ com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception(@@ e.get@@ Message@@ (), e); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception("@@ dat@@ ab@@ ase is do@@ w@@ n@@ ", e); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception("@@ can@@ '@@ t ch@@ ec@@ k per@@ mission@@ s", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.account.Account@@ Resource@@ , com.google.gerrit.server.@@ re@@ stapi.@@ Star@@ red@@ Chang@@ es.@@ E@@ mpty@@ Input@@ > create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return create@@ Provider@@ .get().@@ set@@ Change@@ (@@ changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ , id@@ )); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s not fo@@ und@@ ", id@@ .get@@ ())); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.@@ re@@ stapi.@@ Star@@ red@@ Chang@@ es.@@ log.error@@ ("@@ can@@ not res@@ ol@@ v@@ e change@@ ", e); throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ "@@ int@@ er@@ n@@ al serv@@ er error@@ "); } }
@java.lang.Override public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id@@ .@@ en@@ cod@@ ed@@ (), true@@ ); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return change@@ Resource@@ Factory.create@@ (change, user@@ .get()); }
private boolean is@@ Visible@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Rel@@ ated@@ Changes@@ S@@ ort@@ er.@@ PatchSet@@ Data ps@@ d) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ change@@ (db@@ Provider@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ); try { per@@ m.@@ change@@ (ps@@ d.@@ dat@@ a@@ ()).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return false@@ ; } return project@@ Cache.@@ check@@ ed@@ Get@@ (ps@@ d.@@ dat@@ a@@ ().@@ project@@ ()).@@ mit@@ Per@@ mit@@ (); }
public void s@@ ort@@ (java.lang.String ref@@ , java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > s@@ ection@@ s) { final int c@@ n@@ t = s@@ ection@@ s.@@ size@@ (); if (c@@ n@@ t <@@ = 1@@ ) { return@@ ; } com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ Key k@@ ey = com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ Key@@ .@@ create@@ (ref@@ , s@@ ection@@ s); com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ V@@ al va@@ l = cach@@ e.get@@ I@@ f@@ P@@ res@@ ent@@ (key@@ ); if (@@ va@@ l != null@@ ) { int@@ [] src@@ Id@@ x = va@@ l.@@ or@@ der@@ ; if (@@ src@@ Id@@ x != null@@ ) { com.google.gerrit.common.data.@@ Access@@ Section@@ [] src@@ Lis@@ t = com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ cop@@ y(@@ s@@ ection@@ s); for (@@ int i = 0; i < c@@ nt@@ ; i@@ ++@@ ) { s@@ ection@@ s.set@@ (@@ i@@ , src@@ List@@ [@@ src@@ Id@@ x@@ [@@ i@@ ]@@ ); } } else { boolean is@@ on = false@@ ; java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <@@ com.google.gerrit.common.data.@@ Access@@ Section@@ , java.lang.@@ Integ@@ er@@ > src@@ Ma@@ p = new java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <@@ >(); for (@@ int i = 0; i < c@@ nt@@ ; i@@ ++@@ ) { po@@ |@@ = (@@ src@@ Map.@@ put@@ (s@@ ection@@ s.get(@@ i@@ ), i@@ )) != null@@ ; } java.util.Collections.s@@ ort@@ (s@@ ection@@ s, new com.google.gerrit.server.@@ util.@@ Mo@@ st@@ S@@ p@@ e@@ c@@ if@@ ic@@ Comp@@ ar@@ ator@@ (ref@@ )); int@@ [] src@@ Id@@ x@@ ; if (com.google.gerrit.server.project.@@ S@@ ort@@ Cache.@@ is@@ Id@@ enti@@ ty@@ T@@ ran@@ s@@ for@@ m@@ (s@@ ection@@ s, src@@ Map@@ )) { src@@ Id@@ x = null@@ ; } else { src@@ Id@@ x = new int@@ [@@ c@@ nt@@ ]@@ ; for (@@ int i = 0; i < c@@ nt@@ ; i@@ ++@@ ) { src@@ Id@@ x@@ [@@ i@@ ] = src@@ Map@@ .get(@@ s@@ ection@@ )); } } if (@@ po@@ on@@ ) { com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ log.error@@ ("@@ Receive@@ d d@@ up@@ li@@ c@@ ate Access@@ Sec@@ tion in@@ st@@ an@@ ces@@ , not cach@@ ing s@@ ort@@ "); } else { put(@@ key@@ , new com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ (@@ src@@ Id@@ )); } } }
@org.junit.Test public void note@@ Db@@ Commit@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ notes@@ M@@ igration.@@ read@@ Changes@@ ()).@@ is@@ True@@ (); com.google.gerrit.extensions.common.@@ Change@@ Info c = assert@@ Create@@ Suc@@ ce@@ ed@@ s@@ (@@ new@@ Change@@ Input@@ (@@ Change@@ Status.@@ N@@ EW@@ )); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.RevCommit commit = rw.@@ parse@@ Commit@@ (repo@@ .@@ ex@@ act@@ Ref@@ (change@@ Met@@ a@@ Ref@@ (@@ new com.google.gerrit.reviewdb.client.Change.@@ Id@@ (c@@ .@@ _@@ n@@ umber@@ )@@ ).get@@ Object@@ Id()); assert@@ Th@@ at(@@ commit@@ .get@@ Sh@@ ort@@ Message@@ ()).@@ isEqualTo@@ ("@@ Cre@@ ate change@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent expected@@ Auth@@ or = change@@ Note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache.@@ ma@@ y@@ be@@ (@@ admin@@ .@@ id@@ ).get@@ ().get@@ Account@@ (), c.@@ cre@@ ated@@ , server@@ Ident@@ .get()); assert@@ Th@@ at(@@ commit@@ .get@@ Author@@ Ident@@ ()).@@ isEqualTo(@@ expected@@ ); assert@@ Th@@ at(@@ commit@@ .get@@ Commit@@ ter@@ Ident@@ ()).@@ isEqualTo@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ .get(), c.@@ cre@@ ated@@ )); assert@@ Th@@ at(@@ commit@@ .getParent@@ Count@@ ()).@@ isEqualTo(@@ 0); } }
@org.junit.Test public void get@@ ExternalId@@ s@@ Of@@ O@@ th@@ er@@ User@@ With@@ Access@@ Dat@@ abase@@ () throw@@ s java.lang.Exception { allow@@ G@@ lobal@@ Capabili@@ ti@@ es(@@ com.google.gerrit.acceptance.@@ rest.@@ account.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , G@@ lobal@@ Capabili@@ ty.@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ admin@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = to@@ ExternalId@@ Info@@ s(@@ expected@@ Id@@ s); com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ((("@@ /@@ account@@ s/@@ " + (@@ admin@@ .@@ id@@ )) + "@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ ")); res@@ pon@@ se@@ .@@ assert@@ OK@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {}@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
@org.junit.Test public void get@@ ExternalId@@ s() throw@@ s java.lang.Exception { java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache.@@ ma@@ y@@ be@@ (user@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = to@@ ExternalId@@ Info@@ s(@@ expected@@ Id@@ s); com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ("/@@ account@@ s/@@ self@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ "); res@@ pon@@ se@@ .@@ assert@@ OK@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {}@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
private void assert@@ User@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String name, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String statu@@ s) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er or = repo@@ .@@ new@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); assert@@ Th@@ at(@@ ref@@ ).@@ is@@ Not@@ Null@@ (); org.eclipse.jgit.revwalk.RevCommit c = rw.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); long ti@@ m@@ est@@ amp@@ D@@ if@@ f@@ M@@ s = java.lang.@@ M@@ ath@@ .@@ ab@@ s@@ ((((@@ c@@ .get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ ) - (account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (account@@ Id@@ ).get@@ Account@@ ().get@@ Re@@ gist@@ er@@ ed@@ On@@ ().get@@ Time@@ ()))); assert@@ Th@@ at(@@ ti@@ m@@ est@@ amp@@ D@@ if@@ f@@ M@@ s).@@ is@@ At@@ Mo@@ st@@ (@@ Change@@ Re@@ buil@@ der@@ Impl.@@ M@@ A@@ X@@ _@@ IN@@ D@@ O@@ W@@ _@@ M@@ S@@ ); try (@@ org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k t@@ w = org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k@@ .@@ for@@ Path@@ (@@ or@@ , Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , c@@ .get@@ Tree@@ ())) { if ((@@ name != null@@ ) || (@@ statu@@ s != null@@ )) { assert@@ Th@@ at(@@ t@@ w@@ ).@@ is@@ Not@@ Null@@ (); org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ or@@ .@@ open@@ (t@@ w@@ .get@@ Object@@ Id(@@ 0@@ ), com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ By@@ t@@ es@@ (), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ String@@ (@@ Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T@@ , null@@ , Account@@ Pro@@ per@@ ti@@ es.@@ K@@ E@@ Y_@@ F@@ L@@ U@@ L@@ _@@ NAME@@ )).@@ isEqualTo(@@ name); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ String@@ (@@ Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T@@ , null@@ , ti@@ es.@@ K@@ E@@ Y_@@ ST@@ AT@@ US@@ )).@@ isEqualTo(@@ statu@@ s); } else { assert@@ Th@@ at(@@ t@@ w@@ ).@@ isNull@@ (); } }
@org.junit.Test public void get@@ Detail@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Rest@@ Response r = admin@@ Rest@@ Session@@ .get@@ ((("@@ /@@ account@@ s/@@ " + (@@ admin@@ .@@ user@@ name@@ )) + "@@ /@@ d@@ et@@ ail@@ /@@ ")); re@@ stapi.@@ account.@@ Get@@ Det@@ ai@@ l.@@ Account@@ Detail@@ Info in@@ fo = new@@ G@@ son@@ ().@@ from@@ Json@@ (r@@ .get@@ Read@@ er@@ (), com.google.gerrit.server.@@ re@@ stapi.@@ account.@@ Get@@ Det@@ ai@@ l.@@ Account@@ Detail@@ Info@@ .@@ class@@ ); com.google.gerrit.acceptance.@@ rest.@@ account.@@ Account@@ As@@ sert@@ .@@ assert@@ Account@@ Info@@ (@@ admin@@ , info@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ admin@@ .getId@@ ()@@ ).get@@ ().get@@ Account@@ (); assert@@ Th@@ at@@ (info.@@ re@@ gist@@ er@@ ed@@ On@@ ).@@ isEqualTo(@@ account@@ .get@@ Re@@ gist@@ er@@ ed@@ On@@ ()); }
private void add@@ NoteDb@@ Commit@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id, java.lang.String commit@@ Message@@ ) throw@@ s java.lang.Exception { if (!(@@ notes@@ M@@ igration.@@ commit@@ Change@@ Wri@@ t@@ es@@ ())) { return@@ ; } org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent commit@@ ter = server@@ Ident@@ .get(); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent auth@@ or = note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ admin@@ .getId@@ ()@@ ).get@@ Account@@ (), commit@@ ter@@ .get@@ Wh@@ en@@ (), commit@@ ter@@ ); server@@ Side@@ Test@@ Repo@@ .@@ branch@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ change@@ Met@@ a@@ Ref@@ (id@@ )).@@ commit@@ ().@@ author@@ (@@ author@@ ).@@ commit@@ ter@@ (@@ commit@@ ter@@ ).@@ message@@ (@@ commit@@ Message@@ ).@@ create@@ (); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ O@@ D@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (id@@ ).@@ map@@ (@@ Account@@ :@@ get@@ Edit@@ Preferences@@ ).@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Resource@@ NotFound@@ Exception@@ :@@ new@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ D@@ if@@ f@@ Preferences@@ ).@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Resource@@ NotFound@@ Exception@@ :@@ new@@ ); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ O@@ D@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ General@@ Preferences@@ ).@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Resource@@ Exception@@ :@@ :@@ new@@ ); } }
public java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation get@@ Default@@ Time@@ out@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Typ@@ e) { switch (@@ action@@ Typ@@ e) { case AC@@ CO@@ UN@@ T_@@ U@@ P@@ D@@ AT@@ E : case CHANG@@ E_@@ U@@ P@@ D@@ AT@@ E : return note@@ Db@@ Default@@ Time@@ out@@ ; case IN@@ DE@@ X@@ _@@ Q@@ U@@ ER@@ Y : default : return default@@ Time@@ out@@ ; } }
private <@@ T> T execute@@ With@@ At@@ te@@ mp@@ t@@ Count@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s java.lang.@@ Throwable { com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ en@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ c@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Builder@@ <@@ T> e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ Builder@@ (@@ action@@ Type@@ , op@@ t@@ s, ex@@ cepti@@ on@@ Predicate@@ ); e@@ try@@ er@@ Buil@@ der.@@ w@@ ith@@ R@@ e@@ try@@ List@@ ener@@ (@@ list@@ ener@@ ); return execute@@ With@@ Time@@ out@@ Coun@@ t(@@ action@@ Type@@ , action@@ , r@@ , e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ()); } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ s.@@ re@@ cor@@ d(@@ action@@ Type@@ , list@@ ener@@ .get@@ At@@ t@@ Count@@ ()); } }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cach@@ e account@@ Cache@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Cache@@ .get@@ Or@@ Null@@ (account@@ Id); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (account@@ State@@ ).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ Account@@ ); }
@org.junit.Test public void cre@@ ated@@ On@@ Of@@ New@@ Group@@ Match@@ es@@ Cre@@ ated@@ On@@ Re@@ load@@ ed@@ Group@@ () throw@@ s java.lang.Exception { java.sql.@@ Tim@@ est@@ am@@ p cre@@ ated@@ O@@ n = java.sql.@@ Tim@@ est@@ am@@ p.@@ from@@ (@@ java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Date@@ Tim@@ e.@@ of@@ (@@ 2@@ 0@@ 1@@ 7@@ , java.@@ ti@@ m@@ e.@@ M@@ on@@ th@@ .@@ DE@@ C@@ E@@ M@@ B@@ ER@@ , 1, 1@@ 7@@ , 4@@ 9@@ , 1@@ 3@@ , 1@@ 2@@ 3@@ ).@@ at@@ O@@ ff@@ set@@ (@@ java.@@ ti@@ m@@ e.@@ Z@@ one@@ O@@ ff@@ t.@@ UT@@ C@@ ).to@@ In@@ stant@@ ()); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Updated@@ On@@ (@@ cre@@ ated@@ On@@ ).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ create@@ New@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group cre@@ ated@@ Group = group@@ Config@@ .get@@ Load@@ ed@@ ().get@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group load@@ ed@@ Group = com.google.gerrit.server.g@@ roup.@@ Group@@ .@@ assert@@ Group@@ s(@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group load@@ ed@@ Group@@ s); com.google.gerrit.server.g@@ roup.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , cre@@ ated@@ Group@@ .get@@ UUID@@ ()@@ ).get@@ Group@@ UUID@@ ()@@ ).get@@ Group@@ ().get@@ (); assert@@ Th@@ at(@@ cre@@ ated@@ On@@ ()).@@ isEqualTo(@@ load@@ ed@@ Group@@ .get@@ Cre@@ ated@@ On@@ ()); }
public com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User parse@@ On@@ Be@@ h@@ al@@ f@@ Of(@@ @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.@@ Current@@ User call@@ er, java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parse@@ Id@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (c@@ all@@ er, id); if ((@@ user == null@@ ) || (!(@@ account@@ Control@@ Factory@@ .get().@@ can@@ Se@@ e@@ (user@@ .getAccount@@ ()@@ )))) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ '@@ %s@@ ' do@@ es@@ n@@ '@@ t rep@@ res@@ ent an ac@@ count or is b@@ ig@@ u@@ ou@@ s", id@@ )); } return user@@ ; }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = id@@ .get()); if ((@@ user == null@@ ) || (!(@@ account@@ Control@@ Factory@@ .get().@@ can@@ Se@@ e@@ (user@@ .getAccount@@ ()@@ )))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s@@ ' do@@ es@@ n@@ '@@ t rep@@ res@@ ent ac@@ count or is b@@ ig@@ u@@ ou@@ s", id@@ )); } return new com.google.gerrit.server.account.Account@@ Resource@@ (user@@ ); }
@org.junit.Test public void red@@ u@@ ce@@ Comp@@ le@@ x@@ Tree@@ To@@ S@@ ingle@@ Value@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ an@@ d(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ or@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ V@@ AL@@ U@@ ION@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ ), com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ not@@ Con@@ di@@ tion@@ (@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ Or@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ or@@ (@@ true@@ , con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ _@@ E@@ ).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ , con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ Boolean@@ (@@ false@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ _@@ E@@ E@@ V@@ AL@@ U@@ E@@ ).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ .@@ T@@ R@@ I@@ V@@ AL@@ _@@ E@@ AT@@ ION@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ Not@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ not@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ not@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ )); assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ not@@ (@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ V@@ AL@@ U@@ E@@ ).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ not@@ (@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ _@@ V@@ AL@@ U@@ E@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ An@@ d(@@ ) throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ In@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ ).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )); assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ con@@ di@@ tion.@@ Boolean@@ Con@@ di@@ tion.@@ and@@ (@@ true@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ T@@ R@@ I@@ V@@ AL@@ _@@ E@@ ); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ IN@@ T@@ R@@ I@@ V@@ AL@@ _@@ T@@ R@@ I@@ AL@@ U@@ E@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ Comp@@ le@@ x@@ Tree@@ To@@ S@@ m@@ all@@ er@@ Tree@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ an@@ d(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ E@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ ), con@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ Con@@ di@@ tion@@ tion@@ tion@@ tion@@ s.@@ Boolean@@ (@@ con@@ di@@ tion.@@ value@@ Of@@ (@@ false@@ )@@ )).@@ red@@ u@@ ce@@ ()).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ an@@ d(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion.@@ or@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ IN@@ _@@ V@@ AL@@ U@@ E@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ (@@ Con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ V@@ AL@@ U@@ E@@ , com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion.@@ value@@ Of@@ (@@ true@@ ))); }
private static boolean e@@ valu@@ at@@ es@@ T@@ ri@@ vi@@ all@@ y@@ To@@ Ex@@ p@@ ec@@ ted@@ Value@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion con@@ d, boolean expected@@ Value@@ ) { if (!(@@ con@@ d.@@ e@@ valu@@ at@@ es@@ T@@ ri@@ vi@@ all@@ y@@ ())) { return false@@ ; } return (@@ con@@ d.@@ value@@ ()) == expected@@ Value@@ ; }
@java.lang.Override public com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ O@@ D@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } check@@ Down@@ load@@ S@@ che@@ me@@ (in@@ put@@ .@@ do@@ w@@ n@@ load@@ S@@ che@@ me@@ ); com.google.gerrit.server.account.@@ Preferen@@ ces.@@ vali@@ date@@ M@@ y(@@ input.@@ my@@ ); com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); account@@ s@@ Update@@ Provider@@ .get().@@ update@@ ("@@ Set Gener@@ al Preferen@@ ce@@ s a AP@@ I@@ ", id, ( u@@ ) -@@ > u@@ .set@@ General@@ Preferences@@ (in@@ put@@ )); return cach@@ e@@ .get(@@ id@@ ).get@@ General@@ Preferences@@ (); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ O@@ D@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ pu@@ t m@@ us@@ t b@@ e pro@@ vi@@ ded@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); account@@ s@@ Update@@ Provider@@ .get().@@ update@@ ("@@ D@@ if@@ f Preferen@@ ce@@ s vi@@ a AP@@ I@@ ", id, ( u@@ ) -@@ > u@@ .set@@ Edit@@ Preferences@@ (in@@ put@@ )); return account@@ Cache@@ .get(@@ id@@ ).get@@ Edit@@ Preferences@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ O@@ D@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ pu@@ t m@@ us@@ t b@@ e pro@@ vi@@ ded@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); account@@ s@@ Update@@ Provider@@ .get().@@ update@@ ("@@ Set D@@ if@@ f vi@@ ce@@ s a AP@@ I@@ ", id, ( u@@ ) -@@ > u@@ .set@@ D@@ if@@ f@@ Preferences@@ (in@@ put@@ )); return account@@ Cache@@ .get(@@ id@@ ).get@@ D@@ if@@ f@@ Preferences@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Group@@ Member@@ s(@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group group@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > se@@ en@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { se@@ en@@ .@@ add(@@ group@@ .get@@ Group@@ UUID@@ ()); com.google.gerrit.server.account.@@ Group@@ Control group@@ Control = group@@ Control@@ Factory.@@ control@@ For@@ (@@ new com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Description@@ (@@ group@@ )); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > di@@ re@@ ct@@ Member@@ s = group@@ .get@@ Member@@ s().@@ stream@@ ().@@ filter@@ (@@ group@@ Control@@ :@@ can@@ Se@@ e@@ Member@@ ).@@ map@@ (account@@ Cache@@ :@@ ma@@ y@@ be@@ Get@@ ).@@ filter@@ (@@ java.util.@@ Optional@@ :@@ is@@ P@@ res@@ ent@@ ).@@ map@@ (@@ java.util.@@ Optional@@ :@@ get@@ ).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ Account@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > in@@ di@@ re@@ ct@@ Member@@ s = new java.util.Hash@@ Set<@@ >(); if (@@ group@@ Contro@@ l.@@ can@@ Se@@ e@@ Group@@ ()) { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : group@@ .get@@ Sub@@ s()) { if (!(@@ se@@ en@@ .@@ contains(@@ sub@@ U@@ u@@ id@@ ))) { in@@ di@@ re@@ ct@@ Member@@ s.@@ add@@ All(@@ list@@ Account@@ s(@@ sub@@ U@@ u@@ id, project, se@@ en@@ )); } } } } com.google.common.collect.@@ Set@@ s.@@ un@@ i@@ on@@ (@@ di@@ re@@ ct@@ Member@@ s, in@@ di@@ re@@ ct@@ Member@@ s); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ , javax.servlet.@@ Servlet@@ Response res@@ p@@ , javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { com.google.gerrit.server.@@ Current@@ User user = user@@ Provider@@ .get(); if ((@@ user != null@@ ) && (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User wh@@ o = user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); req@@ .set@@ Attribute@@ (@@ com.google.gerrit.httpd.@@ Get@@ User@@ Fil@@ ter.@@ RE@@ Q@@ _@@ AT@@ T@@ R@@ _@@ K@@ E@@ Y@@ , who@@ .getUser@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (("@@ a@@ /@@ " + (@@ who@@ .getAccount@@ Id@@ ()@@ )@@ ))); } ch@@ ain@@ .@@ do@@ Filter@@ (req@@ , res@@ p@@ ); }
public org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Commit@@ ter@@ Ident@@ (@@ java.util.@@ D@@ ate wh@@ en@@ , java.util.@@ Time@@ Z@@ on@@ e t@@ z@@ ) { final com.google.gerrit.reviewdb.client.@@ Account u@@ a = get@@ Account@@ (); java.lang.String name = u@@ a@@ .get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = u@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ e@@ mai@@ l == null@@ ) || (@@ e@@ mail.@@ isEmpty())) { java.lang.String user = get@@ User@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (("@@ account@@ -@@ " + (@@ u@@ a@@ .getId@@ ().@@ toString@@ ()))); java.lang.String ho@@ st@@ ; if ((@@ can@@ on@@ ical@@ Url@@ .get@@ ()) != null@@ ) { try { ho@@ s@@ t = new java.@@ net.@@ URL@@ (c@@ an@@ on@@ ical@@ Url@@ .get@@ ()@@ ).get@@ H@@ o@@ st@@ (); } catch (@@ java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception e) { ho@@ s@@ t = org.eclipse.jgit.@@ util.@@ Sy@@ st@@ em@@ Read@@ er@@ .get@@ Instance@@ ().get@@ H@@ o@@ st@@ name@@ (); } } else { ho@@ s@@ t = org.eclipse.jgit.@@ util.@@ Sy@@ st@@ em@@ Read@@ er@@ .get@@ Instance@@ ().get@@ H@@ o@@ st@@ name@@ (); } e@@ mai@@ l = (@@ user + "@@ @@@ ") + ho@@ st@@ ; } if ((@@ name == null@@ ) || (@@ name.@@ isEmpty())) { final int a@@ t = e@@ mail.@@ index@@ Of(@@ '@@ @@@ '); if (@@ 0 < at@@ ) { name = e@@ mail.@@ substring@@ (@@ 0, at@@ ); } else { name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } } return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ name, email@@ , wh@@ en@@ , t@@ z@@ ); }
private java.lang.I@@ terable@@ <java.lang.String> get@@ User@@ nam@@ es@@ (com.google.gerrit.server.@@ Current@@ User user@@ ) { if (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { java.util.@@ Set@@ <java.lang.String> email@@ s = user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Email@@ Add@@ ress@@ es@@ (); if (!(@@ user@@ .getUser@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return email@@ s; } else if (@@ email@@ s.@@ isEmpty()) { return com.google.common.collect.@@ Stream@@ s.@@ stream@@ (user@@ .getUser@@ Name@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } return com.google.common.collect.@@ Stream@@ s.@@ con@@ c@@ at(@@ email@@ s.@@ stream@@ (), com.google.common.collect.@@ Stream@@ s.@@ stream@@ (user@@ .getUser@@ Name@@ ()@@ )).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } return com.google.common.collect.@@ Stream@@ s.@@ stream@@ (user@@ .getUser@@ Name@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d, com.google.common.collect.List@@ Multimap@@ <java.lang.String, ?@@ > par@@ ameter@@ s) { if (@@ d@@ cm@@ d == null@@ ) { return "@@ Comman@@ d w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed@@ "; } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] arg@@ s = d@@ .get@@ Argument@@ s(); command@@ Name.@@ append("@@ .@@ ").@@ append(@@ arg@@ s@@ [@@ 1@@ ]@@ ); for (java.lang.String k@@ ey : par@@ ameter@@ s.@@ key@@ s()) { if (key@@ .@@ toString@@ ().@@ startsWith@@ ("@@ $@@ ")) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ valu@@ e); } } for (java.lang.String k@@ ey : par@@ ameter@@ s.get(@@ key@@ )) { if (key@@ .@@ toString@@ ().@@ startsWith@@ ("@@ $@@ ")) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ valu@@ e); } } } for (java.lang.String k@@ ey : par@@ ameter@@ s.@@ key@@ s()) { for (@@ java.lang.O@@ bject valu@@ e : par@@ ameter@@ s.get(@@ key@@ )) { if (!(@@ key@@ .@@ startsWith@@ ("@@ $@@ "@@ ))) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ key@@ ).@@ append("@@ .@@ ").@@ append(@@ valu@@ e); } } } return command@@ Name.@@ toString@@ (); }
public boolean is@@ S@@ en@@ si@@ tive@@ Parameter@@ s(@@ java.lang.String par@@ am@@ s) { return (@@ this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s) == null ? false : sen@@ si@@ tive@@ Parameter@@ s.@@ contains(@@ par@@ am@@ s); }
public void add@@ S@@ en@@ si@@ tive@@ Parameter@@ s(@@ java.lang.String sen@@ si@@ tive@@ Parameter@@ s) { if (@@ this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s) == null@@ ) { this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s = new java.util.Hash@@ Set<@@ >(); } this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s.add(@@ sen@@ si@@ tive@@ Parameter@@ s); }
public java.util.@@ Set@@ <java.lang.String> get@@ S@@ en@@ si@@ tive@@ Par@@ am@@ ter@@ s() { return this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s; }
public void set@@ S@@ en@@ si@@ tive@@ Par@@ am@@ er@@ s(@@ java.util.@@ Set@@ <java.lang.String> set@@ ) { this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s = set@@ ; }
private com.google.common.collect.List@@ Multimap@@ <java.lang.String, ?@@ > ext@@ r@@ act@@ Parameter@@ s(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d) { if (@@ d@@ cm@@ d == null@@ ) { return com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s(@@ 0@@ ).@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es(@@ 0@@ ).@@ bu@@ ild@@ (); } java.lang.String@@ [] cm@@ d@@ Arg@@ s = d@@ .get@@ Argument@@ s(); java.lang.String par@@ am@@ Name = null@@ ; int arg@@ Po@@ s = 0; com.google.common.collect.List@@ Multimap@@ <java.lang.String, java.lang.String> par@@ m@@ s = com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es().@@ bu@@ ild@@ (); for (@@ int i = 2@@ ; i < (cm@@ d@@ Arg@@ s.@@ length@@ ); i@@ ++@@ ) { java.lang.String ar@@ g = cm@@ d@@ Arg@@ s@@ [@@ i@@ ]@@ ; if (@@ ar@@ g.@@ e@@ quals("@@ --@@ ")) { for (@@ i@@ ++@@ ; i < (cm@@ d@@ Arg@@ s.@@ length@@ ); i@@ ++@@ ) { par@@ m@@ s.@@ put@@ (("@@ $@@ " + (arg@@ Po@@ s@@ ++@@ )), cm@@ d@@ Arg@@ s@@ [@@ i@@ ]@@ ); } break@@ ; } int e@@ q@@ Po@@ s = ar@@ g.@@ index@@ Of(@@ '@@ =@@ '); if ((@@ ar@@ g.@@ startsWith@@ ("@@ --@@ ")) && (@@ e@@ q@@ Po@@ s > 0@@ )) { java.lang.String par@@ m = ar@@ g.@@ substring@@ (@@ 0, e@@ q@@ Po@@ s); par@@ m@@ s.@@ put(@@ par@@ m@@ , (@@ d@@ cm@@ d.@@ is@@ S@@ en@@ si@@ tive@@ Parameter@@ s(@@ par@@ m@@ ) ? com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ M@@ A@@ S@@ K : ar@@ g.@@ substring@@ ((@@ e@@ q@@ Po@@ s + 1@@ )@@ ))); continue@@ ; } if (@@ ar@@ g.@@ startsWith@@ ("@@ -@@ ")) { if (@@ par@@ am@@ Name != null@@ ) { par@@ m@@ s.@@ put(@@ par@@ am@@ Name, null@@ ); } } if (@@ par@@ am@@ Name == null@@ ) { par@@ m@@ s.@@ put@@ (("@@ $@@ " + (arg@@ s@@ ++@@ )), arg@@ ); } else { par@@ m@@ s.@@ put(@@ par@@ am@@ Name, (@@ d@@ Name) ? com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ M@@ A@@ S@@ K : arg@@ )); } par@@ am@@ Name = null@@ ; } } if (@@ par@@ am@@ Name != null@@ ) { par@@ m@@ s.@@ put(@@ par@@ am@@ Name, null@@ ); } return par@@ ms@@ ; }
@java.lang.Override public void start@@ (@@ final org.apache.@@ sshd.@@ server.@@ En@@ vi@@ ron@@ ment en@@ v@@ ) throw@@ s java.io.IOException { try { parse@@ Command@@ Line@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ command@@ Name@@ )) { java.io.@@ String@@ Wri@@ ter ms@@ g = new java.io.@@ String@@ Wri@@ ter@@ (); ms@@ g.@@ write@@ (@@ us@@ age@@ ()); throw di@@ e@@ (@@ ms@@ g.@@ toString@@ ()); } final com.google.gerrit.sshd.@@ Command@@ Provi@@ der p = command@@ s.get(@@ command@@ Name); if (@@ p == null@@ ) { java.lang.String ms@@ g = (((@@ get@@ Name@@ ().@@ isEmpty@@ () ? "@@ G@@ erri@@ t Co@@ de Review@@ " : get@@ Name@@ ()) + "@@ : ") + (@@ command@@ Name@@ )) + "@@ : not fo@@ und@@ "; throw di@@ e@@ (@@ msg@@ ); } final org.apache.@@ sshd.@@ server.@@ Comman@@ d cm@@ d = p@@ .get@@ Provider@@ ().get@@ (); check@@ Requ@@ i@@ res@@ Capabili@@ ty@@ (cm@@ d); if (cm@@ d instanceof com.google.gerrit.sshd.@@ Base@@ Command@@ ) { final com.google.gerrit.sshd.@@ Base@@ Comman@@ d b@@ c = ((@@ com.google.gerrit.sshd.@@ Base@@ Command@@ ) (cm@@ d@@ )); if (get@@ Name@@ ().@@ isEmpty()) { b@@ c.@@ set@@ Name(@@ command@@ Name); } else { b@@ c.@@ set@@ Name@@ ((((@@ get@@ Name@@ ()) + " ") + (@@ command@@ Name@@ ))); } } check@@ S@@ en@@ si@@ tive@@ Data@@ (@@ b@@ c@@ ); b@@ c.@@ set@@ Argument@@ s(@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )); } else if (!(@@ args.@@ isEmpty())) { throw di@@ e@@ (((@@ command@@ Name) + " do@@ es not t@@ a@@ k@@ e arg@@ ument@@ s@@ ")); } pro@@ vi@@ de@@ State@@ To@@ (cm@@ d); at@@ o@@ m@@ ic@@ Cm@@ d.@@ set@@ (cm@@ d); cm@@ d.@@ start@@ (@@ en@@ v@@ ); this@@ .set@@ S@@ en@@ si@@ tive@@ Par@@ am@@ at@@ er@@ s@@ (((@@ com.google.gerrit.sshd.@@ Base@@ Command@@ ) (cm@@ d@@ )@@ ).get@@ S@@ en@@ si@@ tive@@ Par@@ am@@ s()); } catch (@@ com.google.gerrit.sshd.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e e) { java.lang.String ms@@ g = e.get@@ Message@@ (); if (!(@@ ms@@ g.@@ end@@ sWith@@ ("@@ \n@@ "@@ ))) { ms@@ g +@@ = "@@ \n@@ "; } er@@ r.@@ write@@ (@@ msg@@ .get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.@@ E@@ N@@ C@@ )); er@@ r.@@ f@@ lu@@ sh@@ (); on@@ Ex@@ it@@ (@@ e.@@ ex@@ it@@ Code@@ ); } } }
void on@@ Execu@@ te@@ (@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d, int ex@@ it@@ Value@@ , com.google.gerrit.sshd.@@ Ssh@@ S@@ es@@ sion ssh@@ Session@@ ) { final com.google.gerrit.sshd.@@ Ssh@@ S@@ cop@@ e.@@ Context ct@@ x = cont@@ ext@@ .get(); ct@@ x.@@ fin@@ is@@ h@@ ed = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ M@@ s(); com.google.common.collect.List@@ Multimap@@ <java.lang.String, ?@@ > par@@ ameter@@ s = ext@@ r@@ act@@ Parameter@@ s(@@ cm@@ d); java.lang.String cm@@ d = ext@@ r@@ act@@ Wh@@ at(@@ cm@@ d, par@@ ameter@@ s); final org.apache.@@ log@@ 4@@ j@@ .@@ sp@@ i.@@ Log@@ gin@@ g@@ Event ev@@ ent = log@@ (cm@@ d); event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ W@@ A@@ IT@@ , ((@@ (ct@@ x.@@ star@@ ted@@ ) - (ct@@ x.@@ cre@@ ated@@ )) + "@@ ms@@ ")); event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ E@@ X@@ EC@@ (ct@@ x.@@ fin@@ is@@ h@@ ed@@ ) - (ct@@ x.@@ star@@ ted@@ )) + "@@ ms@@ ")); final java.lang.String statu@@ s; switch (@@ ex@@ it@@ Value@@ ) { case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ C@@ AN@@ C@@ E@@ L : statu@@ s = "@@ k@@ il@@ le@@ d@@ "; break@@ ; case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ NO@@ T_@@ F@@ O@@ UN@@ D : statu@@ s = "@@ not@@ -@@ fo@@ und@@ "; break@@ ; case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ NO@@ T_@@ AD@@ M@@ I@@ N : statu@@ s = "@@ not@@ -@@ admin@@ "; break@@ ; default : statu@@ s = java.lang.String.@@ value@@ Of(@@ ex@@ it@@ Value@@ ); break@@ ; } event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _S@@ T@@ AT@@ US@@ , statu@@ s); java.lang.String p@@ e@@ er@@ ent = ssh@@ Session@@ .get@@ P@@ e@@ er@@ Ag@@ ent@@ (); if (p@@ e@@ er@@ ent != null@@ ) { event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ A@@ G@@ E@@ N@@ T@@ , p@@ e@@ er@@ Ag@@ ent@@ ); } if ((@@ as@@ y@@ n@@ c@@ ) != null@@ ) { as@@ y@@ n@@ c.@@ append(@@ event@@ ); } au@@ dit@@ (ctx@@ , statu@@ s, ext@@ r@@ act@@ Wh@@ at(@@ d@@ Wh@@ at(@@ cm@@ d, par@@ ameter@@ s@@ ), par@@ ameter@@ s); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Action@@ Rule@@ Error@@ (java.lang.String err@@ ) { com.google.gerrit.server.project.@@ Change@@ Contro@@ l.@@ log.error@@ (@@ err@@ ); return action@@ Rule@@ Error@@ ("@@ E@@ rror e@@ valu@@ at@@ ing project ac@@ tion rule@@ s, ch@@ ec@@ k serv@@ er log@@ "); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Invalid@@ Action@@ (@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m rule@@ , com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m re@@ cor@@ d) { return log@@ Action@@ Rule@@ Error@@ ((((@@ ((@@ (("@@ Sub@@ m@@ it ac@@ tion r@@ ul@@ e " + rule@@ ) + " for change ") + (change@@ .getId@@ ())) + " of ") + (get@@ Project@@ ().get@@ Name@@ ())) + " out@@ pu@@ t in@@ vali@@ d result@@ : ") + re@@ cor@@ d@@ )); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Action@@ Rule@@ Error@@ (java.lang.String err@@ , java.lang.Exception e) { com.google.gerrit.server.project.@@ Change@@ Contro@@ l.@@ log.error@@ (@@ err@@ , e); return action@@ Rule@@ Error@@ ("@@ E@@ rror e@@ valu@@ at@@ ing project ac@@ tion rule@@ s, ch@@ ec@@ k serv@@ er log@@ "); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d action@@ Rule@@ Error@@ (java.lang.String err@@ ) { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Type@@ Recor@@ d.@@ Status.@@ R@@ U@@ L@@ E_@@ ER@@ RO@@ R@@ ; re@@ c.@@ error@@ Messag@@ e = err@@ ; return rec@@ ; }
@java.lang.Override protected void configure() { if ((@@ gerrit@@ Config@@ .get@@ String@@ (@@ plugin@@ Name, null@@ , "@@ url@@ ")) != null@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Module@@ .@@ LO@@ G@@ .@@ info@@ ("@@ J@@ I@@ R@@ A is configure@@ d a@@ s IT@@ S@@ "); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ .@@ class@@ ); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ F@@ ac@@ ad@@ e@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ I@@ t@@ s@@ F@@ ac@@ ad@@ e@@ .@@ class@@ ).@@ as@@ E@@ ag@@ er@@ S@@ ingleton@@ (); in@@ stall@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ I@@ t@@ s@@ Hook@@ Module@@ (@@ plugin@@ Name, plugin@@ C@@ fg@@ Factory@@ )); } }
@org.junit.Test public void gerrit@@ Config@@ Cont@@ ain@@ s@@ S@@ an@@ e@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ , null@@ , "@@ user@@ name@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ US@@ ER@@ ); wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ , null@@ , "@@ p@@ asswor@@ d@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ A@@ S@@ ); wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ , null@@ , "@@ url@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ URL@@ ); j@@ i@@ ra@@ Config = new com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ (c@@ fg@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAME@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .getUser@@ name@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ US@@ ER@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .get@@ P@@ asswor@@ d@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ A@@ S@@ S@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .get@@ Url@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ URL@@ ); }
private com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent cli@@ ent@@ () throw@@ s java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception { if ((@@ cli@@ ent@@ ) == null@@ ) { log.@@ de@@ bug@@ ("@@ Con@@ n@@ ec@@ t@@ ing to j@@ i@@ r@@ a@@ t {}@@ ", j@@ i@@ ra@@ Config@@ .get@@ Url@@ ()); cli@@ ent = new com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent@@ (@@ j@@ i@@ ra@@ Config@@ .get@@ Url@@ (), j@@ i@@ ra@@ Config@@ .getUser@@ name@@ (), j@@ i@@ ra@@ Config@@ .get@@ P@@ asswor@@ d@@ ()); log.@@ de@@ bug@@ ("@@ Auth@@ enti@@ c@@ at@@ ing a@@ s User {}@@ ", j@@ i@@ ra@@ Config@@ .getUser@@ name@@ ()); } return cli@@ ent@@ ; }
public java.lang.String get@@ Url@@ () { return j@@ i@@ ra@@ Url@@ ; }
private void auth@@ ori@@ ze@@ User@@ (com.google.gerrit.server.@@ Current@@ User user@@ , com.google.gerrit.server.project.Project@@ State state@@ , java.lang.String o@@ per@@ ation@@ ) throw@@ s org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ ze@@ d { com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name = state@@ .getName@@ Key@@ (); if (((@@ o@@ per@@ ation.@@ equals(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ D@@ O@@ W@@ N@@ LO@@ AD@@ )) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ Name@@ ).@@ test@@ Or@@ F@@ alse@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ RE@@ AD@@ )))) || ((@@ o@@ per@@ ation.@@ equals(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ U@@ P@@ LO@@ AD@@ )) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (project@@ Name@@ ).@@ test@@ Or@@ F@@ alse@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ P@@ US@@ H@@ _@@ A@@ T_@@ LE@@ S@@ T_@@ ON@@ E_@@ RE@@ F@@ )@@ )))) { java.lang.String o@@ p = o@@ per@@ ation.@@ to@@ L@@ ow@@ er@@ Case@@ (); java.lang.String project = state@@ .getProject@@ ().get@@ Name@@ (); java.lang.String user@@ Name = (user@@ .getUser@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ()) ? user@@ .getUser@@ Name@@ ().get@@ () : "@@ an@@ on@@ y@@ mo@@ us@@ "; com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ log.@@ de@@ bug@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ o@@ per@@ ation %s un@@ auth@@ ori@@ ze@@ d for user %s on project %s", op@@ , project@@ Name, project@@ )); throw new org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ zed@@ (@@ op@@ , project@@ ); } }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ De@@ code@@ Ag@@ ain@@ st@@ En@@ cod@@ ed@@ Input@@ () throw@@ s java.lang.Exception { java.lang.String pla@@ in = "@@ pla@@ in "; java.lang.String en@@ c@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ en@@ c@@ r@@ yp@@ t(@@ pla@@ in@@ ); java.util.@@ Optional@@ <java.lang.String> d@@ ec@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ d@@ ec@@ r@@ yp@@ t(@@ en@@ c@@ r@@ yp@@ ted@@ ); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ d@@ ec@@ r@@ yp@@ ted@@ .get@@ ()).@@ isEqualTo(@@ pla@@ in@@ ); }
private void auth@@ ori@@ zed@@ Op@@ (java.lang.String op@@ , com.google.gerrit.server.project.Project@@ State state@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ ze@@ d { java.lang.String project = state@@ .getProject@@ ().get@@ Name@@ (); java.lang.String user@@ Name = (user@@ .getUser@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ()) ? user@@ .getUser@@ Name@@ ().get@@ () : "@@ an@@ on@@ y@@ mo@@ us@@ "; com.googlesource.gerrit.plugins.@@ lfs.@@ lock@@ s.@@ Lfs@@ Lo@@ ck@@ s@@ Ac@@ tion.@@ log.@@ de@@ bug@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ o@@ per@@ ation %s un@@ auth@@ ori@@ ze@@ d for user %s on project %s", op@@ , user@@ Name, project@@ )); throw new org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ zed@@ (@@ op@@ , project@@ ); } }
@org.junit.Test public void test@@ Token@@ Ser@@ i@@ ali@@ z@@ ation@@ Des@@ er@@ i@@ ali@@ z@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ ess@@ ess@@ or pro@@ cess@@ or = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ (c@@ ip@@ her@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ 0); java.lang.String ser@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ); assert@@ Th@@ at(@@ ser@@ i@@ ali@@ zed@@ ).@@ is@@ Not@@ E@@ mpty@@ (); java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ > des@@ er@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ ze@@ ); assert@@ Th@@ at(@@ des@@ er@@ i@@ ali@@ zed@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ).@@ isEqualTo(@@ des@@ er@@ i@@ ali@@ zed@@ .get().@@ exp@@ i@@ res@@ At@@ ); }
public java.util.@@ Optional@@ <@@ T> des@@ er@@ i@@ ali@@ ze@@ (java.lang.String input@@ ) { java.util.@@ Optional@@ <java.lang.String> d@@ ec@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ d@@ ec@@ r@@ yp@@ t@@ (in@@ put@@ ); if (!(@@ d@@ ec@@ r@@ yp@@ ted@@ .is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } return create@@ Token@@ (@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ Pro@@ cess@@ or@@ .@@ DE@@ L@@ I@@ ME@@ T@@ ER@@ ).@@ s@@ pli@@ t@@ To@@ List(@@ d@@ ec@@ ted@@ .get@@ ())); }
protected abstract java.util.@@ Optional@@ <@@ T> create@@ Token@@ (@@ final java.util.List<java.lang.String> values@@ );
public boolean ve@@ r@@ if@@ y@@ Auth@@ Info@@ (java.lang.String auth@@ Token@@ , java.lang.String o@@ per@@ ation@@ , org.eclipse.jgit.@@ lfs.@@ lib.@@ An@@ y@@ L@@ on@@ g@@ Object@@ Id id@@ ) { java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > to@@ k@@ en = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ auth@@ Token@@ ); if (!(@@ token@@ .is@@ P@@ res@@ ent@@ ())) { return false@@ ; } return new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er@@ (@@ token@@ .get(), o@@ per@@ ation@@ , id@@ ).@@ ve@@ r@@ if@@ y@@ (); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 3@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (@@ values@@ .get(@@ 1@@ )), values@@ .get(@@ 2@@ ))); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), values@@ .get(@@ 1@@ ), values@@ .get(@@ 2@@ ), values@@ .get(@@ 3@@ ))); }
java.util.@@ Optional@@ <java.lang.String> get@@ User@@ From@@ Valid@@ Token@@ (java.lang.String auth@@ Token@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > to@@ k@@ en = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ auth@@ Token@@ ); if (!(@@ token@@ .is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ .get(), project, o@@ per@@ ation@@ ); if (!(@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ())) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ log.error@@ ("@@ In@@ vali@@ d dat@@ a w@@ a@@ s pro@@ vi@@ de@@ d w@@ it@@ h a@@ ut@@ h to@@ k@@ en {}@@ .@@ ", auth@@ Token@@ ); return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ token@@ .get().@@ user@@ ); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ values@@ .get(@@ 0@@ ))); }
public java.util.@@ Optional@@ <java.lang.String> d@@ ec@@ r@@ yp@@ t@@ (java.lang.String input@@ ) { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input@@ )) { return java.util.@@ Optional@@ .@@ empty@@ (); } byte@@ [] byte@@ s = org.eclipse.jgit.@@ util.@@ Base@@ 6@@ 4@@ .@@ de@@ code@@ (in@@ put@@ ); byte@@ [] init@@ V@@ ec@@ tor = java.util.Array@@ s.@@ copy@@ Of@@ (@@ byte@@ s, com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ C@@ ip@@ h@@ er.@@ I@@ V@@ _@@ LE@@ N@@ G@@ T@@ H@@ ); try { javax.@@ c@@ r@@ yp@@ to@@ .@@ C@@ ip@@ h@@ er c@@ ip@@ h@@ er = c@@ ip@@ her@@ (in@@ it@@ V@@ ec@@ tor@@ , javax.@@ c@@ r@@ yp@@ to@@ .@@ C@@ ip@@ h@@ er.@@ DE@@ C@@ R@@ Y@@ P@@ T_@@ M@@ O@@ DE@@ ); return java.util.@@ Optional@@ .@@ of@@ (@@ new java.lang.String@@ (c@@ ip@@ her@@ .@@ do@@ F@@ in@@ al@@ (@@ java.util.Array@@ s.@@ copy@@ Of@@ R@@ ange@@ (@@ byte@@ s, com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ C@@ ip@@ h@@ er.@@ I@@ V@@ _@@ LE@@ N@@ G@@ T@@ H@@ , byte@@ s.@@ length@@ )), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ General@@ S@@ ecu@@ ri@@ ty@@ Exception e) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ C@@ ip@@ h@@ er.@@ log.error@@ ("@@ Exception w@@ a@@ s n d@@ u@@ rin@@ g to@@ k@@ en ve@@ r@@ if@@ ic@@ ation@@ ", e); } return java.util.@@ Optional@@ .@@ empty@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ De@@ code@@ Ag@@ ain@@ st@@ Input@@ () throw@@ s java.lang.Exception { java.lang.String pla@@ in = "@@ pla@@ in "; java.lang.String en@@ c@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ en@@ c@@ r@@ yp@@ t(@@ pla@@ in@@ ); while ((@@ en@@ c@@ r@@ yp@@ ted@@ .@@ char@@ At@@ (@@ 0@@ )) == (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ char@@ At@@ (1@@ ))) { en@@ c@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ en@@ c@@ r@@ yp@@ t(@@ pla@@ in@@ ); } java.util.@@ Optional@@ <java.lang.String> d@@ ec@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ d@@ ec@@ r@@ yp@@ t@@ ((((@@ en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (1@@ , 2@@ )) + (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (@@ 0, 1@@ ))) + (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (@@ 2@@ )@@ ))); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .get@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ pla@@ in@@ ); }
public com.google.gerrit.server.@@ Current@@ User get@@ User@@ (java.lang.String auth@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ auth@@ ))) { if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ User@@ Provi@@ der.@@ B@@ A@@ S@@ I@@ C_@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { return user@@ .get(); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { java.util.@@ Optional@@ <java.lang.String> user = ssh@@ Auth@@ .getUser@@ From@@ Valid@@ Token@@ (@@ auth.@@ substring@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()), project, o@@ per@@ ation@@ ); if (user@@ .is@@ P@@ res@@ ent@@ ()) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > ac@@ c = account@@ s.get@@ By@@ User@@ name@@ (user@@ .get()); if (@@ ac@@ c.@@ is@@ P@@ res@@ ent@@ ()) { return user@@ Factory.create@@ (@@ ac@@ c@@ .get()); } } } return an@@ on@@ y@@ mo@@ u@@ s.get@@ (); }
public com.google.gerrit.server.@@ Current@@ User get@@ User@@ (java.lang.String auth@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ auth@@ ))) { if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ User@@ Provi@@ der.@@ B@@ A@@ S@@ I@@ C_@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { return user@@ .get(); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { java.util.@@ Optional@@ <java.lang.String> user = ssh@@ Auth@@ .getUser@@ From@@ Valid@@ Token@@ (@@ auth.@@ substring@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()), project, o@@ per@@ ation@@ ); if (user@@ .is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ State ac@@ c = account@@ s.get@@ By@@ User@@ name@@ (user@@ .get()); if (@@ ac@@ c != null@@ ) { return user@@ Factory.create@@ (@@ ac@@ c@@ ); } } } } return an@@ on@@ y@@ mo@@ u@@ s.get@@ (); }
@org.junit.Test public void test@@ On@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ O@@ for@@ m@@ at(@@ no@@ w@@ ().@@ p@@ lu@@ s@@ M@@ il@@ li@@ s(@@ 1@@ )@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Ex@@ p@@ i@@ red@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ IS@@ O@@ .@@ for@@ m@@ at(@@ no@@ w@@ ().@@ min@@ us@@ M@@ il@@ li@@ s(@@ 1@@ )@@ )).@@ is@@ F@@ alse@@ (); }
static boolean on@@ Time@@ (java.lang.String date@@ Tim@@ e) { java.lang.String no@@ w = com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ IS@@ O@@ .@@ for@@ m@@ at(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ no@@ w@@ ()); return (@@ no@@ w.@@ compare@@ To@@ (@@ date@@ Time@@ )) <@@ = 0; }
static java.lang.String time@@ out@@ (@@ int exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s) { return com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ IS@@ O@@ .@@ for@@ m@@ at(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ no@@ w@@ ().@@ p@@ lu@@ s@@ Se@@ con@@ d@@ s(@@ exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s@@ )); }
void append@@ Submit@@ ted@@ B@@ y(@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { sb.@@ append("@@ Submit@@ ted@@ -@@ by@@ : "); append@@ User@@ Data@@ (account@@ Id, account@@ ); sb.@@ append("@@ \n@@ "); }
private void append@@ User@@ Data@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ State@@ (((@@ ac@@ count == null@@ ) || (account@@ Id.@@ equals(@@ account@@ .getId@@ ()@@ )@@ )), "@@ mis@@ match@@ ing ac@@ count ID@@ s@@ "); boolean ne@@ ed@@ S@@ p@@ ac@@ e = false@@ ; boolean w@@ ro@@ te@@ Data = false@@ ; if (@@ ac@@ count != null@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .get@@ F@@ ull@@ Name@@ ()))) { sb.@@ append(@@ account@@ .get@@ F@@ ull@@ Name()); ne@@ ed@@ S@@ p@@ ac@@ e = true@@ ; w@@ ro@@ te@@ Data = true@@ ; } if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()))) { if (@@ ne@@ ed@@ S@@ pace@@ ) { sb.@@ append(@@ " "); } sb.@@ append("@@ <@@ ").@@ append(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()).@@ append("@@ >@@ "); w@@ ro@@ te@@ Data = true@@ ; } } if (!@@ w@@ ro@@ te@@ Data@@ ) { sb.@@ append(@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ).@@ append(@@ " #@@ ").@@ append(@@ account@@ Id); } }
private void create@@ CodeReview@@ Note@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.reviewdb.client.PatchSet ps@@ , com.googlesource.gerrit.plugins.@@ review@@ not@@ es.@@ Header@@ Format@@ ter fm@@ t@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l sub@@ m@@ it = null@@ ; for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s@@ Util.@@ by@@ PatchSet@@ (@@ review@@ Db@@ , notes@@ Factory.create@@ (change@@ .get@@ Owner@@ ()), ps@@ .getId@@ (), null@@ , null@@ , null@@ )) { if ((@@ a@@ .getValue@@ ()) == 0) { } else if (@@ a.@@ is@@ L@@ e@@ g@@ ac@@ y@@ Submit@@ ()) { sub@@ m@@ it = a@@ ; } else { com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ a@@ .get@@ Label@@ Id()); if (@@ typ@@ e != null@@ ) { fm@@ t.@@ append@@ Approval@@ (@@ type@@ , a@@ .getValue@@ (), a@@ .getAccount@@ Id(), account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ a@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); } } if (@@ sub@@ m@@ it != null@@ ) { fm@@ t.@@ append@@ Submit@@ ted@@ B@@ y(@@ submit@@ .getAccount@@ Id(), account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ submit@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); fm@@ t.@@ append@@ Submit@@ ted@@ At@@ (@@ submit@@ .get@@ G@@ ran@@ ted@@ ()); } if ((@@ can@@ on@@ ical@@ Web@@ Url@@ ) != null@@ ) { fm@@ t.@@ append@@ Review@@ ed@@ On@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ , ps@@ .getId@@ ().get@@ Parent@@ Key@@ ()); } fm@@ t.@@ append@@ Project@@ (project@@ .get()); fm@@ t.@@ append@@ Branch@@ (change@@ .get@@ Dest@@ ().get@@ ()); } }
private void append@@ User@@ Data@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ State@@ (((@@ ac@@ count == null@@ ) || (account@@ Id.@@ equals(@@ account@@ .getId@@ ()@@ )@@ )), "@@ mis@@ match@@ ing ac@@ count ID@@ s@@ "); boolean ne@@ ed@@ S@@ p@@ ac@@ e = false@@ ; boolean w@@ ro@@ te@@ Data = false@@ ; if (@@ ac@@ count != null@@ ) { if (((@@ account@@ .get@@ F@@ ull@@ Name@@ ()) != null@@ ) && (!(@@ account@@ .get@@ F@@ ull@@ Name@@ ().@@ isEmpty@@ ()))) { sb.@@ append(@@ account@@ .get@@ F@@ ull@@ Name()); ne@@ ed@@ S@@ p@@ ac@@ e = true@@ ; w@@ ro@@ te@@ Data = true@@ ; } if (((@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) && (!(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ().@@ isEmpty@@ ()))) { if (@@ ne@@ ed@@ S@@ pace@@ ) { sb.@@ append(@@ " "); } sb.@@ append("@@ <@@ ").@@ append(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()).@@ append("@@ >@@ "); w@@ ro@@ te@@ Data = true@@ ; } } if (!@@ w@@ ro@@ te@@ Data@@ ) { sb.@@ append(@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ).@@ append(@@ " #@@ ").@@ append(@@ account@@ Id); } }
void append@@ Approval@@ (@@ com.google.gerrit.common.data.@@ Label@@ Type label@@ , short value@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { sb.@@ append(@@ label@@ .getName@@ ()); sb.@@ append(@@ com.google.gerrit.common.data.@@ Label@@ Value@@ .@@ for@@ m@@ at@@ Value@@ (@@ value@@ )); sb.@@ append("@@ : "); append@@ User@@ Data@@ (account@@ Id, account@@ ); sb.@@ append("@@ \n@@ "); }
public org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Ident@@ (@@ com.google.gerrit.reviewdb.client.Account.Id author@@ Id, java.util.@@ D@@ ate wh@@ en@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > auth@@ or = account@@ Cache.@@ ma@@ y@@ be@@ Get@@ (@@ author@@ Id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ); return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ author@@ .@@ map@@ (@@ Account@@ :@@ get@@ Name@@ ).@@ or@@ E@@ l@@ se@@ (("@@ Account #@@ " + author@@ Id@@ )), (((@@ author@@ .get@@ ()) + "@@ @@@ ") + (@@ server@@ Id@@ )), wh@@ en@@ , server@@ Ident@@ .get@@ Time@@ Z@@ one@@ ()); }
java.lang.String get@@ Base@@ Url@@ () { return base@@ Url@@ ; }
private java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion pre@@ p@@ Http@@ Con@@ n@@ ection@@ (java.lang.String sp@@ ec@@ , boolean is@@ Po@@ st@@ Request@@ ) throw@@ s java.io.IOException { java.lang.String url@@ With@@ S@@ p@@ e@@ c = (@@ base@@ Url@@ ) + sp@@ ec@@ ; java.@@ net.@@ UR@@ L ur@@ l = new java.@@ net.@@ URL@@ (@@ url@@ With@@ S@@ p@@ ec@@ ); java.@@ net.@@ Pro@@ x@@ y@@ Se@@ lec@@ tor pro@@ x@@ y@@ Se@@ lec@@ tor = java.@@ net.@@ Pro@@ x@@ y@@ Se@@ lec@@ tor@@ .get@@ Default@@ (); java.@@ net.@@ Pro@@ x@@ y pro@@ x@@ y = org.eclipse.jgit.@@ util.@@ Http@@ Sup@@ p@@ ort.@@ pro@@ x@@ y@@ For@@ (@@ pro@@ x@@ y@@ Se@@ lec@@ tor@@ , url@@ ); java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion con@@ n = ((@@ java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ection@@ ) (@@ ur@@ l.@@ open@@ Con@@ n@@ ection@@ (@@ pro@@ x@@ y@@ ))); con@@ n@@ .set@@ Request@@ Pro@@ per@@ ty@@ ("@@ Auth@@ ori@@ z@@ ation@@ ", ("@@ B@@ as@@ i@@ c " + (@@ auth@@ ))); con@@ n@@ .set@@ Request@@ Pro@@ per@@ ty@@ ("@@ Content@@ -@@ Type@@ ", "@@ ap@@ plic@@ ation@@ /@@ json@@ "); if (@@ is@@ Po@@ st@@ ) { con@@ n@@ .set@@ Request@@ Met@@ ho@@ d@@ ("@@ P@@ O@@ ST@@ "); con@@ n@@ .set@@ Output@@ (@@ true@@ ); } else { con@@ n@@ .set@@ Request@@ Met@@ ho@@ d@@ ("@@ G@@ E@@ T@@ "); } return con@@ n; }
@java.lang.Override public void vali@@ date@@ New@@ Project@@ (com.google.gerrit.server.project.@@ Create@@ Project@@ Arg@@ s arg@@ s) throw@@ s com.google.gerrit.server.@@ validators.@@ Validation@@ Exception { java.lang.String name = arg@@ s.get@@ Project@@ Name@@ (); com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ vali@@ dat@@ ing cre@@ ation of {}@@ ", name); if (@@ name.@@ contains(@@ " ")) { throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at(@@ com.ericsson.gerrit.plugins.@@ project@@ project@@ Cre@@ ation@@ Validator@@ .@@ P@@ RO@@ JEC@@ T_@@ C@@ AN@@ NO@@ T_@@ CON@@ T@@ A@@ IN@@ S@@ _S@@ P@@ A@@ CES@@ _@@ M@@ S@@ G@@ , do@@ c@@ ument@@ ation@@ Url@@ )); } com.google.gerrit.server.project.Project@@ Control parent@@ C@@ tr@@ l@@ ; try { parent@@ C@@ tr@@ l = project@@ Control@@ Factory.@@ control@@ For@@ (arg@@ s@@ .@@ new@@ Parent@@ , self@@ .get()); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.error@@ ((((@@ (("@@ Fai@@ le@@ d to cre@@ ate project " + name@@ ) + "; Cannot ret@@ ri@@ ev@@ e in@@ fo ab@@ ou@@ t project ") + (arg@@ s@@ .@@ new@@ Parent@@ .get@@ ())) + "@@ : ") + (@@ e.get@@ Message@@ ()@@ )), e); throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ AN@@ _@@ RO@@ R@@ _@@ C@@ UR@@ RE@@ D@@ _@@ M@@ S@@ G@@ ); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); com.ericsson.gerrit.plugins.@@ project@@ Cre@@ ation@@ Validator@@ .@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ ad@@ m@@ in is cre@@ at@@ ing project, b@@ yp@@ as@@ s@@ ing al@@ l rule@@ s@@ "); return@@ ; } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { } if (@@ all@@ Project@@ s@@ Name@@ .get().@@ equals(@@ parent@@ C@@ tr@@ l@@ .getProject@@ ().get@@ NameKey@@ ())) { vali@@ date@@ R@@ oo@@ t@@ Project@@ (@@ name, args.@@ per@@ mission@@ s@@ Only@@ ); } else { vali@@ date@@ Project@@ ((!@@ (p@@ arent@@ C@@ tr@@ l.@@ is@@ Owner@@ ())) && (!(@@ config@@ Dis@@ able@@ G@@ ran@@ t@@ ing@@ Owner@@ (p@@ arent@@ Owner@@ )) { args.@@ t@@ ing@@ (p@@ arent@@ .get@@ Group@@ Id@@ s.add(@@ args.@@ owner@@ Group@@ (@@ create@@ Group@@ (@@ new@@ Project@@ s@@ )); } }
@java.lang.Override public void vali@@ date@@ New@@ Project@@ (com.google.gerrit.server.project.@@ Create@@ Project@@ Arg@@ s arg@@ s) throw@@ s com.google.gerrit.server.@@ validators.@@ Validation@@ Exception { java.lang.String name = arg@@ s.get@@ Project@@ Name@@ (); com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ vali@@ dat@@ ing cre@@ ation of {}@@ ", name); com.google.gerrit.server.project.Project@@ Control parent@@ C@@ tr@@ l@@ ; try { parent@@ C@@ tr@@ l = project@@ Control@@ Factory.@@ control@@ For@@ (arg@@ s@@ .@@ new@@ Parent@@ , self@@ .get()); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.error@@ ((((@@ (("@@ Fai@@ le@@ d to cre@@ ate project " + name@@ ) + "; Cannot ret@@ ri@@ ev@@ e in@@ fo ab@@ ou@@ t pa@@ ren@@ t project ") + (arg@@ s@@ .@@ new@@ Parent@@ .get@@ ())) + "@@ : ") + (@@ e.get@@ Message@@ ()@@ )), e); throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ com.ericsson.gerrit.plugins.@@ project@@ Cre@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ AN@@ _@@ ER@@ RO@@ R@@ _@@ O@@ C@@ UR@@ RE@@ D@@ _@@ M@@ S@@ G@@ ); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); com.ericsson.gerrit.plugins.@@ project@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ ad@@ m@@ in is cre@@ at@@ ing project, b@@ yp@@ as@@ s@@ ing al@@ l rule@@ s@@ "); return@@ ; } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { } if (@@ all@@ Project@@ s@@ Name@@ .get().@@ equals(@@ parent@@ C@@ tr@@ l@@ .getProject@@ ().get@@ NameKey@@ ())) { vali@@ date@@ R@@ oo@@ t@@ Project@@ (@@ name, args.@@ per@@ mission@@ s@@ Only@@ ); } else { vali@@ date@@ Project@@ (@@ name, parent@@ C@@ tr@@ l@@ ); } if ((!@@ (p@@ arent@@ C@@ tr@@ l.@@ is@@ Owner@@ ())) && (!(@@ config@@ able@@ G@@ ran@@ t@@ ing@@ Owner@@ (p@@ arent@@ C@@ tr@@ l@@ )))) { args.@@ owner@@ Id@@ s.add(@@ create@@ Group@@ ((@@ name + "@@ -@@ admin@@ "@@ ))); } }
public boolean is@@ s@@ ue@@ Ex@@ ist@@ s(@@ java.lang.String is@@ s@@ ue@@ Key@@ ) throw@@ s java.io.IOException { com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ re@@ stapi.@@ J@@ i@@ ra@@ Res@@ tApi@@ <@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ re@@ stapi.@@ J@@ i@@ ra@@ I@@ s@@ s@@ ue@@ > ap@@ i = ap@@ i@@ Builder@@ .get@@ I@@ s@@ s@@ s@@ ue@@ (); ap@@ i@@ .@@ do@@ Get@@ (@@ is@@ s@@ ue@@ Key@@ , java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ T@@ P@@ _@@ OK@@ , null@@ ); java.lang.@@ Integ@@ er co@@ de = ap@@ i@@ .get@@ Respon@@ se@@ Code@@ (); switch (@@ code@@ ) { case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ T@@ P@@ _@@ O@@ K : return true@@ ; case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ T@@ T@@ P@@ _@@ NO@@ T_@@ F@@ O@@ UN@@ D : com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent.@@ log.error@@ ("@@ I@@ s@@ su@@ e {@@ } not fo@@ und@@ ", is@@ s@@ ue@@ Key@@ ); return false@@ ; case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ T@@ P@@ _@@ F@@ OR@@ B@@ ID@@ DE@@ N : com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent.@@ log.error@@ ("@@ N@@ o per@@ mis@@ sion to rea@@ d I@@ s@@ su@@ e {}@@ ", is@@ s@@ ue@@ Key@@ ); return false@@ ; default : throw new java.io.IO@@ Exception(("@@ U@@ ne@@ x@@ p@@ ected H@@ T@@ T@@ P co@@ de re@@ ce@@ i@@ v@@ ed@@ :@@ " + (@@ e.@@ toString@@ ()))); } }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d(@@ java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All(@@ name@@ Or@@ Email@@ ); if ((@@ r.@@ size@@ ()) == 1@@ ) { return by@@ Id@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (r@@ .@@ iter@@ ator@@ ().@@ next@@ ()@@ ).get@@ Account@@ (); } com.google.gerrit.reviewdb.client.@@ Account m@@ atch = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account.Id id : r@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > ac@@ count = by@@ Id.@@ ma@@ y@@ be@@ Get@@ (id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ); if ((!@@ (@@ account.@@ is@@ P@@ res@@ ent@@ ())) || (!(@@ account@@ .get().@@ is@@ Active@@ ()))) { continue@@ ; } if (m@@ atch != null@@ ) { return null@@ ; } m@@ atch = account@@ .get(); } return match@@ ; }
protected java.lang.String get@@ From@@ Line@@ () { final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ from@@ Id@@ ).get@@ Account@@ (); final java.lang.String name = account@@ .get@@ F@@ ull@@ Name@@ (); final java.lang.String e@@ mai@@ l = account@@ .get@@ Pref@@ er@@ red@@ Email@@ (); java.lang.String@@ Builder f = new java.lang.String@@ Builder@@ (); if (((@@ name != null@@ ) && (!(@@ name.@@ isEmpty@@ ()))) || ((@@ e@@ mai@@ l != null@@ ) && (!(@@ e@@ mail.@@ isEmpty@@ ()@@ )))) { f.@@ append("@@ From@@ "); if ((@@ name != null@@ ) && (!(@@ name.@@ isEmpty@@ ()))) { f.@@ append(@@ " ").@@ append(@@ name); } if ((@@ e@@ mai@@ l != null@@ ) && (!(@@ e@@ mail.@@ isEmpty@@ ()))) { f.@@ append(@@ " <@@ ").@@ append(@@ email@@ ).@@ append("@@ >@@ "); } f.@@ append("@@ :@@ \n@@ "); } return f.@@ toString@@ (); }
private void append@@ Ident@@ (@@ java.io.@@ P@@ r@@ int@@ Wri@@ ter wri@@ ter@@ , java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id id, java.sql.@@ Tim@@ est@@ am@@ p t@@ s) { org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new@@ Ident@@ (account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ).get@@ Account@@ (), t@@ s, server@@ Ident@@ ); java.lang.String@@ Builder name = new java.lang.String@@ Builder@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (@@ name, id@@ ent@@ .getName@@ ()); name.@@ append(@@ " <@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (@@ name, id@@ ent@@ .get@@ Email@@ Add@@ ress@@ ()); name.@@ append(@@ '@@ >@@ '); append@@ Header@@ Fiel@@ d(@@ wri@@ ter@@ , head@@ er, name.@@ toString@@ ()); }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d@@ By@@ Name@@ Or@@ Email@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); return (r@@ .@@ size@@ ()) == 1 ? by@@ Id@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (r@@ .@@ iter@@ ator@@ ().@@ next@@ ()@@ ).get@@ Account@@ () : null@@ ; }
private void add@@ Submit@@ Recor@@ d@@ Label@@ s(@@ Submit@@ Recor@@ d submit@@ Recor@@ d, com.google.gerrit.server.@@ data.@@ Submit@@ Recor@@ d@@ Attri@@ but@@ e s@@ a@@ ) { if (((@@ submit@@ Recor@@ d.@@ label@@ s) != null@@ ) && (!(@@ submit@@ Recor@@ d.@@ label@@ s.@@ isEmpty@@ ()))) { label@@ s = new java.util.Array@@ List(); for (@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l b@@ l : submit@@ Recor@@ d.@@ label@@ s) { com.google.gerrit.server.@@ data.@@ Submit@@ Label@@ Attri@@ but@@ e l@@ a = new com.google.gerrit.server.@@ data.@@ Submit@@ Label@@ Attribute@@ (); l@@ abe@@ l = b@@ l@@ a.@@ statu@@ ; l@@ a.@@ statu@@ s = b@@ l.@@ statu@@ s.@@ name@@ (); if ((@@ l@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) { com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ l@@ l.@@ b@@ l.@@ ap@@ pli@@ ed@@ By@@ ); l@@ a.@@ b@@ y = as@@ Account@@ Attribute@@ (account@@ State@@ ); } } }
public com.google.gerrit.server.@@ data.@@ Account@@ Attri@@ but@@ e as@@ Account@@ Attribute@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { if (@@ id == null@@ ) { return null@@ ; } return as@@ Account@@ Attribute@@ (account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ )); }
protected Account.@@ Id get@@ Account@@ State@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { return account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ (); }
protected void remove@@ User@@ s@@ Th@@ at@@ I@@ g@@ no@@ red@@ Th@@ e@@ Change@@ () { for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id, java.util.Collection@@ <java.lang.String@@ >> e : star@@ s.@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { if (@@ e.get@@ Value@@ ().@@ contains(@@ Star@@ red@@ Changes@@ Util.@@ I@@ G@@ NO@@ RE@@ _@@ L@@ AB@@ E@@ L@@ )) { args.@@ account@@ Cache@@ .get(@@ e.get@@ Key@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ )@@ .@@ if@@ P@@ res@@ ent@@ (@@ ( a@@ ) -@@ > remove@@ User@@ (@@ a@@ )); } } }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) throw@@ s java.lang.Exception { op@@ Result = com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Po@@ st@@ Reviewer@@ s@@ O@@ p.@@ Result.@@ buil@@ der@@ ().set@@ Add@@ ed@@ Reviewer@@ s(@@ com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ add@@ ed@@ Reviewer@@ s@@ )).@@ set@@ Add@@ ed@@ C@@ s(@@ com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ add@@ ed@@ C@@ s@@ )).@@ bu@@ ild@@ (); email@@ Reviewer@@ s(@@ rsrc@@ .getChange@@ (), com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ add@@ ed@@ Reviewer@@ s, ( r@@ ) -@@ > r@@ .getAccount@@ Id@@ ()), ((@@ add@@ ed@@ C@@ C@@ s) == null ? com.google.common.collect.Immutable@@ List.@@ of@@ () : add@@ ed@@ C@@ s@@ ), reviewer@@ s@@ By@@ Email@@ , add@@ ed@@ C@@ s@@ By@@ Email@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ ); if (!(@@ add@@ ed@@ Reviewer@@ s.@@ isEmpty())) { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > reviewer@@ s = add@@ ed@@ Reviewer@@ s.@@ stream@@ ().@@ map@@ (@@ ( r@@ ) -@@ > account@@ Cache@@ .get@@ Ev@@ en@@ I@@ M@@ is@@ s@@ ing@@ (r@@ .getAccount@@ Id@@ ()@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); reviewer@@ Add@@ ed@@ .@@ fi@@ re@@ (rsrc@@ .getChange@@ (), patchSet@@ , reviewer@@ s, ctx@@ .getAccount@@ (), ctx@@ .get@@ Wh@@ en@@ ()); } }
private void log@@ Orm@@ Exception@@ (java.lang.String head@@ er, me@@ , java.lang.I@@ terable@@ <?@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.lang.String@@ Builder messag@@ e = new java.lang.String@@ Builder@@ (@@ head@@ er@@ ); messag@@ e.@@ append(@@ " "); messag@@ e.@@ append(@@ me@@ ); messag@@ e.@@ append("@@ /@@ "); messag@@ e.@@ append(@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ me@@ ).get@@ User@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ )); messag@@ e.@@ append("@@ : "); messag@@ e.@@ append(@@ com.google.common.base.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ ; ").@@ j@@ o@@ in@@ (@@ values@@ )); com.google.gerrit.server.g@@ roup.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er.@@ log.error@@ (@@ messag@@ e.@@ toString@@ (), e); }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : values@@ ) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = m@@ .getAccount@@ Id(); java.lang.String user@@ Name = account@@ Cache@@ .get@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ User@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = m@@ .getAccount@@ Group@@ Id(); java.lang.String group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ ac@@ count {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , g@@ roup {@@ 2@@ }@@ /@@ {@@ 3@@ }@@ ", account@@ Id, user@@ Name, group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
@java.lang.Override public com.google.gerrit.server.mail.@@ Add@@ res@@ s from@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ Id@@ ) { java.lang.String sen@@ der@@ Name@@ ; if (@@ from@@ Id != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ from@@ Id@@ ).get@@ Account@@ (); java.lang.String f@@ ull@@ Name = a@@ .get@@ F@@ ull@@ Name@@ (); java.lang.String user@@ E@@ mai@@ l = a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if (c@@ an@@ Re@@ la@@ y(@@ user@@ Email@@ )) { return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ f@@ ull@@ Name, user@@ Email@@ ); } if ((@@ f@@ ull@@ Name == null@@ ) || ("@@ "@@ .equals(@@ f@@ ull@@ Name.@@ tri@@ m@@ ()))) { f@@ ull@@ Name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } sen@@ der@@ Name = name@@ Re@@ write@@ T@@ mp@@ l.@@ replace@@ ("@@ user@@ ", f@@ ull@@ Name@@ ).@@ toString@@ (); } else { sen@@ der@@ Name = server@@ Add@@ ress@@ .getName@@ (); } } java.lang.String sen@@ der@@ Email@@ ; com.google.gerrit.common.data.@@ Parameter@@ i@@ zed@@ Strin@@ g sen@@ der@@ Pat@@ ter@@ n = new com.google.gerrit.common.data.@@ Parameter@@ i@@ zed@@ String@@ (@@ server@@ Add@@ res@@ s.get@@ Email@@ ()); if (s@@ en@@ der@@ Email@@ Pat@@ tern@@ .get@@ Parameter@@ Nam@@ es().@@ isEmpty()) { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .get@@ R@@ a@@ w@@ Pat@@ tern@@ (); } else { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ ", com.google.gerrit.server.mail.@@ sen@@ d.@@ has@@ From@@ Add@@ ress@@ Gener@@ ator@@ Provi@@ der.@@ has@@ h@@ Of@@ (s@@ en@@ der@@ Name@@ )).@@ toString@@ (); } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ sen@@ der@@ Name, sen@@ der@@ Email@@ ); }
@java.lang.Override public com.google.gerrit.server.mail.@@ Add@@ res@@ s from@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ Id@@ ) { final java.lang.String sen@@ der@@ Name@@ ; if (@@ from@@ Id != null@@ ) { final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ from@@ Id@@ ).get@@ Account@@ (); java.lang.String f@@ ull@@ Name = account@@ .get@@ F@@ ull@@ Name@@ (); if ((@@ f@@ ull@@ Name == null@@ ) || ("@@ "@@ .equals(@@ f@@ ull@@ Name@@ ))) { f@@ ull@@ Name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } sen@@ der@@ Name = name@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ ", f@@ ull@@ Name@@ ).@@ toString@@ (); } else { sen@@ der@@ Name = server@@ Add@@ ress@@ .getName@@ (); } java.lang.String sen@@ der@@ Email@@ ; if (s@@ en@@ der@@ Email@@ Pat@@ tern@@ .get@@ Parameter@@ Nam@@ es().@@ isEmpty()) { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .get@@ R@@ a@@ w@@ Pat@@ tern@@ (); } else { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ Hash@@ ", com.google.gerrit.server.mail.@@ sen@@ d.@@ From@@ Add@@ ress@@ Gener@@ ator@@ Provi@@ der.@@ has@@ h@@ Of@@ (s@@ en@@ der@@ Name@@ )).@@ toString@@ (); } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ sen@@ der@@ Name, sen@@ der@@ Email@@ ); }
private org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Author@@ Ident@@ (com.google.gerrit.server.@@ notedb.@@ re@@ buil@@ d.@@ Event@@ List<@@ ?@@ > event@@ s) { com.google.gerrit.reviewdb.client.Account.Id id = event@@ s.get@@ Account@@ Id(); if (@@ id == null@@ ) { return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ , event@@ s.get@@ Wh@@ en@@ ()); } return change@@ Note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ).get@@ Account@@ (), event@@ s.get@@ Wh@@ en@@ (), server@@ Ident@@ ); }
public java.lang.String get@@ User@@ Name@@ Email@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State wh@@ o = args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id); java.lang.String name = who@@ .getAccount@@ ().get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = who@@ .getAccount@@ ().get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ name != null@@ ) && (@@ e@@ mai@@ l != null@@ )) { return ((@@ name + " <@@ ") + email@@ ) + "@@ >@@ "; } if (@@ e@@ mai@@ l != null@@ ) { return email@@ ; } else if (@@ name != null@@ ) { return name@@ ; } return who@@ .getUser@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); }
private java.lang.String@@ Builder add@@ Ident@@ (@@ java.lang.String@@ Builder s@@ b@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ Account@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new@@ Ident@@ , wh@@ en@@ ); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (s@@ b@@ , id@@ ent@@ .getName@@ ()); sb.@@ append(@@ " <@@ org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (s@@ b@@ , id@@ ent@@ .get@@ Email@@ Add@@ ress@@ ()); sb.@@ append(@@ '@@ >@@ '); return s@@ b@@ ; }
public java.lang.String get@@ Name@@ Email@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State wh@@ o = args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id); java.lang.String name = who@@ .getAccount@@ ().get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = who@@ .getAccount@@ ().get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ name != null@@ ) && (@@ e@@ mai@@ l != null@@ )) { return ((@@ name + " <@@ ") + email@@ ) + "@@ >@@ "; } else if (@@ name != null@@ ) { return name@@ ; } else if (@@ e@@ mai@@ l != null@@ ) { return email@@ ; } else { return ((@@ args.@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name) + " #@@ ") + account@@ Id@@ ; } }
private com.google.gerrit.server.mail.@@ Add@@ res@@ s to@@ Add@@ res@@ s(@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { final com.google.gerrit.reviewdb.client.@@ Account a = args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ).get@@ Account@@ (); final java.lang.String e = a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if ((!@@ (@@ a.@@ is@@ Active@@ ())) || (@@ e == null@@ )) { return null@@ ; } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ a@@ .get@@ F@@ ull@@ Name@@ (), e); }
protected java.lang.String get@@ Name@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { if (account@@ Id == null@@ ) { return arg@@ s@@ .g@@ errit@@ Per@@ son@@ Ident@@ (); } final com.google.gerrit.reviewdb.client.@@ Account user@@ Account = args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ Account@@ (); java.lang.String name = user@@ Account@@ .get@@ F@@ ull@@ Name@@ (); if (@@ name == null@@ ) { name = user@@ Account@@ .get@@ Pref@@ er@@ red@@ Email@@ (); } if (@@ name == null@@ ) { name = ((@@ args.@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name) + " #@@ ") + account@@ Id@@ ; } return name@@ ; }
private Account.@@ Id user@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.server.account.Account@@ State s = ma@@ k@@ e@@ User@@ (@@ name, email@@ ); expec@@ t(@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ e@@ q@@ (@@ s.get@@ Account@@ ().get@@ Id@@ ()@@ )@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ s); return s.get@@ Account@@ ().get@@ Id(); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Group@@ Member@@ s(@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group group@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > se@@ en@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { se@@ en@@ .@@ add(@@ group@@ .get@@ Group@@ UUID@@ ()); com.google.gerrit.server.account.@@ Group@@ Control group@@ Control = group@@ Control@@ Factory.@@ control@@ For@@ (@@ new com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Description@@ (@@ group@@ )); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > di@@ re@@ ct@@ Member@@ s = group@@ .get@@ Member@@ s().@@ stream@@ ().@@ filter@@ (@@ group@@ Control@@ :@@ can@@ Se@@ e@@ Member@@ ).@@ map@@ (account@@ Cache@@ :@@ get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > in@@ di@@ re@@ ct@@ Member@@ s = new java.util.Hash@@ Set<@@ >(); if (@@ group@@ Contro@@ l.@@ can@@ Se@@ e@@ Group@@ ()) { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : group@@ .get@@ Sub@@ s()) { if (!(@@ se@@ en@@ .@@ contains(@@ sub@@ U@@ u@@ id@@ ))) { in@@ di@@ re@@ ct@@ Member@@ s.@@ add@@ All(@@ list@@ Account@@ s(@@ sub@@ U@@ u@@ id, project, se@@ en@@ )); } } } return com.google.common.collect.@@ Set@@ s.@@ un@@ i@@ on@@ (@@ di@@ re@@ ct@@ Member@@ s, in@@ di@@ re@@ ct@@ Member@@ s); }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d(@@ java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All(@@ name@@ Or@@ Email@@ ); if ((@@ r.@@ size@@ ()) == 1@@ ) { return by@@ Id@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (r@@ .@@ iter@@ ator@@ ().@@ next@@ ()@@ ).get@@ Account@@ (); } com.google.gerrit.reviewdb.client.@@ Account m@@ atch = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account.Id id : r@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > ac@@ count = by@@ Id@@ .get(@@ id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ); if ((!@@ (@@ account.@@ is@@ P@@ res@@ ent@@ ())) || (!(@@ account@@ .get().@@ is@@ Active@@ ()))) { continue@@ ; } if (m@@ atch != null@@ ) { return null@@ ; } m@@ atch = account@@ .get(); } return match@@ ; }
@java.lang.Override public final void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) throw@@ s java.lang.Exception { if (change@@ Al@@ read@@ y@@ Merged@@ ) { log@@ De@@ bug@@ ("@@ S@@ kip@@ p@@ ing post@@ -@@ updat@@ e ste@@ p@@ s for change {}@@ ", get@@ Id()); return@@ ; } post@@ Update@@ Im@@ pl@@ (ctx@@ ); if ((@@ command@@ ) != null@@ ) { args.@@ tag@@ Cache.@@ update@@ F@@ ast@@ For@@ war@@ d(@@ get@@ Project@@ (), command@@ .getRef@@ Name@@ (), command@@ .get@@ O@@ ld@@ Id(), command@@ .get@@ New@@ Id()); if (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ get@@ Dest@@ ().get@@ ())) { args.@@ project@@ Cache.@@ e@@ vi@@ ct@@ (get@@ Project@@ ()); com.google.gerrit.server.project.Project@@ State p = args.@@ project@@ Cache@@ .get(@@ get@@ Project@@ ()); try (@@ org.eclipse.jgit.lib.Repository g@@ it = args.@@ repo@@ Manager.@@ open@@ Repository(@@ get@@ Project@@ ())) { git.@@ set@@ Git@@ web@@ Description@@ (p@@ .getProject@@ ().get@@ Description@@ ()); } } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ str@@ ateg@@ y.@@ Submit@@ Strateg@@ y@@ O@@ p.@@ log.error@@ (("@@ can@@ not updat@@ e des@@ crip@@ tion of " + (p@@ .getName@@ ()@@ )), e); } } try { args.@@ merg@@ ed@@ S@@ en@@ der@@ Factory.create@@ (ctx@@ .getProject@@ (), get@@ Id(), submit@@ ter@@ .getAccount@@ Id(), args.@@ not@@ if@@ y@@ , args.@@ account@@ s@@ To@@ No@@ t@@ if@@ y@@ ).@@ send@@ Async@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.git.@@ str@@ ateg@@ y.@@ Submit@@ Strateg@@ y@@ O@@ p.@@ log.error@@ (("@@ Cannot e@@ mai@@ l merge@@ d not@@ if@@ ic@@ ation for " + (get@@ Id@@ ()@@ )), e); } if (((@@ merge@@ Result@@ Rev@@ ) != null@@ ) && (!(@@ args.@@ d@@ ry@@ run@@ ))) { args.@@ change@@ Merged@@ .@@ fi@@ re@@ (@@ updat@@ ed@@ Change@@ , merg@@ ed@@ PatchSet@@ , args.@@ account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ submit@@ ter@@ .getAccount@@ Id@@ ()), args.@@ merge@@ Tip@@ .get@@ Current@@ Tip@@ (), ctx@@ .get@@ Wh@@ en@@ ()); } } }
@java.lang.Override public void fi@@ ll@@ Account@@ Info@@ (java.lang.@@ I@@ terable@@ <@@ ? extends com.google.gerrit.extensions.common.@@ Account@@ Info> in@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Fil@@ l@@ Option@@ s@@ > o@@ ption@@ s) throw@@ s com.google.gerrit.server.account.@@ Di@@ rec@@ tor@@ y@@ Exception { if (@@ o@@ ption@@ s.@@ equals(@@ com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Di@@ rec@@ tor@@ y.@@ ID@@ _@@ ON@@ L@@ Y@@ )) { return@@ ; } for (@@ com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo : in@@ ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (info.@@ _@@ account@@ Id); com.google.gerrit.server.account.Account@@ State st@@ ate = account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ); fi@@ ll@@ (info@@ , state@@ .get@@ ExternalId@@ s@@ (), o@@ ption@@ s); } }
private void create@@ CodeReview@@ Note@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.reviewdb.client.PatchSet ps@@ , com.googlesource.gerrit.plugins.@@ review@@ not@@ es.@@ Header@@ Format@@ ter fm@@ t@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l sub@@ m@@ it = null@@ ; for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s@@ Util.@@ by@@ PatchSet@@ (@@ review@@ Db@@ , notes@@ Factory.create@@ (change@@ .get@@ Owner@@ ()), ps@@ .getId@@ (), null@@ , null@@ , null@@ )) { if ((@@ a@@ .getValue@@ ()) == 0) { } else if (@@ a.@@ is@@ L@@ e@@ g@@ ac@@ y@@ Submit@@ ()) { sub@@ m@@ it = a@@ ; } else { com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ a@@ .get@@ Label@@ Id()); if (@@ typ@@ e != null@@ ) { fm@@ t.@@ append@@ Approval@@ (@@ type@@ , a@@ .getValue@@ (), a@@ .getAccount@@ Id(), account@@ Cache@@ .get(@@ a@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); } } } if (@@ sub@@ m@@ it != null@@ ) { fm@@ t.@@ append@@ Submit@@ ted@@ B@@ y(@@ submit@@ .getAccount@@ Id(), account@@ Cache@@ .get(@@ submit@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); fm@@ t.@@ append@@ Submit@@ ted@@ At@@ (@@ submit@@ .get@@ G@@ ran@@ ted@@ ()); } } if ((@@ can@@ on@@ ical@@ Web@@ Url@@ ) != null@@ ) { fm@@ t.@@ append@@ Review@@ ed@@ On@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ , ps@@ .getId@@ ().get@@ Parent@@ Key@@ ()); } fm@@ t.@@ append@@ Project@@ (project@@ .get()); fm@@ t.@@ append@@ Branch@@ (change@@ .get@@ Dest@@ ().get@@ ()); } }
private void rep@@ ort@@ Member@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Resource group@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ List@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String name@@ s = account@@ Id@@ List.@@ stream@@ ().@@ map@@ (@@ ( account@@ Id@@ ) -@@ > com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (account@@ Cache@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ Account@@ ().get@@ Pref@@ er@@ red@@ Email@@ (), "@@ n@@ /@@ a@@ "@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ , ")); out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Member@@ s %s g@@ roup %s@@ : %s@@ \n@@ ", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ E@@ N@@ C@@ )); }
@org.junit.Test public void b@@ lock@@ Push@@ Draft@@ s() { allow@@ (p@@ arent@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , "@@ ref@@ s@@ /@@ for@@ /@@ refs/@@ *@@ "); b@@ lock@@ (p@@ arent@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/@@ draft@@ s/@@ *@@ "); allow@@ (@@ local@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ RE@@ G@@ IS@@ TE@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , "@@ refs/@@ draft@@ s/@@ *@@ "); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Control u = user@@ (@@ local@@ ); assert@@ Create@@ Change@@ ("@@ refs/heads/@@ master@@ ", u@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/@@ d@@ raf@@ /@@ master@@ ").@@ can@@ P@@ er@@ for@@ m@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ )).@@ is@@ F@@ alse@@ (); }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.server.notedb.@@ NoteDb@@ Change@@ State.@@ Ref@@ State@@ > parse@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, java.util.List<java.lang.String> par@@ t@@ s) { check@@ Argument@@ ((!@@ (@@ par@@ t@@ s.@@ isEmpty@@ ()@@ )), "@@ mis@@ s@@ ing st@@ ate st@@ rin@@ g for change %s", change@@ Id); org.eclipse.jgit.lib.ObjectId change@@ Met@@ a@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ par@@ t@@ s.get(@@ 0@@ )); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id, org.eclipse.jgit.lib.Object@@ Id> draft@@ Id@@ s = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (((@@ par@@ t@@ s.@@ size@@ ()) - 1@@ )); com.google.common.base.@@ S@@ pli@@ t@@ ter s = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ =@@ '); for (@@ int i = 1; i < (@@ par@@ t@@ s.@@ size()); i@@ ++@@ ) { java.lang.String p = par@@ t@@ s.get(@@ i@@ ); java.util.List<java.lang.String> draft@@ P@@ art@@ s = s.@@ s@@ pli@@ t@@ To@@ List@@ (p@@ ); check@@ Argument@@ (((@@ draft@@ P@@ art@@ s.@@ size@@ ()) == 2@@ ), "@@ in@@ vali@@ d d@@ raf@@ t st@@ ate par@@ t for change %s@@ : %s", change@@ Id, p@@ ); java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id = Account.@@ Id.@@ parse@@ (@@ draft@@ P@@ art@@ s.get(@@ 0@@ )); check@@ Argument@@ (account@@ Id.@@ is@@ P@@ res@@ ent@@ (), "@@ in@@ vali@@ d ac@@ count I@@ D in d@@ raf@@ t st@@ ate par@@ t for change %s@@ : %s", change@@ Id, p@@ ); draft@@ Id@@ s.@@ put(@@ account@@ Id@@ .get(), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ draft@@ P@@ art@@ s.get(@@ 1@@ ))); } return java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ notedb.@@ NoteDb@@ Change@@ State.@@ Ref@@ State.@@ create@@ (change@@ Met@@ a@@ Id, draft@@ Id@@ s@@ )); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ Auth@@ Result@@ > by@@ Account@@ Id@@ (java.lang.String id@@ Str@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id = Account.@@ Id.@@ parse@@ (id@@ Str@@ ); if (!(@@ id@@ .is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } try { return auth@@ (account@@ s.get(@@ id@@ .get@@ ())); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { get@@ Servlet@@ Context@@ ().@@ log@@ ("@@ can@@ not quer@@ y dat@@ abase@@ ", e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ All@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.@@ re@@ g@@ ex@@ .@@ Match@@ er m = java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ .@@ * \@@ \@@ ((@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ )@@ \@@ )@@ $@@ ").@@ match@@ er@@ (@@ name@@ Or@@ Email@@ ); if (@@ m.@@ match@@ es@@ ()) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id = Account.@@ Id.@@ parse@@ (m@@ .g@@ roup@@ (1@@ )); if (id@@ .is@@ P@@ res@@ ent@@ ()) { return com.google.common.collect.@@ Stream@@ s.@@ stream@@ (account@@ s.get(@@ id@@ .get@@ ()@@ )).@@ map@@ (@@ ( a@@ ) -@@ > id@@ .get@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es@@ ("@@ ^@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ $@@ ")) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id = Account.@@ Id.@@ parse@@ (@@ name@@ Or@@ Email@@ ); if (id@@ .is@@ P@@ res@@ ent@@ ()) { return com.google.common.collect.@@ Stream@@ s.@@ stream@@ (account@@ s.get(@@ id@@ .get@@ ()@@ )).@@ map@@ (@@ ( a@@ ) -@@ > id@@ .get@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es(@@ Account.@@ US@@ ER@@ _@@ NA@@ M@@ E_@@ P@@ AT@@ T@@ ER@@ N@@ )) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > wh@@ o = by@@ Id@@ .get@@ By@@ User@@ name@@ (@@ name@@ Or@@ Email@@ ); if (@@ wh@@ o.@@ is@@ P@@ res@@ ent@@ ()) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ wh@@ o.@@ a@@ ) -@@ > a@@ .getAccount@@ ().get@@ Id@@ ()@@ ).get@@ ()); } } return fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); }
@java.lang.Override public com.google.gerrit.server.mail.@@ Par@@ sed@@ To@@ k@@ en de@@ code@@ (java.lang.String token@@ String@@ ) throw@@ s com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception { check@@ Email@@ Re@@ gist@@ r@@ ation@@ Token@@ (); com.google.gwtjsonrpc.@@ server.@@ Valid@@ To@@ k@@ en token@@ ; try { to@@ k@@ en = email@@ Re@@ gist@@ r@@ ation@@ Token@@ .@@ check@@ Token@@ (@@ token@@ String@@ , null@@ ); } catch (@@ com.google.gwtjsonrpc.@@ server.@@ X@@ sr@@ f@@ Exception err@@ ) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception(@@ err@@ ); } if (((@@ to@@ k@@ en == null@@ ) || ((@@ token@@ .get@@ Data@@ ()) == null@@ )) || (@@ token@@ .get@@ Data@@ ().@@ isEmpty())) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception@@ (); } java.lang.String pa@@ y@@ lo@@ ad = new java.lang.String@@ (@@ org.eclipse.jgit.@@ util.@@ Base@@ 6@@ 4@@ .@@ de@@ code@@ (@@ token@@ .get@@ Data@@ ()), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); java.util.@@ re@@ g@@ ex@@ .@@ Match@@ er match@@ er = java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ [@@ 0@@ -@@ 9@@ ]@@ +@@ )@@ :@@ (@@ @@@ .@@ +@@ )@@ $@@ ").@@ match@@ er@@ (p@@ a@@ y@@ load@@ ); if (!(@@ match@@ er.@@ match@@ es@@ ())) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception@@ (); } com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (@@ match@@ er@@ .g@@ roup@@ (1@@ )).@@ or@@ E@@ l@@ se@@ (@@ Invalid@@ Token@@ Exception@@ :@@ new@@ ); java.lang.String new@@ E@@ mai@@ l = match@@ er@@ .g@@ roup@@ (@@ 2); return new com.google.gerrit.server.mail.@@ Par@@ sed@@ Token@@ (id@@ , new@@ Email@@ ); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> parse@@ (java.lang.String str@@ ) { try { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (java.lang.@@ Integ@@ er.@@ parse@@ In@@ t(@@ str@@ ))); } catch (java.lang.@@ Number@@ Format@@ Exception e) { return java.util.@@ Optional@@ .@@ empty@@ (); } }
private static void d@@ ashbo@@ ar@@ d(@@ java.lang.String token@@ ) { java.lang.String res@@ t = com.google.gerrit.client.@@ Dis@@ patch@@ er.@@ s@@ kip@@ (@@ token@@ ); java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id = Account.@@ Id.@@ parse@@ (re@@ st@@ ); if (account@@ Id.@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (account@@ Id@@ .get@@ ())); return@@ ; } if (@@ rest.@@ e@@ quals("@@ self@@ ")) { if (@@ com.google.gerrit.client.Gerrit.@@ is@@ Sig@@ ned@@ In@@ ()) { com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (com.google.gerrit.client.@@ Gerrit@@ .getUser@@ Account@@ ().get@@ Id@@ ())); } else { com.google.gerrit.client.ui.@@ S@@ cre@@ en s = new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (@@ null@@ ); s.set@@ Requ@@ i@@ res@@ Sig@@ n@@ In@@ (@@ true@@ ); com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , s); } return@@ ; } if (@@ rest.@@ startsWith@@ ("@@ ?@@ ")) { com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.changes.@@ C@@ u@@ st@@ o@@ m@@ D@@ ashbo@@ ard@@ Screen@@ (@@ rest.@@ substring@@ (1@@ ))); return@@ ; } com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.@@ NotFound@@ Screen@@ ()); }
private java.lang.String change@@ K@@ ind@@ Message@@ (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d change@@ K@@ ind@@ ) { switch (change@@ K@@ ind@@ ) { case M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ AT@@ E : return ("@@ N@@ e@@ w merg@@ e p@@ atch se@@ t w@@ a@@ s ad@@ de@@ d w@@ it@@ h a new fi@@ r@@ s@@ t pa@@ ren@@ t re@@ l@@ ati@@ v@@ e to " + (p@@ ri@@ or@@ PatchSet@@ Id@@ .get@@ ())) + "@@ .@@ "; case T@@ R@@ I@@ V@@ I@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E : return ("@@ P@@ atch Set " + (p@@ ri@@ or@@ PatchSet@@ Id@@ .get@@ ())) + " w@@ a@@ s re@@ b@@ as@@ ed@@ .@@ "; case NO@@ _@@ CHANG@@ E : return ((("@@ N@@ e@@ w p@@ atch se@@ t w@@ a@@ s ad@@ de@@ d w@@ it@@ h w@@ it@@ h am@@ s@@ am@@ e t@@ ree@@ , parent@@ " + ((@@ commit@@ .getParent@@ Count@@ ()) != 1 ? "@@ s@@ " : "@@ ")) + ", an@@ d commit messag@@ e a@@ s P@@ atch Set ") + (p@@ ri@@ or@@ PatchSet@@ Id@@ .get@@ ())) + "@@ .@@ "; case NO@@ _@@ CO@@ D@@ E_@@ CHANG@@ E : return "@@ Commit messag@@ e w@@ a@@ s updat@@ ed@@ .@@ "; case RE@@ W@@ OR@@ K : default : return null@@ ; } }
@java.lang.Override public void on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > add@@ ed@@ Sub@@ group@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > in@@ clu@@ des@@ Au@@ di@@ t = add@@ ed@@ Sub@@ group@@ s.@@ stream@@ ().@@ map@@ (@@ ( t@@ ) -@@ > to@@ Account@@ Group@@ By@@ Id@@ Au@@ d(@@ parent@@ , parent@@ Group@@ Id, add@@ ed@@ On@@ , me@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (in@@ clu@@ des@@ Au@@ dit@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g ad@@ d group@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ Sub@@ group@@ s, parent@@ Group@@ Id, e); } }
@java.lang.Override public void on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > remo@@ v@@ ed@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { final java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d a : db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ by@@ Group@@ Inclu@@ de@@ (p@@ arent@@ Group@@ Id, u@@ u@@ id@@ )) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } } db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , remo@@ v@@ ed@@ , parent@@ Group@@ Id, e); } }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account.Id id : account@@ s) { java.lang.String user@@ Name = account@@ Cache@@ .get(@@ id@@ ).get@@ User@@ Name@@ (); java.lang.String group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ ac@@ count {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , g@@ roup {@@ 2@@ }@@ /@@ {@@ 3@@ }@@ ", id, user@@ Name, group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); }
private static com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t to@@ Account@@ Group@@ Member@@ Au@@ dit@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p t@@ s, com.google.gerrit.reviewdb.client.Account.Id m@@ e) { return new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ d@@ it.@@ Key@@ (id@@ , group@@ Id, t@@ s@@ ), me@@ ); }
public void dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> remo@@ v@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ actor@@ , remo@@ v@@ ed@@ Account@@ s, group@@ Id, remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m g@@ roup event@@ ", e); } }
@java.lang.Override public void on@@ Add@@ Sub@@ group@@ s(@@ com.google.gerrit.server.@@ au@@ dit@@ .g@@ roup.@@ Group@@ Sub@@ group@@ Au@@ dit@@ Event event) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Au@@ dit@@ List@@ en@@ er.@@ to@@ Account@@ Group@@ By@@ Id@@ Au@@ dit@@ s(@@ event@@ )); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Sub@@ group@@ s@@ Event@@ ("@@ Cannot lo@@ g ad@@ d group@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", e); } }
private void remove@@ Sub@@ group@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ U@@ u@@ id@@ s, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> sub@@ s@@ To@@ Remo@@ v@@ e = sub@@ U@@ u@@ id@@ s.@@ stream@@ ().@@ map@@ (@@ ( sub@@ group@@ U@@ u@@ id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (p@@ arent@@ Group@@ Id, sub@@ group@@ U@@ u@@ id@@ )).@@ map@@ (@@ Account@@ Group@@ By@@ Id@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), sub@@ U@@ u@@ id@@ s, parent@@ Group@@ Id, remo@@ v@@ ed@@ On@@ ); } db.account@@ Group@@ By@@ Id@@ ().@@ delete@@ (@@ sub@@ s@@ To@@ Remo@@ ve@@ ); }
private static com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d to@@ Account@@ Group@@ By@@ Id@@ Au@@ d(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p t@@ s, com.google.gerrit.reviewdb.client.Account.Id m@@ e) { return new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d.@@ Key@@ (@@ group@@ Id, u@@ u@@ id, t@@ s@@ ), me@@ ); }
private void add@@ Sub@@ group@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ U@@ u@@ id@@ s, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> new@@ Sub@@ group@@ s = sub@@ group@@ U@@ u@@ id@@ s.@@ stream@@ ().@@ map@@ (@@ ( sub@@ group@@ U@@ u@@ id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (p@@ arent@@ Group@@ Id, sub@@ group@@ U@@ u@@ id@@ )).@@ map@@ (@@ Account@@ Group@@ By@@ Id@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Add@@ Group@@ s@@ To@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), sub@@ U@@ u@@ id@@ s, parent@@ Group@@ Id, add@@ ed@@ On@@ ); } db.account@@ Group@@ By@@ Id@@ ().@@ insert@@ (@@ new@@ Sub@@ group@@ s); }
@java.lang.Override public void on@@ Add@@ Member@@ s(@@ com.google.gerrit.server.@@ au@@ dit@@ .g@@ roup.@@ Group@@ Member@@ Au@@ dit@@ Event event) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Group@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er.@@ to@@ Account@@ Group@@ Member@@ Au@@ dit@@ s(@@ event@@ )); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Member@@ s@@ Event@@ ("@@ Cannot lo@@ g ad@@ d account@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", event@@ , e); } }
private void remove@@ Group@@ Member@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ s, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > me@@ mber@@ s@@ To@@ Remo@@ v@@ e = account@@ Id@@ s.@@ stream@@ ().@@ map@@ (@@ ( account@@ Id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ )).@@ map@@ (@@ Account@@ Group@@ Member@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), account@@ Id@@ s, group@@ Id, remo@@ v@@ ed@@ On@@ ); } db.account@@ Group@@ Member@@ s().@@ delete@@ (@@ me@@ mber@@ s@@ To@@ Remo@@ ve@@ ); }
@java.lang.Override public void on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> add@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = add@@ ed@@ Account@@ s.@@ stream@@ ().@@ map@@ (@@ ( t@@ ) -@@ > to@@ Account@@ Group@@ Member@@ Au@@ dit@@ (t@@ , group@@ Id, add@@ ed@@ On@@ , me@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g ad@@ d account@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ Account@@ s, group@@ Id, e); } }
public void dis@@ patch@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> add@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ Account@@ s, group@@ Id, add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g ad@@ d account@@ s to g@@ roup event@@ ", e); } }
private void add@@ Group@@ Member@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> new@@ Member@@ Id@@ s, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > new@@ Member@@ s = new@@ Member@@ Id@@ s.@@ stream@@ ().@@ map@@ (@@ ( account@@ Id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ )).@@ map@@ (@@ Account@@ Group@@ Member@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Account@@ s@@ To@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), new@@ Member@@ s, group@@ Id, add@@ ed@@ On@@ ); } db.account@@ Group@@ Member@@ s().@@ insert@@ (@@ new@@ Member@@ s); }
public void dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > remo@@ v@@ ed@@ Sub@@ group@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ actor@@ , remo@@ v@@ ed@@ Sub@@ s, group@@ s, remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m g@@ roup event@@ ", e); } }
public void dis@@ patch@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > add@@ ed@@ Sub@@ group@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ Sub@@ group@@ s, group@@ Id, add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ f@@ ai@@ le@@ d to lo@@ g ad@@ d group@@ s to g@@ roup event@@ ", e); } }
private void log@@ Orm@@ Exception@@ For@@ Group@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > u@@ u@@ id@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id : u@@ id@@ s) { java.lang.String group@@ Name = group@@ Back@@ end@@ .get(@@ u@@ u@@ id@@ ).get@@ Name@@ (); java.lang.String t@@ arget@@ Group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ g@@ roup {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , g@@ roup {@@ 2@@ }@@ /@@ {@@ 3@@ }@@ ", u@@ id, group@@ Name, group@@ Id, t@@ arget@@ Group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ Im@@ pl@@ (@@ com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > db@@ ) throw@@ s java.lang.Exception { try { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (@@ new@@ Change@@ Data@@ (db@@ .get(), project, id@@ )); return true@@ ; } } catch (com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception e) { com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ Change w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing re@@ index@@ ing th@@ e change@@ "); } return false@@ ; }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ Im@@ pl@@ (@@ com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > db@@ ) throw@@ s java.lang.Exception { try { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (@@ new@@ Change@@ Data@@ (db@@ .get(), project, id@@ )); return true@@ ; } } catch (com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception n@@ s@@ ce@@ ) { com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ Change {@@ } w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing re@@ index@@ ing th@@ e change.@@ ", id@@ .get()); } catch (@@ java.lang.Exception e) { if (!(@@ is@@ C@@ au@@ sed@@ By@@ Repository@@ NotFound@@ Exception(@@ e@@ ))) { throw e@@ ; } com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ Change {@@ } b@@ e@@ long to a de@@ le@@ ted project, ab@@ ort@@ ing re@@ index@@ ing th@@ e change.@@ ", id@@ .get()); } return false@@ ; }
@java.lang.Override public void on@@ Event@@ (com.google.gerrit.server.@@ events.@@ Event event) { if (!(@@ publi@@ sh@@ er@@ Th@@ read@@ .is@@ A@@ li@@ ve@@ ())) { publi@@ sh@@ er@@ Th@@ read@@ .@@ start@@ (); } if (!(@@ qu@@ e@@ u@@ e.@@ o@@ ff@@ er@@ (@@ event@@ ))) { if (!(@@ f@@ ull@@ Que@@ ue@@ )) { com.googlesource.gerrit.plugins.@@ r@@ ab@@ b@@ it@@ m@@ q@@ .@@ messag@@ e.@@ Message@@ Message@@ Message@@ G@@ ER@@ .@@ error@@ ("@@ Cannot re@@ ce@@ i@@ v@@ e event@@ s, Que@@ u@@ e is f@@ ul@@ "); f@@ ull@@ Que@@ u@@ e = true@@ ; } } else if (@@ f@@ ull@@ Que@@ ue@@ ) { com.googlesource.gerrit.plugins.@@ r@@ ab@@ b@@ it@@ m@@ q@@ .@@ messag@@ e.@@ Message@@ Message@@ G@@ ER@@ .@@ warn@@ ("@@ Que@@ u@@ e is pro@@ cess@@ able ag@@ ain@@ "); f@@ ull@@ Que@@ u@@ e = false@@ ; } }
@java.lang.Override public java.util.Set<@@ com.google.gerrit.server.change.@@ Su@@ ggest@@ ed@@ Reviewer@@ > suggest@@ Reviewer@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String query@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> can@@ di@@ dat@@ es) { java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > s@@ ection@@ s = get@@ Section@@ s(@@ project@@ Name); if (!(@@ s@@ ection@@ s.@@ isEmpty())) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db = schema@@ Factory.@@ open@@ ()) { com.google.gerrit.server.query.change.Change@@ Data change@@ Data = change@@ Data@@ Factory.create@@ (@@ review@@ Db@@ , project@@ Name, change@@ Id); java.util.@@ Set@@ <java.lang.String> reviewer@@ s = fin@@ d@@ Reviewer@@ s(@@ s@@ ection@@ s, change@@ Data@@ ); if (!(@@ reviewer@@ s.@@ isEmpty())) { return to@@ Account@@ s(@@ review@@ Db@@ , reviewer@@ s, project@@ Name, null@@ ).@@ stream@@ ().@@ map@@ (@@ ( a@@ ) -@@ > suggest@@ ed@@ Reviewer@@ (@@ a@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception x@@ ) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s.@@ log.error@@ (@@ x@@ .get@@ Message@@ (), x@@ ); } } return new java.util.Hash@@ Set<@@ >(); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ ) -@@ > new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ not a G@@ erri@@ t int@@ er@@ n@@ al group@@ ")); if (re@@ cur@@ si@@ ve@@ ) { return get@@ T@@ ran@@ si@@ tive@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return get@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
@java.lang.Override @@@ com.google.gerrit.common.@@ Null@@ able public synchronized <@@ T> java.util.@@ Optional@@ <@@ T> get@@ (com.google.gerrit.server.@@ Pro@@ per@@ ty@@ Key@@ <@@ T> key@@ ) { if ((@@ pro@@ per@@ ti@@ es) != null@@ ) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") T valu@@ e = ((@@ T@@ ) (@@ pro@@ per@@ ti@@ es@@ .get(@@ key@@ ))); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ valu@@ e); } return java.util.@@ Optional@@ .@@ empty@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ Account@@ s@@ In@@ Group@@ (java.lang.String group@@ Name@@ Or@@ UUID@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > g@@ roup = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ group@@ Name@@ Or@@ UUID@@ )@@ )).@@ or@@ E@@ l@@ se@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ group@@ Name@@ Or@@ UUID@@ ))); if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.warn@@ ("@@ Group {@@ } w@@ a@@ s not fo@@ und@@ ", group@@ Name@@ Or@@ UUID@@ ); return java.util.Collections.@@ empty@@ Set@@ (); } try (com.google.gerrit.server.@@ util.@@ M@@ an@@ u@@ al@@ Request@@ Context ct@@ x = one@@ O@@ ff@@ Request@@ Contex@@ t.@@ open@@ A@@ s(@@ admin@@ User@@ .getAccount@@ Id@@ ())) { return group@@ Member@@ s.@@ create(@@ admin@@ User@@ ).@@ list@@ Account@@ s(@@ group@@ .get@@ ().get@@ Group@@ UUID@@ (), null@@ ).@@ stream@@ ().@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | com.google.gwtorm.server.OrmException e) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.error@@ (("@@ Un@@ able to li@@ s@@ t account@@ s in g@@ roup " + group@@ ), e); return java.util.Collections.@@ empty@@ Set@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Branch@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.@@ api.@@ errors.@@ Git@@ AP@@ I@@ Exception, org.eclipse.jgit.errors.ConfigInvalidException { per@@ mission@@ Back@@ en@@ d.@@ user@@ (id@@ ent@@ if@@ i@@ ed@@ User@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); com.googlesource@@ .gerrit.@@ plugins@@ .@@ super@@ ma@@ n@@ if@@ es@@ t.@@ Sup@@ er@@ M@@ an@@ if@@ est@@ Ref@@ Updated@@ List@@ en@@ er.@@ log.@@ info@@ ("@@ m@@ an@@ u@@ al tri@@ gg@@ er for %s@@ :@@ %s b@@ y %@@ d@@ . Config@@ : %s", resource@@ .get@@ Branch@@ Key@@ ().get@@ Parent@@ Key@@ (), resource@@ .get@@ Branch@@ Key@@ ().get@@ (), id@@ ent@@ if@@ i@@ ed@@ User@@ .get@@ ().get@@ Account@@ Id@@ ().get@@ (), config@@ ur@@ ation@@ To@@ String@@ ()); update@@ (@@ resource@@ .getProject@@ ().get@@ Project@@ ().get@@ Name@@ (), resource@@ .getRef@@ (), false@@ ); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ Account@@ s@@ In@@ Group@@ (java.lang.String group@@ Name@@ Or@@ UUID@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ > g@@ roup = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ group@@ Name@@ Or@@ UUID@@ )@@ )).@@ or@@ E@@ l@@ se@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ group@@ Name@@ Or@@ UUID@@ ))); if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.warn@@ ("@@ Group {@@ } w@@ a@@ s not fo@@ und@@ ", group@@ Name@@ Or@@ UUID@@ ); return java.util.Collections.@@ empty@@ Set@@ (); } try { return group@@ Member@@ s.@@ list@@ Account@@ s(@@ group@@ .get@@ ().get@@ Group@@ UUID@@ (), null@@ ).@@ stream@@ ().@@ map@@ (@@ Account@@ :@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.error@@ (("@@ Un@@ able to li@@ s@@ t account@@ s in g@@ roup " + group@@ ), e); return java.util.Collections.@@ empty@@ Set@@ (); } }
private java.util.Map<java.lang.String, java.lang.O@@ bject@@ > to@@ F@@ oo@@ ter@@ S@@ o@@ y@@ Data@@ (@@ com.google.gitiles.@@ P@@ ag@@ in@@ at@@ or p@@ ag@@ in@@ ator@@ , @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.String revision@@ , com.google.gitiles.@@ Log@@ S@@ o@@ y@@ Dat@@ a.@@ F@@ oo@@ ter@@ Be@@ h@@ a@@ vi@@ or@@ ) { switch (@@ be@@ h@@ a@@ vi@@ or@@ ) { case N@@ E@@ X@@ T : org.eclipse.jgit.lib.ObjectId ne@@ x@@ t = p@@ ag@@ in@@ ator@@ .get@@ N@@ ext@@ Start@@ (); if (@@ ne@@ x@@ t == null@@ ) { return com.google.common.collect.Immutable@@ Map.@@ of@@ (); } return com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ next@@ Url@@ ", copy@@ And@@ Can@@ on@@ ic@@ ali@@ ze@@ (@@ revision@@ ).@@ replace@@ Par@@ am@@ Log@@ Servlet.@@ ST@@ AR@@ T_@@ P@@ AR@@ A@@ M@@ , ne@@ x@@ t.@@ name@@ ()).@@ to@@ Url@@ (), "@@ next@@ Text@@ ", "@@ N@@ ext@@ "); case LO@@ G@@ _@@ HE@@ A@@ D : return com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ next@@ Url@@ ", com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ log@@ ().@@ copy@@ From@@ (@@ view@@ ).to@@ Url@@ (), "@@ next@@ Text@@ ", "@@ Log@@ "); default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(("@@ unk@@ no@@ w@@ n foo@@ ter h@@ a@@ vi@@ or@@ : " + be@@ h@@ a@@ vi@@ or@@ )); } }
@java.lang.Override public java.lang.String auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ Current@@ User user@@ , java.util.List<java.lang.String> arg@@ s) throw@@ s com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Failure@@ , com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { java.lang.String project = arg@@ s.get(@@ 0); java.lang.String o@@ per@@ ation = arg@@ s.get(@@ 1); java.lang.String@@ Builder h@@ re@@ f = new java.lang.String@@ Builder@@ (@@ url@@ .get@@ Pro@@ to@@ co@@ l@@ ()).@@ append("@@ :@@ /@@ ").@@ append(@@ url@@ .get@@ Auth@@ ori@@ ty@@ ()).@@ append(@@ path@@ ).@@ append@@ ((@@ path@@ .@@ end@@ sWith@@ ("/@@ ") ? "@@ " : "@@ )).@@ append(@@ project@@ ).@@ append("@@ /@@ lf@@ s@@ "); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ (user@@ , project, o@@ per@@ ation@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Ex@@ p@@ i@@ ring@@ Ac@@ tion ac@@ tion = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Action@@ (@@ h@@ ref@@ .@@ toString@@ (), info@@ ); return g@@ son.@@ to@@ Json@@ (@@ action@@ ); } catch (@@ java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception e) { throw new com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Failure@@ (1@@ , ((("@@ Ser@@ ve@@ r config@@ ur@@ ation error@@ : " + "@@ for@@ min@@ g G@@ it L@@ F@@ S end@@ p@@ o@@ int UR@@ L f@@ ro@@ m can@@ on@@ ical@@ Web@@ Ur@@ l [@@ ") + (c@@ an@@ on@@ ical@@ Web@@ Url@@ )) + "@@ ] f@@ ai@@ le@@ d.@@ ")); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { final org.eclipse.jgit.revwalk.RevCommit commit = re@@ ce@@ ive@@ Ev@@ ent.@@ commit@@ ; final org.eclipse.jgit.lib.@@ Ab@@ b@@ re@@ vi@@ ated@@ Object@@ Id id = comm@@ it.@@ ab@@ b@@ re@@ vi@@ ate@@ (@@ 7@@ ); java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > message@@ s = new java.util.ArrayList<@@ >(); if (@@ this@@ .@@ max@@ Sub@@ ject@@ L@@ en@@ gth@@ ) < (@@ commit@@ .get@@ Sh@@ ort@@ Message@@ ().@@ length@@ ())) { on@@ Line@@ T@@ oo@@ L@@ on@@ g@@ (id@@ , messag@@ es@@ , (("@@ commit sub@@ ject >@@ " + (@@ this@@ .@@ max@@ Sub@@ ject@@ L@@ en@@ gth@@ )) + " char@@ ac@@ ter@@ s; u@@ se short@@ er fi@@ r@@ s@@ t par@@ ag@@ rap@@ h@@ ")); } int long@@ Line@@ C@@ n@@ t = 0; int n@@ on@@ E@@ mpty@@ C@@ n@@ t = 0; for (java.lang.String lin@@ e : thi@@ r@@ d@@ par@@ ty@@ .g@@ ava@@ .@@ common.@@ base.@@ S@@ pli@@ t@@ ter.@@ (@@ '@@ \n@@ '@@ ).@@ s@@ pli@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ())) { if (!(@@ line@@ .@@ tri@@ m@@ ().@@ isEmpty())) { n@@ on@@ E@@ mpty@@ C@@ nt@@ ++@@ ; } if (@@ this@@ .@@ max@@ Line@@ L@@ en@@ gth@@ ) < (@@ line@@ .@@ length@@ ())) { long@@ Line@@ C@@ ++@@ ; } if (@@ long@@ Line@@ C@@ n@@ t > ((@@ (@@ long@@ Lin@@ es@@ Th@@ res@@ h@@ old@@ ) * n@@ on@@ E@@ mpty@@ ) / 1@@ 00@@ )) { on@@ Line@@ T@@ oo@@ L@@ on@@ g@@ (id@@ , messag@@ es@@ , (("@@ to@@ o m@@ an@@ y commit messag@@ e line@@ s long@@ er th@@ an " + (@@ this@@ .@@ max@@ Line@@ L@@ en@@ gth@@ )) + " char@@ ac@@ ter@@ s; m@@ an@@ u@@ ally w@@ ra@@ p lin@@ es@@ ")); } return messag@@ es@@ ; }
@java.lang.Override public final int parse@@ Argument@@ s(@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ sp@@ i.@@ Parameter@@ s par@@ am@@ s) throw@@ s org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception { final java.lang.String to@@ k@@ en = par@@ am@@ s.get@@ Parameter@@ (@@ 0); final java.util.List<java.lang.String> token@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ ,@@ '@@ ).@@ s@@ pli@@ t(@@ token@@ )); if ((@@ token@@ s.@@ size@@ ()) != 3@@ ) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , "@@ change sh@@ o@@ ul@@ d b@@ e sp@@ e@@ c@@ if@@ i@@ ed a@@ s <@@ project@@ >@@ ,@@ <@@ branch@@ >@@ ,@@ <@@ change@@ -@@ id@@ >@@ "); } try { final com.google.gerrit.reviewdb.client.Change.@@ Key k@@ ey = Change.@@ Key@@ .@@ parse@@ (@@ token@@ s.get(@@ 2@@ )); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ token@@ s.get(@@ 0@@ )); final com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key b@@ ran@@ ch = new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (project@@ , token@@ s.get(@@ 1@@ )); for (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d : query@@ Provider@@ .get().@@ by@@ Branch@@ Key@@ (@@ branch@@ , key@@ )) { set@@ ter.@@ add@@ Value@@ (c@@ d@@ .getId()); return 1; } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , "@@ Change@@ -@@ Id is not valid@@ "); } catch (com.google.gwtorm.server.OrmException e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , ("@@ Dat@@ ab@@ ase error@@ : " + (@@ e.get@@ Message@@ ()))); } throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , (("@@ \"@@ " + token@@ ) + "@@ \"@@ : change not fo@@ und@@ ")); }
private static java.util.Map<java.lang.String, java.lang.String> get@@ Parameter@@ s(@@ javax.servlet.http.HttpServlet@@ Request req@@ ) { final java.util.Map<java.lang.String, java.lang.String> par@@ am@@ s = new java.util.Hash@@ Map@@ <@@ >(); for (java.lang.String p@@ ai@@ r : com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ com.google.gerrit.http@@ d@@ .g@@ it@@ we@@ b.@@ Git@@ web@@ Servlet.@@ Q@@ U@@ ER@@ Y_@@ S@@ P@@ L@@ I@@ T_@@ P@@ AT@@ T@@ ER@@ N@@ ).@@ s@@ pli@@ t@@ (req@@ .get@@ Query@@ String@@ ())) { final int e@@ q = p@@ ai@@ r.@@ index@@ Of(@@ '@@ =@@ '); if (@@ 0 < e@@ q@@ ) { java.lang.String name = p@@ ai@@ r.@@ substring@@ (@@ 0, e@@ q@@ ); java.lang.String valu@@ e = p@@ ai@@ r.@@ substring@@ ((@@ e@@ q + 1@@ )); name = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ de@@ code@@ (@@ name); valu@@ e = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ de@@ code@@ (@@ valu@@ e); par@@ am@@ s.@@ put(@@ name, valu@@ e); } } return par@@ am@@ s; }
private void init@@ () { java.util.List<java.lang.String> va@@ r@@ P@@ art@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ .@@ '@@ ).@@ s@@ pli@@ t@@ (s@@ ection@@ And@@ Key@@ )); if ((@@ va@@ r@@ P@@ art@@ s.@@ size@@ ()) != 2@@ ) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception@@ ((("@@ In@@ vali@@ d name '@@ " + (s@@ ection@@ And@@ Key@@ )) + "@@ '@@ : exp@@ ected s@@ ec@@ tion.@@ k@@ ey for@@ m@@ at@@ ")); } s@@ ec@@ tion = va@@ r@@ P@@ art@@ s.get(@@ 0); k@@ ey = va@@ r@@ P@@ art@@ s.get(@@ 1); }
private java.lang.String get@@ PublicKey@@ P@@ art@@ (@@ int index@@ , java.lang.String default@@ Value@@ ) { java.lang.String s = get@@ Ssh@@ PublicKey@@ (); if ((@@ s != null@@ ) && ((@@ s.@@ length@@ ()) > 0@@ )) { java.util.List<java.lang.String> par@@ t@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ ' '@@ ).@@ s@@ pli@@ t@@ (s@@ )); return par@@ t@@ s.@@ size@@ ()) > index@@ ) { return par@@ t@@ s.get@@ (in@@ dex@@ ); } return default@@ Value@@ ; }
public static java.lang.String tri@@ m@@ Qu@@ o@@ t@@ ation@@ (java.lang.String comment@@ ) { java.util.@@ String@@ J@@ o@@ in@@ er j = new java.util.@@ String@@ J@@ o@@ in@@ er@@ ("@@ \n@@ "); java.util.List<java.lang.String> line@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ \n@@ '@@ ).@@ s@@ pli@@ t(@@ comment@@ )); for (@@ int i = 0; i < ((@@ lin@@ es.@@ size@@ ()) - 2); i@@ ++@@ ) { j@@ .@@ add(@@ lin@@ es@@ .get(@@ i@@ )); } java.lang.String last@@ Lin@@ e = lin@@ es@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 1@@ )); if (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ Par@@ ser@@ Util.@@ contains@@ Qu@@ o@@ t@@ ation@@ Pat@@ tern@@ (@@ last@@ Line@@ )) { if ((@@ lin@@ es.@@ size@@ ()) > 1@@ ) { j@@ .@@ add(@@ lin@@ es@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ ))); } return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); } if ((@@ lin@@ es.@@ size@@ ()) > 1@@ ) { java.lang.String last@@ Line@@ s = (@@ lin@@ es@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ ))) + last@@ Line@@ ; if (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ Par@@ ser@@ Util.@@ Qu@@ o@@ t@@ ation@@ Pat@@ tern@@ (@@ last@@ Lin@@ es@@ )) { return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); } } if ((@@ lin@@ es.@@ size@@ ()) > 1@@ ) { j@@ .@@ add(@@ lin@@ es@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ ))); } j@@ .@@ add(@@ lin@@ es@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 1@@ ))); return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); }
private void read@@ C@@ g@@ i@@ Header@@ s(@@ javax.servlet.http.HttpServlet@@ Response res@@ , java.io.@@ Input@@ Stream in@@ ) throw@@ s java.io.IOException { java.lang.String line@@ ; while (!@@ ((@@ lin@@ e = read@@ Line@@ (in@@ )).@@ isEmpty())) { if (@@ line@@ .@@ startsWith@@ ("@@ H@@ T@@ P@@ ")) { throw new java.io.IO@@ Exception(("@@ N@@ H C@@ G@@ I not sup@@ p@@ orted@@ : " + line@@ )); } final int se@@ p = line@@ .@@ index@@ Of(@@ '@@ :@@ '); if (@@ se@@ p < 0) { throw new java.io.IO@@ Exception(("@@ C@@ G@@ I return@@ ed in@@ vali@@ d head@@ er@@ : " + line@@ )); } final java.lang.String k@@ ey = line@@ .@@ substring@@ (@@ 0, se@@ ).@@ tri@@ m@@ (); final java.lang.String valu@@ e = line@@ .@@ substring@@ ((@@ se@@ p + 1@@ )).@@ tri@@ m@@ (); if ("@@ Lo@@ c@@ ation@@ "@@ .@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (key@@ )) { re@@ s.@@ send@@ Re@@ di@@ re@@ ct@@ (@@ valu@@ e); } else if ("@@ Statu@@ s@@ "@@ .@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (key@@ )) { final java.util.List<java.lang.String> to@@ k@@ en = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ ' '@@ ).@@ s@@ pli@@ t(@@ value@@ )); final int statu@@ s = java.lang.@@ Integ@@ er.@@ parse@@ In@@ t(@@ token@@ .get(@@ 0@@ )); re@@ s.set@@ Statu@@ s(@@ statu@@ s); } else { re@@ s.@@ add@@ Header@@ (key@@ , valu@@ e); } }
private void configure@@ A@@ li@@ as@@ es@@ () { com.google.gerrit.sshd.@@ Command@@ Name g@@ erri@@ t = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ ("@@ gerrit@@ "); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.String> e : ali@@ as@@ es.@@ en@@ try@@ Set@@ ()) { java.lang.String name = e.get@@ Key@@ (); java.util.List<java.lang.String> des@@ t = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ com.google.gerrit.sshd.@@ Ssh@@ Module@@ .@@ AL@@ I@@ S@@ _S@@ P@@ L@@ I@@ T_@@ P@@ AT@@ TE@@ N@@ TE@@ N@@ ).@@ s@@ pli@@ t(@@ e.get@@ Value@@ ())); com.google.gerrit.sshd.@@ Command@@ Name cm@@ d = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ (@@ dest@@ .get(@@ 0@@ )); for (@@ int i = 1; i < (@@ des@@ t.@@ size()); i@@ ++@@ ) { cm@@ d = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ (cm@@ d, dest@@ .get(@@ i@@ )); } bind(@@ com.google.gerrit.sshd.@@ Command@@ s.@@ key@@ (@@ gerrit@@ , name@@ )).@@ to@@ Provider@@ (@@ new com.google.gerrit.sshd.@@ A@@ li@@ as@@ Command@@ Provider@@ (cm@@ d@@ )); } }
public static com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d de@@ code@@ (java.lang.String en@@ cod@@ ed@@ ) throw@@ s org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception { if (!(@@ en@@ cod@@ ed@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ AL@@ G@@ OR@@ IT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ ))) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception("@@ un@@ re@@ co@@ g@@ n@@ i@@ ze@@ d g@@ ori@@ th@@ m@@ "); } java.util.List<java.lang.String> fi@@ el@@ d@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ s@@ pli@@ t(@@ en@@ cod@@ ed@@ )); if ((@@ fi@@ el@@ d@@ s.@@ size@@ ()) != 4@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception("@@ w@@ an@@ t 4 fi@@ el@@ d@@ s@@ "); } java.lang.@@ Integ@@ er co@@ s@@ t = com.google.common.@@ p@@ ri@@ m@@ iti@@ v@@ es.@@ In@@ t@@ s@@ .@@ try@@ Par@@ se@@ (@@ fi@@ el@@ d@@ s.get(@@ 1@@ )); if (@@ co@@ t == null@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception("@@ co@@ der@@ t par@@ se f@@ ai@@ le@@ d@@ "); } if (!@@ ((@@ co@@ der@@ s@@ t >@@ = 4@@ ) && (@@ co@@ s@@ t < 3@@ 2@@ ))) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception(("@@ s@@ t sh@@ o@@ ul@@ d b@@ e 4@@ .@@ 3@@ 1 in@@ clu@@ si@@ ve@@ , g@@ o@@ t " + co@@ st@@ )); } byte@@ [] s@@ t = com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ de@@ code@@ (@@ fi@@ el@@ d@@ s.get(@@ 2@@ )); if ((@@ s@@ t.@@ length@@ ) != 1@@ 6@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception(("@@ s@@ al@@ t sh@@ o@@ ul@@ d b@@ e 1@@ 6 byte@@ s, g@@ o@@ t " + (s@@ t.@@ length@@ ))); } return new com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d(@@ com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ cod@@ ec@@ .@@ de@@ code@@ (@@ fi@@ el@@ d@@ s.get(@@ 3@@ )), s@@ t@@ , co@@ st@@ ); } }
@java.lang.Override public boolean re@@ index@@ I@@ f@@ St@@ a@@ le@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) throw@@ s java.io.IOException { try { return re@@ index@@ I@@ f@@ St@@ a@@ le@@ Async@@ (id@@ ).get@@ (); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception e) { com.google.gerrit.server.index.@@ account.@@ Account@@ Index@@ er@@ Impl.@@ log.warn@@ ("@@ re@@ in@@ de@@ x of po@@ s@@ si@@ b@@ y st@@ al@@ e ac@@ count {@@ } f@@ ai@@ le@@ d@@ ", id@@ .get()); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e.get@@ C@@ au@@ se@@ (), java.io.IO@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
@@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ de@@ pre@@ c@@ ation@@ ") private com.google.common.@@ util.@@ concurrent.@@ Check@@ ed@@ F@@ ut@@ ure@@ <@@ java.lang.@@ Boolean@@ , java.io.IO@@ Exception@@ > re@@ index@@ I@@ f@@ St@@ a@@ le@@ Async@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ > t@@ as@@ k = () -@@ > { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (@@ u@@ u@@ id@@ )) { index@@ (@@ u@@ id); return true@@ ; } return false@@ ; } }; return com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ ma@@ k@@ e@@ Check@@ ed@@ (@@ com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ n@@ on@@ C@@ ance@@ ll@@ Pro@@ p@@ ag@@ at@@ ing@@ (@@ b@@ atch@@ Execu@@ tor@@ .@@ submit@@ (t@@ ask@@ )), Index@@ Util@@ s.@@ M@@ AP@@ P@@ ER@@ ); }
@java.lang.Override public boolean re@@ index@@ I@@ f@@ St@@ a@@ le@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) throw@@ s java.io.IOException { try { return re@@ index@@ I@@ f@@ St@@ a@@ le@@ Async@@ (@@ u@@ id@@ ).get@@ (); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception e) { com.google.gerrit.server.@@ index@@ .g@@ roup.@@ Group@@ Index@@ er@@ Impl.@@ log.warn@@ ("@@ re@@ in@@ de@@ x of po@@ s@@ si@@ b@@ l@@ y al@@ e g@@ roup {@@ } f@@ ai@@ le@@ d@@ ", u@@ id@@ .get()); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e.get@@ C@@ au@@ se@@ (), java.io.IO@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
@@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ de@@ pre@@ c@@ ation@@ ") public com.google.common.@@ util.@@ concurrent.@@ Check@@ ed@@ F@@ ut@@ ure@@ <@@ java.lang.@@ Boolean@@ , java.io.IO@@ Exception@@ > re@@ index@@ I@@ f@@ St@@ a@@ le@@ Async@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ > t@@ as@@ k = () -@@ > { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (id@@ ); return true@@ ; } return false@@ ; } }; return com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ ma@@ k@@ e@@ Check@@ ed@@ (@@ com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ n@@ on@@ C@@ ance@@ ll@@ ation@@ Pro@@ p@@ ag@@ at@@ ing@@ (@@ b@@ atch@@ Execu@@ tor@@ .@@ submit@@ (t@@ ask@@ )), Index@@ Util@@ s.@@ M@@ AP@@ P@@ ER@@ ); }
private com.google.inject.@@ Injec@@ tor create@@ Sy@@ s@@ Injector@@ (@@ int act@@ u@@ al@@ Th@@ read@@ s) { return db@@ Injector@@ .@@ create@@ Ch@@ ild@@ Injector@@ (@@ new com.google.gerrit.extensions.@@ config.@@ Factory@@ Module@@ () { @java.lang.Override public void configure() { in@@ stall@@ (db@@ Injector@@ .get@@ Instance@@ (@@ com.google.gerrit.pgm.@@ util.@@ Batch@@ Pro@@ g@@ r@@ am@@ Module@@ .@@ class@@ )); bind(@@ com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ class@@ ).to@@ Instance@@ (@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ IS@@ AB@@ L@@ ED@@ ); in@@ stall@@ (get@@ Index@@ Module@@ (@@ act@@ u@@ al@@ Th@@ read@@ s@@ )); Change@@ Resource@@ .@@ Factory@@ .@@ class@@ ); } }); }
@java.lang.Override public void configure() { in@@ stall@@ (db@@ Injector@@ .get@@ Instance@@ (@@ com.google.gerrit.pgm.@@ util.@@ Batch@@ Pro@@ g@@ r@@ am@@ Module@@ .@@ class@@ )); bind(@@ com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ class@@ ).to@@ Instance@@ (@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ IS@@ AB@@ L@@ ED@@ ); in@@ stall@@ (get@@ Index@@ Module@@ (@@ act@@ u@@ al@@ read@@ s@@ )); factory(@@ Change@@ Resource@@ .@@ Factory@@ .@@ class@@ ); }
private java.lang.@@ Mo@@ d@@ ul@@ e get@@ Index@@ Module@@ (@@ int act@@ u@@ al@@ Th@@ read@@ s) { switch (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .get@@ Index@@ Type@@ (db@@ Injector@@ )) { case L@@ U@@ C@@ E@@ N@@ E : return com.google.gerrit.@@ lucene.@@ L@@ u@@ cen@@ e@@ Index@@ Module@@ .@@ s@@ ingle@@ Version@@ With@@ Ex@@ plic@@ it@@ Version@@ s(@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (), act@@ u@@ al@@ Th@@ read@@ s); case E@@ L@@ A@@ ST@@ I@@ C@@ S@@ E@@ AR@@ C@@ H : return com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Index@@ Module@@ .@@ s@@ ingle@@ Version@@ With@@ Ex@@ plic@@ it@@ Version@@ s(@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (), act@@ u@@ al@@ Th@@ read@@ s); default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ un@@ sup@@ p@@ or@@ ted index.@@ type@@ "); } }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> to@@ Account@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , java.util.@@ Set@@ <java.lang.String> in@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ ) { return to@@ Account@@ s(@@ review@@ Db@@ , in@@ , null@@ ); }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > get@@ Ad@@ ver@@ ti@@ sed@@ Ref@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k@@ ) throw@@ s org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception { try { return per@@ m.@@ filter@@ (repo@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Ref@@ Dat@@ ab@@ ase.@@ AL@@ L@@ ), repo@@ , op@@ t@@ s); } catch (@@ org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception e) { throw e@@ ; } catch (java.io.IOException | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception e@@ x = new org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception@@ (); ex@@ .@@ init@@ C@@ au@@ se@@ (@@ e); throw ex@@ ; } }
public static com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s default@@ s() { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s.@@ buil@@ der@@ ().set@@ Filter@@ (@@ false@@ ).set@@ Filter@@ Tag@@ s@@ Se@@ par@@ ate@@ (@@ false@@ ).@@ bu@@ ild@@ (); }
@org.junit.Test public void test@@ Email@@ V@@ ail@@ d@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ p@@ er@@ for@@ m@@ Validation@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Valid@@ List@@ ed@@ , com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Email@@ In@@ va@@ ild@@ Not@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ p@@ er@@ for@@ m@@ Validation@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ s.@@ Invalid@@ Not@@ List@@ , com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ Email@@ V@@ ail@@ d@@ Not@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ p@@ er@@ for@@ m@@ Validation@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Valid@@ List@@ Not@@ ed@@ , com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ Get@@ Email@@ Wh@@ ite@@ list@@ () throw@@ s java.lang.Exception { }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing private static java.util.List<java.lang.String> get@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ E@@ M@@ A@@ IL@@ _@@ D@@ O@@ M@@ A@@ IN@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ )); }
static boolean is@@ Active@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ E@@ M@@ A@@ IL@@ _@@ D@@ O@@ M@@ A@@ IN@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean p@@ er@@ for@@ m@@ Validation@@ (java.lang.String email@@ , java.util.List<java.lang.String> email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ ) { java.@@ net.@@ UR@@ I ur@@ i = null@@ ; try { ur@@ i = new java.@@ net.@@ URI@@ (@@ email@@ ); } catch (@@ java.@@ net.@@ UR@@ IS@@ y@@ nt@@ a@@ x@@ Exception | java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception e) { return false@@ ; } return email@@ Do@@ ma@@ in@@ Wh@@ ite@@ s@@ t.@@ contains(@@ u@@ ri@@ .get@@ H@@ o@@ st@@ ()); }
@org.junit.Test public void validator@@ In@@ ac@@ tive@@ Wh@@ en@@ Config@@ E@@ mpty@@ () { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .is@@ Active@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Test@@ Util@@ s.@@ E@@ M@@ P@@ T@@ Y_@@ P@@ L@@ U@@ G@@ IN@@ _@@ CON@@ FI@@ G@@ )).@@ is@@ F@@ alse@@ (); }
@@@ com.google.inject.@@ Provi@@ de@@ s @@@ com.google.inject.@@ S@@ ingle@@ t@@ on @@@ com.google.gerrit.server.index.@@ Index@@ Execu@@ tor@@ (@@ B@@ AT@@ CH@@ ) com.google.common.@@ util.@@ concurrent.@@ List@@ en@@ ing@@ Execu@@ tor@@ Ser@@ vi@@ ce get@@ Batch@@ Index@@ Execu@@ tor@@ (@@ @@@ com.google.gerrit.server.config.@@ Gerrit@@ Server@@ Config org.eclipse.jgit.lib.@@ Config config@@ , com.google.gerrit.server.git.@@ W@@ ork@@ Que@@ u@@ e w@@ ork@@ Que@@ ue@@ ) { if ((@@ b@@ atch@@ Execu@@ tor@@ ) != null@@ ) { return b@@ atch@@ Execu@@ tor@@ ; } } int b@@ atch@@ Th@@ read@@ s = this@@ .@@ th@@ read@@ s; if (@@ b@@ atch@@ Th@@ read@@ s <@@ = 0) { b@@ atch@@ Th@@ read@@ s = config@@ .get@@ In@@ t@@ ("@@ index@@ ", null@@ , "@@ b@@ atch@@ Th@@ read@@ s", 0); if (@@ b@@ atch@@ Th@@ read@@ s <@@ = 0) { b@@ atch@@ Th@@ read@@ s = java.lang.@@ Run@@ time@@ .get@@ Run@@ time@@ ().@@ avail@@ able@@ Pro@@ cess@@ or@@ s(); } return com.google.common.@@ util.@@ concurrent.@@ Mo@@ re@@ Execu@@ tor@@ s.@@ list@@ en@@ ing@@ De@@ cor@@ ator@@ (@@ w@@ ork@@ Que@@ u@@ e.@@ create@@ Que@@ ue@@ (@@ b@@ atch@@ Th@@ read@@ s, "@@ Index@@ -@@ Batch@@ ")); }
@org.junit.Test public void index@@ St@@ a@@ len@@ ess@@ I@@ s@@ Not@@ D@@ er@@ i@@ v@@ ed@@ From@@ Cache@@ St@@ a@@ len@@ es@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = create@@ Group@@ ("@@ ve@@ r@@ if@@ i@@ er@@ s@@ "); group@@ Index@@ er.@@ index@@ (@@ group@@ U@@ u@@ id); update@@ Group@@ With@@ out@@ Cache@@ Or@@ Index@@ (@@ group@@ U@@ u@@ id, com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ Group@@ Index@@ er@@ IT@@ .@@ new@@ Group@@ Update@@ ().set@@ Description@@ ("@@ Mo@@ d@@ if@@ i@@ ed@@ ").@@ bu@@ ild@@ ()); re@@ load@@ Group@@ To@@ Cache@@ (@@ group@@ U@@ u@@ id); boolean re@@ index@@ ed = group@@ Index@@ er.@@ re@@ index@@ I@@ f@@ St@@ a@@ le@@ (@@ group@@ U@@ u@@ id); assert@@ Message@@ ("@@ sh@@ o@@ ul@@ d h@@ av@@ e be@@ en re@@ index@@ ed@@ ").@@ th@@ at(@@ re@@ index@@ ed@@ ).@@ is@@ True@@ (); }
@java.lang.Override public void start@@ () { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s@@ ched@@ ule@@ Config = cfg@@ .get@@ S@@ ched@@ ule@@ Config@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config s@@ ched@@ ule@@ Config = s@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (r@@ un@@ ner@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ ()@@ .@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } }
@java.lang.Override public void start@@ () { if (!(@@ sup@@ p@@ ort@@ Au@@ to@@ m@@ ati@@ c@@ Account@@ Ac@@ ti@@ v@@ it@@ y@@ Update@@ )) { return@@ ; } java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ > s@@ ched@@ ul@@ e = s@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (@@ de@@ ac@@ ti@@ v@@ ator@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ ()@@ .@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config create(@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ config@@ , s@@ ection@@ , sub@@ s@@ ection@@ ).@@ bu@@ ild@@ (); }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ Builder buil@@ der@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ config@@ , s@@ ection@@ , null@@ ); }
@java.lang.Override public void start@@ () { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s@@ ched@@ ule@@ Config = g@@ c@@ Config@@ .get@@ S@@ ched@@ ule@@ Config@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ > s@@ ched@@ ul@@ e = s@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (@@ g@@ c@@ Run@@ ner@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ ()@@ .@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } }
public com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ul@@ e s@@ ched@@ ule@@ () { if ((@@ s@@ ched@@ ule@@ ) == null@@ ) { s@@ ched@@ ul@@ e = load@@ S@@ ched@@ ule@@ (); } return s@@ ched@@ ule@@ ; }
private static long int@@ er@@ va@@ l@@ (@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ In@@ ter@@ va@@ l@@ ) { try { return com.google.gerrit.server.config.@@ Config@@ Util@@ .get@@ Time@@ Un@@ it@@ (r@@ c@@ , s@@ ection@@ , sub@@ s@@ ection@@ , key@@ In@@ ter@@ va@@ l@@ , com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ ; } }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ > s@@ ched@@ ule@@ () { if ((@@ s@@ ched@@ ule@@ ) == null@@ ) { s@@ ched@@ ul@@ e = load@@ S@@ ched@@ ule@@ (); } return s@@ ched@@ ule@@ ; }
private boolean is@@ Invalid@@ Or@@ M@@ is@@ s@@ ing@@ (@@ long int@@ er@@ va@@ l@@ , long in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ) { java.lang.String k@@ ey = (s@@ ection@@ ()) + ((@@ sub@@ s@@ ection@@ ()) != null ? "@@ .@@ " + (@@ sub@@ s@@ ection@@ ()) : "@@ "); if (@@ int@@ er@@ va@@ l == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) && (in@@ iti@@ al@@ D@@ el@@ a@@ y == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ))) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.@@ info@@ ("@@ N@@ o s@@ ched@@ ul@@ e config@@ ur@@ ation for \"@@ {}@@ \"@@ ", key@@ ); return true@@ ; } if (@@ int@@ er@@ va@@ l == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ com@@ p@@ le@@ te s@@ ched@@ ul@@ e config@@ ur@@ ation for {}@@ \@@ " is ig@@ no@@ red@@ . M@@ is@@ s@@ ing valu@@ e for {}@@ \"@@ .@@ .@@ ", key@@ , ((@@ k@@ ey + "@@ .@@ ") + (key@@ In@@ ter@@ va@@ l@@ ()))); return true@@ ; } if (in@@ iti@@ al@@ D@@ el@@ a@@ y == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ com@@ p@@ le@@ te s@@ ched@@ ul@@ e config@@ ur@@ ation for {}@@ \@@ " is ig@@ no@@ red@@ . M@@ is@@ s@@ ing valu@@ e for {}@@ \"@@ {}@@ \"@@ ", key@@ , ((@@ k@@ ey + "@@ .@@ ") + (key@@ .@@ class@@ ))); return true@@ ; } if (@@ int@@ er@@ va@@ l <@@ = 0) && (in@@ iti@@ al@@ D@@ el@@ a@@ y < 0@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ vali@@ d s@@ ched@@ ul@@ e config@@ ur@@ ation for {}@@ \@@ " is no@@ ing@@ . ", key@@ ); return true@@ ; } return false@@ ; }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", "@@ 0@@ 1@@ 00@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Key@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ Th@@ at(@@ s@@ ched@@ ule@@ ()).@@ is@@ P@@ res@@ ent@@ (); assert@@ Th@@ at(@@ s@@ ched@@ ule@@ ().get@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ .@@ create@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ), com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ))); ))); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ Key@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Start@@ Time@@ ("@@ my@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ Th@@ at(@@ s.@@ s@@ ched@@ ule@@ ()).@@ isEmpty@@ (); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ h@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", 0@@ 1@@ 00@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Key@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ Th@@ at(@@ s.get@@ In@@ ter@@ va@@ l@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ )); assert@@ Th@@ at(@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ )); s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ Key@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Start@@ Time@@ ("@@ my@@ Start@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ Th@@ at(@@ s.get@@ In@@ ter@@ va@@ l@@ ()).@@ isEqualTo(@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ Th@@ at(@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()).@@ isEqualTo(@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ").@@ set@@ No@@ w@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ ().@@ s@@ ched@@ ule@@ ().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ ().get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ 0@@ 1@@ 0@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Key@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ), s.@@ s@@ ched@@ ule@@ ()@@ .@@ int@@ er@@ va@@ l@@ ()); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ), s.@@ s@@ ched@@ ule@@ ().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()); s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ Key@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Key@@ Start@@ Time@@ ("@@ my@@ Start@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ E@@ quals(@@ s.@@ s@@ ched@@ ule@@ ()@@ .@@ int@@ er@@ va@@ l@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s.@@ s@@ ched@@ ule@@ ().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ 0@@ 1@@ 0@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Key@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ), s.get@@ In@@ ter@@ va@@ l@@ ()); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ), s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Start@@ Time@@ ("@@ my@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ E@@ quals(@@ s.get@@ In@@ ter@@ va@@ l@@ (), S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { long de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ; java.lang.String star@@ t = r@@ c@@ .get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ Time@@ ); try { if (@@ star@@ t != null@@ ) { java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ Pat@@ tern@@ ("@@ [@@ ]@@ H@@ :@@ ").@@ w@@ ith@@ Lo@@ c@@ a@@ le@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Start@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w.@@ w@@ ith@@ (@@ fi@@ rst@@ Start@@ Time@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k d@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ k = for@@ m@@ at@@ ter.@@ parse@@ (@@ start@@ , java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ k@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception ig@@ no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ tr@@ unc@@ ated@@ To@@ (@@ java.@@ ti@@ m@@ e.@@ te@@ mp@@ or@@ .@@ Ch@@ ron@@ o@@ Un@@ it.@@ M@@ IN@@ U@@ TE@@ S@@ ); de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ we@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % int@@ er@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = 0) { de@@ la@@ y = int@@ er@@ ; } } } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e@@ 2@@ ) { de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ ; } return de@@ la@@ y@@ ; }
public long get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ () { if ((@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ) == null@@ ) { load@@ (); } return in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ; }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ > s@@ ched@@ ul@@ e = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ").@@ set@@ No@@ w@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ ().@@ s@@ ched@@ ule@@ (); assert@@ Th@@ at(@@ s@@ ched@@ ule@@ ).@@ is@@ P@@ res@@ ent@@ (); return s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (); }
private static void do@@ Create@@ Table@@ (@@ java.sql.@@ State@@ ment st@@ m@@ t@@ ) throw@@ s java.sql.@@ SQL@@ Exception { st@@ m@@ t.@@ execute@@ Update@@ (("@@ C@@ RE@@ AT@@ E T@@ AB@@ L@@ E I@@ F NO@@ T E@@ X@@ IS@@ T@@ S account@@ _@@ patch@@ _@@ review@@ s (@@ " + ((((@@ (("@@ account@@ _@@ id IN@@ TE@@ G@@ E@@ R DE@@ FA@@ U@@ L@@ T 0 NO@@ T N@@ U@@ L@@ L@@ L@@ L@@ , " + "@@ change@@ _@@ id IN@@ TE@@ G@@ E@@ R DE@@ FA@@ U@@ L@@ T 0 NO@@ T N@@ U@@ L@@ L@@ L@@ , ") + "@@ patch@@ _@@ set@@ _@@ IN@@ TE@@ R DE@@ FA@@ U@@ L@@ T 0 NO@@ T N@@ U@@ L@@ L@@ L@@ L@@ , ") + "@@ file@@ _@@ name V@@ AR@@ CH@@ AR@@ (@@ 2@@ 5@@ 6@@ ) DE@@ FA@@ U@@ L@@ T '@@ ' NO@@ T N@@ U@@ L@@ L@@ , ") + "@@ CON@@ ST@@ R@@ A@@ IN@@ T p@@ ri@@ mar@@ y@@ _@@ key@@ _@@ account@@ _@@ patch@@ _@@ review@@ s ") + "@@ P@@ R@@ I@@ M@@ AR@@ Y K@@ E@@ Y (change@@ _@@ id, patch@@ _@@ set@@ _@@ id, account@@ _@@ id, file@@ _@@ name@@ )@@ ") + "@@ )@@ ))); }
public com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ P@@ roject for@@ Project@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { try { return new com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project@@ (c@@ fg@@ Factory@@ .getProject@@ Plugin@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ Name, plugin@@ Name@@ )); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ ((("@@ Project@@ " + (project@@ Name@@ .get@@ ())) + " not fo@@ und@@ ")); } }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ commit@@ .get@@ Message@@ ())) { comm@@ it.@@ set@@ Message@@ ("@@ Update reviewer@@ s config@@ ur@@ ation@@ \n@@ "); } save@@ Config@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ E@@ NAME@@ , cfg@@ ); return true@@ ; }
java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > get@@ Reviewer@@ Filter@@ Section@@ s() { com.google.common.collect.Immutable@@ List.@@ Builder@@ <@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > b = com.google.common.collect.Immutable@@ List.@@ buil@@ der@@ (); for (java.lang.String f : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ )) { b.@@ add@@ (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ f@@ )); } return b.@@ bu@@ ild@@ (); }
void remove@@ Reviewer@@ (java.lang.String filter@@ , java.lang.String reviewer@@ ) { if (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ ).get@@ Reviewer@@ s().@@ contains(@@ reviewer@@ )) { java.util.List<java.lang.String> value@@ s = new java.util.Array@@ List(@@ java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ REV@@ I@@ EW@@ ER@@ ))); valu@@ es.@@ remove@@ (@@ reviewer@@ ); if (@@ valu@@ es.@@ isEmpty()) { cf@@ g.@@ un@@ set@@ Section@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ ); } else { cf@@ g.@@ set@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ REV@@ I@@ EW@@ ER@@ , values@@ ); } } }
private com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Sec@@ tion new@@ Reviewer@@ Filter@@ Section@@ (java.lang.String filter@@ ) { com.google.common.collect.Immutable@@ Set.@@ Builder@@ <java.lang.String> b = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); for (java.lang.String review@@ er : cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ REV@@ I@@ EW@@ ER@@ )) { b.@@ add(@@ reviewer@@ ); } return new com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ , b.@@ bu@@ ild@@ ()); }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { cf@@ g = read@@ Config@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ F@@ IL@@ E@@ NAME@@ ); }
private java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > get@@ Section@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name) { try { return config@@ .@@ for@@ Project@@ (project@@ Name@@ ).get@@ Reviewer@@ Filter@@ Section@@ s(); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s.@@ log.error@@ ("@@ Un@@ able to g@@ e@@ t con@@ fig for project {}@@ ", project@@ Name@@ .get()); return com.google.common.collect.Immutable@@ List.@@ of@@ (); } }
void add@@ Reviewer@@ (java.lang.String filter@@ , java.lang.String reviewer@@ ) { if (!@@ (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ ).get@@ Reviewer@@ s().@@ contains(@@ reviewer@@ ))) { java.util.List<java.lang.String> value@@ s = new java.util.Array@@ List(@@ java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ REV@@ I@@ EW@@ ER@@ ))); valu@@ es.@@ add(@@ reviewer@@ ); cf@@ g.@@ set@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ REV@@ I@@ EW@@ ER@@ , values@@ ); } }
@java.lang.Override public int compare@@ To@@ (@@ com.googlesource@@ .gerrit.@@ plugins@@ .@@ import@@ er.@@ Gerrit@@ Api.@@ Ver@@ sion o@@ ) { if (((@@ ma@@ j@@ or@@ ) == null@@ ) || ((@@ o.@@ ma@@ j@@ or@@ ) == null@@ )) { return -@@ 1; } if (@@ ma@@ j@@ or@@ .equals(@@ o.@@ ma@@ j@@ or@@ )) { return null@@ ; } if ((@@ patch@@ ) == null@@ ) { return -@@ 1; } return null@@ ; }
@org.junit.Test public void valid@@ Path@@ Se@@ par@@ ator@@ () { for (@@ char c : com.google.gerrit.server.config.@@ Git@@ web@@ Config@@ Test.@@ V@@ AL@@ ID@@ _@@ CH@@ AR@@ AC@@ T@@ ER@@ S@@ .@@ to@@ Char@@ Array@@ ()) { assert@@ Th@@ at@@ (com.google.gerrit.server.@@ config.@@ Git@@ web@@ Config.@@ is@@ Valid@@ Path@@ Se@@ par@@ ator@@ (c@@ )).@@ is@@ True@@ (); } }
@org.junit.Test public void in@@ ali@@ d@@ Path@@ Se@@ par@@ ator@@ () { for (@@ char c : com.google.gerrit.server.config.@@ Git@@ web@@ Config@@ Test.@@ S@@ O@@ M@@ E_@@ IN@@ V@@ AL@@ ID@@ _@@ CH@@ AR@@ AC@@ T@@ ER@@ S@@ .@@ to@@ Char@@ Array@@ ()) { assert@@ Th@@ at@@ (com.google.gerrit.server.@@ config.@@ Git@@ web@@ Config.@@ is@@ Valid@@ Path@@ Se@@ par@@ ator@@ (c@@ )).@@ is@@ F@@ alse@@ (); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > get@@ Ref@@ s(@@ java.lang.String pre@@ fix@@ ) throw@@ s java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s; try { ref@@ s = per@@ m.@@ filter@@ (@@ de@@ leg@@ ate@@ .getRef@@ s(@@ pre@@ fix@@ ), git@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s@@ .@@ default@@ s()); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > result = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (ref@@ s.@@ size()); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : refs.@@ values@@ ()) { result.@@ put(@@ ref@@ .getName@@ ().@@ substring@@ (p@@ re@@ fi@@ x.@@ length@@ ()), ref@@ ); } return ref@@ s; }
@java.lang.Override public org.eclipse.jgit.lib.@@ Re@@ f ex@@ act@@ Ref@@ (java.lang.String name@@ ) throw@@ s java.io.IOException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = de@@ leg@@ ate.@@ ex@@ act@@ Ref@@ (@@ name); if (re@@ f == null@@ ) { return null@@ ; } try { return per@@ m.@@ filter@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (@@ name, ref@@ ), git@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s@@ .@@ default@@ ()@@ )@@ .get(@@ name); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
@java.lang.Override public org.eclipse.jgit.lib.@@ Re@@ f get@@ Ref@@ (java.lang.String name@@ ) throw@@ s java.io.IOException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = de@@ leg@@ ate@@ .getRef@@ (@@ name); if (re@@ f == null@@ ) { return null@@ ; } try { return per@@ m.@@ filter@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (ref@@ .getName@@ (), ref@@ ), git@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ s@@ .@@ default@@ s@@ ()@@ )@@ .get(@@ ref@@ .getName@@ ()); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
public static void load@@ Site@@ Li@@ b@@ (@@ java.nio.file.@@ Pat@@ h li@@ b@@ r@@ ) { try { java.util.List<@@ java.nio.file.@@ Path@@ > jar@@ s = com.google.gerrit.common.@@ Site@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ list@@ J@@ ar@@ s(@@ li@@ b@@ di@@ r@@ ); com.google.gerrit.common.@@ I@@ o@@ Util.@@ load@@ J@@ AR@@ s(@@ jar@@ s); com.google.gerrit.common.@@ Site@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ log.@@ info@@ ("@@ Load@@ ed sit@@ e li@@ b@@ ra@@ ri@@ es@@ : {}@@ ", com.google.gerrit.common.@@ Site@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ jar@@ List(@@ jar@@ s@@ )); } catch (java.io.IOException e) { com.google.gerrit.common.@@ Site@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ log.error@@ (("@@ E@@ rror s@@ can@@ n@@ ing li@@ b di@@ rec@@ tor@@ y " + li@@ b@@ di@@ r@@ ), e); } }
private static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce account@@ Group@@ (com.google.gerrit.server.@@ account.@@ Account@@ State s) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ; if (@@ s.get@@ User@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ()) { u@@ id = com.googlesource.gerrit.plugins.@@ s@@ ingle@@ user@@ .@@ group@@ Back@@ en@@ d.@@ user@@ (@@ u@@ u@@ id(@@ user@@ Name@@ ().get@@ ()); } else { u@@ id = com.googlesource.gerrit.plugins.@@ s@@ ingle@@ user@@ .@@ group@@ S@@ ingle@@ User@@ Group.@@ UU@@ I@@ D u@@ u@@ id(@@ s.get@@ Account@@ ().get@@ Id()); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ u@@ id, com.googlesource.gerrit.plugins.@@ on@@ ingle@@ user@@ .@@ S@@ ingle@@ User@@ Group.@@ name@@ Of(@@ u@@ u@@ id, s@@ )); }
private void warn@@ Error@@ Email@@ (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Messag@@ e message@@ , java.lang.String re@@ as@@ on@@ ) { try { com.google.gerrit.server.mail.@@ sen@@ d.@@ E@@ mai@@ l e@@ mai@@ l = create@@ Error@@ Email@@ Factory.create@@ (); e@@ m.@@ set@@ To@@ (@@ messag@@ e.@@ from@@ ()); e@@ m.@@ set@@ Re@@ ply@@ To@@ (@@ messag@@ e.@@ id@@ ()); m.@@ set@@ Re@@ as@@ on@@ (re@@ as@@ on@@ ); e@@ m.@@ send@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Pro@@ cess@@ or@@ .@@ log.error@@ ("@@ Cannot sen@@ d e@@ mai@@ l for err@@ ou@@ s email@@ ", e); throw new java.lang.@@ Error@@ (@@ e); } }
protected void init@@ () throw@@ s com.google.gerrit.common.@@ errors.@@ Email@@ Exception { set@@ up@@ S@@ o@@ y@@ Context@@ (); s@@ m@@ tp@@ From@@ Add@@ res@@ s = args.@@ from@@ Add@@ ress@@ Gener@@ ator@@ .@@ from@@ (@@ from@@ Id); set@@ Header@@ ("@@ Date@@ ", new java.util.@@ Date@@ ()); head@@ er@@ s.@@ put("@@ From@@ ", new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ (s@@ m@@ tp@@ From@@ Add@@ ress@@ )); head@@ er@@ s.@@ put@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ E@@ mail.@@ H@@ D@@ R@@ _@@ T@@ O@@ , new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ ()); head@@ er@@ s.@@ put@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ E@@ mail.@@ H@@ D@@ R@@ _@@ C@@ , new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ ()); set@@ Header@@ ("@@ Message@@ -@@ ID@@ ", "@@ "); set@@ Header@@ ("@@ Au@@ to@@ -@@ Submit@@ ted@@ ", "@@ au@@ to@@ -@@ g@@ ener@@ ated@@ "); for (@@ com.google.gerrit.extensions.api.changes.@@ Rec@@ ip@@ i@@ ent@@ Type rec@@ ip@@ i@@ ent@@ Type : account@@ s@@ To@@ No@@ t@@ if@@ y.@@ key@@ Set@@ ()) { add(@@ rec@@ ip@@ i@@ ent@@ Type@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ .get(@@ rec@@ ip@@ i@@ ent@@ Type@@ )); } set@@ Header@@ ("@@ X@@ -@@ Gerrit@@ -@@ Message@@ Type@@ ", message@@ Class@@ ); text@@ Bo@@ d@@ y = new java.lang.String@@ Builder@@ (); htm@@ l@@ Bo@@ d@@ y = new java.lang.String@@ Builder@@ (); if (((@@ from@@ Id@@ ) != null@@ ) && (@@ args.@@ from@@ Add@@ ress@@ Gener@@ ator@@ .is@@ Gener@@ ic@@ Add@@ res@@ s(@@ from@@ Id@@ ))) { append@@ Text@@ (get@@ From@@ Line@@ ()); } }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ re@@ ce@@ ive@@ e@@ mail.@@ fil@@ ter.@@ mo@@ de@@ ", valu@@ e = "@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ") @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ re@@ ce@@ ive@@ e@@ mail.@@ fil@@ ter.@@ pat@@ tern@@ s", value@@ s = { "@@ .@@ +@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ \@@ \@@ \@@ \@@ .@@ com@@ ", "@@ a@@ @@@ b@@ \@@ \@@ \@@ .@@ com@@ " }@@ ) public void list@@ Filter@@ Wh@@ ite@@ list@@ Filter@@ s@@ Not@@ List@@ ed@@ User@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change@@ Info = createChange@@ And@@ Re@@ ply@@ By@@ Email@@ (); java.util.Collection<@@ com.google.gerrit.extensions.common.@@ Change@@ Message@@ Info> message@@ s = gApi.changes().id(@@ change@@ Info.@@ id@@ ).get@@ ().@@ messag@@ es@@ ; assert@@ Th@@ at(@@ messag@@ es@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ sen@@ der@@ .get@@ Messag@@ es@@ ()).@@ hasSize@@ (@@ 0); }
@org.junit.Test public void send@@ No@@ t@@ if@@ ic@@ ation@@ On@@ M@@ is@@ s@@ ing@@ Met@@ ad@@ at@@ as@@ () throw@@ s java.lang.Exception { java.lang.String change@@ Id = createChange@@ With@@ Review@@ (); com.google.gerrit.extensions.common.@@ Change@@ Info change@@ Info = gApi.changes().id(@@ changeId@@ ).get@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> comment@@ s = gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ comment@@ s@@ As@@ List(); assert@@ Th@@ at(@@ comment@@ s).@@ hasSize@@ (@@ 2); java.lang.String t@@ s = "@@ null@@ "; java.lang.String t@@ x@@ t = new@@ P@@ l@@ a@@ int@@ ext@@ Bo@@ d@@ y@@ ((((@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ .get@@ ()) + "@@ #@@ /@@ c@@ /@@ ") + (change@@ Info.@@ _@@ n@@ umber@@ )) + "@@ /@@ 1@@ "), "@@ Test Message@@ ", null@@ , null@@ ); com.google.gerrit.server.mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Messag@@ e.@@ Builder b = message@@ Builder@@ With@@ Default@@ Fiel@@ d@@ s().@@ from@@ (user@@ .@@ email@@ Add@@ ress@@ ).@@ text@@ Content@@ ((@@ t@@ x@@ t + (t@@ ext@@ F@@ oo@@ ter@@ For@@ Change@@ (change@@ Info.@@ _@@ n@@ umber@@ , t@@ s@@ )@@ ))); send@@ er.@@ c@@ le@@ ar@@ (); mail@@ Pro@@ cess@@ or@@ .@@ pro@@ cess(@@ b.@@ bu@@ ild@@ ()); assert@@ No@@ t@@ if@@ y@@ To@@ (user@@ ); com.google.gerrit.@@ test@@ ing.@@ F@@ a@@ k@@ e@@ Email@@ S@@ end@@ er.@@ Messag@@ e messag@@ e = send@@ er.@@ next@@ Message@@ (); assert@@ Th@@ at(@@ messag@@ e.@@ bo@@ d@@ y@@ ()).@@ contain@@ s("@@ mis@@ s@@ ing requ@@ i@@ re@@ d met@@ ad@@ at@@ a@@ "); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { long de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ; java.lang.String star@@ t = r@@ c@@ .get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ Time@@ ); try { if (@@ star@@ t != null@@ ) { java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ Pat@@ tern@@ ("@@ [@@ E ]@@ H@@ :@@ ").@@ w@@ ith@@ Lo@@ c@@ a@@ le@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w.@@ w@@ ith@@ (@@ fi@@ rst@@ Start@@ Time@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k d@@ a@@ y@@ Of@@ W@@ e@@ k = for@@ m@@ at@@ ter.@@ parse@@ (@@ start@@ , java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ k@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ tr@@ unc@@ ated@@ To@@ (@@ java.@@ ti@@ m@@ e.@@ te@@ mp@@ or@@ .@@ Ch@@ ron@@ o@@ Un@@ it.@@ M@@ IN@@ U@@ TE@@ S@@ ); de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ b@@ et@@ we@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % int@@ er@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = int@@ er@@ va@@ l@@ ; } } } } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception | java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.google.gerrit.server.config.@@ Gerrit@@ Config.@@ S@@ ched@@ ule@@ Config.@@ CON@@ FI@@ G@@ _@@ CON@@ FI@@ G@@ ; } return de@@ la@@ y@@ ; }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ul@@ e create@@ Or@@ F@@ ail@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ Tim@@ e) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ (@@ int@@ er@@ va@@ l@@ , start@@ Time@@ ).@@ or@@ E@@ l@@ se@@ (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception@@ :@@ new@@ ); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ int@@ er@@ va@@ l@@ , com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ NO@@ W@@ ); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w@@ ) { check@@ Not@@ Null@@ (@@ start@@ ); java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ Pat@@ tern@@ ("@@ [@@ E ]@@ H@@ :@@ mm@@ ").@@ w@@ ith@@ Lo@@ c@@ a@@ le@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w.@@ w@@ ith@@ (@@ fi@@ rst@@ Time@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k d@@ a@@ y@@ Of@@ W@@ e@@ k for@@ m@@ at@@ ter.@@ parse@@ (@@ start@@ , java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ k@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ k@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception ig@@ no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ start@@ Tim@@ e.@@ start@@ To@@ (@@ java.@@ ti@@ m@@ e.@@ te@@ mp@@ or@@ .@@ Ch@@ ron@@ o@@ Un@@ it.@@ M@@ IN@@ U@@ TE@@ S@@ ); long de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ ur@@ b@@ et@@ we@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % int@@ er@@ va@@ l@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = int@@ er@@ va@@ l@@ ; } return de@@ la@@ y@@ ; }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { java.lang.String star@@ t = r@@ c@@ .get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ Time@@ ); try { if (@@ star@@ t == null@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ IS@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ; } return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ int@@ er@@ va@@ l@@ , start@@ , no@@ w@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e@@ 2@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ _@@ CON@@ FI@@ G@@ ; } }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ Builder buil@@ der@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ ) { return new com.google.gerrit.server.config.@@ Au@@ to@@ Value@@ _S@@ ched@@ ule@@ Config.@@ Builder@@ ().set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ NO@@ W@@ ).set@@ Key@@ In@@ ter@@ va@@ l@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ K@@ E@@ Y_@@ IN@@ T@@ ER@@ V@@ AL@@ ).set@@ Start@@ Time@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ K@@ E@@ Y_@@ ST@@ AR@@ T@@ I@@ ME@@ ).set@@ Config@@ (@@ config@@ ).set@@ Section@@ (s@@ ection@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case AC@@ CES@@ S : return ((!@@ (@@ is@@ H@@ id@@ d@@ en@@ ())) && ((@@ user@@ .is@@ In@@ ternal@@ User@@ ()) || (c@@ an@@ P@@ er@@ for@@ m@@ On@@ An@@ y@@ Ref@@ (@@ Permission@@ .@@ RE@@ AD@@ )))) || (@@ is@@ Owner@@ ()); case RE@@ A@@ D : return (!(@@ is@@ H@@ id@@ d@@ en@@ ())) && (@@ all@@ Ref@@ s@@ A@@ re@@ Visible@@ (@@ java.util.Collections.@@ empty@@ Set@@ ())); case C@@ RE@@ A@@ TE@@ _@@ RE@@ F : return can@@ Add@@ Ref@@ s(); case C@@ RE@@ A@@ TE@@ _@@ CHANG@@ E : return can@@ Create@@ Changes@@ (); case R@@ UN@@ _@@ RE@@ C@@ E@@ I@@ V@@ E_@@ P@@ AC@@ K : return can@@ Run@@ Receive@@ P@@ ack@@ (); case R@@ UN@@ _@@ U@@ P@@ LO@@ AD@@ _@@ P@@ AC@@ K : return can@@ Run@@ Up@@ load@@ P@@ ack@@ (); case P@@ US@@ H@@ _@@ A@@ S@@ T_@@ RE@@ F@@ F : return can@@ Push@@ To@@ At@@ L@@ e@@ ast@@ One@@ Ref@@ (); case RE@@ AD@@ _@@ CON@@ FI@@ G : return control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ RE@@ AD@@ ); case B@@ AN@@ _@@ CO@@ M@@ M@@ I@@ T : case RE@@ AD@@ _@@ RE@@ F@@ LO@@ G : case W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G : return is@@ Owner@@ (); } throw new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception@@ ((@@ per@@ m + " un@@ sup@@ p@@ orted@@ ")); }
private void re@@ index@@ All@@ Group@@ s() throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.I@@ terable@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > all@@ Group@@ s = group@@ s.get@@ All@@ Group@@ Ref@@ eren@@ ces@@ (db@@ )@@ :@@ iter@@ ator@@ ; for (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ roup : all@@ Group@@ s) { group@@ Cache.@@ on@@ Create@@ Group@@ (@@ group@@ .get@@ UUID@@ ()); } }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d) { if (@@ d@@ cm@@ d == null@@ ) { return "@@ Comman@@ d w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed@@ "; } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] tri@@ mm@@ ed@@ Arg@@ s = d@@ cm@@ d@@ .get@@ T@@ ri@@ mm@@ ed@@ Argument@@ s(); if (@@ tri@@ mm@@ ed@@ Arg@@ s != null@@ ) { for (@@ int i = 1; i < (@@ tri@@ mm@@ ed@@ Arg@@ s.@@ length@@ ); i@@ ++@@ ) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ tri@@ mm@@ ed@@ Arg@@ s@@ [@@ i@@ ]@@ ); } } return command@@ Name.@@ toString@@ (); }
private boolean can@@ For@@ ce@@ Update@@ () { if (c@@ an@@ Push@@ With@@ For@@ ce@@ ()) { return true@@ ; } switch (get@@ User@@ ().get@@ Access@@ Path@@ ()) { case G@@ I@@ T : return false@@ ; case J@@ S@@ ON@@ _@@ R@@ P@@ C : case RES@@ T_@@ AP@@ I : case S@@ S@@ H@@ _@@ CO@@ M@@ M@@ M@@ AN@@ D : case UN@@ K@@ NO@@ W@@ E@@ B@@ _@@ B@@ RO@@ W@@ S@@ E@@ R : default : return ((@@ is@@ Owner@@ ()) && (!@@ (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ P@@ US@@ H@@ , true@@ )))) || (project@@ Contro@@ l.@@ is@@ Ad@@ min@@ ()); } }
private boolean can@@ Delete@@ () { if (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ ref@@ Name@@ )) { return false@@ ; } switch (get@@ User@@ ().get@@ Access@@ Path@@ ()) { case G@@ I@@ T : return (c@@ an@@ Push@@ With@@ For@@ ce@@ ()) || (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ DE@@ LE@@ TE@@ )); case J@@ S@@ ON@@ _@@ R@@ P@@ C : case RES@@ T_@@ AP@@ I : case S@@ S@@ H@@ _@@ CO@@ M@@ M@@ AN@@ D : case UN@@ K@@ NO@@ W@@ N : case W@@ E@@ B@@ _@@ B@@ RO@@ W@@ S@@ E@@ R : default : return (((@@ is@@ Owner@@ ()) || (c@@ an@@ Push@@ With@@ For@@ ce@@ ())) || (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ DE@@ LE@@ TE@@ ))) || (project@@ Contro@@ l.@@ is@@ Ad@@ min@@ ()); } }
private boolean can@@ P@@ er@@ for@@ m@@ (java.lang.String per@@ mission@@ Name, boolean is@@ Change@@ Owner@@ , boolean w@@ ith@@ For@@ ce@@ ) { for (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Collec@@ tion.@@ Block@@ Access@@ Sec@@ tion s : re@@ le@@ v@@ ant@@ .get@@ Block@@ s(@@ per@@ mission@@ Name@@ )) { boolean b@@ lock@@ ed = false@@ ; for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : s.@@ b@@ lock@@ s) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Change@@ Owner@@ )) { b@@ lock@@ ed = true@@ ; break@@ ; } } if (@@ b@@ lock@@ ed@@ ) { for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : o@@ verri@@ des@@ ) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Change@@ Owner@@ )) { return r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ AL@@ LO@@ W@@ ); } } } for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : re@@ le@@ v@@ ant@@ .get@@ Rule@@ s(@@ per@@ mission@@ Name@@ )) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Change@@ Owner@@ )) { if ((@@ p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ DE@@ N@@ Y@@ )) { return false@@ ; } } if (@@ w@@ ith@@ For@@ ce@@ ) { if ((@@ (p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ AL@@ LO@@ W@@ )) && (p@@ r@@ .get@@ For@@ ce@@ ())) { return true@@ ; } } else if ((@@ p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ AL@@ LO@@ W@@ )) { return true@@ ; } } } return false@@ ; }
boolean can@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ () { return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAME@@ ); }
public java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > get@@ Rule@@ s(@@ java.lang.String per@@ m@@ ) { return rule@@ s@@ By@@ Permission@@ .get(@@ per@@ m@@ ); }
public java.util.List<@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Collec@@ tion.@@ Block@@ Section@@ > get@@ Block@@ s(@@ java.lang.String per@@ m@@ ) { return b@@ lock@@ By@@ Permission@@ .get(@@ per@@ m@@ ); }
public java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > get@@ Permission@@ (java.lang.String per@@ mission@@ Name) { java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > r = rule@@ s@@ By@@ Permission@@ .get(@@ per@@ mission@@ Name); return r != null ? r : java.util.Collections.@@ <@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ >@@ empty@@ List(); }
private com.google.gerrit.common.data.@@ Permission@@ R@@ ang@@ e to@@ R@@ ange@@ (java.lang.String per@@ mission@@ Name, java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > rule@@ List@@ ) { return new com.google.gerrit.common.data.@@ Permission@@ R@@ ange@@ (@@ per@@ mission@@ Name, (@@ -@@ 1@@ ), 1); }
static java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > fin@@ d@@ Rule@@ s(@@ java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > s@@ ection@@ s, java.lang.String per@@ m@@ Name) { java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > r = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s : s@@ ection@@ s) { com.google.gerrit.common.data.@@ Per@@ mis@@ sion p = s.get@@ Permission@@ (@@ per@@ m@@ Name); if (@@ p == null@@ ) { continue@@ ; } for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : p@@ .get@@ Rule@@ s()) { r.@@ add(@@ p@@ r@@ ); } } if (p@@ .get@@ Ex@@ clu@@ si@@ ve@@ Group@@ ()) { break@@ ; } } return r@@ ; }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ W@@ OR@@ K@@ _@@ IN@@ _@@ P@@ RO@@ G@@ RES@@ S@@ ; if (@@ ui.@@ y@@ es@@ no@@ (@@ false@@ , "@@ M@@ ig@@ r@@ ate d@@ raf@@ t change@@ s to private change@@ s default is w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ ress@@ )@@ ?@@ ")) { str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ A@@ TE@@ ; } ui.@@ message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Re@@ pl@@ ac@@ e d@@ raf@@ t change@@ s w@@ it@@ h %s change@@ s .@@ .@@ ", str@@ ateg@@ y.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ ())); try (@@ com.google.gwtorm.server.@@ State@@ ment@@ Execu@@ tor e = new@@ Execu@@ tor@@ (db@@ )) { java.lang.String co@@ lu@@ m@@ n = (@@ str@@ ateg@@ y == (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ A@@ TE@@ )) ? "@@ is@@ _@@ private@@ " : "@@ w@@ ork@@ _@@ in@@ _@@ pro@@ g@@ ress@@ "; execute@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ U@@ P@@ D@@ AT@@ E change@@ s S@@ E@@ T %s '@@ Y@@ '@@ , cre@@ ated@@ _@@ on W@@ H@@ ER@@ E statu@@ s = '@@ d@@ ' '@@ O@@ R " + ("@@ E@@ X@@ IS@@ T@@ S (@@ S@@ E@@ L@@ EC@@ T * F@@ RO@@ M patch@@ _@@ set@@ s W@@ H@@ ER@@ E " + "@@ patch@@ _@@ set@@ _@@ set@@ _@@ id = changes.@@ change@@ _@@ id = changes.@@ change@@ _@@ id = '@@ Y@@ '@@ )@@ )), "@@ co@@ lu@@ m@@ n@@ )); execute@@ ("@@ U@@ P@@ D@@ AT@@ E change@@ s S@@ E@@ T statu@@ s = '@@ n@@ '@@ n@@ '@@ n@@ '@@ n@@ '@@ , cre@@ ated@@ _@@ cre@@ ated@@ _@@ on W@@ H@@ ER@@ E statu@@ s = '@@ "); } ui.@@ message@@ (@@ "@@ do@@ ne@@ "); }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ W@@ OR@@ K@@ _@@ IN@@ _@@ P@@ RO@@ G@@ RES@@ S@@ ; if (@@ ui.@@ y@@ es@@ no@@ (@@ false@@ , "@@ M@@ ig@@ r@@ ate d@@ raf@@ t change@@ s to private change@@ s default is w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ ress@@ )@@ ?@@ ")) { str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ A@@ TE@@ ; } ui.@@ message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Re@@ pl@@ ac@@ e d@@ raf@@ t change@@ s w@@ it@@ h %s change@@ s .@@ .@@ ", str@@ ateg@@ y.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ ())); try (@@ com.google.gwtorm.server.@@ State@@ ment@@ Execu@@ tor e = new@@ Execu@@ tor@@ (db@@ )) { java.lang.String co@@ lu@@ m@@ n = (@@ str@@ ateg@@ y == (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ A@@ TE@@ )) ? "@@ is@@ _@@ private@@ " : "@@ w@@ ork@@ _@@ in@@ _@@ pro@@ g@@ ress@@ "; execute@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ U@@ P@@ D@@ AT@@ E change@@ s " + ((((@@ ("@@ S@@ E@@ T %s = '@@ Y@@ '@@ , " + " statu@@ s = '@@ n@@ ' ") + " cre@@ ated@@ _@@ on = ") + "@@ W@@ H@@ ER@@ E statu@@ s = '@@ d@@ ' ") + " O@@ R statu@@ s = '@@ n@@ '@@ n@@ ' ") + " ") + " ") + " AN@@ D E@@ X@@ IS@@ T@@ S ") + (@@ " S@@ E@@ L@@ EC@@ T * ") + " F@@ RO@@ M patch@@ _@@ set@@ s W@@ H@@ ER@@ E patch@@ _@@ set@@ s.@@ change@@ _@@ id = changes.@@ change@@ _@@ id = changes.@@ change@@ _@@ id ") + " patch@@ _@@ set@@ _@@ d@@ raf@@ t = '@@ Y@@ )) )) + "@@ )), "@@ co@@ lu@@ m@@ n@@ )); } ui.@@ message@@ (@@ "@@ do@@ ne@@ "); }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d) { if (@@ d@@ cm@@ d == null@@ ) { return "@@ Comman@@ d w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed@@ "; } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] tri@@ mm@@ ed@@ Arg@@ s = d@@ cm@@ d@@ .get@@ T@@ ri@@ mm@@ ed@@ Argument@@ s(); if (@@ tri@@ mm@@ ed@@ Arg@@ s != null@@ ) { command@@ Name.@@ append(@@ com.google.gerrit.sshd.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ .@@ ").@@ j@@ o@@ in@@ (@@ tri@@ mm@@ ed@@ Arg@@ s@@ )); } return command@@ Name.@@ toString@@ (); }
public java.lang.String my@@ Url@@ () { throw new java.lang.@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ation@@ Exception("@@ p@@ orted@@ "); }
@org.junit.Test public void test@@ H@@ e@@ al@@ th@@ Check@@ Enabled(@@ ) throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ h@@ e@@ al@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ NA@@ B@@ L@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ h@@ e@@ al@@ th@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ F@@ alse@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ NA@@ B@@ L@@ E_@@ K@@ E@@ Y@@ , true@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ h@@ e@@ al@@ th@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ J@@ Group@@ s@@ S@@ kip@@ In@@ ter@@ fa@@ ce@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ j@@ group@@ s().@@ s@@ kip@@ In@@ ter@@ fa@@ ce@@ ()).@@ isEqualTo(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ DE@@ FA@@ U@@ L@@ T_@@ S@@ K@@ I@@ P@@ _@@ IN@@ T@@ ER@@ F@@ AC@@ E_@@ L@@ IS@@ T@@ ); g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ List(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ J@@ G@@ RO@@ U@@ P@@ S@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ K@@ I@@ P@@ _@@ IN@@ T@@ ER@@ F@@ AC@@ E_@@ K@@ E@@ Y@@ , remo@@ c@@ k.@@ com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ lo@@ *@@ ", "@@ et@@ h@@ 0@@ ")); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ j@@ group@@ s@@ kip@@ In@@ ter@@ fa@@ ce@@ ()).@@ contains@@ All@@ Of@@ ("@@ lo@@ *@@ ", "@@ et@@ h@@ 0@@ ").@@ in@@ Or@@ der@@ (); }
@org.junit.Test public void test@@ Get@@ J@@ Group@@ s@@ C@@ lu@@ st@@ er@@ () throw@@ s java.lang.Exception { g@@ lobal@@ Config.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ J@@ G@@ RO@@ U@@ P@@ S@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ L@@ US@@ T@@ ER@@ _@@ NA@@ M@@ E_@@ K@@ E@@ Y@@ , "@@ foo@@ "); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ j@@ group@@ s().@@ clu@@ st@@ er@@ Name@@ ()).@@ isEqualTo@@ ("@@ foo@@ "); }
@org.junit.Test public void test@@ Get@@ Web@@ s@@ ession@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ web@@ s@@ ession@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ W@@ E@@ B@@ S@@ ES@@ S@@ ION@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ web@@ s@@ ession@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ alse@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ W@@ E@@ B@@ S@@ ES@@ S@@ ION@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ web@@ s@@ ession@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ Cache@@ Pat@@ tern@@ s() throw@@ s java.lang.Exception { g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ List(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ AT@@ T@@ ER@@ N@@ _@@ K@@ E@@ Y@@ , w@@ i@@ remo@@ c@@ k.@@ com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ ")); com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er match@@ er = new com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er@@ (get@@ Config@@ ur@@ ation@@ ()); for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ account@@ s@@ _@@ by@@ email@@ ", "@@ ld@@ ap@@ _@@ group@@ s", "@@ project@@ _@@ list@@ ", "@@ my@@ _@@ a@@ ", "@@ my@@ _@@ cach@@ e@@ _@@ b@@ _@@ "@@ other@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ True@@ (); } for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ ld@@ ap@@ _@@ group@@ s@@ _@@ by@@ _@@ in@@ clu@@ de@@ ", "@@ foo@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ F@@ alse@@ (); } }
@org.junit.Test public void test@@ Get@@ Event@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ event@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ V@@ E@@ N@@ T_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ event@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ alse@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ V@@ E@@ N@@ T_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ Index@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ index@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ alse@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ index@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Cache@@ Pat@@ tern@@ Match@@ er@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ config@@ ur@@ ation@@ Mo@@ c@@ k.@@ cach@@ e@@ ().@@ pat@@ tern@@ s@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ i@@ remo@@ c@@ k.@@ com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ ")); com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er match@@ er = new com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er@@ (@@ config@@ ur@@ ation@@ Mo@@ ck@@ ); for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ account@@ s@@ _@@ by@@ email@@ ", "@@ ld@@ ap@@ _@@ group@@ s", "@@ project@@ _@@ list@@ ", "@@ my@@ _@@ cach@@ e@@ _@@ a@@ ", "@@ my@@ _@@ cach@@ e@@ _@@ b@@ ", "@@ other@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ True@@ (); } for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ ld@@ ap@@ _@@ group@@ s@@ _@@ by@@ _@@ in@@ clu@@ de@@ ", "@@ foo@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ F@@ alse@@ (); } }
@org.junit.Test public void test@@ Get@@ Cache@@ Pat@@ tern@@ s() throw@@ s java.lang.Exception { g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ List(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ AT@@ T@@ ER@@ N@@ _@@ K@@ E@@ Y@@ , com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ ")); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ cach@@ e@@ ().@@ pat@@ tern@@ s@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ "); }
@org.junit.Test public void test@@ Get@@ Cache@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ cach@@ e@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ cach@@ e@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ alse@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); }
static boolean on@@ Time@@ (java.lang.String date@@ Tim@@ e) { return (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ F@@ OR@@ M@@ AT@@ OR@@ M@@ AT@@ no@@ w@@ ().@@ compare@@ To@@ (@@ date@@ Time@@ )) <@@ = 0; }
@org.junit.Test public void test@@ On@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ no@@ w@@ ().@@ p@@ lu@@ s@@ M@@ il@@ li@@ s(@@ 1@@ )@@ )).@@ is@@ True@@ (); }
public java.lang.String for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t in@@ stant@@ ) { return for@@ m@@ at@@ (in@@ stant@@ s.@@ I@@ .@@ T@@ I@@ ME@@ ); }
public java.lang.String no@@ w@@ (@@ int se@@ con@@ d@@ s@@ To@@ Add@@ ) { return con@@ .@@ for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ ().@@ p@@ lu@@ s@@ Se@@ con@@ d@@ s(@@ se@@ con@@ d@@ s@@ To@@ Add@@ )); }
public java.lang.String no@@ w@@ () { return java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ ()); }
@org.junit.Test public void for@@ m@@ at@@ With@@ Default@@ Time@@ z@@ one@@ () throw@@ s java.lang.Exception { org.@@ j@@ o@@ d@@ a.@@ ti@@ m@@ e.@@ Date@@ Tim@@ e no@@ w = org.@@ j@@ o@@ d@@ a.@@ ti@@ m@@ e.@@ Date@@ Tim@@ e.@@ no@@ w@@ (); java.lang.String j@@ o@@ d@@ a@@ For@@ ma@@ t = org.@@ j@@ o@@ d@@ a.@@ time@@ .@@ for@@ ma@@ t.@@ IS@@ O@@ Date@@ Time@@ For@@ ma@@ t.@@ date@@ Time@@ ().@@ p@@ r@@ int@@ (@@ no@@ w@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Date@@ Tim@@ e for@@ m@@ at@@ ter = com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Date@@ Tim@@ e.@@ instance@@ (); java.lang.String java@@ For@@ ma@@ t = for@@ m@@ at@@ ter@@ .@@ for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ of@@ E@@ po@@ ch@@ il@@ li@@ (@@ no@@ w@@ .get@@ M@@ il@@ li@@ s@@ ())); assert@@ Th@@ at(@@ java@@ ).@@ isEqualTo(@@ j@@ o@@ d@@ a@@ Format@@ ); }
static java.lang.String time@@ out@@ (@@ int exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s) { return com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ F@@ OR@@ M@@ AT@@ .@@ no@@ w@@ (@@ exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s); }
@org.junit.Test public void test@@ Ex@@ p@@ i@@ red@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (@@ for@@ m@@ at@@ ter@@ .@@ for@@ m@@ at(@@ no@@ w@@ ().@@ min@@ us@@ M@@ il@@ li@@ s(@@ 1@@ )@@ )).@@ is@@ F@@ alse@@ (); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request requ@@ est@@ , javax.servlet.@@ Servlet@@ Response res@@ pon@@ se@@ , javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { if ((@@ requ@@ est instanceof javax.servlet.http.HttpServlet@@ Request@@ ) && (@@ res@@ pon@@ se instanceof javax.servlet.http.HttpServlet@@ Respon@@ se@@ )) { java.lang.String met@@ ho@@ d = ((@@ javax.servlet.http.HttpServlet@@ Request@@ ) (re@@ qu@@ est@@ )@@ ).get@@ Met@@ ho@@ d@@ (); if (((@@ met@@ ho@@ d == "@@ P@@ O@@ ST@@ ") || (@@ met@@ ho@@ d == "@@ UT@@ P@@ ")) || (@@ met@@ ho@@ d == "@@ DE@@ LE@@ TE@@ ")) { ((@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ ) (@@ res@@ pon@@ se@@ )).@@ send@@ Error@@ (com.googlesource.gerrit.plugins.@@ re@@ do@@ n@@ l@@ y.@@ SC_@@ S@@ ER@@ V@@ I@@ C@@ E_@@ U@@ NA@@ V@@ A@@ IL@@ AB@@ LE@@ , this@@ .@@ message@@ ); return@@ ; } } ch@@ ain@@ .@@ do@@ Filter@@ (re@@ qu@@ est@@ , res@@ pon@@ se@@ ); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception@@ (@@ this@@ .@@ message@@ ); }
@java.lang.Override public java.lang.String toString@@ () { return name@@ ().to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); }
@org.junit.@@ Af@@ ter public void te@@ ar@@ Down@@ () throw@@ s java.lang.Exception { st@@ a@@ t.@@ execute@@ (("@@ D@@ RO@@ P T@@ AB@@ L@@ E " + (@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Table.@@ T@@ AB@@ L@@ E_@@ NAME@@ ))); store@@ .@@ st@@ op@@ (); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ Merge@@ Update@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ A@@ TE@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ No@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ Merge@@ Update@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ A@@ TE@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ No@@ Code@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CO@@ D@@ E_@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ No@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
public boolean get@@ I@@ g@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ () { return ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ; }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ , boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAME@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ set@@ -@@ cre@@ ated@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ empty@@ -@@ empty@@ -@@ patch@@ -@@ set@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ base@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ (@@ mo@@ ck@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ No@@ Code@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CO@@ D@@ E_@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ Re@@ w@@ ork@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ k@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ RE@@ W@@ OR@@ K@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ PatchSet@@ Cre@@ ated@@ ()))) { return false@@ ; } try { com.google.gerrit.server.@@ data.@@ PatchSet@@ Attri@@ but@@ e patchSet@@ ; patch@@ Set = event.@@ patchSet@@ .get(); if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ()) && ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ )) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ A@@ TE@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CO@@ D@@ E_@@ CHANG@@ E@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ )))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ E@@ rror check@@ ing p@@ atch se@@ t k@@ ind@@ ", e); } boolean result@@ ; result = true@@ ; try { java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ ter@@ n pat@@ tern@@ ; pat@@ ter@@ n = java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (@@ config@@ .get@@ I@@ g@@ no@@ re@@ (), java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ D@@ O@@ T@@ AL@@ L@@ ); java.util.@@ re@@ g@@ ex@@ .@@ Match@@ er match@@ er@@ ; match@@ er = pat@@ tern@@ .@@ match@@ er@@ (@@ event.@@ change@@ .get().@@ commit@@ Message@@ ); result = !@@ (@@ match@@ er.@@ match@@ es@@ ()); } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Th@@ e sp@@ e@@ c@@ if@@ i@@ ed ed ed ig@@ n@@ or@@ e pat@@ ter@@ n w@@ a@@ s in@@ valid@@ ", e); } return result@@ ; }
private void pro@@ cess(@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ O@@ per@@ ation o@@ per@@ ation@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); java.lang.String pat@@ h = req@@ .get@@ Path@@ Info@@ (); T id = parse@@ (p@@ ath@@ .@@ substring@@ ((@@ (p@@ ath@@ .@@ last@@ Index@@ Of(@@ '@@ /@@ '@@ )) + 1@@ ))); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ {@@ } {}@@ ", o@@ per@@ ation.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ), type@@ , id); try { com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.set@@ For@@ war@@ ded@@ Event@@ (@@ true@@ ); java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Integ@@ er id@@ Lo@@ c@@ k = get@@ And@@ In@@ cre@@ ment@@ Id@@ Lo@@ ck@@ (id@@ ); synchronized@@ (@@ this@@ ) { index@@ , o@@ per@@ ation@@ ); } if ((@@ id@@ Lo@@ c@@ k.@@ d@@ ec@@ re@@ ment@@ And@@ Get@@ ()) == 0) { remove@@ Id@@ Lo@@ ck@@ (id@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ CON@@ F@@ L@@ I@@ C@@ T@@ , e.get@@ Message()); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Servlet.@@ log@@ g@@ er.@@ error@@ ("@@ Un@@ able to updat@@ e {@@ } index@@ ", type@@ , e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ E@@ rror try@@ ing to fin@@ d %s \n@@ ", typ@@ e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ F@@ O@@ UN@@ D@@ , msg@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ (@@ msg@@ , e); } final@@ l@@ y { com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ un@@ set@@ For@@ war@@ der.@@ Contex@@ t.@@ un@@ set@@ For@@ war@@ ded@@ Event@@ (); } }
public static com.google.inject.@@ Ab@@ str@@ act@@ Mo@@ d@@ ul@@ e module@@ () { return new com.google.inject.@@ Ab@@ str@@ act@@ Module@@ () { @java.lang.Override public void configure() { com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ List@@ ener@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ class@@ ); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ OR@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Auth@@ or E@@ mai@@ l ite@@ list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ R@@ A@@ Y@@ , null@@ , false@@ , "@@ ite@@ Wh@@ li@@ s@@ t of or e@@ mai@@ l add@@ res@@ se@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Commit@@ t@@ ter ite@@ l Wh@@ ite@@ l ", null@@ , projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ R@@ A@@ Y@@ , null@@ , "@@ ite@@ l s@@ t of commit@@ ter e@@ mai@@ l add@@ res@@ se@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); } }; }
@java.lang.Override protected void configure() { in@@ stall@@ (@@ new com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Pat@@ tern@@ Cache@@ Module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Content@@ Type@@ Util.@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ F@@ oo@@ ter@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Ma@@ x@@ Path@@ L@@ en@@ gth@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ File@@ Ex@@ t@@ en@@ sion@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Invalid@@ File@@ name@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Sub@@ module@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Sy@@ m@@ link@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Block@@ ed@@ Key@@ w@@ or@@ d@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Invalid@@ Line@@ En@@ d@@ ing@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Content@@ Type@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ D@@ up@@ li@@ cate@@ Path@@ name@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Config@@ Factory@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Plugin@@ Config@@ With@@ In@@ herit@@ ance@@ Factory@@ .@@ class@@ ).@@ in@@ (@@ S@@ cop@@ es.@@ S@@ IN@@ G@@ LE@@ T@@ ON@@ ); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean is@@ Commit@@ ter@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean p@@ er@@ for@@ m@@ Validation@@ (java.lang.String email@@ , java.lang.String@@ [] email@@ Wh@@ ite@@ list@@ ) { return java.util.Array@@ s.@@ stream@@ (@@ email@@ Wh@@ ite@@ list@@ ).@@ an@@ y@@ Match@@ (@@ java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ match@@ es(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ email@@ ))); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.lang.String@@ [] get@@ Author@@ Email@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ OR@@ _@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ List@@ ener@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ class@@ ); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ OR@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Auth@@ or E@@ mai@@ l Wh@@ ite@@ list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ R@@ A@@ Y@@ , null@@ , "@@ ite@@ li@@ s@@ t of auth@@ or e@@ mai@@ l add@@ res@@ se@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ IL@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Commit@@ t@@ ter E@@ mai@@ l Wh@@ ite@@ list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ Y@@ , null@@ , false@@ , "@@ ite@@ li@@ s@@ t of commit@@ ter e@@ mai@@ l add@@ res@@ se@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean is@@ Author@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ OR@@ _@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.lang.String@@ [] get@@ Commit@@ ter@@ Email@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ I@@ TE@@ L@@ IS@@ T@@ ); }
@java.lang.Override protected void configure() { bind(@@ java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Plugin@@ Name@@ .@@ class@@ ).to@@ Instance@@ ("@@ I@@ t@@ s@@ Test@@ Name@@ "); it@@ s@@ Pat@@ h = ra@@ n@@ do@@ m@@ T@@ arget@@ Path@@ ().@@ res@@ ol@@ ve@@ ("@@ et@@ c@@ ").@@ res@@ ol@@ ve@@ ("@@ it@@ s@@ "); assert@@ F@@ alse@@ ((("@@ it@@ s@@ Pat@@ h (@@ " + (@@ it@@ s@@ Path@@ )) + ") al@@ read@@ y ex@@ ist@@ s@@ "), java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ s@@ Path@@ )); c@@ le@@ an@@ up@@ Site@@ Pat@@ h = true@@ ; rule@@ s@@ Config@@ Read@@ er = create@@ Mo@@ ck@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ Rule@@ s@@ Config@@ Read@@ er@@ .@@ class@@ ); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Rule@@ s@@ Config@@ Read@@ er@@ .@@ class@@ ).to@@ Instance@@ (r@@ ule@@ s@@ Config@@ ); rule@@ s@@ Project@@ Cach@@ e = create@@ Mo@@ ck@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ I@@ t@@ s@@ Project@@ Cache@@ .@@ class@@ ); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ I@@ t@@ s@@ Project@@ Cache@@ .@@ class@@ ).to@@ Instance@@ (r@@ ule@@ s@@ Project@@ Cach@@ e); bind(@@ java.nio.file.@@ Path@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ I@@ t@@ s@@ Path@@ .@@ class@@ ).to@@ Instance@@ (@@ it@@ s@@ Path@@ ); bind(@@ java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ G@@ lobal@@ Rule@@ s@@ File@@ Name@@ .@@ class@@ ).to@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Base@@ Rule@@ Test.@@ K@@ in@@ d.@@ LO@@ G@@ AL@@ AL@@ AL@@ .@@ file@@ Name); bind(@@ java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ class@@ ).to@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ class@@ Rule@@ .@@ Base@@ Rule@@ .@@ K@@ in@@ d.@@ S@@ IT@@ S@@ IT@@ S@@ .@@ file@@ Name); }
@@@ com.google.inject.@@ Provi@@ de@@ s @@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ I@@ t@@ s@@ Pat@@ h @@@ com.google.inject.@@ Injec@@ t java.nio.file.@@ Pat@@ h it@@ s@@ Path@@ (@@ @@@ com.google.gerrit.server.config.@@ Site@@ Pat@@ h java.nio.file.@@ Pat@@ h sit@@ e@@ Path@@ ) { return sit@@ e@@ Path@@ .@@ n@@ or@@ ma@@ li@@ ze@@ ().@@ res@@ ol@@ ve@@ ("@@ et@@ c@@ ").@@ res@@ ol@@ ve@@ ("@@ it@@ s@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id, com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { switch (@@ o@@ per@@ ation@@ ) { case IN@@ DE@@ X : try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema@@ Factory.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Change change = db.@@ changes@@ ().get@@ (id@@ ); if (@@ change == null@@ ) { index@@ er.@@ delete@@ (id@@ ); return@@ ; } index@@ er.@@ index@@ (db, change@@ ); } com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed@@ ", id); break@@ ; case DE@@ LE@@ T@@ E : index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y de@@ le@@ ted f@@ ro@@ m index@@ ", id); break@@ ; } }
@java.lang.Override protected void configure() { bind(@@ java.util.concurrent.@@ Execu@@ tor@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ .@@ class@@ ).to@@ Provider@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ Provider@@ .@@ class@@ ); list@@ ener@@ ().to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ Provider@@ .@@ class@@ ); com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ Change@@ Index@@ ed@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Event@@ Handler@@ .@@ class@@ ); com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ Account@@ Index@@ ed@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Event@@ Handler@@ .@@ class@@ ); com.google.gerrit.extensions.re@@ gist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ L@@ if@@ ec@@ yc@@ le@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Au@@ to@@ Re@@ index@@ At@@ Start@@ .@@ class@@ ); }
public boolean au@@ to@@ Re@@ index@@ At@@ Start@@ () { return au@@ to@@ Re@@ index@@ ; }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s java.io.IOException { index@@ er.@@ index@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Account@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Account {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed@@ ", id); index@@ T@@ s.@@ update@@ ("@@ account@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id, com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s java.io.IOException { index@@ er.@@ index@@ (@@ u@@ id); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Group@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Group {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed@@ ", u@@ id); index@@ T@@ s.@@ update@@ ("@@ group@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id, com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null@@ ; switch (@@ o@@ per@@ ation@@ ) { case IN@@ DE@@ X : try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema@@ Factory.@@ open@@ ()) { change = db.@@ changes@@ ().get@@ (id@@ ); if (@@ change != null@@ ) { index@@ er.@@ index@@ (db, change@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed@@ ", id); } } catch (@@ java.lang.Exception e) { if (!(@@ is@@ C@@ au@@ sed@@ By@@ Change@@ Exception(@@ e@@ ))) { throw e@@ ; } com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing for@@ war@@ de@@ d th@@ e change.@@ ", id@@ .get()); } if (@@ change == null@@ ) { index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } not fo@@ und@@ , de@@ le@@ ted f@@ ro@@ m index@@ ", id); } break@@ ; case DE@@ LE@@ T@@ E : index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ y de@@ le@@ ted f@@ ro@@ m index@@ ", id); break@@ ; } }
public void set@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key ext@@ er@@ n@@ al@@ Id@@ Key@@ ) { put(@@ last@@ Lo@@ gin@@ ExternalId@@ Pro@@ per@@ ty@@ Key@@ , ext@@ er@@ n@@ al@@ Id@@ Key@@ ); }
private void con@@ ver@@ t@@ Lo@@ cal@@ User@@ To@@ L@@ ow@@ er@@ Case@@ (@@ final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id@@ ) { if (@@ ext@@ Id.@@ is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ )) { final java.lang.String local@@ User = ext@@ Id@@ .get@@ S@@ che@@ me@@ Rest@@ (); final java.lang.String local@@ User@@ L@@ ow@@ er@@ C@@ ase = local@@ User@@ .@@ to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); if (!(@@ local@@ User@@ .equals(@@ local@@ User@@ L@@ ow@@ er@@ Case@@ ))) { final com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key ext@@ Id@@ Key@@ L@@ ow@@ er@@ C@@ ase = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , local@@ User@@ L@@ ow@@ er@@ Case@@ ); final com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id@@ L@@ ow@@ er@@ C@@ ase = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (@@ ext@@ Id@@ .getAccount@@ Id(), ext@@ Id@@ Key@@ L@@ ow@@ er@@ Case@@ ); try { db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ L@@ ow@@ er@@ Case@@ )); db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); } catch (com.google.gwtorm.server.OrmException (com.google.gwtorm.server.OrmException error@@ ) { java.lang.@@ Sy@@ ste@@ m.@@ er@@ r.@@ p@@ r@@ int@@ l@@ n@@ (("@@ ER@@ R " + (@@ error@@ .get@@ Message@@ ()))); } } }
@java.lang.Override public int run() throw@@ s java.lang.Exception { if ((@@ th@@ read@@ s) <@@ = 0) { th@@ read@@ s = 1; } db@@ Injec@@ tor = create@@ Db@@ Injector@@ (@@ com.google.gerrit.pgm.@@ M@@ U@@ L@@ T@@ I@@ _@@ US@@ ER@@ ); m@@ anag@@ er.@@ add(@@ db@@ Injector@@ , db@@ Injector@@ .@@ create@@ Ch@@ ild@@ Injector@@ (com.google.gerrit.server.@@ schema.@@ Schema@@ Version@@ Ch@@ ec@@ k.@@ module@@ ())); m@@ anag@@ er.@@ start@@ (); db@@ Injector@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = dat@@ ab@@ ase.@@ open@@ ()) { to@@ do = db.account@@ ExternalId@@ s().@@ all@@ ().to@@ List(); synchronized@@ (m@@ on@@ it@@ or@@ ) { m@@ on@@ it@@ or@@ .@@ be@@ gin@@ Task@@ ("@@ Con@@ ver@@ t@@ ing loc@@ al user@@ nam@@ es@@ ", to@@ do@@ .@@ size()); } final java.util.List<@@ com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ W@@ ork@@ er@@ > w@@ ork@@ er@@ s = new java.util.ArrayList<@@ >@@ (@@ th@@ read@@ s); for (@@ int ti@@ d = 0; ti@@ d < (@@ th@@ read@@ s); ti@@ d@@ ++@@ ) { com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ W@@ ork@@ er t = new com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ W@@ ork@@ er@@ (); start@@ (); w@@ ork@@ er@@ s.add(@@ t@@ ); } for (@@ com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ W@@ ork@@ er w@@ ork@@ er@@ s) { t.@@ j@@ o@@ in@@ (); } synchronized@@ (m@@ on@@ it@@ or@@ ) { m@@ on@@ it@@ or@@ .@@ end@@ Task@@ (); } m@@ anag@@ er.@@ st@@ op@@ (); return 0; }
private com.google.gerrit.reviewdb.client.Account@@ External@@ Id next@@ () { if (@@ to@@ do@@ ) { return null@@ ; } return to@@ do@@ .@@ remove@@ (((@@ to@@ do@@ .@@ size@@ ()) - 1@@ )); }
private static boolean cor@@ re@@ ct@@ User@@ (java.lang.String user@@ , com.google.gerrit.httpd.@@ Web@@ S@@ es@@ sion s@@ ession@@ ) { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key id = s@@ ession@@ .get@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ (); return (@@ id != null@@ ) && (id@@ .@@ e@@ qual@@ s@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , user@@ ))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource rsrc@@ , com.google.gerrit.server.config.@@ Con@@ fi@@ r@@ m@@ E@@ mail.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.@@ Current@@ User user = self@@ .get(); if (!(@@ user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.server.config.@@ Con@@ fi@@ r@@ m@@ E@@ mail.@@ Input@@ (); } if ((@@ input.@@ token@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ mis@@ s@@ ing token@@ "); } try { com.google.gerrit.server.mail.@@ Email@@ Token@@ V@@ er@@ if@@ i@@ er.@@ Par@@ sed@@ To@@ k@@ en to@@ k@@ en = email@@ Token@@ V@@ er@@ if@@ i@@ er.@@ de@@ code@@ (in@@ put.@@ token@@ ); com.google.gerrit.reviewdb.client.Account.Id ac@@ c@@ Id = user@@ .getAccount@@ Id(); if (@@ ac@@ c@@ Id.@@ equals(@@ token@@ .getAccount@@ Id@@ ())) { account@@ Manager.@@ link@@ (@@ ac@@ c@@ Id, token@@ .@@ to@@ Auth@@ Request@@ ()); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); } throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ in@@ vali@@ d token@@ "); } } catch (com.google.gerrit.server.@@ mail.@@ Email@@ Token@@ V@@ er@@ if@@ i@@ er e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ in@@ vali@@ d token@@ "); } catch (com.google.gerrit.server.@@ account.@@ Account@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ e.get@@ Message()); } }
private com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s for@@ Gerrit@@ Commit@@ s(@@ com.google.gerrit.server.project.@@ Ref@@ Control ref@@ Control@@ , com.google.gerrit.server.@@ ssh@@ .@@ Ssh@@ Info ssh@@ Info@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevWalk r@@ w@@ ) { return new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s(@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Up@@ load@@ Merg@@ es@@ Permission@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ A@@ m@@ end@@ ed@@ Gerrit@@ Merge@@ Commit@@ Validation@@ List@@ ener@@ (ref@@ Control@@ , gerrit@@ Ident@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Author@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Sig@@ ned@@ O@@ ff@@ By@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Change@@ Id@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ , in@@ stall@@ Commit@@ M@@ s@@ g@@ Hook@@ Command@@ , ssh@@ Info@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Config@@ Validator@@ (ref@@ Control@@ , r@@ w, all@@ User@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Plugin@@ Commit@@ Validation@@ List@@ ener@@ (@@ plugin@@ Validator@@ s@@ ))); }
private com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s for@@ Receive@@ Commit@@ s(@@ com.google.gerrit.server.project.@@ Ref@@ Control ref@@ Control@@ , com.google.gerrit.server.@@ ssh@@ .@@ Ssh@@ Info ssh@@ Info@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevWalk r@@ w@@ ) throw@@ s java.io.IOException { org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p re@@ ject@@ Commit@@ s = com.google.gerrit.server.git.@@ B@@ an@@ Commit.@@ load@@ Re@@ ject@@ Commit@@ s@@ Map@@ (repo, r@@ w@@ ); return new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s(@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Up@@ load@@ Merg@@ es@@ Permission@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ A@@ m@@ end@@ ed@@ Gerrit@@ Merge@@ Commit@@ Validation@@ List@@ ener@@ (ref@@ Control@@ , gerrit@@ Ident@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Author@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Commit@@ ter@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Sig@@ ned@@ O@@ ff@@ By@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Change@@ Id@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ , in@@ stall@@ Commit@@ M@@ s@@ g@@ Hook@@ Command@@ , ssh@@ Info@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ s.@@ Config@@ Validator@@ (ref@@ Control@@ , all@@ User@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ s.@@ B@@ an@@ ned@@ Commit@@ s@@ Validator@@ (re@@ ject@@ Commit@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ s.@@ Plugin@@ Commit@@ Validation@@ List@@ ener@@ (@@ plugin@@ Validator@@ s@@ ))); }
private void write@@ Object@@ (@@ final java.io.@@ Object@@ Output@@ Stream out@@ ) throw@@ s java.io.IOException { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 1); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , account@@ Id@@ .get()); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 2); write@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (@@ out@@ , ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ At@@ ); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 3@@ ); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , per@@ si@@ st@@ ent@@ C@@ ook@@ i@@ e ? 1 : 0@@ )); if ((@@ ext@@ er@@ n@@ al@@ Id@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 4@@ ); write@@ String@@ (@@ out@@ , ext@@ er@@ n@@ al@@ Id@@ .get()); } if ((@@ s@@ ession@@ Id@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 5@@ ); write@@ String@@ (@@ out@@ , s@@ ession@@ Id); } write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 6@@ ); write@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (@@ out@@ , exp@@ i@@ res@@ At@@ ); if ((@@ auth@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 7@@ ); write@@ String@@ (@@ out@@ , auth@@ ); } write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 0); }
Account@@ External@@ Id.@@ Key get@@ ExternalId@@ () { return ext@@ er@@ n@@ al@@ Id@@ ; }
private Account@@ External@@ Id.@@ Key to@@ Ex@@ t@@ Id@@ Key@@ (@@ byte@@ [] f@@ p@@ ) { return new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ G@@ P@@ G@@ K@@ E@@ Y@@ , com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ en@@ code@@ (@@ f@@ p@@ )); }
com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al create@@ Val@@ (@@ final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Key key@@ , final com.google.gerrit.reviewdb.client.Account.Id who@@ , final boolean re@@ me@@ mber@@ , final com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key last@@ Lo@@ gin@@ , java.lang.String si@@ d, java.lang.String auth@@ ) { final long h@@ al@@ f@@ Ag@@ e@@ Ref@@ res@@ h = (s@@ ession@@ Ma@@ x@@ Ag@@ e@@ M@@ il@@ li@@ s) >@@ >> 1; final long min@@ Ref@@ res@@ h = java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ .@@ con@@ ver@@ t@@ (1@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ ); final long ref@@ res@@ h = java.lang.@@ M@@ ath@@ .@@ min@@ (@@ h@@ al@@ f@@ Ag@@ e@@ Ref@@ res@@ h@@ , min@@ Ref@@ res@@ h@@ ); final long no@@ w = no@@ w@@ M@@ s(); final long ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ A@@ t = no@@ w + ref@@ res@@ h@@ ; final long exp@@ i@@ res@@ A@@ t = no@@ w + (s@@ ession@@ Ma@@ x@@ Ag@@ e@@ M@@ il@@ li@@ s); if (@@ si@@ d == null@@ ) { si@@ d = new@@ Un@@ i@@ qu@@ e@@ Token@@ (@@ who@@ ); } if (@@ a@@ ut@@ h == null@@ ) { a@@ ut@@ h = new@@ Un@@ i@@ qu@@ e@@ Token@@ (@@ who@@ ); } com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al va@@ l = new com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Val@@ (@@ who@@ , ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ At@@ , re@@ me@@ mber@@ , last@@ Lo@@ gin@@ , exp@@ i@@ res@@ At@@ , si@@ d, auth@@ ); self@@ .@@ put(@@ key@@ .@@ token@@ , va@@ l@@ ); return va@@ l@@ ; }
public java.util.List<java.lang.String> get@@ Se@@ con@@ d@@ ary@@ Email@@ s(@@ com.google.gerrit.reviewdb.client.@@ Account account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { java.util.List<java.lang.String> email@@ s = new java.util.Array@@ List@@ (com.google.gerrit.server.@@ account.@@ Account@@ State@@ .get@@ Email@@ s(@@ ext@@ er@@ n@@ al@@ Id@@ s@@ )); if ((@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) { email@@ s.@@ remove@@ (account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()); } java.util.Collections.s@@ ort@@ (@@ email@@ s); return email@@ s; }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (com.google.gerrit.server.@@ account.@@ External@@ Id.@@ Key@@ .@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , user@@ name@@ )@@ )).@@ map@@ (@@ Account@@ ExternalId@@ :@@ get@@ Account@@ Id); }
public com.google.gerrit.server.account.@@ Auth@@ Result link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request who@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id ext@@ Id = fin@@ d@@ ExternalId@@ (db, who@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ to@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Id@@ enti@@ t@@ y in u@@ se b@@ y an@@ oth@@ er account@@ "); } update@@ (db, who@@ , ext@@ Id); } else { ext@@ Id = com.google.gerrit.server.account.@@ External@@ Id.@@ create@@ With@@ Email@@ (@@ who@@ .get@@ ExternalId@@ Key@@ (), to@@ , who@@ .get@@ Email@@ Add@@ ress@@ ()); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id.@@ as@@ Account@@ ExternalId@@ ())); if ((@@ who@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = db.account@@ s@@ ().get@@ (@@ to@@ ); if ((@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) == null@@ ) { a.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ who@@ .get@@ Email@@ Add@@ ress@@ ()); db.account@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (@@ a@@ )); } } if ((@@ who@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { by@@ Email@@ Cache.@@ e@@ vi@@ ct@@ (@@ who@@ .get@@ Email@@ Add@@ ress@@ ()); } by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ to@@ ); } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ to@@ , who@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } }
public com.google.gerrit.server.account.@@ Auth@@ Result update@@ Link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request who@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key k@@ ey = who@@ .get@@ ExternalId@@ Key@@ ().@@ as@@ Account@@ ExternalId@@ Key@@ (); java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ > filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e = filter@@ Key@@ s@@ By@@ S@@ che@@ me@@ (key@@ .get@@ S@@ che@@ me@@ (), db.account@@ ExternalId@@ s().@@ by@@ Account@@ (@@ to@@ )); if ((!@@ (@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e.@@ isEmpty())) && (((@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e.@@ size@@ ()) > 1@@ ) || (!(@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e.@@ contains(@@ key@@ )@@ )))) { db.account@@ ExternalId@@ s().@@ delete@@ Key@@ s(@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ me@@ ); } by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ to@@ ); return link@@ (@@ to@@ , who@@ ); } }
public com.google.gerrit.server.account.@@ Auth@@ Result un@@ link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ , com.google.gerrit.server.account.@@ Auth@@ Request who@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id ext@@ Id = fin@@ d@@ ExternalId@@ (db, who@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ from@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((("@@ Id@@ enti@@ t@@ y '@@ " + (@@ who@@ .get@@ ExternalId@@ Key@@ ().get@@ ())) + "@@ ' in u@@ se b@@ y an@@ oth@@ er account@@ ")); } db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id.@@ as@@ Account@@ ExternalId@@ ())); if ((@@ who@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = db.account@@ s@@ ().get@@ (@@ from@@ ); if (((@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) && (@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ().equals(@@ who@@ .get@@ Email@@ Add@@ ress@@ ()))) { a.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ null@@ ); db.account@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (@@ a@@ )); } by@@ Email@@ Cache.@@ e@@ vi@@ ct@@ (@@ who@@ .get@@ Email@@ Add@@ ress@@ ()); by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ from@@ ); } } else { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((("@@ Id@@ enti@@ t@@ y '@@ " + (@@ who@@ .get@@ ExternalId@@ Key@@ ().get@@ ())) + "@@ ' not fo@@ und@@ ")); } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ from@@ , who@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } }
private void hand@@ le@@ Set@@ t@@ ing@@ User@@ Name@@ Failure@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.@@ Account account@@ , com.google.gerrit.server.account.@@ External@@ Id ext@@ Id, java.lang.String error@@ Message@@ , java.lang.Exception e@@ , boolean log@@ Exception@@ ) throw@@ s com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception, com.google.gwtorm.server.OrmException { if (@@ log@@ Exception@@ ) { com.google.gerrit.server.account.Account@@ Manager.@@ log.error@@ (@@ error@@ Message@@ , e); } else { com.google.gerrit.server.account.Account@@ Manager.@@ log.error@@ (@@ error@@ Message@@ ); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ US@@ ER@@ _@@ NAME@@ ))) { db.account@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (account@@ )); db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id.@@ as@@ Account@@ ExternalId@@ ())); throw new com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception(@@ error@@ Message@@ , e); } }
public com.google.gerrit.server.account.@@ Auth@@ Result auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request who@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, java.io.IOException { wh@@ o = re@@ al@@ m.@@ auth@@ enti@@ cate@@ (@@ who@@ ); try { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id id = fin@@ d@@ ExternalId@@ (db, who@@ .get@@ ExternalId@@ Key@@ ()); if (@@ id == null@@ ) { return create@@ (db, who@@ ); } com.google.gerrit.reviewdb.client.@@ Account ac@@ t = by@@ Id@@ Cache@@ .get(@@ id@@ .@@ account@@ Id@@ ()@@ ).get@@ Account@@ (); if (!(@@ ac@@ t.@@ is@@ Active@@ ())) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Auth@@ enti@@ c@@ ation error@@ , ac@@ count in@@ ac@@ tive@@ "); } update@@ (db, who@@ , id); return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (id@@ .@@ account@@ Id(), who@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Auth@@ enti@@ c@@ ation error@@ ", e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> put@@ G@@ pg@@ Key@@ s(@@ com.google.gerrit.server.account.Account@@ Resource account@@ , java.util.List<java.lang.String> add@@ , java.util.List<java.lang.String> delete@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ G@@ pg@@ Exception { com.google.gerrit.gpg.@@ server.@@ Po@@ st@@ G@@ pg@@ Key@@ s.@@ Input in = new com.google.gerrit.gpg.@@ server.@@ Po@@ st@@ G@@ pg@@ Key@@ s.@@ Input@@ (); in.@@ ad@@ d = add@@ ; in.@@ de@@ le@@ te = delete@@ ; try { return post@@ G@@ pg@@ Key@@ s.@@ apply(@@ account@@ , in@@ ); } catch (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.@@ G@@ pg@@ Exception(@@ e); } }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing public static com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > get@@ G@@ pg@@ Ex@@ t@@ Id@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (@@ db.account@@ ExternalId@@ s().@@ by@@ Account@@ (account@@ Id@@ )).@@ filter@@ (@@ ( in@@ ) -@@ > in.@@ is@@ S@@ che@@ me@@ (@@ com.google.gerrit.gpg.@@ server.@@ S@@ CH@@ E@@ M@@ E_@@ G@@ P@@ G@@ K@@ E@@ Y@@ )); }
static byte@@ [] parse@@ F@@ ing@@ er@@ p@@ r@@ int@@ (java.lang.String str@@ , java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { st@@ r = com.google.common.base.@@ Char@@ Match@@ er.@@ wh@@ ites@@ pace@@ ().@@ remove@@ From@@ (@@ str@@ ).to@@ Up@@ per@@ Case@@ (); if ((((@@ st@@ r.@@ length@@ ()) != 8@@ ) && ((@@ st@@ r.@@ length@@ ()) != 4@@ 0@@ )) || (!(@@ com.google.common.base.@@ Char@@ Match@@ er.@@ an@@ y@@ Of@@ ("@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ AB@@ C@@ DE@@ F@@ ").@@ match@@ es@@ All@@ Of(@@ str@@ )))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ str@@ ); } byte@@ [] f@@ p = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id : ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) { java.lang.String f@@ p@@ St@@ r = ext@@ Id@@ .get@@ S@@ che@@ me@@ Rest@@ (); if (!(@@ f@@ p@@ St@@ r.@@ end@@ sWith@@ (@@ str@@ ))) { continue@@ ; } else if (@@ f@@ p != null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(("@@ Multi@@ pl@@ e key@@ s fo@@ un@@ d for " + str@@ )); } f@@ p = com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ de@@ code@@ (@@ f@@ p@@ Str@@ ); if ((@@ st@@ r.@@ length@@ ()) == 4@@ 0) { break@@ ; } } if (@@ f@@ p == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ str@@ ); } return f@@ p@@ ; }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception { com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ check@@ Visible@@ (@@ self@@ , rsrc@@ ); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> key@@ s = new java.util.Hash@@ Map@@ <@@ >(); try (@@ com.google.gerrit.gpg.@@ PublicKey@@ St@@ or@@ e st@@ or@@ e = store@@ Provider@@ .get@@ ()) { for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id : get@@ G@@ pg@@ Ex@@ t@@ Id@@ s(@@ rsrc@@ )) { java.lang.String f@@ p@@ St@@ r = ext@@ Id@@ .get@@ S@@ che@@ me@@ Rest@@ (); byte@@ [] f@@ p = com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ de@@ code@@ (@@ f@@ p@@ Str@@ ); boolean fo@@ un@@ d = false@@ ; for (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ PublicKey@@ R@@ ing key@@ R@@ ing : store@@ .get(@@ com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ key@@ Id(@@ f@@ p@@ ))) { if (@@ java.util.Array@@ s.@@ equals(@@ key@@ R@@ ing@@ .get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ (), f@@ p@@ )) { fo@@ un@@ d = true@@ ; com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info in@@ fo = com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ to@@ Json@@ (key@@ R@@ ing@@ .get@@ PublicKey@@ (), check@@ er@@ Factory.create@@ (rsrc@@ .getUser@@ (), store@@ ), store@@ ); key@@ s.@@ put@@ (info.@@ id, info@@ ); info.@@ id = null@@ ; break@@ ; } } if (!@@ fo@@ und@@ ) { com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ log.warn@@ ("@@ N@@ o public k@@ ey store@@ d for fin@@ g@@ er@@ p@@ r@@ int {}@@ ", com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (@@ f@@ p@@ )); } } } return key@@ s; }
com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al create@@ Val@@ (@@ final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Key key@@ , final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al va@@ l@@ ) { final com.google.gerrit.reviewdb.client.Account.Id wh@@ o = va@@ l@@ .getAccount@@ Id(); final boolean re@@ me@@ mb@@ er = va@@ l.@@ is@@ Per@@ si@@ st@@ ent@@ C@@ ook@@ i@@ e@@ (); final com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key last@@ Log@@ in = va@@ l@@ .get@@ ExternalId@@ (); return create@@ Val@@ (key@@ , who@@ , re@@ me@@ mber@@ , last@@ Lo@@ gin@@ , va@@ l.@@ s@@ ession@@ Id, va@@ l.@@ auth@@ ); }
private com.google.gerrit.gpg.@@ Check@@ Result check@@ Id@@ s@@ For@@ Ar@@ b@@ it@@ r@@ ary@@ User@@ (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Public@@ Key key@@ ) throw@@ s com.google.gwtorm.server.OrmException, org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ ExternalId@@ (@@ com.google.gerrit.gpg.@@ Gerrit@@ PublicKey@@ Check@@ er.@@ to@@ Ex@@ t@@ Id@@ Key@@ (key@@ ).get@@ ()); if (account@@ St@@ at@@ es.@@ isEmpty()) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key is not as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ y user@@ s@@ "); } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key is as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h m@@ ulti@@ pl@@ e user@@ s@@ "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = user@@ Factory.create@@ (account@@ St@@ at@@ es@@ .get(@@ 0@@ )); java.util.@@ Set@@ <java.lang.String> allow@@ ed@@ User@@ Id@@ s = get@@ Al@@ low@@ ed@@ User@@ Id@@ s(@@ user@@ ); if (@@ allow@@ ed@@ User@@ Id@@ s.@@ isEmpty()) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ N@@ o id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ "); } if (@@ has@@ Al@@ low@@ ed@@ User@@ Id@@ (key@@ , allow@@ ed@@ User@@ Id@@ s@@ )) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ tr@@ u@@ st@@ ed@@ (); } return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key do@@ es not cont@@ ai@@ n an@@ y vali@@ d c@@ er@@ t@@ if@@ ic@@ ation@@ s for user@@ '@@ s id@@ enti@@ ti@@ es@@ "); }
private void read@@ Object@@ (@@ final java.io.@@ Object@@ Input@@ Stream in@@ ) throw@@ s java.io.IOException { final int t@@ a@@ g = read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ ); switch (t@@ ag@@ ) { case 0 : P@@ AR@@ S@@ E@@ ; case 1 : account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ )); continue@@ ; case 2 : ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ A@@ t = read@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (in@@ ); continue@@ ; case 3 : per@@ si@@ st@@ ent@@ C@@ ook@@ i@@ e = (@@ read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ )) != 0; continue@@ ; case 4 : ext@@ er@@ n@@ al@@ Id = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ read@@ String@@ (in@@ )); continue@@ ; case 5 : s@@ ession@@ Id = read@@ String@@ (in@@ ); continue@@ ; case 6 : exp@@ i@@ res@@ A@@ t = read@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (in@@ ); continue@@ ; case 7 : a@@ ut@@ h = read@@ String@@ (in@@ ); continue@@ ; default : throw new java.io.IO@@ Exception(("@@ Un@@ k@@ no@@ w@@ n t@@ a@@ g fo@@ un@@ d in o@@ bject@@ : " + tag@@ )); } } if ((@@ exp@@ i@@ res@@ At@@ ) == 0) { exp@@ i@@ res@@ A@@ t = (ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ At@@ ) + (@@ java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ OUR@@ S@@ .@@ to@@ M@@ il@@ li@@ s(@@ 2@@ )); } }
private boolean is@@ Tr@@ u@@ st@@ ed@@ (@@ final com.google.gerrit.reviewdb.client.Account@@ External@@ Id id@@ ) { if (id@@ .is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ M@@ A@@ IL@@ T@@ O@@ )) { return true@@ ; } if (id@@ .is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ UUID@@ )) { return true@@ ; } if (id@@ .is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ )) { return true@@ ; } for (@@ final com.google.gerrit.server.@@ auth.@@ open@@ id@@ .@@ Open@@ Id@@ Provider@@ Pat@@ ter@@ n p : tr@@ u@@ st@@ ed@@ Open@@ ID@@ s) { if (@@ p.@@ match@@ es@@ (id@@ )) { return true@@ ; } } return false@@ ; }
private java.util.Set<@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ > read@@ Key@@ s@@ To@@ Remo@@ ve@@ (@@ com.google.gerrit.gpg.@@ server.@@ Po@@ st@@ G@@ pg@@ Key@@ s.@@ Input input@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) { if ((@@ (in@@ put.@@ delete@@ ) == null@@ ) || (in@@ put.@@ de@@ le@@ t@@ e.@@ isEmpty())) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } java.util.Set<@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ > fin@@ g@@ er@@ p@@ r@@ int@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (in@@ put.@@ de@@ le@@ t@@ e.@@ size()); for (java.lang.String id : input.@@ delete@@ ) { try { fin@@ g@@ er@@ p@@ r@@ int@@ s.@@ add@@ (@@ new com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ (@@ com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ parse@@ F@@ ing@@ er@@ p@@ r@@ int@@ (id@@ , ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s@@ ))); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { } } return fin@@ g@@ er@@ p@@ r@@ int@@ s; }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , com.google.common.collect.Immutable@@ Set.@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >@@ of@@ (), com.google.common.collect.Immutable@@ Set.@@ <@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ >@@ of@@ (), new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >@@ ()); }
public boolean match@@ es(@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id@@ ) { return match@@ es@@ (id@@ .get@@ External@@ Id()); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (@@ final java.lang.String name, final java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ F@@ ull@@ Name(@@ name); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , java.util.Collections.@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >@@ empty@@ Set@@ (), java.util.Collections.@@ <@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ >@@ empty@@ Set@@ (), new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >@@ ()); }
java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > create(@@ com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String user@@ name, java.lang.String email@@ );
@java.lang.Override public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String email@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.reviewdb.client.@@ Account a : db.account@@ s().@@ by@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ )) { r.@@ add(@@ a@@ .getId()); } for (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ State : account@@ Query@@ Provider@@ .get().@@ by@@ Email@@ Pre@@ fix@@ (@@ email@@ )) { if (account@@ State@@ .get@@ ExternalId@@ s().@@ stream@@ ().@@ filter@@ (@@ ( e) -@@ > e@@ mail.@@ equals(@@ e.get@@ Email@@ Add@@ ress@@ ()@@ )).@@ fin@@ d@@ An@@ y@@ ().@@ is@@ P@@ res@@ ent@@ ()) { r.@@ add(@@ account@@ State@@ .getAccount@@ ().get@@ Id()); } } return com.google.common.collect.Immutable@@ Set.@@ copy@@ Of@@ (r@@ ); } }
public boolean check@@ P@@ asswor@@ d(@@ java.lang.String p@@ asswor@@ d, java.lang.String user@@ name@@ ) { if (p@@ asswor@@ d == null@@ ) { return false@@ ; } for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : get@@ ExternalId@@ s()) { if ((!@@ (id@@ .is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ ))) || (!(@@ user@@ name.@@ equals(@@ id@@ .get@@ S@@ che@@ me@@ Rest@@ ()@@ )))) { continue@@ ; } java.lang.String has@@ h@@ ed@@ St@@ r = id@@ .get@@ P@@ asswor@@ d@@ (); if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ has@@ h@@ ed@@ Str@@ ))) { try { return com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ de@@ code@@ (@@ has@@ h@@ ed@@ Str@@ ).@@ check@@ P@@ asswor@@ d(@@ p@@ asswor@@ d); } catch (@@ org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception e) { com.google.gerrit.server.account.Account@@ State.@@ log@@ g@@ er.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ De@@ co@@ der@@ Exception for user %s@@ : %s user@@ name, e.get@@ Message@@ ())); return false@@ ; } } return false@@ ; }
public static java.util.@@ Set@@ <java.lang.String> get@@ Email@@ s(@@ java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s) { java.util.@@ Set@@ <java.lang.String> email@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : id@@ s) { if (id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ M@@ A@@ IL@@ T@@ O@@ )) { email@@ s.add(@@ id@@ .get@@ S@@ che@@ me@@ Rest@@ ()); } } return email@@ s; }
java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > get@@ ExternalId@@ s() { return ext@@ er@@ n@@ al@@ Id@@ s; }
public static java.lang.String get@@ User@@ Name(@@ java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s) { for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : id@@ s) { if (id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ )) { return id@@ .get@@ S@@ che@@ me@@ Rest@@ (); } } return null@@ ; }
private void add@@ ExternalId@@ (java.lang.String s@@ che@@ me@@ , java.lang.String id, java.lang.String email@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (user@@ .getAccount@@ Id(), new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (s@@ che@@ me@@ , id@@ )); if (@@ e@@ mai@@ l != null@@ ) { ext@@ Id@@ .set@@ Email@@ Add@@ res@@ s(@@ email@@ ); } db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); re@@ load@@ User@@ (); }
public java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > by@@ ExternalId@@ (java.lang.String ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return quer@@ y(@@ com.google.gerrit.server.query.@@ account.@@ Account@@ Predi@@ c@@ at@@ es.@@ ext@@ er@@ n@@ al@@ Id(@@ ext@@ er@@ n@@ al@@ Id@@ )); }
public com.google.gerrit.server.account.Account@@ State one@@ By@@ ExternalId@@ (java.lang.String ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = by@@ ExternalId@@ (@@ ext@@ er@@ n@@ al@@ Id); if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) == 1@@ ) { return account@@ St@@ at@@ es@@ .get(@@ 0); } else if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 0) { java.lang.String@@ Builder ms@@ g = new java.lang.String@@ Builder@@ (); ms@@ g.@@ append("@@ A@@ mb@@ ig@@ u@@ ou@@ s ext@@ er@@ n@@ al I@@ D ").@@ append(@@ ext@@ er@@ n@@ al@@ Id@@ ).@@ append(@@ "@@ for account@@ s@@ : "); com.google.common.base.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ , ").@@ append@@ To@@ (@@ msg@@ , com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (account@@ St@@ at@@ es@@ , Account@@ State.@@ AC@@ CO@@ UN@@ T_@@ ID@@ _@@ F@@ UN@@ C@@ T@@ ION@@ )); com.google.gerrit.server.query.@@ In@@ ternal@@ Account@@ Quer@@ y.@@ log.warn@@ (@@ ms@@ g.@@ toString@@ ()); } return null@@ ; } }
@java.lang.Override public void add@@ Email@@ (@@ com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l r@@ sr@@ c = new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (account@@ .getUser@@ (), input.@@ email@@ ); try { create@@ Email@@ Factory.create@@ (in@@ put.@@ email@@ ).@@ apply(@@ rsrc@@ , input@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ Email@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot ad@@ d email@@ ", e); } }
private void add@@ ExternalId@@ Email@@ (com.google.gerrit.acceptance.@@ Test@@ Account account@@ , java.lang.String email@@ ) throw@@ s java.lang.Exception { check@@ Not@@ Null@@ (@@ email@@ ); com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (account@@ .getId@@ (), new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ name@@ ("@@ test@@ "), email@@ )); ext@@ Id@@ .set@@ Email@@ Add@@ res@@ s(@@ email@@ ); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ .getId()); set@@ Api@@ User@@ (account@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void save@@ ExternalId@@ s() throw@@ s java.lang.Exception { s@@ av@@ ed@@ ExternalId@@ s = new java.util.Array@@ List(); s@@ av@@ ed@@ ExternalId@@ s.@@ add@@ All@@ (get@@ ExternalId@@ s(@@ admin@@ )); s@@ av@@ ed@@ ExternalId@@ s.@@ add@@ All@@ (get@@ ExternalId@@ s(@@ user@@ )); }
@org.junit.Test public void delete@@ Email@@ From@@ C@@ u@@ st@@ o@@ m@@ ExternalId@@ S@@ che@@ m@@ es@@ () throw@@ s java.lang.Exception { java.lang.String e@@ mai@@ l = "@@ foo@@ .@@ b@@ ar@@ @@@ ex@@ amp@@ le.@@ com@@ "; java.lang.String ext@@ Id@@ 1 = "@@ foo@@ :@@ b@@ ar@@ "; java.lang.String ext@@ Id@@ 2 = "@@ foo@@ :@@ b@@ a@@ z@@ "; db.account@@ ExternalId@@ s().@@ insert@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ create@@ ExternalId@@ With@@ Email@@ (@@ ext@@ Id@@ 1, email@@ ), create@@ ExternalId@@ With@@ Email@@ (@@ ext@@ Id@@ 2, email@@ ))); account@@ Cache.@@ e@@ vi@@ ct@@ (@@ admin@@ .@@ id); assert@@ Th@@ at(@@ gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s().@@ stream@@ ().@@ map@@ (@@ ( e) -@@ > e.@@ id@@ enti@@ ty@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()@@ )).@@ contains@@ All@@ Of(@@ ext@@ Id@@ 1, ext@@ Id@@ 2); re@@ set@@ Current@@ Api@@ User@@ (); assert@@ Th@@ at(@@ get@@ Email@@ s@@ ()).@@ contains(@@ email@@ ); gApi.@@ account@@ s().@@ self@@ ().@@ delete@@ Email@@ (@@ email@@ ); re@@ set@@ Current@@ User@@ (); assert@@ Th@@ at(@@ get@@ Email@@ s@@ ()@@ )@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ (@@ email@@ ); assert@@ Th@@ at(@@ gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s().@@ self@@ ().@@ map@@ (@@ ( e) -@@ > e.@@ id@@ enti@@ ty@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ Of(@@ ext@@ Id@@ 1, ext@@ Id@@ 2); }
private java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > get@@ ExternalId@@ s(@@ java.util.Collection<@@ com.google.gerrit.acceptance.@@ Test@@ Account account@@ ) throw@@ s java.lang.Exception { return account@@ Cache@@ .get(@@ account@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); }
@org.junit.Test public void no@@ ExternalId@@ s() throw@@ s java.lang.Exception { db.account@@ ExternalId@@ s().@@ delete@@ (@@ db.account@@ ExternalId@@ s().@@ by@@ Account@@ (user@@ .getAccount@@ Id@@ ())); re@@ load@@ User@@ (); com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey = valid@@ Key@@ With@@ Se@@ con@@ d@@ User@@ Id(); com.google.gerrit.gpg.@@ PublicKey@@ Check@@ er check@@ er = check@@ er@@ Factory.create@@ (user@@ , store@@ ).@@ dis@@ able@@ Tr@@ u@@ st@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , "@@ N@@ o id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ ; ch@@ ec@@ k http@@ :@@ /@@ test@@ /@@ #@@ /@@ set@@ t@@ ing@@ s/@@ web@@ -@@ id@@ enti@@ ti@@ es@@ "); check@@ er = check@@ er@@ Factory.create@@ ().set@@ Store@@ (@@ store@@ ).@@ dis@@ able@@ Tr@@ u@@ st@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , "@@ Key is not as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ y user@@ s@@ "); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (user@@ .getAccount@@ Id(), com.google.gerrit.gpg.@@ Gerrit@@ PublicKey@@ Check@@ er.@@ to@@ Ex@@ t@@ Id@@ Key@@ (key@@ .get@@ PublicKey@@ ()@@ )@@ ))); re@@ load@@ User@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , "@@ N@@ o id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ "); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException { if ((@@ self@@ .get@@ ()) != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ e@@ t ext@@ er@@ n@@ al ID@@ s@@ "); } java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s = db@@ .get().@@ account@@ ExternalId@@ s().@@ by@@ Account@@ (@@ resource@@ .getUser@@ ().get@@ Account@@ Id@@ ()).@@ to@@ List(); if (id@@ s.@@ isEmpty()) { return com.google.common.collect.Immutable@@ List.@@ of@@ (); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ id@@ s.@@ size()); for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : id@@ s) { com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ (); info.@@ id@@ enti@@ t@@ y = id@@ .get@@ ExternalId@@ (); info.@@ email@@ Add@@ res@@ s = id@@ .get@@ Email@@ Add@@ res@@ s(); info.@@ tr@@ u@@ st@@ ed = com.google.gerrit.server.account.@@ Get@@ ExternalId@@ s.@@ to@@ Boolean@@ (@@ auth@@ Config.@@ is@@ Id@@ enti@@ ty@@ Tr@@ u@@ st@@ able@@ (@@ java.util.Collections.singleton@@ (id@@ ))); if (!(@@ id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ ))) { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key las@@ t = resource@@ .getUser@@ ().get@@ L@@ ast@@ Lo@@ gin@@ Key@@ (); info.@@ can@@ De@@ le@@ te = com.google.gerrit.server.account.@@ Get@@ ExternalId@@ s.@@ to@@ Boolean@@ (((@@ las@@ t == null@@ ) || (!(@@ last@@ .get().@@ equals(@@ info.@@ id@@ enti@@ ty@@ )@@ )@@ ))); } result.@@ add(@@ info@@ ); } return result@@ ; }
@org.junit.Test public void add@@ O@@ th@@ er@@ User@@ s@@ G@@ pg@@ Key@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { add@@ ExternalId@@ Email@@ (@@ admin@@ , "@@ test@@ 5@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (user@@ .getId@@ (), new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ ("@@ foo@@ :@@ my@@ Id@@ ")); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getId()); com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey = valid@@ Key@@ With@@ Se@@ con@@ d@@ User@@ Id(); add@@ G@@ pg@@ Key@@ (key@@ .get@@ PublicKey@@ Ar@@ mo@@ red@@ ()); set@@ Api@@ User@@ (user@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ G@@ P@@ G k@@ ey al@@ read@@ y as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ oth@@ er account@@ "); add@@ G@@ pg@@ Key@@ (key@@ .get@@ PublicKey@@ Ar@@ mo@@ red@@ ()); }
@org.junit.@@ Af@@ ter public void re@@ store@@ ExternalId@@ s() throw@@ s java.lang.Exception { if ((@@ s@@ av@@ ed@@ ExternalId@@ s) != null@@ ) { db.account@@ ExternalId@@ s().@@ delete@@ (get@@ ExternalId@@ s(@@ admin@@ )); db.account@@ ExternalId@@ s().@@ delete@@ (get@@ ExternalId@@ s(@@ user@@ )); db.account@@ ExternalId@@ s().@@ insert@@ (s@@ av@@ ed@@ ExternalId@@ s); } account@@ Cache.@@ e@@ vi@@ ct@@ (@@ admin@@ .getId()); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getId()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.server.account.@@ P@@ ut@@ User@@ name.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t user@@ name@@ "); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ US@@ ER@@ _@@ NAME@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w edit@@ ing user@@ name@@ "); } if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.server.account.@@ P@@ ut@@ User@@ name.@@ Input@@ (); } try { change@@ User@@ Name@@ Factory.create@@ (db@@ .get(), rsrc@@ .getUser@@ (), input.@@ user@@ name@@ ).@@ call@@ (); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception e) { if (@@ Change@@ User@@ Name.@@ US@@ ER@@ NA@@ M@@ E_@@ C@@ AN@@ NO@@ T_@@ B@@ E_@@ CHANG@@ ED@@ .equals(@@ e.get@@ Message@@ ())) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception(@@ e.get@@ Message()); } } throw e@@ ; } catch (com.google.gerrit.server.@@ account.@@ Invalid@@ User@@ Name@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ in@@ vali@@ d user@@ name@@ "); } catch (@@ com.google.gerrit.common.@@ errors.@@ Name@@ Al@@ read@@ y@@ U@@ sed@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name al@@ read@@ y us@@ ed@@ "); } return input.@@ user@@ name@@ ; }
private com.google.gerrit.server.account.@@ Auth@@ Result auth@@ (@@ final com.google.gerrit.reviewdb.client.Account@@ External@@ Id account@@ ) { if (@@ ac@@ count != null@@ ) { return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (account@@ .getAccount@@ Id(), null@@ ); } return null@@ ; }
private com.google.gerrit.server.account.@@ Auth@@ Result by@@ User@@ Name@@ (@@ final java.lang.String user@@ Name) { try { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key ext@@ Key = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ Name); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Quer@@ y.@@ by@@ ExternalId@@ (@@ ext@@ Key@@ .get()); if (account@@ St@@ at@@ es.@@ isEmpty()) { get@@ Servlet@@ Context@@ ().@@ log@@ ((("@@ N@@ o account@@ s w@@ it@@ h user@@ name " + user@@ Name) + " fo@@ und@@ ")); return null@@ ; } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { get@@ Servlet@@ Context@@ ().@@ log@@ ((("@@ Multi@@ pl@@ e account@@ s w@@ it@@ h user@@ name " + user@@ Name) + " fo@@ und@@ ")); return null@@ ; } return auth@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ St@@ at@@ es@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ Id(), ext@@ Key@@ )); } catch (com.google.gwtorm.server.OrmException e) { get@@ Servlet@@ Context@@ ().@@ log@@ ("@@ can@@ not quer@@ y ac@@ count index@@ ", e); return null@@ ; } }
@org.junit.Test public void l@@ ook@@ Up@@ From@@ Cache@@ By@@ Email@@ () throw@@ s java.lang.Exception { assert@@ Email@@ (@@ by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ email@@ ), admin@@ ); java.lang.String e@@ mai@@ l = "@@ foo@@ .@@ b@@ ar@@ @@@ ex@@ amp@@ le.@@ com@@ "; db.account@@ ExternalId@@ s().@@ insert@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ create@@ ExternalId@@ With@@ Email@@ ("@@ foo@@ :@@ b@@ ar@@ ", email@@ ))); account@@ Cache.@@ e@@ vi@@ ct@@ (@@ admin@@ .@@ id); assert@@ Email@@ (@@ by@@ Email@@ Cache@@ .get(@@ email@@ ), admin@@ ); assert@@ Th@@ at(@@ by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ e@@ mail.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )).@@ isEmpty@@ (); assert@@ Th@@ at(@@ by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ e@@ mail.@@ substring@@ (@@ 0, admin@@ .@@ e@@ mail.@@ index@@ Of(@@ '@@ @@@ '@@ )@@ )).@@ isEmpty@@ (); assert@@ Th@@ at(@@ by@@ Email@@ Cache@@ .get@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ @@@ ex@@ amp@@ le.@@ com@@ "@@ )).@@ isEmpty@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l rsrc@@ , com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to de@@ le@@ te e@@ mai@@ l add@@ ress@@ "); } return apply(@@ rsrc@@ .getUser@@ (), rsrc@@ .get@@ Email@@ ()); }
Account@@ External@@ Id.@@ Key get@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ ();
private void assert@@ Key@@ s(@@ java.lang.I@@ terable@@ <@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key@@ > expected@@ Key@@ s) throw@@ s java.lang.Exception { com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ <@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key@@ > exp@@ ected = com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (@@ expected@@ Key@@ s); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> key@@ Ma@@ p = gApi.@@ account@@ s().@@ self@@ ().@@ list@@ G@@ pg@@ Key@@ s(); assert@@ Th@@ at(@@ key@@ Map.@@ key@@ Set@@ ()).@@ nam@@ ed@@ ("@@ key@@ s return@@ ed b@@ y list@@ G@@ pg@@ Key@@ s@@ ()@@ ").@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ .@@ tran@@ s@@ for@@ m@@ (@@ Test@@ Key@@ :@@ get@@ Key@@ Id@@ String@@ )); for (@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey : expected@@ ) { com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ E@@ quals(@@ key@@ , gApi.@@ account@@ s().@@ self@@ ()@@ .g@@ pg@@ Key@@ (key@@ .getKey@@ Id@@ String@@ ()@@ ).get@@ ()); com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ E@@ quals(@@ key@@ , gApi.@@ account@@ s().@@ self@@ ()@@ .g@@ pg@@ Key@@ (@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ .get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ ()@@ )@@ ).get@@ ()); com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ Map@@ Cont@@ ain@@ s(@@ key@@ , key@@ Map@@ ); } com.google.gerrit.reviewdb.client.Account.Id cur@@ r@@ Account@@ Id = at@@ r@@ S@@ cop@@ e.get@@ ().get@@ User@@ Account@@ Id(); java.lang.I@@ terable@@ <java.lang.String> expected@@ F@@ p@@ s = expected@@ .@@ tran@@ s@@ for@@ m@@ (@@ ( k@@ ) -@@ > com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 6@@ 1@@ ().@@ en@@ code@@ (@@ k@@ .get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ ())); java.lang.I@@ terable@@ <java.lang.String> act@@ u@@ al@@ F@@ s = com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.get@@ G@@ pg@@ Ex@@ t@@ Id@@ s(@@ db, cur@@ r@@ Account@@ Id@@ ).@@ tran@@ s@@ for@@ m@@ (@@ Account@@ ExternalId@@ :@@ :@@ get@@ S@@ che@@ me@@ Rest@@ ); assert@@ Th@@ at(@@ act@@ u@@ al@@ F@@ ps@@ ).@@ nam@@ ed@@ ("@@ ext@@ er@@ n@@ al ID@@ s in dat@@ abase@@ ").@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ F@@ ps@@ ); for (@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey : expected@@ ) { get@@ Only@@ Key@@ From@@ Store@@ (key@@ ); } }
public boolean is@@ Id@@ enti@@ ty@@ Tr@@ u@@ st@@ able@@ (@@ final java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s) { switch (get@@ Auth@@ Type@@ ()) { case DE@@ V@@ E@@ LO@@ P@@ ME@@ N@@ T_@@ B@@ EC@@ O@@ M@@ E_@@ AN@@ Y_@@ AC@@ CO@@ UN@@ T : case H@@ T@@ P : case H@@ T@@ T@@ T@@ T@@ P@@ _@@ L@@ D@@ A@@ P : case L@@ D@@ A@@ P : case L@@ D@@ AP@@ _@@ B@@ IN@@ D : case C@@ L@@ I@@ E@@ N@@ T_@@ S@@ S@@ L@@ _@@ C@@ ER@@ T_@@ L@@ D@@ A@@ P : case C@@ US@@ T@@ O@@ M@@ _@@ E@@ X@@ TE@@ N@@ S@@ IO@@ N : case O@@ A@@ UT@@ H : return true@@ ; case O@@ P@@ E@@ N@@ ID@@ _S@@ S@@ O : return true@@ ; case O@@ P@@ E@@ N@@ I@@ D : for (@@ final com.google.gerrit.reviewdb.client.Account@@ External@@ Id e : id@@ s) { if (!(@@ is@@ Tr@@ u@@ st@@ ed@@ (@@ e@@ ))) { return false@@ ; } } return true@@ ; default : return false@@ ; } }
private com.google.gerrit.reviewdb.client.@@ Account get@@ Account@@ By@@ ExternalId@@ (java.lang.String ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ ExternalId@@ (@@ ext@@ er@@ n@@ al@@ Id); if (account@@ St@@ at@@ es.@@ isEmpty()) { return null@@ ; } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { java.lang.String@@ Builder ms@@ g = new java.lang.String@@ Builder@@ (); ms@@ g.@@ append("@@ G@@ P@@ G k@@ ey ").@@ append(@@ ext@@ er@@ n@@ al@@ Id@@ ).@@ append(@@ " as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h m@@ ulti@@ pl@@ e account@@ s@@ : "); com.google.common.base.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ , ").@@ append@@ To@@ (@@ msg@@ , com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (account@@ St@@ at@@ es@@ , Account@@ State.@@ AC@@ CO@@ UN@@ T_@@ ID@@ _@@ F@@ UN@@ C@@ T@@ ION@@ )); log.error@@ (@@ ms@@ g.@@ toString@@ ()); throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ ms@@ g.@@ toString@@ ()); } return account@@ St@@ at@@ es@@ .get(@@ 0@@ ).get@@ Account@@ (); }
@java.lang.Override public void delete@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l r@@ sr@@ c = new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (account@@ .getUser@@ (), email@@ ); try { delete@@ E@@ mail.@@ apply(@@ rsrc@@ , null@@ ); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te email@@ ", e); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key k@@ ey = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ name); com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Query@@ Provider@@ .get().@@ one@@ By@@ ExternalId@@ (key@@ .get()); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (account@@ State@@ ).@@ map@@ (@@ ( s) -@@ > s.get@@ Account@@ ().get@@ Id()); }
private static com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s = java.util.Collections.@@ empty@@ Set@@ (); java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > an@@ on = com.google.common.collect.Immutable@@ Set.@@ of@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , an@@ on@@ , id@@ s, new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >@@ ()); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > load@@ (@@ final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id who@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ ().get@@ (@@ who@@ ); if (@@ ac@@ count == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s = java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ Collection@@ (@@ db.account@@ ExternalId@@ s().@@ by@@ Account@@ (@@ who@@ ).to@@ List@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > int@@ er@@ n@@ al@@ Group@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er g : db.account@@ Group@@ Member@@ s().@@ by@@ Account@@ (@@ who@@ )) { final com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = g@@ .getAccount@@ Group@@ Id(); final com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = group@@ Cache@@ .get(@@ group@@ Id); if ((@@ g@@ roup != null@@ ) && ((@@ group@@ .get@@ Group@@ UUID@@ ()) != null@@ )) { int@@ er@@ n@@ al@@ Group@@ s.add(@@ group@@ .get@@ Group@@ UUID@@ ()); } } int@@ er@@ n@@ al@@ Group@@ s = java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ Set@@ (@@ int@@ er@@ n@@ al@@ Group@@ s); try { account.@@ set@@ General@@ Preferences@@ (@@ load@@ er.@@ load@@ (@@ who@@ )); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.account.Account@@ Cache@@ Impl.@@ log.warn@@ ((("@@ Cannot lo@@ ad General@@ Preferen@@ ce@@ s for " + who@@ ) + " (@@ us@@ ing default@@ )@@ "), e); account.@@ set@@ General@@ Preferences@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s()); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (account@@ , int@@ er@@ n@@ al@@ Group@@ s, ext@@ er@@ n@@ al@@ Id@@ s, w@@ atch@@ Config@@ .get@@ ().get@@ ProjectWatch@@ es(@@ who@@ ))); }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = db@@ Provi@@ der.@@ open@@ ()) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (com.google.gerrit.server.@@ account.@@ External@@ Id.@@ from@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ ((((@@ External@@ Id.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ ) + "@@ :@@ ") + user@@ name@@ )@@ )@@ )).@@ map@@ (@@ Account@@ ExternalId@@ :@@ get@@ Account@@ Id); } }
@java.lang.Override public boolean has@@ Email@@ Add@@ res@@ s(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String email@@ ) { if (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id != null@@ ) { for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : user@@ .@@ state@@ ().get@@ ExternalId@@ s()) { if ((@@ e@@ mai@@ l != null@@ ) && (@@ e@@ mail.@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (@@ ext@@ .get@@ Email@@ Add@@ ress@@ ()))) { return true@@ ; } } return false@@ ; }
@java.lang.Override public void delete@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { de@@ le@@ t@@ e.@@ apply(@@ rsrc@@ , new com.google.gerrit.gpg.@@ server.@@ Delete@@ G@@ pg@@ Key@@ .@@ Input@@ ()); } catch (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te G@@ P@@ G key@@ ", e); } }
private void delete@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ e@@ mail.@@ e@@ quals("@@ AL@@ L@@ ")) { java.util.List<@@ com.google.gerrit.extensions.common.@@ Email@@ Info> email@@ s = get@@ Email@@ s.@@ apply(@@ rsrc@@ ); for (@@ com.google.gerrit.extensions.common.@@ Email@@ Info e : email@@ s) { delete@@ E@@ mail.@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (user@@ , e.@@ email@@ ), new com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input@@ ()); } } else { delete@@ E@@ mail.@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (user@@ , email@@ ), new com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input@@ ()); } }
private void add@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ Failure@@ , com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input in = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input@@ (); in.@@ e@@ mai@@ l = email@@ ; in.@@ no@@ Con@@ fi@@ r@@ m@@ ation = true@@ ; try { create@@ Email@@ Factory.create@@ (@@ email@@ ).@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ Email@@ Exception e) { throw di@@ e@@ (@@ e.get@@ Message()); } }
@java.lang.Override public java.util.@@ Set@@ <java.lang.String> get@@ Email@@ Add@@ ress@@ es@@ (com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) { java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s = user@@ .@@ state@@ ().get@@ ExternalId@@ s(); java.util.@@ Set@@ <java.lang.String> email@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (id@@ s.@@ size()); for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id ex@@ t : id@@ s) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ ext@@ .get@@ Email@@ Add@@ ress@@ ()))) { email@@ s.add(@@ ext@@ .get@@ Email@@ Add@@ ress@@ ()); } } return email@@ s; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Email@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input input@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Email@@ Exception, com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to ad@@ d e@@ mai@@ l add@@ ress@@ "); } if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input@@ (); } if (!@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ Email@@ Validator@@ .is@@ Vali@@ d(@@ email@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ vali@@ d e@@ mai@@ l add@@ ress@@ "); } if ((@@ input.@@ no@@ Con@@ fi@@ r@@ m@@ ation@@ ) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to u@@ se no@@ _@@ con@@ fi@@ r@@ m@@ ation@@ "); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ RE@@ G@@ IS@@ T@@ ER@@ _@@ N@@ EW@@ _@@ E@@ M@@ A@@ IL@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w add@@ ing email@@ s@@ "); } return apply(@@ rsrc@@ .getUser@@ (), input@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (in@@ pu@@ t == null@@ ) { in@@ pu@@ t = new com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d.@@ Input@@ (); } input.@@ http@@ P@@ asswor@@ d = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (in@@ put.@@ http@@ P@@ asswor@@ d); java.lang.String new@@ P@@ asswor@@ d@@ ; if (in@@ put@@ .g@@ ener@@ ate@@ ) { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ ener@@ ate H@@ T@@ P p@@ asswor@@ d@@ "); } new@@ P@@ asswor@@ d = com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d@@ .g@@ ener@@ ate@@ (); } else if ((@@ input.@@ http@@ P@@ asswor@@ d) == null@@ ) { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to c@@ le@@ a@@ r H@@ T@@ P p@@ asswor@@ d@@ "); } new@@ P@@ asswor@@ d = null@@ ; } else { if (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception(("@@ not allow@@ ed to se@@ t H@@ T@@ P p@@ asswor@@ d di@@ re@@ ct@@ ly@@ , " + "@@ requ@@ i@@ re@@ s th@@ e Ad@@ min@@ ist@@ r@@ ate Ser@@ ve@@ r per@@ mission@@ ")); } new@@ P@@ asswor@@ d = input.@@ http@@ P@@ asswor@@ d@@ ; } return apply(@@ rsrc@@ .getUser@@ (), new@@ P@@ asswor@@ d); }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if ((@@ user@@ .getUser@@ Name@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ "); } com.google.gerrit.reviewdb.client.Account@@ External@@ Id id = db@@ Provider@@ .get().@@ account@@ ExternalId@@ s@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ .getUser@@ Name@@ ())); if (@@ id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } id@@ .set@@ P@@ asswor@@ d(@@ com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ from@@ P@@ asswor@@ d@@ (@@ new@@ P@@ asswor@@ d@@ ).@@ en@@ code@@ ()); db@@ Provider@@ .get().@@ account@@ ExternalId@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (id@@ )); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getAccount@@ Id()); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@java.lang.Override public java.lang.I@@ terable@@ <@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb db = schema.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key k@@ ey = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ name); com.google.gerrit.reviewdb.client.Account@@ External@@ Id user = db.account@@ ExternalId@@ s@@ ().get@@ (key@@ ); if (@@ user == null@@ ) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _S@@ U@@ CH@@ _@@ US@@ ER@@ ; } java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); for (@@ com.google.gerrit.reviewdb.client.Account@@ Ssh@@ Key k : auth@@ ori@@ zed@@ Key@@ s.get@@ Key@@ s(@@ user@@ .getAccount@@ Id@@ ())) { if (@@ k.@@ is@@ Valid@@ ()) { add(@@ k@@ l@@ , k@@ ); } } if (@@ k@@ l.@@ isEmpty()) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _@@ K@@ E@@ Y@@ S@@ ; } return java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ List(@@ k@@ l@@ ); } }
@org.junit.Test public void get@@ External@@ ID@@ s() throw@@ s java.lang.Exception { java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache@@ .get(@@ user@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : expected@@ Id@@ s) { id@@ .set@@ Can@@ Delete@@ ((!@@ (id@@ .get@@ ExternalId@@ ().@@ e@@ qual@@ s@@ (("@@ user@@ name@@ :@@ " + (user@@ .@@ user@@ name@@ )@@ )@@ ))); id@@ .set@@ Tr@@ u@@ st@@ ed@@ (@@ true@@ ); expected@@ Id@@ Info@@ s.add(@@ com.google.gerrit.acceptance.@@ rest.@@ account.@@ ExternalId@@ IT.@@ to@@ Info@@ (id@@ )); } com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ("/@@ account@@ s/@@ self@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ "); res@@ pon@@ se@@ .@@ assert@@ OK@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {}@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
@java.lang.Override public void delete@@ ExternalId@@ s(@@ java.util.List<java.lang.String> ext@@ er@@ n@@ al@@ Id@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { delete@@ ExternalId@@ s.@@ apply(@@ account@@ , ext@@ er@@ n@@ al@@ Id@@ s); } catch (@@ java.lang.Exception e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te ext@@ er@@ n@@ al ID@@ s", e); } }
@java.lang.Override public void lo@@ gin@@ (@@ final com.google.gerrit.server.account.@@ Auth@@ Result res@@ , final boolean re@@ me@@ mber@@ M@@ e) { final com.google.gerrit.reviewdb.client.Account.Id id = res@@ .getAccount@@ Id(); final com.google.gerrit.reviewdb.client.Account@@ External@@ Id.@@ Key id@@ enti@@ t@@ y = res@@ .get@@ ExternalId@@ ().@@ as@@ Account@@ ExternalId@@ Key@@ (); if ((@@ va@@ l@@ ) != null@@ ) { m@@ anag@@ er.@@ dest@@ ro@@ y(@@ key@@ ); } k@@ ey = m@@ anag@@ er.@@ create@@ Key@@ (id@@ ); va@@ l = m@@ anag@@ er.@@ create@@ Val@@ (key@@ , id, re@@ me@@ Me@@ , id@@ enti@@ ty@@ , null@@ , null@@ ); save@@ C@@ ook@@ i@@ e@@ (); user = id@@ ent@@ if@@ i@@ ed@@ .@@ create(@@ va@@ l@@ .getAccount@@ Id()); }
private java.lang.String read@@ Respon@@ se@@ (@@ java.io.@@ Input@@ Stream res@@ pon@@ se@@ Stream@@ ) { try (@@ java.util.@@ S@@ can@@ ne@@ r s@@ can@@ ne@@ r = new java.util.@@ S@@ can@@ ner@@ (@@ res@@ pon@@ se@@ Stream@@ , "@@ UT@@ F@@ -@@ 8@@ ").@@ use@@ De@@ li@@ mit@@ er@@ ("@@ \@@ \@@ \@@ \@@ ")) { return s@@ can@@ n@@ er.@@ next@@ (); } catch (@@ java.lang.Exception e) { throw new java.lang.@@ Run@@ time@@ Exception@@ ((("@@ E@@ rror read@@ ing res@@ pon@@ se@@ : [@@ " + (@@ e.get@@ Message@@ ())) + "@@ ]@@ .@@ "), e); } }
private void add@@ Submit@@ Recor@@ d@@ Requ@@ i@@ re@@ ment@@ s(@@ Submit@@ Recor@@ d submit@@ Recor@@ d, com.google.gerrit.server.@@ data.@@ Submit@@ Recor@@ d@@ Attri@@ but@@ e s@@ a@@ ) { if (((@@ submit@@ Recor@@ d.@@ requ@@ i@@ re@@ ment@@ s) != null@@ ) && (!(@@ submit@@ Recor@@ d.@@ requ@@ i@@ re@@ s.@@ isEmpty@@ ()))) { s@@ a.@@ requ@@ i@@ re@@ s = new java.util.Array@@ List(); for (@@ com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ q : submit@@ Recor@@ d.@@ requ@@ i@@ re@@ q : submit@@ Recor@@ d.@@ requ@@ i@@ re@@ s.@@ requ@@ i@@ re@@ s.@@ as@@ on = req@@ .@@ short@@ Re@@ as@@ on@@ (); re@@ s.@@ add@@ Submit@@ Recor@@ d@@ s(@@ req@@ .@@ label@@ ); requ@@ i@@ re@@ a.@@ re@@ s.add(@@ re@@ re@@ ); } }
public com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d submit@@ Type@@ Recor@@ d(@@ ) { if ((@@ submit@@ Type@@ Recor@@ d) == null@@ ) { submit@@ Type@@ Recor@@ d = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (com.google.gerrit.server.query.@@ change.@@ DE@@ FA@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).get@@ Submit@@ Type@@ (@@ this@@ ); } return submit@@ Type@@ Recor@@ d@@ ; }
private com.google.gerrit.server.project.@@ Submit@@ Rule@@ E@@ valu@@ at@@ or ma@@ k@@ e@@ E@@ valu@@ ator@@ () { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ project@@ "); com.google.gerrit.server.query.change.Change@@ Data c@@ d = com.google.gerrit.server.query.change.Change@@ Dat@@ a.@@ create@@ For@@ Test@@ (project@@ , new com.google.gerrit.reviewdb.client.Change.@@ Id@@ (1@@ ), 1); c@@ d.@@ set@@ Change@@ (@@ com.google.gerrit.@@ test@@ ing.@@ Test@@ Changes@@ .@@ new@@ Change@@ (project@@ , com.google.gerrit.server.project.@@ Submit@@ Rule@@ s@@ E@@ valu@@ ator@@ Test.@@ AD@@ M@@ IN@@ _@@ US@@ ER@@ )); return e@@ valu@@ ator@@ Factory.create@@ (c@@ d); }
@org.junit.Test public void con@@ ver@@ t@@ s@@ Pro@@ log@@ To@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.server.project.@@ Submit@@ Rule@@ E@@ valu@@ at@@ or e@@ valu@@ at@@ or = ma@@ k@@ e@@ E@@ valu@@ ator@@ (); java.util.List<@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m@@ > ter@@ m@@ s = new java.util.ArrayList<@@ >(); com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ve@@ r@@ if@@ i@@ ed@@ L@@ abe@@ l = ma@@ k@@ e@@ Label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", "@@ ma@@ y@@ "); com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m label@@ s = new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", ve@@ r@@ if@@ i@@ ed@@ Label@@ ); ter@@ m@@ s.add(@@ ma@@ k@@ e@@ T@@ er@@ m@@ ("@@ o@@ k@@ ", label@@ s@@ )); java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > re@@ cor@@ d@@ s = e@@ valu@@ ator@@ .@@ result@@ s@@ To@@ Submit@@ Recor@@ d@@ (@@ null@@ , ter@@ m@@ s); assert@@ Th@@ at(@@ re@@ cor@@ d@@ s).@@ hasSize@@ (1); }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m ma@@ k@@ e@@ T@@ er@@ m@@ (java.lang.String statu@@ s, com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m label@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ statu@@ s, label@@ s); }
public Reviewer@@ Info for@@ m@@ at(@@ Reviewer@@ Info out@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Change per@@ m@@ , com.google.gerrit.server.query.change.Change@@ Data c@@ d, java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Label@@ Type@@ s label@@ Type@@ s = c@@ d@@ .get@@ Label@@ Typ@@ es@@ (); out.@@ approval@@ s = new java.util.@@ Tree@@ Map@@ (@@ label@@ Typ@@ es.@@ name@@ Comp@@ ar@@ ator@@ ()); for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l c@@ a : approval@@ s) { com.google.gerrit.common.data.@@ Label@@ Type a@@ t = label@@ Typ@@ es.@@ by@@ Label@@ (c@@ a@@ .get@@ Label@@ Id()); if (@@ a@@ t != null@@ ) { out.@@ approval@@ s.@@ put(@@ at@@ .getName@@ (), for@@ m@@ at@@ Value@@ (c@@ a@@ .getValue@@ ())); } } com.google.gerrit.reviewdb.client.PatchSet p@@ s = c@@ d.@@ currentPatchSet@@ (); if (p@@ s != null@@ ) { for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c : submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ DE@@ FA@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).@@ e@@ valu@@ ate@@ (c@@ d@@ )) { if ((@@ re@@ c.@@ label@@ s) == null@@ ) { continue@@ ; } for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l l@@ abe@@ l : re@@ c.@@ label@@ s) { java.lang.String name = l@@ abe@@ l.@@ label@@ ; com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ name); if ((@@ (!(@@ out.@@ approval@@ s.@@ contains@@ Key@@ (@@ name@@ ))) && (@@ typ@@ e != null@@ )) && (@@ per@@ m.@@ test@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Label@@ Permission@@ (@@ type@@ )))) { out.@@ approval@@ s.@@ put(@@ name, for@@ m@@ at@@ Value@@ ((@@ (@@ short@@ ) (@@ 0@@ )@@ ))); } } } if (@@ out.@@ approval@@ s.@@ isEmpty()) { out.@@ approval@@ s = null@@ ; } return out@@ ; }
public java.util.List<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d) { com.google.gerrit.reviewdb.client.Change change@@ ; com.google.gerrit.server.project.Project@@ State project@@ State@@ ; try { change = c@@ d.@@ change@@ (); if (@@ change == null@@ ) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ N@@ o change fo@@ und@@ "); } project@@ State = project@@ Cache@@ .get@@ (c@@ d.@@ project@@ ()); if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (c@@ d.@@ project@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { return rule@@ Error@@ (("@@ E@@ rror l@@ ook@@ ing up change " + (c@@ d@@ .getId@@ ()@@ )), e); } if ((!@@ (@@ op@@ t@@ s.@@ allow@@ C@@ lo@@ sed@@ ())) && (change@@ .getStatu@@ s().@@ is@@ C@@ lo@@ sed@@ ())) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Recor@@ d.@@ Status.@@ C@@ LO@@ S@@ ED@@ ; return java.util.Collections.singleton@@ List@@ (re@@ c@@ ); } java.util.List<@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m@@ > result@@ s; try { result@@ s = e@@ valu@@ ate@@ Im@@ pl@@ ("@@ lo@@ cate@@ _@@ submit@@ _@@ rule@@ ", "@@ can@@ _@@ submit@@ ", "@@ lo@@ cate@@ _@@ submit@@ _@@ filter@@ ", "@@ filter@@ _@@ submit@@ _@@ result@@ s", c@@ d, project@@ State@@ ); } catch (com.google.gerrit.server.project.@@ Rule@@ E@@ va@@ l@@ Exception e) { return rule@@ Error@@ (@@ e.get@@ Message@@ (), e); } if (@@ result@@ s.@@ isEmpty()) { return rule@@ Error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Sub@@ m@@ it r@@ ul@@ e '@@ %s@@ ' for change %s of %s h@@ a@@ s n@@ o so@@ lu@@ tion.@@ ", get@@ Submit@@ Rule@@ Name@@ (), c@@ d@@ .getId@@ (), project@@ State@@ .getName@@ ())); } return result@@ s@@ To@@ Submit@@ Recor@@ d(@@ get@@ Submit@@ Rule@@ (), result@@ s, c@@ d); }
public abstract java.lang.String f@@ ull@@ Re@@ as@@ on@@ ();
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ (java.lang.String name, java.lang.String statu@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ name@@ ), new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ status@@ )); }
public abstract java.lang.String short@@ Re@@ as@@ on@@ ();
public static com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s.@@ Builder buil@@ der@@ () { return com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s.@@ DE@@ FA@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ .@@ to@@ Builder@@ (); }
public abstract com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ bu@@ ild@@ ();
abstract java.lang.String label@@ ();
public abstract com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ m@@ ent.@@ Builder set@@ Label@@ (@@ @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String label@@ );
public abstract com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ m@@ ent.@@ Builder set@@ F@@ ull@@ Re@@ as@@ on@@ (java.lang.String f@@ ull@@ Re@@ as@@ on@@ );
private com.google.gerrit.extensions.client.@@ Submit@@ Type get@@ Submit@@ Type@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (com.google.gerrit.server.@@ change.@@ DE@@ FA@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).get@@ Submit@@ Type@@ (c@@ d); if ((@@ re@@ c.@@ statu@@ s) != (@@ Submit@@ Type@@ Recor@@ d.@@ Status.@@ OK@@ )) { throw new com.google.gwtorm.server.Orm@@ Exception(("@@ Sub@@ m@@ it typ@@ e r@@ ul@@ e f@@ ai@@ le@@ d@@ : " + rec@@ )); } return re@@ c.@@ type@@ ; }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ s(@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m.@@ .@@ . label@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", label@@ s); }
public java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d) { com.google.gerrit.reviewdb.client.Change change@@ ; com.google.gerrit.server.project.Project@@ State project@@ State@@ ; try { change = c@@ d.@@ change@@ (); if (@@ change == null@@ ) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ N@@ o change fo@@ und@@ "); } project@@ State = project@@ Cache@@ .get@@ (c@@ d.@@ project@@ ()); if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (c@@ d.@@ project@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { return rule@@ Error@@ (("@@ E@@ rror l@@ ook@@ ing up change " + (c@@ d@@ .getId@@ ()@@ )), e); } if ((!@@ (@@ op@@ t@@ s.@@ allow@@ C@@ lo@@ sed@@ ())) && (change@@ .getStatu@@ s().@@ is@@ C@@ lo@@ sed@@ ())) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Recor@@ d.@@ Status.@@ C@@ LO@@ S@@ ED@@ ; return java.util.Collections.singleton@@ List@@ (re@@ c@@ ); } return pro@@ log@@ Rule@@ .@@ e@@ valu@@ ate@@ (c@@ d, op@@ t@@ s); }
@java.lang.Override public java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d, com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s op@@ t@@ s) { return get@@ E@@ valu@@ ator@@ (c@@ d, op@@ t@@ s).@@ e@@ valu@@ ate@@ (); }
public static void check@@ Submit@@ Rule@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d, boolean allow@@ C@@ lo@@ sed@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patch@@ Set = c@@ d.@@ currentPatchSet@@ (); if (@@ patch@@ Set == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ mis@@ s@@ ing cur@@ ren@@ t p@@ atch se@@ t for change " + (c@@ d@@ .getId@@ ()))); } java.util.List<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > result@@ s = com.google.gerrit.server.git.@@ Merge@@ Op@@ .get@@ Submit@@ Recor@@ d@@ s(@@ c@@ d, allow@@ C@@ lo@@ sed@@ ); if (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ can@@ Be@@ Submit@@ ted@@ (@@ result@@ s@@ )) { return@@ ; } else if (@@ result@@ s.@@ isEmpty()) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Submit@@ Rule@@ E@@ valu@@ ator@@ .@@ e@@ valu@@ ate for change %s return@@ ed e@@ mp@@ t@@ y li@@ s@@ t for %s in %s", c@@ d@@ .getId@@ (), patchSet@@ .getId@@ (), c@@ d.@@ change@@ ().get@@ Project@@ ().get@@ ())); } for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ cor@@ d : result@@ s) { switch (re@@ cor@@ d.@@ statu@@ s) { case O@@ K : break@@ ; case C@@ LO@@ S@@ E@@ D : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is clo@@ sed@@ "); case R@@ U@@ L@@ E_@@ ER@@ RO@@ R : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ sub@@ m@@ it r@@ ul@@ e error@@ : " + (re@@ cor@@ d.@@ error@@ Message@@ ))); case NO@@ T_@@ RE@@ AD@@ Y : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ com.google.gerrit.server.git.@@ Merge@@ O@@ p.@@ des@@ cri@@ be@@ Label@@ s(@@ c@@ d, re@@ cor@@ d.@@ label@@ s@@ )); case F@@ OR@@ C@@ E@@ D : default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ U@@ ne@@ x@@ p@@ ected Submit@@ Recor@@ d statu@@ s %s for %s in %s", re@@ cor@@ d.@@ statu@@ s, patchSet@@ .getId@@ ().get@@ Id(), c@@ d.@@ change@@ ().get@@ Project@@ ().get@@ ())); } } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); }
private boolean submit@@ table@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d) { return com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ can@@ Submit@@ ted@@ (c@@ d.@@ submit@@ Recor@@ d@@ s(@@ com.google.gerrit.server.change.Change@@ J@@ son.@@ S@@ U@@ B@@ M@@ I@@ T_@@ R@@ U@@ L@@ E_@@ O@@ P@@ T@@ ION@@ S@@ _S@@ T@@ R@@ I@@ C@@ T@@ )); }
public static boolean can@@ Be@@ Submit@@ ted@@ (@@ java.util.List<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > in@@ ) { if ((@@ in == null@@ ) || (in@@ .@@ isEmpty())) { return true@@ ; } if (in@@ .@@ stream@@ ().@@ n@@ one@@ Match@@ (@@ ( r@@ ) -@@ > { return false@@ ; } return in.@@ stream@@ ().@@ filter@@ (@@ ( r@@ ) -@@ > r@@ ) -@@ > Submit@@ Recor@@ d.@@ Status.@@ NO@@ T_@@ RE@@ AD@@ Y@@ )); }
private com.google.gerrit.extensions.client.@@ Submit@@ Type get@@ Submit@@ Type@@ (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d, com.google.gerrit.reviewdb.client.PatchSet patchSet@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (c@@ d@@ ).get@@ Submit@@ Type@@ (); if ((@@ re@@ c.@@ statu@@ s) != (@@ Submit@@ Type@@ Recor@@ d.@@ Status.@@ OK@@ )) { throw new com.google.gwtorm.server.Orm@@ Exception(("@@ Sub@@ m@@ it typ@@ e r@@ ul@@ e f@@ ai@@ le@@ d@@ : " + rec@@ )); } return re@@ c.@@ type@@ ; }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ (java.lang.String name, java.lang.String statu@@ s, com.google.gerrit.reviewdb.client.Account.Id account@@ ) { com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m user = new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ user@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Integ@@ er@@ m@@ (account@@ .get@@ ())); return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ name@@ ), new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ statu@@ s, user@@ )); }
private com.google.gerrit.common.data.@@ Submit@@ Recor@@ d to@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = statu@@ s; re@@ c.@@ error@@ Messag@@ e = error@@ Message@@ ; if ((@@ label@@ s) != null@@ ) { re@@ c.@@ label@@ s = new java.util.Array@@ List(@@ label@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ L@@ abe@@ l l@@ abe@@ l : label@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l sr@@ l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); sr@@ l.@@ l@@ abe@@ l = l@@ abe@@ l.@@ label@@ ; sr@@ l.@@ statu@@ s = l@@ abe@@ l.@@ statu@@ s; sr@@ l.@@ ap@@ pli@@ ed@@ B@@ y = ((@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) ? new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) : null@@ ; re@@ c.@@ label@@ s.add(@@ sr@@ l@@ ); } } if ((@@ requ@@ i@@ re@@ ment@@ s) != null@@ ) { re@@ c.@@ requ@@ i@@ re@@ s = new java.util.Array@@ List@@ (re@@ qu@@ i@@ re@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Requ@@ i@@ re@@ ment requ@@ i@@ re@@ d : requ@@ i@@ re@@ c.@@ label@@ s) { com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ b = com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ buil@@ der@@ (); sr@@ b.@@ set@@ F@@ ull@@ Re@@ as@@ on@@ (re@@ qu@@ i@@ re@@ m@@ ent.@@ f@@ ull@@ Re@@ as@@ on@@ ); sr@@ b.@@ set@@ Sh@@ ort@@ Re@@ as@@ on@@ (re@@ qu@@ i@@ re@@ .@@ short@@ Re@@ as@@ on@@ ); if ((@@ requ@@ i@@ re@@ m@@ ent.@@ label@@ ) != null@@ ) { sr@@ b.@@ set@@ Label@@ (re@@ qu@@ i@@ re@@ c.@@ label@@ ); } re@@ c.@@ requ@@ i@@ re@@ s.add(@@ sr@@ b.@@ bu@@ ild@@ ()); } } return rec@@ ; }
@java.lang.Override protected void configure() { in@@ stall@@ (@@ new com.google.gerrit.server.@@ rule@@ s.@@ Pro@@ log@@ Module@@ ()); }
public boolean get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ () { return ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ (@@ publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ , true@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ , boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAME@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ "@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ patch@@ -@@ set@@ -@@ cre@@ ated@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ re@@ base@@ -@@ empty@@ -@@ empty@@ -@@ patch@@ -@@ set@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ E@@ mpty@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ P@@ riv@@ ate@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ (@@ mo@@ ck@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAME@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ reviewer@@ -@@ add@@ ed@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ -@@ private@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ (@@ mo@@ ck@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); }
@org.junit.Test public void publi@@ sh@@ es@@ Wh@@ en@@ P@@ riv@@ ate@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = true@@ ; mo@@ ck@@ Change.@@ w@@ i@@ p = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ (@@ ig@@ no@@ re@@ , true@@ , true@@ , true@@ ); }
@org.junit.Test public void publi@@ sh@@ es@@ Wh@@ en@@ W@@ ork@@ In@@ Pro@@ g@@ res@@ s() throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = false@@ ; mo@@ ck@@ Change.@@ w@@ i@@ p = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ () throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", true@@ , true@@ , true@@ ); }
@org.junit.Test public void publi@@ sh@@ es@@ Wh@@ en@@ Ex@@ p@@ ec@@ ted@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ Reviewer@@ Add@@ ed@@ ()))) { return false@@ ; } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ip@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ G@@ ER@@ .@@ warn@@ ("@@ E@@ rror check@@ ing private an@@ d w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } return true@@ ; }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ P@@ riv@@ ate@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ PatchSet@@ Cre@@ ated@@ ()))) { return false@@ ; } try { com.google.gerrit.server.@@ data.@@ PatchSet@@ Attri@@ but@@ e patchSet@@ ; patch@@ Set = event.@@ patchSet@@ .get(); if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ()) && ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ V@@ I@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ )) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ S@@ T_@@ P@@ A@@ RE@@ N@@ T_@@ U@@ P@@ D@@ A@@ TE@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CO@@ D@@ E_@@ CHANG@@ E@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ )))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ E@@ rror check@@ ing p@@ atch se@@ t k@@ ind@@ ", e); } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ork@@ In@@ Pro@@ g@@ ress@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ E@@ rror check@@ ing private w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } boolean result = true@@ ; try { java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ ter@@ n pat@@ tern@@ ; pat@@ ter@@ n = java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (@@ config@@ .get@@ I@@ g@@ no@@ re@@ (), java.util.@@ re@@ g@@ ex@@ .@@ Pat@@ tern@@ .@@ Match@@ er match@@ er@@ ; match@@ er = pat@@ tern@@ .@@ match@@ er@@ (@@ event.@@ change@@ .get().@@ commit@@ Message@@ ); result = !@@ (@@ match@@ er.@@ match@@ es@@ ()); } catch (@@ java.lang.Exception e) { com.@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ warn@@ ("@@ Cre@@ ator@@ .@@ warn@@ ("@@ Th@@ e sp@@ e@@ for@@ e sp@@ or@@ e sp@@ in@@ valid@@ ; } return result@@ ; }
@org.junit.Test public void publi@@ sh@@ es@@ Wh@@ en@@ Ex@@ p@@ ec@@ ted@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ w@@ i@@ p = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ Comment@@ Add@@ ed@@ ()))) { return false@@ ; } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ip@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ G@@ ER@@ .@@ warn@@ ("@@ E@@ rror check@@ ing private an@@ d w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ (@@ publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ , true@@ ); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ W@@ ip@@ Read@@ y@@ ()))) { return false@@ ; } if (@@ event.@@ change@@ .get().@@ w@@ ip@@ ) { return false@@ ; } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAME@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ comment@@ -@@ add@@ ed@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ -@@ private@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ (@@ mo@@ ck@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAME@@ ); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((!@@ (@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ P@@ riv@@ ate@@ Public@@ ()))) { return false@@ ; } if (@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) { return false@@ ; } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ , ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , true@@ ); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ W@@ ork@@ In@@ Pro@@ g@@ res@@ s() throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ w@@ i@@ p = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ , true@@ ); }
public static void use@@ Fi@@ x@@ ed@@ C@@ lock@@ At@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t in@@ stant@@ ) { com.ericsson.gerrit.plugins.highavailability.@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ Time@@ M@@ ach@@ in@@ e.@@ clo@@ c@@ k = java.@@ ti@@ m@@ e.@@ C@@ loc@@ k.@@ fix@@ ed@@ (in@@ stant@@ , java.@@ ti@@ m@@ e.@@ Z@@ one@@ Id.@@ sy@@ st@@ em@@ Default@@ ()); }
public static void use@@ Sy@@ st@@ em@@ Default@@ Z@@ one@@ C@@ lock@@ () { com.ericsson.gerrit.plugins.highavailability.@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ M@@ ach@@ in@@ e.@@ clo@@ c@@ k = java.@@ ti@@ m@@ e.@@ C@@ loc@@ k.@@ sy@@ st@@ em@@ Default@@ Z@@ one@@ (); }
public static java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t no@@ w@@ () { return java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ Time@@ M@@ ach@@ in@@ e.get@@ C@@ lock@@ ()); }
@java.lang.Override public void run() throw@@ s java.io.IOException { com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type typ@@ e = com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ L@@ U@@ C@@ E@@ N@@ E@@ ; if ((@@ com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ values@@ ().@@ length@@ ) > 1@@ ) { ui.@@ head@@ er@@ ("@@ Index@@ "); typ@@ e = index.@@ se@@ lec@@ t@@ ("@@ Type@@ ", "@@ type@@ ", typ@@ e); } if (@@ typ@@ e == (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ E@@ L@@ A@@ ST@@ I@@ C@@ S@@ E@@ AR@@ CH@@ )) { java.lang.String name = index.@@ string@@ ("@@ In@@ de@@ x Name@@ ", "@@ name@@ ", "@@ gerrit@@ "); com.google.gerrit.pgm.init.@@ api.@@ Sec@@ tion el@@ as@@ ti@@ c@@ ar@@ ch = s@@ ection@@ s.get@@ ("@@ el@@ as@@ ti@@ c@@ search@@ ", name); search@@ .@@ se@@ lec@@ t@@ ("@@ T@@ ran@@ sp@@ or@@ t pro@@ to@@ co@@ l@@ ", "@@ pro@@ to@@ co@@ l@@ ", "@@ http@@ ", "@@ http@@ ", com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ ("@@ http@@ ", "@@ ht@@ t@@ ps@@ ")); el@@ as@@ ti@@ c@@ search@@ .@@ string@@ ("@@ H@@ o@@ st@@ name@@ ", "@@ ho@@ st@@ name@@ ", "@@ local@@ ho@@ st@@ "); as@@ ti@@ c@@ search@@ .@@ string@@ ("@@ P@@ ort@@ ", "@@ p@@ ort@@ ", "@@ 9@@ 2@@ 00@@ "); } if (((@@ sit@@ e.@@ is@@ New@@ ) || (@@ isEmpty@@ Site@@ ())) && (@@ typ@@ e == (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ L@@ U@@ C@@ E@@ N@@ E@@ ))) { for (com.google.gerrit.server.@@ index.@@ Schema@@ De@@ fin@@ i@@ tion@@ s@@ <?@@ > de@@ f : com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ AL@@ L@@ _S@@ CH@@ E@@ M@@ A@@ _@@ DE@@ F@@ S@@ ) { com.google.gerrit.server.index.@@ Index@@ Util@@ s.set@@ Read@@ y(@@ sit@@ e@@ , de@@ f@@ .getName@@ (), de@@ f@@ .get@@ L@@ at@@ est@@ ().get@@ Version@@ (), true@@ ); } } else { if ((@@ com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ values@@ ().@@ length@@ ) <@@ = 1@@ ) { ui.@@ head@@ er@@ ("@@ Index@@ "); } java.lang.String messag@@ e = java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ \n@@ Th@@ e in@@ de@@ x m@@ us@@ t b@@ e@@ for@@ e start@@ ing Gerrit@@ :@@ \n@@ " + " j@@ av@@ a -@@ j@@ a@@ r g@@ errit.@@ w@@ a@@ r in@@ de@@ x -@@ d sit@@ e@@ _@@ path@@ \n@@ "), (@@ sit@@ e.@@ is@@ N@@ e@@ w ? "@@ " : "@@ re@@ ")); ui.@@ message@@ (@@ message@@ ); ui.@@ message@@ ("@@ Star@@ t = false@@ ; } }
protected static void set@@ Content@@ And@@ En@@ cod@@ ing@@ (@@ javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); }
private void pro@@ cess(@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ O@@ per@@ ation o@@ per@@ ation@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); java.lang.String pat@@ h = req@@ .get@@ Path@@ Info@@ (); T id = parse@@ (p@@ ath@@ .@@ substring@@ ((@@ (p@@ ath@@ .@@ last@@ Index@@ Of(@@ '@@ /@@ '@@ )) + 1@@ ))); log@@ g@@ er.@@ de@@ bug@@ ("@@ {@@ } {}@@ ", o@@ per@@ ation@@ , index@@ Name, id); try { com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.set@@ For@@ war@@ ded@@ Event@@ (@@ true@@ ); java.util.concurrent.@@ Lo@@ c@@ k id@@ Lo@@ c@@ k = id@@ Lo@@ ck@@ s.get(@@ id); id@@ Lo@@ c@@ k.@@ lock@@ (); try { index@@ (id@@ , o@@ per@@ ation@@ ); } final@@ l@@ y { id@@ Lo@@ c@@ k.@@ un@@ lock@@ (); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (java.io.IOException e) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ CON@@ F@@ L@@ I@@ C@@ T@@ , e.get@@ Message()); log@@ g@@ er.@@ error@@ ("@@ Un@@ able to updat@@ e {@@ } index@@ ", index@@ Name, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ E@@ rror try@@ ing to fin@@ d %s \n@@ ", index@@ Name); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ F@@ O@@ UN@@ D@@ , msg@@ ); log@@ g@@ er.@@ de@@ bug@@ (@@ msg@@ , e); } final@@ l@@ y { com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ un@@ set@@ For@@ war@@ ded@@ Event@@ (); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { set@@ Content@@ And@@ En@@ cod@@ ing@@ (r@@ sp@@ ); try { java.util.List<java.lang.String> par@@ am@@ s = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ /@@ '@@ ).@@ s@@ pli@@ t@@ To@@ List@@ (req@@ .get@@ Path@@ Info@@ ()); java.lang.String cach@@ e@@ Name = par@@ am@@ s.get(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ Res@@ tApi@@ Servlet.@@ C@@ A@@ CH@@ E@@ NA@@ M@@ E_@@ IN@@ DE@@ X@@ ); java.lang.String j@@ s@@ on = req@@ .get@@ Read@@ er@@ ().@@ read@@ Line@@ (); for@@ war@@ ded@@ Cache@@ E@@ vi@@ c@@ tion@@ Handl@@ er.@@ e@@ vi@@ ct@@ (@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Cache@@ E@@ n@@ try@@ .@@ from@@ (c@@ ach@@ e@@ Name, com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ G@@ son@@ Par@@ ser@@ .@@ from@@ Json@@ (c@@ ach@@ e@@ Name, json@@ ))); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Cache@@ NotFound@@ Exception e) { log@@ g@@ er.@@ error@@ ("@@ Fai@@ le@@ d to pro@@ ces@@ s e@@ vi@@ c@@ tion requ@@ est@@ : {}@@ ", e.get@@ Message()); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ ES@@ T@@ , e.get@@ Message()); } catch (java.io.IOException e) { log@@ g@@ er.@@ error@@ ("@@ Fai@@ le@@ d to pro@@ ces@@ s e@@ vi@@ c@@ tion requ@@ est@@ : {}@@ ", e.get@@ Message@@ (), e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ ES@@ T@@ , e.get@@ Message()); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { set@@ Content@@ And@@ En@@ cod@@ ing@@ (r@@ sp@@ ); try { if (!(@@ com.google.common.@@ net.@@ M@@ ed@@ i@@ a@@ Type.@@ parse@@ (req@@ .get@@ Content@@ Type@@ ()).@@ is@@ (@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ J@@ S@@ ON@@ _@@ UT@@ F@@ _@@ 8@@ ))) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ UN@@ S@@ U@@ P@@ OR@@ TE@@ D@@ _@@ M@@ I@@ A@@ _@@ T@@ Y@@ P@@ E@@ , (("@@ Ex@@ p@@ ec@@ t@@ ing " + (@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ J@@ S@@ ON@@ _@@ UT@@ F@@ _@@ 8@@ .@@ toString@@ ())) + " cont@@ ent type@@ ")); return@@ ; } for@@ war@@ ded@@ Event@@ Handl@@ er.@@ dis@@ patch@@ (get@@ Event@@ From@@ Request@@ (req@@ )); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ TE@@ N@@ T@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ g@@ er.@@ de@@ bug@@ ("@@ E@@ rror try@@ ing to fin@@ d a change ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ F@@ O@@ UN@@ D@@ , "@@ Change not fo@@ und@@ \n@@ "); } catch (java.io.IOException e) { log@@ g@@ er.@@ error@@ ("@@ Un@@ able to re@@ -@@ tri@@ gg@@ er event@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ ES@@ T@@ , e.get@@ Message()); } }
@org.junit.Test public void index@@ ing@@ Updat@@ es@@ Th@@ e@@ Index@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Or@@ Index@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ index@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ S@@ ate@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ at@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ es@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ Id@@ ()).@@ isEqualTo(@@ account@@ Id); }
private void update@@ Account@@ With@@ out@@ Cache@@ Or@@ Index@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update a@@ Update@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = new com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update@@ (com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ IS@@ AB@@ L@@ ED@@ , all@@ User@@ s@@ Name, all@@ User@@ s@@ Repo@@ )) { org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = server@@ Ident@@ .get(); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (id@@ ent@@ ); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Commit@@ ter@@ (id@@ ent@@ ); com.google.gerrit.server.account.Account@@ Config account@@ Config = new com.google.gerrit.server.account.Account@@ Config@@ (account@@ Id, all@@ User@@ s@@ Repo@@ ).@@ load@@ (); account@@ Config.@@ set@@ Account@@ Update@@ (@@ a@@ Update@@ ); account@@ Config.@@ commit@@ (m@@ d); } }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ From@@ Account@@ Cre@@ ator@@ I@@ f@@ User@@ Branch@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); com.google.gerrit.acceptance.@@ Account@@ Cre@@ at@@ or account@@ Cre@@ at@@ or = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.acceptance.@@ Account@@ Cre@@ ator@@ .@@ class@@ ); account@@ Cre@@ ator@@ .@@ e@@ vi@@ ct@@ (@@ com.google.common.collect.Immutable@@ Set.@@ of@@ (account@@ Id@@ )); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cre@@ ator@@ ); try (com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (account@@ Cre@@ ator@@ , null@@ , null@@ , null@@ ).@@ re@@ set@@ (project@@ ).@@ re@@ set@@ (@@ all@@ User@@ s).@@ bu@@ ild@@ ()) { create@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ account@@ Cre@@ ator@@ ); }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ I@@ f@@ User@@ Branch@@ I@@ s@@ Res@@ et@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); org.eclipse.jgit.lib.@@ Re@@ f user@@ B@@ ran@@ ch = create@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cache@@ .@@ class@@ ); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cach@@ e); com.google.gerrit.server.index.@@ account.@@ Account@@ Index@@ er account@@ Index@@ er = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ index.@@ account.@@ Account@@ Index@@ er@@ .@@ class@@ ); account@@ Index@@ er.@@ index@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Index@@ er@@ ); org.eclipse.jgit.lib.@@ Re@@ f n@@ on@@ User@@ B@@ ran@@ ch = create@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s@@ User@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ ))); try (com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , account@@ Cache@@ , account@@ Index@@ er, account@@ ).@@ re@@ set@@ (project@@ ).@@ all@@ User@@ s).@@ bu@@ ild@@ ()) { update@@ Ref@@ (@@ n@@ on@@ User@@ Branch@@ ); update@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , user@@ Branch@@ ); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ account@@ Cach@@ e); }
@org.junit.Test public void project@@ E@@ vi@@ c@@ tion@@ I@@ f@@ Ref@@ s@@ Met@@ a@@ Config@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ 2 = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ b@@ ar@@ "); org.eclipse.jgit.lib.Repository repo@@ 2 = repo@@ Manager.@@ create@@ Repository(@@ project@@ 2); com.google.gerrit.server.project.Project@@ Cach@@ e project@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.project.@@ Project@@ Cache@@ .@@ class@@ ); project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ 2); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ project@@ Cach@@ e); try (com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , null@@ , project@@ Cache@@ ).@@ re@@ set@@ (project@@ 2@@ ).@@ re@@ set@@ (project@@ 2@@ ).@@ bu@@ ild@@ ()) { create@@ ("@@ refs/heads/@@ master@@ "); create@@ Ref@@ (repo@@ 2, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ project@@ Cach@@ e); }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ I@@ f@@ User@@ Branch@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ FA@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cache@@ .@@ class@@ ); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cach@@ e); com.google.gerrit.server.index.@@ account.@@ Account@@ Index@@ er account@@ Index@@ er = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ index.@@ account.@@ Account@@ Index@@ er@@ .@@ class@@ ); account@@ Index@@ er.@@ index@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Index@@ er@@ ); try (com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , account@@ Cache@@ , account@@ Index@@ er, null@@ ).@@ re@@ set@@ (project@@ ).@@ re@@ set@@ (@@ all@@ User@@ s).@@ bu@@ ild@@ ()) { create@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ ))); create@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ account@@ Cach@@ e); } }
@org.junit.Test public void re@@ index@@ ing@@ St@@ a@@ le@@ Account@@ Updat@@ es@@ Th@@ e@@ Index@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Or@@ Index@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ re@@ index@@ I@@ f@@ St@@ a@@ le@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ S@@ ate@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ at@@ es@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ Id@@ ()).@@ isEqualTo(@@ account@@ Id); }
public com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter buil@@ d(@@ ) throw@@ s java.io.IOException { return new com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter@@ (repo@@ Manag@@ er, all@@ User@@ s@@ Name, account@@ Cre@@ ator@@ , account@@ Cache@@ , account@@ Index@@ er, project@@ Cache@@ , ref@@ s@@ By@@ Project@@ ); }
@org.junit.Test public void project@@ E@@ vi@@ c@@ tion@@ I@@ f@@ Ref@@ s@@ Met@@ a@@ Config@@ I@@ s@@ Res@@ et@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ 2 = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ b@@ ar@@ "); org.eclipse.jgit.lib.Repository repo@@ 2 = repo@@ Manager.@@ create@@ Repository(@@ project@@ 2); org.eclipse.jgit.lib.@@ Re@@ f met@@ a@@ Config = create@@ Ref@@ (repo@@ 2, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); com.google.gerrit.server.project.Project@@ Cach@@ e project@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.project.@@ Project@@ Cache@@ .@@ class@@ ); project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ 2); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ project@@ Cach@@ e); org.eclipse.jgit.lib.@@ Re@@ f n@@ on@@ Met@@ a@@ Config = create@@ Ref@@ ("@@ refs/heads/@@ master@@ "); try (com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , null@@ , project@@ Cache@@ ).@@ re@@ set@@ (project@@ 2@@ ).@@ bu@@ ild@@ ()) { update@@ Ref@@ (@@ n@@ on@@ Met@@ a@@ Config@@ ); update@@ Ref@@ (repo@@ 2, met@@ a@@ Config@@ ); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ project@@ Cach@@ e); }
@org.junit.Test public void index@@ Can@@ not@@ Be@@ or@@ C@@ r@@ up@@ ted@@ By@@ St@@ a@@ le@@ Cache@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); load@@ Account@@ Cache@@ (account@@ Id); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Cache@@ Or@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ index@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ S@@ ate@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ at@@ es@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ Id@@ ()).@@ isEqualTo(@@ account@@ Id); }
@org.junit.Test public void mis@@ s@@ ing@@ PatchSet@@ Commit@@ O@@ mit@@ s@@ Comment@@ s@@ On@@ Parent@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.reviewdb.client.Change.@@ Id id = r@@ .getChange@@ ().get@@ Id(); com.google.gerrit.extensions.common.@@ Comment@@ Info draft@@ Info = put@@ Draft@@ (user@@ , id, "@@ d@@ raf@@ t comment@@ ", null@@ , S@@ id@@ e.@@ P@@ A@@ RE@@ N@@ T@@ ); put@@ Comment@@ (user@@ , id, 1, "@@ publi@@ sh@@ ed comment@@ ", null@@ , null@@ , S@@ id@@ e.@@ P@@ A@@ RE@@ N@@ T@@ ); com.google.gerrit.extensions.common.@@ Comment@@ Info comment@@ Info = gApi.changes().id(@@ id@@ .get@@ ()).@@ comment@@ s().@@ values@@ ().@@ f@@ l@@ at@@ Map@@ (@@ java.util.@@ List@@ :@@ stream@@ ).@@ fin@@ d@@ Fi@@ rst@@ ().get@@ (); com.google.gerrit.reviewdb.server.ReviewDb db = get@@ Un@@ w@@ rap@@ p@@ ed@@ Db@@ (); com.google.gerrit.reviewdb.client.PatchSet p@@ s = db.@@ patchSet@@ s@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.PatchSet.@@ Id@@ (id@@ , 1@@ )); p@@ s.set@@ Revision@@ (@@ new com.google.gerrit.reviewdb.client.@@ Rev@@ Id@@ ("@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ ")); db.@@ patchSet@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (ps@@ )); try { patch@@ List@@ Cache@@ .get@@ O@@ ld@@ Id(@@ db.@@ changes@@ ().get@@ (id@@ ), ps@@ , null@@ ); assert@@ _@@ f@@ ail@@ ("@@ Ex@@ p@@ ected Patch@@ List@@ Not@@ A@@ va@@ il@@ able@@ Exception@@ "); } catch (com.google.gerrit.server.@@ patch.@@ Patch@@ List@@ Not@@ A@@ va@@ il@@ able@@ Exception e) { } check@@ er.@@ re@@ bu@@ ild@@ And@@ Check@@ Change@@ (id@@ , com.google.common.collect.Immutable@@ List.@@ of@@ ((((@@ ("@@ Patch@@ Line@@ Comm@@ ent.@@ Key set@@ s d@@ if@@ f@@ er@@ : [@@ " + id@@ ) + "@@ ,@@ ") + (@@ com.google.gerrit.acceptance.PushOneCommit.@@ F@@ IL@@ E_@@ NAME@@ )) + "@@ ,@@ ") + id@@ Info.@@ id@@ )) + "@@ ,@@ ") + id@@ ) + "@@ ,@@ ") + id@@ ) + "@@ ,@@ ") + (@@ com.google.gerrit.acceptance.PushOneCommit.@@ F@@ IL@@ E_@@ NAME@@ )) + "@@ ,@@ ") + comment@@ Info.@@ id@@ )) + "@@ ] on@@ l@@ y in A@@ ; [] l@@ y in B@@ "@@ ))); }
public void re@@ bu@@ ild@@ And@@ Check@@ Change@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, java.util.List<java.lang.String> expected@@ D@@ if@@ f@@ ) throw@@ s java.lang.Exception { I@@ mmutable@@ List@@ Multimap@@ .@@ Builder@@ <@@ com.google.gerrit.reviewdb.client.Change.@@ Id, java.lang.String> b = com.google.common.collect.Immutable@@ List@@ Multimap@@ .@@ buil@@ der@@ (); b.@@ put@@ All@@ (change@@ Id, expected@@ D@@ if@@ f@@ ); re@@ bu@@ ild@@ And@@ Check@@ Changes@@ (@@ java.util.@@ stream@@ .@@ Stream@@ .@@ of@@ (change@@ Id@@ ), b.@@ bu@@ ild@@ ()); }
@org.junit.Test public void delete@@ Item@@ s() throw@@ s java.lang.Exception { org.eclipse.jgit.lib.ObjectId old@@ Met@@ a@@ Id = met@@ a@@ Ref@@ (account@@ Id); com.google.common.collect.Immutable@@ Set@@ <java.lang.String> default@@ Name@@ s = my@@ M@@ en@@ us@@ From@@ Api@@ (account@@ Id); General@@ Preferences@@ Info p@@ ref@@ s = gApi.@@ account@@ s().@@ id(@@ account@@ Id@@ .get@@ ()@@ ).get@@ Preferences@@ (); p@@ refs.@@ m@@ y.@@ add(@@ 0, new com.google.gerrit.extensions.client.@@ M@@ enu@@ Item@@ ("@@ S@@ o@@ h@@ ing ing ing ing com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 6@@ 0@@ .@@ DE@@ FA@@ U@@ L@@ T_@@ D@@ R@@ A@@ F@@ I@@ TE@@ M@@ S@@ .get(@@ 0@@ )) + "@@ +@@ is@@ :@@ merge@@ able@@ "@@ ))); for (@@ int i = 0; i < (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 6@@ 0@@ .@@ DE@@ FA@@ U@@ L@@ T_@@ D@@ R@@ A@@ F@@ I@@ TE@@ M@@ S@@ .@@ size()); i@@ ++@@ ) { p@@ refs.@@ m@@ y.@@ add@@ (@@ new com.google.gerrit.extensions.client.@@ M@@ enu@@ Item@@ (("@@ D@@ raf@@ t en@@ try " + i@@ ), com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 6@@ 0@@ .@@ DE@@ FA@@ U@@ L@@ T_@@ D@@ R@@ A@@ F@@ T_@@ M@@ S@@ i@@ ))); } gApi.@@ account@@ s().@@ id(@@ account@@ Id@@ .get@@ ()).@@ set@@ Preferences@@ (p@@ ref@@ s); java.util.List<java.lang.String> old@@ Name@@ s = com.google.common.collect.Immutable@@ List.@@ <java.lang.String@@ >@@ buil@@ der@@ ().@@ add@@ ("@@ S@@ o@@ h@@ ing ing ").@@ add@@ All@@ (@@ default@@ Nam@@ es@@ ).@@ add@@ ("@@ D@@ raf@@ t en@@ try 0@@ ").@@ add@@ ("@@ D@@ raf@@ t en@@ try 1@@ ").@@ add@@ ("@@ D@@ raf@@ t en@@ try 2@@ ").@@ add@@ ("@@ D@@ raf@@ t en@@ try 3@@ ").@@ add@@ ("@@ bu@@ ild@@ (); assert@@ Th@@ at(@@ my@@ M@@ en@@ us@@ From@@ Api@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ old@@ Nam@@ es@@ ).@@ in@@ Or@@ der@@ (); schema@@ 6@@ 0@@ .@@ m@@ ig@@ r@@ ate@@ Data@@ (db, new com.google.gerrit.@@ test@@ ing.@@ Test@@ U@@ I@@ ()); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); test@@ En@@ v@@ .set@@ Api@@ User@@ (account@@ Id); assert@@ Th@@ at(@@ met@@ a@@ Ref@@ (account@@ Id@@ )).@@ is@@ Not@@ E@@ qualTo@@ (@@ old@@ Met@@ a@@ Id); java.util.List<java.lang.String> new@@ Name@@ s = com.google.common.collect.Immutable@@ List.@@ <java.lang.String@@ >@@ buil@@ der@@ ().@@ add@@ All@@ ("@@ met@@ h@@ ing ing ing ing ing ing ing ing ing ing account@@ s/@@ ").@@ add@@ All@@ (@@ default@@ Nam@@ es@@ ).@@ bu@@ ild@@ (); assert@@ Th@@ at(@@ my@@ M@@ en@@ us@@ From@@ NoteDb@@ (account@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ In@@ Or@@ der@@ ).@@ in@@ Or@@ der@@ (); assert@@ Th@@ at(@@ my@@ ).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ From@@ (@@ new@@ Element@@ s@@ From@@ (@@ new@@ Element@@ s@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ Or@@ der@@ (); }
private void res@@ ol@@ ve@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s, java.lang.String r@@ ) { try { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s = group@@ Member@@ s.@@ list@@ Account@@ s(@@ group@@ s@@ Collection@@ .get().@@ parse@@ (r@@ ).get@@ Group@@ UUID@@ (), p@@ ).@@ stream@@ ().@@ filter@@ (@@ Account@@ :@@ is@@ Active@@ ).@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); reviewer@@ s.@@ add@@ All@@ (account@@ s); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception | com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } project {}@@ : review@@ er {@@ } is ne@@ ith@@ er an ac@@ count no@@ r a group@@ .@@ ", change@@ Number@@ , p@@ r@@ ); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {}@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {}@@ ", change@@ Number@@ , p@@ r@@ ); } } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {}@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for {}@@ .@@ ", change@@ Number@@ , p@@ , e); } }
private boolean res@@ ol@@ ve@@ Account@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, java.lang.String r@@ ) { try { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Res@@ ol@@ v@@ er.@@ fin@@ d(@@ review@@ Db@@ , r@@ ); if ((@@ ac@@ count != null@@ ) && (@@ account.@@ is@@ Active@@ ())) { if ((@@ upload@@ er == null@@ ) || ((@@ upload@@ er.@@ _@@ account@@ Id@@ ) != (account@@ .getId@@ ().get@@ ()))) { reviewer@@ s.add(@@ account@@ .getId()); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.error@@ ("@@ Fo@@ r th@@ e change {@@ } of project {}@@ : f@@ ai@@ le@@ d to res@@ ol@@ v@@ e ac@@ count {}@@ .@@ ", change@@ Number@@ , p@@ r@@ , e); return true@@ ; } return false@@ ; }
java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> res@@ ol@@ ve@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , java.util.@@ Set@@ <java.lang.String> in@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er@@ ) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (in@@ .@@ size()); com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s = null@@ ; for (java.lang.String r : in@@ ) { if (@@ res@@ ol@@ ve@@ Account@@ (@@ review@@ Db@@ , p@@ , change@@ Number@@ , upload@@ er, reviewer@@ s, r@@ )) { continue@@ ; } if ((@@ group@@ Member@@ s == null@@ ) && (@@ upload@@ er != null@@ )) { group@@ Member@@ s = create@@ Group@@ Member@@ s(@@ review@@ Db@@ , change@@ Number@@ , upload@@ er, upload@@ er, r@@ ); } if (@@ group@@ Member@@ s != null@@ ) { res@@ ol@@ ve@@ Group@@ (p@@ , change@@ Number@@ , reviewer@@ s, group@@ Member@@ s, r@@ ); } else { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r change {@@ } of project {}@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for roup {@@ }; can@@ not ret@@ ri@@ ev@@ e upload@@ er ac@@ count {}@@ .@@ ", change@@ Number@@ , p@@ r@@ , upload@@ er.@@ email@@ ); } } return reviewer@@ s; }
private com.google.gerrit.server.account.@@ Group@@ Member@@ s create@@ Group@@ Member@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er, java.lang.String r@@ ) { java.lang.String upload@@ er@@ Name@@ E@@ mai@@ l = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s <@@ %s@@ >@@ ", upload@@ er.@@ name, upload@@ er.@@ email@@ ); try { com.google.gerrit.reviewdb.client.@@ Account upload@@ er@@ Account = account@@ Res@@ ol@@ v@@ er.@@ fin@@ d@@ By@@ Name@@ Or@@ Email@@ (@@ review@@ Db@@ , upload@@ er@@ Name@@ Email@@ ); if (@@ upload@@ er@@ Account != null@@ ) { return group@@ Member@@ s@@ Factory.create@@ (id@@ ent@@ if@@ i@@ ed@@ User@@ Factory.create@@ (@@ upload@@ er@@ Account@@ .getId@@ ())); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {}@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for {}@@ , can@@ not ret@@ ri@@ ev@@ e ac@@ count {}@@ .@@ ", change@@ Number@@ , p@@ r@@ , upload@@ er@@ Name@@ Email@@ , e); } return null@@ ; }
private void res@@ ol@@ ve@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s, java.lang.String r@@ ) { try { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s = group@@ Member@@ s.@@ list@@ Account@@ s(@@ group@@ s@@ Collection@@ .get().@@ parse@@ (r@@ ).get@@ Group@@ UUID@@ (), p@@ ).@@ stream@@ ().@@ filter@@ (@@ Account@@ :@@ is@@ Active@@ ).@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); reviewer@@ s.@@ add@@ All@@ (account@@ s); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception | com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } to project {}@@ : review@@ er {@@ } is ne@@ ith@@ er an ac@@ count no@@ r a group@@ .@@ ", change@@ Number@@ , p@@ r@@ ); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {}@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {}@@ .@@ ", change@@ Number@@ , p@@ , e); } } }
private void run@@ (@@ java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <java.lang.String> log@@ One@@ Line@@ , @@@ com.google.gerrit.common.@@ Null@@ able java.io.@@ P@@ r@@ int@@ Wri@@ ter pro@@ g@@ ress@@ Wri@@ ter@@ ) { if (!@@ ((@@ repo@@ Manag@@ er@@ ) instanceof com.google.gerrit.server.git.@@ Lo@@ cal@@ Dis@@ k@@ Repository@@ Manag@@ er@@ )) { log@@ One@@ Lin@@ e.@@ accept@@ ((("@@ S@@ kip@@ p@@ ing C of " + (@@ all@@ User@@ s@@ )) + "; not a loc@@ al dis@@ k repo@@ ")); return@@ ; } if (!(@@ enable@@ Au@@ to@@ G@@ c@@ log@@ (@@ log@@ One@@ Line@@ ))) { log@@ Lin@@ e.@@ accept@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ((((@@ (("@@ S@@ kip@@ p@@ ing C of " + (@@ all@@ User@@ s@@ )) + " d@@ u@@ e to dis@@ ab@@ lin@@ g ") + (@@ CON@@ FI@@ G@@ _@@ C_@@ S@@ EC@@ T@@ ION@@ )) + "@@ .@@ ") + (@@ CON@@ FI@@ G@@ _@@ K@@ E@@ Y_@@ A@@ UT@@ O@@ )@@ ))); log@@ One@@ Lin@@ e.@@ accept@@ ((("@@ I@@ f load@@ ing account@@ s is s@@ lo@@ w af@@ ter th@@ e Note@@ Db m@@ ig@@ r@@ ation@@ , r@@ ation@@ , r@@ u@@ n `@@ g@@ it c@@ lon@@ on " + (@@ all@@ User@@ s@@ )) + " m@@ an@@ u@@ all@@ y@@ ")); return@@ ; } if (@@ pro@@ g@@ ress@@ Wri@@ ter == null@@ ) { log@@ One@@ Lin@@ e.@@ accept@@ ((("@@ collec@@ t@@ ing g@@ ar@@ b@@ ag@@ e for " + (@@ all@@ User@@ s@@ )) + "@@ \"@@ :@@ \n@@ ")); } com.google.gerrit.common.data.@@ G@@ ar@@ b@@ age@@ Collection@@ Result result = g@@ c@@ Factory.create@@ ().@@ run@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ all@@ User@@ s@@ ), pro@@ g@@ ress@@ Wri@@ ter@@ ); if (!(@@ result.@@ has@@ Error@@ s@@ ())) { return@@ ; } for (@@ com.google.gerrit.common.data.@@ G@@ ar@@ b@@ age@@ Collection@@ Result.@@ E@@ rror e : result@@ .get@@ Error@@ s()) { switch (@@ e.get@@ Type@@ ()) { case G@@ C_@@ AL@@ RE@@ AD@@ Y_@@ S@@ CH@@ ED@@ U@@ LE@@ D : log@@ : log@@ Lin@@ e.@@ accept@@ (("@@ G@@ C al@@ read@@ y s@@ ched@@ ule@@ d for " + (@@ e.get@@ Project@@ Name@@ ()))); break@@ ; case G@@ C_@@ FA@@ IL@@ E@@ D : log@@ Lin@@ e.@@ accept@@ (("@@ G@@ C f@@ ai@@ le@@ d for " + (@@ e.get@@ Project@@ Name@@ ()))); break@@ ; case RE@@ P@@ O@@ S@@ IT@@ OR@@ Y_@@ NO@@ T_@@ F@@ O@@ UN@@ D : log@@ ()@@ ;@@ ) + " not fo@@ und@@ ")); break@@ ; } } }
public java.util.@@ Set@@ <java.lang.String> get@@ Up@@ stream@@ Branch@@ es@@ (java.lang.String to@@ Branch@@ , java.lang.String project@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.@@ Set@@ <java.lang.String> up@@ stream@@ Branch@@ es = new java.util.Hash@@ Set@@ <java.lang.String@@ >(); java.util.@@ Set@@ <java.lang.String> sub@@ s@@ ection@@ s = get@@ Config@@ ().get@@ Sub@@ s@@ ection@@ s(@@ plugin@@ Name); for (java.lang.String sub@@ s@@ ec@@ tion : sub@@ s@@ ection@@ s) { java.util.List<java.lang.String> branch@@ P@@ ai@@ r = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (com.googlesource.gerrit.plugins.@@ au@@ to@@ merg@@ er.@@ Config@@ Load@@ er.@@ B@@ R@@ AN@@ CH@@ _@@ DE@@ L@@ I@@ M@@ IT@@ ER@@ ).@@ tri@@ m@@ Result@@ s().@@ o@@ mit@@ E@@ mpty@@ String@@ s().@@ s@@ pli@@ t@@ To@@ List(@@ sub@@ s@@ ection@@ ); if ((@@ branch@@ P@@ ai@@ r.@@ size@@ ()) != 2@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(("@@ Au@@ to@@ merge@@ r con@@ fig b@@ ran@@ ch p@@ ai@@ r m@@ al@@ for@@ m@@ ed@@ : " + sub@@ s@@ ection@@ )); } if (@@ to@@ Branch@@ .equals(@@ branch@@ P@@ ai@@ r@@ .get(@@ 1@@ ))) { java.util.@@ Set@@ <java.lang.String> project@@ s@@ In@@ S@@ cop@@ e = get@@ Project@@ s@@ S@@ cop@@ e@@ (@@ branch@@ P@@ ai@@ r@@ .get(@@ 0@@ ), branch@@ P@@ ai@@ r@@ .get(@@ 1@@ )); if (project@@ s@@ In@@ S@@ cop@@ e.@@ contains(@@ project@@ )) { up@@ stream@@ Branch@@ es.@@ add(@@ branch@@ P@@ ai@@ r@@ .get(@@ 0@@ )); } } } return up@@ stream@@ Branch@@ es@@ ; }
@org.junit.Test public void b@@ as@@ ic@@ Group@@ Pro@@ per@@ ti@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info cre@@ ated@@ Group = g@@ Api@@ .g@@ roup@@ s().@@ create(@@ name@@ ("@@ group@@ "@@ )@@ ).get@@ (); com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group review@@ Db@@ Group = group@@ s.get@@ Group@@ (db, new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ cre@@ ated@@ Group.@@ id@@ )@@ ).get@@ (); delete@@ Group@@ Ref@@ s(@@ review@@ Db@@ Group@@ ); assert@@ Th@@ at(@@ com.google.gerrit.acceptance.@@ ap@@ i@@ .g@@ roup.@@ Group@@ Re@@ buil@@ der@@ IT.@@ remove@@ Ref@@ State@@ (re@@ buil@@ d(@@ review@@ Db@@ Group@@ )@@ )).@@ isEqualTo(@@ ro@@ und@@ To@@ Se@@ con@@ d(@@ review@@ Db@@ Group@@ )); }
private com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group create@@ Group@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group@@ Name g@@ n = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Name(@@ group@@ Cre@@ ation@@ .getName@@ Key@@ (), group@@ Cre@@ ation@@ .getId()); db.account@@ Group@@ Nam@@ es().@@ insert@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ g@@ n@@ )); com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update.@@ create@@ Account@@ Group@@ (@@ group@@ Cre@@ ation@@ ); com.google.gerrit.server.g@@ roup.@@ Group@@ s@@ Update.@@ Result update@@ Result = update@@ Group@@ In@@ Review@@ Db@@ (db, group@@ , group@@ Update@@ ); return com.google.gerrit.server.g@@ roup.@@ In@@ ternal@@ Group.@@ create(@@ group@@ , update@@ Result@@ .get@@ Mo@@ d@@ if@@ i@@ ed@@ Member@@ s@@ (), update@@ Result@@ .get@@ Mo@@ d@@ if@@ i@@ ed@@ Sub@@ s@@ (), update@@ Result@@ .getRef@@ State@@ ()); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 3@@ ); valu@@ es.@@ add(@@ token@@ .@@ o@@ per@@ ation@@ ); valu@@ es.@@ add(@@ token@@ .@@ id@@ .getName@@ ()); valu@@ es.@@ add(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ()); valu@@ es.@@ add(@@ java.lang.String.@@ value@@ Of(@@ token@@ .@@ exp@@ i@@ res@@ In@@ )); return values@@ ; }
@org.junit.Test public void test@@ Token@@ Ser@@ i@@ ali@@ z@@ ation@@ Des@@ er@@ i@@ ali@@ z@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ ess@@ ess@@ or pro@@ cess@@ or = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ (c@@ ip@@ her@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 0); java.lang.String ser@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ); assert@@ Th@@ at(@@ ser@@ i@@ ali@@ zed@@ ).@@ is@@ Not@@ E@@ mpty@@ (); java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ > des@@ er@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ ze@@ ); assert@@ Th@@ at(@@ des@@ er@@ i@@ ali@@ zed@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ()).@@ isEqualTo(@@ des@@ er@@ i@@ ali@@ zed@@ .get().@@ exp@@ i@@ res@@ At@@ ()); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (@@ values@@ .get(@@ 1@@ )), values@@ .get(@@ 2@@ ), java.lang.@@ Integ@@ er.@@ value@@ Of(@@ values@@ .get(@@ 3@@ )@@ ))); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); valu@@ es.@@ add(@@ token@@ .@@ user@@ ); user@@ valu@@ es.@@ add(@@ token@@ .@@ project@@ ); if (@@ valu@@ es.@@ add(@@ java.lang.String.@@ value@@ Of(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ()); } return values@@ ; }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), java.lang.@@ Integ@@ er.@@ value@@ Of(@@ values@@ )); }
com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Info g@@ ener@@ ate@@ Auth@@ Info@@ (com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (user@@ .getUser@@ Name@@ (), project, o@@ per@@ ation@@ , java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), exp@@ i@@ res@@ In@@ ); return new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Info@@ (@@ pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ), token@@ .@@ exp@@ i@@ res@@ At@@ (), token@@ .@@ exp@@ i@@ res@@ In@@ ); }
public com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info g@@ ener@@ ate@@ Auth@@ Info@@ (java.lang.String o@@ per@@ ation@@ , org.eclipse.jgit.@@ lfs.@@ lib.@@ An@@ y@@ L@@ on@@ g@@ Object@@ Id id, java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t no@@ w, int exp@@ i@@ res@@ In@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ o@@ per@@ ation@@ , id, no@@ w, exp@@ i@@ res@@ In@@ In@@ ); return new com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info@@ (@@ pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ), token@@ .@@ exp@@ i@@ res@@ At@@ (), token@@ .@@ exp@@ i@@ res@@ In@@ ); }
public boolean on@@ Time@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t wh@@ en@@ ) { return wh@@ en@@ .is@@ B@@ e@@ for@@ e@@ (@@ token@@ .is@@ su@@ ed@@ .@@ p@@ lu@@ s@@ M@@ il@@ li@@ s(@@ token@@ .@@ exp@@ i@@ res@@ )); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ values@@ .get(@@ 0@@ ), java.lang.@@ Integ@@ er.@@ value@@ Of(@@ values@@ .get(@@ 1@@ )@@ ))); }
@org.junit.Test public void test@@ Token@@ On@@ Time@@ () throw@@ s java.lang.Exception { java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t wh@@ en = java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ wh@@ en@@ , 1@@ 00@@ 0); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ wh@@ en@@ , 1@@ 00@@ 0); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ ); assert@@ Th@@ at(@@ ve@@ r@@ if@@ i@@ er.@@ on@@ Time@@ (@@ wh@@ en@@ .@@ p@@ lu@@ s@@ M@@ il@@ li@@ s(@@ 9@@ 9@@ 9@@ 9@@ )@@ )).@@ is@@ True@@ (); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 2); valu@@ es.@@ add(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ()); valu@@ es.@@ add(@@ java.lang.String.@@ value@@ Of(@@ token@@ .@@ exp@@ i@@ res@@ In@@ )); return values@@ ; }
@org.junit.Test public void test@@ Token@@ Ex@@ p@@ i@@ re@@ d(@@ ) throw@@ s java.lang.Exception { java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t wh@@ en = java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Test.@@ to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ wh@@ en@@ , 1@@ 00@@ 0); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ ); assert@@ Th@@ at(@@ ve@@ r@@ if@@ i@@ er.@@ on@@ Time@@ (@@ wh@@ en@@ .@@ p@@ lu@@ s@@ M@@ il@@ li@@ s(@@ 1@@ 00@@ )@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Auth@@ Info@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ ("@@ o@@ ", z@@ er@@ o@@ Id(), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ o@@ z@@ er@@ o@@ Id@@ ()@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Ag@@ ain@@ st@@ D@@ if@@ f@@ er@@ ent@@ O@@ per@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Info@@ ("@@ o@@ ", z@@ er@@ o@@ Id(), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ p@@ ", z@@ er@@ o@@ Id@@ ()@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Ag@@ ain@@ st@@ D@@ if@@ f@@ er@@ ent@@ Object@@ Id@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ ("@@ o@@ z@@ er@@ Id(), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ o@@ ", org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (("@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ " + ("@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 0@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ " + "@@ 1@@ 2@@ 3@@ 4@@ "@@ )@@ )@@ )).@@ is@@ F@@ alse@@ (); }
private boolean is@@ Re@@ co@@ ver@@ able@@ (@@ java.lang.Exception e) { return (!(@@ javax.@@ net.@@ s@@ l.@@ S@@ L@@ Exception@@ )) && (@@ e instanceof java.io.IO@@ Exception@@ ); }
@java.lang.Override public void run() { try { java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Event@@ Pro@@ cess@@ or@@ .@@ Request@@ > cont@@ ent = pro@@ cess@@ or@@ .get(); if (!(@@ cont@@ ent.@@ is@@ P@@ res@@ ent@@ ())) { com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Po@@ st@@ T@@ as@@ k.@@ log.@@ de@@ bug@@ ("@@ N@@ o content@@ . Web@@ h@@ oo@@ k [@@ {}@@ ] s@@ kip@@ p@@ ed@@ .@@ ", remo@@ te@@ .get@@ Url@@ ()); return@@ ; } (@@ ex@@ ec@@ C@@ nt@@ )@@ ++@@ ; com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Http@@ Respon@@ se@@ Handl@@ er.@@ Http@@ Result result = s@@ ession@@ .get().@@ post@@ (@@ remo@@ te@@ , content@@ .get()); if ((!@@ (@@ result.@@ su@@ c@@ cess@@ f@@ ul@@ )) && ((@@ ex@@ ec@@ C@@ nt@@ ) < (@@ remo@@ te@@ .get@@ Ma@@ x@@ T@@ ri@@ es@@ ()))) { log@@ R@@ e@@ try@@ (@@ result.@@ message@@ ); res@@ ched@@ ule@@ (); } } } catch (java.lang.@@ Run@@ time@@ Exception | java.io.IOException e) { if ((@@ is@@ Re@@ co@@ ver@@ able@@ (@@ e@@ )) && ((@@ ex@@ ec@@ C@@ nt@@ ) < (@@ remo@@ te@@ .get@@ Ma@@ x@@ T@@ ri@@ es@@ ()))) { log@@ R@@ e@@ try@@ (@@ e); res@@ ched@@ ule@@ (); } else { com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Po@@ st@@ T@@ as@@ k.@@ log.error@@ ("@@ Fai@@ le@@ d to post@@ : {}@@ ", toString@@ (), e); } } }
private void create@@ Repository@@ () { if (p@@ oo@@ l.@@ is@@ Create@@ M@@ is@@ s@@ ing@@ Repo@@ s()) { try { org.eclipse.jgit.lib.@@ Re@@ f h@@ e@@ ad = git.@@ ex@@ act@@ Ref@@ (@@ Con@@ stant@@ s.@@ HE@@ AD@@ ); if (re@@ plic@@ ation@@ Que@@ u@@ e.@@ create@@ Project@@ (project@@ Name, (@@ h@@ e@@ ad != null ? head@@ .getName@@ () : null@@ ))) { com.google.gerrit.extensions.@@ events.@@ New@@ Project@@ Cre@@ ated@@ List@@ en@@ er.@@ Event ev@@ ent = new com.google.gerrit.extensions.@@ events.@@ New@@ Project@@ Cre@@ ated@@ List@@ en@@ er.@@ Event@@ () { @java.lang.Override public java.lang.String get@@ Project@@ Name@@ () { return project@@ Name@@ .get(); } @java.lang.Override public java.lang.String get@@ Head@@ Name@@ () { return h@@ e@@ ad != null ? head@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : null@@ ; } @java.lang.Override public com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g get@@ No@@ t@@ if@@ y@@ () { return com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g.@@ N@@ ON@@ E@@ ; } }; replic@@ ation@@ Que@@ u@@ e.@@ on@@ New@@ Project@@ Cre@@ ated@@ (@@ event@@ ); p@@ oo@@ l.@@ res@@ ched@@ ule@@ (@@ this@@ , Dest@@ in@@ ation.@@ R@@ e@@ try@@ Re@@ as@@ on.@@ RE@@ P@@ O@@ S@@ IT@@ OR@@ Y_@@ M@@ IS@@ S@@ IN@@ G@@ ); } else { com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ Que@@ u@@ e.@@ rep@@ Lo@@ g.@@ warn@@ (("@@ M@@ is@@ s@@ ing repo@@ sitor@@ y co@@ ul@@ d not b@@ e create@@ d wh@@ en replic@@ at@@ ing {}@@ . " + ("@@ Y@@ o@@ u c@@ an on@@ l@@ y cre@@ ate mis@@ s@@ ing repo@@ sit@@ ori@@ es lo@@ call@@ y@@ , o@@ ve@@ r S@@ H or wh@@ en " + "@@ us@@ ing admin@@ Ur@@ l in replication.@@ config@@ . Se@@ e do@@ c@@ ument@@ ation for m@@ or@@ e in@@ for@@ m@@ ation.@@ "@@ )), u@@ ri@@ ); } } catch (java.io.IOException i@@ o@@ e) { state@@ Lo@@ g.@@ error@@ ((("@@ Cannot replic@@ ate to " + (@@ u@@ ri@@ )) + "; f@@ ai@@ le@@ d to cre@@ ate mis@@ s@@ ing repo@@ sitor@@ y@@ "), i@@ o@@ e@@ , get@@ St@@ at@@ es@@ As@@ Array@@ ()); } } else { state@@ Lo@@ g.@@ error@@ ((("@@ Cannot replic@@ ate to " + (@@ u@@ ri@@ )) + "; repo@@ sitor@@ y not fo@@ und@@ "), get@@ St@@ at@@ es@@ As@@ Array@@ ()); } }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> read@@ Account@@ Group@@ Sub@@ group@@ s@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { try (@@ java.sql.@@ State@@ ment st@@ m@@ t = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )@@ ).get@@ Con@@ n@@ ection@@ ().@@ create@@ State@@ ment@@ ()@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Query@@ ((@@ (("@@ S@@ E@@ L@@ EC@@ T in@@ clu@@ de@@ _@@ u@@ id@@ " + (@@ " F@@ RO@@ M account@@ _@@ by@@ _@@ id@@ " + " W@@ H@@ ER@@ E group@@ _@@ id = '@@ ")) + (@@ group@@ Id@@ .get@@ ())) + "@@ '@@ "@@ ))) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> sub@@ group@@ s = new java.util.ArrayList<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D in@@ clu@@ ded@@ Group@@ U@@ u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (r@@ s.get@@ String@@ (1@@ )); sub@@ group@@ s.@@ add@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ group@@ Id, in@@ clu@@ ded@@ Group@@ U@@ u@@ id@@ ))); } return sub@@ group@@ s; } catch (@@ java.sql.@@ SQL@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to rea@@ d sub@@ group@@ s of ac@@ count %s f@@ ro@@ m Review@@ Db@@ ", group@@ Id@@ .get@@ ()), e); } }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > read@@ Account@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { try (@@ java.sql.@@ State@@ ment st@@ m@@ t = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )@@ ).get@@ Con@@ n@@ ection@@ ().@@ create@@ State@@ ment@@ ()@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Query@@ ((@@ (("@@ S@@ E@@ L@@ EC@@ T account@@ _@@ id@@ " + (@@ " F@@ RO@@ M account@@ _@@ group@@ s@@ " + " W@@ H@@ ER@@ E group@@ _@@ id = '@@ ")) + (@@ group@@ Id@@ .get@@ ())) + "@@ '@@ "@@ ))) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > me@@ mber@@ s = new java.util.ArrayList<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (r@@ s.get@@ In@@ t@@ (1@@ )); me@@ mber@@ s.@@ add@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ ))); } return me@@ mber@@ s; } catch (@@ java.sql.@@ SQL@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to rea@@ d me@@ mber@@ s of ac@@ count %s f@@ ro@@ m Review@@ Db@@ ", group@@ Id@@ .get@@ ()), e); } }
public static com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le from@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ From@@ Review@@ Db@@ (db, group@@ U@@ u@@ id); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = group@@ .getId@@ (); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ create(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ S@@ ource@@ .@@ REV@@ I@@ EW@@ _@@ D@@ B@@ , group@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Member@@ Au@@ dit@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Member@@ Au@@ dit@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ db.@@ Group@@ B@@ und@@ le.@@ is@@ P@@ res@@ ent@@ if@@ i@@ ed@@ User@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Sub@@ group@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ )); }
public com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le from@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ From@@ Review@@ Db@@ (db, group@@ Id); return com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ create(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ create(@@ com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ S@@ ource@@ .@@ REV@@ I@@ EW@@ _@@ D@@ B@@ , group@@ , com.google.gerrit.server.g@@ roup.@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Sub@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup.@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Sub@@ group@@ Au@@ dit@@ From@@ Review@@ Db@@ (db, group@@ Id@@ )); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ () throw@@ s java.lang.Exception { do@@ An@@ sw@@ er@@ (((@@ org.@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) (@@ ( in@@ vo@@ c@@ ation@@ ) -@@ > { assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); }
@org.junit.Test public void delete@@ I@@ s@@ Not@@ Sup@@ p@@ orted@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t@@ (java.lang.@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ation@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ De@@ le@@ te f@@ ro@@ m in@@ de@@ x not sup@@ p@@ orted@@ "); hand@@ l@@ er.@@ index@@ (@@ Account.@@ Id.@@ parse@@ ("@@ 3@@ 4@@ "), 4@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Account@@ Handler@@ (in@@ dex@@ er@@ Mo@@ ck@@ ); id = Account.@@ Id.@@ parse@@ ("@@ 1@@ 2@@ 3@@ "); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ () throw@@ s java.lang.Exception { do@@ An@@ sw@@ er@@ (((@@ org.@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) (@@ ( in@@ vo@@ c@@ ation@@ ) -@@ > { assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); }
@org.junit.Test public void delete@@ I@@ s@@ Not@@ Sup@@ p@@ orted@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t@@ (java.lang.@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ation@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ De@@ le@@ te f@@ ro@@ m in@@ de@@ x not sup@@ p@@ orted@@ "); hand@@ l@@ er.@@ index@@ (@@ Account@@ Group.@@ UUID@@ .@@ parse@@ ("@@ 3@@ 4@@ "), O@@ per@@ ation.@@ DE@@ LE@@ TE@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Group@@ Handler@@ (in@@ dex@@ er@@ Mo@@ ck@@ ); u@@ id = Account@@ Group.@@ UUID@@ .@@ parse@@ ("@@ 1@@ 2@@ 3@@ "); }
@org.junit.Test public void change@@ To@@ Do@@ Index@@ Not@@ Ex@@ ist@@ () throw@@ s java.lang.Exception { set@@ up@@ Change@@ Access@@ Rel@@ ated@@ Mo@@ ck@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Change@@ Handler@@ Test.@@ CHANG@@ E_@@ D@@ O@@ _@@ NO@@ T_@@ E@@ X@@ IS@@ T@@ ); hand@@ l@@ er.@@ index@@ (id@@ , O@@ per@@ ation.@@ IN@@ DE@@ X@@ ); ve@@ r@@ if@@ y(@@ index@@ er@@ Mo@@ ck@@ , ti@@ m@@ es@@ (1@@ )).@@ delete@@ (id@@ ); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ () throw@@ s java.lang.Exception { set@@ up@@ Change@@ Access@@ Rel@@ ated@@ Mo@@ ck@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Change@@ Handler@@ Test.@@ CHANG@@ E_@@ IS@@ T@@ S@@ ); do@@ An@@ sw@@ er@@ (((@@ org.@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ An@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) (@@ ( in@@ vo@@ c@@ ation@@ ) -@@ > { assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); } }@@ )@@ )).@@ wh@@ en@@ (in@@ dex@@ er@@ Mo@@ ck@@ ).@@ index@@ Mo@@ ck@@ , change@@ ); assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ F@@ alse@@ (); try { hand@@ l@@ er.@@ index@@ (id@@ , O@@ per@@ ation.@@ IN@@ DE@@ X@@ ); f@@ ail@@ ("@@ sh@@ o@@ ul@@ d h@@ av@@ e an IO@@ Exception@@ "); } catch (java.io.IOException e) { assert@@ Th@@ at(@@ e.get@@ Message@@ ()).@@ isEqualTo@@ ("@@ so@@ me@@ Message@@ "); } assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ F@@ alse@@ (); ve@@ r@@ if@@ y(@@ index@@ er@@ Mo@@ ck@@ , ti@@ m@@ es@@ (1@@ )).@@ index@@ (db@@ ); }
private void set@@ up@@ Change@@ Access@@ Rel@@ ated@@ Mo@@ ck@@ s@@ (@@ boolean change@@ Ex@@ ist@@ , boolean orm@@ Exception, boolean o@@ i@@ o@@ Exception@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ orm@@ Exception@@ ) { do@@ Throw@@ (@@ new com.google.gwtorm.server.Orm@@ Exception("@@ "@@ )).@@ wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ ck@@ ).@@ open@@ (); } else { wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ c@@ k.@@ open@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (db@@ Mo@@ ck@@ ); com.google.gerrit.reviewdb.server.@@ Change@@ Ac@@ ces@@ s c@@ a = mo@@ ck@@ (@@ com.google.gerrit.reviewdb.server.@@ Change@@ Access@@ .@@ class@@ ); wh@@ en@@ (db@@ Mo@@ c@@ k.@@ changes@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ a@@ ); if (change@@ Ex@@ ist@@ ) { wh@@ en@@ (c@@ a@@ .get(@@ id@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (change@@ ); if (@@ o@@ i@@ o@@ Exception@@ ) { do@@ Throw@@ (@@ new java.io.IO@@ Exception("@@ i@@ o@@ -@@ error@@ "@@ )).@@ wh@@ en@@ (in@@ dex@@ er@@ Mo@@ ck@@ ).@@ index@@ (db@@ Mo@@ ck@@ , change@@ ); } else { wh@@ en@@ (c@@ a@@ .get(@@ id@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ null@@ ); } } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ c@@ k.@@ open@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (db@@ Mo@@ ck@@ ); wh@@ en@@ (db@@ Mo@@ c@@ k.@@ changes@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (change@@ Access@@ Mo@@ ck@@ ); id = Change.@@ Id.@@ parse@@ ("@@ 1@@ 2@@ 3@@ "); change = new com.google.gerrit.reviewdb.client.Change@@ (@@ null@@ , id, null@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ Index@@ Change@@ Handler@@ (in@@ dex@@ er@@ Mo@@ ck@@ , schema@@ Factory@@ Mo@@ ck@@ ); }
@java.lang.Override protected void set@@ up@@ S@@ o@@ y@@ Context@@ () { super@@ .set@@ up@@ S@@ o@@ y@@ Context@@ (); java.lang.String project@@ Name = branch@@ .getParent@@ Key@@ ().get@@ (); so@@ y@@ Contex@@ t.@@ put("@@ project@@ Name@@ ", project@@ Name); so@@ y@@ Contex@@ t.@@ put(@@ "@@ short@@ Project@@ Name@@ ", project@@ Name.@@ replace@@ All@@ ("/@@ .@@ *@@ /@@ ", "@@ .@@ .@@ .@@ .@@ ")); java.lang.String pre@@ fi@@ x = "@@ "; if ((@@ args.@@ add@@ Instance@@ Name@@ In@@ Sub@@ ject@@ ) && ((@@ args.@@ instance@@ Name@@ Provider@@ ) != null@@ )) { pre@@ fi@@ x = (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ instance@@ Name@@ Provider@@ .get@@ ())) + "@@ /@@ "; } so@@ y@@ Contex@@ t.@@ put("@@ instance@@ And@@ Project@@ Name@@ ", (p@@ re@@ fi@@ x + (s@@ o@@ y@@ Context@@ .get(@@ "@@ short@@ Project@@ Name@@ )@@ "@@ )@@ ))); so@@ y@@ Context@@ Email@@ Dat@@ a.@@ put("@@ ssh@@ H@@ o@@ st@@ ", get@@ Ssh@@ H@@ o@@ st@@ ()); java.util.Map<java.lang.String, java.lang.String> branch@@ Data = new java.util.Hash@@ Map@@ <@@ >(); branch@@ Dat@@ a.@@ put(@@ "@@ short@@ Name@@ ", branch@@ .get@@ Sh@@ ort@@ Name()); so@@ y@@ Contex@@ t.@@ put("@@ branch@@ ", branch@@ Data@@ ); foo@@ ter@@ s.@@ add@@ (((@@ M@@ ail@@ Head@@ er.@@ P@@ RO@@ JEC@@ T@@ .@@ w@@ ith@@ De@@ li@@ mit@@ er@@ ()) + (@@ branch@@ .getParent@@ Key@@ ().get@@ ()))); foo@@ ter@@ s.@@ add@@ (("@@ Gerrit@@ -@@ Branch@@ : " + (@@ branch@@ .get@@ Sh@@ ort@@ Name@@ ()))); }
private java.lang.String get@@ Instance@@ Name(@@ org.eclipse.jgit.lib.@@ Config config@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.inject.@@ Provider@@ <java.lang.String> can@@ on@@ ical@@ Url@@ ) { java.lang.String instance@@ Name = config@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ short@@ Name@@ "); if ((@@ instance@@ Name != null@@ ) || (c@@ an@@ on@@ ical@@ Url@@ Provi@@ der == null@@ )) { return instance@@ Name@@ ; } return can@@ on@@ ical@@ Url@@ Provider@@ .get(); }
private java.lang.String get@@ Instance@@ Name@@ () { return com.google.common.base.@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (c@@ fg@@ .get@@ Name@@ (), "@@ gerrit@@ -@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (@@ .@@ .@@ .@@ .@@ .@@ .@@ .@@ class@@ Name@@ .get(); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) { if (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t w@@ or@@ k in pro@@ g@@ ress@@ "); } if ((@@ change@@ .getStatu@@ s()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ change is " + (com.google.gerrit.server.@@ Change@@ Util.@@ statu@@ s(@@ change@@ )@@ ))); } if (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is al@@ read@@ y w@@ or@@ k in pro@@ g@@ ress@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ true@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) { if (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t read@@ y review@@ "); } if ((@@ change@@ .getStatu@@ s()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ change is " + (com.google.gerrit.server.@@ Change@@ Util.@@ statu@@ s(@@ change@@ )@@ ))); } if (!(@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is not w@@ or@@ k in pro@@ g@@ ress@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ false@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); } }
protected <@@ T> org.@@ el@@ as@@ ti@@ c@@ search@@ .@@ index.@@ Query@@ Builder to@@ Query@@ Builder@@ (com.google.gerrit.server.query.@@ Predicate@@ <@@ T> p@@ ) throw@@ s com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception { if (@@ p instanceof com.google.gerrit.server.query.@@ And@@ Predicate@@ ) { return an@@ d(@@ p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Or@@ Predicate@@ ) { return or@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Not@@ Predicate@@ ) { return not@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.index.@@ Index@@ Predicate@@ ) { return fi@@ el@@ d@@ Query@@ ((@@ (com.google.gerrit.server.@@ index.@@ Index@@ Predicate@@ <@@ T@@ >@@ ) (p@@ ))); } else if (@@ p instanceof com.google.gerrit.server.query.@@ An@@ y@@ Predicate@@ ) { return org.@@ el@@ as@@ ti@@ c@@ search@@ .@@ query.@@ query.@@ Query@@ Builder@@ s.@@ match@@ All@@ Query@@ (); } else { throw new com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception(("@@ can@@ not cre@@ ate quer@@ y for index@@ : " + p@@ )); } }
public org.apache.@@ lucene.@@ search@@ .@@ Quer@@ y to@@ Quer@@ y(@@ com.google.gerrit.server.query.@@ Predicate@@ <@@ V@@ > p@@ ) throw@@ s com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception { if (@@ p instanceof com.google.gerrit.server.query.@@ And@@ Predicate@@ ) { return an@@ d(@@ p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Or@@ Predicate@@ ) { return or@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Not@@ Predicate@@ ) { return not@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.index.@@ Index@@ Predicate@@ ) { return fi@@ el@@ d@@ Query@@ ((@@ (com.google.gerrit.server.@@ index.@@ Index@@ Predicate@@ <@@ V@@ >@@ ) (p@@ ))); } else if (@@ p instanceof com.google.gerrit.server.query.@@ An@@ y@@ Predicate@@ ) { return new org.apache.@@ lucene.@@ search@@ .@@ Match@@ All@@ Doc@@ s@@ Query@@ (); } else { throw new com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception(("@@ can@@ not cre@@ ate quer@@ y for index@@ : " + p@@ )); } }
@java.lang.Override public boolean match@@ (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ State@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.@@ Predicate@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > pre@@ d = get@@ Ch@@ il@@ d(@@ 0); check@@ State@@ (p@@ re@@ d.@@ is@@ Match@@ able@@ (), ("@@ m@@ atch in@@ vo@@ k@@ ed@@ , bu@@ t ch@@ il@@ d pre@@ di@@ c@@ ate %s " + "@@ do@@ es@@ n@@ '@@ t i@@ mp@@ le@@ ment %s@@ "), p@@ red@@ , com.google.gerrit.server.query.@@ Match@@ able@@ .@@ class@@ .getName@@ ()); return pre@@ d.@@ as@@ Match@@ able@@ ().@@ match@@ (account@@ State@@ ); }
private boolean can@@ Read@@ (@@ org.eclipse.jgit.lib.ObjectId rev@@ Id@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get(@@ project@@ Name); check@@ Not@@ Null@@ (project@@ , "@@ Fai@@ le@@ d to lo@@ ad project %s", project@@ Name); check@@ State@@ Per@@ mit@@ s@@ Read@@ (); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ Name@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ RE@@ AD@@ ); return true@@ ; }
@org.junit.Test public void check@@ Ma@@ x@@ W@@ ork@@ s() { com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ Label@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); }
private static void check@@ Label@@ I@@ s@@ Requ@@ i@@ re@@ d(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , com.google.common.collect.Immutable@@ List.@@ of@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isNull@@ (); }
private static void check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ d(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 0); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ); }
@org.junit.Test public void check@@ Ma@@ x@@ No@@ Block@@ I@@ g@@ no@@ res@@ M@@ in@@ () { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ M@@ 2); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ .@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ OK@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2@@ .getAccount@@ Id()); }
private static com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l ma@@ k@@ e@@ Approval@@ (@@ short valu@@ e) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ ((@@ 1@@ 00@@ 0@@ 0 + value@@ )); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l.@@ Key k@@ ey = com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ ma@@ k@@ e@@ Key@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ P@@ S_@@ ID@@ , account@@ Id, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ L@@ AB@@ E@@ L@@ _@@ ID@@ ); return new com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ (key@@ , value@@ , java.sql.@@ Dat@@ e.@@ from@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ ())); }
@org.junit.Test public void check@@ Label@@ Name@@ I@@ s@@ C@@ re@@ ct@@ () { for (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion : com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion.@@ values@@ ()) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , java.util.Collections.@@ empty@@ List@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ label@@ ).@@ isEqualTo@@ ("@@ V@@ er@@ if@@ i@@ ed@@ "); } }
@org.junit.Test public void check@@ F@@ unc@@ tion@@ Do@@ es@@ No@@ th@@ ing@@ () { com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ ist@@ s(@@ Label@@ F@@ unc@@ tion.@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ _@@ H@@ ist@@ ory@@ Label@@ s(@@ _@@ NO@@ _@@ O@@ P@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ ER@@ s(@@ Label@@ F@@ unc@@ tion.@@ P@@ AT@@ CH@@ _S@@ E@@ T_@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ Test.@@ check@@ Label@@ I@@ s@@ Requ@@ i@@ re@@ d(@@ F@@ unc@@ tion.@@ AN@@ Y_@@ W@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ Test.@@ check@@ Label@@ I@@ s@@ Requ@@ i@@ re@@ d(@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ Test.@@ check@@ Label@@ s(@@ re@@ st@@ Test.@@ check@@ Label@@ s@@ Requ@@ i@@ re@@ d(@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); }
private static void check@@ Block@@ W@@ ork@@ s(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ M@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ RE@@ JEC@@ T@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ M@@ 2@@ .getAccount@@ Id()); }
public boolean is@@ Ma@@ x@@ Value@@ M@@ an@@ dator@@ y@@ () { return requ@@ i@@ res@@ Ma@@ x@@ Value@@ ; }
public Submit@@ Recor@@ d.@@ L@@ abe@@ l check@@ (@@ com.google.gerrit.common.data.@@ Label@@ Type t@@ , java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l l l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); l.@@ l@@ abe@@ l = t@@ .getName@@ (); l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ; if (@@ is@@ M@@ an@@ dator@@ y@@ ) { l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ; } for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s) { if ((@@ a@@ .getValue@@ ()) == 0) { continue@@ ; } if ((@@ is@@ Block@@ ) && (@@ t.@@ is@@ Ma@@ x@@ N@@ e@@ g@@ ative@@ (@@ a@@ ))) { ap@@ pli@@ ed@@ B@@ y = a@@ .getAccount@@ Id(); l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ RE@@ JEC@@ T@@ ; return l@@ ; } if ((@@ t.@@ is@@ Ma@@ x@@ Po@@ si@@ tive@@ (@@ a@@ )) || (!(@@ requ@@ i@@ res@@ Ma@@ x@@ Value@@ ))) { l.@@ ap@@ pli@@ ed@@ B@@ y = a@@ .getAccount@@ Id(); l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ; if (@@ is@@ M@@ an@@ dator@@ y@@ ) { l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ OK@@ ; } } return l@@ ; }
public boolean is@@ M@@ an@@ dator@@ y@@ () { return (@@ isE@@ dit@@ able@@ ) && (@@ is@@ M@@ an@@ dator@@ y@@ ; }
private void check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ M@@ 1); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ OK@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ AP@@ P@@ RO@@ V@@ AL@@ _@@ 2@@ .getAccount@@ Id()); }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > get@@ Approval@@ s@@ For@@ Label@@ (@@ java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s, com.google.gerrit.common.data.@@ Label@@ Type t@@ ) { return approval@@ s.@@ stream@@ ().@@ filter@@ (@@ ( input@@ ) -@@ > input@@ .get@@ Label@@ ().equals(@@ t@@ .get@@ Label@@ Id@@ ().get@@ ()@@ )).@@ collec@@ t(@@ java.util.@@ stream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); }
private static void check@@ No@@ th@@ ing@@ H@@ ist@@ s(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , com.google.common.collect.Immutable@@ List.@@ of@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isNull@@ (); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Description@@ ().set@@ Label@@ ("@@ Star@@ t ").@@ set@@ T@@ it@@ le@@ ("@@ Set Read@@ y Fo@@ r Review@@ ").@@ setVisible@@ (@@ and@@ ((((@@ rsrc@@ .getChange@@ ().get@@ Statu@@ s()) == (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) && (rsrc@@ .getChange@@ ().@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()@@ )), or@@ (r@@ sr@@ c.@@ is@@ User@@ Owner@@ (), per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ Con@@ d(@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ )@@ ))); }
@java.lang.Override public com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { return new com.google.gerrit.server.@@ re@@ stapi.@@ change.@@ Description@@ ().set@@ Label@@ ("@@ W@@ I@@ P@@ ").@@ set@@ T@@ it@@ le@@ ("@@ Set W@@ or@@ k I@@ n Pro@@ g@@ ress@@ ").@@ setVisible@@ (@@ and@@ ((((@@ rsrc@@ .getChange@@ ().get@@ Statu@@ s()) == (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) && (!(@@ rsrc@@ .getChange@@ ().@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()@@ )@@ )), (r@@ sr@@ c.@@ is@@ User@@ Owner@@ (), per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ Con@@ d(@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ )@@ ))); }
private boolean sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (@@ final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref@@ , com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ State.@@ .@@ . st@@ at@@ es) { try { return th@@ read@@ S@@ cop@@ er.@@ s@@ cop@@ e@@ (@@ new java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ >() { @java.lang.Override public java.lang.@@ B@@ oolean call@@ () throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (@@ IO@@ Exception e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } if (!(@@ project@@ State.@@ state@@ Per@@ mit@@ Read@@ ())) { return false@@ ; } if (!(@@ sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ State@@ , user@@ Provider@@ .get@@ ()))) { return false@@ ; } if (@@ PushOne@@ .@@ AL@@ L@@ _@@ RE@@ F@@ S@@ .equals(@@ ref@@ )) { return true@@ ; } try { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ project@@ (project@@ ).@@ ref@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ Auth@@ Exception e) { return false@@ ; } return true@@ ; } }@@ ).@@ call@@ (); } catch (com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception err@@ ) { state@@ Lo@@ g.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ s@@ our@@ ce project %s not avail@@ able@@ ", project@@ ), err@@ , st@@ at@@ es@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (@@ e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } return false@@ ; }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ () throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { com.google.gerrit.server.project.Project@@ State project@@ State@@ ; try { project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (@@ IO@@ Exception e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } if (!(@@ project@@ State.@@ state@@ Per@@ mit@@ Read@@ ())) { return false@@ ; } if (!(@@ sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ State@@ , user@@ Provider@@ .get@@ ()))) { return false@@ ; } if (@@ PushOne@@ .@@ AL@@ L@@ _@@ RE@@ F@@ S@@ .equals(@@ ref@@ )) { return true@@ ; } try { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ project@@ (project@@ ).@@ ref@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ Auth@@ Exception e) { return false@@ ; } return true@@ ; }
private void post@@ De@@ le@@ tion@@ (com.google.gerrit.server.project.@@ Project@@ Resource project, org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d) { ref@@ eren@@ ce@@ Updated@@ .@@ fi@@ re@@ (project@@ .getName@@ Key@@ (), cm@@ d, current@@ User@@ .get().@@ state@@ ()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if ((!@@ (r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ )))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t w@@ or@@ k in pro@@ g@@ ress@@ "); } if ((@@ change@@ .getStatu@@ s()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(("@@ change is " + (com.google.gerrit.server.@@ Change@@ Util.@@ statu@@ s(@@ change@@ )@@ ))); } if (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is al@@ read@@ y w@@ or@@ k in pro@@ g@@ ress@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ true@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ ("@@ "); } }
public java.lang.String create@@ () { java.lang.String su@@ mm@@ ary@@ Lin@@ e = (@@ ori@@ gin@@ al@@ Group.@@ is@@ P@@ res@@ ent@@ ()) ? "@@ Update group@@ " : "@@ Cre@@ ate group@@ "; java.util.List<java.lang.String> foo@@ ter@@ s = new java.util.ArrayList<@@ >(); get@@ F@@ oo@@ ter@@ For@@ R@@ en@@ ame@@ ()@@ .@@ if@@ P@@ res@@ ent@@ (@@ foo@@ ter@@ s@@ :@@ add@@ ); get@@ F@@ oo@@ ter@@ s@@ For@@ Member@@ Mo@@ d@@ if@@ ic@@ ation@@ s@@ ()@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ s@@ :@@ add@@ ); get@@ F@@ oo@@ ter@@ For@@ Sub@@ group@@ Mo@@ d@@ if@@ ic@@ ation@@ s@@ ()@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ :@@ add@@ ); java.util.Collections.s@@ ort@@ (@@ foo@@ ter@@ s); java.util.@@ String@@ J@@ o@@ in@@ er foo@@ ter@@ J@@ o@@ in@@ er = new java.util.@@ String@@ J@@ o@@ in@@ er@@ ("@@ \n@@ ", "@@ \n@@ ", "@@ foo@@ ter@@ J@@ o@@ in@@ er.@@ set@@ Value@@ ("@@ foo@@ ter@@ "); o@@ in@@ er.@@ set@@ Value@@ ("@@ foo@@ ter@@ s@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ J@@ o@@ in@@ :@@ add@@ ); java.lang.String foo@@ ter = foo@@ ter@@ J@@ o@@ in@@ er.@@ toString@@ (); return su@@ mm@@ ary@@ Lin@@ e + foo@@ ter@@ ; }
private boolean is@@ Change@@ De@@ le@@ table@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Statu@@ s statu@@ s) { switch (@@ statu@@ s) { case N@@ E@@ W : case AB@@ AN@@ D@@ ON@@ E@@ D : return true@@ ; case M@@ ER@@ G@@ E@@ D : return false@@ ; } return false@@ ; }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { com.google.gerrit.reviewdb.client.Change.@@ Statu@@ s statu@@ s = rsrc@@ .getChange@@ ().get@@ Statu@@ s(); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Change per@@ m = r@@ sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ ); return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ Delete@@ ").@@ set@@ T@@ it@@ le@@ (("@@ De@@ le@@ te change " + (rsrc@@ .getId@@ ()@@ )@@ )).@@ setVisible@@ (@@ an@@ d(@@ is@@ Change@@ De@@ le@@ table@@ (@@ status@@ ), per@@ m.@@ test@@ Con@@ d(@@ Change@@ Permission@@ .@@ DE@@ LE@@ TE@@ ))); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!(@@ is@@ Change@@ De@@ le@@ table@@ (rsrc@@ .getChange@@ ().get@@ Statu@@ s@@ ()))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ de@@ le@@ te not per@@ mit@@ ted@@ "); } r@@ sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.reviewdb.client.Change.@@ Id id = rsrc@@ .getChange@@ ().get@@ Id(); bu@@ .set@@ Or@@ der@@ (@@ Or@@ der.@@ D@@ B@@ _@@ B@@ E@@ F@@ O@@ RE@@ _@@ RE@@ P@@ O@@ ); bu@@ .@@ add@@ Op@@ (id@@ , op@@ Provider@@ .get()); bu@@ .@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@@@ com.google.gerrit.common.@@ Null@@ able private com.google.gerrit.server.project.Project@@ Resource _@@ parse@@ (java.lang.String id, boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (id@@ .@@ end@@ sWith@@ (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ )) { id = id@@ .@@ substring@@ (@@ 0, ((@@ id@@ .@@ length@@ ()) - (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ .@@ length@@ ()))); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (id@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { return null@@ ; } if (@@ check@@ Access@@ ) { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ per@@ mission@@ To@@ Check@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return null@@ ; } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ W@@ R@@ I@@ TE@@ _@@ CON@@ FI@@ G@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { st@@ ate.@@ check@@ State@@ Per@@ mit@@ s@@ Read@@ (); } } return new com.google.gerrit.server.project.Project@@ Resource@@ (@@ state@@ , user@@ .get()); }
private com.google.gerrit.server.project.Project@@ State check@@ Project@@ State@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ Name); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ s@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ Name@@ ).@@ check@@ (@@ per@@ mission@@ To@@ Check@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ Name); } st@@ ate.@@ check@@ State@@ Per@@ mit@@ s@@ Read@@ (); return state@@ ; }
@java.lang.Override public final int parse@@ Argument@@ s(@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ sp@@ i.@@ Parameter@@ s par@@ am@@ s) throw@@ s org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception { java.lang.String project@@ Name = par@@ am@@ s.get@@ Parameter@@ (@@ 0); while (project@@ Name.@@ end@@ sWith@@ ("/@@ ")) { project@@ Name = project@@ Name.@@ substring@@ (@@ 0, ((@@ project@@ Name.@@ length@@ ()) - 1@@ )); } while (project@@ Name.@@ startsWith@@ ("/@@ ")) { project@@ Name = project@@ Name.@@ substring@@ (1); } java.lang.String name@@ With@@ out@@ Su@@ f@@ fi@@ x = com.google.gerrit.common.@@ Project@@ Util.@@ st@@ ri@@ p@@ Git@@ Su@@ f@@ fix@@ (project@@ Name); com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ name@@ With@@ out@@ Su@@ f@@ fix@@ ); com.google.gerrit.server.project.Project@@ State state@@ ; try { st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ project %s not fo@@ und@@ ", name@@ With@@ out@@ Su@@ f@@ fix@@ )); } com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ s@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ per@@ mission@@ To@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name@@ Key@@ ).get@@ Message()); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception | java.io.IOException e) { com.google.gerrit.server.@@ arg@@ s@@ 4@@ j@@ .@@ Project@@ Handl@@ er.@@ log.warn@@ (("@@ Cannot lo@@ ad project " + name@@ With@@ out@@ Su@@ f@@ fix@@ ), e); throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name@@ Key@@ ).get@@ Message()); } set@@ ter.@@ add@@ Value@@ (@@ state@@ ); return 1; }
public static com.google.common.@@ cache.@@ Cache@@ Builder@@ <@@ java.lang.O@@ bject@@ , java.lang.O@@ bject@@ > get@@ Cache@@ Builder@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String name@@ ) { com.google.common.@@ cache.@@ Cache@@ Builder@@ <@@ java.lang.O@@ bject@@ , java.lang.O@@ bject@@ > b = com.google.common.@@ cache.@@ Cache@@ Builder@@ .@@ new@@ Builder@@ (); try { if ((@@ config@@ .get@@ String@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ W@@ eight@@ ")) != null@@ ) { b.@@ max@@ i@@ m@@ um@@ W@@ eight@@ (@@ config@@ .get@@ L@@ on@@ g@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ W@@ eight@@ ", (@@ 2@@ 0 <@@ < 2@@ 0@@ ))); } if ((@@ config@@ .get@@ String@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ Size@@ ")) != null@@ ) { b.@@ max@@ i@@ m@@ um@@ Size@@ (@@ config@@ .get@@ L@@ on@@ g@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ Size@@ ", 1@@ 6@@ 3@@ 8@@ 4@@ )); } java.lang.@@ L@@ on@@ g exp@@ i@@ re@@ After@@ Wri@@ te = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ cach@@ e@@ ", name, "@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ ", null@@ ); if (@@ exp@@ i@@ re@@ After@@ Wri@@ te != null@@ ) { b.@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ (@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } java.lang.@@ L@@ on@@ g exp@@ i@@ re@@ After@@ Ac@@ ces@@ s = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ cach@@ e@@ ", name, "@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ ", null@@ ); if (@@ exp@@ i@@ re@@ After@@ Ac@@ ces@@ s != null@@ ) { b.@@ exp@@ i@@ re@@ After@@ Ac@@ cess(@@ exp@@ i@@ re@@ After@@ Access@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); } } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception(("@@ E@@ rror get@@ t@@ ing for " + name@@ ), e); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(("@@ E@@ rror get@@ Cache@@ Builder for " + name@@ ), e); } return b@@ ; }
@@@ javax.@@ annot@@ ation.@@ Null@@ able public static java.lang.@@ L@@ on@@ g get@@ D@@ ur@@ ation@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String name, @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.@@ L@@ on@@ g default@@ Value@@ ) { long m = config@@ .get@@ Time@@ Un@@ it@@ (s@@ ection@@ , sub@@ s@@ ection@@ , name, -@@ 1@@ ), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); if (@@ m != (@@ -@@ 1@@ )) { return m@@ ; } return default@@ Value@@ ; }
@org.junit.Test public void null@@ As@@ Default@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); java.lang.@@ L@@ on@@ g t@@ ; t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", "@@ "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", " "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); }
@org.junit.Test public void get@@ D@@ ur@@ ation@@ Can@@ Ret@@ ur@@ n@@ Default@@ () throw@@ s java.lang.Exception { java.lang.@@ L@@ on@@ g de@@ f = 1@@ 00@@ 0@@ L@@ ; org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); java.lang.@@ L@@ on@@ g t@@ ; t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", "@@ "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", " "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); }
@org.junit.Test public void get@@ D@@ ur@@ ation@@ Ret@@ ur@@ n@@ s@@ D@@ ur@@ ation@@ () throw@@ s java.lang.Exception { java.lang.@@ L@@ on@@ g de@@ f = 2 * 1@@ 00@@ 0@@ L@@ ; org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); java.lang.@@ L@@ on@@ g t@@ ; config.@@ set@@ String@@ ("@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ 5@@ 0@@ 0 ms@@ "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo(@@ 5@@ 00@@ ); config.@@ set@@ String@@ ("@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ 5@@ .@@ 2 s@@ ec@@ "); try { com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", de@@ f@@ ); f@@ ail@@ ("@@ exp@@ ected I@@ l@@ leg@@ al@@ Argument@@ Exception@@ "); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { assert@@ Th@@ at(@@ e@@ ).@@ has@@ Message@@ Th@@ at@@ ().@@ isEqualTo@@ ("@@ In@@ vali@@ d ti@@ m@@ e un@@ it value@@ : core@@ .@@ d@@ h@@ t.@@ time@@ out@@ =@@ 5@@ .@@ 2 s@@ ec@@ "); } config.@@ set@@ String@@ ("@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ 1 min@@ "); t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo(@@ 6@@ 00@@ 00@@ ); }
void vali@@ date@@ Changes@@ (com.google.gerrit.server.git.@@ Project@@ Config config@@ , java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > remo@@ va@@ l@@ s, java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > ad@@ di@@ tion@@ s) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Name@@ Exception, com.google.gerrit.extensions.restapi.BadRequest@@ Exception { for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion : com.google.common.collect.I@@ terable@@ s.@@ con@@ c@@ at(@@ ad@@ di@@ tion@@ s, remo@@ va@@ l@@ s@@ )) { boolean is@@ G@@ lobal@@ Capabili@@ ti@@ es = Access@@ Sec@@ tion.@@ G@@ LO@@ B@@ AL@@ _@@ C@@ AP@@ AB@@ IL@@ IT@@ I@@ ES@@ .equals(@@ s@@ ection@@ .getName@@ ()); if (@@ is@@ G@@ lobal@@ Capabili@@ ti@@ es) { if (!(@@ all@@ Project@@ s.@@ equals(@@ config@@ .getName@@ ()))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception(("@@ Cannot ed@@ it g@@ lob@@ al c@@ ap@@ abili@@ ti@@ es for project@@ s oth@@ er th@@ an " + (@@ all@@ Project@@ s.get@@ ()))); } } for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion : ad@@ di@@ tion@@ s) { java.lang.String name = s@@ ection@@ .getName@@ (); boolean is@@ G@@ lobal@@ Capabili@@ ti@@ es = Access@@ Sec@@ tion.@@ G@@ LO@@ B@@ AL@@ _@@ C@@ AP@@ AB@@ IL@@ IT@@ I@@ ES@@ .equals(@@ name); if (!@@ is@@ G@@ lobal@@ Capabili@@ ti@@ es) { if (!(@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion.@@ is@@ Vali@@ d(@@ name@@ ))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception("@@ in@@ vali@@ d s@@ ec@@ tion name@@ "); } com.google.gerrit.server.project.@@ Ref@@ Pat@@ tern@@ .@@ vali@@ date@@ (@@ name); } else { java.util.@@ Set@@ <java.lang.String> plugin@@ Capabili@@ ti@@ es = list@@ Capabili@@ ti@@ es.@@ collec@@ t@@ Plugin@@ Capabili@@ ti@@ es().@@ key@@ Set@@ (); for (@@ com.google.gerrit.common.data.@@ Per@@ mis@@ sion p : s@@ ection@@ .get@@ Permission@@ s()) { if (!@@ ((@@ com.google.gerrit.common.data.@@ G@@ lobal@@ Capabili@@ ty.@@ is@@ G@@ lobal@@ Capabili@@ ty(@@ p@@ .getName@@ ())) || (@@ plugin@@ Capabili@@ ti@@ es.@@ contains(@@ p@@ .getName@@ ()@@ )))) { throw new com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ ((("@@ Cannot ad@@ d n@@ on@@ -@@ g@@ lob@@ al c@@ ap@@ abili@@ t@@ y " + (p@@ .getName@@ ())) + " to g@@ lob@@ al c@@ ap@@ abili@@ ti@@ es@@ ")); } } } }
static java.lang.String get@@ Sh@@ ort@@ Project@@ Name@@ (java.lang.String project@@ Name) { int last@@ Index@@ S@@ las@@ h = project@@ Name.@@ last@@ Index@@ Of@@ ("/@@ "); if (@@ last@@ Index@@ S@@ las@@ h == 0) { return project@@ Name.@@ substring@@ (1); } return "@@ .@@ " + (project@@ Name.@@ substring@@ ((@@ last@@ Index@@ S@@ las@@ h + 1@@ ))); }
@org.junit.Test public void edit@@ Can@@ not@@ Be@@ Cre@@ ated@@ On@@ Ab@@ an@@ do@@ ned@@ Change@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change = gApi.changes().id(@@ changeId@@ ).get@@ (); gApi.changes().id(@@ changeId@@ ).@@ ab@@ an@@ do@@ n@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s is AB@@ AN@@ D@@ ON@@ ED@@ ", change.@@ _@@ n@@ umber@@ )); create@@ Ar@@ it@@ r@@ ary@@ Edit@@ For@@ (change@@ Id); }
private void assert@@ Can@@ Edit@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (!@@ (c@@ urrent@@ User@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); if (!@@ (change@@ .getStatu@@ s().@@ is@@ Open@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s is %s", change@@ .getChange@@ Id(), change@@ .getStatu@@ s@@ ())); } try { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ dat@@ abase@@ (@@ review@@ Db@@ ).@@ change@@ (@@ notes@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (@@ notes@@ .getProject@@ Name@@ ()).@@ check@@ State@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ ed@@ it not per@@ mit@@ ted@@ ", d@@ en@@ i@@ ed@@ ); } }
@org.junit.Test public void edit@@ Can@@ not@@ Be@@ Cre@@ ated@@ On@@ Change@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change = gApi.changes().id(@@ changeId@@ ).get@@ (); gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ submit@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s is M@@ ER@@ G@@ ED@@ ", change.@@ _@@ n@@ umber@@ )); create@@ Ar@@ b@@ it@@ r@@ ary@@ Edit@@ For@@ (change@@ Id); }
@java.lang.Override public boolean delete@@ Change@@ From@@ Index@@ (@@ final int changeId@@ ) { return new com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Rest@@ For@@ war@@ der.@@ Request@@ ("@@ de@@ le@@ te f@@ ro@@ m in@@ de@@ x change ", changeId@@ ) { @java.lang.Override com.ericsson.gerrit.plugins.@@ high@@ avail@@ abili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Http@@ Respon@@ se@@ Handl@@ er.@@ Http@@ Result sen@@ d(@@ ) throw@@ s java.io.IOException { return http@@ Session@@ .@@ delete@@ (@@ bu@@ ild@@ Index@@ En@@ d@@ p@@ o@@ int@@ (change@@ Id@@ )); } }@@ .@@ execute@@ (); }
@org.junit.Test public void st@@ o@@ red@@ Submit@@ Recor@@ d@@ sWith@@ Requ@@ i@@ re@@ ment@@ s() { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d r = com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ re@@ cor@@ d(@@ Submit@@ Recor@@ d.@@ Status.@@ OK@@ , com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ label@@ (@@ Submit@@ Recor@@ d.@@ Status.@@ M@@ A@@ Y@@ , "@@ Label@@ -@@ 1@@ ", null@@ ), com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ label@@ (@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ OK@@ , "@@ Label@@ -@@ 2@@ ", 1@@ )); com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment r = new com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ ("@@ F@@ all@@ b@@ ac@@ k t@@ ex@@ t c@@ an b@@ e a long st@@ rin@@ g w@@ it@@ h sp@@ ec@@ i@@ al sy@@ m@@ bo@@ l@@ li@@ k@@ e < \@@ \@@ \@@ \@@ \@@ \@@ \@@ \@@ \@@ \@@ \@@ \@@ ", "@@ short@@ _@@ type@@ ", com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ c@@ u@@ st@@ o@@ m@@ _@@ dat@@ a@@ ", "@@ m@@ y value@@ ")); r.@@ requ@@ i@@ re@@ s = java.util.Collections.singleton@@ List(@@ sr@@ ); com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test@@ Fiel@@ d@@ .@@ assert@@ St@@ o@@ red@@ Recor@@ d@@ R@@ o@@ und@@ T@@ ri@@ p@@ (r@@ ); }
private com.google.gerrit.common.data.@@ Submit@@ Recor@@ d to@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = statu@@ s; re@@ c.@@ error@@ Messag@@ e = error@@ Message@@ ; if ((@@ label@@ s) != null@@ ) { re@@ c.@@ label@@ s = new java.util.Array@@ List(@@ label@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ L@@ abe@@ l l@@ abe@@ l : label@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l sr@@ l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); sr@@ l.@@ l@@ abe@@ l = l@@ abe@@ l.@@ label@@ ; sr@@ l.@@ statu@@ s = l@@ abe@@ l.@@ statu@@ s; sr@@ l.@@ ap@@ pli@@ ed@@ B@@ y = ((@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) ? new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) : null@@ ; re@@ c.@@ label@@ s.add(@@ sr@@ l@@ ); } } if ((@@ requ@@ i@@ re@@ ment@@ s) != null@@ ) { re@@ c.@@ requ@@ i@@ re@@ s = new java.util.Array@@ List@@ (re@@ qu@@ i@@ re@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Requ@@ i@@ re@@ q : requ@@ i@@ ment@@ s) { if ((@@ req@@ .@@ f@@ allback@@ ) == null@@ ) { continue@@ ; } com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ s@@ ment r = new com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ (req@@ .@@ f@@ allback@@ , req@@ .@@ type@@ , req@@ .@@ dat@@ a@@ ); re@@ c.@@ requ@@ i@@ re@@ s.add(@@ sr@@ ); } } } return rec@@ ; }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if (@@ this@@ ) == o@@ ) { return true@@ ; } if (!(@@ o instanceof com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ )) { return false@@ ; } com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment th@@ a@@ t = ((@@ com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ ) (@@ o@@ )); return ((@@ java.util.@@ Object@@ s.@@ equals(@@ f@@ allback@@ Text@@ , th@@ a@@ t.@@ f@@ allback@@ )) && (@@ java.util.@@ Object@@ s.@@ equals(@@ type@@ , th@@ a@@ t.@@ type@@ ))) && (@@ java.util.@@ Object@@ s.@@ equals(@@ dat@@ a@@ , th@@ a@@ t.@@ dat@@ a@@ )); }
public java.util.Map<java.lang.String, java.lang.String> dat@@ a@@ () { return dat@@ a@@ ; }
public java.lang.String f@@ allback@@ Text@@ () { return f@@ Text@@ ; }
@java.lang.Override public java.lang.String toString@@ () { return get@@ Text@@ ().@@ toString@@ (); }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.util.@@ Object@@ s.@@ has@@ h@@ (@@ f@@ Text@@ , type@@ , dat@@ a@@ ); }
public java.lang.String type@@ () { return type@@ ; }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { try { if (@@ ver@@ sion@@ Manager.@@ is@@ K@@ no@@ w@@ n@@ Index@@ (@@ name@@ )) { if (@@ ver@@ sion@@ Manager.@@ start@@ Re@@ index@@ er@@ (@@ name, for@@ ce@@ )) { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Re@@ index@@ er star@@ ted@@ "); } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ No@@ th@@ ing to re@@ index@@ , in@@ de@@ x is al@@ read@@ y th@@ e at@@ est ver@@ sion@@ "); } } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Cannot re@@ index@@ , in@@ de@@ x unk@@ no@@ w@@ n this name@@ "); } } catch (com.google.gerrit.server.@@ index.@@ Re@@ index@@ er@@ Al@@ read@@ y@@ Runn@@ ing@@ Exception e) { throw di@@ e@@ (("@@ Fai@@ le@@ d to star@@ t re@@ index@@ er@@ : " + (@@ e.get@@ Message@@ ()))); } }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { try { if (@@ ver@@ sion@@ Manager.@@ is@@ K@@ no@@ w@@ n@@ Index@@ (@@ name@@ )) { if (@@ ver@@ sion@@ Manager.@@ ac@@ ti@@ v@@ ate@@ L@@ at@@ est@@ Index@@ (@@ name@@ )) { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Ac@@ ti@@ v@@ ate@@ d l@@ at@@ est in@@ de@@ x ver@@ sion@@ "); } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ No@@ t ac@@ ti@@ v@@ at@@ ing index@@ , al@@ read@@ y us@@ ing l@@ at@@ est ver@@ sion@@ "); } } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Cannot ac@@ ti@@ v@@ ate index@@ , unk@@ no@@ w@@ n base@@ d on this name@@ "); } } catch (com.google.gerrit.server.@@ index.@@ Re@@ index@@ er@@ Al@@ read@@ y@@ Runn@@ ing@@ Exception e) { throw di@@ e@@ (("@@ Fai@@ le@@ d to ac@@ ti@@ v@@ ate l@@ at@@ est : " + (@@ e.get@@ Message@@ ()))); } }
public com.google.gerrit.extensions.restapi.Respon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String user@@ Name = user@@ .getUser@@ Name@@ ().@@ or@@ E@@ l@@ se@@ ) ((@@ -@@ > new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ ")); java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > o@@ ption@@ al@@ Ex@@ t@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ External@@ Id.@@ Key@@ .@@ create@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ Name@@ )); if (!(@@ o@@ ption@@ al@@ Ex@@ t@@ Id.@@ is@@ P@@ res@@ ent@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = o@@ ption@@ al@@ Ex@@ t@@ Id@@ .get(); account@@ s@@ Update@@ Provider@@ .get().@@ update@@ ("@@ H@@ T@@ P P@@ asswor@@ d vi@@ a AP@@ I@@ ", ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ create@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id.@@ create@@ With@@ P@@ asswor@@ d(@@ ext@@ Id.@@ key@@ (), ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ email@@ (), new@@ P@@ asswor@@ d@@ ))); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d) ? com.google.gerrit.extensions.restapi.Respon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Respon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@org.junit.Test public void ra@@ w@@ Doc@@ ument@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Account@@ Info user@@ Info = gApi.@@ account@@ s().@@ id(@@ admin@@ .getAccount@@ Id@@ ().get@@ ()@@ ).get@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.@@ index.@@ Fiel@@ d@@ B@@ und@@ le@@ > ra@@ w@@ Fiel@@ d@@ s = index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ R@@ a@@ w@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (user@@ Info.@@ _@@ account@@ Id@@ ), com.google.gerrit.@@ index.@@ Query@@ Option@@ s.@@ create(@@ com.google.gerrit.@@ index.@@ Index@@ Config.@@ create@@ Default@@ (), 0, 1, index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ Schema@@ ().get@@ St@@ o@@ red@@ Fiel@@ d@@ s().@@ key@@ Set@@ ())); assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s).@@ is@@ P@@ res@@ ent@@ (); assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s.get@@ ().get@@ Value@@ (@@ Account@@ Fiel@@ d.@@ ID@@ )).@@ isEqualTo@@ (user@@ Info.@@ _@@ account@@ Id); if ((@@ get@@ Schema@@ Version@@ ()) < 6@@ ) { return@@ ; } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> ext@@ er@@ n@@ al@@ Id@@ Info@@ s = gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.server.query.@@ account.@@ Ab@@ str@@ act@@ Query@@ Account@@ s@@ Test.@@ te@@ Array@@ W@@ rap@@ per@@ > b@@ lob@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo : ext@@ er@@ n@@ al@@ Id@@ Info@@ s) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ External@@ Id.@@ Key@@ .@@ parse@@ (info.@@ id@@ enti@@ ty@@ )); assert@@ Th@@ at(@@ ext@@ Id.@@ is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); b@@ lob@@ s.@@ add@@ (@@ new com.google.gerrit.server.query.@@ account.@@ Ab@@ str@@ act@@ Query@@ Account@@ s@@ Test.@@ By@@ te@@ Array@@ W@@ rap@@ per@@ (@@ ext@@ Id@@ .get().@@ to@@ By@@ te@@ Array@@ ())); } assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s.get@@ ().get@@ Value@@ (@@ Account@@ Fiel@@ d.@@ E@@ X@@ T@@ ER@@ N@@ AL@@ _@@ ID@@ _S@@ T@@ A@@ TE@@ )).@@ hasSize@@ (@@ b@@ lob@@ s.@@ size()); assert@@ Th@@ at(@@ com.google.common.collect.@@ Stream@@ s.@@ stream@@ (@@ ra@@ w@@ Fiel@@ d@@ s.get@@ ().get@@ Value@@ (@@ Account@@ Fiel@@ d.@@ E@@ X@@ T@@ ER@@ N@@ AL@@ _@@ ID@@ _S@@ T@@ A@@ TE@@ )).@@ map@@ (@@ ( b@@ ) -@@ > new com.google.gerrit.server.query.@@ account.@@ By@@ te@@ Array@@ E@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ b@@ lob@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Tag@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String t@@ a@@ g = com.google.gerrit.server.project.@@ Ref@@ Util.@@ n@@ or@@ ma@@ li@@ ze@@ Tag@@ (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ ); if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ Ref@@ (t@@ ag@@ )) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception(("@@ not allow@@ ed to de@@ le@@ te " + tag@@ )); } per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ (t@@ ag@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); resource@@ .getProject@@ State@@ ().@@ check@@ State@@ Per@@ mit@@ Wri@@ te@@ (); delete@@ Ref@@ Factory.create@@ (@@ resource@@ ).@@ ref@@ (t@@ ag@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Branch@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ Ref@@ (rsrc@@ .get@@ Branch@@ Key@@ ().get@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to de@@ le@@ te b@@ ran@@ ch " + (rsrc@@ .get@@ Branch@@ Key@@ ().get@@ ()))); } per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ ref@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); rsrc@@ .getProject@@ State@@ ().@@ check@@ State@@ Per@@ mit@@ Wri@@ te@@ (); if (!(@@ query@@ Provider@@ .get().@@ set@@ Li@@ mit@@ (1@@ ).@@ by@@ Branch@@ Open@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((("@@ b@@ ran@@ ch " + (rsrc@@ .get@@ Branch@@ Key@@ ())) + " h@@ a@@ s op@@ en changes@@ ")); } delete@@ Ref@@ Factory.create@@ (rsrc@@ ).@@ ref@@ (rsrc@@ .getRef@@ ()).@@ pre@@ fix@@ (com.google.gerrit.server.@@ re@@ stapi.@@ project.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
public static boolean is@@ Met@@ a@@ Config@@ (java.lang.String ref@@ ) { return com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ ref@@ ); }
private boolean can@@ Delete@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ (cm@@ d@@ .getRef@@ Name@@ ())) { return false@@ ; } try { per@@ mis@@ sions.@@ ref@@ (cm@@ d@@ .getRef@@ Name@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ); return project@@ State.@@ state@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return false@@ ; } }
private com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info create@@ Branch@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , com.google.gerrit.server.project.Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s) { com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info in@@ fo = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); info.@@ re@@ f = ref@@ .getName@@ (); info.@@ re@@ vi@@ sion = ((@@ ref@@ .get@@ Object@@ Id@@ ()) != null@@ ) ? ref@@ .get@@ Object@@ Id@@ ().@@ name@@ () : null@@ ; if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ Ref@@ (ref@@ .getName@@ ())) { info.@@ can@@ De@@ le@@ te = null@@ ; } else { info.@@ can@@ De@@ le@@ te = ((@@ (!(@@ t@@ arget@@ s.@@ contains(@@ ref@@ .getName@@ ()))) && (@@ per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ TE@@ ))) && (project@@ State.@@ state@@ Wri@@ te@@ ())) ? true : null@@ ; } com.google.gerrit.server.project.@@ Ref@@ Resource r@@ sr@@ c = new com.google.gerrit.server.project.@@ Branch@@ Resource@@ (project@@ State@@ , user@@ , ref@@ ); for (@@ com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion d : ui@@ Action@@ s.@@ from@@ View@@ (@@ branch@@ )) { if ((@@ info.@@ action@@ s) == null@@ ) { info.@@ action@@ s = new java.util.@@ Tree@@ Map@@ (); } info.@@ action@@ s.@@ put(@@ d@@ .getId@@ (), new com.google.gerrit.extensions.common.@@ Action@@ Info@@ (@@ d@@ )); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> link@@ s = web@@ Link@@ s.get@@ Branch@@ Link@@ s(@@ project@@ State@@ .getName@@ (), ref@@ .getName@@ ()); info.@@ web@@ Link@@ s = (@@ link@@ s.@@ isEmpty()) ? null : link@@ s; return info@@ ; }
@org.junit.Test public void store@@ Th@@ en@@ Query@@ Not@@ Visible@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ (user@@ Provider@@ Mo@@ ck@@ .get@@ ()@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ Throw@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception("@@ "@@ )).@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); store@@ .@@ store@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = store@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ E@@ N@@ ER@@ C_@@ Q@@ U@@ ER@@ Y@@ ); assert@@ Th@@ at(@@ event@@ s).@@ isEmpty@@ (); }
@org.junit.Test public void store@@ Th@@ en@@ Query@@ Visible@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ (user@@ Provider@@ Mo@@ ck@@ .get@@ ()@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ No@@ th@@ ing@@ ().@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); store@@ .@@ store@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = store@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ E@@ N@@ ER@@ I@@ C_@@ Q@@ U@@ ER@@ Y@@ ); java.lang.String j@@ s@@ on = new com.google.g@@ son.@@ G@@ son@@ ().to@@ Json@@ (@@ mo@@ ck@@ Event@@ ); assert@@ Th@@ at(@@ event@@ s).@@ contains@@ Ex@@ act@@ l@@ y(@@ json@@ ); }
@java.lang.Override public java.util.List<java.lang.String> query@@ Change@@ Event@@ s(@@ java.lang.String query@@ ) throw@@ s com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ Event@@ s@@ Log@@ Exception { if (!(@@ on@@ line@@ )) { throw new com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ Ser@@ vi@@ ce@@ Un@@ avail@@ able@@ Exception@@ (); } java.util.List<@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQ@@ LE@@ n@@ try@@ > ent@@ ri@@ es = new java.util.ArrayList<@@ >(); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.util.Collection<@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQ@@ LE@@ n@@ try@@ >> en@@ try : event@@ s@@ Db@@ .get@@ Event@@ s(@@ query@@ ).@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { java.lang.String project@@ Name = en@@ try@@ .getKey@@ (); try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ Provider@@ .get@@ ()).@@ project@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (project@@ Name@@ )).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); ent@@ ri@@ es.@@ add@@ All(@@ en@@ try@@ .getValue@@ ()); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { } } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ .@@ log.warn@@ ("@@ Cannot ch@@ ec@@ k project ac@@ ces@@ s per@@ mission@@ ", e); } return s@@ orted@@ Event@@ s@@ From@@ Ent@@ ri@@ es(@@ ent@@ ri@@ es@@ ); }
@org.junit.Test public void not@@ Ret@@ ur@@ n@@ Event@@ With@@ No@@ Vi@@ si@@ b@@ ili@@ ty@@ Info@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ (user@@ Provider@@ Mo@@ ck@@ .get@@ ()@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ Throw@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception("@@ "@@ )).@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); store@@ .@@ store@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = store@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ E@@ N@@ ER@@ I@@ C_@@ Q@@ U@@ ER@@ Y@@ ); assert@@ Th@@ at(@@ event@@ s).@@ isEmpty@@ (); }
private java.lang.O@@ bject log@@ o@@ () { if ((@@ log@@ Url@@ ) == null@@ ) { return null@@ ; } java.lang.String ur@@ l = fm@@ t.@@ i@@ m@@ age@@ (@@ log@@ Url@@ ); if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (@@ url@@ )) { return url@@ ; } else if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ url@@ )) { return com.google.@@ te@@ m@@ pl@@ ate.@@ so@@ y.@@ sh@@ a@@ red@@ .@@ int@@ er@@ n@@ al@@ .@@ S@@ an@@ iti@@ z@@ er@@ s.@@ filter@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ url@@ ); } else { return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ I@@ M@@ A@@ G@@ E_@@ URI@@ _@@ IN@@ C@@ US@@ O@@ US@@ _@@ UT@@ P@@ UT@@ P@@ UT@@ ; } }
java.lang.String in@@ line@@ (@@ @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.String mar@@ k@@ do@@ w@@ n@@ Path@@ , java.lang.String i@@ m@@ age@@ Path@@ ) { java.lang.String dat@@ a = in@@ line@@ Ma@@ y@@ be@@ (@@ mar@@ k@@ do@@ w@@ n@@ Path@@ , i@@ m@@ age@@ Path@@ ); if (@@ dat@@ a != null@@ ) { return dat@@ a@@ ; } return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ I@@ M@@ A@@ G@@ E_@@ URI@@ _@@ IN@@ NO@@ C@@ U@@ O@@ US@@ _@@ UT@@ P@@ UT@@ ; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing java.lang.String h@@ ref@@ (java.lang.String t@@ arget@@ ) { if (((@@ t@@ arg@@ e@@ t.@@ startsWith@@ ("@@ #@@ ")) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (t@@ arget@@ ))) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ M@@ ail@@ to@@ U@@ ri@@ (t@@ arget@@ ))) { return t@@ arget@@ ; } else if (t@@ arg@@ e@@ t.@@ startsWith@@ ("@@ git@@ :@@ ")) { if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Git@@ U@@ ri@@ (t@@ arget@@ )) { return t@@ arget@@ ; } return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ NO@@ R@@ AL@@ _@@ NO@@ IN@@ C@@ U@@ O@@ US@@ _@@ O@@ UT@@ P@@ UT@@ P@@ UT@@ ; } java.lang.String an@@ ch@@ or = "@@ "; int has@@ h = t@@ arg@@ e@@ t.@@ index@@ Of(@@ '@@ #@@ '); if (@@ has@@ h >@@ = 0) { an@@ ch@@ or = t@@ arg@@ e@@ t.@@ substring@@ (@@ has@@ h@@ ); t@@ arg@@ e@@ t = t@@ arg@@ e@@ t.@@ substring@@ (@@ 0, has@@ h@@ ); } java.lang.String des@@ t = com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ Path@@ Res@@ ol@@ v@@ er.@@ res@@ ol@@ ve@@ (@@ file@@ Path@@ , t@@ arget@@ ); if ((@@ des@@ t == null@@ ) || ((@@ view@@ ) == null@@ )) { return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ NO@@ R@@ M@@ AL@@ _@@ IN@@ C@@ U@@ O@@ US@@ _@@ O@@ UT@@ P@@ UT@@ ; } com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ Builder b@@ ; if ((@@ view@@ .get@@ Type@@ ()) == (@@ G@@ itile@@ s@@ View@@ .@@ Type.@@ RO@@ O@@ TE@@ D@@ _@@ D@@ )) { b = com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ r@@ oo@@ ted@@ Doc@@ (); } else { b = com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ path@@ (); } des@@ t = b.@@ copy@@ From@@ (@@ view@@ ).set@@ Path@@ P@@ art@@ (@@ dest@@ ).@@ bu@@ ild@@ ().to@@ Url@@ (); return (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ Path@@ Res@@ ol@@ v@@ er.@@ re@@ l@@ ative@@ (re@@ qu@@ est@@ U@@ ri@@ , dest@@ )) + an@@ chor@@ ; }
java.lang.String i@@ m@@ age@@ (java.lang.String dest@@ ) { if ((@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (@@ dest@@ )) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ dest@@ ))) { return dest@@ ; } else if ((@@ i@@ m@@ age@@ Load@@ er@@ ) != null@@ ) { return i@@ m@@ age@@ Load@@ er.@@ in@@ line@@ (@@ file@@ Path@@ , dest@@ ); } return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ I@@ M@@ A@@ G@@ E_@@ URI@@ _@@ IN@@ C@@ U@@ O@@ US@@ _@@ UT@@ P@@ UT@@ P@@ UT@@ ; }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ st@@ ri@@ ct@@ Label@@ s", valu@@ e = "@@ true@@ ") public void vo@@ te@@ On@@ Be@@ h@@ al@@ f@@ Of@@ Invalid@@ Label@@ () throw@@ s java.lang.Exception { allow@@ CodeReview@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Revision@@ Ap@@ i re@@ vi@@ sion = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ (); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = user@@ .@@ id@@ .@@ toString@@ (); in.@@ label@@ ("@@ Not@@ -@@ A@@ -@@ Label@@ ", 5@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ l@@ abe@@ l \"@@ Not@@ -@@ Label@@ -@@ Label@@ \@@ " is not a configure@@ d label@@ "); revision@@ .@@ review@@ (in@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ st@@ ri@@ ct@@ Label@@ s", valu@@ e = "@@ true@@ ") public void st@@ ri@@ ct@@ Label@@ Vo@@ t@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", (@@ -@@ 1@@ )); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.BadRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ l@@ abe@@ l \"@@ V@@ er@@ if@@ i@@ ed@@ \@@ " is not a configure@@ d label@@ "); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); }
@org.junit.Test public void n@@ on@@ St@@ ri@@ ct@@ Label@@ Vo@@ t@@ es@@ Per@@ Default@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); java.lang.String change@@ Id = r@@ .getChange@@ Id(); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ (); in.@@ label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", (@@ -@@ 1@@ )); in.@@ label@@ ("@@ Code@@ -@@ Style@@ ", 1); in.@@ label@@ ("@@ Li@@ b@@ r@@ ary@@ -@@ Comp@@ li@@ ance@@ ", (@@ -@@ 1@@ )); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ review@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ es().@@ key@@ Set@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ("@@ Code@@ -@@ Review@@ "); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ reviewer@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ es().@@ values@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ((@@ (@@ short@@ ) (@@ 2@@ ))); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).get@@ ().@@ submit@@ table@@ ).@@ is@@ True@@ (); in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ label@@ ("@@ Code@@ -@@ Review@@ ", 4@@ 2); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ reviewer@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ es().@@ values@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ((@@ (@@ short@@ ) (@@ 2@@ ))); }
@org.junit.Test public void vo@@ te@@ On@@ Be@@ h@@ al@@ f@@ Of@@ Invalid@@ Label@@ I@@ g@@ no@@ red@@ With@@ out@@ St@@ ri@@ ct@@ Label@@ s() throw@@ s java.lang.Exception { allow@@ CodeReview@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Revision@@ Ap@@ i re@@ vi@@ sion = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ (); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = user@@ .@@ id@@ .@@ toString@@ (); in.@@ label@@ ("@@ Code@@ -@@ Review@@ ", 1); in.@@ label@@ ("@@ Not@@ -@@ A@@ -@@ Label@@ ", 5@@ ); revision@@ .@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()@@ ).get@@ ().@@ label@@ s@@ )@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ Key@@ ("@@ Not@@ A@@ -@@ Label@@ "); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ t@@ y resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ Default@@ (); return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create@@ ("@@ o@@ k@@ \n@@ "); }
private static java.lang.String change@@ Permission@@ Name@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Change@@ Per@@ mis@@ sion change@@ Permission@@ ) { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Map@@ p@@ ing@@ s.@@ change@@ Permission@@ Name@@ (change@@ Permission@@ ).@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ ()); }
private static java.lang.String ref@@ Permission@@ Name@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion ref@@ Permission@@ ) { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Map@@ p@@ ing@@ s.@@ ref@@ Permission@@ Name(@@ ref@@ Permission@@ ).@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ ()); }
@java.lang.Override public java.lang.O@@ bject apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ Default@@ (); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ With@@ User per@@ m = per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ (); if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ m.@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (rsrc@@ .getUser@@ ()); } java.util.Map<java.lang.String, java.lang.O@@ bject@@ > h@@ av@@ e = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ >(); for (@@ com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Plugin@@ Per@@ mis@@ sion p : per@@ m.@@ test@@ (@@ per@@ mission@@ s@@ To@@ Test@@ ())) { h@@ av@@ e.@@ put(@@ per@@ mission@@ Name@@ (), true@@ ); } com.google.gerrit.server.account.Account@@ Li@@ mit@@ s li@@ mit@@ s = li@@ mit@@ Factory.create@@ (rsrc@@ .getUser@@ ()); add@@ R@@ ang@@ es(@@ h@@ ave@@ , li@@ mit@@ s); add@@ P@@ ri@@ ori@@ ty(@@ h@@ ave@@ , li@@ mit@@ s); return Output@@ For@@ ma@@ t.@@ J@@ S@@ ON@@ .@@ new@@ G@@ son@@ ().to@@ Json@@ Tree@@ (@@ h@@ ave@@ , new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.Map<java.lang.String, java.lang.O@@ bject@@ >@@ >() {}@@ .get@@ Type@@ ()); }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ t@@ y parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ Default@@ (); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User t@@ arg@@ e@@ t = parent@@ .getUser@@ (); if ((@@ self@@ .get@@ ()) != t@@ arget@@ ) { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); } com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Plugin@@ Per@@ mis@@ sion per@@ m = parse@@ (id@@ ); if (@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (t@@ arget@@ ).@@ test@@ (@@ per@@ m@@ )) { return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ ty(@@ t@@ arget@@ , per@@ m.@@ per@@ mission@@ Name()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
private com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Or@@ Plugin@@ Per@@ mis@@ sion parse@@ (@@ com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { java.lang.String name = id@@ .get(); java.util.@@ Optional@@ <@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ G@@ lobal@@ Permission@@ > per@@ m = com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Default@@ Permission@@ Map@@ p@@ ing@@ s@@ .g@@ lobal@@ Permission@@ (@@ name); if (@@ per@@ m.@@ is@@ P@@ res@@ ent@@ ()) { return per@@ m@@ .get(); } int d@@ as@@ h = name.@@ last@@ Index@@ Of(@@ '@@ -@@ '); if (@@ d@@ as@@ h < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } java.lang.String plugin@@ Name = name.@@ substring@@ (@@ 0, d@@ ash@@ ); java.lang.String c@@ ap@@ abili@@ t@@ y = name.@@ substring@@ ((@@ d@@ as@@ h + 1@@ )); if ((@@ plugin@@ Name.@@ isEmpty()) || (c@@ ap@@ ability.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return new com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ Plugin@@ Permission@@ (@@ plugin@@ Name, c@@ ap@@ abili@@ ty@@ ); }
public boolean is@@ Default@@ () { return false@@ ; }
public void check@@ Default@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if (!(@@ is@@ Default@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ G@@ erri@@ t per@@ mission@@ s not use@@ d on this server@@ "); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.@@ re@@ stapi.@@ config.@@ List@@ Capabili@@ ti@@ es.@@ Capabili@@ ty@@ Info> apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.lang.I@@ l@@ leg@@ al@@ Access@@ Exception, java.lang.@@ NoSuch@@ Fiel@@ d@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ Default@@ (); return com.google.common.collect.Immutable@@ Map.@@ <java.lang.String, com.google.gerrit.server.@@ re@@ stapi.@@ List@@ Capabili@@ ti@@ es.@@ Capabili@@ ty@@ Info@@ >@@ buil@@ der@@ ().@@ put@@ All(@@ collec@@ t@@ Co@@ re@@ Capabili@@ ti@@ es@@ ()).@@ put@@ All(@@ collec@@ t@@ Plugin@@ Capabili@@ ti@@ es@@ ()).@@ bu@@ ild@@ (); }
@java.lang.Override public boolean is@@ Default@@ () { return true@@ ; }
private java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > fix@@ Invalid@@ Se@@ qu@@ en@@ ce@@ Number@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > key@@ s) { com.google.common.collect.@@ Or@@ der@@ ing@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > o = com.google.common.collect.@@ Or@@ der@@ ing.@@ from@@ (@@ java.util.@@ Comp@@ ar@@ ator@@ .@@ com@@ pa@@ ring@@ (@@ ( k@@ ) -@@ > k.@@ id@@ ().get@@ ())); java.util.List<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > fix@@ ed@@ Key@@ s = new java.util.Array@@ List(@@ key@@ s); com.google.gerrit.server.account.Account@@ Ssh@@ Key min@@ Key = o.@@ min@@ (key@@ s); while ((@@ min@@ Key@@ .@@ id@@ ().get@@ ()) <@@ = 0) { com.google.gerrit.server.account.Account@@ Ssh@@ Key fix@@ ed@@ Key = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ min@@ Key@@ .@@ id@@ ().get@@ Parent@@ Key@@ (), java.lang.@@ M@@ ath@@ .@@ max@@ (((@@ o.@@ max@@ (key@@ s).@@ id@@ ().get@@ ()) + 1@@ ), 1@@ )), min@@ Key@@ .@@ ssh@@ PublicKey@@ ()); java.util.Collections.@@ replace@@ All(@@ fix@@ ed@@ Key@@ s, min@@ Key@@ , fix@@ ed@@ Key@@ ); min@@ (@@ o.@@ min@@ (@@ fix@@ ed@@ Key@@ s); } return fix@@ ed@@ Key@@ s; }
private void mar@@ k@@ In@@ vali@@ d(@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ) { try { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ log.@@ info@@ ((("@@ F@@ l@@ ag@@ gin@@ g S@@ H k@@ ey " + (@@ k.@@ id@@ ())) + " in@@ valid@@ ")); auth@@ ori@@ zed@@ Key@@ s.@@ mar@@ k@@ Key@@ In@@ vali@@ d(@@ k.@@ account@@ (), k.@@ id@@ ().get@@ ()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ log.error@@ ((("@@ Fai@@ le@@ d to mar@@ k S@@ H key@@ " + (@@ k.@@ id@@ ())) + " in@@ valid@@ "), e); } }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id, java.lang.String en@@ cod@@ ed@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (id@@ , en@@ cod@@ ed@@ ); }
private void add(@@ java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l@@ , com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ) { try { k@@ l.@@ add@@ (@@ new com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ (@@ k.@@ id@@ (), com.google.gerrit.sshd.@@ Ssh@@ Util.@@ parse@@ (@@ k@@ ))); } catch (@@ java.lang.O@@ ut@@ Of@@ M@@ em@@ ory@@ E@@ rror e) { throw e@@ ; } catch (java.lang.@@ Throwable e) { mar@@ k@@ In@@ vali@@ d(@@ k@@ ); } }
private void delete@@ Ssh@@ Key@@ (@@ com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info i@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { com.google.gerrit.server.account.Account@@ Key ssh@@ Key = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (user@@ .getAccount@@ Id(), se@@ q@@ ), i.@@ ssh@@ PublicKey@@ ); delete@@ Ssh@@ Key@@ .@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Ssh@@ Key@@ (user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (), ssh@@ Key@@ ), null@@ ); }
public static com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info new@@ Ssh@@ Key@@ Info@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key ssh@@ Key@@ ) { com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info@@ (); info.@@ se@@ q = ssh@@ Key@@ .@@ id@@ ().get@@ (); info.@@ ssh@@ Public@@ Key = ssh@@ Key@@ .@@ ssh@@ PublicKey@@ (); info.@@ en@@ cod@@ ed@@ Key = ssh@@ Key@@ .@@ en@@ cod@@ ed@@ Key@@ (); info.@@ al@@ g@@ ori@@ m = ssh@@ Key@@ .@@ ori@@ th@@ m@@ (); info.@@ comm@@ ent = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ ssh@@ Key@@ .@@ comment@@ ()); info.@@ vali@@ d = ssh@@ Key@@ .@@ valid@@ (); return info@@ ; }
@java.lang.Override public java.lang.I@@ terable@@ <@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id user = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ External@@ Id.@@ Key@@ .@@ create(@@ com.google.gerrit.sshd.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAME@@ , user@@ name@@ )); if (@@ user == null@@ ) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _S@@ U@@ CH@@ _@@ US@@ ER@@ ; } java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); for (com.google.gerrit.server.@@ account.@@ Ssh@@ Key k : auth@@ ori@@ zed@@ Key@@ s.get@@ Key@@ s(@@ user@@ .@@ account@@ Id@@ ())) { if (@@ k.@@ valid@@ ()) { add(@@ k@@ l@@ , k@@ ); } } if (@@ k@@ l.@@ isEmpty()) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _@@ K@@ E@@ Y@@ S@@ ; } return java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ List(@@ k@@ l@@ ); }
private boolean mar@@ k@@ Key@@ Invalid@@ (@@ int se@@ q@@ ) { check@@ Load@@ ed@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Key@@ > k@@ ey = key@@ s.get@@ ((@@ se@@ q - 1@@ )); if ((@@ key@@ .is@@ P@@ res@@ ent@@ ()) && (key@@ .get().@@ valid@@ ())) { key@@ s.@@ add@@ ((@@ se@@ q - 1@@ ), java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ create@@ In@@ vali@@ d(@@ key@@ .get@@ ()))); return true@@ ; } return false@@ ; }
public abstract com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id id@@ ();
public abstract com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Builder set@@ Id@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id);
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ In@@ vali@@ d(@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id id, java.lang.String ssh@@ PublicKey@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (id@@ , ssh@@ PublicKey@@ , false@@ ); }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id, java.lang.String en@@ cod@@ ed@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception { try { com.google.gerrit.server.account.Account@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Key@@ .@@ create@@ (id@@ , com.google.gerrit.sshd.@@ Ssh@@ Util.@@ to@@ Open@@ Ssh@@ PublicKey@@ (@@ en@@ cod@@ ed@@ )); com.google.gerrit.sshd.@@ Ssh@@ Util.@@ parse@@ (key@@ ); return key@@ ; } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ NoSuch@@ Al@@ g@@ ori@@ th@@ m@@ Exception | java.@@ s@@ ecu@@ ri@@ ty.@@ sp@@ ec@@ .@@ Invalid@@ Key@@ S@@ p@@ ec@@ Exception e) { throw new com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception@@ (); } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ NoSuch@@ Provider@@ Exception e) { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cre@@ ator@@ Impl.@@ log.error@@ ("@@ Cannot par@@ se S@@ S@@ S@@ H key@@ ", e); throw new com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception@@ (); } }
public static java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> parse@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.lang.String s) { java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s = new java.util.ArrayList<@@ >(); int se@@ q = 1; for (java.lang.String lin@@ e : s.@@ s@@ pli@@ t@@ ("@@ \@@ r@@ ?@@ \@@ \n@@ ")) { lin@@ e = line@@ .@@ tri@@ m@@ (); if (@@ line@@ .@@ isEmpty()) { continue@@ ; } else if (@@ line@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ IN@@ V@@ AL@@ ID@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ ME@@ N@@ T_@@ P@@ RE@@ FI@@ X@@ )) { java.lang.String pu@@ b = line@@ .@@ substring@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ IN@@ V@@ AL@@ ID@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ ME@@ N@@ T_@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ Invalid@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, se@@ q@@ ++@@ )), pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); } else if (@@ line@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ DE@@ LE@@ TE@@ D@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ ME@@ N@@ T@@ )) { key@@ s.add(@@ java.util.@@ Optional@@ .@@ empty@@ ()); se@@ q@@ ++@@ ; } } else if (@@ line@@ .@@ startsWith@@ ("@@ #@@ ")) { continue@@ ; } else { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, se@@ q@@ ++@@ )), line@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); } } return key@@ s; }
@org.junit.Test public void vali@@ dit@@ y@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, (@@ -@@ 1@@ )), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ valid@@ ()).@@ is@@ F@@ alse@@ (); k@@ ey = com.google.gerrit.server.account.Account@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, 0@@ ), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ valid@@ ()).@@ is@@ F@@ alse@@ (); k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ Id(@@ account@@ Id, 1@@ ), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ valid@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void get@@ ter@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, 1@@ ), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ ssh@@ PublicKey@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ ori@@ zed@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ " "@@ )@@ [@@ 0@@ ]@@ ); assert@@ Th@@ at(@@ key@@ .@@ en@@ cod@@ ed@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ "@@ )@@ [@@ 1@@ ]@@ ); assert@@ Th@@ at(@@ key@@ .@@ comment@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ " "@@ )@@ [@@ 2@@ ]@@ ); }
private static void assert@@ Par@@ se@@ (@@ java.lang.String@@ Builder auth@@ ori@@ zed@@ Key@@ s, java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> expected@@ Key@@ s) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> par@@ sed@@ Key@@ s = com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ parse@@ (account@@ Id, auth@@ ori@@ zed@@ Key@@ s.@@ toString@@ ()); assert@@ Th@@ at(@@ par@@ sed@@ Key@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Key@@ s); int se@@ q = 1; for (@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Key@@ > ssh@@ Key : par@@ sed@@ Key@@ s) { if (@@ ssh@@ Key@@ .is@@ P@@ res@@ ent@@ ()) { assert@@ Th@@ at(@@ ssh@@ Key@@ .get().@@ account@@ ()).@@ isEqualTo(@@ account@@ Id); assert@@ Th@@ at(@@ ssh@@ Key@@ .get().@@ id@@ ().get@@ ()).@@ isEqualTo(@@ se@@ q@@ ); } } se@@ q@@ ++@@ ; } }
private static java.lang.String add@@ Invalid@@ Key@@ (@@ java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s, java.lang.String pu@@ b@@ ) { com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), ((@@ key@@ s.@@ size@@ ()) + 1@@ )); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Key@@ .@@ create@@ In@@ vali@@ d(@@ key@@ Id, pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return ((@@ Auth@@ ori@@ zed@@ Key@@ s.@@ IN@@ V@@ AL@@ ID@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ ME@@ N@@ T_@@ P@@ RE@@ FI@@ X@@ ) + (key@@ .@@ ssh@@ PublicKey@@ ())) + "@@ \n@@ "; }
@org.junit.Test public void key@@ With@@ New@@ Lin@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, 1@@ ), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ _@@ W@@ IT@@ H@@ _@@ N@@ EW@@ L@@ IN@@ ES@@ ); assert@@ Th@@ at(@@ key@@ .@@ ssh@@ PublicKey@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ al@@ g@@ ori@@ th@@ m@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ " "@@ )@@ [@@ 0@@ ]@@ ); assert@@ Th@@ at(@@ key@@ .@@ en@@ cod@@ ed@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ "@@ )@@ [@@ 1@@ ]@@ ); assert@@ Th@@ at(@@ key@@ .@@ comment@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t(@@ "@@ )@@ [@@ 2@@ ]@@ ); }
private static java.lang.String add@@ Key@@ (@@ java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s, java.lang.String pu@@ b@@ ) { com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), ((@@ key@@ s.@@ size@@ ()) + 1@@ )); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Key@@ .@@ create@@ (key@@ Id, pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return ssh@@ PublicKey@@ ()) + "@@ \n@@ "; }
private com.google.gerrit.server.account.Account@@ Key add@@ Key@@ (java.lang.String pu@@ b@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception { check@@ Load@@ ed@@ (); for (@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Key@@ > k@@ ey : key@@ s) { if ((@@ key@@ .is@@ P@@ res@@ ent@@ ()) && (key@@ .get().@@ ssh@@ PublicKey@@ ().@@ tri@@ m@@ ().equals(@@ pu@@ b.@@ tri@@ m@@ ()))) { return key@@ .get(); } } int se@@ q = (key@@ s.@@ size@@ ()) + 1; com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, se@@ q@@ ); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = ssh@@ Key@@ Cre@@ ator@@ .@@ create@@ (key@@ Id, pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return key@@ ; }
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ In@@ vali@@ d(@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key key@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (key@@ .@@ id@@ (), key@@ .@@ ssh@@ PublicKey@@ (), false@@ ); }
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id, java.lang.String ssh@@ PublicKey@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (id@@ , ssh@@ PublicKey@@ , true@@ ); }
public Account.@@ Id account@@ () { return account@@ Id@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Respon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ Ssh@@ Key rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ IS@@ T@@ R@@ A@@ TE@@ _S@@ ER@@ V@@ ER@@ ); } auth@@ ori@@ zed@@ Key@@ s.@@ delete@@ Key@@ (rsrc@@ .getUser@@ ().get@@ Account@@ Id(), rsrc@@ .get@@ Ssh@@ Key@@ ().get@@ ()); id@@ ().get@@ ()); rsrc@@ .getUser@@ ().get@@ User@@ Name@@ ()@@ .@@ if@@ P@@ res@@ ent@@ (@@ ssh@@ Key@@ Cache@@ :@@ :@@ e@@ vi@@ ct@@ ); return com.google.gerrit.extensions.restapi.Respon@@ se.@@ n@@ one@@ (); }
private java.lang.String public@@ Key@@ P@@ art@@ (@@ int index@@ , java.lang.String default@@ Value@@ ) { java.lang.String s = ssh@@ PublicKey@@ (); if ((@@ s != null@@ ) && ((@@ s.@@ length@@ ()) > 0@@ )) { java.lang.String@@ [] par@@ t@@ s = s.@@ s@@ pli@@ t(@@ " "); if ((@@ par@@ t@@ s.@@ length@@ ) > index@@ ) { return par@@ t@@ s@@ [@@ index@@ ]@@ ; } } return default@@ Value@@ ; }
private com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ Ssh@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String key@@ File@@ ) throw@@ s java.io.IOException { java.nio.file.@@ Pat@@ h p = java.nio.file.@@ Path@@ s.get(@@ key@@ File@@ ); if (!(@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ p@@ ))) { throw new java.io.IO@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ad@@ d public S@@ H key@@ : %s is not a file@@ ", key@@ File@@ )); } java.lang.String cont@@ ent = new java.lang.String@@ (@@ java.nio.file.@@ File@@ s.@@ read@@ All@@ By@@ t@@ es@@ (p@@ ), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (id@@ , 1@@ ), content@@ ); }
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id, java.lang.String ssh@@ PublicKey@@ , boolean valid@@ ) { return new com.google.gerrit.server.account.@@ Au@@ to@@ Value@@ _@@ Account@@ Ssh@@ Key@@ .@@ Builder@@ ().set@@ Id@@ (id@@ ).set@@ Ssh@@ PublicKey@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ st@@ ri@@ p@@ O@@ ff@@ New@@ Lin@@ es(@@ ssh@@ PublicKey@@ )).@@ set@@ Valid@@ ((@@ d && (id@@ .is@@ Valid@@ ()@@ )@@ )).@@ bu@@ ild@@ (); }
public void set@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > new@@ Key@@ s) { com.google.common.collect.@@ Or@@ der@@ ing@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > o = com.google.common.collect.@@ Or@@ der@@ ing.@@ from@@ (@@ java.util.@@ Comp@@ ar@@ ator@@ .@@ com@@ pa@@ ring@@ (@@ ( k@@ ) -@@ > k.@@ id@@ ().get@@ ())); key@@ s = new java.util.Array@@ List(@@ java.util.Collections.@@ n@@ Co@@ p@@ i@@ es(@@ o.@@ max@@ (@@ new@@ Key@@ s).@@ id@@ ().get@@ (), java.util.@@ Optional@@ .@@ empty@@ ())); for (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key k@@ ey : new@@ Key@@ s) { key@@ s.set@@ (((@@ key@@ .@@ id@@ ().get@@ ()) - 1@@ ), java.util.@@ Optional@@ .@@ of@@ (key@@ )); } }
@java.lang.Override public void start@@ () { if ((@@ execu@@ tor@@ ) == null@@ ) { return@@ ; } java.lang.@@ Th@@ rea@@ d s@@ ched@@ ule@@ r = new java.lang.@@ Th@@ read@@ ((@@ -@@ > (@@ com.google.gerrit.reviewdb.client.Project.NameKey name : cache.@@ all@@ ()) { execu@@ tor@@ .@@ execute@@ ((@@ ) -@@ > cach@@ e@@ .get(@@ name@@ )); } execu@@ tor@@ .@@ sh@@ u@@ t@@ do@@ w@@ n@@ (); try { execu@@ tor@@ .@@ a@@ w@@ a@@ it@@ T@@ er@@ min@@ ation@@ (java.lang.@@ L@@ on@@ g.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ L@@ IS@@ EC@@ ON@@ D@@ S@@ ); com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.@@ info@@ ("@@ F@@ in@@ is@@ h@@ ed load@@ ing project cach@@ e@@ "); } catch (java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception e) { com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.warn@@ ("@@ In@@ ter@@ r@@ up@@ ted while w@@ a@@ it@@ ing for project cach@@ e to load@@ "); } } }); s@@ ched@@ ul@@ er.@@ set@@ Name@@ ("@@ Project@@ Cache@@ W@@ ar@@ m@@ er@@ "); s@@ ched@@ ul@@ er.@@ set@@ D@@ a@@ em@@ on@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.@@ info@@ ("@@ Load@@ ing project cach@@ e@@ "); s@@ ched@@ ul@@ er.@@ start@@ (); }
java.lang.String@@ [] ssh@@ Al@@ low@@ s() { return ssh@@ Al@@ low@@ s; }
@org.junit.Test public void as@@ signe@@ e@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo, new@@ Change@@ (repo@@ )); com.google.gerrit.reviewdb.client.Change change@@ 2 = insert@@ (repo, new@@ Change@@ (repo@@ )); com.google.gerrit.extensions.api.changes.@@ As@@ signe@@ e@@ Input in@@ pu@@ t = new com.google.gerrit.extensions.api.changes.@@ As@@ signe@@ e@@ Input@@ (); input.@@ as@@ signe@@ e = user@@ .getUser@@ Name@@ ().get@@ (); gApi.changes().id(@@ change@@ 1@@ .getChange@@ Id@@ ()).@@ set@@ As@@ signe@@ e@@ (in@@ put@@ ); assert@@ Query@@ ("@@ is@@ :@@ as@@ signe@@ d@@ ", change@@ 1); assert@@ Query@@ ("@@ -@@ is@@ :@@ as@@ signe@@ d@@ ", change@@ 2); assert@@ Query@@ ("@@ is@@ :@@ un@@ as@@ signe@@ d@@ ", change@@ 2); assert@@ Query@@ ("@@ -@@ is@@ :@@ un@@ signe@@ d@@ ", change@@ 1); assert@@ Query@@ (("@@ as@@ signe@@ e@@ :@@ " + (user@@ .getUser@@ Name@@ ()@@ )), change@@ 1); assert@@ Query@@ (("@@ -@@ as@@ signe@@ e@@ :@@ " + (user@@ .getUser@@ Name@@ ()@@ )), change@@ 2); }
