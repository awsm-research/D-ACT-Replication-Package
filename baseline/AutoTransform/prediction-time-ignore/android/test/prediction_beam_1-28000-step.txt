public void test@@ Interface@@ Coun@@ ter@@ s@@ U@@ dp@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _M@@ D@@ 5, get@@ Key@@ (1@@ 2@@ 8@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1@@ 00@@ 0, false@@ ); }
@java.lang.Override public void add@@ Mark@@ er(@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.@@ m@@ ark@@ er.@@ Mark@@ er m@@ ark@@ er@@ ) { assert is@@ Valid@@ Mark@@ er@@ (m@@ ark@@ er.get@@ Class@@ ()) : ((("@@ Mark@@ er '@@ " + (com.android.s@@ ched.@@ i@@ tem@@ .@@ Item@@ s.get@@ Name@@ (m@@ ark@@ er.get@@ Class@@ ()))) + "@@ ' is not suppor@@ ted for class '@@ ") + (@@ this@@ .get@@ Class@@ ().get@@ Name@@ ())) + "@@ '@@ "; if ((m@@ ark@@ er@@ s) == null@@ ) { synchronized@@ (@@ this@@ ) { if ((m@@ ark@@ er@@ s) == null@@ ) { m@@ ark@@ er@@ s = new java.util.@@ concurrent.@@ Con@@ current@@ Hash@@ Map@@ <@@ java.lang.@@ Class@@ <@@ ? extends com.android.sched.@@ m@@ ark@@ er.@@ Mark@@ er@@ >@@ , com.android.sched.@@ m@@ ark@@ er.@@ Mark@@ er@@ >(); } } assert (m@@ ark@@ er@@ s.get@@ (m@@ ark@@ er.get@@ Class@@ ())) == null : ("@@ Mark@@ er '@@ " + (com.android.s@@ ched.@@ i@@ tem@@ .@@ Item@@ s.get@@ Name@@ (m@@ ark@@ er.get@@ Class@@ ()))) + "@@ ' al@@ read@@ y exist@@ s@@ "; m@@ ark@@ er@@ s.@@ put@@ (m@@ ark@@ er.get@@ Class@@ (), m@@ ark@@ er@@ ); } }
public void s@@ a@@ ve@@ S@@ end@@ ing@@ File@@ Info@@ (java.lang.String m@@ im@@ e@@ Type, java.lang.String ur@@ i@@ String@@ , boolean is@@ H@@ an@@ do@@ ver@@ ) throw@@ s java.lang.Illegal@@ Argument@@ Exception { synchronized@@ (@@ this@@ ) { m@@ Multi@@ ple@@ F@@ la@@ g = false@@ ; m@@ M@@ im@@ e@@ Type@@ Of@@ S@@ end@@ ing@@ File = m@@ im@@ e@@ Type@@ ; m@@ Is@@ H@@ an@@ do@@ ver@@ In@@ iti@@ ate@@ d = is@@ H@@ an@@ do@@ ver@@ ; android.net.@@ Ur@@ i ur@@ i = android.net.@@ U@@ ri@@ .@@ parse@@ (@@ ur@@ i@@ String@@ ); com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ S@@ end@@ File@@ Info send@@ File@@ Info = com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ S@@ end@@ File@@ Info.@@ g@@ ener@@ ate@@ File@@ Info@@ (m@@ Contex@@ t, ur@@ i@@ , m@@ im@@ e@@ Type@@ ); ur@@ i = com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Uti@@ li@@ ty.@@ g@@ ener@@ ate@@ U@@ ri@@ (@@ ur@@ i@@ , send@@ File@@ Info@@ ); com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Uti@@ li@@ ty.@@ put@@ S@@ end@@ File@@ Info@@ (@@ ur@@ i@@ , send@@ File@@ Info@@ ); m@@ U@@ ri@@ Of@@ S@@ end@@ ing@@ File = ur@@ i.@@ toString@@ (); st@@ ore@@ Application@@ Data@@ (); } }
@java.lang.Override public void on@@ R@@ est@@ ore@@ Instance@@ State@@ (android.os.@@ Bund@@ le s@@ av@@ ed@@ Instance@@ State@@ ) { if (s@@ av@@ ed@@ Instance@@ State != null@@ ) { super@@ .@@ on@@ R@@ est@@ ore@@ Instance@@ State@@ (s@@ av@@ ed@@ Instance@@ State@@ ); com.android.@@ setting@@ s.@@ w@@ if@@ i.@@ W@@ ps@@ Di@@ alo@@ g.@@ Di@@ alo@@ g@@ State di@@ alo@@ g@@ State = m@@ Di@@ alo@@ g@@ State.@@ value@@ Of@@ (s@@ av@@ ed@@ Instance@@ Stat@@ e.get@@ String@@ (com.android.@@ setting@@ s.@@ w@@ if@@ i.@@ W@@ ps@@ Di@@ alo@@ g.@@ DI@@ AL@@ O@@ G@@ _STA@@ TE@@ )); java.lang.String ms@@ g = s@@ av@@ ed@@ Instance@@ Stat@@ e.get@@ String@@ (com.android.@@ setting@@ s.@@ w@@ if@@ i.@@ W@@ ps@@ Di@@ alo@@ g.@@ DI@@ AL@@ O@@ G@@ _M@@ S@@ G@@ _S@@ TR@@ ING@@ ); update@@ Di@@ alo@@ g@@ (d@@ i@@ alo@@ g@@ State@@ , ms@@ g@@ ); if (d@@ i@@ alo@@ g@@ State == (com.android.@@ setting@@ s.@@ w@@ if@@ i.@@ W@@ ps@@ Di@@ alo@@ g.@@ Di@@ alo@@ g@@ State.@@ W@@ P@@ S@@ _STA@@ R@@ T@@ )) { android.net.@@ w@@ if@@ i.@@ W@@ ps@@ Info w@@ ps@@ Con@@ fig = new android.net.@@ w@@ if@@ i.@@ W@@ ps@@ Info@@ (); w@@ ps@@ Config.@@ set@@ u@@ p = m@@ W@@ ps@@ Set@@ up@@ ; m@@ W@@ if@@ i@@ Manager.@@ start@@ W@@ p@@ s(@@ w@@ ps@@ Config@@ , m@@ W@@ ps@@ Listener@@ ); } }
@java.lang.Override public void on@@ P@@ r@@ int@@ er@@ F@@ ound@@ (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er p@@ r@@ int@@ er@@ ) { if ((m@@ State@@ ) != (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ STATE_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y@@ )) { return@@ ; } if (!@@ (p@@ r@@ int@@ er.get@@ Id@@ (m@@ P@@ r@@ int@@ Service@@ ).@@ equal@@ s@@ (m@@ P@@ r@@ int@@ J@@ ob@@ .get@@ Info@@ ().get@@ P@@ r@@ int@@ er@@ Id@@ ()))) return@@ ; if (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ TAG, ((("@@ on@@ P@@ r@@ int@@ er@@ F@@ ound@@ () " + (p@@ r@@ int@@ er.@@ name@@ )) + " state@@ =@@ ") + (m@@ State@@ ))); if (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ Utils.@@ is@@ P2p@@ (p@@ r@@ int@@ er@@ )) { m@@ Connec@@ tion = com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ connect@@ P@@ r@@ int@@ er@@ (m@@ P@@ r@@ int@@ Service@@ , p@@ r@@ int@@ er, this@@ ); return@@ ; } if ((@@ com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ Utils.@@ is@@ On@@ Connec@@ ted@@ Interface@@ (m@@ P@@ r@@ int@@ Service@@ , p@@ r@@ int@@ er@@ )) && ((m@@ Connection@@ ) == null@@ )) { m@@ Connec@@ tion = com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ connect@@ P@@ r@@ int@@ er@@ (m@@ P@@ r@@ int@@ Service@@ , p@@ r@@ int@@ er, this@@ ); } if ((m@@ Dis@@ cover@@ y@@ ) != null@@ ) { m@@ Dis@@ cover@@ y.@@ st@@ op@@ (); m@@ State = com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ STATE_@@ C@@ AP@@ A@@ B@@ IL@@ I@@ TI@@ E@@ S@@ ; m@@ P@@ ath = p@@ r@@ int@@ er.@@ path@@ ; m@@ P@@ r@@ int@@ Service@@ .get@@ Capabilities@@ Cach@@ e@@ ().@@ request@@ (p@@ r@@ int@@ er, true@@ , this@@ :@@ handle@@ Capabilities@@ ); }
@javax.annotation.@@ Check@@ For@@ Null public java.io.File get@@ W@@ or@@ k@@ ing@@ Directory@@ () { return work@@ ing@@ Directory@@ ; }
public void test@@ Xml@@ Api@@ 1@@ () throw@@ s java.lang.Exception { assert@@ Equal@@ s@@ (("@@ col@@ or@@ s.@@ xml@@ :@@ 9@@ : Error@@ : @@@ android@@ :@@ col@@ or@@ /@@ ho@@ lo@@ _@@ re@@ d@@ _@@ li@@ g@@ h@@ t requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 4 (c@@ urr@@ ent m@@ in is 1@@ )@@ \n@@ " + ((((@@ (("@@ layout.@@ xml@@ :@@ 1@@ 5@@ : Error@@ : Vi@@ e@@ w requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 1 (c@@ urr@@ ent m@@ in is 1@@ )@@ : <@@ Cal@@ end@@ ar@@ View@@ >@@ \n@@ " + "@@ layout.@@ xml@@ :@@ 2@@ 1@@ : Error@@ : Vi@@ e@@ w requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 4 (c@@ urr@@ ent m@@ in is 1@@ )@@ : <@@ G@@ rid@@ Lay@@ out@@ >@@ \n") + "@@ layout.@@ xml@@ :@@ 2@@ 2@@ : Error@@ : @@@ android@@ :@@ at@@ tr@@ /@@ action@@ B@@ ar@@ S@@ pli@@ t@@ St@@ y@@ le requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 4 (c@@ urr@@ ent m@@ in is 1@@ )@@ \n") + "@@ layout.@@ xml@@ :@@ 2@@ 3@@ : Error@@ : @@@ android@@ :@@ col@@ or@@ /@@ ho@@ lo@@ _@@ re@@ d@@ _@@ li@@ g@@ h@@ t requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 4 (c@@ urr@@ ent m@@ in is 1@@ )@@ \n") + "@@ layout.@@ xml@@ :@@ 4@@ : Error@@ : \"@@ match@@ _@@ parent@@ \@@ " requ@@ ire@@ s t@@ arg@@ et AP@@ I le@@ ve@@ l 8 (c@@ urr@@ ent t@@ arg@@ et is 1@@ ), u@@ se \"@@ fil@@ l@@ _@@ parent@@ \@@ " in@@ s@@ te@@ ad@@ \n") + "@@ layout.@@ xml@@ :@@ 9@@ : Error@@ : Vi@@ e@@ w requ@@ ire@@ s AP@@ I le@@ ve@@ l 5 (c@@ urr@@ ent m@@ in is 1@@ )@@ : <@@ Q@@ ui@@ ck@@ Cont@@ act@@ B@@ ad@@ ge@@ >@@ \n") + "@@ th@@ em@@ es.@@ xml@@ :@@ 9@@ : Error@@ : @@@ android@@ :@@ col@@ or@@ /@@ ho@@ lo@@ _@@ re@@ d@@ _@@ li@@ g@@ h@@ t requ@@ ire@@ s AP@@ I le@@ ve@@ l 1@@ 4 (c@@ urr@@ ent m@@ in is 1@@ )@@ "@@ )), l@@ int@@ Project@@ ("@@ ap@@ i@@ check@@ /@@ min@@ s@@ dk@@ 1.@@ xml@@ =@@ >@@ Android@@ M@@ an@@ if@@ est.@@ xml@@ ", "@@ ap@@ i@@ check@@ /@@ layout.@@ xml@@ =@@ >@@ res@@ /@@ lay@@ out@@ /@@ layout.@@ xml@@ ", "@@ ap@@ i@@ check@@ /@@ th@@ em@@ es.@@ xml@@ =@@ >@@ res@@ /@@ valu@@ es@@ /@@ th@@ em@@ es.@@ xml@@ ", "@@ ap@@ i@@ check@@ /@@ th@@ em@@ es.@@ xml@@ =@@ >@@ res@@ /@@ col@@ or@@ /@@ col@@ or@@ s.@@ xml@@ ")); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public void icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Log@@ ic@@ al@@ Channel@@ (@@ int chan@@ nel@@ , int c@@ la@@ , int command@@ , int p@@ 1, int p@@ 2, int p@@ 3@@ , java.lang.String data@@ , android.os.@@ Message res@@ ponse@@ ) { if ((m@@ Uicc@@ Profile@@ ) != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ .@@ U@@ IC@@ C@@ _RE@@ F@@ AC@@ T@@ OR@@ )) { mC@@ i.@@ icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Log@@ ic@@ al@@ Channel@@ (@@ chan@@ nel@@ , c@@ la@@ , command@@ , p@@ 1, p@@ 2, p@@ 3@@ , data@@ , m@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ .@@ EVEN@@ T_@@ TR@@ AN@@ S@@ M@@ I@@ T_@@ AP@@ D@@ U@@ _@@ LOG@@ IC@@ AL@@ _C@@ H@@ AN@@ NE@@ L_@@ D@@ ON@@ E, res@@ ponse@@ )); } else { log@@ e@@ ("@@ icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Log@@ ic@@ al@@ Channel@@ "); } }
public void not@@ if@@ y@@ I@@ con@@ D@@ one@@ (@@ long b@@ ss@@ id, com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ I@@ con@@ Ev@@ ent i@@ con@@ Event@@ ) throw@@ s java.io.IOException { java.lang.String fil@@ en@@ am@@ e = null@@ ; byte@@ [] dat@@ a = null@@ ; if (i@@ con@@ Ev@@ ent != null@@ ) { dat@@ a = ret@@ ri@@ e@@ ve@@ I@@ con@@ (i@@ con@@ Event@@ ); fil@@ en@@ am@@ e = i@@ con@@ Ev@@ ent.get@@ File@@ Name@@ (); } m@@ Callback@@ s.@@ on@@ I@@ con@@ Response@@ (b@@ ss@@ id, fil@@ en@@ ame@@ , data@@ ); }
private boolean is@@ Default@@ Method@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d j@@ Method@@ ) { assert j@@ M@@ etho@@ d != null@@ ; assert (@@ j@@ Method@@ .get@@ En@@ c@@ lo@@ sing@@ Type@@ ()) instanceof com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Interface@@ ; return (!(@@ j@@ Method@@ .is@@ Abstract@@ ())) && (!(@@ j@@ Method@@ .is@@ St@@ ati@@ c@@ ())); }
public static synchronized com.android.builder.@@ s@@ dk@@ .@@ Sdk@@ Load@@ er get@@ Load@@ er(@@ @com.android.annotations.NonNull java.io.File s@@ dk@@ Location@@ , @com.android.annotations.@@ Null@@ able java.io.File n@@ dk@@ Location@@ ) { if ((@@ (com.android.@@ builder.@@ s@@ dk@@ .@@ Default@@ Sdk@@ Load@@ er.@@ s@@ Load@@ er@@ ) != null@@ ) && ((@@ !@@ (s@@ dk@@ Loc@@ ation.@@ equal@@ s@@ (com.android.@@ builder.@@ s@@ dk@@ .@@ Default@@ Sdk@@ Load@@ er.@@ s@@ Load@@ er.@@ m@@ Sdk@@ Location@@ ))) || (!(@@ com.google.common.@@ b@@ ase.@@ Object@@ s.@@ equal@@ (@@ n@@ dk@@ Location@@ , com.android.builder.@@ s@@ dk@@ .@@ Default@@ Sdk@@ Load@@ er.@@ s@@ Load@@ er.@@ m@@ N@@ dk@@ Location@@ )@@ ))) { throw new java.lang.Illegal@@ State@@ Exception("@@ Al@@ read@@ y create@@ d an S@@ D@@ K Load@@ er wit@@ h d@@ if@@ fer@@ ent S@@ D@@ K Path@@ "); } return com.android.builder.@@ s@@ dk@@ .@@ Default@@ Sdk@@ Load@@ er.@@ s@@ Load@@ er = new com.android.builder.@@ s@@ dk@@ .@@ Default@@ Sdk@@ Load@@ er@@ (s@@ dk@@ Location@@ , n@@ dk@@ Location@@ ); }
void dum@@ p@@ (java.io.FileDescriptor f@@ d, com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ In@@ d@@ ent@@ ing@@ P@@ r@@ int@@ W@@ rite@@ r p@@ w@@ , java.lang.String[] arg@@ s) { p@@ w@@ .@@ p@@ r@@ int@@ ln@@ (get@@ Class@@ ().get@@ Sim@@ ple@@ Name@@ ()); p@@ w@@ .@@ p@@ r@@ int@@ ln@@ ("@@ Track@@ ing int@@ er@@ fa@@ ces@@ :@@ "); p@@ w@@ .@@ in@@ cre@@ ase@@ In@@ d@@ ent@@ (); for (java.lang.String if@@ ac@@ e : m@@ Track@@ ing@@ Inter@@ fa@@ ces.@@ key@@ Set@@ ()) { p@@ w@@ .@@ p@@ r@@ int@@ ln@@ ((@@ (@@ if@@ ac@@ e + "@@ :@@ ") + (m@@ Track@@ ing@@ Inter@@ fa@@ ces@@ .get@@ (@@ if@@ a@@ ce@@ )))); } p@@ w@@ .@@ dec@@ re@@ ase@@ In@@ d@@ ent@@ (); }
private android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m ac@@ ti@@ v@@ ate@@ () throw@@ s IpSec@@ Manager.@@ Resource@@ Un@@ ava@@ il@@ able@@ Exception, IpSec@@ Manager.@@ S@@ pi@@ Un@@ ava@@ il@@ able@@ Exception, java.io.IOException { synchronized@@ (@@ this@@ ) { try { android.net.@@ I@@ IpSec@@ Ser@@ vice s@@ v@@ c = get@@ IpSec@@ Service@@ (); android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ pon@@ se result = s@@ v@@ c.@@ create@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (m@@ Config@@ , new android.os.@@ Bin@@ der@@ ()); int statu@@ s = result.@@ stat@@ us@@ ; check@@ Result@@ Statu@@ s(@@ stat@@ us@@ ); m@@ Resource@@ Id = result.@@ resource@@ Id@@ ; android.util.Log.d@@ (android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ TAG, ("@@ Ad@@ de@@ d Tr@@ an@@ s@@ for@@ m wit@@ h Id " + (m@@ Resource@@ Id@@ ))); mC@@ lose@@ G@@ u@@ ard@@ .@@ open@@ ("@@ build@@ "); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ As@@ Runtime@@ Exception@@ (); } } return this@@ ; }
public void test@@ In@@ stall@@ _@@ w@@ ith@@ W@@ or@@ k@@ ing@@ Dir@@ () throw@@ s java.lang.Exception { java.io.File work@@ ing@@ Di@@ r = in@@ stall@@ er.get@@ W@@ or@@ k@@ ing@@ Dir@@ (); assert@@ True@@ (@@ work@@ ing@@ Dir@@ .m@@ k@@ d@@ ir@@ ()); libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er@@ Test.@@ create@@ File@@ (@@ new java.io.File@@ (@@ work@@ ing@@ Dir@@ , "@@ my@@ File@@ "), new byte@@ []{ '@@ a@@ ' }); libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le b@@ und@@ le = libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er@@ Test.@@ create@@ Valid@@ TimeZone@@ Bund@@ le@@ (@@ libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er@@ Test.@@ NE@@ W@@ _@@ R@@ UL@@ E@@ S_@@ V@@ E@@ RS@@ I@@ ON@@ , 1); assert@@ Equal@@ s(@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er.@@ IN@@ STA@@ L@@ L@@ _S@@ U@@ C@@ CE@@ SS@@ , in@@ stall@@ er.@@ in@@ stall@@ With@@ Error@@ Code@@ (b@@ und@@ le@@ .get@@ Bytes@@ ())); assert@@ Bund@@ le@@ In@@ st@@ al@@ le@@ d@@ (b@@ und@@ le@@ ); }
private boolean send@@ Device@@ List@@ Monitor@@ ing@@ Request@@ () throw@@ s com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { byte@@ [] requ@@ est = com.android.ddmlib.@@ Adb@@ Hel@@ per@@ .@@ for@@ m@@ Adb@@ Request@@ ("@@ ho@@ st@@ :@@ tr@@ ack@@ -@@ de@@ vices@@ "); try { com.android.ddmlib.@@ Adb@@ Helper.@@ write@@ (m@@ M@@ ain@@ Adb@@ Connection@@ , request@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ Adb@@ Res@@ pon@@ se res@@ p = com.android.ddmlib.@@ Adb@@ Helper.@@ read@@ Adb@@ Response@@ (m@@ M@@ ain@@ Adb@@ Connection@@ , false@@ ); if ((@@ res@@ p.@@ io@@ Su@@ ccess@@ ) == false@@ ) { com.android.ddmlib.@@ Log.@@ e@@ ("@@ Device@@ Monitor@@ ", "@@ Faile@@ d to re@@ ad th@@ e ad@@ b res@@ ponse@@ !@@ "); m@@ M@@ ain@@ Adb@@ Connection@@ .@@ close(); throw new java.io.IO@@ Exception("@@ Faile@@ d to re@@ ad th@@ e ad@@ b res@@ ponse@@ !@@ "); } if ((@@ res@@ p.@@ ok@@ ay@@ ) == false@@ ) { com.android.ddmlib.@@ Log.@@ e@@ ("@@ Device@@ Monitor@@ ", ("@@ ad@@ b ref@@ u@@ se@@ d request@@ : " + (@@ res@@ p.@@ message@@ ))); } return res@@ p.@@ ok@@ ay@@ ; } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ e@@ ("@@ Device@@ Monitor@@ ", "@@ S@@ end@@ ing Track@@ ing requ@@ est fa@@ ile@@ d@@ !@@ "); m@@ M@@ ain@@ Adb@@ Connection@@ .@@ close(); throw e@@ ; } }
@@@ android.@@ annotation.@@ Null@@ able public android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation sele@@ ct@@ Network@@ (@@ java.util.List<@@ com.android.server.@@ w@@ if@@ i.@@ Scan@@ D@@ eta@@ il@@ > scan@@ D@@ eta@@ il@@ s, boolean connec@@ ted@@ , boolean dis@@ connec@@ ted@@ , boolean un@@ tr@@ us@@ ted@@ Network@@ Al@@ low@@ ed@@ ) { m@@ Connec@@ t@@ able@@ Network@@ s.@@ clear@@ (); if ((@@ scan@@ D@@ eta@@ il@@ s.@@ size@@ ()) == 0) { local@@ Log@@ ("@@ E@@ mp@@ t@@ y connec@@ tivi@@ t@@ y s@@ c@@ an result@@ "); return null@@ ; } if ((m@@ Current@@ Network@@ ) == null@@ ) { mC@@ urrent@@ Net@@ wor@@ k = m@@ W@@ if@@ i@@ Config@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ (m@@ W@@ if@@ i@@ Info@@ .get@@ Network@@ Id@@ ()); } if ((m@@ Current@@ B@@ ss@@ id@@ ) == null@@ ) { mC@@ urrent@@ B@@ s@@ si@@ d = m@@ W@@ if@@ i@@ Info@@ .get@@ B@@ SS@@ ID@@ (); } if (!(@@ is@@ Network@@ Selection@@ Ne@@ ed@@ ed@@ (s@@ can@@ D@@ eta@@ il@@ s, connec@@ ted@@ , dis@@ connec@@ ted@@ ))) { return null@@ ; } update@@ S@@ av@@ ed@@ Network@@ Selection@@ Status@@ (); update@@ B@@ ss@@ id@@ B@@ l@@ ack@@ list@@ (); java.util.List<@@ com.android.server.@@ w@@ if@@ i.@@ Scan@@ D@@ eta@@ il@@ > fil@@ ter@@ ed@@ Scan@@ D@@ eta@@ il@@ s = fil@@ ter@@ Scan@@ Result@@ s(@@ scan@@ D@@ eta@@ il@@ s); if ((@@ fil@@ ter@@ ed@@ Scan@@ D@@ eta@@ il@@ s.@@ size@@ ()) == 0) { return null@@ ; } update@@ Network@@ S@@ core@@ Cach@@ e@@ (@@ fil@@ ter@@ ed@@ Scan@@ D@@ eta@@ il@@ s); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation sele@@ c@@ ted@@ Net@@ wor@@ k = null@@ ; for (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ .@@ Network@@ E@@ valu@@ at@@ or register@@ ed@@ E@@ valu@@ at@@ or : m@@ E@@ valu@@ ator@@ s) { if (@@ register@@ ed@@ E@@ valu@@ at@@ or != null@@ ) { sele@@ c@@ ted@@ Net@@ wor@@ k = register@@ ed@@ E@@ valu@@ ator@@ .@@ e@@ valu@@ ate@@ Network@@ s(@@ scan@@ D@@ eta@@ il@@ s, mC@@ urrent@@ Network@@ , mC@@ urrent@@ B@@ ss@@ id, connec@@ ted@@ , un@@ tr@@ us@@ ted@@ Network@@ Al@@ low@@ ed@@ , m@@ Network@@ S@@ core@@ Cach@@ e@@ , m@@ Connec@@ t@@ able@@ Network@@ s); if (@@ sele@@ c@@ ted@@ Net@@ wor@@ k != null@@ ) { break@@ ; } } } if (@@ sele@@ c@@ ted@@ Net@@ wor@@ k != null@@ ) { mC@@ urrent@@ Net@@ wor@@ k = sele@@ c@@ ted@@ Network@@ ; mC@@ urrent@@ B@@ s@@ si@@ d = sele@@ c@@ ted@@ Network@@ .get@@ Network@@ Selection@@ Status@@ ().get@@ C@@ and@@ id@@ ate@@ ().@@ B@@ SS@@ ID@@ ; m@@ L@@ ast@@ Network@@ Selection@@ Time@@ St@@ am@@ p = mC@@ lock@@ .get@@ E@@ l@@ ap@@ sed@@ S@@ in@@ ce@@ B@@ oot@@ Milli@@ s(); } return sele@@ c@@ ted@@ Network@@ ; }
private java.lang.String get@@ W@@ if@@ i@@ M@@ eter@@ ed@@ Statu@@ s(@@ java.lang.String ss@@ id@@ ) throw@@ s java.lang.Exception { final java.lang.String com@@ man@@ d = "@@ c@@ m@@ d net@@ po@@ lic@@ y li@@ s@@ t w@@ if@@ i@@ -@@ network@@ s@@ "; final java.lang.String po@@ lic@@ y@@ Str@@ ing = run@@ Sh@@ ell@@ Command@@ (m@@ In@@ strument@@ ation@@ , command@@ ); final java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er m = java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ compile@@ ((("@@ ^@@ " + ss@@ id@@ ) + "@@ ;@@ (@@ true@@ |@@ false@@ |@@ n@@ one@@ )@@ $@@ "), ((@@ java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ M@@ UL@@ TI@@ L@@ IN@@ E@@ ) | (java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ UN@@ I@@ X_@@ L@@ IN@@ E@@ S@@ )@@ )).@@ match@@ er(@@ po@@ lic@@ y@@ String@@ ); if (!(m@@ .@@ find@@ ())) { throw new java.lang.Runtime@@ Exception("@@ U@@ ne@@ x@@ pec@@ ted for@@ ma@@ t f@@ ro@@ m c@@ m@@ d net@@ po@@ lic@@ y@@ "); } return m.@@ gro@@ up@@ (1@@ ); }
private boolean register@@ St@@ a@@ Iface@@ Callback@@ () { synchronized@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ V@@ e@@ n@@ do@@ r@@ H@@ al.@@ s@@ Lock) { if ((m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ ) == null@@ ) return b@@ oo@@ l@@ Result@@ (@@ false@@ ); try { android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Statu@@ s statu@@ s = m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ .@@ register@@ Event@@ Callback@@ (m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ Event@@ Callback@@ ); return (@@ statu@@ s.@@ code@@ ) == (android.@@ hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Status@@ Co@@ d@@ e.@@ S@@ U@@ C@@ CE@@ SS@@ ); } catch (android.os.RemoteException e) { handle@@ Remote@@ Exception(@@ e); return false@@ ; } } }
private void check@@ Not@@ F@@ re@@ ed@@ () { if (!(@@ b@@ lock@@ .is@@ Valid@@ ())) { throw new java.lang.Illegal@@ State@@ Exception("@@ buff@@ er w@@ a@@ s f@@ re@@ ed@@ "); } }
@@@ org.@@ gradle.@@ api.@@ t@@ ask@@ s.@@ Task@@ Ac@@ tion protected void do@@ F@@ ull@@ Task@@ Action@@ () throw@@ s com.android.builder.@@ pack@@ ag@@ ing.@@ D@@ up@@ li@@ cate@@ File@@ Exception, com.android.builder.@@ pack@@ ag@@ ing.@@ Pack@@ ag@@ er@@ Exception, com.android.builder.@@ pack@@ ag@@ ing.@@ Sign@@ ing@@ Exception, com.android.ide.common.@@ sign@@ ing.@@ Key@@ too@@ l@@ Exception, java.io.File@@ Not@@ F@@ ound@@ Exception { final java.util.@@ reg@@ ex@@ .@@ P@@ atter@@ n p@@ atter@@ n = java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ compile@@ ((("@@ resour@@ ces@@ -@@ " + (get@@ Output@@ Base@@ Name@@ ())) + "@@ -@@ (@@ .@@ *@@ ).@@ ap@@ _@@ ")); java.util.List<@@ java.lang.String> un@@ process@@ ed@@ S@@ pli@@ t@@ s = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (s@@ pli@@ t@@ s); for (@@ java.io.File fi@@ le : input@@ Fil@@ es) { java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er match@@ er = p@@ attern@@ .@@ match@@ er@@ (file@@ .getName@@ ()); if ((@@ match@@ er.@@ match@@ es@@ ()) && (is@@ Ab@@ i@@ S@@ pli@@ t@@ (file@@ .getName@@ ()))) { java.lang.String apk@@ Name = get@@ Apk@@ Name@@ (m@@ atch@@ er.@@ gro@@ up@@ (1@@ )); java.io.File out@@ File = new java.io.File@@ (get@@ Output@@ Directory@@ (), apk@@ Name); get@@ Builder@@ ()@@ .@@ package@@ Apk@@ (file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ (), null@@ , com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ <@@ java.io.File@@ >@@ o@@ f@@ (), com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ <@@ java.io.File@@ >@@ o@@ f@@ (), null@@ , get@@ J@@ n@@ i@@ Folder@@ s@@ (), get@@ Merg@@ ing@@ Folder@@ (), com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ Set@@ .@@ o@@ f@@ (m@@ atch@@ er.@@ gro@@ up@@ (1@@ )), is@@ J@@ n@@ i@@ Debug@@ g@@ able@@ (), get@@ Sign@@ ing@@ Config@@ (), get@@ Pack@@ ag@@ ing@@ Option@@ s@@ (), get@@ Pack@@ ag@@ ing@@ Option@@ s@@ Filter@@ (), out@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); un@@ process@@ ed@@ S@@ pli@@ ts.@@ remove@@ (m@@ atch@@ er.@@ gro@@ up@@ (1@@ )); } } if (!(@@ un@@ process@@ ed@@ S@@ pli@@ ts.@@ isEmpty@@ ())) { java.lang.String mess@@ age = "@@ Co@@ ul@@ d not fin@@ d resour@@ ce for " + (@@ com.google.common.@@ b@@ ase.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ ,@@ ").@@ j@@ o@@ in@@ (@@ un@@ process@@ ed@@ S@@ pli@@ ts@@ )); get@@ Logg@@ er@@ ().@@ error@@ (m@@ ess@@ age@@ ); throw new java.lang.Illegal@@ State@@ Exception@@ (m@@ ess@@ age@@ ); } } }
private dum@@ p@@ Java@@ (java.io.FileDescriptor f@@ d, com.android.bluetooth.@@ b@@ t@@ service@@ .@@ P@@ r@@ int@@ write@@ r w@@ ri@@ ter@@ , java.lang.String[] arg@@ s) { com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Bluetooth@@ Lo@@ g lo@@ g = new com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Bluetooth@@ Log@@ (); for (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Profile@@ Ser@@ vice pro@@ fi@@ le : m@@ Pro@@ fil@@ es) { pro@@ file.@@ dum@@ p@@ Pro@@ to@@ (@@ log@@ ); } w@@ ri@@ ter.@@ write@@ (@@ log.@@ toString@@ ()); w@@ ri@@ ter.@@ f@@ lu@@ sh@@ (); }
public void set@@ Index@@ (@@ int i@@ , int index@@ ) { this@@ .@@ index@@ [@@ posi@@ tion@@ ] = index@@ ; }
public final boolean is@@ Access@@ Mode@@ Sup@@ ported@@ (java.lang.@@ invok@@ e.@@ Var@@ Hand@@ le.@@ Access@@ Mod@@ e ac@@ cess@@ Mode@@ ) { return ac@@ cess@@ Info@@ .is@@ Access@@ Mode@@ Sup@@ ported@@ (@@ ac@@ cess@@ Mode@@ ); }
private int parse@@ P@@ in@@ P@@ u@@ k@@ Error@@ Result@@ (android.os.@@ As@@ ync@@ Res@@ ult ar@@ ) { java.lang.Integ@@ er result = ((@@ java.lang.Integ@@ er@@ ) (@@ ar.@@ result@@ )); if (@@ result == null@@ ) { return -1@@ ; } else { int at@@ tem@@ p@@ ts@@ Re@@ main@@ ing = result@@ ; log@@ (("@@ parse@@ P@@ in@@ P@@ u@@ k@@ Error@@ Result@@ : at@@ tem@@ p@@ ts@@ Re@@ main@@ ing@@ =@@ " + at@@ tem@@ p@@ ts@@ Re@@ main@@ ing@@ )); return at@@ tem@@ p@@ ts@@ Re@@ main@@ ing@@ ; } }
public static java.lang.String get@@ Sign@@ ature@@ Attribute@@ (@@ java.lang.Object ob@@ j@@ ) { java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d method@@ ; try { java.lang.@@ Class@@ <@@ ?@@ > c = java.lang.@@ Class@@ .@@ for@@ Name@@ ("@@ libcore.@@ ref@@ le@@ ct.@@ Annot@@ ation@@ Access@@ "); m@@ etho@@ d = c@@ .get@@ Dec@@ l@@ ar@@ ed@@ Method@@ ("@@ get@@ Sign@@ ature@@ ", java.lang.@@ ref@@ le@@ ct.@@ Annot@@ ated@@ Element@@ .@@ class@@ ); method@@ .set@@ Ac@@ ces@@ si@@ ble@@ (@@ true@@ ); } catch (java.lang.Exception ex@@ ) { ex@@ .@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (java.lang.@@ System.@@ out); return "@@ <@@ un@@ k@@ no@@ wn@@ >@@ "; } try { return ((@@ java.lang.String@@ ) (m@@ ethod@@ .@@ invok@@ e@@ (@@ null@@ , ob@@ j@@ ))); } catch (java.lang.@@ Illegal@@ Access@@ Exception ex@@ ) { throw new java.lang.Runtime@@ Exception(@@ ex@@ ); } catch (java.lang.@@ ref@@ le@@ ct.@@ In@@ vo@@ cation@@ Target@@ Exception ex@@ ) { throw new java.lang.Runtime@@ Exception(@@ ex@@ ); } }
@java.lang.Override public boolean p@@ r@@ int@@ (@@ java.io.@@ P@@ r@@ int@@ Stream p@@ r@@ int@@ er, java.lang.String valu@@ e) { p@@ r@@ int@@ er.@@ p@@ r@@ int@@ ((("@@ \"@@ " + (@@ valu@@ e.@@ re@@ pla@@ ce@@ ("@@ \"@@ ", "@@ \@@ \"@@ "@@ ))) + "@@ \"@@ ")); return true@@ ; }
@java.lang.Override public void b@@ in@@ der@@ Di@@ ed@@ () { m@@ Ims@@ Service@@ Prox@@ y = null@@ ; m@@ U@@ t = null@@ ; m@@ Con@@ fig = null@@ ; m@@ E@@ c@@ b@@ m = null@@ ; m@@ Multi@@ En@@ dp@@ o@@ int = null@@ ; if ((m@@ Context@@ ) != null@@ ) { android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (com.android.@@ ims.@@ Ims@@ Manager.@@ AC@@ TION_@@ I@@ MS@@ _S@@ ER@@ VIC@@ E_@@ D@@ O@@ W@@ N@@ ); int@@ ent.@@ put@@ Extra@@ (com.android.@@ ims.@@ Ims@@ Manager.@@ EX@@ TR@@ A@@ _P@@ H@@ ON@@ E_@@ ID@@ , m@@ Phone@@ Id); m@@ Context.@@ send@@ Broadcast@@ (@@ new android.content.@@ Intent@@ (@@ int@@ ent@@ )); } }
public void test@@ VF@@ E@@ 7@@ () { try { new do@@ t.@@ junit.@@ op@@ cod@@ es.@@ i@@ get@@ _@@ w@@ ide.@@ d.@@ T_@@ i@@ get@@ _@@ wid@@ e@@ _@@ 12@@ ().@@ run@@ (); fail@@ ("@@ expec@@ ted a Illegal@@ Access@@ Error excepti@@ on@@ "); } catch (java.lang.@@ Illegal@@ Access@@ Error e) { } }
public native void b@@ ind@@ (java.io.FileDescriptor f@@ d, java.net.Inet@@ Address addres@@ s, int port@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.net.@@ Socket@@ Exception;
public java.text.@@ At@@ Z ted@@ Char@@ ac@@ ter@@ I@@ ter@@ at@@ or for@@ mat@@ To@@ Char@@ ac@@ ter@@ I@@ terator@@ (@@ java.lang.Object ob@@ ject@@ ) { if (!(@@ ob@@ ject instanceof java.lang.@@ Number@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ ob@@ ject not a Number@@ : " + (@@ ob@@ jec@@ t.get@@ Class@@ ()))); } java.lang.@@ Num@@ b@@ er num@@ b@@ er = ((@@ java.lang.@@ Number@@ ) (@@ ob@@ ject@@ )); libcore.@@ icu@@ .@@ Native@@ Dec@@ im@@ al@@ Format@@ .@@ Field@@ Posi@@ tion@@ I@@ ter@@ at@@ or f@@ p@@ I@@ ter = new libcore.@@ icu@@ .@@ Native@@ Dec@@ im@@ al@@ Format@@ .@@ Field@@ Posi@@ tion@@ I@@ terator@@ (); java.lang.String tex@@ t@@ ; if ((@@ num@@ b@@ er instanceof java.@@ m@@ ath.@@ B@@ ig@@ Integ@@ er@@ ) || (@@ num@@ b@@ er instanceof java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ )) { tex@@ t = new java.lang.String@@ (@@ libcore.@@ icu@@ .@@ Native@@ Dec@@ im@@ al@@ Format@@ .@@ for@@ mat@@ Dig@@ it@@ List@@ (@@ this@@ .@@ addres@@ s, num@@ b@@ er.@@ toString@@ (), f@@ p@@ I@@ ter@@ )); } else if ((@@ num@@ b@@ er instanceof java.lang.@@ D@@ ouble@@ ) || (@@ num@@ b@@ er instanceof java.lang.@@ Float@@ )) { do@@ ub@@ le d@@ v = num@@ ber@@ .@@ do@@ ub@@ le@@ Value@@ (); tex@@ t = new java.lang.String@@ (@@ libcore.@@ icu@@ .@@ Native@@ Dec@@ im@@ al@@ Format@@ .@@ for@@ mat@@ D@@ ouble@@ (@@ this@@ .@@ addres@@ s, d@@ v@@ , f@@ p@@ I@@ ter@@ )); } else { long l@@ v = num@@ ber@@ .@@ long@@ Value@@ (); tex@@ t = new java.lang.String@@ (@@ libcore.@@ icu@@ .@@ Native@@ Dec@@ im@@ al@@ Format@@ .@@ for@@ mat@@ Long@@ (@@ this@@ .@@ addres@@ s, l@@ v@@ , f@@ p@@ I@@ ter@@ )); } java.text.@@ At@@ At@@ At@@ At@@ At@@ At@@ At@@ ing a@@ s = new java.text.@@ At@@ lang.@@ ted@@ String(@@ tex@@ t@@ ); while (f@@ p@@ I@@ ter.@@ next@@ ()) { java.text.@@ Format@@ .@@ Fi@@ el@@ d fi@@ el@@ d = f@@ p@@ I@@ ter.@@ field@@ (); a@@ s.add@@ Attribute@@ (@@ field@@ , field@@ , f@@ p@@ I@@ ter.@@ start@@ (), f@@ p@@ I@@ ter.@@ li@@ m@@ it@@ ()); } return a@@ s.get@@ I@@ terator@@ (); }
public android.net.@@ w@@ if@@ i.@@ I@@ Ap@@ Inter@@ face set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ () { if (!(@@ start@@ H@@ al@@ (@@ false@@ ))) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ TAG, "@@ Faile@@ d to st@@ ar@@ t H@@ A@@ L for A@@ P mode@@ "); return null@@ ; } return m@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ (); }
private static native void native@@ _@@ d@@ raw@@ R@@ ec@@ t@@ (@@ long native@@ Can@@ va@@ s, android.@@ g@@ raphic@@ s.@@ R@@ ec@@ t@@ F re@@ ct@@ , long native@@ P@@ a@@ int@@ );
private void g@@ r@@ ant@@ Default@@ Permission@@ Exception@@ s@@ (@@ int user@@ Id) { synchronized@@ (m@@ Service.@@ m@@ Pack@@ ag@@ es) { m@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.server.@@ p@@ m.@@ Default@@ Permission@@ G@@ r@@ ant@@ Polic@@ y.@@ MS@@ G@@ _RE@@ AD@@ _@@ DE@@ FA@@ UL@@ T_@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ EX@@ CE@@ P@@ TION@@ S@@ ); if ((m@@ G@@ r@@ ant@@ Exception@@ s) == null@@ ) { m@@ G@@ r@@ ant@@ Exception@@ s = read@@ Default@@ Permission@@ Exception@@ s@@ L@@ P@@ w@@ (); } java.util.@@ Set@@ <java.lang.String@@ > per@@ mission@@ s = null@@ ; final int excepti@@ on@@ Coun@@ t = m@@ G@@ r@@ ant@@ Exception@@ s.@@ size@@ (); for (@@ int i = 0; i < excepti@@ on@@ Count@@ ; i++) { java.lang.String package@@ Name = m@@ G@@ r@@ ant@@ Exception@@ s.@@ key@@ At@@ (i@@ ); android.content.@@ p@@ m.@@ Package@@ Par@@ ser.@@ Pack@@ age p@@ k@@ g = get@@ System@@ Package@@ L@@ P@@ r@@ (@@ package@@ Name); java.util.List<@@ com.android.server.@@ p@@ m.@@ Default@@ Permission@@ G@@ r@@ ant@@ Polic@@ y.@@ Default@@ Permission@@ G@@ r@@ ant@@ > per@@ mission@@ G@@ r@@ ant@@ s = m@@ G@@ r@@ ant@@ Exception@@ s.@@ value@@ At@@ (i@@ ); final int per@@ mission@@ G@@ r@@ ant@@ Coun@@ t = per@@ mission@@ G@@ r@@ an@@ ts.@@ size@@ (); for (@@ int j = 0; j < per@@ mission@@ G@@ r@@ ant@@ Count@@ ; j@@ ++) { com.android.server.@@ p@@ m.@@ Default@@ Permission@@ G@@ r@@ ant@@ Polic@@ y.@@ Default@@ Permission@@ G@@ r@@ an@@ t per@@ mission@@ G@@ r@@ an@@ t = per@@ mission@@ G@@ r@@ ant@@ s.get@@ (@@ j@@ ); if (@@ per@@ mission@@ s == null@@ ) { per@@ mission@@ s = new android.util.@@ Array@@ Set@@ (); } else { per@@ mission@@ s.@@ clear@@ (); } per@@ mission@@ s.@@ add(@@ per@@ mission@@ G@@ r@@ an@@ t.@@ name@@ ); g@@ r@@ ant@@ Runtime@@ Permission@@ s@@ L@@ P@@ w@@ (p@@ kg@@ , per@@ mission@@ s, per@@ mission@@ G@@ r@@ an@@ t.@@ fix@@ ed@@ , false@@ , user@@ Id); } } } } }
public void test@@ Un@@ us@@ ed@@ H@@ ig@@ h@@ li@@ g@@ h@@ ting@@ _@@ En@@ dp@@ o@@ int@@ Class@@ () { do@@ Test@@ (); }
@java.lang.Override public void end@@ () { if ((@@ event@@ Coun@@ t.@@ dec@@ re@@ ment@@ And@@ Get@@ ()) == 0) { try { com.android.sched.util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ On@@ ly@@ Tr@@ ac@@ er.@@ en@@ ab@@ le.@@ set@@ (java.lang.@@ Boole@@ an@@ .@@ F@@ AL@@ S@@ E); com.android.sched.util.@@ p@@ r@@ int@@ .@@ Data@@ Mode@@ l@@ List@@ Adapter@@ <@@ com.android.sched.util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c@@ > re@@ por@@ t = new com.android.sched.util.@@ p@@ r@@ int@@ .@@ Data@@ Mode@@ l@@ List@@ Adapter@@ <@@ com.android.sched.util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c@@ >@@ (@@ new com.android.sched.util.@@ p@@ r@@ int@@ .@@ Data@@ Mode@@ l@@ List@@ Adap@@ ter.@@ Con@@ ver@@ ter@@ <@@ com.android.sched.util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c@@ >@@ () { @java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.sched.util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ Mode@@ l app@@ ly@@ (com.android.s@@ ched.@@ util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c data@@ ) { return new com.android.sched.util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ Mode@@ l@@ (d@@ ata@@ ); } }); for (@@ final com.android.sched.util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c stati@@ s@@ ti@@ c@@ s@@ By@@ Id@@ .@@ valu@@ es@@ ()) { if (@@ stati@@ s@@ ti@@ c.@@ is@@ Enabled@@ ()) { re@@ por@@ t.@@ add(@@ stati@@ s@@ ti@@ c@@ ); } } java.io.@@ P@@ r@@ int@@ Stream str@@ e@@ am = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (com.android.s@@ ched.@@ util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ On@@ ly@@ Tr@@ ac@@ er.@@ S@@ T@@ RE@@ AM@@ ).get@@ P@@ r@@ int@@ Stream@@ (); com.android.sched.util.@@ p@@ r@@ int@@ .@@ P@@ r@@ int@@ er p@@ r@@ int@@ er = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (com.android.s@@ ched.@@ util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ On@@ ly@@ Tr@@ ac@@ er.@@ P@@ R@@ IN@@ TER@@ ).@@ create@@ (@@ str@@ eam@@ ).@@ add@@ Resource@@ Bund@@ l@@ es@@ (java.util.@@ Resource@@ Bund@@ le@@ .get@@ Bund@@ le@@ (com.android.s@@ ched.@@ util.@@ log.@@ stat@@ s.@@ St@@ ati@@ s@@ ti@@ c@@ .@@ class@@ .get@@ Can@@ on@@ ic@@ al@@ Name@@ ()@@ ), java.util.@@ Resource@@ Bund@@ le@@ .get@@ Bund@@ le@@ (com.android.s@@ ched.@@ util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ On@@ ly@@ Tr@@ ac@@ er@@ .@@ class@@ .get@@ Can@@ on@@ ic@@ al@@ Name@@ ())); try { p@@ r@@ int@@ er.@@ p@@ r@@ int@@ (re@@ port@@ ); } final@@ l@@ y { str@@ eam@@ .@@ close(); } } final@@ l@@ y { com.android.sched.util.@@ log.@@ St@@ ati@@ s@@ ti@@ c@@ On@@ ly@@ Tr@@ ac@@ er.@@ en@@ ab@@ le.@@ set@@ (java.lang.@@ Boole@@ an@@ .@@ TR@@ U@@ E); } }
@javax.annotation.@@ N@@ on@@ null private void run@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String main@@ Class@@ , @javax.annotation.@@ N@@ on@@ null java.io.File@@ [] dex@@ Fil@@ es) throw@@ s java.lang.Exception { java.util.List<@@ com.android.jack.test.@@ run@@ ner.@@ Runtime@@ Runner@@ > run@@ ner@@ Lis@@ t = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ list@@ Runtime@@ Test@@ Runner@@ s@@ (@@ null@@ ); for (com.android.jack.@@ test.@@ run@@ ner.@@ Runtime@@ Run@@ ne@@ r run@@ ne@@ r : run@@ ner@@ List@@ ) { junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 0, run@@ ner.@@ run@@ J@@ Un@@ it@@ (@@ new java.lang.String@@ [0@@ ]@@ , Abstract@@ TestTools.@@ J@@ UN@@ I@@ T_@@ R@@ UN@@ N@@ ER@@ _N@@ AME@@ , new java.lang.String@@ []{ main@@ Clas@@ s }@@ , dex@@ Fil@@ es@@ )); } }
@java.lang.Override public java.lang.String toString@@ () { return ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ("@@ Sign@@ al@@ Str@@ ength@@ :@@ " + " ") + (m@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ )) + " ") + (m@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ )) + " ") + (m@@ C@@ dm@@ a@@ D@@ b@@ m@@ )) + " ") + (m@@ C@@ dm@@ a@@ E@@ c@@ io@@ )) + " ") + (m@@ E@@ v@@ do@@ D@@ b@@ m@@ )) + " ") + (m@@ E@@ v@@ do@@ E@@ c@@ io@@ )) + " ") + (m@@ E@@ v@@ do@@ S@@ n@@ r@@ )) + " ") + (m@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ p@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ q@@ )) + " ") + (m@@ L@@ te@@ R@@ ss@@ n@@ r@@ )) + " ") + (m@@ L@@ te@@ C@@ q@@ i@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ q@@ )) + " ") + (m@@ T@@ d@@ S@@ c@@ dm@@ a@@ Rs@@ c@@ p@@ )) + " ") + (is@@ G@@ s@@ m ? "@@ g@@ sm@@ |@@ l@@ te@@ " : "@@ c@@ dm@@ a@@ "); }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d t@@ ) throw@@ s java.lang.Exception { for (com.android.jack.@@ ir.ast.J@@ Param@@ et@@ er par@@ am : t.get@@ Param@@ s@@ ()) { com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info in@@ fo = param@@ .get@@ Source@@ Info@@ (); if (in@@ fo != (com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ )) { param@@ .set@@ Source@@ Info@@ (s@@ ource@@ Info@@ Fa@@ ctor@@ y.@@ create@@ (@@ Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ _C@@ O@@ L@@ U@@ M@@ N@@ _N@@ U@@ M@@ B@@ ER@@ , Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ _C@@ O@@ L@@ U@@ M@@ N@@ _N@@ U@@ M@@ B@@ ER@@ , Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ _@@ L@@ IN@@ E_@@ N@@ U@@ M@@ B@@ ER@@ , Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ _@@ L@@ IN@@ E_@@ N@@ U@@ M@@ B@@ ER@@ , info@@ .get@@ File@@ Name@@ ())); } } }
@java.lang.Override public com.android.@@ dx.@@ io.@@ in@@ stru@@ ction@@ s.@@ De@@ cod@@ ed@@ In@@ stru@@ c@@ tion w@@ ith@@ Pro@@ to@@ Index@@ (@@ int new@@ F@@ ir@@ st@@ Index@@ , int new@@ Pro@@ to@@ Index@@ ) { return new com.android.@@ dx.@@ io.@@ in@@ stru@@ ction@@ s.@@ In@@ vok@@ e@@ P@@ ol@@ y@@ m@@ or@@ p@@ hic@@ R@@ an@@ ge@@ De@@ cod@@ ed@@ In@@ stru@@ ction@@ (get@@ Format@@ (), get@@ Op@@ code@@ (), new@@ Index@@ , get@@ Index@@ Type@@ (), a@@ , register@@ Count@@ , new@@ Pro@@ to@@ Index@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null protected com.android.sched.util.@@ config.@@ Message@@ Dig@@ est@@ Fa@@ ctor@@ y con@@ ver@@ t@@ (@@ java.security.@@ Provid@@ er.@@ Ser@@ vice service@@ ) { return new com.android.sched.util.@@ config.@@ Message@@ Dig@@ est@@ Fa@@ ctory@@ (@@ service@@ ); }
public void test@@ Can@@ cel@@ S@@ o@@ on@@ () throw@@ s java.lang.Exception { do@@ Test@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ C@@ AN@@ CE@@ L@@ _S@@ O@@ ON@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ Q@@ UE@@ ST_@@ N@@ ON@@ E, null@@ ); assert@@ Result@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ D@@ R@@ A@@ G@@ _STA@@ R@@ TED@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ ); assert@@ Result@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ ); assert@@ Result@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ EX@@ TR@@ A@@ S@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ ); }
private java.lang.String key@@ Manage@@ ment@@ To@@ String@@ (@@ int ak@@ m@@ ) { switch (@@ ak@@ m@@ ) { case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ N@@ ON@@ E : return "@@ Non@@ e@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ P@@ S@@ K : return "@@ P@@ S@@ K@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ E@@ A@@ P : return "@@ E@@ AP@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ F@@ T_@@ E@@ A@@ P : return "@@ F@@ T@@ /@@ E@@ AP@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ F@@ T_@@ P@@ S@@ K : return "@@ F@@ T@@ /@@ P@@ S@@ K@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ E@@ AP@@ _S@@ H@@ A@@ 25@@ 6 : return "@@ E@@ AP@@ -@@ S@@ H@@ A@@ 25@@ 6@@ "; case Scan@@ Res@@ ult.@@ Key@@ Manage@@ m@@ ent.@@ P@@ S@@ K@@ _S@@ H@@ A@@ 25@@ 6 : return "@@ P@@ S@@ K@@ -@@ S@@ H@@ A@@ 25@@ 6@@ "; default : return "@@ ?@@ "; } }
@com.android.annotations.NonNull public com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ vari@@ an@@ t.@@ Base@@ Variant@@ Output@@ Data get@@ Variant@@ Output@@ Data@@ () { return vari@@ ant@@ Output@@ Data@@ ; }
@org.junit.Test @@@ java.lang.Runtime@@ (f@@ ro@@ m = Runtime@@ Version@@ .@@ N@@ ) public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 00@@ 2@@ () throw@@ s java.lang.Exception { run@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 00@@ 2@@ ); }
@org.junit.Test public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 0@@ 1@@ 9@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 0@@ 1@@ 9@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public java.lang.String get@@ Device@@ S@@ o@@ f@@ t@@ war@@ e@@ Version@@ (@@ int s@@ lot@@ Index@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ I@@ Telephon@@ y telephon@@ y = get@@ I@@ Telephony@@ (); if (@@ telephon@@ y == null@@ ) return null@@ ; try { return telephon@@ y@@ .get@@ Device@@ S@@ o@@ f@@ t@@ war@@ e@@ Version@@ For@@ S@@ lot@@ (s@@ lot@@ Index@@ , get@@ Op@@ Package@@ Name@@ ()); } catch (android.os.RemoteException ex@@ ) { return null@@ ; } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception ex@@ ) { return null@@ ; } }
public void test@@ J@@ vm@@ ti@@ A@@ g@@ ent@@ App@@ Inter@@ nal@@ () throw@@ s java.lang.Exception { run@@ J@@ vm@@ ti@@ A@@ g@@ ent@@ Load@@ Test@@ ((@@ com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ I@@ Test@@ Device device@@ ,@@ java.lang.String p@@ kg@@ ,@@ java.lang.String apk@@ ,@@ java.lang.String ab@@ i@@ Name@@ ) -@@ > { try { java.lang.String set@@ A@@ g@@ ent@@ App@@ C@@ m@@ d = (("@@ c@@ m@@ d ac@@ tivi@@ t@@ y set@@ -@@ ag@@ ent@@ -@@ ap@@ p " + p@@ kg@@ ) + " ") + (android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ A@@ G@@ EN@@ T@@ ); java.lang.String set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y = device@@ .@@ exec@@ ute@@ Sh@@ ell@@ Command@@ (@@ set@@ A@@ g@@ ent@@ App@@ C@@ m@@ d@@ ); if ((@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y != null@@ ) && (!(@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y.@@ tr@@ im@@ ().@@ isEmpty@@ ()))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y@@ ); } } catch (java.lang.Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d run@@ n@@ ing set@@ -@@ ag@@ ent@@ -@@ app@@ ", e); } try { android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ run@@ At@@ t@@ ach@@ Test@@ C@@ m@@ d@@ (device@@ , p@@ kg@@ , "@@ "); } catch (java.lang.Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d ag@@ ent@@ -@@ ap@@ p att@@ ach@@ ing@@ ", e); } }); }
@java.lang.Override public long send@@ file@@ (java.io.FileDescriptor out@@ F@@ d, java.io.FileDescriptor in@@ F@@ d, android.system.@@ Int@@ 6@@ 4@@ Re@@ f offset@@ , long byte@@ Count@@ ) throw@@ s android.system.@@ ErrnoException { d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .get@@ Thread@@ Polic@@ y@@ ().@@ on@@ W@@ rite@@ To@@ Dis@@ k@@ (); return os.@@ send@@ file@@ (@@ out@@ F@@ d, in@@ F@@ d, offset@@ , byte@@ Count@@ ); }
@java.lang.Override protected java.security.@@ P@@ u@@ bli@@ c@@ Ke@@ y eng@@ ine@@ Gener@@ ate@@ P@@ u@@ bli@@ c@@ (@@ java.security.@@ spec@@ .@@ Key@@ S@@ pe@@ c key@@ Spec@@ ) throw@@ s java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception { if (@@ key@@ S@@ pe@@ c == null@@ ) { throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception("@@ key@@ S@@ pe@@ c == null@@ "); } if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ RS@@ AP@@ u@@ bli@@ c@@ Key@@ Spec@@ ) { return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ RS@@ AP@@ u@@ bli@@ c@@ Key@@ (r@@ s@@ a@@ Key@@ Spec@@ ); } else if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ X@@ 509@@ En@@ cod@@ ed@@ Key@@ Spec@@ ) { return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Key@@ (((@@ java.security.@@ spec@@ .@@ X@@ 509@@ En@@ cod@@ ed@@ Key@@ Spec@@ ) (@@ key@@ Spec@@ )), NativeCryp@@ to.@@ EV@@ P@@ _P@@ KE@@ Y_@@ get@@ EC@@ ); } throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception(("@@ M@@ us@@ t u@@ se RS@@ AP@@ u@@ bli@@ c@@ Key@@ S@@ pe@@ c or X@@ 509@@ En@@ cod@@ ed@@ Key@@ Spec@@ ; w@@ a@@ s " + (@@ key@@ Spec@@ .get@@ Class@@ ().get@@ Name@@ ()))); }
void in@@ crement@@ (@@ int im@@ p@@ ) { im@@ p = (@@ im@@ p < 0) ? 0 : im@@ p > ((@@ com.android.server.@@ not@@ if@@ ic@@ ation.@@ No@@ t@@ if@@ ic@@ ation@@ U@@ s@@ age@@ Stat@@ s.@@ Imp@@ ort@@ an@@ ce@@ H@@ ist@@ o@@ g@@ ram@@ .@@ N@@ U@@ M@@ _@@ I@@ M@@ P@@ OR@@ TA@@ N@@ CE@@ S@@ ) - 1@@ ) ? (com.android.server.@@ not@@ if@@ ic@@ ation.@@ No@@ t@@ if@@ ic@@ ation@@ U@@ s@@ age@@ Stat@@ s.@@ Imp@@ ort@@ an@@ ce@@ H@@ ist@@ o@@ g@@ ram@@ .@@ N@@ U@@ M@@ _@@ I@@ M@@ P@@ OR@@ TA@@ N@@ CE@@ S@@ ) - 1 : im@@ p@@ ; (m@@ Count@@ [@@ im@@ p@@ ]@@ )@@ ++@@ ; }
private static java.lang.String get@@ N@@ ex@@ us@@ L@@ ab@@ el@@ (com.android.s@@ dklib.@@ de@@ vices.@@ Device d@@ ) { java.lang.String name = d@@ .getName@@ (); com.android.sdklib.@@ de@@ vices.@@ S@@ cre@@ e@@ n s@@ cre@@ e@@ n = d@@ .get@@ Default@@ H@@ ardwar@@ e@@ ().get@@ S@@ cre@@ en@@ (); float l@@ eng@@ th = (@@ (@@ float@@ ) (s@@ cre@@ en@@ .get@@ Di@@ ag@@ on@@ al@@ Length@@ ())); return java.lang.String@@ .@@ for@@ mat@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ , "@@ %@@ 1@@ $@@ s (@@ %@@ 3@@ $@@ s@@ \@@ ", %@@ 2@@ $@@ s@@ )@@ ", name@@ , com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ widget@@ s.@@ Av@@ d@@ Cre@@ ation@@ P@@ res@@ ent@@ er.get@@ Resol@@ uti@@ on@@ String@@ (d@@ ), java.lang.@@ Float@@ .@@ toString@@ (@@ length@@ )); }
private synchronized void in@@ itializ@@ e@@ Access@@ Control@@ () throw@@ s java.io.IO@@ Exception, java.util.@@ M@@ is@@ sing@@ Resource@@ Exception { synchronized@@ (m@@ Lock) { if ((m@@ Access@@ Control@@ E@@ n@@ for@@ cer@@ ) == null@@ ) { m@@ Access@@ Control@@ E@@ n@@ for@@ ce@@ r = new com.android.s@@ e.@@ security.@@ Access@@ Control@@ E@@ n@@ for@@ cer@@ (@@ this@@ ); } try { m@@ Access@@ Control@@ E@@ n@@ for@@ c@@ er.@@ in@@ itializ@@ e@@ (); } catch (java.io.IOException e) { m@@ Access@@ Control@@ E@@ n@@ for@@ ce@@ r = null@@ ; throw e@@ ; } catch (java.util.@@ M@@ is@@ sing@@ Resource@@ Exception e) { m@@ Access@@ Control@@ E@@ n@@ for@@ ce@@ r = null@@ ; throw e@@ ; } }
public void test_@@ set@@ N@@ an@@ _@@ e@@ mpty@@ String@@ () throw@@ s java.lang.Exception { java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(); d@@ fs.@@ set@@ N@@ a@@ N@@ ("@@ "); java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ (); d@@ f@@ .set@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ d@@ f@@ s); d@@ f@@ .@@ for@@ mat@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ N@@ a@@ N@@ ); }
public static int $@@ no@@ in@@ line@@ $@@ float@@ Con@@ di@@ tion@@ Not@@ Equal@@ O@@ ne@@ (@@ float f@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ f > 4@@ 2.@@ 0F@@ ) == true ? 1@@ 3 : 5@@ 4@@ ; }
public int wait@@ p@@ id@@ (@@ int p@@ id, android.util.@@ M@@ ut@@ able@@ In@@ t statu@@ s, int option@@ s) throw@@ s android.system.@@ ErrnoException { return os.@@ wait@@ p@@ id@@ (p@@ id, statu@@ s, option@@ s); }
public void set@@ Al@@ low@@ Ob@@ f@@ us@@ cation@@ () { mo@@ d@@ if@@ i@@ er |@@ = com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Ke@@ e@@ p@@ Mo@@ d@@ if@@ i@@ er.@@ AL@@ LO@@ W@@ _@@ O@@ B@@ F@@ US@@ C@@ A@@ TION@@ ; }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public int get@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ Statu@@ s(@@ android.content.@@ p@@ m.@@ Package@@ Manager package@@ Manager@@ , java.lang.String package@@ Name@@ ) { if ((m@@ Uicc@@ Profile@@ ) != null@@ ) { return m@@ Uicc@@ Profile@@ .get@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ Status@@ (@@ package@@ Manager@@ , package@@ Name); } else { return android.telephony.@@ Telephony@@ Manager.@@ C@@ AR@@ R@@ I@@ ER@@ _P@@ R@@ I@@ V@@ IL@@ E@@ G@@ E_@@ STA@@ T@@ US@@ _@@ R@@ UL@@ E@@ S@@ _N@@ O@@ T_@@ LOA@@ DE@@ D@@ ; } }
private native int p@@ read@@ Bytes@@ (java.io.FileDescriptor f@@ d, java.lang.Object buff@@ er, int buff@@ er@@ Offset@@ , int byte@@ Count@@ , long offset@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.io.@@ Inter@@ rup@@ ted@@ IO@@ Exception;
private void run@@ W@@ or@@ k@@ ing@@ Mo@@ b@@ ile@@ U@@ s@@ b@@ T@@ ether@@ ing@@ (android.net.@@ Network@@ State up@@ str@@ eam@@ State@@ ) { when(m@@ Connectivity@@ Manager.@@ is@@ T@@ ether@@ ing@@ Sup@@ ported@@ ()).@@ thenReturn@@ (@@ true@@ ); when(m@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ sele@@ ct@@ Pre@@ fer@@ re@@ d@@ U@@ ps@@ tr@@ eam@@ Type@@ (@@ any@@ ()@@ )).@@ thenReturn@@ (@@ up@@ str@@ eam@@ State@@ ); m@@ T@@ ether@@ ing.@@ start@@ T@@ ether@@ ing@@ (com.android.server.@@ connectivity.@@ TE@@ TH@@ ER@@ ING@@ _@@ US@@ B@@ , null@@ , false@@ ); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); ve@@ r@@ if@@ y@@ (m@@ U@@ s@@ b@@ Manager@@ , tim@@ es@@ (1@@ )).@@ set@@ Current@@ F@@ un@@ ction@@ (@@ U@@ s@@ b@@ Manager.@@ US@@ B@@ _@@ F@@ UN@@ C@@ TION_@@ R@@ N@@ D@@ IS@@ , false@@ ); m@@ T@@ ether@@ ing@@ .@@ int@@ er@@ face@@ Status@@ Changed@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ US@@ B@@ _@@ I@@ F@@ N@@ AME@@ , true@@ ); send@@ U@@ s@@ b@@ Broadcast@@ (@@ true@@ , true@@ , true@@ ); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); m@@ T@@ ether@@ ing@@ Dependenc@@ ies@@ .get@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ M@@ as@@ ter@@ S@@ M@@ ().@@ send@@ Message@@ (@@ T@@ ether@@ ing.@@ T@@ ether@@ M@@ as@@ ter@@ S@@ M@@ .@@ EVEN@@ T_@@ U@@ P@@ S@@ T@@ RE@@ AM@@ _C@@ AL@@ L@@ B@@ AC@@ K@@ , U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ EVEN@@ T_@@ ON@@ _@@ AV@@ A@@ IL@@ ABL@@ E, 0, up@@ str@@ eam@@ State@@ ); ve@@ r@@ if@@ y@@ (m@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ , tim@@ es@@ (1@@ )).@@ sele@@ ct@@ Pre@@ fer@@ re@@ d@@ U@@ ps@@ tr@@ eam@@ Type@@ (@@ any@@ ()); ve@@ r@@ if@@ y@@ (m@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ , tim@@ es@@ (1@@ )).@@ set@@ Current@@ U@@ ps@@ tr@@ eam@@ (@@ up@@ str@@ eam@@ State.@@ network@@ ); }
@org.junit.Test public void c@@ mp@@ l@@ _@@ do@@ ub@@ le@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ C@@ M@@ P@@ L_@@ D@@ O@@ U@@ BL@@ E@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ M@@ d@@ 5@@ U@@ dp@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _M@@ D@@ 5, android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (1@@ 2@@ 8@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
static java.@@ m@@ ath.@@ B@@ ig@@ In@@ t mo@@ d@@ ul@@ u@@ s(@@ java.@@ m@@ ath.@@ B@@ ig@@ In@@ t a@@ , java.@@ m@@ ath.@@ B@@ ig@@ In@@ t m@@ ) { java.@@ m@@ ath.@@ B@@ ig@@ In@@ t r = java.@@ m@@ ath.@@ B@@ ig@@ Int@@ .@@ new@@ B@@ ig@@ Int@@ (); java.@@ m@@ ath.@@ Native@@ B@@ N@@ .@@ B@@ N@@ _@@ n@@ mo@@ d@@ (r@@ .@@ b@@ ign@@ um@@ , a.@@ b@@ ign@@ um@@ , a.@@ b@@ ign@@ um@@ ); return r@@ ; }
private boolean is@@ N@@ fc@@ id@@ 2@@ Al@@ read@@ y@@ Reg@@ ister@@ ed@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ User@@ Service@@ s user@@ Ser@@ vices@@ , java.lang.String n@@ fc@@ id@@ 2@@ ) { for (android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info an@@ o@@ th@@ er@@ Ser@@ vice : user@@ Ser@@ vices.@@ ser@@ vices.@@ valu@@ es@@ ()) { if (@@ an@@ o@@ th@@ er@@ Service@@ .get@@ N@@ fc@@ id@@ 2@@ ().@@ equals(@@ n@@ fc@@ id@@ 2@@ )) { return true@@ ; } } return false@@ ; }
void update@@ Icc@@ A@@ va@@ il@@ abili@@ ty@@ () { synchronized@@ (m@@ Lock) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State new@@ State = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State.@@ C@@ AR@@ D@@ STATE_@@ A@@ B@@ S@@ EN@@ T@@ ; if (@@ null == (m@@ Uicc@@ Control@@ ler@@ )) { return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ C@@ ar@@ d new@@ C@@ ar@@ d = m@@ Uicc@@ Control@@ l@@ er.get@@ Uicc@@ Card@@ (); if (@@ new@@ C@@ ar@@ d != null@@ ) { new@@ State = new@@ Card@@ .get@@ Card@@ State@@ (); } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State old@@ State = mC@@ ard@@ State@@ ; mC@@ ard@@ State = new@@ State@@ ; com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ cat@@ .@@ C@@ at@@ Log.@@ d@@ (@@ this@@ , ((@@ (("@@ Ne@@ w C@@ ar@@ d State = " + new@@ State@@ ) + " ") + "@@ O@@ l@@ d C@@ ar@@ d State = ") + old@@ State@@ )); if ((@@ old@@ State == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State.@@ C@@ AR@@ D@@ STATE_@@ P@@ RE@@ S@@ EN@@ T@@ )) && (@@ new@@ State != (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State.@@ C@@ AR@@ D@@ STATE_@@ P@@ RE@@ S@@ EN@@ T@@ ))) { b@@ roadcast@@ Card@@ State@@ And@@ Icc@@ Ref@@ res@@ h@@ Res@@ p@@ (@@ new@@ State@@ , null@@ ); } else if ((@@ old@@ State != (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State.@@ C@@ AR@@ D@@ STATE_@@ P@@ RE@@ S@@ EN@@ T@@ )) && (@@ new@@ State == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ Card@@ State.@@ C@@ AR@@ D@@ STATE_@@ P@@ RE@@ S@@ EN@@ T@@ ))) { mC@@ m@@ d@@ I@@ f.@@ re@@ port@@ St@@ k@@ Service@@ Is@@ Run@@ n@@ ing@@ (@@ null@@ ); } } }
private void r@@ e@@ const@@ it@@ uti@@ on@@ P@@ ut@@ (java.util.@@ Has@@ ht@@ ab@@ le.@@ Has@@ ht@@ able@@ E@@ n@@ try@@ <@@ K@@ , V@@ >@@ [] t@@ ab@@ , K key@@ , V valu@@ e) throw@@ s java.io.@@ Stream@@ C@@ or@@ rup@@ ted@@ Exception { if (@@ valu@@ e == null@@ ) { throw new java.io.@@ Stream@@ C@@ or@@ rup@@ ted@@ Exception@@ (); } int has@@ h = java.util.@@ Has@@ ht@@ ab@@ le.@@ has@@ h@@ (@@ key@@ ); int in@@ dex = (@@ has@@ h & 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 7@@ ) % (t@@ ab@@ .@@ length); for (java.util.@@ Has@@ ht@@ ab@@ le.@@ Has@@ ht@@ able@@ E@@ n@@ try@@ <@@ K@@ , V@@ > e = t@@ ab@@ [@@ index@@ ]; e != null@@ ; e = e.@@ next@@ ) { if (((@@ e.@@ has@@ h@@ ) == has@@ h@@ ) && (@@ e.@@ ke@@ y.@@ equals(@@ key@@ ))) { throw new java.io.@@ Stream@@ C@@ or@@ rup@@ ted@@ Exception@@ (); } } java.util.@@ Has@@ ht@@ ab@@ le.@@ Has@@ ht@@ able@@ E@@ n@@ try@@ <@@ K@@ , V@@ > e = t@@ ab@@ [@@ index@@ ]; t@@ ab@@ [@@ index@@ ] = new java.util.@@ Has@@ ht@@ ab@@ le.@@ Has@@ ht@@ able@@ E@@ n@@ try@@ <@@ >@@ (@@ has@@ h@@ , key@@ , value@@ , e); (@@ count@@ )@@ ++@@ ; }
@java.lang.Override public java.lang.String in@@ s@@ n@@ Com@@ ment@@ String@@ (com.android.jack.@@ dx.@@ dex.@@ code.@@ D@@ al@@ v@@ In@@ s@@ n in@@ s@@ n@@ , boolean no@@ te@@ In@@ d@@ ic@@ es) { return c@@ st@@ Com@@ ment@@ ((@@ (com.android.jack.@@ dx.@@ dex.@@ code.@@ D@@ ual@@ C@@ st@@ In@@ s@@ n@@ ) (in@@ s@@ n@@ ))); }
public static void process@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.@@ j@@ il@@ l.@@ Option@@ s option@@ s) { java.io.File b@@ in@@ ary@@ File = option@@ s.get@@ Bin@@ ary@@ File@@ (); com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ Java@@ Tr@@ an@@ s@@ for@@ m@@ er j@@ t = new com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ Java@@ Tr@@ an@@ s@@ for@@ m@@ er@@ (com.android.@@ j@@ il@@ l.@@ J@@ il@@ l.get@@ Version@@ ().get@@ Version@@ Name@@ (), option@@ s); if (b@@ in@@ ary@@ File@@ .is@@ File@@ ()) { if (com.android.@@ j@@ il@@ l.@@ uti@@ ls.@@ File@@ Utils.@@ is@@ Java@@ Bin@@ ary@@ File@@ (b@@ in@@ ary@@ File@@ )) { java.util.List<@@ java.io.File@@ > java@@ Bin@@ ary@@ File@@ s = new java.util.ArrayList<@@ java.io.File@@ >(); java@@ Bin@@ ary@@ Fil@@ es.@@ add@@ (b@@ in@@ ary@@ File@@ ); j@@ t.@@ tr@@ an@@ s@@ for@@ m@@ (@@ java@@ Bin@@ ary@@ Fil@@ es@@ ); } else if (com.android.@@ j@@ il@@ l.@@ uti@@ ls.@@ File@@ Utils.@@ is@@ J@@ ar@@ File@@ (b@@ in@@ ary@@ File@@ )) { try { j@@ t.@@ tr@@ an@@ s@@ for@@ m@@ (@@ new java.util.@@ ja@@ r.@@ J@@ ar@@ File@@ (b@@ in@@ ary@@ File@@ )); } catch (java.io.IOException e) { throw new com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ Exception(("@@ Fail@@ s to cre@@ ate ja@@ r fi@@ le " + (b@@ in@@ ary@@ File@@ .getName@@ ()@@ )), e); } } else { throw new com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ Exception(("@@ Un@@ suppor@@ ted fi@@ le type@@ : " + (b@@ in@@ ary@@ File@@ .getName@@ ()))); } } else { java.util.List<@@ java.io.File@@ > java@@ Bin@@ ary@@ File@@ s = new java.util.ArrayList<@@ java.io.File@@ >(); com.android.@@ j@@ il@@ l.@@ uti@@ ls.@@ File@@ Utils.@@ get@@ Java@@ Bin@@ ary@@ Fil@@ es@@ (b@@ in@@ ary@@ File@@ , java@@ Bin@@ ary@@ Fil@@ es@@ ); j@@ t.@@ tr@@ an@@ s@@ for@@ m@@ (@@ java@@ Bin@@ ary@@ Fil@@ es@@ ); } }
void set@@ Ad@@ verti@@ ser@@ Id@@ (@@ int ad@@ verti@@ ser@@ Id) { m@@ Ad@@ verti@@ ser@@ Id = ad@@ verti@@ ser@@ Id@@ ; }
@java.lang.Override public void en@@ ter@@ () { android.util.Log.d@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ TAG, ((("@@ T@@ ether@@ ing@@ : " + (m@@ Iface@@ Name@@ )) + ", mode@@ : ") + (m@@ Mod@@ e.@@ des@@ cription@@ ))); if (!(@@ config@@ ure@@ Iface@@ Ip@@ (@@ true@@ ))) { m@@ L@@ ast@@ Error = android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER_@@ ER@@ R@@ OR@@ _@@ I@@ F@@ AC@@ E_@@ C@@ F@@ G@@ _@@ ER@@ R@@ OR@@ ; tr@@ an@@ si@@ tion@@ To@@ (m@@ In@@ iti@@ al@@ State@@ ); return@@ ; } try { m@@ N@@ M@@ Service.@@ t@@ ether@@ Interface@@ (m@@ Iface@@ Name); } catch (java.lang.Exception e) { android.util.Log.e@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ TAG, ("@@ Error T@@ ether@@ ing@@ : " + (e.toString()))); m@@ L@@ ast@@ Error = android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER_@@ ER@@ R@@ OR@@ _@@ TE@@ TH@@ ER_@@ I@@ F@@ AC@@ E_@@ ER@@ R@@ OR@@ ; tr@@ an@@ si@@ tion@@ To@@ (m@@ In@@ iti@@ al@@ State@@ ); return@@ ; } if (!(m@@ IP@@ v@@ 6@@ T@@ ether@@ S@@ v@@ c.@@ start@@ ())) { android.util.Log.e@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ TAG, "@@ Faile@@ d to st@@ ar@@ t IP@@ v@@ 6@@ T@@ ether@@ ing@@ Interface@@ Ser@@ vices@@ "); } if (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ DBG) android.util.Log.d@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ TAG, ("@@ T@@ ether@@ ed " + (m@@ Iface@@ Name@@ ))); m@@ T@@ ether@@ Control@@ ler.@@ not@@ if@@ y@@ Interface@@ State@@ Change@@ (m@@ Iface@@ Name, this@@ , I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ TE@@ TH@@ ER@@ ED@@ , m@@ L@@ ast@@ Error@@ ); }
public void test_@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ () { assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ #@@ .@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ .@@ #@@ #@@ #@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ 0000@@ 00@@ .@@ 0000@@ 00@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ #@@ #@@ #@@ .@@ 0000@@ 00@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ 0000@@ 00@@ .@@ #@@ #@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ (@@ " #@@ #@@ #@@ .@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ $@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ False@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ $@@ $@@ #@@ #@@ #@@ #@@ #@@ #@@ .@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); assert@@ True@@ (@@ new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ ,@@ #@@ #@@ #@@ #@@ ").@@ is@@ Gro@@ up@@ ing@@ U@@ sed@@ ()); }
@org.junit.Test public void test@@ Class@@ Imp@@ lement@@ s@@ T@@ w@@ o@@ Inter@@ fa@@ ces@@ With@@ S@@ ame@@ De@@ f@@ ender@@ Method@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 3@@ 4@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
public static void main@@ (@@ java.lang.String[] arg@@ Array@@ ) throw@@ s java.io.IOException { com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ D@@ x@@ Context contex@@ t = new com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ D@@ x@@ Context@@ (); com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ Argument@@ s arg@@ ument@@ s = new com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ Argument@@ s(); arg@@ ument@@ s.@@ parse@@ (@@ arg@@ Array@@ , contex@@ t@@ ); int result = new com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ M@@ ain@@ (@@ contex@@ t@@ ).@@ run@@ (@@ arg@@ ument@@ s); if (@@ result != 0) { java.lang.System.@@ ex@@ it@@ (@@ result@@ ); } }
public java.util.List<@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ > get@@ Ch@@ ild@@ r@@ en@@ () { return new java.util.ArrayList<@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ >@@ (m@@ Ch@@ ild@@ r@@ en@@ .@@ valu@@ es@@ ()); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); m@@ Content@@ Resol@@ ve@@ r = new android.@@ test.@@ mock@@ .@@ Mock@@ Content@@ Resol@@ ver@@ (m@@ Context@@ ); m@@ Content@@ Resol@@ ver.@@ add@@ Provider@@ (@@ Setting@@ s.@@ A@@ UT@@ H@@ OR@@ ITY@@ , new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ test.@@ F@@ ake@@ Setting@@ s@@ Provider@@ ()); m@@ Contex@@ t.get@@ Package@@ Name@@ ()).@@ thenReturn@@ ("@@ O@@ ff@@ load@@ Control@@ ler@@ Test@@ "); when(m@@ Contex@@ t.get@@ Application@@ Info@@ ()).@@ thenReturn@@ (m@@ Application@@ Info@@ ); when(m@@ Contex@@ t.get@@ Content@@ Resol@@ ver@@ ()).@@ thenReturn@@ (m@@ Content@@ Resol@@ ver@@ ); }
public final void test@@ Create@@ D@@ up@@ () { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ des@@ crip@@ tor@@ s.@@ View@@ Element@@ Descriptor ve@@ d = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ des@@ crip@@ tor@@ s.@@ View@@ Element@@ Descrip@@ tor@@ ("@@ xml@@ ", "@@ com.@@ ex@@ am@@ p@@ le.@@ M@@ y@@ Java@@ Class@@ "); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ u@@ im@@ o@@ de@@ l.@@ U@@ i@@ View@@ Element@@ No@@ de ui@@ v = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ u@@ im@@ o@@ de@@ l.@@ U@@ i@@ View@@ Element@@ Node@@ (@@ v@@ ed@@ ); com.android.@@ lay@@ out@@ lib.@@ api.@@ View@@ Info l@@ v@@ i = new com.android.@@ lay@@ out@@ lib.@@ api.@@ View@@ Info@@ ("@@ name@@ ", ui@@ v@@ , 1@@ 0, 12@@ , 1@@ 1@@ 0, 12@@ 0, null@@ , null@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Can@@ va@@ s@@ View@@ Info c@@ v@@ i = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Can@@ va@@ s@@ View@@ Info@@ (@@ l@@ vi@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ Node@@ Prox@@ y pro@@ x@@ y@@ 1 = m.@@ create@@ (c@@ vi@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ Node@@ Prox@@ y pro@@ x@@ y@@ 2 = m.@@ create@@ (c@@ vi@@ ); assert@@ S@@ ame@@ (pro@@ x@@ y@@ 2, pro@@ x@@ y@@ 1); }
@java.lang.Override public org.@@ bo@@ un@@ c@@ y@@ cast@@ le.@@ as@@ n@@ 1.@@ x@@ 509@@ .@@ Algorith@@ m@@ Id@@ ent@@ if@@ i@@ er find@@ En@@ c@@ r@@ y@@ ption@@ Algorith@@ m@@ (@@ org.@@ bo@@ un@@ c@@ y@@ cast@@ le.@@ as@@ n@@ 1.@@ x@@ 509@@ .@@ Algorith@@ m@@ Id@@ ent@@ if@@ i@@ er id@@ ) { id = m@@ De@@ fa@@ ult.@@ find@@ En@@ c@@ r@@ y@@ ption@@ Algorith@@ m@@ (@@ id@@ ); org.@@ bo@@ un@@ c@@ y@@ cast@@ le.@@ as@@ n@@ 1.@@ A@@ S@@ N@@ 1@@ Object@@ Id@@ ent@@ if@@ i@@ er o@@ id = id@@ .get@@ Algorith@@ m@@ (); if (@@ X@@ 9@@ Object@@ Id@@ ent@@ if@@ ier@@ s.@@ id@@ _@@ d@@ s@@ a@@ _@@ w@@ ith@@ _@@ sh@@ a@@ 1.@@ equals(@@ o@@ id@@ )) { return com.android.@@ apk@@ sign@@ er.@@ core@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 1.@@ V@@ 1@@ S@@ ch@@ em@@ e@@ Sign@@ er.@@ Sign@@ er@@ Info@@ Sign@@ ature@@ Algorith@@ m@@ F@@ ind@@ er.@@ D@@ S@@ A@@ ; } return id@@ ; }
@java.lang.Override public void r@@ en@@ ame@@ (java.lang.String old@@ Path@@ , java.lang.String new@@ Path@@ ) throw@@ s android.system.@@ ErrnoException { d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .get@@ Thread@@ Polic@@ y@@ ().@@ on@@ W@@ rite@@ To@@ Dis@@ k@@ (); os.@@ r@@ en@@ ame@@ (@@ old@@ Path@@ , new@@ Path@@ ); }
@java.lang.Override protected boolean st@@ op@@ () { if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ V@@ ER@@ B@@ O@@ SE@@ ) { android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ st@@ op@@ ()@@ "); } m@@ Session@@ Status@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ S@@ H@@ UT@@ D@@ O@@ W@@ N@@ ).@@ send@@ To@@ Target@@ (); m@@ Handler@@ Thread@@ .@@ qu@@ it@@ S@@ a@@ f@@ el@@ y@@ (); m@@ Cont@@ act@@ Change@@ Ob@@ server@@ ) == null@@ ) { android.util.Log.@@ i@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ A@@ void un@@ reg@@ is@@ ter wh@@ e@@ n re@@ cei@@ ve@@ r i@@ t is not register@@ ed@@ "); return true@@ ; } un@@ register@@ Receiver@@ (m@@ Pb@@ ap@@ Receiver@@ ); get@@ Content@@ Resol@@ ver@@ ().@@ un@@ register@@ Content@@ Ob@@ server@@ (m@@ Cont@@ act@@ Change@@ Ob@@ server@@ ); m@@ Cont@@ act@@ Change@@ Ob@@ ser@@ ve@@ r = null@@ ; return true@@ ; }
public boolean is@@ V@@ ol@@ te@@ A@@ va@@ il@@ able@@ (@@ int sub@@ Id) { try { return get@@ I@@ Telephony@@ ().@@ is@@ V@@ ol@@ te@@ A@@ va@@ il@@ able@@ (s@@ ub@@ Id); } catch (android.os.RemoteException | java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception ex@@ ) { return false@@ ; } }
private boolean f@@ z@@ (com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t RS@@ , com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ re@@ du@@ ce s, int se@@ ed@@ , int@@ [] siz@@ e) { final int input@@ Le@@ n = size@@ [0@@ ]; int@@ [] input@@ Ar@@ ra@@ y = create@@ Input@@ Array@@ Int@@ (in@@ put@@ L@@ en@@ , (@@ se@@ ed + 0@@ )); input@@ Array@@ [@@ new java.util.@@ R@@ an@@ do@@ m@@ ((@@ se@@ ed + 1@@ )).@@ next@@ Int@@ (in@@ put@@ L@@ en@@ )@@ ] = 0; final long java@@ Time@@ St@@ ar@@ t = java.lang.System.@@ current@@ Time@@ Milli@@ s(); final int java@@ Res@@ ult = f@@ z@@ (in@@ put@@ Array@@ ); final long java@@ Time@@ En@@ d = java.lang.System.@@ current@@ Time@@ Milli@@ s(); final long r@@ s@@ Time@@ St@@ ar@@ t = java.lang.System.@@ current@@ Time@@ Milli@@ s(); com.android.@@ rs.@@ test.@@ Alloc@@ ation input@@ Alloc@@ ation = com.android.@@ rs.@@ test.@@ Alloc@@ ation.create@@ Sized@@ (@@ RS@@ , com.android.@@ rs.@@ test.@@ Element.@@ I@@ 32@@ (@@ RS@@ ), input@@ Ar@@ ra@@ y.@@ length); final long copy@@ Time@@ St@@ ar@@ t = java.lang.System.@@ current@@ Time@@ Milli@@ s(); input@@ Alloc@@ ation.@@ copy@@ From@@ (in@@ put@@ Array@@ ); final long k@@ er@@ nel@@ Time@@ St@@ ar@@ t = java.lang.System.@@ current@@ Time@@ Milli@@ s(); final int r@@ s@@ Res@@ ult = s.@@ re@@ du@@ ce@@ _@@ f@@ z@@ (in@@ put@@ Allocation@@ ).get@@ (); final long r@@ s@@ Time@@ En@@ d = java.lang.System.@@ current@@ Time@@ Milli@@ s(); final boolean su@@ c@@ ces@@ s = (in@@ put@@ Array@@ [@@ r@@ s@@ Res@@ ult.@@ ]@@ ) == 0; java.lang.String statu@@ s = (s@@ u@@ ccess@@ ) ? "@@ P@@ A@@ SS@@ ED@@ " : "@@ FA@@ IL@@ ED@@ "; if (s@@ u@@ ccess@@ ) statu@@ s +@@ = " " + (com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ tim@@ ing.@@ string@@ (@@ java@@ Time@@ Start@@ , java@@ Time@@ En@@ d, r@@ s@@ Time@@ Start@@ , copy@@ Time@@ Start@@ , k@@ er@@ nel@@ Time@@ Start@@ , r@@ s@@ Time@@ En@@ d, input@@ Allocation@@ )); android.util.Log.@@ i@@ (com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ TAG, ((((@@ ("@@ f@@ z@@ : ja@@ v@@ a input@@ [@@ " + java@@ Result@@ ) + "@@ ] == ") + (in@@ put@@ Array@@ [@@ java@@ Result@@ ]@@ )) + ", r@@ s input@@ [@@ ") + r@@ s@@ Result@@ ) + "@@ ] == ") + (in@@ put@@ Array@@ [@@ java@@ Res@@ ult.@@ ]@@ )) + "@@ : ") + stat@@ us@@ )); input@@ Alloc@@ ation.@@ d@@ est@@ ro@@ y@@ (); return su@@ ccess@@ ; }
private void check@@ R@@ ound@@ Float4Float4@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ R@@ ound@@ Float4Float4@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ R@@ ound@@ Float4Float4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ R@@ ound@@ Float4Float4@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ R@@ ound@@ Float4Float4@@ : " + (e.toString()))); } }
@java.lang.Override public void exec@@ ute@@ Sh@@ ell@@ Command@@ (java.lang.String command@@ , com.android.ddmlib.@@ IS@@ h@@ ell@@ Output@@ Recei@@ ve@@ r re@@ cei@@ ver@@ , int max@@ Time@@ To@@ Output@@ Response@@ ) throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Sh@@ ell@@ Command@@ Un@@ res@@ pon@@ si@@ ve@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { com.android.ddmlib.@@ Adb@@ Helper.@@ exec@@ ute@@ Remote@@ Command@@ (com.android.@@ ddmlib.@@ Android@@ Debug@@ B@@ rid@@ g@@ e.get@@ Socket@@ Address@@ (), command@@ , this@@ , re@@ cei@@ ver@@ , max@@ Time@@ To@@ Output@@ Response@@ ); }
@java.lang.Override public void set@@ Log@@ ic@@ al@@ To@@ P@@ h@@ y@@ si@@ cal@@ S@@ lot@@ M@@ app@@ ing@@ (@@ int@@ [] p@@ h@@ y@@ si@@ cal@@ S@@ lot@@ s, android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ I@@ Rad@@ i@@ o radioProx@@ y@@ 1@@ 2 = android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ I@@ Rad@@ io.@@ cast@@ From@@ (@@ radioProx@@ y@@ ); if (@@ radioProx@@ y@@ 1@@ 2 == null@@ ) { if (@@ result != null@@ ) { android.os.@@ As@@ ync@@ Result@@ .@@ for@@ Message@@ (@@ result@@ , null@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Command@@ Exception@@ .@@ f@@ rom@@ R@@ il@@ Errno@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Constants.@@ RE@@ Q@@ UE@@ ST_@@ NO@@ T_@@ S@@ U@@ P@@ P@@ OR@@ TED@@ )); result.@@ send@@ To@@ Target@@ (); } } else { java.util.ArrayList<@@ java.lang.Integ@@ er@@ > m@@ app@@ ing = new java.util.ArrayList<@@ >(); for (@@ int s@@ lo@@ t : p@@ h@@ y@@ si@@ cal@@ S@@ lot@@ s) { m@@ app@@ ing.@@ add@@ (@@ new java.lang.Integ@@ er@@ (s@@ lot@@ )); } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SE@@ T_@@ LOG@@ IC@@ AL@@ _@@ TO@@ _P@@ H@@ Y@@ SI@@ C@@ AL@@ _S@@ LO@@ T_@@ M@@ AP@@ P@@ ING@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); } try { radioProx@@ y@@ 1@@ 2.@@ set@@ Sim@@ S@@ lo@@ ts@@ M@@ app@@ ing@@ (rr@@ .m@@ Ser@@ ial@@ , m@@ app@@ ing@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ set@@ Log@@ ic@@ al@@ To@@ P@@ h@@ y@@ si@@ cal@@ S@@ lot@@ M@@ app@@ ing@@ ", e); } } } }
@org.junit.Test public void test@@ Multi@@ ple@@ Default@@ s@@ _@@ f@@ rom@@ Inter@@ fa@@ ces@@ _@@ le@@ f@@ t@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 4@@ 7@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ add@@ Property@@ (@@ Option@@ s.@@ LA@@ M@@ B@@ DA@@ _@@ TO@@ _@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _C@@ ON@@ V@@ ER@@ TER@@ .getName@@ (), java.lang.@@ Boole@@ an@@ .@@ TR@@ UE@@ .@@ toString@@ ()).@@ compile@@ And@@ Run@@ Test@@ (); }
@org.junit.Test public void ve@@ r@@ if@@ y@@ No@@ t@@ if@@ ic@@ ation@@ Display@@ ed@@ W@@ h@@ en@@ Network@@ Re@@ com@@ m@@ end@@ ed@@ () throw@@ s java.lang.Exception { com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ W@@ if@@ i@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Network@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, Network@@ Info.@@ D@@ eta@@ ile@@ d@@ State.@@ D@@ IS@@ CONNEC@@ TED@@ ); set@@ Open@@ Access@@ P@@ o@@ int@@ s(@@ 3@@ ); when(m@@ S@@ core@@ Manager.@@ request@@ Re@@ com@@ m@@ end@@ ation@@ (@@ any@@ (android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Request@@ .@@ class@@ )@@ )).@@ thenReturn@@ (android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Res@@ ult.@@ create@@ Connec@@ t@@ Re@@ com@@ m@@ end@@ ation@@ (@@ create@@ F@@ ake@@ Config@@ ())); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); ve@@ r@@ if@@ y@@ (m@@ No@@ t@@ if@@ ic@@ ation@@ Manager@@ , ne@@ ver@@ ()).@@ not@@ if@@ y@@ As@@ User@@ (@@ any@@ (@@ java.lang.String@@ .@@ class@@ ), any@@ Int@@ (), any@@ (android.@@ app.@@ No@@ t@@ if@@ ic@@ ation@@ .@@ class@@ ), any@@ (android.os.@@ User@@ Handle@@ .@@ class@@ )); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Network@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, Network@@ Info.@@ D@@ eta@@ ile@@ d@@ State.@@ S@@ C@@ AN@@ N@@ ING@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Network@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, Network@@ Info.@@ D@@ eta@@ ile@@ d@@ State.@@ D@@ IS@@ CONNEC@@ TED@@ ); ve@@ r@@ if@@ y@@ (m@@ No@@ t@@ if@@ ic@@ ation@@ Manager@@ , ne@@ ver@@ ()).@@ not@@ if@@ y@@ As@@ User@@ (@@ any@@ (@@ java.lang.String@@ .@@ class@@ ), any@@ Int@@ (), any@@ (android.@@ app.@@ No@@ t@@ if@@ ic@@ ation@@ .@@ class@@ ), any@@ (android.os.@@ User@@ Handle@@ .@@ class@@ )); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ No@@ t@@ if@@ ic@@ ation@@ Hel@@ per@@ ).@@ create@@ M@@ ain@@ No@@ t@@ if@@ ic@@ ation@@ (@@ any@@ (android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ .@@ class@@ )); ve@@ r@@ if@@ y@@ (m@@ No@@ t@@ if@@ ic@@ ation@@ Manager@@ ).@@ not@@ if@@ y@@ As@@ User@@ (@@ any@@ (@@ java.lang.String@@ .@@ class@@ ), any@@ Int@@ (), any@@ (android.@@ app.@@ No@@ t@@ if@@ ic@@ ation@@ .@@ class@@ ), any@@ (android.os.@@ User@@ Handle@@ .@@ class@@ )); ve@@ r@@ if@@ y@@ (m@@ No@@ t@@ if@@ ic@@ ation@@ Manager@@ , ne@@ ver@@ ()).@@ can@@ cel@@ As@@ User@@ (@@ any@@ (@@ java.lang.String@@ .@@ class@@ ), any@@ Int@@ (), any@@ (android.os.@@ User@@ Handle@@ .@@ class@@ )); }
public static native long d@@ 2@@ i@@ _@@ X@@ 509@@ (@@ byte@@ [] en@@ cod@@ ing@@ );
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ L@@ arg@@ e@@ Test public void test@@ Flag@@ I@@ Ex@@ ist@@ ing@@ E@@ () { if (android.os.@@ En@@ vi@@ ron@@ m@@ ent.@@ is@@ Ex@@ ter@@ nal@@ Stor@@ age@@ E@@ m@@ ul@@ ated@@ ()) { return@@ ; } int i@@ Flag@@ s = android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ EX@@ TER@@ N@@ AL@@ ; int r@@ Flag@@ s = (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ IN@@ TER@@ N@@ AL@@ ) | (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L@@ _RE@@ P@@ L@@ AC@@ E_@@ EX@@ IS@@ T@@ ING@@ ); in@@ stall@@ From@@ R@@ aw@@ Resource@@ ("@@ in@@ st@@ al@@ l.@@ apk@@ ", R.@@ raw@@ .@@ in@@ stall@@ , i@@ Flag@@ s, false@@ , false@@ , (-1@@ ), (-1@@ )); in@@ stall@@ From@@ R@@ aw@@ Resource@@ ("@@ in@@ st@@ al@@ l.@@ apk@@ ", R.@@ raw@@ .@@ in@@ stall@@ , r@@ Flag@@ s, true@@ , false@@ , (-1@@ ), (-1@@ )); }
private com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ B@@ y get@@ Sele@@ ctor@@ (@@ org.@@ py@@ th@@ on@@ .@@ core.@@ Arg@@ Par@@ se@@ r ap@@ , int i@@ ) { return ((@@ com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ By@@ ) (@@ ap@@ .get@@ P@@ y@@ Object@@ (0@@ ).@@ _@@ _@@ to@@ java@@ _@@ (com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ By@@ .@@ class@@ ))); }
@org.junit.Test public void test@@ Re@@ cover@@ From@@ Zip@@ C@@ or@@ r@@ u@@ ption@@ Str@@ ess@@ Test@@ () throw@@ s java.lang.Exception { java.lang.@@ Th@@ re@@ ad start@@ Service@@ s = new java.lang.@@ Thread@@ () { @java.lang.Override public void run@@ () { start@@ Ser@@ vices@@ (); } }; start@@ Ser@@ vices.@@ start@@ (); for (@@ int i = 0; i < 7@@ ; i++) { java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (1@@ 00@@ 0); t@@ am@@ per@@ All@@ Ex@@ c@@ tr@@ ac@@ ted@@ Z@@ i@@ ps@@ (); } start@@ Ser@@ vices.@@ j@@ o@@ in@@ (); try { wait@@ Ser@@ vices@@ Comp@@ let@@ i@@ on@@ (); } catch (java.util.@@ concurrent.@@ Time@@ out@@ Exception e) { } k@@ il@@ l@@ Ser@@ vices@@ (); check@@ Re@@ cover@@ (); }
public void test@@ Date@@ Time@@ Key@@ Listener@@ () { final android.@@ text.@@ method@@ .@@ Date@@ Time@@ Key@@ Listen@@ er date@@ Time@@ Key@@ Listen@@ er = android.@@ text.@@ method@@ .@@ Date@@ Time@@ Key@@ Listen@@ er.get@@ Instance@@ (); m@@ Ac@@ tivity.@@ run@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { m@@ Text@@ View@@ .set@@ Key@@ Listener@@ (@@ date@@ Time@@ Key@@ Listener@@ ); m@@ Text@@ View@@ .@@ request@@ F@@ o@@ c@@ us@@ (); } }); m@@ In@@ strument@@ ation.@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); assert@@ Equal@@ s("@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); m@@ In@@ strument@@ ation.@@ send@@ String@@ S@@ ync@@ ("@@ 1@@ "); assert@@ Equal@@ s("@@ 1@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); m@@ In@@ strument@@ ation.@@ send@@ String@@ S@@ ync@@ ("@@ 2@@ "); assert@@ Equal@@ s("@@ 12@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); int key@@ Co@@ de = android.@@ text.@@ method@@ .@@ cts.@@ Text@@ Method@@ Utils.@@ get@@ Un@@ ac@@ ce@@ p@@ ted@@ Key@@ Code@@ (@@ Date@@ Time@@ Key@@ Listen@@ er.@@ CH@@ AR@@ AC@@ TE@@ RS@@ ); if ((@@ -1@@ ) != key@@ Code@@ ) { send@@ Key@@ s(@@ key@@ Code@@ ); assert@@ Equal@@ s("@@ 12@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); } m@@ Ac@@ tivity.@@ run@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { m@@ Text@@ View@@ .set@@ Key@@ Listener@@ (@@ null@@ ); m@@ Text@@ View@@ .@@ request@@ F@@ o@@ c@@ us@@ (); } }); m@@ In@@ strument@@ ation.@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); assert@@ Equal@@ s("@@ 12@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); m@@ In@@ strument@@ ation.@@ send@@ String@@ S@@ ync@@ ("@@ 1@@ "); assert@@ Equal@@ s("@@ 12@@ ", m@@ Text@@ View@@ .get@@ Text@@ ().@@ toString@@ ()); }
@org.junit.Test public void test@@ A@@ u@@ th@@ enti@@ cate@@ Server@@ () { int channe@@ l = mock@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ s@@ es@@ ("@@ B@@ F@@ 3@@ 8@@ 0@@ 2@@ A@@ 00@@ 0@@ 9@@ 00@@ 0@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ byte@@ []@@ > result@@ Cap@@ tor = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ >(); m@@ E@@ uic@@ c@@ Card@@ .@@ au@@ th@@ enti@@ cate@@ Server@@ ("@@ A@@ 1@@ B@@ 2@@ C@@ 3@@ -@@ X@@ 4@@ Y@@ 5@@ Z@@ 6@@ ", com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ as@@ n@@ 1.@@ As@@ n@@ 1@@ Node@@ .@@ new@@ Builder@@ (1@@ 6@@ 0@@ ).@@ build@@ ().@@ to@@ Bytes@@ (), com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ as@@ n@@ 1.@@ As@@ n@@ 1@@ Node@@ .@@ new@@ Builder@@ (1@@ 6@@ 0@@ ).@@ build@@ ().@@ to@@ Bytes@@ (), com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ as@@ n@@ 1.@@ As@@ n@@ 1@@ Node@@ .@@ new@@ Builder@@ (1@@ 6@@ 1@@ ).@@ build@@ ().@@ to@@ Bytes@@ (), com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ as@@ n@@ 1.@@ As@@ n@@ 1@@ Node@@ .@@ new@@ Builder@@ (1@@ 6@@ 2@@ ).@@ build@@ ().@@ to@@ Bytes@@ (), com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ as@@ n@@ 1.@@ As@@ n@@ 1@@ Node@@ .@@ new@@ Builder@@ (1@@ 6@@ 3@@ ).@@ build@@ ().@@ to@@ Bytes@@ (), result@@ Cap@@ tor@@ , m@@ Handler@@ ); result@@ Cap@@ tor.@@ aw@@ ait@@ (); assert@@ Equal@@ s("@@ B@@ F@@ 3@@ 8@@ 2@@ D@@ " + ((((@@ ((@@ (("@@ A@@ 00@@ 0@@ " + "@@ A@@ 1@@ 00@@ ") + "@@ A@@ 2@@ 00@@ ") + "@@ A@@ 3@@ 00@@ ") + "@@ A@@ 0@@ 2@@ 3@@ ") + "@@ 8@@ 00@@ D@@ 4@@ 1@@ 3@@ 1@@ 4@@ 2@@ 32@@ 4@@ 3@@ 3@@ 32@@ D@@ 5@@ 8@@ 3@@ 4@@ 5@@ 9@@ 3@@ 5@@ A@@ 3@@ 6@@ ") + "@@ A@@ 1@@ 12@@ 8@@ 00@@ 4@@ 8@@ 9@@ 6@@ 7@@ 4@@ 5@@ 2@@ 3@@ ") + "@@ A@@ 1@@ 00@@ ") + "@@ 8@@ 9@@ 6@@ 7@@ 4@@ 5@@ 2@@ 3@@ 0@@ 12@@ 1@@ 4@@ 3@@ 0@@ 5@@ "@@ ))); }
public static void set@@ R@@ an@@ do@@ m@@ Se@@ ed@@ (@@ long se@@ ed@@ ) { java.lang.@@ M@@ ath.@@ IN@@ STA@@ N@@ CE@@ .set@@ Se@@ ed@@ (@@ se@@ ed@@ ); }
public void test@@ For@@ Name@@ _@@ w@@ ith@@ Provider@@ With@@ R@@ ec@@ ur@@ si@@ ve@@ Call@@ () throw@@ s java.lang.Exception { libcore.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Set@@ t@@ able@@ Char@@ set@@ Provid@@ er.@@ set@@ De@@ le@@ g@@ ate@@ (@@ new org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test.@@ Mock@@ Char@@ set@@ Provider@@ With@@ R@@ ec@@ ur@@ si@@ ve@@ Call@@ ()); try { java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ p@@ oo@@ p@@ "); } catch (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Un@@ suppor@@ ted@@ Char@@ set@@ Exception expected@@ ) { } final@@ l@@ y { libcore.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Set@@ t@@ able@@ Char@@ set@@ Provid@@ er.@@ clear@@ De@@ le@@ g@@ ate@@ (); } }
@java.lang.Override public void check@@ Valid@@ ity@@ () { if (!@@ (((@@ parent@@ ) instanceof com.android.jack.ir.ast.J@@ No@@ de parent@@ ) || ((@@ parent@@ ) instanceof com.android.jack.ir.ast.J@@ Error@@ ))) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (); } }
private boolean in@@ stall@@ Test@@ () throw@@ s com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Device@@ Not@@ A@@ va@@ il@@ able@@ Exception { if (!(@@ create@@ Remote@@ Dir@@ (com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ G@@ e@@ Test.@@ N@@ A@@ TIV@@ E_@@ TE@@ S@@ T@@ S_@@ DI@@ RE@@ C@@ T@@ OR@@ Y@@ ))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (("@@ Co@@ ul@@ d not cre@@ ate di@@ re@@ ctor@@ y for native test@@ s@@ : " + (com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ G@@ e@@ e@@ Test.@@ N@@ A@@ TIV@@ E_@@ TE@@ S@@ T@@ S_@@ DI@@ RE@@ C@@ T@@ OR@@ Y@@ ))); return false@@ ; } java.io.File native@@ Ex@@ e = new java.io.File@@ (m@@ C@@ ts@@ Build@@ .get@@ Test@@ C@@ as@@ es@@ Dir@@ (), m@@ Ex@@ e@@ Name); if (!@@ (@@ native@@ Ex@@ e.@@ exist@@ s@@ ())) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (("@@ N@@ ativ@@ e t@@ est not fo@@ und@@ : " + native@@ Ex@@ e@@ )); return false@@ ; } java.lang.String device@@ P@@ ath = ((@@ com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ G@@ e@@ Test.@@ N@@ A@@ TIV@@ E_@@ TE@@ S@@ T@@ S_@@ DI@@ RE@@ C@@ T@@ OR@@ Y@@ ) + "@@ /@@ ") + (m@@ Ex@@ e@@ Name); if (!(m@@ Device.@@ pu@@ sh@@ File@@ (@@ native@@ Ex@@ e@@ , device@@ Path@@ ))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ ("@@ Faile@@ d to pu@@ s@@ h native t@@ est to device@@ "); return false@@ ; } return true@@ ; }
void get@@ To@@ t@@ al@@ Num@@ Of@@ Item@@ s@@ (@@ byte@@ [] b@@ d@@ add@@ r@@ , com.android.bluetooth.@@ avrcp.@@ Media@@ Contro@@ lle@@ r media@@ Control@@ ler@@ ) { if (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, "@@ get@@ To@@ t@@ al@@ Num@@ Of@@ Item@@ s@@ "); java.util.List<@@ android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ Item@@ > i@@ tem@@ s = m@@ No@@ w@@ Play@@ ing@@ List@@ ; if (i@@ tem@@ s != null@@ ) { m@@ Media@@ Interface@@ .get@@ To@@ t@@ al@@ Num@@ Of@@ Item@@ s@@ Rs@@ p@@ (b@@ d@@ add@@ r@@ , Av@@ rc@@ p@@ Constants.@@ RS@@ P@@ _N@@ O@@ _@@ ER@@ R@@ OR@@ , 0, i@@ tem@@ s.@@ size@@ ()); return@@ ; } if (m@@ edia@@ Contro@@ lle@@ r == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, "@@ media@@ Contro@@ lle@@ r = null@@ , send@@ ing n@@ o ava@@ il@@ able play@@ er@@ s res@@ ponse@@ "); m@@ Media@@ Interface@@ .get@@ Item@@ At@@ tr@@ Rs@@ p@@ (b@@ d@@ add@@ r@@ , Av@@ rc@@ p@@ Constants.@@ RS@@ P@@ _N@@ O@@ _@@ AV@@ BL@@ _P@@ LA@@ Y@@ , null@@ ); return@@ ; } i@@ tem@@ s = media@@ Control@@ l@@ er.get@@ Q@@ ue@@ ue@@ (); if (i@@ tem@@ s == null@@ ) { m@@ Media@@ Interface@@ .get@@ To@@ t@@ al@@ Num@@ Of@@ Item@@ s@@ Rs@@ p@@ (b@@ d@@ add@@ r@@ , Av@@ rc@@ p@@ Constants.@@ RS@@ P@@ _N@@ O@@ _@@ ER@@ R@@ OR@@ , 0, 1); } m@@ No@@ w@@ Play@@ ing@@ Lis@@ t = i@@ tem@@ s; m@@ Media@@ Interface@@ .get@@ To@@ t@@ al@@ Num@@ Of@@ Item@@ s@@ Rs@@ p@@ (b@@ d@@ add@@ r@@ , Av@@ rc@@ p@@ Constants.@@ RS@@ P@@ _N@@ O@@ _@@ ER@@ R@@ OR@@ , 0, i@@ tem@@ s.@@ size@@ ()); }
public void test@@ Get@@ Content@@ Type@@ () throw@@ s java.io.IOException { assert@@ Equal@@ s("@@ tex@@ t@@ /@@ r@@ t@@ f@@ ", get@@ Content@@ Type@@ ("@@ test.@@ r@@ t@@ f@@ ")); assert@@ Equal@@ s("@@ app@@ li@@ cation@@ /@@ ms@@ wor@@ d@@ ", get@@ Content@@ Type@@ ("@@ test@@ .@@ do@@ c@@ ")); assert@@ Equal@@ s("@@ cont@@ ent@@ /@@ un@@ k@@ no@@ wn@@ ", get@@ Content@@ Type@@ ("@@ test.@@ ht@@ x@@ ")); assert@@ Equal@@ s("@@ tex@@ t@@ /@@ xml@@ ", get@@ Content@@ Type@@ ("@@ test.@@ xml@@ ")); assert@@ Equal@@ s("@@ tex@@ t@@ /@@ pl@@ ain@@ ", new libcore.@@ net.@@ ur@@ l.@@ File@@ URL@@ Connection@@ (@@ new java.net.@@ URL@@ ("@@ file@@ :@@ /@@ /@@ /@@ "@@ )@@ ).get@@ Content@@ Type@@ ()); }
synchronized boolean re@@ port@@ Error@@ (android.bluetooth.Bluetooth@@ Device device@@ , byte error@@ ) { if (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Service.TAG, ((("@@ re@@ port@@ Error@@ ()@@ : device@@ =@@ " + device@@ ) + " error@@ =@@ ") + error@@ )); } if (!(@@ check@@ Device@@ (device@@ ))) { return false@@ ; } return re@@ port@@ Error@@ Native@@ (@@ error@@ ); }
@java.lang.Override public void widget@@ Sele@@ c@@ ted@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Selection@@ Ev@@ ent e) { super@@ .@@ widget@@ Sele@@ c@@ ted@@ (@@ e); if (m@@ Project@@ B@@ utton@@ .get@@ Selection@@ ()) { set@@ up@@ Resource@@ List@@ Element@@ s@@ (m@@ Project@@ Res@@ ources@@ .get@@ Res@@ ources@@ (m@@ Resource@@ Type@@ )); m@@ New@@ B@@ utton@@ .set@@ Enabled@@ (@@ true@@ ); } }
private static void ve@@ r@@ if@@ y@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ , java.nio.Byte@@ Buff@@ er apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 2@@ Block@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce c@@ en@@ tr@@ al@@ Dir@@ , java.nio.Byte@@ Buff@@ er e@@ o@@ c@@ d, int max@@ Sdk@@ Version@@ , com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ Res@@ ult result@@ ) throw@@ s java.io.IO@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception { java.util.@@ Set@@ <@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ Content@@ Dig@@ est@@ Algorith@@ m@@ > cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y = new java.util.@@ Hash@@ Set@@ <@@ >@@ (1@@ ); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ parse@@ Sign@@ er@@ s(@@ apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 2@@ Block@@ , cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , max@@ Sdk@@ Version@@ , result@@ ); if (@@ result.@@ contain@@ s@@ Error@@ s@@ ()) { return@@ ; } com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ Integ@@ ri@@ ty@@ (b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ , c@@ en@@ tr@@ al@@ Dir@@ , e@@ o@@ c@@ d, cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , max@@ Sdk@@ Version@@ , result@@ ); if (!(@@ result.@@ contain@@ s@@ Error@@ s@@ ())) { result.@@ ve@@ r@@ if@@ i@@ ed = true@@ ; } }
@java.lang.Override public boolean equals(@@ java.lang.Object o@@ ) { if (@@ o == (@@ this@@ )) { return true@@ ; } if (!(@@ o instanceof com.android.sdklib.@@ de@@ vices.@@ H@@ ardwar@@ e@@ )) { return false@@ ; } com.android.sdklib.@@ de@@ vices.@@ H@@ ardwar@@ e h@@ w = ((@@ com.android.sdklib.@@ de@@ vices.@@ H@@ ardwar@@ e) (o@@ )); return ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((m@@ S@@ cre@@ en@@ .@@ equals(@@ h@@ w@@ .get@@ S@@ cre@@ en@@ ())) && (m@@ Network@@ ing.@@ equals(@@ h@@ w@@ .get@@ Network@@ ing@@ ()))) && (m@@ S@@ en@@ s@@ or@@ s.@@ equals(@@ h@@ w@@ .get@@ S@@ en@@ s@@ or@@ s@@ ()))) && ((m@@ M@@ ic@@ ) == (@@ h@@ w@@ .@@ has@@ M@@ ic@@ ()))) && (m@@ C@@ am@@ er@@ a@@ s.@@ equals(@@ h@@ w@@ .get@@ C@@ am@@ er@@ as@@ ()))) && ((m@@ Key@@ bo@@ ard@@ ) == (@@ h@@ w@@ .get@@ Key@@ bo@@ ard@@ ()))) && ((m@@ N@@ av@@ ) == (@@ h@@ w@@ .get@@ N@@ av@@ ()))) && (m@@ R@@ am@@ .@@ equals(@@ h@@ w@@ .get@@ R@@ am@@ ()))) && ((m@@ B@@ utton@@ s) == (@@ h@@ w@@ .get@@ B@@ utton@@ Type@@ ()))) && (m@@ Inter@@ nal@@ Stor@@ age.@@ equals(@@ h@@ w@@ .get@@ Inter@@ nal@@ Stor@@ age@@ ()))) && (m@@ Remo@@ va@@ ble@@ Stor@@ age.@@ equals(@@ h@@ w@@ .get@@ Remo@@ va@@ ble@@ Stor@@ age@@ ()))) && (m@@ C@@ pu@@ .@@ equals(@@ h@@ w@@ .get@@ C@@ pu@@ ()))) && (m@@ G@@ pu@@ .@@ equals(@@ h@@ w@@ .get@@ G@@ pu@@ ()))) && (m@@ Ab@@ is.@@ equals(@@ h@@ w@@ .get@@ Sup@@ ported@@ Ab@@ is@@ ()))) && (m@@ U@@ i@@ Mod@@ es.@@ equals(@@ h@@ w@@ .get@@ Sup@@ ported@@ U@@ i@@ Mod@@ es@@ ()))) && ((m@@ P@@ lu@@ g@@ ged@@ In@@ ) == (@@ h@@ w@@ .get@@ Ch@@ arg@@ e@@ Type@@ ()))) && ((@@ ((m@@ S@@ k@@ in@@ Path@@ ) != null@@ ) && (m@@ S@@ k@@ in@@ Path@@ .@@ equals(@@ h@@ w@@ .get@@ S@@ k@@ in@@ File@@ ()))) || ((@@ (m@@ S@@ k@@ in@@ Path@@ ) == null@@ ) && ((@@ h@@ w@@ .get@@ S@@ k@@ in@@ Path@@ ()) == null@@ ))); }
public static void assert@@ Equal@@ s@@ (@@ boolean act@@ ual@@ , boolean expected@@ ) throw@@ s java.lang.@@ Asser@@ tion@@ Error { if (@@ act@@ u@@ al != expected@@ ) { throw new java.lang.@@ Asser@@ tion@@ Error@@ ((((@@ ("@@ A@@ ct@@ u@@ al != Ex@@ pec@@ ted (@@ " + act@@ ual@@ ) + " != ") + expected@@ ) + "@@ )@@ ")); } }
private long n@@ or@@ m@@ aliz@@ e@@ S@@ n@@ ap@@ sho@@ t@@ Time@@ (@@ long time@@ M@@ s) { return (@@ time@@ M@@ s / (com.android.server.@@ connectivity.@@ Net@@ d@@ Event@@ Listener@@ Service.@@ ME@@ TR@@ IC@@ S@@ _S@@ N@@ AP@@ S@@ H@@ O@@ T_@@ S@@ P@@ AN@@ _M@@ S@@ )) * (com.android.server.@@ connectivity.@@ Net@@ d@@ Event@@ Listener@@ Service.@@ ME@@ TR@@ IC@@ S@@ _S@@ N@@ AP@@ S@@ H@@ O@@ T_@@ S@@ P@@ AN@@ _M@@ S@@ ); }
public java.lang.String get@@ T@@ id@@ () { return m@@ T@@ id@@ ; }
private android.net.Network@@ Requ@@ est send@@ Request@@ For@@ Network@@ (android.net.@@ Network@@ Capabili@@ ti@@ es ne@@ ed@@ , android.net.@@ Connectivity@@ Manager.@@ Network@@ Call@@ b@@ ac@@ k call@@ back@@ , int time@@ out@@ M@@ s, int action@@ , int le@@ g@@ ac@@ y@@ Type, android.os.@@ Handle@@ r hand@@ ler@@ ) { if (c@@ all@@ b@@ ac@@ k == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception(@@ "@@ null Network@@ Callback@@ "); } if ((@@ ne@@ ed == null@@ ) && (@@ ac@@ tion != (android.net.@@ Connectivity@@ Manager.@@ RE@@ Q@@ UE@@ S@@ T@@ ))) { throw new java.lang.Illegal@@ Argument@@ Exception(@@ "@@ null Network@@ Capabilities@@ "); } final android.net.Network@@ Requ@@ est request@@ ; try { synchronized@@ (android.net.@@ Connectivity@@ Manager.@@ s@@ Callback@@ s) { android.os.@@ Mess@@ eng@@ er mess@@ eng@@ er = new android.os.@@ Mess@@ eng@@ er(@@ hand@@ ler@@ ); android.os.@@ Bin@@ der b@@ in@@ der = new android.os.@@ Bin@@ der@@ (); if (@@ ac@@ tion == (android.net.@@ Connectivity@@ Manager.@@ LIS@@ TE@@ N@@ )) { requ@@ est = m@@ Service.@@ list@@ en@@ For@@ Network@@ (@@ ne@@ ed@@ , mess@@ eng@@ er, b@@ in@@ der@@ ); } else { requ@@ est = m@@ Service.@@ request@@ Network@@ (@@ ne@@ ed@@ , mess@@ eng@@ er, time@@ out@@ M@@ s, b@@ in@@ der@@ , le@@ g@@ ac@@ y@@ Type@@ ); } if (@@ requ@@ est != null@@ ) { android.net.@@ Connectivity@@ Manager.@@ s@@ Callback@@ s.@@ put@@ (@@ request@@ , call@@ back@@ ); } call@@ back@@ .@@ network@@ Requ@@ est = request@@ ; } } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } return request@@ ; }
static void f@@ re@@ e@@ Native@@ Stor@@ age@@ (@@ int native@@ Data@@ P@@ tr@@ ) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ f@@ re@@ e@@ Native@@ Stor@@ age@@ : " + native@@ Data@@ P@@ tr@@ )); Main.@@ f@@ re@@ e@@ Native@@ Stor@@ age@@ P@@ r@@ int@@ ed = true@@ ; }
private synchronized com.android.@@ uti@@ ls.@@ Pa@@ ir@@ <@@ com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Item@@ , java.lang.@@ Boole@@ an@@ > get@@ Item@@ (@@ @com.android.annotations.NonNull java.io.File input@@ File@@ , @com.android.annotations.NonNull java.io.File out@@ File@@ , @com.android.annotations.NonNull com.android.sdklib.@@ Build@@ Too@@ l@@ Info build@@ Too@@ l@@ Info@@ ) throw@@ s java.io.IOException { com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Ke@@ y i@@ tem@@ Ke@@ y = com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Ke@@ y.@@ o@@ f@@ (in@@ put@@ File@@ , build@@ Too@@ l@@ Info@@ .get@@ Re@@ vision@@ ()); com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ I@@ te@@ m ite@@ m = m@@ Map@@ .get@@ (i@@ tem@@ Key@@ ); boolean new@@ I@@ te@@ m = false@@ ; if (i@@ te@@ m == null@@ ) { com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Stor@@ ed@@ I@@ te@@ m st@@ or@@ ed@@ I@@ te@@ m = m@@ Stor@@ ed@@ Item@@ s.get@@ (i@@ tem@@ Key@@ ); if (@@ st@@ or@@ ed@@ I@@ te@@ m != null@@ ) { java.io.File dex@@ File = st@@ or@@ ed@@ Item@@ .get@@ Output@@ File@@ (); if ((@@ dex@@ File@@ .is@@ File@@ ()) && (@@ st@@ or@@ ed@@ Item@@ .get@@ Source@@ Hash@@ ().@@ equals(@@ com.google.common.@@ io.@@ Fil@@ es.@@ has@@ h@@ (in@@ put@@ File@@ , com.google.common.@@ has@@ h@@ .@@ Hash@@ ing.@@ sh@@ a@@ 1@@ ()@@ )@@ ))) { ite@@ m = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Item@@ (in@@ put@@ File@@ , dex@@ File@@ , new java.util.@@ concurrent.@@ Count@@ Down@@ L@@ atch@@ (1@@ )); i@@ tem@@ .get@@ L@@ atch@@ ().@@ count@@ Down@@ (); } } if (i@@ te@@ m == null@@ ) { ite@@ m = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ C@@ ache.@@ Item@@ (in@@ put@@ File@@ , out@@ File@@ , new java.util.@@ concurrent.@@ Count@@ Down@@ L@@ atch@@ (1@@ )); new@@ I@@ te@@ m = true@@ ; } m@@ Map@@ .@@ put@@ (i@@ tem@@ Key@@ , i@@ tem@@ ); } return com.android.@@ uti@@ ls.@@ Pa@@ ir.@@ o@@ f@@ (i@@ tem@@ , new@@ Item@@ ); }
public void test@@ File@@ InputStream@@ () throw@@ s java.lang.Exception { java.io.File f = new java.io.File@@ ("@@ /@@ de@@ v@@ /@@ z@@ er@@ o@@ "); re@@ cor@@ d@@ er.@@ clear@@ (); java.io.File@@ Input@@ Stream fi@@ s = new java.io.File@@ InputStream@@ (f@@ ); re@@ cor@@ d@@ er.@@ expec@@ t@@ And@@ C@@ le@@ ar@@ ("@@ on@@ Read@@ From@@ Dis@@ k@@ "); fi@@ s.@@ read@@ (@@ new byte@@ [@@ 4@@ ]@@ , 0, 4@@ ); re@@ cor@@ d@@ er.@@ expec@@ t@@ And@@ C@@ le@@ ar@@ ("@@ on@@ Read@@ From@@ Dis@@ k@@ "); fi@@ s.@@ read@@ (); re@@ cor@@ d@@ er.@@ expec@@ t@@ And@@ C@@ le@@ ar@@ ("@@ on@@ Read@@ From@@ Dis@@ k@@ "); fi@@ s.@@ s@@ k@@ ip@@ (1@@ ); re@@ cor@@ d@@ er.@@ expec@@ t@@ And@@ C@@ le@@ ar@@ ("@@ on@@ Read@@ From@@ Dis@@ k@@ "); fi@@ s.@@ close(); }
@java.lang.Override public java.@@ m@@ ath.@@ B@@ ig@@ Integ@@ er get@@ Pri@@ v@@ ate@@ Ex@@ pon@@ ent@@ () { return de@@ le@@ g@@ at@@ e.get@@ Pri@@ v@@ ate@@ Ex@@ pon@@ ent@@ (); }
public void un@@ register@@ Listener@@ () { if ((m@@ Test@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ ) == null@@ ) { android.util.Log.@@ w@@ (android.@@ hardware.@@ cts.@@ hel@@ per@@ s.@@ Test@@ S@@ en@@ s@@ or@@ Manager.@@ LOG@@ _@@ TAG, "@@ N@@ o list@@ en@@ er register@@ ed@@ , return@@ ing.@@ "); return@@ ; } m@@ Test@@ S@@ en@@ s@@ or@@ Event@@ Listen@@ er.@@ on@@ Test@@ St@@ op@@ p@@ ed@@ (); m@@ S@@ en@@ s@@ or@@ Manager.@@ un@@ register@@ Listener@@ (m@@ Test@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ , m@@ En@@ vi@@ ron@@ m@@ ent.get@@ S@@ en@@ s@@ or@@ ()); m@@ Test@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ .@@ assert@@ Event@@ s@@ Recei@@ v@@ ed@@ In@@ Handler@@ (); m@@ Test@@ S@@ en@@ s@@ or@@ Event@@ Listen@@ er = null@@ ; }
public static com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ s@@ ol@@ e get@@ Con@@ so@@ le@@ (com.android.@@ ddmlib.@@ I@@ Device d@@ ) { java.lang.Integ@@ er por@@ t = com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le@@ .get@@ E@@ m@@ ul@@ ator@@ Port@@ (d@@ .get@@ Ser@@ ial@@ Number@@ ()); if (@@ por@@ t == null@@ ) { return null@@ ; } com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ s@@ ol@@ e cons@@ ol@@ e = com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le.@@ ret@@ ri@@ e@@ ve@@ Con@@ so@@ le@@ (@@ port@@ ); if (!(@@ con@@ so@@ le.@@ check@@ Connection@@ ())) { com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le.@@ remove@@ Con@@ so@@ le@@ (@@ con@@ so@@ le.@@ m@@ Port@@ ); cons@@ ol@@ e = null@@ ; } return con@@ so@@ le@@ ; }
public static com.android.bluetooth.@@ avrcp.@@ Met@@ ad@@ at@@ a to@@ Met@@ ad@@ ata@@ (android.@@ media.@@ b@@ row@@ s@@ e.@@ Media@@ B@@ row@@ ser.@@ Media@@ I@@ te@@ m i@@ tem@@ ) { if (i@@ te@@ m == null@@ ) { return com.android.bluetooth.@@ avrcp.@@ Util.@@ e@@ mpty@@ _@@ data@@ (); } android.os.@@ Bund@@ le b@@ und@@ le = com.android.bluetooth.@@ avrcp.@@ Util.@@ des@@ cription@@ To@@ Bund@@ le@@ (i@@ tem@@ .get@@ Des@@ cription@@ ()); if (com.android.bluetooth.@@ avrcp.@@ Util.@@ DE@@ BU@@ G) { for (java.lang.String ke@@ y : b@@ und@@ le.@@ key@@ Set@@ ()) { android.util.Log.e@@ (com.android.bluetooth.@@ avrcp.@@ Util.@@ TAG, ("@@ to@@ Met@@ ad@@ ata@@ : Media@@ Item@@ : Cont@@ ain@@ s@@ Key@@ : " + key@@ )); } } com.android.bluetooth.@@ avrcp.@@ Met@@ ad@@ at@@ a re@@ t = com.android.bluetooth.@@ avrcp.@@ Util.@@ b@@ und@@ le@@ To@@ Met@@ ad@@ ata@@ (b@@ und@@ le@@ ); ret@@ .m@@ edia@@ Id = i@@ tem@@ .get@@ Media@@ Id@@ (); return ret@@ ; }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ Constan@@ t@@ Con@@ di@@ tion@@ s@@ ") @java.lang.Override protected void tex@@ t@@ Changed@@ (@@ javax.@@ sw@@ ing.@@ ev@@ ent.@@ Doc@@ ument@@ Ev@@ ent e) { if ((m@@ y@@ Default@@ Directory@@ Nam@@ e.@@ equal@@ s@@ (m@@ y@@ Directory@@ Nam@@ e.get@@ Text@@ ())) || ((m@@ y@@ Directory@@ Nam@@ e.get@@ Text@@ ().@@ length@@ ()) == 0@@ )) { java.lang.String pro@@ ject@@ Des@@ cri@@ pti@@ on = my@@ Re@@ positor@@ y@@ URL@@ .get@@ Project@@ Des@@ cription@@ (); if ((@@ (m@@ y@@ Re@@ positor@@ y@@ URL@@ ) != null@@ ) && (!(@@ com.google.@@ api.@@ c@@ li@@ ent.@@ r@@ e@@ package@@ d.@@ com.google.common.@@ b@@ ase.@@ String@@ s.@@ is@@ Null@@ Or@@ Empty@@ (pro@@ ject@@ Des@@ cription@@ )@@ ))) { my@@ Default@@ Directory@@ Name = pro@@ ject@@ Des@@ cription@@ .@@ re@@ pla@@ ce@@ All@@ (@@ W@@ iz@@ ard@@ Constants.@@ IN@@ VAL@@ ID@@ _@@ F@@ IL@@ EN@@ AM@@ E_@@ CH@@ A@@ RS@@ , "@@ "); my@@ Default@@ Directory@@ Name = my@@ Default@@ Directory@@ Nam@@ e.@@ re@@ pla@@ ce@@ All@@ ("@@ \@@ \@@ s", "@@ "); } else { my@@ Default@@ Directory@@ Name = "@@ "; } my@@ Directory@@ Nam@@ e.@@ set@@ Text@@ (m@@ y@@ Default@@ Directory@@ Name); } update@@ B@@ utton@@ s(); }
private void check@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 9@@ 1@@ 4@@ 2@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 9@@ 6@@ 4@@ 4@@ 4@@ 4@@ 9@@ 6@@ 4@@ 4@@ 4@@ 4@@ 4@@ 9@@ 6@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ py@@ sign@@ Float4Float4@@ Float4@@ : " + (e.toString()))); } }
public void test@@ S@@ am@@ ple@@ H@@ pro@@ f@@ () throw@@ s java.lang.Exception { java.io.File fi@@ le = new java.io.File@@ (java.lang.@@ Class@@ Load@@ er.get@@ System@@ Resource@@ ("@@ di@@ al@@ er.@@ android@@ -@@ h@@ pro@@ f@@ "@@ ).get@@ File@@ ()); m@@ S@@ n@@ ap@@ sho@@ t = new com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ H@@ pro@@ f@@ Par@@ ser@@ (@@ new com.android.tools.@@ perflib.@@ he@@ ap.@@ io.@@ M@@ em@@ or@@ y@@ M@@ app@@ ed@@ File@@ Buffer@@ (file@@ )).@@ parse@@ (); m@@ S@@ n@@ ap@@ sho@@ t.@@ com@@ pu@@ te@@ Do@@ min@@ ator@@ s(); assert@@ Equal@@ s(@@ 4@@ 2@@ 9@@ 1@@ 1, m@@ S@@ n@@ ap@@ sho@@ t.get@@ Re@@ ach@@ able@@ In@@ stan@@ ces@@ ().@@ size@@ ()); com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ In@@ stan@@ ce in@@ stan@@ ce = m@@ S@@ n@@ ap@@ sho@@ t.@@ find@@ Instance@@ (-1@@ 32@@ 6@@ 5@@ 7@@ 9@@ 8@@ 0@@ 8@@ ); assert@@ Equal@@ s(@@ S@@ n@@ ap@@ sho@@ t.@@ S@@ EN@@ T@@ IN@@ E@@ L_@@ RO@@ O@@ T, instance@@ .get@@ Im@@ m@@ ed@@ i@@ ate@@ Do@@ min@@ ator@@ ()); int app@@ In@@ dex = m@@ S@@ n@@ ap@@ sho@@ t.get@@ He@@ ap@@ Index@@ (m@@ S@@ n@@ ap@@ sho@@ t.get@@ He@@ ap@@ ("@@ app@@ ")); int z@@ y@@ go@@ te@@ In@@ dex = m@@ S@@ n@@ ap@@ sho@@ t.get@@ He@@ ap@@ Index@@ (m@@ S@@ n@@ ap@@ sho@@ t.get@@ He@@ ap@@ ("@@ z@@ y@@ go@@ te@@ ")); com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ Class@@ Ob@@ j ht@@ ml@@ Par@@ se@@ r = m@@ S@@ n@@ ap@@ sho@@ t.@@ find@@ Class@@ ("@@ android.@@ text.@@ H@@ t@@ ml@@ $@@ H@@ t@@ ml@@ Par@@ ser@@ "); assert@@ Equal@@ s(@@ 1@@ 16@@ 4@@ 9@@ 2, ht@@ ml@@ Par@@ s@@ er.get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ z@@ y@@ go@@ te@@ Index@@ )); assert@@ Equal@@ s(@@ 0, ht@@ ml@@ Par@@ s@@ er.get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ app@@ Index@@ )); com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ Class@@ Ob@@ j ac@@ tivity@@ Th@@ re@@ ad = m@@ S@@ n@@ ap@@ sho@@ t.@@ find@@ Class@@ ("@@ android.app.@@ Activity@@ Thread@@ "); assert@@ Equal@@ s(@@ 8@@ 1@@ 3@@ , ac@@ tivity@@ Thread@@ .get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ z@@ y@@ go@@ te@@ Index@@ )); assert@@ Equal@@ s(@@ 5@@ 7@@ 6@@ , ac@@ tivity@@ Thread@@ .get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ app@@ Index@@ )); }
@java.lang.Override public void on@@ N@@ fc@@ F@@ Ser@@ vices@@ Up@@ dat@@ ed@@ (@@ int user@@ Id, java.util.List<@@ android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info@@ > ser@@ vices@@ ) { m@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ on@@ Ser@@ vices@@ Up@@ dat@@ ed@@ (@@ user@@ Id, ser@@ vices@@ ); m@@ Pre@@ fer@@ re@@ d@@ N@@ fc@@ F@@ Ser@@ vices.@@ on@@ Ser@@ vices@@ Up@@ dat@@ ed@@ (); }
private android.content.@@ p@@ m.@@ Package@@ Info g@@ ener@@ ate@@ Package@@ Info@@ From@@ Setting@@ s@@ L@@ P@@ w@@ (java.lang.String package@@ Name, int flag@@ s, int user@@ Id) { if (!@@ (com.android.server.@@ p@@ m.@@ Package@@ Manager@@ Service.@@ s@@ User@@ Manager.@@ exist@@ s(@@ user@@ Id@@ ))) return null@@ ; com.android.server.@@ p@@ m.@@ Package@@ Set@@ t@@ ing p@@ s = m@@ Setting@@ s.@@ m@@ Pack@@ ag@@ es@@ .get@@ (@@ package@@ Name); if (p@@ s != null@@ ) { android.content.@@ p@@ m.@@ Package@@ Par@@ ser.@@ Pack@@ age p@@ k@@ g = p@@ s.@@ p@@ kg@@ ; if (p@@ k@@ g == null@@ ) { if ((@@ flag@@ s & (android.content.@@ p@@ m.@@ Package@@ Manager.@@ G@@ E@@ T_@@ UN@@ IN@@ STA@@ L@@ ED@@ _P@@ AC@@ K@@ A@@ G@@ E@@ S@@ )) == 0) { return null@@ ; } p@@ k@@ g = new android.content.@@ p@@ m.@@ Package@@ Par@@ ser.@@ Package@@ (@@ package@@ Name); p@@ k@@ g.@@ app@@ li@@ cation@@ Info@@ .@@ package@@ Name = package@@ Name@@ ; p@@ k@@ g.@@ app@@ li@@ cation@@ Info.@@ flag@@ s = (p@@ s.@@ p@@ kg@@ Flag@@ s) | (android.content.@@ p@@ m.@@ Application@@ Info.@@ F@@ LA@@ G@@ _@@ IS@@ _@@ DA@@ TA@@ _@@ ON@@ L@@ Y); p@@ k@@ g.@@ app@@ li@@ cation@@ Info@@ .@@ public@@ Source@@ Di@@ r = p@@ s.@@ resource@@ Path@@ String@@ ; p@@ k@@ g.@@ app@@ li@@ cation@@ Info.@@ source@@ Di@@ r = p@@ s.@@ code@@ Path@@ String@@ ; p@@ k@@ g.@@ app@@ li@@ cation@@ Info.@@ data@@ Di@@ r = get@@ Data@@ Path@@ For@@ Package@@ (@@ package@@ Name, 0@@ ).get@@ Path@@ (); p@@ k@@ g.@@ app@@ li@@ cation@@ Info@@ .@@ native@@ Library@@ Di@@ r = ps@@ .@@ native@@ Library@@ Path@@ String@@ ; p@@ k@@ g.@@ app@@ li@@ cation@@ Info.@@ requ@@ ire@@ d@@ C@@ pu@@ Ab@@ i@@ Sup@@ por@@ t = p@@ s.@@ requ@@ ire@@ d@@ C@@ pu@@ Ab@@ i@@ String@@ ; } return g@@ ener@@ ate@@ Package@@ Info@@ (p@@ kg@@ , flag@@ s, user@@ Id); } return null@@ ; }
@java.lang.Override public java.lang.String get@@ Build@@ G@@ rad@@ le@@ Content@@ () { return ((((@@ ("@@ app@@ l@@ y p@@ lu@@ gin@@ : \@@ '@@ java@@ \@@ '@@ \n@@ " + ("@@ \n@@ " + "@@ de@@ pendenc@@ i@@ es {@@ \n@@ "); }
public boolean connect@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { if (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, ("@@ connect@@ ()@@ : " + device@@ )); } e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H AD@@ M@@ I@@ N per@@ mission@@ "); if ((@@ get@@ Pri@@ or@@ ity@@ (device@@ )) == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ O@@ F@@ F@@ )) { return false@@ ; } android.os.@@ Par@@ cel@@ U@@ uid@@ [] f@@ e@@ ature@@ U@@ uid@@ s = device@@ .get@@ U@@ uid@@ s(); if ((@@ android.@@ bluetooth.Bluetooth@@ U@@ uid@@ .@@ contain@@ s@@ An@@ y@@ U@@ uid@@ (f@@ e@@ ature@@ U@@ uid@@ s, com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ A@@ 2@@ D@@ P@@ _S@@ O@@ UR@@ C@@ E_@@ U@@ ID@@ )) && (!@@ (android.bluetooth.Bluetooth@@ U@@ uid@@ .@@ contain@@ s@@ All@@ U@@ uid@@ s(@@ f@@ e@@ ature@@ U@@ uid@@ s, com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ A@@ 2@@ D@@ P@@ _S@@ O@@ UR@@ C@@ E_@@ S@@ IN@@ K_@@ U@@ ID@@ S@@ )@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, "@@ Remo@@ t@@ e do@@ es not h@@ av@@ e A@@ 2@@ D@@ P S@@ in@@ k U@@ U@@ ID@@ "); return false@@ ; } synchronized@@ (m@@ StateMach@@ in@@ es) { com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e sm@@ Connec@@ t = get@@ StateMach@@ ine@@ (device@@ ); if (s@@ m@@ Connec@@ t == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, (("@@ Can@@ not connec@@ t to " + device@@ ) + " : n@@ o st@@ ate m@@ ach@@ ine@@ ")); return false@@ ; } int connection@@ State = sm@@ Connec@@ t.get@@ Connection@@ State@@ (); if ((@@ connection@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ )) || (@@ connection@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ T@@ ING@@ ))) { return false@@ ; } for (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e sm@@ Dis@@ connec@@ t : m@@ StateMach@@ in@@ es.@@ valu@@ es@@ ()) { if (!@@ (s@@ m@@ Dis@@ connec@@ t.get@@ Device@@ ().@@ equals(@@ device@@ ))) { sm@@ Dis@@ connec@@ t.@@ send@@ Message@@ (@@ A@@ 2@@ dp@@ StateMachine.@@ D@@ IS@@ CONNEC@@ T@@ ); } } sm@@ Connec@@ t.@@ send@@ Message@@ (@@ A@@ 2@@ dp@@ StateMachine.@@ CONNEC@@ T@@ ); return true@@ ; } }
public java.lang.String get@@ Test@@ Name@@ () { return test@@ Name@@ ; }
@@@ android.@@ annotation.@@ System@@ Ap@@ i public android.telephony.@@ Icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ se icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ (@@ int sub@@ Id, java.lang.String A@@ ID@@ , int p@@ 2@@ ) { try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ I@@ Telephon@@ y telephon@@ y = get@@ I@@ Telephony@@ (); if (@@ telephon@@ y != null@@ ) return telephony.@@ icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ (s@@ ub@@ Id, A@@ ID@@ , p@@ 2@@ ); } catch (android.os.RemoteException ex@@ ) { } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception ex@@ ) { } return null@@ ; }
@java.lang.Override public int com@@ par@@ e@@ To@@ (com.android.server.@@ net.@@ Network@@ Stat@@ s@@ Collection@@ .@@ Ke@@ y an@@ o@@ th@@ er@@ ) { int re@@ s = 0; if (((@@ id@@ ent@@ ) != null@@ ) && ((@@ an@@ o@@ th@@ er.@@ id@@ ent@@ ) != null@@ )) { re@@ s = id@@ ent.@@ com@@ par@@ e@@ To@@ (@@ an@@ o@@ th@@ er.@@ id@@ ent@@ ); } if (re@@ s == 0) { re@@ s = java.lang.Integ@@ er.@@ com@@ par@@ e@@ (@@ uid@@ , an@@ o@@ th@@ er.@@ uid@@ ); } if (re@@ s == 0) { re@@ s = java.lang.Integ@@ er.@@ com@@ par@@ e@@ (@@ set@@ , an@@ o@@ th@@ er.@@ set@@ ); } if (re@@ s == 0) { re@@ s = java.lang.Integ@@ er.@@ com@@ par@@ e@@ (t@@ ag@@ , an@@ o@@ th@@ er.@@ t@@ ag@@ ); } if (re@@ s == 0) { re@@ s = java.lang.Integ@@ er.@@ com@@ par@@ e@@ (@@ default@@ Network@@ , an@@ o@@ th@@ er@@ .@@ default@@ Network@@ ); } return res@@ ; }
@java.lang.Override public void set@@ Ac@@ ces@@ si@@ ble@@ (@@ boolean al@@ low@@ ) { b@@ lock@@ .@@ al@@ low@@ Access@@ (@@ al@@ low@@ ); }
public void set@@ e@@ uid@@ (@@ int e@@ uid@@ ) throw@@ s android.system.@@ ErrnoException { os.@@ set@@ e@@ uid@@ (e@@ uid@@ ); }
@com.android.annotations.NonNull public java.util.List<@@ java.lang.Integ@@ er@@ > get@@ Le@@ g@@ ac@@ y@@ Api@@ Level@@ s() { return le@@ g@@ ac@@ y@@ Api@@ Level@@ s; }
@java.lang.Override public com.android.@@ ch@@ im@@ p@@ ch@@ at@@ .@@ core.@@ I@@ Ch@@ im@@ p@@ B@@ ack@@ en@@ d create@@ B@@ ack@@ end@@ By@@ Name@@ (java.lang.String back@@ end@@ Name@@ ) { if ("@@ ad@@ b@@ "@@ .@@ equals(@@ back@@ end@@ Name@@ )) { java.lang.String loc@@ ation = option@@ s.get@@ ("@@ ad@@ b@@ Location@@ "); if (@@ loc@@ ation == null@@ ) { return new com.android.@@ ch@@ im@@ p@@ ch@@ at@@ .@@ ad@@ b.@@ Adb@@ B@@ ack@@ end@@ (); } else { return new com.android.@@ ch@@ im@@ p@@ ch@@ at@@ .@@ ad@@ b.@@ Adb@@ B@@ ack@@ end@@ (@@ loc@@ ation@@ ); } } else if ("@@ st@@ ub@@ "@@ .@@ equals(@@ back@@ end@@ Name@@ )) { return new com.android.@@ ch@@ im@@ p@@ ch@@ at@@ .@@ st@@ ub@@ .@@ St@@ ub@@ B@@ ack@@ end@@ (); } else { return null@@ ; } }
@org.junit.Test public void test@@ W@@ if@@ i@@ con@@ d@@ Null@@ W@@ h@@ en@@ S@@ wit@@ ch@@ ing@@ To@@ Ap@@ Mode@@ () throw@@ s java.lang.Exception { when(m@@ W@@ if@@ i@@ In@@ ject@@ or@@ .m@@ ake@@ W@@ if@@ i@@ con@@ d@@ ()).@@ thenReturn@@ (@@ null@@ ); m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.@@ en@@ ter@@ S@@ o@@ f@@ t@@ AP@@ Mode@@ (@@ null@@ ); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e@@ Test.@@ S@@ O@@ F@@ T_@@ AP@@ _M@@ OD@@ E_@@ STATE_@@ S@@ TR@@ ING@@ , m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); }
@org.junit.Test public void test@@ S@@ pli@@ t@@ Ch@@ ain@@ No@@ S@@ pli@@ t@@ Dependenc@@ ies@@ () { android.content.@@ p@@ m.@@ Application@@ Info a@@ i = create@@ Mock@@ Application@@ Info@@ (com.android.server.@@ p@@ m.@@ dex.@@ Dex@@ op@@ t@@ Uti@@ l@@ s@@ Test.@@ P@@ A@@ TH@@ _C@@ LA@@ SS@@ _@@ LO@@ AD@@ ER@@ _N@@ AME@@ , true@@ , false@@ ); java.lang.String[] sh@@ ar@@ ed@@ Librar@@ y = new java.lang.String@@ []{ "@@ a.@@ dex@@ ", "@@ b.@@ dex@@ " }; java.lang.String[] contex@@ t@@ s = com.android.server.@@ p@@ m.@@ dex.@@ Dex@@ op@@ t@@ Utils.@@ get@@ Class@@ Load@@ er@@ Context@@ s(@@ a@@ i@@ , sh@@ ar@@ ed@@ Library@@ ); assert@@ Equal@@ s(@@ 7@@ , contex@@ ts.@@ length); assert@@ Equal@@ s("@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ ]@@ ", contex@@ ts@@ [0@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 1@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 2@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 3@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 4@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 5@@ ]@@ ); assert@@ Equal@@ s("@@ P@@ C@@ L@@ []@@ ;@@ P@@ C@@ L@@ [@@ a.@@ dex@@ :@@ b.@@ dex@@ :@@ b@@ ase.@@ dex@@ ]@@ ", contex@@ ts@@ [@@ 6@@ ]@@ ); }
public static void com@@ pu@@ te@@ Rs@@ q@@ r@@ t@@ (android.@@ renderscript.@@ cts.@@ Test@@ Rs@@ q@@ r@@ t.@@ Argument@@ s@@ Float@@ F@@ lo@@ at arg@@ s) { args.@@ ul@@ f = 2@@ ; args.@@ ul@@ f@@ Relax@@ ed = 2@@ ; args.@@ out = (@@ (@@ float@@ ) (@@ java.lang.Str@@ i@@ ct@@ M@@ ath.@@ po@@ w@@ (@@ args.@@ in@@ , (@@ -@@ 0.@@ 5@@ )))); }
public void open@@ () { org.eclipse.swt.@@ widget@@ s.@@ Dis@@ pla@@ y dis@@ pla@@ y = org.eclipse.swt.@@ widget@@ s.@@ Display@@ .get@@ Default@@ (); create@@ Content@@ s(); po@@ st@@ Create@@ (); ms@@ hel@@ l.@@ open@@ (); ms@@ hel@@ l.@@ lay@@ out@@ (); while (!(m@@ sh@@ el@@ l.@@ is@@ Dis@@ po@@ sed@@ ())) { if (!(@@ dis@@ pla@@ y.@@ read@@ And@@ Dis@@ p@@ atch@@ ())) { dis@@ pla@@ y.@@ s@@ le@@ e@@ p@@ (); } } }
public static java.lang.String get@@ Property@@ (java.lang.String name@@ , java.lang.String default@@ Value@@ ) { java.lang.System.@@ check@@ Property@@ Name@@ (@@ name@@ ); return java.lang.@@ System@@ .get@@ User@@ Mo@@ d@@ if@@ i@@ able@@ Properties@@ ().get@@ Property@@ (@@ name@@ , default@@ Value@@ ); }
public final void m@@ er@@ ge@@ Un@@ s@@ or@@ ted@@ () { get@@ Sec@@ tion@@ (@@ cont@@ ent@@ s@@ Out@@ ).@@ o@@ f@@ f = ou@@ t.get@@ Posi@@ tion@@ (); java.util.List<@@ com.android.@@ dx.@@ merg@@ e.@@ Dex@@ Merg@@ er.@@ Id@@ Merg@@ er@@ <@@ T@@ >@@ .@@ Un@@ s@@ or@@ ted@@ Value@@ > al@@ l = new java.util.ArrayList<@@ com.android.@@ dx.@@ merg@@ e.@@ Dex@@ Merg@@ er.@@ Id@@ Merg@@ er@@ <@@ T@@ >@@ .@@ Un@@ s@@ or@@ ted@@ Value@@ >(); for (@@ int i = 0; i < (@@ dex@@ es.@@ length); i++) { al@@ l.@@ add@@ All@@ (@@ read@@ Un@@ s@@ or@@ ted@@ Valu@@ es(@@ dex@@ es@@ [i]@@ , index@@ Map@@ s@@ [i]@@ )); } java.util.Collection@@ s.@@ s@@ ort@@ (@@ all@@ ); int out@@ Coun@@ t = 0; for (@@ int i = 0; i < (@@ al@@ l.@@ size@@ ()@@ )@@ ;@@ ) { com.android.@@ dx.@@ merg@@ e.@@ Dex@@ Merg@@ er.@@ Id@@ Merg@@ er@@ <@@ T@@ >@@ .@@ Un@@ s@@ or@@ ted@@ Value e@@ 1 = al@@ l.get@@ ((@@ i@@ ++@@ )); update@@ Index@@ (e@@ 1.@@ offset@@ , get@@ Index@@ Map@@ (e@@ 1.@@ source@@ ), e@@ 1.@@ index@@ , (@@ out@@ Coun@@ t - 1@@ )); while ((@@ i < (@@ al@@ l.@@ size@@ ())) && ((@@ e@@ 1.@@ com@@ par@@ e@@ To@@ (@@ al@@ l.get@@ (i@@ ))) == 0@@ )) { com.android.@@ dx.@@ merg@@ e.@@ Dex@@ Merg@@ er.@@ Id@@ Merg@@ er@@ <@@ T@@ >@@ .@@ Un@@ s@@ or@@ ted@@ Value e@@ 2 = al@@ l.get@@ ((@@ i@@ ++@@ )); update@@ Index@@ (e@@ 2.@@ offset@@ , get@@ Index@@ Map@@ (e@@ 2.@@ source@@ ), e@@ 2.@@ index@@ , (@@ out@@ Coun@@ t - 1@@ )); } write@@ (e@@ 1.@@ valu@@ e); out@@ Count@@ ++@@ ; } get@@ Sec@@ tion@@ (@@ cont@@ ent@@ s@@ Out@@ ).@@ siz@@ e = out@@ Count@@ ; }
@java.lang.Override public void handle@@ (com.android.@@ ahat.@@ Do@@ c do@@ c@@ , com.android.ahat.@@ Q@@ u@@ er@@ y qu@@ er@@ y@@ ) throw@@ s java.io.IOException { int st@@ ack@@ Id = qu@@ er@@ y@@ .get@@ Int@@ ("@@ st@@ ack@@ ", 0); int de@@ p@@ th = qu@@ er@@ y@@ .get@@ Int@@ ("@@ de@@ p@@ th@@ ", 0); java.lang.String class@@ Name = qu@@ er@@ y@@ .get@@ (@@ "@@ class@@ ", null@@ ); java.lang.String he@@ ap@@ Name = qu@@ er@@ y@@ .get@@ ("@@ he@@ ap@@ ", null@@ ); com.android.ahat.@@ S@@ it@@ e si@@ t@@ e = m@@ S@@ n@@ ap@@ sho@@ t.get@@ S@@ ite@@ (@@ st@@ ack@@ Id, de@@ p@@ th@@ ); java.util.List<@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > in@@ st@@ s = new java.util.ArrayList<@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ >(); for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce in@@ s@@ t : si@@ te@@ .get@@ Object@@ s@@ ()) { if ((@@ in@@ s@@ t.get@@ He@@ ap@@ ().get@@ Name@@ ().@@ equals(@@ he@@ ap@@ Name@@ )) && (@@ (@@ class@@ Name == null@@ ) || (com.android.@@ ahat.@@ A@@ hat@@ S@@ n@@ ap@@ sho@@ t.get@@ Class@@ Name@@ (in@@ s@@ t.get@@ Class@@ Ob@@ j@@ ()).@@ equal@@ s@@ (@@ class@@ Name@@ )@@ ))) { in@@ st@@ s.add@@ (in@@ st@@ ); } } java.util.Collection@@ s.@@ s@@ ort@@ (in@@ st@@ s, com.android.ahat.@@ S@@ ort@@ .@@ default@@ Instance@@ Comp@@ ar@@ e@@ (m@@ S@@ n@@ ap@@ sho@@ t@@ )); do@@ c.@@ ti@@ t@@ le@@ ("@@ Object@@ s@@ "); do@@ c.@@ t@@ able@@ (@@ new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Size@@ ", Co@@ lum@@ n@@ .@@ A@@ li@@ gn@@ .@@ R@@ I@@ G@@ H@@ T@@ ), new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ He@@ ap@@ "), new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Object@@ ")); com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ct@@ or sele@@ ct@@ or = new com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ctor@@ (@@ qu@@ er@@ y@@ , com.android.ahat.@@ Object@@ s@@ Handler.@@ O@@ B@@ J@@ EC@@ T@@ S_@@ ID@@ , in@@ st@@ s.@@ size@@ ()); int li@@ m@@ i@@ t = sele@@ ctor@@ .get@@ Sele@@ c@@ ted@@ Li@@ m@@ it@@ (); java.util.@@ I@@ terator@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > i@@ ter = in@@ st@@ s.@@ i@@ terator@@ (); for (@@ int i = 0; (@@ i < li@@ m@@ it@@ ) && (@@ it@@ er.@@ has@@ Next@@ ()); i++) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce in@@ s@@ t = it@@ er.@@ next@@ (); do@@ c.@@ row@@ (com.android.@@ ahat.@@ Doc@@ String@@ .@@ for@@ mat@@ ("@@ %@@ ,@@ d@@ ", in@@ s@@ t.get@@ Size@@ ()@@ ), com.android.ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ (in@@ s@@ t.get@@ He@@ ap@@ ().get@@ Name@@ ()@@ ), com.android.ahat.@@ Valu@@ e.@@ render@@ (in@@ st@@ )); } do@@ c.@@ end@@ (); sele@@ ctor@@ .@@ render@@ (@@ do@@ c@@ ); }
private void test@@ Change@@ F@@ on@@ t@@ S@@ c@@ ale@@ (java.lang.String ac@@ tivity@@ Name, boolean re@@ la@@ un@@ ch@@ ) throw@@ s java.lang.Exception { java.lang.String log@@ Se@@ par@@ at@@ or = clear@@ Log@@ cat@@ (); la@@ un@@ ch@@ Activity@@ (@@ ac@@ tivity@@ Name); final java.lang.String[] wait@@ For@@ Ac@@ tivi@@ ties@@ Visi@@ b@@ le = new java.lang.String@@ []{ ac@@ tivity@@ Name }; m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , wait@@ For@@ Ac@@ tivi@@ ties@@ Visi@@ ble@@ ); set@@ F@@ on@@ t@@ S@@ c@@ ale@@ (@@ 1.@@ 0F@@ ); m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , wait@@ For@@ Ac@@ tivi@@ ties@@ Visi@@ ble@@ ); final int d@@ en@@ si@@ ty@@ D@@ p@@ i = get@@ G@@ lo@@ b@@ al@@ D@@ en@@ si@@ ty@@ D@@ pi@@ (@@ ac@@ tivity@@ Name, log@@ Se@@ par@@ ator@@ ); for (@@ float f@@ on@@ t@@ S@@ cal@@ e = 0.@@ 8@@ 5@@ F@@ ; f@@ on@@ t@@ S@@ cal@@ e <@@ = 1.@@ 3@@ F@@ ; f@@ on@@ t@@ S@@ cal@@ e +@@ = 0.@@ 1@@ 5@@ F@@ ) { log@@ Se@@ par@@ at@@ or = clear@@ Log@@ cat@@ (); set@@ F@@ on@@ t@@ S@@ c@@ ale@@ (f@@ on@@ t@@ S@@ c@@ ale@@ ); m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , wait@@ For@@ Ac@@ tivi@@ ties@@ Visi@@ ble@@ ); assert@@ Re@@ la@@ un@@ ch@@ Or@@ Config@@ Changed@@ (@@ ac@@ tivity@@ Name, (re@@ la@@ un@@ ch ? 1 : 0@@ ), (re@@ la@@ un@@ ch ? 0 : 1@@ ), log@@ Se@@ par@@ ator@@ ); assert@@ Ex@@ pec@@ ted@@ F@@ on@@ t@@ P@@ i@@ x@@ el@@ Size@@ (@@ ac@@ tivity@@ Name, android.@@ server.@@ cts.@@ Activity@@ Manager@@ Config@@ Change@@ Test@@ s.@@ s@@ c@@ ale@@ d@@ P@@ i@@ x@@ el@@ s@@ To@@ P@@ i@@ x@@ el@@ s(@@ android.@@ server.@@ cts.@@ Activity@@ Manager@@ Config@@ Change@@ Test@@ s.@@ EX@@ P@@ EC@@ TED@@ _@@ F@@ ON@@ T_@@ SIZ@@ E_@@ S@@ P@@ , f@@ on@@ t@@ S@@ c@@ ale@@ , d@@ en@@ si@@ ty@@ D@@ pi@@ ), log@@ Se@@ par@@ ator@@ ); } }
public com.android.@@ test.@@ common.@@ fi@@ xt@@ ure@@ .@@ G@@ rad@@ le@@ Test@@ Pro@@ jec@@ t.@@ Builder f@@ rom@@ S@@ am@@ ple@@ (@@ @com.android.annotations.NonNull java.lang.String pro@@ ject@@ ) { pro@@ ject@@ Di@@ r = new java.io.File@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ fi@@ xt@@ ure@@ .@@ G@@ rad@@ le@@ Test@@ Pro@@ jec@@ t.@@ Build@@ er.@@ S@@ AM@@ P@@ L@@ E_@@ PRO@@ J@@ EC@@ T_@@ DI@@ R@@ , pro@@ ject@@ ); return this@@ ; }
public boolean connect@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H AD@@ M@@ I@@ N per@@ mission@@ "); if (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, ("@@ connect@@ ()@@ : " + device@@ )); } if ((@@ get@@ Pri@@ or@@ ity@@ (device@@ )) == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ O@@ F@@ F@@ )) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, (("@@ Can@@ not connec@@ t to " + device@@ ) + " : P@@ R@@ IO@@ R@@ ITY@@ _@@ O@@ F@@ ")); return false@@ ; } if (!@@ (android.bluetooth.Bluetooth@@ U@@ uid@@ .is@@ U@@ uid@@ P@@ res@@ ent@@ (m@@ Adapter@@ Service@@ .get@@ Remote@@ U@@ uid@@ s(@@ device@@ ), Bluetooth@@ U@@ uid@@ .@@ Audio@@ S@@ in@@ k@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, (("@@ Can@@ not connec@@ t to " + device@@ ) + " : Remo@@ t@@ e do@@ es not h@@ av@@ e A@@ 2@@ D@@ P S@@ in@@ k U@@ U@@ U@@ ID@@ ")); return false@@ ; } synchronized@@ (m@@ StateMach@@ in@@ es) { if (!(@@ can@@ Connec@@ t@@ To@@ Device@@ (device@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, (("@@ Can@@ not connec@@ t to " + device@@ ) + " : to@@ o man@@ y connec@@ ted de@@ vices@@ ")); return false@@ ; } com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e sm@@ Connec@@ t = get@@ Or@@ Create@@ StateMach@@ ine@@ (device@@ ); if (s@@ m@@ Connec@@ t == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, (("@@ Can@@ not connec@@ t to " + device@@ ) + " : n@@ o st@@ ate m@@ ach@@ ine@@ ")); return false@@ ; } sm@@ Connec@@ t.@@ send@@ Message@@ (@@ A@@ 2@@ dp@@ StateMachine.@@ CONNEC@@ T@@ ); return true@@ ; } }
public void test@@ Connec@@ t@@ O@@ ver@@ Prox@@ y@@ _@@ ex@@ pli@@ c@@ it@@ _@@ h@@ ttp@@ _@@ us@@ es@@ _@@ di@@ re@@ ct@@ _@@ connection@@ () throw@@ s java.lang.Exception { libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ Count@@ ing@@ Prox@@ y count@@ ing@@ Prox@@ y = libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ Count@@ ing@@ Prox@@ y.@@ start@@ (); try { java.net.@@ Prox@@ y pro@@ x@@ y = count@@ ing@@ Prox@@ y.@@ as@@ Prox@@ y@@ (); s@@ un@@ .@@ net.@@ w@@ w@@ w@@ w@@ .@@ pro@@ to@@ co@@ l.@@ f@@ t@@ p.@@ F@@ t@@ p@@ URL@@ Connec@@ tion connec@@ tion = ((@@ s@@ un@@ .@@ net.@@ w@@ w@@ w@@ .@@ pro@@ to@@ co@@ l.@@ f@@ t@@ p.@@ F@@ t@@ p@@ URL@@ Connection@@ ) (file@@ Ur@@ l.@@ open@@ Connection@@ (pro@@ x@@ y@@ ))); libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test@@ .@@ assert@@ Content@@ s(@@ connection@@ .get@@ InputStream@@ ()); } final@@ l@@ y { int num@@ Connection@@ s = count@@ ing@@ Prox@@ y.@@ sh@@ u@@ t@@ do@@ wn@@ And@@ Get@@ Connection@@ Count@@ (); assert@@ Equal@@ s(@@ 0, num@@ Connection@@ s); } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public java.lang.String get@@ Name@@ () { return com.android.jack.@@ Jack@@ .get@@ Un@@ mo@@ d@@ if@@ i@@ able@@ Collection@@ s@@ ().get@@ Un@@ mo@@ d@@ if@@ i@@ able@@ Collection@@ s@@ ().get@@ Un@@ mo@@ d@@ if@@ i@@ able@@ Collection@@ (b@@ ad@@ z@@ ip@@ File@@ .getName@@ ()); }
@java.lang.Override public synchronized void res@@ et@@ () throw@@ s java.io.IOException { source@@ .@@ res@@ et@@ (); }
@java.lang.Override public boolean equals(@@ java.lang.Object ob@@ j@@ ) { if ((@@ ob@@ j == null@@ ) || ((@@ ob@@ j instanceof android.net.Network@@ Capabilities@@ ) == false@@ )) return false@@ ; android.net.Network@@ Capabili@@ ti@@ es th@@ at = ((@@ android.net.Network@@ Capabilities@@ ) (@@ ob@@ j@@ )); return ((((@@ (@@ equal@@ s@@ Net@@ Capabilities@@ (@@ th@@ at@@ )) && (@@ equal@@ s@@ Un@@ w@@ an@@ ted@@ Net@@ Capabilities@@ (@@ th@@ at@@ ))) && (@@ equal@@ s@@ Trans@@ port@@ Typ@@ es(@@ th@@ at@@ ))) && (@@ equal@@ s@@ Link@@ B@@ and@@ wid@@ th@@ s(@@ th@@ at@@ ))) && (@@ equal@@ s@@ Sign@@ al@@ Str@@ ength@@ (@@ th@@ at@@ ))) && (@@ equal@@ s@@ S@@ pe@@ c@@ if@@ ier@@ (@@ th@@ at@@ ))) && (@@ equal@@ s@@ U@@ id@@ s(@@ th@@ at@@ )); }
@@@ org.@@ gradle.@@ model.@@ M@@ ut@@ ate public void config@@ ure@@ Native@@ Bin@@ ary@@ (@@ org.@@ gradle.@@ pla@@ t@@ for@@ m.@@ b@@ ase.@@ Bin@@ ary@@ Cont@@ ain@@ er b@@ in@@ ar@@ ies@@ , org.@@ gradle.@@ pla@@ t@@ for@@ m.@@ b@@ ase.@@ Comp@@ on@@ ent@@ Spec@@ Cont@@ ain@@ er spec@@ s, @@@ org.@@ gradle.@@ model.@@ Path@@ ("@@ android.@@ n@@ dk@@ ") com.android.build.gradle.@@ man@@ ag@@ ed.@@ N@@ dk@@ Con@@ fig n@@ dk@@ Config@@ , @@@ org.@@ gradle.@@ model.@@ Path@@ ("@@ build@@ Dir@@ ") final java.io.File build@@ Dir@@ , final com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Handle@@ r n@@ dk@@ Handler@@ ) { if (!(@@ n@@ dk@@ Config.@@ get@@ Mod@@ ule@@ Name@@ ().@@ isEmpty@@ ())) { final org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ Native@@ Library@@ S@@ pe@@ c librar@@ y = spec@@ s.@@ w@@ ith@@ Type@@ (@@ org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ Native@@ Library@@ Spec@@ .@@ class@@ ).get@@ (@@ n@@ dk@@ Config.@@ get@@ Mod@@ ule@@ Name@@ ()); b@@ in@@ ar@@ i@@ es.@@ w@@ ith@@ Type@@ (com.android.@@ build@@ .gradle.@@ model.@@ Default@@ Android@@ Bin@@ ary@@ .@@ class@@ , new org.@@ gradle.@@ api.@@ Action@@ <@@ com.android.build.gradle.@@ model.@@ Default@@ Android@@ Bin@@ ary@@ >@@ () { @java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ model.@@ Default@@ Android@@ Bin@@ ar@@ y b@@ in@@ ary@@ ) { java.util.Collection@@ <@@ org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ S@@ har@@ ed@@ Library@@ Bin@@ ary@@ Spec@@ > native@@ Bin@@ ar@@ i@@ es = com.android.build.gradle.@@ model.@@ N@@ dk@@ Comp@@ on@@ ent@@ Mode@@ l@@ P@@ lu@@ gin@@ .get@@ Native@@ Bin@@ ar@@ i@@ es(@@ librar@@ y@@ , b@@ in@@ ary@@ .get@@ Build@@ Type@@ (), b@@ in@@ ary@@ .get@@ Pro@@ duct@@ Flavor@@ s()); b@@ in@@ ary@@ .get@@ Native@@ Bin@@ ar@@ ies@@ ().@@ add@@ All@@ (@@ native@@ Bin@@ ar@@ ies@@ ); for (@@ org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ S@@ har@@ ed@@ Library@@ Bin@@ ary@@ S@@ pe@@ c native@@ B@@ in : native@@ Bin@@ ar@@ i@@ es) { com.android.build.gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Configur@@ ation.@@ config@@ ure@@ Bin@@ ary@@ (@@ native@@ Bin@@ , build@@ Dir@@ , b@@ in@@ ary@@ .get@@ Merg@@ ed@@ N@@ dk@@ Config@@ (), n@@ dk@@ Handler@@ ); } } }); } }
public boolean start@@ W@@ ps@@ Reg@@ is@@ tr@@ ar@@ (java.lang.String b@@ ss@@ id@@ Str@@ , java.lang.String p@@ in@@ ) { if ((@@ !@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (b@@ ss@@ id@@ Str@@ ))) || (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (p@@ in@@ )@@ ))) return false@@ ; return start@@ W@@ ps@@ Reg@@ is@@ tr@@ ar@@ (com.android.server.@@ w@@ if@@ i.@@ util.@@ Native@@ Util.@@ m@@ ac@@ Address@@ To@@ ByteArray@@ (b@@ ss@@ id@@ Str@@ ), p@@ in@@ ); }
private void test@@ For@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ () { if (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ NO@@ _@@ A@@ UT@@ O@@ C@@ LO@@ SE@@ ) { return@@ ; } java.net.@@ H@@ ttp@@ URL@@ Connec@@ tion ur@@ l@@ Connec@@ tion = null@@ ; int h@@ ttp@@ Response@@ Co@@ de = 5@@ 00@@ ; try { ur@@ l@@ Connec@@ tion = ((@@ java.net.@@ H@@ ttp@@ URL@@ Connection@@ ) (m@@ Network@@ .@@ open@@ Connection@@ (m@@ Ur@@ l@@ ))); ur@@ l@@ Connection@@ .set@@ Instance@@ Fol@@ low@@ R@@ ed@@ ire@@ ct@@ s@@ (@@ false@@ ); ur@@ l@@ Connection@@ .set@@ Connec@@ t@@ Time@@ out@@ (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ S@@ O@@ C@@ KE@@ T_@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ ); ur@@ l@@ Connection@@ .set@@ Read@@ Time@@ out@@ (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ S@@ O@@ C@@ KE@@ T_@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ ); ur@@ l@@ Connection@@ .set@@ Read@@ Time@@ out@@ (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ S@@ O@@ C@@ KE@@ T_@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ ); ur@@ l@@ Connection@@ .set@@ U@@ se@@ Cach@@ es@@ (@@ false@@ ); if ((m@@ User@@ A@@ g@@ ent@@ ) != null@@ ) { ur@@ l@@ Connection@@ .set@@ Request@@ Property@@ ("@@ User@@ -@@ A@@ g@@ ent@@ ", m@@ User@@ A@@ g@@ ent@@ ); } java.lang.String request@@ Head@@ er = ur@@ l@@ Connection@@ .get@@ Request@@ Properties@@ ().@@ toString@@ (); ur@@ l@@ Connection@@ .get@@ InputStream@@ (); h@@ ttp@@ Response@@ Co@@ de = ur@@ l@@ Connection@@ .get@@ Response@@ Code@@ (); if (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ DBG) { android.util.Log.d@@ (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ TAG, ((((@@ ((("@@ pro@@ b@@ e at " + (m@@ Ur@@ l@@ )) + " ret@@ =@@ ") + h@@ ttp@@ Response@@ Code@@ ) + " request@@ =@@ ") + request@@ Head@@ er@@ ) + " he@@ ad@@ er@@ s@@ =@@ ") + (@@ ur@@ l@@ Connection@@ .get@@ Head@@ er@@ Field@@ s@@ ()))); } } catch (java.io.IOException e) { } final@@ l@@ y { if (@@ ur@@ l@@ Connec@@ tion != null@@ ) ur@@ l@@ Connection@@ .@@ dis@@ connect@@ (); } if (@@ h@@ ttp@@ Response@@ Co@@ de == 2@@ 0@@ 4@@ ) { do@@ ne@@ (com.android.@@ c@@ a@@ pti@@ ve@@ port@@ al@@ log@@ in@@ .@@ C@@ a@@ pti@@ ve@@ Port@@ al@@ Log@@ in@@ Ac@@ tivity.@@ Res@@ ult.@@ D@@ IS@@ M@@ I@@ SS@@ ED@@ ); } }@@ ).@@ start@@ (); }
@java.lang.Override int b@@ l@@ end@@ () { float r = ((@@ d@@ st@@ R@@ ) * (s@@ rc@@ A@@ )) + ((@@ 1 - (d@@ st@@ A@@ )) * (s@@ rc@@ R@@ )); float g = ((@@ d@@ st@@ G) * (s@@ rc@@ A@@ )) + ((@@ 1 - (d@@ st@@ A@@ )) * (s@@ rc@@ G@@ )); float b = ((@@ d@@ st@@ B@@ ) * (s@@ rc@@ A@@ )) + ((@@ 1 - (d@@ st@@ A@@ )) * (s@@ rc@@ B@@ )); float a = src@@ A@@ ; return pack@@ (@@ a@@ , r@@ , g@@ , b@@ ); }
@org.junit.Test public void ne@@ g@@ _@@ float@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ NE@@ G@@ _@@ FLOA@@ T@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
private boolean ar@@ e@@ Stream@@ s@@ C@@ lo@@ sed@@ () { boolean str@@ eam@@ s@@ C@@ lose@@ d = true@@ ; synchronized@@ (@@ open@@ ed@@ Stream@@ s) { for (com.android.s@@ ched.@@ util.@@ str@@ eam@@ .@@ Q@@ u@@ er@@ y@@ able@@ Stream str@@ eam@@ s : open@@ ed@@ Stream@@ s) { str@@ eam@@ s@@ C@@ lose@@ d &@@ = str@@ eam@@ s.@@ is@@ C@@ lo@@ sed@@ (); } } return str@@ eam@@ s@@ C@@ lo@@ sed@@ ; }
@java.lang.Override public boolean equals(@@ java.lang.Object o@@ th@@ er@@ ) { if (@@ (@@ this@@ ) == o@@ th@@ er@@ ) { return true@@ ; } if (!(@@ o@@ th@@ er instanceof android.telephony.@@ C@@ ell@@ Id@@ enti@@ ty@@ L@@ te@@ )) { return false@@ ; } android.telephony.@@ C@@ ell@@ Id@@ enti@@ ty@@ L@@ t@@ e o = ((@@ android.telephony.@@ C@@ ell@@ Id@@ enti@@ ty@@ L@@ te@@ ) (o@@ th@@ er@@ )); return ((((@@ ((@@ ((m@@ M@@ cc@@ ) == (o@@ .m@@ M@@ cc@@ )) && ((m@@ M@@ n@@ c@@ ) == (o@@ .m@@ M@@ n@@ c@@ ))) && ((m@@ C@@ i@@ ) == (o@@ .m@@ C@@ i@@ ))) && ((m@@ P@@ c@@ i@@ ) == (o@@ .m@@ P@@ c@@ i@@ ))) && ((m@@ T@@ ac@@ ) == (o@@ .m@@ T@@ ac@@ ))) && ((m@@ E@@ ar@@ fc@@ n@@ ) == (o@@ .m@@ E@@ ar@@ fc@@ n@@ ))) && (android.@@ text.@@ Text@@ Utils.@@ equal@@ s@@ (m@@ Al@@ p@@ h@@ a@@ Long@@ ))) && (android.@@ text.@@ Text@@ Utils.@@ equal@@ s@@ (m@@ Al@@ p@@ h@@ a@@ Sh@@ or@@ t.@@ equals(@@ o@@ .m@@ Al@@ p@@ h@@ a@@ Short@@ )); }
private void not@@ if@@ y@@ Interface@@ Link@@ State@@ Changed@@ (java.lang.String if@@ a@@ ce@@ , boolean up@@ ) { invok@@ e@@ For@@ All@@ Ob@@ server@@ s(@@ ( o@@ ) -@@ > o@@ .@@ int@@ er@@ face@@ Link@@ State@@ Changed@@ (@@ if@@ a@@ ce@@ , up@@ )); }
public java.lang.String p@@ ret@@ ty@@ Name@@ (java.lang.String name@@ ) { if ((@@ name != null@@ ) && ((@@ nam@@ e.@@ length@@ ()) > 0@@ )) { name = (java.lang.@@ Char@@ act@@ er.@@ to@@ Up@@ per@@ C@@ ase@@ (@@ name@@ .@@ char@@ At@@ (0@@ ))) + (@@ nam@@ e.@@ sub@@ string@@ (1@@ ).@@ re@@ pla@@ ce@@ (@@ '@@ _@@ '@@ , ' '@@ )); } return name@@ ; }
public static void assert@@ SSL@@ Socket@@ Fa@@ ctory@@ (@@ javax.net.ssl.@@ SSL@@ Socket@@ Fa@@ ctor@@ y ss@@ l@@ Socket@@ Fa@@ ctory@@ ) { libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ Default@@ Cip@@ her@@ Su@@ it@@ es@@ (s@@ s@@ l@@ Socket@@ Fa@@ ctory@@ .get@@ Default@@ Cip@@ her@@ Su@@ it@@ es@@ ()); libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ (s@@ s@@ l@@ Socket@@ Fa@@ ctory@@ .get@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ ()); libcore.@@ javax.net.ssl.@@ SSL@@ Default@@ Configuration@@ Asser@@ ts@@ .@@ assert@@ Cont@@ ain@@ s@@ All@@ ("@@ Un@@ suppor@@ ted default c@@ ip@@ h@@ er su@@ it@@ es@@ ", ss@@ l@@ Socket@@ Fa@@ ctory@@ .get@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ (), ss@@ l@@ Socket@@ Fa@@ ctory@@ .get@@ Default@@ Cip@@ her@@ Su@@ it@@ es@@ ()); javax.net.ssl.@@ SSL@@ S@@ ock@@ et ss@@ l@@ Socket@@ ; try { ss@@ l@@ Socket@@ Fa@@ ctor@@ y.@@ create@@ Socket@@ ())); } catch (java.io.IOException e) { throw new java.lang.Runtime@@ Exception(@@ e); } libcore.@@ javax.net.ssl.@@ SSL@@ Default@@ Configuration@@ Asser@@ ts@@ .@@ assert@@ SSL@@ Socket@@ (s@@ s@@ l@@ Socket@@ ); }
public static final java.lang.@@ Run@@ n@@ able ch@@ ild@@ Z@@ y@@ go@@ te@@ In@@ it@@ (@@ int target@@ Sdk@@ Version@@ , java.lang.String[] arg@@ v@@ , java.lang.@@ Class@@ Load@@ er class@@ Load@@ er@@ ) { final com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ Argument@@ s arg@@ s = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ Argument@@ s(@@ arg@@ v@@ ); return com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ find@@ St@@ ati@@ c@@ M@@ ain@@ (@@ args.@@ start@@ Class@@ , args.@@ start@@ Arg@@ s, class@@ Load@@ er@@ ); }
@java.lang.Override public void on@@ Q@@ ue@@ ue@@ Changed@@ (@@ java.util.List<@@ android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ Item@@ > qu@@ e@@ ue@@ ) { if (@@ qu@@ e@@ u@@ e == null@@ ) { android.util.Log.@@ v@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ TAG, "@@ on@@ Q@@ ue@@ ue@@ Changed@@ : re@@ cei@@ ve@@ d null qu@@ e@@ ue@@ "); return@@ ; } final com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ Av@@ rc@@ p@@ Message@@ Handle@@ r handle@@ r = m@@ Handler@@ ; if (@@ handle@@ r == null@@ ) { if (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ TAG, "@@ m@@ Handle@@ r is al@@ read@@ y null@@ "); return@@ ; } android.util.Log.@@ v@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ TAG, ("@@ on@@ Q@@ ue@@ ue@@ Changed@@ : No@@ w@@ Play@@ ing li@@ s@@ t chan@@ ged@@ , Q@@ ue@@ u@@ e Siz@@ e = " + (@@ qu@@ e@@ u@@ e.@@ size@@ ()))); hand@@ ler.@@ send@@ Empty@@ Message@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ MS@@ G@@ _N@@ O@@ W@@ _P@@ LA@@ Y@@ ING@@ _C@@ H@@ AN@@ G@@ ED@@ _@@ RS@@ P@@ ); }
@java.lang.Override public void h@@ an@@ g@@ up@@ () throw@@ s com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Call@@ State@@ Exception { synchronized@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ si@@ p.@@ S@@ ip@@ Phone@@ .@@ class@@ ) { if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ si@@ p.@@ S@@ ip@@ Phon@@ e.@@ S@@ ip@@ Connection@@ .@@ S@@ C@@ N@@ _@@ DBG) { log@@ ((((@@ (("@@ h@@ an@@ g@@ up@@ : con@@ n@@ =@@ " + (m@@ P@@ e@@ er.get@@ U@@ ri@@ String@@ ())) + "@@ : ") + (m@@ State@@ )) + "@@ : on phon@@ e ") + (get@@ Phone@@ ().get@@ Phone@@ Name@@ ()))); } else { log@@ ((@@ (("@@ h@@ an@@ g@@ up@@ : " + (m@@ State@@ )) + "@@ : on phon@@ e ") + (get@@ Phone@@ ().get@@ Phone@@ Name@@ ()))); } } if (!(m@@ State.@@ is@@ A@@ li@@ ve@@ ())) return@@ ; try { android.net.@@ si@@ p.@@ S@@ ip@@ Audio@@ Cal@@ l si@@ p@@ Audio@@ Cal@@ l = m@@ S@@ ip@@ Audio@@ Call@@ ; if (@@ si@@ p@@ Audio@@ Cal@@ l != null@@ ) { si@@ p@@ Audio@@ Cal@@ l.@@ set@@ Listener@@ (@@ null@@ ); si@@ p@@ Audio@@ Cal@@ l.@@ end@@ Call@@ (); } } catch (android.net.@@ si@@ p.@@ S@@ ip@@ Exception e) { throw new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Call@@ State@@ Exception(("@@ h@@ an@@ g@@ up@@ ()@@ : " + e@@ )); } final@@ l@@ y { m@@ Adap@@ ter.@@ on@@ Call@@ En@@ d@@ ed@@ ((@@ ((m@@ State@@ ) == (@@ Cal@@ l.@@ State.@@ IN@@ C@@ O@@ M@@ ING@@ )) || ((m@@ State@@ ) == (@@ Cal@@ l.@@ State.@@ W@@ A@@ I@@ T@@ ING@@ )) ? android.telephony.@@ Dis@@ connect@@ C@@ a@@ us@@ e.@@ IN@@ C@@ O@@ M@@ ING@@ _RE@@ J@@ EC@@ TE@@ D : android.telephony.@@ Dis@@ connect@@ C@@ a@@ us@@ e.@@ LO@@ C@@ AL@@ )); } } }
public void res@@ et@@ S@@ ap@@ Prox@@ y@@ () { synchronized@@ (m@@ S@@ ap@@ Prox@@ y@@ Lock) { re@@ le@@ ase@@ S@@ ap@@ Prox@@ y@@ (); m@@ S@@ ap@@ Prox@@ y = null@@ ; } }
private static boolean check@@ Key@@ P@@ res@@ en@@ ce@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Merg@@ ing@@ Re@@ por@@ t.@@ Builder merg@@ ing@@ Re@@ port@@ , com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Elem@@ ent xml@@ Element@@ ) { com.android.@@ m@@ an@@ if@@ merger.@@ M@@ an@@ if@@ est@@ Mode@@ l.@@ Node@@ Key@@ Resol@@ ve@@ r no@@ de@@ Key@@ Resol@@ ve@@ r = xml@@ Element.@@ get@@ Type@@ ().get@@ Node@@ Key@@ Resol@@ ver@@ (); com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List<@@ java.lang.String> key@@ At@@ tri@@ b@@ ut@@ es@@ Name@@ s = no@@ de@@ Key@@ Resol@@ ver.@@ get@@ Key@@ At@@ tri@@ b@@ ut@@ es@@ Nam@@ es@@ (); if (((@@ key@@ At@@ tri@@ b@@ ut@@ es@@ Nam@@ es.@@ size@@ ()) > 0) && (@@ com.google.common.@@ b@@ ase.@@ String@@ s.@@ is@@ Null@@ Or@@ Empty@@ (@@ xml@@ Element.@@ get@@ Key@@ ()))) { java.lang.String mess@@ age = ((@@ key@@ At@@ tri@@ b@@ ut@@ es@@ Nam@@ es.@@ size@@ ()) > 1@@ ) ? java.lang.String@@ .@@ for@@ mat@@ ("@@ M@@ is@@ s@@ ing on@@ e of '@@ %@@ 1@@ $@@ s@@ ' ke@@ y at@@ tri@@ b@@ ut@@ e on e@@ lem@@ ent %@@ 2@@ $@@ s at %@@ 3@@ $@@ s", com.google.common.@@ b@@ ase.@@ J@@ o@@ in@@ er.@@ on@@ (@@ '@@ ,@@ '@@ ).@@ j@@ o@@ in@@ (@@ key@@ At@@ tri@@ b@@ ut@@ es@@ Nam@@ es@@ ), xml@@ Element.@@ get@@ Id@@ (), xml@@ Element.@@ p@@ r@@ int@@ Posi@@ tion@@ ()) : java.lang.String@@ .@@ for@@ mat@@ ("@@ M@@ is@@ s@@ ing '@@ %@@ 1@@ $@@ s@@ ' ke@@ y at@@ tri@@ b@@ ut@@ e on e@@ lem@@ ent %@@ 2@@ $@@ s at %@@ 3@@ $@@ s", key@@ At@@ tri@@ b@@ ut@@ es@@ Nam@@ es@@ .get@@ (0@@ ), xml@@ Element.@@ get@@ Id@@ (), xml@@ Element.@@ p@@ r@@ int@@ Posi@@ tion@@ ()); merg@@ ing@@ Re@@ por@@ t.@@ add@@ Error@@ (m@@ ess@@ age@@ ); return false@@ ; } return true@@ ; }
public void set@@ Render@@ er@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Android@@ As@@ c@@ i@@ Re@@ port@@ Render@@ er render@@ er@@ ) { m@@ Render@@ er = render@@ er@@ ; this@@ .m@@ Render@@ er = render@@ er@@ ; }
private void vi@@ si@@ t@@ (com.android.@@ tools.@@ l@@ int@@ .@@ d@@ et@@ ec@@ tor.@@ api.@@ Xml@@ Context contex@@ t, org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de no@@ de@@ ) { if ((@@ no@@ d@@ e.get@@ Node@@ Type@@ ()) == (@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ d@@ e.@@ TE@@ X@@ T_@@ NO@@ DE@@ )) { java.lang.String tex@@ t = no@@ d@@ e.get@@ Node@@ Value@@ (); check@@ (@@ contex@@ t, no@@ de@@ , tex@@ t@@ ); } else { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Node@@ Lis@@ t ch@@ ild@@ re@@ n = no@@ d@@ e.get@@ Ch@@ ild@@ No@@ des@@ (); for (@@ int i = 0, n = ch@@ ild@@ r@@ en@@ .get@@ Length@@ (); i < n@@ ; i++) { vi@@ si@@ t@@ (@@ contex@@ t, ch@@ ild@@ r@@ en@@ .@@ i@@ tem@@ (i@@ )); } } }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ S@@ es@@ sion t@@ ) throw@@ s java.lang.Exception { try { com.android.jack.@@ ir.@@ Con@@ di@@ tion@@ nal@@ Str@@ u@@ ct@@ ure@@ P@@ r@@ int@@ er vi@@ si@@ tor = new com.android.jack.@@ ir.@@ Con@@ di@@ tion@@ nal@@ Str@@ u@@ ct@@ ure@@ P@@ r@@ int@@ er(@@ str@@ eam@@ ); vi@@ si@@ tor.@@ ac@@ ce@@ p@@ t@@ (@@ t.get@@ Typ@@ es@@ To@@ E@@ m@@ it@@ ()); } final@@ l@@ y { str@@ eam@@ .@@ close(); } }
public boolean set@@ P@@ ass@@ key@@ (android.bluetooth.Bluetooth@@ Device device@@ , boolean ac@@ ce@@ p@@ t, int l@@ en@@ , byte@@ [] p@@ ass@@ key@@ ) { if (!@@ (com.android.bluetooth.@@ Utils.@@ check@@ Call@@ er@@ Al@@ low@@ Manag@@ ed@@ Pro@@ fil@@ es@@ (m@@ Service@@ ))) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, "@@ set@@ P@@ ass@@ key@@ () - No@@ t al@@ low@@ ed for n@@ on@@ -@@ ac@@ ti@@ v@@ e user@@ "); return false@@ ; } com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Ser@@ vice ser@@ vice = get@@ Service@@ (); if (@@ ser@@ vice == null@@ ) return false@@ ; return service@@ .set@@ P@@ ass@@ key@@ (device@@ , ac@@ ce@@ p@@ t, l@@ en@@ , p@@ ass@@ key@@ ); }
public void write@@ (@@ java.io.@@ Output@@ Stream out@@ ) throw@@ s java.io.IOException { @@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ IO@@ Resource@@ Open@@ ed@@ B@@ ut@@ Not@@ S@@ a@@ f@@ el@@ y@@ C@@ lo@@ sed@@ ") java.io.@@ Data@@ Output@@ Stream data@@ O@@ u@@ t = new java.io.@@ Data@@ Output@@ Stream@@ (@@ out); try { data@@ O@@ u@@ t.@@ write@@ Boole@@ an@@ (is@@ Bin@@ ary@@ ); data@@ O@@ u@@ t.@@ write@@ Boole@@ an@@ (is@@ Str@@ i@@ ct@@ ); data@@ O@@ u@@ t.@@ write@@ UT@@ F@@ (m@@ y@@ O@@ l@@ d@@ Build@@ ); data@@ O@@ u@@ t.@@ write@@ UT@@ F@@ (m@@ y@@ New@@ Build@@ ); data@@ O@@ u@@ t.@@ write@@ Int@@ (m@@ y@@ Action@@ s.@@ size@@ ()); for (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ Ac@@ tion e@@ a@@ ch : my@@ Action@@ s) { int key@@ ; java.lang.@@ Clas@@ s c@@ la@@ z@@ z = e@@ ach@@ .get@@ Class@@ (); if (c@@ la@@ z@@ z == (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Create@@ Action@@ .@@ class@@ )) { ke@@ y = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ C@@ RE@@ A@@ TE_@@ AC@@ TION_@@ KE@@ Y@@ ; } else if (c@@ la@@ z@@ z == (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Up@@ date@@ Action@@ .@@ class@@ )) { ke@@ y = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ U@@ P@@ DA@@ TE_@@ AC@@ TION_@@ KE@@ Y@@ ; } else if (c@@ la@@ z@@ z == (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Up@@ date@@ Zip@@ Action@@ .@@ class@@ )) { ke@@ y = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ U@@ P@@ DA@@ TE_@@ Z@@ IP@@ _@@ AC@@ TION_@@ KE@@ Y@@ ; } else if (c@@ la@@ z@@ z == (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ De@@ lete@@ Action@@ .@@ class@@ )) { ke@@ y = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ DE@@ LE@@ TE_@@ AC@@ TION_@@ KE@@ Y@@ ; } else if (c@@ la@@ z@@ z == (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Valid@@ ate@@ Action@@ .@@ class@@ )) { ke@@ y = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ VAL@@ ID@@ A@@ TE_@@ AC@@ TION_@@ KE@@ Y@@ ; } else { throw new java.lang.@@ RuntimeException(("@@ Un@@ k@@ no@@ w@@ n ac@@ tion " + e@@ ach@@ )); } data@@ O@@ u@@ t.@@ write@@ Int@@ (@@ key@@ ); e@@ ach@@ .@@ write@@ (d@@ ata@@ Out@@ ); } } final@@ l@@ y { data@@ O@@ u@@ t.@@ f@@ lu@@ sh@@ (); } }
@java.lang.Override public void run@@ () { java.lang.@@ Mod@@ ul@@ e mo@@ d@@ ul@@ e = com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ mo@@ du@@ le.@@ Mod@@ ule@@ Manager.get@@ Instance@@ (pro@@ ject@@ ).@@ find@@ Mod@@ ule@@ By@@ Name@@ (d@@ i@@ alo@@ g.@@ get@@ Mod@@ ule@@ Name@@ ()); final com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Run@@ Manager@@ E@@ x run@@ Manager = com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Run@@ Manager@@ Ex@@ .get@@ Instance@@ Ex@@ (pro@@ ject@@ ); final com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Runner@@ And@@ Configuration@@ Setting@@ s setting@@ s = run@@ Manager.@@ create@@ Run@@ Configuration@@ (m@@ o@@ du@@ le@@ .getName@@ (), com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ run@@ .@@ App@@ En@@ g@@ ine@@ Run@@ Configuration@@ Typ@@ e.get@@ Instance@@ ().get@@ Fa@@ ctory@@ ()); final com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ run@@ .@@ App@@ En@@ g@@ ine@@ Run@@ Configur@@ ation config@@ ur@@ ation = ((@@ com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ run@@ .@@ App@@ En@@ g@@ ine@@ Run@@ Configuration@@ ) (@@ setting@@ s.get@@ Configuration@@ ())); config@@ ur@@ ation.@@ set@@ Mod@@ ule@@ (m@@ o@@ du@@ le@@ ); config@@ ur@@ ation.@@ set@@ W@@ ar@@ Path@@ (@@ new java.io.File@@ (m@@ o@@ du@@ le@@ R@@ oo@@ t, "@@ build@@ /@@ ex@@ p@@ lo@@ d@@ ed@@ -@@ app@@ "@@ ).get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); config@@ ur@@ ation.@@ set@@ Sdk@@ Path@@ (@@ new java.io.File@@ (java.lang.@@ System@@ .get@@ Property@@ ("@@ us@@ er.@@ ho@@ m@@ e@@ "), "@@ /@@ .@@ grad@@ le@@ /@@ app@@ eng@@ ine@@ -@@ s@@ dk@@ /@@ app@@ eng@@ ine@@ -@@ java@@ -@@ s@@ dk@@ -@@ 1.@@ 8@@ .@@ 7@@ "@@ ).get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); config@@ ur@@ ation.@@ set@@ Server@@ Port@@ ("@@ 8@@ 0@@ 8@@ 0@@ "); run@@ Manager.@@ add@@ Configuration@@ (@@ setting@@ s, false@@ ); com@@ .@@ int@@ el@@ li@@ j.@@ fa@@ c@@ et@@ .@@ F@@ ac@@ et@@ Manager fa@@ c@@ et@@ Manager = com@@ .@@ int@@ el@@ li@@ j.@@ fa@@ c@@ et@@ .@@ F@@ ac@@ et@@ Manager.get@@ Instance@@ (m@@ o@@ du@@ le@@ ); com@@ .@@ int@@ el@@ li@@ j.@@ fa@@ c@@ et@@ .@@ Mo@@ d@@ if@@ i@@ able@@ F@@ ac@@ et@@ Mode@@ l mode@@ l = fa@@ c@@ et@@ Manager.@@ create@@ Mo@@ d@@ if@@ i@@ able@@ Mode@@ l@@ (); }
public void re@@ or@@ i@@ ent@@ () { final int ro@@ t = m@@ Display@@ .get@@ R@@ o@@ t@@ ation@@ (); for (@@ int i = 0; i < 4@@ ; i++) { m@@ R@@ o@@ t@@ ated@@ View@@ s@@ [i]@@ .set@@ Visi@@ b@@ ili@@ ty@@ (@@ View@@ .@@ G@@ ON@@ E); } mC@@ urrent@@ Vi@@ e@@ w = m@@ R@@ o@@ t@@ ated@@ View@@ s@@ [@@ ro@@ t@@ ]; mC@@ urrent@@ View@@ .set@@ Visi@@ b@@ ili@@ ty@@ (@@ View@@ .@@ V@@ I@@ SI@@ BL@@ E); m@@ De@@ ad@@ Z@@ on@@ e = ((@@ com.android.s@@ ystem@@ ui.@@ stat@@ us@@ b@@ ar.@@ po@@ lic@@ y.@@ De@@ ad@@ Z@@ on@@ e) (m@@ Current@@ View@@ .@@ find@@ View@@ By@@ Id@@ (@@ R.@@ id.@@ de@@ ad@@ z@@ one@@ ))); m@@ B@@ ar@@ Tr@@ an@@ si@@ tion@@ s.@@ in@@ it@@ (m@@ Ver@@ ti@@ cal@@ ); set@@ Dis@@ able@@ d@@ Flag@@ s@@ (m@@ Dis@@ able@@ d@@ Flag@@ s, true@@ ); set@@ M@@ en@@ u@@ Visi@@ b@@ ili@@ ty@@ (m@@ S@@ ho@@ w@@ M@@ en@@ u@@ , true@@ ); if (com.android.s@@ ystem@@ ui.@@ stat@@ us@@ b@@ ar.@@ phon@@ e.@@ N@@ a@@ vi@@ g@@ ation@@ B@@ ar@@ View@@ .@@ DE@@ BU@@ G) { android.util.Log.d@@ (com.android.s@@ ystem@@ ui.@@ stat@@ us@@ b@@ ar.@@ phon@@ e.@@ N@@ a@@ vi@@ g@@ ation@@ B@@ ar@@ View@@ .@@ TAG, ("@@ re@@ or@@ i@@ ent@@ ()@@ : ro@@ t@@ =@@ " + (m@@ Display@@ .get@@ R@@ o@@ t@@ ation@@ ()))); } if ((m@@ De@@ le@@ g@@ ate@@ Hel@@ per@@ ) != null@@ ) { m@@ De@@ le@@ g@@ ate@@ Helper.@@ set@@ S@@ w@@ ap@@ X@@ Y@@ ((@@ (m@@ Contex@@ t.get@@ Res@@ ources@@ ().get@@ Configuration@@ ().@@ or@@ i@@ ent@@ ation@@ ) == (android.content.@@ res@@ .@@ Configur@@ ation.@@ OR@@ I@@ EN@@ TA@@ TION_@@ L@@ AN@@ D@@ S@@ C@@ AP@@ E@@ ))); } set@@ N@@ a@@ vi@@ g@@ ation@@ I@@ con@@ H@@ int@@ s@@ (m@@ N@@ a@@ vi@@ g@@ ation@@ I@@ con@@ H@@ int@@ s, true@@ ); }
private java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ i@@ cat@@ e find@@ Cer@@ t@@ (@@ javax.@@ security.@@ au@@ th@@ .@@ x@@ 5@@ 00@@ .@@ X@@ 5@@ 00@@ P@@ r@@ in@@ c@@ ip@@ al sub@@ j@@ , android.@@ security.@@ net.@@ config.@@ Directory@@ Cer@@ t@@ if@@ ic@@ ate@@ Source@@ .@@ Cer@@ t@@ Sele@@ ct@@ or sele@@ ctor@@ ) { java.lang.String has@@ h = get@@ Hash@@ (s@@ ub@@ j@@ ); for (@@ int in@@ dex = 0; true@@ ; index@@ ++) { java.lang.String file@@ Name = (@@ has@@ h + "@@ .@@ ") + index@@ ; if (is@@ C@@ a@@ Remo@@ v@@ ed@@ (file@@ Name@@ )) { continue@@ ; } if (!@@ (@@ new java.io.File@@ (m@@ C@@ a@@ Dir@@ , file@@ Name@@ ).@@ exist@@ s@@ ())) { break@@ ; } java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ i@@ cat@@ e cer@@ t = read@@ Cer@@ t@@ if@@ ic@@ ate@@ (file@@ Name); if (@@ sele@@ ctor@@ .@@ match@@ (c@@ er@@ t@@ )) { return cer@@ t@@ ; } } return null@@ ; }
@java.lang.Override public void ans@@ w@@ er@@ (java.lang.String call@@ Id, android.telecom.@@ Logg@@ ing.@@ Session@@ .@@ Info session@@ Info@@ ) { android.telecom.@@ Log.@@ start@@ Session@@ (s@@ ession@@ Info@@ , android.telecom.@@ Connection@@ Service.@@ SE@@ SS@@ I@@ ON@@ _@@ AN@@ S@@ W@@ ER@@ ); try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s arg@@ s = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s.@@ ob@@ tain@@ (); args.@@ arg@@ 1 = call@@ Id@@ ; args.@@ arg@@ 2 = android.telecom.@@ Log.@@ create@@ Sub@@ session@@ (); m@@ Handler.@@ ob@@ tain@@ Message@@ (android.@@ telecom.@@ Connection@@ Service.@@ MS@@ G@@ _@@ AN@@ S@@ W@@ ER@@ , arg@@ s@@ ).@@ send@@ To@@ Target@@ (); } final@@ l@@ y { android.telecom.@@ Log.@@ end@@ Session@@ (); } }
@java.lang.Override public void int@@ er@@ face@@ Remo@@ v@@ ed@@ (java.lang.String int@@ er@@ fa@@ z@@ e) { synchronized@@ (@@ this@@ ) { if (@@ (@@ int@@ er@@ fa@@ z@@ e.@@ equal@@ s@@ (m@@ Interface@@ )) && ((@@ j@@ n@@ i@@ Check@@ (@@ int@@ er@@ fa@@ z@@ e@@ )) == 0@@ )) { m@@ Status@@ Int@@ ent = null@@ ; m@@ Network@@ Capabili@@ ties.@@ set@@ Al@@ low@@ ed@@ U@@ id@@ s@@ (@@ null@@ ); m@@ Con@@ fig = null@@ ; m@@ Inter@@ face = null@@ ; if ((m@@ Connection@@ ) != null@@ ) { m@@ Context.@@ un@@ b@@ ind@@ Service@@ (m@@ Connection@@ ); m@@ Connec@@ tion = null@@ ; ag@@ ent@@ Dis@@ connect@@ (); } else if ((m@@ Le@@ g@@ ac@@ y@@ V@@ p@@ n@@ Runner@@ ) != null@@ ) { m@@ Le@@ g@@ ac@@ y@@ V@@ p@@ n@@ Run@@ ner.@@ ex@@ it@@ (); m@@ Le@@ g@@ ac@@ y@@ V@@ p@@ n@@ Run@@ ne@@ r = null@@ ; } } }
@java.lang.Override public java.lang.String toString@@ () { return com.google.common.@@ b@@ ase.@@ Object@@ s.@@ toString@@ Hel@@ per@@ (@@ this@@ ).@@ add@@ ("@@ name@@ ", m@@ Name@@ ).@@ add@@ ("@@ de@@ bug@@ g@@ able@@ ", m@@ Debug@@ g@@ able@@ ).@@ add@@ ("@@ de@@ bug@@ J@@ n@@ i@@ Build@@ ", m@@ Debug@@ J@@ n@@ i@@ Build@@ ).@@ add(@@ "@@ package@@ Name@@ Su@@ f@@ fix@@ ", m@@ Package@@ Name@@ Su@@ f@@ fix@@ ).@@ add@@ ("@@ ver@@ sion@@ Name@@ Su@@ f@@ fix@@ ", m@@ Version@@ Name@@ Su@@ f@@ fix@@ ).@@ add@@ ("@@ run@@ Pro@@ gu@@ ard@@ ", m@@ Run@@ Pro@@ gu@@ ard@@ ).@@ add@@ ("@@ z@@ ip@@ A@@ li@@ gn@@ ", m@@ Zip@@ A@@ li@@ gn@@ ).@@ add@@ ("@@ sign@@ ing@@ Key@@ st@@ ore@@ ", m@@ Key@@ st@@ ore@@ ).@@ toString@@ (); }
@org.junit.Test public void test@@ State@@ Tr@@ an@@ si@@ tion@@ _@@ Audio@@ On@@ To@@ Audio@@ Dis@@ connec@@ ting@@ _@@ Stack@@ Audio@@ Dis@@ connec@@ ting@@ () { int num@@ B@@ road@@ cas@@ ts@@ S@@ ent = set@@ Up@@ Audio@@ On@@ State@@ (); num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ ++@@ ; m@@ Headset@@ StateMachine.@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ STA@@ C@@ K_@@ EVEN@@ T, new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Event@@ (@@ Headset@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ A@@ U@@ D@@ IO@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ , Headset@@ H@@ al@@ Constants.@@ A@@ U@@ D@@ IO@@ _STA@@ TE_@@ D@@ IS@@ CONNEC@@ T@@ ING@@ , m@@ Test@@ Device@@ )); ve@@ r@@ if@@ y@@ (m@@ Headset@@ Service@@ , time@@ out@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ A@@ S@@ Y@@ N@@ C@@ _C@@ AL@@ L_@@ TI@@ ME@@ O@@ U@@ T_@@ M@@ IL@@ LIS@@ ).@@ tim@@ es(@@ num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ )).@@ send@@ Broadcast@@ As@@ User@@ (m@@ Intent@@ Arg@@ um@@ ent.@@ cap@@ t@@ ure@@ (), e@@ q@@ (@@ User@@ Hand@@ le.@@ AL@@ L@@ ), e@@ q@@ (@@ Headset@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ )); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ ve@@ r@@ if@@ y@@ Audio@@ State@@ Broadcast@@ (m@@ Headset@@ StateMach@@ ine@@ , time@@ out@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ A@@ S@@ Y@@ N@@ C@@ _C@@ AL@@ L_@@ TI@@ ME@@ O@@ U@@ T_@@ M@@ IL@@ LIS@@ ).@@ tim@@ es(@@ num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ )).@@ send@@ Broadcast@@ As@@ User@@ (@@ any@@ (android.content.@@ Intent@@ .@@ class@@ ), e@@ q@@ (@@ Headset@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ )); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ ve@@ r@@ if@@ y@@ Audio@@ On@@ State@@ (); num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ ++@@
@org.junit.Test public void w@@ if@@ i@@ Not@@ Enabled@@ _@@ w@@ if@@ i@@ Ap@@ State@@ Is@@ Not@@ Dis@@ able@@ d@@ () { when(m@@ W@@ if@@ i@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ s@@ ()).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _@@ WI@@ FI@@ _C@@ ON@@ FI@@ G@@ UR@@ A@@ TION@@ , com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _@@ WI@@ FI@@ _C@@ ON@@ FI@@ G@@ UR@@ A@@ TION_@@ EX@@ TER@@ N@@ AL@@ )); when(m@@ W@@ if@@ i@@ Manager.get@@ Scan@@ Results@@ ()).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _S@@ C@@ AN@@ _RE@@ S@@ UL@@ T@@ )); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Config@@ ure@@ d@@ Network@@ s@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ W@@ if@@ i@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _STA@@ TE_@@ D@@ IS@@ ABL@@ ED@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ W@@ if@@ i@@ Ap@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); ve@@ r@@ if@@ y@@ Z@@ er@@ o@@ Inter@@ action@@ s@@ (m@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ctor@@ ); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Manager@@ , ne@@ ver@@ ()@@ ).set@@ W@@ if@@ i@@ Enabled@@ (@@ true@@ ); }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 1@@ U@@ dp@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 1, android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (1@@ 6@@ 0@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
protected void set@@ P@@ n@@ g@@ C@@ run@@ ch@@ er(@@ @com.android.annotations.NonNull com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ P@@ n@@ g@@ C@@ run@@ ch@@ er p@@ n@@ g@@ C@@ run@@ ch@@ er@@ ) { m@@ P@@ n@@ g@@ C@@ run@@ ch@@ er = p@@ n@@ g@@ C@@ run@@ ch@@ er@@ ; }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in get@@ Too@@ lch@@ ain@@ (@@ boolean is@@ Api@@ Test@@ ) { if (is@@ Api@@ Test@@ ) { java.util.List<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ > ex@@ c@@ lu@@ de@@ Lis@@ t = new java.util.ArrayList<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ >@@ (1@@ ); ex@@ c@@ lu@@ de@@ List.@@ add@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ C@@ li@@ Too@@ lch@@ ain@@ .@@ class@@ ); return com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Api@@ Too@@ lch@@ ain@@ .@@ class@@ , ex@@ c@@ lu@@ de@@ List@@ ); } else { return com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); } }
@javax.annotation.@@ N@@ on@@ null com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in add@@ M@@ eta@@ Dir@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File m@@ eta@@ Dir@@ ) { m@@ eta@@ Imp@@ or@@ t.@@ add@@ (m@@ eta@@ Dir@@ ); return this@@ ; }
@java.lang.Override java.util.List<@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ >@@ > get@@ Builder@@ Requ@@ ire@@ ment@@ s() { java.util.List<@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ >@@ > build@@ er@@ Requ@@ ire@@ ment@@ s = super@@ .get@@ Builder@@ Requ@@ ire@@ ment@@ s(); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ > b@@ ro@@ k@@ en@@ Test@@ Pre@@ di@@ cat@@ e = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ di@@ cat@@ es.@@ not@@ (@@ new android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ Has@@ Annot@@ ation@@ (d@@ al@@ vi@@ k.@@ annotation.@@ B@@ ro@@ k@@ en@@ Test@@ .@@ class@@ )); build@@ er@@ Requ@@ ire@@ ment@@ s.add@@ (b@@ ro@@ k@@ en@@ Test@@ Pre@@ d@@ ic@@ ate@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ > f@@ e@@ ature@@ Pre@@ di@@ cat@@ e = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ >@@ () { public boolean app@@ ly@@ (android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ M@@ etho@@ d t@@ ) { java.util.@@ Set@@ <java.lang.String@@ > requ@@ ire@@ d@@ Fe@@ ature@@ s = new java.util.@@ Hash@@ Set@@ <java.lang.String@@ >(); if ((@@ t.get@@ Annot@@ ation@@ (android.@@ annotation.@@ cts.@@ Requ@@ ire@@ d@@ Fe@@ ature@@ .@@ class@@ )) != null@@ ) { android.@@ annotation.@@ cts.@@ Requ@@ ire@@ d@@ Fe@@ at@@ ur@@ e annot@@ ation = t.get@@ Annot@@ ation@@ (android.@@ annotation.@@ cts.@@ Requ@@ ire@@ d@@ Fe@@ ature@@ .@@ class@@ ); java.util.Collection@@ s.add@@ All@@ (@@ requ@@ ire@@ d@@ Fe@@ at@@ ur@@ es@@ , annotation.@@ value@@ ()); } android.util.Log.e@@ (android.@@ test.@@ In@@ strument@@ ation@@ C@@ ts@@ Test@@ Run@@ ner.@@ TAG, ((("@@ Test method@@ : " + (@@ t.get@@ Name@@ ())) + " Requ@@ ire@@ d f@@ e@@ at@@ ur@@ es@@ : ") + requ@@ ire@@ d@@ Fe@@ at@@ ur@@ es@@ )); return true@@ ; } }; build@@ er@@ Requ@@ ire@@ ment@@ s.add@@ (f@@ e@@ ature@@ Pre@@ d@@ ic@@ ate@@ ); if (!@@ (s@@ ing@@ le@@ Test@@ )) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ d@@ ic@@ ate@@ <@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ Test@@ Method@@ > s@@ ide@@ E@@ ff@@ ec@@ t@@ Pre@@ di@@ cat@@ e = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ di@@ cat@@ es.@@ not@@ (@@ new android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ Has@@ Annot@@ ation@@ (d@@ al@@ vi@@ k.@@ annotation.@@ S@@ ide@@ E@@ ff@@ ec@@ t@@ .@@ class@@ )); build@@ er@@ Requ@@ ire@@ ment@@ s.add@@ (s@@ ide@@ E@@ ff@@ ec@@ t@@ Pre@@ d@@ ic@@ ate@@ ); } return build@@ er@@ Requ@@ ire@@ ment@@ s; }
public static java.lang.@@ Char@@ Se@@ qu@@ en@@ ce get@@ Re@@ l@@ ative@@ Date@@ Time@@ String@@ (android.content.@@ Context c@@ , long time@@ , long min@@ Resol@@ uti@@ on@@ , long tr@@ an@@ si@@ tion@@ Resol@@ uti@@ on@@ , int flag@@ s) { if ((@@ flag@@ s & ((@@ (android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ S@@ H@@ O@@ W@@ _@@ TI@@ ME@@ ) | (android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ 12@@ H@@ O@@ UR@@ )) | (android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ 2@@ 4@@ H@@ O@@ UR@@ ))) == (android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ S@@ H@@ O@@ W@@ _@@ TI@@ ME@@ )) { flag@@ s |@@ = (android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Format@@ .is@@ 2@@ 4@@ H@@ our@@ Format@@ (c@@ )) ? android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ 2@@ 4@@ H@@ O@@ U@@ R : android.@@ tex@@ t@@ .@@ for@@ mat@@ .@@ Date@@ Utils.@@ F@@ OR@@ MA@@ T_@@ 12@@ H@@ O@@ UR@@ ; } return libcore.@@ icu@@ .@@ Re@@ l@@ ative@@ Date@@ Time@@ Format@@ t@@ er.get@@ Re@@ l@@ ative@@ Date@@ Time@@ String(@@ time@@ , min@@ Resol@@ uti@@ on@@ , tr@@ an@@ si@@ tion@@ Resol@@ uti@@ on@@ , flag@@ s); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ loc@@ ation.@@ Loc@@ ation get@@ V@@ File@@ Location@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Base@@ V@@ Di@@ r parent@@ , @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ V@@ P@@ ath path@@ ) { return v@@ f@@ s.get@@ V@@ Path@@ From@@ V@@ File@@ Location@@ (@@ parent@@ , path@@ ); }
@java.lang.Override public void widget@@ Sele@@ c@@ ted@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Selection@@ Ev@@ ent arg@@ 0) { on@@ Ref@@ res@@ h@@ (@@ true@@ ); }
@java.lang.Override public java.lang.String toString@@ () { java.lang.String@@ Builder re@@ s = new java.lang.String@@ Builder@@ (); res@@ .@@ append("@@ [@@ Ims@@ Service@@ Info@@ ] name@@ =@@ "); res@@ .@@ append(@@ name@@ ); res@@ .@@ append("@@ , suppor@@ ted@@ Fe@@ at@@ ur@@ es@@ =@@ [ "); for (android.@@ telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Fe@@ ature@@ Configur@@ ation.@@ Fe@@ ature@@ S@@ lot@@ Pa@@ i@@ r f@@ e@@ at@@ ur@@ e : m@@ Sup@@ ported@@ Fe@@ at@@ ur@@ es) { res@@ .@@ append("@@ ("@@ ); res@@ .@@ append@@ (f@@ e@@ ature@@ .@@ s@@ lot@@ Id); res@@ .@@ append("@@ ,@@ "); res@@ .@@ append@@ (f@@ e@@ ature@@ .@@ sec@@ ond@@ ); res@@ .@@ append("@@ ) "); } res@@ .@@ append("@@ ]@@ , sup@@ port@@ s@@ E@@ merg@@ enc@@ y@@ =@@ "); res@@ .@@ append@@ (s@@ up@@ port@@ s@@ E@@ merg@@ enc@@ y@@ M@@ m@@ T@@ el@@ ); return res@@ .@@ toString@@ (); }
public static org.@@ h@@ am@@ c@@ res@@ t.@@ M@@ atch@@ er@@ <@@ android.@@ view@@ .@@ View@@ > th@@ at@@ F@@ ir@@ st@@ M@@ atch@@ es@@ (@@ final org.@@ h@@ am@@ c@@ res@@ t.@@ M@@ atch@@ er@@ <@@ android.@@ view@@ .@@ View@@ > view@@ M@@ atch@@ er@@ ) { return new org.@@ h@@ am@@ c@@ res@@ t.@@ Type@@ S@@ a@@ f@@ e@@ M@@ atch@@ er@@ <@@ android.@@ view@@ .@@ View@@ >@@ () { private boolean match@@ ed@@ ; private android.@@ view@@ .@@ Vi@@ e@@ w match@@ ed@@ View@@ ; @java.lang.Override protected boolean match@@ es@@ S@@ a@@ f@@ el@@ y@@ (android.@@ view@@ .@@ Vi@@ e@@ w view@@ ) { if (m@@ atch@@ ed@@ ) return (m@@ atch@@ ed@@ View@@ ) == view@@ ; match@@ ed = view@@ M@@ atch@@ er.@@ match@@ es(@@ view@@ ); if (m@@ atch@@ ed@@ ) { match@@ ed@@ Vi@@ e@@ w = view@@ ; } return match@@ ed@@ ; } @java.lang.Override public void des@@ cri@@ be@@ To@@ (@@ org.@@ h@@ am@@ c@@ res@@ t.@@ Des@@ cri@@ pti@@ on des@@ cription@@ ) { des@@ cription@@ .@@ append@@ Text@@ ("@@ th@@ at fi@@ r@@ s@@ t match@@ es "); view@@ M@@ atch@@ er.@@ des@@ cri@@ be@@ To@@ (d@@ es@@ cription@@ ); } }; }
public java.nio.Byte@@ Buff@@ er write@@ () { byte@@ [] en@@ cod@@ ed@@ Line@@ age = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 3@@ .@@ V@@ 3@@ Sign@@ ing@@ Cer@@ t@@ if@@ ic@@ ate@@ Line@@ age.@@ en@@ code@@ Sign@@ ing@@ Cer@@ t@@ if@@ ic@@ ate@@ Line@@ age@@ (m@@ Sign@@ ing@@ Line@@ age@@ ); int p@@ ay@@ load@@ Siz@@ e = (@@ 4 + 4@@ ) + (@@ en@@ cod@@ ed@@ Line@@ age.@@ length); java.nio.Byte@@ Buff@@ er result = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (p@@ ay@@ load@@ Siz@@ e); result.@@ or@@ der@@ (@@ java.nio.Byte@@ Or@@ d@@ er.@@ L@@ I@@ T@@ T@@ L@@ E_@@ EN@@ DI@@ AN@@ ); result.@@ put@@ Int@@ (com.android.@@ apk@@ si@@ g.@@ Sign@@ ing@@ Cer@@ t@@ if@@ ic@@ ate@@ Line@@ age.@@ MA@@ G@@ IC@@ ); result.@@ put@@ Int@@ (m@@ Version@@ ); result.@@ put@@ (@@ en@@ cod@@ ed@@ Line@@ age@@ ); return result@@ ; }
@org.junit.Test public void work@@ ing@@ Mo@@ b@@ ile@@ U@@ s@@ b@@ T@@ ether@@ ing@@ _@@ D@@ ual@@ Stack@@ () throw@@ s java.lang.Exception { android.net.Network@@ State up@@ str@@ eam@@ State = com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ build@@ Mo@@ b@@ ile@@ D@@ ual@@ Stack@@ U@@ ps@@ tr@@ eam@@ State@@ (); run@@ U@@ s@@ b@@ T@@ ether@@ ing@@ (@@ up@@ str@@ eam@@ State@@ ); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , tim@@ es@@ (1@@ )).@@ enable@@ N@@ at@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ US@@ B@@ _@@ I@@ F@@ N@@ AME@@ , com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ M@@ O@@ B@@ IL@@ E_@@ I@@ F@@ N@@ AM@@ E); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , tim@@ es@@ (1@@ )).@@ start@@ Interface@@ For@@ w@@ ard@@ ing@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ US@@ B@@ _@@ I@@ F@@ N@@ AME@@ , com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ M@@ O@@ B@@ IL@@ E_@@ I@@ F@@ N@@ AM@@ E); ve@@ r@@ if@@ y@@ (m@@ R@@ ou@@ ter@@ Ad@@ verti@@ se@@ ment@@ D@@ a@@ e@@ mon@@ , tim@@ es@@ (1@@ )).@@ start@@ (); send@@ IP@@ v@@ 6@@ T@@ ether@@ Up@@ dat@@ es(@@ up@@ str@@ eam@@ State@@ ); ve@@ r@@ if@@ y@@ (m@@ R@@ ou@@ ter@@ Ad@@ verti@@ se@@ ment@@ D@@ a@@ e@@ mon@@ , tim@@ es@@ (1@@ )).@@ build@@ New@@ R@@ a@@ (@@ any@@ (), not@@ Null@@ ()); ve@@ r@@ if@@ y@@ (m@@ Net@@ d, tim@@ es@@ (1@@ )).@@ t@@ ether@@ Ap@@ pl@@ y@@ D@@ ns@@ Inter@@ fa@@ ces@@ (); }
private static void send@@ J@@ d@@ w@@ p@@ Packet@@ (com.android.@@ ddmlib.@@ C@@ li@@ ent c@@ lient@@ , int type@@ , java.lang.String view@@ R@@ oo@@ t, java.lang.String view@@ , com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ View@@ D@@ um@@ p@@ Handle@@ r hand@@ ler@@ ) throw@@ s java.io.IOException { int bu@@ f@@ Le@@ n = 4 + ((@@ view@@ R@@ oo@@ t.@@ length@@ ()) * 2@@ ); if (@@ vi@@ e@@ w != null@@ ) { bu@@ f@@ Le@@ n +@@ = 4 + ((@@ view@@ .@@ length@@ ()) * 2@@ ); } java.nio.Byte@@ Buff@@ er bu@@ f = al@@ loc@@ Buffer@@ (@@ bu@@ f@@ L@@ en@@ ); com.android.ddmlib.@@ J@@ d@@ w@@ p@@ Pack@@ et pack@@ et = new com.android.ddmlib.@@ J@@ d@@ w@@ p@@ Packet@@ (@@ bu@@ f@@ ); java.nio.Byte@@ Buff@@ er ch@@ un@@ k@@ Bu@@ f = get@@ Ch@@ un@@ k@@ Data@@ Bu@@ f@@ (@@ bu@@ f@@ ); ch@@ un@@ k@@ Bu@@ f.@@ put@@ Int@@ (@@ view@@ R@@ oo@@ t.@@ length@@ ()); put@@ String(@@ ch@@ un@@ k@@ Bu@@ f@@ , view@@ Root@@ ); if (@@ vi@@ e@@ w != null@@ ) { ch@@ un@@ k@@ Bu@@ f.@@ put@@ Int@@ (@@ view@@ .@@ length@@ ()); put@@ String(@@ ch@@ un@@ k@@ Bu@@ f@@ , view@@ ); } fin@@ is@@ h@@ Ch@@ un@@ k@@ Packet@@ (p@@ ack@@ et@@ , type@@ , ch@@ un@@ k@@ Bu@@ f.@@ posi@@ tion@@ ()); if (@@ handle@@ r != null@@ ) { c@@ li@@ ent.@@ send@@ And@@ Con@@ s@@ um@@ e@@ (p@@ ack@@ et@@ , hand@@ ler@@ ); } else { c@@ li@@ ent.@@ send@@ And@@ Con@@ s@@ um@@ e@@ (p@@ ack@@ et@@ ); } }
public void test_@@ get@@ Display@@ Co@@ u@@ n@@ try@@ _@@ 8@@ 7@@ 0@@ 2@@ 8@@ 9@@ () throw@@ s java.lang.Exception { assert@@ Equal@@ s("@@ H@@ on@@ g K@@ on@@ g@@ ", new java.util.@@ Loc@@ ale@@ ("@@ ", "@@ H@@ K@@ "@@ ).get@@ Display@@ Co@@ u@@ n@@ try@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ )); assert@@ Equal@@ s("@@ M@@ ac@@ au@@ ", new java.util.@@ Loc@@ ale@@ ("@@ ", "@@ M@@ O@@ "@@ ).get@@ Display@@ Co@@ u@@ n@@ try@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ )); assert@@ Equal@@ s("@@ P@@ al@@ est@@ ine@@ ", new java.util.@@ Loc@@ ale@@ ("@@ ", "@@ P@@ S@@ "@@ ).get@@ Display@@ Co@@ u@@ n@@ try@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ )); }
private boolean result@@ (java.lang.String test@@ Name, final com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ tim@@ ing t, com.android.@@ rs.@@ test.@@ Float@@ 2 java@@ Rs@@ l@@ t, com.android.@@ rs.@@ test.@@ Float@@ 2 r@@ s@@ Rs@@ l@@ t@@ ) { final boolean su@@ c@@ ces@@ s = ((@@ java@@ Rs@@ l@@ t.@@ x@@ ) == (r@@ s@@ Rs@@ l@@ t.@@ x@@ )) && ((@@ java@@ Rs@@ l@@ t.@@ y@@ ) == (r@@ s@@ Rs@@ l@@ t.@@ y@@ )); java.lang.String statu@@ s = (s@@ u@@ ccess@@ ) ? "@@ P@@ A@@ SS@@ ED@@ " : "@@ FA@@ IL@@ ED@@ "; if (s@@ u@@ c@@ ces@@ s && (@@ t != null@@ )) statu@@ s +@@ = " + (@@ t.@@ string@@ ()); android.util.Log.@@ i@@ (com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ TAG, ((((@@ ((((@@ test@@ Name + "@@ : ja@@ v@@ a ("@@ ) + (@@ java@@ Rs@@ l@@ t.@@ x@@ )) + ", ") + (@@ java@@ Rs@@ l@@ t.@@ y@@ )) + "@@ )@@ ") + ", r@@ s ("@@ ) + (r@@ s@@ Rs@@ l@@ t.@@ x@@ )) + ", ") + (r@@ s@@ Rs@@ l@@ t.@@ y@@ )) + "@@ )@@ ") + "@@ : ") + stat@@ us@@ )); return su@@ ccess@@ ; }
public static java.lang.String float@@ To@@ D@@ ouble@@ To@@ Int@@ P@@ r@@ int@@ (@@ float valu@@ e) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } do@@ ub@@ le d = (@@ (@@ do@@ ub@@ le@@ ) (@@ value@@ )); int i = (@@ (@@ int@@ ) (d@@ )); return (("@@ d@@ =@@ " + d@@ ) + ", i@@ =@@ ") + i@@ ; }
public void test@@ F@@ re@@ ed@@ () { java.nio.Byte@@ Buff@@ er b@@ 1 = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ Dire@@ ct@@ (1@@ ); java.nio.Byte@@ Buff@@ er b@@ 2 = b@@ 1.@@ d@@ up@@ li@@ cate@@ (); java.nio.@@ N@@ io@@ Utils.@@ f@@ re@@ e@@ Dire@@ ct@@ Buffer@@ (b@@ 1); for (@@ java.nio.Byte@@ Buff@@ er b : new java.nio.Byte@@ Buffer@@ []{ b@@ 1, b@@ 2 }@@ ) { assert@@ False@@ (@@ b.@@ is@@ Valid@@ ()); try { b.@@ comp@@ act@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } try { b.@@ d@@ up@@ li@@ cate@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } test@@ Fail@@ For@@ P@@ ut@@ Method@@ s(@@ b@@ ); test@@ Fail@@ For@@ As@@ Method@@ s(@@ b@@ ); test@@ Fail@@ For@@ Get@@ Method@@ s(@@ b@@ ); java.nio.@@ N@@ io@@ Utils.@@ f@@ re@@ e@@ Dire@@ ct@@ Buffer@@ (b@@ ); } }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ M@@ ed@@ i@@ um@@ Test public void test@@ Device@@ T@@ re@@ e@@ C@@ pu@@ Current@@ () throw@@ s java.lang.Exception { java.lang.String ar@@ ch = java.lang.@@ System@@ .get@@ Property@@ ("@@ os.@@ arch@@ "); java.lang.String[] o@@ s@@ Ver@@ sion = java.lang.@@ System@@ .get@@ Property@@ ("@@ os.@@ ver@@ sion@@ ").@@ s@@ pli@@ t@@ ("@@ \@@ \@@ .@@ "); if ((@@ (!(@@ arch@@ .@@ contain@@ s("@@ ar@@ m@@ "@@ ))) || ((@@ java.lang.Integ@@ er.@@ parse@@ Int@@ (o@@ s@@ Version@@ [0@@ ]@@ )) < 2@@ )) || ((@@ (java.lang.@@ Integ@@ er.@@ parse@@ Int@@ (o@@ s@@ Version@@ [0@@ ]@@ )) == 3@@ ) && ((@@ java.lang.Integ@@ er.@@ parse@@ Int@@ (o@@ s@@ Version@@ [@@ 1@@ ]@@ )) < 10@@ ))) return@@ ; final java.io.File f = new java.io.File@@ ("@@ /@@ pro@@ c@@ /@@ device@@ -@@ tr@@ e@@ /@@ c@@ pu@@ s@@ "); if (!(@@ f.@@ exist@@ s@@ ())) return@@ ; java.lang.String[] di@@ r = f.@@ list@@ (@@ new java.io.@@ Fil@@ en@@ ame@@ Filter@@ () { @java.lang.Override public boolean ac@@ ce@@ p@@ t@@ (@@ java.io.File path@@ name@@ , java.lang.String name@@ ) { return (p@@ ath@@ nam@@ e.@@ is@@ Directory@@ ()) && (@@ nam@@ e.@@ match@@ es@@ ("@@ c@@ pu@@ @@@ [0@@ -@@ 9@@ ]@@ +@@ ")); } }); if (d@@ i@@ r == null@@ ) return@@ ; for (java.lang.String c@@ pu@@ Di@@ r : d@@ ir@@ ) { java.io.File f@@ C@@ p@@ u = new java.io.File@@ ((@@ c@@ pu@@ Di@@ r + "@@ /@@ current@@ ")); assert@@ True@@ (f@@ .@@ can@@ Read@@ ()); } }
public static org.conscrypt.@@ C@@ lose@@ G@@ u@@ ar@@ d close@@ G@@ u@@ ard@@ Get@@ () { if ((@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ .@@ S@@ D@@ K_@@ IN@@ T@@ ) < (@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ _C@@ O@@ DE@@ S@@ .@@ IC@@ E_@@ C@@ RE@@ AM@@ _S@@ AN@@ D@@ W@@ IC@@ H@@ )) { return@@ ; } return org.conscrypt.@@ C@@ lose@@ G@@ u@@ ard@@ .get@@ (); }
private boolean is@@ Le@@ an@@ back@@ On@@ ly@@ () { android.content.@@ p@@ m.@@ Package@@ Manager p@@ m = this@@ .get@@ Package@@ Manager@@ (); return (p@@ m != null@@ ) && (p@@ m.@@ has@@ System@@ Fe@@ ature@@ ("@@ android.@@ so@@ f@@ t@@ war@@ e.@@ le@@ an@@ back@@ _@@ on@@ ly@@ ")); }
@org.junit.Test public void test@@ Is@@ Loc@@ all@@ y@@ As@@ si@@ g@@ ne@@ d@@ Address@@ () { android.net.@@ M@@ ac@@ Address@@ [] local@@ Addres@@ se@@ s = new android.net.@@ M@@ ac@@ Address@@ []{ new android.net.@@ M@@ ac@@ Addres@@ s("@@ 0@@ 6@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ "), new android.net.@@ M@@ ac@@ Addres@@ s("@@ 0@@ 7@@ :@@ 00@@ :@@ d@@ 3@@ :@@ 5@@ 6@@ :@@ 8@@ a@@ :@@ c@@ 4@@ "), new android.net.@@ M@@ ac@@ Addres@@ s("@@ 3@@ :@@ 3@@ :@@ a@@ a@@ a@@ :@@ b@@ b@@ :@@ cc@@ :@@ d@@ ") }; android.net.@@ M@@ ac@@ Address@@ [] un@@ i@@ ver@@ s@@ all@@ y@@ Addres@@ se@@ s = new android.net.@@ M@@ ac@@ Address@@ []{ new android.net.@@ M@@ ac@@ Addres@@ s("@@ 00@@ :@@ 0@@ 1@@ :@@ 4@@ :@@ 5@@ :@@ 6@@ :@@ 7@@ 7@@ "), new android.net.@@ M@@ ac@@ Addres@@ s("@@ 0@@ 8@@ :@@ 00@@ :@@ 2@@ 2@@ :@@ 3@@ :@@ 4@@ 4@@ :@@ 5@@ 5@@ ") }; for (android.net.@@ M@@ ac@@ Address ma@@ c : local@@ Address@@ es) { java.lang.String ms@@ g = (m@@ ac@@ .@@ toString@@ ()) + " expec@@ ted to b@@ e a loc@@ ally as@@ si@@ g@@ ne@@ d addres@@ s@@ "; assert@@ True@@ (m@@ s@@ g@@ , m@@ ac@@ .is@@ Loc@@ all@@ y@@ As@@ si@@ g@@ ne@@ d@@ ()); } for (android.net.@@ M@@ ac@@ Address ma@@ c : un@@ i@@ ver@@ s@@ all@@ y@@ Address@@ es) { java.lang.String ms@@ g = (m@@ ac@@ .@@ toString@@ ()) + " expec@@ ted not to b@@ e g@@ lo@@ b@@ ally un@@ i@@ qu@@ e addres@@ s@@ "; assert@@ False@@ (m@@ s@@ g@@ , m@@ ac@@ .is@@ Loc@@ all@@ y@@ As@@ si@@ g@@ ne@@ d@@ ()); } }
private void process@@ No@@ i@@ ce@@ R@@ ed@@ u@@ ction@@ Event@@ (@@ int enable@@ , android.@@ bluetooth.Bluetooth@@ Device device@@ ) { if (!(m@@ Audio@@ Param@@ s.@@ isEmpty@@ ())) { if (@@ en@@ able == 1@@ ) { m@@ Audio@@ Param@@ s.@@ put@@ ("@@ N@@ RE@@ C@@ ", 1); } else { m@@ Audio@@ Param@@ s.@@ put@@ ("@@ N@@ RE@@ C@@ ", 0); } log@@ ((@@ (("@@ N@@ RE@@ C valu@@ e for de@@ vice :@@ " + device@@ ) + " is@@ : ") + (m@@ Audio@@ Param@@ s.get@@ ("@@ N@@ RE@@ C@@ "@@ )))); } else { android.util.Log.e@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMachine.@@ TAG, "@@ process@@ No@@ i@@ ce@@ R@@ ed@@ u@@ ction@@ Event@@ : a@@ udio@@ Param@@ N@@ re@@ c is null "); } if ((@@ ((m@@ Current@@ Device@@ ) != null@@ ) && (m@@ Current@@ Device.@@ equals(@@ device@@ ))) && ((m@@ Audio@@ State@@ ) == (android.bluetooth.Bluetooth@@ Headset@@ .@@ STATE_@@ A@@ U@@ D@@ IO@@ _C@@ ON@@ NEC@@ TED@@ ))) { set@@ Audio@@ Parameter@@ s(@@ device@@ ); } }
@javax.annotation.@@ N@@ on@@ null public static com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Re@@ f create@@ Method@@ Ref@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Abstract@@ Method@@ Cal@@ l method@@ Call@@ ) { com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Type de@@ fin@@ ing@@ Clas@@ s = com.android.jack.@@ back@@ end@@ .@@ dex.@@ ro@@ p.@@ R@@ op@@ Hel@@ p@@ er.get@@ C@@ st@@ Type@@ (m@@ ethod@@ Cal@@ l.get@@ Receiver@@ Type@@ ()); java.lang.String sign@@ ature@@ With@@ out@@ Name = com.android.jack.@@ back@@ end@@ .@@ dex.@@ ro@@ p.@@ R@@ op@@ Hel@@ p@@ er.get@@ Method@@ Sign@@ ature@@ With@@ out@@ Name@@ (m@@ ethod@@ Call@@ ); com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ N@@ at n@@ at = new com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ N@@ at@@ (@@ new com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ String@@ (m@@ ethod@@ Cal@@ l.get@@ Method@@ Name@@ ()@@ ), new com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ String(@@ sign@@ ature@@ With@@ out@@ Name@@ )); com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Re@@ f method@@ Re@@ f = new com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Ref@@ (@@ de@@ fin@@ ing@@ Class@@ , n@@ at@@ ); return method@@ Ref@@ ; }
public static void remove@@ Device@@ For@@ w@@ ard@@ (com.android.@@ ddmlib.@@ I@@ Device device@@ ) { synchronized@@ (com.android.@@ hierarchy@@ view@@ er.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ ) { final java.lang.Integ@@ er local@@ P@@ or@@ t = com.android.@@ hierarchy@@ view@@ er.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ .get@@ (device@@ ); if (@@ local@@ P@@ or@@ t != null@@ ) { device@@ .@@ remove@@ For@@ w@@ ard@@ (@@ local@@ Port@@ , Configur@@ ation.@@ DE@@ FA@@ UL@@ T_@@ S@@ ER@@ V@@ ER@@ _P@@ OR@@ T@@ ); com.android.@@ hierarchy@@ view@@ er.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ .@@ remove@@ (device@@ ); } } }
public com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ Pre@@ view@@ Ver@@ sion get@@ Pre@@ view@@ Version@@ () { return m@@ Pre@@ view@@ Version@@ ; }
@java.lang.Override protected void run@@ Test@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String test@@ Number@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String flag@@ Number@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String m@@ app@@ ing@@ Number@@ ) throw@@ s java.lang.Exception { java.io.File test@@ Fol@@ der = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Test@@ Root@@ Dir@@ (("@@ com.android.jack.@@ sh@@ ro@@ b.@@ test@@ " + test@@ Number@@ )); java.io.File ref@@ Fol@@ der = new java.io.File@@ (@@ test@@ Folder@@ , "@@ ref@@ s@@ Se@@ ed@@ "); java.io.File c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ File@@ ("@@ se@@ ed@@ s", "@@ .@@ t@@ xt@@ "); java.io.File ref@@ Output@@ Se@@ ed@@ s = new java.io.File@@ (re@@ f@@ Folder@@ , (("@@ expected@@ -@@ " + flag@@ Number@@ ) + "@@ .@@ t@@ xt@@ ")); com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in toolch@@ a@@ in = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); java.io.File se@@ ed@@ s@@ File = add@@ Option@@ s@@ To@@ Flag@@ s@@ File@@ (@@ new java.io.File@@ (@@ test@@ Folder@@ , ("@@ pro@@ gu@@ ard@@ .@@ flag@@ s@@ " + flag@@ Number@@ )), test@@ Folder@@ , (@@ " -@@ do@@ n@@ t@@ sh@@ r@@ in@@ k -@@ do@@ n@@ to@@ b@@ f@@ us@@ cat@@ e -@@ p@@ r@@ int@@ se@@ ed@@ s " + (c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()))); toolchain.@@ add@@ Pro@@ gu@@ ard@@ Flag@@ s(@@ se@@ ed@@ s@@ File@@ ); com.android.jack.test.@@ hel@@ per.@@ Source@@ To@@ Dex@@ Comp@@ ar@@ is@@ on@@ Test@@ Hel@@ p@@ er en@@ v = new com.android.jack.test.@@ hel@@ per.@@ Source@@ To@@ Dex@@ Comp@@ ar@@ is@@ on@@ Test@@ Hel@@ per@@ (@@ new java.io.File@@ (@@ test@@ Folder@@ , "@@ jack@@ ")); en@@ v@@ .set@@ C@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s(@@ toolch@@ ain@@ ); en@@ v@@ .set@@ Reference@@ Test@@ Too@@ l@@ s@@ (@@ new com.android.jack.test.@@ toolchain.@@ D@@ um@@ my@@ Too@@ lch@@ ain@@ ()); en@@ v@@ .@@ run@@ Test@@ (@@ new com.android.jack.test.@@ com@@ par@@ ator@@ .@@ Comp@@ ar@@ ator@@ Se@@ ed@@ s(@@ c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s, ref@@ Output@@ Se@@ ed@@ s@@ )); }
@java.lang.Override public boolean vi@@ si@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Array@@ Li@@ ter@@ al array@@ Li@@ ter@@ al@@ ) { java.util.List<@@ com.android.jack.ir.ast.J@@ Li@@ ter@@ al@@ > value@@ s = array@@ Li@@ ter@@ al@@ .get@@ Valu@@ es@@ (); java.util.List<@@ com.android.jack.ir.ast.J@@ Li@@ ter@@ al@@ > c@@ lon@@ ed@@ Value@@ s = new java.util.ArrayList<@@ com.android.jack.ir.ast.J@@ Li@@ ter@@ al@@ >@@ (@@ valu@@ es.@@ size@@ ()); for (com.android.jack.@@ ir.ast.J@@ Li@@ ter@@ al li@@ ter@@ al : valu@@ es) { c@@ lon@@ ed@@ Valu@@ es.@@ add@@ (c@@ lon@@ e@@ Ex@@ pres@@ sion@@ (@@ li@@ ter@@ al@@ )); } ex@@ pres@@ sion = new com.android.jack.ir.ast.J@@ Array@@ Li@@ ter@@ al@@ (@@ array@@ Li@@ ter@@ al@@ .get@@ Source@@ Info@@ (), c@@ lon@@ ed@@ Valu@@ es@@ ); return false@@ ; }
private void check@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ () { android.renderscript.Allocation in@@ E@@ d@@ g@@ e = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 3@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 6@@ 1@@ 4@@ L); android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 9@@ 1@@ 4@@ 8@@ 7@@ 7@@ 4@@ 8@@ 1@@ 4@@ 8@@ 7@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ V@@ (in@@ V@@ ); script@@ .@@ for@@ Each@@ _test@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ (in@@ E@@ d@@ ge@@ , out); ve@@ r@@ if@@ y@@ Results@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ (in@@ E@@ d@@ ge@@ , in@@ V@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ V@@ (in@@ V@@ ); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ (in@@ E@@ d@@ ge@@ , out); ve@@ r@@ if@@ y@@ Results@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ (in@@ E@@ d@@ ge@@ , in@@ V@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ te@@ p@@ Float3@@ Float@@ Float3@@ : " + (e.toString()))); } }
public static int send@@ to@@ (java.io.FileDescriptor f@@ d, java.nio.Byte@@ Buff@@ er buff@@ er, int flag@@ s, java.net.Inet@@ Address in@@ et@@ Addres@@ s, int port@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.net.@@ Socket@@ Exception { return Lib@@ core.@@ os.@@ send@@ to@@ (f@@ d, buff@@ er, flag@@ s, in@@ et@@ Addres@@ s, port@@ ); }
protected boolean can@@ U@@ se@@ M@@ eter@@ ed@@ Network@@ () throw@@ s java.lang.Exception { if (m@@ C@@ m.@@ is@@ Active@@ Network@@ M@@ eter@@ ed@@ ()) { return true@@ ; } final android.net.Network@@ Info in@@ fo = mC@@ m@@ .get@@ Active@@ Network@@ Info@@ (); assert@@ NotNull@@ ("@@ Co@@ ul@@ d not ge@@ t ac@@ ti@@ v@@ e network@@ ", info@@ ); return (in@@ fo@@ .get@@ Type@@ ()) == (android.net.@@ Connectivity@@ Manager.@@ TYPE_@@ WI@@ FI@@ ); }
private synchronized void in@@ it@@ Media@@ Play@@ er@@ s@@ Info@@ List@@ () { m@@ Media@@ Play@@ er@@ Info@@ List.@@ clear@@ (); if ((m@@ Media@@ Session@@ Manager@@ ) == null@@ ) { if (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ DE@@ BU@@ G) android.util.Log.@@ w@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ TAG, "@@ in@@ it@@ Media@@ Play@@ er@@ s@@ Info@@ List@@ : n@@ o m@@ ed@@ i@@ a s@@ es@@ sion man@@ ag@@ er@@ !@@ "); return@@ ; } java.util.List<@@ android.@@ media.@@ session@@ .@@ Media@@ Control@@ ler@@ > cont@@ ro@@ l@@ ler@@ s = m@@ Media@@ Session@@ Manager.get@@ Active@@ Session@@ s@@ (@@ null@@ ); if (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ DE@@ BU@@ G) android.util.Log.@@ v@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rcp.@@ TAG, (("@@ in@@ it@@ Media@@ Play@@ er@@ Info@@ List@@ : " + (@@ cont@@ ro@@ l@@ ler@@ s.@@ size@@ ())) + " cont@@ ro@@ l@@ ler@@ s@@ ")); for (android.@@ media.@@ session@@ .@@ Media@@ Contro@@ lle@@ r cont@@ ro@@ lle@@ r : cont@@ ro@@ l@@ ler@@ s) { add@@ Media@@ Play@@ er@@ Info@@ (@@ cont@@ ro@@ l@@ ler@@ ); } }
@java.lang.Override public java.lang.String get@@ Config@@ String@@ (@@ int i@@ tem@@ ) throw@@ s android.os.@@ RemoteException { return null@@ ; }
public void time@@ System@@ Short@@ Array@@ Co@@ py@@ (@@ int re@@ ps@@ ) { final int le@@ n = array@@ Length@@ ; float@@ [] s@@ r@@ c = new float@@ [@@ l@@ en@@ ]; float@@ [] d@@ s@@ t = new float@@ [@@ l@@ en@@ ]; for (@@ int re@@ p = 0; re@@ p < re@@ ps@@ ; ++@@ re@@ p@@ ) { java.lang.System.@@ array@@ copy@@ (s@@ rc@@ , 0, d@@ st@@ , 0, l@@ en@@ ); } }
protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); chan@@ nel@@ 1 = java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l.@@ open@@ (); chan@@ nel@@ 2 = java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l.@@ open@@ (); chan@@ nel@@ 1.@@ s@@ ocket@@ ().@@ b@@ ind@@ (@@ null@@ ); chan@@ nel@@ 2.@@ s@@ ocket@@ ().@@ b@@ ind@@ (@@ null@@ ); chan@@ nel@@ 1@@ Address = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (@@ chan@@ nel@@ 1.@@ s@@ ocket@@ ().get@@ Local@@ Socket@@ Address@@ ())); chan@@ nel@@ 2@@ Address = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (@@ chan@@ nel@@ 2.@@ s@@ ocket@@ ().get@@ Local@@ Socket@@ Address@@ ())); this@@ .@@ dat@@ ag@@ ram@@ Socket@@ 1 = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ (@@ 0); dat@@ ag@@ ram@@ Socket@@ 1@@ .set@@ Re@@ u@@ se@@ Address@@ (@@ true@@ ); chan@@ nel@@ 2.@@ set@@ Re@@ u@@ se@@ Address@@ (@@ true@@ ); chan@@ nel@@ 1@@ Address = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (d@@ at@@ ag@@ ram@@ Socket@@ 1@@ .get@@ Local@@ Socket@@ Address@@ ())); dat@@ ag@@ ram@@ Socket@@ Address = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (d@@ at@@ ag@@ ram@@ Socket@@ 1@@ .get@@ Local@@ Socket@@ Address@@ ())); dat@@ ag@@ ram@@ Socket@@ Address = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (d@@ at@@ ag@@ ram@@ Socket@@ 2@@ .get@@ Local@@ Socket@@ Address@@ ())); }
public void add@@ Pro@@ duct@@ Flavor@@ (@@ @com.android.annotations.NonNull com.android.builder.@@ Pro@@ duct@@ F@@ la@@ vo@@ r pro@@ duct@@ Flavor@@ , @com.android.annotations.NonNull com.android.builder.@@ Source@@ Se@@ t source@@ Set@@ ) { if ((m@@ Flavor@@ Config@@ s) == null@@ ) { m@@ Flavor@@ Config@@ s = new java.util.ArrayList<@@ com.android.builder.@@ Pro@@ duct@@ Flavor@@ >(); m@@ Flavor@@ Source@@ Set@@ s = new java.util.ArrayList<@@ com.android.builder.@@ Source@@ Set@@ >(); } m@@ Flavor@@ Config@@ s.@@ add(@@ pro@@ duct@@ Flavor@@ ); m@@ Flavor@@ Source@@ Set@@ s.add@@ (s@@ ource@@ Set@@ ); m@@ Merg@@ ed@@ F@@ la@@ vo@@ r = pro@@ duct@@ Flavor@@ .m@@ er@@ ge@@ O@@ ver@@ (m@@ Merg@@ ed@@ Flavor@@ ); }
private void check@@ Out@@ s@@ ide@@ D@@ st@@ (java.util.@@ Cal@@ end@@ a@@ r cal@@ , java.lang.String des@@ cription@@ ) { java.util.@@ Time@@ Z@@ on@@ e time@@ Z@@ on@@ e = cal@@ .get@@ TimeZone@@ (); check@@ Out@@ s@@ ide@@ D@@ st@@ (c@@ al@@ , des@@ cription@@ , time@@ Z@@ on@@ e.get@@ R@@ aw@@ Offset@@ ()); }
@java.lang.Override public java.lang.String toString@@ () { return ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((@@ (("@@ Native@@ Library@@ Imp@@ l@@ {@@ " + "@@ name@@ =@@ '@@ ") + (@@ name@@ )) + '@@ \@@ '@@ ) + ", toolch@@ ain@@ Name@@ =@@ '@@ ") + (@@ toolch@@ ain@@ Name@@ )) + '@@ \@@ '@@ '@@ ) + ", c@@ In@@ c@@ lu@@ de@@ Dir@@ s@@ =@@ ") + (c@@ In@@ c@@ lu@@ de@@ Dir@@ s@@ )) + ", c@@ p@@ p@@ In@@ c@@ lu@@ de@@ Dir@@ s@@ =@@ ") + (c@@ p@@ In@@ c@@ lu@@ de@@ Dir@@ s@@ )) + ", c@@ De@@ fin@@ es@@ =@@ ") + (c@@ De@@ fin@@ es@@ )) + ", c@@ p@@ De@@ fin@@ es@@ =@@ ") + (c@@ p@@ De@@ fin@@ es@@ )) + ", c@@ Comp@@ il@@ er@@ Flag@@ s@@ =@@ ") + (c@@ Comp@@ il@@ er@@ Flag@@ s@@ )) + ", c@@ p@@ Comp@@ il@@ er@@ Flag@@ s@@ =@@ ") + (c@@ p@@ p@@ Comp@@ il@@ er@@ Flag@@ s@@ )) + ", so@@ lib@@ Se@@ arch@@ Path@@ s@@ =@@ ") + (s@@ o@@ lib@@ Se@@ arch@@ Path@@ s@@ )) + '@@ }@@ '@@ ; }
private void fil@@ l@@ List@@ () { java.lang.String wh@@ er@@ e = ("@@ num@@ er@@ ic@@ =@@ \"@@ " + (android.os.@@ System@@ Properties@@ .get@@ (@@ Telephony@@ Proper@@ ties.@@ PRO@@ P@@ ER@@ TY@@ _@@ IC@@ C@@ _@@ OP@@ ER@@ AT@@ OR@@ _N@@ U@@ M@@ ER@@ IC@@ , "@@ ))) + "@@ \"@@ "; android.@@ dat@@ ab@@ ase.@@ C@@ ur@@ s@@ or c@@ ur@@ s@@ or = null@@ ; try { c@@ ur@@ s@@ or = get@@ Content@@ Resol@@ ver@@ ().@@ qu@@ er@@ y@@ (@@ Telephon@@ y.@@ C@@ arrier@@ s.@@ CON@@ TE@@ N@@ T_@@ UR@@ I@@ , new java.lang.String@@ []{ "@@ _@@ id@@ ", "@@ name@@ ", "@@ ap@@ n@@ ", "@@ type@@ " }@@ , wh@@ er@@ e@@ , null@@ , Telephon@@ y.@@ C@@ arrier@@ s.@@ DE@@ FA@@ UL@@ T_@@ S@@ OR@@ T_@@ OR@@ D@@ ER@@ ); } catch (android.@@ dat@@ ab@@ ase.@@ S@@ Q@@ L@@ Exception e) { return@@ ; } android.@@ pre@@ ference@@ .@@ Pre@@ ference@@ Gro@@ u@@ p ap@@ n@@ Lis@@ t = ((@@ android.@@ pre@@ ference@@ .@@ Pre@@ ference@@ Gro@@ up@@ ) (@@ find@@ Pre@@ ference@@ ("@@ ap@@ n@@ _@@ list@@ "@@ ))); ap@@ n@@ List.@@ remove@@ All@@ (); java.util.ArrayList<@@ android.@@ pre@@ ference@@ .@@ Pre@@ ference@@ > m@@ ms@@ Ap@@ n@@ Lis@@ t = new java.util.ArrayList<@@ android.@@ pre@@ ference@@ .@@ Pre@@ ference@@ >(); m@@ Sele@@ c@@ ted@@ Ke@@ y = get@@ Sele@@ c@@ ted@@ Ap@@ n@@ Key@@ (); c@@ ur@@ s@@ or.@@ mo@@ ve@@ To@@ F@@ ir@@ st@@ (); while (!@@ (c@@ ur@@ s@@ or@@ .is@@ A@@ f@@ ter@@ L@@ ast@@ ())) { java.lang.String name = c@@ ur@@ s@@ or@@ .get@@ String@@ (com.android.@@ setting@@ s.@@ Ap@@ n@@ Setting@@ s.@@ N@@ AM@@ E_@@ IN@@ DE@@ X@@ ); java.lang.String ap@@ n = c@@ ur@@ s@@ or@@ .get@@ String@@ (com.android.@@ setting@@ s.@@ Ap@@ n@@ Setting@@ s.@@ AP@@ N@@ _@@ IN@@ DE@@ X@@ ); java.lang.String ke@@ y = c@@ ur@@ s@@ or@@ .get@@ String@@ (com.android.@@ setting@@ s.@@ Ap@@ n@@ Setting@@ s.@@ ID@@ _@@ IN@@ DE@@ X@@ ); java.lang.String typ@@ e = c@@ ur@@ s@@ or@@ .get@@ String@@ (com.android.@@ setting@@ s.@@ Ap@@ n@@ Setting@@ s.@@ TYP@@ E@@ S_@@ IN@@ DE@@ X@@ ); com.android.@@ setting@@ s.@@ Ap@@ n@@ Pre@@ feren@@ ce pre@@ f = new com.android.@@ setting@@ s.@@ Ap@@ n@@ Pre@@ ference@@ (@@ this@@ ); pre@@ f@@ .set@@ Key@@ (@@ key@@ ); pre@@ f@@ .set@@ T@@ it@@ le@@ (@@ name@@ ); pre@@ f@@ .set@@ S@@ um@@ m@@ ary@@ (@@ ap@@ n@@ ); pre@@ f@@ .set@@ Per@@ si@@ st@@ ent@@ (@@ false@@ ); pre@@ f@@ .set@@ On@@ Pre@@ ference@@ Change@@ Listener@@ (@@ this@@ ); boolean sele@@ ct@@ able = (@@ typ@@ e == null@@ ) || (!(@@ typ@@ e.@@ equal@@ s("@@ m@@ ms@@ "@@ ))); pre@@ f@@ .set@@ Sele@@ ct@@ able@@ (@@ sele@@ ct@@ able@@ ); if (@@ sele@@ ct@@ able@@ ) { if ((@@ (m@@ Sele@@ c@@ ted@@ Key@@ ) != null@@ ) && (m@@ Sele@@ c@@ ted@@ Ke@@ y.@@ equals(@@ key@@ ))) { pre@@ f@@ .set@@ Check@@ ed@@ (); } ap@@ n@@ List.@@ add@@ Pre@@ ference@@ (p@@ ref@@ ); } else { m@@ ms@@ Ap@@ n@@ List.@@ add@@ (p@@ ref@@ ); } c@@ ur@@ s@@ or.@@ mo@@ ve@@ To@@ Next@@ (); } c@@ ur@@ s@@ or.@@ close(); for (android.@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce pre@@ feren@@ ce : m@@ ms@@ Ap@@ n@@ List@@ ) { ap@@ n@@ List.@@ add@@ Pre@@ ference@@ (p@@ re@@ ference@@ ); } }
public void load@@ Data@@ From@@ Temp@@ l@@ ate@@ () { if (m@@ y@@ Up@@ dat@@ ing@@ ) return@@ ; my@@ Up@@ dat@@ ing = true@@ ; try { java.lang.Object mo@@ du@@ le@@ Name = my@@ W@@ iz@@ ard@@ Stat@@ e.get@@ (@@ New@@ App@@ En@@ g@@ ine@@ Mod@@ ule@@ Action@@ .@@ AT@@ TR@@ _M@@ OD@@ UL@@ E_@@ N@@ AM@@ E); if (m@@ o@@ du@@ le@@ Name == null@@ ) { mo@@ du@@ le@@ Name = my@@ W@@ iz@@ ard@@ Stat@@ e.get@@ (@@ New@@ Project@@ W@@ iz@@ ard@@ State.@@ AT@@ TR@@ _M@@ OD@@ UL@@ E_@@ N@@ AM@@ E); } if (m@@ o@@ du@@ le@@ Name != null@@ ) { my@@ Mod@@ ule@@ Name@@ Field@@ .set@@ Text@@ (m@@ o@@ du@@ le@@ Nam@@ e.toString@@ ()); } java.lang.Object package@@ Name = my@@ W@@ iz@@ ard@@ Stat@@ e.get@@ (@@ Temp@@ l@@ ate@@ Met@@ ad@@ ata@@ .@@ AT@@ TR@@ _P@@ AC@@ K@@ A@@ G@@ E_@@ N@@ AM@@ E); if (@@ package@@ Name != null@@ ) { my@@ Package@@ Name@@ Field@@ .set@@ Text@@ (@@ package@@ Nam@@ e.toString@@ ()); } final@@ l@@ y { my@@ Up@@ dat@@ ing = false@@ ; } }
@java.lang.Override public void h@@ an@@ g@@ up@@ W@@ ait@@ ing@@ Or@@ B@@ ack@@ gro@@ und@@ (android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ H@@ AN@@ G@@ U@@ P@@ _@@ W@@ A@@ I@@ T@@ ING@@ _@@ OR@@ _@@ B@@ AC@@ K@@ G@@ RO@@ UN@@ D@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); try { radioProx@@ y.@@ h@@ an@@ g@@ up@@ W@@ ait@@ ing@@ Or@@ B@@ ack@@ gro@@ und@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ h@@ an@@ g@@ up@@ W@@ ait@@ ing@@ Or@@ B@@ ack@@ gro@@ und@@ ", e); } } }
public static byte@@ [] string@@ To@@ U@@ t@@ f@@ 8@@ Bytes@@ (java.lang.String string@@ , int ut@@ f@@ 8@@ L@@ en@@ ) { int le@@ n = str@@ ing.@@ length@@ (); byte@@ [] byte@@ s = new byte@@ [@@ ut@@ f@@ 8@@ L@@ en@@ ]; int out@@ A@@ t = 0; for (@@ int i = 0; i < l@@ en@@ ; i++) { char c = string@@ .@@ char@@ At@@ (i@@ ); if ((@@ c != 0) && (@@ c < 12@@ 8@@ )) { byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (c@@ )); } else if (@@ c < 2@@ 0@@ 4@@ 8@@ ) { byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (((@@ c >@@ > 6@@ ) & 3@@ 1@@ ) | 1@@ 9@@ 2@@ )); byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) ((@@ c & 6@@ 3@@ ) | 12@@ 8@@ )); } else { byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (((@@ c >@@ > 12@@ ) & 1@@ 5@@ ) | 2@@ 2@@ 4@@ )); byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (((@@ c >@@ > 6@@ ) & 6@@ 3@@ ) | 12@@ 8@@ )); byte@@ s@@ [@@ (@@ out@@ At@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) ((@@ c & 6@@ 3@@ ) | 12@@ 8@@ )); } } return byte@@ s; }
public void log@@ Error@@ (java.lang.String log@@ ) { if ((m@@ Log@@ ) != null@@ ) { m@@ Log.@@ error@@ (@@ null@@ , " %@@ 1@@ $@@ s", log@@ ); } else { synchronized@@ (m@@ Log@@ Text@@ ) { m@@ Log@@ T@@ ex@@ t.@@ append("@@ ER@@ R@@ OR@@ : ").@@ append(@@ log@@ ); } }
@org.junit.Test public void w@@ ron@@ g@@ Ne@@ g@@ ative@@ Co@@ lum@@ n@@ Index@@ () { expected@@ Exception@@ .@@ expec@@ t@@ (java.lang.@@ Illegal@@ Argument@@ Exception@@ .@@ class@@ ); android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ match@@ er.@@ C@@ ur@@ s@@ or@@ M@@ atch@@ er@@ s.@@ w@@ ith@@ R@@ o@@ w@@ Int@@ ((@@ -1@@ ), android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ match@@ er.@@ C@@ ur@@ s@@ or@@ M@@ atch@@ er@@ s@@ Test.@@ IN@@ TE@@ G@@ ER_@@ VAL@@ U@@ E_@@ MA@@ T@@ CH@@ ER@@ ).@@ match@@ es@@ (c@@ ur@@ s@@ or@@ ); fail@@ ("@@ Ex@@ pec@@ ted Illegal@@ Argument@@ Exception@@ "); }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Su@@ ite@@ Return@@ s@@ C@@ u@@ st@@ om@@ Test@@ .@@ class@@ ) @org.junit.Test public void test@@ Runner@@ _S@@ ui@@ te@@ Return@@ s@@ C@@ u@@ st@@ om@@ Test@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ ("@@ s@@ ui@@ te@@ ", ((("@@ " + "@@ java.lang.Illegal@@ State@@ Exception@@ : Un@@ k@@ no@@ w@@ n s@@ ui@@ te@@ () result@@ : ") + (@@ vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Su@@ ite@@ Return@@ s@@ C@@ u@@ st@@ om@@ Test.@@ C@@ u@@ st@@ om@@ Test@@ .@@ class@@ .getName@@ ())) + "@@ \n@@ "@@ )).@@ com@@ pl@@ et@@ ed@@ N@@ or@@ m@@ all@@ y@@ (); }
@java.lang.Override public void connection@@ Read@@ y@@ (com.android.@@ ims.@@ Ims@@ Manager man@@ ag@@ er@@ ) throw@@ s com.android.@@ ims.@@ Ims@@ Exception { android.telephony.@@ R@@ log.@@ d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Ims@@ Sms@@ Dis@@ p@@ atch@@ er.@@ TAG, "@@ Ims@@ Manager@@ : connec@@ tion read@@ y.@@ "); set@@ Listener@@ s(); m@@ Is@@ Ims@@ Service@@ U@@ p = true@@ ; }
com.android.server.@@ Par@@ cel@@ File@@ Descriptor update@@ W@@ all@@ p@@ ap@@ er@@ Bit@@ m@@ ap@@ Lock@@ ed@@ (java.lang.String name@@ ) { if (@@ name == null@@ ) name = "@@ "; try { if (!@@ (com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.@@ W@@ AL@@ L@@ P@@ AP@@ ER_@@ DI@@ R.@@ exist@@ s@@ ())) { com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.@@ W@@ AL@@ L@@ P@@ AP@@ ER_@@ DI@@ R@@ .m@@ k@@ d@@ ir@@ (); android.os.@@ File@@ Utils.@@ set@@ Permission@@ s@@ (com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.@@ W@@ AL@@ L@@ P@@ AP@@ ER_@@ DI@@ R@@ .get@@ Path@@ (), ((@@ (android.os.@@ File@@ Utils.@@ S_@@ I@@ R@@ W@@ X@@ U@@ ) | (android.os.@@ File@@ Utils.@@ S_@@ I@@ R@@ W@@ X@@ G@@ )) | (android.os.@@ File@@ Utils.@@ S_@@ I@@ X@@ O@@ TH@@ )), (-1@@ ), (-1@@ )); } com.android.server.@@ Par@@ cel@@ File@@ Descriptor f@@ d = com.android.server.@@ Par@@ cel@@ File@@ Descrip@@ tor.@@ open@@ (com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.@@ W@@ AL@@ L@@ P@@ AP@@ ER_@@ F@@ IL@@ E, ((@@ M@@ OD@@ E_@@ C@@ RE@@ A@@ TE@@ ) | (@@ M@@ OD@@ E_@@ RE@@ AD@@ _@@ W@@ R@@ I@@ TE@@ ))); android.os.@@ SE@@ Lin@@ u@@ x.@@ r@@ est@@ or@@ ec@@ on@@ (com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.@@ W@@ AL@@ L@@ P@@ AP@@ ER_@@ F@@ IL@@ E@@ .get@@ Path@@ ()); m@@ Name = name@@ ; return f@@ d@@ ; } catch (@@ java.io.File@@ Not@@ F@@ ound@@ Exception e) { android.util.@@ S@@ log.@@ w@@ (com.android.server.@@ W@@ all@@ p@@ ap@@ er@@ Manager@@ Service.TAG, "@@ Error set@@ t@@ ing w@@ all@@ p@@ ap@@ er@@ ", e); } return null@@ ; }
@java.lang.Override public void on@@ Create@@ () { android.util.Log.@@ i@@ (com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ Ims@@ Service.@@ LOG@@ _@@ TAG, "@@ Test@@ Ims@@ Service@@ : on@@ Create@@ "); m@@ Ims@@ Reg@@ is@@ tr@@ ation = com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ Ims@@ Reg@@ is@@ tr@@ ation@@ Imp@@ l.get@@ Instance@@ (); m@@ Test@@ M@@ m@@ T@@ el@@ Fe@@ at@@ ur@@ e = com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ M@@ m@@ T@@ el@@ Fe@@ ature@@ Imp@@ l.get@@ Instance@@ (); m@@ Test@@ R@@ c@@ s@@ Fe@@ at@@ ur@@ e = new com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ R@@ c@@ s@@ Fe@@ ature@@ Imp@@ l@@ (); m@@ Test@@ Ims@@ Con@@ fig = new com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ Ims@@ Config@@ Imp@@ l@@ (); com.android.@@ phon@@ e.@@ test@@ app@@ s.@@ im@@ st@@ est@@ app.@@ Test@@ Ims@@ Service.@@ m@@ In@@ stan@@ ce = this@@ ; }
@javax.annotation.@@ N@@ on@@ null public static com.android.sched.util.@@ Ver@@ sion get@@ Version@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String app@@ Name, @javax.annotation.@@ N@@ on@@ null java.lang.@@ Class@@ Load@@ er load@@ er@@ ) throw@@ s com.android.sched.util.@@ cod@@ ec@@ .@@ Par@@ sing@@ Exception, java.io.IOException { java.lang.String resource@@ Name = app@@ Name + (com.android.s@@ ched.@@ util.@@ Version@@ .@@ F@@ IL@@ E_@@ S@@ U@@ F@@ FI@@ X@@ ); java.io.@@ Input@@ Stream resource@@ Stream = load@@ er.get@@ Resource@@ As@@ Stream@@ (@@ resource@@ Name); if (@@ resource@@ Stream == null@@ ) { throw new java.io.File@@ Not@@ F@@ ound@@ Exception(@@ resource@@ Name); } return new com.android.sched.util.@@ Version@@ (@@ resource@@ Stream@@ ); }
boolean is@@ Im@@ m@@ ut@@ able@@ Network@@ Capabilities@@ (c@@ ap@@ abili@@ ties@@ );
public void min@@ core@@ (@@ long addres@@ s, long byte@@ Count@@ , byte@@ [] v@@ ec@@ tor@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public int wait@@ p@@ id@@ (@@ int p@@ id, android.util.@@ M@@ ut@@ able@@ In@@ t statu@@ s, int option@@ s) throw@@ s android.system.@@ Errno@@ Exception;
public boolean has@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es@@ () { synchronized@@ (m@@ Lock) { return ((m@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es) != null@@ ) && (m@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es.@@ has@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es@@ ()); } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ loc@@ ation.@@ Loc@@ ation get@@ V@@ File@@ Location@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Base@@ V@@ Di@@ r parent@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ ) { return v@@ f@@ s.get@@ V@@ File@@ Location@@ (@@ parent@@ , name@@ ); }
private void dis@@ able@@ W@@ if@@ i@@ Ip@@ Ser@@ v@@ ing@@ Lock@@ ed@@ (java.lang.String if@@ name@@ , int ap@@ State@@ ) { if (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ DBG) android.util.Log.d@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ TAG, ("@@ Can@@ cel@@ ing W@@ i@@ F@@ i t@@ ether@@ ing requ@@ est - AP@@ _STA@@ TE@@ =@@ " + ap@@ State@@ )); boolean fo@@ un@@ d = false@@ ; if (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ if@@ name@@ ))) { final com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ T@@ ether@@ State t@@ s = m@@ T@@ ether@@ Stat@@ es@@ .get@@ (@@ if@@ name@@ ); if (t@@ s != null@@ ) { ts.@@ state@@ Mach@@ ine.@@ un@@ w@@ an@@ ted@@ (); fo@@ un@@ d = true@@ ; } } else { for (@@ int i = 0; i < (m@@ T@@ ether@@ Stat@@ es.@@ size@@ ()); i++) { com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMach@@ in@@ e ti@@ s@@ m = m@@ T@@ ether@@ Stat@@ es.@@ value@@ At@@ (i@@ ).@@ state@@ Mach@@ ine@@ ; if ((@@ ti@@ sm@@ .@@ int@@ er@@ face@@ Type@@ ()) == (android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER@@ ING@@ _@@ WI@@ FI@@ )) { ti@@ s@@ m.@@ un@@ w@@ an@@ ted@@ (); fo@@ un@@ d = true@@ ; break@@ ; } } } if (!@@ fo@@ und@@ ) { m@@ Log.@@ log@@ (("@@ Error dis@@ ab@@ l@@ ing W@@ i@@ -@@ F@@ i I@@ P ser@@ v@@ ing@@ ; re@@ ference@@ d int@@ er@@ face@@ : " + if@@ name@@ )); } m@@ W@@ if@@ i@@ T@@ ether@@ Requ@@ es@@ ted = false@@ ; }
public void s@@ p@@ a@@ wn@@ Des@@ c@@ end@@ ant@@ (com.android.@@ apk@@ si@@ g.@@ Sign@@ ing@@ Cer@@ t@@ if@@ ic@@ ate@@ Line@@ age.@@ Sign@@ er@@ Con@@ fig parent@@ , com.android.@@ apk@@ si@@ g.@@ Sign@@ ing@@ Cer@@ t@@ if@@ ic@@ ate@@ Line@@ age.@@ Sign@@ er@@ Con@@ fig ch@@ ild@@ ) throw@@ s java.security.@@ In@@ valid@@ Key@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception, java.security.@@ Sign@@ ature@@ Exception, java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ En@@ cod@@ ing@@ Exception { if ((@@ flag@@ s == null@@ ) || (!(@@ get@@ Sign@@ ature@@ Algorith@@ m@@ ()))) { throw new java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ En@@ cod@@ ing@@ Exception e) throw@@ s java.security.@@ In@@ valid@@ Key@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception, java.security.@@ Sign@@ ature@@ Exception, java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ En@@ cod@@ ing@@ Exception { throw new java.security.@@ Sign@@ ature@@ Exception("@@ In@@ va@@ li@@ d Sec@@ urit@@ y@@ "); } }
public native long send@@ file@@ (java.io.FileDescriptor out@@ F@@ d, java.io.FileDescriptor in@@ F@@ d, android.system.@@ Int@@ 6@@ 4@@ Re@@ f in@@ Offset@@ , long byte@@ Count@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public void test@@ Get@@ Ex@@ t@@ end@@ ed@@ Key@@ U@@ s@@ age@@ () throw@@ s java.lang.Exception { assert@@ Null@@ (@@ new tests.@@ security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ 2@@ Test.@@ M@@ y@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ ().get@@ Ex@@ t@@ end@@ ed@@ Key@@ U@@ s@@ age@@ ()); java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ i@@ cat@@ e cer@@ t = g@@ ener@@ ate@@ Cer@@ t@@ (@@ tests.@@ security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ 2@@ Test.@@ C@@ ER@@ T_@@ C@@ OR@@ RE@@ C@@ T@@ ); java.util.List<@@ java.lang.String> l = cer@@ t.get@@ Ex@@ t@@ end@@ ed@@ Key@@ U@@ s@@ age@@ (); assert@@ NotNull@@ (@@ l@@ ); try { l.@@ clear@@ (); fail@@ ("@@ S@@ ho@@ ul@@ d h@@ av@@ e throw@@ n@@ "); } catch (java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception expected@@ ) { } try { l.@@ add@@ ("@@ Test@@ "); fail@@ (); } catch (java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception expected@@ ) { } try { l.@@ remove@@ (@@ 0); fail@@ (); } catch (java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception expected@@ ) { } try { l.@@ remove@@ (@@ 0); fail@@ (); } catch (java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception expected@@ ) { } }
private void check@@ And@@ Set@@ No@@ t@@ if@@ ic@@ ation@@ (android.net.@@ Network@@ Info network@@ Info@@ , java.util.List<@@ android.net.@@ w@@ if@@ i.@@ Scan@@ Result@@ > scan@@ Result@@ s) { if (!(m@@ No@@ t@@ if@@ ic@@ ation@@ Enabled@@ )) return@@ ; if ((m@@ W@@ if@@ i@@ State@@ ) != (android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ )) return@@ ; android.net.Network@@ Info.@@ State st@@ ate = Network@@ Info.@@ State.@@ D@@ IS@@ CONNEC@@ TED@@ ; if (@@ network@@ Info != null@@ ) { st@@ ate = network@@ Info@@ .get@@ State@@ (); } if ((@@ st@@ ate == (@@ Network@@ Info.@@ State.@@ D@@ IS@@ CONNEC@@ TED@@ )) || (@@ st@@ ate == (@@ Network@@ Info.@@ State.@@ UN@@ K@@ NO@@ W@@ N@@ ))) { android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Res@@ ult result = get@@ Open@@ Network@@ Re@@ com@@ m@@ end@@ ation@@ (s@@ can@@ Result@@ s); if ((@@ result != null@@ ) && ((@@ res@@ ul@@ t.get@@ W@@ if@@ i@@ Configuration@@ ()) != null@@ )) { m@@ Re@@ com@@ m@@ end@@ ed@@ Net@@ wor@@ k = res@@ ul@@ t.get@@ W@@ if@@ i@@ Configuration@@ (); if ((@@ ++@@ (m@@ Num@@ Scan@@ s@@ S@@ in@@ ce@@ Network@@ State@@ Change@@ )) >@@ = (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ No@@ t@@ if@@ ic@@ ation@@ Control@@ ler.@@ N@@ U@@ M@@ _S@@ C@@ AN@@ S_@@ B@@ E@@ F@@ OR@@ E_@@ AC@@ T@@ U@@ AL@@ L@@ Y@@ _S@@ C@@ AN@@ N@@ ING@@ )) { dis@@ play@@ No@@ t@@ if@@ ic@@ ation@@ (); } return@@ ; } remove@@ No@@ t@@ if@@ ic@@ ation@@ (); }
public boolean has@@ Sub@@ Id@@ () { return ((@@ has@@ Sub@@ Id@@ ()) != (android.@@ telephony.@@ Sub@@ s@@ cription@@ Manager.@@ IN@@ VAL@@ ID@@ _S@@ U@@ B@@ S@@ C@@ R@@ IP@@ TION_@@ ID@@ )) && ((@@ get@@ Sub@@ Id@@ ().@@ length@@ )) == 0@@ )) { return false@@ ; }
void add@@ Zip@@ File@@ (@@ java.io.File z@@ ip@@ File@@ ) throw@@ s com.android.builder.@@ pack@@ ag@@ ing.@@ D@@ up@@ li@@ cate@@ File@@ Exception, com.android.builder.@@ pack@@ ag@@ ing.@@ Pack@@ ag@@ er@@ Exception, com.android.builder.@@ pack@@ ag@@ ing.@@ Se@@ ale@@ d@@ Package@@ Exception { add@@ File@@ (@@ z@@ ip@@ File@@ , null@@ ); }
@java.lang.Override public void icc@@ C@@ lose@@ Log@@ ic@@ al@@ Channel@@ (@@ int chan@@ nel@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SI@@ M@@ _C@@ LO@@ S@@ E_@@ CH@@ AN@@ NE@@ L, result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " channe@@ l = ") + chan@@ nel@@ )); } try { radioProx@@ y.@@ icc@@ C@@ lose@@ Log@@ ic@@ al@@ Channel@@ (rr@@ .m@@ Ser@@ ial@@ , chan@@ nel@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ icc@@ C@@ lose@@ Log@@ ic@@ al@@ Channel@@ ", e); } } }
@javax.annotation.@@ N@@ on@@ null public java.lang.String get@@ Path@@ Element@@ As@@ String@@ (@@ char se@@ par@@ ator@@ ) { return path@@ .@@ toString@@ ().@@ re@@ pla@@ ce@@ (get@@ Se@@ par@@ ator@@ (), se@@ par@@ ator@@ ); }
public void k@@ il@@ l@@ (@@ int p@@ id, int sign@@ al@@ ) throw@@ s android.system.@@ ErrnoException { os.@@ k@@ il@@ l@@ (p@@ id, sign@@ al@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public final java.lang.String get@@ Library@@ Ex@@ t@@ ension@@ () { return "@@ .@@ jack@@ "; }
@java.lang.Override protected java.security.@@ Pri@@ v@@ ate@@ Ke@@ y eng@@ ine@@ Gener@@ ate@@ Pri@@ v@@ ate@@ (@@ java.security.@@ spec@@ .@@ Key@@ S@@ pe@@ c key@@ Spec@@ ) throw@@ s java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception { if (@@ key@@ S@@ pe@@ c == null@@ ) { throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception("@@ key@@ S@@ pe@@ c == null@@ "); } if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ EC@@ Pri@@ v@@ ate@@ Key@@ Spec@@ ) { return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ EC@@ Pri@@ v@@ ate@@ Key@@ (((@@ java.security.@@ spec@@ .@@ EC@@ Pri@@ v@@ ate@@ Key@@ Spec@@ ) (@@ key@@ Spec@@ ))); } else if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ) { return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Key@@ Spec@@ Exception(("@@ M@@ us@@ t u@@ se EC@@ Pri@@ v@@ ate@@ Key@@ S@@ pe@@ c or P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ; w@@ a@@ s " + (@@ key@@ Spec@@ .get@@ Class@@ ().get@@ Name@@ ()))); } try { final org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Ke@@ y ke@@ y = new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Key@@ (@@ org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ d@@ 2@@ i@@ _P@@ K@@ C@@ S@@ 8@@ _P@@ R@@ I@@ V@@ _@@ KE@@ Y_@@ IN@@ F@@ O@@ (p@@ k@@ c@@ s@@ 8@@ Key@@ Spec@@ .get@@ En@@ cod@@ ed@@ ())); return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ EC@@ Pri@@ v@@ ate@@ Key@@ (@@ key@@ ); } catch (java.lang.Exception e) { throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception(@@ e); } } throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception(("@@ M@@ us@@ t u@@ se EC@@ Pri@@ v@@ ate@@ Key@@ S@@ pe@@ c or P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ; w@@ a@@ s " + (@@ key@@ Spec@@ .get@@ Class@@ ().get@@ Name@@ ()))); }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ con@@ ver@@ t s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ con@@ ver@@ t@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); s.@@ invok@@ e@@ _@@ con@@ ver@@ t@@ _test@@ (); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
@java.lang.Override public synchronized void run@@ (com.android.jack.@@ ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face dec@@ l@@ ar@@ ed@@ Typ@@ e) throw@@ s java.lang.Exception { if (d@@ ec@@ l@@ ar@@ ed@@ Type.@@ is@@ Ex@@ ter@@ nal@@ ()) { return@@ ; } com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ de@@ pendenc@@ y.@@ file.@@ File@@ Dependenc@@ ies@@ Colle@@ put@@ ation.@@ Visi@@ tor v = new com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ de@@ pendenc@@ y.@@ file.@@ File@@ Dependenc@@ ies@@ Com@@ put@@ ation.@@ Visi@@ tor@@ (d@@ ec@@ l@@ ar@@ ed@@ Type@@ ); v@@ .@@ ac@@ ce@@ p@@ t@@ (d@@ ec@@ l@@ ar@@ ed@@ Type@@ ); }
private static java.io.File copy@@ Data@@ To@@ Local@@ File@@ (android.content.@@ Context contex@@ t@@ ) { java.io.File local@@ File@@ ; try { local@@ File = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ tem@@ p@@ ", "@@ .@@ z@@ ip@@ ", contex@@ t.get@@ Fil@@ es@@ Dir@@ ()); } catch (java.io.IOException e) { android.util.Log.e@@ (@@ libcore.@@ t@@ z@@ data@@ .@@ pro@@ to@@ type@@ _@@ up@@ dat@@ er.@@ R@@ ul@@ es@@ Check@@ Recei@@ ver.@@ TAG, "@@ Un@@ able to cre@@ ate loc@@ al st@@ or@@ age file@@ ", e); return null@@ ; } android.os.@@ Par@@ cel@@ File@@ Descriptor input@@ File@@ Descrip@@ tor@@ ; try { input@@ File@@ Descriptor = contex@@ t.get@@ Content@@ Resol@@ ver@@ ().@@ open@@ File@@ Descrip@@ tor@@ (@@ TimeZone@@ R@@ ul@@ es@@ Data@@ Con@@ tr@@ ac@@ t.@@ DA@@ TA@@ _@@ UR@@ I@@ , "@@ r@@ "); if (in@@ put@@ File@@ Descriptor == null@@ ) { throw new java.io.File@@ Not@@ F@@ ound@@ Exception("@@ Content@@ Provid@@ er return@@ ed null@@ "); } } catch (@@ java.io.File@@ Not@@ F@@ ound@@ Exception e) { android.util.Log.e@@ (@@ libcore.@@ t@@ z@@ data@@ .@@ pro@@ to@@ type@@ _@@ up@@ dat@@ er.@@ R@@ ul@@ es@@ Check@@ Recei@@ ver.@@ TAG, ("@@ copy@@ Data@@ To@@ Local@@ File@@ : Un@@ able to op@@ e@@ n fi@@ le des@@ crip@@ tor@@ " + (android.@@ provider.@@ TimeZone@@ R@@ ul@@ es@@ Data@@ Con@@ tr@@ ac@@ t.@@ DA@@ TA@@ _@@ UR@@ I@@ )), e); return null@@ ; } try (android.os.@@ Par@@ cel@@ File@@ Descriptor p@@ f@@ d = input@@ File@@ Descrip@@ tor@@ ;@@ java.io.@@ Input@@ Stream fi@@ s = new java.io.File@@ InputStream@@ (p@@ f@@ d@@ .get@@ File@@ Descrip@@ tor@@ (), false@@ )@@ ;@@ java.io.File@@ Output@@ Stream fo@@ s = new java.io.File@@ Output@@ Stream@@ (@@ local@@ File@@ , false@@ )) { libcore.io.@@ Stream@@ s.@@ copy@@ (@@ fi@@ s, fo@@ s); } catch (java.io.IOException e) { android.util.Log.e@@ (@@ libcore.@@ t@@ z@@ data@@ .@@ pro@@ to@@ type@@ _@@ up@@ dat@@ er.@@ R@@ ul@@ es@@ Check@@ Recei@@ ver.@@ TAG, ("@@ Un@@ able to cre@@ ate as@@ set st@@ or@@ age file@@ : " + local@@ File@@ ), e); return null@@ ; } return local@@ File@@ ; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 5@@ 12@@ T@@ c@@ p@@ 4@@ U@@ dp@@ En@@ cap@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 5@@ 12@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (@@ 5@@ 12@@ ), 25@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, true@@ ); }
private static native void m@@ k@@ f@@ if@@ o@@ (java.lang.String path@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ .@@ Message@@ Dig@@ est@@ V@@ File create@@ V@@ File@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ .@@ Message@@ Dig@@ est@@ V@@ Di@@ r parent@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception { return new com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ .@@ Message@@ Dig@@ est@@ V@@ File@@ (@@ this@@ , par@@ ent.get@@ W@@ r@@ app@@ ed@@ Dir@@ ().@@ create@@ V@@ File@@ (@@ name@@ )); }
public void test@@ Native@@ U@@ dp@@ Socket@@ Pa@@ ir@@ () throw@@ s java.lang.Exception { for (java.lang.String add@@ r : android.net.cts.@@ IpSec@@ Base@@ Test.@@ LO@@ OP@@ B@@ AC@@ K_@@ AD@@ D@@ RS@@ ) { java.net.Inet@@ Address loc@@ al = java.net.Inet@@ Addres@@ s.get@@ By@@ Name@@ (@@ add@@ r@@ ); try (android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m tr@@ an@@ s@@ for@@ m = build@@ Default@@ Tr@@ an@@ s@@ for@@ m@@ (@@ local@@ )) { android.net.cts.@@ IpSec@@ Base@@ Test.@@ Socket@@ Pa@@ ir@@ <@@ android.net.cts.@@ IpSec@@ Base@@ Test.@@ Native@@ U@@ dp@@ Socket@@ > s@@ ocket@@ s = android.net.cts.@@ IpSec@@ Base@@ Test.@@ get@@ Native@@ U@@ dp@@ Socket@@ Pa@@ ir@@ (@@ local@@ , m@@ IS@@ M@@ , tr@@ an@@ s@@ for@@ m@@ , true@@ ); check@@ Socket@@ Pa@@ ir@@ (s@@ ocket@@ s.@@ m@@ Le@@ f@@ t@@ S@@ ock@@ , s@@ ocket@@ s.@@ m@@ R@@ ig@@ ht@@ S@@ ock@@ ); } } }
@@@ android.@@ support.@@ annotation.@@ Visi@@ ble@@ For@@ Test@@ ing@@ (o@@ th@@ er@@ w@@ is@@ e = android.@@ support.@@ annotation.@@ Visi@@ ble@@ For@@ Test@@ ing.@@ P@@ AC@@ K@@ A@@ G@@ E_@@ P@@ R@@ I@@ V@@ A@@ TE@@ ) public boolean ok@@ To@@ Connec@@ t@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { if (m@@ Adapter@@ Service.@@ is@@ Q@@ ui@@ et@@ Mode@@ Enabled@@ ()) { android.util.Log.e@@ (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Service.TAG, (("@@ ok@@ To@@ Connec@@ t@@ : can@@ not connec@@ t to " + device@@ ) + " : qu@@ i@@ et mo@@ de enable@@ d@@ ")); return false@@ ; } if (!(@@ connection@@ Al@@ low@@ ed@@ Check@@ Ma@@ x@@ De@@ vices@@ (device@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Service.TAG, (("@@ ok@@ To@@ Connec@@ t@@ : can@@ not connec@@ t to " + device@@ ) + " : to@@ o man@@ y connec@@ ted de@@ vices@@ ")); return false@@ ; } int pri@@ or@@ it@@ y = get@@ Pri@@ or@@ ity@@ (device@@ ); int b@@ ond@@ State = m@@ Adapter@@ Service@@ .get@@ B@@ ond@@ State@@ (device@@ ); if ((@@ pri@@ or@@ it@@ y == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ UN@@ DE@@ F@@ IN@@ ED@@ )) && (b@@ ond@@ State == (android.bluetooth.Bluetooth@@ Device.@@ B@@ ON@@ D@@ _N@@ ON@@ E@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Service.TAG, ((((@@ ("@@ ok@@ To@@ Connec@@ t@@ : can@@ not connec@@ t to " + device@@ ) + " : pri@@ or@@ ity@@ =@@ ") + pri@@ or@@ ity@@ ) + " b@@ ond@@ State@@ =@@ ") + b@@ ond@@ State@@ )); return false@@ ; } if (@@ pri@@ or@@ it@@ y <@@ = (android.bluetooth.Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ O@@ F@@ )) { android.util.Log.e@@ (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Service.TAG, ((("@@ ok@@ To@@ Connec@@ t@@ : can@@ not connec@@ t to " + device@@ ) + " : pri@@ or@@ ity@@ =@@ ") + pri@@ or@@ ity@@ )); return false@@ ; } return true@@ ; }
private void to@@ u@@ ch@@ Source@@ File@@ (@@ java.io.File@@ .@@ .@@ . s@@ ources@@ ) throw@@ s java.lang.Exception { java.util.List<@@ java.io.File@@ > file@@ s = new java.util.ArrayList<@@ java.io.File@@ >(); for (@@ java.io.File s@@ our@@ ce : s@@ ources@@ ) { com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Java@@ Fil@@ es@@ (s@@ ource@@ , fil@@ es@@ , false@@ ); } if ((@@ fil@@ es.@@ size@@ ()) > 0) { java.io.File file@@ To@@ T@@ ou@@ ch = fil@@ es@@ .get@@ (((@@ fil@@ es.@@ size@@ ()) / 2@@ )); if (!(@@ file@@ To@@ T@@ ou@@ ch@@ .set@@ L@@ ast@@ Mo@@ d@@ if@@ i@@ ed@@ (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s@@ ()))) { throw new java.lang.@@ Asser@@ tion@@ Error@@ ((("@@ Co@@ ul@@ d not to@@ u@@ ch fi@@ le '@@ " + (file@@ To@@ T@@ ou@@ ch@@ .get@@ Path@@ ())) + "@@ '@@ ")); } } }
private void check@@ T@@ g@@ am@@ ma@@ Float3Float3@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 3@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 1@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ T@@ g@@ am@@ ma@@ Float3Float3@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ T@@ g@@ am@@ ma@@ Float3Float3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ T@@ g@@ am@@ ma@@ Float3Float3@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ T@@ g@@ am@@ ma@@ Float3Float3@@ : " + (e.toString()))); } }
@java.lang.Override public void add@@ P@@ ag@@ es@@ () { if (m@@ S@@ ho@@ w@@ W@@ el@@ com@@ e@@ P@@ age@@ ) { m@@ W@@ el@@ com@@ e@@ P@@ age = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ w@@ el@@ com@@ e.@@ W@@ el@@ com@@ e@@ W@@ iz@@ ard@@ P@@ age@@ (); add@@ P@@ age@@ (m@@ W@@ el@@ com@@ e@@ P@@ age@@ ); } if ((m@@ S@@ ho@@ w@@ U@@ s@@ age@@ P@@ age@@ ) && (!(m@@ Stor@@ e.@@ is@@ P@@ ing@@ Op@@ t@@ In@@ ()))) { m@@ U@@ s@@ age@@ P@@ age = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ w@@ el@@ com@@ e.@@ U@@ s@@ age@@ Permission@@ P@@ age@@ (); add@@ P@@ age@@ (m@@ U@@ s@@ age@@ P@@ age@@ ); } }
@java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ man@@ ag@@ ed.@@ Build@@ Type build@@ Typ@@ e) { com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Config@@ Helper.@@ in@@ it@@ (@@ build@@ Typ@@ e.get@@ N@@ dk@@ ()); }
@java.lang.Override public void handle@@ Message@@ (android.os.@@ Message ms@@ g@@ ) { switch (m@@ s@@ g.@@ wh@@ at@@ ) { case com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ MS@@ G@@ _M@@ N@@ S@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ _RE@@ G@@ IS@@ TR@@ A@@ TI@@ O@@ N : if (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ V@@ ) android.util.Log.@@ v@@ (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ TAG, ((("@@ Re@@ g m@@ as@@ Id@@ : " + (m@@ s@@ g.@@ arg@@ 1@@ )) + " not@@ f@@ Status@@ : ") + (m@@ s@@ g.@@ arg@@ 2@@ ))); if ((m@@ M@@ ns@@ Record@@ ) != null@@ ) { handle@@ Reg@@ is@@ tr@@ ation@@ (m@@ s@@ g.@@ arg@@ 1, ms@@ g.@@ arg@@ 2@@ ); } else { if (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ D@@ ) android.util.Log.d@@ (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ TAG, "@@ M@@ N@@ S S@@ D@@ P in@@ fo not ava@@ il@@ able y@@ et - Can@@ not Connec@@ t.@@ "); } break@@ ; case com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ MS@@ G@@ _M@@ N@@ S@@ _S@@ EN@@ D_@@ EVEN@@ T : send@@ Event@@ Handler@@ ((@@ (@@ byte@@ []@@ ) (m@@ s@@ g.@@ ob@@ j@@ )), ms@@ g.@@ arg@@ 1); break@@ ; case com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ MS@@ G@@ _M@@ N@@ S@@ _S@@ D@@ P@@ _S@@ E@@ AR@@ CH@@ _RE@@ G@@ IS@@ TR@@ A@@ TI@@ O@@ N : not@@ if@@ y@@ M@@ ns@@ S@@ dp@@ Se@@ arch@@ (); m@@ M@@ ns@@ L@@ st@@ Reg@@ R@@ q@@ s@@ t = new com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ M@@ ns@@ S@@ dp@@ Se@@ arch@@ Info@@ (@@ true@@ , ms@@ g.@@ arg@@ 1, ms@@ g.@@ arg@@ 2@@ ); android.os.@@ Message ms@@ g@@ Re@@ g = m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ MS@@ G@@ _M@@ N@@ S@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ _RE@@ G@@ IS@@ TR@@ A@@ TION@@ , ms@@ g.@@ arg@@ 1, ms@@ g.@@ arg@@ 2@@ ); if (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ V@@ ) android.util.Log.@@ v@@ (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ M@@ ns@@ Ob@@ ex@@ C@@ li@@ ent.@@ TAG, ((("@@ Se@@ arch@@ Re@@ g m@@ as@@ Id@@ : " + (m@@ s@@ g.@@ arg@@ 1@@ )) + " not@@ f@@ Status@@ : ") + (m@@ s@@ g.@@ arg@@ 2@@ ))); m@@ Handler.@@ send@@ Message@@ De@@ lay@@ ed@@ (m@@ s@@ g@@ Reg@@ , M@@ N@@ S@@ _S@@ D@@ P@@ _S@@ E@@ AR@@ CH@@ _@@ DE@@ LA@@ Y); break@@ ; default : break@@ ; } }
private void on@@ Vo@@ lum@@ e@@ Changed@@ (@@ int type@@ , int vo@@ lum@@ e@@ , byte@@ [] addres@@ s) { com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Ev@@ ent ev@@ ent = new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Event@@ (@@ Headset@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ V@@ O@@ L@@ U@@ M@@ E_@@ CH@@ AN@@ G@@ ED@@ , get@@ Device@@ (@@ addres@@ s@@ )); send@@ Message@@ To@@ Service@@ (@@ event@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.sched.@@ s@@ ch@@ ed@@ ul@@ er.@@ Pro@@ du@@ ction@@ Se@@ t get@@ Add@@ ed@@ Pro@@ du@@ ction@@ s(@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ config.@@ Con@@ fig config@@ , @javax.annotation.@@ N@@ on@@ null com.android.sched.@@ s@@ ch@@ ed@@ ul@@ er.@@ S@@ ch@@ ed@@ ule@@ r s@@ ch@@ ed@@ ul@@ er@@ ) { com.android.sched.@@ s@@ ch@@ ed@@ ul@@ er.@@ Pro@@ du@@ ction@@ Se@@ t set = s@@ ch@@ ed@@ ul@@ er.@@ create@@ Pro@@ du@@ ction@@ Set@@ (); if (@@ config.@@ get@@ (@@ Code@@ Co@@ ver@@ age.@@ C@@ OD@@ E_@@ C@@ O@@ V@@ ER@@ V@@ A@@ G@@ E@@ )@@ .@@ boolean@@ Value@@ ()) { set@@ .add@@ (com.android.jack.@@ cover@@ age.@@ Code@@ Co@@ ver@@ age@@ Met@@ ad@@ ata@@ File@@ .@@ class@@ ); } return set@@ ; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 1@@ T@@ c@@ p@@ 4@@ U@@ dp@@ En@@ cap@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 1, android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (1@@ 6@@ 0@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, true@@ ); }
@java.lang.Override @com.android.annotations.NonNull public java.lang.String toString@@ () { return com.google.common.@@ b@@ ase.@@ Object@@ s.@@ toString@@ Hel@@ per@@ (@@ this@@ ).@@ add@@ ("@@ name@@ ", m@@ Name@@ ).@@ add@@ ("@@ de@@ bug@@ g@@ able@@ ", m@@ Debug@@ g@@ able@@ ).@@ add@@ ("@@ in@@ str@@ um@@ en@@ ted@@ ", m@@ In@@ str@@ um@@ en@@ ted@@ ).@@ add@@ ("@@ j@@ n@@ i@@ Debug@@ Build@@ ", m@@ J@@ n@@ i@@ Debug@@ Build@@ ).@@ add@@ ("@@ render@@ script@@ Debug@@ Build@@ ", m@@ Render@@ script@@ Debug@@ Build@@ ).@@ add@@ ("@@ render@@ script@@ O@@ pti@@ m@@ Level@@ ", m@@ Render@@ script@@ O@@ pti@@ m@@ Level@@ ).@@ add(@@ "@@ package@@ Name@@ Su@@ f@@ fix@@ ", m@@ Package@@ Name@@ Su@@ f@@ fix@@ ).@@ add@@ ("@@ ver@@ sion@@ Name@@ Su@@ f@@ fix@@ ", m@@ Version@@ Name@@ Su@@ f@@ fix@@ ).@@ add@@ ("@@ run@@ Pro@@ gu@@ ard@@ ", m@@ Run@@ Pro@@ gu@@ ard@@ ).@@ add@@ ("@@ z@@ ip@@ A@@ li@@ gn@@ ", m@@ Zip@@ A@@ li@@ gn@@ ).@@ add@@ ("@@ sign@@ ing@@ Config@@ ", m@@ Sign@@ ing@@ Config@@ ).@@ toString@@ (); }
private void compile@@ And@@ Up@@ load@@ () { final java.lang.@@ Run@@ n@@ able start@@ Up@@ load@@ ing = new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ app@@ lic@@ ation.@@ Application@@ Manager.get@@ Application@@ ().@@ invok@@ e@@ L@@ at@@ er@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { start@@ Up@@ load@@ ing@@ Process@@ (); } }); } }; final com.android.tools.@@ ide@@ a.@@ gradle.@@ invok@@ er.@@ G@@ rad@@ le@@ In@@ vok@@ er invok@@ er = com.android.tools.@@ ide@@ a.@@ gradle.@@ invok@@ er.@@ G@@ rad@@ le@@ In@@ vok@@ er.get@@ Instance@@ (m@@ y@@ Project@@ ); final com.android.tools.@@ ide@@ a.@@ gradle.@@ invok@@ er.@@ G@@ rad@@ le@@ In@@ vok@@ er.@@ A@@ f@@ ter@@ G@@ rad@@ le@@ In@@ vo@@ cation@@ T@@ as@@ k de@@ p@@ lo@@ y@@ A@@ f@@ ter = new com.android.tools.@@ ide@@ a.@@ gradle.@@ invok@@ er.@@ G@@ rad@@ le@@ In@@ vok@@ er.@@ A@@ f@@ ter@@ G@@ rad@@ le@@ In@@ vo@@ cation@@ Task@@ () { @java.lang.Override public void exec@@ ute@@ (@@ @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Not@@ Null com.android.tools.@@ ide@@ a.@@ gradle.@@ invok@@ er.@@ G@@ rad@@ le@@ In@@ vo@@ cation@@ Res@@ ult result@@ ) { if (@@ result.@@ is@@ Build@@ Su@@ ccess@@ f@@ ul@@ ()) { start@@ Up@@ load@@ ing.@@ run@@ (); } invok@@ er.@@ remove@@ A@@ f@@ ter@@ G@@ rad@@ le@@ In@@ vo@@ cation@@ Task@@ (@@ this@@ ); } }; invok@@ er.@@ add@@ A@@ f@@ ter@@ G@@ rad@@ le@@ In@@ vo@@ cation@@ Task@@ (@@ de@@ p@@ lo@@ y@@ A@@ f@@ ter@@ ); invok@@ er.@@ as@@ se@@ m@@ ble@@ (@@ new java.lang.@@ Mod@@ ule@@ []{ my@@ Mod@@ ul@@ e }@@ , G@@ rad@@ le@@ In@@ vok@@ er.@@ Test@@ Comp@@ ile@@ Type.@@ N@@ ON@@ E); }
@org.junit.Test public void test@@ Get@@ Version@@ () { com.android.jack.@@ Ver@@ sion ver@@ sion = com.android.jack.@@ Jack@@ .get@@ Version@@ (); assert@@ NotNull@@ (@@ ver@@ sion@@ ); assert@@ NotNull@@ (@@ ver@@ sion@@ .get@@ Version@@ ()); assert@@ NotNull@@ (@@ ver@@ sion@@ .get@@ Ver@@ bo@@ se@@ Version@@ ()); assert@@ NotNull@@ (@@ ver@@ sion@@ .get@@ Re@@ le@@ ase@@ Name@@ ()); assert@@ True@@ (((@@ ver@@ sion@@ .get@@ Re@@ le@@ ase@@ Code@@ ()) > 0@@ )); assert@@ True@@ (((@@ ver@@ sion@@ .get@@ Sub@@ Re@@ le@@ ase@@ Code@@ ()) > 0@@ )); if (((@@ ver@@ sion@@ .get@@ Build@@ Id@@ ()) == null@@ ) || ((@@ ver@@ sion@@ .get@@ Code@@ Base@@ ()) == null@@ )) { assert@@ True@@ (((@@ ver@@ sion@@ .get@@ Sub@@ Re@@ le@@ ase@@ K@@ ind@@ ()) == (@@ Sub@@ Re@@ le@@ ase@@ K@@ ind@@ .@@ EN@@ G@@ IN@@ E@@ ER@@ ING@@ ))); } }
public void test_@@ for@@ mat@@ D@@ ouble@@ _@@ max@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s() { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ 0.@@ #@@ ", new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ java.util.@@ Loc@@ a@@ le.@@ US@@ )); d@@ f@@ .set@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 3@@ ); assert@@ Equal@@ s(@@ 3@@ , d@@ f@@ .get@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s()); assert@@ Equal@@ s("@@ 1.@@ 2@@ 3@@ 5@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ 1.@@ 2@@ 3@@ 4@@ 5@@ 6@@ )); d@@ f@@ .set@@ Min@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 4@@ ); assert@@ Equal@@ s(@@ 4@@ , d@@ f@@ .get@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s()); assert@@ Equal@@ s("@@ 4@@ 5@@ 6@@ .@@ 0000@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ 4@@ 5@@ 6@@ )); d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ 0.@@ #@@ "); d@@ f@@ .set@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 3@@ 0); assert@@ Equal@@ s("@@ 0@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ 0.@@ 0@@ )); assert@@ Equal@@ s("@@ -@@ 0@@ ", d@@ f@@ .@@ for@@ mat@@ ((@@ -@@ 0.@@ 0@@ ))); assert@@ Equal@@ s("@@ 1@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ 1.@@ 0@@ )); assert@@ Equal@@ s("@@ -1@@ ", d@@ f@@ .@@ for@@ mat@@ ((@@ -@@ 1.@@ 0@@ ))); }
private void f@@ at@@ al@@ (java.lang.String ms@@ g@@ ) { android.util.Log.e@@ (android.net.@@ ns@@ d.@@ N@@ s@@ d@@ Manager.@@ TAG, ms@@ g@@ ); throw new java.lang.Runtime@@ Exception@@ (m@@ s@@ g@@ ); }
@java.lang.Override public int has@@ h@@ Code@@ () { int result = ((@@ ss@@ id@@ ) == null@@ ) ? 0 : ss@@ id.@@ has@@ h@@ Code@@ (); result ^@@ = ((@@ (@@ int@@ ) (f@@ lag@@ s@@ )) * 3@@ 1@@ ) + ((@@ (@@ int@@ ) (@@ au@@ th@@ _@@ b@@ it@@ _@@ field@@ )) >@@ > 8@@ ); return result@@ ; }
java.util.List<@@ org.eclipse.@@ core.@@ resources.@@ I@@ File@@ > is@@ Dependenc@@ y@@ (@@ org.eclipse.@@ core.@@ resources.@@ I@@ File file@@ ) { java.util.ArrayList<@@ org.eclipse.@@ core.@@ resources.@@ I@@ File@@ > file@@ s = new java.util.ArrayList<@@ org.eclipse.@@ core.@@ resources.@@ I@@ File@@ >(); for (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ build@@ .@@ Non@@ Java@@ File@@ Bund@@ le b@@ und@@ le : m@@ Fil@@ es.@@ valu@@ es@@ ()) { if (b@@ und@@ le.@@ de@@ pend@@ s@@ On@@ (file@@ )) { fil@@ es.@@ add@@ (b@@ und@@ le@@ .get@@ Source@@ File@@ ()); } } return fil@@ es@@ ; }
public static void com@@ pu@@ te@@ Ma@@ x@@ (android.@@ renderscript.@@ cts.@@ Test@@ Ma@@ x.@@ Argument@@ s@@ FloatFloat@@ F@@ lo@@ at arg@@ s) { args.@@ ul@@ f = 0; args.@@ ul@@ f@@ Relax@@ ed = 0; args.@@ out = (@@ (@@ float@@ ) (@@ java.lang.Str@@ i@@ ct@@ M@@ ath@@ .m@@ a@@ x@@ (@@ args.@@ in@@ , args.@@ in@@ 1@@ ))); }
public java.util.Map@@ <java.lang.String, java.lang.@@ Long@@ > d@@ ig@@ est@@ Fil@@ es(@@ java.io.File d@@ ir@@ , java.util.List<@@ java.lang.String> ign@@ or@@ ed@@ Fil@@ es@@ , com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Up@@ dat@@ er@@ U@@ I ui@@ ) throw@@ s com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Oper@@ ation@@ Can@@ ce@@ lle@@ d@@ Exception, java.io.IOException { java.util.Map@@ <java.lang.String, java.lang.@@ Long@@ > result = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <java.lang.String, java.lang.@@ Long@@ >(); java.util.@@ Link@@ ed@@ Hash@@ Set@@ <java.lang.String@@ > path@@ s = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Utils.@@ colle@@ ct@@ Re@@ l@@ ative@@ Path@@ s(@@ d@@ ir@@ , com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Utils.@@ path@@ s) { if (@@ ign@@ or@@ ed@@ Fil@@ es.@@ contain@@ s(@@ e@@ ach@@ )) continue@@ ; ui.@@ set@@ Statu@@ s(@@ e@@ ach@@ ); ui.@@ check@@ Can@@ ce@@ lle@@ d@@ (); result.@@ put@@ (e@@ ach@@ , d@@ ig@@ est@@ File@@ (@@ new java.io.File@@ (d@@ ir@@ , e@@ ach@@ ))); } return result@@ ; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ M@@ d@@ 5@@ T@@ c@@ p@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _M@@ D@@ 5, get@@ Key@@ (1@@ 2@@ 8@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
@java.lang.Override public java.lang.String app@@ ly@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ cod@@ ec@@ .@@ String@@ Co@@ dec@@ <@@ ? extends T@@ > cod@@ ec@@ ) { return cod@@ ec@@ .get@@ Vari@@ able@@ Name@@ (); }
@java.lang.Override public java.util.List<@@ android.@@ bluetooth.Bluetooth@@ Device@@ > get@@ Connec@@ ted@@ De@@ vices@@ () { if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ DE@@ BU@@ G) { android.util.Log.d@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ get@@ Connec@@ ted@@ De@@ vices@@ "); } com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Ser@@ vice ser@@ vice = get@@ Service@@ (); if (@@ ser@@ vice == null@@ ) { return new java.util.ArrayList<@@ >@@ (@@ 0); } return service@@ .get@@ Connec@@ ted@@ De@@ vices@@ (); }
private void check@@ Un@@ connec@@ ted@@ U@@ dp@@ (android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m tr@@ an@@ s@@ for@@ m@@ , java.net.Inet@@ Address local@@ ) throw@@ s java.lang.Exception { java.io.FileDescriptor ud@@ p@@ S@@ ock@@ et = android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ B@@ ound@@ U@@ dp@@ Socket@@ (@@ local@@ ); int local@@ P@@ or@@ t = android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Port@@ (@@ ud@@ p@@ Socket@@ ); m@@ IS@@ M@@ .@@ app@@ ly@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (@@ ud@@ p@@ Socket@@ , tr@@ an@@ s@@ for@@ m@@ ); byte@@ [] in = new byte@@ [@@ android.net.cts.@@ IpSec@@ ManagerTest.@@ TEST_@@ DA@@ TA@@ .@@ length@@ ]; android.system.@@ O@@ s.@@ send@@ to@@ (@@ ud@@ p@@ Socket@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ TEST_@@ DA@@ TA@@ , 0, android.net.cts.@@ IpSec@@ ManagerTest.@@ TEST_@@ DA@@ TA@@ .@@ length@@ , 0, local@@ , local@@ Port@@ ); android.system.@@ O@@ s.@@ read@@ (@@ ud@@ p@@ Socket@@ , in@@ , 0, in@@ .@@ length); assert@@ Array@@ Equal@@ s("@@ En@@ cap@@ s@@ ul@@ ate@@ d dat@@ a d@@ id not match@@ .@@ ", android.net.cts.@@ IpSec@@ ManagerTest.@@ TEST_@@ DA@@ TA@@ , in@@ ); m@@ IS@@ M@@ .@@ remove@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (@@ ud@@ p@@ Socket@@ , tr@@ an@@ s@@ for@@ m@@ ); android.system.@@ O@@ s.@@ close@@ (@@ ud@@ p@@ Socket@@ ); }
@java.lang.Override public int run@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.@@ P@@ r@@ int@@ Stream out, @javax.annotation.@@ N@@ on@@ null java.io.@@ P@@ r@@ int@@ Stream er@@ r@@ , @javax.annotation.@@ N@@ on@@ null java.io.File p@@ w@@ d, @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ config.@@ c@@ li@@ .@@ To@@ k@@ en@@ I@@ ter@@ at@@ or arg@@ s) { java.util.List<@@ java.lang.String> command@@ Line@@ Arg@@ s; try { command@@ Line@@ Arg@@ s = build@@ Arg@@ s(@@ arg@@ s); } catch (java.lang.Exception e) { return Server@@ Ex@@ it@@ Statu@@ s.@@ FA@@ IL@@ UR@@ E_@@ US@@ A@@ G@@ E@@ ; } com.android.jack.@@ util.@@ Ex@@ ec@@ ute@@ File ex@@ e@@ c = new com.android.jack.@@ util.@@ Ex@@ ec@@ ute@@ File@@ (@@ command@@ Line@@ Arg@@ s.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ command@@ Line@@ Arg@@ s.@@ size@@ ()@@ ]@@ )); exec@@ .set@@ Er@@ r@@ (@@ er@@ r@@ ); exec@@ .set@@ Out@@ (@@ out); try { exec@@ .set@@ W@@ or@@ k@@ ing@@ Dir@@ (p@@ w@@ d, false@@ ); } catch (java.io.IOException e) { return Server@@ Ex@@ it@@ Statu@@ s.@@ FA@@ IL@@ UR@@ E_@@ US@@ A@@ G@@ E@@ ; } try { return exec@@ .@@ run@@ (); } catch (java.lang.Exception e) { com.android.jack.@@ server.@@ Server@@ Task@@ S@@ p@@ a@@ wn@@ ing@@ V@@ M@@ .@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ SE@@ V@@ ER@@ E, ("@@ Faile@@ d to r@@ u@@ n com@@ man@@ d " + command@@ Line@@ Arg@@ s@@ ), e); return Server@@ Ex@@ it@@ Statu@@ s.@@ FA@@ IL@@ UR@@ E_@@ UN@@ K@@ NO@@ W@@ N@@ ; } }
public static void con@@ fi@@ r@@ m@@ De@@ lete@@ Thread@@ Di@@ alo@@ g@@ (com.android.@@ cel@@ l@@ b@@ road@@ cas@@ tr@@ e@@ cei@@ ver.@@ C@@ ell@@ Broadcast@@ List@@ Ac@@ tivity.@@ De@@ lete@@ Thread@@ Listen@@ er list@@ ener@@ , boolean de@@ lete@@ All@@ , android.content.@@ Context contex@@ t@@ ) { android.@@ view@@ .@@ Vi@@ e@@ w cont@@ ent@@ s = android.@@ view@@ .@@ View@@ .@@ in@@ f@@ l@@ ate@@ (@@ contex@@ t, R.@@ layout.@@ de@@ lete@@ _@@ b@@ roadcast@@ _@@ di@@ alo@@ g@@ _@@ view@@ , null@@ ); android.@@ widget@@ .@@ Text@@ Vi@@ e@@ w ms@@ g = ((@@ android.@@ widget@@ .@@ Text@@ View@@ ) (@@ cont@@ ent@@ s.@@ find@@ View@@ By@@ Id@@ (@@ R.@@ id@@ .m@@ ess@@ age@@ ))); ms@@ g.@@ set@@ Text@@ ((@@ de@@ lete@@ Al@@ l ? R.@@ str@@ ing.@@ con@@ fi@@ r@@ m@@ _@@ de@@ lete@@ _@@ all@@ _@@ b@@ roadcast@@ s : R.@@ str@@ ing.@@ con@@ fi@@ r@@ m@@ _@@ de@@ lete@@ _@@ b@@ roadcast@@ )); android.app.@@ Al@@ er@@ t@@ Di@@ alo@@ g.@@ Builder bu@@ ilder = new android.app.@@ Al@@ er@@ t@@ Di@@ alo@@ g.@@ Builder@@ (@@ contex@@ t@@ ); builder.@@ set@@ T@@ it@@ le@@ (@@ R.@@ str@@ ing.@@ con@@ fi@@ r@@ m@@ _@@ di@@ alo@@ g@@ _@@ ti@@ t@@ le@@ ).set@@ I@@ con@@ Attribute@@ (android.@@ R.@@ at@@ tr@@ .@@ al@@ er@@ t@@ Di@@ alo@@ g@@ I@@ con@@ ).set@@ Can@@ cel@@ able@@ (@@ true@@ ).set@@ Posi@@ tive@@ B@@ utton@@ (@@ R.@@ str@@ ing.@@ b@@ utton@@ _@@ de@@ lete@@ , list@@ ener@@ ).set@@ Ne@@ g@@ ative@@ B@@ utton@@ (@@ R.@@ str@@ ing.@@ b@@ utton@@ _@@ can@@ cel@@ , null@@ ).set@@ View@@ (@@ cont@@ ent@@ s@@ ).@@ sho@@ w@@ (); }
public void test@@ Thread@@ Start@@ () { log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ test@@ Thread@@ St@@ ar@@ t st@@ ar@@ ted@@ "); synchroniz@@ er.@@ re@@ cei@@ ve@@ Message@@ (@@ J@@ P@@ DA@@ Debug@@ ge@@ e@@ S@@ ynchroniz@@ er.@@ S@@ G@@ N@@ L@@ _RE@@ AD@@ Y); org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Event@@ Builder bu@@ ilder = create@@ Thread@@ Start@@ Builder@@ (); test@@ Event@@ With@@ Thread@@ On@@ ly@@ Mo@@ d@@ if@@ ier@@ (@@ build@@ er, org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Count@@ Mo@@ d@@ if@@ ier@@ Test.@@ EX@@ P@@ _C@@ ON@@ T@@ IN@@ U@@ E); log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ test@@ Thread@@ St@@ ar@@ t do@@ ne@@ "); }
public void test_@@ SSL@@ Socket@@ _C@@ lient@@ Hel@@ lo@@ _S@@ N@@ I@@ () throw@@ s java.lang.Exception { tests.@@ util.@@ For@@ Each@@ Run@@ Run@@ n@@ able@@ <@@ javax.net.ssl.@@ SSL@@ Socket@@ Fa@@ ctory@@ >@@ () { @java.lang.Override public void run@@ (@@ javax.net.ssl.@@ SSL@@ Socket@@ Fa@@ ctor@@ y ss@@ l@@ Socket@@ Fa@@ ctory@@ ) throw@@ s java.lang.Exception { libcore.@@ t@@ l@@ sw@@ ire@@ .@@ hand@@ sh@@ ak@@ e.@@ Client@@ Hel@@ l@@ o c@@ lient@@ Hel@@ l@@ o = cap@@ t@@ ure@@ T@@ l@@ s@@ Hand@@ sh@@ ake@@ Client@@ Hel@@ lo@@ (s@@ s@@ l@@ Socket@@ Fa@@ ctory@@ ); libcore.@@ t@@ l@@ sw@@ ire@@ .@@ hand@@ sh@@ ak@@ e.@@ Server@@ Name@@ Hel@@ lo@@ Ex@@ t@@ en@@ sion s@@ n@@ i@@ Ex@@ t@@ en@@ sion = ((@@ libcore.@@ t@@ l@@ sw@@ ire@@ .@@ hand@@ sh@@ ak@@ e.@@ Server@@ Name@@ Hel@@ lo@@ Ex@@ t@@ ension@@ ) (c@@ lient@@ Hel@@ lo@@ .@@ find@@ Ex@@ t@@ ension@@ By@@ Type@@ (@@ Hel@@ lo@@ Ex@@ t@@ ension@@ .@@ TYPE_@@ S@@ ER@@ V@@ ER@@ _N@@ AME@@ ))); assert@@ NotNull@@ (s@@ n@@ i@@ Ex@@ t@@ ension@@ ); assert@@ Equal@@ s(@@ java.util.Arrays.@@ as@@ List@@ ("@@ local@@ ho@@ st.@@ loc@@ al@@ do@@ main@@ "), s@@ n@@ i@@ Ex@@ t@@ ension@@ .@@ ho@@ st@@ nam@@ es@@ ); } }@@ .@@ run@@ All@@ Nam@@ ed@@ (get@@ SSL@@ Socket@@ Fa@@ ctor@@ ies@@ To@@ Test@@ ()); }
public static android.@@ g@@ raphic@@ s.@@ Bit@@ ma@@ p parse@@ To@@ B@@ n@@ W@@ (@@ byte@@ [] data@@ , int length) { int value@@ In@@ dex = 0; int wid@@ th = (d@@ ata@@ [@@ (@@ value@@ Index@@ ++@@ )@@ ]@@ ) & 25@@ 5@@ ; int he@@ ig@@ h@@ t = (d@@ ata@@ [@@ (@@ value@@ Index@@ ++@@ )@@ ]@@ ) & 25@@ 5@@ ; int num@@ Of@@ P@@ i@@ x@@ el@@ s = wid@@ th * he@@ ig@@ ht@@ ; int@@ [] pi@@ x@@ el@@ s = new int@@ [@@ num@@ Of@@ P@@ i@@ x@@ el@@ s@@ ]; int pi@@ x@@ el@@ In@@ dex = 0; int b@@ it@@ In@@ dex = 7@@ ; byte current@@ By@@ t@@ e = 0; while (p@@ i@@ x@@ el@@ In@@ dex < num@@ Of@@ P@@ i@@ x@@ el@@ s) { if ((@@ pi@@ x@@ el@@ In@@ dex % 8@@ ) == 0) { current@@ By@@ t@@ e = data@@ [@@ (@@ value@@ Index@@ ++@@ )@@ ]; b@@ it@@ In@@ dex = 7@@ ; } pi@@ x@@ el@@ s@@ [@@ (p@@ i@@ x@@ el@@ Index@@ ++@@ )@@ ] = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Utils.@@ b@@ it@@ To@@ R@@ G@@ B@@ ((@@ (c@@ urrent@@ By@@ t@@ e >@@ > (b@@ it@@ Index@@ --@@ )) & 1@@ )); } if (p@@ i@@ x@@ el@@ In@@ dex != num@@ Of@@ P@@ i@@ x@@ el@@ s) { android.util.Log.e@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Utils.@@ LOG@@ _@@ TAG, "@@ par@@ se en@@ d an@@ d siz@@ e error@@ "); } return android.@@ g@@ raphic@@ s.@@ Bit@@ m@@ ap.@@ create@@ Bit@@ m@@ ap@@ (p@@ i@@ x@@ el@@ s, wid@@ th@@ , he@@ ig@@ h@@ t, Bit@@ m@@ ap.@@ Config.@@ AR@@ G@@ B@@ _@@ 8@@ 8@@ ); }
public void set@@ s@@ ock@@ op@@ t@@ Gro@@ up@@ Source@@ Re@@ q@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ , android.system.@@ Str@@ u@@ ct@@ Gro@@ up@@ Source@@ Re@@ q valu@@ e) throw@@ s android.system.@@ ErrnoException { os.@@ set@@ s@@ ock@@ op@@ t@@ Gro@@ up@@ Source@@ Re@@ q@@ (f@@ d, le@@ vel@@ , option@@ , valu@@ e); }
public byte@@ [] g@@ ener@@ ate@@ Ver@@ ity@@ T@@ re@@ e@@ Root@@ Hash@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce c@@ en@@ tr@@ al@@ Dir@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce e@@ o@@ c@@ d@@ ) throw@@ s java.io.IOException { if (((@@ b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ .@@ size@@ ()) % (com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Ver@@ ity@@ T@@ re@@ e@@ Build@@ er.@@ CH@@ UN@@ K@@ _S@@ I@@ Z@@ E@@ )) != 0) { throw new java.lang.Illegal@@ State@@ Exception("@@ AP@@ K Sign@@ ing B@@ loc@@ k is not p@@ age al@@ ig@@ ne@@ d@@ "); } com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce mo@@ d@@ if@@ i@@ ed@@ E@@ o@@ c@@ d = com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ces.@@ as@@ Data@@ Source@@ (com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ E@@ o@@ c@@ d@@ Record@@ .@@ create@@ With@@ C@@ en@@ tr@@ al@@ Directory@@ Field@@ H@@ id@@ d@@ en@@ (e@@ o@@ c@@ d@@ .get@@ Byte@@ Buffer@@ (@@ 0, (@@ (@@ int@@ ) (e@@ o@@ c@@ d.@@ size@@ ()@@ )@@ )))); return g@@ ener@@ ate@@ Ver@@ ity@@ T@@ re@@ e@@ Root@@ Hash@@ (@@ new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Ch@@ ain@@ ed@@ Data@@ Source@@ (b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ , c@@ en@@ tr@@ al@@ Dir@@ , mo@@ d@@ if@@ i@@ ed@@ E@@ o@@ c@@ d@@ )); }
public native java.net.@@ Socket@@ Address get@@ s@@ ock@@ name@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void remove@@ For@@ w@@ ard@@ (@@ int local@@ Port@@ , java.lang.String remo@@ te@@ Socket@@ Name, com.android.ddmlib.@@ Device@@ Un@@ i@@ x@@ Socket@@ Nam@@ es@@ p@@ ac@@ e nam@@ es@@ p@@ a@@ ce@@ ) throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { com.android.ddmlib.@@ Adb@@ Helper.@@ remove@@ For@@ w@@ ard@@ (com.android.@@ ddmlib.@@ Android@@ Debug@@ B@@ rid@@ g@@ e.get@@ Socket@@ Address@@ (), this@@ , java.lang.String@@ .@@ for@@ mat@@ ("@@ t@@ c@@ p@@ :@@ %@@ d@@ ", local@@ Port@@ ), java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ s@@ :@@ %@@ s", nam@@ es@@ p@@ a@@ ce@@ .get@@ Type@@ (), remo@@ te@@ Socket@@ Name@@ )); }
public void assert@@ Un@@ re@@ le@@ as@@ ed@@ Resource@@ Count@@ (@@ java.lang.Object o@@ wn@@ er, int expected@@ Count@@ ) { if (@@ le@@ ak@@ age@@ D@@ et@@ ec@@ tion@@ Dis@@ able@@ d@@ For@@ Test@@ ) { throw new java.lang.Illegal@@ State@@ Exception(("@@ Do@@ es not wor@@ k wh@@ e@@ n le@@ ak@@ age d@@ et@@ ec@@ tion h@@ a@@ s be@@ e@@ n dis@@ able@@ d@@ ; remo@@ v@@ e th@@ e " + "@@ @@@ Dis@@ able@@ Resource@@ Le@@ ak@@ age@@ D@@ et@@ ec@@ tion f@@ ro@@ m th@@ e t@@ est method@@ ")); } libcore.@@ junit.@@ util.@@ Resource@@ Le@@ ak@@ age@@ D@@ et@@ ec@@ tor.@@ F@@ IN@@ AL@@ I@@ Z@@ ER@@ _C@@ H@@ EC@@ K@@ ER@@ .@@ ac@@ ce@@ p@@ t@@ (o@@ wn@@ er, expected@@ Count@@ ); }
public static void exec@@ Application@@ (java.lang.String invok@@ e@@ With@@ , java.lang.String n@@ i@@ ce@@ Name, int target@@ Sdk@@ Version@@ , java.io.FileDescriptor p@@ ip@@ e@@ F@@ d, java.lang.String[] arg@@ s) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ W@@ rap@@ per@@ In@@ it.@@ send@@ P@@ id@@ To@@ Par@@ ent@@ (p@@ ip@@ e@@ F@@ d@@ ); java.lang.String@@ Builder com@@ man@@ d = new java.lang.String@@ Builder@@ (in@@ vok@@ e@@ With@@ ); command@@ .@@ append(@@ " /@@ s@@ ystem@@ /@@ b@@ in@@ /@@ app@@ _@@ pro@@ ces@@ s /@@ s@@ ystem@@ /@@ b@@ in --@@ app@@ li@@ cation@@ "); if (@@ n@@ i@@ ce@@ Name != null@@ ) { command@@ .@@ append(@@ " '@@ --@@ n@@ i@@ ce@@ -@@ name@@ =@@ ").@@ append(@@ n@@ i@@ ce@@ Name@@ ).@@ append("@@ '@@ "); } command@@ .@@ append(@@ " com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ W@@ rap@@ per@@ In@@ i@@ t "); command@@ .@@ append(@@ target@@ Sdk@@ Version@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ .@@ append@@ Q@@ u@@ o@@ ted@@ Sh@@ ell@@ Arg@@ s(@@ command@@ , arg@@ s); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ .@@ exec@@ Sh@@ ell@@ (@@ command@@ .@@ toString@@ ()); }
@@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ annotations.@@ Visi@@ ble@@ For@@ Test@@ ing public static java.lang.String get@@ String@@ For@@ C@@ arrier@@ Id@@ T@@ able@@ Cre@@ ation@@ (java.lang.String t@@ able@@ Name@@ ) { return ((((@@ ((((@@ ((((@@ ((((@@ ((@@ (("@@ C@@ RE@@ AT@@ E TA@@ BL@@ E " + t@@ able@@ Name@@ ) + "@@ (@@ _@@ id IN@@ TE@@ G@@ E@@ R P@@ R@@ I@@ M@@ AR@@ Y KE@@ Y@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ M@@ C@@ C@@ M@@ N@@ C@@ )) + " TE@@ X@@ T NO@@ T N@@ UL@@ L@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ G@@ ID@@ 1@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ G@@ ID@@ 2@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ P@@ L@@ M@@ N@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ I@@ M@@ SI@@ _P@@ RE@@ FI@@ X_@@ X@@ P@@ AT@@ TER@@ N@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ S@@ P@@ N@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ AP@@ N@@ )) + " TE@@ X@@ T@@ ,@@ ") + (@@ C@@ arrier@@ Id@@ .@@ Al@@ l.@@ IC@@ C@@ ID@@ _P@@ RE@@ FI@@ X@@ )) + " TE@@ X@@ T@@ ,@@ ") + (android.@@ provider.@@ Telephon@@ y.@@ C@@ arrier@@ Id@@ .@@ C@@ AR@@ R@@ I@@ ER@@ _N@@ AME@@ )) + " TE@@ X@@ T@@ ,@@ ") + (android.@@ provider.@@ Telephon@@ y.@@ C@@ arrier@@ Id@@ .@@ C@@ AR@@ R@@ I@@ ER_@@ ID@@ )) + " IN@@ TE@@ G@@ E@@ R DE@@ FA@@ UL@@ T -1@@ ,@@ ") + "@@ UN@@ I@@ Q@@ U@@ E ("@@ ) + (android.@@ text.@@ Text@@ Utils.@@ j@@ o@@ in@@ ("@@ , ", com.android.@@ provid@@ er@@ s.@@ telephony.@@ C@@ arrier@@ Id@@ Provid@@ er.@@ C@@ AR@@ R@@ I@@ E@@ RS@@ _@@ ID@@ _@@ UN@@ I@@ Q@@ U@@ E_@@ FI@@ E@@ L@@ D@@ S@@ ))) + "@@ )@@ ;@@ "; }
private com.android.@@ rs.@@ test.@@ Float@@ 2 pack@@ _@@ f@@ 2@@ (@@ float@@ [] val@@ ) { assert (@@ va@@ l.@@ length) == 2@@ ; return new com.android.@@ rs.@@ test.@@ Float2@@ (@@ val@@ [0@@ ]@@ , val@@ [@@ 1@@ ]@@ ); }
@java.lang.Override public void update@@ P@@ u@@ bli@@ sh@@ (@@ int c@@ lient@@ Id, int session@@ Id, android.net.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ P@@ u@@ bli@@ sh@@ Con@@ fig publi@@ sh@@ Config@@ ) { e@@ n@@ for@@ ce@@ Access@@ Permission@@ (); e@@ n@@ for@@ ce@@ Change@@ Permission@@ (); if (@@ publi@@ sh@@ Con@@ fig == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ P@@ u@@ bli@@ sh@@ Con@@ fig m@@ us@@ t not b@@ e null@@ "); } publi@@ sh@@ Config@@ .@@ assert@@ Valid@@ (m@@ State@@ Manager.get@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s()); if ((@@ publi@@ sh@@ Config.@@ m@@ P@@ u@@ bli@@ sh@@ Count@@ ) != 0) { e@@ n@@ for@@ ce@@ Connectivity@@ Inter@@ nal@@ Permission@@ (); } int u@@ id = get@@ Mock@@ able@@ Call@@ ing@@ U@@ id@@ (); e@@ n@@ for@@ ce@@ Client@@ Valid@@ ity@@ (@@ uid@@ , c@@ lient@@ Id); if (com.android.server.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Service@@ Imp@@ l.@@ V@@ DBG) { android.util.Log.@@ v@@ (com.android.server.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Service@@ Imp@@ l.@@ TAG, ((((@@ ((("@@ update@@ P@@ u@@ bli@@ sh@@ : uid@@ =@@ " + uid@@ ) + ", c@@ lient@@ Id@@ =@@ ") + c@@ lient@@ Id) + ", session@@ Id@@ =@@ ") + session@@ Id) + ", config@@ =@@ ") + publi@@ sh@@ Config@@ )); } m@@ State@@ Manager.@@ update@@ P@@ u@@ bli@@ sh@@ (c@@ lient@@ Id, session@@ Id, publi@@ sh@@ Config@@ ); }
public android.net.Network@@ Stat@@ s read@@ Network@@ Stat@@ s@@ S@@ um@@ m@@ ary@@ De@@ v@@ () throw@@ s java.io.IOException { if (m@@ U@@ se@@ B@@ p@@ f@@ Stat@@ s) return read@@ Network@@ Stat@@ s@@ Iface@@ De@@ v@@ (); final android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ Thread@@ Polic@@ y s@@ av@@ ed@@ Polic@@ y = android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ al@@ low@@ Thread@@ Dis@@ k@@ Read@@ s(); final android.net.Network@@ Stat@@ s stat@@ s = new android.net.Network@@ Stat@@ s(@@ android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ (), 6@@ ); final android.net.Network@@ Stat@@ s.@@ E@@ n@@ try e@@ n@@ try = new android.net.Network@@ Stat@@ s.@@ E@@ n@@ try@@ (); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pro@@ c@@ File@@ Read@@ er read@@ er = null@@ ; try { read@@ er = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pro@@ c@@ File@@ Read@@ er@@ (@@ new java.io.File@@ InputStream@@ (m@@ Stat@@ s@@ X@@ t@@ Iface@@ All@@ )); while (@@ read@@ er.@@ has@@ M@@ ore@@ Data@@ ()) { e@@ n@@ try@@ .@@ if@@ ac@@ e = read@@ er.@@ next@@ String@@ (); e@@ n@@ try@@ .@@ u@@ id = android.net.Network@@ Stat@@ s.@@ U@@ ID@@ _@@ AL@@ L@@ ; e@@ n@@ try@@ .@@ set = android.net.Network@@ Stat@@ s.@@ SE@@ T_@@ AL@@ L@@ ; e@@ n@@ try@@ .@@ t@@ a@@ g = android.net.Network@@ Stat@@ s.@@ TAG@@ _N@@ ON@@ E@@ ; final boolean ac@@ ti@@ v@@ e = (@@ read@@ er.@@ next@@ Int@@ ()) != 0; e@@ n@@ try@@ .@@ r@@ x@@ Byte@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ r@@ x@@ Packet@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Byte@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Packet@@ s = read@@ er.@@ next@@ Long@@ (); if (@@ ac@@ tive@@ ) { e@@ n@@ try@@ .@@ r@@ x@@ Byte@@ s +@@ = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ r@@ x@@ Packet@@ s +@@ = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Byte@@ s +@@ = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Packet@@ s +@@ = read@@ er.@@ next@@ Long@@ (); } stat@@ s.add@@ Valu@@ es@@ (e@@ n@@ try@@ ); read@@ er.@@ fin@@ is@@ h@@ Line@@ (); } } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception | java.lang.@@ Number@@ Format@@ Exception e) { throw new java.net.@@ Pro@@ to@@ col@@ Exception("@@ pro@@ ble@@ m par@@ s@@ ing stat@@ s", e); } final@@ l@@ y { libcore.io.@@ I@@ o@@ Utils.@@ close@@ Q@@ ui@@ et@@ ly@@ (@@ read@@ er@@ ); android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ set@@ Thread@@ Polic@@ y@@ (s@@ av@@ ed@@ Polic@@ y@@ ); } return stat@@ s; }
@org.junit.Test public void test@@ Broadcast@@ W@@ ps@@ Event@@ Su@@ ccess@@ () { m@@ W@@ if@@ i@@ Monitor@@ .@@ register@@ Handler@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Monitor@@ Test.@@ W@@ L@@ AN@@ _@@ I@@ F@@ AC@@ E_@@ N@@ AME@@ , W@@ if@@ i@@ Monitor@@ .@@ W@@ P@@ S@@ _S@@ U@@ C@@ CE@@ SS@@ _@@ EVEN@@ T, m@@ Handler@@ S@@ py@@ ); m@@ W@@ if@@ i@@ Monitor@@ .@@ b@@ roadcast@@ W@@ ps@@ Su@@ ccess@@ Event@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Monitor@@ Test.@@ W@@ L@@ AN@@ _@@ I@@ F@@ AC@@ E_@@ N@@ AM@@ E); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ <@@ android.os.@@ Message@@ > message@@ Cap@@ tor = org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ .@@ for@@ Clas@@ s(@@ android.os.@@ Message@@ .@@ class@@ ); ve@@ r@@ if@@ y@@ (m@@ Handler@@ S@@ py@@ ).@@ handle@@ Message@@ (m@@ ess@@ age@@ Cap@@ tor.@@ cap@@ t@@ ure@@ ()); assert@@ Equal@@ s(@@ W@@ if@@ i@@ Monitor@@ .@@ W@@ P@@ S@@ _S@@ U@@ C@@ CE@@ SS@@ _@@ EVEN@@ T, message@@ Cap@@ tor@@ .get@@ Value@@ ().@@ wh@@ at@@ ); }
public static long $@@ no@@ in@@ line@@ $@@ U@@ Sh@@ r@@ 6@@ 0@@ And@@ 7@@ (@@ long arg@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ ar@@ g >@@ >@@ > 6@@ 0) & 7@@ ; }
private void in@@ iti@@ ate@@ Device@@ O@@ wn@@ er@@ Pro@@ vision@@ ing@@ (android.content.@@ Int@@ ent int@@ ent@@ ) { if (!(m@@ Param@@ s.@@ st@@ ar@@ ted@@ By@@ Tr@@ us@@ ted@@ Source@@ )) { m@@ U@@ i.@@ in@@ iti@@ ate@@ U@@ i@@ (@@ R.@@ str@@ ing.@@ set@@ up@@ _@@ work@@ _@@ device@@ , R.@@ str@@ ing.@@ set@@ up@@ _@@ device@@ _@@ start@@ _@@ set@@ up@@ , R.@@ str@@ ing.@@ comp@@ any@@ _@@ cont@@ ro@@ l@@ s@@ _@@ device@@ , R.@@ str@@ ing.@@ th@@ e@@ _@@ fo@@ l@@ low@@ ing@@ _@@ is@@ _@@ y@@ our@@ _@@ m@@ dm@@ _@@ for@@ _@@ device@@ , m@@ Param@@ s); } if (is@@ En@@ c@@ r@@ y@@ ption@@ Requ@@ ire@@ d@@ ()) { m@@ ay@@ be@@ T@@ ri@@ g@@ g@@ er@@ En@@ c@@ r@@ y@@ ption@@ (); return@@ ; } if (m@@ Key@@ gu@@ ard@@ Manager.@@ in@@ Key@@ gu@@ ard@@ Res@@ tr@@ ic@@ ted@@ Input@@ Mode@@ ()) { com.android.@@ man@@ ag@@ ed@@ pro@@ vision@@ ing.@@ Pro@@ vision@@ Logg@@ er.@@ log@@ i@@ ("@@ Can@@ not p@@ ic@@ k w@@ if@@ i b@@ ec@@ au@@ se th@@ e s@@ cre@@ e@@ n is lock@@ ed.@@ "); } else if ((((@@ !@@ (m@@ Utils.@@ is@@ Connec@@ ted@@ To@@ Network@@ (m@@ Context@@ ))) && ((m@@ Param@@ s.@@ w@@ if@@ i@@ Info@@ ) == null@@ )) && ((m@@ Param@@ s.@@ device@@ Ad@@ min@@ Down@@ load@@ Info@@ ) != null@@ )) && (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (m@@ Param@@ s.@@ device@@ Ad@@ min@@ Down@@ load@@ Info.@@ loc@@ ation@@ )@@ ))) { if (@@ can@@ Request@@ W@@ if@@ i@@ P@@ i@@ ck@@ ()) { m@@ U@@ i.@@ request@@ W@@ if@@ i@@ P@@ i@@ ck@@ (); return@@ ; } else { com.android.@@ man@@ ag@@ ed@@ pro@@ vision@@ ing.@@ Pro@@ vision@@ Logg@@ er.@@ log@@ i@@ ("@@ Can@@ not p@@ ic@@ k w@@ if@@ i b@@ ec@@ au@@ se th@@ er@@ e is n@@ o handle@@ r to th@@ e int@@ ent@@ "); } } ask@@ For@@ Con@@ s@@ ent@@ Or@@ Start@@ Device@@ O@@ wn@@ er@@ Pro@@ vision@@ ing@@ (); }
private java.io.File get@@ Too@@ lch@@ ain@@ Path@@ (@@ @com.android.annotations.NonNull com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ core.@@ Too@@ lch@@ a@@ in get@@ Too@@ lch@@ ain@@ Path@@ (@@ toolch@@ ain@@ Name, toolch@@ ain@@ Version@@ , ab@@ i@@ );
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { if (m@@ Action@@ .@@ equals(@@ android.telephony.@@ cts.@@ Sms@@ ManagerTest.@@ DA@@ TA@@ _S@@ MS@@ _RE@@ CE@@ I@@ V@@ ED@@ _@@ AC@@ TION@@ )) { java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); android.os.@@ Bund@@ le b@@ und@@ le = int@@ ent.get@@ Ex@@ tr@@ as@@ (); if (b@@ und@@ le != null@@ ) { java.lang.Ob@@ ject@@ [] ob@@ j = ((@@ java.lang.Ob@@ ject@@ []@@ ) (b@@ und@@ le@@ .get@@ ("@@ p@@ d@@ us@@ "@@ ))); android.telephony.@@ Sms@@ Message@@ [] mess@@ age = new android.telephony.@@ Sms@@ Message@@ [@@ ob@@ j.@@ length@@ ]; for (@@ int i = 0; i < (@@ ob@@ j.@@ length); i++) { message@@ [i@@ ] = android.telephony.@@ Sms@@ Mess@@ age.@@ create@@ From@@ P@@ du@@ ((@@ (@@ byte@@ []@@ ) (@@ ob@@ j@@ [i]@@ ))); } for (android.@@ telephony.@@ Sms@@ Message current@@ Message : message@@ ) { sb.@@ append@@ (c@@ urrent@@ Mess@@ ag@@ e.get@@ Display@@ Message@@ B@@ o@@ d@@ y@@ ()); } } this@@ .m@@ Recei@@ v@@ ed@@ Data@@ S@@ m@@ s = true@@ ; this@@ .m@@ Recei@@ v@@ ed@@ T@@ ex@@ t = sb.@@ toString@@ (); } if (@@ int@@ ent.get@@ Action@@ ().@@ equal@@ s@@ (m@@ Action@@ )) { synchronized@@ (m@@ Lock) { m@@ Call@@ s +@@ = 1; if ((m@@ Call@@ s) >@@ = (m@@ Ex@@ pec@@ ted@@ Call@@ s@@ )) { m@@ Lock@@ .@@ not@@ if@@ y@@ (); } } } }
@org.junit.Test public void pro@@ vision@@ ing@@ Not@@ Requ@@ ire@@ d@@ W@@ h@@ en@@ C@@ arrier@@ Config@@ Manager@@ M@@ is@@ sing@@ () { set@@ up@@ For@@ Requ@@ ire@@ d@@ Pro@@ vision@@ ing@@ (); when(m@@ Contex@@ t.get@@ System@@ Service@@ (@@ Context.@@ C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _S@@ ER@@ VIC@@ E@@ )).@@ thenReturn@@ (@@ null@@ ); ve@@ r@@ if@@ y@@ ((@@ !@@ (m@@ T@@ ether@@ ing.@@ is@@ T@@ ether@@ Pro@@ vision@@ ing@@ Requ@@ ire@@ d@@ ()))); }
public boolean is@@ Current@@ () { return false@@ ; }
@java.lang.Override public org.junit.@@ run@@ ner@@ s.@@ model.@@ State@@ m@@ ent app@@ ly@@ (@@ org.junit.@@ run@@ ner@@ s.@@ model.@@ State@@ m@@ ent b@@ ase@@ , org.junit.@@ run@@ ner.@@ Des@@ cri@@ pti@@ on des@@ cription@@ ) { if ((@@ des@@ cription@@ .get@@ Annot@@ ation@@ (@@ libcore.@@ junit.@@ util.@@ Resource@@ Le@@ ak@@ age@@ D@@ et@@ ec@@ tor.@@ Dis@@ able@@ Resource@@ Le@@ ak@@ age@@ D@@ et@@ ec@@ tion@@ .@@ class@@ )) != null@@ ) { le@@ ak@@ age@@ D@@ et@@ ec@@ tion@@ Dis@@ able@@ d@@ For@@ Test = true@@ ; return b@@ ase@@ ; } else { le@@ ak@@ age@@ D@@ et@@ ec@@ tion@@ Dis@@ able@@ d@@ For@@ Test = false@@ ; return le@@ ak@@ age@@ D@@ et@@ ec@@ tor@@ R@@ u@@ le.@@ app@@ ly@@ (b@@ ase@@ , des@@ cription@@ ); } }
public synchronized void close@@ () throw@@ s com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception, java.io.IOException { java.io.@@ Output@@ Stream o@@ s = d@@ ir.@@ create@@ Output@@ V@@ File@@ (@@ new com.android.sched.vfs.@@ V@@ Path@@ ("@@ jack.@@ sh@@ a@@ 1@@ ", '@@ /@@ '@@ )).@@ open@@ W@@ rite@@ (); java.io.@@ P@@ r@@ int@@ Stream p@@ r@@ int@@ er = new java.io.@@ P@@ r@@ int@@ Stream@@ (o@@ s); for (com.android.s@@ ched.@@ vfs.@@ Message@@ Dig@@ est@@ Input@@ Output@@ VF@@ S@@ .@@ Message@@ Dig@@ est@@ Output@@ V@@ File fi@@ le : fil@@ es) { byte@@ [] d@@ ig@@ est = file@@ .get@@ Dig@@ est@@ (); if (d@@ ig@@ est != null@@ ) { p@@ r@@ int@@ er.@@ p@@ r@@ int@@ (file@@ .get@@ V@@ Path@@ ().get@@ Path@@ As@@ String(@@ '@@ /@@ '@@ )); p@@ r@@ int@@ er.@@ p@@ r@@ int@@ (@@ '@@ :@@ '@@ ); p@@ r@@ int@@ er.@@ p@@ r@@ int@@ (com.android.s@@ ched.@@ vfs.@@ Message@@ Dig@@ est@@ Input@@ Output@@ VF@@ S@@ .@@ en@@ code@@ (d@@ ig@@ est@@ )); p@@ r@@ int@@ er.@@ p@@ r@@ int@@ ln@@ (); } } p@@ r@@ int@@ er.@@ close(); }
private void check@@ Co@@ s@@ pi@@ Float3Float3@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 3@@ , -@@ 2@@ 1@@ 5@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Co@@ s@@ pi@@ Float3Float3@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Co@@ s@@ pi@@ Float3Float3@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ s@@ pi@@ Float3Float3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Co@@ s@@ pi@@ Float3Float3@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Co@@ s@@ pi@@ Float3Float3@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ s@@ pi@@ Float3Float3@@ : " + (e.toString()))); } }
@java.lang.Override public void in@@ it@@ Par@@ ser@@ (@@ @com.android.annotations.NonNull java.lang.String target@@ , @com.android.annotations.NonNull com.android.sdklib.@@ repository.@@ F@@ ull@@ Re@@ vi@@ sion build@@ Too@@ l@@ Re@@ vision@@ , @com.android.annotations.NonNull com.android.@@ uti@@ ls.@@ I@@ Logg@@ er logg@@ er@@ ) { if (!(m@@ In@@ itializ@@ ed@@ )) { m@@ T@@ arg@@ et = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ F@@ ake@@ Android@@ Target@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ , target@@ ); m@@ Build@@ Too@@ l@@ Info = new com.android.sdklib.@@ Build@@ Too@@ l@@ Info@@ (@@ build@@ Too@@ l@@ Re@@ vision@@ , new java.io.File@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ ), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ A@@ AP@@ T@@ ), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ A@@ ID@@ L@@ ), new java.io.File@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ , "@@ pre@@ bu@@ il@@ ts@@ /@@ s@@ dk@@ /@@ too@@ l@@ s@@ /@@ d@@ x@@ "@@ .@@ re@@ pla@@ ce@@ (@@ '@@ /@@ '@@ , java.io.File@@ .@@ se@@ par@@ ator@@ Char@@ )), new java.io.File@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ , "@@ pre@@ bu@@ il@@ ts@@ /@@ s@@ dk@@ /@@ too@@ l@@ s@@ /@@ lib@@ /@@ dx.@@ ja@@ r@@ "@@ .@@ re@@ pla@@ ce@@ (@@ '@@ /@@ '@@ , java.io.File@@ .@@ se@@ par@@ ator@@ Char@@ )), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _RE@@ N@@ DE@@ RS@@ C@@ R@@ IP@@ T@@ ), new java.io.File@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ , "@@ pre@@ bu@@ il@@ ts@@ /@@ s@@ dk@@ /@@ render@@ script@@ /@@ in@@ c@@ lu@@ de@@ "@@ .@@ re@@ pla@@ ce@@ (@@ '@@ /@@ '@@ , java.io.File@@ .@@ se@@ par@@ ator@@ Char@@ )), new java.io.File@@ (m@@ P@@ la@@ t@@ for@@ m@@ Root@@ Folder@@ , "@@ pre@@ bu@@ il@@ ts@@ /@@ s@@ dk@@ /@@ render@@ script@@ /@@ c@@ lan@@ g@@ -@@ in@@ c@@ lu@@ de@@ "@@ .@@ re@@ pla@@ ce@@ (@@ '@@ /@@ '@@ , java.io.File@@ .@@ se@@ par@@ ator@@ Char@@ )), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ B@@ C@@ _C@@ O@@ M@@ P@@ AT@@ ), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), "@@ ar@@ m@@ -@@ lin@@ u@@ x@@ -@@ android@@ e@@ ab@@ i@@ -@@ l@@ d@@ "), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), "@@ i@@ 6@@ 8@@ 6@@ -@@ lin@@ u@@ x@@ -@@ android@@ -@@ l@@ d@@ "), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), "@@ m@@ ip@@ se@@ l@@ -@@ lin@@ u@@ x@@ -@@ android@@ -@@ l@@ d@@ ")); m@@ In@@ itializ@@ ed = true@@ ; } }
public void register@@ Network@@ Callback@@ (android.net.@@ Network@@ Requ@@ est request@@ , android.net.@@ Connectivity@@ Manager.@@ Network@@ Call@@ b@@ ac@@ k network@@ Callback@@ , android.os.@@ Handle@@ r hand@@ ler@@ ) { send@@ Request@@ For@@ Network@@ (@@ requ@@ est.@@ network@@ Capabilities@@ , network@@ Callback@@ , 0, android.net.@@ Connectivity@@ Manager.@@ LIS@@ TE@@ N@@ , android.net.@@ Connectivity@@ Manager.@@ TYPE_@@ N@@ ON@@ E, hand@@ ler@@ ); }
private static Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult valid@@ ate@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Elem@@ ent xml@@ Element@@ , com.android.@@ m@@ an@@ if@@ merger.@@ Action@@ Recor@@ der action@@ Recor@@ der@@ , com.android.@@ uti@@ ls.@@ I@@ Logg@@ er logg@@ er@@ ) { com.android.@@ m@@ an@@ if@@ merger.@@ Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult result = Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult.@@ S@@ U@@ C@@ CE@@ SS@@ ; com.android.@@ m@@ an@@ if@@ merger.@@ Node@@ Oper@@ ation@@ Type o@@ per@@ ation@@ Type = xml@@ Element.@@ get@@ Oper@@ ation@@ Type@@ (); switch (o@@ per@@ ation@@ Typ@@ e) { case RE@@ P@@ L@@ AC@@ E : if (!@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Po@@ st@@ Valid@@ ator@@ .is@@ Node@@ Oper@@ ation@@ P@@ res@@ ent@@ (@@ xml@@ Element@@ , action@@ Recor@@ der@@ , Action@@ Type.@@ RE@@ J@@ EC@@ TED@@ ))) { logg@@ er.@@ war@@ n@@ ing@@ (("@@ " + ("@@ %@@ s w@@ a@@ s t@@ ag@@ ge@@ d at %@@ s@@ :@@ %@@ d to re@@ pl@@ ac@@ e an@@ o@@ th@@ er dec@@ l@@ ar@@ ation " + "@@ bu@@ t n@@ o o@@ th@@ er dec@@ l@@ ar@@ ation pres@@ ent@@ "@@ )), xml@@ Element.@@ get@@ Id@@ (), xml@@ Element.@@ get@@ Doc@@ ument@@ ().get@@ Source@@ Location@@ ().@@ p@@ r@@ int@@ (@@ true@@ ), xml@@ Element.@@ get@@ Posi@@ tion@@ ().get@@ Line@@ ()); result = Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult.@@ W@@ AR@@ N@@ ING@@ ; } break@@ ; case RE@@ M@@ O@@ V@@ E : case RE@@ M@@ O@@ V@@ E_@@ AL@@ L : if (!@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Po@@ st@@ Valid@@ ator@@ .is@@ Node@@ Oper@@ ation@@ P@@ res@@ ent@@ (@@ xml@@ Element@@ , action@@ Recor@@ der@@ , Action@@ Type.@@ RE@@ J@@ EC@@ TED@@ ))) { i@@ Logg@@ er.@@ war@@ n@@ ing@@ (("@@ " + ("@@ %@@ s w@@ a@@ s t@@ ag@@ ge@@ d at %@@ s@@ :@@ %@@ d to remo@@ v@@ e o@@ th@@ er dec@@ l@@ ar@@ ation@@ s " + "@@ bu@@ t n@@ o o@@ th@@ er dec@@ l@@ ar@@ ation pres@@ ent@@ "@@ )), xml@@ Element.@@ get@@ Id@@ (), xml@@ Element.@@ get@@ Doc@@ ument@@ ().get@@ Source@@ Location@@ ().@@ p@@ r@@ int@@ (@@ true@@ ), xml@@ Element.@@ get@@ Posi@@ tion@@ ().get@@ Line@@ ()); result = Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult.@@ W@@ AR@@ N@@ ING@@ ; } break@@ ; } com.android.@@ m@@ an@@ if@@ merger.@@ Po@@ st@@ Valid@@ ator@@ .@@ valid@@ ate@@ At@@ tri@@ b@@ ut@@ es(@@ xml@@ Element@@ , action@@ Recor@@ der@@ , i@@ Logg@@ er@@ ); for (com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Elem@@ ent ch@@ il@@ d : xml@@ Element.@@ get@@ M@@ er@@ ge@@ able@@ Element@@ s@@ ()) { if ((@@ com.android.@@ m@@ an@@ if@@ merger.@@ Po@@ st@@ Valid@@ ator@@ .@@ valid@@ ate@@ (@@ ch@@ ild@@ , action@@ Recor@@ der@@ , i@@ Logg@@ er@@ )) == (@@ Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult.@@ W@@ AR@@ N@@ ING@@ )) { result = Merg@@ ing@@ Re@@ por@@ t.@@ Res@@ ult.@@ W@@ AR@@ N@@ ING@@ ; } } return result@@ ; }
public void test@@ G@@ r@@ ant@@ Non@@ e@@ Request@@ Non@@ e@@ () throw@@ s java.lang.Exception { do@@ Test@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ G@@ R@@ AN@@ T_@@ N@@ ON@@ E, android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ Q@@ UE@@ ST_@@ N@@ ON@@ E, android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ EX@@ CE@@ P@@ TION@@ ); assert@@ Result@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ D@@ R@@ A@@ G@@ _STA@@ R@@ TED@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ ); assert@@ Result@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ EX@@ TR@@ A@@ S@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ EX@@ TR@@ A@@ S@@ , android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ ); }
private void po@@ p@@ ul@@ ate@@ (@@ com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o message@@ ) { mess@@ age.@@ option@@ al@@ Int@@ 3@@ 2 = 5@@ ; mess@@ age.@@ option@@ al@@ Int@@ 6@@ 4 = 7@@ ; mess@@ age.@@ option@@ al@@ F@@ lo@@ at = 1.@@ 0F@@ ; mess@@ age.@@ option@@ al@@ D@@ ou@@ b@@ le = 2.@@ 0; mess@@ age.@@ option@@ al@@ B@@ oo@@ l = true@@ ; mess@@ age.@@ option@@ al@@ Str@@ ing = "@@ Hel@@ lo@@ "; mess@@ age.@@ option@@ al@@ Byte@@ s = new byte@@ []{ 1, 2, 3 }; mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ Message = new com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ .@@ N@@ es@@ ted@@ Message@@ (); mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ Mess@@ age.@@ b@@ b = 2@@ 7@@ ; mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ En@@ u@@ m = com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ .@@ B@@ AR@@ ; mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ En@@ u@@ m = new int@@ []{ 5, 6@@ , 7@@ , 8 }; mess@@ age.@@ re@@ pe@@ ated@@ Int@@ 6@@ 4 = new long@@ []{ 2@@ 7@@ L, 2@@ 8@@ L, 2@@ 9@@ L }; mess@@ age.@@ re@@ pe@@ ated@@ F@@ lo@@ at = new float@@ []{ 5@@ .@@ 0F@@ , 6@@ .@@ 0@@ F }; mess@@ age.@@ re@@ pe@@ ated@@ D@@ ou@@ b@@ le = new do@@ ub@@ le@@ []{ 99@@ .@@ 1, 2@@ 2.@@ 5 }; mess@@ age.@@ re@@ pe@@ ated@@ B@@ oo@@ l = new boolean@@ []{ true@@ , false@@ , true }; mess@@ age.@@ re@@ pe@@ ated@@ Str@@ ing = new java.lang.String@@ []{ "@@ O@@ ne@@ ", "@@ T@@ w@@ o@@ " }; mess@@ age.@@ re@@ pe@@ ated@@ Byte@@ s = new byte@@ []@@ []{ new byte@@ []{ 2, 7 }@@ , new byte@@ []{ 2, 7 } }; mess@@ age.@@ re@@ pe@@ ated@@ N@@ es@@ ted@@ Message = new com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ .@@ N@@ es@@ ted@@ Message@@ []{ mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ Message@@ , mess@@ age.@@ option@@ al@@ N@@ es@@ ted@@ Message }; mess@@ age.@@ re@@ pe@@ ated@@ N@@ es@@ ted@@ En@@ u@@ m = new int@@ []{ com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ .@@ B@@ AR@@ , com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ .@@ B@@ A@@ Z }; message@@ .@@ default@@ Float@@ N@@ an = 1.@@ 0F@@ ; message@@ .@@ default@@ D@@ ouble@@ N@@ an = 1.@@ 0; }
synchronized boolean re@@ port@@ Error@@ (android.bluetooth.Bluetooth@@ Device device@@ , byte error@@ ) { if (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.TAG, ((("@@ re@@ port@@ Error@@ ()@@ : device@@ =@@ " + device@@ ) + " error@@ =@@ ") + error@@ )); } return false@@ ; }
public void f@@ dat@@ as@@ ync@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public java.lang.String get@@ E@@ id@@ () { if (!(@@ is@@ Enabled@@ ())) { return null@@ ; } try { return get@@ I@@ E@@ uic@@ c@@ Control@@ ler@@ ().get@@ E@@ id@@ (); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
public void r@@ est@@ art@@ Ob@@ ex@@ Server@@ Session@@ () { if (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ Map@@ M@@ as@@ Instance@@ .@@ D@@ ) android.util.Log.d@@ (m@@ Tag@@ , "@@ MA@@ P Ser@@ vice r@@ est@@ art@@ Ob@@ ex@@ Server@@ Session@@ ()@@ "); start@@ Socket@@ Listener@@ s(); }
protected boolean no@@ H@@ om@@ e@@ S@@ cre@@ en@@ () throw@@ s com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Device@@ Not@@ A@@ va@@ il@@ able@@ Exception { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Colle@@ ct@@ ing@@ Output@@ Recei@@ ve@@ r output@@ Recei@@ ve@@ r = new com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Colle@@ ct@@ ing@@ Output@@ Receiver@@ (); exec@@ ute@@ Sh@@ ell@@ Command@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ Test@@ Bas@@ e.@@ AM@@ _N@@ O@@ _@@ H@@ O@@ M@@ E_@@ S@@ C@@ RE@@ EN@@ , output@@ Receiver@@ ); java.lang.String out@@ put = output@@ Recei@@ ver.@@ get@@ Output@@ (); return out@@ pu@@ t.@@ start@@ s@@ With@@ (@@ "@@ true@@ "); }
void dis@@ cover@@ y@@ State@@ Change@@ Callback@@ (@@ int state@@ ) { info@@ Log@@ (("@@ Callback@@ :@@ dis@@ cover@@ y@@ State@@ Change@@ Call@@ b@@ ac@@ k wit@@ h state@@ :@@ " + state@@ )); synchronized@@ (m@@ Object@@ ) { android.content.@@ Int@@ ent int@@ ent@@ ; if (@@ st@@ ate == (@@ Abstr@@ action@@ Lay@@ er.@@ B@@ T_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y@@ _S@@ TO@@ P@@ ED@@ )) { m@@ Dis@@ cover@@ ing = false@@ ; m@@ Dis@@ cover@@ y@@ En@@ de@@ d = java.lang.System.@@ current@@ Time@@ Milli@@ s(); int@@ ent = new android.content.@@ Intent@@ (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ AC@@ TION_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y_@@ F@@ IN@@ IS@@ H@@ ED@@ ); m@@ Service.@@ send@@ Broadcast@@ (@@ int@@ ent@@ , m@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ ); } else if (@@ st@@ ate == (@@ Abstr@@ action@@ Lay@@ er.@@ B@@ T_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y@@ _STA@@ R@@ TED@@ )) { m@@ Dis@@ cover@@ ing = true@@ ; m@@ Dis@@ cover@@ y@@ En@@ de@@ d = (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s@@ ()) + (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Proper@@ ties.@@ DE@@ FA@@ UL@@ T_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y_@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ ); int@@ ent = new android.content.@@ Intent@@ (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ AC@@ TION_@@ D@@ IS@@ C@@ O@@ V@@ ER@@ Y@@ _STA@@ R@@ TED@@ ); m@@ Service.@@ send@@ Broadcast@@ (@@ int@@ ent@@ , m@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ ); } }
public void test_@@ un@@ mo@@ d@@ if@@ i@@ able@@ Map@@ _@@ Link@@ ed@@ Hash@@ Map@@ () { java.util.@@ Link@@ ed@@ Hash@@ Map@@ <java.lang.String, java.lang.Integ@@ er@@ > sm@@ all@@ Ma@@ p = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <java.lang.String, java.lang.Integ@@ er@@ >(); for (@@ int coun@@ ter = 0; coun@@ ter < 1@@ 00@@ ; coun@@ ter@@ ++) { java.lang.Integ@@ er ob@@ ject = ob@@ j@@ Array@@ [@@ coun@@ ter@@ ]; sm@@ all@@ Map@@ .@@ put@@ (@@ ob@@ jec@@ t.@@ toString@@ (), ob@@ ject@@ ); } new tests.@@ support.@@ Sup@@ port@@ _@@ Map@@ Test@@ ("@@ ", sm@@ all@@ Map@@ ).@@ run@@ Test@@ (); }
private void check@@ Input@@ File@@ (@@ java.io.File file@@ ) throw@@ s com.android.sdklib.@@ build@@ .@@ Apk@@ Build@@ er.@@ Apk@@ Cre@@ ation@@ Exception { if (@@ file.@@ is@@ Directory@@ ()) { throw new com.android.sdklib.@@ build@@ .@@ Apk@@ Build@@ er.@@ Apk@@ Cre@@ ation@@ Exception@@ (((@@ file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()) + " is a di@@ re@@ ctory@@ !@@ ")); } if (@@ file.@@ exist@@ s@@ ()) { if ((@@ file.@@ can@@ Read@@ ()) == false@@ ) { throw new com.android.sdklib.@@ build@@ .@@ Apk@@ Build@@ er.@@ Apk@@ Cre@@ ation@@ Exception(("@@ Can@@ not re@@ ad " + (file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()))); } } else { throw new com.android.sdklib.@@ build@@ .@@ Apk@@ Build@@ er.@@ Apk@@ Cre@@ ation@@ Exception@@ (((@@ file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()) + " do@@ es not exist@@ s@@ !@@ ")); } }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ S@@ es@@ sion pro@@ g@@ ram@@ ) throw@@ s com.android.jack.@@ Jack@@ User@@ Exception { try { com.android.sched.vfs.@@ Output@@ V@@ File output@@ V@@ File@@ ; if ((((@@ output@@ Library@@ ) != null@@ ) && (!(@@ is@@ In@@ crement@@ al@@ Mode@@ ))) && (@@ (@@ int@@ er@@ m@@ ed@@ i@@ ate@@ Dex@@ Dir@@ ) == null@@ )) { output@@ V@@ File = output@@ Librar@@ y.@@ create@@ File@@ (@@ File@@ Type.@@ DE@@ P@@ EN@@ D@@ EN@@ C@@ I@@ E@@ S@@ , Type@@ Dependenc@@ i@@ es.@@ v@@ path@@ ); } else { assert (@@ int@@ er@@ m@@ ed@@ i@@ ate@@ Dex@@ Dir@@ ) != null@@ ; com.android.sched.vfs.@@ V@@ P@@ ath type@@ Dependenc@@ y@@ P@@ ath = Type@@ Dependenc@@ i@@ es.@@ v@@ path@@ .@@ c@@ lon@@ e@@ (); type@@ Dependenc@@ y@@ Path@@ .@@ pre@@ pend@@ Path@@ (@@ new com.android.sched.vfs.@@ V@@ Path@@ ("@@ .@@ .@@ .@@ ", '@@ /@@ '@@ )); output@@ V@@ File = int@@ er@@ m@@ ed@@ i@@ ate@@ Dex@@ Dir@@ .@@ create@@ Output@@ V@@ File@@ (@@ type@@ Dependenc@@ y@@ Path@@ ); } com.android.jack.@@ Jack@@ .get@@ Session@@ ().get@@ Type@@ Dependenc@@ ies@@ ().@@ write@@ (@@ output@@ V@@ File@@ ); } catch (com.android.s@@ ched.@@ util.@@ file.@@ C@@ annot@@ Create@@ File@@ Exception e) { throw new com.android.jack.@@ Jack@@ IO@@ Exception(("@@ Co@@ ul@@ d not cre@@ ate typ@@ e de@@ pendenc@@ i@@ es fi@@ le in out@@ put " + ((@@ output@@ Library@@ ) != null ? output@@ Library@@ .get@@ Location@@ ().get@@ Des@@ cription@@ () : int@@ er@@ m@@ ed@@ i@@ ate@@ Dex@@ Dir@@ )), e); } catch (java.io.IOException e) { throw new com.android.jack.@@ Jack@@ IO@@ Exception(("@@ Co@@ ul@@ d not cre@@ ate typ@@ e de@@ pendenc@@ i@@ es fi@@ le in out@@ put " + ((@@ output@@ Library@@ ) != null ? output@@ Library@@ .get@@ Location@@ ().get@@ Des@@ cription@@ () : int@@ er@@ m@@ ed@@ i@@ ate@@ Dex@@ Dir@@ )), e); } }
@java.lang.Override public void run@@ (@@ org.eclipse.@@ core.@@ run@@ tim@@ e.@@ I@@ Pro@@ g@@ res@@ s@@ Mon@@ it@@ or mon@@ itor@@ ) throw@@ s java.lang.@@ Inter@@ rup@@ ted@@ Exception, java.lang.@@ ref@@ le@@ ct.@@ In@@ vo@@ cation@@ Target@@ Exception { org.eclipse.@@ core.@@ resources.@@ I@@ W@@ or@@ k@@ s@@ p@@ a@@ ce@@ Run@@ n@@ able op@@ 1 = new org.eclipse.@@ core.@@ resources.@@ I@@ W@@ or@@ k@@ s@@ p@@ a@@ ce@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ (@@ org.eclipse.@@ core.@@ run@@ tim@@ e.@@ I@@ Pro@@ g@@ res@@ s@@ Mon@@ it@@ or mon@@ itor@@ 1@@ ) throw@@ s org.eclipse.@@ core.@@ run@@ tim@@ e.@@ C@@ ore@@ Exception { org.eclipse.@@ c@@ d@@ t.@@ core.@@ C@@ ore@@ P@@ lu@@ gin@@ .get@@ Default@@ ().@@ con@@ ver@@ t@@ Project@@ To@@ C@@ C@@ (m@@ Project@@ , mon@@ itor@@ 1, M@@ ake@@ C@@ ore@@ P@@ lu@@ gin@@ .@@ MA@@ K@@ E_@@ PRO@@ J@@ EC@@ T_@@ ID@@ ); new com.android.ide.@@ eclipse.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ w@@ iz@@ ard@@ s.@@ N@@ dk@@ W@@ iz@@ ard@@ Handler@@ ().@@ con@@ ver@@ t@@ Project@@ (m@@ Project@@ , mon@@ itor@@ 1); org.eclipse.@@ c@@ d@@ t.@@ core.@@ lan@@ gu@@ age.@@ setting@@ s.@@ provid@@ er@@ s.@@ Scan@@ ner@@ Dis@@ cover@@ y@@ Le@@ g@@ ac@@ y@@ Sup@@ por@@ t.@@ set@@ L@@ an@@ gu@@ age@@ Setting@@ s@@ Provider@@ s@@ Provider@@ s@@ F@@ un@@ ction@@ al@@ ity@@ Enabled@@ (m@@ Project@@ , false@@ ); com.android.ide.@@ eclipse.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Manager.@@ add@@ Native@@ Sup@@ port@@ (m@@ Project@@ , m@@ Temp@@ l@@ ate@@ Arg@@ s, mon@@ itor@@ 1); } }; org.eclipse.@@ core.@@ resources.@@ I@@ W@@ or@@ k@@ s@@ p@@ ac@@ e work@@ s@@ p@@ ac@@ e = org.eclipse.@@ core.@@ resources.@@ Res@@ ources@@ P@@ lu@@ gin@@ .get@@ W@@ or@@ k@@ s@@ p@@ a@@ ce@@ (); try { work@@ s@@ p@@ a@@ ce.@@ run@@ (@@ op@@ 1, work@@ s@@ p@@ a@@ ce@@ .get@@ Root@@ (), 0, new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Null@@ Pro@@ g@@ res@@ s@@ Monitor@@ ()); } catch (@@ org.eclipse.@@ core.@@ run@@ tim@@ e.@@ C@@ ore@@ Exception e) { throw new java.lang.@@ ref@@ le@@ ct.@@ In@@ vo@@ cation@@ Target@@ Exception(@@ e); } }
public void test_@@ connect@@ _@@ time@@ out@@ () throw@@ s java.lang.Exception { tests.@@ net.@@ St@@ u@@ ck@@ Ser@@ ve@@ r s@@ s = new tests.@@ net.@@ St@@ u@@ ck@@ Server@@ (@@ false@@ ); java.net.@@ S@@ ock@@ et s = new java.net.@@ Socket@@ (); new libcore.@@ java.net.@@ Con@@ current@@ C@@ lose@@ Test.@@ K@@ il@@ ler@@ (s@@ ).@@ start@@ (); try { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ("@@ connec@@ t (@@ wit@@ h time@@ out@@ ) " + s) + " to ") + (s@@ s.get@@ Local@@ Socket@@ Address@@ ())) + "@@ .@@ .@@ .@@ ")); s.@@ connect@@ (s@@ s.get@@ Local@@ Socket@@ Address@@ (), (@@ 3@@ 6@@ 0@@ 0 * 1@@ 00@@ 0@@ )); fail@@ ((("@@ connec@@ t return@@ ed@@ : " + s) + "@@ !@@ ")); } catch (@@ java.net.@@ Socket@@ Exception expected@@ ) { assert@@ Equal@@ s("@@ S@@ ock@@ et c@@ lo@@ sed@@ ", expected@@ .get@@ Message@@ ()); } final@@ l@@ y { s@@ s.@@ close(); } }
public void test@@ Sim@@ ple@@ G@@ rap@@ h@@ () { m@@ He@@ a@@ p = new com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ S@@ yn@@ th@@ et@@ ic@@ He@@ ap@@ (@@ 6@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 1, 2@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 1, 3@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 2, 4@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 2, 6@@ ).@@ add@@ Reference@@ (@@ 3@@ , 4@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 3@@ , 5@@ ).@@ add@@ Reference@@ d@@ ge@@ (@@ 4@@ , 6@@ ).@@ add@@ Root@@ (1@@ ).get@@ He@@ ap@@ (); m@@ Do@@ min@@ ator@@ s = new com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ Do@@ min@@ ator@@ s@@ (m@@ He@@ ap@@ ).get@@ Do@@ min@@ ator@@ Map@@ (); assert@@ Equal@@ s(@@ 6@@ , m@@ Do@@ min@@ ator@@ s.@@ size@@ ()); assert@@ Do@@ min@@ at@@ es(@@ 1, 2@@ ); assert@@ Do@@ min@@ at@@ es(@@ 1, 3@@ ); assert@@ Do@@ min@@ at@@ es(@@ 1, 4@@ ); assert@@ Do@@ min@@ at@@ es(@@ 1, 6@@ ); assert@@ Do@@ min@@ at@@ es(@@ 3@@ , 5@@ ); }
public static void add@@ Event@@ (android.@@ telecom.@@ Logg@@ ing.@@ Event@@ Manager.@@ Logg@@ able re@@ cor@@ d@@ E@@ n@@ try@@ , java.lang.String event@@ ) { android.telecom.@@ Log.@@ get@@ Event@@ Manager@@ ().@@ event@@ (re@@ cor@@ d@@ E@@ n@@ try@@ , event@@ , null@@ ); }
public void test@@ In@@ lin@@ ed@@ Int@@ Set@@ ter@@ () { test@@ B@@ reak@@ p@@ o@@ int@@ In@@ ("@@ test@@ In@@ lin@@ ed@@ Int@@ Set@@ ter@@ ", "@@ break@@ p@@ o@@ int@@ Int@@ Set@@ ter@@ "); }
@java.lang.Override public void write@@ (@@ @com.android.annotations.NonNull final java.io.File pro@@ ject@@ Dir@@ , @com.android.annotations.@@ Null@@ able final java.lang.String build@@ Script@@ Content@@ ) throw@@ s java.io.IOException { for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, ? extends com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ Test@@ Project@@ > e@@ n@@ try : sub@@ pro@@ ject@@ s.@@ e@@ n@@ try@@ Set@@ ()) { java.lang.String sub@@ pro@@ ject@@ P@@ ath = e@@ n@@ try@@ .get@@ Key@@ (); com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ Test@@ Pro@@ ject sub@@ pro@@ ject = e@@ n@@ try@@ .get@@ Value@@ (); java.io.File sub@@ pro@@ ject@@ Di@@ r = new java.io.File@@ (pro@@ ject@@ Dir@@ , com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ app.@@ Multi@@ Mod@@ ule@@ Test@@ Pro@@ jec@@ t.@@ con@@ ver@@ t@@ G@@ rad@@ le@@ Path@@ To@@ Directory@@ (s@@ ub@@ pro@@ ject@@ Path@@ )); if (!@@ (s@@ ub@@ pro@@ ject@@ Dir@@ .@@ exist@@ s@@ ())) { sub@@ pro@@ ject@@ Dir@@ .m@@ k@@ d@@ ir@@ s(); assert sub@@ pro@@ ject@@ Dir@@ .is@@ Directory@@ (); } sub@@ pro@@ jec@@ t.@@ write@@ (s@@ ub@@ pro@@ ject@@ Dir@@ , "@@ "); } java.lang.String@@ Builder bu@@ ilder = new java.lang.String@@ Builder@@ (); for (java.lang.String sub@@ pro@@ ject@@ Name : sub@@ pro@@ ject@@ s.@@ key@@ Set@@ ()) { builder.@@ append("@@ in@@ c@@ lu@@ de '@@ ").@@ append@@ (s@@ ub@@ pro@@ ject@@ Name@@ ).@@ append("@@ \@@ '@@ \n@@ "); } com.google.common.@@ io.@@ Fil@@ es.@@ write@@ (@@ builder.@@ toString@@ (), new java.io.File@@ (pro@@ ject@@ Dir@@ , "@@ setting@@ s.@@ grad@@ le@@ "), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ default@@ Char@@ set@@ ()); com.google.common.@@ io.@@ Fil@@ es.@@ write@@ (@@ build@@ Script@@ Content@@ , new java.io.File@@ (pro@@ ject@@ Dir@@ , "@@ build@@ .@@ grad@@ le@@ "), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ default@@ Char@@ set@@ ()); }
public void test@@ Boole@@ an@@ O@@ ver@@ lay@@ () throw@@ s java.lang.@@ Throw@@ able { final int res@@ Id = R.@@ b@@ oo@@ l.@@ r@@ ro@@ _test@@ _@@ us@@ u@@ all@@ y@@ _@@ false@@ ; assert@@ Resource@@ (@@ res@@ Id, false@@ , true@@ , false@@ ); }
@@@ android.@@ support.@@ annotation.@@ Visi@@ ble@@ For@@ Test@@ ing public boolean dis@@ connect@@ Audio@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { return dis@@ connect@@ Audio@@ Native@@ (com.android.bluetooth.@@ Utils.@@ get@@ Byte@@ Addres@@ s(@@ device@@ )); }
private void check@@ R@@ int@@ Float4Float4@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ R@@ int@@ Float4Float4@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ R@@ int@@ Float4Float4@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ R@@ int@@ Float4Float4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ R@@ int@@ Float4Float4@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ R@@ int@@ Float4Float4@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ R@@ int@@ Float4Float4@@ : " + (e.toString()))); } }
private static void call@@ Create@@ H@@ oo@@ k@@ s@@ (@@ final com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ Android@@ Xml@@ E@@ d@@ it@@ or editor@@ , final com.android.ide.common.@@ api.@@ In@@ ser@@ t@@ Type in@@ ser@@ t@@ Type, final com.android.ide.common.@@ api.@@ I@@ View@@ R@@ ul@@ e parent@@ R@@ ule@@ , final com.android.ide.common.@@ api.@@ IN@@ o@@ de parent@@ Node@@ , final com.android.ide.common.@@ api.@@ I@@ View@@ R@@ ul@@ e ch@@ ild@@ R@@ ule@@ , final com.android.ide.common.@@ api.@@ IN@@ o@@ de new@@ Node@@ ) { if (!(@@ editor@@ .is@@ E@@ d@@ it@@ Xml@@ Mode@@ l@@ P@@ end@@ ing@@ ())) { editor@@ .@@ w@@ rap@@ U@@ n@@ do@@ E@@ d@@ it@@ Xml@@ Mode@@ l@@ ("@@ C@@ u@@ st@@ om@@ iz@@ e cre@@ ation@@ ", new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ R@@ ul@@ es@@ En@@ g@@ ine.@@ call@@ Create@@ H@@ oo@@ k@@ s(@@ editor@@ , in@@ ser@@ t@@ Type, parent@@ R@@ ule@@ , parent@@ Node@@ , ch@@ ild@@ R@@ ule@@ , new@@ Node@@ ); } }); return@@ ; } if (@@ parent@@ R@@ ul@@ e != null@@ ) { parent@@ R@@ u@@ le.@@ on@@ In@@ ser@@ t@@ (@@ new@@ Node@@ , parent@@ Node@@ , in@@ ser@@ t@@ Type@@ ); } if (@@ ch@@ ild@@ R@@ ul@@ e != null@@ ) { ch@@ ild@@ R@@ u@@ le.@@ on@@ Create@@ (@@ new@@ Node@@ , parent@@ Node@@ , in@@ ser@@ t@@ Type@@ ); } }
public void test@@ VF@@ E@@ 16@@ () { try { new do@@ t.@@ junit.@@ op@@ cod@@ es.@@ i@@ get@@ _@@ boolean@@ .@@ d.@@ T_@@ i@@ get@@ _@@ boolean@@ _@@ 5@@ ().@@ run@@ (); fail@@ ("@@ expec@@ ted an In@@ comp@@ ati@@ ble@@ Class@@ Change@@ Error excepti@@ on@@ "); } catch (java.lang.@@ In@@ comp@@ ati@@ ble@@ Class@@ Change@@ Error e) { } }
@org.junit.Test public void test@@ 5@@ 7@@ _@@ 00@@ 1@@ () throw@@ s java.lang.Exception { run@@ Test@@ ("@@ 0@@ 5@@ 7@@ ", "@@ 00@@ 1@@ ", "@@ "); }
private void check@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ () { android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 3@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 1@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ (in@@ V@@ , out); ve@@ r@@ if@@ y@@ Results@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ (in@@ V@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ (in@@ V@@ , out); ve@@ r@@ if@@ y@@ Results@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ (in@@ V@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ H@@ al@@ f@@ Rs@@ q@@ r@@ t@@ Float3Float3@@ : " + (e.toString()))); } }
@java.lang.Override public void run@@ () { if (m@@ View@@ er.get@@ T@@ able@@ ().@@ is@@ Dis@@ po@@ sed@@ ()) { return@@ ; } synchronized@@ (@@ this@@ ) { mC@@ urrent@@ Ref@@ res@@ h@@ er = null@@ ; } int n@@ De@@ let@@ ed@@ ; synchronized@@ (m@@ De@@ let@@ ed@@ Lock) { n@@ De@@ let@@ ed = m@@ De@@ let@@ ed@@ S@@ in@@ ce@@ L@@ ast@@ Ref@@ res@@ h@@ Count@@ ; m@@ De@@ let@@ ed@@ S@@ in@@ ce@@ L@@ ast@@ Ref@@ res@@ h@@ Coun@@ t = 0; } int to@@ p@@ In@@ dex = m@@ View@@ er.get@@ T@@ able@@ ().get@@ To@@ p@@ Index@@ (); m@@ View@@ er.get@@ T@@ able@@ ().@@ set@@ R@@ ed@@ raw@@ (@@ false@@ ); m@@ View@@ er.@@ ref@@ res@@ h@@ (); if (m@@ S@@ ho@@ ul@@ d@@ S@@ c@@ ro@@ l@@ l@@ To@@ L@@ at@@ est@@ Log@@ ) { s@@ c@@ ro@@ l@@ l@@ To@@ L@@ at@@ est@@ Log@@ (); } else { if (@@ to@@ p@@ In@@ dex > n@@ De@@ let@@ ed@@ ) { to@@ p@@ In@@ dex -@@ = n@@ De@@ let@@ ed@@ ; } m@@ View@@ er.get@@ T@@ able@@ ().@@ set@@ To@@ p@@ Index@@ (@@ to@@ p@@ Index@@ ); } m@@ View@@ er.get@@ T@@ able@@ ().@@ set@@ R@@ ed@@ raw@@ (@@ true@@ ); }
private static void check@@ Int@@ Fail@@ ure@@ C@@ as@@ es(@@ libcore.io.@@ Buffer@@ I@@ ter@@ at@@ or i@@ terator@@ ) { i@@ terator@@ .@@ se@@ e@@ k@@ ((@@ -1@@ )); libcore.io.@@ M@@ em@@ or@@ y@@ M@@ app@@ ed@@ File@@ Test@@ .@@ assert@@ Read@@ Int@@ Fail@@ s(@@ i@@ terator@@ ); i@@ terator@@ .@@ se@@ e@@ k@@ ((@@ -@@ 4@@ )); libcore.io.@@ M@@ em@@ or@@ y@@ M@@ app@@ ed@@ File@@ Test@@ .@@ assert@@ Read@@ Int@@ Fail@@ s(@@ i@@ terator@@ ); i@@ terator@@ .@@ se@@ e@@ k@@ (@@ 7@@ ); libcore.io.@@ M@@ em@@ or@@ y@@ M@@ app@@ ed@@ File@@ Test@@ .@@ assert@@ Read@@ Int@@ Fail@@ s(@@ i@@ terator@@ ); i@@ terator@@ .@@ se@@ e@@ k@@ (1@@ 0); libcore.io.@@ M@@ em@@ or@@ y@@ M@@ app@@ ed@@ File@@ Test@@ .@@ assert@@ Read@@ Int@@ Fail@@ s(@@ i@@ terator@@ ); }
public static int Add@@ Sub@@ Add@@ Sub@@ Add@@ Sub@@ Add@@ Con@@ st@@ (@@ int arg@@ ) { return (((@@ ar@@ g + 1@@ ) + 2@@ ) - 3@@ ) + 4@@ ; }
void st@@ op@@ () { if (com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ V@@ DBG) android.util.Log.@@ v@@ (com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.TAG, "@@ st@@ op@@ ()@@ "); m@@ Sh@@ u@@ t@@ do@@ w@@ n = true@@ ; if ((m@@ S@@ dp@@ Handle@@ ) >@@ = 0) { if (!@@ (com.android.bluetooth.@@ s@@ d@@ p.@@ S@@ dp@@ Manager.get@@ Default@@ Manager@@ ().@@ remove@@ S@@ dp@@ Record@@ (m@@ S@@ dp@@ Handle@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.TAG, ("@@ Faile@@ d to remo@@ v@@ e s@@ d@@ p hand@@ le " + (m@@ S@@ dp@@ Handle@@ ))); m@@ S@@ dp@@ Hand@@ le = -1@@ ; } } if ((@@ com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ m@@ Server@@ Socket@@ s) != null@@ ) { com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ m@@ Server@@ Socket@@ s.@@ sh@@ u@@ t@@ do@@ wn@@ (@@ false@@ ); com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ m@@ Server@@ Socket@@ s = null@@ ; } }
void remove@@ Item@@ (@@ @com.android.annotations.NonNull I remo@@ v@@ ed@@ Item@@ , @com.android.annotations.NonNull I re@@ pla@@ ce@@ d@@ By@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ M@@ er@@ ge@@ Con@@ s@@ um@@ er.@@ Con@@ s@@ um@@ er@@ Exception;
public void in@@ itializ@@ e@@ () { send@@ Message@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMachine.@@ C@@ M@@ D_@@ IN@@ I@@ TI@@ AL@@ I@@ Z@@ E); }
private void on@@ Start@@ User@@ (@@ int user@@ Id) { android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Mo@@ unt@@ Service.TAG, ("@@ on@@ Start@@ U@@ se@@ r " + user@@ Id@@ )); try { m@@ Connec@@ tor.@@ exec@@ ute@@ ("@@ vo@@ lum@@ e@@ ", "@@ user@@ _@@ st@@ ar@@ ted@@ ", user@@ Id); } catch (com.android.server.@@ Native@@ D@@ a@@ e@@ mon@@ Connec@@ tor@@ Exception ign@@ or@@ ed@@ ) { } synchronized@@ (m@@ Vo@@ lum@@ es) { for (@@ int i = 0; i < (m@@ Vo@@ lum@@ es.@@ size@@ ()); i++) { final android.os.@@ st@@ or@@ age.@@ Vo@@ lum@@ e@@ Info vo@@ l = m@@ Vo@@ lum@@ es.@@ value@@ At@@ (i@@ ); if ((@@ vo@@ l.@@ is@@ Visi@@ ble@@ For@@ Read@@ (@@ user@@ Id@@ )) && (@@ vo@@ l.@@ is@@ Mo@@ un@@ ted@@ Read@@ able@@ ())) { final android.os.@@ st@@ or@@ age.@@ Stor@@ age@@ Vo@@ lum@@ e user@@ Vo@@ lum@@ e = vo@@ l.@@ build@@ Stor@@ age@@ Vo@@ lum@@ e@@ (m@@ Contex@@ t, user@@ Id, false@@ ); m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.server.@@ Mo@@ unt@@ Service.@@ H@@ _@@ V@@ O@@ L@@ U@@ M@@ E_@@ B@@ RO@@ AD@@ C@@ A@@ S@@ T, user@@ V@@ ol@@ ).@@ send@@ To@@ Target@@ (); final java.lang.String en@@ v@@ State = android.os.@@ st@@ or@@ age.@@ Vo@@ lum@@ e@@ Info@@ .get@@ En@@ vi@@ ron@@ ment@@ For@@ State@@ (@@ vo@@ l.get@@ State@@ ()); m@@ Callback@@ s.@@ not@@ if@@ y@@ Stor@@ age@@ State@@ Changed@@ (@@ user@@ Vo@@ l.get@@ Path@@ (), en@@ v@@ State@@ , en@@ v@@ State@@ ); } } synchronized@@ (m@@ Lock) { m@@ St@@ ar@@ ted@@ User@@ s = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Array@@ Utils.@@ append@@ Int@@ (m@@ St@@ ar@@ ted@@ User@@ s, user@@ Id); } }
public static java.lang.String for@@ mat@@ Date@@ R@@ an@@ ge@@ (android.@@ icu@@ .@@ util.@@ U@@ Local@@ e icu@@ Loc@@ ale@@ , android.@@ icu@@ .@@ util.@@ Time@@ Z@@ on@@ e icu@@ TimeZone@@ , long start@@ M@@ s, long end@@ M@@ s, int flag@@ s) { android.@@ icu@@ .@@ util.@@ Cal@@ end@@ a@@ r start@@ Cal@@ end@@ a@@ r = libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ create@@ I@@ c@@ u@@ Cal@@ end@@ ar@@ (@@ icu@@ TimeZone@@ , icu@@ Loc@@ ale@@ , start@@ M@@ s); android.@@ icu@@ .@@ util.@@ Cal@@ end@@ a@@ r end@@ Cal@@ end@@ ar@@ ; if (@@ start@@ M@@ s == end@@ M@@ s) { end@@ Cal@@ end@@ a@@ r = start@@ Cal@@ end@@ ar@@ ; } else { end@@ Cal@@ end@@ a@@ r = libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ create@@ I@@ c@@ u@@ Cal@@ end@@ ar@@ (@@ icu@@ TimeZone@@ , icu@@ Loc@@ ale@@ , end@@ M@@ s); } boolean start@@ s@@ At@@ M@@ id@@ n@@ ig@@ h@@ t = libcore.@@ icu@@ .@@ Date@@ Inter@@ val@@ Format@@ .is@@ M@@ id@@ n@@ ig@@ ht@@ (@@ start@@ Cal@@ end@@ ar@@ ); boolean end@@ s@@ At@@ M@@ id@@ n@@ ig@@ h@@ t = libcore.@@ icu@@ .@@ Date@@ Inter@@ val@@ Format@@ .is@@ M@@ id@@ n@@ ig@@ ht@@ (@@ end@@ Cal@@ end@@ ar@@ ); boolean sho@@ w@@ Tim@@ e = (f@@ lag@@ s & (@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ F@@ OR@@ MA@@ T_@@ S@@ H@@ O@@ W@@ _@@ TI@@ ME@@ )) != 0; boolean end@@ s@@ D@@ ay@@ A@@ f@@ ter@@ St@@ ar@@ t = (@@ libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ d@@ ay@@ Di@@ stance@@ (@@ start@@ Cal@@ end@@ ar@@ , end@@ Cal@@ end@@ ar@@ )) == 1; if (((@@ start@@ M@@ s != end@@ M@@ s) && end@@ s@@ At@@ M@@ id@@ n@@ ig@@ ht@@ ) && ((@@ !@@ sho@@ w@@ Tim@@ e) || (@@ end@@ s@@ D@@ ay@@ A@@ f@@ ter@@ St@@ ar@@ t && (!@@ start@@ s@@ At@@ M@@ id@@ n@@ ig@@ ht@@ )@@ ))) { end@@ Cal@@ end@@ ar.@@ add(@@ Cal@@ end@@ ar.@@ DA@@ Y_@@ O@@ F@@ _M@@ ON@@ TH@@ , (-1@@ )); } java.lang.String s@@ k@@ el@@ et@@ on = libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ to@@ S@@ k@@ el@@ et@@ on@@ (@@ start@@ Cal@@ end@@ ar@@ , end@@ Cal@@ end@@ ar@@ , flag@@ s); synchronized@@ (@@ libcore.@@ icu@@ .@@ Date@@ Inter@@ val@@ Format@@ .@@ C@@ AC@@ H@@ ED@@ _@@ F@@ OR@@ MA@@ T@@ TE@@ RS@@ ) { android.@@ icu@@ .@@ text.@@ Date@@ Inter@@ val@@ For@@ ma@@ t for@@ mat@@ ter = libcore.@@ icu@@ .@@ Date@@ Inter@@ val@@ Format@@ .get@@ Format@@ ter@@ (s@@ k@@ el@@ et@@ on@@ , icu@@ Loc@@ ale@@ , icu@@ Time@@ Z@@ on@@ e); return for@@ mat@@ ter@@ .@@ for@@ mat@@ (@@ start@@ Cal@@ end@@ ar@@ , end@@ Cal@@ end@@ ar@@ , new java.lang.String@@ Buffer@@ (), new java.text.@@ Field@@ Posi@@ tion@@ (0@@ )).@@ toString@@ (); } } }
private void check@@ Ma@@ x@@ FloatFloat@@ Float@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 8@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 8@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 4@@ 8@@ 8@@ L); android.renderscript.Allocation in@@ 1 = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 8@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ 1@@ (in@@ 1); script@@ .@@ for@@ Each@@ _test@@ Ma@@ x@@ FloatFloat@@ Float@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Ma@@ x@@ FloatFloat@@ Float@@ (in, in@@ 1, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ma@@ x@@ FloatFloat@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ 1@@ (in@@ 1); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Ma@@ x@@ FloatFloat@@ Float@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Ma@@ x@@ FloatFloat@@ Float@@ (in, in@@ 1, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ma@@ x@@ FloatFloat@@ Float@@ : " + (e.toString()))); } }
@@@ android.@@ support.@@ annotation.@@ Visi@@ ble@@ For@@ Test@@ ing public com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Native@@ Inter@@ face get@@ Native@@ Interface@@ () { return m@@ Native@@ Interface@@ ; }
private void not@@ if@@ y@@ Link@@ Properties@@ Changed@@ (java.lang.String if@@ a@@ ce@@ , com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMach@@ in@@ e w@@ ho@@ , android.net.@@ Link@@ Proper@@ ti@@ es new@@ L@@ p@@ ) { final boolean is@@ T@@ ether@@ ing@@ ; synchronized@@ (m@@ P@@ u@@ bli@@ c@@ S@@ ync@@ ) { final com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ T@@ ether@@ State t@@ ether@@ State = m@@ T@@ ether@@ Stat@@ es@@ .get@@ (@@ if@@ a@@ ce@@ ); if (t@@ ether@@ State == null@@ ) { is@@ T@@ ether@@ ing = false@@ ; } else if (t@@ ether@@ State.@@ state@@ Mach@@ ine.@@ equals(@@ w@@ ho@@ )) { is@@ T@@ ether@@ ing = (t@@ ether@@ State.@@ las@@ t@@ State@@ ) == (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ TE@@ TH@@ ER@@ ED@@ ); } else { if (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ DBG) android.util.Log.d@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ TAG, ("@@ go@@ t not@@ if@@ ic@@ ation f@@ ro@@ m st@@ al@@ e if@@ ac@@ e " + if@@ a@@ ce@@ )); return@@ ; } } m@@ Log.@@ log@@ (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ O@@ B@@ S@@ ER@@ V@@ E@@ D Link@@ Proper@@ ti@@ es up@@ d@@ ate if@@ a@@ ce@@ =@@ %@@ s is@@ T@@ ether@@ ing@@ =@@ %@@ s", if@@ a@@ ce@@ , is@@ T@@ ether@@ ing@@ )); final int wh@@ i@@ ch = com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ T@@ ether@@ M@@ as@@ ter@@ S@@ M@@ .@@ EVEN@@ T_@@ I@@ F@@ AC@@ E_@@ U@@ P@@ DA@@ TE_@@ L@@ IN@@ K@@ PRO@@ P@@ ER@@ TI@@ E@@ S@@ ; m@@ T@@ ether@@ M@@ as@@ ter@@ S@@ M@@ .@@ send@@ Message@@ (@@ wh@@ i@@ ch@@ , (is@@ T@@ ether@@ ing ? 1 : 0@@ ), 0, new@@ L@@ p@@ ); }
@org.junit.Test public void test@@ 00@@ 1@@ () throw@@ s java.lang.Exception { java.lang.String t@@ est = "@@ com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ test@@ 00@@ 1@@ "; java.lang.String a@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 00@@ 1@@ /@@ A@@ ;@@ "; com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Comp@@ il@@ ation@@ Proper@@ ti@@ es pro@@ per@@ ti@@ es = default@@ Properties@@ (); test@@ 00@@ 1@@ (@@ test@@ , "@@ A@@ .@@ us@@ e.@@ d@@ al@@ vi@@ k@@ "@@ ))); compile@@ And@@ Valid@@ ate@@ Typ@@ es(@@ test@@ , pro@@ per@@ ties@@ , new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Valid@@ ator@@ s@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, a@@ Method@@ s@@ )); }
private void call@@ Callback@@ For@@ Request@@ (com.android.server.@@ Connectivity@@ Service.@@ Network@@ Request@@ Info n@@ ri@@ , com.android.server.@@ connectivity.@@ Network@@ A@@ g@@ ent@@ Info network@@ A@@ g@@ ent@@ , int not@@ if@@ ic@@ ation@@ Type, int arg@@ 1@@ ) { if ((@@ n@@ ri@@ .m@@ ess@@ eng@@ er@@ ) == null@@ ) { return@@ ; } android.os.@@ Bund@@ le b@@ und@@ le = new android.os.@@ Bund@@ le@@ (); com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , new android.net.Network@@ Request@@ (@@ n@@ ri@@ .@@ request@@ )); android.os.@@ Message ms@@ g = android.os.@@ Mess@@ age.@@ ob@@ tain@@ (); if (@@ not@@ if@@ ic@@ ation@@ Type != (android.net.@@ Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ UN@@ AV@@ A@@ IL@@ )) { com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , network@@ A@@ g@@ ent.@@ network@@ ); } switch (@@ not@@ if@@ ic@@ ation@@ Typ@@ e) { case android.net.@@ Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ AV@@ A@@ IL@@ ABL@@ E : { com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , new android.net.Network@@ Capabilities@@ (@@ network@@ A@@ g@@ ent.@@ network@@ Capabilities@@ )); com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , new android.net.@@ Link@@ Properties@@ (@@ network@@ A@@ g@@ ent.@@ lin@@ k@@ Properties@@ )); break@@ ; } case android.net.@@ Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ LO@@ S@@ IN@@ G : { ms@@ g.@@ arg@@ 1 = arg@@ 1; break@@ ; } case android.net.@@ Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K@@ _C@@ AP@@ _C@@ H@@ AN@@ G@@ E@@ D : { final android.net.Network@@ Capabili@@ ti@@ es n@@ c = network@@ Capabilities@@ With@@ out@@ U@@ id@@ s@@ Un@@ l@@ ess@@ Al@@ low@@ ed@@ (@@ network@@ A@@ g@@ ent.@@ network@@ Capabilities@@ ); com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , n@@ c@@ ); break@@ ; } case android.net.@@ Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ IP@@ _C@@ H@@ AN@@ G@@ E@@ D : { com.android.server.@@ Connectivity@@ Service.@@ put@@ Par@@ cel@@ able@@ (b@@ und@@ le@@ , new android.net.@@ Link@@ Properties@@ (@@ network@@ A@@ g@@ ent.@@ lin@@ k@@ Properties@@ )); break@@ ; } } ms@@ g.@@ wh@@ at = not@@ if@@ ic@@ ation@@ Type@@ ; ms@@ g.@@ set@@ Data@@ (b@@ und@@ le@@ ); try { if (com.android.server.@@ Connectivity@@ Service.@@ V@@ DBG) { java.lang.String not@@ if@@ ic@@ ation = android.net.@@ Connectivity@@ Manager.get@@ Callback@@ Name@@ (@@ not@@ if@@ ic@@ ation@@ Type@@ ); com.android.server.@@ Connectivity@@ Service.@@ log@@ ((@@ (("@@ send@@ ing not@@ if@@ ic@@ ation " + not@@ if@@ ic@@ ation@@ ) + " for ") + (@@ n@@ ri@@ .@@ request@@ ))); } n@@ ri@@ .m@@ ess@@ eng@@ er.@@ send@@ (m@@ s@@ g@@ ); } catch (android.os.RemoteException e) { com.android.server.@@ Connectivity@@ Service.@@ log@@ e@@ (("@@ RemoteException c@@ au@@ g@@ h@@ t try@@ ing to s@@ en@@ d a b@@ ac@@ k ms@@ g for " + (@@ n@@ ri@@ .@@ request@@ ))); } } }
private void test@@ Java@@ S@@ ide@@ (com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t RS@@ ) { int sub@@ Elem@@ Coun@@ t = si@@ mp@@ le@@ Elem@@ .get@@ Sub@@ Element@@ Count@@ (); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ sub@@ Elem@@ Coun@@ t == 0@@ ", (s@@ ub@@ Elem@@ Coun@@ t == 0@@ )); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ si@@ mp@@ le@@ Elem@@ .get@@ Data@@ K@@ ind@@ () == US@@ ER@@ ", ((@@ si@@ mp@@ le@@ Elem@@ .get@@ Data@@ K@@ ind@@ ()) == (android.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ renderscript.@@ K@@ ind@@ .@@ US@@ ER@@ ))); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ si@@ mp@@ le@@ Elem@@ .get@@ Data@@ Type@@ () == FLOAT_@@ 32@@ ", ((@@ si@@ mp@@ le@@ Elem@@ .get@@ Data@@ Type@@ ()) == (android.@@ renderscript.@@ Element.DataType.@@ Element.DataType.@@ Element.DataType.@@ Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ sub@@ Elem@@ Coun@@ t == 10@@ ", (s@@ ub@@ Elem@@ Coun@@ t == 10@@ )); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ .get@@ Data@@ K@@ ind@@ () == US@@ ER@@ ", ((@@ comp@@ le@@ x@@ Elem@@ .get@@ Data@@ K@@ ind@@ ()) == (android.@@ renderscript.@@ K@@ ind@@ .@@ US@@ ER@@ ))); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ si@@ mp@@ le@@ Elem@@ .get@@ Data@@ Type@@ () == N@@ ON@@ E@@ ", ((@@ comp@@ le@@ x@@ Elem@@ .get@@ Data@@ Type@@ ()) == (android.@@ renderscript.@@ N@@ ON@@ E@@ ))); for (@@ int i = 0; i < sub@@ Elem@@ Count@@ ; i++) { _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ (i@@ ) != null@@ ", ((@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ (i@@ )) != null@@ )); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Name@@ (i@@ ).@@ equals(@@ sub@@ Elem@@ Nam@@ es@@ [i]@@ )@@ ", comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Name@@ (i@@ ).@@ equals(@@ sub@@ Elem@@ Nam@@ es@@ [i]@@ )); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Array@@ Size@@ (i@@ ) == sub@@ Elem@@ Array@@ Siz@@ es@@ [i]@@ ", ((@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Array@@ Size@@ (i@@ )) == (s@@ ub@@ Elem@@ Array@@ Siz@@ es@@ [i]@@ ))); _@@ RS@@ _@@ A@@ SS@@ ER@@ T@@ ("@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Offset@@ Bytes@@ (i@@ ) == sub@@ Elem@@ Offset@@ s@@ [i]@@ ", ((@@ comp@@ le@@ x@@ Elem@@ .get@@ Sub@@ Element@@ Offset@@ Bytes@@ (i@@ )) == (s@@ ub@@ Elem@@ Offset@@ s@@ [i]@@ ))); } }
@java.lang.Override protected void te@@ ar@@ Down@@ () throw@@ s java.lang.Exception { if ((@@ po@@ st@@ Test@@ Check@@ er@@ ) != null@@ ) { po@@ st@@ Test@@ Check@@ er.@@ run@@ (); } }
private void check@@ T@@ an@@ Float2Float2@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ T@@ an@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ T@@ an@@ Float2Float2@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ T@@ an@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ T@@ an@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ T@@ an@@ Float2Float2@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ T@@ an@@ Float2Float2@@ : " + (e.toString()))); } }
@com.android.@@ mon@@ key@@ run@@ ner@@ .@@ do@@ c.@@ Mon@@ key@@ Runner@@ Ex@@ ported@@ (@@ do@@ c = "@@ Check@@ s if th@@ e s@@ pe@@ c@@ if@@ i@@ ed ob@@ ject is vi@@ si@@ b@@ le.@@ ", arg@@ s = { "@@ sele@@ ctor@@ " }@@ , return@@ s = "@@ Tr@@ u@@ e if th@@ e ob@@ ject is vi@@ si@@ b@@ le.@@ ", arg@@ Doc@@ s = { "@@ Th@@ e sele@@ ct@@ or id@@ ent@@ if@@ y@@ ing th@@ e ob@@ jec@@ t.@@ " }@@ ) public boolean vi@@ si@@ ble@@ (@@ org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Object@@ [] arg@@ s, java.lang.String[] k@@ w@@ s) { org.@@ py@@ th@@ on@@ .@@ core.@@ Arg@@ Par@@ se@@ r a@@ p = com.android.@@ mon@@ key@@ run@@ ner.@@ J@@ y@@ th@@ on@@ Utils.@@ create@@ Arg@@ Par@@ ser@@ (@@ arg@@ s, k@@ w@@ s); com.google.common.@@ b@@ ase.@@ Pre@@ con@@ di@@ tion@@ s.@@ check@@ NotNull@@ (@@ ap@@ ); java.lang.String sele@@ ct@@ or = ap@@ .get@@ String(@@ 0); View@@ No@@ de no@@ de = m@@ H@@ ierarchy@@ View@@ er.@@ find@@ View@@ (@@ sele@@ ctor@@ ); boolean re@@ t = ((@@ no@@ de != null@@ ) && (@@ no@@ d@@ e.@@ nam@@ ed@@ Proper@@ ties.@@ contain@@ s@@ Key@@ ("@@ get@@ Visi@@ b@@ ili@@ ty@@ ()@@ "@@ ))) && ("@@ V@@ I@@ SI@@ BL@@ E@@ "@@ .@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ (@@ no@@ d@@ e.@@ nam@@ ed@@ Properties@@ .get@@ ("@@ get@@ Visi@@ b@@ ili@@ ty@@ ()@@ ").@@ value@@ )); return ret@@ ; }
public native void ch@@ o@@ wn@@ (java.lang.String path@@ , int uid@@ , int g@@ id@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public java.util.@@ Se@@ t key@@ Set@@ () { return name@@ Value@@ Pa@@ ir@@ s.@@ key@@ Set@@ (); }
@java.lang.Override public void on@@ Comp@@ lete@@ (java.lang.@@ Vo@@ id a@@ Vo@@ id@@ ) { throw new junit.framework.@@ Asser@@ tion@@ Faile@@ d@@ Error@@ ("@@ Ex@@ pec@@ t@@ ing t@@ est bu@@ il@@ d to fail@@ "); }
private static native android.@@ g@@ raphic@@ s.@@ Bit@@ ma@@ p native@@ Co@@ py@@ (@@ long native@@ Bit@@ m@@ ap@@ , int native@@ Config@@ , boolean is@@ M@@ ut@@ able@@ );
public void test@@ Par@@ se@@ Int@@ () throw@@ s java.lang.Exception { java.util.@@ Loc@@ a@@ le.@@ set@@ Default@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ ); assert@@ Equal@@ s(@@ 1@@ 00@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ 00@@ 0@@ ")); assert@@ Equal@@ s(@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 0@@ ")); assert@@ Equal@@ s(@@ 1, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ ")); assert@@ Equal@@ s@@ ((@@ -1@@ ), com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ -1@@ ")); assert@@ Equal@@ s(@@ 1@@ 00@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ ,@@ 00@@ 0@@ ")); assert@@ Equal@@ s(@@ 1@@ 0000@@ 00@@ , com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ ,@@ 00@@ 0@@ ,@@ 00@@ 0@@ ")); java.util.@@ Loc@@ a@@ le.@@ set@@ Default@@ (java.util.@@ Loc@@ a@@ le.@@ I@@ TA@@ L@@ I@@ AN@@ ); assert@@ S@@ ame@@ (java.util.@@ Loc@@ a@@ le.@@ I@@ TA@@ L@@ I@@ AN@@ , java.util.@@ Loc@@ ale@@ .get@@ Default@@ ()); assert@@ Equal@@ s(@@ 1@@ 00@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ 00@@ 0@@ ")); assert@@ Equal@@ s(@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 0@@ ")); assert@@ Equal@@ s(@@ 1, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1@@ ")); assert@@ Equal@@ s@@ ((@@ -1@@ ), com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ -1@@ ")); assert@@ Equal@@ s(@@ 1@@ 00@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1.@@ 00@@ 0@@ ")); assert@@ Equal@@ s(@@ 1@@ 0000@@ 00@@ , com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ Int@@ ("@@ 1.@@ 00@@ 0.@@ 00@@ 0@@ ")); }
@java.lang.Override public java.util.List<@@ java.io.File@@ > get@@ Re@@ positor@@ ies@@ () { java.util.List<@@ java.io.File@@ > repositor@@ i@@ es = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (); java.io.File android@@ Re@@ p@@ o = new java.io.File@@ ((@@ (m@@ Sdk@@ Location@@ ) + "@@ /@@ ex@@ tr@@ as@@ /@@ android@@ /@@ repositor@@ y@@ ")); if (@@ android@@ Re@@ po@@ .is@@ Directory@@ ()) { repositor@@ i@@ es.@@ add(@@ android@@ Re@@ po@@ ); } java.io.File goog@@ le@@ Re@@ p@@ o = new java.io.File@@ ((@@ (m@@ Sdk@@ Location@@ ) + "@@ /@@ ex@@ tr@@ as@@ /@@ goog@@ le@@ /@@ repositor@@ y@@ ")); if (@@ goog@@ le@@ Re@@ po@@ .is@@ Directory@@ ()) { repositor@@ i@@ es.@@ add(@@ goog@@ le@@ Re@@ po@@ ); } return repositor@@ ies@@ ; }
@java.lang.Override public void set@@ Vo@@ i@@ ce@@ Ma@@ il@@ Number@@ (java.lang.String al@@ p@@ h@@ a@@ Tag@@ , java.lang.String vo@@ i@@ ce@@ Ma@@ il@@ Number@@ , android.os.@@ Message on@@ Comp@@ let@@ e) { android.os.@@ As@@ ync@@ Result@@ .@@ for@@ Message@@ (@@ on@@ Comp@@ lete@@ , null@@ , null@@ ); on@@ Comp@@ let@@ e.@@ send@@ To@@ Target@@ (); }
private static void de@@ lete@@ Sub@@ Element@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File d@@ ir@@ ) throw@@ s java.io.IOException { if (d@@ ir.@@ is@@ Directory@@ ()) { java.io.File@@ [] file@@ Lis@@ t = d@@ ir.@@ list@@ Fil@@ es@@ (); if (file@@ Lis@@ t == null@@ ) { throw new java.io.IO@@ Exception(("@@ Faile@@ d to li@@ s@@ t " + (@@ new com.android.sched.util.@@ loc@@ ation.@@ Directory@@ Location@@ (d@@ ir@@ ).get@@ Des@@ cription@@ ()))); } for (@@ java.io.File su@@ b : file@@ List@@ ) { com.android.sched.util.file.@@ File@@ Utils.@@ de@@ lete@@ Sub@@ Element@@ (s@@ ub@@ ); } } d@@ ir.@@ de@@ lete@@ (); }
@java.lang.Override public void chan@@ ge@@ Icc@@ Lock@@ P@@ ass@@ wor@@ d@@ (java.lang.String old@@ P@@ ass@@ wor@@ d, java.lang.String new@@ P@@ ass@@ wor@@ d, android.os.@@ Message on@@ Comp@@ let@@ e) { synchronized@@ (m@@ Lock) { if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Uicc@@ Card@@ Appli@@ c@@ ation.@@ DBG) log@@ ("@@ chan@@ ge@@ Icc@@ Lock@@ P@@ ass@@ wor@@ d@@ "); mC@@ i.@@ chan@@ ge@@ Icc@@ P@@ in@@ For@@ App@@ (@@ old@@ P@@ ass@@ wor@@ d, new@@ P@@ ass@@ wor@@ d, m@@ A@@ id, on@@ Comp@@ let@@ e); } }
private void sho@@ w@@ Pa@@ ir@@ ing@@ Error@@ Di@@ alo@@ g@@ () { new android.app.@@ Al@@ er@@ t@@ Di@@ alo@@ g.@@ Builder@@ (@@ this@@ ).set@@ I@@ con@@ (android.@@ R.@@ d@@ raw@@ ab@@ le.@@ ic@@ _@@ di@@ alo@@ g@@ _@@ al@@ er@@ t@@ ).set@@ T@@ it@@ le@@ (@@ R.@@ str@@ ing.@@ b@@ t@@ _@@ in@@ sec@@ ure@@ _@@ p@@ a@@ ir@@ ing@@ _@@ error@@ _@@ ti@@ t@@ le@@ ).set@@ Message@@ (@@ R.@@ str@@ ing.@@ b@@ t@@ _@@ in@@ sec@@ ure@@ _@@ p@@ a@@ ir@@ ing@@ _@@ error@@ _@@ message@@ ).set@@ Posi@@ tive@@ B@@ utton@@ (android.@@ R.@@ str@@ ing.@@ ok@@ , new android.content.@@ Di@@ alo@@ g@@ Interface@@ .@@ On@@ C@@ li@@ ck@@ Listener@@ () { @java.lang.Override public void on@@ C@@ li@@ ck@@ (android.content.@@ Di@@ alo@@ g@@ Inter@@ face di@@ alo@@ g@@ , int wh@@ i@@ ch@@ ) { set@@ Result@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ bluetooth.@@ RE@@ S@@ UL@@ T_@@ C@@ AN@@ CE@@ L@@ ED@@ ); fin@@ is@@ h@@ (); } }@@ ).set@@ Can@@ cel@@ able@@ (@@ false@@ ).@@ sho@@ w@@ (); }
@javax.annotation.@@ N@@ on@@ null protected int get@@ Current@@ Merg@@ er@@ Id@@ x@@ () { synchronized@@ (@@ this@@ ) { return current@@ Merg@@ er@@ Id@@ x@@ ; } }
public void set@@ Per@@ io@@ d@@ ic@@ Ad@@ verti@@ sing@@ Enabled@@ (@@ boolean enable@@ ) { try { m@@ G@@ at@@ t.@@ set@@ Per@@ io@@ d@@ ic@@ Ad@@ verti@@ sing@@ Enable@@ (@@ this@@ .m@@ Ad@@ verti@@ ser@@ Id, enable@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ bluetooth.@@ le.@@ Ad@@ verti@@ sing@@ Set@@ .@@ TAG, "@@ remo@@ t@@ e excepti@@ on - ", e); } }
public void log@@ Call@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Connec@@ tion c@@ , int call@@ Log@@ Typ@@ e) { final java.lang.String num@@ b@@ er = c@@ .get@@ Addres@@ s(); final long d@@ ate = c@@ .get@@ Create@@ Time@@ (); final long d@@ ur@@ ation = c@@ .get@@ D@@ ur@@ ation@@ Milli@@ s(); final int dis@@ connect@@ C@@ au@@ se = c@@ .get@@ Dis@@ connect@@ C@@ au@@ se@@ (); final com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phon@@ e phon@@ e = c@@ .get@@ Call@@ ().get@@ Phone@@ (); final com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Call@@ er@@ Info c@@ i = get@@ Call@@ er@@ Info@@ From@@ Connection@@ (c@@ ); final java.lang.String log@@ Num@@ b@@ er = get@@ Log@@ Number@@ (c@@ , c@@ i@@ ); if (com.android.@@ phon@@ e.@@ Call@@ Logg@@ er.@@ DBG) { log@@ ((@@ (("@@ - on@@ Dis@@ connect@@ ()@@ : log@@ Num@@ b@@ er set to@@ :@@ " + (com.android.@@ phon@@ e.@@ Phone@@ Utils.@@ to@@ Log@@ S@@ a@@ f@@ e@@ Phone@@ Number@@ (@@ log@@ Number@@ ))) + ", num@@ b@@ er set to@@ : ") + (com.android.@@ phon@@ e.@@ Phone@@ Utils.@@ to@@ Log@@ S@@ a@@ f@@ e@@ Phone@@ Number@@ (@@ num@@ ber@@ )))); } final int pres@@ ent@@ ation = get@@ P@@ res@@ ent@@ ation@@ (c@@ , c@@ i@@ ); final boolean is@@ O@@ t@@ as@@ p@@ Num@@ b@@ er = (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Telephony@@ Capabili@@ ties.@@ sup@@ port@@ s@@ O@@ t@@ as@@ p@@ (@@ phon@@ e@@ )) && (@@ phon@@ e.@@ is@@ O@@ t@@ a@@ S@@ p@@ Number@@ (@@ num@@ ber@@ )); if (!@@ is@@ O@@ t@@ as@@ p@@ Number@@ ) { log@@ Call@@ (c@@ i@@ , log@@ Number@@ , pres@@ ent@@ ation@@ , call@@ Log@@ Type, date@@ , d@@ ur@@ ation@@ , dis@@ connect@@ C@@ au@@ se@@ ); } }
public void exec@@ v@@ (java.lang.String fil@@ en@@ ame@@ , java.lang.String[] arg@@ v@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@org.junit.Test public void e@@ mpty@@ Scan@@ Results@@ () { java.lang.String[] ss@@ id@@ s = new java.lang.String@@ [0@@ ]; java.lang.String[] b@@ ss@@ id@@ s = new java.lang.String@@ [0@@ ]; int@@ [] f@@ re@@ q@@ s = new int@@ [0@@ ]; java.lang.String[] cap@@ s = new java.lang.String@@ [0@@ ]; int@@ [] le@@ vel@@ s = new int@@ [0@@ ]; int@@ [] sec@@ ur@@ iti@@ es = new int@@ [0@@ ]; com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ Scan@@ D@@ eta@@ il@@ s@@ And@@ W@@ if@@ i@@ Config@@ s scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ s = com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ set@@ up@@ Scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ Store@@ (s@@ s@@ id@@ s, b@@ ss@@ id@@ s, f@@ re@@ q@@ s, cap@@ s, le@@ vel@@ s, sec@@ ur@@ i@@ ties@@ , m@@ W@@ if@@ i@@ Config@@ Manager@@ , mC@@ lock@@ ); java.util.List<@@ com.android.server.@@ w@@ if@@ i.@@ Scan@@ D@@ eta@@ il@@ > scan@@ D@@ eta@@ il@@ s = scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ s.get@@ Scan@@ D@@ eta@@ il@@ s(); java.util.@@ Hash@@ Set@@ <java.lang.String@@ > b@@ l@@ ack@@ li@@ s@@ t = new java.util.@@ Hash@@ Set@@ <java.lang.String@@ >(); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation c@@ and@@ id@@ ate = m@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ .@@ sele@@ ct@@ Network@@ (s@@ can@@ D@@ eta@@ il@@ s, b@@ l@@ ack@@ list@@ , m@@ W@@ if@@ i@@ Info@@ , false@@ , true@@ , false@@ ); assert@@ Equal@@ s("@@ Ex@@ pec@@ t null config@@ ur@@ ation@@ ", null@@ , c@@ and@@ id@@ ate@@ ); }
@java.lang.Override public void register@@ For@@ E@@ id@@ Read@@ y@@ (android.os.@@ Handle@@ r h@@ , int wh@@ at@@ , java.lang.Object ob@@ j@@ ) { synchronized@@ (m@@ Lock) { android.os.@@ Reg@@ is@@ tr@@ an@@ t r = new android.os.@@ Reg@@ is@@ tr@@ ant@@ (@@ h@@ , wh@@ at@@ , ob@@ j@@ ); m@@ Sim@@ State@@ Load@@ ed@@ Reg@@ is@@ tr@@ an@@ ts.@@ add@@ (r@@ ); } }
@org.junit.Test public void test@@ Comp@@ ile@@ 0@@ 16@@ () throw@@ s java.lang.Exception { java.lang.String package@@ Name = "@@ com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ test@@ 0@@ 16@@ .@@ jack@@ "; java.lang.String class@@ Pre@@ fi@@ x = (@@ package@@ Nam@@ e.@@ re@@ pla@@ ce@@ (@@ '@@ .@@ '@@ , '@@ _@@ '@@ )) + "@@ _@@ "; java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > in@@ put = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ S@@ wit@@ ch@@ 2@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ S@@ yn@@ th@@ et@@ ic@@ S@@ wit@@ ch@@ m@@ ap@@ Class@@ -@@ *@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), true@@ )); check@@ Comp@@ ile@@ d@@ Code@@ (@@ package@@ Name, input@@ ); }
@@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Null@@ able private java.lang.String gu@@ ess@@ Resource@@ Name@@ (@@ com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ valid@@ ation.@@ P@@ si@@ M@@ etho@@ d method@@ ) { if ((m@@ ethod@@ .get@@ Return@@ Type@@ ()) == (@@ P@@ si@@ Type.@@ V@@ O@@ ID@@ )) { return null@@ ; } com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ valid@@ ation.@@ R@@ est@@ Sign@@ ature@@ In@@ spec@@ tion@@ .@@ R@@ est@@ M@@ etho@@ d r@@ est@@ M@@ etho@@ d = get@@ Default@@ R@@ est@@ Method@@ (m@@ ethod@@ ); com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ pro@@ jec@@ t.@@ Pro@@ ject pro@@ ject@@ ; try { pro@@ ject = method@@ .get@@ Cont@@ ain@@ ing@@ File@@ ().get@@ Project@@ (); } catch (@@ com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ valid@@ ation.@@ P@@ si@@ In@@ valid@@ Element@@ Access@@ Exception e) { com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ valid@@ ation.@@ LOG@@ .@@ error@@ (("@@ Error get@@ t@@ ing pro@@ ject wit@@ h param@@ et@@ er " + (m@@ ethod@@ .get@@ Text@@ ()@@ )), e); return null@@ ; } return r@@ est@@ Method@@ .@@ gu@@ ess@@ Resource@@ Name@@ (pro@@ ject@@ , method@@ ); }
public void test@@ In@@ spec@@ t@@ S@@ s@@ l@@ B@@ e@@ for@@ e@@ Connec@@ t@@ () throw@@ s java.lang.Exception { Test@@ SSL@@ Context test@@ SSL@@ Context = create@@ Default@@ Test@@ SSL@@ Context@@ (); server.@@ u@@ se@@ H@@ ttp@@ s(@@ test@@ SSL@@ Context.@@ server@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ (), false@@ ); server.@@ en@@ qu@@ e@@ ue@@ (@@ new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ()); server.@@ play@@ (); javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connec@@ tion connec@@ tion = ((@@ javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connection@@ ) (@@ server.@@ get@@ Ur@@ l@@ ("@@ /@@ ").@@ open@@ Connection@@ ())); connection@@ .set@@ SSL@@ Socket@@ Fa@@ ctory@@ (@@ test@@ SSL@@ Context.@@ c@@ lient@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ ()); assert@@ NotNull@@ (@@ connection@@ .get@@ Host@@ name@@ V@@ er@@ if@@ ier@@ ()); try { connection@@ .get@@ Local@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } try { connection@@ .get@@ Server@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } try { connection@@ .get@@ Cip@@ her@@ Su@@ ite@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } try { connection@@ .get@@ P@@ e@@ er@@ P@@ r@@ in@@ c@@ ip@@ al@@ (); fail@@ (); } catch (java.lang.@@ Illegal@@ State@@ Exception expected@@ ) { } }
private static void write@@ Int@@ (@@ java.io.@@ Output@@ Stream o@@ s, int valu@@ e) throw@@ s java.io.IOException { byte@@ [] byte@@ s = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (@@ 4@@ ).@@ put@@ Int@@ (@@ value@@ ).@@ array@@ (); os.@@ write@@ (@@ byte@@ s); }
@java.lang.Override public int com@@ par@@ e@@ (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ it@@ e a@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ it@@ e b@@ ) { return com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ or@@ t.@@ SIZ@@ E_@@ B@@ Y@@ _S@@ I@@ Z@@ E@@ .@@ com@@ par@@ e@@ (b@@ .get@@ To@@ t@@ al@@ Size@@ ().get@@ Size@@ (), a@@ .get@@ To@@ t@@ al@@ Size@@ ().get@@ Size@@ ()); }
public void test@@ As@@ in@@ h@@ () { check@@ As@@ in@@ h@@ FloatFloat@@ (); check@@ As@@ in@@ h@@ Float2Float2@@ (); check@@ As@@ in@@ h@@ Float3Float3@@ (); check@@ As@@ in@@ h@@ Float4Float4@@ (); }
public static boolean is@@ U@@ sing@@ D@@ dm@@ Pro@@ to@@ col@@ () { return "@@ ddm@@ "@@ .@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ (com.android.@@ hierarchyviewerlib.@@ H@@ ierarchy@@ View@@ er@@ Dire@@ ctor@@ .@@ s@@ H@@ v@@ Pro@@ to@@ En@@ v@@ Var@@ ); }
private android.net.@@ IN@@ et@@ d get@@ Net@@ d@@ () { synchronized@@ (m@@ Lock) { if ((m@@ Net@@ d@@ ) == null@@ ) { m@@ Net@@ d = android.net.@@ util.@@ Net@@ d@@ Service@@ .get@@ (1@@ 00@@ 0); } return m@@ Net@@ d@@ ; } }
public boolean can@@ cel@@ Connec@@ t@@ () { synchronized@@ (m@@ Lock) { if (!(@@ check@@ Supplicant@@ P2p@@ Iface@@ And@@ Log@@ Fail@@ ure@@ ("@@ can@@ cel@@ Connec@@ t@@ "@@ ))) return false@@ ; com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ <@@ java.lang.@@ Vo@@ id@@ > result = new com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ ("@@ can@@ cel@@ Connec@@ t@@ ()@@ "); try { result.@@ set@@ Result@@ (m@@ I@@ Supplicant@@ P2p@@ Iface@@ .@@ can@@ cel@@ Connec@@ t@@ ()); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, ("@@ I@@ Supplicant@@ P2p@@ I@@ face excepti@@ on@@ : " + e@@ )); sup@@ plicant@@ Service@@ Di@@ ed@@ Handler@@ (); } return result.@@ is@@ Su@@ ccess@@ (); } }
protected static int get@@ Port@@ (java.io.FileDescriptor s@@ ock@@ ) throw@@ s java.io.IOException { int por@@ t = -1@@ ; try { por@@ t = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (android.@@ system.@@ O@@ s.get@@ s@@ ock@@ name@@ (s@@ ock@@ )@@ ).get@@ Port@@ (); } catch (android.@@ system.@@ ErrnoException e) { e.@@ r@@ e@@ throw@@ As@@ IO@@ Exception@@ (); } if (@@ por@@ t == (-1@@ )) { throw new java.lang.Illegal@@ State@@ Exception("@@ S@@ om@@ et@@ h@@ ing h@@ app@@ en@@ ed while try@@ ing to ge@@ t port@@ "); } return port@@ ; }
@java.lang.Override public void run@@ () { java.util.List<@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Can@@ va@@ s@@ Selection@@ > sele@@ c@@ tion = m@@ Selection@@ Manager.get@@ Selection@@ s(); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Can@@ va@@ s@@ Sele@@ c@@ tion can@@ va@@ s@@ Sele@@ c@@ tion = sele@@ ction@@ .get@@ (@@ 0); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Can@@ va@@ s@@ View@@ Info in@@ fo = can@@ va@@ s@@ Selection@@ .get@@ View@@ Info@@ (); java.lang.Object view@@ Ob@@ ject = info@@ .get@@ View@@ Object@@ (); if (@@ view@@ Ob@@ ject != null@@ ) { com.android.@@ lay@@ out@@ lib.@@ api.@@ Lay@@ out@@ S@@ c@@ en@@ e s@@ c@@ en@@ e = m@@ View@@ H@@ ierarchy@@ .get@@ S@@ c@@ en@@ e@@ (); s@@ c@@ en@@ e.@@ an@@ im@@ ate@@ (@@ view@@ Object@@ , "@@ test@@ an@@ im@@ ", false@@ , new com.android.@@ lay@@ out@@ lib.@@ api.@@ Lay@@ out@@ S@@ c@@ en@@ e.@@ I@@ An@@ im@@ ation@@ Listener@@ () { private int coun@@ t = 0; public void on@@ New@@ F@@ rame@@ (@@ java.@@ aw@@ t.@@ im@@ age.@@ Buffer@@ ed@@ Im@@ age im@@ age@@ ) { try { javax.@@ im@@ age@@ io.@@ Image@@ IO@@ .@@ write@@ (@@ im@@ age@@ , "@@ p@@ n@@ g@@ ", new java.io.File@@ ((("@@ /@@ User@@ s@@ /@@ x@@ av@@ /@@ Des@@ k@@ to@@ p@@ /@@ an@@ im@@ /@@ an@@ im@@ " + ((@@ count@@ )@@ ++@@ )) + "@@ .@@ p@@ n@@ g@@ "@@ ))); } catch (java.io.IOException e) { e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } } public boolean is@@ Can@@ ce@@ le@@ d@@ () { return false@@ ; } public void do@@ ne@@ (com.android.@@ lay@@ out@@ lib.@@ api.@@ S@@ c@@ en@@ e@@ Res@@ ult result@@ ) { } }); } }
@java.lang.Override protected boolean is@@ Sup@@ ported@@ () throw@@ s java.lang.Exception { return (@@ super@@ .is@@ Sup@@ ported@@ ()) && (@@ can@@ U@@ se@@ M@@ eter@@ ed@@ Network@@ ()); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); when(m@@ Res@@ ources@@ .get@@ Integ@@ er(@@ R@@ .@@ int@@ e@@ g@@ er.@@ config@@ _@@ w@@ if@@ i@@ _@@ framework@@ _@@ w@@ if@@ i@@ _@@ s@@ core@@ _@@ low@@ _@@ r@@ s@@ si@@ _@@ th@@ res@@ ho@@ l@@ d@@ _@@ 2@@ 4@@ G@@ H@@ z@@ )).@@ thenReturn@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ctor@@ Test.@@ M@@ IN@@ _@@ Q@@ U@@ AL@@ I@@ FI@@ ED@@ _@@ 2@@ 4@@ ); when(m@@ Res@@ ources@@ .get@@ Integ@@ er(@@ R@@ .@@ int@@ e@@ g@@ er.@@ config@@ _@@ w@@ if@@ i@@ _@@ framework@@ _@@ w@@ if@@ i@@ _@@ s@@ core@@ _@@ low@@ _@@ r@@ s@@ si@@ _@@ th@@ res@@ ho@@ l@@ d@@ _@@ 5@@ G@@ H@@ z@@ )).@@ thenReturn@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ctor@@ Test.@@ M@@ IN@@ _@@ Q@@ U@@ AL@@ I@@ FI@@ ED@@ _@@ 5@@ ); when(m@@ Res@@ ources@@ .get@@ Integ@@ er(@@ R@@ .@@ int@@ e@@ g@@ er.@@ config@@ _@@ w@@ if@@ i@@ _@@ framework@@ _@@ 5@@ G@@ H@@ z@@ _@@ pre@@ ference@@ _@@ b@@ oo@@ st@@ _@@ fa@@ ctor@@ )).@@ thenReturn@@ (1@@ 00@@ ); m@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ct@@ or = new com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ctor@@ (m@@ Res@@ ources@@ ); }
@java.lang.Override protected void p@@ a@@ int@@ Comp@@ on@@ ent@@ (@@ java.@@ aw@@ t.@@ G@@ raphic@@ s g@@ ) { super@@ .@@ p@@ a@@ int@@ Comp@@ on@@ ent@@ (@@ g@@ ); int y@@ Po@@ s = 0; for (@@ java.@@ aw@@ t.@@ Im@@ age im@@ g : my@@ S@@ c@@ ale@@ d@@ Im@@ ag@@ es) { g.@@ d@@ raw@@ Image@@ (@@ im@@ g@@ , 0, y@@ Po@@ s, null@@ ); y@@ Po@@ s +@@ = (@@ im@@ g.@@ get@@ He@@ ig@@ ht@@ (@@ null@@ )) + (@@ com.google.gct.@@ ide@@ a.@@ s@@ am@@ pl@@ es.@@ S@@ am@@ ple@@ Pre@@ view@@ P@@ an@@ e@@ l.@@ P@@ AD@@ D@@ ING@@ ); } }
public int@@ [] get@@ Ad@@ n@@ Record@@ s@@ Size@@ (@@ int e@@ f@@ id@@ ) { if (@@ DBG) log@@ d@@ (("@@ get@@ Ad@@ n@@ Record@@ s@@ Size@@ : e@@ f@@ id@@ =@@ " + e@@ f@@ id@@ )); synchronized@@ (m@@ Lock) { check@@ Thread@@ (); re@@ cor@@ d@@ Siz@@ e = new int@@ [@@ 3@@ ]; java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an statu@@ s = new java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an@@ (@@ false@@ ); android.os.@@ Message res@@ pon@@ se = m@@ Base@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ c@@ dm@@ a.@@ EVEN@@ T_@@ G@@ E@@ T_@@ SIZ@@ E_@@ D@@ ON@@ E, stat@@ us@@ ); phon@@ e.get@@ Icc@@ File@@ Handler@@ ().get@@ E@@ F@@ Line@@ ar@@ Record@@ Size@@ (e@@ f@@ id, res@@ ponse@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ c@@ dm@@ a.@@ EVEN@@ T_@@ G@@ E@@ T_@@ SIZ@@ E_@@ D@@ ON@@ E, stat@@ us@@ ); phon@@ e.get@@ Icc@@ File@@ Handler@@ ().get@@ E@@ F@@ Line@@ ar@@ Record@@ Size@@ (e@@ f@@ id, res@@ ponse@@ ); wait@@ For@@ Result@@ (); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { log@@ d@@ (@@ "@@ int@@ er@@ rup@@ ted while try@@ ing to lo@@ ad f@@ ro@@ m th@@ e R@@ U@@ I@@ M@@ "); } } return re@@ cor@@ d@@ Size@@ ; }
@java.lang.Override public java.nio.Byte@@ Buff@@ er put@@ Short@@ (@@ short valu@@ e) { check@@ Is@@ Ac@@ ces@@ si@@ ble@@ (); if (is@@ Read@@ On@@ ly@@ ) { throw new java.nio.@@ Read@@ On@@ ly@@ Buffer@@ Exception@@ (); } int new@@ Posi@@ tion = (@@ posi@@ tion@@ ) + (@@ libcore.io.@@ Size@@ Of@@ .@@ S@@ H@@ OR@@ T@@ ); if (@@ new@@ Posi@@ tion > (@@ li@@ m@@ it@@ )) { throw new java.nio.@@ Buffer@@ O@@ ver@@ f@@ low@@ Exception@@ (); } this@@ .@@ b@@ lock@@ .@@ po@@ ke@@ Short@@ (((@@ offset@@ ) + (@@ posi@@ tion@@ )), value@@ , or@@ der@@ ); posi@@ tion = new@@ Posi@@ tion@@ ; return this@@ ; }
@com.android.annotations.NonNull java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l get@@ Client@@ Monitor@@ ing@@ Socket@@ () { return m@@ Socket@@ Channel@@ ; }
public static com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Co@@ u@@ n@@ try@@ Zone@@ T@@ re@@ e create@@ (com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ pro@@ to.@@ Co@@ u@@ n@@ try@@ Z@@ on@@ es@@ File@@ .@@ Co@@ u@@ n@@ try co@@ u@@ n@@ try@@ , java.@@ tim@@ e.@@ In@@ stan@@ t start@@ In@@ c@@ lu@@ si@@ ve@@ , java.@@ tim@@ e.@@ In@@ stan@@ t end@@ Ex@@ c@@ lu@@ si@@ ve@@ ) { com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ TimeZone@@ Name@@ s time@@ Zone@@ Name@@ s = com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ TimeZone@@ Nam@@ es@@ .get@@ Instance@@ (@@ U@@ Loc@@ a@@ le.@@ US@@ ); java.util.List<@@ com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ pro@@ to.@@ Co@@ u@@ n@@ try@@ Z@@ on@@ es@@ File@@ .@@ TimeZone@@ M@@ app@@ ing@@ > time@@ Zone@@ M@@ app@@ ing@@ s = co@@ u@@ n@@ try@@ .get@@ TimeZone@@ M@@ app@@ ing@@ s@@ List@@ (); java.util.List<@@ com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Info@@ > z@@ one@@ Info@@ s = new java.util.ArrayList<@@ >(); for (@@ int i = 0; i < (@@ time@@ Zone@@ M@@ app@@ ing@@ s.@@ size@@ ()); i++) { com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ pro@@ to.@@ Co@@ u@@ n@@ try@@ Z@@ on@@ es@@ File@@ .@@ TimeZone@@ M@@ app@@ ing time@@ Zone@@ M@@ app@@ ing = time@@ Zone@@ M@@ app@@ ing@@ s.get@@ (i@@ ); int pri@@ or@@ it@@ y = time@@ Zone@@ M@@ app@@ ing.@@ get@@ Pri@@ or@@ ity@@ (); com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Bas@@ ic@@ Time@@ Z@@ on@@ e time@@ Z@@ on@@ e = ((@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Bas@@ ic@@ Time@@ Z@@ on@@ e) (@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Time@@ Z@@ on@@ e.get@@ TimeZone@@ (@@ time@@ Zone@@ M@@ app@@ ing.@@ get@@ Id@@ ()))); if (@@ time@@ Z@@ on@@ e == (@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Time@@ Z@@ on@@ e.@@ UN@@ K@@ NO@@ W@@ N@@ _@@ Z@@ ON@@ E@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ Un@@ k@@ no@@ w@@ n z@@ on@@ e id@@ : " + time@@ Zone@@ )); } com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Info z@@ one@@ Info = com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Info.@@ create@@ (@@ time@@ Zone@@ Nam@@ es@@ , time@@ Zone@@ , pri@@ or@@ ity@@ , start@@ In@@ c@@ lu@@ si@@ ve@@ , end@@ Ex@@ c@@ lu@@ si@@ ve@@ ); z@@ one@@ Info@@ s.@@ add(@@ z@@ one@@ Info@@ ); } return com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Co@@ u@@ n@@ try@@ Zone@@ T@@ re@@ e.@@ create@@ (@@ co@@ u@@ n@@ try@@ .get@@ I@@ so@@ Code@@ (), z@@ one@@ Info@@ s); }
@java.lang.Override protected void on@@ Res@@ um@@ e@@ () { super@@ .@@ on@@ Res@@ um@@ e@@ (); try@@ Get@@ Access@@ or@@ y@@ (@@ false@@ ); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public void icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Bas@@ ic@@ Channel@@ (@@ int c@@ la@@ , int command@@ , int p@@ 1, int p@@ 2, int p@@ 3@@ , java.lang.String data@@ , android.os.@@ Message res@@ ponse@@ ) { if ((m@@ Uicc@@ Profile@@ ) != null@@ ) { mC@@ i.@@ icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Bas@@ ic@@ Channel@@ (c@@ la@@ , command@@ , p@@ 1, p@@ 2, p@@ 3@@ , data@@ , m@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ .@@ EVEN@@ T_@@ TR@@ AN@@ S@@ M@@ I@@ T_@@ AP@@ D@@ U@@ _@@ B@@ A@@ SI@@ C@@ _C@@ H@@ AN@@ NE@@ L_@@ D@@ ON@@ E, res@@ ponse@@ )); } else { if ((m@@ Uicc@@ Profile@@ ) != null@@ ) { m@@ Uicc@@ Pro@@ file.@@ icc@@ Trans@@ m@@ it@@ Ap@@ du@@ Bas@@ ic@@ Channel@@ (c@@ la@@ , command@@ , p@@ 1, p@@ 2, p@@ 3@@ , data@@ , res@@ ponse@@ ); } }
public void test@@ De@@ code@@ U@@ int@@ 8@@ () throw@@ s java.io.IOException { final java.io.@@ ByteArray@@ Input@@ Stream in@@ put = new java.io.@@ ByteArray@@ InputStream@@ (@@ new byte@@ []{ (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (1@@ 2@@ 7@@ )), (@@ (@@ byte@@ ) (1@@ 2@@ 8@@ )), (@@ (@@ byte@@ ) (@@ 25@@ 5@@ )) }); final short@@ [] expec@@ ted = new short@@ []{ 0, 12@@ 7@@ , 12@@ 8@@ , 25@@ 5 }; com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ De@@ co@@ der d = new com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ De@@ co@@ der@@ (in@@ put@@ ); for (@@ short u@@ 8 : expected@@ ) { assert@@ Equal@@ s(@@ u@@ 8@@ , ((@@ d.@@ u@@ int@@ 8@@ ()) & 25@@ 5@@ )); } }
public java.lang.String get@@ Time@@ () { return m@@ Time@@ ; }
private void valid@@ ate@@ Attribute@@ In@@ stru@@ ction@@ s@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Merg@@ ing@@ Re@@ por@@ t.@@ Builder merg@@ ing@@ Re@@ port@@ , com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Elem@@ ent xml@@ Element@@ ) { for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <@@ com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ No@@ d@@ e.@@ Node@@ Name, com.android.@@ m@@ an@@ if@@ merger.@@ Attribute@@ Oper@@ ation@@ Type@@ > at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try : xml@@ Element.@@ get@@ Attribute@@ Oper@@ ation@@ s@@ ()) { com.google.common.@@ b@@ ase.@@ Option@@ al@@ <@@ com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Attribute@@ > at@@ tri@@ b@@ ut@@ e = xml@@ Element.@@ get@@ Attribute@@ (@@ at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try@@ .get@@ Key@@ ()); switch (@@ at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try@@ .get@@ Value@@ ()) { case S@@ TR@@ IC@@ T : break@@ ; case RE@@ M@@ O@@ V@@ E : if (@@ at@@ tribute@@ .is@@ P@@ res@@ ent@@ ()) { merg@@ ing@@ Re@@ por@@ t.@@ add@@ Error@@ (@@ java.lang.String@@ .@@ for@@ mat@@ (("@@ too@@ l@@ s@@ :@@ remo@@ v@@ e s@@ pe@@ c@@ if@@ i@@ ed at line@@ :@@ %@@ d for at@@ tri@@ b@@ ut@@ e %@@ s, bu@@ t " + ("@@ at@@ tri@@ b@@ ut@@ e al@@ s@@ o dec@@ l@@ ar@@ ed at line@@ :@@ %@@ d, " + "@@ do y@@ o@@ u w@@ an@@ t to u@@ se too@@ l@@ s@@ :@@ re@@ pl@@ ac@@ e in@@ s@@ te@@ ad ?@@ "@@ )), xml@@ Element.@@ get@@ Posi@@ tion@@ ().get@@ Line@@ (), at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try@@ .get@@ Key@@ (), at@@ tribute@@ .get@@ ().get@@ Posi@@ tion@@ ().get@@ Line@@ ())); } break@@ ; case RE@@ P@@ L@@ AC@@ E : if (!(@@ at@@ tribute@@ .is@@ P@@ res@@ ent@@ ())) { merg@@ ing@@ Re@@ por@@ t.@@ add@@ Error@@ (@@ java.lang.String@@ .@@ for@@ mat@@ (("@@ too@@ l@@ s@@ :@@ re@@ pl@@ ac@@ e s@@ pe@@ c@@ if@@ i@@ ed at line@@ :@@ %@@ d for at@@ tri@@ b@@ ut@@ e %@@ s, bu@@ t " + "@@ n@@ o new valu@@ e s@@ pe@@ c@@ if@@ i@@ ed@@ "), xml@@ Element.@@ get@@ Posi@@ tion@@ ().get@@ Line@@ (), at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try@@ .get@@ Key@@ ())); } break@@ ; default : throw new java.lang.Illegal@@ State@@ Exception(("@@ Un@@ handle@@ d Attribute@@ Oper@@ ation@@ Type " + (@@ at@@ tribute@@ Oper@@ ation@@ Type@@ E@@ n@@ try@@ .get@@ Value@@ ()))); } } }
protected void Lib@@ To@@ Imp@@ ort@@ St@@ ati@@ c@@ Lib@@ s(@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.lang.String> arg@@ s, @javax.annotation.@@ N@@ on@@ null java.io.File@@ [] in@@ ) throw@@ s java.lang.Exception { for (@@ java.io.File static@@ li@@ b : in@@ ) { args.@@ add@@ ("@@ -@@ import@@ "); args.@@ add@@ (@@ static@@ lib@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } for (@@ java.io.File static@@ Li@@ b : static@@ Lib@@ s) { args.@@ add@@ ("@@ -@@ -@@ import@@ "); args.@@ add@@ (@@ static@@ Lib@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } }
public static <@@ T@@ > void run@@ Bas@@ ic@@ I@@ ter@@ ation@@ Test@@ s(@@ java.util.@@ S@@ pli@@ terator@@ <@@ T@@ > s@@ pli@@ terator@@ , java.util.List<@@ T@@ > expected@@ Element@@ s) { java.util.List<@@ T@@ > re@@ cor@@ der = new java.util.ArrayList<@@ T@@ >@@ (@@ expected@@ Element@@ s.@@ size@@ ()); java.util.@@ f@@ un@@ ction@@ .@@ Con@@ s@@ um@@ er@@ <@@ T@@ > cons@@ um@@ er = (@@ T valu@@ e) -@@ > re@@ cor@@ d@@ er.@@ add(@@ valu@@ e); boolean d@@ id@@ Ad@@ v@@ an@@ ce = s@@ pli@@ terator@@ .@@ try@@ Ad@@ v@@ an@@ ce@@ (@@ cons@@ um@@ er@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s@@ ((@@ !@@ (@@ expected@@ Element@@ s.@@ isEmpty@@ ()@@ )), d@@ id@@ Ad@@ v@@ an@@ ce@@ ); if (@@ 0 < (@@ expected@@ Element@@ s.@@ size@@ ())) { junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ expected@@ Element@@ s.get@@ (0@@ ), re@@ cor@@ d@@ er.get@@ (0@@ )); } s@@ pli@@ terator@@ .@@ for@@ Each@@ Re@@ main@@ ing@@ (@@ cons@@ um@@ er@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ expected@@ Element@@ s, re@@ cor@@ der@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (s@@ pli@@ terator@@ .@@ try@@ Ad@@ v@@ an@@ ce@@ (@@ cons@@ um@@ er@@ )); s@@ pli@@ terator@@ .@@ for@@ Each@@ Re@@ main@@ ing@@ (@@ ( T@@ ) -@@ > junit.framework.Assert.@@ fail@@ ()); }
protected void re@@ pla@@ ce@@ With@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ I@@ te@@ m i@@ tem@@ ) { m@@ Fil@@ es.@@ clear@@ (); m@@ Fil@@ es.@@ add@@ All@@ (i@@ tem@@ .m@@ Fil@@ es@@ ); }
@javax.annotation.@@ N@@ on@@ null static com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Annot@@ ation@@ S@@ pe@@ c@@ if@@ ic@@ ation annot@@ ation@@ (java.lang.String annot@@ ation@@ Name, boolean has@@ Name@@ Ne@@ g@@ ator@@ ) { com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Name@@ S@@ pe@@ c@@ if@@ ic@@ ation name = com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ (@@ annot@@ ation@@ Name, com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ Filter@@ Se@@ par@@ ator@@ .@@ C@@ LA@@ SS@@ ); nam@@ e.@@ set@@ Ne@@ g@@ ator@@ (@@ has@@ Name@@ Ne@@ g@@ ator@@ ); return new com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Annot@@ ation@@ S@@ pe@@ c@@ if@@ ic@@ ation@@ (@@ name@@ ); }
@java.lang.Override public void get@@ C@@ ell@@ Info@@ List@@ (android.os.@@ Message result@@ , android.os.@@ W@@ or@@ k@@ S@@ our@@ ce work@@ Source@@ ) { work@@ S@@ our@@ ce = get@@ De@@ a@@ f@@ ult@@ W@@ or@@ k@@ Source@@ I@@ f@@ In@@ valid@@ (@@ work@@ Source@@ ); android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ G@@ E@@ T_@@ CE@@ L@@ L_@@ IN@@ F@@ O@@ _@@ LIS@@ T, result@@ , work@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); } try { radioProx@@ y@@ .get@@ C@@ ell@@ Info@@ List@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ get@@ C@@ ell@@ Info@@ List@@ ", e); } } }
public void remove@@ Log@@ C@@ at@@ Listener@@ (com.android.@@ ddmlib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Listen@@ er l@@ ) { m@@ Listener@@ s.@@ remove@@ (@@ l@@ ); }
@org.junit.Test public void core@@ To@@ J@@ ay@@ ce@@ From@@ J@@ ar@@ () throw@@ s java.lang.Exception { com.android.@@ j@@ il@@ l.@@ Option@@ s option@@ s = new com.android.@@ j@@ il@@ l.@@ Option@@ s(); option@@ s.@@ set@@ Bin@@ ary@@ File@@ (@@ new java.io.File@@ ((@@ (com.android.jack.@@ test.@@ Test@@ s@@ Properties@@ .get@@ Android@@ Root@@ Dir@@ ().get@@ Path@@ ()) + "@@ /@@ out@@ /@@ target@@ /@@ common@@ /@@ ob@@ j@@ /@@ J@@ AV@@ A@@ _@@ L@@ I@@ B@@ R@@ AR@@ I@@ E@@ S@@ /@@ core@@ _@@ int@@ er@@ m@@ ed@@ i@@ at@@ es@@ /@@ class@@ es.@@ ja@@ r@@ "@@ ))); option@@ s.@@ set@@ Ver@@ bo@@ se@@ (@@ true@@ ); option@@ s.@@ contain@@ er = Cont@@ ain@@ er@@ Type.@@ DI@@ R@@ ; option@@ s.@@ output@@ Dir@@ Or@@ Z@@ i@@ p = com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ TestTools.@@ create@@ Temp@@ Dir@@ ("@@ core@@ _@@ ", "@@ _@@ d@@ ir@@ "); new com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ (o@@ ption@@ s, "@@ 0.@@ 1@@ ").@@ process@@ (o@@ ption@@ s.get@@ Bin@@ ary@@ File@@ ()); }
@java.lang.Override public void write@@ (@@ java.io.@@ Output@@ Stream out@@ ) throw@@ s java.io.IOException { try { si@@ g@@ ne@@ r = new com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ W@@ ho@@ le@@ File@@ Sign@@ er@@ Output@@ Stream@@ (@@ out, output@@ Stream@@ ); java.util.@@ ja@@ r.@@ J@@ ar@@ Output@@ Stream output@@ J@@ a@@ r = new java.util.@@ ja@@ r.@@ J@@ ar@@ Output@@ Stream@@ (@@ sign@@ er@@ ); int has@@ h = com.android.@@ sign@@ ap@@ k.@@ Sign@@ Apk@@ .get@@ Dig@@ est@@ Algorith@@ m@@ (@@ public@@ Key@@ ); long tim@@ est@@ am@@ p = (@@ public@@ Key@@ .get@@ Not@@ B@@ e@@ for@@ e@@ ().get@@ Time@@ ()) + (@@ 3@@ 6@@ 00@@ L * 1@@ 00@@ 0); java.util.@@ ja@@ r.@@ M@@ an@@ if@@ est m@@ an@@ if@@ est = com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ add@@ Dig@@ est@@ s@@ To@@ M@@ an@@ if@@ est@@ (in@@ put@@ J@@ ar@@ , has@@ h@@ ); com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ copy@@ Fil@@ es@@ (m@@ an@@ if@@ est@@ , input@@ J@@ ar@@ , output@@ J@@ ar@@ , tim@@ est@@ am@@ p@@ , 0); com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ add@@ O@@ t@@ ac@@ er@@ t@@ (@@ output@@ J@@ ar@@ , public@@ Key@@ File@@ , tim@@ est@@ am@@ p@@ , m@@ an@@ if@@ est@@ , has@@ h@@ ); com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ sign@@ File@@ (m@@ an@@ if@@ est@@ , new java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ []{ public@@ Ke@@ y }@@ , new java.security.@@ Pri@@ v@@ ate@@ Key@@ []{ private@@ Ke@@ y }@@ , output@@ J@@ ar@@ , false@@ ); sign@@ er.@@ not@@ if@@ y@@ C@@ lo@@ sing@@ (); output@@ J@@ ar.@@ close(); sign@@ er.@@ fin@@ is@@ h@@ (); } catch (java.lang.Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
public void request@@ (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er p@@ r@@ int@@ er, boolean h@@ ig@@ h@@ Pri@@ or@@ ity@@ , com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ On@@ Local@@ P@@ r@@ int@@ er@@ Capabili@@ ti@@ es on@@ Local@@ P@@ r@@ int@@ er@@ Capabilities@@ ) { if (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ TAG, ((("@@ request@@ () p@@ r@@ int@@ er@@ =@@ " + p@@ r@@ int@@ er@@ ) + " h@@ ig@@ h@@ =@@ ") + h@@ ig@@ h@@ Pri@@ or@@ ity@@ )); com.android.@@ b@@ ip@@ s.@@ j@@ n@@ i.@@ Local@@ P@@ r@@ int@@ er@@ Capabili@@ ti@@ es cap@@ abili@@ ti@@ es = get@@ (p@@ r@@ int@@ er@@ ); if ((@@ cap@@ abili@@ ti@@ es != null@@ ) && ((@@ cap@@ abili@@ ties@@ .@@ native@@ Data@@ ) != null@@ )) { on@@ Local@@ P@@ r@@ int@@ er@@ Capabili@@ ties.@@ on@@ Capabilities@@ (c@@ ap@@ abili@@ ties@@ ); return@@ ; } if (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ Utils.@@ is@@ On@@ Connec@@ ted@@ Interface@@ (m@@ Service@@ , p@@ r@@ int@@ er@@ )) { if (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ TAG, ("@@ Add@@ ing to P2@@ P e@@ vi@@ c@@ t list@@ : " + p@@ r@@ int@@ er@@ )); m@@ To@@ E@@ vi@@ ct@@ P2@@ p.@@ add@@ (p@@ r@@ int@@ er.@@ path@@ ); } else { if (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ TAG, ("@@ Add@@ ing to W@@ LA@@ N e@@ vi@@ c@@ t list@@ : " + p@@ r@@ int@@ er@@ )); m@@ To@@ E@@ vi@@ ct.@@ add@@ (p@@ r@@ int@@ er.@@ path@@ ); } com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ Requ@@ est requ@@ est = m@@ Request@@ s.@@ com@@ pu@@ te@@ I@@ f@@ Ab@@ s@@ ent@@ (p@@ r@@ int@@ er.@@ path@@ , ( ur@@ i@@ ) -@@ > new com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Request@@ (p@@ r@@ int@@ er, (@@ h@@ ig@@ h@@ Pri@@ or@@ it@@ y ? com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ S@@ EC@@ ON@@ D@@ _P@@ A@@ SS@@ _@@ TI@@ ME@@ O@@ U@@ T : com.android.@@ b@@ ip@@ s.@@ ip@@ p.@@ Capabilities@@ C@@ ache.@@ FI@@ RS@@ T_@@ P@@ A@@ SS@@ _@@ TI@@ ME@@ O@@ UT@@ ))); if (@@ h@@ ig@@ h@@ Pri@@ or@@ ity@@ ) requ@@ est.@@ m@@ H@@ ig@@ h@@ Pri@@ or@@ it@@ y = true@@ ; requ@@ est.@@ m@@ Callback@@ s.@@ add(@@ on@@ Local@@ P@@ r@@ int@@ er@@ Capabilities@@ ); start@@ Next@@ Request@@ (); }
public java.util.@@ En@@ um@@ Set@@ <@@ com.android.@@ lay@@ out@@ lib.@@ api.@@ Capabilities@@ > get@@ Capabilities@@ () { if ((m@@ B@@ rid@@ g@@ e) != null@@ ) { return m@@ B@@ rid@@ g@@ e.get@@ Capabilities@@ (); } return java.util.@@ En@@ um@@ Set@@ .@@ n@@ one@@ Of@@ (com.android.@@ lay@@ out@@ lib.@@ api.@@ Capabilities@@ .@@ class@@ ); }
@org.junit.Test public void test@@ 00@@ 1@@ () throw@@ s java.lang.Exception { java.io.File test@@ Fol@@ der = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Test@@ Root@@ Dir@@ ("@@ com.android.jack.@@ java@@ 8@@ .@@ vari@@ ab@@ le.@@ test@@ 00@@ 1.@@ jack@@ "); java.io.File out = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); java.util.List<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ > ex@@ c@@ lu@@ de@@ C@@ la@@ z@@ z = new java.util.ArrayList<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ (@@ 2@@ ); ex@@ c@@ lu@@ de@@ C@@ la@@ z@@ z@@ .add@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Api@@ V@@ 0@@ 1@@ .@@ class@@ ); com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ a@@ in toolch@@ a@@ in = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Api@@ Too@@ lch@@ ain@@ Base@@ .@@ class@@ , ex@@ c@@ lu@@ de@@ C@@ la@@ z@@ z@@ ); toolchain.@@ add@@ To@@ Class@@ path@@ (@@ toolch@@ ain@@ .get@@ Default@@ B@@ oot@@ Class@@ path@@ ()@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ); try { toolchain.@@ src@@ To@@ Ex@@ e@@ (@@ out, false@@ , test@@ Folder@@ ); junit.framework.Assert.@@ fail@@ (); } catch (com.android.jack.@@ f@@ ron@@ t@@ end@@ .@@ F@@ ron@@ t@@ end@@ Comp@@ il@@ ation@@ Exception e) { } }
public byte@@ [] en@@ code@@ () throw@@ s java.io.@@ Un@@ suppor@@ ted@@ En@@ cod@@ ing@@ Exception { java.util.Array@@ List@@ <@@ byte@@ []@@ > bo@@ d@@ y@@ F@@ r@@ ag@@ ment@@ s = new java.util.Array@@ List@@ <@@ byte@@ []@@ >(); if ((m@@ Sms@@ B@@ o@@ d@@ y@@ ) != null@@ ) { java.lang.String t@@ mp@@ B@@ o@@ d@@ y = m@@ Sms@@ B@@ o@@ d@@ y.@@ re@@ pla@@ ce@@ All@@ ("@@ EN@@ D@@ :@@ MS@@ G@@ ", "@@ /@@ EN@@ D@@ \@@ \@@ :@@ MS@@ G@@ "); java.lang.String remo@@ te@@ Address = com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ Map@@ Service@@ .get@@ Remote@@ Device@@ ().get@@ Addres@@ s(); if (com.android.bluetooth.@@ Device@@ W@@ or@@ k@@ A@@ ro@@ und@@ s.@@ addres@@ Start@@ s@@ With@@ (@@ remo@@ te@@ Addres@@ s, Device@@ W@@ or@@ k@@ A@@ ro@@ und@@ s.@@ P@@ C@@ M@@ _C@@ AR@@ K@@ I@@ T@@ )) { t@@ mp@@ B@@ o@@ d@@ y = t@@ mp@@ B@@ o@@ d@@ y.@@ re@@ pla@@ ce@@ All@@ ("@@ \@@ r@@ ", "@@ "); } else if (com.android.bluetooth.@@ Device@@ W@@ or@@ k@@ A@@ ro@@ und@@ s.@@ addres@@ s@@ Start@@ s@@ With@@ (@@ remo@@ te@@ Addres@@ s, Device@@ W@@ or@@ k@@ A@@ ro@@ und@@ s.@@ F@@ OR@@ D@@ _S@@ Y@@ N@@ C@@ _C@@ AR@@ K@@ I@@ T@@ )) { t@@ mp@@ B@@ o@@ d@@ y = t@@ mp@@ B@@ o@@ d@@ y.@@ re@@ pla@@ ce@@ All@@ ("@@ \n@@ ", "@@ "); } bo@@ d@@ y@@ F@@ r@@ ag@@ ment@@ s.@@ add(@@ t@@ mp@@ B@@ o@@ d@@ y@@ .get@@ Bytes@@ ("@@ UT@@ F@@ -@@ 8@@ ")); } else if ((@@ (m@@ Sms@@ B@@ o@@ d@@ y@@ P@@ du@@ s) != null@@ ) && ((m@@ Sms@@ B@@ o@@ d@@ y@@ P@@ du@@ s.@@ size@@ ()) > 0@@ )) { for (com.android.bluetooth.@@ m@@ ap.@@ Bluetooth@@ Map@@ Sms@@ P@@ du@@ .@@ Sms@@ P@@ d@@ u p@@ d@@ u : m@@ Sms@@ B@@ o@@ d@@ y@@ P@@ du@@ s) { bo@@ d@@ y@@ F@@ r@@ ag@@ ment@@ s.@@ add(@@ en@@ code@@ Bin@@ ary@@ (p@@ du@@ .get@@ Data@@ (), p@@ du@@ .get@@ S@@ c@@ Address@@ ()@@ ).get@@ Bytes@@ ("@@ UT@@ F@@ -@@ 8@@ ")); } } else { bo@@ d@@ y@@ F@@ r@@ ag@@ ment@@ s.add@@ (@@ new byte@@ [0@@ ]@@ ); } return en@@ code@@ Gener@@ ic@@ (@@ bo@@ d@@ y@@ F@@ r@@ ag@@ ment@@ s); }
private static com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir@@ <java.lang.String, ? extends java.security.@@ spec@@ .@@ Algorith@@ m@@ Parameter@@ Spec@@ > get@@ Sign@@ ature@@ Algorith@@ m@@ J@@ c@@ a@@ Sign@@ ature@@ Algorith@@ m@@ (@@ int si@@ g@@ Algorith@@ m@@ ) { switch (@@ si@@ g@@ Algorith@@ m@@ ) { case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ RS@@ AP@@ SS@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 25@@ 6 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 25@@ 6@@ w@@ ith@@ RS@@ A@@ /@@ P@@ SS@@ ", new java.security.@@ spec@@ .@@ P@@ SS@@ Parameter@@ Spec@@ ("@@ S@@ H@@ A@@ -@@ 25@@ 6@@ ", "@@ M@@ G@@ F@@ 1@@ ", java.security.@@ spec@@ .@@ M@@ G@@ F@@ 1@@ Parameter@@ Spec@@ .@@ S@@ H@@ A@@ 25@@ 6@@ , (@@ 25@@ 6 / 8@@ ), 1@@ )); case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ RS@@ AP@@ SS@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 5@@ 1@@ 2 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 5@@ 12@@ w@@ ith@@ RS@@ A@@ /@@ P@@ SS@@ ", new java.security.@@ spec@@ .@@ P@@ SS@@ Parameter@@ Spec@@ ("@@ S@@ H@@ A@@ -@@ 5@@ 12@@ ", "@@ M@@ G@@ F@@ 1@@ ", java.security.@@ spec@@ .@@ M@@ G@@ F@@ 1@@ Parameter@@ Spec@@ .@@ S@@ H@@ A@@ 5@@ 12@@ , (@@ 5@@ 1@@ 2 / 8@@ ), 1@@ )); case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ EC@@ D@@ S@@ A@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 25@@ 6 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 25@@ 6@@ w@@ ith@@ EC@@ D@@ S@@ A@@ ", null@@ ); case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ EC@@ D@@ S@@ A@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 5@@ 1@@ 2 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 5@@ 12@@ w@@ ith@@ EC@@ D@@ S@@ A@@ ", null@@ ); case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ D@@ S@@ A@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 25@@ 6 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 25@@ 6@@ w@@ ith@@ D@@ S@@ A@@ ", null@@ ); case com.android.@@ sign@@ ap@@ k.@@ Apk@@ Sign@@ er@@ V@@ 2.@@ SI@@ G@@ N@@ AT@@ UR@@ E_@@ D@@ S@@ A@@ _@@ WI@@ TH@@ _S@@ H@@ A@@ 5@@ 1@@ 2 : return com.android.@@ sign@@ ap@@ k.@@ Pa@@ ir.@@ create@@ ("@@ S@@ H@@ A@@ 5@@ 12@@ w@@ ith@@ D@@ S@@ A@@ ", null@@ ); default : throw new java.lang.Illegal@@ Argument@@ Exception(("@@ Un@@ k@@ no@@ w@@ n sign@@ at@@ ur@@ e al@@ gorith@@ m@@ : 0@@ x@@ " + (java.lang.@@ Lon@@ g.@@ to@@ H@@ ex@@ String@@ ((@@ si@@ g@@ Algorith@@ m & -1@@ )@@ )))); } }
public void test@@ Exception@@ Message@@ () { short@@ [] B@@ 1 = new short@@ [@@ 5@@ ]; int@@ [] B@@ 2 = new int@@ [@@ 5@@ ]; java.lang.Exception er@@ r = null@@ ; try { (@@ count@@ )@@ ++@@ ; test@@ Exception@@ Message@@ 1@@ (@@ B@@ 1, B@@ 2, null@@ , (-1@@ ), 6@@ ); } catch (java.lang.Exception e) { er@@ r = e@@ ; } java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ er@@ r@@ ); }
public static Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult ve@@ r@@ if@@ y@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce apk@@ , com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Utils.@@ Zip@@ Sec@@ tion@@ s z@@ ip@@ Sec@@ tion@@ s, int min@@ Sdk@@ Version@@ , int max@@ Sdk@@ Version@@ ) throw@@ s com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ ature@@ Not@@ F@@ ound@@ Exception, java.io.IO@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception { com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult result = new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Result@@ (com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ V@@ E@@ RS@@ I@@ ON@@ _@@ AP@@ K@@ _S@@ I@@ G@@ N@@ AT@@ UR@@ E_@@ S@@ CH@@ E@@ M@@ E_@@ V@@ 3@@ ); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ature@@ Info sign@@ ature@@ Info = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ find@@ Sign@@ ature@@ (@@ apk@@ , z@@ ip@@ Sec@@ tion@@ s, com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 3@@ .@@ V@@ 3@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ AP@@ K@@ _S@@ I@@ G@@ N@@ AT@@ UR@@ E_@@ S@@ CH@@ E@@ M@@ E_@@ V@@ 3@@ _@@ B@@ LO@@ C@@ K_@@ ID@@ , result@@ ); com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ B@@ loc@@ k = ap@@ k.@@ s@@ li@@ ce@@ (@@ 0, sign@@ ature@@ Info.@@ apk@@ Sign@@ ing@@ Block@@ Offset@@ ); com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce c@@ en@@ tr@@ al@@ Di@@ r = ap@@ k.@@ s@@ li@@ ce@@ (@@ sign@@ ature@@ Info.@@ c@@ en@@ tr@@ al@@ Dir@@ Offset@@ , ((@@ sign@@ ature@@ Info.@@ e@@ o@@ c@@ d@@ Offset@@ ) - (@@ sign@@ ature@@ Info.@@ c@@ en@@ tr@@ al@@ Dir@@ Offset@@ ))); java.nio.Byte@@ Buff@@ er e@@ o@@ c@@ d = sign@@ ature@@ Info.@@ e@@ o@@ c@@ d@@ ; com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 3@@ .@@ V@@ 3@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ (b@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ , sign@@ ature@@ Info.@@ sign@@ ature@@ Block@@ , c@@ en@@ tr@@ al@@ Dir@@ , e@@ o@@ c@@ d, min@@ Sdk@@ Version@@ , max@@ Sdk@@ Version@@ , result@@ ); return result@@ ; }
private native long get@@ Long@@ (@@ java.lang.Object ob@@ ject@@ , boolean ac@@ ces@@ si@@ ble@@ ) throw@@ s java.lang.Illegal@@ Access@@ Exception, java.lang.Illegal@@ Argument@@ Exception;
@java.lang.Override public void in@@ stall@@ Package@@ With@@ V@@ er@@ if@@ ic@@ ation@@ (android.net.@@ Ur@@ i package@@ UR@@ I@@ , android.content.@@ p@@ m.@@ I@@ Package@@ In@@ stall@@ Ob@@ ser@@ ve@@ r ob@@ server@@ , int flag@@ s, java.lang.String in@@ stall@@ er@@ Package@@ Name, android.net.@@ Ur@@ i ve@@ r@@ if@@ ic@@ ation@@ UR@@ I@@ , android.content.@@ p@@ m.@@ M@@ an@@ if@@ est@@ Dig@@ est m@@ an@@ if@@ est@@ Dig@@ est@@ , android.content.@@ p@@ m.@@ Cont@@ ain@@ er@@ En@@ c@@ r@@ y@@ ption@@ Param@@ s enc@@ r@@ y@@ ption@@ Param@@ s) { android.content.@@ p@@ m.@@ V@@ er@@ if@@ ic@@ ation@@ Param@@ s ve@@ r@@ if@@ ic@@ ation@@ Param@@ s = new android.content.@@ p@@ m.@@ V@@ er@@ if@@ ic@@ ation@@ Param@@ s(@@ ve@@ r@@ if@@ ic@@ ation@@ UR@@ I@@ , null@@ , null@@ , android.content.@@ p@@ m.@@ V@@ er@@ if@@ ic@@ ation@@ Param@@ s.@@ NO@@ _@@ U@@ ID@@ , m@@ an@@ if@@ est@@ Dig@@ est@@ ); in@@ stall@@ Package@@ With@@ V@@ er@@ if@@ ic@@ ation@@ And@@ En@@ c@@ r@@ y@@ ption@@ (@@ package@@ UR@@ I@@ , ob@@ server@@ , flag@@ s, in@@ stall@@ er@@ Package@@ Name, ve@@ r@@ if@@ ic@@ ation@@ Param@@ s, enc@@ r@@ y@@ ption@@ Param@@ s, null@@ ); }
public void on@@ R@@ tt@@ Session@@ Remote@@ ly@@ T@@ er@@ min@@ ated@@ (android.@@ telecom.@@ Connec@@ tion c@@ ) { }
public byte@@ [] get@@ H@@ ardwar@@ e@@ Address@@ () throw@@ s java.net.@@ Socket@@ Exception { return new byte@@ [@@ 6@@ ]; }
@com.android.@@ mon@@ key@@ run@@ ner@@ .@@ do@@ c.@@ Mon@@ key@@ Runner@@ Ex@@ ported@@ (@@ do@@ c = "@@ S@@ end@@ s a to@@ u@@ ch ev@@ ent to th@@ e sele@@ cted ob@@ jec@@ t.@@ ", arg@@ s = { "@@ sele@@ ctor@@ ", "@@ type@@ " }@@ , arg@@ Doc@@ s = { "@@ Th@@ e sele@@ ct@@ or id@@ ent@@ if@@ y@@ ing th@@ e ob@@ jec@@ t.@@ ", "@@ Th@@ e ev@@ ent typ@@ e a@@ s return@@ ed b@@ y T@@ ou@@ ch@@ P@@ res@@ s@@ Type@@ ().@@ " }@@ ) public void to@@ u@@ ch@@ (@@ org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Object@@ [] arg@@ s, java.lang.String[] k@@ w@@ s) { org.@@ py@@ th@@ on@@ .@@ core.@@ Arg@@ Par@@ se@@ r a@@ p = com.android.@@ mon@@ key@@ run@@ ner.@@ J@@ y@@ th@@ on@@ Utils.@@ create@@ Arg@@ Par@@ ser@@ (@@ arg@@ s, k@@ w@@ s); com.google.common.@@ b@@ ase.@@ Pre@@ con@@ di@@ tion@@ s.@@ check@@ NotNull@@ (@@ ap@@ ); java.lang.String sele@@ ct@@ or = ap@@ .get@@ String(@@ 0); com.android.@@ hierarchyviewerlib.@@ device@@ .@@ View@@ No@@ de no@@ de = m@@ H@@ ierarchy@@ View@@ er.@@ find@@ View@@ (@@ sele@@ ctor@@ ); if (@@ no@@ de == null@@ ) { throw new org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Exception(@@ org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y.@@ Value@@ Error@@ , java.lang.String@@ .@@ for@@ mat@@ ("@@ Vi@@ e@@ w not fo@@ und@@ : %@@ s", sele@@ ctor@@ )); } org.eclipse.swt.@@ g@@ raphic@@ s.@@ P@@ o@@ int p = com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ H@@ ierarchy@@ View@@ er.get@@ Ab@@ so@@ lu@@ te@@ C@@ en@@ ter@@ Of@@ View@@ (@@ no@@ de@@ ); org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Object@@ [] o@@ th@@ er@@ Arg@@ s = new org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Object@@ [@@ 3@@ ]; o@@ th@@ er@@ Arg@@ s@@ [0@@ ] = new org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Integ@@ er(@@ p.@@ x@@ ); o@@ th@@ er@@ Arg@@ s@@ [@@ 1@@ ] = new org.@@ py@@ th@@ on@@ .@@ core.@@ P@@ y@@ Integ@@ er(@@ p.@@ y@@ ); o@@ th@@ er@@ Arg@@ s@@ [@@ 2@@ ] = arg@@ s@@ [@@ 1@@ ]; m@@ Device.@@ to@@ u@@ ch@@ (o@@ th@@ er@@ Arg@@ s, k@@ w@@ s); }
@java.lang.Override public void send@@ S@@ MS@@ (java.lang.String s@@ ms@@ c@@ P@@ du@@ , java.lang.String p@@ du@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ S@@ EN@@ D@@ _S@@ MS@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ G@@ sm@@ Sms@@ Message ms@@ g = const@@ r@@ u@@ ct@@ G@@ sm@@ S@@ end@@ Sms@@ R@@ il@@ Request@@ (s@@ ms@@ c@@ P@@ du@@ , p@@ du@@ ); try { radioProx@@ y.@@ send@@ S@@ m@@ s(@@ r@@ .m@@ Ser@@ ial@@ , ms@@ g@@ ); m@@ Met@@ ri@@ c@@ s.@@ write@@ R@@ il@@ S@@ end@@ Sms@@ (m@@ Phone@@ Id, r@@ r@@ .m@@ Ser@@ ial@@ , Sms@@ Session@@ .@@ Ev@@ ent.@@ T@@ ec@@ h@@ .@@ S@@ M@@ S_@@ G@@ S@@ M@@ , Sms@@ Session@@ .@@ Ev@@ ent.@@ Format@@ .@@ S@@ M@@ S_@@ F@@ OR@@ MA@@ T_@@ 3@@ G@@ P@@ P@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ send@@ S@@ MS@@ ", e); } } }
public void test@@ Host@@ name@@ Provid@@ ed@@ () throw@@ s java.lang.Exception { final java.lang.String expected@@ Host@@ name = "@@ ex@@ am@@ p@@ le.@@ com@@ "; final boolean ho@@ st@@ name@@ M@@ atch@@ ed = false@@ ; org.conscrypt.@@ Cer@@ t@@ P@@ in@@ Manager man@@ age@@ r = new org.conscrypt.@@ Cer@@ t@@ P@@ in@@ Manager@@ () { @java.lang.Override public boolean is@@ Ch@@ ain@@ Valid@@ (java.lang.String ho@@ st@@ name@@ , java.util.List<@@ java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ > ch@@ ain@@ ) { ho@@ st@@ name@@ M@@ atch@@ ed = expected@@ Host@@ nam@@ e.@@ equals(@@ ho@@ st@@ name@@ ); return true@@ ; } }; call@@ Check@@ Server@@ Tr@@ us@@ ted@@ (@@ null@@ , man@@ ag@@ er@@ ); assert@@ True@@ (@@ ho@@ st@@ name@@ M@@ atch@@ ed@@ ); }
@org.junit.Test public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 00@@ 6@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 00@@ 6@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
private void update@@ And@@ S@@ end@@ Intent@@ (android.bluetooth.Bluetooth@@ Device device@@ , int new@@ Device@@ State@@ , int pre@@ v@@ Device@@ State@@ ) { if (@@ new@@ Device@@ State == (android.bluetooth.Bluetooth@@ He@@ al@@ th@@ .@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ )) { m@@ He@@ al@@ th@@ De@@ vices.@@ remove@@ (device@@ ); } else { m@@ He@@ al@@ th@@ De@@ vices.@@ put@@ (device@@ , new@@ Device@@ State@@ ); } if (@@ new@@ Device@@ State != pre@@ v@@ Device@@ State@@ ) && (@@ new@@ Device@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ ))) { com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Met@@ ri@@ c@@ s@@ Logg@@ er.@@ log@@ Profile@@ Connection@@ Event@@ (@@ Bluetooth@@ Met@@ ri@@ c@@ s@@ Pro@@ to.@@ Profile@@ Id@@ .@@ H@@ E@@ AL@@ TH@@ ); } }
@org.junit.Test public void parse@@ Empty@@ Buffer@@ () throw@@ s java.lang.Exception { com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ an@@ q@@ p.@@ R@@ o@@ am@@ ing@@ Con@@ s@@ or@@ ti@@ um@@ Elem@@ ent e@@ lem@@ ent = com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ an@@ q@@ p.@@ R@@ o@@ am@@ ing@@ Con@@ s@@ or@@ ti@@ um@@ Element.@@ parse@@ (@@ java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (0@@ )); assert@@ True@@ (e@@ lem@@ ent.get@@ O@@ Is@@ ().@@ isEmpty@@ ()); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d private void set@@ Build@@ Too@@ l@@ s(@@ @com.android.annotations.NonNull java.util.Map@@ <@@ com.android.sdklib.@@ repository.@@ F@@ ull@@ Re@@ vision@@ , com.android.sdklib.@@ Build@@ Too@@ l@@ Info@@ > build@@ Too@@ l@@ s) { assert build@@ Too@@ l@@ s != null@@ ; m@@ Build@@ Too@@ l@@ s = build@@ Too@@ l@@ s; }
private static native void copy@@ Native@@ Can@@ va@@ s@@ State@@ (@@ long src@@ Can@@ va@@ s, long d@@ st@@ Can@@ va@@ s);
@java.lang.Override protected synchronized boolean st@@ op@@ () { try { un@@ register@@ Receiver@@ (m@@ Broadcast@@ Receiver@@ ); } catch (java.lang.Exception e) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p@@ c@@ li@@ ent.@@ Headset@@ Client@@ Service.TAG, "@@ Un@@ able to un@@ reg@@ is@@ ter b@@ road@@ cas@@ t re@@ cei@@ ver@@ ", e); } for (java.util.@@ I@@ terator@@ <@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ android.@@ bluetooth.Bluetooth@@ Device@@ , com.android.bluetooth.@@ hf@@ p@@ c@@ li@@ ent.@@ Headset@@ Client@@ StateMach@@ ine@@ >@@ > i@@ t = m@@ StateMach@@ ine@@ Map@@ .@@ e@@ n@@ try@@ Set@@ ().@@ i@@ terator@@ (); it.@@ has@@ Next@@ ()@@ ;@@ ) { com.android.bluetooth.@@ hf@@ p@@ c@@ li@@ ent.@@ Headset@@ Client@@ StateMach@@ in@@ e s@@ m = m@@ StateMach@@ ine@@ Map@@ .get@@ ((@@ (android.bluetooth.Bluetooth@@ Device@@ ) (@@ it.@@ next@@ ().get@@ Key@@ ()))); sm@@ .@@ do@@ Q@@ u@@ it@@ (); it.@@ remove@@ (); } android.content.@@ Int@@ ent st@@ op@@ Int@@ ent = new android.content.@@ Intent@@ (@@ this@@ , com.android.bluetooth.@@ hf@@ p@@ c@@ li@@ ent.@@ con@@ n@@ ser@@ v@@ .@@ H@@ f@@ p@@ Client@@ Connection@@ Service@@ .@@ class@@ ); st@@ op@@ Int@@ ent.@@ put@@ Extra@@ (com.android.bluetooth.@@ hf@@ p@@ c@@ li@@ ent.@@ Headset@@ Client@@ Service.@@ H@@ F@@ P@@ _C@@ L@@ I@@ EN@@ T_@@ S@@ TO@@ P@@ _@@ TAG, true@@ ); start@@ Service@@ (@@ st@@ op@@ Intent@@ ); m@@ S@@ m@@ Thread@@ .@@ qu@@ it@@ (); m@@ S@@ m@@ Th@@ re@@ ad = null@@ ; if ((m@@ Native@@ Interface@@ ) != null@@ ) { m@@ Native@@ Interface@@ .@@ cle@@ an@@ up@@ Native@@ (); m@@ Native@@ Inter@@ face = null@@ ; } return true@@ ; }
void ad@@ j@@ u@@ st@@ S@@ ur@@ face@@ (@@ int lay@@ er, boolean in@@ Trans@@ action@@ , boolean ne@@ ed@@ Res@@ iz@@ e) { final int d@@ w@@ ; final int d@@ h@@ ; final float x@@ Po@@ s; final float y@@ Po@@ s; if (!(m@@ Stack@@ .is@@ F@@ ull@@ s@@ cre@@ en@@ ())) { d@@ w = m@@ B@@ ound@@ s.@@ wid@@ th@@ (); d@@ h = m@@ B@@ ound@@ s.@@ he@@ ig@@ ht@@ (); x@@ Po@@ s = m@@ B@@ ound@@ s.@@ le@@ f@@ t@@ ; y@@ Po@@ s = m@@ B@@ ound@@ s.@@ to@@ p@@ ; } else { final android.@@ view@@ .@@ Display@@ Info in@@ fo = m@@ Display@@ Cont@@ ent.get@@ Display@@ Info@@ (); d@@ w = (@@ (@@ int@@ ) ((@@ info@@ .@@ log@@ ic@@ al@@ W@@ id@@ th@@ ) * 1.@@ 5@@ )); d@@ h = (@@ (@@ int@@ ) ((@@ info@@ .@@ log@@ ic@@ al@@ He@@ ig@@ ht@@ ) * 1.@@ 5@@ )); x@@ Po@@ s = ((@@ -1@@ ) * d@@ w@@ ) / 6@@ ; y@@ Po@@ s = ((@@ -1@@ ) * d@@ h@@ ) / 6@@ ; } try { if (!@@ in@@ Trans@@ action@@ ) { android.@@ view@@ .@@ S@@ ur@@ face@@ Contro@@ l.@@ open@@ Trans@@ action@@ (); } m@@ D@@ im@@ S@@ ur@@ face@@ .set@@ Posi@@ tion@@ (@@ x@@ Po@@ s, y@@ Po@@ s); if (@@ ne@@ ed@@ Res@@ iz@@ e) { m@@ D@@ im@@ S@@ ur@@ face@@ .set@@ Size@@ (d@@ w@@ , d@@ h@@ ); } m@@ D@@ im@@ S@@ ur@@ face@@ .set@@ Lay@@ er(@@ lay@@ er@@ ); } catch (java.lang.@@ Runtime@@ Exception e) { android.util.@@ S@@ log.@@ w@@ (com.android.server.@@ w@@ m.@@ D@@ im@@ Lay@@ er.@@ TAG, "@@ Fail@@ ur@@ e set@@ t@@ ing siz@@ e or lay@@ er@@ ", e); } final@@ l@@ y { if (!@@ in@@ Trans@@ action@@ ) { android.@@ view@@ .@@ S@@ ur@@ face@@ Contro@@ l.@@ close@@ Trans@@ action@@ (); } } m@@ L@@ ast@@ B@@ ound@@ s.@@ set@@ (m@@ B@@ ound@@ s); m@@ Lay@@ er = lay@@ er@@ ; }
public static libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context create@@ (@@ libcore.@@ java.security.@@ Test@@ Key@@ Stor@@ e c@@ lient@@ , libcore.@@ java.security.@@ Test@@ Key@@ Stor@@ e server@@ , javax.net.ssl.@@ Key@@ Manager@@ [] add@@ i@@ tion@@ al@@ Client@@ Key@@ Manager@@ s, javax.net.ssl.@@ Key@@ Manager@@ [] add@@ i@@ tion@@ al@@ Server@@ Key@@ Manager@@ s) { java.lang.String pro@@ to@@ co@@ l = "@@ T@@ L@@ S@@ v@@ 1.@@ 2@@ "; javax.net.ssl.@@ Key@@ Manager@@ [] c@@ lient@@ Key@@ Manager@@ s = libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ con@@ cat@@ (c@@ li@@ ent.@@ key@@ Manager@@ s, add@@ i@@ tion@@ al@@ Client@@ Key@@ Manager@@ s); javax.net.ssl.@@ Key@@ Manager@@ [] server@@ Key@@ Manager@@ s = libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ con@@ cat@@ (@@ server.@@ key@@ Manager@@ s, add@@ i@@ tion@@ al@@ Server@@ Key@@ Manager@@ s); javax.net.ssl.@@ SSL@@ Context c@@ lient@@ Context = libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ create@@ SSL@@ Context@@ (pro@@ to@@ col@@ , c@@ lient@@ Key@@ Manager@@ s, c@@ li@@ ent.@@ tr@@ u@@ st@@ Manager@@ s); javax.net.ssl.@@ SSL@@ Context server@@ Context = libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ create@@ SSL@@ Context@@ (pro@@ to@@ col@@ , server@@ Key@@ Manager@@ s, server.@@ tr@@ u@@ st@@ Manager@@ s); return libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ create@@ (c@@ li@@ ent.@@ key@@ Store@@ , c@@ li@@ ent.@@ st@@ ore@@ P@@ ass@@ wor@@ d, server.@@ key@@ Store@@ , server.@@ st@@ ore@@ P@@ ass@@ wor@@ d, c@@ lient@@ Key@@ Manager@@ s, server@@ Key@@ Manager@@ s, c@@ li@@ ent.@@ tr@@ u@@ st@@ Manager@@ s@@ [0@@ ]@@ , server.@@ tr@@ u@@ st@@ Manager@@ s@@ [0@@ ]@@ , c@@ lient@@ Contex@@ t, server@@ Context@@ ); }
@java.lang.Override public void widget@@ Dis@@ po@@ sed@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Dis@@ po@@ se@@ Ev@@ ent event@@ ) { for (@@ org.eclipse.swt.@@ g@@ raphic@@ s.@@ Res@@ our@@ ce d : dis@@ po@@ s@@ ab@@ l@@ es) { d.@@ dis@@ po@@ se@@ (); } if (d@@ is@@ po@@ se@@ F@@ on@@ t != null@@ ) { dis@@ po@@ se@@ F@@ on@@ t.@@ dis@@ po@@ se@@ (); } }
@java.lang.Override public void set@@ In@@ iti@@ al@@ At@@ t@@ ach@@ Ap@@ n@@ (android.@@ telephony.@@ data@@ .@@ Data@@ Pro@@ fi@@ le data@@ Profile@@ , boolean is@@ R@@ o@@ am@@ ing@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SE@@ T_@@ IN@@ I@@ TI@@ AL@@ _@@ AT@@ TA@@ CH@@ _@@ AP@@ N@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ (r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + data@@ Profile@@ )); } try { radioProx@@ y.@@ set@@ In@@ iti@@ al@@ At@@ t@@ ach@@ Ap@@ n@@ (rr@@ .m@@ Ser@@ ial@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ con@@ ver@@ t@@ To@@ H@@ al@@ Data@@ Profile@@ (d@@ ata@@ Profile@@ ), data@@ Pro@@ file.@@ is@@ Mode@@ m@@ Co@@ gn@@ i@@ tive@@ (), is@@ R@@ o@@ am@@ ing@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ set@@ In@@ iti@@ al@@ At@@ t@@ ach@@ Ap@@ n@@ ", e); } } }
private void check@@ IpSec@@ Config@@ And@@ Throw@@ (android.net.@@ IpSec@@ Con@@ fig config@@ ) { switch (@@ config.@@ get@@ Mode@@ ()) { case android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ M@@ OD@@ E_@@ T@@ UN@@ NE@@ L : case android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ M@@ OD@@ E_@@ TR@@ AN@@ S@@ P@@ OR@@ T : break@@ ; default : throw new java.lang.Illegal@@ Argument@@ Exception(("@@ In@@ va@@ li@@ d IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ mode@@ : " + (@@ config.@@ get@@ Mode@@ ()))); } check@@ NotNull@@ (@@ config.@@ get@@ Remote@@ Address@@ (), "@@ In@@ va@@ li@@ d Remo@@ t@@ e Inet@@ Address@@ "); switch (@@ config.@@ get@@ En@@ cap@@ Type@@ ()) { case android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ EN@@ C@@ AP@@ _N@@ ON@@ E : break@@ ; case android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ EN@@ C@@ AP@@ _@@ E@@ S@@ P@@ IN@@ U@@ D@@ P : case android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ EN@@ C@@ AP@@ _@@ E@@ S@@ P@@ IN@@ U@@ D@@ P@@ _N@@ ON@@ _@@ I@@ K@@ E : check@@ NotNull@@ (m@@ U@@ dp@@ Socket@@ Record@@ s.get@@ (@@ config.@@ get@@ En@@ cap@@ Socket@@ Resource@@ Id@@ ()@@ ), "@@ N@@ o En@@ cap@@ s@@ ul@@ ation s@@ ock@@ et for s@@ pe@@ c@@ if@@ i@@ ed Res@@ our@@ ce Id@@ "); int por@@ t = config.@@ get@@ En@@ cap@@ Remote@@ Port@@ (); if ((@@ por@@ t == 0) || ((@@ por@@ t & -@@ 6@@ 5@@ 3@@ 6@@ ) != 0@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ In@@ va@@ li@@ d remo@@ t@@ e U@@ D@@ P port@@ : " + port@@ )); } break@@ ; default : throw new java.lang.Illegal@@ Argument@@ Exception(("@@ In@@ va@@ li@@ d En@@ c@@ a@@ p Type@@ : " + (@@ config.@@ get@@ En@@ cap@@ Type@@ ()))); } for (@@ int di@@ re@@ c@@ tion : com.android.server.@@ IpSec@@ Service.@@ DI@@ RE@@ C@@ TION@@ S@@ ) { android.net.@@ IpSecAlgorith@@ m cryp@@ t = config.@@ get@@ En@@ c@@ r@@ y@@ ption@@ (d@@ ire@@ ction@@ ); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = config.@@ get@@ A@@ u@@ th@@ enti@@ cation@@ (d@@ ire@@ ction@@ ); if ((@@ cryp@@ t == null@@ ) && (@@ a@@ ut@@ h == null@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ En@@ c@@ r@@ y@@ pti@@ on an@@ d A@@ u@@ th@@ enti@@ c@@ ation ar@@ e bo@@ th null@@ "); } check@@ NotNull@@ (m@@ S@@ pi@@ Record@@ s.get@@ (@@ config.@@ get@@ S@@ pi@@ Resource@@ Id@@ (d@@ ire@@ ction@@ )), "@@ N@@ o S@@ P@@ I for s@@ pe@@ c@@ if@@ i@@ ed Res@@ our@@ ce Id@@ "); } }
public void test@@ J@@ vm@@ ti@@ A@@ g@@ ent@@ App@@ Ex@@ ter@@ nal@@ () throw@@ s java.lang.Exception { run@@ J@@ vm@@ ti@@ A@@ g@@ ent@@ Load@@ Test@@ ((@@ com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ I@@ Test@@ Device device@@ ,@@ java.lang.String p@@ kg@@ ,@@ java.lang.String apk@@ ,@@ java.lang.String ab@@ i@@ Name@@ ) -@@ > { try { java.lang.String p@@ w@@ d = device@@ .@@ exec@@ ute@@ Sh@@ ell@@ Command@@ ((("@@ run@@ -@@ a@@ s " + p@@ kg@@ ) + " p@@ w@@ d@@ ")); if (p@@ w@@ d == null@@ ) { throw new java.lang.Runtime@@ Exception("@@ p@@ w@@ d fa@@ ile@@ d@@ "); } p@@ w@@ d = p@@ w@@ d.@@ tr@@ im@@ (); if (p@@ w@@ d.@@ isEmpty@@ ()) { throw new java.lang.Runtime@@ Exception("@@ p@@ w@@ d fa@@ ile@@ d@@ "); } java.lang.String lib@@ In@@ Data@@ Data = (android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ A@@ G@@ EN@@ T@@ .@@ sub@@ string@@ (@@ 0, ((@@ android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ A@@ G@@ EN@@ T@@ .@@ length@@ ()) - ("@@ .@@ so@@ "@@ .@@ length@@ ()@@ )@@ ))) + "@@ 2.@@ so@@ "; java.lang.String ag@@ ent@@ In@@ Data@@ Data = in@@ stall@@ Lib@@ To@@ Data@@ (device@@ , p@@ kg@@ , ab@@ i@@ Name, apk@@ , p@@ w@@ d, android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ A@@ G@@ EN@@ T, lib@@ In@@ Data@@ ); java.lang.String set@@ A@@ g@@ ent@@ App@@ C@@ m@@ d = (("@@ c@@ m@@ d ac@@ tivi@@ t@@ y set@@ -@@ ag@@ ent@@ -@@ ap@@ p " + p@@ kg@@ ) + " ") + ag@@ ent@@ In@@ Data@@ Data@@ ; java.lang.String set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y = device@@ .@@ exec@@ ute@@ Sh@@ ell@@ Command@@ (@@ set@@ A@@ g@@ ent@@ App@@ C@@ m@@ d@@ ); if ((@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y != null@@ ) && (!(@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y.@@ tr@@ im@@ ().@@ isEmpty@@ ()))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ set@@ A@@ g@@ ent@@ App@@ Re@@ pl@@ y@@ ); } } catch (java.lang.Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d run@@ n@@ ing set@@ -@@ ag@@ ent@@ -@@ app@@ ", e); } try { android.@@ j@@ vm@@ ti@@ .@@ cts.@@ J@@ vm@@ ti@@ At@@ t@@ ach@@ ing@@ Host@@ Test.@@ run@@ At@@ t@@ ach@@ Test@@ C@@ m@@ d@@ (device@@ , p@@ kg@@ , "@@ "); } catch (java.lang.Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d ag@@ ent@@ -@@ ap@@ p att@@ ach@@ ing@@ ", e); } }); }
private void re@@ cor@@ d@@ H@@ t@@ ml@@ Attribute@@ Value@@ (@@ @com.android.annotations.@@ Null@@ able com.android.build.gradle.@@ t@@ ask@@ s.@@ Resource@@ U@@ s@@ age@@ An@@ al@@ y@@ z@@ er.@@ Res@@ our@@ ce f@@ rom@@ , @com.android.annotations.@@ Null@@ able java.lang.String t@@ ag@@ Name, @com.android.annotations.@@ Null@@ able java.lang.String at@@ tribute@@ , @com.android.annotations.NonNull java.lang.String valu@@ e) { if (("@@ h@@ ref@@ "@@ .@@ equals(@@ at@@ tribute@@ )) || ("@@ src@@ "@@ .@@ equals(@@ at@@ tribute@@ ))) { if (!(@@ re@@ ference@@ d@@ Ur@@ l@@ (f@@ rom@@ , value@@ ))) { re@@ ference@@ d@@ String(@@ valu@@ e); } if (f@@ ro@@ m != null@@ ) { f@@ ro@@ m.@@ add@@ Reference@@ (get@@ Resource@@ From@@ File@@ Path@@ (@@ at@@ tribute@@ )); } } }
public void test@@ A@@ es@@ G@@ c@@ m@@ 9@@ 6@@ U@@ dp@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m au@@ th@@ Cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S_@@ G@@ C@@ M@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ A@@ E@@ AD@@ _@@ KE@@ Y@@ , 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, false@@ , 1, true@@ ); }
public static void remove@@ (java.lang.String path@@ ) throw@@ s android.system.@@ ErrnoException { Lib@@ core.@@ os.@@ remove@@ (p@@ ath@@ ); }
@com.android.annotations.NonNull public com.google.common.@@ has@@ h@@ .@@ Hash@@ Co@@ de get@@ Source@@ Hash@@ () { return m@@ Source@@ Hash@@ ; }
public static int io@@ ct@@ l@@ Int@@ (java.io.FileDescriptor f@@ d, int c@@ m@@ d, android.system.@@ Int@@ 32@@ Re@@ f arg@@ ) throw@@ s android.system.@@ ErrnoException { return Lib@@ core.@@ os.@@ io@@ ct@@ l@@ Int@@ (f@@ d, c@@ m@@ d, arg@@ ); }
private void check@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 1, -@@ 7@@ 7@@ 7@@ 2@@ 0@@ 2@@ 0@@ 2@@ 0@@ 4@@ 0@@ 7@@ 2@@ 0@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 1@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ U@@ char@@ : " + (e.toString()))); } }
@com.android.annotations.@@ Null@@ able @java.lang.Override public java.io.File get@@ Store@@ File@@ () { return (@@ sign@@ ing@@ Config.@@ get@@ Store@@ File@@ ()) == null ? null : new java.io.File@@ (@@ sign@@ ing@@ Config.@@ get@@ Store@@ File@@ ()); }
boolean st@@ op@@ G@@ att@@ Profile@@ Service@@ () { m@@ Adapter@@ Proper@@ ties.@@ on@@ B@@ le@@ Dis@@ able@@ (); if ((m@@ Run@@ n@@ ing@@ Pro@@ fil@@ es.@@ size@@ ()) == 0) { de@@ bug@@ Log@@ ("@@ st@@ op@@ G@@ att@@ Profile@@ Service@@ () - N@@ o pro@@ file@@ s service@@ s to st@@ o@@ p.@@ "); m@@ Adapter@@ StateMachine.@@ send@@ Message@@ (@@ Adapter@@ State.@@ BL@@ E_@@ S@@ TO@@ P@@ P@@ ED@@ ); } set@@ Profile@@ Service@@ State@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ G@@ att@@ Service@@ .@@ class@@ , Bluetooth@@ Adap@@ ter.@@ STATE_@@ O@@ F@@ F@@ ); return true@@ ; }
private boolean h@@ a@@ ve@@ Local@@ Re@@ positor@@ y@@ (java.lang.String ve@@ n@@ do@@ r@@ ) { if ((@@ get@@ Sdk@@ ()) != null@@ ) { com.android.sdklib.@@ repository.@@ loc@@ al.@@ Local@@ P@@ kg@@ Info@@ [] info@@ s = get@@ Sdk@@ ().get@@ P@@ kg@@ s@@ Info@@ s(@@ P@@ kg@@ Type.@@ P@@ K@@ G@@ _@@ EX@@ TR@@ A@@ S@@ ); for (com.android.s@@ dklib.@@ repository.@@ loc@@ al.@@ Local@@ P@@ kg@@ Info in@@ fo : info@@ s) { com.android.sdklib.@@ repository.@@ des@@ crip@@ tor@@ s.@@ IP@@ kg@@ Des@@ c d = info@@ .get@@ Des@@ c@@ (); if ((((@@ d.@@ has@@ V@@ e@@ n@@ do@@ r@@ Id@@ ()) && (@@ ve@@ n@@ do@@ r.@@ equals(@@ d@@ .get@@ V@@ e@@ n@@ do@@ r@@ Id@@ ()))) && (d@@ .@@ has@@ Path@@ ())) && ("@@ m@@ 2@@ repositor@@ y@@ "@@ .@@ equals(@@ d@@ .get@@ Path@@ ()))) { return true@@ ; } } } if ((m@@ Sdk@@ Location@@ ) != null@@ ) { java.io.File repositor@@ y = new java.io.File@@ (m@@ Sdk@@ Location@@ , ((((@@ (@@ F@@ D_@@ EX@@ TR@@ A@@ S@@ ) + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + ve@@ n@@ do@@ r@@ ) + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + "@@ m@@ 2@@ repositor@@ y@@ ")); return repository.@@ exist@@ s(); } return false@@ ; }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { set@@ up@@ Start@@ Tim@@ est@@ am@@ p = java.lang.System.@@ current@@ Time@@ Milli@@ s(); final java.io.File f = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ Zip@@ E@@ n@@ try@@ Test@@ ", "@@ .@@ z@@ ip@@ "); java.io.@@ Input@@ Stream is = tests.@@ support.@@ resource@@ .@@ Sup@@ port@@ _@@ Res@@ ources@@ .get@@ Stream@@ ("@@ h@@ y@@ ts@@ _@@ Zip@@ File@@ .@@ z@@ ip@@ "); java.io.File@@ Output@@ Stream fo@@ s = new java.io.File@@ Output@@ Stream@@ (f@@ ); libcore.io.@@ Stream@@ s.@@ copy@@ (is@@ , fo@@ s); is.@@ close(); fo@@ s.@@ close(); z@@ fi@@ le = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (f@@ ); z@@ e@@ n@@ try = z@@ file@@ .get@@ E@@ n@@ try@@ ("@@ File@@ 1.@@ t@@ xt@@ "); or@@ g@@ Siz@@ e = z@@ e@@ n@@ try@@ .get@@ Size@@ (); or@@ g@@ Comp@@ res@@ sed@@ Siz@@ e = z@@ e@@ n@@ try@@ .get@@ Comp@@ res@@ sed@@ Size@@ (); or@@ g@@ C@@ r@@ c = z@@ e@@ n@@ try@@ .get@@ C@@ rc@@ (); or@@ g@@ Tim@@ e = z@@ e@@ n@@ try@@ .get@@ Time@@ (); }
public com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er.@@ Builder set@@ V@@ 3@@ Sign@@ ing@@ Enabled@@ (@@ boolean enable@@ d@@ ) { check@@ In@@ itializ@@ ed@@ With@@ out@@ En@@ g@@ ine@@ (); if ((@@ enable@@ d && ((m@@ Sign@@ er@@ Config@@ s) != null@@ )) && ((m@@ Sign@@ er@@ Config@@ s.@@ size@@ ()) > 1@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ AP@@ K Sign@@ at@@ ur@@ e S@@ ch@@ em@@ e v@@ 3 can@@ not b@@ e u@@ se@@ d wit@@ h " + "@@ m@@ ulti@@ p@@ le sign@@ er@@ s.@@ ")); } m@@ V@@ 3@@ Sign@@ ing@@ Enable@@ d = enable@@ d@@ ; return this@@ ; }
@java.lang.Override public final int add@@ Status@@ Listener@@ (@@ final android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est do@@ wn@@ load@@ Request@@ , final android.telephony.@@ m@@ b@@ m@@ s.@@ ID@@ o@@ wn@@ load@@ Status@@ Listen@@ er list@@ ener@@ ) throw@@ s android.os.@@ RemoteException { final int u@@ id = android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (); if (@@ do@@ wn@@ load@@ Requ@@ est == null@@ ) { throw new java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception("@@ Down@@ lo@@ ad requ@@ est m@@ us@@ t not b@@ e null@@ "); } if (@@ list@@ en@@ er == null@@ ) { throw new java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception("@@ Call@@ b@@ ac@@ k m@@ us@@ t not b@@ e null@@ "); } android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Status@@ Listen@@ er ex@@ po@@ sed@@ Call@@ b@@ ac@@ k = new android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ M@@ b@@ ms@@ Down@@ load@@ Service@@ Bas@@ e.@@ V@@ e@@ n@@ do@@ r@@ Down@@ load@@ Status@@ Listener@@ (@@ list@@ ener@@ ) { @java.lang.Override protected void on@@ Remote@@ Exception@@ (android.os.RemoteException e) { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , do@@ wn@@ load@@ Requ@@ est.@@ get@@ Sub@@ s@@ cription@@ Id@@ ()); } }; int result = register@@ Status@@ Listener@@ (@@ do@@ wn@@ load@@ Request@@ , ex@@ po@@ sed@@ Callback@@ ); if (@@ result == (android.@@ telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Error@@ s.@@ S@@ U@@ C@@ CE@@ SS@@ )) { android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent de@@ ath@@ R@@ ec@@ ip@@ i@@ ent = new android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ () { @java.lang.Override public void b@@ in@@ der@@ Di@@ ed@@ () { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , do@@ wn@@ load@@ Requ@@ est.@@ get@@ Sub@@ s@@ cription@@ Id@@ ()); m@@ Down@@ load@@ Status@@ Listener@@ Bin@@ der@@ Map@@ .@@ remove@@ (@@ list@@ en@@ er.@@ as@@ Bin@@ der@@ ()); m@@ Down@@ load@@ Callback@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ s.@@ remove@@ (@@ list@@ en@@ er.@@ as@@ Bin@@ der@@ ()); } }; m@@ Down@@ load@@ Callback@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ s.@@ put@@ (@@ list@@ en@@ er.@@ as@@ Bin@@ der@@ (), de@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ ); list@@ en@@ er.@@ as@@ Bin@@ der@@ ().@@ lin@@ k@@ To@@ De@@ ath@@ (@@ de@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ , 0); m@@ Down@@ load@@ Status@@ Listener@@ Bin@@ der@@ Map@@ .@@ put@@ (@@ list@@ en@@ er.@@ as@@ Bin@@ der@@ (), ex@@ po@@ sed@@ Callback@@ ); } return result@@ ; }
@java.lang.Override public void remove@@ Item@@ (@@ @com.android.annotations.NonNull com.android.ide.common.@@ res@@ 2.@@ Resource@@ I@@ te@@ m remo@@ v@@ ed@@ Item@@ , @com.android.annotations.@@ Null@@ able com.android.ide.common.@@ res@@ 2.@@ Resource@@ I@@ te@@ m re@@ pla@@ ce@@ d@@ By@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ Con@@ s@@ um@@ er@@ Exception { com.android.ide.common.@@ res@@ 2.@@ Resource@@ File@@ .@@ File@@ Type remo@@ v@@ ed@@ Type = remo@@ v@@ ed@@ Item@@ .get@@ Source@@ Type@@ (); com.android.ide.common.@@ res@@ 2.@@ Resource@@ File@@ .@@ File@@ Type re@@ pla@@ ce@@ d@@ Type = (re@@ pla@@ ce@@ d@@ B@@ y != null@@ ) ? re@@ pla@@ ce@@ d@@ By@@ .get@@ Source@@ Type@@ () : null@@ ; if (@@ remo@@ v@@ ed@@ Type == re@@ pla@@ ce@@ d@@ Typ@@ e) { if (@@ remo@@ v@@ ed@@ Type == (@@ Resource@@ File@@ .@@ File@@ Type.@@ X@@ M@@ L_@@ VAL@@ UE@@ S@@ )) { m@@ Q@@ u@@ al@@ if@@ ier@@ With@@ De@@ let@@ ed@@ Valu@@ es.@@ add(@@ remo@@ v@@ ed@@ Item@@ .get@@ Q@@ u@@ al@@ if@@ ier@@ s()); } else { } } else if (@@ remo@@ v@@ ed@@ Type == (@@ Resource@@ File@@ .@@ File@@ Type.@@ S@@ ING@@ L@@ E_@@ F@@ IL@@ E@@ )) { remove@@ Out@@ File@@ (@@ remo@@ v@@ ed@@ Item@@ ); } else { m@@ Q@@ u@@ al@@ if@@ ier@@ With@@ De@@ let@@ ed@@ Valu@@ es.@@ add(@@ remo@@ v@@ ed@@ Item@@ .get@@ Q@@ u@@ al@@ if@@ ier@@ s()); } }
@java.lang.Override public java.util.Map@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Field@@ , java.lang.Ob@@ ject@@ > get@@ St@@ ati@@ c@@ Field@@ s() { java.util.Map@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Field@@ , java.lang.Ob@@ ject@@ > result = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); result.@@ put@@ (@@ new com.android.tools.@@ perflib.@@ he@@ ap.@@ Field@@ (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ Type.@@ O@@ B@@ J@@ EC@@ T, "@@ f@@ oo@@ "), ob@@ ject@@ 1); result.@@ put@@ (@@ new com.android.tools.@@ perflib.@@ he@@ ap.@@ Field@@ (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ Type.@@ O@@ B@@ J@@ EC@@ T, "@@ b@@ ar@@ "), ob@@ ject@@ 2@@ ); return result@@ ; }
private void process@@ Lock@@ ed@@ State@@ () { if ((m@@ Uicc@@ Application@@ ) == null@@ ) { return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ P@@ in@@ State p@@ in@@ 1@@ State = m@@ Uicc@@ Application@@ .get@@ P@@ in@@ 1@@ State@@ (); if (p@@ in@@ 1@@ State == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Statu@@ s.@@ P@@ in@@ State.@@ P@@ IN@@ STATE_@@ EN@@ ABL@@ ED@@ _P@@ ER@@ M@@ _@@ B@@ LO@@ C@@ K@@ ED@@ )) { set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ ER@@ M@@ _@@ D@@ IS@@ ABL@@ ED@@ ); return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Application@@ Statu@@ s.@@ App@@ State app@@ State = m@@ Uicc@@ Application@@ .get@@ State@@ (); switch (@@ app@@ State@@ ) { case AP@@ P@@ STATE_@@ P@@ I@@ N : m@@ P@@ in@@ Lock@@ ed@@ Reg@@ is@@ tr@@ an@@ ts.@@ not@@ if@@ y@@ Reg@@ is@@ tr@@ an@@ ts@@ (); set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ IN@@ _RE@@ Q@@ U@@ I@@ RE@@ D@@ ); break@@ ; case AP@@ P@@ STATE_@@ P@@ U@@ K : set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ U@@ K@@ _RE@@ Q@@ U@@ I@@ RE@@ D@@ ); break@@ ; } }
private boolean sho@@ ul@@ d@@ Con@@ s@@ id@@ er@@ Service@@ State@@ R@@ o@@ am@@ ing@@ () { android.telephony.@@ C@@ arrier@@ Config@@ Manager config@@ Manager = ((@@ android.telephony.@@ C@@ arrier@@ Config@@ Manager@@ ) (m@@ Contex@@ t.get@@ System@@ Service@@ (@@ Context.@@ C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _S@@ ER@@ VIC@@ E@@ ))); if (@@ config@@ Manager != null@@ ) { android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le b = config@@ Manager.get@@ Config@@ For@@ Sub@@ Id@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Sub@@ s@@ cription@@ Control@@ l@@ er.get@@ Instance@@ ().get@@ Sub@@ Id@@ U@@ sing@@ Phone@@ Id@@ (m@@ Par@@ ent@@ App@@ .get@@ Phone@@ Id@@ ())); if ((@@ b != null@@ ) && (b@@ .get@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y@@ _S@@ P@@ N@@ _@@ D@@ IS@@ P@@ LA@@ Y_@@ R@@ UL@@ E_@@ S@@ H@@ O@@ UL@@ D@@ _C@@ ON@@ S@@ ID@@ ER@@ _S@@ ER@@ VIC@@ E_@@ STATE_@@ RO@@ AM@@ ING@@ _@@ B@@ O@@ O@@ L@@ ))) { return true@@ ; } } return false@@ ; }
public void com@@ b@@ ine@@ Capabilities@@ (android.net.@@ Network@@ Capabili@@ ti@@ es n@@ c@@ ) { com@@ b@@ ine@@ Net@@ Capabilities@@ (@@ n@@ c@@ ); com@@ b@@ ine@@ Trans@@ port@@ Typ@@ es(@@ n@@ c@@ ); com@@ b@@ ine@@ Link@@ B@@ and@@ wid@@ th@@ s(@@ n@@ c@@ ); com@@ b@@ ine@@ S@@ pe@@ c@@ if@@ ier@@ s(@@ n@@ c@@ ); com@@ b@@ ine@@ Sign@@ al@@ Str@@ ength@@ (@@ n@@ c@@ ); com@@ b@@ ine@@ Al@@ low@@ ed@@ U@@ id@@ s(@@ n@@ c@@ ); }
@org.junit.Test public void test@@ 00@@ 3@@ () throw@@ s java.lang.Exception { java.lang.String t@@ est = "@@ com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ test@@ 00@@ 3@@ "; java.lang.String a@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 00@@ 3@@ /@@ A@@ ;@@ "; java.lang.String b@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 00@@ 3@@ /@@ B@@ ;@@ "; com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Comp@@ il@@ ation@@ Proper@@ ti@@ es pro@@ per@@ ti@@ es = default@@ Properties@@ (); com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Type@@ Method@@ s@@ Valid@@ at@@ or a@@ Method@@ s = new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ ("@@ check@@ ()@@ V@@ ", new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Method@@ D@@ al@@ vi@@ k@@ Code@@ Valid@@ ator@@ (@@ resource@@ (@@ test@@ , "@@ A@@ .@@ check@@ .@@ d@@ al@@ vi@@ k@@ "@@ ))); com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Type@@ Method@@ s@@ Valid@@ at@@ or b@@ Method@@ s = new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ ("@@ check@@ ()@@ L@@ java@@ /@@ lan@@ g@@ /@@ String@@ ;@@ ", new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Method@@ D@@ al@@ vi@@ k@@ Code@@ Valid@@ ator@@ (@@ resource@@ (@@ test@@ , "@@ B@@ .@@ check@@ .@@ d@@ al@@ vi@@ k@@ "@@ ))); compile@@ And@@ Valid@@ ate@@ Typ@@ es(@@ test@@ , pro@@ per@@ ties@@ , new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Valid@@ ator@@ s@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, a@@ Method@@ s@@ ).@@ in@@ ser@@ t@@ (b@@ Type, b@@ Method@@ s@@ )); }
@com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ P@@ dk@@ Test public void test@@ Is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ () { if ((@@ get@@ G@@ l@@ E@@ s@@ Version@@ (m@@ Activity@@ )) >@@ = 2@@ ) { assert@@ True@@ (m@@ H@@ ardwar@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ True@@ (m@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ True@@ (m@@ Man@@ ual@@ H@@ ardwar@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ True@@ (m@@ Man@@ ual@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ True@@ (m@@ H@@ ardwar@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ True@@ (m@@ Man@@ ual@@ H@@ ardwar@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ Man@@ ual@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); } else { assert@@ False@@ (m@@ H@@ ardwar@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ Man@@ ual@@ H@@ ardwar@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ Man@@ ual@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ H@@ ardwar@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ Man@@ ual@@ H@@ ardwar@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); assert@@ False@@ (m@@ Man@@ ual@@ S@@ o@@ f@@ t@@ war@@ e@@ View@@ .is@@ Can@@ va@@ s@@ H@@ ardwar@@ e@@ Ac@@ ce@@ ler@@ ated@@ ()); } }
public void send@@ Text@@ Message@@ Inter@@ nal@@ (java.lang.String d@@ est@@ in@@ ation@@ Addres@@ s, java.lang.String s@@ c@@ Addres@@ s, java.lang.String tex@@ t, android.app.@@ P@@ end@@ ing@@ Int@@ ent s@@ ent@@ Intent@@ , android.app.@@ P@@ end@@ ing@@ Int@@ ent de@@ li@@ ver@@ y@@ Intent@@ , boolean per@@ si@@ st@@ Message@@ , int pri@@ or@@ ity@@ , boolean expec@@ t@@ M@@ ore@@ , int valid@@ ity@@ Per@@ io@@ d@@ ) { if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (d@@ est@@ in@@ ation@@ Address@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ In@@ va@@ li@@ d d@@ est@@ in@@ ation@@ Address@@ "); } if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ tex@@ t@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ In@@ va@@ li@@ d mess@@ age bo@@ d@@ y@@ "); } try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ IS@@ m@@ s icc@@ IS@@ m@@ s = android.telephony.@@ Sms@@ Manager.get@@ IS@@ ms@@ Service@@ Or@@ Throw@@ (); if (@@ icc@@ IS@@ m@@ s != null@@ ) { icc@@ IS@@ m@@ s.@@ send@@ Text@@ For@@ Sub@@ s@@ cri@@ ber@@ With@@ Option@@ s(@@ get@@ Sub@@ s@@ cription@@ Id@@ (), android.app.@@ Activity@@ Thread@@ .@@ current@@ Package@@ Name@@ (), d@@ est@@ in@@ ation@@ Addres@@ s, s@@ c@@ Addres@@ s, tex@@ t, s@@ ent@@ Intent@@ , de@@ li@@ ver@@ y@@ Intent@@ , per@@ si@@ st@@ Message@@ , pri@@ or@@ ity@@ , expec@@ t@@ M@@ ore@@ , valid@@ ity@@ Per@@ io@@ d@@ ); } } catch (android.os.RemoteException ex@@ ) { } }
public boolean ve@@ r@@ if@@ y@@ Host@@ Name@@ (java.lang.String ho@@ st@@ Name, java.lang.String p@@ attern@@ ) { if ((((@@ (@@ ho@@ st@@ Name == null@@ ) || (@@ ho@@ st@@ Nam@@ e.@@ isEmpty@@ ())) || (@@ ho@@ st@@ Nam@@ e.@@ start@@ s@@ With@@ ("@@ .@@ "@@ ))) || (@@ ho@@ st@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ .@@ .@@ "@@ ))) || (@@ ho@@ st@@ Nam@@ e.@@ contain@@ s("@@ *@@ "@@ ))) { return false@@ ; } if ((((@@ p@@ atter@@ n == null@@ ) || (p@@ attern@@ .is@@ Empty@@ ())) || (p@@ attern@@ .@@ start@@ s@@ With@@ ("@@ .@@ "@@ ))) || (p@@ attern@@ .@@ end@@ s@@ With@@ ("@@ .@@ .@@ "@@ ))) { return false@@ ; } if (!(@@ ho@@ st@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ .@@ "@@ ))) { ho@@ st@@ Name +@@ = '@@ .@@ '@@ ; } if (!@@ (p@@ attern@@ .@@ end@@ s@@ With@@ ("@@ .@@ "@@ ))) { p@@ atter@@ n +@@ = '@@ .@@ '@@ ; } p@@ atter@@ n = p@@ attern@@ .@@ to@@ Lo@@ w@@ er@@ C@@ ase@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ ); if (!@@ (p@@ attern@@ .@@ start@@ s@@ With@@ ("@@ *@@ .@@ "@@ ))) { return ho@@ st@@ Nam@@ e.@@ equals(@@ p@@ attern@@ ); } if ((@@ ho@@ st@@ Nam@@ e.@@ length@@ ()) < (p@@ attern@@ .@@ length@@ ())) { return false@@ ; } if (!(@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ i@@ er.@@ contain@@ s@@ At@@ Le@@ ast@@ T@@ w@@ o@@ Do@@ main@@ Name@@ L@@ ab@@ el@@ s@@ Ex@@ c@@ lu@@ d@@ ing@@ Root@@ (p@@ attern@@ ))) { return false@@ ; } java.lang.String su@@ f@@ fi@@ x = p@@ attern@@ .@@ sub@@ string@@ (1@@ ); if (!(@@ ho@@ st@@ Nam@@ e.@@ end@@ s@@ With@@ (s@@ u@@ f@@ fix@@ ))) { return false@@ ; } int su@@ f@@ fix@@ Start@@ Index@@ In@@ Host@@ Name = (@@ ho@@ st@@ Nam@@ e.@@ length@@ ()) - (s@@ u@@ f@@ fi@@ x.@@ length@@ ()); if ((@@ ho@@ st@@ Nam@@ e.@@ las@@ t@@ Index@@ Of@@ (@@ '@@ .@@ '@@ , (s@@ u@@ f@@ fix@@ Start@@ Index@@ In@@ Host@@ Name - 1@@ ))) != (-1@@ )) { return false@@ ; } return true@@ ; }
@org.junit.Test public void test@@ Des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ () { android.net.Network@@ Capabili@@ ti@@ es n@@ c@@ 1; android.net.Network@@ Capabili@@ ti@@ es n@@ c@@ 2@@ ; n@@ c@@ 1 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Trans@@ port@@ Type@@ (android.net.@@ Network@@ Capabili@@ ties.@@ TR@@ AN@@ S@@ P@@ OR@@ T_@@ CE@@ L@@ L@@ L@@ UL@@ AR@@ ); n@@ c@@ 2 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Trans@@ port@@ Type@@ (android.net.@@ Network@@ Capabili@@ ties.@@ TR@@ AN@@ S@@ P@@ OR@@ T_@@ WI@@ FI@@ ); assert@@ Not@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 2@@ )); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 1@@ )); n@@ c@@ 1 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ VAL@@ ID@@ A@@ TED@@ ); n@@ c@@ 2 = new android.net.Network@@ Capabilities@@ (); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 2@@ )); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 1@@ )); n@@ c@@ 1 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ ME@@ TER@@ ED@@ ); n@@ c@@ 2 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ IN@@ TER@@ NE@@ T@@ ); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 2@@ )); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 1@@ )); n@@ c@@ 1 = new android.net.Network@@ Capabilities@@ ().@@ remove@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ RE@@ S@@ TR@@ IC@@ TED@@ ); n@@ c@@ 2 = new android.net.Network@@ Capabilities@@ ().@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ IN@@ TER@@ NE@@ T@@ ); assert@@ Not@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 2@@ )); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 1@@ )); n@@ c@@ 1 = new android.net.Network@@ Capabilities@@ (); n@@ c@@ 2 = new android.net.Network@@ Capabilities@@ ().@@ set@@ S@@ pe@@ c@@ if@@ ier@@ (@@ new android.net.@@ String@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ ("@@ s@@ pe@@ c@@ if@@ ic@@ ation@@ s@@ ")); assert@@ Not@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 2@@ )); assert@@ Equal@@ s("@@ ", n@@ c@@ 1.@@ des@@ cri@@ be@@ Im@@ m@@ ut@@ able@@ D@@ if@@ feren@@ ces@@ (@@ n@@ c@@ 1@@ )); }
public android.system.@@ Str@@ u@@ ct@@ U@@ cre@@ d get@@ s@@ ock@@ op@@ t@@ U@@ cre@@ d@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ get@@ s@@ ock@@ op@@ t@@ U@@ cre@@ d@@ (f@@ d, le@@ vel@@ , option@@ ); }
@java.lang.Override public void value@@ Changed@@ (@@ javax.@@ sw@@ ing.@@ ev@@ ent.@@ List@@ Selection@@ Ev@@ ent e) { value@@ Change@@ d = true@@ ; java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ in value@@ Change@@ d f@@ un@@ ction@@ "); if ((@@ e.get@@ Value@@ Is@@ Ad@@ j@@ u@@ st@@ ing@@ ()) == false@@ ) { if ((@@ li@@ s@@ t.get@@ Sele@@ c@@ ted@@ Index@@ ()) == (-1@@ )) { sign@@ Out@@ B@@ utton@@ .set@@ Enabled@@ (@@ false@@ ); } else { sign@@ Out@@ B@@ utton@@ .set@@ Enabled@@ (@@ true@@ ); com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ I@@ te@@ m sele@@ c@@ ted@@ U@@ se@@ r = ((@@ com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ Item@@ ) (@@ list@@ Mode@@ l.get@@ (@@ li@@ s@@ t.get@@ Sele@@ c@@ ted@@ Index@@ ()))); com.google.gct.@@ log@@ in@@ .@@ G@@ oog@@ le@@ Log@@ in@@ .get@@ Instance@@ ().@@ set@@ Active@@ User@@ (@@ sele@@ c@@ ted@@ U@@ s@@ er.get@@ User@@ E@@ ma@@ il@@ ()); } }
protected android.telecom.@@ Connec@@ tion get@@ O@@ ri@@ gin@@ al@@ Connection@@ (android.@@ telecom.@@ Connec@@ tion connection@@ ) { if (@@ connec@@ tion instanceof com.android.@@ ser@@ vices.@@ telephony.@@ Telephony@@ Connection@@ ) { return ((@@ com.android.@@ ser@@ vices.@@ telephony.@@ Telephony@@ Connection@@ ) (@@ connection@@ )@@ ).get@@ O@@ ri@@ gin@@ al@@ Connection@@ (); } else { return null@@ ; } }
@org.junit.Test @@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ S@@ m@@ all@@ Test public void test@@ Remo@@ ve@@ M@@ T@@ el@@ Fe@@ ature@@ () throw@@ s android.os.@@ RemoteException { m@@ Test@@ Ims@@ Service@@ B@@ ind@@ er.@@ create@@ Ims@@ Fe@@ ature@@ (android.@@ telephony.@@ ims.@@ Ims@@ Service@@ Test.@@ TEST_@@ S@@ LO@@ T_@@ 0, Ims@@ Fe@@ ature@@ .@@ M@@ M@@ TE@@ L); m@@ Test@@ Ims@@ Service@@ B@@ ind@@ er.@@ remove@@ Ims@@ Fe@@ ature@@ (android.@@ telephony.@@ ims.@@ Ims@@ Service@@ Test.@@ TEST_@@ S@@ LO@@ T_@@ 0, Ims@@ Fe@@ ature@@ .@@ M@@ M@@ TE@@ L); ve@@ r@@ if@@ y@@ (m@@ Test@@ Ims@@ Service.@@ m@@ Mock@@ M@@ M@@ T@@ el@@ Fe@@ ature@@ ).@@ on@@ Fe@@ ature@@ Remo@@ v@@ ed@@ (); android.telephony.@@ ims.@@ f@@ e@@ ature@@ .@@ Ims@@ Fe@@ ature@@ > f@@ e@@ ature@@ s = m@@ Test@@ Ims@@ Service@@ .get@@ Ims@@ Fe@@ ature@@ Map@@ (android.@@ telephony.@@ ims.@@ Ims@@ Service@@ Test.@@ TEST_@@ S@@ LO@@ T_@@ 0); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Null@@ (m@@ Test@@ Ims@@ Service@@ .get@@ Ims@@ Fe@@ ature@@ From@@ Type@@ (f@@ e@@ at@@ ur@@ es@@ , Ims@@ Fe@@ ature@@ .@@ M@@ M@@ TE@@ L@@ )); }
public java.io.@@ Output@@ Stream@@ W@@ rite@@ r get@@ Trans@@ m@@ it@@ Stream@@ () { return m@@ Trans@@ m@@ it@@ Stream@@ ; }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ pri@@ m@@ i@@ tive@@ s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ pri@@ m@@ iti@@ v@@ es@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); if (!@@ (in@@ itializ@@ e@@ G@@ lo@@ b@@ al@@ s(@@ s@@ ))) { fail@@ Test@@ (); } else { s.@@ invok@@ e@@ _@@ pri@@ m@@ iti@@ v@@ es@@ _test@@ (@@ 0, 0); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); } p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
@java.lang.Override protected java.security.@@ Pri@@ v@@ ate@@ Ke@@ y eng@@ ine@@ Gener@@ ate@@ Pri@@ v@@ ate@@ (@@ java.security.@@ spec@@ .@@ Key@@ S@@ pe@@ c key@@ Spec@@ ) throw@@ s java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception { if (@@ key@@ S@@ pe@@ c == null@@ ) { throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception("@@ key@@ S@@ pe@@ c == null@@ "); } if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ C@@ r@@ t@@ Key@@ Spec@@ ) { return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ (((@@ java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ C@@ r@@ t@@ Key@@ Spec@@ ) (@@ key@@ Spec@@ ))); } else if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ Spec@@ ) { java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ S@@ pe@@ c r@@ s@@ a@@ Key@@ S@@ pe@@ c = ((@@ java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ Spec@@ ) (@@ key@@ Spec@@ )); return new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ (r@@ s@@ a@@ Key@@ Spec@@ ); } else if (@@ key@@ S@@ pe@@ c instanceof java.security.@@ spec@@ .@@ P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ) { java.security.@@ spec@@ .@@ P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ S@@ pe@@ c p@@ k@@ c@@ s@@ 8@@ Key@@ S@@ pe@@ c = ((@@ java.security.@@ spec@@ .@@ P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ) (@@ key@@ Spec@@ )); try { final org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Ke@@ y ke@@ y = new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Key@@ (@@ org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ d@@ 2@@ i@@ _P@@ K@@ C@@ S@@ 8@@ _P@@ R@@ I@@ V@@ _@@ KE@@ Y_@@ IN@@ F@@ O@@ (p@@ k@@ c@@ s@@ 8@@ Key@@ Spec@@ .get@@ En@@ cod@@ ed@@ ())); return org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ .get@@ Instance@@ (@@ key@@ ); } catch (java.lang.Exception e) { throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception(@@ e); } throw new java.security.@@ spec@@ .@@ In@@ valid@@ Key@@ Spec@@ Exception(("@@ M@@ us@@ t u@@ se RS@@ AP@@ u@@ bli@@ c@@ Key@@ S@@ pe@@ c or P@@ K@@ C@@ S@@ 8@@ En@@ cod@@ ed@@ Key@@ Spec@@ ; w@@ a@@ s " + (@@ key@@ Spec@@ .get@@ Class@@ ().get@@ Name@@ ()))); }
private void start@@ StateMach@@ ine@@ Up@@ dat@@ er@@ s() { try { m@@ N@@ w@@ Service.@@ register@@ Ob@@ server@@ (m@@ Net@@ lin@@ k@@ Track@@ er@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (m@@ Tag@@ , ("@@ Co@@ ul@@ d@@ n@@ 't reg@@ is@@ ter Net@@ lin@@ k@@ Track@@ er@@ : " + (e.toString()))); } m@@ N@@ w@@ Service.@@ start@@ (); }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 5@@ 12@@ U@@ dp@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 5@@ 12@@ , get@@ A@@ u@@ th@@ Key@@ (@@ 5@@ 12@@ ), 25@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , false@@ , 1); }
@java.lang.Override public com.android.ddmlib.@@ S@@ ync@@ Ser@@ vice get@@ S@@ ync@@ Service@@ () throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { com.android.ddmlib.@@ S@@ ync@@ Ser@@ vice s@@ ync@@ Ser@@ vice = new com.android.ddmlib.@@ S@@ ync@@ Service@@ (com.android.@@ ddmlib.@@ Android@@ Debug@@ B@@ rid@@ g@@ e.get@@ Socket@@ Address@@ (), this@@ ); if (s@@ ync@@ Service.@@ open@@ S@@ ync@@ ()) { return s@@ ync@@ Service@@ ; } return null@@ ; }
public void test@@ Sim@@ ple@@ Des@@ er@@ i@@ aliz@@ e@@ () { java.lang.String j@@ s@@ on@@ 2 = "@@ {@@ \"@@ start@@ Line@@ \"@@ :@@ 2@@ 4@@ 5@@ }@@ "; com.android.ide.common.@@ b@@ l@@ am@@ e.@@ Source@@ F@@ r@@ ag@@ ment@@ Posi@@ tion@@ R@@ an@@ g@@ e r@@ an@@ ge@@ 2 = g@@ s@@ on@@ Des@@ er@@ i@@ aliz@@ er.@@ f@@ rom@@ J@@ s@@ on@@ (@@ j@@ s@@ on@@ 2, com.android.ide.common.@@ b@@ l@@ am@@ e.@@ Source@@ F@@ r@@ ag@@ ment@@ Posi@@ tion@@ R@@ an@@ ge@@ .@@ class@@ ); assert@@ Equal@@ s@@ (@@ new com.android.ide.common.@@ b@@ l@@ am@@ e.@@ Source@@ F@@ r@@ ag@@ ment@@ Posi@@ tion@@ R@@ an@@ ge@@ (@@ 2@@ 4@@ 5, (-1@@ ), (-1@@ )), r@@ an@@ ge@@ 2@@ ); }
@java.lang.Override public void get@@ R@@ at@@ (java.lang.String call@@ ing@@ Package@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ e@@ uicc.@@ I@@ Get@@ R@@ at@@ Call@@ b@@ ac@@ k call@@ back@@ ) { check@@ Call@@ ing@@ Package@@ (c@@ all@@ ing@@ Package@@ ); }
private boolean is@@ Current@@ Network@@ Q@@ u@@ al@@ if@@ i@@ ed@@ (android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation network@@ ) { if (@@ net@@ wor@@ k == null@@ ) { local@@ Log@@ ("@@ N@@ o curr@@ ent connec@@ ted network@@ .@@ "); return false@@ ; } else { local@@ Log@@ ((@@ (("@@ C@@ urr@@ ent connec@@ ted network@@ : " + (@@ network@@ .@@ SS@@ ID@@ )) + " , ID@@ : ") + (@@ network@@ .@@ network@@ Id@@ ))); } if (@@ network@@ .@@ e@@ p@@ h@@ em@@ er@@ al@@ ) { local@@ Log@@ ("@@ C@@ urr@@ ent net@@ wor@@ k is an e@@ p@@ h@@ em@@ er@@ al on@@ e.@@ "); return false@@ ; } if (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Util.@@ is@@ Config@@ For@@ Open@@ Network@@ (@@ network@@ )) { local@@ Log@@ ("@@ C@@ urr@@ ent net@@ wor@@ k is a op@@ e@@ n on@@ e.@@ "); return false@@ ; } if (m@@ W@@ if@@ i@@ Info@@ .is@@ 2@@ 4@@ G@@ H@@ z@@ ()) { local@@ Log@@ ("@@ C@@ urr@@ ent net@@ wor@@ k is 2.@@ 4@@ G@@ H@@ z@@ .@@ "); return false@@ ; } int current@@ R@@ ss@@ i = m@@ W@@ if@@ i@@ Info@@ .get@@ Rs@@ si@@ (); if ((@@ (m@@ W@@ if@@ i@@ Info@@ .is@@ 2@@ 4@@ G@@ H@@ z@@ ()) && (c@@ urrent@@ R@@ ss@@ i < (m@@ Th@@ res@@ ho@@ l@@ d@@ Q@@ u@@ al@@ if@@ i@@ ed@@ Rs@@ si@@ 2@@ 4@@ ))) || ((m@@ W@@ if@@ i@@ Info@@ .is@@ 5@@ G@@ H@@ z@@ ()) && (c@@ urrent@@ R@@ ss@@ i < (m@@ Th@@ res@@ ho@@ l@@ d@@ Q@@ u@@ al@@ if@@ i@@ ed@@ Rs@@ si@@ 5@@ )@@ ))) { local@@ Log@@ ((((@@ ("@@ C@@ urr@@ ent net@@ wor@@ k b@@ and@@ =@@ " + (m@@ W@@ if@@ i@@ Info@@ .is@@ 2@@ 4@@ G@@ H@@ z@@ () ? "@@ 2.@@ 4@@ G@@ H@@ z@@ " : "@@ 5@@ G@@ H@@ z@@ ")) + ", RS@@ SI@@ [@@ ") + current@@ Rs@@ si@@ ) + "@@ ]@@ -@@ ac@@ ce@@ p@@ t@@ able bu@@ t not qu@@ al@@ if@@ i@@ ed.@@ ")); return false@@ ; } return true@@ ; }
void register@@ For@@ No@@ t@@ if@@ ic@@ ation@@ (@@ int c@@ lient@@ I@@ f@@ , java.lang.String addres@@ s, int handle@@ , boolean enable@@ ) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); if (com.android.bluetooth.@@ g@@ at@@ t.@@ G@@ att@@ Service.@@ DBG) android.util.Log.d@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ G@@ att@@ Service.TAG, ((("@@ register@@ For@@ No@@ t@@ if@@ ic@@ ation@@ () - addres@@ s@@ =@@ " + addres@@ s) + " enable@@ : ") + enable@@ )); java.lang.Integ@@ er con@@ n@@ Id = mC@@ lient@@ Map@@ .@@ con@@ n@@ Id@@ By@@ Addres@@ s(@@ c@@ lient@@ I@@ f@@ , addres@@ s); if (@@ con@@ n@@ Id != null@@ ) { g@@ att@@ Client@@ Reg@@ ister@@ For@@ No@@ t@@ if@@ ic@@ ation@@ s@@ Native@@ (c@@ lient@@ I@@ f@@ , addres@@ s, handle@@ , enable@@ ); } else { android.util.Log.e@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ G@@ att@@ Service.TAG, (("@@ register@@ For@@ No@@ t@@ if@@ ic@@ ation@@ () - N@@ o connec@@ tion for " + addres@@ s) + "@@ .@@ .@@ .@@ ")); } }
private java.io.File get@@ Root@@ Dir@@ () { java.security.@@ Code@@ S@@ our@@ ce s@@ our@@ ce = get@@ Class@@ ().get@@ Pro@@ te@@ ction@@ Do@@ main@@ ().get@@ Code@@ Source@@ (); if (s@@ our@@ ce != null@@ ) { java.net.@@ UR@@ L loc@@ ation = source@@ .get@@ Location@@ (); try { java.io.File di@@ r = new java.io.File@@ (@@ loc@@ ation.@@ to@@ UR@@ I@@ ()); assert@@ True@@ (d@@ ir@@ .get@@ Path@@ (), d@@ ir.@@ exist@@ s()); while (d@@ i@@ r != null@@ ) { java.io.File setting@@ s@@ G@@ rad@@ le = new java.io.File@@ (d@@ ir@@ , "@@ setting@@ s.@@ grad@@ le@@ "); if (@@ setting@@ s@@ G@@ rad@@ le.@@ exist@@ s@@ ()) { return d@@ ir@@ .get@@ Par@@ ent@@ File@@ ().get@@ Par@@ ent@@ File@@ (); } java.io.File l@@ int = new java.io.File@@ (d@@ ir@@ , "@@ l@@ int@@ "); if ((@@ l@@ int@@ .@@ exist@@ s@@ ()) && (@@ new java.io.File@@ (@@ l@@ int@@ , "@@ c@@ li@@ ").@@ exist@@ s@@ ())) { return d@@ ir@@ .get@@ Par@@ ent@@ File@@ ().get@@ Par@@ ent@@ File@@ (); } if (d@@ ir@@ .getName@@ ().@@ equal@@ s("@@ too@@ l@@ s@@ ")) { java.io.File b@@ as@@ e = new java.io.File@@ (d@@ ir@@ , "@@ b@@ ase@@ "); if (b@@ ase.@@ exist@@ s@@ ()) { return d@@ ir@@ .get@@ Par@@ ent@@ File@@ (); } } di@@ r = d@@ ir@@ .get@@ Par@@ ent@@ File@@ (); } return null@@ ; } catch (@@ java.net.@@ UR@@ IS@@ yn@@ t@@ a@@ x@@ Exception e) { fail@@ (@@ e.get@@ Loc@@ aliz@@ ed@@ Message@@ ()); } } return null@@ ; }
@java.lang.Override public java.lang.String get@@ Name@@ () { return m@@ Network@@ Re@@ com@@ m@@ end@@ ation@@ s@@ Enable@@ d ? com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ .@@ TA@@ G : m@@ Ex@@ ter@@ nal@@ S@@ core@@ E@@ valu@@ ator@@ .getName@@ (); }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); if (m@@ Has@@ Fe@@ ature@@ ) { m@@ User@@ Id = m@@ Pri@@ m@@ ary@@ User@@ Id@@ ; in@@ stall@@ App@@ As@@ User@@ (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ DE@@ VIC@@ E_@@ AD@@ M@@ IN@@ _@@ AP@@ K@@ , m@@ User@@ Id); set@@ Profile@@ O@@ wn@@ er@@ Or@@ Fail@@ ((((@@ DE@@ VIC@@ E_@@ AD@@ M@@ IN@@ _P@@ K@@ G) + "@@ /@@ ") + (@@ AD@@ M@@ IN@@ _RE@@ CE@@ I@@ V@@ ER_@@ TEST_@@ C@@ LA@@ SS@@ )), m@@ User@@ Id); } catch (java.lang.@@ Throw@@ able throw@@ able@@ ) { get@@ Device@@ ().@@ un@@ in@@ stall@@ Package@@ (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ DE@@ VIC@@ E_@@ AD@@ M@@ IN@@ _P@@ K@@ G@@ ); throw throw@@ able@@ ; } }
public void put@@ Next@@ Short@@ (@@ short valu@@ e) { check@@ Type@@ (@@ short@@ .@@ class@@ ); (@@ arg@@ ument@@ Id@@ x@@ )@@ ++@@ ; f@@ rame@@ Bu@@ f.@@ put@@ Int@@ ((@@ (@@ short@@ ) (@@ value@@ ))); }
public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l d@@ est@@ , int flag@@ s) { d@@ est.@@ write@@ Int@@ (m@@ Ma@@ x@@ Data@@ Call@@ s); }
void start@@ Thread@@ () { ++@@ (@@ org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Count@@ Mo@@ d@@ if@@ ier@@ Debug@@ ge@@ e.@@ th@@ read@@ Run@@ Count@@ ); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ Count@@ Mo@@ d@@ if@@ ier@@ Debug@@ ge@@ e.@@ start@@ Thread@@ : th@@ read@@ Run@@ Count@@ =@@ " + (@@ org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Count@@ Mo@@ d@@ if@@ ier@@ Debug@@ ge@@ e.@@ th@@ read@@ Run@@ Count@@ ))); java.lang.@@ Th@@ re@@ ad t = new java.lang.@@ Thread@@ (("@@ Test@@ Thread@@ -@@ " + (@@ org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Count@@ Mo@@ d@@ if@@ ier@@ Debug@@ ge@@ e.@@ th@@ read@@ Run@@ Count@@ ))); t.@@ start@@ (); try { t.@@ j@@ o@@ in@@ (); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } }
public int send@@ to@@ (java.io.FileDescriptor f@@ d, byte@@ [] byte@@ s, int byte@@ Offset@@ , int byte@@ Count@@ , int flag@@ s, java.net.Inet@@ Address in@@ et@@ Addres@@ s, int port@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.net.@@ Socket@@ Exception { return os.@@ send@@ to@@ (f@@ d, byte@@ s, byte@@ Offset@@ , byte@@ Count@@ , flag@@ s, in@@ et@@ Addres@@ s, port@@ ); }
public java.lang.String[] get@@ I@@ si@@ m@@ Im@@ pu@@ () { try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ I@@ Phone@@ Sub@@ Info in@@ fo = get@@ Sub@@ s@@ cri@@ ber@@ Info@@ (); if (in@@ fo == null@@ ) return null@@ ; return info@@ .get@@ I@@ si@@ m@@ Im@@ pu@@ (get@@ Sub@@ Id@@ ()); } catch (android.os.RemoteException ex@@ ) { return null@@ ; } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception ex@@ ) { return null@@ ; } }
com.android.ddmlib.@@ R@@ aw@@ Im@@ age get@@ S@@ cre@@ en@@ sho@@ t@@ (@@ long time@@ out, java.util.@@ concurrent.@@ Time@@ Un@@ i@@ t un@@ it@@ ) throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { com.android.ddmlib.@@ R@@ aw@@ Im@@ age s@@ cre@@ en@@ sho@@ t@@ (@@ long time@@ out, java.util.@@ concurrent.@@ Time@@ Un@@ i@@ t un@@ it@@ ) throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { com.android.ddmlib.@@ Handle@@ Exception; return un@@ it@@ ; }
public void add@@ I@@ 8@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Byte@@ 2 v@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { m@@ N@@ .add@@ I@@ 8@@ (@@ new android.renderscript.@@ Byte@@ 2@@ (@@ v@@ .@@ x@@ , v@@ .@@ y@@ )); return@@ ; } add@@ I@@ 8@@ (@@ v@@ .@@ x@@ ); add@@ I@@ 8@@ (@@ v@@ .@@ y@@ ); }
private void s@@ ync@@ View@@ er@@ Selection@@ () { org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ I@@ T@@ re@@ e@@ Content@@ Provid@@ er provid@@ er = ((@@ org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ I@@ T@@ re@@ e@@ Content@@ Provider@@ ) (m@@ T@@ re@@ e@@ View@@ er.get@@ Content@@ Provider@@ ())); java.lang.Object in@@ put = m@@ T@@ re@@ e@@ View@@ er.get@@ Input@@ (); if (in@@ put == null@@ ) { return@@ ; } for (@@ java.lang.Object c@@ at : provid@@ er.get@@ Element@@ s(@@ input@@ )) { java.lang.Ob@@ ject@@ [] ch@@ ild@@ re@@ n = provid@@ er.get@@ Element@@ s(@@ cat@@ ); boolean all@@ Check@@ ed = (@@ ch@@ ild@@ r@@ en@@ .@@ length) > 0; for (@@ java.lang.Object ch@@ il@@ d : ch@@ ild@@ r@@ en@@ ) { if (@@ ch@@ il@@ d instanceof com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ core.@@ P@@ kg@@ Item@@ ) { com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ core.@@ P@@ kg@@ I@@ te@@ m ite@@ m = ((@@ com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ core.@@ P@@ kg@@ Item@@ ) (@@ ch@@ ild@@ )); boolean check@@ ed = i@@ tem@@ .is@@ Check@@ ed@@ (); all@@ Check@@ ed &@@ = check@@ ed@@ ; if (@@ check@@ ed != (m@@ T@@ re@@ e@@ View@@ er.get@@ Check@@ ed@@ (i@@ tem@@ ))) { if (@@ check@@ ed@@ ) { if (!(m@@ T@@ re@@ e@@ View@@ er.get@@ Ex@@ p@@ and@@ ed@@ State@@ (@@ cat@@ ))) { m@@ T@@ re@@ e@@ View@@ er.@@ set@@ Ex@@ p@@ and@@ ed@@ State@@ (@@ cat@@ , true@@ ); } } check@@ And@@ Ex@@ p@@ and@@ Item@@ (i@@ tem@@ , check@@ ed@@ , true@@ , false@@ ); } } } if (@@ all@@ Check@@ ed != (m@@ T@@ re@@ e@@ View@@ er.get@@ Check@@ ed@@ (@@ cat@@ ))) { m@@ T@@ re@@ e@@ View@@ er.@@ set@@ Check@@ ed@@ (@@ cat@@ , all@@ Check@@ ed@@ ); } } }
@org.junit.Test public void ch@@ oo@@ se@@ S@@ av@@ ed@@ Network@@ With@@ Ex@@ ter@@ nal@@ S@@ core@@ () { java.lang.String[] ss@@ id@@ s = new java.lang.String@@ []{ "@@ \"@@ test@@ 1@@ \"@@ " }; java.lang.String[] b@@ ss@@ id@@ s = new java.lang.String@@ []{ "@@ 6@@ c@@ :@@ f@@ 3@@ :@@ 7@@ f@@ :@@ a@@ e@@ :@@ 8@@ c@@ :@@ f@@ 3@@ " }; int@@ [] f@@ re@@ q@@ s = new int@@ []{ 5@@ 2@@ 0@@ 0 }; java.lang.String[] cap@@ s = new java.lang.String@@ []{ "@@ [@@ W@@ P@@ A@@ 2@@ -@@ E@@ AP@@ -@@ C@@ M@@ P@@ ]@@ [@@ E@@ SS@@ ]@@ " }; int@@ [] sec@@ ur@@ iti@@ es = new int@@ []{ com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Util.@@ S@@ EC@@ UR@@ ITY@@ _P@@ S@@ K }; int@@ [] le@@ vel@@ s = new int@@ []{ (m@@ Th@@ res@@ ho@@ l@@ d@@ Q@@ u@@ al@@ if@@ i@@ ed@@ Rs@@ si@@ 5@@ G) + 8 }; java.lang.Integ@@ er@@ [] s@@ core@@ s = new java.lang.Integ@@ er@@ []{ 12@@ 0 }; boolean@@ [] m@@ eter@@ ed@@ H@@ int@@ s = new boolean@@ []{ false }; com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ Scan@@ D@@ eta@@ il@@ s@@ And@@ W@@ if@@ i@@ Config@@ s scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ s = com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ set@@ up@@ Scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ Store@@ (s@@ s@@ id@@ s, b@@ ss@@ id@@ s, f@@ re@@ q@@ s, cap@@ s, le@@ vel@@ s, sec@@ ur@@ i@@ ties@@ , m@@ W@@ if@@ i@@ Config@@ Manager@@ , mC@@ lock@@ ); java.util.List<@@ com.android.server.@@ w@@ if@@ i.@@ Scan@@ D@@ eta@@ il@@ > scan@@ D@@ eta@@ il@@ s = scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ s.get@@ Scan@@ D@@ eta@@ il@@ s(); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ [] s@@ av@@ ed@@ Config@@ s = scan@@ D@@ eta@@ il@@ s@@ And@@ Config@@ s.get@@ W@@ if@@ i@@ Config@@ s(); s@@ av@@ ed@@ Config@@ s@@ [0@@ ]@@ .@@ u@@ se@@ Ex@@ ter@@ nal@@ S@@ core@@ s = true@@ ; com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ config@@ ure@@ S@@ core@@ Cach@@ e@@ (m@@ S@@ core@@ Cach@@ e@@ , scan@@ D@@ eta@@ il@@ s, s@@ co@@ res@@ , m@@ eter@@ ed@@ H@@ int@@ s); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation c@@ and@@ id@@ ate = m@@ Ex@@ ter@@ nal@@ S@@ core@@ E@@ valu@@ ator@@ .@@ e@@ valu@@ ate@@ Network@@ s(@@ scan@@ D@@ eta@@ il@@ s, null@@ , null@@ , false@@ , true@@ , m@@ S@@ core@@ Cach@@ e@@ , null@@ ); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Uti@@ l@@ .@@ assert@@ Configuration@@ Equal@@ (s@@ av@@ ed@@ Config@@ s@@ [0@@ ]@@ , c@@ and@@ id@@ ate@@ ); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ Test@@ Util.@@ ve@@ r@@ if@@ y@@ Sele@@ c@@ ted@@ Scan@@ Result@@ (m@@ W@@ if@@ i@@ Config@@ Manager@@ , scan@@ D@@ eta@@ il@@ s.get@@ (0@@ ).get@@ Scan@@ Result@@ (), c@@ and@@ id@@ ate@@ ); }
public static com.android.@@ uti@@ ls.@@ Pa@@ ir@@ <@@ com.android.@@ resources.@@ Resource@@ Type, java.lang.String> parse@@ Resource@@ (java.lang.String ur@@ l@@ ) { if (@@ ur@@ l.@@ start@@ s@@ With@@ (com.android.@@ Sdk@@ Constants.@@ P@@ RE@@ FI@@ X_@@ TH@@ E@@ M@@ E_@@ RE@@ F@@ )) { java.lang.String re@@ main@@ der = ur@@ l.@@ sub@@ string@@ (com.android.@@ Sdk@@ Constants.@@ P@@ RE@@ FI@@ X_@@ TH@@ E@@ M@@ E_@@ RE@@ F@@ .@@ length@@ ()); if (@@ ur@@ l.@@ start@@ s@@ With@@ (com.android.@@ Sdk@@ Constants.@@ AT@@ TR@@ _RE@@ F@@ _P@@ RE@@ FI@@ X@@ )) { ur@@ l = (com.android.@@ Sdk@@ Constants.@@ P@@ RE@@ FI@@ X@@ _RE@@ S@@ O@@ UR@@ C@@ E_@@ RE@@ F@@ ) + (@@ ur@@ l.@@ sub@@ string@@ (1@@ )); return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Helper.@@ parse@@ Resource@@ (@@ ur@@ l@@ ); } int co@@ lo@@ n = ur@@ l.@@ index@@ Of@@ (@@ '@@ :@@ '@@ ); if (@@ co@@ lo@@ n != (-1@@ )) { if ((@@ re@@ main@@ d@@ er.@@ index@@ Of@@ (@@ '@@ /@@ '@@ , co@@ lon@@ )) == (-1@@ )) { re@@ main@@ der = (((@@ re@@ main@@ d@@ er.@@ sub@@ string@@ (@@ 0, co@@ lon@@ )) + (com.android.@@ Sdk@@ Constants.@@ RE@@ S@@ O@@ UR@@ C@@ E_@@ C@@ L@@ Z@@ _@@ AT@@ TR@@ )) + '@@ /@@ '@@ ) + (re@@ main@@ d@@ er.@@ sub@@ string@@ (@@ co@@ lon@@ )); } ur@@ l = (com.android.@@ Sdk@@ Constants.@@ P@@ RE@@ FI@@ X@@ _RE@@ S@@ O@@ UR@@ C@@ E_@@ RE@@ F@@ ) + re@@ main@@ der@@ ; return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Helper.@@ parse@@ Resource@@ (@@ ur@@ l@@ ); } else { int s@@ las@@ h = ur@@ l.@@ index@@ Of@@ (@@ '@@ /@@ '@@ ); if (s@@ las@@ h == (-1@@ )) { ur@@ l = ((@@ (com.android.@@ Sdk@@ Constants.@@ P@@ RE@@ FI@@ X@@ _RE@@ S@@ O@@ UR@@ C@@ E_@@ RE@@ F@@ ) + (com.android.@@ Sdk@@ Constants.@@ RE@@ S@@ O@@ UR@@ C@@ E_@@ C@@ L@@ Z@@ _@@ AT@@ TR@@ )) + '@@ /@@ '@@ ) + re@@ main@@ der@@ ; return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Helper.@@ parse@@ Resource@@ (@@ ur@@ l@@ ); } } return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Helper.@@ parse@@ Resource@@ (@@ ur@@ l@@ ); }
private void test@@ Tr@@ an@@ si@@ tion@@ Selection@@ (@@ boolean test@@ Open@@ , boolean test@@ New@@ Task@@ , boolean bo@@ t@@ to@@ m@@ W@@ all@@ p@@ ap@@ er, boolean to@@ p@@ W@@ all@@ p@@ ap@@ er, boolean to@@ p@@ Trans@@ lu@@ c@@ ent@@ , boolean test@@ S@@ low@@ St@@ op@@ , java.lang.String expected@@ Tr@@ an@@ si@@ t@@ ) throw@@ s java.lang.Exception { if (is@@ V@@ r@@ Headset@@ ()) { return@@ ; } java.lang.String bo@@ t@@ to@@ m@@ Start@@ C@@ m@@ d = get@@ A@@ m@@ Start@@ C@@ m@@ d@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ Tr@@ an@@ si@@ tion@@ Selection@@ Test@@ s.@@ B@@ O@@ T@@ TO@@ M@@ _@@ AC@@ TIV@@ ITY@@ _N@@ AM@@ E); if (@@ bo@@ t@@ to@@ m@@ W@@ all@@ p@@ ap@@ er@@ ) { bo@@ t@@ to@@ m@@ Start@@ C@@ m@@ d +@@ = " --@@ e@@ z US@@ E_@@ W@@ AL@@ L@@ P@@ AP@@ E@@ R true@@ "; } if (@@ test@@ S@@ low@@ St@@ op@@ ) { bo@@ t@@ to@@ m@@ Start@@ C@@ m@@ d +@@ = " --@@ e@@ i S@@ TO@@ P@@ _@@ DE@@ LA@@ Y 3@@ 00@@ 0@@ "; } exec@@ ute@@ Sh@@ ell@@ Command@@ (@@ bo@@ t@@ to@@ m@@ Start@@ C@@ m@@ d@@ ); final java.lang.String to@@ p@@ Activity@@ Name = (@@ to@@ p@@ Trans@@ lu@@ c@@ ent@@ ) ? android.@@ server.@@ cts.@@ Activity@@ Manager@@ Tr@@ an@@ si@@ tion@@ Selection@@ Test@@ s.@@ TR@@ AN@@ S@@ L@@ U@@ C@@ EN@@ T_@@ TO@@ P@@ _@@ AC@@ TIV@@ ITY@@ _N@@ AM@@ E : android.@@ server.@@ cts.@@ Activity@@ Manager@@ Tr@@ an@@ si@@ tion@@ Selection@@ Test@@ s.@@ TO@@ P@@ _@@ AC@@ TIV@@ ITY@@ _N@@ AME@@ ; final java.lang.String[] bo@@ t@@ to@@ m@@ Activity@@ Ar@@ ra@@ y = new java.lang.String@@ []{ android.@@ server.@@ cts.@@ Activity@@ Manager@@ Tr@@ an@@ si@@ tion@@ Selection@@ Test@@ s.@@ B@@ O@@ T@@ TO@@ M@@ _@@ AC@@ TIV@@ ITY@@ _N@@ AM@@ E }; final java.lang.String[] to@@ p@@ Activity@@ Ar@@ ra@@ y = new java.lang.String@@ []{ to@@ p@@ Activity@@ Name }; m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , bo@@ t@@ to@@ m@@ Activity@@ Array@@ ); java.lang.String to@@ p@@ Start@@ C@@ m@@ d = get@@ A@@ m@@ Start@@ C@@ m@@ d@@ (@@ to@@ p@@ Activity@@ Name); if (@@ test@@ New@@ Task@@ ) { to@@ p@@ Start@@ C@@ m@@ d +@@ = " -@@ f 0@@ x@@ 1@@ 8@@ 0000@@ 00@@ "; } if (@@ to@@ p@@ W@@ all@@ p@@ ap@@ er@@ ) { to@@ p@@ Start@@ C@@ m@@ d +@@ = " --@@ e@@ z US@@ E_@@ W@@ AL@@ L@@ P@@ AP@@ E@@ R true@@ "; } if (!@@ test@@ Open@@ ) { to@@ p@@ Start@@ C@@ m@@ d +@@ = " --@@ e@@ i F@@ IN@@ IS@@ H@@ _@@ DE@@ LA@@ Y 1@@ 00@@ 0@@ "; } exec@@ ute@@ Sh@@ ell@@ Command@@ (@@ to@@ p@@ Start@@ C@@ m@@ d@@ ); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (@@ 5@@ 00@@ 0); if (@@ test@@ Open@@ ) { m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , to@@ p@@ Activity@@ Array@@ ); } else { m@@ A@@ m@@ W@@ m@@ State.@@ com@@ pu@@ te@@ State@@ (m@@ Device@@ , bo@@ t@@ to@@ m@@ Activity@@ Array@@ ); } assert@@ Equal@@ s("@@ P@@ i@@ ck@@ ed w@@ ron@@ g tr@@ an@@ si@@ tion@@ ", expected@@ Tr@@ an@@ si@@ t, m@@ A@@ m@@ W@@ m@@ Stat@@ e.get@@ W@@ m@@ State@@ ().get@@ L@@ ast@@ Tr@@ an@@ si@@ tion@@ ()); }
private static void build@@ T@@ re@@ e@@ Item@@ (com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l mode@@ l@@ , final View@@ No@@ de ch@@ ild@@ ) { int do@@ t@@ In@@ dex = ch@@ ild@@ .@@ nam@@ e.@@ las@@ t@@ Index@@ Of@@ (@@ '@@ .@@ '@@ ); java.lang.String short@@ Name = (@@ do@@ t@@ In@@ dex == (-1@@ )) ? ch@@ ild@@ .@@ name : ch@@ ild@@ .@@ nam@@ e.@@ sub@@ string@@ (@@ (@@ do@@ t@@ In@@ dex + 1@@ )); java.lang.String tex@@ t = (@@ (@@ short@@ Name + "@@ : \"@@ ") + (@@ ch@@ ild@@ .@@ nam@@ ed@@ Properties@@ .get@@ ("@@ tex@@ t@@ :@@ m@@ Text@@ ").@@ value@@ )) + "@@ \"@@ "; org.eclipse.swt.@@ widget@@ s.@@ T@@ re@@ e@@ I@@ te@@ m ite@@ m = new org.eclipse.swt.@@ widget@@ s.@@ T@@ re@@ e@@ Item@@ (com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ Results@@ T@@ re@@ e@@ , org.eclipse.swt.@@ S@@ W@@ T@@ .@@ N@@ ON@@ E); i@@ tem@@ .set@@ Text@@ (com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ tr@@ an@@ s@@ for@@ m@@ Text@@ (@@ tex@@ t, com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ MA@@ X@@ _N@@ U@@ M@@ _C@@ H@@ AR@@ AC@@ TE@@ RS@@ )); i@@ tem@@ .set@@ Image@@ (com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Display@@ .get@@ Result@@ Image@@ (m@@ o@@ de@@ l.@@ has@@ Su@@ f@@ fi@@ c@@ i@@ ent@@ Con@@ tr@@ ast@@ ())); com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ View@@ Node@@ For@@ T@@ re@@ e@@ Item@@ .@@ put@@ (i@@ tem@@ , ch@@ ild@@ ); com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ build@@ T@@ re@@ e@@ Item@@ s@@ For@@ Mode@@ l@@ (m@@ o@@ de@@ l@@ , i@@ tem@@ ); }
private void set@@ Audio@@ Format@@ () { byte@@ [] buff@@ er = new byte@@ [@@ (com.android.server.@@ h@@ dm@@ i.@@ Request@@ Short@@ Audio@@ Descrip@@ tor@@ Action@@ .@@ param@@ s@@ B@@ ack@@ up@@ .@@ length) + 2@@ ]; java.lang.String a@@ udio@@ Param@@ et@@ er = "@@ set@@ _@@ AR@@ C@@ _@@ for@@ mat@@ =@@ "; java.lang.String key@@ Value@@ Pa@@ ir@@ s; buff@@ er@@ [0@@ ] = (@@ (@@ byte@@ ) (com.android.server.@@ h@@ dm@@ i.@@ Request@@ Short@@ Audio@@ Descrip@@ tor@@ Action@@ .@@ param@@ s@@ B@@ ack@@ up@@ .@@ length@@ )); buff@@ er@@ [@@ 1@@ ] = (@@ (@@ byte@@ ) (m@@ Av@@ r@@ Port@@ )); for (@@ int in@@ dex = 0; in@@ dex < (com.android.server.@@ h@@ dm@@ i.@@ Request@@ Short@@ Audio@@ Descrip@@ tor@@ Action@@ .@@ param@@ s@@ B@@ ack@@ up@@ .@@ length); index@@ ++) { buff@@ er@@ [@@ (in@@ dex + 2@@ )@@ ] = com.android.server.@@ h@@ dm@@ i.@@ Request@@ Short@@ Audio@@ Descrip@@ tor@@ Action@@ .@@ param@@ s@@ B@@ ack@@ up@@ [@@ index@@ ]; } key@@ Value@@ Pa@@ ir@@ s = a@@ udio@@ Param@@ et@@ er + (@@ java.util.Arrays.@@ toString@@ (@@ buff@@ er@@ )); t@@ v@@ ().@@ set@@ Audio@@ Parameter@@ s(@@ key@@ Value@@ Pa@@ ir@@ s); fin@@ is@@ h@@ (); }
public void ms@@ ync@@ (@@ long addres@@ s, long byte@@ Count@@ , int flag@@ s) throw@@ s android.system.@@ Errno@@ Exception;
@org.junit.Test @@@ java.lang.@@ Run@@ tim@@ e @org.junit.@@ ex@@ per@@ im@@ ent@@ al.@@ cate@@ gor@@ i@@ es.@@ C@@ ate@@ gor@@ y@@ (com.android.jack.@@ test.@@ cate@@ gor@@ y.@@ Runtime@@ Reg@@ res@@ sion@@ Test@@ .@@ class@@ ) public void si@@ mp@@ le@@ Name@@ 00@@ 1@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (com.android.jack.@@ ref@@ le@@ ct.@@ Ref@@ le@@ ct@@ Test@@ s.@@ TE@@ S@@ T@@ 00@@ 1_@@ WI@@ TH@@ O@@ U@@ T_@@ S@@ H@@ R@@ IN@@ K@@ _S@@ CH@@ ED@@ U@@ LA@@ BL@@ E@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
public boolean p@@ 2@@ p@@ Ser@@ v@@ Dis@@ c@@ Can@@ cel@@ Re@@ q@@ (java.lang.String id@@ ) { if ((@@ com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ H@@ ID@@ L@@ _P@@ 2@@ P@@ _@@ EN@@ ABL@@ E@@ ) && ((m@@ Supplicant@@ P2p@@ Iface@@ H@@ al@@ ) != null@@ )) { return m@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ can@@ cel@@ Service@@ Dis@@ cover@@ y@@ (@@ id@@ ); } else { return do@@ Boole@@ an@@ Command@@ (("@@ P2@@ P@@ _S@@ ER@@ V@@ _@@ D@@ IS@@ C@@ _C@@ AN@@ CE@@ L@@ _RE@@ Q " + id@@ )); } }
@java.lang.Override @javax.annotation.@@ Check@@ For@@ Null public com.android.sched.vfs.@@ VF@@ S check@@ String(@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ cod@@ ec@@ .@@ Co@@ dec@@ Context contex@@ t, @javax.annotation.@@ N@@ on@@ null java.lang.String string@@ ) throw@@ s com.android.sched.util.@@ cod@@ ec@@ .@@ Par@@ sing@@ Exception { try { java.security.@@ Provid@@ er.@@ Ser@@ vice ser@@ vice = message@@ Dig@@ est@@ Co@@ dec@@ .@@ check@@ String(@@ contex@@ t, "@@ S@@ H@@ A@@ "); return new com.android.sched.vfs.@@ C@@ ase@@ In@@ s@@ en@@ si@@ tive@@ F@@ S@@ (@@ cod@@ ec@@ .@@ check@@ String(@@ contex@@ t, string@@ ), 2, new com.android.sched.util.@@ config.@@ Message@@ Dig@@ est@@ Fa@@ ctory@@ (@@ service@@ )); } catch (com.android.s@@ ched.@@ vfs.@@ W@@ ron@@ g@@ VF@@ S@@ Format@@ Exception e) { throw new com.android.sched.util.@@ cod@@ ec@@ .@@ Par@@ sing@@ Exception(@@ e); } }
private void set@@ Co@@ dec@@ Value@@ (@@ int cod@@ ec@@ Type, int s@@ am@@ ple@@ R@@ ate@@ , int b@@ it@@ s@@ Per@@ S@@ am@@ ple@@ , long cod@@ ec@@ S@@ pe@@ c@@ if@@ ic@@ 1@@ ) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ A@@ 2@@ dp@@ Recei@@ ver.@@ TAG, ((((@@ ((("@@ set@@ Co@@ dec@@ Value Code@@ c Type@@ : " + cod@@ ec@@ Typ@@ e) + " s@@ am@@ ple@@ R@@ ate@@ : ") + s@@ am@@ ple@@ R@@ ate@@ ) + " b@@ it@@ s@@ Per@@ S@@ am@@ ple@@ : ") + b@@ it@@ s@@ Per@@ S@@ am@@ ple@@ ) + " L@@ DA@@ C qual@@ ity@@ : ") + cod@@ ec@@ S@@ pe@@ c@@ if@@ ic@@ 1@@ )); android.@@ bluetooth.Bluetooth@@ Co@@ dec@@ Con@@ fig cod@@ ec@@ Con@@ fig = new android.@@ bluetooth.Bluetooth@@ Co@@ dec@@ Config@@ (@@ cod@@ ec@@ Type, android.@@ bluetooth.Bluetooth@@ Co@@ dec@@ Config.@@ C@@ O@@ DE@@ C@@ _P@@ R@@ IO@@ R@@ ITY@@ _@@ H@@ I@@ G@@ H@@ E@@ S@@ T, s@@ am@@ ple@@ R@@ ate@@ , b@@ it@@ s@@ Per@@ S@@ am@@ ple@@ , android.@@ bluetooth.Bluetooth@@ Co@@ dec@@ Config.@@ CH@@ AN@@ NE@@ L@@ _M@@ OD@@ E_@@ N@@ ON@@ E, cod@@ ec@@ S@@ pe@@ c@@ if@@ ic@@ 1, 0, 0, 0); if ((m@@ Bluetooth@@ A@@ 2@@ dp@@ ) != null@@ ) { m@@ Bluetooth@@ A@@ 2@@ d@@ p.@@ set@@ Co@@ dec@@ Config@@ Pre@@ ference@@ (@@ cod@@ ec@@ Config@@ ); } }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion get@@ Sim@@ p@@ l@@ if@@ i@@ ed@@ Ex@@ pres@@ s@@ sion@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion ex@@ p@@ r@@ To@@ Sim@@ p@@ l@@ if@@ y@@ ) { com.android.jack.ir.ast.J@@ Method@@ B@@ o@@ d@@ y bo@@ d@@ y = ((@@ com.android.jack.ir.ast.J@@ Method@@ B@@ o@@ d@@ y@@ ) (m@@ ethod@@ .get@@ B@@ o@@ d@@ y@@ ())); assert bo@@ d@@ y != null@@ ; com.android.jack.ir.ast.J@@ B@@ loc@@ k bo@@ d@@ y@@ B@@ loc@@ k = bo@@ d@@ y@@ .get@@ Block@@ (); bo@@ d@@ y@@ Block@@ .@@ clear@@ (); com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Requ@@ est t@@ r = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Request@@ (m@@ ethod@@ ); tr@@ .@@ append@@ (@@ new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ App@@ end@@ State@@ ment@@ (@@ bo@@ d@@ y@@ Block@@ , ex@@ p@@ r@@ To@@ Sim@@ p@@ l@@ if@@ y.@@ m@@ ake@@ State@@ ment@@ ())); tr@@ .@@ com@@ m@@ it@@ (); com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ Ex@@ pres@@ sion@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Sim@@ p@@ l@@ if@@ i@@ er s = new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ Ex@@ pres@@ sion@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Sim@@ p@@ l@@ if@@ ier@@ (); s.@@ set@@ Enable@@ Null@@ Instance@@ Of@@ (@@ true@@ ); s.@@ ac@@ ce@@ p@@ t@@ (m@@ ethod@@ ); org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 1, bo@@ d@@ y@@ Block@@ .get@@ State@@ ment@@ s@@ ().@@ size@@ ()); com.android.jack.ir.ast.J@@ State@@ m@@ ent st@@ m@@ t = bo@@ d@@ y@@ Block@@ .get@@ State@@ ment@@ s@@ ().get@@ (@@ 0); org.junit.@@ Asser@@ t@@ .@@ assert@@ True@@ ((@@ st@@ m@@ t instanceof com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion@@ State@@ ment@@ )); com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion si@@ mp@@ l@@ if@@ i@@ ed@@ Ex@@ p@@ r = ((@@ com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion@@ State@@ ment@@ ) (@@ st@@ m@@ t@@ )@@ ).get@@ Ex@@ p@@ r@@ (); org.junit.@@ Asser@@ t@@ .@@ assert@@ NotNull@@ (@@ si@@ mp@@ l@@ if@@ i@@ ed@@ Ex@@ p@@ r@@ ); return si@@ mp@@ l@@ if@@ i@@ ed@@ Ex@@ p@@ r@@ ; }
private static java.@@ aw@@ t.@@ im@@ age.@@ S@@ am@@ ple@@ Mode@@ l get@@ S@@ am@@ ple@@ Mode@@ l@@ (@@ org.eclipse.swt.@@ g@@ raphic@@ s.@@ P@@ al@@ et@@ te@@ Data p@@ al@@ et@@ te@@ , int w@@ , int h@@ ) { if ((@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Image@@ O@@ ver@@ la@@ y.@@ S@@ w@@ t@@ Read@@ y@@ Buffer@@ ed@@ Im@@ age.@@ s@@ S@@ am@@ ple@@ Mode@@ l@@ ) == null@@ ) { return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Image@@ O@@ ver@@ la@@ y.@@ S@@ w@@ t@@ Read@@ y@@ Buffer@@ ed@@ Im@@ age.@@ s@@ S@@ am@@ ple@@ Mode@@ l = new java.@@ aw@@ t.@@ im@@ age.@@ P@@ i@@ x@@ el@@ Inter@@ le@@ av@@ ed@@ S@@ am@@ ple@@ Mode@@ l@@ (@@ java.@@ aw@@ t.@@ im@@ age.@@ Data@@ Buff@@ er.@@ TYPE_@@ B@@ Y@@ TE@@ , w@@ , h@@ , 4@@ , (@@ w * 4@@ ), com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Image@@ O@@ ver@@ la@@ y.@@ S@@ w@@ t@@ Read@@ y@@ Buffer@@ ed@@ Im@@ ag@@ e.get@@ B@@ and@@ Offset@@ (p@@ al@@ et@@ te@@ )); } return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Image@@ O@@ ver@@ la@@ y.@@ S@@ w@@ t@@ Read@@ y@@ Buffer@@ ed@@ Im@@ age.@@ s@@ S@@ am@@ ple@@ Mode@@ l.@@ create@@ Comp@@ ati@@ ble@@ S@@ am@@ ple@@ Mode@@ l@@ (@@ w@@ , h@@ ); }
public static long count@@ Bytes@@ (java.lang.String s, boolean short@@ Length@@ ) throw@@ s java.io.@@ UT@@ F@@ Data@@ Format@@ Exception { long coun@@ ter = 0; int str@@ Le@@ n = s.@@ length@@ (); for (@@ int i = 0; i < str@@ L@@ en@@ ; i++) { char c = s@@ .@@ char@@ At@@ (i@@ ); if (@@ c < '@@ \@@ u@@ 00@@ 8@@ 0@@ '@@ ) { coun@@ ter@@ ++@@ ; if (@@ c == '@@ \@@ u@@ 0000@@ '@@ ) { coun@@ ter@@ ++@@ ; } } else if (@@ c < '@@ \@@ u@@ 0@@ 8@@ 00@@ '@@ ) { coun@@ ter +@@ = 2@@ ; } else { coun@@ ter +@@ = 3@@ ; } } if (@@ short@@ L@@ eng@@ th && (@@ coun@@ ter > ((@@ (java.lang.@@ Sh@@ or@@ t.@@ MA@@ X_@@ VAL@@ UE@@ ) * 2@@ ) + 1@@ ))) { throw new java.io.@@ UT@@ F@@ Data@@ Format@@ Exception("@@ "); } return coun@@ ter@@ ; }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); m@@ Mock@@ In@@ vo@@ cation@@ Listen@@ er = org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ create@@ Mock@@ (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ result.@@ I@@ Test@@ In@@ vo@@ cation@@ Listener@@ .@@ class@@ ); m@@ P@@ y@@ th@@ on = "@@ py@@ th@@ on@@ "; m@@ Test = new com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ V@@ ts@@ Multi@@ Device@@ Test@@ () { @java.lang.Override protected void update@@ V@@ ts@@ Runner@@ Test@@ Config@@ (@@ org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Ob@@ ject j@@ s@@ on@@ Object@@ ) { return@@ ; } }; m@@ Test.@@ set@@ Build@@ (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ V@@ ts@@ Multi@@ Device@@ Test@@ Test.@@ create@@ Mock@@ Build@@ Info@@ ()); m@@ Test.@@ set@@ Test@@ C@@ ase@@ Path@@ (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ V@@ ts@@ Multi@@ Device@@ Test@@ Test.@@ TEST_@@ C@@ A@@ S@@ E_@@ P@@ A@@ TH@@ ); m@@ Test.@@ set@@ Test@@ Config@@ Path@@ (@@ V@@ ts@@ Multi@@ Device@@ Test.@@ DE@@ FA@@ UL@@ T_@@ TE@@ S@@ T@@ C@@ A@@ S@@ E_@@ CON@@ FI@@ G@@ _P@@ A@@ TH@@ ); }
@java.lang.Override public final void add@@ Output@@ (@@ byte@@ [] data@@ , int offset@@ , int length) { if (!(@@ is@@ Can@@ ce@@ lle@@ d@@ ())) { java.lang.String s = null@@ ; try { s = new java.lang.String@@ (d@@ ata@@ , offset@@ , length@@ , com.android.@@ Sdk@@ Constants.@@ UT@@ F@@ _@@ 8@@ ); } catch (@@ java.io.@@ Un@@ suppor@@ ted@@ En@@ cod@@ ing@@ Exception e) { s = new java.lang.String@@ (d@@ ata@@ , offset@@ , length); } if ((m@@ Un@@ fin@@ is@@ h@@ ed@@ Lin@@ e) != null@@ ) { s = (m@@ Un@@ fin@@ is@@ h@@ ed@@ Lin@@ e) + s; m@@ Un@@ fin@@ is@@ h@@ ed@@ Lin@@ e = null@@ ; } m@@ Ar@@ ra@@ y.@@ clear@@ (); int st@@ ar@@ t = 0; do { int in@@ dex = s.@@ index@@ Of@@ ("@@ \@@ r@@ \n@@ ", start@@ ); if (in@@ dex == (-1@@ )) { m@@ Un@@ fin@@ is@@ h@@ ed@@ Lin@@ e = s.@@ sub@@ string@@ (@@ start@@ ); break@@ ; } java.lang.String lin@@ e = s.@@ sub@@ string@@ (@@ start@@ , index@@ ); if (m@@ T@@ ri@@ m@@ Lin@@ es) { lin@@ e = lin@@ e.@@ tr@@ im@@ (); } m@@ Ar@@ ra@@ y.@@ add(@@ line@@ ); st@@ ar@@ t = in@@ dex + 2@@ ; } while (@@ true ); if (!(m@@ Ar@@ ra@@ y.@@ isEmpty@@ ())) { java.lang.String[] line@@ s = m@@ Ar@@ ra@@ y.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ m@@ Ar@@ ra@@ y.@@ size@@ ()@@ ]@@ ); process@@ New@@ Lin@@ es(@@ lin@@ es@@ ); } } }
private void check@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ FloatFloat@@ () { android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 8@@ 1@@ 1@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ FloatFloat@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ FloatFloat@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ FloatFloat@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ FloatFloat@@ : " + (e.toString()))); } }
public void set@@ Var@@ (@@ int index@@ , boolean v@@ ) { m@@ RS@@ .@@ n@@ Script@@ Set@@ Var@@ I@@ (get@@ ID@@ (mRS), index@@ , (@@ v ? 1 : 0@@ )); }
public byte read@@ Byte@@ () { file.@@ check@@ Not@@ C@@ lo@@ sed@@ (); libcore.io.@@ N@@ io@@ Buffer@@ I@@ terator@@ .@@ check@@ Read@@ B@@ ound@@ s(@@ posi@@ tion@@ , size@@ , 1); byte result = libcore.io.@@ M@@ em@@ or@@ y.@@ pe@@ e@@ k@@ Byte@@ (((@@ addres@@ s) + (@@ posi@@ tion@@ ))); ++@@ (@@ posi@@ tion@@ ); return result@@ ; }
public static boolean check@@ For@@ Clas@@ s(@@ @com.android.annotations.NonNull java.io.File apk@@ File@@ , @com.android.annotations.NonNull java.lang.String expected@@ Class@@ Name@@ ) throw@@ s com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Exception, java.io.IOException { java.io.File class@@ es@@ De@@ x = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ Apk@@ Hel@@ per@@ ", "@@ "); class@@ es@@ De@@ x.@@ de@@ lete@@ On@@ Ex@@ it@@ (); com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ Zip@@ Helper.@@ ex@@ tr@@ act@@ File@@ (@@ apk@@ File@@ , "@@ class@@ es.@@ dex@@ ", class@@ es@@ Dex@@ ); java.io.File dex@@ D@@ um@@ p = com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ Sdk@@ Hel@@ p@@ er.get@@ Dex@@ D@@ um@@ p@@ (); com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Ex@@ ec@@ ut@@ or exec@@ ut@@ or = new com.android.ide.common.@@ pro@@ ces@@ s.@@ Default@@ Process@@ Ex@@ ec@@ ut@@ or@@ (@@ new com.android.@@ uti@@ ls.@@ St@@ d@@ Logg@@ er(@@ St@@ d@@ Logg@@ er.@@ Level.@@ ER@@ R@@ OR@@ )); com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Info@@ Builder bu@@ ilder = new com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Info@@ Builder@@ (); builder.@@ set@@ Ex@@ ec@@ ut@@ able@@ (@@ dex@@ D@@ um@@ p@@ ); builder.@@ add@@ Arg@@ (@@ class@@ es@@ Dex@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); java.util.List<@@ java.lang.String> out@@ put = com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ Apk@@ Helper.@@ run@@ And@@ Get@@ Output@@ (@@ builder.@@ create@@ Process@@ (), exec@@ ut@@ or@@ ); for (java.lang.String lin@@ e : output@@ ) { java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er m = com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ Apk@@ Helper.@@ P@@ AT@@ TER@@ N@@ .@@ match@@ er(@@ lin@@ e.@@ tr@@ im@@ ()); if (m@@ .@@ match@@ es@@ ()) { java.lang.String class@@ Name = m.@@ gro@@ up@@ (1@@ ); if (@@ expected@@ Class@@ Nam@@ e.@@ equal@@ s@@ (@@ class@@ Name@@ )) { return true@@ ; } } } return false@@ ; }
public void test@@ Socket@@ Channel@@ () throw@@ s java.lang.Exception { java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l s@@ c = java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l.@@ open@@ (); s@@ c.@@ connect@@ (@@ server.@@ get@@ Local@@ Address@@ ()); s@@ c.@@ close(); assert@@ Equal@@ s(@@ java.util.Collection@@ s.@@ E@@ M@@ P@@ TY@@ _M@@ AP@@ , t@@ ag@@ g@@ er.get@@ Li@@ ve@@ Descrip@@ tor@@ s()); }
@java.lang.Override public void register@@ For@@ Read@@ y@@ (android.os.@@ Handle@@ r h@@ , int wh@@ at@@ , java.lang.Object ob@@ j@@ ) { synchronized@@ (m@@ Lock) { android.os.@@ Reg@@ is@@ tr@@ an@@ t r = new android.os.@@ Reg@@ is@@ tr@@ ant@@ (@@ h@@ , wh@@ at@@ , ob@@ j@@ ); m@@ Read@@ y@@ Reg@@ is@@ tr@@ an@@ ts.@@ add@@ (r@@ ); if ((@@ get@@ State@@ ()) == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Card@@ Constants.@@ State.@@ RE@@ AD@@ Y@@ )) { r.@@ not@@ if@@ y@@ Reg@@ is@@ tr@@ ant@@ (); } } }
private static int get@@ Stor@@ ed@@ E@@ n@@ try@@ Data@@ A@@ li@@ gn@@ ment@@ (java.lang.String e@@ n@@ try@@ Name, int default@@ A@@ li@@ gn@@ ment@@ ) { if (@@ default@@ A@@ li@@ gn@@ m@@ ent <@@ = 0) { return 0; } if (e@@ n@@ try@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ .@@ so@@ ")) { return com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ AN@@ D@@ RO@@ ID@@ _C@@ O@@ M@@ ON@@ _P@@ A@@ G@@ E_@@ AL@@ I@@ G@@ N@@ M@@ EN@@ T_@@ B@@ Y@@ TE@@ S@@ ; } else { return default@@ A@@ li@@ gn@@ ment@@ ; } }
public void test@@ Call@@ H@@ ierarchy@@ I@@ terator@@ () { com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Call@@ Stack@@ R@@ e@@ const@@ r@@ u@@ ct@@ or r@@ e@@ const@@ r@@ u@@ ct@@ or = new com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Call@@ Stack@@ R@@ e@@ const@@ r@@ u@@ ctor@@ (@@ 25@@ 5@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 1, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 1@@ 0, 1@@ 0); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 2, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 1@@ 1, 1@@ 1); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 3@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 12@@ , 12@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 3@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 1@@ 3@@ , 1@@ 3@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 3@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 1@@ 4@@ , 1@@ 4@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 3@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 1@@ 5, 1@@ 5@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 2, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 16@@ , 16@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 5, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 1@@ 7@@ , 1@@ 7@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 5, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 1@@ 8@@ , 1@@ 8@@ ); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 1, Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 2@@ 0, 2@@ 0); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 6@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EN@@ TER@@ , 2@@ 1, 2@@ 1); r@@ e@@ const@@ r@@ u@@ ctor@@ .add@@ Tra@@ ce@@ Action@@ (@@ 6@@ , Tra@@ ce@@ Action@@ .@@ ME@@ TH@@ OD@@ _@@ EX@@ I@@ T, 2@@ 2, 2@@ ); com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l to@@ p@@ Leve@@ l = r@@ e@@ const@@ r@@ u@@ ctor@@ .get@@ To@@ p@@ Level@@ (); for (java.util.@@ I@@ terator@@ <@@ com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Call@@ > i@@ t = to@@ p@@ Leve@@ l.get@@ Call@@ H@@ ierarchy@@ I@@ terator@@ (); it.@@ has@@ Next@@ ()@@ ;@@ ) { com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l c = it.@@ next@@ (); java.lang.System.out.@@ p@@ r@@ int@@ f@@ ("@@ %@@ d@@ : %@@ s, e@@ n@@ try@@ : %@@ d %@@ d %@@ d %@@ d@@ \n@@ ", c@@ .get@@ De@@ p@@ th@@ (), c@@ .get@@ Method@@ Id@@ (), c@@ .get@@ E@@ n@@ try@@ G@@ lo@@ b@@ al@@ Time@@ (), c@@ .get@@ Ex@@ it@@ Thread@@ Time@@ (), c@@ .get@@ Ex@@ it@@ G@@ lo@@ b@@ al@@ Time@@ (), c@@ .get@@ Ex@@ it@@ G@@ lo@@ b@@ al@@ Time@@ ()); } }
public java.lang.String get@@ Short@@ Des@@ cription@@ () { java.lang.String name = m@@ Descrip@@ tor@@ .get@@ U@@ i@@ Name@@ (); java.lang.String att@@ r = get@@ Des@@ c@@ Attribute@@ (); if (@@ att@@ r != null@@ ) { if ((@@ at@@ tr@@ .@@ index@@ Of@@ (@@ name@@ )) >@@ = 0) { return at@@ tr@@ ; } else { return java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ 1@@ $@@ s (@@ %@@ 2@@ $@@ s@@ )@@ ", at@@ tr@@ , name@@ ); } } return name@@ ; }
public void test@@ Channel@@ W@@ rite@@ _@@ excepti@@ on@@ On@@ C@@ lose@@ W@@ h@@ en@@ Block@@ ed@@ () throw@@ s java.lang.Exception { test@@ Channel@@ W@@ rite@@ _@@ excepti@@ on@@ On@@ C@@ lose@@ W@@ h@@ en@@ Block@@ ed@@ (@@ new libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ Channel@@ Wri@@ ter@@ (file@@ Output@@ Channel@@ ); java.lang.@@ Th@@ re@@ ad chan@@ nel@@ Wri@@ ter@@ Th@@ re@@ ad = libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ create@@ And@@ Start@@ Thread@@ ("@@ Channel@@ Wri@@ ter@@ ", chan@@ nel@@ Wri@@ ter@@ ); chan@@ nel@@ Wri@@ ter.@@ wait@@ For@@ Thread@@ To@@ Block@@ (); file@@ Output@@ Chan@@ ne@@ l.@@ close(); libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ wait@@ To@@ Di@@ e@@ (@@ chan@@ nel@@ Wri@@ ter@@ Thread@@ ); assert@@ S@@ ame@@ (@@ java.nio.@@ channe@@ ls.@@ As@@ ynch@@ ro@@ no@@ us@@ C@@ lose@@ Exception@@ .@@ class@@ , chan@@ nel@@ Wri@@ ter.@@ io@@ e.get@@ Class@@ ()); assert@@ False@@ (@@ chan@@ nel@@ Wri@@ ter.@@ w@@ as@@ Inter@@ rup@@ ted@@ ); f@@ if@@ o@@ Read@@ er.@@ t@@ id@@ y@@ Up@@ (); }
@org.junit.Test public void test@@ Get@@ Default@@ S@@ m@@ dp@@ Address@@ () { int channe@@ l = mock@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ s@@ es@@ ("@@ B@@ F@@ 3@@ C@@ 1@@ 4@@ 8@@ 00@@ 8@@ 5@@ 3@@ 4@@ D@@ 4@@ 50@@ 2@@ E@@ 4@@ 3@@ 4@@ F@@ 4@@ D@@ 8@@ 10@@ 8@@ 7@@ 3@@ 6@@ D@@ 6@@ 4@@ 7@@ 32@@ E@@ 6@@ 3@@ 6@@ F@@ 6@@ D@@ 9@@ 00@@ 0@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ byte@@ []@@ > result@@ Cap@@ tor = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ >(); m@@ E@@ uic@@ c@@ Card@@ .get@@ Default@@ S@@ m@@ dp@@ Address@@ ()); ve@@ r@@ if@@ y@@ Store@@ Data@@ (@@ chan@@ nel@@ , "@@ B@@ F@@ 3@@ C@@ 00@@ "); }
@org.junit.Test public void test_@@ read@@ All@@ Line@@ $@@ Path@@ $@@ Char@@ set@@ _N@@ P@@ E@@ () throw@@ s java.io.IOException { try { java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es@@ (@@ null@@ , java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ -1@@ 6@@ ")); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } try { java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es(@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ (), null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } }
@java.lang.Override public void ac@@ ce@@ p@@ t@@ (@@ int result@@ ) { if (@@ result == (android.@@ app.@@ Ac@@ tivity.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ )) { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } else { if ((@@ (m@@ N@@ m@@ .get@@ E@@ ff@@ ec@@ ts@@ Sup@@ pres@@ s@@ or@@ ()) == null@@ ) || (m@@ N@@ m@@ .get@@ E@@ ff@@ ec@@ ts@@ Sup@@ pres@@ s@@ or@@ ().@@ equal@@ s@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ not@@ if@@ ic@@ ations.@@ No@@ t@@ if@@ ic@@ ation@@ Listener@@ V@@ er@@ if@@ ier@@ Ac@@ tivity.@@ V@@ R@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ _S@@ ER@@ VIC@@ E@@ ))) { statu@@ s = P@@ A@@ SS@@ ; } else { log@@ Fail@@ (); statu@@ s = RE@@ TE@@ S@@ T@@ ; de@@ lay@@ (); } } next@@ (); }
public final void on@@ Sms@@ Recei@@ v@@ ed@@ (@@ int to@@ k@@ en@@ , java.lang.String for@@ mat@@ , byte@@ [] p@@ du@@ ) throw@@ s java.lang.Runtime@@ Exception { synchronized@@ (m@@ Lock) { if ((m@@ Listener@@ ) == null@@ ) { throw new java.lang.Runtime@@ Exception("@@ Fe@@ at@@ ur@@ e not read@@ y.@@ "); } try { m@@ Listen@@ er.@@ on@@ Sms@@ Recei@@ v@@ ed@@ (@@ to@@ k@@ en@@ , for@@ mat@@ , p@@ du@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Sms@@ Imp@@ l@@ Bas@@ e.@@ LOG@@ _@@ TAG, ("@@ C@@ an not de@@ li@@ ve@@ r s@@ ms@@ : " + (@@ e.get@@ Message@@ ()))); ack@@ no@@ w@@ le@@ d@@ ge@@ S@@ m@@ s(@@ to@@ k@@ en@@ , 0, android.telephony.@@ ims.@@ st@@ ub@@ .@@ DE@@ L@@ I@@ V@@ ER@@ _STA@@ T@@ US@@ _@@ ER@@ R@@ OR@@ _@@ G@@ EN@@ ER@@ IC@@ ); } } }
public static java.lang.String get@@ Session@@ Id@@ () { synchronized@@ (android.@@ telecom.@@ Log.@@ s@@ S@@ ing@@ let@@ on@@ S@@ ync@@ ) { if ((@@ android.telecom.@@ Log.@@ s@@ Session@@ s) != null@@ ) { return android.telecom.@@ Log.@@ get@@ Session@@ s@@ ().get@@ Session@@ Id@@ (); } else { return "@@ "; } }
public static void com@@ pu@@ te@@ F@@ r@@ act@@ (android.@@ renderscript.@@ cts.@@ Test@@ F@@ r@@ ac@@ t.@@ Argument@@ s@@ Float@@ F@@ lo@@ at arg@@ s) { args.@@ ul@@ f = 4@@ ; args.@@ ul@@ f@@ Relax@@ ed = 12@@ ; do@@ ub@@ le su@@ m = 0.@@ 0F@@ ; for (@@ int i = 0; i < (@@ args.@@ in@@ V@@ .@@ length); i++) { su@@ m +@@ = (@@ args.@@ in@@ V@@ [i]@@ ) * (@@ args.@@ in@@ V@@ [i]@@ ); } args.@@ out = (@@ (@@ float@@ ) (@@ java.lang.Str@@ i@@ ct@@ M@@ ath.@@ s@@ q@@ r@@ t@@ (s@@ um@@ ))); }
@org.junit.Test public void test@@ L@@ amb@@ a@@ 0@@ 1@@ 5@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ LA@@ M@@ B@@ DA@@ 0@@ 1@@ 5@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
public static void remove@@ Device@@ For@@ w@@ ard@@ (com.android.@@ ddmlib.@@ I@@ Device device@@ ) { synchronized@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ ) { final java.lang.Integ@@ er local@@ P@@ or@@ t = com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ .get@@ (device@@ ); if (@@ local@@ P@@ or@@ t != null@@ ) { try { device@@ .@@ remove@@ For@@ w@@ ard@@ (@@ local@@ Port@@ , com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ DE@@ FA@@ UL@@ T_@@ S@@ ER@@ V@@ ER@@ _P@@ OR@@ T@@ ); com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ device@@ Port@@ Map@@ .@@ remove@@ (device@@ ); } catch (com.android.@@ ddmlib.@@ Time@@ out@@ Exception e) { com.android.ddmlib.@@ Log.@@ e@@ ("@@ hierarchy@@ ", ("@@ Time@@ out remo@@ v@@ ing por@@ t for@@ w@@ ard@@ ing for " + device@@ )); } catch (com.android.@@ ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception e) { } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ e@@ ("@@ hierarchy@@ ", java.lang.String@@ .@@ for@@ mat@@ ("@@ Faile@@ d to remo@@ v@@ e for@@ war@@ d for de@@ vice %@@ 1@@ $@@ s@@ : %@@ 2@@ $@@ s", device@@ , e.get@@ Message@@ ())); } } } }
@java.lang.Override public int get@@ Bas@@ ic@@ Con@@ str@@ a@@ int@@ s() { return 0; }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public void lib@@ To@@ Ex@@ e@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File in@@ , @javax.annotation.@@ N@@ on@@ null java.io.File out, boolean z@@ ip@@ File@@ ) throw@@ s java.lang.Exception { java.util.List<@@ java.lang.String> arg@@ s = new java.util.ArrayList<@@ java.lang.String@@ >(); args.@@ add@@ ("@@ java@@ "); args.@@ add@@ ("@@ -@@ c@@ p@@ "); args.@@ add(@@ jack@@ Pre@@ bu@@ il@@ t.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); args.@@ add@@ ("@@ --@@ ver@@ bo@@ se@@ "); args.@@ add(@@ ver@@ bo@@ si@@ ty@@ Level.@@ name@@ ()); if ((@@ in@@ crement@@ al@@ Folder@@ ) != null@@ ) { args.@@ add@@ (com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ M@@ ain@@ .@@ class@@ .getName@@ ()); args.@@ add@@ ("@@ --@@ in@@ crement@@ al@@ -@@ fo@@ l@@ der@@ "); args.@@ add@@ (in@@ crement@@ al@@ Fol@@ d@@ er.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } args.@@ add@@ (com.android.jack.@@ M@@ ain@@ .@@ class@@ .getName@@ ()); } if (@@ w@@ ith@@ Debug@@ Info@@ s) { args.@@ add@@ ("@@ -@@ D@@ "); args.@@ add@@ ("@@ jack.@@ dex.@@ o@@ pti@@ m@@ iz@@ e@@ =@@ false@@ "); } else { args.@@ add@@ ("@@ -@@ D@@ "); args.@@ add@@ ("@@ jack.@@ dex.@@ o@@ pti@@ m@@ iz@@ e@@ =@@ true@@ "); } com.android.jack.test.@@ toolchain.@@ Jack@@ C@@ li@@ Too@@ lch@@ ain.@@ add@@ Properties@@ (pro@@ per@@ ties@@ , arg@@ s); args.@@ add@@ ("@@ -@@ -@@ import@@ "); args.@@ add@@ (in@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); for (@@ java.io.File static@@ Li@@ b : static@@ Lib@@ s) { args.@@ add@@ ("@@ -@@ import@@ "); args.@@ add@@ (@@ static@@ Lib@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } if (@@ z@@ ip@@ File@@ ) { args.@@ add@@ ("@@ --@@ output@@ -@@ dex@@ -@@ z@@ ip@@ "); } else { args.@@ add@@ ("@@ --@@ output@@ -@@ dex@@ "); } args.@@ add(@@ ou@@ t.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); com.android.jack.@@ util.@@ Ex@@ ec@@ ute@@ File ex@@ e@@ c = new com.android.jack.@@ util.@@ Ex@@ ec@@ ute@@ File@@ (@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )); exec@@ .set@@ Er@@ r@@ (@@ out@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Out@@ (@@ er@@ r@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Ver@@ bo@@ se@@ (is@@ Ver@@ bo@@ se@@ ); if (!(@@ exec@@ .@@ run@@ ())) { throw new java.lang.Runtime@@ Exception("@@ J@@ ac@@ k compile@@ r ex@@ i@@ ted wit@@ h an error@@ "); } }
public java.lang.String toString@@ () { return ti@@ t@@ le@@ ; }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public void icc@@ C@@ lose@@ Log@@ ic@@ al@@ Channel@@ (@@ int chan@@ nel@@ , android.os.@@ Message res@@ ponse@@ ) { log@@ local@@ (("@@ C@@ lo@@ se Log@@ ic@@ al Channel@@ : " + chan@@ nel@@ )); get@@ Command@@ s@@ Interface@@ ().@@ icc@@ C@@ lose@@ Log@@ ic@@ al@@ Channel@@ (@@ chan@@ nel@@ , m@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ .@@ EVEN@@ T_@@ C@@ LO@@ S@@ E_@@ LOG@@ IC@@ AL@@ _C@@ H@@ AN@@ NE@@ L_@@ D@@ ON@@ E, res@@ ponse@@ )); }
private void play@@ U@@ ri@@ (@@ final android.net.@@ Ur@@ i ur@@ i@@ , long time@@ To@@ Play@@ M@@ s, int us@@ age@@ , int cont@@ ent@@ Typ@@ e) throw@@ s java.lang.Exception { boolean is@@ M@@ u@@ si@@ c@@ Play@@ ing@@ B@@ e@@ for@@ e@@ Test = false@@ ; if (m@@ Audio@@ Manager.@@ is@@ M@@ u@@ si@@ c@@ Active@@ ()) { is@@ M@@ u@@ si@@ c@@ Play@@ ing@@ B@@ e@@ for@@ e@@ Test = true@@ ; } android.@@ media.@@ Media@@ Play@@ er m@@ p = new android.@@ media.@@ Media@@ Play@@ er@@ (); assert@@ NotNull@@ (m@@ p@@ ); mp@@ .set@@ Data@@ Source@@ (m@@ Contex@@ t, ur@@ i@@ ); mp@@ .set@@ Audio@@ At@@ tri@@ b@@ ut@@ es@@ (@@ new android.@@ media.@@ Audio@@ At@@ tri@@ b@@ ut@@ es.@@ Builder@@ ().@@ set@@ U@@ s@@ age@@ (@@ us@@ age@@ ).set@@ Content@@ Type@@ (@@ cont@@ ent@@ Type@@ ).@@ build@@ ()); mp@@ .@@ pre@@ par@@ e@@ (); mp@@ .@@ start@@ (); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (@@ time@@ To@@ Play@@ M@@ s); mp@@ .@@ st@@ op@@ (); mp@@ .@@ re@@ le@@ ase@@ (); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (@@ time@@ To@@ Play@@ M@@ s); if (!@@ is@@ M@@ u@@ si@@ c@@ Play@@ ing@@ B@@ e@@ for@@ e@@ Test@@ ) { assert@@ False@@ (m@@ Audio@@ Manager.@@ is@@ M@@ u@@ si@@ c@@ Active@@ ()); } }
public boolean is@@ D@@ ual@@ Constan@@ t@@ () { return (s@@ ec@@ ond@@ Index@@ Typ@@ e) != (@@ Index@@ Type.@@ N@@ ON@@ E); }
static android.net.@@ i@@ p.@@ Ip@@ Re@@ ach@@ abili@@ ty@@ Monitor@@ .@@ Con@@ fig m@@ ake@@ Default@@ (android.content.@@ Context contex@@ t, java.lang.String if@@ a@@ ce@@ ) { final java.lang.String lock@@ Name = ((@@ android.net.@@ i@@ p.@@ Ip@@ Re@@ ach@@ abili@@ ty@@ Monitor@@ .@@ TAG@@ ) + "@@ .@@ ") + if@@ a@@ ce@@ ; final android.os.@@ Po@@ w@@ er@@ Manager p@@ m = ((@@ android.os.@@ Po@@ w@@ er@@ Manager@@ ) (@@ contex@@ t.get@@ System@@ Service@@ (@@ Context.@@ P@@ O@@ W@@ ER@@ _S@@ ER@@ VIC@@ E@@ ))); final android.os.@@ Po@@ w@@ er@@ Manager.@@ W@@ ake@@ Loc@@ k loc@@ k = p@@ m@@ .@@ new@@ W@@ ake@@ Lock@@ (@@ Po@@ w@@ er@@ Manager.@@ P@@ AR@@ TI@@ AL@@ _@@ W@@ A@@ K@@ E_@@ LO@@ C@@ K@@ , lock@@ Name); return new android.net.@@ i@@ p.@@ Ip@@ Re@@ ach@@ abili@@ ty@@ Monitor@@ .@@ Config@@ () { public void ac@@ qu@@ ire@@ W@@ ake@@ Lock@@ (@@ long d@@ ur@@ ation@@ M@@ s) { lock@@ .@@ ac@@ qu@@ ire@@ (d@@ ur@@ ation@@ M@@ s); } }; }
public void set@@ Ad@@ verti@@ sing@@ Data@@ (android.@@ bluetooth.@@ le.@@ Ad@@ verti@@ se@@ Data ad@@ verti@@ se@@ Data@@ ) { try { m@@ G@@ at@@ t.@@ set@@ Ad@@ verti@@ sing@@ Data@@ (m@@ Ad@@ verti@@ ser@@ Id, ad@@ verti@@ se@@ Data@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ bluetooth.@@ le.@@ Ad@@ verti@@ sing@@ Set@@ .@@ TAG, "@@ remo@@ t@@ e excepti@@ on - ", e); } }
private boolean send@@ No@@ t@@ if@@ ic@@ ation@@ Th@@ ro@@ u@@ g@@ h@@ Default@@ Di@@ al@@ er@@ (java.lang.@@ Integ@@ er count@@ , java.lang.String num@@ ber@@ , android.app.@@ P@@ end@@ ing@@ Int@@ ent pend@@ ing@@ Intent@@ , boolean is@@ Setting@@ s@@ Intent@@ , android.os.@@ User@@ Hand@@ le user@@ Handle@@ ) { if (s@@ ho@@ ul@@ d@@ Manage@@ No@@ t@@ if@@ ic@@ ation@@ Th@@ ro@@ u@@ g@@ h@@ Default@@ Di@@ al@@ er(@@ user@@ Handle@@ )) { android.content.@@ Int@@ ent int@@ ent = get@@ S@@ ho@@ w@@ Vo@@ i@@ ce@@ ma@@ il@@ Intent@@ For@@ Default@@ Di@@ al@@ er(@@ user@@ Handle@@ ); int@@ ent.@@ set@@ Flag@@ s(@@ Int@@ ent.@@ F@@ LA@@ G@@ _RE@@ CE@@ I@@ V@@ ER_@@ F@@ O@@ RE@@ G@@ RO@@ UN@@ D@@ ); int@@ ent.@@ set@@ Action@@ (@@ Telephony@@ Manager.@@ AC@@ TION@@ _S@@ H@@ O@@ W@@ _@@ V@@ O@@ IC@@ E@@ MA@@ IL@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ ); if (@@ coun@@ t != null@@ ) { int@@ ent.@@ put@@ Extra@@ (@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ _C@@ O@@ UN@@ T, count@@ ); } if ((@@ coun@@ t == null@@ ) || (@@ coun@@ t > 0@@ )) { if (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ num@@ ber@@ ))) { int@@ ent.@@ put@@ Extra@@ (@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _@@ V@@ O@@ IC@@ E@@ MA@@ IL@@ _N@@ U@@ M@@ B@@ ER@@ , num@@ ber@@ ); } if (p@@ end@@ ing@@ Int@@ ent != null@@ ) { int@@ ent.@@ put@@ Extra@@ ((@@ is@@ Setting@@ s@@ Int@@ ent ? android.telephony.@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _@@ LA@@ UN@@ CH@@ _@@ V@@ O@@ IC@@ E@@ MA@@ IL@@ _S@@ E@@ T@@ ING@@ S_@@ IN@@ TE@@ N@@ T : android.telephony.@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _C@@ AL@@ L_@@ V@@ O@@ IC@@ E@@ MA@@ IL@@ _@@ IN@@ TE@@ N@@ T@@ ), pend@@ ing@@ Intent@@ ); } } android.util.Log.@@ i@@ ("@@ t@@ w@@ y@@ en@@ ", "@@ b@@ road@@ cas@@ t s@@ ent@@ "); m@@ Context.@@ send@@ Broadcast@@ As@@ User@@ (@@ int@@ ent@@ , user@@ Handle@@ , android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ RE@@ AD@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ ); return true@@ ; } return false@@ ; }
@java.lang.Override public void ho@@ l@@ d@@ (java.lang.String call@@ Id, android.telecom.@@ Logg@@ ing.@@ Session@@ .@@ Info session@@ Info@@ ) { android.telecom.@@ Log.@@ start@@ Session@@ (s@@ ession@@ Info@@ , android.telecom.@@ Connection@@ Service.@@ SE@@ SS@@ I@@ ON@@ _@@ H@@ O@@ L@@ D@@ ); try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s arg@@ s = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s.@@ ob@@ tain@@ (); args.@@ arg@@ 1 = call@@ Id@@ ; args.@@ arg@@ 2 = android.telecom.@@ Log.@@ create@@ Sub@@ session@@ (); m@@ Handler.@@ ob@@ tain@@ Message@@ (android.@@ telecom.@@ Connection@@ Service.@@ MS@@ G@@ _@@ H@@ O@@ L@@ D@@ , arg@@ s@@ ).@@ send@@ To@@ Target@@ (); } final@@ l@@ y { android.telecom.@@ Log.@@ end@@ Session@@ (); } }
public void test@@ A@@ E@@ S_@@ EC@@ B@@ _@@ No@@ P@@ add@@ ing@@ _@@ In@@ crement@@ al@@ Up@@ date@@ _S@@ u@@ ccess@@ () throw@@ s java.lang.Exception { javax.@@ cryp@@ to.@@ Sec@@ ret@@ Ke@@ y ke@@ y = new javax.@@ cryp@@ to.@@ spec@@ .@@ Sec@@ ret@@ Key@@ Spec@@ (@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ KE@@ Y@@ , "@@ A@@ E@@ S@@ "); javax.@@ cryp@@ to.@@ Cip@@ h@@ er c = javax.@@ cryp@@ to.@@ Cip@@ h@@ er.get@@ Instance@@ ("@@ A@@ E@@ S@@ /@@ EC@@ B@@ /@@ No@@ P@@ add@@ ing@@ "); c.@@ in@@ it@@ (@@ javax.@@ cryp@@ to.@@ Cip@@ h@@ er.@@ EN@@ C@@ R@@ Y@@ P@@ T_@@ M@@ O@@ DE@@ , key@@ ); for (@@ int i = 0; i < ((@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed.@@ length) - 1); i++) { final byte@@ [] output@@ F@@ r@@ ag@@ m@@ ent = c.@@ update@@ (@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed@@ , i@@ , 1); assert@@ NotNull@@ (@@ output@@ F@@ r@@ ag@@ ment@@ ); assert@@ Equal@@ s(@@ 0, output@@ F@@ r@@ ag@@ m@@ ent.@@ length); } final byte@@ [] out@@ put = c@@ .@@ do@@ F@@ in@@ al@@ (@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed@@ , ((@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed.@@ length) - 1@@ ), 1); assert@@ NotNull@@ (@@ output@@ ); assert@@ Equal@@ s(@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed.@@ length@@ , out@@ pu@@ t.@@ length); assert@@ True@@ (@@ java.util.Arrays.@@ equals(@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ A@@ E@@ S_@@ 12@@ 8@@ _@@ Test@@ V@@ ec@@ tor@@ _@@ 1@@ _P@@ K@@ C@@ S@@ 5@@ P@@ add@@ ed@@ _@@ En@@ cryp@@ ted@@ , output@@ )); }
@java.lang.Override protected int com@@ par@@ e@@ To@@ 0@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ Constan@@ t o@@ th@@ er@@ ) { assert o@@ th@@ er instanceof com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Handle@@ Ref@@ ; int c@@ m@@ p = get@@ Type@@ ().@@ com@@ par@@ e@@ To@@ ((@@ (com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Handle@@ Ref@@ ) (o@@ th@@ er@@ )@@ ).get@@ K@@ ind@@ ()); if (c@@ m@@ p != 0) { return c@@ mp@@ ; } return get@@ M@@ em@@ ber@@ Ref@@ ().@@ com@@ par@@ e@@ To@@ ((@@ (com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Handle@@ Ref@@ ) (o@@ th@@ er@@ )@@ ).get@@ M@@ em@@ ber@@ Ref@@ ()); }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ G@@ et B@@ luetoo@@ th G@@ at@@ t Ser@@ vices@@ ") public java.util.ArrayList<@@ java.lang.String> g@@ att@@ Client@@ Get@@ Dis@@ cover@@ ed@@ Descrip@@ tor@@ U@@ uid@@ s(@@ @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ index@@ ") java.lang.Integ@@ er index@@ , @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ service@@ Index@@ ") java.lang.Integ@@ er service@@ Index@@ , @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ ") java.lang.Integ@@ er char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ ) throw@@ s java.lang.Exception { if ((m@@ Bluetooth@@ G@@ att@@ Dis@@ cover@@ ed@@ Ser@@ vices@@ Lis@@ t.get@@ (in@@ dex@@ )) == null@@ ) { throw new java.lang.@@ Exception(("@@ In@@ va@@ li@@ d index@@ : " + index@@ )); } if ((m@@ Bluetooth@@ G@@ att@@ Dis@@ cover@@ ed@@ Ser@@ vices@@ Lis@@ t.get@@ (in@@ dex@@ ).get@@ (@@ service@@ Index@@ )) == null@@ ) { throw new java.lang.@@ Exception(("@@ In@@ va@@ li@@ d service@@ Index@@ : " + service@@ Index@@ )); } java.util.List<@@ android.@@ bluetooth.Bluetooth@@ G@@ att@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ > char@@ Lis@@ t = m@@ Bluetooth@@ G@@ att@@ Dis@@ cover@@ ed@@ Ser@@ vices@@ Lis@@ t.get@@ (in@@ dex@@ ).get@@ (@@ service@@ Index@@ ).get@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s(); if (@@ (@@ char@@ Lis@@ t.get@@ (@@ char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ )) == null@@ ) { throw new java.lang.@@ Exception(("@@ In@@ va@@ li@@ d char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ : " + char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ )); } java.util.List<@@ android.@@ bluetooth.Bluetooth@@ G@@ att@@ Descrip@@ tor@@ > des@@ c@@ Lis@@ t = char@@ Lis@@ t.get@@ (@@ char@@ ac@@ ter@@ is@@ ti@@ c@@ Index@@ ).get@@ Descrip@@ tor@@ s(); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ TA@@ C@@ O@@ O@@ O@@ O@@ : " + (d@@ es@@ c@@ List.@@ toString@@ ()))); java.util.ArrayList<@@ java.lang.String> uid@@ Lis@@ t = new java.util.ArrayList<@@ java.lang.String@@ >(); for (android.bluetooth.Bluetooth@@ G@@ att@@ Descriptor m@@ Des@@ c : des@@ c@@ List@@ ) { u@@ uid@@ List.@@ add@@ (m@@ Des@@ c@@ .get@@ U@@ uid@@ ().@@ toString@@ ()); } return u@@ uid@@ List@@ ; }
@java.lang.Override public void mo@@ u@@ se@@ C@@ li@@ ck@@ ed@@ (@@ java.@@ aw@@ t.@@ ev@@ ent.@@ M@@ ou@@ se@@ Ev@@ ent mo@@ u@@ se@@ Event@@ ) { li@@ st.@@ update@@ U@@ I@@ (); if (!(@@ value@@ Changed@@ )) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ value@@ Change@@ d = " + (@@ value@@ Changed@@ ))); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ in mo@@ u@@ se@@ C@@ li@@ ck@@ ed f@@ un@@ ction@@ "); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ((@@ (("@@ X = " + (m@@ ou@@ se@@ Ev@@ ent.get@@ X@@ ())) + "; Y = ") + (m@@ ou@@ se@@ Ev@@ ent.get@@ Y@@ ()))); com@@ .@@ int@@ el@@ li@@ j.@@ ui.@@ com@@ pon@@ ent@@ s.@@ J@@ BL@@ is@@ t th@@ e@@ Lis@@ t = ((@@ com@@ .@@ int@@ el@@ li@@ j.@@ ui.@@ com@@ pon@@ ent@@ s.@@ J@@ B@@ List@@ ) (m@@ ou@@ se@@ Ev@@ ent.get@@ Source@@ ())); int in@@ dex = th@@ e@@ List.@@ loc@@ ation@@ To@@ Index@@ (m@@ ou@@ se@@ Ev@@ ent.get@@ P@@ o@@ int@@ ()); if (in@@ dex >@@ = 0) { boolean in@@ P@@ ay@@ Ur@@ l = com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ C@@ ell@@ Render@@ er.@@ in@@ Play@@ Con@@ so@@ le@@ Ur@@ l@@ (m@@ ou@@ se@@ Ev@@ ent.get@@ P@@ o@@ int@@ (), index@@ ); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ in pla@@ y ur@@ l = " + in@@ P@@ ay@@ Ur@@ l@@ )); if (!@@ in@@ P@@ ay@@ Ur@@ l@@ ) { boolean in@@ Con@@ so@@ le@@ Ur@@ l = com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ C@@ ell@@ Render@@ er.@@ in@@ C@@ lo@@ ud@@ Con@@ so@@ le@@ Ur@@ l@@ (m@@ ou@@ se@@ Ev@@ ent.get@@ P@@ o@@ int@@ (), index@@ ); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ in cons@@ ol@@ e ur@@ l = " + in@@ Con@@ so@@ le@@ Ur@@ l@@ )); } } value@@ Change@@ d = false@@ ; }
public int get@@ Card@@ Id@@ () { return 0; }
protected boolean can@@ Dis@@ able@@ Network@@ M@@ eter@@ ing@@ () throw@@ s java.lang.Exception { final android.net.Network@@ Info in@@ fo = mC@@ m@@ .get@@ Active@@ Network@@ Info@@ (); assert@@ NotNull@@ ("@@ Co@@ ul@@ d not ge@@ t ac@@ ti@@ v@@ e network@@ ", info@@ ); return true@@ ; }
@org.junit.Test public void test@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ Bin@@ der@@ De@@ ath@@ () throw@@ s java.lang.Exception { android.net.@@ IpSec@@ Con@@ fig ip@@ Sec@@ Con@@ fig = new android.net.@@ IpSec@@ Config@@ (); add@@ Default@@ S@@ p@@ is@@ And@@ Remote@@ Add@@ r@@ To@@ IpSec@@ Config@@ (@@ ip@@ Sec@@ Config@@ ); add@@ A@@ u@@ th@@ And@@ Cryp@@ t@@ To@@ IpSec@@ Config@@ (@@ ip@@ Sec@@ Config@@ ); IpSec@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ pon@@ se create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p = m@@ IpSec@@ Service.@@ create@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (@@ ip@@ Sec@@ Config@@ , new android.os.@@ Bin@@ der@@ ()); com.android.server.@@ IpSec@@ Service.@@ User@@ Recor@@ d user@@ Recor@@ d = m@@ IpSec@@ Service.@@ m@@ User@@ Resource@@ Track@@ er.get@@ User@@ Record@@ (android.@@ system.@@ O@@ s.get@@ uid@@ ()); com.android.server.@@ IpSec@@ Service.@@ Ref@@ coun@@ ted@@ Res@@ our@@ ce ref@@ coun@@ ted@@ Recor@@ d = user@@ Record@@ .m@@ Tr@@ an@@ s@@ for@@ m@@ Record@@ s.get@@ Ref@@ coun@@ ted@@ Resource@@ Or@@ Throw@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id); ref@@ coun@@ ted@@ Record@@ .@@ b@@ in@@ der@@ Di@@ ed@@ (); ve@@ r@@ if@@ y@@ (m@@ Mock@@ Net@@ d@@ ).@@ ip@@ Sec@@ De@@ lete@@ Sec@@ urit@@ y@@ As@@ so@@ c@@ i@@ ation@@ (e@@ q@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id@@ ), e@@ q@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ ), any@@ String@@ (), any@@ String@@ (), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ TEST_@@ S@@ P@@ I@@ _@@ O@@ UT@@ ), any@@ Int@@ (), any@@ Int@@ ()); ve@@ r@@ if@@ y@@ (m@@ Mock@@ Net@@ d@@ ).@@ ip@@ Sec@@ De@@ lete@@ Sec@@ urit@@ y@@ As@@ so@@ c@@ i@@ ation@@ (e@@ q@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id@@ ), e@@ q@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ ), any@@ String@@ (), any@@ String@@ (), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ TEST_@@ S@@ P@@ I@@ _@@ IN@@ ), any@@ Int@@ (), any@@ Int@@ ()); assert@@ Equal@@ s(@@ 0, user@@ Record@@ .m@@ Tr@@ an@@ s@@ for@@ m@@ Q@@ u@@ o@@ t@@ a@@ Track@@ er.@@ mC@@ urrent@@ ); try { user@@ Record@@ .m@@ Tr@@ an@@ s@@ for@@ m@@ Record@@ s.get@@ Ref@@ coun@@ ted@@ Resource@@ Or@@ Throw@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id); fail@@ ("@@ Ex@@ pec@@ ted Illegal@@ Argument@@ Exception on at@@ tem@@ p@@ t to ac@@ ces@@ s de@@ let@@ ed resource@@ "); } catch (java.lang.@@ Illegal@@ Argument@@ Exception expected@@ ) { } }
private void check@@ F@@ max@@ Float2Float2@@ Float2@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ F@@ max@@ Float2Float2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ F@@ max@@ Float2Float2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ max@@ Float2Float2@@ Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ F@@ max@@ Float2Float2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ F@@ max@@ Float2Float2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ max@@ Float2Float2@@ Float2@@ : " + (e.toString()))); } }
@org.junit.Test public void test@@ Interface@@ Th@@ is@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 5@@ 1@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ add@@ Property@@ (@@ Option@@ s.@@ LA@@ M@@ B@@ DA@@ _@@ TO@@ _@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _C@@ ON@@ V@@ ER@@ TER@@ .getName@@ (), java.lang.@@ Boole@@ an@@ .@@ TR@@ UE@@ .@@ toString@@ ()).@@ compile@@ And@@ Run@@ Test@@ (); }
private void check@@ De@@ g@@ re@@ es@@ Float2Float2@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ De@@ g@@ re@@ es@@ Float2Float2@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ De@@ g@@ re@@ es@@ Float2Float2@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ De@@ g@@ re@@ es@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ De@@ g@@ re@@ es@@ Float2Float2@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ De@@ g@@ re@@ es@@ Float2Float2@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ De@@ g@@ re@@ es@@ Float2Float2@@ : " + (e.toString()))); } }
@java.lang.Override public final int start@@ Activity@@ As@@ User@@ (android.@@ app.@@ I@@ Application@@ Th@@ re@@ ad call@@ er, java.lang.String call@@ ing@@ Package@@ , android.content.@@ Int@@ ent int@@ ent@@ , java.lang.String res@@ ol@@ v@@ ed@@ Type, android.os.@@ I@@ Bin@@ der result@@ To@@ , java.lang.String result@@ W@@ ho@@ , int request@@ Code@@ , int start@@ Flag@@ s, android.app.@@ Pro@@ fi@@ ler@@ Info pro@@ fi@@ ler@@ Info@@ , android.os.@@ Bund@@ le b@@ Option@@ s, int user@@ Id) { e@@ n@@ for@@ ce@@ Not@@ Is@@ ol@@ ated@@ Call@@ er@@ ("@@ start@@ Activity@@ "); user@@ Id = m@@ User@@ Control@@ ler.@@ handle@@ In@@ com@@ ing@@ User@@ (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ P@@ id@@ (), android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (), user@@ Id, false@@ , com.android.server.@@ am@@ .@@ Activity@@ Manager@@ Service.@@ AL@@ LO@@ W@@ _@@ F@@ UL@@ L_@@ ON@@ L@@ Y@@ , "@@ start@@ Activity@@ ", null@@ ); return m@@ Activity@@ Start@@ er.@@ start@@ Activity@@ M@@ ay@@ W@@ ait@@ (c@@ all@@ er, (-1@@ ), call@@ ing@@ Package@@ , int@@ ent@@ , res@@ ol@@ v@@ ed@@ Type, null@@ , null@@ , result@@ To@@ , result@@ W@@ ho@@ , request@@ Code@@ , start@@ Flag@@ s, pro@@ fi@@ ler@@ Info@@ , null@@ , b@@ Option@@ s, false@@ , user@@ Id, null@@ , null@@ , "@@ start@@ Activity@@ As@@ User@@ "); }
@org.junit.Test public void test@@ Up@@ date@@ _@@ one@@ S@@ core@@ d@@ _@@ one@@ Un@@ s@@ core@@ d@@ () { when(m@@ Network@@ S@@ core@@ C@@ ache.@@ is@@ S@@ core@@ d@@ Network@@ (com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ TR@@ US@@ TED@@ _S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ 1@@ .get@@ Scan@@ Result@@ ()@@ )).@@ thenReturn@@ (@@ true@@ ); when(m@@ Network@@ S@@ core@@ C@@ ache.@@ is@@ S@@ core@@ d@@ Network@@ (com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ 2@@ .get@@ Scan@@ Result@@ ()@@ )).@@ thenReturn@@ (@@ false@@ ); m@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ .@@ update@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ TR@@ US@@ TED@@ _S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ , com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ UN@@ TR@@ US@@ TED@@ _S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ )); ve@@ r@@ if@@ y@@ (m@@ Network@@ S@@ core@@ Manager@@ ).@@ request@@ S@@ co@@ res@@ (m@@ Network@@ Key@@ Array@@ Cap@@ tor.@@ cap@@ t@@ ure@@ ()); assert@@ Equal@@ s(@@ 1, m@@ Network@@ Key@@ Array@@ Cap@@ tor@@ .get@@ Value@@ ().@@ length); assert@@ Equal@@ s@@ (@@ new android.net.Network@@ Key@@ (@@ new android.net.@@ W@@ if@@ i@@ Key@@ (com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ .get@@ SS@@ ID@@ (), com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ 2@@ .get@@ B@@ SS@@ ID@@ String@@ ()@@ )), m@@ Network@@ Key@@ Array@@ Cap@@ tor@@ .get@@ Value@@ ()@@ [0@@ ]@@ ); }
@org.junit.Test public void test@@ Multi@@ ple@@ Default@@ s@@ _@@ super@@ class@@ _@@ ri@@ g@@ ht@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 50@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ add@@ Property@@ (@@ Option@@ s.@@ LA@@ M@@ B@@ DA@@ _@@ TO@@ _@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _C@@ ON@@ V@@ ER@@ TER@@ .getName@@ (), java.lang.@@ Boole@@ an@@ .@@ TR@@ UE@@ .@@ toString@@ ()).@@ compile@@ And@@ Run@@ Test@@ (); }
@com.android.annotations.NonNull public static com.@@ s@@ un@@ .@@ org.apache.@@ xml@@ .@@ int@@ er@@ n@@ al.@@ ser@@ i@@ aliz@@ e.@@ Output@@ For@@ ma@@ t get@@ P@@ ret@@ ty@@ P@@ r@@ int@@ Format@@ () { com.@@ s@@ un@@ .@@ org.apache.@@ xml@@ .@@ int@@ er@@ n@@ al.@@ ser@@ i@@ aliz@@ e.@@ Output@@ For@@ ma@@ t for@@ ma@@ t = new com.@@ s@@ un@@ .@@ org.apache.@@ xml@@ .@@ int@@ er@@ n@@ al.@@ ser@@ i@@ aliz@@ e.@@ Output@@ Format@@ (); for@@ mat@@ .set@@ Line@@ W@@ id@@ th@@ (1@@ 2@@ 0); for@@ mat@@ .set@@ In@@ d@@ ent@@ ing@@ (@@ true@@ ); for@@ mat@@ .set@@ In@@ d@@ ent@@ (@@ 4@@ ); for@@ mat@@ .set@@ En@@ cod@@ ing@@ ("@@ UT@@ F@@ -@@ 8@@ "); for@@ mat@@ .set@@ O@@ m@@ it@@ Com@@ ment@@ s@@ (@@ true@@ ); return for@@ mat@@ ; }
void can@@ cel@@ ();
void m@@ ulti@@ pl@@ y@@ By@@ Posi@@ tive@@ Int@@ (@@ int w@@ ) { java.@@ m@@ ath.@@ Native@@ B@@ N@@ .@@ B@@ N@@ _@@ m@@ ul@@ _@@ wor@@ d@@ (@@ this@@ .@@ b@@ ign@@ um@@ , w@@ ); }
private void en@@ s@@ ure@@ Key@@ st@@ ore@@ Oper@@ ation@@ In@@ itializ@@ ed@@ () { if ((m@@ M@@ ain@@ Data@@ Stream@@ er@@ ) != null@@ ) { return@@ ; } if ((m@@ Key@@ ) == null@@ ) { throw new java.lang.Illegal@@ State@@ Exception("@@ No@@ t in@@ itializ@@ ed@@ "); } android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s key@@ m@@ as@@ ter@@ Input@@ Arg@@ s = new android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s(); key@@ m@@ as@@ ter@@ Input@@ Arg@@ s.add@@ Int@@ (@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ TAG@@ _@@ AL@@ G@@ OR@@ I@@ TH@@ M@@ , m@@ Algorith@@ m@@ ); key@@ m@@ as@@ ter@@ Input@@ Arg@@ s.add@@ Int@@ (@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ TAG@@ _@@ B@@ LO@@ C@@ K@@ _M@@ O@@ DE@@ , m@@ Block@@ Mode@@ ); key@@ m@@ as@@ ter@@ Input@@ Arg@@ s.add@@ Int@@ (@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ TAG@@ _P@@ AD@@ D@@ ING@@ , m@@ P@@ add@@ ing@@ ); add@@ Algorith@@ m@@ S@@ pe@@ c@@ if@@ ic@@ Parameter@@ s@@ To@@ B@@ e@@ gin@@ (@@ key@@ m@@ as@@ ter@@ Input@@ Arg@@ s); android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s key@@ m@@ as@@ ter@@ Output@@ Arg@@ s = new android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s(); android.@@ security.@@ key@@ m@@ as@@ ter.@@ Oper@@ ation@@ Res@@ ult op@@ Res@@ ult = m@@ Key@@ Stor@@ e.@@ be@@ gin@@ (m@@ Key@@ .get@@ A@@ li@@ as@@ (), (m@@ En@@ cryp@@ t@@ ing ? android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _P@@ UR@@ P@@ O@@ S@@ E_@@ EN@@ C@@ R@@ Y@@ P@@ T : android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _P@@ UR@@ P@@ O@@ S@@ E_@@ DE@@ C@@ R@@ Y@@ P@@ T@@ ), true@@ , key@@ m@@ as@@ ter@@ Input@@ Arg@@ s, m@@ Add@@ i@@ tion@@ al@@ En@@ t@@ ro@@ py@@ For@@ B@@ e@@ gin@@ , key@@ m@@ as@@ ter@@ Output@@ Arg@@ s); m@@ Add@@ i@@ tion@@ al@@ En@@ t@@ ro@@ py@@ For@@ B@@ e@@ g@@ in = null@@ ; if (@@ op@@ Res@@ ult == null@@ ) { throw new android.@@ security.@@ Key@@ Store@@ Connec@@ t@@ Exception@@ (); } else if (((@@ op@@ Res@@ ult.@@ result@@ Code@@ ) != (android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ ER@@ R@@ OR@@ _@@ O@@ K@@ )) && ((@@ op@@ Res@@ ult.@@ result@@ Code@@ ) != (@@ Key@@ Stor@@ e.@@ NO@@ _@@ ER@@ R@@ OR@@ ))) { throw new android.@@ security.@@ Cryp@@ to@@ Oper@@ ation@@ Exception("@@ Faile@@ d to st@@ ar@@ t key@@ st@@ or@@ e o@@ per@@ ation@@ ", android.@@ security.@@ Key@@ m@@ as@@ ter@@ Utils.@@ get@@ Exception@@ For@@ Key@@ m@@ as@@ ter@@ Error@@ (@@ op@@ Res@@ ult.@@ result@@ Code@@ )); } if ((@@ op@@ Res@@ ult.@@ to@@ k@@ en@@ ) == null@@ ) { throw new android.@@ security.@@ Cryp@@ to@@ Oper@@ ation@@ Exception("@@ Key@@ st@@ or@@ e return@@ ed null o@@ per@@ ation to@@ k@@ en@@ "); } m@@ Oper@@ ation@@ To@@ ke@@ n = op@@ Res@@ ult.@@ to@@ k@@ en@@ ; load@@ Algorith@@ m@@ S@@ pe@@ c@@ if@@ ic@@ Parameter@@ s@@ From@@ B@@ e@@ gin@@ Result@@ (@@ key@@ m@@ as@@ ter@@ Output@@ Arg@@ s); m@@ F@@ ir@@ st@@ Oper@@ ation@@ In@@ iti@@ ate@@ d = true@@ ; m@@ M@@ ain@@ Data@@ Data@@ Data@@ Data@@ Data@@ (@@ new android.@@ security.@@ Key@@ Store@@ Cryp@@ to@@ Oper@@ ation@@ Ch@@ un@@ k@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ ed@@ M@@ ain@@ Stream@@ (@@ new android.@@ security.@@ Key@@ Store@@ )); }
@com.android.annotations.NonNull public java.util.Collection@@ <@@ java.io.File@@ > get@@ N@@ dk@@ Output@@ Dire@@ ctor@@ ies@@ () { return n@@ dk@@ Output@@ Dire@@ ctor@@ ies@@ ; }
boolean on@@ Media@@ B@@ utton@@ (@@ int typ@@ e) { if (@@ has@@ An@@ y@@ Call@@ s@@ ()) { com.android.server.@@ telecom.@@ Cal@@ l r@@ ing@@ Cal@@ l = get@@ F@@ ir@@ st@@ Call@@ With@@ State@@ (@@ Call@@ State.@@ R@@ ING@@ ING@@ ING@@ ); if ((@@ Headset@@ Media@@ B@@ utton@@ .@@ S@@ H@@ OR@@ T_@@ P@@ RE@@ SS@@ ) == typ@@ e) { if (r@@ ing@@ Cal@@ l == null@@ ) { com.android.server.@@ telecom.@@ Cal@@ l call@@ To@@ H@@ an@@ gu@@ p = get@@ F@@ ir@@ st@@ Call@@ With@@ State@@ (@@ Call@@ State.@@ R@@ ING@@ ING@@ , Call@@ State.@@ DI@@ AL@@ ING@@ , Call@@ State.@@ P@@ UL@@ L@@ ING@@ , Call@@ State.@@ AC@@ TIV@@ E, Call@@ State.@@ ON@@ _@@ H@@ O@@ L@@ D@@ ); android.telecom.@@ Log.@@ event@@ (c@@ all@@ To@@ H@@ an@@ g@@ up@@ , Log.@@ Event@@ s.@@ IN@@ F@@ O@@ , "@@ m@@ ed@@ i@@ a b@@ t@@ n short pres@@ s - en@@ d cal@@ l.@@ "); if (c@@ all@@ To@@ H@@ an@@ gu@@ p != null@@ ) { call@@ To@@ H@@ an@@ g@@ up@@ .@@ dis@@ connect@@ (); return true@@ ; } } else { r@@ ing@@ Cal@@ l.@@ ans@@ w@@ er(@@ V@@ ide@@ o@@ Pro@@ file.@@ STATE_@@ A@@ U@@ D@@ IO@@ _@@ ON@@ L@@ Y); return true@@ ; } } else if ((@@ Headset@@ Media@@ B@@ utton@@ .@@ L@@ ON@@ G@@ _P@@ RE@@ SS@@ ) == typ@@ e) { if (r@@ ing@@ Cal@@ l != null@@ ) { android.telecom.@@ Log.@@ event@@ (get@@ For@@ e@@ gro@@ und@@ Call@@ (), Log.@@ Event@@ s.@@ IN@@ F@@ O@@ , "@@ m@@ ed@@ i@@ a b@@ t@@ n long pres@@ s - re@@ ject@@ "); r@@ ing@@ Cal@@ l.@@ re@@ ject@@ (@@ false@@ , null@@ ); } else { android.telecom.@@ Log.@@ event@@ (get@@ For@@ e@@ gro@@ und@@ Call@@ (), Log.@@ Event@@ s.@@ IN@@ F@@ O@@ , "@@ m@@ ed@@ i@@ a b@@ t@@ n long pres@@ s - m@@ ute@@ "); m@@ Call@@ Audio@@ Manager.@@ to@@ g@@ g@@ le@@ M@@ ute@@ (); } return true@@ ; } } return false@@ ; }
public java.net.@@ UR@@ L get@@ E@@ n@@ try@@ Ur@@ l@@ Or@@ Null@@ (java.lang.String e@@ n@@ try@@ Name@@ ) { java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try e@@ n@@ try = find@@ E@@ n@@ try@@ With@@ Directory@@ F@@ all@@ back@@ (e@@ n@@ try@@ Name); if (e@@ n@@ try != null@@ ) { e@@ n@@ try@@ Name = e@@ n@@ try@@ .getName@@ (); try { return new java.net.@@ URL@@ ("@@ ja@@ r@@ ", null@@ , (-1@@ ), (((@@ file@@ U@@ ri@@ ) + "@@ !@@ /@@ ") + e@@ n@@ try@@ Name@@ ), this@@ ); } catch (@@ java.net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception e) { throw new java.lang.Runtime@@ Exception("@@ In@@ va@@ li@@ d e@@ n@@ try name@@ ", e); } return null@@ ; }
private static org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ Cont@@ ain@@ er al@@ loc@@ ate@@ Library@@ Cont@@ ain@@ er(@@ org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Java@@ Pro@@ ject java@@ Project@@ ) { final org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject i@@ Pro@@ ject = java@@ Pro@@ jec@@ t.get@@ Project@@ (); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Project@@ State st@@ ate = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .get@@ Project@@ State@@ (i@@ Project@@ ); if (@@ st@@ ate == null@@ ) { return null@@ ; } java.util.List<@@ org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ E@@ n@@ try@@ > en@@ tri@@ es = new java.util.ArrayList<@@ org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ E@@ n@@ try@@ >(); java.util.@@ Set@@ <@@ java.io.File@@ > ja@@ r@@ File@@ s = new java.util.@@ Hash@@ Set@@ <@@ java.io.File@@ >(); java.util.@@ Set@@ <@@ org.eclipse.@@ core.@@ resources.@@ I@@ Project@@ > ref@@ Project@@ s = new java.util.@@ Hash@@ Set@@ <@@ org.eclipse.@@ core.@@ resources.@@ I@@ Project@@ >(); java.util.List<@@ org.eclipse.@@ core.@@ resources.@@ I@@ Project@@ > lib@@ Project@@ s = stat@@ e.get@@ F@@ ull@@ Library@@ Project@@ s(); for (@@ org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject lib@@ Pro@@ ject : lib@@ Project@@ s) { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.get@@ Dependenc@@ y@@ List@@ From@@ Class@@ path@@ (@@ lib@@ Project@@ , ref@@ Project@@ s, ja@@ r@@ Fil@@ es@@ , true@@ ); } com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.@@ process@@ Reference@@ d@@ Project@@ s(@@ i@@ Project@@ , ref@@ Project@@ s, ja@@ r@@ Fil@@ es@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.get@@ J@@ ar@@ List@@ From@@ Lib@@ s@@ Folder@@ (i@@ Project@@ , ja@@ r@@ Fil@@ es@@ ); for (@@ org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject p : ref@@ Project@@ s) { en@@ tri@@ es.@@ add(@@ org.eclipse.@@ jd@@ t.@@ core.@@ Java@@ C@@ ore@@ .@@ new@@ Project@@ E@@ n@@ try@@ (p@@ .get@@ F@@ ull@@ Path@@ (), true@@ )); } en@@ tri@@ es.@@ add@@ All@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.@@ con@@ ver@@ t@@ J@@ ar@@ s@@ To@@ Class@@ path@@ En@@ tri@@ es@@ (i@@ Project@@ , ja@@ r@@ Fil@@ es@@ )); return com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.@@ al@@ loc@@ ate@@ Cont@@ ain@@ er(@@ java@@ Project@@ , en@@ tri@@ es@@ , new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Path@@ (com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ Constants.@@ CON@@ TA@@ IN@@ ER_@@ L@@ I@@ B@@ R@@ AR@@ I@@ E@@ S@@ ), "@@ And@@ ro@@ id Librar@@ ies@@ "); }
@java.lang.Override public void run@@ () { m@@ Res@@ ult = mC@@ ach@@ e.get@@ ("@@ f@@ oo@@ "); }
private static void long@@ To@@ D@@ ouble@@ () { M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 1.@@ 0, Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (1@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 0.@@ 0, Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (0@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 1.@@ 0@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -1@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 5@@ 1.@@ 0, Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (@@ 5@@ 1@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 5@@ 1.@@ 0@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -@@ 5@@ 1@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 2.@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 7@@ E@@ 9@@ , Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (@@ 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 7@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 2.@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 7@@ E@@ 9@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -@@ 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 7@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 2.@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ E@@ 9@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -@@ 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 2.@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ E@@ 9@@ , Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (@@ 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 2.@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 9@@ E@@ 9@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -@@ 2@@ 1@@ 4@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 9@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 4@@ .@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 6@@ E@@ 9@@ , Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (@@ 4@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 6@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 1.@@ 4@@ 0@@ 7@@ 3@@ 9@@ 6@@ 3@@ 5@@ 8@@ 7@@ 1@@ 7@@ 4@@ 5@@ E@@ 1@@ 4@@ , Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (1@@ 4@@ 0@@ 7@@ 3@@ 9@@ 6@@ 3@@ 5@@ 8@@ 7@@ 4@@ 5@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 1.@@ 4@@ 0@@ 7@@ 3@@ 9@@ 6@@ 3@@ 5@@ 8@@ 7@@ 1@@ 7@@ 4@@ 5@@ E@@ 1@@ 4@@ ), Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ ((@@ -1@@ 4@@ 0@@ 7@@ 3@@ 9@@ 6@@ 3@@ 5@@ 8@@ 7@@ 1@@ 7@@ 4@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s(@@ 9@@ .@@ 2@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ E@@ 1@@ 8@@ , Main.@@ $@@ op@@ t@@ $@@ Long@@ To@@ D@@ ouble@@ (@@ 9@@ 2@@ 3@@ 3@@ 3@@ 7@@ 2@@ 0@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ L@@ )); M@@ ain@@ .@@ assert@@ D@@ ouble@@ Equal@@ s@@ ((@@ -@@ 9@@ .@@ 2@@ 3@@ 7@@ 7@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 6@@ E@@ 9@@ .@@ assert@@ Long@@ To@@ D@@ ouble@@ ((@@ -@@ 9@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 7@@ 6@@ 7@@ 6@@ 8@@ 3@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 2@@ 9@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 7@@ 6@@ 7@@ 6@@ 7@@ 7@@ 6@@ 8@@ 3@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 8@@ 3@@ 6@@ 7@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ (@@ -@@ 9@@ 6@@ 7@@ 2@@ 9@@ 6@@ 7@@ 6@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 7@@ 7@@ 6@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 4@@ 8@@ 3@@ 7@@ 4@@ 8@@ 3@@ 6@@ 4@@ 8@@ 5@@ L@@ ))); M@@ ain@@ .@@ assert@@ D@@ ouble@@ ((@@ -@@ 9@@ 6@@ 7@@ 4@@ 8@@ 5@@ L@@ )));
@org.junit.@@ B@@ e@@ for@@ e public void set@@ up@@ () throw@@ s java.lang.Exception { com.android.@@ framework@@ .m@@ ult@@ id@@ ex@@ le@@ g@@ ac@@ y@@ test@@ ser@@ vices.@@ test@@ 2.@@ Ser@@ vices@@ Test@@ s.@@ TAG, "@@ set@@ up@@ "); java.io.File app@@ li@@ cation@@ Data@@ Di@@ r = new java.io.File@@ (android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Target@@ Context@@ ().get@@ Application@@ Info@@ ().@@ data@@ Dir@@ ); com.android.@@ framework@@ .m@@ ult@@ id@@ ex@@ le@@ g@@ ac@@ y@@ test@@ ser@@ vices.@@ test@@ 2.@@ Ser@@ vices@@ Test@@ s.@@ clear@@ Dir@@ Content@@ (@@ app@@ li@@ cation@@ Data@@ Dir@@ ); target@@ Fil@@ es@@ Di@@ r = android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Target@@ Context@@ ().get@@ Fil@@ es@@ Dir@@ (); android.util.Log.@@ i@@ (com.android.@@ framework@@ .m@@ ult@@ id@@ ex@@ le@@ g@@ ac@@ y@@ test@@ ser@@ vices.@@ test@@ 2.@@ Ser@@ vices@@ Test@@ s.@@ TAG, "@@ set@@ u@@ p do@@ ne@@ "); }
public void register@@ Java@@ Ar@@ t@@ if@@ act@@ (@@ @com.android.annotations.NonNull java.lang.String name@@ , @com.android.annotations.NonNull com.android.build.gradle.@@ api.@@ Base@@ Vari@@ an@@ t vari@@ an@@ t, @com.android.annotations.NonNull java.lang.String as@@ se@@ m@@ ble@@ Task@@ Name, @com.android.annotations.NonNull java.lang.String java@@ Comp@@ ile@@ Task@@ Name, @com.android.annotations.NonNull java.util.Collection@@ <@@ java.io.File@@ > g@@ ener@@ ated@@ Source@@ Folder@@ s, @com.android.annotations.NonNull java.lang.@@ I@@ ter@@ able@@ <java.lang.String@@ > ide@@ Set@@ up@@ Task@@ Nam@@ es@@ , @com.android.annotations.NonNull org.@@ gradle.@@ api.@@ ar@@ t@@ if@@ a@@ cts.@@ Configur@@ ation config@@ ur@@ ation@@ , @com.android.annotations.NonNull java.io.File class@@ es@@ Folder@@ , @com.android.annotations.NonNull java.io.File run@@ time@@ Java@@ Res@@ ou@@ re@@ ces@@ Folder@@ , @com.android.annotations.@@ Null@@ able com.android.builder.@@ model.@@ Source@@ Provid@@ er source@@ Provider@@ ) { com.android.builder.@@ model.@@ Ar@@ t@@ if@@ act@@ M@@ eta@@ Data ar@@ t@@ if@@ act@@ M@@ eta@@ Data = ex@@ tra@@ Ar@@ t@@ if@@ act@@ Map@@ .get@@ (@@ name@@ ); if (@@ ar@@ t@@ if@@ act@@ M@@ eta@@ Data == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ Ar@@ t@@ if@@ ac@@ t wit@@ h name $@@ name is not y@@ et register@@ ed@@ . U@@ se register@@ Ar@@ t@@ if@@ act@@ Type@@ ()@@ "); } if ((@@ ar@@ t@@ if@@ act@@ M@@ eta@@ Data@@ .get@@ Type@@ ()) != (com.android.@@ builder.@@ model.@@ Ar@@ t@@ if@@ act@@ M@@ eta@@ Data@@ .@@ TYPE_@@ J@@ AV@@ A@@ )) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ Ar@@ t@@ if@@ ac@@ t wit@@ h name $@@ name is not of typ@@ e J@@ AV@@ A@@ "); } com.android.builder.@@ model.@@ Java@@ Ar@@ t@@ if@@ ac@@ t ar@@ t@@ if@@ ac@@ t = new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Java@@ Ar@@ t@@ if@@ act@@ Imp@@ l@@ (@@ name@@ , as@@ se@@ m@@ ble@@ Task@@ Name, java@@ Comp@@ ile@@ Task@@ Name, ide@@ Set@@ up@@ Task@@ Nam@@ es@@ , g@@ ener@@ ated@@ Source@@ Folder@@ s, class@@ es@@ Folder@@ , run@@ time@@ Java@@ Res@@ ou@@ re@@ ces@@ Folder@@ , new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Configuration@@ Dependenc@@ i@@ es(@@ config@@ ur@@ ation@@ ), source@@ Provider@@ , null@@ ); ex@@ tra@@ Java@@ Ar@@ t@@ if@@ a@@ cts.@@ put@@ (@@ vari@@ an@@ t.get@@ Name@@ (), ar@@ t@@ if@@ act@@ ); }
static java.nio.Byte@@ Buff@@ er get@@ Android@@ M@@ an@@ if@@ est@@ From@@ Apk@@ (@@ java.util.List<@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ C@@ en@@ tr@@ al@@ Directory@@ Record@@ > c@@ d@@ Record@@ s, com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce l@@ hf@@ Sec@@ tion@@ ) throw@@ s com.android.@@ apk@@ si@@ g.@@ z@@ i@@ p.@@ Zip@@ Format@@ Exception, java.io.IOException { com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ C@@ en@@ tr@@ al@@ Directory@@ Recor@@ d android@@ M@@ an@@ if@@ est@@ C@@ d@@ Recor@@ d = null@@ ; for (com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ C@@ en@@ tr@@ al@@ Directory@@ Recor@@ d c@@ d@@ Recor@@ d : c@@ d@@ Record@@ s) { if (com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er.@@ AN@@ D@@ RO@@ ID@@ _M@@ AN@@ I@@ F@@ E@@ ST_@@ Z@@ IP@@ _@@ EN@@ TR@@ Y@@ _N@@ AME@@ .@@ equals(@@ c@@ d@@ Record@@ .getName@@ ())) { android@@ M@@ an@@ if@@ est@@ C@@ d@@ Recor@@ d = c@@ d@@ Record@@ ; break@@ ; } } if (@@ android@@ M@@ an@@ if@@ est@@ C@@ d@@ Recor@@ d == null@@ ) { return null@@ ; } return java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ Local@@ File@@ Record@@ .get@@ Un@@ comp@@ res@@ sed@@ Data@@ (@@ l@@ hf@@ Sec@@ tion@@ , android@@ M@@ an@@ if@@ est@@ C@@ d@@ Recor@@ d, l@@ Sec@@ tion@@ .@@ size@@ ())); }
@org.junit.Test public void test@@ Process@@ Run@@ Time@@ out@@ () { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Command@@ Res@@ ult command@@ Res@@ ult = new com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Command@@ Result@@ (); m@@ Process@@ Hel@@ p@@ er = com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Hel@@ per@@ Test.@@ create@@ Mock@@ Process@@ Hel@@ per@@ (@@ Command@@ Statu@@ s.@@ TI@@ ME@@ D_@@ O@@ UT@@ ); java.lang.String int@@ er@@ rup@@ t@@ Message = m@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Helper.@@ run@@ P@@ y@@ th@@ on@@ Runner@@ (m@@ P@@ y@@ th@@ on@@ C@@ m@@ d, command@@ Result@@ , m@@ Test@@ Time@@ out); assert@@ Equal@@ s@@ (@@ int@@ er@@ rup@@ t@@ Message@@ , null@@ ); assert@@ Equal@@ s(@@ command@@ Res@@ ul@@ t.get@@ Status@@ (), Command@@ Statu@@ s.@@ TI@@ ME@@ D_@@ O@@ UT@@ ); }
@java.lang.Override public void ex@@ it@@ () { remove@@ Mess@@ ag@@ es@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ State.@@ BL@@ E_@@ STA@@ R@@ T_@@ TI@@ ME@@ O@@ UT@@ ); super@@ .@@ ex@@ it@@ (); }
@java.lang.Override void test@@ () { com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ not@@ if@@ ic@@ ations.@@ Mock@@ Listen@@ er.@@ Mock@@ Listen@@ er.@@ pro@@ be@@ Listener@@ Status@@ (m@@ Contex@@ t, new com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ not@@ if@@ ic@@ ations.@@ Mock@@ Listen@@ er.@@ Mock@@ Listen@@ er.@@ Status@@ C@@ atch@@ er@@ () { @java.lang.Override public void ac@@ ce@@ p@@ t@@ (@@ int result@@ ) { if (@@ result == (android.@@ app.@@ Ac@@ tivity.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ )) { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } else { if ((@@ (m@@ N@@ m@@ .get@@ E@@ ff@@ ec@@ ts@@ Sup@@ pres@@ s@@ or@@ ()) == null@@ ) || (m@@ N@@ m@@ .get@@ E@@ ff@@ ec@@ ts@@ Sup@@ pres@@ s@@ or@@ ().@@ equal@@ s@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ not@@ if@@ ic@@ ations.@@ No@@ t@@ if@@ ic@@ ation@@ Listener@@ V@@ er@@ if@@ ier@@ Ac@@ tivity.@@ V@@ R@@ _N@@ O@@ TI@@ F@@ IC@@ A@@ TION@@ _S@@ ER@@ VIC@@ E@@ ))) { statu@@ s = P@@ A@@ SS@@ ; } else { statu@@ s = FA@@ IL@@ ; } } next@@ (); } }); de@@ lay@@ (); }
@java.lang.Override public java.lang.String parse@@ C@@ urr@@ enc@@ y@@ (android.@@ icu@@ .@@ de@@ v@@ .@@ test@@ .@@ for@@ mat@@ .@@ Data@@ D@@ ri@@ v@@ en@@ Number@@ Format@@ Test@@ Data t@@ up@@ le@@ ) { android.@@ icu@@ .@@ text.@@ Dec@@ im@@ al@@ Format@@ _@@ IC@@ U@@ 5@@ 8 f@@ m@@ t = create@@ Dec@@ im@@ al@@ Format@@ (t@@ up@@ le@@ ); java.text.@@ Par@@ se@@ Posi@@ tion p@@ po@@ s = new java.text.@@ Par@@ se@@ Posi@@ tion@@ (@@ 0); C@@ urr@@ enc@@ y@@ A@@ mo@@ un@@ t curr@@ A@@ m@@ t = f@@ m@@ t.@@ parse@@ C@@ urr@@ enc@@ y@@ (t@@ up@@ le.@@ parse@@ , p@@ po@@ s); if ((@@ p@@ p@@ os.@@ get@@ Index@@ ()) == 0) { return (("@@ Par@@ se fa@@ ile@@ d@@ ; go@@ t " + curr@@ A@@ m@@ t@@ ) + ", bu@@ t expec@@ ted ") + (t@@ up@@ le.@@ output@@ ); } if (t@@ up@@ le.@@ equal@@ s("@@ fail@@ ")) { return null@@ ; } java.lang.@@ Num@@ b@@ er expec@@ ted = android.@@ icu@@ .@@ de@@ v@@ .@@ test@@ .@@ for@@ mat@@ .@@ Number@@ Format@@ Data@@ D@@ ri@@ v@@ en@@ Test.@@ to@@ Number@@ (t@@ up@@ le.@@ output@@ ); java.lang.@@ Num@@ b@@ er act@@ u@@ al = curr@@ A@@ m@@ t.get@@ Number@@ (); if ((((@@ expected@@ .@@ do@@ ub@@ le@@ Value@@ ()) != (@@ act@@ ual@@ .@@ do@@ ub@@ le@@ Value@@ ())) && (!@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ N@@ a@@ N@@ (@@ expected@@ .@@ do@@ ub@@ le@@ Value@@ ()@@ )@@ ))) && (!@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ N@@ a@@ N@@ (@@ expected@@ .@@ do@@ ub@@ le@@ Value@@ ()@@ )@@ ))) { return (("@@ Ex@@ pec@@ ted@@ : " + expected@@ ) + ", go@@ t@@ : ") + act@@ ual@@ ; } if (!(@@ t@@ up@@ le.@@ output@@ C@@ urr@@ enc@@ y.@@ equals(@@ curr@@ A@@ m@@ t.get@@ C@@ urr@@ enc@@ y@@ ().@@ toString@@ ()))) { return (("@@ Ex@@ pec@@ ted curr@@ enc@@ y@@ : " + (t@@ up@@ le.@@ output@@ C@@ urr@@ enc@@ y@@ )) + ", go@@ t@@ : ") + (c@@ urr@@ A@@ m@@ t.get@@ C@@ urr@@ enc@@ y@@ ()); } return null@@ ; }
private void on@@ Device@@ Load@@ ed@@ (@@ byte cap@@ abili@@ ties@@ , byte s@@ in@@ k@@ Id, byte@@ [] addres@@ s) { com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Stack@@ Ev@@ ent ev@@ ent = new com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Stack@@ Event@@ (@@ He@@ ar@@ ing@@ A@@ id@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ DE@@ VIC@@ E_@@ LOA@@ DE@@ D@@ ); ev@@ ent.@@ de@@ vice = get@@ Device@@ (@@ addres@@ s); ev@@ ent.@@ value@@ Int@@ 1 = cap@@ abili@@ ties@@ ; ev@@ ent.@@ value@@ Int@@ 2 = s@@ in@@ k@@ Id@@ ; if (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Native@@ Interface@@ .@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ Native@@ Interface@@ .@@ TAG, ("@@ on@@ Audio@@ State@@ Changed@@ : " + event@@ )); } send@@ Message@@ To@@ Service@@ (@@ event@@ ); }
private void check@@ Co@@ s@@ pi@@ FloatFloat@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Co@@ s@@ pi@@ FloatFloat@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Co@@ s@@ pi@@ FloatFloat@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ s@@ pi@@ FloatFloat@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Co@@ s@@ pi@@ FloatFloat@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Co@@ s@@ pi@@ FloatFloat@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Co@@ s@@ pi@@ FloatFloat@@ : " + (e.toString()))); } }
void device@@ Connec@@ ted@@ (java.lang.String b@@ d@@ add@@ r@@ , boolean ab@@ so@@ lu@@ te@@ Vo@@ lum@@ e) { android.util.Log.@@ i@@ (com.android.bluetooth.@@ avrcp.@@ Av@@ rc@@ p@@ Target@@ Service.TAG, ((("@@ device@@ Connec@@ ted@@ : b@@ d@@ add@@ r@@ =@@ " + b@@ d@@ add@@ r@@ ) + " ab@@ so@@ lu@@ te@@ Vo@@ lum@@ e@@ =@@ ") + ab@@ so@@ lu@@ te@@ Vo@@ lum@@ e@@ )); m@@ Audio@@ Manager.@@ av@@ rc@@ p@@ Sup@@ port@@ s@@ Ab@@ so@@ lu@@ te@@ Vo@@ lum@@ e@@ (b@@ d@@ add@@ r@@ , ab@@ so@@ lu@@ te@@ Vo@@ lum@@ e); com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Met@@ ri@@ c@@ s@@ Logg@@ er.@@ log@@ Profile@@ Connection@@ Event@@ (@@ Bluetooth@@ Met@@ ri@@ c@@ s@@ Pro@@ to.@@ Profile@@ Id@@ .@@ AV@@ R@@ C@@ P@@ ); }
void dum@@ p@@ Pro@@ to@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Bluetooth@@ Lo@@ g pro@@ to@@ ) { synchronized@@ (@@ Scan@@ Stat@@ s.@@ m@@ Scan@@ Event@@ s) { for (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent ev@@ ent : m@@ Scan@@ Event@@ s) { pro@@ to.@@ add@@ Scan@@ Event@@ (@@ event@@ ); } } }
@java.lang.Override public void invok@@ e@@ O@@ em@@ R@@ il@@ Request@@ R@@ aw@@ (@@ byte@@ [] data@@ , android.os.@@ Message res@@ ponse@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ IO@@ em@@ H@@ oo@@ k o@@ em@@ H@@ oo@@ k@@ Prox@@ y = get@@ O@@ em@@ H@@ oo@@ k@@ Prox@@ y@@ (@@ res@@ ponse@@ ); if (o@@ em@@ H@@ oo@@ k@@ Prox@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ O@@ E@@ M@@ _@@ H@@ O@@ K_@@ R@@ A@@ W@@ , res@@ ponse@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ (((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + "@@ [@@ ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Uti@@ l@@ s@@ .@@ byte@@ s@@ To@@ H@@ ex@@ String@@ (d@@ ata@@ ))) + "@@ ]@@ ")); } try { o@@ em@@ H@@ oo@@ k@@ Prox@@ y.@@ send@@ Request@@ R@@ aw@@ (rr@@ .m@@ Ser@@ ial@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ pri@@ m@@ i@@ tive@@ Array@@ To@@ Array@@ List@@ (d@@ ata@@ )); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ invok@@ e@@ O@@ em@@ R@@ il@@ Request@@ String@@ s", e); } } }
@org.junit.Test public void test@@ O@@ em@@ Pa@@ id@@ () { android.net.Network@@ Capabili@@ ti@@ es n@@ c = new android.net.Network@@ Capabilities@@ (); assert@@ True@@ (@@ n@@ c.@@ has@@ Un@@ w@@ an@@ ted@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@ ID@@ )); assert@@ False@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@ ID@@ )); n@@ c.@@ m@@ ay@@ be@@ Mark@@ Capabilities@@ Res@@ tr@@ ic@@ ted@@ (); assert@@ True@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ RE@@ S@@ TR@@ IC@@ TED@@ )); n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@ ID@@ ); n@@ c.@@ m@@ ay@@ be@@ Mark@@ Capabilities@@ Res@@ tr@@ ic@@ ted@@ (); assert@@ True@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@ ID@@ )); assert@@ False@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ RE@@ S@@ TR@@ IC@@ TED@@ )); n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@ ID@@ )); assert@@ False@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ RE@@ S@@ TR@@ IC@@ TED@@ )); assert@@ False@@ (@@ n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ RE@@ S@@ TR@@ IC@@ TED@@ )); n@@ c.@@ has@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ O@@ E@@ M@@ _P@@ A@@
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 3@@ 8@@ 4@@ T@@ c@@ p@@ 4@@ U@@ dp@@ En@@ cap@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 3@@ 8@@ 4@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (@@ 3@@ 8@@ 4@@ ), 1@@ 9@@ 2@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , true@@ , 1, true@@ ); }
private void process@@ Lock@@ ed@@ State@@ () { if ((m@@ Uicc@@ Application@@ ) == null@@ ) { return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Card@@ Statu@@ s.@@ P@@ in@@ State p@@ in@@ 1@@ State = m@@ Uicc@@ Application@@ .get@@ P@@ in@@ 1@@ State@@ (); if (p@@ in@@ 1@@ State == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Card@@ Statu@@ s.@@ P@@ in@@ State.@@ P@@ IN@@ STATE_@@ EN@@ ABL@@ ED@@ _P@@ ER@@ M@@ _@@ B@@ LO@@ C@@ K@@ ED@@ )) { set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ ER@@ M@@ _@@ D@@ IS@@ ABL@@ ED@@ ); return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Card@@ Application@@ Statu@@ s.@@ App@@ State app@@ State = m@@ Uicc@@ Application@@ .get@@ State@@ (); switch (@@ app@@ State@@ ) { case AP@@ P@@ STATE_@@ P@@ I@@ N : m@@ P@@ in@@ Lock@@ ed@@ Reg@@ is@@ tr@@ an@@ ts.@@ not@@ if@@ y@@ Reg@@ is@@ tr@@ an@@ ts@@ (); set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ IN@@ _RE@@ Q@@ U@@ I@@ RE@@ D@@ ); break@@ ; case AP@@ P@@ STATE_@@ P@@ U@@ K : set@@ Ex@@ ter@@ nal@@ State@@ (@@ State.@@ P@@ U@@ K@@ _RE@@ Q@@ U@@ I@@ RE@@ D@@ ); break@@ ; } }
private void test@@ Connec@@ t@@ Vi@@ a@@ Dire@@ ct@@ Prox@@ y@@ To@@ H@@ ttp@@ s(@@ libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Prox@@ y@@ Con@@ fig pro@@ x@@ y@@ Config@@ ) throw@@ s java.lang.Exception { Test@@ SSL@@ Context test@@ SSL@@ Context = create@@ Default@@ Test@@ SSL@@ Context@@ (); server.@@ u@@ se@@ H@@ ttp@@ s(@@ test@@ SSL@@ Context.@@ server@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ (), false@@ ); server.@@ en@@ qu@@ e@@ ue@@ (@@ new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ B@@ o@@ d@@ y@@ (@@ "@@ this res@@ pon@@ se com@@ es vi@@ a H@@ T@@ T@@ P@@ S@@ ")); server.@@ play@@ (); java.net.@@ UR@@ L ur@@ l = server.@@ get@@ Ur@@ l@@ ("@@ /@@ f@@ oo@@ "); javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connec@@ tion connec@@ tion = ((@@ javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connection@@ ) (pro@@ x@@ y@@ Config.@@ connect@@ (@@ server@@ , ur@@ l@@ ))); connection@@ .set@@ SSL@@ Socket@@ Fa@@ ctory@@ (@@ test@@ SSL@@ Context.@@ c@@ lient@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ ()); assert@@ Content@@ (@@ "@@ this res@@ pon@@ se com@@ es vi@@ a H@@ T@@ T@@ P@@ S@@ ", connection@@ ); com.google.@@ mock@@ w@@ eb@@ server.@@ Record@@ ed@@ Requ@@ est requ@@ est = server.@@ t@@ ake@@ Request@@ (); assert@@ Equal@@ s("@@ G@@ E@@ T /@@ fo@@ o H@@ T@@ T@@ T@@ P@@ /@@ 1.@@ 1@@ ", requ@@ est.@@ get@@ Request@@ Line@@ ()); }
private static boolean start@@ s@@ With@@ Min@@ us@@ Sign@@ (java.lang.@@ Char@@ Se@@ qu@@ en@@ ce c@@ s, java.lang.String min@@ us@@ Sign@@ ) { for (@@ int i = 0; i < (m@@ in@@ us@@ Sign@@ .@@ length@@ ()); ++@@ i@@ ) { if ((m@@ in@@ us@@ Sign@@ .@@ char@@ At@@ (i@@ )) != (c@@ s@@ .@@ char@@ At@@ (i@@ ))) { return false@@ ; } } return true@@ ; }
@@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ annotations.@@ Visi@@ ble@@ For@@ Test@@ ing public static android.net.Network@@ Stat@@ s java@@ Read@@ Network@@ Stat@@ s@@ D@@ eta@@ il@@ (@@ java.io.File d@@ eta@@ il@@ Path@@ , int li@@ m@@ it@@ U@@ id, java.lang.String[] li@@ m@@ it@@ I@@ fa@@ ces@@ , int li@@ m@@ it@@ Tag@@ ) throw@@ s java.io.IOException { final android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ Thread@@ Polic@@ y s@@ av@@ ed@@ Polic@@ y = android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ al@@ low@@ Thread@@ Dis@@ k@@ Read@@ s(); final android.net.Network@@ Stat@@ s stat@@ s = new android.net.Network@@ Stat@@ s(@@ android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ (), 2@@ 4@@ ); final android.net.Network@@ Stat@@ s.@@ E@@ n@@ try e@@ n@@ try = new android.net.Network@@ Stat@@ s.@@ E@@ n@@ try@@ (); int id@@ x = 1; int las@@ t@@ Id@@ x = 1; com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pro@@ c@@ File@@ Read@@ er read@@ er = null@@ ; try { read@@ er = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pro@@ c@@ File@@ Read@@ er@@ (@@ new java.io.File@@ InputStream@@ (d@@ eta@@ il@@ Path@@ )); read@@ er.@@ fin@@ is@@ h@@ Line@@ (); while (@@ read@@ er.@@ has@@ M@@ ore@@ Data@@ ()) { id@@ x = read@@ er.@@ next@@ Int@@ (); if (@@ id@@ x != (@@ las@@ t@@ Id@@ x + 1@@ )) { throw new java.net.@@ Pro@@ to@@ col@@ Exception@@ ((@@ (("@@ in@@ con@@ si@@ st@@ ent id@@ x@@ =@@ " + id@@ x@@ ) + " a@@ f@@ ter las@@ t@@ Id@@ x@@ =@@ ") + las@@ t@@ Id@@ x@@ )); } las@@ t@@ Id@@ x = id@@ x@@ ; e@@ n@@ try@@ .@@ if@@ ac@@ e = read@@ er.@@ next@@ String@@ (); e@@ n@@ try@@ .@@ t@@ a@@ g = k@@ er@@ nel@@ To@@ Tag@@ (@@ read@@ er.@@ next@@ String@@ ()); e@@ n@@ try@@ .@@ u@@ id = read@@ er.@@ next@@ Int@@ (); e@@ n@@ try@@ .@@ set = read@@ er.@@ next@@ Int@@ (); e@@ n@@ try@@ .@@ r@@ x@@ Byte@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ r@@ x@@ Packet@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Byte@@ s = read@@ er.@@ next@@ Long@@ (); e@@ n@@ try@@ .@@ t@@ x@@ Packet@@ s = read@@ er.@@ next@@ Long@@ (); if ((((@@ li@@ m@@ it@@ Iface@@ s == null@@ ) || (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Array@@ Utils.@@ contain@@ s(@@ li@@ m@@ it@@ I@@ fa@@ ces@@ , e@@ n@@ try@@ .@@ if@@ a@@ ce@@ ))) && ((@@ li@@ m@@ it@@ U@@ id == (android.net.@@ Network@@ Stat@@ s.@@ U@@ ID@@ _@@ AL@@ L@@ )) || (@@ li@@ m@@ it@@ U@@ id == (e@@ n@@ try@@ .@@ uid@@ )@@ ))) && ((@@ li@@ m@@ it@@ T@@ a@@ g == (android.net.@@ Network@@ Stat@@ s.@@ TAG@@ _@@ AL@@ L@@ )) || (@@ li@@ m@@ it@@ T@@ a@@ g == (e@@ n@@ try@@ .@@ t@@ ag@@ )@@ ))) { stat@@ s.add@@ Valu@@ es@@ (e@@ n@@ try@@ ); } read@@ er.@@ fin@@ is@@ h@@ Line@@ (); } } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception | java.lang.@@ Number@@ Format@@ Exception e) { throw new java.net.@@ Pro@@ to@@ col@@ Exception(("@@ pro@@ ble@@ m par@@ s@@ ing id@@ x " + id@@ x@@ ), e); } final@@ l@@ y { libcore.io.@@ I@@ o@@ Utils.@@ close@@ Q@@ ui@@ et@@ ly@@ (@@ read@@ er@@ ); android.os.@@ Str@@ i@@ ct@@ Mod@@ e.@@ set@@ Thread@@ Polic@@ y@@ (s@@ av@@ ed@@ Polic@@ y@@ ); } return stat@@ s; }
@org.junit.Test public void test@@ Comp@@ ile@@ 0@@ 1@@ 7@@ () throw@@ s java.lang.Exception { java.lang.String package@@ Name = "@@ com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ test@@ 0@@ 1@@ 7@@ .@@ jack@@ "; java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > input@@ 1 = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); { java.lang.String class@@ Pre@@ fi@@ x = (@@ package@@ Nam@@ e.@@ re@@ pla@@ ce@@ (@@ '@@ .@@ '@@ , '@@ -@@ '@@ )) + "@@ -@@ "; input@@ 1.@@ put@@ ("@@ En@@ um@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); input@@ 1.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); input@@ 1.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), true@@ )); } java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > input@@ 2 = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); { java.lang.String class@@ Pre@@ fi@@ x = (@@ package@@ Nam@@ e.@@ re@@ pla@@ ce@@ (@@ '@@ .@@ '@@ , '@@ _@@ '@@ )) + "@@ _@@ "; input@@ 2.@@ put@@ ("@@ En@@ um@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); input@@ 2.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); input@@ 2.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), true@@ )); } compile@@ Code@@ (@@ package@@ Name, input@@ 1, input@@ 2@@ ); }
public void add@@ U@@ 16@@ (@@ int v@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { m@@ N@@ .add@@ U@@ 16@@ (@@ v@@ ); return@@ ; } if ((@@ v < 0) || (@@ v > 6@@ 5@@ 5@@ 3@@ 5@@ )) { android.util.Log.e@@ ("@@ r@@ s", (("@@ Field@@ Pack@@ er.@@ add@@ U@@ 16@@ ( " + v@@ ) + " )@@ ")); throw new java.lang.Illegal@@ Argument@@ Exception("@@ S@@ av@@ ing valu@@ e out of r@@ an@@ g@@ e for type@@ "); } al@@ ign@@ (@@ 2@@ ); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (@@ v & 25@@ 5@@ )); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (@@ v >@@ > 8@@ )); }
@java.lang.Override public void end@@ Tra@@ ce@@ Mark@@ ed@@ (com.android.jack.@@ ir.ast.J@@ No@@ de no@@ de@@ ) { com@@ po@@ sed@@ Statu@@ s.@@ po@@ p@@ (); for (com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ tr@@ ac@@ er.@@ Tr@@ ac@@ er@@ B@@ r@@ us@@ h con@@ fig : b@@ r@@ us@@ h@@ es) { b@@ r@@ us@@ h@@ .@@ end@@ Tra@@ ce@@ Mark@@ ed@@ (@@ no@@ de@@ ); } }
private static char int@@ To@@ H@@ ex@@ Dig@@ it@@ (@@ int b@@ ) { if (@@ b < 1@@ 0) { return (@@ (@@ char@@ ) (@@ '@@ 0@@ ' + b@@ )); } else { return (@@ (@@ char@@ ) ((@@ '@@ a@@ ' + b@@ ) - 10@@ )); } }
public void fil@@ l@@ In@@ No@@ t@@ if@@ ier@@ Bund@@ le@@ (android.os.@@ Bund@@ le m@@ ) { m.@@ put@@ Int@@ ("@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ ", m@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ ); m.@@ put@@ Int@@ ("@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ ", m@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ ); m.@@ put@@ Int@@ ("@@ C@@ dm@@ a@@ D@@ b@@ m@@ ", mC@@ dm@@ a@@ D@@ b@@ m@@ ); m.@@ put@@ Int@@ ("@@ C@@ dm@@ a@@ E@@ c@@ io@@ ", mC@@ dm@@ a@@ E@@ c@@ io@@ ); m.@@ put@@ Int@@ ("@@ E@@ v@@ do@@ D@@ b@@ m@@ ", m@@ E@@ v@@ do@@ D@@ b@@ m@@ ); m.@@ put@@ Int@@ ("@@ E@@ v@@ do@@ E@@ c@@ io@@ ", m@@ E@@ v@@ do@@ E@@ c@@ io@@ ); m.@@ put@@ Int@@ ("@@ E@@ v@@ do@@ S@@ n@@ r@@ ", m@@ E@@ v@@ do@@ S@@ n@@ r@@ ); m.@@ put@@ Int@@ ("@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ ", m@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ ); m.@@ put@@ Int@@ ("@@ L@@ te@@ Rs@@ r@@ p@@ ", m@@ L@@ te@@ Rs@@ r@@ p@@ ); m.@@ put@@ Int@@ ("@@ L@@ te@@ Rs@@ r@@ q@@ ", m@@ L@@ te@@ Rs@@ r@@ q@@ ); m.@@ put@@ Int@@ ("@@ L@@ te@@ R@@ ss@@ n@@ r@@ ", m@@ L@@ te@@ R@@ ss@@ n@@ r@@ ); m.@@ put@@ Int@@ ("@@ L@@ te@@ C@@ q@@ i@@ ", m@@ L@@ te@@ C@@ q@@ i@@ ); m.@@ put@@ Int@@ ("@@ T@@ d@@ S@@ c@@ dm@@ a@@ ", m@@ T@@ d@@ S@@ c@@ dm@@ a@@ Rs@@ c@@ p@@ ); m.@@ put@@ Boole@@ an@@ ("@@ is@@ G@@ sm@@ ", java.lang.@@ Boole@@ an@@ .@@ parse@@ Boole@@ an@@ (is@@ G@@ sm@@ )); }
@java.lang.Override public void load@@ Annot@@ ation@@ s(@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face load@@ ing@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er load@@ er@@ ) { if (!(@@ annotations.@@ isEmpty@@ ())) { com.android.jack.@@ ja@@ y@@ ce.@@ v@@ 00@@ 0@@ 2.@@ io.@@ Ex@@ port@@ S@@ es@@ sion ex@@ port@@ S@@ es@@ sion = new com.android.jack.@@ ja@@ y@@ ce.@@ v@@ 00@@ 0@@ 2.@@ io.@@ Ex@@ port@@ Session@@ (@@ load@@ er.get@@ Session@@ (), com.android.jack.@@ ja@@ y@@ ce.@@ Node@@ Level.@@ S@@ TR@@ U@@ C@@ T@@ U@@ RE@@ ); for (com.android.jack.@@ ja@@ y@@ ce.@@ v@@ 00@@ 0@@ 2.@@ no@@ d@@ es.@@ N@@ Annot@@ ation annot@@ ation : annot@@ ation@@ s) { com.android.jack.ir.ast.J@@ Annot@@ ation annot@@ ation@@ Li@@ ter@@ al = annotation.@@ ex@@ port@@ As@@ J@@ ast@@ (@@ ex@@ port@@ Session@@ ); load@@ ing.@@ add@@ Annot@@ ation@@ (@@ annot@@ ation@@ Li@@ ter@@ al@@ ); annot@@ ation@@ Li@@ ter@@ al.@@ update@@ Par@@ ent@@ s(@@ load@@ ing@@ ); } }
public static byte@@ [] read@@ D@@ ER@@ O@@ ct@@ et@@ String@@ (@@ byte@@ [] input@@ ) throw@@ s org.conscrypt.@@ ct.@@ Ser@@ i@@ aliz@@ ation@@ Exception { return org.conscrypt.@@ ct.@@ Ser@@ i@@ aliz@@ ation@@ Utils.@@ read@@ D@@ ER@@ O@@ ct@@ et@@ String@@ (@@ new java.io.@@ ByteArray@@ InputStream@@ (in@@ put@@ )); }
public java.util.ArrayList<@@ java.security.@@ Provid@@ er.@@ Service@@ > get@@ Ser@@ vices@@ (java.lang.String al@@ gorith@@ m@@ ) { int new@@ Cach@@ e@@ Ver@@ sion = org.apache.harmony.@@ securit@@ y@@ .@@ for@@ tr@@ es@@ s.@@ Ser@@ vices@@ .get@@ Cach@@ e@@ Version@@ (); org.apache.harmony.@@ securit@@ y@@ .@@ for@@ tr@@ es@@ s.@@ En@@ g@@ ine.@@ Service@@ Cach@@ e@@ E@@ n@@ try c@@ ach@@ e@@ E@@ n@@ try = this@@ .@@ service@@ Cach@@ e@@ ; final java.lang.String al@@ go@@ U@@ C = al@@ gorith@@ m.@@ to@@ Up@@ per@@ C@@ ase@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ ); if ((@@ (c@@ ach@@ e@@ E@@ n@@ try != null@@ ) && (c@@ ach@@ e@@ E@@ n@@ try@@ .@@ al@@ gorith@@ m.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ (@@ al@@ go@@ U@@ C@@ ))) && (@@ new@@ Cach@@ e@@ Ver@@ sion == (c@@ ach@@ e@@ E@@ n@@ try@@ .@@ c@@ ach@@ e@@ Version@@ ))) { return c@@ ach@@ e@@ E@@ n@@ try@@ .@@ ser@@ vices@@ ; } java.lang.String name = (@@ (@@ this@@ .@@ service@@ Name@@ ) + "@@ .@@ ") + al@@ go@@ U@@ C@@ ; java.util.ArrayList<@@ java.security.@@ Provid@@ er.@@ Service@@ > service@@ s = org.apache.harmony.@@ securit@@ y@@ .@@ for@@ tr@@ es@@ s.@@ Ser@@ vices@@ .get@@ Ser@@ vices@@ (@@ service@@ Name, al@@ go@@ U@@ C@@ ); this@@ .@@ service@@ Cach@@ e = new org.apache.harmony.@@ securit@@ y@@ .@@ for@@ tr@@ es@@ s.@@ En@@ g@@ ine.@@ Service@@ Cach@@ e@@ E@@ n@@ try@@ (@@ al@@ go@@ U@@ C@@ , new@@ Cach@@ e@@ Version@@ , ser@@ vices@@ ); return ser@@ vices@@ ; }
@org.junit.Test public void test@@ Create@@ P2p@@ Interface@@ No@@ In@@ it@@ Mode@@ () throw@@ s java.lang.Exception { final java.lang.String name = "@@ p@@ 2@@ p@@ 0@@ "; com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Device@@ ManagerTest.@@ Bas@@ el@@ ine@@ Ch@@ i@@ p ch@@ ip@@ Mo@@ c@@ k = new com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Device@@ ManagerTest.@@ Bas@@ el@@ ine@@ Ch@@ ip@@ (); ch@@ ip@@ Mock@@ .@@ in@@ itializ@@ e@@ (); m@@ In@@ Or@@ der = in@@ Or@@ der@@ (m@@ Service@@ Manager@@ Mock@@ , m@@ W@@ if@@ i@@ Mock@@ , ch@@ ip@@ Mock@@ .@@ ch@@ ip@@ , m@@ Manager@@ Status@@ Callback@@ Mock@@ ); exec@@ ute@@ And@@ Valid@@ ate@@ In@@ itializ@@ ation@@ Se@@ qu@@ en@@ ce@@ (); exec@@ ute@@ And@@ Valid@@ ate@@ Start@@ up@@ Se@@ qu@@ en@@ ce@@ (); exec@@ ute@@ And@@ Valid@@ ate@@ Start@@ up@@ Se@@ qu@@ en@@ ce@@ (); com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Device@@ Manager.@@ Interface@@ D@@ est@@ ro@@ y@@ ed@@ Listen@@ er id@@ l = mock@@ (@@ H@@ al@@ Device@@ Manager.@@ Interface@@ D@@ est@@ ro@@ y@@ ed@@ Listener@@ .@@ class@@ ); com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Device@@ Manager.@@ Interface@@ A@@ va@@ il@@ able@@ For@@ Request@@ Listen@@ er ia@@ f@@ r@@ l = mock@@ (@@ H@@ al@@ Device@@ Manager.@@ Interface@@ A@@ va@@ il@@ able@@ For@@ Request@@ Listener@@ .@@ class@@ ); android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ I@@ W@@ if@@ i@@ P2p@@ I@@ face if@@ ac@@ e = ((@@ android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ I@@ W@@ if@@ i@@ P2p@@ Iface@@ ) (@@ valid@@ ate@@ Interface@@ Se@@ qu@@ en@@ ce@@ (@@ ch@@ ip@@ Mock@@ , false@@ , (-1@@ 00@@ 0@@ ), Iface@@ Type.@@ P2@@ P@@ , name@@ , com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Device@@ ManagerTest.@@ Bas@@ el@@ ine@@ Ch@@ i@@ p.@@ STA@@ _C@@ H@@ IP@@ _M@@ OD@@ E_@@ ID@@ , null@@ , id@@ l@@ , ia@@ f@@ r@@ l@@ ))); m@@ D@@ u@@ t.@@ remove@@ Iface@@ (@@ if@@ a@@ ce@@ ); m@@ Test@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); m@@ In@@ Or@@ d@@ er.@@ ve@@ r@@ if@@ y@@ (@@ ch@@ ip@@ Mock@@ .@@ ch@@ ip@@ ).@@ remove@@ P2p@@ Iface@@ (@@ name@@ ); ve@@ r@@ if@@ y@@ (@@ id@@ l@@ ).@@ on@@ D@@ est@@ ro@@ y@@ ed@@ (); ve@@ r@@ if@@ y@@ No@@ M@@ ore@@ Inter@@ action@@ s@@ (m@@ Manager@@ Status@@ Callback@@ Mock@@ , id@@ l@@ , ia@@ f@@ r@@ l@@ ); }
public static native int EV@@ P@@ _S@@ ign@@ In@@ it@@ (@@ long ct@@ x@@ , long ev@@ p@@ Ref@@ );
@java.lang.Override public void get@@ Network@@ Reg@@ is@@ tr@@ ation@@ State@@ (@@ int do@@ main@@ , android.os.@@ Message on@@ Comp@@ lete@@ Message@@ ) { if (@@ on@@ Comp@@ lete@@ Message == null@@ ) return@@ ; android.util.Log.d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Network@@ Reg@@ is@@ tr@@ ation@@ Manager.@@ TAG, ("@@ get@@ Network@@ Reg@@ is@@ tr@@ ation@@ State do@@ ma@@ in " + do@@ main@@ )); if (!(@@ is@@ Service@@ Connec@@ ted@@ ())) { on@@ Comp@@ lete@@ Mess@@ age.@@ ob@@ j = new android.os.@@ As@@ ync@@ Result@@ (@@ on@@ Comp@@ lete@@ Mess@@ age.@@ ob@@ j@@ , null@@ , new java.lang.Illegal@@ State@@ Exception("@@ Ser@@ vice not connec@@ ted@@ .@@ ")); on@@ Comp@@ lete@@ Mess@@ age.@@ send@@ To@@ Target@@ (); return@@ ; } try { m@@ Service@@ B@@ ind@@ er.get@@ Network@@ Reg@@ is@@ tr@@ ation@@ State@@ (m@@ Phon@@ e.get@@ Phone@@ Id@@ (), do@@ main@@ , new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Network@@ Reg@@ is@@ tr@@ ation@@ Manager.@@ Network@@ Reg@@ State@@ Callback@@ (@@ on@@ Comp@@ lete@@ Message@@ )); } catch (android.os.RemoteException e) { android.util.Log.d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Network@@ Reg@@ is@@ tr@@ ation@@ Manager.@@ TAG, ("@@ get@@ Network@@ Reg@@ is@@ tr@@ ation@@ State RemoteException " + e@@ )); on@@ Comp@@ lete@@ Mess@@ age.@@ ob@@ j = new android.os.@@ As@@ ync@@ Result@@ (@@ on@@ Comp@@ lete@@ Mess@@ age.@@ ob@@ j@@ , null@@ , e); on@@ Comp@@ lete@@ Mess@@ age.@@ send@@ To@@ Target@@ (); } }
void on@@ Le@@ Scan@@ (android.bluetooth.Bluetooth@@ Device device@@ , int r@@ s@@ si@@ , byte@@ [] scan@@ Record@@ );
@java.lang.Override boolean isEmpty@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Un@@ i@@ on@@ VF@@ S@@ .@@ Un@@ i@@ on@@ V@@ Di@@ r d@@ ir@@ ) { return false@@ ; }
@com.android.annotations.NonNull public byte@@ [] get@@ Type@@ () { return m@@ Type@@ ; }
private void do@@ S@@ end@@ () { int statu@@ s = Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _S@@ U@@ C@@ CE@@ SS@@ ; while ((m@@ File@@ Info@@ ) == null@@ ) { try { java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (@@ 5@@ 0); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { statu@@ s = Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _C@@ AN@@ CE@@ L@@ ED@@ ; } } if (!(m@@ Connec@@ ted@@ )) { statu@@ s = Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _C@@ ON@@ NEC@@ TION_@@ ER@@ R@@ OR@@ ; } if (@@ statu@@ s == (@@ Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _S@@ U@@ C@@ CE@@ SS@@ )) { if ((m@@ File@@ Info@@ .m@@ File@@ Name@@ ) != null@@ ) { if ((m@@ File@@ Info@@ .m@@ Length@@ ) > 4@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 5@@ L@@ ) { statu@@ s = Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _@@ O@@ B@@ EX@@ _@@ DA@@ TA@@ _@@ ER@@ R@@ OR@@ ; android.util.Log.e@@ (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Ob@@ ex@@ Client@@ Session@@ .@@ TAG, "@@ File b@@ ig@@ g@@ er th@@ an 4@@ G@@ B can@@ not b@@ e trans@@ fer@@ re@@ d@@ "); } else { statu@@ s = send@@ File@@ (m@@ File@@ Info@@ ); } } else { statu@@ s = m@@ File@@ Info@@ .m@@ Status@@ ; } wait@@ ing@@ For@@ S@@ har@@ e = true@@ ; } else { com.android.bluetooth.@@ op@@ p.@@ Constants.@@ update@@ S@@ har@@ e@@ Status@@ (m@@ Context@@ 1, m@@ Info@@ .m@@ Id, stat@@ us@@ ); } if (@@ statu@@ s == (@@ Bluetooth@@ S@@ har@@ e.@@ STA@@ T@@ US@@ _S@@ U@@ C@@ CE@@ SS@@ )) { android.os.@@ Message ms@@ g = android.os.@@ Mess@@ age.@@ ob@@ tain@@ (m@@ Callback@@ ); ms@@ g.@@ wh@@ at = Bluetooth@@ Op@@ p@@ Ob@@ ex@@ Session@@ .@@ MS@@ G@@ _S@@ H@@ AR@@ E_@@ C@@ O@@ M@@ P@@ LE@@ TE@@ ; ms@@ g.@@ ob@@ j = m@@ Info@@ ; ms@@ g.@@ send@@ To@@ Target@@ (); } else { android.os.@@ Message ms@@ g = android.os.@@ Mess@@ age.@@ ob@@ tain@@ (m@@ Callback@@ ); ms@@ g.@@ wh@@ at = Bluetooth@@ Op@@ p@@ Ob@@ ex@@ Session@@ .@@ MS@@ G@@ _S@@ E@@ SS@@ I@@ ON@@ _@@ ER@@ R@@ OR@@ ; m@@ Info@@ .m@@ Statu@@ s = stat@@ us@@ ; ms@@ g.@@ ob@@ j = m@@ Info@@ ; ms@@ g.@@ send@@ To@@ Target@@ (); } }
private void update@@ Ims@@ Reg@@ is@@ tr@@ ation@@ State@@ () { boolean is@@ Ims@@ Reg@@ ister@@ ed = m@@ Telephony@@ Manager.@@ is@@ Ims@@ Reg@@ ister@@ ed@@ (m@@ S@@ ir@@ .get@@ Sub@@ s@@ cription@@ Id@@ ()); set@@ S@@ um@@ m@@ ary@@ Text@@ (com.android.@@ setting@@ s.@@ device@@ info@@ .@@ Sim@@ Statu@@ s.@@ KE@@ Y_@@ I@@ MS@@ _RE@@ G@@ IS@@ TR@@ A@@ TION@@ _STA@@ TE@@ , m@@ Res@@ .get@@ String@@ ((@@ is@@ Ims@@ Reg@@ ister@@ ed ? R.@@ str@@ ing.@@ im@@ s@@ _@@ reg@@ _@@ stat@@ us@@ _@@ register@@ ed : R.@@ str@@ ing.@@ im@@ s@@ _@@ reg@@ _@@ stat@@ us@@ _@@ not@@ _@@ register@@ ed@@ ))); }
@java.lang.Override public java.nio.Byte@@ Buff@@ er put@@ (@@ byte valu@@ e) { check@@ Is@@ Ac@@ ces@@ si@@ ble@@ (); if (is@@ Read@@ On@@ ly@@ ) { throw new java.nio.@@ Read@@ On@@ ly@@ Buffer@@ Exception@@ (); } if ((@@ posi@@ tion@@ ) == (@@ li@@ m@@ it@@ )) { throw new java.nio.@@ Buffer@@ O@@ ver@@ f@@ low@@ Exception@@ (); } this@@ .@@ b@@ lock@@ .@@ po@@ ke@@ Byte@@ (((@@ offset@@ ) + ((@@ posi@@ tion@@ )@@ ++@@ )), valu@@ e); return this@@ ; }
boolean start@@ Vo@@ i@@ ce@@ Re@@ co@@ gn@@ i@@ tion@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ hf@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); synchronized@@ (m@@ StateMach@@ in@@ es) { final com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ in@@ e state@@ Mach@@ in@@ e = m@@ StateMach@@ in@@ es@@ .get@@ (device@@ ); if (@@ state@@ Mach@@ in@@ e == null@@ ) { return false@@ ; } int connection@@ State = state@@ Mach@@ in@@ e.get@@ Connection@@ State@@ (); if ((@@ connection@@ State != (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ )) && (@@ connection@@ State != (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ T@@ ING@@ ))) { return false@@ ; } state@@ Mach@@ ine.@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ V@@ O@@ IC@@ E_@@ RE@@ C@@ O@@ G@@ N@@ I@@ TION@@ _STA@@ R@@ T, device@@ ); } return true@@ ; }
@java.lang.Override public java.util.Map@@ <java.lang.String, java.util.List<@@ java.lang.String@@ >@@ > get@@ Head@@ er@@ Field@@ s() { if ((@@ he@@ ad@@ er@@ Field@@ s) == null@@ ) { he@@ ad@@ er@@ Field@@ s = new java.util.@@ T@@ re@@ e@@ Map@@ <@@ >@@ (@@ libcore.@@ net.@@ ur@@ l.@@ File@@ URL@@ Connection@@ .@@ H@@ E@@ AD@@ ER@@ _C@@ O@@ M@@ P@@ AR@@ AT@@ OR@@ ); for (@@ int i = 0; i < (@@ he@@ ad@@ er@@ Ke@@ ys@@ And@@ Valu@@ es.@@ length); i +@@ = 2@@ ) { he@@ ad@@ er@@ Field@@ s.@@ put@@ (@@ he@@ ad@@ er@@ Ke@@ ys@@ And@@ Valu@@ es@@ [i]@@ , java.util.Collection@@ s.@@ sing@@ let@@ on@@ List@@ (@@ he@@ ad@@ er@@ Ke@@ ys@@ And@@ Valu@@ es@@ [@@ (@@ i + 1@@ )@@ ]@@ )); } } return java.util.Collection@@ s.@@ un@@ mo@@ d@@ if@@ i@@ able@@ Map@@ (@@ he@@ ad@@ er@@ Field@@ s); }
public void test_@@ Con@@ stru@@ ctor@@ L@@ java@@ _@@ n@@ io@@ _@@ char@@ set@@ _@@ Char@@ set@@ Null@@ () { java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ En@@ co@@ der ec@@ h = new org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ En@@ co@@ der@@ Test.@@ Mock@@ Char@@ set@@ En@@ co@@ der@@ For@@ H@@ ar@@ mon@@ y@@ 4@@ 9@@ 1@@ (@@ null@@ , 1, 1); assert@@ Null@@ (@@ ec@@ h@@ .@@ char@@ set@@ ()); }
private java.lang.String get@@ Test@@ Argument@@ s() { java.lang.String telephon@@ e@@ Num@@ b@@ er = String@@ s.@@ telephon@@ e@@ Num@@ b@@ er.@@ value@@ (); return "@@ -@@ e telephon@@ e@@ Num@@ b@@ er " + telephon@@ e@@ Number@@ ; }
public static void close@@ D@@ raw@@ er@@ (@@ int d@@ raw@@ er@@ Lay@@ out@@ Id, int g@@ ra@@ vi@@ ty@@ ) { if (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ con@@ tri@@ b.@@ D@@ raw@@ er@@ Action@@ s.@@ check@@ D@@ raw@@ er@@ (d@@ raw@@ er@@ Lay@@ out@@ Id, android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ con@@ tri@@ b.@@ D@@ raw@@ er@@ M@@ atch@@ er@@ s.@@ is@@ C@@ lo@@ sed@@ (@@ g@@ ra@@ vi@@ ty@@ )@@ )@@ )), "@@ D@@ raw@@ er is al@@ read@@ y c@@ lo@@ sed@@ "); android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ E@@ s@@ pres@@ so@@ .@@ on@@ View@@ (@@ w@@ ith@@ Id@@ (d@@ raw@@ er@@ Lay@@ out@@ Id@@ )).@@ p@@ er@@ for@@ m@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ con@@ tri@@ b.@@ D@@ raw@@ er@@ Action@@ s.@@ register@@ Listener@@ ()).@@ p@@ er@@ for@@ m@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ con@@ tri@@ b.@@ D@@ raw@@ er@@ Action@@ s.@@ action@@ C@@ lose@@ D@@ raw@@ er(@@ g@@ ra@@ vi@@ ty@@ )).@@ p@@ er@@ for@@ m@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ con@@ tri@@ b.@@ D@@ raw@@ er@@ Action@@ s.@@ un@@ register@@ Listener@@ ()); }
private void assert@@ B@@ ack@@ gro@@ und@@ Per@@ io@@ d@@ Al@@ ar@@ m@@ Not@@ P@@ end@@ ing@@ () { assert@@ False@@ ("@@ back@@ gro@@ un@@ d per@@ io@@ d al@@ ar@@ m is pend@@ ing@@ ", m@@ Al@@ ar@@ m@@ Manager.@@ is@@ P@@ end@@ ing@@ (@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner@@ Imp@@ l.@@ B@@ AC@@ K@@ G@@ RO@@ UN@@ D@@ _P@@ ER@@ IO@@ D_@@ AL@@ AR@@ M@@ _@@ TAG@@ )); }
public void test@@ VF@@ E@@ 7@@ () { try { new do@@ t.@@ junit.@@ op@@ cod@@ es.@@ i@@ get@@ _@@ char@@ .@@ d.@@ T_@@ i@@ get@@ _@@ char@@ _@@ 12@@ ().@@ run@@ (); fail@@ ("@@ expec@@ ted an Illegal@@ Access@@ Error excepti@@ on@@ "); } catch (java.lang.@@ Illegal@@ Access@@ Error t@@ ) { } }
boolean has@@ Callback@@ Al@@ read@@ y@@ H@@ app@@ en@@ ed@@ (@@ int call@@ back@@ ) { java.util.@@ I@@ terator@@ <@@ java.lang.Integ@@ er@@ > i@@ t = m@@ Callback@@ Q@@ ue@@ u@@ e.@@ i@@ terator@@ (); while (@@ it.@@ has@@ Next@@ ()) { if ((@@ it.@@ next@@ ()) == call@@ back@@ ) { return true@@ ; } } return false@@ ; }
private void check@@ Re@@ main@@ der@@ Float4Float4@@ Float4@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 9@@ 1@@ 4@@ 2@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 9@@ 6@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType
public com.android.builder.@@ Pro@@ duct@@ F@@ la@@ vo@@ r set@@ Key@@ st@@ ore@@ (com.android.@@ builder.@@ Key@@ st@@ or@@ e sign@@ ing@@ Key@@ st@@ or@@ e) { m@@ Key@@ st@@ or@@ e = sign@@ ing@@ Key@@ st@@ ore@@ ; return this@@ ; }
static android.telephony.@@ Sign@@ al@@ Str@@ eng@@ th con@@ ver@@ t@@ H@@ al@@ Sign@@ al@@ Str@@ ength@@ (android.@@ hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Sign@@ al@@ Str@@ eng@@ th sign@@ al@@ Str@@ ength@@ ) { int t@@ d@@ s@@ c@@ dm@@ a@@ Rs@@ r@@ p@@ _@@ 1_@@ 2 = 25@@ 5@@ ; if (((@@ sign@@ al@@ Str@@ ength@@ .@@ t@@ d@@ S@@ c@@ dm@@ a.@@ r@@ s@@ c@@ p@@ ) >@@ = 25@@ ) && ((@@ sign@@ al@@ Str@@ ength@@ .@@ t@@ d@@ S@@ c@@ dm@@ a.@@ r@@ s@@ c@@ p@@ ) <@@ = 12@@ 0@@ )) { t@@ d@@ s@@ c@@ dm@@ a@@ Rs@@ r@@ p@@ _@@ 1_@@ 2 = 12@@ 0 - (@@ sign@@ al@@ Str@@ ength@@ .@@ t@@ d@@ S@@ c@@ dm@@ a.@@ r@@ s@@ c@@ p@@ ); } return new android.telephony.@@ Sign@@ al@@ Str@@ ength@@ (@@ sign@@ al@@ Str@@ ength@@ .@@ g@@ w@@ .@@ sign@@ al@@ Str@@ ength@@ , sign@@ al@@ Str@@ ength@@ .@@ g@@ w@@ .@@ b@@ it@@ Error@@ R@@ ate@@ , sign@@ al@@ Str@@ ength@@ .@@ c@@ dm@@ a.@@ d@@ b@@ m@@ , sign@@ al@@ Str@@ ength@@ .@@ c@@ dm@@ a.@@ ec@@ io@@ , sign@@ al@@ Str@@ ength@@ .@@ e@@ v@@ do@@ .@@ d@@ b@@ m@@ , sign@@ al@@ Str@@ ength@@ .@@ e@@ v@@ do@@ .@@ ec@@ io@@ , sign@@ al@@ Str@@ ength@@ .@@ e@@ v@@ do@@ .@@ sign@@ al@@ No@@ is@@ e@@ R@@ ati@@ o@@ , sign@@ al@@ Str@@ ength@@ .@@ l@@ te@@ .@@ sign@@ al@@ Str@@ ength@@ , sign@@ al@@ Str@@ ength@@ .@@ l@@ te@@ .@@ r@@ s@@ r@@ p@@ , sign@@ al@@ Str@@ ength@@ .@@ l@@ te@@ .@@ r@@ s@@ r@@ q@@ , sign@@ al@@ Str@@ ength@@ .@@ l@@ te@@ .@@ r@@ ss@@ n@@ r@@ , sign@@ al@@ Str@@ ength@@ .@@ l@@ te@@ .@@ c@@ q@@ i@@ , t@@ d@@ s@@ c@@ dm@@ a@@ Rs@@ r@@ p@@ _@@ 1_@@ 2@@ ); }
@java.lang.Override public java.util.List<@@ com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ > get@@ Level@@ s() { java.util.List<@@ com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ > set@@ u@@ p = new java.util.ArrayList<@@ com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ >(); set@@ up@@ .add@@ (@@ new com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ ("@@ ", java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E@@ )); set@@ up@@ .add@@ (@@ new com.android.sched.util.@@ cod@@ ec@@ .@@ Pa@@ ir@@ <java.lang.String, java.util.@@ logg@@ ing.@@ Level@@ >@@ > set@@ u@@ p = new java.util.ArrayList<@@ com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ >(); set@@ up@@ .add@@ (@@ new com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ >(); set@@ up@@ .add@@ (@@ new com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ (s@@ ource@@ Package@@ Level@@ ); set@@ up@@ .add@@ (@@ new com.android.jack.test.@@ toolchain.@@ Package@@ Level@@ ("@@ com.android.s@@ ch@@ ed@@ ", java.util.@@ logg@@ ing.@@ Level.@@ W@@ AR@@ N@@ ING@@ )); return set@@ up@@ ; }
public java.lang.String toString@@ () { return ((((@@ ((@@ (("@@ A@@ ap@@ t@@ Option@@ s@@ Imp@@ l@@ {@@ " + ", m@@ I@@ gn@@ ore@@ As@@ set@@ s@@ =@@ ") + (m@@ I@@ gn@@ ore@@ As@@ set@@ s@@ )) + ", m@@ No@@ Comp@@ res@@ s@@ ") + (m@@ No@@ Comp@@ res@@ s@@ )) + ", m@@ Fail@@ On@@ M@@ is@@ sing@@ Config@@ E@@ n@@ try@@ ") + (m@@ Fail@@ On@@ M@@ is@@ sing@@ Config@@ E@@ n@@ try@@ )) + ", m@@ U@@ se@@ Q@@ ue@@ u@@ ed@@ A@@ ap@@ t@@ P@@ n@@ g@@ C@@ run@@ ch@@ er@@ ") + (m@@ U@@ se@@ Q@@ ue@@ u@@ ed@@ A@@ ap@@ t@@ P@@ n@@ g@@ C@@ run@@ ch@@ er@@ )) + "@@ }@@ "; }
public void test@@ Connec@@ t@@ Vi@@ a@@ H@@ ttp@@ Prox@@ y@@ To@@ H@@ tt@@ ps@@ U@@ sing@@ B@@ ad@@ Prox@@ y@@ And@@ H@@ ttp@@ Response@@ Cach@@ e@@ () throw@@ s java.lang.Exception { Test@@ SSL@@ Context test@@ SSL@@ Context = Test@@ SSL@@ Context.@@ create@@ (); in@@ it@@ Response@@ Cach@@ e@@ (); server.@@ u@@ se@@ H@@ ttp@@ s(@@ test@@ SSL@@ Context.@@ server@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ (), true@@ ); com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Res@@ pon@@ se b@@ ad@@ Prox@@ y@@ Res@@ pon@@ se = new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ Socket@@ Polic@@ y@@ (@@ Socket@@ Polic@@ y.@@ U@@ P@@ G@@ R@@ AD@@ E_@@ TO@@ _@@ SSL@@ _@@ A@@ T_@@ EN@@ D@@ ).@@ clear@@ Head@@ er@@ s@@ ().@@ set@@ B@@ o@@ d@@ y@@ ("@@ bo@@ gu@@ s pro@@ x@@ y connec@@ t res@@ pon@@ se cont@@ ent@@ "); server.@@ en@@ qu@@ e@@ ue@@ (b@@ ad@@ Prox@@ y@@ Response@@ ); server.@@ en@@ qu@@ e@@ ue@@ (@@ new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ B@@ o@@ d@@ y@@ ("@@ res@@ ponse@@ ")); server.@@ play@@ (); java.net.@@ UR@@ L ur@@ l = new java.net.@@ URL@@ ("@@ h@@ tt@@ ps@@ :@@ /@@ /@@ android.@@ com@@ /@@ f@@ oo@@ "); libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Prox@@ y@@ Con@@ fig pro@@ x@@ y@@ Con@@ fig = libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Prox@@ y@@ Config.@@ PRO@@ X@@ Y@@ _S@@ Y@@ S@@ TE@@ M@@ _P@@ RO@@ P@@ ER@@ TY@@ ; javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connec@@ tion connec@@ tion = ((@@ javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connection@@ ) (pro@@ x@@ y@@ Config.@@ connect@@ (@@ server@@ , ur@@ l@@ ))); connection@@ .set@@ SSL@@ Socket@@ Fa@@ ctory@@ (@@ test@@ SSL@@ Context.@@ c@@ lient@@ Contex@@ t.get@@ Socket@@ Fa@@ ctory@@ ()); connection@@ .set@@ Host@@ name@@ V@@ er@@ if@@ ier@@ (@@ new libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Record@@ ing@@ Host@@ name@@ V@@ er@@ if@@ ier@@ ()); assert@@ Content@@ ("@@ res@@ ponse@@ ", connection@@ ); com.google.@@ mock@@ w@@ eb@@ server.@@ Record@@ ed@@ Requ@@ est connec@@ t = server.@@ t@@ ake@@ Request@@ (); assert@@ Equal@@ s("@@ CONNEC@@ T android.@@ com@@ :@@ 4@@ 4@@ 4@@ 3 H@@ T@@ P@@ /@@ 1.@@ 1@@ ", connec@@ t.get@@ Request@@ Line@@ ()); assert@@ Cont@@ ain@@ s(@@ connec@@ t.get@@ Head@@ er@@ s@@ (), "@@ Host@@ : android.@@ com@@ "); }
private void sho@@ w@@ Error@@ Message@@ (java.lang.String message@@ ) { if ((m@@ Error@@ Di@@ alo@@ g@@ ) != null@@ ) { m@@ Error@@ Di@@ alo@@ g.@@ set@@ Message@@ (m@@ ess@@ age@@ ); m@@ Error@@ Di@@ alo@@ g.@@ sho@@ w@@ (); } else { m@@ Error@@ Di@@ alo@@ g = new android.app.@@ Al@@ er@@ t@@ Di@@ alo@@ g.@@ Builder@@ (@@ this@@ ).set@@ T@@ it@@ le@@ (@@ R.@@ str@@ ing.@@ error@@ _@@ ti@@ t@@ le@@ ).set@@ Message@@ (m@@ ess@@ age@@ ).set@@ Posi@@ tive@@ B@@ utton@@ (android.@@ R.@@ str@@ ing.@@ ok@@ , null@@ ).@@ sho@@ w@@ (); } }
java.util.List<@@ android.@@ bluetooth.Bluetooth@@ Device@@ > get@@ Connec@@ ted@@ De@@ vices@@ () { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); if ((m@@ Pb@@ ap@@ StateMach@@ ine@@ Map@@ ) == null@@ ) { return new java.util.ArrayList<@@ >(); } return new java.util.Array@@ List@@ (m@@ Pb@@ ap@@ StateMach@@ ine@@ Map@@ .@@ key@@ Set@@ ()); }
@java.lang.Override public int has@@ h@@ Code@@ () { int pri@@ m@@ e@@ N@@ u@@ m = 3@@ 1; return ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((@@ ((m@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ ) * pri@@ m@@ e@@ Num@@ ) + ((m@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ C@@ dm@@ a@@ D@@ b@@ m@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ C@@ dm@@ a@@ E@@ c@@ io@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ E@@ v@@ do@@ D@@ b@@ m@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ E@@ v@@ do@@ E@@ c@@ io@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ E@@ v@@ do@@ S@@ n@@ r@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ Rs@@ r@@ p@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ Rs@@ r@@ q@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ R@@ ss@@ n@@ r@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ C@@ q@@ i@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ L@@ te@@ Rs@@ r@@ p@@ B@@ oo@@ st@@ ) * pri@@ m@@ e@@ Num@@ )) + ((m@@ T@@ d@@ S@@ c@@ dm@@ a@@ Rs@@ c@@ p@@ ) * pri@@ m@@ e@@ Num@@ )) + (m@@ Is@@ G@@ s@@ m ? 1 : 0@@ )) + (m@@ U@@ se@@ On@@ ly@@ Rs@@ r@@ p@@ For@@ L@@ te@@ Leve@@ l ? 1 : 0); }
@java.lang.Override public void on@@ Create@@ (com.android.ide.@@ common.@@ api.@@ IN@@ o@@ de no@@ de@@ , com.android.ide.common.@@ api.@@ IN@@ o@@ de parent@@ , com.android.ide.common.@@ api.@@ In@@ ser@@ t@@ Type in@@ ser@@ t@@ Typ@@ e) { super@@ .@@ on@@ Create@@ (@@ no@@ de@@ , parent@@ , in@@ ser@@ t@@ Type@@ ); if (in@@ ser@@ t@@ Type == (com.android.ide.@@ common.@@ api.@@ In@@ ser@@ t@@ Type.@@ C@@ RE@@ A@@ TE@@ )) { no@@ d@@ e.@@ append@@ Ch@@ ild@@ (com.android.ide.@@ common.@@ layout.@@ F@@ Q@@ C@@ N@@ _@@ LA@@ Y@@ O@@ U@@ T_@@ F@@ Q@@ C@@ N@@ ); } }
public void test@@ M@@ er@@ ge@@ By@@ Count@@ () throw@@ s java.lang.Exception { com.android.ide.common.@@ res@@ 2.@@ Resource@@ Merg@@ er merg@@ er = com.android.ide.common.@@ res@@ 2.@@ Resource@@ Merg@@ er@@ Test.@@ get@@ Resource@@ Merg@@ er@@ (); assert@@ Equal@@ s(@@ 32, merger.@@ size@@ ()); }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ L@@ arg@@ e@@ Test public void test@@ Ex@@ ist@@ ing@@ E@@ User@@ I@@ () { if (android.os.@@ En@@ vi@@ ron@@ m@@ ent.@@ is@@ Ex@@ ter@@ nal@@ Stor@@ age@@ E@@ m@@ ul@@ ated@@ ()) { return@@ ; } int user@@ Set@@ t@@ ing = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ content.@@ Package@@ Helper.@@ AP@@ P@@ _@@ IN@@ STA@@ L@@ L_@@ IN@@ TER@@ N@@ AL@@ ; int i@@ Flag@@ s = android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ EX@@ TER@@ N@@ AL@@ ; set@@ Ex@@ ist@@ ing@@ X@@ User@@ X@@ (@@ user@@ Setting@@ , i@@ Flag@@ s, Package@@ Info.@@ IN@@ STA@@ L@@ L_@@ LO@@ C@@ A@@ TION@@ _P@@ RE@@ F@@ ER_@@ EX@@ TER@@ N@@ AL@@ ); }
public static com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ In@@ dex get@@ Instance@@ (android.content.@@ Context contex@@ t@@ ) { com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ In@@ dex.@@ s@@ Instance@@ ) { com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ In@@ dex.@@ s@@ In@@ stan@@ ce = new com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ Index@@ (@@ contex@@ t, com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ In@@ dex.@@ B@@ A@@ S@@ E_@@ A@@ UT@@ H@@ OR@@ ITY@@ ); } return com.android.@@ setting@@ s.@@ se@@ arch@@ .@@ In@@ dex.@@ s@@ Instance@@ ; }
private static int de@@ e@@ p@@ Hash@@ Code@@ Element@@ (@@ java.lang.Object e@@ lement@@ ) { java.lang.@@ Class@@ <@@ ?@@ > c@@ l@@ ; if (e@@ lem@@ ent == null@@ ) { return 0; } c@@ l = e@@ lem@@ ent.get@@ Class@@ ().get@@ Comp@@ on@@ ent@@ Type@@ (); if (c@@ l == null@@ ) { return e@@ lem@@ ent.@@ has@@ h@@ Code@@ (); } if (!@@ (c@@ l.@@ is@@ Pri@@ m@@ i@@ tive@@ ())) { return java.util.Arrays.@@ de@@ e@@ p@@ Hash@@ Code@@ (((@@ java.lang.Ob@@ ject@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ int@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ int@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ char@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ char@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ boolean@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ boolean@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ byte@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ byte@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ long@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ long@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ float@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ float@@ []@@ ) (e@@ lement@@ ))); } else if (c@@ l == (@@ do@@ ub@@ le@@ .@@ class@@ )) { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ do@@ ub@@ le@@ []@@ ) (e@@ lement@@ ))); } else { return java.util.Arrays.@@ has@@ h@@ Code@@ ((@@ (@@ short@@ []@@ ) (e@@ lement@@ ))); } }
public void test@@ W@@ ild@@ c@@ ard@@ M@@ atch@@ ing@@ Empty@@ Sub@@ string@@ () { assert@@ True@@ (@@ ve@@ r@@ if@@ y@@ With@@ Do@@ main@@ Name@@ P@@ attern@@ ("@@ im@@ ap.@@ goog@@ le.@@ com@@ ", "@@ im@@ ap@@ *@@ .@@ goog@@ le.@@ com@@ ")); }
@javax.annotation.@@ Check@@ For@@ Null com.android.jack.ir.ast.J@@ Method@@ B@@ o@@ d@@ y load@@ B@@ o@@ d@@ y@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d load@@ ing@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Method@@ Load@@ er ja@@ y@@ ce@@ Method@@ Load@@ er@@ ) throw@@ s com.android.jack.ir.ast.J@@ Type@@ Loo@@ k@@ up@@ Exception, com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Loo@@ k@@ up@@ Exception;
public native void ms@@ ync@@ (@@ long addres@@ s, long byte@@ Count@@ , int flag@@ s) throw@@ s android.system.@@ Errno@@ Exception;
public void re@@ cor@@ d@@ H@@ ist@@ or@@ y@@ (android.net.@@ Network@@ Stat@@ s@@ H@@ ist@@ or@@ y input@@ , long start@@ , long end@@ ) { final android.net.Network@@ Stat@@ s.@@ E@@ n@@ try e@@ n@@ try = new android.net.Network@@ Stat@@ s.@@ E@@ n@@ try@@ (android.net.@@ Network@@ Stat@@ s.@@ I@@ F@@ AC@@ E_@@ AL@@ L, android.net.Network@@ Stat@@ s.@@ U@@ ID@@ _@@ AL@@ L, android.net.Network@@ Stat@@ s.@@ SE@@ T_@@ DE@@ FA@@ UL@@ T, android.net.Network@@ Stat@@ s.@@ TAG@@ _N@@ ON@@ E, 0@@ L); for (@@ int i = 0; i < (in@@ pu@@ t.@@ bu@@ ck@@ et@@ Count@@ ); i++) { final long bu@@ ck@@ et@@ St@@ ar@@ t = in@@ pu@@ t.@@ bu@@ ck@@ et@@ Start@@ [i@@ ]; final long bu@@ ck@@ et@@ En@@ d = bu@@ ck@@ et@@ St@@ ar@@ t + (in@@ pu@@ t.@@ bu@@ ck@@ et@@ D@@ ur@@ ation@@ ); if ((@@ bu@@ ck@@ et@@ St@@ ar@@ t < start@@ ) || (@@ bu@@ ck@@ et@@ En@@ d > end@@ )) continue@@ ; e@@ n@@ try@@ .@@ r@@ x@@ Byte@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ r@@ x@@ Bytes@@ , i@@ , 0@@ L); e@@ n@@ try@@ .@@ r@@ x@@ Packet@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ r@@ x@@ Packet@@ s, i@@ , 0@@ L); e@@ n@@ try@@ .@@ t@@ x@@ Byte@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ r@@ x@@ Packet@@ s, i@@ , 0@@ L); e@@ n@@ try@@ .@@ t@@ x@@ Byte@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ t@@ x@@ Bytes@@ , i@@ , 0@@ L); e@@ n@@ try@@ .@@ t@@ x@@ Packet@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ t@@ x@@ Packet@@ s, i@@ , 0@@ L); e@@ n@@ try@@ .@@ o@@ per@@ ation@@ s = android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y@@ .get@@ Long@@ (in@@ pu@@ t.@@ o@@ per@@ ation@@ s, i@@ , 0@@ L); re@@ cor@@ d@@ Data@@ (@@ bu@@ ck@@ et@@ Start@@ , bu@@ ck@@ et@@ En@@ d, e@@ n@@ try@@ ); } }
public static void close@@ G@@ u@@ ard@@ C@@ lose@@ (@@ java.lang.Object gu@@ ard@@ Ob@@ j@@ ) { if ((@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ .@@ S@@ D@@ K_@@ IN@@ T@@ ) < (@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ _C@@ O@@ DE@@ S@@ .@@ IC@@ E_@@ C@@ RE@@ AM@@ _S@@ AN@@ D@@ W@@ IC@@ H@@ )) { return@@ ; } org.conscrypt.@@ C@@ lose@@ G@@ u@@ ar@@ d gu@@ ar@@ d = ((@@ org.conscrypt.@@ C@@ lose@@ G@@ u@@ ard@@ ) (@@ gu@@ ard@@ Ob@@ j@@ )); gu@@ ard@@ .@@ close(); }
@java.lang.Override protected void dum@@ p@@ (java.io.FileDescriptor f@@ d, java.io.@@ P@@ r@@ int@@ W@@ rite@@ r w@@ ri@@ ter@@ , java.lang.String[] arg@@ s) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ D@@ U@@ M@@ P@@ , com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.@@ TAG@@ ); if ((@@ args.@@ length) == 0) { w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ S@@ k@@ ip@@ p@@ ing dum@@ p in AP@@ P S@@ ER@@ VIC@@ E@@ S@@ , se@@ e bluetooth@@ _@@ man@@ age@@ r sec@@ tion@@ .@@ "); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ U@@ se --@@ p@@ r@@ int arg@@ um@@ ent for dum@@ ps@@ y@@ s di@@ re@@ c@@ t f@@ ro@@ m Adapter@@ Service.@@ "); return@@ ; } ver@@ bo@@ se@@ Log@@ (("@@ dum@@ ps@@ y@@ s arg@@ ument@@ s, ch@@ ec@@ k for pro@@ to@@ bu@@ f output@@ : " + (android.@@ text.@@ Text@@ Utils.@@ j@@ o@@ in@@ (@@ " ", arg@@ s@@ )))); if (@@ arg@@ s@@ [0@@ ]@@ .@@ equal@@ s("@@ --@@ pro@@ to@@ -@@ b@@ in@@ ")) { dum@@ p@@ Met@@ ri@@ c@@ s(@@ f@@ d@@ ); return@@ ; } w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ Adapter@@ Properties@@ "); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ (((@@ " " " " + "@@ Ma@@ x@@ Connec@@ ted@@ Audio@@ De@@ vices@@ : ") + (get@@ Ma@@ x@@ Connec@@ ted@@ Audio@@ De@@ vices@@ ()))); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ B@@ on@@ de@@ d de@@ vices@@ :@@ "); for (android.bluetooth.Bluetooth@@ Device de@@ vice : get@@ B@@ ond@@ ed@@ De@@ vices@@ ()) { w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ((((@@ ((@@ " " + (device@@ .get@@ Address@@ ())) + " [@@ ") + (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.@@ DE@@ VIC@@ E_@@ TYPE_@@ N@@ AME@@ S@@ [@@ device@@ .get@@ Type@@ ()@@ ]@@ )) + "@@ ] ") + (device@@ .getName@@ ()))); } java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); for (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Profile@@ Ser@@ vice pro@@ fi@@ le : m@@ Reg@@ ister@@ ed@@ Pro@@ fil@@ es) { pro@@ file.@@ dum@@ p@@ (s@@ b@@ ); } w@@ ri@@ ter.@@ write@@ (s@@ b.@@ toString@@ ()); w@@ ri@@ ter.@@ f@@ lu@@ sh@@ (); dum@@ p@@ Native@@ (f@@ d, arg@@ s); }
public void test@@ S@@ in@@ co@@ s() { check@@ S@@ in@@ co@@ s@@ FloatFloat@@ Float@@ (); check@@ S@@ in@@ co@@ s@@ Float2Float2@@ Float2@@ (); check@@ S@@ in@@ co@@ s@@ Float3Float3@@ Float3@@ (); check@@ S@@ in@@ co@@ s@@ Float4Float4@@ Float4@@ (); }
public static java.lang.String get@@ Active@@ Tag@@ s(@@ android.content.@@ Context contex@@ t, android.content.@@ S@@ har@@ ed@@ Pre@@ ference@@ s pre@@ f@@ s, boolean on@@ ly@@ A@@ va@@ il@@ able@@ ) { java.util.@@ Set@@ <java.lang.String@@ > t@@ ag@@ s = pre@@ f@@ s.get@@ String@@ Set@@ (@@ contex@@ t.get@@ String(@@ R.@@ str@@ ing.@@ pre@@ f@@ _@@ key@@ _@@ t@@ ag@@ s@@ ), com.android.@@ tra@@ ce@@ ur@@ .@@ Recei@@ ver.@@ get@@ Default@@ Tag@@ List@@ ()); java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ ((@@ 1@@ 0 * (t@@ ag@@ s.@@ size@@ ()))); java.util.@@ T@@ re@@ e@@ Map@@ <java.lang.String, java.lang.String> ava@@ il@@ able = (@@ on@@ ly@@ A@@ va@@ il@@ able@@ ) ? com.android.@@ tra@@ ce@@ ur@@ .@@ A@@ tra@@ ce@@ Utils.@@ at@@ ra@@ ce@@ List@@ C@@ ate@@ gor@@ ies@@ () : null@@ ; for (java.lang.String s : t@@ ag@@ s) { if (@@ on@@ ly@@ A@@ va@@ il@@ able && (!(@@ ava@@ il@@ ab@@ le.@@ contain@@ s@@ Key@@ (s@@ )@@ ))) continue@@ ; if ((@@ sb.@@ length@@ ()) > 0) { sb.@@ append(@@ ' '@@ ); } sb.@@ append@@ (s@@ ); } java.lang.String s = sb.@@ toString@@ (); com.android.@@ tra@@ ce@@ ur@@ .@@ Log.@@ v@@ (com.android.@@ tra@@ ce@@ ur@@ .@@ Recei@@ ver.@@ TAG, ((@@ (("@@ get@@ Active@@ Tag@@ s(@@ on@@ ly@@ A@@ va@@ il@@ able@@ =@@ " + on@@ ly@@ A@@ va@@ il@@ able@@ ) + ") = \"@@ ") + s) + "@@ \"@@ ")); return s; }
@com.android.annotations.NonNull public java.lang.String get@@ Dir@@ Name@@ () { if (!(m@@ ulti@@ Output@@ )) { return vari@@ ant@@ Data@@ .get@@ Variant@@ Configuration@@ ().get@@ Dir@@ Name@@ (); } return vari@@ ant@@ Data@@ .get@@ Variant@@ Configuration@@ ().@@ com@@ pu@@ te@@ Dir@@ Name@@ With@@ S@@ pli@@ t@@ s(@@ get@@ Filter@@ (@@ Filter@@ Type.@@ D@@ EN@@ SI@@ TY@@ ), get@@ Filter@@ (@@ Filter@@ Type.@@ A@@ B@@ I@@ )); }
private void send@@ S@@ MS@@ To@@ S@@ el@@ f@@ () { android.app.@@ P@@ end@@ ing@@ Int@@ ent s@@ ent@@ Int@@ ent = android.app.@@ P@@ end@@ ing@@ Int@@ ent.get@@ Broadcast@@ (get@@ Context@@ (), 0, new android.content.@@ Intent@@ (android.@@ per@@ mission@@ 2.@@ cts.@@ No@@ Recei@@ ve@@ Sms@@ Permission@@ Test.@@ ME@@ SS@@ A@@ G@@ E_@@ S@@ EN@@ T_@@ AC@@ TION@@ ), P@@ end@@ ing@@ Int@@ ent.@@ F@@ LA@@ G@@ _@@ ON@@ E_@@ S@@ H@@ O@@ T@@ ); android.app.@@ P@@ end@@ ing@@ Int@@ ent de@@ li@@ ver@@ y@@ Int@@ ent = android.app.@@ P@@ end@@ ing@@ Int@@ ent.get@@ Broadcast@@ (get@@ Context@@ (), 0, new android.content.@@ Intent@@ (android.@@ per@@ mission@@ 2.@@ cts.@@ No@@ Recei@@ ve@@ Sms@@ Permission@@ Test.@@ ME@@ SS@@ A@@ G@@ E_@@ STA@@ T@@ US@@ _RE@@ CE@@ I@@ V@@ ED@@ _@@ AC@@ TION@@ ), P@@ end@@ ing@@ Int@@ ent.@@ F@@ LA@@ G@@ _@@ ON@@ E_@@ S@@ H@@ O@@ T@@ ); android.telephony.@@ Telephony@@ Manager telephon@@ y = ((@@ android.telephony.@@ Telephony@@ Manager@@ ) (get@@ Context@@ ().get@@ System@@ Service@@ (@@ Context.@@ TE@@ LE@@ P@@ H@@ ON@@ Y@@ _S@@ ER@@ VIC@@ E@@ ))); java.lang.String current@@ Num@@ b@@ er = telephon@@ y@@ .get@@ Line@@ 1@@ Number@@ (); if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (m@@ D@@ est@@ Add@@ r@@ )) { fail@@ ("@@ [@@ R@@ ER@@ UN@@ ] SI@@ M c@@ ar@@ d do@@ es not provid@@ e phon@@ e num@@ ber@@ . U@@ se a su@@ it@@ able SI@@ M Card@@ .@@ "); } android.util.Log.@@ i@@ (android.@@ per@@ mission@@ 2.@@ cts.@@ No@@ Recei@@ ve@@ Sms@@ Permission@@ Test.@@ LOG@@ _@@ TAG, java.lang.String@@ .@@ for@@ mat@@ ("@@ S@@ end@@ ing S@@ M@@ S to se@@ l@@ f@@ : %@@ s", current@@ Number@@ )); send@@ S@@ m@@ s(@@ current@@ Number@@ , "@@ t@@ est message@@ ", s@@ ent@@ Intent@@ , de@@ li@@ ver@@ y@@ Intent@@ ); }
public void sup@@ pl@@ y@@ Icc@@ P@@ u@@ k@@ 2@@ For@@ App@@ Response@@ (android.@@ hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Rad@@ io@@ Response@@ Info res@@ ponse@@ Info@@ , int re@@ main@@ ing@@ At@@ tem@@ p@@ t@@ s) { res@@ ponse@@ Int@@ s(@@ res@@ ponse@@ Info@@ , re@@ main@@ ing@@ At@@ tem@@ p@@ t@@ s); }
private static org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age get@@ Result@@ Image@@ (@@ int result@@ ) { switch (@@ result@@ ) { case com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l.@@ CON@@ TR@@ A@@ ST_@@ P@@ A@@ S@@ S : return com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ G@@ re@@ en@@ Image@@ ; case com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l.@@ Con@@ tr@@ ast@@ Res@@ ult.@@ FA@@ I@@ L : return com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ R@@ ed@@ Image@@ ; default : return com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ Y@@ el@@ low@@ Image@@ ; } }
private void register@@ For@@ N@@ s@@ d@@ Setting@@ () { android.@@ dat@@ ab@@ ase.@@ Content@@ Ob@@ ser@@ ve@@ r cont@@ ent@@ Ob@@ ser@@ ve@@ r = new android.@@ dat@@ ab@@ ase.@@ Content@@ Ob@@ server@@ (@@ this@@ .get@@ Handler@@ ()) { @java.lang.Override public void on@@ Change@@ (@@ boolean se@@ l@@ f@@ Chan@@ g@@ e) { not@@ if@@ y@@ Enabled@@ (is@@ N@@ s@@ d@@ Enabled@@ ()); } }; android.net.@@ Ur@@ i ur@@ i = Setting@@ s.@@ G@@ lo@@ b@@ al@@ .get@@ U@@ ri@@ For@@ (@@ Setting@@ s.@@ G@@ lo@@ b@@ al.@@ N@@ S@@ D_@@ ON@@ ); m@@ N@@ s@@ d@@ Setting@@ s.@@ register@@ Content@@ Ob@@ server@@ (@@ ur@@ i@@ , cont@@ ent@@ Ob@@ server@@ ); }
private int run@@ Mon@@ o@@ Dex@@ () throw@@ s java.io.IOException { java.io.File in@@ crement@@ al@@ Out@@ File = null@@ ; if (@@ args.@@ in@@ crement@@ al@@ ) { if ((@@ args.@@ out@@ Name@@ ) == null@@ ) { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ("@@ error@@ : n@@ o in@@ crement@@ al out@@ put name s@@ pe@@ c@@ if@@ i@@ ed@@ "); return -1@@ ; } in@@ crement@@ al@@ Out@@ File = new java.io.File@@ (@@ args.@@ out@@ Name); if (in@@ crement@@ al@@ Out@@ File@@ .@@ exist@@ s@@ ()) { min@@ im@@ um@@ File@@ A@@ g@@ e = in@@ crement@@ al@@ Out@@ File@@ .@@ las@@ t@@ Mo@@ d@@ if@@ i@@ ed@@ (); } } if (!(@@ process@@ All@@ Fil@@ es@@ ())) { return 1; } if ((@@ args.@@ in@@ crement@@ al@@ ) && (!(@@ any@@ Fil@@ es@@ Process@@ ed@@ ))) { return 0; } byte@@ [] out@@ Ar@@ ra@@ y = null@@ ; if ((@@ !@@ (@@ output@@ De@@ x.@@ isEmpty@@ ())) || ((@@ args.@@ h@@ um@@ an@@ Out@@ Name@@ ) != null@@ )) { out@@ Ar@@ ra@@ y = write@@ Dex@@ (@@ output@@ Dex@@ ); if (@@ out@@ Ar@@ ra@@ y == null@@ ) { return 2@@ ; } } if (@@ args.@@ in@@ crement@@ al@@ ) { out@@ Ar@@ ra@@ y = com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ m@@ er@@ ge@@ In@@ crement@@ al@@ (@@ out@@ Array@@ , in@@ crement@@ al@@ Out@@ File@@ ); } out@@ Ar@@ ra@@ y = m@@ er@@ ge@@ Library@@ Dex@@ Buffer@@ s(@@ out@@ Array@@ ); if (@@ args.@@ ja@@ r@@ Output@@ ) { output@@ De@@ x = null@@ ; if (@@ out@@ Ar@@ ra@@ y != null@@ ) { output@@ Res@@ our@@ ces.@@ put@@ (@@ Dex@@ Format@@ .@@ DE@@ X_@@ IN@@ _@@ J@@ AR@@ _N@@ AME@@ , out@@ Array@@ ); } if (!(@@ create@@ J@@ ar@@ (@@ args.@@ out@@ Name@@ ))) { return 3@@ ; } } else if ((@@ out@@ Ar@@ ra@@ y != null@@ ) && ((@@ args.@@ out@@ Name@@ ) != null@@ )) { java.io.@@ Output@@ Stream out = com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ open@@ Output@@ (@@ args.@@ out@@ Name); out.@@ write@@ (@@ out@@ Array@@ ); com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ close@@ Output@@ (@@ out); } return 0; }
@org.junit.Test public void test@@ En@@ ter@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ Active@@ W@@ h@@ en@@ Al@@ read@@ y@@ In@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ () throw@@ s java.lang.Exception { when(m@@ W@@ if@@ i@@ In@@ ject@@ or@@ .m@@ ake@@ W@@ if@@ i@@ con@@ d@@ ()).@@ thenReturn@@ (m@@ W@@ if@@ i@@ con@@ d@@ ); when(m@@ W@@ if@@ i@@ con@@ d.@@ create@@ Ap@@ Interface@@ ()).@@ thenReturn@@ (@@ null@@ ); m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.@@ en@@ ter@@ S@@ o@@ f@@ t@@ AP@@ Mode@@ (@@ null@@ ); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); en@@ ter@@ S@@ o@@ f@@ t@@ Ap@@ Active@@ Mode@@ (); }
public void remove@@ Listener@@ (@@ com.google.gct.@@ ide@@ a.@@ de@@ bug@@ g@@ er.@@ C@@ lo@@ ud@@ Debug@@ Pro@@ ces@@ s.@@ C@@ lo@@ ud@@ B@@ reak@@ List@@ Change@@ d list@@ ener@@ ) { my@@ B@@ reak@@ p@@ o@@ int@@ List@@ Changed@@ Listener@@ s.@@ remove@@ (@@ list@@ ener@@ ); }
@org.junit.Test public void test@@ Set@@ W@@ if@@ i@@ Enabled@@ From@@ App@@ Fail@@ s@@ W@@ h@@ en@@ Ap@@ Enabled@@ () throw@@ s java.lang.Exception { when(m@@ W@@ if@@ i@@ StateMachine.@@ s@@ ync@@ Get@@ W@@ if@@ i@@ Ap@@ State@@ ()).@@ thenReturn@@ (@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ ); assert@@ False@@ (m@@ W@@ if@@ i@@ Service@@ Imp@@ l.@@ set@@ W@@ if@@ i@@ Enabled@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Service@@ Imp@@ l@@ Test.@@ TEST_@@ P@@ AC@@ K@@ A@@ G@@ E_@@ N@@ AME@@ , true@@ )); ve@@ r@@ if@@ y@@ (m@@ Setting@@ s@@ Store@@ , ne@@ ver@@ ()).@@ handle@@ W@@ if@@ i@@ To@@ g@@ g@@ le@@ d@@ (@@ any@@ Boole@@ an@@ ()); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Control@@ ler@@ , ne@@ ver@@ ()).@@ send@@ Message@@ (e@@ q@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Control@@ ler.@@ C@@ M@@ D_@@ WI@@ FI@@ _@@ TO@@ G@@ G@@ G@@ L@@ ED@@ )); }
protected void lib@@ To@@ Com@@ mon@@ (@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.lang.String> command@@ Line@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String class@@ path@@ , @javax.annotation.@@ N@@ on@@ null java.io.File@@ [] in@@ ) throw@@ s java.lang.Exception { command@@ L@@ ine.@@ add@@ ("@@ --@@ ver@@ bo@@ se@@ "); command@@ L@@ ine.@@ add(@@ ver@@ bo@@ si@@ ty@@ Level.@@ name@@ ()); command@@ L@@ ine.@@ add@@ ("@@ --@@ s@@ an@@ ity@@ -@@ check@@ s@@ "); command@@ L@@ ine.@@ add@@ (java.lang.@@ Boole@@ an@@ .@@ toString@@ (s@@ an@@ ity@@ Check@@ s@@ )); if ((@@ in@@ crement@@ al@@ Folder@@ ) != null@@ ) { args.@@ add@@ ("@@ --@@ in@@ crement@@ al@@ -@@ fo@@ l@@ der@@ "); args.@@ add@@ (in@@ crement@@ al@@ Fol@@ d@@ er.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } for (@@ java.io.File re@@ s : res@@ Imp@@ ort@@ ) { command@@ L@@ ine.@@ add@@ ("@@ -@@ -@@ import@@ -@@ resource@@ "); args.@@ add(@@ res@@ .get@@ Path@@ ()); } for (@@ java.io.File m@@ et@@ a : m@@ eta@@ Imp@@ ort@@ ) { command@@ L@@ ine.@@ add@@ ("@@ -@@ -@@ import@@ -@@ m@@ eta@@ "); args.@@ add@@ (m@@ eta@@ .get@@ Path@@ ()); } com.android.jack.test.@@ toolchain.@@ Jack@@ C@@ li@@ Too@@ lch@@ ain.@@ add@@ Properties@@ (pro@@ per@@ ties@@ , arg@@ s); if (!@@ (@@ class@@ path@@ .@@ equal@@ s("@@ "@@ ))) { args.@@ add@@ ("@@ -@@ class@@ path@@ "); args.@@ add@@ (@@ class@@ path@@ ); } for (@@ java.io.File ja@@ r@@ ja@@ r@@ File : ja@@ r@@ ja@@ r@@ R@@ ul@@ es) { args.@@ add@@ ("@@ --@@ config@@ -@@ ja@@ r@@ ja@@ r@@ "); args.@@ add(@@ ja@@ r@@ ja@@ r@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } for (@@ java.io.File flag@@ s : pro@@ gu@@ ard@@ Flag@@ s) { args.@@ add@@ ("@@ --@@ config@@ -@@ pro@@ gu@@ ard@@ "); args.@@ add@@ (f@@ lag@@ s.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } if (@@ w@@ ith@@ Debug@@ Info@@ s) { args.@@ add@@ ("@@ -@@ g@@ "); } lib@@ To@@ Imp@@ ort@@ St@@ ati@@ c@@ Lib@@ s(@@ arg@@ s, in@@ ); }
private static java.lang.String get@@ Zone@@ Display@@ Name@@ (java.util.@@ Local@@ e loc@@ ale@@ , java.util.@@ Time@@ Z@@ on@@ e t@@ z@@ , java.util.@@ D@@ ate no@@ w@@ , boolean pre@@ fer@@ Location@@ ) { java.lang.String z@@ one@@ Name@@ String@@ ; if (p@@ re@@ fer@@ Location@@ ) { z@@ one@@ Name@@ Str@@ ing = com.android.@@ setting@@ s.@@ Zone@@ P@@ i@@ ck@@ er.get@@ Zone@@ Ex@@ e@@ mp@@ l@@ ar@@ Location@@ (@@ loc@@ ale@@ , t@@ z@@ ); if ((@@ z@@ one@@ Name@@ Str@@ ing == null@@ ) || (@@ z@@ one@@ Name@@ Str@@ ing.@@ isEmpty@@ ())) { z@@ one@@ Name@@ Str@@ ing = com.android.@@ setting@@ s.@@ Date@@ Time@@ Setting@@ s.get@@ Zone@@ Long@@ Name@@ (@@ loc@@ ale@@ , t@@ z@@ , no@@ w@@ ); } } else { z@@ one@@ Name@@ Str@@ ing = com.android.@@ setting@@ s.@@ Date@@ Time@@ Setting@@ s.get@@ Zone@@ Long@@ Name@@ (@@ loc@@ ale@@ , t@@ z@@ , no@@ w@@ ); if ((@@ z@@ one@@ Name@@ Str@@ ing == null@@ ) || (@@ z@@ one@@ Name@@ Str@@ ing.@@ isEmpty@@ ())) { z@@ one@@ Name@@ Str@@ ing = com.android.@@ setting@@ s.@@ Zone@@ P@@ i@@ ck@@ er.get@@ Zone@@ Ex@@ e@@ mp@@ l@@ ar@@ Location@@ (@@ loc@@ ale@@ , t@@ z@@ ); } } return z@@ one@@ Name@@ String@@ ; }
private android.net.Network@@ Capabili@@ ti@@ es get@@ Network@@ Capabilities@@ Inter@@ nal@@ (com.android.server.@@ connectivity.@@ Network@@ A@@ g@@ ent@@ Info n@@ a@@ i@@ ) { if (@@ n@@ a@@ i != null@@ ) { synchronized@@ (@@ n@@ a@@ i@@ ) { if ((@@ n@@ a@@ i.@@ network@@ Capabilities@@ ) != null@@ ) { return network@@ Capabilities@@ With@@ out@@ U@@ id@@ s@@ Un@@ l@@ ess@@ Al@@ low@@ ed@@ (@@ n@@ a@@ i.@@ network@@ Capabilities@@ ); } } return null@@ ; }
@java.lang.Override public void handle@@ (@@ @javax.annotation.@@ N@@ on@@ null org.@@ si@@ mp@@ le@@ framework.@@ h@@ tt@@ p.@@ Requ@@ est request@@ , @javax.annotation.@@ N@@ on@@ null org.@@ si@@ mp@@ le@@ framework.@@ h@@ tt@@ p.@@ Res@@ pon@@ se res@@ ponse@@ ) { org.@@ si@@ mp@@ le@@ framework.@@ h@@ tt@@ p.@@ Content@@ Type cont@@ ent@@ Type = get@@ Content@@ Type@@ (@@ request@@ ); org.@@ si@@ mp@@ le@@ framework.@@ h@@ tt@@ p.@@ core.@@ Cont@@ ain@@ er contain@@ er@@ ; if (@@ cont@@ ent@@ Type == null@@ ) { com.android.jack.@@ server.@@ ro@@ ut@@ er.@@ Content@@ Type@@ R@@ out@@ er.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E, "@@ R@@ out@@ e requ@@ est for n@@ o cont@@ ent type@@ "); contain@@ er = null@@ ; } else { java.lang.String typ@@ e = cont@@ ent@@ Typ@@ e.get@@ Type@@ (); com.android.jack.@@ server.@@ ro@@ ut@@ er.@@ Content@@ Type@@ R@@ out@@ er.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E, (("@@ R@@ out@@ e requ@@ est for '@@ " + typ@@ e) + "@@ '@@ ")); contain@@ er = reg@@ is@@ try@@ .get@@ (@@ typ@@ e); } if (@@ contain@@ er != null@@ ) { contain@@ er.@@ handle@@ (@@ request@@ , res@@ ponse@@ ); } else { pri@@ m@@ ary@@ Cont@@ ain@@ er.@@ handle@@ (@@ request@@ , res@@ ponse@@ ); } }
public void test_@@ SSL@@ Socket@@ _@@ default@@ Configur@@ ati@@ o@@ () throw@@ s java.lang.Exception { libcore.@@ javax.net.ssl.@@ SSL@@ Default@@ Configuration@@ Asser@@ ts@@ .@@ assert@@ SSL@@ Socket@@ (((@@ javax.net.ssl.@@ SSL@@ Socket@@ ) (@@ javax.net.ssl.@@ SSL@@ Socket@@ Fa@@ ctory@@ .get@@ Default@@ ().@@ create@@ Socket@@ ()))); }
public void der@@ e@@ ference@@ Image@@ () { (@@ im@@ age@@ Re@@ feren@@ ces@@ )@@ --@@ ; if (((@@ im@@ age@@ ) != null@@ ) && ((@@ im@@ age@@ Re@@ feren@@ ces@@ ) == 0@@ )) { im@@ age.@@ dis@@ po@@ se@@ (); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ D@@ IS@@ P@@ O@@ S@@ ING@@ "); } }
@org.junit.Test public void test@@ Multi@@ Thread@@ () throw@@ s java.lang.Exception { java.util.@@ concurrent.@@ Count@@ Down@@ L@@ at@@ ch fa@@ ctory@@ L@@ at@@ ch = new java.util.@@ concurrent.@@ Count@@ Down@@ L@@ atch@@ (1@@ ); com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ <java.lang.String, java.lang.String> c@@ ach@@ e = new com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ <java.lang.String, java.lang.String@@ >@@ (@@ new com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ Test.@@ De@@ lay@@ ed@@ Fa@@ ctory@@ (@@ fa@@ ctory@@ L@@ atch@@ )); com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ Test.@@ Cach@@ e@@ Run@@ n@@ able run@@ n@@ able@@ 1 = new com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ Test.@@ Cach@@ e@@ Run@@ n@@ able@@ (c@@ ach@@ e); java.lang.@@ Th@@ re@@ ad t@@ 1 = new java.lang.@@ Thread@@ (@@ run@@ n@@ able@@ 1); t@@ 1.@@ start@@ (); com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ Test.@@ Cach@@ e@@ Run@@ n@@ able run@@ n@@ able@@ 2 = new com.android.ide.common.@@ c@@ ach@@ ing.@@ Cre@@ at@@ ing@@ Cach@@ e@@ Test.@@ Cach@@ e@@ Run@@ n@@ able@@ (c@@ ach@@ e); java.lang.@@ Th@@ re@@ ad t@@ 2 = new java.lang.@@ Thread@@ (@@ run@@ n@@ able@@ 2@@ ); t@@ 2.@@ start@@ (); fa@@ ctory@@ L@@ atch@@ .@@ count@@ Down@@ (); t@@ 1.@@ j@@ o@@ in@@ (); t@@ 2.@@ j@@ o@@ in@@ (); assert@@ Equal@@ s("@@ f@@ oo@@ ", run@@ n@@ able@@ 1@@ .get@@ Result@@ ()); assert@@ Equal@@ s("@@ f@@ oo@@ ", run@@ n@@ able@@ 2@@ .get@@ Result@@ ()); assert@@ True@@ ("@@ re@@ p@@ et@@ iti@@ v@@ e call@@ s g@@ i@@ v@@ e s@@ am@@ e instance@@ ", ((@@ run@@ n@@ able@@ 1@@ .get@@ Result@@ ()) == (@@ run@@ n@@ able@@ 2@@ .get@@ Result@@ ()))); }
@com.android.annotations.NonNull com.android.build.gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ P@@ atter@@ n get@@ C@@ File@@ P@@ attern@@ ();
@java.lang.Override public java.lang.String toString@@ () { return ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((("@@ Sign@@ al@@ Str@@ ength@@ :@@ " + " ") + (m@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ )) + " ") + (m@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ )) + " ") + (m@@ U@@ m@@ ts@@ Rs@@ c@@ p@@ )) + " ") + (m@@ C@@ dm@@ a@@ D@@ b@@ m@@ )) + " ") + (m@@ C@@ dm@@ a@@ E@@ c@@ io@@ )) + " ") + (m@@ E@@ v@@ do@@ D@@ b@@ m@@ )) + " ") + (m@@ E@@ v@@ do@@ E@@ c@@ io@@ )) + " ") + (m@@ E@@ v@@ do@@ S@@ n@@ r@@ )) + " ") + (m@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ p@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ q@@ )) + " ") + (m@@ L@@ te@@ R@@ ss@@ n@@ r@@ )) + " ") + (m@@ L@@ te@@ C@@ q@@ i@@ )) + " ") + (m@@ L@@ te@@ Rs@@ r@@ p@@ B@@ oo@@ st@@ )) + " ") + (m@@ T@@ d@@ S@@ c@@ dm@@ a@@ Rs@@ c@@ p@@ )) + " ") + (is@@ G@@ s@@ m ? "@@ g@@ sm@@ |@@ l@@ te@@ " : "@@ c@@ dm@@ a@@ ")) + " ") + (m@@ U@@ se@@ On@@ ly@@ Rs@@ r@@ p@@ For@@ L@@ te@@ Leve@@ l ? "@@ u@@ se@@ _@@ on@@ ly@@ _@@ r@@ s@@ r@@ p@@ _@@ for@@ _@@ l@@ te@@ _@@ le@@ vel@@ " : "@@ u@@ se@@ _@@ r@@ s@@ r@@ p@@ _@@ and@@ _@@ r@@ ss@@ n@@ r@@ _@@ for@@ _@@ l@@ te@@ _@@ le@@ vel@@ ")) + " ") + (@@ java.util.Arrays.@@ toString@@ (m@@ U@@ m@@ ts@@ Rs@@ c@@ p@@ Th@@ res@@ ho@@ l@@ d@@ s@@ )); }
private void check@@ Er@@ fc@@ FloatFloat@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 3@@ 3@@ 3@@ 3@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Er@@ fc@@ FloatFloat@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Er@@ fc@@ FloatFloat@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Er@@ fc@@ FloatFloat@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Er@@ fc@@ FloatFloat@@ : " + (e.toString()))); } }
public void run@@ () { if ((@@ com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ T@@ re@@ e@@ View@@ Mode@@ l.get@@ Mode@@ l@@ ().get@@ T@@ re@@ e@@ ()) == null@@ ) { sho@@ w@@ Device@@ Sele@@ ctor@@ (); tr@@ e@@ e@@ View@@ B@@ utton@@ .set@@ Enabled@@ (@@ false@@ ); } else { sho@@ w@@ T@@ re@@ e@@ View@@ (); tr@@ e@@ e@@ View@@ B@@ utton@@ .set@@ Enabled@@ (@@ true@@ ); } }
private int get@@ Th@@ um@@ b@@ Posi@@ tion@@ For@@ List@@ Posi@@ tion@@ (@@ int fi@@ r@@ st@@ Visi@@ ble@@ Item@@ , int vi@@ si@@ ble@@ Item@@ Count@@ , int to@@ t@@ al@@ Item@@ Count@@ ) { if ((@@ (m@@ Sec@@ tion@@ Index@@ er@@ ) == null@@ ) || ((m@@ List@@ Adapter@@ ) == null@@ )) { get@@ Sec@@ tion@@ s@@ From@@ Index@@ er@@ (); } if ((@@ (m@@ Sec@@ tion@@ Index@@ er@@ ) == null@@ ) || (!(m@@ M@@ atch@@ D@@ r@@ ag@@ Posi@@ tion@@ ))) { return ((@@ (m@@ Lis@@ t.get@@ He@@ ig@@ ht@@ ()) - (m@@ Th@@ um@@ b@@ H@@ )) * fi@@ r@@ st@@ Visi@@ ble@@ Item@@ ) / (@@ to@@ t@@ al@@ Item@@ Coun@@ t - vi@@ si@@ ble@@ Item@@ Count@@ ); } fi@@ r@@ st@@ Visi@@ ble@@ I@@ te@@ m -@@ = m@@ List@@ Offset@@ ; if (@@ fi@@ r@@ st@@ Visi@@ ble@@ I@@ te@@ m < 0) { return 0; } to@@ t@@ al@@ Item@@ Coun@@ t -@@ = m@@ List@@ Offset@@ ; final int tr@@ ack@@ He@@ ig@@ h@@ t = (m@@ Lis@@ t.get@@ He@@ ig@@ ht@@ ()) - (m@@ Th@@ um@@ b@@ H@@ ); final int sec@@ tion = m@@ Sec@@ tion@@ Index@@ er.get@@ Sec@@ tion@@ For@@ Posi@@ tion@@ (@@ fi@@ r@@ st@@ Visi@@ ble@@ Item@@ ); final int sec@@ tion@@ Po@@ s = m@@ Sec@@ tion@@ Index@@ er.get@@ Posi@@ tion@@ For@@ Sec@@ tion@@ (s@@ ec@@ tion@@ ); int next@@ Sec@@ tion@@ Po@@ s = 0; final int sec@@ tion@@ Coun@@ t = m@@ Sec@@ tion@@ s.@@ length@@ ; if ((@@ sec@@ tion + 1@@ ) < sec@@ tion@@ Count@@ ) { next@@ Sec@@ tion@@ Po@@ s = m@@ Sec@@ tion@@ Index@@ er.get@@ Posi@@ tion@@ For@@ Sec@@ tion@@ ((@@ sec@@ tion + 1@@ )); } else { next@@ Sec@@ tion@@ Po@@ s = to@@ t@@ al@@ Item@@ Coun@@ t - 1; } final int posi@@ tion@@ s@@ In@@ Sec@@ tion = next@@ Sec@@ tion@@ Po@@ s - sec@@ tion@@ Po@@ s; final android.@@ view@@ .@@ Vi@@ e@@ w ch@@ il@@ d = m@@ Lis@@ t.get@@ Ch@@ ild@@ At@@ (@@ 0); final float in@@ crement@@ al@@ Po@@ s = (@@ ch@@ il@@ d == null@@ ) ? 0 : fi@@ r@@ st@@ Visi@@ ble@@ I@@ te@@ m + ((@@ (@@ float@@ ) ((m@@ Lis@@ t.get@@ P@@ add@@ ing@@ To@@ p@@ ()) - (@@ ch@@ ild@@ .get@@ To@@ p@@ ()))) / (@@ ch@@ ild@@ .get@@ He@@ ig@@ ht@@ ())); final float po@@ s@@ With@@ in@@ Sec@@ tion = (in@@ crement@@ al@@ Po@@ s - sec@@ tion@@ Po@@ s) / posi@@ tion@@ s@@ In@@ Sec@@ tion@@ ; int result = (@@ (@@ int@@ ) ((@@ (s@@ ec@@ tion + po@@ s@@ With@@ in@@ Sec@@ tion@@ ) / sec@@ tion@@ Count@@ ) * tr@@ ack@@ He@@ ig@@ ht@@ )); if ((@@ fi@@ r@@ st@@ Visi@@ ble@@ I@@ te@@ m > 0) && ((@@ fi@@ r@@ st@@ Visi@@ ble@@ I@@ te@@ m + vi@@ si@@ ble@@ Item@@ Count@@ ) == to@@ t@@ al@@ Item@@ Count@@ )) { final android.@@ view@@ .@@ Vi@@ e@@ w las@@ t@@ Ch@@ il@@ d = m@@ Lis@@ t.get@@ Ch@@ ild@@ At@@ ((@@ vi@@ si@@ ble@@ Item@@ Coun@@ t - 1@@ )); final float las@@ t@@ Item@@ Visi@@ b@@ le = (@@ (@@ float@@ ) ((@@ (m@@ Lis@@ t.get@@ He@@ ig@@ ht@@ ()) - (m@@ Lis@@ t.get@@ P@@ add@@ ing@@ B@@ o@@ t@@ to@@ m@@ ())) - (@@ las@@ t@@ Ch@@ ild@@ .get@@ To@@ p@@ ()))) / (@@ las@@ t@@ Ch@@ ild@@ .get@@ He@@ ig@@ ht@@ ()); result +@@ = (@@ tr@@ ack@@ He@@ ig@@ h@@ t - result@@ ) * las@@ t@@ Item@@ Visi@@ ble@@ ; } return result@@ ; }
public static void com@@ pu@@ te@@ T@@ an@@ pi@@ (android.@@ renderscript.@@ cts.@@ Test@@ T@@ an@@ p@@ i.@@ Argument@@ s@@ Float@@ F@@ lo@@ at arg@@ s) { args.@@ out = new android.renderscript.cts.@@ Float@@ y@@ (android.@@ renderscript.@@ cts.@@ C@@ ore@@ M@@ ath@@ V@@ er@@ if@@ i@@ er.@@ s@@ in@@ (((@@ args.@@ in@@ ) * (@@ (@@ float@@ ) (java.lang.@@ M@@ ath.@@ P@@ I@@ )@@ )@@ )), 6@@ , 12@@ 8@@ ); }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") public void test@@ Run@@ _@@ io@@ Exception@@ () throw@@ s java.lang.Exception { m@@ Mock@@ Device.@@ exec@@ ute@@ Sh@@ ell@@ Command@@ (((@@ java.lang.String@@ ) (@@ org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ any@@ Object@@ ()@@ )), ((@@ com.android.ddmlib.@@ IS@@ h@@ ell@@ Output@@ Receiver@@ ) (@@ org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ any@@ Object@@ ()@@ )), org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ e@@ q@@ (0@@ ), org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ e@@ q@@ (java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LIS@@ EC@@ ON@@ D@@ S@@ )); org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ expec@@ t@@ L@@ ast@@ Call@@ ().@@ and@@ Throw@@ (@@ new java.io.IO@@ Exception@@ ()); m@@ Mock@@ Listen@@ er.@@ test@@ Run@@ St@@ ar@@ ted@@ (com.android.@@ ddmlib.@@ tes@@ tr@@ un@@ ner.@@ Remote@@ Android@@ Test@@ Runner@@ Test.@@ TEST_@@ P@@ AC@@ K@@ A@@ G@@ E, 0); m@@ Mock@@ Listen@@ er.@@ test@@ Run@@ Faile@@ d@@ (((@@ java.lang.String@@ ) (@@ org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ any@@ Object@@ ()))); m@@ Mock@@ Listen@@ er.@@ test@@ Run@@ En@@ d@@ ed@@ (@@ org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ any@@ Long@@ (), org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ e@@ q@@ (java.util.@@ Collection@@ s.@@ E@@ M@@ P@@ TY@@ _M@@ AP@@ )); org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ re@@ play@@ (m@@ Mock@@ Device@@ , m@@ Mock@@ Listener@@ ); try { m@@ Run@@ ner.@@ run@@ (m@@ Mock@@ Listener@@ ); fail@@ ("@@ IO@@ Exception not throw@@ n@@ "); } catch (java.io.IOException e) { } org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ ve@@ r@@ if@@ y@@ (m@@ Mock@@ Device@@ , m@@ Mock@@ Listener@@ ); }
public void set@@ M@@ eta@@ (com.android.s@@ dklib.@@ de@@ vices.@@ Met@@ a m@@ eta@@ ) { m@@ Met@@ a = m@@ eta@@ ; }
private void assert@@ Siz@@ es@@ R@@ o@@ t@@ ate@@ (android.@@ server.@@ cts.@@ Re@@ ported@@ Size@@ s ro@@ t@@ ation@@ A@@ , android.@@ server.@@ cts.@@ Re@@ ported@@ Size@@ s ro@@ t@@ ation@@ B@@ ) throw@@ s java.lang.Exception { assert@@ Equal@@ s(@@ ro@@ t@@ ation@@ A@@ .@@ dis@@ play@@ W@@ id@@ th@@ , ro@@ t@@ ation@@ A@@ .m@@ et@@ ri@@ c@@ s@@ W@@ id@@ th@@ ); assert@@ Equal@@ s(@@ ro@@ t@@ ation@@ A@@ .@@ dis@@ play@@ He@@ ig@@ h@@ t, ro@@ t@@ ation@@ A@@ .m@@ et@@ ri@@ c@@ s@@ He@@ ig@@ ht@@ ); assert@@ Equal@@ s(@@ ro@@ t@@ ation@@ B@@ .@@ dis@@ play@@ W@@ id@@ th@@ , ro@@ t@@ ation@@ B@@ .m@@ et@@ ri@@ c@@ s@@ W@@ id@@ th@@ ); assert@@ Equal@@ s(@@ ro@@ t@@ ation@@ B@@ .@@ dis@@ play@@ He@@ ig@@ h@@ t, ro@@ t@@ ation@@ B@@ .m@@ et@@ ri@@ c@@ s@@ He@@ ig@@ ht@@ ); final boolean b@@ e@@ for@@ e@@ P@@ or@@ tra@@ i@@ t = (@@ ro@@ t@@ ation@@ A@@ .@@ dis@@ play@@ W@@ id@@ th@@ ) < (@@ ro@@ t@@ ation@@ A@@ .@@ dis@@ play@@ He@@ ig@@ ht@@ ); final boolean a@@ f@@ ter@@ P@@ or@@ tra@@ i@@ t = (@@ ro@@ t@@ ation@@ B@@ .@@ dis@@ play@@ W@@ id@@ th@@ ) < (@@ ro@@ t@@ ation@@ B@@ .@@ dis@@ play@@ He@@ ig@@ ht@@ ); final boolean b@@ e@@ for@@ e@@ Config@@ P@@ or@@ tra@@ i@@ t = (@@ ro@@ t@@ ation@@ A@@ .@@ wid@@ th@@ D@@ p@@ ) < (@@ ro@@ t@@ ation@@ A@@ .@@ he@@ ig@@ ht@@ D@@ p@@ ); final boolean a@@ f@@ ter@@ Config@@ P@@ or@@ tra@@ i@@ t = (@@ ro@@ t@@ ation@@ B@@ .@@ wid@@ th@@ D@@ p@@ ) < (@@ ro@@ t@@ ation@@ B@@ .@@ he@@ ig@@ ht@@ D@@ p@@ ); assert@@ Equal@@ s(@@ b@@ e@@ for@@ e@@ P@@ or@@ tra@@ it@@ , b@@ e@@ for@@ e@@ Config@@ P@@ or@@ tra@@ it@@ ); assert@@ Equal@@ s(@@ a@@ f@@ ter@@ P@@ or@@ tra@@ it@@ , a@@ f@@ ter@@ Config@@ P@@ or@@ tra@@ it@@ ); }
private com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Runner@@ And@@ Configuration@@ Setting@@ s create@@ Configuration@@ (@@ @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Null@@ able com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ pro@@ jec@@ t.@@ Pro@@ ject pro@@ ject@@ , java.lang.@@ Mod@@ ul@@ e mo@@ du@@ le@@ ) { if (pro@@ ject == null@@ ) { return null@@ ; } com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Runner@@ And@@ Configuration@@ Setting@@ s setting@@ s = com@@ .@@ int@@ el@@ li@@ j.@@ exec@@ uti@@ on@@ .@@ Run@@ Manager@@ Ex@@ .get@@ Instance@@ Ex@@ (pro@@ ject@@ ).@@ create@@ Run@@ Configuration@@ (@@ App@@ En@@ g@@ ine@@ Run@@ Configur@@ ation.@@ N@@ AME@@ , get@@ Configuration@@ Fa@@ ctory@@ ()); final com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ run@@ .@@ App@@ En@@ g@@ ine@@ Run@@ Configur@@ ation config@@ ur@@ ation = ((@@ com.google.gct.@@ ide@@ a.@@ app@@ eng@@ ine.@@ run@@ .@@ App@@ En@@ g@@ ine@@ Run@@ Configuration@@ ) (@@ setting@@ s.get@@ Configuration@@ ())); config@@ ur@@ ation.@@ set@@ Name@@ (@@ App@@ En@@ g@@ ine@@ Run@@ Configur@@ ation.@@ N@@ AM@@ E); config@@ ur@@ ation.@@ set@@ Mod@@ ule@@ (m@@ o@@ du@@ le@@ ); return setting@@ s; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 3@@ 8@@ 4@@ T@@ c@@ p@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 3@@ 8@@ 4@@ , get@@ A@@ u@@ th@@ Key@@ (@@ 3@@ 8@@ 4@@ ), 1@@ 9@@ 2@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , false@@ , 1); }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ sing@@ le@@ _@@ source@@ _@@ al@@ lo@@ c s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ sing@@ le@@ _@@ source@@ _@@ al@@ loc@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); in@@ itializ@@ e@@ G@@ lo@@ b@@ al@@ s(@@ p@@ RS@@ , s); for (@@ int data@@ Type : r@@ s@@ Data@@ Typ@@ es) { for (@@ int v@@ ec@@ Siz@@ e = 1; v@@ ec@@ Siz@@ e <@@ = 4@@ ; v@@ ec@@ Size@@ ++) { for (@@ int n@@ D@@ im@@ s = 1; n@@ D@@ im@@ s <@@ = 3@@ ; n@@ D@@ im@@ s@@ ++) { s.@@ invok@@ e@@ _C@@ re@@ ate@@ And@@ Test@@ Alloc@@ (d@@ ata@@ Type, v@@ ec@@ Size@@ , n@@ D@@ im@@ s); } } s.@@ invok@@ e@@ _@@ sing@@ le@@ _@@ source@@ _@@ al@@ loc@@ _test@@ (); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
@javax.annotation.@@ N@@ on@@ null @java.lang.Override public java.util.Collection@@ <java.lang.String@@ > get@@ Sub@@ Package@@ Nam@@ es(@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Pack@@ age load@@ ing@@ ) { java.util.List<@@ java.lang.String> sub@@ s = new java.util.ArrayList<@@ java.lang.String@@ >(); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.android.sched.vfs.@@ Input@@ V@@ Element@@ > e@@ n@@ try : c@@ ache.@@ e@@ n@@ try@@ Set@@ ()) { if (e@@ n@@ try@@ .get@@ Value@@ ().@@ is@@ V@@ Dir@@ ()) { sub@@ s.@@ add(@@ e@@ n@@ try@@ .get@@ Key@@ ()); } } return sub@@ s; }
public void test@@ Debug@@ () { com.android.builder.@@ Build@@ Type typ@@ e = new com.android.builder.@@ Build@@ Type@@ ("@@ de@@ bug@@ "); assert@@ True@@ (@@ typ@@ e.@@ is@@ Debug@@ g@@ able@@ ()); assert@@ True@@ (@@ typ@@ e.@@ is@@ Debug@@ J@@ n@@ i@@ Build@@ ()); }
public static void main@@ (@@ java.lang.String[] arg@@ s) { Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ I@@ ((@@ -1@@ 0@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ I@@ (@@ 2@@ 0@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 10@@ L, Main.@@ ab@@ s@@ L@@ ((@@ -1@@ 0@@ L@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0@@ L, Main.@@ ab@@ s@@ L@@ (@@ 2@@ 0@@ L@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 1@@ ((@@ -1@@ 0@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 1@@ (@@ 2@@ 0@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 2@@ ((@@ -1@@ 0@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 2@@ (@@ 2@@ 0@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 3@@ ((@@ -1@@ 0@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 3@@ (@@ 2@@ 0@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 4@@ ((@@ -1@@ 0@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 4@@ (@@ 2@@ 0@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 4@@ ((@@ (@@ short@@ ) (-1@@ 0@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 4@@ ((@@ (@@ short@@ ) (@@ 2@@ 0@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 1@@ 0, Main.@@ ab@@ s@@ 6@@ ((@@ (@@ byte@@ ) (-1@@ 0@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0, Main.@@ ab@@ s@@ 6@@ ((@@ (@@ byte@@ ) (@@ 2@@ 0@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 10@@ L, Main.@@ ab@@ s@@ 7@@ ((@@ -1@@ 0@@ L@@ ))); Main.@@ expec@@ t@@ Equal@@ s(@@ 2@@ 0@@ L, Main.@@ ab@@ s@@ 7@@ (@@ 2@@ 0@@ L@@ )); Main.@@ expec@@ t@@ Equal@@ s(@@ 1, Main.@@ z@@ ab@@ s@@ 1@@ ((@@ (@@ byte@@ ) (1@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 25@@ 5, Main.@@ z@@ ab@@ s@@ 1@@ ((@@ (@@ byte@@ ) (-1@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 1, Main.@@ z@@ ab@@ s@@ 2@@ ((@@ (@@ short@@ ) (1@@ )))); Main.@@ expec@@ t@@ Equal@@ s(@@ 6@@ 5@@ 5@@ 3@@ 5, Main.@@ z@@ ab@@ s@@ 2@@ ((@@ (@@ short@@ ) (-1@@ )))); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ p@@ as@@ sed@@ "); }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Fail@@ ing@@ Su@@ ite@@ Test@@ .@@ class@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Fail@@ ing@@ Su@@ ite@@ Test@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ ("@@ s@@ ui@@ te@@ ", "@@ java.lang.Illegal@@ State@@ Exception@@ : Can@@ not cre@@ ate s@@ ui@@ te@@ \n@@ ").@@ com@@ pl@@ et@@ ed@@ N@@ or@@ m@@ all@@ y@@ (); }
public void test_@@ is@@ In@@ fin@@ ite@@ D@@ () { assert@@ False@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ NE@@ G@@ A@@ TIV@@ E_@@ IN@@ F@@ IN@@ ITY@@ )); assert@@ False@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ NE@@ G@@ A@@ TIV@@ E_@@ IN@@ F@@ IN@@ ITY@@ )); assert@@ False@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ P@@ O@@ SI@@ TIV@@ E_@@ IN@@ F@@ IN@@ ITY@@ )); assert@@ False@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ MA@@ X_@@ VAL@@ UE@@ )); assert@@ False@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ M@@ IN@@ _@@ VAL@@ UE@@ )); assert@@ True@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (@@ N@@ an@@ )@@ ))) && (!@@ (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (@@ 0.@@ 0@@ )@@ )))); }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ M@@ ed@@ i@@ um@@ Test public void test@@ Java@@ String@@ s() { assert@@ Equal@@ s("@@ S@@ U@@ C@@ CE@@ SS@@ -@@ AP@@ P@@ ", m@@ Lib@@ 1@@ Text@@ View@@ 2@@ .get@@ Text@@ ()); assert@@ Equal@@ s("@@ S@@ U@@ C@@ CE@@ SS@@ -@@ L@@ I@@ B@@ 1@@ ", m@@ Lib@@ 2@@ Text@@ View@@ 2@@ .get@@ Text@@ ()); }
private void fin@@ is@@ h@@ (@@ boolean su@@ ccess@@ , java.lang.String error@@ ) { if (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ TAG, ((("@@ fin@@ is@@ h@@ () su@@ ccess@@ =@@ " + su@@ ccess@@ ) + ", error@@ =@@ ") + error@@ )); if ((m@@ Dis@@ cover@@ y@@ ) != null@@ ) { m@@ Dis@@ cover@@ y.@@ st@@ op@@ (); if ((m@@ Dis@@ cover@@ y@@ Time@@ out@@ ) != null@@ ) { m@@ Dis@@ cover@@ y@@ Time@@ out.@@ st@@ op@@ (); if ((m@@ Connection@@ ) != null@@ ) { m@@ Connection@@ .@@ st@@ op@@ (); m@@ P@@ r@@ int@@ Service.@@ un@@ lock@@ W@@ if@@ i@@ (); m@@ B@@ ack@@ end@@ .@@ close@@ Doc@@ ument@@ (); if (s@@ u@@ ccess@@ ) { m@@ P@@ r@@ int@@ J@@ o@@ b.@@ start@@ (); m@@ P@@ r@@ int@@ J@@ o@@ b.@@ com@@ pl@@ et@@ e@@ (); } else if ((m@@ State@@ ) == (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ STATE_@@ C@@ AN@@ CE@@ L@@ )) { m@@ P@@ r@@ int@@ J@@ o@@ b.@@ can@@ cel@@ (); } else { m@@ P@@ r@@ int@@ J@@ o@@ b.@@ fail@@ (@@ error@@ ); } m@@ State = com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ J@@ o@@ b.@@ STATE_@@ D@@ ON@@ E@@ ; m@@ Comp@@ lete@@ Con@@ s@@ um@@ er.@@ ac@@ ce@@ p@@ t@@ (@@ this@@ ); }
public void test@@ Re@@ main@@ der@@ () { check@@ Re@@ main@@ der@@ FloatFloat@@ Float@@ (); check@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ (); check@@ Re@@ main@@ der@@ Float3Float3@@ Float3@@ (); check@@ Re@@ main@@ der@@ Float4Float4@@ Float4@@ (); }
public int get@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ Statu@@ s(@@ android.content.@@ p@@ m.@@ Package@@ Info package@@ Info@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ule@@ s c@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ule@@ s = get@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es@@ (); return c@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ule@@ s == null ? android.telephony.@@ Telephony@@ Manager.@@ C@@ AR@@ R@@ I@@ ER@@ _P@@ R@@ I@@ V@@ IL@@ E@@ G@@ E_@@ STA@@ T@@ US@@ _@@ R@@ UL@@ E@@ S@@ _N@@ O@@ T_@@ LOA@@ DE@@ D : c@@ arrier@@ Pri@@ vi@@ le@@ ge@@ R@@ ul@@ es@@ .get@@ C@@ arrier@@ Pri@@ vi@@ le@@ ge@@ Status@@ (@@ package@@ Info@@ ); }
private void test_@@ par@@ al@@ le@@ l@@ S@@ ort@@ $@@ DI@@ I@@ (@@ int siz@@ e) { int start@@ In@@ dex = 1@@ 00@@ ; int end@@ In@@ dex = siz@@ e - 1@@ 00@@ ; do@@ ub@@ le@@ [] re@@ ver@@ sed@@ Ar@@ ra@@ y = new do@@ ub@@ le@@ [@@ size@@ ]; do@@ ub@@ le@@ [] or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Ar@@ ra@@ y = new do@@ ub@@ le@@ [@@ size@@ ]; for (@@ int coun@@ ter = 0; coun@@ ter < start@@ Index@@ ; coun@@ ter@@ ++) { re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = (@@ (@@ do@@ ub@@ le@@ ) (1@@ 00@@ )); or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]; } for (@@ int coun@@ ter = end@@ Index@@ ; coun@@ ter < size@@ ; coun@@ ter@@ ++) { re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = (@@ (@@ do@@ ub@@ le@@ ) (1@@ 00@@ )); or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]; } for (@@ int coun@@ ter = start@@ Index@@ ; coun@@ ter < end@@ Index@@ ; coun@@ ter@@ ++) { re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = (@@ (@@ do@@ ub@@ le@@ ) (((@@ siz@@ e - coun@@ ter@@ ) - start@@ Index@@ ) - 1@@ )); or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ] = re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]; } java.util.Arrays.@@ par@@ al@@ le@@ l@@ S@@ ort@@ (re@@ ver@@ sed@@ Array@@ , start@@ Index@@ , end@@ Index@@ ); for (@@ int coun@@ ter = 0; coun@@ ter < start@@ Index@@ ; coun@@ ter@@ ++) assert@@ True@@ ("@@ Ar@@ ra@@ y mo@@ d@@ if@@ i@@ ed out@@ s@@ id@@ e of bo@@ und@@ s", ((@@ re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]@@ ) == (@@ or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]@@ ))); for (@@ int coun@@ ter = start@@ Index@@ ; coun@@ ter < (@@ end@@ In@@ dex - 1); coun@@ ter@@ ++) assert@@ True@@ ("@@ Ar@@ ra@@ y not s@@ or@@ ted w@@ ith@@ in bo@@ und@@ s", ((@@ re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]@@ ) <@@ = (re@@ ver@@ sed@@ Array@@ [@@ (@@ coun@@ ter + 1@@ )@@ ]@@ ))); for (@@ int coun@@ ter = end@@ Index@@ ; coun@@ ter < (@@ org.apache.harmony.@@ tests.@@ java.util.Array@@ s@@ Test.@@ array@@ Siz@@ e); coun@@ ter@@ ++) assert@@ True@@ ("@@ Ar@@ ra@@ y mo@@ d@@ if@@ i@@ ed out@@ s@@ id@@ e of bo@@ und@@ s", ((@@ re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]@@ ) == (@@ or@@ ig@@ in@@ al@@ Re@@ ver@@ sed@@ Array@@ [@@ coun@@ ter@@ ]@@ ))); try { java.util.Arrays.@@ par@@ al@@ le@@ l@@ S@@ ort@@ (re@@ ver@@ sed@@ Array@@ , (@@ start@@ In@@ dex + 1@@ ), start@@ Index@@ ); fail@@ ("@@ Illegal@@ Argument@@ Exception expected@@ "); } catch (java.lang.@@ Illegal@@ Argument@@ Exception ign@@ or@@ e) { } try { java.util.Arrays.@@ par@@ al@@ le@@ l@@ S@@ ort@@ (re@@ ver@@ sed@@ Array@@ , (-1@@ ), start@@ Index@@ ); fail@@ ("@@ Array@@ Index@@ Out@@ Of@@ B@@ ound@@ s@@ Exception expec@@ ted (1@@ )@@ "); } catch (java.lang.@@ Array@@ Index@@ Out@@ Of@@ B@@ ound@@ s@@ Exception ign@@ or@@ e) { } try { java.util.Arrays.@@ par@@ al@@ le@@ l@@ S@@ ort@@ (re@@ ver@@ sed@@ Array@@ , start@@ Index@@ , ((@@ re@@ ver@@ sed@@ Ar@@ ra@@ y.@@ length) + 1@@ )); fail@@ ("@@ Array@@ Index@@ Out@@ Of@@ B@@ ound@@ s@@ Exception ign@@ or@@ e) { } }
public libcore.io.@@ Buffer@@ I@@ ter@@ at@@ or b@@ ig@@ En@@ di@@ an@@ I@@ terator@@ () { return new libcore.io.@@ N@@ io@@ Buffer@@ I@@ terator@@ (@@ this@@ , this@@ .@@ addres@@ s@@ .@@ native@@ Or@@ der@@ ()) != (@@ java.nio.Byte@@ Or@@ d@@ er.@@ B@@ I@@ G@@ _@@ EN@@ DI@@ AN@@ ))); }
public void test_@@ get@@ Posi@@ tive@@ Pre@@ fix@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ (); d@@ f@@ .set@@ Posi@@ tive@@ Pre@@ fix@@ ("@@ ++@@ "); assert@@ True@@ ("@@ In@@ cor@@ re@@ c@@ t posi@@ ti@@ v@@ e pre@@ fix@@ ", d@@ f@@ .get@@ Posi@@ tive@@ Pre@@ fix@@ ().@@ equal@@ s("@@ ++@@ ")); }
public void d@@ en@@ si@@ ty@@ (@@ org.@@ gradle.@@ api.@@ Action@@ <@@ com.android.build.gradle.@@ r@@ ul@@ es.@@ S@@ pli@@ t@@ Data@@ > action@@ ) { action@@ .@@ exec@@ ute@@ (d@@ en@@ si@@ ty@@ ); }
public void on@@ P@@ no@@ Scan@@ Faile@@ d@@ () { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ scan@@ ner.@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner@@ Imp@@ l.@@ TAG, "@@ P@@ n@@ o s@@ c@@ an fail@@ ur@@ e re@@ cei@@ v@@ ed@@ "); re@@ port@@ P@@ no@@ Scan@@ Fail@@ ure@@ (); }
public static java.util.@@ concurrent.@@ Ex@@ ec@@ ut@@ or@@ Ser@@ vice get@@ Ex@@ ec@@ ut@@ or@@ () { com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ check@@ Ex@@ ec@@ ut@@ or@@ (); return com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ s@@ Ex@@ ec@@ ut@@ or@@ Service@@ ; }
@com.android.annotations.NonNull public static java.lang.String com@@ b@@ ine@@ As@@ C@@ am@@ el@@ C@@ ase@@ (@@ @com.android.annotations.NonNull java.util.List<@@ ? extends org.@@ gradle.@@ api.@@ Nam@@ ed@@ > nam@@ ed@@ List@@ ) { java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); boolean fi@@ r@@ s@@ t = true@@ ; for (@@ org.@@ gradle.@@ api.@@ Name@@ d name@@ d : nam@@ ed@@ List@@ ) { if (@@ fi@@ r@@ st@@ ) { sb.@@ append(@@ nam@@ ed@@ .getName@@ ()); fi@@ r@@ s@@ t = false@@ ; } else { sb.@@ append@@ (com.android.@@ uti@@ ls.@@ String@@ Helper.@@ cap@@ it@@ aliz@@ e@@ (@@ nam@@ ed@@ .getName@@ ())); } } return sb.@@ toString@@ (); }
public final boolean is@@ Load@@ ed@@ () { check@@ Is@@ M@@ app@@ ed@@ (); long addres@@ s = b@@ lock@@ .@@ to@@ Long@@ (); long siz@@ e = b@@ lock@@ .get@@ Size@@ (); if (@@ siz@@ e == 0) { return true@@ ; } try { int p@@ age@@ Siz@@ e = (@@ (@@ int@@ ) (@@ Lib@@ core.@@ os.@@ s@@ ys@@ con@@ f@@ (android.@@ system.@@ O@@ s@@ Constants.@@ _S@@ C@@ _P@@ A@@ G@@ E_@@ SIZ@@ E@@ ))); int p@@ age@@ O@@ ff@@ set = (@@ (@@ int@@ ) (@@ addres@@ s % p@@ age@@ Size@@ )); addres@@ s -@@ = p@@ age@@ Offset@@ ; siz@@ e +@@ = p@@ age@@ Offset@@ ; int p@@ age@@ Coun@@ t = (@@ (@@ int@@ ) (((@@ siz@@ e + p@@ age@@ Siz@@ e) - 1@@ ) / p@@ age@@ Size@@ )); byte@@ [] v@@ ec@@ tor = new byte@@ [@@ p@@ age@@ Count@@ ]; Lib@@ core.@@ os.@@ min@@ core@@ (@@ addres@@ s, size@@ , v@@ ec@@ tor@@ ); for (@@ int i = 0; i < (@@ v@@ ec@@ tor.@@ length); ++@@ i@@ ) { if (((@@ v@@ ec@@ tor@@ [i]@@ ) & 1@@ ) != 1@@ ) { return false@@ ; } } return true@@ ; } catch (android.@@ system.@@ ErrnoException er@@ rno@@ Exception@@ ) { return false@@ ; } }
private static native void native@@ _@@ d@@ raw@@ Po@@ s@@ Text@@ (@@ long native@@ Can@@ va@@ s, char@@ [] tex@@ t, int index@@ , int count@@ , float@@ [] po@@ s, long native@@ P@@ a@@ int@@ );
public com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ G@@ rad@@ le@@ Test@@ Pro@@ jec@@ t.@@ Builder f@@ rom@@ S@@ am@@ ple@@ (@@ @com.android.annotations.NonNull java.lang.String pro@@ ject@@ ) { test@@ Ap@@ p = new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ G@@ rad@@ le@@ Test@@ Pro@@ jec@@ t.@@ Build@@ er.@@ Empty@@ Test@@ App@@ (); java.io.File pro@@ ject@@ Di@@ r = new java.io.File@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ G@@ rad@@ le@@ Test@@ Pro@@ jec@@ t.@@ Build@@ er.@@ S@@ AM@@ P@@ L@@ E_@@ PRO@@ J@@ EC@@ T_@@ DI@@ R@@ , pro@@ ject@@ ); for (@@ java.io.File s@@ r@@ c : com.google.common.@@ io.@@ Fil@@ es.@@ file@@ T@@ re@@ e@@ Tra@@ ver@@ ser@@ ().@@ pre@@ Or@@ der@@ Tra@@ ver@@ s@@ al@@ (pro@@ ject@@ Dir@@ ).@@ fil@@ ter@@ (@@ new com.google.common.@@ b@@ ase.@@ Pre@@ d@@ ic@@ ate@@ <@@ java.io.File@@ >@@ () { @java.lang.Override public boolean app@@ ly@@ (@@ @com.android.annotations.@@ Null@@ able java.io.File file@@ ) { return (@@ fi@@ le != null@@ ) && (!(@@ file.@@ is@@ Directory@@ ())); } }@@ )) { java.io.File re@@ l@@ ative@@ P@@ ath = new java.io.File@@ (s@@ r@@ c.@@ toString@@ ().@@ re@@ pla@@ ce@@ (pro@@ ject@@ Dir@@ .@@ toString@@ (), "@@ ")); try { test@@ Ap@@ p.@@ add@@ File@@ (@@ new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ app.@@ Test@@ Source@@ File@@ (re@@ l@@ ative@@ Path@@ .get@@ Par@@ ent@@ (), src@@ .getName@@ (), com.google.common.@@ io.@@ Fil@@ es.@@ to@@ ByteArray@@ (s@@ rc@@ ))); } catch (java.lang.Exception e) { fail@@ (e.toString@@ ()); } return this@@ ; }
@org.junit.Test public void test@@ Set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ Error@@ () { com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l w@@ if@@ i@@ con@@ d@@ Contro@@ l = mock@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Control@@ .@@ class@@ ); android.net.@@ w@@ if@@ i.@@ I@@ W@@ if@@ i@@ con@@ d w@@ if@@ i@@ con@@ d = mock@@ (android.net.@@ w@@ if@@ i.@@ I@@ W@@ if@@ i@@ con@@ d@@ .@@ class@@ ); when@@ (@@ w@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ ()).@@ thenReturn@@ (@@ null@@ ); m@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ set@@ W@@ if@@ i@@ con@@ d@@ Control@@ (@@ w@@ if@@ i@@ con@@ d@@ Control@@ ); android.net.@@ w@@ if@@ i.@@ I@@ Ap@@ Inter@@ face return@@ ed@@ Ap@@ Inter@@ face = m@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ (); assert@@ Equal@@ s@@ (@@ null@@ , return@@ ed@@ Ap@@ Interface@@ ); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Native@@ ).@@ start@@ H@@ al@@ (e@@ q@@ (@@ false@@ )); ve@@ r@@ if@@ y@@ (@@ w@@ if@@ i@@ con@@ d@@ Control@@ ).set@@ up@@ D@@ ri@@ ver@@ For@@ S@@ o@@ f@@ t@@ Ap@@ Mode@@ (); }
public void test@@ Ma@@ x@@ Length@@ Extra@@ () throw@@ s java.lang.Exception { byte@@ [] max@@ Length@@ Ex@@ tr@@ a = new byte@@ [@@ 6@@ 5@@ 5@@ 3@@ 5@@ ]; java.io.File f = libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ create@@ Temp@@ or@@ ary@@ Zip@@ File@@ (); java.util.@@ z@@ i@@ p.@@ Zip@@ Output@@ Stream out = libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ create@@ Zip@@ Output@@ Stream@@ (f@@ ); java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try z@@ e = new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ ("@@ x@@ "); z@@ e.@@ set@@ Size@@ (@@ 0); z@@ e.@@ set@@ Time@@ (@@ libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ TEST_@@ TI@@ M@@ E); z@@ e.@@ set@@ Extra@@ (m@@ a@@ x@@ Length@@ Extra@@ ); out.@@ put@@ Next@@ E@@ n@@ try@@ (@@ z@@ e); out.@@ close@@ E@@ n@@ try@@ (); out.@@ close(); java.util.@@ z@@ i@@ p.@@ Zip@@ File z@@ ip@@ File = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (f@@ ); assert@@ Equal@@ s@@ (m@@ a@@ x@@ Length@@ Extra@@ .@@ length@@ , z@@ ip@@ File@@ .get@@ E@@ n@@ try@@ ("@@ x@@ "@@ ).get@@ Extra@@ ().@@ length); z@@ ip@@ File@@ .@@ close(); }
private void o@@ ff@@ er@@ In@@ stall@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Ser@@ i@@ v@@ ce@@ On@@ ce@@ () { if ((m@@ Ser@@ vices@@ C@@ ate@@ gor@@ y@@ .get@@ Pre@@ ference@@ (0@@ )) != (m@@ No@@ Ser@@ vices@@ Message@@ Pre@@ ference@@ )) { return@@ ; } java.lang.String s@@ cre@@ en@@ read@@ er@@ Mark@@ et@@ Lin@@ k = android.os.@@ System@@ Properties@@ .get@@ (com.android.@@ setting@@ s.@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Setting@@ s.@@ S@@ Y@@ S@@ TE@@ M@@ _P@@ RO@@ P@@ ER@@ TY@@ _M@@ AR@@ KE@@ T_@@ UR@@ L, com.android.@@ setting@@ s.@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Setting@@ s.@@ DE@@ FA@@ UL@@ T_@@ S@@ C@@ RE@@ EN@@ RE@@ AD@@ ER@@ _M@@ AR@@ KE@@ T_@@ L@@ IN@@ K@@ ); android.net.@@ Ur@@ i m@@ ark@@ et@@ Ur@@ i = android.net.@@ U@@ ri@@ .@@ parse@@ (s@@ cre@@ en@@ read@@ er@@ Mark@@ et@@ Link@@ ); android.content.@@ Int@@ ent m@@ ark@@ et@@ Int@@ ent = new android.content.@@ Intent@@ (android.content.@@ Int@@ ent.@@ AC@@ TION_@@ V@@ I@@ E@@ W@@ , m@@ ark@@ et@@ U@@ ri@@ ); if ((@@ get@@ Package@@ Manager@@ ().@@ res@@ ol@@ ve@@ Activity@@ (m@@ ark@@ et@@ Intent@@ , 0@@ )) == null@@ ) { return@@ ; } android.content.@@ S@@ har@@ ed@@ Pre@@ ference@@ s pre@@ ference@@ s = get@@ Activity@@ ().get@@ Pre@@ feren@@ ces@@ (@@ Context.@@ M@@ OD@@ E_@@ P@@ R@@ I@@ V@@ A@@ TE@@ ); final boolean o@@ ff@@ er@@ In@@ stall@@ Ser@@ vice = !@@ (p@@ re@@ feren@@ ces@@ .get@@ Boole@@ an@@ (com.android.@@ setting@@ s.@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Setting@@ s.@@ KE@@ Y_@@ IN@@ STA@@ L@@ L_@@ AC@@ CE@@ SS@@ I@@ B@@ IL@@ ITY@@ _S@@ ER@@ VIC@@ E_@@ O@@ F@@ F@@ ER@@ ED@@ _@@ ON@@ CE@@ , false@@ )); if (o@@ ff@@ er@@ In@@ stall@@ Service@@ ) { pre@@ feren@@ ces.@@ ed@@ it@@ ().@@ put@@ Boole@@ an@@ (com.android.@@ setting@@ s.@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Setting@@ s.@@ KE@@ Y_@@ IN@@ STA@@ L@@ L_@@ AC@@ CE@@ SS@@ I@@ B@@ IL@@ ITY@@ _S@@ ER@@ VIC@@ E_@@ O@@ F@@ ER@@ ED@@ _@@ ON@@ CE@@ , true@@ ).@@ com@@ m@@ it@@ (); sho@@ w@@ Di@@ alo@@ g@@ (com.android.@@ setting@@ s.@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Setting@@ s.@@ DI@@ AL@@ O@@ G@@ _@@ ID@@ _N@@ O@@ _@@ AC@@ CE@@ SS@@ I@@ B@@ IL@@ ITY@@ _S@@ ER@@ VIC@@ E@@ S@@ ); } }
public <@@ T@@ > java.lang.String get@@ As@@ String(@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ config.@@ id.@@ Property@@ Id@@ <@@ T@@ > pro@@ per@@ ty@@ Id);
@org.junit.Test public void test@@ Dependenc@@ y@@ 00@@ 2@@ () throw@@ s java.lang.Exception { com.android.jack.test.@@ hel@@ per.@@ In@@ crement@@ al@@ Test@@ Hel@@ p@@ er it@@ e = new com.android.jack.test.@@ hel@@ per.@@ In@@ crement@@ al@@ Test@@ Hel@@ per@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ ()); ite@@ .add@@ Java@@ File@@ ("@@ jack.@@ in@@ crement@@ al@@ ", "@@ A@@ .@@ java@@ ", (@@ "@@ package jack.@@ in@@ crement@@ al@@ ; \n@@ " + (@@ "@@ public class A { } \n@@ " + "@@ class B { } \n@@ "@@ ))); ite@@ .@@ in@@ crement@@ al@@ Build@@ From@@ Folder@@ (); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 2, ite@@ .get@@ J@@ ay@@ ce@@ Count@@ ()); ite@@ .add@@ Java@@ File@@ ("@@ jack.@@ in@@ crement@@ al@@ ", "@@ A@@ .@@ java@@ ", (@@ "@@ package jack.@@ in@@ crement@@ al@@ ; \n@@ " + "@@ public class A { }@@ \n@@ ")); ite@@ .@@ in@@ crement@@ al@@ Build@@ From@@ Folder@@ (); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 1, ite@@ .get@@ J@@ ay@@ ce@@ Count@@ ()); }
@java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ model.@@ Default@@ Android@@ Bin@@ ar@@ y b@@ in@@ ary@@ ) { java.util.Collection@@ <@@ org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ S@@ har@@ ed@@ Library@@ Bin@@ ary@@ Spec@@ > native@@ Bin@@ ar@@ i@@ es = com.android.build.gradle.@@ model.@@ N@@ dk@@ Comp@@ on@@ ent@@ Mode@@ l@@ P@@ lu@@ gin@@ .get@@ Native@@ Bin@@ ar@@ i@@ es(@@ librar@@ y@@ , b@@ in@@ ary@@ .get@@ Build@@ Type@@ (), b@@ in@@ ary@@ .get@@ Pro@@ duct@@ Flavor@@ s()); b@@ in@@ ary@@ .get@@ Native@@ Bin@@ ar@@ ies@@ ().@@ add@@ All@@ (@@ native@@ Bin@@ ar@@ ies@@ ); for (@@ org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ S@@ har@@ ed@@ Library@@ Bin@@ ary@@ S@@ pe@@ c native@@ B@@ in : native@@ Bin@@ ar@@ i@@ es) { com.android.build.gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Configur@@ ation.@@ config@@ ure@@ Bin@@ ary@@ (@@ native@@ Bin@@ ary@@ , build@@ Dir@@ , b@@ in@@ ary@@ .get@@ Merg@@ ed@@ N@@ dk@@ Config@@ (), n@@ dk@@ Handler@@ ); } }
@java.lang.Override public boolean equals(@@ java.lang.Object o@@ ) { if (@@ o instanceof android.net.Network@@ Stat@@ s.@@ E@@ n@@ try@@ ) { final android.net.Network@@ Stat@@ s.@@ E@@ n@@ try e = ((@@ android.net.Network@@ Stat@@ s.@@ E@@ n@@ try@@ ) (o@@ )); return ((((@@ ((((@@ uid@@ ) == (@@ e.@@ uid@@ )) && ((@@ set@@ ) == (@@ e.@@ set@@ ))) && ((@@ t@@ ag@@ ) == (@@ e.@@ t@@ ag@@ ))) && (@@ (@@ default@@ Network@@ ) == (e@@ .@@ default@@ Network@@ ))) && ((m@@ eter@@ ed@@ ) == (@@ e.@@ m@@ eter@@ ed@@ ))) && ((@@ ro@@ am@@ ing@@ ) == (@@ e.@@ ro@@ am@@ ing@@ ))) && ((@@ r@@ x@@ Bytes@@ ) == (@@ e.@@ r@@ x@@ Bytes@@ ))) && ((@@ r@@ x@@ Packet@@ s) == (@@ e.@@ r@@ x@@ Packet@@ s@@ ))) && ((@@ t@@ x@@ Bytes@@ ) == (@@ e.@@ t@@ x@@ Bytes@@ ))) && ((@@ t@@ x@@ Packet@@ s) == (@@ e.@@ t@@ x@@ Packet@@ s@@ ))) && ((@@ o@@ per@@ ation@@ s) == (@@ e.@@ o@@ per@@ ation@@ s@@ ))) && (@@ if@@ a@@ ce.@@ equals(@@ e@@ .@@ if@@ a@@ ce@@ )); } return false@@ ; }
protected void close@@ () throw@@ s java.io.IOException { synchronized@@ (f@@ d@@ Lock) { if (((@@ f@@ d@@ ) != null@@ ) && (f@@ d.@@ valid@@ ())) { if (!(@@ str@@ eam@@ )) { s@@ un@@ .@@ net.@@ Resource@@ Manager.@@ a@@ f@@ ter@@ U@@ dp@@ C@@ lose@@ (); } if ((@@ f@@ d@@ U@@ se@@ Count@@ ) == 0) { if (c@@ lose@@ P@@ end@@ ing@@ ) { return@@ ; } close@@ P@@ end@@ ing = true@@ ; try { s@@ ocket@@ Pre@@ C@@ lose@@ (); } final@@ l@@ y { s@@ ocket@@ C@@ lose@@ (); } return@@ ; } else { if (!@@ (c@@ lose@@ P@@ end@@ ing@@ )) { close@@ P@@ end@@ ing = true@@ ; (f@@ d@@ U@@ se@@ Count@@ )@@ --@@ ; s@@ ocket@@ Pre@@ C@@ lose@@ (); } } } } }
protected void t@@ _@@ Format@@ (@@ int count@@ , java.lang.Object ob@@ ject@@ , java.text.@@ For@@ ma@@ t for@@ mat@@ , java.util.@@ V@@ ec@@ tor@@ <@@ org.apache.harmony.@@ tests.@@ java.text.@@ Sup@@ port@@ _@@ Format@@ .@@ Field@@ Cont@@ ain@@ er@@ > expected@@ Result@@ s) { java.util.@@ V@@ ec@@ tor@@ <@@ org.apache.harmony.@@ tests.@@ java.text.@@ Sup@@ port@@ _@@ Format@@ .@@ Field@@ Cont@@ ain@@ er@@ > result@@ s = org.apache.harmony.@@ tests.@@ java.text.@@ Sup@@ port@@ _@@ Format@@ .@@ find@@ Field@@ s@@ (@@ for@@ mat@@ .@@ for@@ mat@@ To@@ Char@@ ac@@ ter@@ I@@ terator@@ (@@ ob@@ ject@@ )); assert@@ Equal@@ s(@@ expected@@ Result@@ s.@@ size@@ (), result@@ s.@@ size@@ ()); for (@@ int i = 0; i < (@@ result@@ s.@@ size@@ ()); ++@@ i@@ ) { assert@@ Equal@@ s@@ (("@@ " + i@@ ), expected@@ Result@@ s.get@@ (i@@ ), result@@ s.get@@ (i@@ )); } }
@org.junit.@@ B@@ e@@ for@@ e@@ Clas@@ s public static void in@@ it@@ () throw@@ s java.io.IO@@ Exception, java.lang.Exception { com.android.jack.@@ m@@ ult@@ id@@ ex@@ .@@ Multi@@ Dex@@ O@@ ver@@ f@@ low@@ Test@@ s.@@ annot@@ ation@@ s = com.android.jack.@@ m@@ ult@@ id@@ ex@@ .@@ Multi@@ Dex@@ O@@ ver@@ f@@ low@@ Test@@ s.@@ pre@@ par@@ e@@ Annot@@ ation@@ s(); }
private void start@@ Listen@@ For@@ Phone@@ State@@ () { if ((m@@ Phone@@ State@@ Listener@@ ) != null@@ ) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Phone@@ State.@@ TAG, "@@ start@@ Listen@@ For@@ Phone@@ State@@ , al@@ read@@ y list@@ en@@ ing@@ "); return@@ ; } int sub@@ Id = android.telephony.@@ Sub@@ s@@ cription@@ Manager.get@@ Default@@ Sub@@ s@@ cription@@ Id@@ (); if (!@@ (android.@@ telephony.@@ Sub@@ s@@ cription@@ Manager.@@ is@@ Valid@@ Sub@@ s@@ cription@@ Id@@ (s@@ ub@@ Id@@ ))) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Phone@@ State.@@ TAG, ("@@ start@@ Listen@@ For@@ Phone@@ State@@ , in@@ va@@ li@@ d sub@@ s@@ cri@@ pti@@ on I@@ D " + sub@@ Id@@ )); return@@ ; } int event@@ s = get@@ Telephony@@ Event@@ s@@ To@@ Listen@@ (); if (@@ event@@ s == (android.@@ telephony.@@ Phone@@ State@@ Listen@@ er.@@ LIS@@ TE@@ N@@ _N@@ ON@@ E@@ )) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Phone@@ State.@@ TAG, "@@ start@@ Listen@@ For@@ Phone@@ State@@ , n@@ o ev@@ ent to list@@ en@@ "); return@@ ; } m@@ Phone@@ State@@ Listen@@ er = new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Phone@@ State.@@ Headset@@ Phone@@ State@@ Listener@@ (s@@ ub@@ Id, m@@ Headset@@ Service@@ .get@@ StateMach@@ in@@ es@@ Thread@@ Loo@@ per@@ ()); m@@ Telephony@@ Manager.@@ list@@ en@@ (m@@ Phone@@ State@@ Listener@@ , event@@ s); if ((@@ event@@ s & (android.@@ telephony.@@ Phone@@ State@@ Listen@@ er.@@ LIS@@ TE@@ N@@ _S@@ I@@ G@@ N@@ AL@@ _S@@ T@@ RE@@ N@@ G@@ TH@@ S@@ )) != 0) { m@@ Telephony@@ Manager.@@ set@@ Rad@@ io@@ In@@ d@@ ic@@ ation@@ Up@@ date@@ Mode@@ (@@ Telephony@@ Manager.@@ IN@@ D@@ IC@@ A@@ TION_@@ F@@ IL@@ TER@@ _S@@ I@@ G@@ N@@ AL@@ _S@@ T@@ RE@@ N@@ G@@ TH@@ , Telephony@@ Manager.@@ IN@@ D@@ IC@@ A@@ TION_@@ U@@ P@@ DA@@ TE_@@ M@@ OD@@ E_@@ I@@ G@@ N@@ OR@@ E_@@ S@@ C@@ RE@@ EN@@ _@@ O@@ F@@ ); } }
@java.lang.Override @java.lang.Override public java.lang.String get@@ Property@@ (java.lang.String key@@ ) { try { return man@@ ag@@ er.get@@ Vari@@ able@@ (@@ key@@ ); } catch (java.io.IOException e) { com.android.@@ mon@@ key@@ run@@ ner.@@ ad@@ b.@@ Adb@@ Mon@@ key@@ Device.@@ LOG@@ .@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ SE@@ V@@ ER@@ E, ("@@ Un@@ able to ge@@ t vari@@ able@@ : " + key@@ ), e); return null@@ ; } }
boolean do@@ B@@ ind@@ () { android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (android.@@ bluetooth.@@ I@@ Bluetooth@@ He@@ ar@@ ing@@ A@@ id@@ .@@ class@@ .getName@@ ()); android.content.@@ Comp@@ on@@ ent@@ Name com@@ p = int@@ ent.@@ res@@ ol@@ ve@@ System@@ Service@@ (m@@ Contex@@ t.get@@ Package@@ Manager@@ (), 0); int@@ ent.@@ set@@ Comp@@ on@@ ent@@ (@@ comp@@ ); if ((@@ com@@ p == null@@ ) || (!(m@@ Context.@@ b@@ ind@@ Service@@ As@@ User@@ (@@ int@@ ent@@ , m@@ Connection@@ , 0, android.os.@@ Pro@@ ces@@ s.@@ my@@ User@@ Handle@@ ()@@ )@@ ))) { android.util.Log.e@@ (android.bluetooth.Bluetooth@@ He@@ ar@@ ing@@ A@@ id.@@ TAG, ("@@ Co@@ ul@@ d not b@@ in@@ d to B@@ luetoo@@ th He@@ ar@@ ing A@@ id Ser@@ vice wit@@ h " + int@@ ent@@ )); return false@@ ; } return true@@ ; }
@java.lang.Override public void send@@ (@@ java.net.@@ Dat@@ ag@@ ram@@ Pack@@ et pack@@ et@@ ) throw@@ s java.io.IOException { if (!(@@ chan@@ nel@@ Imp@@ l.@@ is@@ Block@@ ing@@ ())) { throw new java.nio.@@ channe@@ ls.@@ Illegal@@ Block@@ ing@@ Mode@@ Exception@@ (); } boolean w@@ as@@ B@@ o@@ un@@ d = is@@ B@@ ound@@ (); super@@ .@@ send@@ (p@@ ack@@ et@@ ); if (!@@ w@@ as@@ B@@ ound@@ ) { chan@@ nel@@ Imp@@ l.@@ on@@ B@@ ound@@ (@@ false@@ ); } }
@java.lang.Override public boolean un@@ p@@ lu@@ g@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { if (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Service.@@ Bluetooth@@ H@@ id@@ Device@@ B@@ ind@@ er.@@ TAG, ("@@ un@@ p@@ lu@@ g@@ ()@@ : device@@ =@@ " + device@@ )); } com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Ser@@ vice ser@@ vice = get@@ Service@@ (); if (@@ ser@@ vice == null@@ ) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ De@@ v@@ Service.@@ Bluetooth@@ H@@ id@@ Device@@ B@@ ind@@ er.@@ TAG, "@@ un@@ p@@ lu@@ g@@ : H@@ id@@ De@@ v@@ Ser@@ vice is null@@ "); return false@@ ; } return service@@ .@@ un@@ p@@ lu@@ g@@ (device@@ ); }
public void on@@ P@@ in@@ En@@ ter@@ ed@@ (com.android.@@ phon@@ e.@@ setting@@ s.@@ f@@ d@@ n@@ .@@ E@@ d@@ it@@ P@@ in@@ Pre@@ feren@@ ce pre@@ ference@@ , boolean posi@@ tive@@ Result@@ ) { if (p@@ re@@ feren@@ ce == (m@@ B@@ utton@@ Change@@ P@@ W@@ )) { update@@ P@@ W@@ Change@@ State@@ (@@ posi@@ tive@@ Result@@ ); } else if (p@@ re@@ feren@@ ce == (m@@ B@@ utton@@ De@@ a@@ All@@ )) { de@@ ac@@ ti@@ v@@ ate@@ All@@ B@@ ar@@ r@@ ing@@ (@@ posi@@ tive@@ Result@@ ); } }
public native void request@@ G@@ C@@ ();
public boolean send@@ V@@ e@@ n@@ do@@ r@@ S@@ pe@@ c@@ if@@ ic@@ Result@@ Code@@ (android.bluetooth.Bluetooth@@ Device device@@ , java.lang.String command@@ , java.lang.String arg@@ ) { if (android.bluetooth.Bluetooth@@ Headset@@ .@@ DBG) { android.@@ bluetooth.Bluetooth@@ Headset@@ .@@ log@@ ("@@ send@@ V@@ e@@ n@@ do@@ r@@ S@@ pe@@ c@@ if@@ ic@@ Result@@ Code@@ ()@@ "); } if (@@ com@@ man@@ d == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ com@@ man@@ d is null@@ "); } final android.@@ bluetooth.@@ I@@ Bluetooth@@ Head@@ set ser@@ vice = m@@ Service@@ ; if (((@@ ser@@ vice != null@@ ) && (is@@ Enabled@@ ())) && (is@@ Valid@@ Device@@ (device@@ ))) { try { return service@@ .@@ send@@ V@@ e@@ n@@ do@@ r@@ S@@ pe@@ c@@ if@@ ic@@ Result@@ Code@@ (device@@ , command@@ , arg@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.bluetooth.Bluetooth@@ Headset@@ .@@ TAG, android.util.Log.@@ get@@ Stack@@ Tra@@ ce@@ String@@ (@@ new java.lang.@@ Throw@@ able@@ ())); } } if (@@ ser@@ vice == null@@ ) { android.util.Log.@@ w@@ (android.bluetooth.Bluetooth@@ Headset@@ .@@ TAG, "@@ Prox@@ y not att@@ ach@@ ed to service@@ "); } return false@@ ; }
private boolean is@@ W@@ in@@ do@@ w@@ s@@ Ex@@ ec@@ ut@@ able@@ (@@ org.eclipse.@@ core.@@ run@@ tim@@ e.@@ IP@@ ath command@@ Path@@ ) { java.lang.String ex@@ t = command@@ Path@@ .get@@ File@@ Ex@@ t@@ ension@@ (); if (@@ has@@ W@@ in@@ do@@ w@@ s@@ Ex@@ ec@@ ut@@ able@@ Ex@@ t@@ ension@@ (@@ ext@@ )) { return true@@ ; } ex@@ t = find@@ W@@ in@@ do@@ w@@ s@@ Ex@@ ec@@ ut@@ able@@ Ex@@ t@@ ension@@ (@@ command@@ Path@@ ); if (@@ ex@@ t != null@@ ) { return true@@ ; } return false@@ ; }
private void on@@ Capabilities@@ (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er p@@ r@@ int@@ er, com.android.@@ b@@ ip@@ s.@@ j@@ n@@ i.@@ Local@@ P@@ r@@ int@@ er@@ Capabili@@ ti@@ es cap@@ abili@@ ties@@ ) { if ((m@@ Listener@@ ) == null@@ ) { return@@ ; } if (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ TAG, ((("@@ P@@ r@@ int@@ er " + p@@ r@@ int@@ er@@ ) + " cap@@ s@@ =@@ ") + cap@@ abili@@ ties@@ )); if (c@@ ap@@ abili@@ ti@@ es == null@@ ) { m@@ Listen@@ er.@@ on@@ Connection@@ Comp@@ lete@@ (@@ null@@ ); st@@ op@@ (); } else { com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er p@@ 2@@ p@@ P@@ r@@ int@@ er = new com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er@@ (p@@ r@@ int@@ er.@@ u@@ uid@@ , p@@ r@@ int@@ er.@@ name@@ , com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ P2p@@ Dis@@ cover@@ y.@@ to@@ Path@@ (m@@ P@@ e@@ er@@ ), p@@ r@@ int@@ er.@@ loc@@ ation@@ ); m@@ Listen@@ er.@@ on@@ Connection@@ Comp@@ lete@@ (p@@ 2@@ p@@ P@@ r@@ int@@ er@@ ); } }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { final int u@@ id = int@@ ent.get@@ Int@@ Extra@@ (@@ Int@@ ent.@@ EX@@ TR@@ A@@ _@@ U@@ ID@@ , (-1@@ )); java.lang.String ac@@ tion = int@@ ent.get@@ Action@@ (); if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ TAG, ("@@ Int@@ ent action@@ : " + action@@ )); if (@@ u@@ id != (-1@@ )) { boolean re@@ pla@@ ce@@ d = (@@ int@@ ent.get@@ Boole@@ an@@ Extra@@ (@@ Int@@ ent.@@ EX@@ TR@@ A@@ _RE@@ P@@ L@@ AC@@ ING@@ , false@@ )) && ((@@ Int@@ ent.@@ AC@@ TION@@ _P@@ AC@@ K@@ A@@ G@@ E_@@ AD@@ DE@@ D@@ .@@ equals(@@ action@@ )) || (@@ Int@@ ent.@@ AC@@ TION@@ _P@@ AC@@ K@@ A@@ G@@ E_@@ RE@@ M@@ O@@ V@@ ED@@ .@@ equals(@@ action@@ ))); if (!@@ re@@ pla@@ ce@@ d@@ ) { int current@@ U@@ se@@ r = android.app.@@ Activity@@ Manager.get@@ Current@@ User@@ (); if (c@@ urrent@@ U@@ se@@ r == (android.os.@@ User@@ Handle@@ .get@@ User@@ Id@@ (@@ uid@@ ))) { in@@ valid@@ ate@@ Cach@@ e@@ (android.os.@@ User@@ Handle@@ .get@@ User@@ Id@@ (@@ uid@@ )); } else { } } else { if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ TAG, "@@ I@@ gn@@ or@@ ing package int@@ ent du@@ e to package be@@ ing re@@ pla@@ ce@@ d.@@ "); } } }
void se@@ al@@ () { synchronized@@ (m@@ Config@@ s) { m@@ RO@@ Lis@@ t = java.util.Collection@@ s.@@ un@@ mo@@ d@@ if@@ i@@ able@@ List@@ (m@@ Config@@ s); } }
@javax.annotation.@@ N@@ on@@ null private static com.android.jack.@@ back@@ end@@ .@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ File@@ Imp@@ or@@ ter get@@ J@@ ay@@ ce@@ File@@ Imp@@ or@@ ter@@ (@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.io.File@@ > ja@@ y@@ ce@@ Imp@@ ort@@ , @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ Run@@ n@@ able@@ H@@ oo@@ k@@ s h@@ oo@@ k@@ s, @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ S@@ es@@ sion session@@ ) throw@@ s com.android.jack.@@ Library@@ Exception { java.util.List<@@ com.android.jack.library.@@ Input@@ Library@@ > input@@ Librar@@ i@@ es = new java.util.ArrayList<@@ com.android.jack.library.@@ Input@@ Library@@ >@@ (@@ ja@@ y@@ ce@@ Imp@@ or@@ t.@@ size@@ ()); com.android.sched.util.@@ config.@@ Ref@@ le@@ ct@@ Fa@@ ctory@@ <@@ com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Package@@ Load@@ er@@ > fa@@ ctor@@ y = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (com.android.jack.@@ Jack@@ .@@ I@@ M@@ P@@ OR@@ T_@@ P@@ O@@ L@@ IC@@ Y); for (@@ final java.io.File jack@@ File : ja@@ y@@ ce@@ Imp@@ ort@@ ) { try { com.android.sched.vfs.@@ Input@@ Root@@ V@@ Di@@ r v@@ Di@@ r = com.android.jack.@@ Jack@@ .@@ w@@ rap@@ As@@ V@@ Dir@@ (@@ jack@@ File@@ , h@@ oo@@ k@@ s); com.android.jack.library.@@ Input@@ Librar@@ y input@@ Jack@@ Librar@@ y = com.android.jack.library.@@ Input@@ Library@@ Fa@@ ctory@@ .get@@ Jack@@ Library@@ (@@ v@@ Dir@@ ); input@@ Librar@@ i@@ es.@@ add@@ (in@@ put@@ Jack@@ Library@@ ); com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Package@@ Load@@ er ro@@ o@@ t@@ P@@ Load@@ er = fa@@ ctor@@ y.@@ create@@ (in@@ put@@ Jack@@ Library@@ , session@@ .get@@ P@@ h@@ an@@ to@@ m@@ Loo@@ k@@ up@@ ()); session@@ .get@@ To@@ p@@ Level@@ Package@@ ().@@ add@@ Load@@ er(@@ ro@@ o@@ t@@ P@@ Load@@ er@@ ); session@@ .add@@ Imp@@ ort@@ Source@@ (@@ v@@ Dir@@ ); } catch (java.io.IOException io@@ Exception@@ ) { throw new com.android.jack.@@ Library@@ Exception(("@@ Error import@@ ing ja@@ c@@ k contain@@ er@@ : " + (@@ io@@ Exception@@ .get@@ Message@@ ()@@ )), io@@ Exception@@ ); } } return new com.android.jack.@@ back@@ end@@ .@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ File@@ Imp@@ or@@ ter@@ (in@@ put@@ Librar@@ ies@@ ); }
public void test_@@ get@@ Channel@@ () throw@@ s java.lang.Exception { try (@@ java.net.@@ Dat@@ ag@@ ram@@ S@@ ock@@ et d@@ s = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ ()) { assert@@ Null@@ (d@@ s.get@@ Channel@@ ()); } try (@@ org.apache.harmony.@@ tests.@@ java.net.@@ Dat@@ ag@@ ram@@ Socket@@ Test.@@ Dat@@ ag@@ ram@@ Ser@@ ve@@ r ser@@ ve@@ r = new org.apache.harmony.@@ tests.@@ java.net.@@ Dat@@ ag@@ ram@@ Socket@@ Test.@@ Dat@@ ag@@ ram@@ Server@@ (@@ LO@@ OP@@ B@@ AC@@ K@@ )@@ ;@@ java.net.@@ Dat@@ ag@@ ram@@ S@@ ock@@ et d@@ s = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ (0@@ )) { assert@@ Null@@ (d@@ s.get@@ Channel@@ ()); d@@ s.@@ dis@@ connect@@ (); d@@ s.@@ close(); } try (@@ java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l channe@@ l = java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l.@@ open@@ ()@@ ;@@ java.net.@@ Dat@@ ag@@ ram@@ S@@ ock@@ et s@@ ock@@ et = channe@@ l.@@ s@@ ocket@@ ()) { assert@@ Equal@@ s(@@ chan@@ nel@@ , s@@ ocket@@ .get@@ Channel@@ ()); } }
@java.lang.Override public java.@@ aw@@ t.@@ Comp@@ on@@ ent get@@ List@@ C@@ ell@@ Render@@ er@@ Comp@@ on@@ ent@@ (@@ javax.@@ sw@@ ing.@@ J@@ Lis@@ t list@@ , java.lang.Object value@@ , int index@@ , boolean is@@ Sele@@ c@@ ted@@ , boolean cel@@ l@@ Has@@ F@@ o@@ c@@ u@@ s) { if (!(@@ valu@@ e instanceof com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ Item@@ )) { return null@@ ; } javax.@@ sw@@ ing.@@ J@@ P@@ an@@ e@@ l main@@ P@@ an@@ e@@ l = new javax.@@ sw@@ ing.@@ J@@ P@@ an@@ el@@ (@@ new java.@@ aw@@ t.@@ F@@ low@@ Lay@@ out@@ (@@ java.@@ aw@@ t.@@ F@@ low@@ Lay@@ out.@@ LE@@ F@@ T, 1@@ 0, 10@@ )); main@@ P@@ an@@ e@@ l.@@ set@@ Min@@ im@@ um@@ Size@@ (@@ MA@@ IN@@ _P@@ AN@@ E@@ L_@@ DI@@ M@@ EN@@ SI@@ ON@@ ); main@@ P@@ an@@ e@@ l.@@ set@@ A@@ li@@ gn@@ ment@@ X@@ (@@ java.@@ aw@@ t.@@ Comp@@ on@@ ent.@@ LE@@ F@@ T_@@ AL@@ I@@ G@@ N@@ M@@ EN@@ T@@ ); final java.@@ aw@@ t.@@ Co@@ lo@@ r b@@ g = (is@@ Sele@@ c@@ ted@@ ) ? AC@@ TIV@@ E_@@ C@@ O@@ LO@@ R : com@@ .@@ int@@ el@@ li@@ j.@@ util.@@ ui.@@ U@@ I@@ Util.@@ get@@ List@@ B@@ ack@@ gro@@ und@@ (); final java.@@ aw@@ t.@@ Co@@ lo@@ r f@@ g = (is@@ Sele@@ c@@ ted@@ ) ? com@@ .@@ int@@ el@@ li@@ j.@@ util.@@ ui.@@ U@@ I@@ Util.@@ get@@ List@@ Selection@@ For@@ e@@ gro@@ und@@ () : com@@ .@@ int@@ el@@ li@@ j.@@ util.@@ ui.@@ U@@ I@@ Util.@@ get@@ List@@ For@@ e@@ gro@@ und@@ (); main@@ P@@ an@@ e@@ l.@@ set@@ B@@ ack@@ gro@@ und@@ (b@@ g@@ ); main@@ P@@ an@@ e@@ l.@@ set@@ For@@ e@@ gro@@ und@@ (f@@ g@@ ); java.@@ aw@@ t.@@ Im@@ age im@@ age@@ I@@ co@@ n = ((@@ com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ Item@@ ) (@@ value@@ )@@ ).get@@ User@@ P@@ i@@ ct@@ ure@@ (); main@@ P@@ an@@ e@@ l.@@ add@@ (@@ new com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ C@@ ell@@ Render@@ er.@@ Image@@ P@@ an@@ el@@ (@@ im@@ age@@ I@@ con@@ )); main@@ P@@ an@@ e@@ l.@@ add(@@ create@@ Text@@ Display@@ (is@@ Sele@@ c@@ ted@@ , ((@@ com.google.gct.@@ log@@ in@@ .@@ ui.@@ User@@ s@@ List@@ Item@@ ) (@@ value@@ )))); return main@@ P@@ an@@ el@@ ; }
private android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Res@@ ult ve@@ r@@ if@@ y@@ And@@ Cap@@ t@@ ure@@ Result@@ (android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Requ@@ est request@@ ) { m@@ Provid@@ er.@@ request@@ Re@@ com@@ m@@ end@@ ation@@ (@@ request@@ , m@@ Callback@@ ); org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ <@@ android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Result@@ > result@@ Cap@@ tor = org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ .@@ for@@ Clas@@ s(@@ android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Result@@ .@@ class@@ ); ve@@ r@@ if@@ y@@ (m@@ Callback@@ ).@@ on@@ Result@@ (@@ result@@ Cap@@ tor.@@ cap@@ t@@ ure@@ ()); return result@@ Cap@@ tor@@ .get@@ Value@@ (); }
private android.util.@@ Siz@@ e update@@ Ma@@ x@@ Size@@ (@@ int size@@ Li@@ m@@ it@@ , android.util.@@ Siz@@ e de@@ f@@ Siz@@ e) { android.@@ view@@ .@@ W@@ in@@ do@@ w@@ Manager w@@ in@@ do@@ w@@ Manager = ((@@ android.@@ view@@ .@@ W@@ in@@ do@@ w@@ Manager@@ ) (get@@ Context@@ ().get@@ System@@ Service@@ (android.content.@@ Context.@@ W@@ IN@@ D@@ O@@ W@@ _S@@ ER@@ VIC@@ E@@ ))); android.@@ view@@ .@@ Dis@@ pla@@ y dis@@ pla@@ y = w@@ in@@ do@@ w@@ Manager.get@@ Default@@ Display@@ (); int wid@@ th = dis@@ play@@ .get@@ W@@ id@@ th@@ (); int he@@ ig@@ h@@ t = dis@@ play@@ .get@@ He@@ ig@@ ht@@ (); if (@@ he@@ ig@@ h@@ t > wid@@ th@@ ) { he@@ ig@@ h@@ t = wid@@ th@@ ; wid@@ th = dis@@ play@@ .get@@ He@@ ig@@ ht@@ (); } if ((@@ (m@@ Or@@ der@@ ed@@ Pre@@ view@@ Siz@@ es) != null@@ ) && (@@ size@@ Li@@ m@@ i@@ t == (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ R@@ o@@ bu@@ st@@ n@@ ess@@ Test.@@ Ma@@ x@@ Output@@ Siz@@ es.@@ P@@ RE@@ V@@ I@@ E@@ W@@ ))) { for (android.@@ util.@@ Siz@@ e siz@@ e : m@@ Or@@ der@@ ed@@ Pre@@ view@@ Siz@@ es) { if ((@@ wid@@ th >@@ = (@@ siz@@ e.get@@ W@@ id@@ th@@ ())) && (@@ he@@ ig@@ h@@ t >@@ = (@@ siz@@ e.get@@ He@@ ig@@ ht@@ ()))) return size@@ ; } } return de@@ f@@ Size@@ ; }
private void st@@ op@@ Ob@@ ex@@ Server@@ Session@@ () { if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ V@@ ER@@ B@@ O@@ SE@@ ) android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ Pb@@ a@@ p Ser@@ vice st@@ op@@ Ob@@ ex@@ Server@@ Session@@ "); com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Utils.@@ s@@ a@@ ve@@ Pb@@ ap@@ Param@@ s@@ (@@ this@@ , Bluetooth@@ Pb@@ ap@@ Utils.@@ pri@@ m@@ ary@@ Version@@ Coun@@ ter@@ , Bluetooth@@ Pb@@ ap@@ Utils.@@ sec@@ ond@@ ary@@ Version@@ Coun@@ ter@@ , Bluetooth@@ Pb@@ ap@@ Utils.@@ m@@ D@@ b@@ Id@@ ent@@ if@@ i@@ er.get@@ (), Bluetooth@@ Pb@@ ap@@ Utils.@@ cont@@ act@@ s@@ L@@ ast@@ Up@@ dat@@ ed@@ , Bluetooth@@ Pb@@ ap@@ Utils.@@ to@@ t@@ al@@ Field@@ s, Bluetooth@@ Pb@@ ap@@ Utils.@@ to@@ t@@ al@@ S@@ v@@ c@@ Field@@ s, Bluetooth@@ Pb@@ ap@@ Utils.@@ to@@ t@@ al@@ Cont@@ act@@ s); m@@ Session@@ Status@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ MS@@ G@@ _@@ AC@@ Q@@ U@@ I@@ R@@ E_@@ W@@ A@@ K@@ E_@@ LO@@ C@@ K@@ ); m@@ Session@@ Status@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ MS@@ G@@ _RE@@ LE@@ A@@ S@@ E_@@ W@@ A@@ K@@ E_@@ LO@@ C@@ K@@ ); if ((m@@ W@@ ake@@ Lock) != null@@ ) { m@@ W@@ ake@@ Lock@@ .@@ re@@ le@@ ase@@ (); m@@ W@@ ake@@ Loc@@ k = null@@ ; } if ((m@@ Server@@ Session@@ ) != null@@ ) { m@@ Server@@ Session@@ .@@ close(); m@@ Server@@ S@@ es@@ sion = null@@ ; } close@@ Connection@@ Socket@@ (); if (m@@ Adap@@ ter.@@ is@@ Enabled@@ ()) { start@@ Socket@@ Listener@@ s(); } set@@ State@@ (@@ Bluetooth@@ Pb@@ ap.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ ); }
private java.lang.String get@@ List@@ ing@@ Of@@ Dex@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File dex@@ ) throw@@ s java.io.IOException { assert dex.@@ is@@ File@@ (); java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); for (com.android.jack.@@ dx.@@ io.@@ Class@@ De@@ f de@@ f : new com.android.jack.@@ dx.@@ io.@@ Dex@@ Buffer@@ (@@ dex@@ )@@ .@@ class@@ De@@ f@@ s@@ ()) { java.lang.String type@@ Name = de@@ f@@ .get@@ Type@@ Name@@ (); sb.@@ append(@@ type@@ Name); sb.@@ append("@@ :@@ "); sb.@@ append(@@ Text@@ Utils.@@ L@@ IN@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); } return sb.@@ toString@@ (); }
@java.lang.Override public boolean is@@ Application@@ On@@ Icc@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Card@@ Application@@ Statu@@ s.@@ App@@ Type typ@@ e) { synchronized@@ (m@@ Lock) { java.lang.@@ Boole@@ an ret@@ Value = ((m@@ Uicc@@ Card@@ ) != null@@ ) ? m@@ Uicc@@ Card@@ .is@@ Application@@ On@@ Icc@@ (@@ typ@@ e) : false@@ ; return ret@@ Value@@ ; } }
@java.lang.Override public void provid@@ e@@ Con@@ stru@@ ctor@@ Argument@@ s(@@ java.util.List<@@ org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Value@@ > const@@ r@@ u@@ ctor@@ Argument@@ s) { long de@@ bug@@ ge@@ e@@ Class@@ Id = get@@ Class@@ ID@@ By@@ Sign@@ ature@@ (get@@ Debug@@ ge@@ e@@ Class@@ Sign@@ ature@@ ()); org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Value string@@ Buffer@@ Value = de@@ bug@@ ge@@ e@@ W@@ r@@ app@@ er.@@ vm@@ M@@ ir@@ ror@@ .get@@ Reference@@ Type@@ Value@@ (@@ de@@ bug@@ ge@@ e@@ Class@@ Id, string@@ Buffer@@ Field@@ Id); const@@ r@@ u@@ ctor@@ Argument@@ s.@@ add(@@ string@@ Buffer@@ Value@@ ); }
@java.lang.Override public java.lang.String toString@@ () { return new com.google.g@@ s@@ on@@ .@@ G@@ s@@ on@@ ().@@ to@@ J@@ s@@ on@@ (@@ new com.android.@@ de@@ v@@ tools.@@ server.@@ model.@@ R@@ est@@ Service@@ Mode@@ l@@ (@@ P@@ O@@ S@@ T, "@@ /@@ Sms@@ Manager@@ Service@@ ", new com.android.@@ de@@ v@@ tools.@@ server.@@ model.@@ Sms@@ Manager@@ Mode@@ l@@ ("@@ String@@ ").@@ toString@@ ())); }
private com.android.ide.common.@@ res@@ 2.@@ Resource@@ File create@@ Resource@@ File@@ (@@ @com.android.annotations.NonNull java.io.File file@@ , @com.android.annotations.NonNull com.android.ide.common.@@ res@@ 2.@@ Resource@@ Set@@ .@@ Folder@@ Data fo@@ l@@ der@@ Data@@ , @com.android.annotations.NonNull com.android.@@ uti@@ ls.@@ I@@ Logg@@ er logg@@ er@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ Merg@@ ing@@ Exception { if ((@@ fo@@ l@@ der@@ Data@@ .@@ typ@@ e) != null@@ ) { com.android.ide.common.@@ res@@ 2.@@ File@@ Resource@@ Name@@ Valid@@ ator@@ .@@ valid@@ ate@@ (file@@ , fo@@ l@@ der@@ Data@@ .@@ typ@@ e); java.lang.String name = com.android.ide.common.@@ res@@ 2.@@ Resource@@ Set@@ .getName@@ For@@ File@@ (file@@ ); if (m@@ Pre@@ process@@ or.@@ ne@@ ed@@ s@@ Pre@@ process@@ ing@@ (file@@ )) { return com.android.ide.common.@@ res@@ 2.@@ Resource@@ File@@ .@@ g@@ ener@@ ated@@ Fil@@ es(@@ file@@ , get@@ Resource@@ Item@@ s@@ For@@ Gener@@ ated@@ Fil@@ es(@@ file@@ ), fo@@ l@@ der@@ Data@@ .@@ qu@@ al@@ if@@ ier@@ s); } else { return new com.android.ide.common.@@ res@@ 2.@@ Resource@@ File@@ (file@@ , new com.android.ide.common.@@ res@@ 2.@@ Resource@@ Item@@ (@@ name@@ , fo@@ l@@ der@@ Data@@ .@@ type@@ , null@@ ), fo@@ l@@ der@@ Data@@ .@@ qu@@ al@@ if@@ ier@@ s); } } else { try { com.android.ide.common.@@ res@@ 2.@@ Value@@ Resource@@ Par@@ ser@@ 2 parse@@ r = new com.android.ide.common.@@ res@@ 2.@@ Value@@ Resource@@ Par@@ ser@@ 2@@ (file@@ ); java.util.List<@@ com.android.ide.common.@@ res@@ 2.@@ Resource@@ Item@@ > i@@ tem@@ s = par@@ ser.@@ parse@@ File@@ (); return new com.android.ide.common.@@ res@@ 2.@@ Resource@@ File@@ (file@@ , i@@ tem@@ s, fo@@ l@@ der@@ Data@@ .@@ qu@@ al@@ if@@ ier@@ s); } catch (com.android.ide.@@ common.@@ res@@ 2.@@ Merg@@ ing@@ Exception e) { logg@@ er.@@ error@@ (e@@ , "@@ Faile@@ d to par@@ se %@@ s", file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); throw e@@ ; } } }
@java.lang.Override protected void run@@ Test@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String test@@ Number@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String flag@@ Number@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String m@@ app@@ ing@@ Number@@ ) throw@@ s java.lang.Exception { java.io.File test@@ Fol@@ der = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Test@@ Root@@ Dir@@ (("@@ com.android.jack.@@ sh@@ ro@@ b.@@ test@@ " + test@@ Number@@ )); java.io.File ref@@ Fol@@ der = new java.io.File@@ (@@ test@@ Folder@@ , "@@ ref@@ s@@ Se@@ ed@@ "); java.io.File c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ File@@ ("@@ se@@ ed@@ s", "@@ .@@ t@@ xt@@ "); java.io.File ref@@ Output@@ Se@@ ed@@ s = new java.io.File@@ (re@@ f@@ Folder@@ , (("@@ expected@@ -@@ " + flag@@ Number@@ ) + "@@ .@@ t@@ xt@@ ")); com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in toolch@@ a@@ in = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); java.io.File se@@ ed@@ s@@ File = add@@ Option@@ s@@ To@@ Flag@@ s@@ File@@ (@@ new java.io.File@@ (@@ test@@ Folder@@ , ("@@ pro@@ gu@@ ard@@ .@@ flag@@ s@@ " + flag@@ Number@@ )), test@@ Folder@@ , (@@ " -@@ p@@ r@@ int@@ se@@ ed@@ s " + (c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()))); toolchain.@@ add@@ Pro@@ gu@@ ard@@ Flag@@ s(@@ se@@ ed@@ s@@ File@@ ); com.android.jack.test.@@ hel@@ per.@@ Source@@ To@@ Dex@@ Comp@@ ar@@ is@@ on@@ Test@@ Hel@@ p@@ er en@@ v = new com.android.jack.test.@@ hel@@ per.@@ Source@@ To@@ Dex@@ Comp@@ ar@@ is@@ on@@ Test@@ Hel@@ per@@ (@@ new java.io.File@@ (@@ test@@ Folder@@ , "@@ jack@@ ")); en@@ v@@ .set@@ C@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s(@@ toolch@@ ain@@ ); en@@ v@@ .set@@ Reference@@ Test@@ Too@@ l@@ s@@ (@@ new com.android.jack.test.@@ toolchain.@@ D@@ um@@ my@@ Too@@ lch@@ ain@@ ()); en@@ v@@ .@@ run@@ Test@@ (@@ new com.android.jack.test.@@ com@@ par@@ ator@@ .@@ Comp@@ ar@@ ator@@ Se@@ ed@@ s(@@ ref@@ Output@@ Se@@ ed@@ s, c@@ and@@ id@@ ate@@ Output@@ Se@@ ed@@ s@@ )); }
static com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est ob@@ tain@@ (@@ int request@@ , android.os.@@ Message result@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = null@@ ; synchronized@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ P@@ oo@@ l@@ S@@ ync@@ ) { if ((@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ P@@ oo@@ l@@ ) != null@@ ) { r@@ r = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ P@@ oo@@ l@@ ; com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ P@@ oo@@ l = r@@ .m@@ Next@@ ; r@@ .m@@ N@@ ex@@ t = null@@ ; (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ P@@ oo@@ l@@ Size@@ )@@ --@@ ; } } if (r@@ r == null@@ ) { r@@ r = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Request@@ (); } r@@ .m@@ Ser@@ i@@ al = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est.@@ s@@ Next@@ Ser@@ ial@@ .get@@ And@@ In@@ crement@@ (); r@@ r@@ r@@ .m@@ Requ@@ est = request@@ ; r@@ r@@ r@@ .m@@ Res@@ ult = result@@ ; r@@ r@@ .m@@ Par@@ ce@@ l = android.os.@@ Par@@ ce@@ l.@@ ob@@ tain@@ (); r@@ .m@@ W@@ ake@@ Lock@@ Type = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ IN@@ VAL@@ ID@@ _@@ W@@ A@@ KE@@ LO@@ C@@ K@@ ; r@@ .m@@ Client@@ Id = android.app.@@ Activity@@ Thread@@ .@@ current@@ Op@@ Package@@ Name@@ (); r@@ .m@@ Start@@ Time@@ M@@ s = android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ (); if ((@@ result != null@@ ) && ((@@ res@@ ul@@ t.get@@ Target@@ ()) == null@@ )) { throw new java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception("@@ Message t@@ arg@@ et m@@ us@@ t not b@@ e null@@ "); } r@@ .m@@ Par@@ ce@@ l.@@ write@@ Int@@ (@@ request@@ ); r@@ r@@ .m@@ Par@@ ce@@ l.@@ write@@ Int@@ (rr@@ .m@@ Ser@@ ial@@ ); return r@@ ; }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); m@@ Telephony@@ Manager = ((@@ android.telephony.@@ Telephony@@ Manager@@ ) (get@@ Context@@ ().get@@ System@@ Service@@ (@@ Context.@@ TE@@ LE@@ P@@ H@@ ON@@ Y@@ _S@@ ER@@ VIC@@ E@@ ))); m@@ D@@ est@@ Add@@ r = m@@ Telephony@@ Manager.get@@ Line@@ 1@@ Number@@ (); m@@ T@@ ex@@ t = "@@ Th@@ is a t@@ est message@@ "; if ((m@@ Telephony@@ Manager.get@@ Phone@@ Type@@ ()) == (android.@@ telephony.@@ Telephony@@ Manager.@@ P@@ H@@ ON@@ E_@@ TYPE_@@ C@@ D@@ MA@@ )) { m@@ De@@ li@@ ver@@ y@@ Re@@ port@@ Sup@@ por@@ ted = true@@ ; } else if (m@@ Telephony@@ Manager.get@@ Device@@ Id@@ ().@@ equal@@ s("@@ 0000@@ 0000@@ 00@@ 0@@ ")) { m@@ De@@ li@@ ver@@ y@@ Re@@ port@@ Sup@@ por@@ ted = false@@ ; } else { java.lang.String m@@ cc@@ m@@ n@@ c = m@@ Telephony@@ Manager.get@@ Sim@@ Oper@@ ator@@ (); m@@ De@@ li@@ ver@@ y@@ Re@@ port@@ Sup@@ por@@ ted = !@@ (m@@ cc@@ m@@ n@@ c.@@ equal@@ s("@@ 3@@ 10@@ 4@@ 10@@ ")); } }
public void clear@@ Field@@ (java.lang.String field@@ Name@@ ) throw@@ s java.lang.@@ No@@ Su@@ ch@@ Method@@ Exception { java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d m = get@@ Class@@ ().get@@ Method@@ (android.@@ icu@@ .@@ de@@ v@@ .@@ test@@ .@@ for@@ mat@@ .@@ Data@@ D@@ ri@@ v@@ en@@ Number@@ Format@@ Test@@ Data@@ .@@ field@@ To@@ C@@ le@@ ar@@ er(@@ field@@ Name@@ )); try { m.@@ invok@@ e@@ (@@ this@@ ); } catch (java.lang.@@ Illegal@@ Access@@ Exception e) { throw new java.lang.Runtime@@ Exception(@@ e); } catch (java.lang.@@ ref@@ le@@ ct.@@ In@@ vo@@ cation@@ Target@@ Exception e) { throw new java.lang.Runtime@@ Exception(@@ e); } }
public void run@@ Test@@ (com.android.@@ rs.@@ im@@ age@@ j@@ b.@@ Image@@ Process@@ ing@@ Test.@@ Test@@ Ac@@ tion t@@ a@@ , java.lang.String test@@ Name@@ ) { float su@@ m = 0; for (@@ int i = 0; i < (m@@ I@@ ter@@ ation@@ ); i++) { run@@ On@@ U@@ i@@ Thread@@ (t@@ a@@ ); float b@@ m@@ Value = t@@ a@@ .get@@ B@@ en@@ ch@@ m@@ ark@@ (); android.util.Log.@@ v@@ (@@ TAG, ((("@@ result@@ s for i@@ ter@@ ation " + i@@ ) + " is ") + b@@ m@@ Value@@ )); su@@ m +@@ = b@@ m@@ Value@@ ; } float av@@ g@@ Res@@ ult = su@@ m / (m@@ I@@ ter@@ ation@@ ); android.os.@@ Bund@@ le result@@ s = new android.os.@@ Bund@@ le@@ (); result@@ s.@@ put@@ String(@@ TEST_@@ N@@ AME@@ , test@@ Name); result@@ s.@@ put@@ Float@@ ((@@ test@@ Name + "@@ _@@ av@@ g@@ "), av@@ g@@ Result@@ ); get@@ In@@ strument@@ ation@@ ().@@ send@@ Statu@@ s(@@ Ac@@ tivity.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ , result@@ s); }
public void test@@ Test@@ Su@@ ccess@@ Met@@ ri@@ c@@ s() { java.lang.String@@ Builder out@@ put = build@@ Com@@ mon@@ Result@@ (); add@@ Status@@ Key@@ (@@ output@@ , "@@ r@@ an@@ do@@ m@@ Key@@ ", "@@ r@@ an@@ do@@ m@@ Value@@ "); assert@@ False@@ ((@@ (m@@ Test@@ Res@@ ult.@@ m@@ Test@@ Met@@ ri@@ c@@ s) == null@@ )); assert@@ Equal@@ s("@@ r@@ an@@ do@@ m@@ Value@@ ", m@@ Test@@ Res@@ ult.@@ m@@ Test@@ Met@@ ri@@ c@@ s.get@@ ("@@ r@@ an@@ do@@ m@@ Key@@ ")); }
public void test@@ Com@@ b@@ in@@ ed@@ () throw@@ s java.io.IOException { com.android.builder.@@ model.@@ Android@@ Librar@@ y librar@@ y@@ 1 = com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ Test.@@ create@@ Mock@@ Library@@ (("@@ " + ((((@@ (((@@ "@@ int d@@ im@@ e@@ n ac@@ tivity@@ _@@ h@@ or@@ iz@@ on@@ t@@ al@@ _@@ m@@ arg@@ in 0@@ x@@ 7@@ f@@ 0@@ 3@@ 0000@@ \n@@ " + "@@ int d@@ im@@ e@@ n ac@@ tivity@@ _@@ verti@@ cal@@ _@@ m@@ arg@@ in 0@@ x@@ 7@@ f@@ 0@@ 3@@ 00@@ 0@@ 1@@ \n") + "@@ int id action@@ _@@ setting@@ s 0@@ x@@ 7@@ f@@ 0@@ 6@@ 0000@@ \n") + "@@ int lay@@ out ac@@ tivity@@ _@@ ma@@ in 0@@ x@@ 7@@ f@@ 0@@ 2@@ 0000@@ \n") + "@@ int m@@ en@@ u m@@ en@@ u@@ _@@ ma@@ in 0@@ x@@ 7@@ f@@ 0@@ 5@@ 0000@@ \n") + "@@ int str@@ ing action@@ _@@ setting@@ s 0@@ x@@ 7@@ f@@ 0@@ 4@@ 0000@@ \n") + "@@ int str@@ ing app@@ _@@ name 0@@ x@@ 7@@ f@@ 0@@ 4@@ 00@@ 0@@ 1@@ \n") + "@@ int str@@ ing hel@@ lo@@ _@@ wor@@ l@@ d 0@@ x@@ 7@@ f@@ 0@@ 4@@ 00@@ 0@@ 2@@ "@@ )), "@@ "); com.android.builder.@@ model.@@ Android@@ Librar@@ y librar@@ y@@ 2 = com.android.@@ test@@ uti@@ ls.@@ Test@@ Utils.@@ create@@ Mock@@ Library@@ (("@@ " + (@@ "@@ int lay@@ out fo@@ o 0@@ x@@ 7@@ f@@ 0@@ 3@@ 00@@ 0@@ 1@@ \n@@ " + "@@ int lay@@ out b@@ a@@ r 0@@ x@@ 7@@ f@@ 0@@ 6@@ 0000@@ \n@@ "@@ )), ("@@ " + "@@ lay@@ out f@@ oo@@ \n@@ ")); java.util.List<@@ com.android.builder.@@ model.@@ Android@@ Library@@ > android@@ Librar@@ i@@ es = java.util.Arrays.@@ as@@ List@@ (@@ librar@@ y@@ 1, librar@@ y@@ 2@@ ); com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ u@@ p vi@@ si@@ b@@ ili@@ t@@ y = com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ .@@ create@@ (@@ android@@ Librar@@ ies@@ , null@@ ); assert@@ True@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ DI@@ M@@ EN@@ , "@@ ac@@ tivity@@ _@@ h@@ or@@ iz@@ on@@ t@@ al@@ _@@ m@@ arg@@ in@@ ")); assert@@ True@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ ID@@ , "@@ action@@ _@@ setting@@ s@@ ")); assert@@ True@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ LA@@ Y@@ O@@ UT@@ , "@@ ac@@ tivity@@ _@@ main@@ ")); assert@@ True@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ DI@@ M@@ EN@@ , "@@ ac@@ tivity@@ _@@ verti@@ cal@@ _@@ m@@ arg@@ in@@ ")); assert@@ False@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ LA@@ Y@@ O@@ UT@@ , "@@ f@@ oo@@ ")); assert@@ True@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ LA@@ Y@@ O@@ UT@@ , "@@ b@@ ar@@ ")); assert@@ False@@ (@@ vi@@ si@@ b@@ ili@@ ty.@@ is@@ Pri@@ v@@ ate@@ (@@ Resource@@ Type.@@ DI@@ M@@ EN@@ , "@@ un@@ k@@ no@@ wn@@ ")); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.jack.library.@@ Output@@ Jack@@ Librar@@ y get@@ Output@@ Jack@@ Library@@ () { com.android.sched.vfs.@@ Input@@ Output@@ VF@@ S output@@ Dir@@ ; com.android.sched.vfs.@@ Cont@@ ain@@ er contain@@ er@@ Type = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Option@@ s.@@ L@@ I@@ B@@ R@@ AR@@ Y_@@ O@@ UT@@ P@@ U@@ T_@@ CON@@ TA@@ IN@@ ER_@@ TYP@@ E); if (@@ contain@@ er@@ Type == (com.android.s@@ ched.@@ vfs.@@ Cont@@ ain@@ er.@@ DI@@ R@@ )) { output@@ Di@@ r = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Option@@ s.@@ L@@ I@@ B@@ R@@ AR@@ Y_@@ O@@ UT@@ P@@ U@@ T_@@ DI@@ R@@ ); } else { output@@ Di@@ r = com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Option@@ s.@@ L@@ I@@ B@@ R@@ AR@@ Y_@@ O@@ UT@@ P@@ U@@ T_@@ Z@@ IP@@ ); } return com.android.jack.library.@@ Jack@@ Library@@ Fa@@ ctory@@ .get@@ Output@@ Library@@ (@@ output@@ Dir@@ , com.android.jack.@@ Jack@@ .get@@ E@@ m@@ it@@ ter@@ Id@@ (), com.android.jack.@@ Jack@@ .get@@ Version@@ String@@ ()); }
public synchronized void end@@ Session@@ () { int th@@ read@@ Id = get@@ Call@@ ing@@ Thread@@ Id@@ (); android.telecom.@@ Logg@@ ing.@@ S@@ es@@ sion com@@ pl@@ et@@ ed@@ S@@ es@@ sion = s@@ Session@@ M@@ app@@ er.get@@ (@@ th@@ read@@ Id); if (@@ com@@ pl@@ et@@ ed@@ S@@ es@@ sion == null@@ ) { android.telecom.@@ Logg@@ ing.@@ android.telecom.@@ Log.@@ w@@ (android.@@ telecom.@@ Logg@@ ing.@@ Session@@ Manager.@@ LOG@@ G@@ ING@@ _@@ TAG, "@@ Log.@@ end@@ S@@ es@@ sion w@@ a@@ s cal@@ le@@ d wit@@ h n@@ o s@@ es@@ sion ac@@ ti@@ v@@ e.@@ "); return@@ ; } com@@ pl@@ et@@ ed@@ Session@@ .m@@ ark@@ Session@@ Comp@@ let@@ ed@@ (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s()); if (!(@@ com@@ pl@@ et@@ ed@@ Session@@ .is@@ St@@ ar@@ ted@@ From@@ Active@@ Session@@ ())) { android.telecom.@@ Logg@@ ing.@@ android.telecom.@@ Log.@@ v@@ (android.@@ telecom.@@ Logg@@ ing.@@ Session@@ Manager.@@ LOG@@ G@@ ING@@ _@@ TAG, ((((@@ Session@@ .@@ EN@@ D@@ _S@@ U@@ B@@ SE@@ SS@@ I@@ ON@@ ) + " (d@@ ur@@ : ") + (@@ com@@ pl@@ et@@ ed@@ Session@@ .get@@ Local@@ Ex@@ ec@@ uti@@ on@@ Time@@ ())) + " m@@ S@@ )@@ ")); } else { android.telecom.@@ Logg@@ ing.@@ android.telecom.@@ Log.@@ v@@ (android.@@ telecom.@@ Logg@@ ing.@@ Session@@ Manager.@@ LOG@@ G@@ ING@@ _@@ TAG, ((((@@ Session@@ .@@ EN@@ D@@ _S@@ U@@ B@@ SE@@ SS@@ I@@ ON@@ ) + " (@@ In@@ vi@@ si@@ b@@ le Sub@@ session@@ ) (d@@ ur@@ : ") + (@@ com@@ pl@@ et@@ ed@@ Session@@ .get@@ Local@@ Ex@@ ec@@ uti@@ on@@ Time@@ ())) + " ms@@ )@@ ")); } android.telecom.@@ Logg@@ ing.@@ S@@ es@@ sion parent@@ S@@ es@@ sion = com@@ pl@@ et@@ ed@@ Session@@ .get@@ Par@@ ent@@ Session@@ (); s@@ Session@@ M@@ app@@ er.@@ remove@@ (@@ th@@ read@@ Id); end@@ Par@@ ent@@ Session@@ s(@@ com@@ pl@@ et@@ ed@@ Session@@ ); if (((@@ parent@@ S@@ es@@ sion != null@@ ) && (!(@@ parent@@ Session@@ .is@@ Session@@ Comp@@ let@@ ed@@ ()))) && (@@ com@@ pl@@ et@@ ed@@ Session@@ .is@@ St@@ ar@@ ted@@ From@@ Active@@ Session@@ ())) { s@@ Session@@ M@@ app@@ er.@@ put@@ (@@ th@@ read@@ Id, parent@@ Session@@ ); } }
private com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info parse@@ Attribute@@ Typ@@ es(@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de at@@ tr@@ Node@@ , java.lang.String name@@ ) { java.util.@@ T@@ re@@ e@@ Set@@ <@@ com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info.@@ Format@@ > for@@ mat@@ s = new java.util.@@ T@@ re@@ e@@ Set@@ <@@ com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info.@@ Format@@ >(); java.lang.String[] enum@@ Value@@ s = null@@ ; java.lang.String[] flag@@ Value@@ s = null@@ ; org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de at@@ tr@@ For@@ ma@@ t = at@@ tr@@ No@@ d@@ e.get@@ At@@ tri@@ b@@ ut@@ es@@ ().get@@ Nam@@ ed@@ Item@@ (@@ "@@ for@@ mat@@ "); if (@@ at@@ tr@@ For@@ ma@@ t != null@@ ) { for (java.lang.String f : at@@ tr@@ Format@@ .get@@ Node@@ Value@@ ().@@ s@@ pli@@ t@@ ("@@ \@@ |@@ ")) { try { com.android.ide.common.@@ api.@@ I@@ Attribute@@ Info.@@ For@@ ma@@ t for@@ ma@@ t = Attribute@@ Info.@@ Format@@ .@@ value@@ Of@@ (f@@ .@@ to@@ Up@@ per@@ C@@ ase@@ ()); if ((@@ (@@ for@@ ma@@ t != null@@ ) && (@@ for@@ ma@@ t != (com.android.ide.@@ common.@@ api.@@ I@@ Attribute@@ Info.@@ Format@@ .@@ EN@@ U@@ M@@ ))) && (@@ for@@ ma@@ t != (com.android.ide.@@ common.@@ api.@@ I@@ Attribute@@ Info.@@ Format@@ .@@ F@@ LA@@ G@@ ))) { for@@ mat@@ s.add@@ (@@ for@@ mat@@ ); } } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ P@@ lu@@ gin@@ .@@ log@@ (e@@ , "@@ Un@@ k@@ no@@ w@@ n for@@ ma@@ t name \@@ '@@ %@@ s@@ \@@ ' in <@@ att@@ r name@@ =@@ \"@@ %@@ s@@ \"@@ >@@ , fi@@ le \@@ '@@ %@@ s@@ \@@ '@@ .@@ ", f@@ , name@@ , get@@ O@@ s@@ At@@ tr@@ s@@ Xml@@ Path@@ ()); } } enum@@ Value@@ s = parse@@ En@@ um@@ Flag@@ Valu@@ es(@@ at@@ tr@@ Node@@ , "@@ enum@@ ", name@@ ); if (@@ enum@@ Value@@ s != null@@ ) { for@@ mat@@ s.@@ add(@@ Attribute@@ Info.@@ Format@@ .@@ EN@@ U@@ M@@ ); } flag@@ Value@@ s = parse@@ En@@ um@@ Flag@@ Valu@@ es(@@ at@@ tr@@ Node@@ , "@@ flag@@ ", name@@ ); if (f@@ lag@@ Value@@ s != null@@ ) { for@@ mat@@ s.@@ add(@@ Attribute@@ Info.@@ Format@@ .@@ F@@ LA@@ G@@ ); } com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info in@@ fo = new com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info@@ (@@ name@@ , for@@ mat@@ s.@@ to@@ Array@@ (@@ new com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info.@@ Format@@ [@@ for@@ mat@@ s.@@ size@@ ()@@ ]@@ )); info@@ .set@@ En@@ um@@ Valu@@ es@@ (@@ enum@@ Valu@@ es@@ ); info@@ .set@@ Flag@@ Valu@@ es@@ (f@@ lag@@ Valu@@ es@@ ); return info@@ ; }
@java.lang.Override public void set@@ up@@ Data@@ Call@@ (@@ int rad@@ io@@ T@@ ec@@ h@@ no@@ log@@ y@@ , android.telephony.@@ data@@ .@@ Data@@ Pro@@ fi@@ le data@@ Profile@@ , boolean is@@ R@@ o@@ am@@ ing@@ , boolean al@@ low@@ R@@ o@@ am@@ ing@@ , android.os.@@ Message result@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ test.@@ Sim@@ ul@@ ated@@ Command@@ s@@ V@@ er@@ if@@ i@@ er.get@@ Instance@@ ().@@ set@@ up@@ Data@@ Call@@ (@@ rad@@ io@@ T@@ ec@@ h@@ no@@ log@@ y@@ , data@@ Profile@@ , is@@ R@@ o@@ am@@ ing@@ , al@@ low@@ R@@ o@@ am@@ ing@@ , result@@ ); if ((m@@ D@@ c@@ Response@@ ) == null@@ ) { try { m@@ D@@ c@@ Res@@ pon@@ se = new android.telephony.@@ data@@ .@@ Data@@ Call@@ Response@@ (@@ 0, (-1@@ ), 1, 2, "@@ IP@@ ", "@@ r@@ m@@ net@@ _@@ data@@ 7@@ ", java.util.Arrays.@@ as@@ List@@ (@@ new android.net.@@ Link@@ Addres@@ s(@@ android.net.Network@@ Utils.@@ num@@ er@@ ic@@ To@@ Inet@@ Addres@@ s("@@ 1@@ 2.@@ 3@@ 4@@ .@@ 5@@ 6@@ .@@ 7@@ 8@@ "), 0@@ )), java.util.Arrays.@@ as@@ List@@ (android.net.@@ Network@@ Utils.@@ num@@ er@@ ic@@ To@@ Inet@@ Addres@@ s("@@ 9@@ 8@@ .@@ 7@@ 6@@ .@@ 5@@ 4@@ .@@ 32@@ "@@ )), java.util.Arrays.@@ as@@ List@@ (android.net.@@ Network@@ Utils.@@ num@@ er@@ ic@@ To@@ Inet@@ Addres@@ s("@@ 1@@ 1.@@ 2@@ 2.@@ 3@@ .@@ 4@@ 4@@ "@@ )), null@@ , 1@@ 4@@ 4@@ 0); } catch (java.lang.Exception e) { } } if (m@@ D@@ c@@ Su@@ ccess@@ ) { result@@ Su@@ ccess@@ (@@ result@@ , m@@ D@@ c@@ Response@@ ); } else { result@@ Fail@@ (@@ result@@ , m@@ D@@ c@@ Response@@ , new java.lang.Runtime@@ Exception("@@ Set@@ u@@ p dat@@ a cal@@ l fa@@ ile@@ d@@ !@@ ")); } }
@java.lang.Override public void un@@ register@@ Network@@ Callback@@ (android.net.@@ Connectivity@@ Manager.@@ Network@@ Call@@ b@@ ac@@ k c@@ b@@ ) { if (@@ tr@@ ack@@ ing@@ De@@ fa@@ ult.@@ contain@@ s(@@ c@@ b@@ )) { tr@@ ack@@ ing@@ De@@ fa@@ ult.@@ remove@@ (c@@ b@@ ); } else if (@@ list@@ en@@ ing.@@ contain@@ s@@ Key@@ (c@@ b@@ )) { list@@ en@@ ing.@@ remove@@ (c@@ b@@ ); } else if (@@ requ@@ es@@ ted@@ .@@ contain@@ s@@ Key@@ (c@@ b@@ )) { requ@@ es@@ ted@@ .@@ remove@@ (c@@ b@@ ); } else { fail@@ ("@@ U@@ ne@@ x@@ pec@@ ted call@@ b@@ ac@@ k remo@@ v@@ ed@@ "); } assert@@ False@@ (@@ tr@@ ack@@ ing@@ De@@ fa@@ ult.@@ contain@@ s(@@ c@@ b@@ )); assert@@ False@@ (@@ list@@ en@@ ing.@@ contain@@ s@@ Key@@ (c@@ b@@ )); assert@@ False@@ (@@ requ@@ es@@ ted@@ .@@ contain@@ s@@ Key@@ (c@@ b@@ )); }
private Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ er@@ Con@@ fig create@@ Sign@@ ing@@ Block@@ Sign@@ er@@ Config@@ (com.android.@@ apk@@ si@@ g.@@ Default@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ Sign@@ er@@ Con@@ fig sign@@ er@@ Config@@ , boolean apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ , int s@@ ch@@ em@@ e@@ Id) throw@@ s java.security.@@ In@@ valid@@ Key@@ Exception { java.util.List<@@ java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ > cer@@ t@@ if@@ ic@@ ate@@ s = sign@@ er@@ Config.@@ get@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ (); java.security.@@ P@@ u@@ bli@@ c@@ Ke@@ y public@@ Ke@@ y = cer@@ t@@ if@@ i@@ cat@@ es@@ .get@@ (0@@ ).get@@ P@@ u@@ bli@@ c@@ Key@@ (); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ er@@ Con@@ fig new@@ Sign@@ er@@ Con@@ fig = new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ er@@ Config@@ (); new@@ Sign@@ er@@ Config@@ .@@ private@@ Ke@@ y = sign@@ er@@ Config.@@ get@@ Pri@@ v@@ ate@@ Key@@ (); new@@ Sign@@ er@@ Config.@@ cer@@ t@@ if@@ ic@@ ate@@ s = cer@@ t@@ if@@ i@@ cat@@ es@@ ; new@@ Sign@@ er@@ Config.@@ min@@ Sdk@@ Ver@@ sion = sign@@ er@@ Config.@@ get@@ Min@@ Sdk@@ Version@@ (); new@@ Sign@@ er@@ Config.@@ max@@ Sdk@@ Ver@@ sion = sign@@ er@@ Config.@@ get@@ Ma@@ x@@ Sdk@@ Version@@ (); new@@ Sign@@ er@@ Config.@@ apk@@ Sign@@ er@@ Line@@ age = sign@@ er@@ Config.@@ get@@ Apk@@ Sign@@ er@@ Line@@ age@@ (); switch (s@@ ch@@ em@@ e@@ Id) { case com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ V@@ E@@ RS@@ I@@ ON@@ _@@ AP@@ K@@ _S@@ I@@ G@@ N@@ AT@@ UR@@ E_@@ S@@ CH@@ E@@ M@@ E_@@ V@@ 2 : new@@ Sign@@ er@@ Config.@@ sign@@ ature@@ Algorith@@ m@@ s = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ Sign@@ er.get@@ Su@@ g@@ g@@ g@@ es@@ ted@@ Sign@@ ature@@ Algorith@@ ms@@ (@@ public@@ Key@@ , m@@ Min@@ Sdk@@ Version@@ , apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ ); break@@ ; case com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ V@@ E@@ RS@@ I@@ ON@@ _@@ AP@@ K@@ _S@@ I@@ G@@ N@@ AT@@ UR@@ E_@@ S@@ CH@@ E@@ M@@ E_@@ V@@ 3 : new@@ Sign@@ er@@ Config.@@ sign@@ ature@@ Algorith@@ m@@ s = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 3@@ .@@ V@@ 3@@ S@@ ch@@ em@@ e@@ Sign@@ er.get@@ Su@@ g@@ g@@ es@@ ted@@ Sign@@ ature@@ Algorith@@ ms@@ (@@ public@@ Key@@ , m@@ Min@@ Sdk@@ Version@@ , apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ ); break@@ ; default : throw new java.lang.Illegal@@ Argument@@ Exception("@@ Un@@ k@@ no@@ w@@ n AP@@ K Sign@@ at@@ ur@@ e S@@ ch@@ em@@ e I@@ D requ@@ es@@ ted@@ "); } return new@@ Sign@@ er@@ Config@@ ; }
@java.lang.Override public boolean process@@ Message@@ (android.os.@@ Message message@@ ) { switch (m@@ ess@@ age.@@ wh@@ at@@ ) { case com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ S@@ o@@ f@@ t@@ Ap@@ StateMachine.@@ C@@ M@@ D_@@ IN@@ TER@@ F@@ AC@@ E_@@ STA@@ T@@ US@@ _C@@ H@@ AN@@ G@@ E@@ D : if ((m@@ ess@@ age.@@ ob@@ j@@ ) != (m@@ Network@@ Ob@@ server@@ )) { break@@ ; } boolean is@@ U@@ p = (m@@ ess@@ age.@@ arg@@ 1@@ ) == 1; if (is@@ U@@ p == (m@@ Iface@@ Is@@ Up@@ )) { break@@ ; } m@@ Iface@@ Is@@ U@@ p = is@@ Up@@ ; if (is@@ Up@@ ) { android.util.Log.d@@ (com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ TAG, "@@ S@@ o@@ f@@ t@@ A@@ p is read@@ y for u@@ se@@ "); update@@ Ap@@ State@@ (@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ , 0); } else { } break@@ ; case com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ S@@ o@@ f@@ t@@ Ap@@ StateMachine.@@ C@@ M@@ D@@ _STA@@ R@@ T : break@@ ; case com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ S@@ o@@ f@@ t@@ Ap@@ StateMachine.@@ C@@ M@@ D_@@ AP@@ _@@ IN@@ TER@@ F@@ AC@@ E_@@ B@@ IN@@ D@@ ER_@@ DE@@ AT@@ H : case com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ S@@ o@@ f@@ t@@ Ap@@ StateMachine.@@ C@@ M@@ D@@ _S@@ TO@@ P : update@@ Ap@@ State@@ (@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ D@@ IS@@ ABL@@ ING@@ , 0); st@@ op@@ S@@ o@@ f@@ t@@ Ap@@ (); if ((m@@ ess@@ age.@@ wh@@ at@@ ) == (com.android.server.@@ w@@ if@@ i.@@ S@@ o@@ f@@ t@@ Ap@@ Manager.@@ S@@ o@@ f@@ t@@ Ap@@ StateMachine.@@ C@@ M@@ D_@@ AP@@ _@@ IN@@ TER@@ F@@ AC@@ E_@@ B@@ IN@@ D@@ ER_@@ DE@@ A@@ TH@@ )) { update@@ Ap@@ State@@ (@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ FA@@ IL@@ ED@@ , W@@ if@@ i@@ Manager.@@ S@@ AP@@ _STA@@ R@@ T_@@ FA@@ IL@@ UR@@ E_@@ G@@ EN@@ ER@@ AL@@ ); } else { update@@ Ap@@ State@@ (@@ W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _@@ AP@@ _STA@@ TE_@@ D@@ IS@@ ABL@@ ED@@ , 0); } tr@@ an@@ si@@ tion@@ To@@ (m@@ Id@@ le@@ State@@ ); break@@ ; default : return NO@@ T_@@ H@@ AN@@ D@@ L@@ ED@@ ; } return H@@ AN@@ D@@ L@@ ED@@ ; }
@java.lang.Override protected void read@@ Source@@ Folder@@ (@@ java.io.File source@@ Folder@@ , com.android.@@ uti@@ ls.@@ I@@ Logg@@ er logg@@ er@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ Merg@@ ing@@ Exception { for (@@ java.io.File fi@@ le : com.google.common.@@ io.@@ Fil@@ es.@@ file@@ T@@ re@@ e@@ Tra@@ ver@@ ser@@ ().@@ pre@@ Or@@ der@@ Tra@@ ver@@ s@@ al@@ (s@@ ource@@ Folder@@ )) { if ((@@ file.@@ is@@ File@@ ()) && (!(@@ is@@ I@@ gn@@ or@@ ed@@ (file@@ )@@ ))) { handle@@ New@@ File@@ (s@@ ource@@ Folder@@ , file@@ , logg@@ er@@ ); } } }
private java.lang.String default@@ Log@@ d@@ Size@@ Value@@ () { java.lang.String default@@ Value = android.os.@@ System@@ Properties@@ .get@@ (com.android.@@ setting@@ s.@@ De@@ ve@@ lo@@ p@@ ment@@ Setting@@ s.@@ SE@@ L@@ EC@@ T_@@ LOG@@ D_@@ DE@@ FA@@ UL@@ T_@@ SIZ@@ E_@@ PRO@@ P@@ ER@@ TY@@ ); if (@@ default@@ Value == null@@ ) || (@@ default@@ Valu@@ e.@@ length@@ ()) == 0@@ )) { if (android.os.@@ System@@ Properties@@ .get@@ ("@@ ro@@ .@@ config.@@ low@@ _@@ ram@@ ").@@ equals(@@ "@@ true@@ ")) { default@@ Value = "@@ 6@@ 5@@ 5@@ 3@@ 6@@ "; } else { default@@ Value = "@@ 2@@ 6@@ 2@@ 1@@ 4@@ 4@@ "; } } return default@@ Value@@ ; }
private void m@@ ark@@ Call@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String sign@@ ature@@ , @javax.annotation.@@ N@@ on@@ null java.util.List<@@ com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion@@ > arg@@ s, boolean is@@ V@@ ir@@ t@@ ual@@ ) { java.util.@@ concurrent.@@ Con@@ current@@ Map@@ <java.lang.String, com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ common.@@ Li@@ ter@@ al@@ Value@@ List@@ Track@@ er@@ > ma@@ p = (is@@ V@@ ir@@ t@@ ual@@ ) ? vi@@ r@@ t@@ u@@ al : di@@ re@@ ct@@ ; com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ common.@@ Li@@ ter@@ al@@ Value@@ List@@ Track@@ er tr@@ ack@@ er = m@@ ap@@ .get@@ (@@ sign@@ ature@@ ); if (@@ tr@@ ack@@ er == null@@ ) { tr@@ ack@@ er = new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ common.@@ Con@@ current@@ Li@@ ter@@ al@@ Value@@ List@@ Track@@ er(@@ args.@@ size@@ ()); com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ common.@@ Li@@ ter@@ al@@ Value@@ List@@ Track@@ er exist@@ ing = m@@ ap.@@ put@@ I@@ f@@ Ab@@ s@@ ent@@ (@@ sign@@ ature@@ , tr@@ ack@@ er@@ ); if (@@ exist@@ ing != null@@ ) { tr@@ ack@@ er = exist@@ ing@@ ; } } tr@@ ack@@ er.@@ update@@ With@@ (@@ arg@@ s); }
@@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ annotations.@@ Visi@@ ble@@ For@@ Test@@ ing public boolean equal@@ s@@ U@@ id@@ s(@@ android.net.Network@@ Capabili@@ ti@@ es n@@ c@@ ) { java.util.@@ Set@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ > com@@ par@@ ed@@ U@@ id@@ s = n@@ c.@@ m@@ U@@ id@@ s; if (@@ null == com@@ par@@ ed@@ U@@ id@@ s) return null == (m@@ U@@ id@@ s); if (@@ null == (m@@ U@@ id@@ s@@ )) return false@@ ; final java.util.@@ Set@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ > al@@ low@@ ed@@ U@@ id@@ s = new android.util.@@ Array@@ Set@@ (m@@ U@@ id@@ s); for (android.net.@@ U@@ id@@ R@@ an@@ g@@ e r@@ an@@ g@@ e : com@@ par@@ ed@@ U@@ id@@ s) { if (!(@@ al@@ low@@ ed@@ U@@ id@@ s.@@ contain@@ s(@@ r@@ an@@ ge@@ ))) { return false@@ ; } al@@ low@@ ed@@ U@@ id@@ s.@@ remove@@ (r@@ an@@ ge@@ ); } return al@@ low@@ ed@@ U@@ id@@ s.@@ isEmpty@@ (); }
public void test@@ 4@@ _@@ 0@@ M@@ e@@ as@@ ure@@ ment@@ Mode@@ P@@ e@@ ak@@ R@@ ms@@ () throw@@ s java.lang.Exception { if (!(@@ has@@ Audio@@ Output@@ ())) { return@@ ; } try { get@@ V@@ is@@ u@@ aliz@@ er@@ (1@@ ); m@@ V@@ is@@ u@@ aliz@@ er.@@ set@@ Enabled@@ (@@ true@@ ); assert@@ True@@ ("@@ vi@@ su@@ aliz@@ er not enable@@ d@@ ", m@@ V@@ is@@ u@@ aliz@@ er.get@@ Enabled@@ ()); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (1@@ 00@@ ); int statu@@ s = m@@ V@@ is@@ u@@ aliz@@ er.@@ set@@ M@@ e@@ as@@ ure@@ ment@@ Mode@@ (@@ V@@ is@@ u@@ aliz@@ er.@@ ME@@ A@@ S@@ U@@ RE@@ M@@ EN@@ T_@@ M@@ OD@@ E_@@ P@@ E@@ A@@ K_@@ R@@ MS@@ ); assert@@ Equal@@ s("@@ set@@ M@@ e@@ as@@ ure@@ ment@@ Mod@@ e for P@@ E@@ A@@ K_@@ R@@ M@@ S do@@ es@@ n@@ 't re@@ por@@ t su@@ ccess@@ ", V@@ is@@ u@@ aliz@@ er.@@ S@@ U@@ C@@ CE@@ SS@@ , stat@@ us@@ ); int mo@@ de = m@@ V@@ is@@ u@@ aliz@@ er.get@@ M@@ e@@ as@@ ure@@ ment@@ Mode@@ (); assert@@ Equal@@ s("@@ get@@ M@@ e@@ as@@ ure@@ ment@@ Mod@@ e do@@ es@@ n@@ 't re@@ por@@ t P@@ E@@ A@@ K_@@ R@@ MS@@ ", V@@ is@@ u@@ aliz@@ er.@@ ME@@ A@@ S@@ U@@ RE@@ M@@ EN@@ T_@@ M@@ OD@@ E_@@ P@@ E@@ A@@ K_@@ R@@ MS@@ , mode@@ ); } catch (java.lang.@@ Illegal@@ State@@ Exception e) { fail@@ ("@@ m@@ etho@@ d cal@@ le@@ d in w@@ ron@@ g state@@ "); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { fail@@ ("@@ s@@ le@@ e@@ p@@ () int@@ er@@ rup@@ ted@@ "); } final@@ l@@ y { re@@ le@@ ase@@ V@@ is@@ u@@ aliz@@ er@@ (); } }
private static android.content.@@ Int@@ ent get@@ Connection@@ State@@ Broadcast@@ (android.bluetooth.Bluetooth@@ Device device@@ , int to@@ State@@ , int f@@ rom@@ State@@ ) { return org.@@ mock@@ it@@ o@@ .@@ h@@ am@@ c@@ res@@ t.@@ Mock@@ it@@ o@@ H@@ am@@ c@@ res@@ t.@@ arg@@ Th@@ at@@ (@@ org.@@ h@@ am@@ c@@ res@@ t.@@ core.@@ All@@ Of@@ .@@ all@@ Of@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ int@@ ent.@@ match@@ er.@@ Intent@@ M@@ atch@@ er@@ s.@@ has@@ Action@@ (@@ Bluetooth@@ Headset@@ .@@ AC@@ TION@@ _C@@ ON@@ NEC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ ), android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ int@@ ent.@@ match@@ er.@@ Intent@@ M@@ atch@@ er@@ s.@@ has@@ Extra@@ (@@ Bluetooth@@ Device.@@ EX@@ TR@@ A@@ _@@ DE@@ VIC@@ E, device@@ ), android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ int@@ ent.@@ match@@ er.@@ Intent@@ M@@ atch@@ er@@ s.@@ has@@ Extra@@ (@@ Bluetooth@@ Pro@@ file.@@ EX@@ TR@@ A@@ _STA@@ TE@@ , to@@ State@@ ), android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ int@@ ent.@@ match@@ er.@@ Intent@@ M@@ atch@@ er@@ s.@@ has@@ Extra@@ (@@ Bluetooth@@ Pro@@ file.@@ EX@@ TR@@ A@@ _P@@ RE@@ V@@ IO@@ US@@ _STA@@ TE@@ , f@@ rom@@ State@@ ))); }
public void test@@ Long@@ Message@@ () throw@@ s java.io.IOException { byte@@ [] dat@@ a = new byte@@ [@@ 10@@ 2@@ 4 * 10@@ 2@@ 4@@ ]; new java.util.@@ R@@ an@@ do@@ m@@ ().@@ next@@ Bytes@@ (d@@ ata@@ ); }
private void remove@@ R@@ ec@@ ent@@ Task@@ Lock@@ ed@@ (@@ int user@@ Id) { if (@@ user@@ Id <@@ = 0) { android.util.@@ S@@ log.@@ i@@ (com.android.server.@@ am@@ .@@ Activity@@ Manager@@ Service.TAG, ("@@ Can't remo@@ v@@ e re@@ c@@ ent t@@ as@@ k on u@@ se@@ r " + user@@ Id@@ )); return@@ ; } int N = m@@ R@@ ec@@ ent@@ Task@@ s.@@ size@@ (); for (@@ int i = 0; i < N@@ ; i++) { com.android.server.@@ am@@ .@@ Task@@ Recor@@ d t@@ r = m@@ R@@ ec@@ ent@@ Task@@ s.get@@ (i@@ ); if ((@@ tr@@ .@@ user@@ Id) == user@@ Id) { tr@@ .@@ dis@@ po@@ se@@ Th@@ um@@ b@@ n@@ a@@ il@@ (); m@@ R@@ ec@@ ent@@ Task@@ s.@@ remove@@ (i@@ ); android.util.@@ S@@ log.@@ i@@ (com.android.server.@@ am@@ .@@ Activity@@ Manager@@ Service.TAG, ("@@ remo@@ v@@ e R@@ ec@@ ent@@ T@@ as@@ k " + user@@ Id@@ )); i@@ --@@ ; N@@ --@@ ; } }
@java.lang.Override public void on@@ De@@ vices@@ Change@@ () { }
public void test@@ S@@ k@@ ip@@ On@@ L@@ arg@@ e@@ Fil@@ es@@ () throw@@ s java.lang.Exception { java.io.File l@@ arg@@ e@@ File = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ File@@ InputStream@@ Test@@ _test@@ S@@ k@@ ip@@ On@@ L@@ arg@@ e@@ Fil@@ es@@ ", "@@ "); final long requ@@ ire@@ d@@ F@@ re@@ e@@ S@@ p@@ a@@ ce@@ Byte@@ s = (@@ 3@@ 1@@ 7@@ 2@@ L * 10@@ 2@@ 4@@ ) * 10@@ 2@@ 4@@ ; final android.system.@@ Str@@ u@@ ct@@ Stat@@ V@@ f@@ s stat@@ V@@ f@@ s = android.system.@@ O@@ s.@@ stat@@ v@@ f@@ s(@@ l@@ arg@@ e@@ File@@ .get@@ Path@@ ()); final long f@@ re@@ e@@ S@@ p@@ a@@ ce@@ A@@ va@@ il@@ able@@ Byte@@ s = (@@ stat@@ V@@ fs.@@ f@@ _@@ b@@ siz@@ e) * (@@ stat@@ V@@ fs.@@ f@@ _@@ b@@ ava@@ il@@ ); if (f@@ re@@ e@@ S@@ p@@ a@@ ce@@ A@@ va@@ il@@ able@@ Byte@@ s < requ@@ ire@@ d@@ F@@ re@@ e@@ S@@ p@@ a@@ ce@@ Bytes@@ ) { return@@ ; } try { long file@@ Siz@@ e = ((@@ 3 * 10@@ 2@@ 4@@ ) * 10@@ 2@@ 4@@ ) * 10@@ 2@@ 4@@ L@@ ; int result@@ Co@@ de = new java.lang.@@ Process@@ Builder@@ ().@@ command@@ ("@@ f@@ al@@ loc@@ ate@@ ", "@@ -@@ l@@ ", "@@ 3@@ G@@ ", l@@ arg@@ e@@ File@@ .get@@ Path@@ ()).@@ start@@ ().@@ wait@@ For@@ (); assert@@ Equal@@ s(@@ 0, result@@ Code@@ ); assert@@ Equal@@ s(@@ file@@ Size@@ , l@@ arg@@ e@@ File@@ .@@ length@@ ()); java.io.File@@ Input@@ Stream fi@@ s = new java.io.File@@ InputStream@@ (@@ l@@ arg@@ e@@ File@@ ); long las@@ t@@ By@@ t@@ e = file@@ Siz@@ e - 1; assert@@ Equal@@ s(@@ 0, Lib@@ core.@@ os.@@ l@@ se@@ e@@ k@@ (@@ fi@@ s.get@@ F@@ D@@ (), 0, O@@ s@@ Constants.@@ SE@@ E@@ K@@ _C@@ UR@@ )); assert@@ Equal@@ s(@@ las@@ t@@ Byte@@ , fi@@ s.@@ s@@ k@@ ip@@ (@@ las@@ t@@ Byte@@ )); } final@@ l@@ y { assert@@ True@@ (@@ l@@ arg@@ e@@ File@@ .@@ de@@ lete@@ ()); } }
private void add@@ R@@ ig@@ ht@@ C@@ li@@ ck@@ M@@ en@@ u@@ (@@ final org.eclipse.swt.@@ widget@@ s.@@ T@@ able t@@ able@@ ) { final org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ Ac@@ tion fil@@ ter@@ Ac@@ tion = new org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ Action@@ ("@@ Fil@@ ter si@@ m@@ il@@ a@@ r mess@@ ag@@ es.@@ .@@ ") { @java.lang.Override public void run@@ () { java.util.List<@@ com.android.@@ ddm@@ ui@@ lib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Message@@ > sele@@ c@@ ted@@ Message@@ s = get@@ Sele@@ c@@ ted@@ Log@@ C@@ at@@ Mess@@ ag@@ es@@ (); if ((@@ sele@@ c@@ ted@@ Mess@@ ag@@ es.@@ size@@ ()) == 0) { add@@ New@@ Filter@@ (); } else { com.android.@@ ddm@@ ui@@ lib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Message m = sele@@ c@@ ted@@ Mess@@ ag@@ es@@ .get@@ (@@ 0); add@@ New@@ Filter@@ (m@@ .get@@ Tag@@ (), m@@ .get@@ Message@@ (), m@@ .get@@ P@@ id@@ (), m@@ .get@@ App@@ Name@@ (), m@@ .get@@ Log@@ Level@@ ()); } } }; final org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ M@@ en@@ u@@ Manager m@@ g@@ r = new org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ M@@ en@@ u@@ Manager@@ (); m@@ g@@ r@@ .set@@ Remo@@ ve@@ All@@ W@@ h@@ en@@ S@@ ho@@ wn@@ (@@ true@@ ); m@@ g@@ r.@@ add@@ M@@ en@@ u@@ Listener@@ (@@ new org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ I@@ M@@ en@@ u@@ Listener@@ () { @java.lang.Override public void m@@ en@@ u@@ Ab@@ out@@ To@@ S@@ ho@@ w@@ (@@ org.eclipse.@@ j@@ face@@ .@@ action@@ .@@ I@@ M@@ en@@ u@@ Manager arg@@ 0) { m@@ g@@ r.@@ add(@@ fil@@ ter@@ Action@@ ); } }); final org.eclipse.swt.@@ widget@@ s.@@ M@@ en@@ u m@@ en@@ u = m@@ g@@ r.@@ create@@ Context@@ M@@ en@@ u@@ (t@@ able@@ ); t@@ ab@@ le.@@ add@@ Listener@@ (@@ S@@ W@@ T@@ .@@ M@@ en@@ u@@ D@@ et@@ ec@@ t, new org.eclipse.swt.@@ widget@@ s.@@ Listener@@ () { @java.lang.Override public void handle@@ Event@@ (@@ org.eclipse.swt.@@ widget@@ s.@@ Ev@@ ent event@@ ) { org.eclipse.swt.@@ g@@ raphic@@ s.@@ P@@ o@@ int p@@ t = t@@ able@@ .get@@ Display@@ ().@@ m@@ ap@@ (@@ null@@ , t@@ able@@ , new org.eclipse.swt.@@ g@@ raphic@@ s.@@ P@@ o@@ int@@ (@@ ev@@ ent.@@ x@@ , ev@@ ent.@@ y@@ )); org.eclipse.swt.@@ g@@ raphic@@ s.@@ R@@ ec@@ t@@ an@@ g@@ le c@@ lient@@ A@@ re@@ a = t@@ able@@ .get@@ Client@@ A@@ re@@ a@@ (); boolean he@@ ad@@ er = ((@@ p@@ t.@@ y@@ ) > (c@@ lient@@ A@@ re@@ a.@@ y@@ )) && ((@@ p@@ t.@@ y@@ ) < ((@@ c@@ lient@@ A@@ re@@ a.@@ y@@ ) + (t@@ able@@ .get@@ Head@@ er@@ He@@ ig@@ ht@@ ()))); t@@ ab@@ le.@@ set@@ M@@ en@@ u@@ ((@@ he@@ ad@@ er ? null : m@@ en@@ u@@ )); } }); }
@org.junit.Test public void test@@ State@@ Tr@@ an@@ si@@ tion@@ _@@ Audio@@ Dis@@ connec@@ ting@@ To@@ Connec@@ ted@@ _@@ Time@@ out@@ () { int num@@ B@@ road@@ cas@@ ts@@ S@@ ent = set@@ Up@@ Audio@@ Dis@@ connec@@ ting@@ State@@ (); ve@@ r@@ if@@ y@@ (m@@ Headset@@ Service@@ , time@@ out@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ CONNEC@@ T_@@ TI@@ ME@@ O@@ U@@ T_@@ TEST_@@ W@@ A@@ I@@ T_@@ M@@ IL@@ LIS@@ ).@@ tim@@ es(@@ num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ )).@@ send@@ Broadcast@@ As@@ User@@ (m@@ Intent@@ Arg@@ um@@ ent.@@ cap@@ t@@ ure@@ (), e@@ q@@ (@@ User@@ Hand@@ le.@@ AL@@ L@@ ), e@@ q@@ (@@ Headset@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ )); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ ve@@ r@@ if@@ y@@ Audio@@ State@@ Broadcast@@ (m@@ Test@@ Device@@ , Bluetooth@@ Headset@@ .@@ STATE_@@ A@@ U@@ D@@ IO@@ _@@ D@@ IS@@ CONNEC@@ TED@@ , Bluetooth@@ Headset@@ .@@ STATE_@@ A@@ U@@ D@@ IO@@ _C@@ ON@@ NEC@@ TED@@ , m@@ Intent@@ Arg@@ um@@ ent.get@@ Value@@ ()); org.junit.@@ Asser@@ t@@ .@@ assert@@ Th@@ at@@ (m@@ Headset@@ StateMach@@ in@@ e.get@@ Current@@ State@@ (), org.@@ h@@ am@@ c@@ res@@ t.@@ core.@@ Is@@ Instance@@ Of@@ .@@ instance@@ Of@@ (@@ Headset@@ StateMachine.@@ Connec@@ ted@@ .@@ class@@ )); }
private void on@@ Audio@@ State@@ Changed@@ (@@ int state@@ , byte@@ [] addres@@ s) { com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ Stack@@ Ev@@ ent ev@@ ent = new com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ Stack@@ Event@@ (@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ A@@ U@@ D@@ IO@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ ); ev@@ ent.@@ value@@ In@@ t = state@@ ; ev@@ ent.@@ de@@ vice = get@@ Device@@ (@@ addres@@ s); if (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Native@@ Interface@@ .@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Native@@ Interface@@ .@@ TAG, ("@@ on@@ Audio@@ State@@ Changed@@ : " + event@@ )); } com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Ser@@ vice ser@@ vice = com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service@@ .get@@ A@@ 2@@ dp@@ Service@@ (); if (@@ ser@@ vice != null@@ ) { service@@ .m@@ ess@@ age@@ From@@ Native@@ (@@ event@@ ); } else { android.util.Log.@@ w@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Native@@ Interface@@ .@@ TAG, "@@ on@@ Audio@@ State@@ Change@@ d ign@@ or@@ ed@@ : ser@@ vice not ava@@ il@@ able@@ "); } }
public void st@@ op@@ Network@@ Scan@@ (@@ int scan@@ Id) { synchronized@@ (m@@ S@@ ch@@ ed@@ ul@@ er@@ ) { if ((@@ (s@@ can@@ Id == (m@@ S@@ ch@@ ed@@ ul@@ er.@@ m@@ Li@@ ve@@ Request@@ Info@@ .m@@ Scan@@ Id@@ )) && ((@@ android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ()) == (m@@ S@@ ch@@ ed@@ ul@@ er.@@ m@@ Li@@ ve@@ Request@@ Info@@ .m@@ U@@ id@@ ))) || ((@@ scan@@ Id == (m@@ S@@ ch@@ ed@@ ul@@ er.@@ m@@ P@@ end@@ ing@@ Request@@ Info@@ .m@@ Scan@@ Id@@ )) && ((@@ android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ()) == (m@@ S@@ ch@@ ed@@ ul@@ er.@@ m@@ P@@ end@@ ing@@ Request@@ Info@@ .m@@ U@@ id@@ )@@ ))) { m@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Network@@ Scan@@ Request@@ Track@@ er.@@ C@@ M@@ D@@ _S@@ TO@@ P@@ _N@@ E@@ T@@ W@@ OR@@ K@@ _S@@ C@@ AN@@ , scan@@ Id@@ ).@@ send@@ To@@ Target@@ (); } else { throw new java.lang.Illegal@@ Argument@@ Exception@@ ((("@@ S@@ c@@ an wit@@ h id@@ : " + scan@@ Id) + " do@@ es not exist@@ !@@ ")); } } }
@org.junit.Test public void te@@ cover@@ y@@ From@@ Exception@@ On@@ M@@ ain@@ Thread@@ Loo@@ p@@ M@@ ain@@ Thread@@ Un@@ ti@@ l@@ Id@@ le@@ () throw@@ s java.lang.Exception { final java.lang.Runtime@@ Exception po@@ is@@ on = new java.lang.Runtime@@ Exception("@@ oo@@ ps@@ "); try { E@@ s@@ pres@@ so@@ .@@ on@@ View@@ (@@ w@@ ith@@ Id@@ (@@ R.@@ id.@@ en@@ ter@@ _@@ data@@ _@@ ed@@ it@@ _@@ tex@@ t@@ )).@@ p@@ er@@ for@@ m@@ (@@ new android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ E@@ s@@ pres@@ so@@ E@@ d@@ ge@@ C@@ ase@@ Test.@@ Test@@ Action@@ () { @java.lang.Override public void p@@ er@@ for@@ m@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ U@@ i@@ Contro@@ lle@@ r cont@@ ro@@ l@@ ler@@ , android.@@ view@@ .@@ Vi@@ e@@ w view@@ ) { main@@ Handler.@@ po@@ st@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { throw po@@ is@@ on@@ ; } }); cont@@ ro@@ l@@ ler.@@ lo@@ op@@ M@@ ain@@ Thread@@ Un@@ ti@@ l@@ Id@@ le@@ (); } }); fail@@ ("@@ sho@@ ul@@ d throw@@ "); } catch (java.lang.@@ Runtime@@ Exception re@@ ) { if (r@@ e == po@@ is@@ on@@ ) { } else { throw re@@ ; } } E@@ s@@ pres@@ so@@ .@@ on@@ View@@ (@@ w@@ ith@@ Id@@ (@@ R.@@ id.@@ en@@ ter@@ _@@ data@@ _@@ ed@@ it@@ _@@ tex@@ t@@ )).@@ p@@ er@@ for@@ m@@ (@@ type@@ Text@@ ("@@ Hel@@ l@@ o W@@ or@@ l@@ d@@ 1@@ 1@@ 1@@ ")); E@@ s@@ pres@@ so@@ .@@ on@@ View@@ (@@ w@@ ith@@ Id@@ (@@ R.@@ id.@@ en@@ ter@@ _@@ data@@ _@@ ed@@ it@@ _@@ tex@@ t@@ )).@@ check@@ (m@@ atch@@ es(@@ w@@ ith@@ Text@@ ("@@ Hel@@ l@@ o W@@ or@@ l@@ d@@ 1@@ "@@ ))); }
public void test@@ Sim@@ ple@@ M@@ app@@ ing@@ () throw@@ s java.lang.Exception { H@@ pro@@ f@@ Buff@@ er.@@ BU@@ F@@ ER@@ _S@@ I@@ Z@@ E = (@@ (@@ int@@ ) (@@ file.@@ length@@ ())); com.android.tools.@@ perflib.@@ he@@ ap.@@ S@@ n@@ ap@@ sho@@ t s@@ n@@ ap@@ sho@@ t = new com.android.tools.@@ perflib.@@ he@@ ap.@@ H@@ pro@@ f@@ Par@@ ser@@ (file@@ ).@@ parse@@ (); assert@@ S@@ n@@ ap@@ sho@@ t@@ C@@ or@@ re@@ ct@@ (s@@ n@@ ap@@ sho@@ t@@ ); }
@java.lang.Override public boolean vi@@ si@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d method@@ ) { for (com.android.jack.@@ ir.ast.J@@ Param@@ et@@ er param@@ et@@ er : method@@ .get@@ Param@@ s@@ ()) { add@@ Parameter@@ Name@@ (@@ param@@ et@@ er.get@@ Name@@ ()); ac@@ cess@@ Flag@@ s.add@@ (@@ new com.android.jack.ir.ast.J@@ Int@@ Li@@ ter@@ al@@ (@@ si@@ , param@@ et@@ er.get@@ Mo@@ d@@ if@@ ier@@ ())); } return super@@ .@@ vi@@ si@@ t@@ (m@@ ethod@@ ); }
public int get@@ Ex@@ pec@@ ted@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s() { if (!(@@ is@@ De@@ lay@@ R@@ ate@@ Test@@ able@@ ())) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ r@@ ate@@ U@@ s can@@ not b@@ e S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y_@@ [@@ G@@ AME@@ |@@ U@@ I@@ |@@ N@@ OR@@ M@@ AL@@ ]@@ "); } int expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s; switch (m@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s) { case android.hardware.@@ S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y_@@ FA@@ S@@ TE@@ S@@ T : expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = 0; break@@ ; case android.hardware.@@ S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y_@@ G@@ AM@@ E : expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = 2@@ 0000@@ ; break@@ ; case android.hardware.@@ S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y_@@ U@@ I : expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = 6@@ 6@@ 6@@ 7@@ ; break@@ ; case android.hardware.@@ S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y@@ _N@@ OR@@ MA@@ L : expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = 2@@ 0000@@ 0; break@@ ; default : expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = m@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s; break@@ ; } int s@@ en@@ s@@ or@@ Ma@@ x@@ De@@ la@@ y = m@@ S@@ en@@ s@@ or@@ .get@@ Ma@@ x@@ De@@ lay@@ (); if (s@@ en@@ s@@ or@@ Ma@@ x@@ De@@ la@@ y > 0) { expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s = java.lang.@@ M@@ ath@@ .m@@ in@@ (@@ expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s, s@@ en@@ s@@ or@@ Ma@@ x@@ De@@ lay@@ ); } return java.lang.@@ M@@ ath@@ .m@@ a@@ x@@ (@@ expected@@ S@@ am@@ pl@@ ing@@ Per@@ io@@ d@@ U@@ s, m@@ S@@ en@@ s@@ or@@ .get@@ Min@@ De@@ lay@@ ()); }
private void src@@ To@@ Com@@ mon@@ (@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.lang.String> command@@ Line@@ , @javax.annotation.@@ N@@ on@@ null java.io.File@@ .@@ .@@ . s@@ ources@@ ) { command@@ L@@ ine.@@ add@@ ("@@ --@@ ver@@ bo@@ se@@ "); command@@ L@@ ine.@@ add(@@ ver@@ bo@@ si@@ ty@@ Level.@@ name@@ ()); command@@ L@@ ine.@@ add@@ ("@@ --@@ s@@ an@@ ity@@ -@@ check@@ s@@ "); command@@ L@@ ine.@@ add@@ (java.lang.@@ Boole@@ an@@ .@@ toString@@ (s@@ an@@ ity@@ Check@@ s@@ )); if ((@@ in@@ crement@@ al@@ Folder@@ ) != null@@ ) { command@@ L@@ ine.@@ add@@ ("@@ --@@ in@@ crement@@ al@@ -@@ fo@@ l@@ der@@ "); command@@ L@@ ine.@@ add@@ (in@@ crement@@ al@@ Fol@@ d@@ er.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } com.android.jack.test.@@ toolchain.@@ Jack@@ C@@ li@@ Too@@ lch@@ ain.@@ add@@ Properties@@ (pro@@ per@@ ties@@ , arg@@ s); if (@@ (@@ class@@ path@@ .@@ size@@ ()) > 0) { command@@ L@@ ine.@@ add@@ ("@@ -@@ class@@ path@@ "); command@@ L@@ ine.@@ add@@ (get@@ Class@@ path@@ As@@ String@@ ()); } for (@@ java.io.File re@@ s : res@@ Imp@@ ort@@ ) { args.@@ add@@ ("@@ -@@ import@@ -@@ resource@@ "); args.@@ add(@@ res@@ .get@@ Path@@ ()); } for (@@ java.io.File m@@ et@@ a : m@@ eta@@ Imp@@ ort@@ ) { args.@@ add@@ ("@@ -@@ -@@ import@@ -@@ m@@ eta@@ "); args.@@ add@@ (m@@ eta@@ .get@@ Path@@ ()); } args.@@ add@@ All@@ (@@ ex@@ tra@@ Jack@@ Arg@@ s); for (@@ java.io.File ja@@ r@@ ja@@ r@@ File : ja@@ r@@ ja@@ r@@ R@@ ul@@ es) { args.@@ add@@ ("@@ --@@ config@@ -@@ ja@@ r@@ ja@@ r@@ "); args.@@ add(@@ ja@@ r@@ ja@@ r@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } for (@@ java.io.File flag@@ s : pro@@ gu@@ ard@@ Flag@@ s) { command@@ L@@ ine.@@ add@@ ("@@ --@@ config@@ -@@ pro@@ gu@@ ard@@ "); command@@ L@@ ine.@@ add@@ (f@@ lag@@ s.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } if (@@ w@@ ith@@ Debug@@ Info@@ s) { args.@@ add@@ ("@@ -@@ g@@ "); } add@@ Annot@@ ation@@ Process@@ or@@ Arg@@ s(@@ arg@@ s); for (@@ java.io.File static@@ Li@@ b : static@@ Lib@@ s) { command@@ L@@ ine.@@ add@@ ("@@ -@@ import@@ "); command@@ L@@ ine.@@ add@@ (@@ static@@ Lib@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } }
public boolean pro@@ vision@@ Dis@@ cover@@ y@@ (android.net.@@ w@@ if@@ i.@@ p@@ 2@@ p.@@ W@@ if@@ i@@ P2p@@ Con@@ fig config@@ ) { synchronized@@ (m@@ Lock) { if (!(@@ check@@ Supplicant@@ P2p@@ Iface@@ And@@ Log@@ Fail@@ ure@@ ("@@ set@@ up@@ "@@ ))) return false@@ ; int target@@ M@@ etho@@ d = w@@ ps@@ Info@@ To@@ Config@@ Method@@ (@@ config.@@ w@@ p@@ s.@@ set@@ up@@ ); if (@@ target@@ M@@ etho@@ d == (-1@@ )) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, ("@@ Un@@ re@@ co@@ gn@@ iz@@ ed W@@ P@@ S config@@ ur@@ ation method@@ : " + (@@ config.@@ w@@ p@@ s.@@ set@@ up@@ ))); return false@@ ; } byte@@ [] m@@ ac@@ Address = string@@ To@@ Addres@@ s(@@ config.@@ device@@ Addres@@ s); if (m@@ ac@@ Address == null@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, "@@ Can@@ not par@@ se null ma@@ c addres@@ s.@@ "); return false@@ ; } com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ <@@ java.lang.@@ Vo@@ id@@ > result = new com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ ((((@@ ("@@ pro@@ vision@@ Dis@@ cover@@ y@@ (@@ " + (@@ config.@@ device@@ Address@@ )) + ", ") + (@@ config.@@ w@@ p@@ s.@@ set@@ up@@ )) + "@@ )@@ ")); try { result.@@ set@@ Result@@ (m@@ I@@ Supplicant@@ P2p@@ Iface@@ .@@ pro@@ vision@@ Dis@@ cover@@ y@@ (m@@ ac@@ Addres@@ s, target@@ Method@@ )); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, ("@@ I@@ Supplicant@@ P2p@@ I@@ face excepti@@ on@@ : " + e@@ )); sup@@ plicant@@ Service@@ Di@@ ed@@ Handler@@ (); } return result.@@ is@@ Su@@ ccess@@ (); } }
public static com.android.ide.common.@@ b@@ l@@ am@@ e.@@ Mess@@ age.@@ K@@ in@@ d find@@ I@@ gn@@ or@@ ing@@ C@@ ase@@ (java.lang.String s) { return com.android.ide.common.@@ b@@ l@@ am@@ e.@@ Mess@@ age.@@ K@@ ind@@ .@@ find@@ I@@ gn@@ or@@ ing@@ C@@ ase@@ (s@@ , null@@ ); }
public void test_@@ s@@ ocket@@ _@@ ac@@ ce@@ p@@ t@@ _@@ Non@@ b@@ lock@@ ing@@ _@@ B@@ ound@@ () throw@@ s java.io.IOException { server@@ Chan@@ ne@@ l.@@ config@@ ure@@ Block@@ ing@@ (@@ false@@ ); server@@ Chan@@ ne@@ l.@@ b@@ ind@@ (@@ null@@ ); java.net.@@ Server@@ S@@ ock@@ et go@@ t@@ S@@ ock@@ et = server@@ Chan@@ ne@@ l.@@ s@@ ocket@@ (); try { go@@ t@@ Socket@@ .@@ ac@@ ce@@ p@@ t@@ (); fail@@ ("@@ S@@ ho@@ ul@@ d throw an Illegal@@ Block@@ ing@@ Mode@@ Exception@@ "); } catch (@@ java.nio.@@ channe@@ ls.@@ Illegal@@ Block@@ ing@@ Mode@@ Exception expected@@ ) { } server@@ Chan@@ ne@@ l.@@ close(); try { go@@ t@@ Socket@@ .@@ ac@@ ce@@ p@@ t@@ (); fail@@ ("@@ S@@ ho@@ ul@@ d throw a C@@ lo@@ sed@@ Channel@@ Exception@@ "); } catch (@@ java.nio.@@ channe@@ ls.@@ C@@ lo@@ sed@@ Channel@@ Exception expected@@ ) { } }
@org.junit.Test public void test@@ Open@@ U@@ dp@@ En@@ cap@@ Socket@@ Tag@@ s@@ Socket@@ () throw@@ s java.lang.Exception { com.android.server.@@ IpSec@@ Service.@@ U@@ id@@ F@@ d@@ Tag@@ g@@ er mock@@ Tag@@ g@@ er = mock@@ (@@ IpSec@@ Service.@@ U@@ id@@ F@@ d@@ Tag@@ g@@ er@@ .@@ class@@ ); com.android.server.@@ IpSec@@ Ser@@ vice test@@ IpSec@@ Ser@@ vice = new com.android.server.@@ IpSec@@ Service@@ (m@@ Mock@@ Contex@@ t, m@@ Mock@@ IpSec@@ S@@ r@@ v@@ Config@@ , mock@@ Tag@@ g@@ er@@ ); IpSec@@ U@@ dp@@ En@@ cap@@ Res@@ pon@@ se ud@@ p@@ En@@ cap@@ Res@@ p = test@@ IpSec@@ Service.@@ open@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ 0, new android.os.@@ Bin@@ der@@ ()); assert@@ NotNull@@ (@@ ud@@ p@@ En@@ cap@@ Res@@ p@@ ); assert@@ Equal@@ s(@@ IpSec@@ Manager.@@ Statu@@ s.@@ O@@ K@@ , ud@@ p@@ En@@ cap@@ Res@@ p.@@ stat@@ us@@ ); java.io.FileDescriptor s@@ ock@@ F@@ d = ud@@ p@@ En@@ cap@@ Res@@ p.@@ file@@ Descrip@@ tor@@ .get@@ File@@ Descrip@@ tor@@ (); org.@@ mock@@ it@@ o@@ .@@ Argument@@ M@@ atch@@ er@@ <@@ java.io.File@@ Descrip@@ tor@@ > f@@ d@@ M@@ atch@@ er = new org.@@ mock@@ it@@ o@@ .@@ Argument@@ M@@ atch@@ er@@ <@@ java.io.File@@ Descrip@@ tor@@ >@@ () { public boolean match@@ es(@@ java.io.FileDescriptor arg@@ ) { try { android.system.@@ Str@@ u@@ ct@@ St@@ at s@@ ock@@ St@@ at = android.system.@@ O@@ s.@@ f@@ stat@@ (s@@ ock@@ F@@ d@@ ); android.system.@@ Str@@ u@@ ct@@ St@@ at arg@@ St@@ at = android.system.@@ O@@ s.@@ f@@ stat@@ (@@ arg@@ ); return ((@@ s@@ ock@@ Stat@@ .@@ st@@ _@@ in@@ o@@ ) == (@@ arg@@ Stat@@ .@@ st@@ _@@ in@@ o@@ )) && ((@@ s@@ ock@@ Stat@@ .@@ st@@ _@@ de@@ v@@ ) == (@@ arg@@ Stat@@ .@@ st@@ _@@ de@@ v@@ )); } catch (android.@@ system.@@ ErrnoException e) { return false@@ ; } } }; ve@@ r@@ if@@ y@@ (m@@ ock@@ Tag@@ g@@ er@@ ).@@ t@@ ag@@ (@@ arg@@ Th@@ at@@ (f@@ d@@ M@@ atch@@ er@@ ), e@@ q@@ (android.@@ system.@@ O@@ s.get@@ uid@@ ())); test@@ IpSec@@ Service.@@ close@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ ud@@ p@@ En@@ cap@@ Res@@ p.@@ resource@@ Id); ud@@ p@@ En@@ cap@@ Res@@ p.@@ file@@ Descrip@@ tor.@@ close(); }
@com.android.annotations.@@ Null@@ able public com.android.sdklib.@@ I@@ Android@@ T@@ arg@@ et get@@ Target@@ From@@ Hash@@ String(@@ @com.android.annotations.@@ Null@@ able java.lang.String has@@ h@@ ) { if (@@ has@@ h != null@@ ) { for (com.android.s@@ dklib.@@ I@@ Android@@ T@@ arg@@ et t@@ arg@@ et : get@@ Target@@ s@@ ()) { if (@@ has@@ h@@ .@@ equals(@@ target@@ .@@ has@@ h@@ String@@ ())) { return target@@ ; } } return null@@ ; }
@java.lang.Override public void m@@ er@@ ge@@ Con@@ ference@@ (java.lang.String call@@ Id, android.telecom.@@ Logg@@ ing.@@ Session@@ .@@ Info session@@ Info@@ ) { android.telecom.@@ Log.@@ start@@ Session@@ (s@@ ession@@ Info@@ , android.telecom.@@ Connection@@ Service.@@ SE@@ SS@@ I@@ ON@@ _M@@ ER@@ G@@ E_@@ CON@@ F@@ ER@@ EN@@ C@@ E); try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s arg@@ s = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ S@@ om@@ e@@ Arg@@ s.@@ ob@@ tain@@ (); args.@@ arg@@ 1 = call@@ Id@@ ; args.@@ arg@@ 2 = android.telecom.@@ Log.@@ create@@ Sub@@ session@@ (); m@@ Handler.@@ ob@@ tain@@ Message@@ (android.@@ telecom.@@ Connection@@ Service.@@ MS@@ G@@ _M@@ ER@@ G@@ E_@@ CON@@ F@@ ER@@ EN@@ CE@@ , arg@@ s@@ ).@@ send@@ To@@ Target@@ (); } final@@ l@@ y { android.telecom.@@ Log.@@ end@@ Session@@ (); } }
public void min@@ core@@ (@@ long addres@@ s, long byte@@ Count@@ , byte@@ [] v@@ ec@@ tor@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void e@@ valu@@ ate@@ () throw@@ s java.lang.@@ Throw@@ able { for (@@ vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ Stream str@@ e@@ am : str@@ eam@@ s) { java.io.@@ P@@ r@@ int@@ Stream or@@ ig@@ in@@ al = str@@ eam@@ .get@@ (); vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ State st@@ ate = new vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ State@@ (@@ or@@ ig@@ in@@ al@@ ); str@@ eam@@ .set@@ (@@ new java.io.@@ P@@ r@@ int@@ Stream@@ (@@ stat@@ e.@@ b@@ a@@ o@@ s, true@@ , "@@ UT@@ F@@ -@@ 8@@ ")); str@@ eam@@ s@@ 2@@ State.@@ put@@ (@@ str@@ eam@@ , state@@ ); } try { b@@ ase.@@ e@@ valu@@ ate@@ (); } final@@ l@@ y { for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <@@ vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ Stream@@ , vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ State@@ > e@@ n@@ try : str@@ eam@@ s@@ 2@@ State.@@ e@@ n@@ try@@ Set@@ ()) { vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ Stream str@@ e@@ am = e@@ n@@ try@@ .get@@ Key@@ (); vo@@ g@@ ar.@@ test@@ ing.@@ Inter@@ ce@@ p@@ t@@ Output@@ Stream@@ s.@@ State st@@ ate = e@@ n@@ try@@ .get@@ Value@@ (); str@@ eam@@ .set@@ (@@ stat@@ e.@@ or@@ ig@@ in@@ al@@ ); } str@@ eam@@ s@@ 2@@ State.@@ clear@@ (); } }
@org.junit.Test public void test@@ Get@@ E@@ uic@@ c@@ Info@@ 1@@ () { int channe@@ l = mock@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ s@@ es@@ ("@@ B@@ F@@ 2@@ 00@@ 3@@ 0@@ 10@@ 2@@ 0@@ 3@@ 9@@ 00@@ 0@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ No@@ []@@ > result@@ Cap@@ tor = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ >(); m@@ E@@ uic@@ c@@ Card@@ .get@@ E@@ uic@@ c@@ Info@@ 1@@ ().@@ to@@ H@@ ex@@ ()@@ ve@@ r@@ if@@ y@@ Store@@ Data@@ (@@ chan@@ nel@@ , "@@ B@@ F@@ 2@@ 00@@ 0@@ "); }
private void check@@ A@@ co@@ s@@ Float3Float3@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 3@@ , -@@ 2@@ 1@@ 5@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ A@@ co@@ s@@ Float3Float3@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ A@@ co@@ s@@ Float3Float3@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ A@@ co@@ s@@ Float3Float3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ A@@ co@@ s@@ Float3Float3@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ A@@ co@@ s@@ Float3Float3@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ A@@ co@@ s@@ Float3Float3@@ : " + (e.toString()))); } }
@java.lang.Override public boolean is@@ App@@ H@@ id@@ d@@ en@@ By@@ Key@@ gu@@ ard@@ (android.@@ view@@ .@@ I@@ Application@@ To@@ ke@@ n app@@ To@@ k@@ en@@ ) { if ((m@@ Key@@ gu@@ ard@@ De@@ le@@ g@@ ate@@ ) == null@@ ) return false@@ ; return (m@@ Key@@ gu@@ ard@@ De@@ le@@ g@@ at@@ e.@@ is@@ S@@ ho@@ w@@ ing@@ ()) && ((@@ (m@@ W@@ in@@ S@@ ho@@ w@@ W@@ h@@ en@@ Lock@@ ed@@ ) == null@@ ) || ((m@@ W@@ in@@ S@@ ho@@ w@@ W@@ h@@ en@@ Lock@@ ed@@ .get@@ App@@ To@@ k@@ en@@ ()) != app@@ To@@ k@@ en@@ )); }
private int get@@ Res@@ tri@@ ct@@ B@@ ack@@ gro@@ und@@ Status@@ () throw@@ s java.lang.Exception { final android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (com.android.@@ cts.@@ net.@@ ho@@ st@@ s@@ ide.@@ Abstract@@ Res@@ tri@@ ct@@ B@@ ack@@ gro@@ und@@ Network@@ Test@@ C@@ ase.@@ AC@@ TION_@@ G@@ E@@ T_@@ RE@@ S@@ TR@@ IC@@ T_@@ B@@ AC@@ K@@ G@@ RO@@ UN@@ D@@ _STA@@ T@@ US@@ ); final java.lang.String result@@ Data = send@@ Or@@ der@@ ed@@ Broadcast@@ (@@ int@@ ent@@ ); assert@@ NotNull@@ ("@@ time@@ out wait@@ ing for or@@ der@@ ed b@@ road@@ cas@@ t result@@ ", result@@ Data@@ ); return java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ result@@ Data@@ ); }
@org.junit.Test public void test@@ Request@@ Network@@ Scan@@ () throw@@ s java.lang.@@ Inter@@ rup@@ ted@@ Exception { if (!(m@@ Telephony@@ Manager.@@ has@@ C@@ arrier@@ Pri@@ vi@@ le@@ g@@ es@@ ())) { android.util.Log.d@@ (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ TAG, "@@ S@@ k@@ ip@@ p@@ ing t@@ est th@@ at requ@@ ire@@ s c@@ arri@@ er pri@@ vi@@ le@@ g@@ es.@@ "); return@@ ; } int r@@ an@@ G@@ s@@ m = Rad@@ io@@ Network@@ Constants.@@ Access@@ Network@@ s.@@ G@@ ER@@ AN@@ ; int@@ [] g@@ sm@@ B@@ and@@ s = new int@@ []{ Rad@@ io@@ Network@@ Constants.@@ G@@ er@@ an@@ B@@ and@@ s.@@ B@@ AN@@ D_@@ T@@ 3@@ 8@@ 0, Rad@@ io@@ Network@@ Constants.@@ G@@ er@@ an@@ B@@ and@@ s.@@ B@@ AN@@ D_@@ T@@ 4@@ 1@@ 0 }; int@@ [] g@@ sm@@ Channel@@ s = new int@@ []{ 1, 2, 3@@ , 4 }; android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er g@@ s@@ m = new android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ (r@@ an@@ G@@ sm@@ , g@@ sm@@ B@@ and@@ s, g@@ sm@@ Channel@@ s); int r@@ an@@ L@@ t@@ e = Rad@@ io@@ Network@@ Constants.@@ Rad@@ io@@ Access@@ Network@@ s.@@ E@@ UT@@ R@@ AN@@ ; int@@ [] l@@ te@@ B@@ and@@ s = new int@@ []{ Rad@@ io@@ Network@@ Constants.@@ E@@ u@@ tr@@ an@@ B@@ and@@ s.@@ B@@ AN@@ D_@@ 1@@ 0, Rad@@ io@@ Network@@ Constants.@@ E@@ u@@ tr@@ an@@ B@@ and@@ s.@@ B@@ AN@@ D_@@ 1@@ 1 }; int@@ [] l@@ te@@ Channel@@ s = new int@@ []{ 5, 6@@ , 7@@ , 8 }; android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er l@@ t@@ e = new android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ (r@@ an@@ L@@ te@@ , l@@ te@@ B@@ and@@ s, l@@ te@@ Channel@@ s); android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ [] rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er = new android.telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ []{ g@@ sm@@ , l@@ t@@ e }; m@@ Network@@ Scan@@ Requ@@ est = new android.telephony.@@ Network@@ Scan@@ Request@@ (android.@@ telephony.@@ Network@@ Scan@@ Requ@@ est.@@ S@@ C@@ AN@@ _@@ TYPE_@@ ON@@ E_@@ S@@ H@@ O@@ T, rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ , 5, 6@@ 0, true@@ , 1@@ 0, null@@ ); m@@ Network@@ Scan@@ Call@@ b@@ ac@@ k = new android.telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ Network@@ Scan@@ Callback@@ Imp@@ l@@ (); android.os.@@ Message start@@ Network@@ S@@ c@@ an = m@@ Handler.@@ ob@@ tain@@ Message@@ (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ EVEN@@ T_@@ NE@@ T@@ W@@ OR@@ K@@ _S@@ C@@ AN@@ _STA@@ R@@ T@@ ); start@@ Network@@ Scan@@ .@@ send@@ To@@ Target@@ (); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ MA@@ X_@@ IN@@ I@@ T_@@ W@@ A@@ I@@ T_@@ MS@@ ); android.util.Log.d@@ (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ TAG, ("@@ m@@ Network@@ Scan@@ Status@@ : " + (m@@ Network@@ Scan@@ Status@@ ))); assert@@ True@@ ("@@ Th@@ e final s@@ c@@ an statu@@ s is not Scan@@ Comp@@ let@@ ed or Scan@@ Error@@ ", scan@@ Comp@@ lete@@ Status@@ ()); }
@java.lang.Override public void en@@ ter@@ () { if ((m@@ Server@@ Session@@ ) != null@@ ) { m@@ Server@@ Session@@ .@@ close(); m@@ Server@@ S@@ es@@ sion = null@@ ; } if ((m@@ Con@@ n@@ Socket@@ ) != null@@ ) { try { m@@ Con@@ n@@ Socket@@ .@@ close(); m@@ Con@@ n@@ S@@ ock@@ et = null@@ ; } catch (java.io.IOException e) { android.util.Log.e@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Pb@@ ap@@ StateMachine.@@ TAG, ("@@ C@@ lo@@ se Connec@@ tion S@@ ock@@ et error@@ : " + (e.toString()))); } } m@@ Session@@ Status@@ Handler.@@ ob@@ tain@@ Message@@ (@@ Bluetooth@@ Pb@@ ap@@ Service.@@ MS@@ G@@ _STA@@ TE_@@ M@@ AC@@ H@@ IN@@ E_@@ D@@ ON@@ E@@ ).@@ send@@ To@@ Target@@ (); }
private void check@@ Er@@ f@@ Float2Float2@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Er@@ f@@ Float2Float2@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Er@@ f@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Er@@ f@@ Float2Float2@@ (in, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Er@@ f@@ Float2Float2@@ : " + (e.toString()))); } }
private static boolean is@@ Short@@ Code@@ U@@ SS@@ D@@ (java.lang.String di@@ al@@ String@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ g@@ s@@ m.@@ G@@ S@@ M@@ Phon@@ e phon@@ e) { if ((@@ di@@ al@@ Str@@ ing != null@@ ) && ((@@ di@@ al@@ Str@@ ing.@@ length@@ ()) <@@ = (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ g@@ s@@ m.@@ G@@ sm@@ M@@ m@@ i@@ Co@@ d@@ e.@@ MA@@ X_@@ L@@ EN@@ G@@ TH@@ _S@@ H@@ OR@@ T_@@ C@@ O@@ DE@@ ))) { if (@@ phon@@ e.@@ is@@ In@@ Call@@ ()) { return true@@ ; } if (!@@ (((@@ di@@ al@@ Str@@ ing.@@ length@@ ()) == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ g@@ s@@ m.@@ G@@ sm@@ M@@ m@@ i@@ Co@@ d@@ e.@@ MA@@ X_@@ L@@ EN@@ G@@ TH@@ _S@@ H@@ OR@@ T_@@ C@@ O@@ DE@@ )) && ((@@ di@@ al@@ String@@ .@@ char@@ At@@ (0@@ )) == '@@ 1@@ '@@ ))) { return true@@ ; } } return false@@ ; }
@java.lang.Override int b@@ l@@ end@@ () { float r = ((@@ src@@ R@@ ) * (d@@ st@@ A@@ )) + ((@@ 1 - (s@@ rc@@ A@@ )) * (d@@ st@@ R@@ )); float g = ((@@ src@@ G) * (d@@ st@@ A@@ )) + ((@@ 1 - (s@@ rc@@ A@@ )) * (d@@ st@@ G@@ )); float b = ((@@ src@@ B@@ ) * (d@@ st@@ A@@ )) + ((@@ 1 - (s@@ rc@@ A@@ )) * (d@@ st@@ B@@ )); float a = ((@@ src@@ A@@ ) * (d@@ st@@ A@@ )) + ((@@ 1 - (s@@ rc@@ A@@ )) * (d@@ st@@ A@@ )); return pack@@ (@@ a@@ , r@@ , g@@ , b@@ ); }
public java.lang.String get@@ G@@ cc@@ Too@@ lch@@ ain@@ Version@@ (java.lang.String ab@@ i@@ ) { if (@@ toolch@@ ain@@ Nam@@ e.@@ equal@@ s("@@ g@@ cc@@ ")) { return toolch@@ ain@@ Version@@ .is@@ Empty@@ () ? get@@ Default@@ Too@@ lch@@ ain@@ Version@@ (@@ ab@@ i@@ ) : toolch@@ ain@@ Version@@ ; } else { return com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Handler.@@ is@@ 6@@ 4@@ Bit@@ s@@ Ab@@ i@@ (@@ ab@@ i@@ ) ? com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Handler.@@ DE@@ FA@@ UL@@ T_@@ L@@ V@@ M@@ _@@ G@@ C@@ 6@@ 4@@ _@@ V@@ E@@ RS@@ IO@@ N : com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Handler.@@ DE@@ FA@@ UL@@ T_@@ L@@ V@@ M@@ _@@ G@@ C@@ 32@@ _@@ V@@ E@@ RS@@ I@@ ON@@ ; } }
void set@@ E@@ m@@ it@@ Debug@@ (@@ boolean em@@ it@@ Debug@@ ) throw@@ s com.android.jack.@@ api.@@ v@@ 0@@ 1.@@ Configuration@@ Exception;
private void check@@ D@@ st@@ Field@@ s(@@ java.util.@@ Cal@@ end@@ a@@ r cal@@ , java.lang.String des@@ cription@@ , int expected@@ Zone@@ Offset@@ , int expected@@ D@@ st@@ Offset@@ ) { assert@@ Equal@@ s@@ (("@@ In@@ cor@@ re@@ c@@ t Z@@ ON@@ E_@@ O@@ F@@ SE@@ T@@ : " + des@@ cription@@ ), expected@@ Zone@@ Offset@@ , cal@@ .get@@ (java.util.@@ Cal@@ end@@ ar.@@ Z@@ ON@@ E_@@ O@@ F@@ SE@@ T@@ )); assert@@ Equal@@ s@@ (("@@ In@@ cor@@ re@@ c@@ t D@@ ST_@@ O@@ F@@ SE@@ T@@ : " + des@@ cription@@ ), expected@@ D@@ st@@ Offset@@ , cal@@ .get@@ (java.util.@@ Cal@@ end@@ ar.@@ D@@ ST_@@ O@@ F@@ F@@ SE@@ T@@ )); }
@java.lang.Override org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de get@@ A@@ do@@ p@@ ted@@ Node@@ (@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Doc@@ um@@ ent do@@ c@@ ument@@ ) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Elem@@ ent e@@ lem@@ ent = do@@ c@@ um@@ ent.@@ create@@ Element@@ ("@@ g@@ ener@@ ated@@ -@@ file@@ "); e@@ lem@@ ent.@@ set@@ Attribute@@ (@@ Sdk@@ Constants.@@ AT@@ TR@@ _P@@ A@@ TH@@ , m@@ Gener@@ ated@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); e@@ lem@@ ent.@@ set@@ Attribute@@ (@@ Sdk@@ Constants.@@ AT@@ TR@@ _@@ TYP@@ E, get@@ Type@@ ().get@@ Name@@ ()); e@@ lem@@ ent.@@ set@@ Attribute@@ (@@ Resource@@ File@@ .@@ AT@@ TR@@ _@@ Q@@ U@@ AL@@ I@@ FI@@ ER@@ , m@@ Q@@ u@@ al@@ if@@ ier@@ s); return e@@ lement@@ ; }
public void f@@ dat@@ as@@ ync@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public void m@@ ark@@ (@@ int res@@ er@@ ve@@ ) { m@@ ar@@ k = c@@ ur@@ s@@ or@@ ; }
public static int m@@ ag@@ ic@@ To@@ Api@@ (@@ byte@@ [] m@@ ag@@ ic@@ ) { if ((m@@ ag@@ ic@@ .@@ length) != 8@@ ) { return -1@@ ; } if ((((@@ ((m@@ ag@@ ic@@ [0@@ ]@@ ) != '@@ d@@ '@@ ) || ((m@@ ag@@ ic@@ [@@ 1@@ ]@@ ) != '@@ e@@ '@@ )) || ((m@@ ag@@ ic@@ [@@ 2@@ ]@@ ) != '@@ x@@ '@@ )) || ((m@@ ag@@ ic@@ [@@ 3@@ ]@@ ) != '@@ \n@@ '@@ )) || ((m@@ ag@@ ic@@ [@@ 7@@ ]@@ ) != '@@ \@@ u@@ 0000@@ '@@ )) { return -1@@ ; } java.lang.String ver@@ sion = (("@@ " + (@@ (@@ char@@ ) (m@@ ag@@ ic@@ [@@ 4@@ ]@@ ))) + (@@ (@@ char@@ ) (m@@ ag@@ ic@@ [@@ 5@@ ]@@ ))) + (@@ (@@ char@@ ) (m@@ ag@@ ic@@ [@@ 6@@ ]@@ )); if (@@ ver@@ sion@@ .@@ equal@@ s@@ (com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ V@@ E@@ RS@@ I@@ ON@@ _C@@ UR@@ RE@@ N@@ T@@ )) { return com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ AP@@ I@@ _C@@ UR@@ RE@@ N@@ T@@ ; } else if (@@ ver@@ sion@@ .@@ equal@@ s@@ (com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ V@@ E@@ RS@@ I@@ ON@@ _@@ F@@ OR@@ _@@ AP@@ I@@ _@@ 2@@ 3@@ )) { return com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ AP@@ I@@ _N@@ O@@ _@@ DE@@ FA@@ UL@@ T_@@ ME@@ TH@@ OD@@ ; } else if (@@ ver@@ sion@@ .@@ equal@@ s@@ (com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ V@@ E@@ RS@@ I@@ ON@@ _@@ F@@ OR@@ _@@ AP@@ I@@ _@@ 1@@ 3@@ )) { return com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ AP@@ I@@ _N@@ O@@ _@@ EX@@ TE@@ N@@ DE@@ D_@@ OP@@ C@@ O@@ DE@@ S@@ ; } return -1@@ ; }
public void test_@@ read@@ $@@ B@@ I@@ 3@@ () throw@@ s java.io.IOException { java.io.File resource@@ s = tests.@@ support.@@ resource@@ .@@ Sup@@ port@@ _@@ Res@@ our@@ ces.@@ create@@ Temp@@ Folder@@ (); tests.@@ support.@@ resource@@ .@@ Sup@@ port@@ _@@ Res@@ our@@ ces.@@ copy@@ File@@ (@@ resour@@ ces@@ , null@@ , "@@ B@@ ro@@ k@@ en@@ _@@ m@@ an@@ if@@ est.@@ ja@@ r@@ "); java.io.File@@ Input@@ Stream fi@@ s = new java.io.File@@ InputStream@@ (@@ new java.io.File@@ (@@ resour@@ ces@@ , "@@ B@@ ro@@ k@@ en@@ _@@ m@@ an@@ if@@ est.@@ ja@@ r@@ ")); try (java.util.@@ z@@ i@@ p.@@ In@@ f@@ lat@@ er@@ Input@@ Stream i@@ is = new java.util.@@ z@@ i@@ p.@@ In@@ f@@ lat@@ er@@ InputStream@@ (@@ fi@@ s@@ )) { byte@@ [] out@@ Bu@@ f = new byte@@ [@@ 5@@ 3@@ 0@@ ]; try { i@@ is.@@ read@@ (); fail@@ ("@@ IO@@ Exception expected@@ .@@ "); } catch (java.io.IOException e) { } }
private void on@@ Lock@@ ed@@ All@@ Record@@ s@@ Load@@ ed@@ () { set@@ Sim@@ L@@ an@@ gu@@ age@@ From@@ E@@ F@@ (); if ((m@@ Lock@@ ed@@ Record@@ s@@ Re@@ q@@ Re@@ as@@ on@@ ) == (@@ LO@@ C@@ K@@ ED@@ _RE@@ C@@ OR@@ D@@ S@@ _RE@@ Q@@ _RE@@ A@@ S@@ ON@@ _P@@ IN@@ _@@ LO@@ C@@ K@@ ED@@ )) { m@@ Lock@@ ed@@ Record@@ s@@ Load@@ ed@@ Reg@@ is@@ tr@@ an@@ ts.@@ not@@ if@@ y@@ Reg@@ is@@ tr@@ an@@ ts@@ (@@ new android.os.@@ As@@ ync@@ Result@@ (@@ null@@ , null@@ , null@@ )); } else { m@@ Network@@ Lock@@ ed@@ Record@@ s@@ Load@@ ed@@ Reg@@ is@@ tr@@ an@@ ts.@@ not@@ if@@ y@@ Reg@@ is@@ tr@@ an@@ ts@@ (@@ new android.os.@@ As@@ ync@@ Result@@ (@@ null@@ , null@@ , null@@ )); } }
private static java.lang.String get@@ Gener@@ ic@@ L@@ ab@@ el@@ (com.android.s@@ dklib.@@ de@@ vices.@@ Device d@@ ) { java.lang.String name = d@@ .getName@@ (); if (@@ nam@@ e.@@ equal@@ s("@@ 3@@ .@@ 7 F@@ W@@ V@@ G@@ A s@@ l@@ id@@ er@@ ")) { name = "@@ 3@@ .@@ 7@@ in F@@ W@@ V@@ G@@ A s@@ l@@ id@@ er@@ "; } java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er match@@ er = com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ ui.@@ Device@@ Manager@@ P@@ age.@@ P@@ AT@@ TER@@ N@@ .@@ match@@ er(@@ name@@ ); if (m@@ atch@@ er.@@ match@@ es@@ ()) { java.lang.String siz@@ e = match@@ er.@@ gro@@ up@@ (1@@ ); java.lang.String n = match@@ er.@@ gro@@ up@@ (@@ 2@@ ); int do@@ t = siz@@ e.@@ index@@ Of@@ (@@ '@@ .@@ '@@ ); if (@@ do@@ t == (-1@@ )) { siz@@ e = siz@@ e + "@@ .@@ 0@@ "; do@@ t = (@@ siz@@ e.@@ length@@ ()) - 2@@ ; } for (@@ int i = 0; i < (@@ 2 - do@@ t@@ ); i++) { siz@@ e = ' ' ' + size@@ ; } name = (@@ siz@@ e + "@@ \@@ " ") + n@@ ; } return name@@ ; }
public static int $@@ no@@ in@@ line@@ $@@ Sub@@ Ne@@ g@@ 1@@ (@@ int arg@@ 1, int arg@@ 2@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ -@@ arg@@ 1@@ ) - arg@@ 2@@ ; }
private static java.lang.String str@@ ip@@ C@@ ate@@ gor@@ y@@ Pre@@ fix@@ (java.lang.String name@@ ) { int in@@ dex = nam@@ e.@@ index@@ Of@@ (@@ '@@ :@@ '@@ ); if ((@@ in@@ dex >@@ = 0) && (in@@ dex < ((@@ nam@@ e.@@ length@@ ()) - 1@@ ))) { return nam@@ e.@@ sub@@ string@@ ((@@ in@@ dex + 1@@ )); } else { return name@@ ; } }
@org.junit.Test public void test@@ 00@@ 1@@ () { junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 1@@ 0, com.android.jack.@@ java@@ 8@@ .@@ l@@ amb@@ da.@@ test@@ 0@@ 4@@ 2.@@ Test@@ s.get@@ Value@@ (1@@ 0@@ )); }
private void set@@ B@@ t@@ S@@ co@@ Active@@ Device@@ (android.bluetooth.Bluetooth@@ Device b@@ t@@ Device@@ ) { if (com.android.server.@@ a@@ ud@@ io.@@ Audio@@ Service.@@ DE@@ BU@@ G@@ _@@ DE@@ VIC@@ E@@ S@@ ) { android.util.Log.d@@ (com.android.server.@@ a@@ ud@@ io.@@ Audio@@ Service.TAG, (("@@ set@@ B@@ t@@ S@@ co@@ Active@@ Device@@ (@@ " + b@@ t@@ Device@@ ) + "@@ )@@ ")); } synchronized@@ (m@@ S@@ co@@ Client@@ s) { final android.@@ bluetooth.Bluetooth@@ Device pre@@ vi@@ ou@@ s@@ Active@@ Device = m@@ Bluetooth@@ Headset@@ Device@@ ; if (!(@@ java.util.@@ Object@@ s.@@ equals(@@ b@@ t@@ Device@@ , pre@@ vi@@ ou@@ s@@ Active@@ Device@@ ))) { if (!(@@ handle@@ B@@ t@@ S@@ co@@ Active@@ Device@@ Change@@ (p@@ re@@ vi@@ ou@@ s@@ Active@@ Device@@ , false@@ ))) { android.util.Log.@@ w@@ (com.android.server.@@ a@@ ud@@ io.@@ Audio@@ Service.TAG, ("@@ set@@ B@@ t@@ S@@ co@@ Active@@ Device@@ () fa@@ ile@@ d to remo@@ v@@ e pre@@ vi@@ ou@@ s de@@ vice " + pre@@ vi@@ ou@@ s@@ Active@@ Device@@ )); } if (!(@@ handle@@ B@@ t@@ S@@ co@@ Active@@ Device@@ Change@@ (b@@ t@@ Device@@ , true@@ ))) { android.util.Log.e@@ (com.android.server.@@ a@@ ud@@ io.@@ Audio@@ Service.TAG, ("@@ set@@ B@@ t@@ S@@ co@@ Active@@ Device@@ () fa@@ ile@@ d to ad@@ d new de@@ vice " + b@@ t@@ Device@@ )); b@@ t@@ Device = null@@ ; } m@@ Bluetooth@@ Headset@@ Device = b@@ t@@ Device@@ ; if ((m@@ Bluetooth@@ Headset@@ Device@@ ) == null@@ ) { res@@ et@@ Bluetooth@@ S@@ co@@ (); } } }
public int get@@ s@@ ock@@ op@@ t@@ Int@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ get@@ s@@ ock@@ op@@ t@@ Int@@ (f@@ d, le@@ vel@@ , option@@ ); }
public void on@@ R@@ tt@@ In@@ iti@@ ation@@ Su@@ ccess@@ (android.@@ telecom.@@ Connec@@ tion c@@ ) { }
public void test_@@ get@@ Dec@@ im@@ al@@ Se@@ par@@ ator@@ Al@@ w@@ ay@@ s@@ S@@ ho@@ wn@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ 0.@@ #@@ #@@ "); assert@@ True@@ ("@@ W@@ ron@@ g un@@ set value@@ ", d@@ f.@@ is@@ Dec@@ im@@ al@@ Se@@ par@@ ator@@ Al@@ w@@ ay@@ s@@ S@@ ho@@ wn@@ ()))); d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ 0.@@ 00@@ "); assert@@ True@@ ("@@ W@@ ron@@ g un@@ set@@ 2 value@@ ", (!(@@ d@@ f.@@ is@@ Dec@@ im@@ al@@ Se@@ par@@ ator@@ Al@@ w@@ ay@@ s@@ S@@ ho@@ wn@@ ()))); d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ #@@ #@@ 0.@@ "); assert@@ True@@ ("@@ W@@ ron@@ g set value@@ ", d@@ f.@@ is@@ Dec@@ im@@ al@@ Se@@ par@@ ator@@ Al@@ w@@ ay@@ s@@ S@@ ho@@ wn@@ ()); }
@java.lang.Override public void on@@ Change@@ (@@ boolean un@@ us@@ ed@@ ) { synchronized@@ (@@ this@@ ) { if (is@@ Bluetooth@@ Per@@ si@@ s@@ ted@@ State@@ On@@ ()) { if (is@@ A@@ ir@@ p@@ lan@@ e@@ Mode@@ On@@ ()) { per@@ si@@ st@@ Bluetooth@@ Setting@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ ON@@ _@@ A@@ I@@ R@@ P@@ L@@ AN@@ E); } else { per@@ si@@ st@@ Bluetooth@@ Setting@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ ON@@ _@@ BL@@ UE@@ TO@@ O@@ TH@@ ); } } int s@@ t = android.@@ bluetooth.Bluetooth@@ Adap@@ ter.@@ STATE_@@ O@@ F@@ F@@ ; try { m@@ Bluetooth@@ Lock@@ .@@ read@@ Lock@@ ().@@ lock@@ (); if ((m@@ Bluetooth@@ ) != null@@ ) { s@@ t = m@@ Bluetooth@@ .get@@ State@@ (); } } catch (android.os.RemoteException e) { android.util.@@ S@@ log.@@ e@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ Un@@ able to cal@@ l get@@ State@@ ", e); return@@ ; } final@@ l@@ y { m@@ Bluetooth@@ Lock@@ .@@ read@@ Lock@@ ().@@ un@@ lock@@ (); } android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, ("@@ A@@ ir@@ p@@ lan@@ e Mod@@ e chan@@ g@@ e - curr@@ ent state@@ : " + (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ name@@ For@@ State@@ (@@ st@@ )))); if (is@@ A@@ ir@@ p@@ lan@@ e@@ Mode@@ On@@ ()) { clear@@ B@@ le@@ Ap@@ ps@@ (); if (s@@ t == (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ STATE_@@ BL@@ E_@@ ON@@ )) { try { m@@ Bluetooth@@ Lock@@ .@@ read@@ Lock@@ ().@@ lock@@ (); if ((m@@ Bluetooth@@ ) != null@@ ) { m@@ Bluetooth@@ .@@ on@@ B@@ r@@ E@@ d@@ r@@ Down@@ (); m@@ En@@ able = false@@ ; m@@ Enable@@ Ex@@ ter@@ n@@ al = false@@ ; } } catch (android.os.RemoteException e) { android.util.@@ S@@ log.@@ e@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ Un@@ able to cal@@ l on@@ B@@ r@@ E@@ d@@ r@@ Down@@ ", e); } final@@ l@@ y { m@@ Bluetooth@@ Lock@@ .@@ read@@ Lock@@ ().@@ un@@ lock@@ (); } } else if (s@@ t == (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ STATE_@@ ON@@ )) { send@@ Dis@@ able@@ M@@ s@@ g@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ RE@@ A@@ S@@ ON@@ _@@ A@@ I@@ R@@ P@@ L@@ AN@@ E_@@ M@@ O@@ DE@@ , android.app.@@ Activity@@ Thread@@ .@@ current@@ Package@@ Name@@ ()); } } else if (m@@ Enable@@ Ex@@ ter@@ nal@@ ) { send@@ Enable@@ M@@ s@@ g@@ (m@@ Q@@ ui@@ et@@ Enable@@ Ex@@ ter@@ nal@@ , com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ RE@@ A@@ S@@ ON@@ _@@ A@@ I@@ R@@ P@@ L@@ AN@@ E_@@ M@@ O@@ DE@@ , android.app.@@ Activity@@ Thread@@ .@@ current@@ Package@@ Name@@ ()); } } }
public void test_@@ parse@@ _@@ wid@@ e@@ R@@ an@@ ge@@ () { final java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ java.util.@@ Loc@@ a@@ le.@@ US@@ ); java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ 0.@@ #@@ ", d@@ f@@ s); for@@ mat@@ .set@@ Ma@@ x@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s(@@ 4@@ 00@@ ); for@@ mat@@ .set@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 4@@ 00@@ ); for (@@ int i = 0; i < 3@@ 0@@ 9@@ ; i++) { java.lang.String t@@ va@@ l = "@@ 1@@ "; for (@@ int j = 0; j < i@@ ; j@@ ++) { t@@ va@@ l +@@ = "@@ 0@@ "; } do@@ ub@@ le d = java.lang.@@ D@@ ou@@ b@@ le.@@ parse@@ D@@ ouble@@ (t@@ val@@ ); java.lang.String result = for@@ mat@@ .@@ for@@ mat@@ (d@@ ); assert@@ Equal@@ s@@ ((((@@ (@@ i + ") e@@ :@@ ") + t@@ val@@ ) + " r@@ :@@ ") + result@@ ), t@@ val@@ , result@@ ); } for (@@ int i = 0; i < 32@@ 2@@ ; i++) { java.lang.String t@@ va@@ l = "@@ 0.@@ "; for (@@ int j = 0; j < i@@ ; j@@ ++) { t@@ va@@ l +@@ = "@@ 0@@ "; } t@@ va@@ l +@@ = "@@ 1@@ "; do@@ ub@@ le d = java.lang.@@ D@@ ou@@ b@@ le.@@ parse@@ D@@ ouble@@ (t@@ val@@ ); java.lang.String result = for@@ mat@@ .@@ for@@ mat@@ (d@@ ); assert@@ Equal@@ s@@ ((((@@ (@@ i + ") e@@ :@@ ") + t@@ val@@ ) + " r@@ :@@ ") + result@@ ), t@@ val@@ , result@@ ); } }
public boolean p@@ 2@@ p@@ Re@@ invok@@ e@@ (@@ int net@@ Id, java.lang.String device@@ Addres@@ s) { if ((@@ android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (device@@ Address@@ )) || (@@ net@@ Id < 0@@ )) return false@@ ; if ((@@ com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ H@@ ID@@ L@@ _P@@ 2@@ P@@ _@@ EN@@ ABL@@ E@@ ) && ((m@@ Supplicant@@ P2p@@ Iface@@ H@@ al@@ ) != null@@ )) { return m@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ re@@ invok@@ e@@ (@@ net@@ Id, device@@ Addres@@ s); } else { return do@@ Boole@@ an@@ Command@@ ((@@ (("@@ P2@@ P@@ _@@ IN@@ V@@ I@@ T@@ E per@@ si@@ st@@ ent@@ =@@ " + net@@ Id) + " pe@@ er@@ =@@ ") + device@@ Address@@ )); } }
public void test@@ B@@ ro@@ k@@ en@@ Set@@ 3@@ () throw@@ s java.lang.Exception { java.io.File ro@@ o@@ t = com.android.@@ test@@ uti@@ ls.@@ Test@@ Utils.@@ get@@ Root@@ ("@@ resour@@ ces@@ ", "@@ b@@ ro@@ k@@ en@@ Set@@ 3@@ "); com.android.ide.common.@@ res@@ 2.@@ Resource@@ Se@@ t set = new com.android.ide.common.@@ res@@ 2.@@ Resource@@ Set@@ ("@@ main@@ "); set@@ .add@@ Source@@ (@@ ro@@ o@@ t@@ ); boolean go@@ t@@ Exception = false@@ ; com.android.ide.common.@@ res@@ 2.@@ Record@@ ing@@ Logg@@ er logg@@ er = new com.android.ide.common.@@ res@@ 2.@@ Record@@ ing@@ Logg@@ er@@ (); try { set@@ .@@ load@@ From@@ Fil@@ es(@@ logg@@ er@@ ); } catch (com.android.ide.@@ common.@@ res@@ 2.@@ Merg@@ ing@@ Exception e) { go@@ t@@ Exception = true@@ ; assert@@ Equal@@ s@@ ((@@ (@@ new java.io.File@@ (@@ ro@@ o@@ t, (("@@ valu@@ es@@ " + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + "@@ valu@@ es.@@ xml@@ "@@ )@@ ).get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()) + "@@ : F@@ o@@ un@@ d ite@@ m At@@ tr@@ /@@ d@@ _@@ common@@ _@@ att@@ r m@@ or@@ e th@@ an on@@ e time@@ "), e.get@@ Message@@ ()); } assert@@ True@@ ("@@ Resource@@ Se@@ t process@@ ing sho@@ ul@@ d h@@ av@@ e fa@@ ile@@ d, bu@@ t d@@ id@@ n@@ '@@ t@@ ", go@@ t@@ Exception@@ ); assert@@ False@@ (@@ logg@@ er.get@@ Error@@ M@@ s@@ g@@ s@@ ().@@ isEmpty@@ ()); }
public void run@@ () { if ((@@ th@@ read@@ Index@@ ) == 0) { for (@@ int i = 0; i < (@@ Main.@@ to@@ t@@ al@@ Oper@@ ation@@ s); ++@@ i@@ ) { if ((@@ i % 5@@ 0) == 0) { Main.@@ de@@ o@@ pti@@ m@@ iz@@ e@@ All@@ (); } if ((@@ i % 5@@ 0) == 25@@ ) { Main.@@ un@@ de@@ o@@ pti@@ m@@ iz@@ e@@ All@@ (); } } M@@ ain@@ .@@ do@@ n@@ e = true@@ ; } else { while (!(@@ M@@ ain@@ .@@ do@@ ne@@ )) { java.lang.String st@@ r = $@@ no@@ in@@ line@@ $@@ run@@ 0@@ (); if (!(@@ str@@ .@@ equal@@ s("@@ ab@@ c@@ "@@ ))) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ Fail@@ ure@@ ! " + str@@ )); java.lang.System.@@ ex@@ it@@ (@@ 0); } } } }
@javax.annotation.@@ N@@ on@@ null public com.android.jack.ir.ast.J@@ M@@ etho@@ d get@@ Method@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Method@@ Id method@@ Id) throw@@ s com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Loo@@ k@@ up@@ Exception { return get@@ Method@@ (@@ name@@ , method@@ Id@@ .get@@ Type@@ (), method@@ Id@@ .get@@ Method@@ Id@@ W@@ ide@@ ().get@@ Param@@ Typ@@ es@@ ()); }
@java.lang.Override public void ve@@ r@@ if@@ y@@ (@@ java.security.@@ P@@ u@@ bli@@ c@@ Ke@@ y key@@ , java.security.@@ In@@ valid@@ Key@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception, java.security.@@ No@@ Su@@ ch@@ Provider@@ Exception, java.security.@@ Sign@@ ature@@ Exception, java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception { if (@@ ke@@ y instanceof org.conscrypt.@@ Open@@ SSL@@ Provider@@ )) { org.conscrypt.@@ Open@@ SSL@@ Ke@@ y p@@ ke@@ y = ((@@ org.conscrypt.@@ Open@@ SSL@@ Provider@@ ) (@@ key@@ )@@ ).get@@ Open@@ SSL@@ Key@@ (); ve@@ r@@ if@@ y@@ Open@@ SSL@@ (p@@ key@@ ); return@@ ; } final java.security.@@ Sign@@ ature@@ Exception, java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception { if ((@@ ke@@ y instanceof org.conscrypt.@@ Open@@ SSL@@ Key@@ H@@ ol@@ der@@ ) { org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Ke@@ y int@@ er@@ nal@@ ; if (@@ si@@ g@@ Provid@@ er == null@@ ) { throw new java.security.@@ Sign@@ ature@@ Exception("@@ Open@@ SSL@@ Ke@@ y key@@ "); } final java.security.@@ Sign@@ at@@ ur@@ e si@@
@java.lang.Override public android.net.Network@@ Requ@@ est list@@ en@@ For@@ Network@@ (android.net.@@ Network@@ Capabili@@ ti@@ es network@@ Capabilities@@ , android.os.@@ Mess@@ eng@@ er mess@@ eng@@ er, android.os.@@ I@@ Bin@@ der b@@ in@@ der@@ ) { if (!(@@ has@@ W@@ if@@ i@@ Network@@ Listen@@ Permission@@ (@@ network@@ Capabilities@@ ))) { e@@ n@@ for@@ ce@@ Access@@ Permission@@ (); } network@@ Capabili@@ ties.@@ set@@ S@@ ing@@ le@@ U@@ id@@ (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ()); android.net.Network@@ Capabili@@ ti@@ es n@@ c = new android.net.Network@@ Capabilities@@ (@@ network@@ Capabilities@@ ); if (!@@ (android.net.@@ Connectivity@@ Manager.@@ check@@ Change@@ Permission@@ (m@@ Context@@ ))) { n@@ c.@@ add@@ Capabili@@ ty@@ (com.android.server.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ F@@ O@@ RE@@ G@@ RO@@ UN@@ D@@ ); } en@@ s@@ ure@@ Valid@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ (@@ network@@ Capabilities@@ ); android.net.Network@@ Requ@@ est network@@ Requ@@ est = new android.net.Network@@ Request@@ (@@ n@@ c@@ , TYPE_@@ N@@ ON@@ E, next@@ Network@@ Request@@ Id@@ (), Network@@ Requ@@ est.@@ Type.@@ LIS@@ TE@@ N@@ ); com.android.server.@@ Connectivity@@ Service.@@ Network@@ Request@@ Info n@@ r@@ i = new com.android.server.@@ Connectivity@@ Service.@@ Network@@ Request@@ Info@@ (m@@ ess@@ eng@@ er, network@@ Request@@ , b@@ in@@ der@@ ); if (com.android.server.@@ Connectivity@@ Service.@@ V@@ DBG) com.android.server.@@ Connectivity@@ Service.@@ log@@ (("@@ list@@ en@@ For@@ Net@@ wor@@ k for " + n@@ ri@@ )); m@@ Handler.@@ send@@ Message@@ (m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.server.@@ Connectivity@@ Service.@@ EVEN@@ T_@@ RE@@ G@@ IS@@ TER@@ _N@@ E@@ T@@ W@@ OR@@ K_@@ LIS@@ TE@@ N@@ ER@@ , n@@ ri@@ )); return network@@ Request@@ ; }
@java.lang.Override public void parse@@ (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ V@@ d@@ T@@ re@@ e tr@@ e@@ e@@ e@@ , org.@@ x@@ m@@ l.@@ s@@ a@@ x.@@ Attribute@@ s at@@ tri@@ b@@ ut@@ es) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ V@@ d@@ Gro@@ u@@ p g = parse@@ Gro@@ up@@ At@@ tri@@ b@@ ut@@ es(@@ at@@ tri@@ b@@ ut@@ es@@ ); tr@@ e@@ e.@@ add(@@ g@@ ); }
boolean is@@ Call@@ ing@@ From@@ System@@ U@@ id@@ () { return (android.os.@@ User@@ Handle@@ .get@@ App@@ Id@@ (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ())) == (@@ S@@ Y@@ S@@ TE@@ M@@ _@@ U@@ ID@@ ); }
void handle@@ Call@@ B@@ ar@@ r@@ ing@@ Result@@ (@@ boolean statu@@ s) { is@@ Ac@@ ti@@ v@@ ate@@ d = stat@@ us@@ ; if (com.android.@@ phon@@ e.@@ Call@@ B@@ ar@@ r@@ ing@@ E@@ d@@ it@@ Pre@@ ference@@ .@@ DBG) android.util.Log.d@@ (com.android.@@ phon@@ e.@@ Call@@ B@@ ar@@ r@@ ing@@ E@@ d@@ it@@ Pre@@ ference@@ .@@ LOG@@ _@@ TAG, ("@@ handle@@ Get@@ C@@ B@@ Res@@ pon@@ se do@@ ne@@ , is@@ Ac@@ ti@@ v@@ ated@@ =@@ " + stat@@ us@@ )); }
@java.lang.Override public void get@@ Data@@ Call@@ List@@ (@@ int to@@ k@@ en@@ , android.os.@@ Message res@@ ponse@@ ) { }
boolean is@@ P@@ se@@ u@@ do@@ Local@@ es@@ Enabled@@ ();
private void s@@ ync@@ Check@@ bo@@ x@@ View@@ (android.@@ view@@ .@@ Vi@@ e@@ w view@@ ) { if (@@ vi@@ e@@ w instanceof android.@@ widget@@ .@@ Check@@ B@@ o@@ x@@ ) { ((@@ android.@@ widget@@ .@@ Check@@ B@@ o@@ x@@ ) (@@ view@@ )).@@ set@@ On@@ Check@@ ed@@ Change@@ Listener@@ (@@ null@@ ); } if (@@ vi@@ e@@ w instanceof android.@@ widget@@ .@@ Check@@ able@@ ) { ((@@ android.@@ widget@@ .@@ Check@@ able@@ ) (@@ view@@ )).@@ set@@ Check@@ ed@@ (m@@ Check@@ ed@@ ); } if (@@ vi@@ e@@ w instanceof android.@@ widget@@ .@@ Check@@ B@@ o@@ x@@ ) { ((@@ android.@@ widget@@ .@@ Check@@ B@@ o@@ x@@ ) (@@ view@@ )).@@ set@@ On@@ Check@@ ed@@ Change@@ Listener@@ (m@@ Listener@@ ); } }
void on@@ Remote@@ R@@ tt@@ Request@@ () { for (android.@@ telecom.@@ Remote@@ Connection@@ .@@ Callback@@ Recor@@ d re@@ cor@@ d : m@@ Callback@@ Record@@ s) { final android.telecom.@@ Remote@@ Connec@@ tion connec@@ tion = this@@ ; final android.telecom.@@ Remote@@ Connection@@ .@@ Call@@ b@@ ac@@ k call@@ b@@ ac@@ k = re@@ cor@@ d@@ .get@@ Callback@@ (); re@@ cor@@ d@@ .get@@ Handler@@ ().@@ po@@ st@@ ((@@ ) -@@ > call@@ back@@ .@@ on@@ Remote@@ R@@ tt@@ Request@@ (@@ connection@@ )); } }
void get@@ Icc@@ S@@ lot@@ Statu@@ s(@@ android.os.@@ Message result@@ );
@java.lang.Override public void handle@@ (java.lang.String target@@ , javax.@@ ser@@ v@@ let@@ .@@ h@@ tt@@ p.@@ H@@ ttp@@ Ser@@ v@@ let@@ Requ@@ est request@@ , javax.@@ ser@@ v@@ let@@ .@@ h@@ tt@@ p.@@ H@@ ttp@@ Ser@@ v@@ let@@ Res@@ pon@@ se res@@ ponse@@ , int dis@@ p@@ atch@@ ) throw@@ s java.io.IOException { if (!(@@ com.google.gct.@@ log@@ in@@ .@@ Can@@ cel@@ l@@ able@@ Server@@ Recei@@ ver.@@ C@@ AL@@ L@@ B@@ AC@@ K@@ _P@@ A@@ TH@@ .@@ equals(@@ target@@ ))) { return@@ ; } ((@@ com.google.@@ api.@@ c@@ li@@ ent.@@ r@@ e@@ package@@ d.@@ org.@@ m@@ ort@@ b@@ a@@ y.@@ j@@ et@@ ty.@@ Request@@ ) (@@ request@@ )).@@ set@@ Handle@@ d@@ (@@ true@@ ); lock@@ .@@ lock@@ (); try { er@@ ror = requ@@ est.@@ get@@ Parameter@@ ("@@ error@@ "); cod@@ e = requ@@ est.@@ get@@ Parameter@@ ("@@ code@@ "); go@@ t@@ A@@ u@@ th@@ or@@ iz@@ ation@@ Res@@ pon@@ s@@ e.@@ sign@@ al@@ (); } final@@ l@@ y { lock@@ .@@ un@@ lock@@ (); } write@@ L@@ and@@ ing@@ H@@ t@@ ml@@ (@@ res@@ ponse@@ , ((@@ error@@ ) == null@@ )); res@@ pon@@ s@@ e.@@ f@@ lu@@ sh@@ Buffer@@ (); }
@java.lang.Override public final int start@@ Activity@@ With@@ Config@@ (android.@@ app.@@ I@@ Application@@ Th@@ re@@ ad call@@ er, java.lang.String call@@ ing@@ Package@@ , android.content.@@ Int@@ ent int@@ ent@@ , java.lang.String res@@ ol@@ v@@ ed@@ Type, android.os.@@ I@@ Bin@@ der result@@ To@@ , java.lang.String result@@ W@@ ho@@ , int request@@ Code@@ , int start@@ Flag@@ s, android.content.@@ res@@ .@@ Configur@@ ation config@@ , android.os.@@ Bund@@ le b@@ Option@@ s, int user@@ Id) { e@@ n@@ for@@ ce@@ Not@@ Is@@ ol@@ ated@@ Call@@ er@@ ("@@ start@@ Activity@@ With@@ Config@@ "); user@@ Id = m@@ User@@ Control@@ ler.@@ handle@@ In@@ com@@ ing@@ User@@ (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ P@@ id@@ (), android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (), user@@ Id, false@@ , com.android.server.@@ am@@ .@@ Activity@@ Manager@@ Service.@@ AL@@ LO@@ W@@ _@@ F@@ UL@@ L_@@ ON@@ L@@ Y@@ , "@@ start@@ Activity@@ With@@ Config@@ ", null@@ ); int re@@ t = m@@ Activity@@ Start@@ er.@@ start@@ Activity@@ M@@ ay@@ W@@ ait@@ (c@@ all@@ er, (-1@@ ), call@@ ing@@ Package@@ , int@@ ent@@ , res@@ ol@@ v@@ ed@@ Type, null@@ , null@@ , result@@ To@@ , result@@ W@@ ho@@ , request@@ Code@@ , start@@ Flag@@ s, null@@ , null@@ , config@@ , b@@ Option@@ s, false@@ , user@@ Id, null@@ , null@@ , "@@ start@@ Activity@@ With@@ Config@@ "); return ret@@ ; }
public void test_@@ e@@ mpty@@ Fil@@ en@@ ame@@ () throw@@ s java.lang.Exception { java.io.File f = new java.io.File@@ ("@@ "); assert@@ False@@ (f@@ .@@ can@@ Ex@@ ec@@ ute@@ ()); assert@@ False@@ (f@@ .@@ can@@ Read@@ ()); assert@@ False@@ (f@@ .@@ can@@ W@@ rite@@ ()); try { f.@@ create@@ New@@ File@@ (); fail@@ ("@@ expec@@ ted IO@@ Exception@@ "); } catch (java.io.IOException expected@@ ) { } assert@@ False@@ (f@@ .@@ de@@ lete@@ ()); f.@@ de@@ lete@@ On@@ Ex@@ it@@ (); assert@@ False@@ (f@@ .@@ exist@@ s()); assert@@ Equal@@ s("@@ ", f@@ .getName@@ ()); assert@@ Equal@@ s@@ (@@ null@@ , f@@ .get@@ Par@@ ent@@ ()); assert@@ Equal@@ s@@ (@@ null@@ , f@@ .get@@ Par@@ ent@@ File@@ ()); assert@@ Equal@@ s("@@ ", f@@ .get@@ Path@@ ()); assert@@ False@@ (f@@ .is@@ Ab@@ so@@ lu@@ te@@ ()); assert@@ False@@ (f@@ .is@@ Directory@@ ()); assert@@ False@@ (f@@ .is@@ File@@ ()); assert@@ False@@ (f@@ .is@@ H@@ id@@ d@@ en@@ ()); assert@@ Equal@@ s(@@ 0, f.@@ las@@ t@@ Mo@@ d@@ if@@ i@@ ed@@ ()); assert@@ Equal@@ s(@@ 0, f.@@ length@@ ()); assert@@ Equal@@ s@@ (@@ null@@ , f.@@ list@@ ()); assert@@ Equal@@ s@@ (@@ null@@ , f.@@ list@@ (@@ null@@ )); assert@@ Equal@@ s@@ (@@ null@@ , f.@@ list@@ Fil@@ es@@ ()); assert@@ Equal@@ s@@ (@@ null@@ , f.@@ list@@ Fil@@ es@@ (((@@ libcore.@@ java.io.File@@ Filter@@ ) (@@ null@@ )))); assert@@ Equal@@ s@@ (@@ null@@ , f.@@ list@@ Fil@@ es@@ (((@@ libcore.@@ java.io.@@ Fil@@ en@@ ame@@ Filter@@ ) (@@ null@@ )))); assert@@ False@@ (f@@ .m@@ k@@ d@@ ir@@ ()); assert@@ False@@ (f@@ .m@@ k@@ d@@ ir@@ s()); assert@@ False@@ (f@@ .@@ r@@ en@@ ame@@ To@@ (f@@ )); assert@@ False@@ (f@@ .set@@ L@@ ast@@ Mo@@ d@@ if@@ i@@ ed@@ (1@@ 2@@ 3@@ )); assert@@ False@@ (f@@ .set@@ Ex@@ ec@@ ut@@ able@@ (@@ true@@ )); assert@@ False@@ (f@@ .set@@ Read@@ On@@ ly@@ ()); assert@@ False@@ (f@@ .set@@ Read@@ able@@ (@@ true@@ )); assert@@ False@@ (f@@ .set@@ Wri@@ t@@ able@@ (@@ true@@ )); java.lang.String c@@ w@@ d = java.lang.@@ System@@ .get@@ Property@@ ("@@ us@@ er.@@ d@@ ir@@ "); assert@@ Equal@@ s@@ (@@ new java.io.File@@ (c@@ w@@ d@@ ), f@@ .get@@ Ab@@ so@@ lu@@ te@@ File@@ ()); assert@@ Equal@@ s(@@ c@@ w@@ d, f@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); if (m@@ Has@@ Fe@@ ature@@ ) { try { in@@ stall@@ App@@ As@@ User@@ (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ DE@@ VIC@@ E_@@ O@@ W@@ N@@ ER_@@ AP@@ K@@ , m@@ Pri@@ m@@ ary@@ User@@ Id); if (!(@@ set@@ Device@@ O@@ wn@@ er@@ ((((@@ com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ DE@@ VIC@@ E_@@ O@@ W@@ N@@ ER@@ _P@@ K@@ G) + "@@ /@@ ") + (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ AD@@ M@@ IN@@ _RE@@ CE@@ I@@ V@@ ER_@@ TEST_@@ C@@ LA@@ SS@@ )), m@@ Pri@@ m@@ ary@@ User@@ Id, false@@ ))) { remove@@ Ad@@ min@@ ((((@@ com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ DE@@ VIC@@ E_@@ O@@ W@@ N@@ ER@@ _P@@ K@@ G) + "@@ /@@ ") + (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ AD@@ M@@ IN@@ _RE@@ CE@@ I@@ V@@ ER_@@ TEST_@@ C@@ LA@@ SS@@ )), m@@ Pri@@ m@@ ary@@ User@@ Id); fail@@ ("@@ Faile@@ d to set de@@ vice o@@ wn@@ er@@ "); } } catch (java.lang.@@ Throw@@ able throw@@ able@@ ) { get@@ Device@@ ().@@ un@@ in@@ stall@@ Package@@ (com.android.@@ cts.@@ device@@ po@@ lic@@ y.@@ Device@@ O@@ wn@@ er@@ Test.@@ DE@@ VIC@@ E_@@ O@@ W@@ N@@ ER@@ _P@@ K@@ G@@ ); throw throw@@ able@@ ; } } m@@ Has@@ E@@ p@@ h@@ em@@ er@@ al@@ User@@ Fe@@ at@@ ur@@ e = ((m@@ Has@@ Fe@@ ature@@ ) && (@@ can@@ Create@@ Add@@ i@@ tion@@ al@@ User@@ s(@@ 1@@ ))) && (@@ has@@ User@@ S@@ pli@@ t@@ ()); m@@ Has@@ Dis@@ able@@ d@@ E@@ p@@ h@@ em@@ er@@ al@@ User@@ Fe@@ at@@ ur@@ e = ((m@@ Has@@ Fe@@ ature@@ ) && (@@ can@@ Create@@ Add@@ i@@ tion@@ al@@ User@@ s(@@ 1@@ ))) && (!(@@ has@@ User@@ S@@ pli@@ t@@ ())); m@@ Has@@ Create@@ And@@ Manage@@ User@@ Fe@@ at@@ ur@@ e = (m@@ Has@@ Fe@@ ature@@ ) && (@@ can@@ Create@@ Add@@ i@@ tion@@ al@@ User@@ s(@@ 1@@ )); }
@org.junit.Test public void int@@ _@@ to@@ _@@ char@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ IN@@ T_@@ TO@@ _C@@ H@@ AR@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ L@@ arg@@ e@@ Test public void test@@ Re@@ pla@@ ce@@ S@@ d@@ c@@ ard@@ () { s@@ am@@ ple@@ Re@@ pla@@ ce@@ From@@ R@@ aw@@ Resource@@ ((@@ (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ _RE@@ P@@ L@@ AC@@ E_@@ EX@@ IS@@ T@@ ING@@ ) | (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ EX@@ TER@@ N@@ AL@@ ))); }
public void set@@ Float@@ (@@ java.lang.Object ob@@ ject@@ , float valu@@ e) throw@@ s java.lang.Illegal@@ Access@@ Exception, java.lang.Illegal@@ Argument@@ Exception { set@@ Float@@ (@@ ob@@ ject@@ , value@@ , is@@ Ac@@ ces@@ si@@ ble@@ ()); }
public void write@@ To@@ (@@ java.io.@@ Output@@ Stream out, java.io.@@ W@@ rite@@ r h@@ um@@ an@@ Out@@ , boolean ver@@ bo@@ se@@ ) throw@@ s java.io.IOException { boolean annot@@ ate = h@@ um@@ an@@ O@@ u@@ t != null@@ ; com.android.@@ dx.@@ util.@@ ByteArray@@ Annot@@ ated@@ Out@@ put result = to@@ Dex@@ 0@@ (@@ annot@@ ate@@ , ver@@ bo@@ se@@ , null@@ ); if (@@ out != null@@ ) { out.@@ write@@ (@@ res@@ ul@@ t.get@@ Array@@ ()); } if (@@ annot@@ ate@@ ) { result.@@ write@@ Annot@@ ation@@ s@@ To@@ (@@ h@@ um@@ an@@ Out@@ ); } }
@java.lang.Override public void remove@@ Item@@ (@@ @com.android.annotations.NonNull com.android.ide.common.@@ res@@ 2.@@ As@@ set@@ I@@ te@@ m remo@@ v@@ ed@@ Item@@ , com.android.ide.common.@@ res@@ 2.@@ As@@ set@@ I@@ te@@ m re@@ pla@@ ce@@ d@@ By@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ Con@@ s@@ um@@ er@@ Exception { if (re@@ pla@@ ce@@ d@@ B@@ y == null@@ ) { java.io.File remo@@ v@@ ed@@ File = new java.io.File@@ (get@@ Root@@ Folder@@ (), remo@@ v@@ ed@@ Item@@ .getName@@ ()); remo@@ v@@ ed@@ File@@ .@@ de@@ lete@@ (); } }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ M@@ ed@@ i@@ um@@ Test public void test@@ P@@ n@@ 5@@ 4@@ 4@@ S@@ an@@ e@@ () throw@@ s java.lang.Exception { java.io.File f = new java.io.File@@ ("@@ /@@ de@@ v@@ /@@ p@@ n@@ 5@@ 4@@ 4@@ "); assert@@ False@@ (f@@ .@@ can@@ Read@@ ()); assert@@ False@@ (f@@ .@@ can@@ W@@ rite@@ ()); assert@@ False@@ (f@@ .@@ can@@ Ex@@ ec@@ ute@@ ()); if (f@@ .@@ exist@@ s@@ ()) { assert@@ True@@ (android.@@ per@@ mission@@ .@@ cts.@@ File@@ System@@ Permission@@ Test.@@ is@@ File@@ O@@ wn@@ er@@ (f@@ , "@@ n@@ fc@@ ")); assert@@ True@@ (android.@@ per@@ mission@@ .@@ cts.@@ File@@ System@@ Permission@@ Test.@@ is@@ File@@ Gro@@ up@@ (f@@ , "@@ n@@ fc@@ ")); } }
public static java.lang.String for@@ mat@@ (@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ U@@ Local@@ e icu@@ Loc@@ ale@@ , com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Cal@@ end@@ a@@ r time@@ , int flag@@ s, boolean cap@@ it@@ aliz@@ e) { java.lang.String s@@ k@@ el@@ et@@ on = libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ to@@ S@@ k@@ el@@ et@@ on@@ (@@ time@@ , flag@@ s); java.lang.String ke@@ y = ((@@ (s@@ k@@ el@@ et@@ on + "@@ \@@ t@@ ") + icu@@ Loc@@ ale@@ ) + "@@ \@@ t@@ ") + (@@ tim@@ e.get@@ TimeZone@@ ()); com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ Display@@ Context dis@@ play@@ Context = libcore.@@ icu@@ .@@ Date@@ Uti@@ l@@ s@@ B@@ rid@@ g@@ e.@@ get@@ Display@@ Context@@ (c@@ ap@@ it@@ aliz@@ e); synchronized@@ (@@ libcore.@@ icu@@ .@@ Date@@ Time@@ Format@@ .@@ C@@ AC@@ H@@ ED@@ _@@ F@@ OR@@ MA@@ T@@ TE@@ RS@@ ) { com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ Date@@ For@@ ma@@ t for@@ mat@@ ter = libcore.@@ icu@@ .@@ Date@@ Time@@ Format@@ .@@ C@@ AC@@ H@@ ED@@ _@@ F@@ OR@@ MA@@ T@@ TE@@ RS@@ .get@@ (@@ key@@ ); if (@@ for@@ mat@@ ter == null@@ ) { com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ Date@@ Time@@ P@@ attern@@ Gener@@ at@@ or g@@ ener@@ at@@ or = com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ Date@@ Time@@ P@@ attern@@ Gener@@ ator@@ .get@@ Instance@@ (@@ icu@@ Loc@@ ale@@ ); for@@ mat@@ ter = new com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ Sim@@ ple@@ Date@@ Format@@ (@@ g@@ ener@@ ator@@ .get@@ B@@ est@@ P@@ attern@@ (s@@ k@@ el@@ et@@ on@@ ), icu@@ Loc@@ ale@@ ); libcore.@@ icu@@ .@@ Date@@ Time@@ Format@@ .@@ C@@ AC@@ H@@ ED@@ _@@ F@@ OR@@ MA@@ T@@ TE@@ RS@@ .@@ put@@ (@@ key@@ , for@@ mat@@ ter@@ ); } for@@ mat@@ ter.@@ set@@ Context@@ (d@@ is@@ play@@ Context@@ ); return for@@ mat@@ ter@@ .@@ for@@ mat@@ (@@ time@@ ); } }
public void test@@ VF@@ E@@ 7@@ () { try { new do@@ t.@@ junit.@@ op@@ cod@@ es.@@ i@@ get@@ _@@ byte@@ .@@ d.@@ T_@@ i@@ get@@ _@@ byte@@ _@@ 12@@ ().@@ run@@ (); fail@@ ("@@ expec@@ ted an Illegal@@ Access@@ Error excepti@@ on@@ "); } catch (java.lang.@@ Illegal@@ Access@@ Error e) { } }
@java.lang.Override public boolean set@@ H@@ w@@ P@@ no@@ List@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ P@@ no@@ Setting@@ s setting@@ s, com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ P@@ no@@ Event@@ Handle@@ r event@@ Handler@@ ) { synchronized@@ (m@@ Setting@@ s@@ Lock) { if ((m@@ P@@ no@@ Setting@@ s) != null@@ ) { android.util.Log.@@ w@@ (com.android.server.@@ w@@ if@@ i.@@ scan@@ ner.@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner@@ Imp@@ l.@@ TAG, "@@ Al@@ read@@ y run@@ n@@ ing a P@@ N@@ O scan@@ "); return false@@ ; } m@@ P@@ no@@ Event@@ Handle@@ r = event@@ Handler@@ ; m@@ P@@ no@@ Setting@@ s = setting@@ s; process@@ P@@ end@@ ing@@ Scan@@ s(); return true@@ ; } }
public void test@@ A@@ es@@ G@@ c@@ m@@ 12@@ 8@@ T@@ c@@ p@@ 4@@ U@@ dp@@ En@@ cap@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m au@@ th@@ Cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S_@@ G@@ C@@ M@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ A@@ E@@ AD@@ _@@ KE@@ Y@@ , 12@@ 8@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, true@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, true@@ , 1, true@@ ); }
public void test@@ Bas@@ ic@@ Di@@ am@@ ond@@ () { com.android.tools.@@ perflib.@@ he@@ ap.@@ He@@ a@@ p he@@ a@@ p = new com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ He@@ ap@@ Builder@@ (@@ 4@@ ).@@ add@@ E@@ d@@ ge@@ (@@ 1, 2@@ ).@@ add@@ Reference@@ (@@ 1, 3@@ ).@@ add@@ Reference@@ (@@ 2, 4@@ ).@@ add@@ Reference@@ (@@ 3@@ , 4@@ ).@@ add@@ Root@@ (1@@ ).get@@ He@@ ap@@ (); assert@@ Equal@@ s(@@ 1@@ 0, he@@ ap@@ .get@@ Instance@@ (1@@ ).get@@ Comp@@ o@@ si@@ te@@ Size@@ ()); assert@@ Equal@@ s(@@ 6@@ , he@@ ap@@ .get@@ Instance@@ (@@ 2@@ ).get@@ Comp@@ o@@ si@@ te@@ Size@@ ()); assert@@ Equal@@ s(@@ 7@@ , he@@ ap@@ .get@@ Instance@@ (@@ 3@@ ).get@@ Comp@@ o@@ si@@ te@@ Size@@ ()); assert@@ Equal@@ s(@@ 4@@ , he@@ ap@@ .get@@ Instance@@ (@@ 4@@ ).get@@ Comp@@ o@@ si@@ te@@ Size@@ ()); }
private void mon@@ itor@@ Ex@@ pi@@ re@@ d@@ P@@ r@@ int@@ er@@ s() { if ((@@ (m@@ Ex@@ pi@@ re@@ P@@ r@@ int@@ er@@ s) == null@@ ) && (!(m@@ P@@ r@@ int@@ er@@ s.@@ isEmpty@@ ()))) { m@@ Ex@@ pi@@ re@@ P@@ r@@ int@@ er@@ s = m@@ P@@ r@@ int@@ Service.@@ de@@ lay@@ (com.android.@@ b@@ ip@@ s.@@ Local@@ Dis@@ cover@@ y@@ Session@@ .@@ P@@ R@@ IN@@ TER@@ _@@ EX@@ P@@ I@@ R@@ A@@ TION@@ _M@@ IL@@ LIS@@ , () -@@ > { m@@ Ex@@ pi@@ re@@ P@@ r@@ int@@ er@@ s = null@@ ; boolean all@@ F@@ o@@ un@@ d = true@@ ; List<@@ android.@@ p@@ r@@ int@@ .@@ P@@ r@@ int@@ er@@ Id@@ > id@@ s@@ To@@ Remo@@ v@@ e = new com.android.@@ b@@ ip@@ s.@@ Array@@ List<@@ >(); for (com.android.@@ b@@ ip@@ s.@@ Local@@ P@@ r@@ int@@ er local@@ P@@ r@@ int@@ er : m@@ P@@ r@@ int@@ er@@ s.@@ valu@@ es@@ ()) { if (@@ local@@ P@@ r@@ int@@ er.@@ is@@ Ex@@ pi@@ re@@ d@@ ()) { if (com.android.@@ b@@ ip@@ s.@@ Local@@ Dis@@ cover@@ y@@ Session@@ .@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ Local@@ Dis@@ cover@@ y@@ Session@@ .@@ TAG, ("@@ Ex@@ p@@ ir@@ ing " + local@@ P@@ r@@ int@@ er@@ )); id@@ s@@ To@@ Remo@@ v@@ e.@@ add(@@ local@@ P@@ r@@ int@@ er.get@@ P@@ r@@ int@@ er@@ Id@@ ()); } if (!(@@ local@@ P@@ r@@ int@@ er.@@ is@@ F@@ ound@@ ())) all@@ F@@ o@@ un@@ d = false@@ ; } id@@ s@@ To@@ Remo@@ ve@@ .@@ for@@ Each@@ (m@@ P@@ r@@ int@@ er@@ s@@ :@@ remove@@ ); remove@@ P@@ r@@ int@@ er@@ s(@@ id@@ s@@ To@@ Remo@@ ve@@ ); if (!@@ all@@ F@@ ound@@ ) { mon@@ itor@@ Ex@@ pi@@ re@@ d@@ P@@ r@@ int@@ er@@ s(); } }); } } }
private static void p@@ r@@ int@@ Class@@ Instance@@ Field@@ s@@ (com.android.@@ ahat.@@ Do@@ c do@@ c@@ , com.android.ahat.@@ Q@@ u@@ er@@ y qu@@ er@@ y@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ Class@@ In@@ stan@@ ce in@@ st@@ ) { do@@ c.@@ sec@@ tion@@ ("@@ Field@@ s@@ "); do@@ c.@@ t@@ able@@ (@@ new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Type@@ "), new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Name@@ "), new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Value@@ ")); com.android.ahat.@@ Sub@@ set@@ Sele@@ ctor@@ <@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value@@ > sele@@ ct@@ or = new com.android.ahat.@@ Sub@@ set@@ Sele@@ ctor@@ (@@ qu@@ er@@ y@@ , com.android.ahat.@@ Object@@ Handler.@@ IN@@ STA@@ N@@ C@@ E_@@ FI@@ E@@ L@@ D@@ S_@@ ID@@ , in@@ s@@ t.get@@ Valu@@ es@@ ()); for (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value fi@@ el@@ d : sele@@ ctor@@ .@@ sele@@ c@@ ted@@ ()) { do@@ c.@@ row@@ (com.android.@@ ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ (@@ field@@ .get@@ Type@@ ()@@ ), com.android.ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ (@@ field@@ .getName@@ ()@@ ), com.android.ahat.@@ S@@ um@@ m@@ ar@@ iz@@ er.@@ s@@ um@@ m@@ ar@@ iz@@ e@@ (@@ field@@ .get@@ Value@@ ())); } do@@ c.@@ end@@ (); sele@@ ctor@@ .@@ render@@ (@@ do@@ c@@ ); }
boolean connect@@ Audio@@ () { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ hf@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); return false@@ ; }
public static void set@@ Is@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ (@@ boolean is@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ) { if ((@@ android.telecom.@@ Log.@@ m@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ) == is@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ) { return@@ ; } if ((@@ android.telecom.@@ Log.@@ s@@ Event@@ s) != null@@ ) { android.telecom.@@ Log.@@ s@@ Event@@ Manager.@@ chan@@ ge@@ Event@@ Cach@@ e@@ Size@@ ((@@ is@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enable@@ d ? android.telecom.@@ Log.@@ EVEN@@ T@@ S_@@ TO@@ _C@@ AC@@ H@@ E_@@ DE@@ BU@@ G : android.telecom.@@ Log.@@ EVEN@@ T@@ S_@@ TO@@ _C@@ AC@@ H@@ E@@ )); } android.telecom.@@ Log.@@ m@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enable@@ d = is@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ; if (android.@@ telecom.@@ Log.@@ m@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ) { android.telecom.@@ Log.@@ m@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ St@@ op@@ Tim@@ e = (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s@@ ()) + (android.@@ telecom.@@ Log.@@ EX@@ TE@@ N@@ DE@@ D_@@ LOG@@ G@@ ING@@ _@@ D@@ UR@@ A@@ TION@@ _M@@ IL@@ LIS@@ ); } else { android.telecom.@@ Log.@@ m@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ St@@ op@@ Tim@@ e = 0; } }
void tr@@ ack@@ S@@ av@@ ed@@ C@@ and@@ id@@ ate@@ (@@ @@@ android.@@ annotation.@@ Null@@ able java.lang.Integ@@ er s@@ core@@ , android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation config@@ , android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult scan@@ Result@@ ) { if ((@@ s@@ cor@@ e != null@@ ) && ((@@ s@@ cor@@ e > (m@@ H@@ ig@@ h@@ S@@ core@@ )) || ((@@ (m@@ B@@ est@@ C@@ and@@ id@@ ate@@ Typ@@ e) == (com.android.server.@@ w@@ if@@ i.@@ Ex@@ ter@@ nal@@ S@@ core@@ E@@ valu@@ ator@@ .@@ Ex@@ ter@@ nal@@ S@@ core@@ Track@@ er.@@ B@@ est@@ C@@ and@@ id@@ ate@@ Type.@@ UN@@ TR@@ US@@ TED@@ _N@@ E@@ T@@ W@@ OR@@ K@@ )) && (s@@ cor@@ e == (m@@ H@@ ig@@ h@@ S@@ core@@ )@@ ))) { m@@ H@@ ig@@ h@@ S@@ cor@@ e = s@@ core@@ ; m@@ S@@ av@@ ed@@ Con@@ fig = config@@ ; m@@ Scan@@ Result@@ C@@ and@@ id@@ ate = scan@@ Result@@ ; m@@ B@@ est@@ C@@ and@@ id@@ ate@@ Type = com.android.server.@@ w@@ if@@ i.@@ Ex@@ ter@@ nal@@ S@@ core@@ E@@ valu@@ ator@@ .@@ Ex@@ ter@@ nal@@ S@@ core@@ Track@@ er.@@ B@@ est@@ C@@ and@@ id@@ ate@@ Type.@@ S@@ AV@@ ED@@ _N@@ E@@ T@@ W@@ OR@@ K@@ ; local@@ Log@@ ((@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Network@@ Sele@@ ctor@@ .@@ to@@ Scan@@ Id@@ (s@@ can@@ Result@@ )) + " be@@ com@@ es th@@ e new ex@@ ter@@ n@@ ally s@@ core@@ d s@@ a@@ ve@@ d net@@ wor@@ k c@@ and@@ id@@ at@@ e.@@ ")); } }
@org.junit.Test public void g@@ ener@@ ate@@ Ver@@ ity@@ T@@ re@@ e@@ Root@@ Hash@@ From@@ D@@ um@@ my@@ Data@@ Source@@ () throw@@ s java.lang.Exception { byte@@ [] s@@ am@@ ple@@ E@@ o@@ C@@ D@@ From@@ Dis@@ k = new byte@@ []{ 8@@ 0, 7@@ 5, 6@@ , 0, 0, 0, 0, 0, 6@@ , 0, 6@@ , 0, 12@@ 1, 0, 0, 4@@ 8@@ , 2@@ 2, 0, 0, 0 }; com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Ver@@ ity@@ T@@ re@@ e@@ Builder bu@@ ilder = new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Ver@@ ity@@ T@@ re@@ e@@ Builder@@ (@@ null@@ ); byte@@ [] ro@@ o@@ t@@ Has@@ h = builder.@@ g@@ ener@@ ate@@ Ver@@ ity@@ T@@ re@@ e@@ Root@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ces.@@ as@@ Data@@ Source@@ (@@ java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (@@ 4@@ 0@@ 9@@ 6@@ )), m@@ ake@@ String@@ Data@@ Source@@ (@@ "@@ this is c@@ en@@ tr@@ al di@@ re@@ ctor@@ y (@@ fa@@ k@@ e data@@ )@@ "), com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ces.@@ as@@ Data@@ Source@@ (@@ java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (s@@ am@@ ple@@ E@@ o@@ C@@ D@@ From@@ Dis@@ k@@ ))); junit.framework.@@ Test@@ C@@ ase@@ .@@ assert@@ Equal@@ s("@@ d@@ b@@ 4@@ 1@@ 7@@ 6@@ e@@ 0@@ d@@ 6@@ c@@ 3@@ 6@@ 6@@ 0@@ a@@ 7@@ 0@@ 7@@ 2@@ d@@ 9@@ f@@ 7@@ a@@ e@@ 00@@ 5@@ 3@@ b@@ a@@ 16@@ a@@ 4@@ a@@ 2@@ 9@@ d@@ f@@ 3@@ 4@@ 8@@ 6@@ 2@@ 7@@ c@@ 7@@ 9@@ e@@ 1@@ d@@ 7@@ 8@@ 6@@ c@@ f@@ 6@@ c@@ 2@@ 9@@ 3@@ 1@@ ", com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ H@@ ex@@ En@@ cod@@ ing.@@ en@@ code@@ (@@ ro@@ o@@ t@@ Hash@@ )); }
@java.lang.Override public void widget@@ Sele@@ c@@ ted@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Selection@@ Ev@@ ent e) { super@@ .@@ widget@@ Sele@@ c@@ ted@@ (@@ e); if (m@@ System@@ B@@ utton@@ .get@@ Selection@@ ()) { set@@ List@@ Element@@ s@@ (m@@ System@@ Res@@ ources@@ .get@@ Res@@ ources@@ (m@@ Resource@@ Type@@ )); m@@ New@@ B@@ utton@@ .set@@ Enabled@@ (@@ false@@ ); } }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { java.lang.String ac@@ tion = int@@ ent.get@@ Action@@ (); if (@@ action@@ .@@ equals(@@ Media@@ Play@@ back@@ Service.@@ P@@ LA@@ Y@@ B@@ AC@@ K@@ _C@@ O@@ M@@ P@@ LE@@ TE@@ )) { android.@@ widget@@ .@@ To@@ as@@ t m@@ t = android.@@ widget@@ .@@ To@@ ast.@@ m@@ ake@@ Text@@ (@@ this@@ , "@@ Faile@@ d to pla@@ y th@@ e requ@@ es@@ ted str@@ eam@@ .@@ ", 2@@ 00@@ 0); m@@ t.@@ sho@@ w@@ (); fin@@ is@@ h@@ (); return@@ ; } try { M@@ u@@ si@@ c@@ Utils.@@ s@@ Service.@@ play@@ (); int@@ ent = new android.content.@@ Intent@@ ("@@ com.android.@@ m@@ u@@ si@@ c.@@ P@@ LA@@ Y@@ B@@ AC@@ K_@@ V@@ I@@ E@@ W@@ ER@@ "); int@@ ent.@@ put@@ Extra@@ ("@@ on@@ es@@ ho@@ t@@ ", true@@ ); start@@ Activity@@ (@@ int@@ ent@@ ); } catch (android.os.RemoteException ex@@ ) { } fin@@ is@@ h@@ (); }
@org.junit.Test public void test@@ Up@@ date@@ L@@ ast@@ Connec@@ t@@ U@@ id@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation open@@ Net@@ wor@@ k = com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Util.@@ create@@ Open@@ Network@@ (); com.android.server.@@ w@@ if@@ i.@@ Network@@ Up@@ date@@ Res@@ ult result = ve@@ r@@ if@@ y@@ Add@@ Network@@ To@@ W@@ if@@ i@@ Config@@ Manager@@ (@@ open@@ Network@@ ); assert@@ True@@ (m@@ W@@ if@@ i@@ Config@@ Manager.@@ check@@ And@@ Up@@ date@@ L@@ ast@@ Connec@@ t@@ U@@ id@@ (@@ res@@ ul@@ t.get@@ Network@@ Id@@ (), com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ ManagerTest.@@ TEST_@@ C@@ RE@@ AT@@ OR@@ _@@ U@@ ID@@ )); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation ret@@ ri@@ ev@@ ed@@ Net@@ wor@@ k = m@@ W@@ if@@ i@@ Config@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ (@@ res@@ ul@@ t.get@@ Network@@ Id@@ ()); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ ManagerTest.@@ TEST_@@ C@@ RE@@ AT@@ OR@@ _@@ U@@ ID@@ , ret@@ ri@@ ev@@ ed@@ Network@@ .@@ las@@ t@@ Connec@@ t@@ U@@ id@@ ); do@@ An@@ sw@@ er@@ (@@ new android.app.@@ test.@@ Mock@@ An@@ sw@@ er@@ Util.@@ An@@ sw@@ er@@ With@@ Argument@@ s() { public int ans@@ w@@ er@@ (java.lang.String per@@ m@@ Name, int uid@@ ) throw@@ s java.lang.Exception { if (@@ u@@ id == (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ ManagerTest.@@ TEST_@@ C@@ RE@@ AT@@ OR@@ _@@ U@@ ID@@ )) { return android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ G@@ R@@ AN@@ TED@@ ; } return android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ D@@ EN@@ I@@ ED@@ ; } }@@ ).@@ when(m@@ F@@ ramework@@ F@@ ac@@ ad@@ e@@ ).@@ check@@ U@@ id@@ Permission@@ (@@ any@@ String@@ (), any@@ Int@@ ()); when(m@@ W@@ if@@ i@@ Permission@@ s@@ Util.@@ check@@ Config@@ O@@ verrid@@ e@@ Permission@@ (@@ any@@ Int@@ ()@@ )).@@ thenReturn@@ (@@ false@@ ); assert@@ False@@ (m@@ W@@ if@@ i@@ Config@@ Manager.@@ check@@ And@@ Up@@ date@@ L@@ ast@@ Connec@@ t@@ U@@ id@@ (@@ res@@ ul@@ t.get@@ Network@@ Id@@ (), com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ ManagerTest.@@ TEST_@@ U@@ P@@ DA@@ TE_@@ U@@ ID@@ )); ret@@ ri@@ ev@@ ed@@ Net@@ wor@@ k = m@@ W@@ if@@ i@@ Config@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ (@@ res@@ ul@@ t.get@@ Network@@ Id@@ ()); assert@@ Equal@@ s@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ ManagerTest.@@ TEST_@@ C@@ RE@@ AT@@ OR@@ _@@ U@@ ID@@ , ret@@ ri@@ ev@@ ed@@ Network@@ .@@ las@@ t@@ Connec@@ t@@ U@@ id@@ ); }
@java.lang.Override public boolean ac@@ ce@@ p@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ p@@ lu@@ gin@@ .@@ v@@ 0@@ 1.@@ P@@ lu@@ g@@ in p@@ lu@@ gin@@ ) { boolean ac@@ ce@@ p@@ ted = p@@ lu@@ gin@@ .get@@ Version@@ ().get@@ Sub@@ Re@@ le@@ ase@@ K@@ ind@@ ().@@ is@@ M@@ ore@@ St@@ able@@ Th@@ an@@ (@@ Sub@@ Re@@ le@@ ase@@ K@@ ind@@ .@@ C@@ AN@@ D@@ ID@@ A@@ TE@@ ); if (@@ ac@@ ce@@ p@@ ted@@ ) { com.android.jack.@@ p@@ lu@@ gin@@ .@@ St@@ able@@ On@@ l@@ y.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ IN@@ F@@ O@@ , "@@ F@@ or p@@ lu@@ g@@ in '@@ '@@ {@@ 0@@ }@@ '@@ '@@ , ac@@ ce@@ p@@ ted ver@@ sion {@@ 1@@ } b@@ ec@@ au@@ se st@@ able@@ ", new java.lang.Ob@@ ject@@ []{ p@@ lu@@ gin@@ .getName@@ (), p@@ lu@@ gin@@ .get@@ Version@@ ().get@@ Version@@ () }); } else { com.android.jack.@@ p@@ lu@@ gin@@ .@@ St@@ able@@ On@@ l@@ y.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ IN@@ F@@ O@@ , "@@ F@@ or p@@ lu@@ g@@ in '@@ '@@ '@@ {@@ 0@@ }@@ '@@ '@@ , re@@ jec@@ ted ver@@ sion {@@ 1@@ } b@@ ec@@ au@@ se not st@@ able@@ ", new java.lang.Ob@@ ject@@ []{ p@@ lu@@ gin@@ .getName@@ (), p@@ lu@@ gin@@ .get@@ Version@@ ().get@@ Version@@ () }); } return ac@@ ce@@ p@@ ted@@ ; } catch (com.android.s@@ ched.@@ util.@@ Un@@ com@@ par@@ able@@ Sub@@ Re@@ le@@ ase@@ K@@ in@@ d e) { com.android.jack.@@ p@@ lu@@ gin@@ .@@ St@@ able@@ On@@ l@@ y.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ IN@@ F@@ O@@ , "@@ F@@ or p@@ lu@@ g@@ in '@@ {@@ 0@@ }@@ '@@ , re@@ jec@@ ted ver@@ sion {@@ 1@@ } b@@ ec@@ au@@ se not st@@ able@@ ", new java.lang.Ob@@ ject@@ []{ p@@ lu@@ gin@@ .getName@@ (), p@@ lu@@ gin@@ .get@@ Version@@ ().get@@ Version@@ () }); return false@@ ; } }
public void test@@ Store@@ No@@ Output@@ Data@@ () throw@@ s java.io.IOException { com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data dat@@ a = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ (); data@@ .set@@ M@@ ain@@ File@@ ("@@ /@@ 1@@ /@@ main@@ /@@ file@@ "); data@@ .add@@ Sec@@ ond@@ ary@@ File@@ ("@@ /@@ 1@@ /@@ sec@@ ond@@ ary@@ /@@ file@@ "); com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data data@@ 2 = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ (); data@@ 2.@@ set@@ M@@ ain@@ File@@ ("@@ /@@ 2@@ /@@ main@@ /@@ file@@ "); data@@ 2.@@ add@@ Sec@@ ond@@ ary@@ File@@ ("@@ /@@ 2@@ /@@ sec@@ ond@@ ary@@ /@@ file@@ "); data@@ 2.@@ add@@ Output@@ File@@ ("@@ /@@ 2@@ /@@ output@@ /@@ file@@ "); com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ Stor@@ e st@@ or@@ e = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ Store@@ (); st@@ or@@ e.@@ add@@ Data@@ (d@@ ata@@ ); st@@ or@@ e.@@ add@@ Data@@ (d@@ ata@@ 2@@ ); java.io.File fi@@ le = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ Dependenc@@ y@@ Data@@ Store@@ Test@@ ", "@@ "); file.@@ de@@ lete@@ On@@ Ex@@ it@@ (); st@@ or@@ e.@@ s@@ a@@ ve@@ To@@ (file@@ ); st@@ or@@ e = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ Store@@ (); st@@ or@@ e.@@ load@@ From@@ (file@@ ); java.util.Collection@@ <@@ com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ > new@@ Data@@ Lis@@ t = st@@ or@@ e.get@@ Data@@ (); assert@@ NotNull@@ (@@ new@@ Data@@ List@@ ); assert@@ Equal@@ s(@@ 2, new@@ Data@@ List.@@ size@@ ()); com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data fi@@ r@@ st@@ Data = st@@ or@@ e.get@@ (@@ 0); assert@@ NotNull@@ (@@ fi@@ r@@ st@@ Data@@ ); assert@@ Equal@@ s(@@ data@@ .get@@ M@@ ain@@ File@@ (), fi@@ r@@ st@@ Data@@ .get@@ M@@ ain@@ File@@ ()); assert@@ Equal@@ s(@@ data@@ .get@@ Sec@@ ond@@ ary@@ Fil@@ es@@ (), fi@@ r@@ st@@ Data@@ .get@@ Sec@@ ond@@ ary@@ Fil@@ es@@ ()); assert@@ Equal@@ s(@@ 0, fi@@ r@@ st@@ Data@@ .get@@ Output@@ Fil@@ es@@ ().@@ size@@ ()); com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data sec@@ ond@@ Data = st@@ or@@ e.get@@ By@@ M@@ ain@@ File@@ ("@@ /@@ 2@@ /@@ 1@@ /@@ main@@ /@@ file@@ "); assert@@ NotNull@@ (s@@ ec@@ ond@@ Data@@ ); assert@@ Equal@@ s(@@ data@@ 2@@ .get@@ M@@ ain@@ File@@ (), sec@@ ond@@ Data@@ .get@@ M@@ ain@@ File@@ ()); assert@@ Equal@@ s(@@ data@@ 2@@ .get@@ Sec@@ ond@@ ary@@ Fil@@ es@@ (), sec@@ ond@@ Data@@ .get@@ Sec@@ ond@@ ary@@ Fil@@ es@@ ()); assert@@ Equal@@ s(@@ data@@ 2@@ .get@@ Output@@ Fil@@ es@@ ()); }
@org.junit.Test @@@ java.lang.@@ Run@@ tim@@ e public void test@@ 10@@ 6@@ () throw@@ s java.lang.Exception { java.lang.String t@@ est = "@@ com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ test@@ 10@@ 6@@ "; java.lang.String a@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 6@@ /@@ jack@@ /@@ A@@ ;@@ "; java.lang.String b@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 6@@ /@@ jack@@ /@@ B@@ ;@@ "; java.lang.String c@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 6@@ /@@ jack@@ /@@ C@@ ;@@ "; java.lang.String d@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 6@@ /@@ jack@@ /@@ D@@ ;@@ "; java.lang.String in@@ it@@ 1 = ("@@ <@@ in@@ it@@ >@@ (@@ " + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ )) + "@@ )@@ V@@ "; java.lang.String in@@ it@@ 2 = (("@@ <@@ in@@ it@@ >@@ (@@ " + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ )) + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ )) + "@@ )@@ V@@ "; java.lang.String fo@@ o = ("@@ f@@ oo@@ (@@ " + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ )) + "@@ )@@ V@@ "; compile@@ And@@ Valid@@ ate@@ (@@ default@@ Properties@@ (), new com.android.jack.test.@@ dex.@@ Dex@@ File@@ Typ@@ es@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (in@@ it@@ 1, d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ A@@ .@@ in@@ it@@ 1.@@ d@@ al@@ vi@@ k@@ "@@ )).@@ in@@ ser@@ t@@ (in@@ it@@ 2, d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ A@@ .@@ in@@ it@@ 2.@@ d@@ al@@ vi@@ k@@ "@@ )).@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ A@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )).@@ in@@ ser@@ t@@ (b@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ B@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )).@@ in@@ ser@@ t@@ (c@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ C@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )).@@ in@@ ser@@ t@@ (d@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ D@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )), test@@ ); }
public void test@@ As@@ si@@ stan@@ t@@ Stack@@ F@@ in@@ is@@ h@@ To@@ Pre@@ vi@@ ou@@ s@@ App@@ () throw@@ s java.lang.Exception { la@@ un@@ ch@@ Activity@@ On@@ Display@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ D@@ IS@@ P@@ LA@@ Y); enable@@ As@@ si@@ stan@@ t@@ (); la@@ un@@ ch@@ Activity@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ LA@@ UN@@ CH@@ _@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ AC@@ TIV@@ ITY@@ _@@ IN@@ TO@@ _STA@@ C@@ K@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ EX@@ TR@@ A@@ _@@ F@@ IN@@ IS@@ H@@ _S@@ E@@ L@@ F@@ , "@@ true@@ "); dis@@ able@@ As@@ si@@ stan@@ t@@ (); m@@ A@@ m@@ W@@ m@@ State.@@ wait@@ For@@ Valid@@ State@@ (m@@ Device@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ , android.@@ server.@@ cts.@@ F@@ UL@@ L@@ S@@ C@@ RE@@ EN@@ _@@ W@@ OR@@ K@@ S@@ P@@ AC@@ E_@@ STA@@ C@@ K_@@ ID@@ ); m@@ A@@ m@@ W@@ m@@ State.@@ wait@@ For@@ Activity@@ State@@ (m@@ Device@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ State.@@ STATE_@@ RE@@ S@@ U@@ ME@@ D@@ ); m@@ A@@ m@@ W@@ m@@ State@@ .@@ assert@@ F@@ o@@ c@@ us@@ ed@@ Activity@@ ("@@ Test@@ Ac@@ tivi@@ t@@ y sho@@ ul@@ d b@@ e res@@ um@@ ed@@ ", android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ ); m@@ A@@ m@@ W@@ m@@ State@@ .@@ assert@@ F@@ ron@@ t@@ Stack@@ ("@@ F@@ ull@@ s@@ cre@@ e@@ n st@@ ac@@ k sho@@ ul@@ d b@@ e on to@@ p.@@ ", android.@@ server.@@ cts.@@ F@@ UL@@ L@@ S@@ C@@ RE@@ EN@@ _@@ W@@ OR@@ K@@ S@@ P@@ AC@@ E_@@ STA@@ C@@ K_@@ ID@@ ); m@@ A@@ m@@ W@@ m@@ State@@ .@@ assert@@ F@@ o@@ c@@ us@@ ed@@ Stack@@ ("@@ F@@ ull@@ s@@ cre@@ e@@ n st@@ ac@@ k sho@@ ul@@ d b@@ e fo@@ c@@ us@@ ed.@@ ", android.@@ server.@@ cts.@@ F@@ UL@@ L@@ S@@ C@@ RE@@ EN@@ _@@ W@@ OR@@ K@@ S@@ P@@ AC@@ E_@@ STA@@ C@@ K_@@ ID@@ ); }
static com.android.@@ m@@ ult@@ id@@ ex@@ .@@ Class@@ Path@@ Elem@@ ent get@@ Class@@ Path@@ Element@@ (@@ java.io.File file@@ ) throw@@ s java.io.IO@@ Exception, java.util.@@ z@@ i@@ p.@@ Zip@@ Exception { if (@@ file.@@ is@@ Directory@@ ()) { return new com.android.@@ m@@ ult@@ id@@ ex@@ .@@ Folder@@ Path@@ Element@@ (file@@ ); } else if (@@ file.@@ is@@ File@@ ()) { return new com.android.@@ m@@ ult@@ id@@ ex@@ .@@ Ar@@ ch@@ i@@ ve@@ Path@@ Element@@ (@@ new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (file@@ )); } else if (@@ file.@@ exist@@ s@@ ()) { throw new java.io.IO@@ Exception@@ (((@@ file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()) + " is not a di@@ re@@ ctor@@ y ne@@ ith@@ er a z@@ i@@ p file@@ ")); } else { throw new java.io.File@@ Not@@ F@@ ound@@ Exception(@@ file@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } }
public boolean re@@ ject@@ (java.lang.String pe@@ er@@ Addres@@ s) { synchronized@@ (m@@ Lock) { if (!(@@ check@@ Supplicant@@ P2p@@ Iface@@ And@@ Log@@ Fail@@ ure@@ ("@@ re@@ ject@@ "@@ ))) return false@@ ; byte@@ [] m@@ ac@@ Address = string@@ To@@ Addres@@ s(@@ pe@@ er@@ Addres@@ s); if (m@@ ac@@ Address == null@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, "@@ Can@@ not par@@ se re@@ jec@@ ted pe@@ er@@ '@@ s ma@@ c addres@@ s.@@ "); return false@@ ; } com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ <@@ java.lang.@@ Vo@@ id@@ > result = new com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ ((("@@ re@@ ject@@ (@@ " + pe@@ er@@ Addres@@ s) + "@@ )@@ ")); try { result.@@ set@@ Result@@ (m@@ I@@ Supplicant@@ P2p@@ Iface@@ .@@ re@@ ject@@ (m@@ ac@@ Address@@ )); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, ("@@ I@@ Supplicant@@ P2p@@ I@@ face excepti@@ on@@ : " + e@@ )); sup@@ plicant@@ Service@@ Di@@ ed@@ Handler@@ (); } return result.@@ is@@ Su@@ ccess@@ (); } }
@javax.annotation.@@ N@@ on@@ null protected static java.lang.String c@@ st@@ String(@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ dx.@@ dex.@@ code.@@ D@@ al@@ v@@ In@@ s@@ n in@@ s@@ n@@ ) { com.android.jack.@@ dx.@@ dex.@@ code.@@ C@@ st@@ In@@ s@@ n c@@ i = ((@@ com.android.jack.@@ dx.@@ dex.@@ code.@@ C@@ st@@ In@@ s@@ n@@ ) (in@@ s@@ n@@ )); com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ Constan@@ t c@@ s@@ t = c@@ i@@ .get@@ Constan@@ t@@ (); return c@@ s@@ t instanceof com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Str@@ ing ? ((@@ com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ String@@ ) (c@@ st@@ )).@@ to@@ Q@@ u@@ o@@ ted@@ () : c@@ st.@@ to@@ H@@ um@@ an@@ (); }
@java.lang.Override public void on@@ A@@ va@@ il@@ able@@ (android.net.@@ Net@@ wor@@ k network@@ , android.net.Network@@ Capabili@@ ti@@ es network@@ Capabilities@@ , android.net.@@ Link@@ Proper@@ ti@@ es lin@@ k@@ Properties@@ ) { set@@ L@@ ast@@ Callback@@ (com.android.server.@@ Connectivity@@ Service@@ Test.@@ Callback@@ State.@@ AV@@ A@@ IL@@ ABL@@ E, network@@ , network@@ Capabilities@@ ); super@@ .@@ on@@ A@@ va@@ il@@ able@@ (@@ network@@ , network@@ Capabilities@@ , lin@@ k@@ Properties@@ ); }
private void check@@ F@@ ast@@ Di@@ stance@@ Float4Float4@@ Float@@ () { android.renderscript.Allocation in@@ L@@ h@@ s = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 8@@ 9@@ 1@@ 4@@ 4@@ 4@@ 9@@ L); android.renderscript.Allocation in@@ R@@ h@@ s = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 4@@ 9@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ R@@ h@@ s(@@ in@@ R@@ h@@ s); script@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ Di@@ stance@@ Float4Float4@@ Float@@ (in@@ L@@ h@@ s, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ Di@@ stance@@ Float4Float4@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ R@@ h@@ s(@@ in@@ R@@ h@@ s); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ Di@@ stance@@ Float4Float4@@ Float@@ (in@@ L@@ h@@ s, out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ Di@@ stance@@ Float4Float4@@ Float@@ : " + (e.toString()))); } }
public void test_@@ set@@ Tra@@ f@@ fi@@ c@@ Class@@ () throw@@ s java.lang.Exception { try (@@ java.net.@@ S@@ ock@@ et s = new java.net.@@ Socket@@ ()) { for (@@ int i = 0; i <@@ = 25@@ 5@@ ; ++@@ i@@ ) { s.@@ set@@ Tra@@ f@@ fi@@ c@@ Clas@@ s(@@ i@@ ); int act@@ u@@ al = s.get@@ Tra@@ f@@ fi@@ c@@ Class@@ (); assert@@ True@@ (((@@ i == act@@ ual@@ ) || (((@@ i & (@@ ~@@ (@@ libcore.@@ java.net.@@ Socket@@ Test.@@ IN@@ E@@ T_@@ EC@@ N@@ _M@@ A@@ S@@ K@@ ))) == (@@ act@@ u@@ al & (@@ ~@@ (@@ libcore.@@ java.net.@@ Socket@@ Test.@@ IN@@ E@@ T_@@ EC@@ N@@ _M@@ A@@ S@@ K@@ )@@ ))) && ((@@ act@@ u@@ al & (@@ libcore.@@ java.net.@@ Socket@@ Test.@@ IN@@ E@@ T_@@ EC@@ N@@ _M@@ A@@ S@@ K@@ )) == 0@@ )))); } } }
@java.lang.Override public void ex@@ it@@ () { log@@ ((@@ (("@@ Ex@@ i@@ t Dis@@ connec@@ ted@@ (@@ " + (m@@ Device@@ )) + "@@ )@@ : ") + (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ StateMachine.@@ message@@ W@@ hat@@ To@@ String@@ (get@@ Current@@ Message@@ ().@@ wh@@ at@@ )))); m@@ L@@ ast@@ Connection@@ State = android.@@ bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ ; }
@org.junit.Test public void test@@ Default@@ Pro@@ vision@@ ing@@ Configuration@@ () throw@@ s java.lang.Exception { final java.lang.String if@@ ac@@ e = "@@ test_@@ w@@ lan@@ 0@@ "; final android.net.@@ i@@ p.@@ Ip@@ Manager ip@@ m = new android.net.@@ i@@ p.@@ Ip@@ Manager@@ (m@@ Contex@@ t, if@@ a@@ ce@@ , mC@@ b@@ , m@@ N@@ M@@ Service@@ ); android.net.@@ i@@ p.@@ Ip@@ C@@ vision@@ ing@@ Configur@@ ation con@@ fig = new android.net.@@ i@@ p.@@ Ip@@ Manager.@@ Pro@@ vision@@ ing@@ Configur@@ ation.@@ Builder@@ ().@@ w@@ ith@@ out@@ IP@@ v@@ 4@@ ().@@ w@@ ith@@ out@@ Ip@@ Re@@ ach@@ abili@@ ty@@ Monitor@@ ().@@ build@@ (); ip@@ m.@@ start@@ Pro@@ vision@@ ing@@ (@@ config@@ ); ve@@ r@@ if@@ y@@ (m@@ C@@ b@@ , tim@@ es@@ (1@@ )).@@ set@@ Ne@@ ig@@ h@@ b@@ or@@ Dis@@ cover@@ y@@ O@@ ff@@ load@@ (@@ true@@ ); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , time@@ out@@ (1@@ 00@@ ).@@ tim@@ es@@ (1@@ )).@@ dis@@ able@@ Ip@@ v@@ 6@@ (@@ if@@ a@@ ce@@ ); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , time@@ out@@ (1@@ 00@@ ).@@ tim@@ es@@ (1@@ )).@@ clear@@ Interface@@ Address@@ es@@ (@@ if@@ a@@ ce@@ ); ve@@ r@@ if@@ y@@ (m@@ C@@ b@@ , time@@ out@@ (1@@ 00@@ ).@@ tim@@ es@@ (1@@ )).@@ set@@ F@@ all@@ back@@ Multi@@ cast@@ Filter@@ (@@ false@@ ); ve@@ r@@ if@@ y@@ (m@@ C@@ b@@ , ne@@ ver@@ ()).@@ on@@ Pro@@ vision@@ ing@@ Fail@@ ure@@ (@@ any@@ ()); ip@@ m.@@ st@@ op@@ (); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , time@@ out@@ (1@@ 00@@ ).@@ tim@@ es@@ (1@@ )).@@ dis@@ able@@ Ip@@ v@@ 6@@ (@@ if@@ a@@ ce@@ ); ve@@ r@@ if@@ y@@ (m@@ N@@ M@@ Service@@ , time@@ out@@ (1@@ 00@@ ).@@ tim@@ es@@ (1@@ )).@@ clear@@ Interface@@ Address@@ es@@ (@@ if@@ a@@ ce@@ ); }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ L@@ arg@@ e@@ Test public void test@@ Flag@@ F@@ Ex@@ ist@@ ing@@ E@@ () { if (android.os.@@ En@@ vi@@ ron@@ m@@ ent.@@ is@@ Ex@@ ter@@ nal@@ Stor@@ age@@ E@@ m@@ ul@@ ated@@ ()) { return@@ ; } int i@@ Flag@@ s = android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ EX@@ TER@@ N@@ AL@@ ; int r@@ Flag@@ s = (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ L_@@ F@@ OR@@ W@@ AR@@ D_@@ LO@@ C@@ K@@ ) | (android.content.@@ p@@ m.@@ Package@@ Manager.@@ IN@@ STA@@ L@@ _RE@@ P@@ L@@ AC@@ E_@@ EX@@ IS@@ T@@ ING@@ ); in@@ stall@@ From@@ R@@ aw@@ Resource@@ ("@@ in@@ st@@ al@@ l.@@ apk@@ ", R.@@ raw@@ .@@ in@@ stall@@ , i@@ Flag@@ s, false@@ , false@@ , (-1@@ ), (-1@@ )); in@@ stall@@ From@@ R@@ aw@@ Resource@@ ("@@ in@@ st@@ al@@ l.@@ apk@@ ", R.@@ raw@@ .@@ in@@ stall@@ , r@@ Flag@@ s, true@@ , false@@ , (-1@@ ), (-1@@ )); }
private void check@@ S@@ te@@ p@@ FloatFloat@@ Float@@ () { android.renderscript.Allocation in@@ E@@ d@@ g@@ e = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 1@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 9@@ 1@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ V@@ (in@@ V@@ ); script@@ .@@ for@@ Each@@ _test@@ S@@ te@@ p@@ FloatFloat@@ Float@@ (in@@ E@@ d@@ ge@@ , out); ve@@ r@@ if@@ y@@ Results@@ S@@ te@@ p@@ FloatFloat@@ Float@@ (in@@ E@@ d@@ ge@@ , in@@ V@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ te@@ p@@ FloatFloat@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ V@@ (in@@ V@@ ); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ S@@ te@@ p@@ FloatFloat@@ Float@@ (in@@ E@@ d@@ ge@@ , out); ve@@ r@@ if@@ y@@ Results@@ S@@ te@@ p@@ FloatFloat@@ Float@@ (in@@ E@@ d@@ ge@@ , in@@ V@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ te@@ p@@ FloatFloat@@ Float@@ : " + (e.toString()))); } }
@java.lang.Override public void copy@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ V@@ File src@@ File@@ , @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ De@@ f@@ l@@ ate@@ F@@ S@@ .@@ De@@ f@@ l@@ ate@@ V@@ File d@@ st@@ File@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ C@@ lose@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ Read@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ W@@ rite@@ Exception, com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { if (s@@ rc@@ File instanceof com.android.sched.vfs.@@ De@@ f@@ l@@ ate@@ F@@ S@@ .@@ De@@ f@@ l@@ ate@@ V@@ File@@ ) { vfs.@@ copy@@ ((@@ (com.android.s@@ ched.@@ vfs.@@ De@@ f@@ l@@ ate@@ F@@ S@@ .@@ De@@ f@@ l@@ ate@@ V@@ File@@ ) (s@@ rc@@ File@@ )@@ ).get@@ W@@ r@@ app@@ ed@@ File@@ (), d@@ st@@ File@@ .get@@ W@@ r@@ app@@ ed@@ File@@ ()); } else { super@@ .@@ copy@@ (s@@ rc@@ File@@ , d@@ st@@ File@@ ); } }
@java.lang.Override public void set@@ Data@@ Profile@@ (android.@@ telephony.@@ data@@ .@@ Data@@ Profile@@ [] d@@ ps@@ , boolean is@@ R@@ o@@ am@@ ing@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SE@@ T_@@ DA@@ TA@@ _P@@ RO@@ F@@ IL@@ E, result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ (r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " wit@@ h dat@@ a pro@@ file@@ s : ")); for (android.@@ telephony.@@ data@@ .@@ Data@@ Pro@@ fi@@ le pro@@ fi@@ le : d@@ ps@@ ) { ri@@ l@@ j@@ Log@@ (pro@@ file.@@ toString@@ ()); } } java.util.ArrayList<@@ android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Data@@ Profile@@ Info@@ > dp@@ is = new java.util.ArrayList<@@ >(); for (android.@@ telephony.@@ data@@ .@@ Data@@ Pro@@ fi@@ le d@@ p : d@@ ps@@ ) { dp@@ is.@@ add(@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ con@@ ver@@ t@@ To@@ H@@ al@@ Data@@ Profile@@ (d@@ p@@ )); } try { radioProx@@ y.@@ set@@ Data@@ Profile@@ (rr@@ .m@@ Ser@@ ial@@ , dp@@ is@@ , is@@ R@@ o@@ am@@ ing@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ set@@ Data@@ Profile@@ ", e); } } }
private void g@@ ener@@ ate@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ _@@ X@@ 509@@ _@@ D@@ ER@@ (@@ java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctor@@ y f@@ ) throw@@ s java.lang.Exception { java.util.Collection@@ <@@ ? extends java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ > cer@@ t@@ s = get@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ (f@@ , libcore.@@ java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ Test.@@ C@@ ER@@ T@@ S_@@ X@@ 509@@ _@@ D@@ ER@@ ); assert@@ NotNull@@ (c@@ er@@ t@@ s); assert@@ Equal@@ s(@@ 2, cer@@ ts.@@ size@@ ()); }
@java.lang.Override @@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") @javax.annotation.@@ Check@@ For@@ Null public <@@ T extends com.android.sched.@@ m@@ ark@@ er.@@ Mark@@ er@@ > T remove@@ Mark@@ er(@@ @javax.annotation.@@ N@@ on@@ null java.lang.@@ Class@@ <@@ T@@ > c@@ l@@ s) { T result@@ ; synchronized@@ (@@ lock@@ ) { if ((m@@ ark@@ er@@ s) == null@@ ) { return null@@ ; } result = ((@@ T@@ ) (m@@ ark@@ er@@ s.@@ remove@@ (c@@ l@@ s@@ ))); if (m@@ ark@@ er@@ s.@@ isEmpty@@ ()) { m@@ ark@@ er@@ s = null@@ ; } } return result@@ ; }
@java.lang.Override public int check@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (java.lang.String per@@ mission@@ ) { if (android.@@ text.@@ Text@@ Utils.@@ equals(@@ per@@ mission@@ , "@@ android.@@ per@@ mission@@ .@@ W@@ R@@ I@@ TE_@@ AP@@ N@@ _S@@ E@@ T@@ ING@@ S@@ ")) { android.util.Log.d@@ (com.android.@@ provid@@ er@@ s.@@ telephony.@@ Telephony@@ Provider@@ Test.@@ TAG, ((("@@ check@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ : per@@ mission@@ =@@ " + per@@ mission@@ ) + ", return@@ ing ") + (android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ G@@ R@@ AN@@ TED@@ ))); return android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ G@@ R@@ AN@@ TED@@ ; } else { android.util.Log.d@@ (com.android.@@ provid@@ er@@ s.@@ telephony.@@ Telephony@@ Provider@@ Test.@@ TAG, ((("@@ check@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ : per@@ mission@@ =@@ " + per@@ mission@@ ) + ", return@@ ing ") + (android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ D@@ EN@@ I@@ ED@@ ))); return android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ D@@ EN@@ I@@ ED@@ ; } }
public boolean request@@ I@@ con@@ (java.lang.String b@@ ss@@ id, java.lang.String file@@ Name@@ ) { if ((@@ b@@ s@@ si@@ d == null@@ ) || (file@@ Name == null@@ )) return false@@ ; return m@@ Supplicant@@ St@@ a@@ Iface@@ H@@ al.@@ in@@ iti@@ ate@@ H@@ s@@ 2@@ 0@@ I@@ con@@ Q@@ u@@ er@@ y@@ (b@@ ss@@ id, file@@ Name); }
private void dis@@ p@@ atch@@ B@@ ack@@ gro@@ und@@ Per@@ io@@ d@@ Al@@ ar@@ m@@ () { assert@@ True@@ ("@@ dis@@ p@@ at@@ ch back@@ gro@@ un@@ d per@@ io@@ d al@@ ar@@ m@@ ", m@@ Al@@ ar@@ m@@ Manager.@@ dis@@ p@@ atch@@ (@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner@@ Imp@@ l.@@ B@@ AC@@ K@@ G@@ RO@@ UN@@ D@@ _P@@ ER@@ IO@@ D_@@ AL@@ AR@@ M@@ _@@ TAG@@ )); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); }
private void re@@ cor@@ d@@ S@@ n@@ ap@@ sho@@ t@@ Lock@@ ed@@ (@@ long current@@ Tim@@ e) throw@@ s android.os.@@ RemoteException { final android.net.Network@@ Stat@@ s uid@@ S@@ n@@ ap@@ sho@@ t = get@@ Network@@ Stat@@ s@@ U@@ id@@ D@@ eta@@ il@@ Lock@@ ed@@ (); final android.net.Network@@ Stat@@ s xt@@ S@@ n@@ ap@@ sho@@ t = get@@ Network@@ Stat@@ s@@ X@@ t@@ (); final android.net.Network@@ Stat@@ s de@@ v@@ S@@ n@@ ap@@ sho@@ t = m@@ Network@@ Manager.get@@ Network@@ Stat@@ s@@ S@@ um@@ m@@ ary@@ De@@ v@@ (); final android.net.Network@@ Stat@@ s t@@ ether@@ S@@ n@@ ap@@ sho@@ t = get@@ Network@@ Stat@@ s@@ T@@ ether@@ ing@@ (android.net.@@ Network@@ Stat@@ s.@@ STA@@ T@@ S@@ _P@@ ER_@@ I@@ F@@ AC@@ E); xt@@ S@@ n@@ ap@@ sho@@ t.@@ com@@ b@@ ine@@ All@@ Valu@@ es(@@ t@@ ether@@ S@@ n@@ ap@@ sho@@ t@@ ); de@@ v@@ S@@ n@@ ap@@ sho@@ t.@@ com@@ b@@ ine@@ All@@ Valu@@ es(@@ t@@ ether@@ S@@ n@@ ap@@ sho@@ t@@ ); m@@ De@@ v@@ Record@@ er.@@ re@@ cor@@ d@@ S@@ n@@ ap@@ sho@@ t@@ Lock@@ ed@@ (@@ de@@ v@@ S@@ n@@ ap@@ sho@@ t, m@@ Active@@ I@@ fa@@ ces@@ , null@@ , current@@ Time@@ ); m@@ X@@ t@@ Record@@ er.@@ re@@ cor@@ d@@ S@@ n@@ ap@@ sho@@ t@@ Lock@@ ed@@ (@@ xt@@ S@@ n@@ ap@@ sho@@ t, m@@ Active@@ I@@ fa@@ ces@@ , null@@ , current@@ Time@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ net.@@ V@@ p@@ n@@ Info@@ [] v@@ p@@ n@@ Ar@@ ra@@ y = m@@ Con@@ n@@ Manager.get@@ All@@ V@@ p@@ n@@ Info@@ (); m@@ U@@ id@@ Record@@ er.@@ re@@ cor@@ d@@ S@@ n@@ ap@@ sho@@ t@@ Lock@@ ed@@ (@@ uid@@ S@@ n@@ ap@@ sho@@ t, m@@ Active@@ U@@ id@@ I@@ fa@@ ces@@ , v@@ p@@ n@@ Array@@ , current@@ Time@@ ); m@@ U@@ id@@ Tag@@ Record@@ er.@@ re@@ cor@@ d@@ S@@ n@@ ap@@ sho@@ t@@ Lock@@ ed@@ (@@ uid@@ S@@ n@@ ap@@ sho@@ t, m@@ Active@@ U@@ id@@ I@@ fa@@ ces@@ , v@@ p@@ n@@ Array@@ , current@@ Time@@ ); m@@ Stat@@ s@@ Ob@@ server@@ s.@@ update@@ Stat@@ s(@@ xt@@ S@@ n@@ ap@@ sho@@ t, uid@@ S@@ n@@ ap@@ sho@@ t, new android.util.@@ Array@@ Map@@ (m@@ Active@@ I@@ fa@@ ces@@ ), new android.util.@@ Array@@ Map@@ (m@@ Active@@ U@@ id@@ I@@ fa@@ ces@@ ), v@@ p@@ n@@ Array@@ , current@@ Time@@ ); }
@java.lang.Override public java.lang.@@ Vo@@ id call@@ () throw@@ s java.lang.Exception { l@@ atch@@ .@@ count@@ Down@@ (); for (@@ int j = 0; j < 1@@ 00@@ ; j@@ ++) { s.@@ update@@ (m@@ ess@@ age@@ ); s.@@ sign@@ (); } return null@@ ; }
@java.lang.Override public com.android.build.gradle.@@ model.@@ Android@@ Con@@ fig get@@ Ex@@ t@@ ension@@ () { return ext@@ ension@@ ; }
@org.junit.Test public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 0@@ 2@@ 6@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 0@@ 2@@ 6@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
protected void st@@ op@@ Ob@@ ex@@ Server@@ Session@@ () { if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ V@@ ER@@ B@@ O@@ SE@@ ) android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ Pb@@ a@@ p Ser@@ vice st@@ op@@ Ob@@ ex@@ Server@@ Session@@ "); m@@ Session@@ Status@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ MS@@ G@@ _@@ AC@@ Q@@ U@@ I@@ R@@ E_@@ W@@ A@@ K@@ E_@@ LO@@ C@@ K@@ ); m@@ Session@@ Status@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ MS@@ G@@ _RE@@ LE@@ A@@ S@@ E_@@ W@@ A@@ K@@ E_@@ LO@@ C@@ K@@ ); if ((m@@ W@@ ake@@ Lock) != null@@ ) { m@@ W@@ ake@@ Lock@@ .@@ re@@ le@@ ase@@ (); m@@ W@@ ake@@ Loc@@ k = null@@ ; } if ((m@@ Server@@ Session@@ ) != null@@ ) { m@@ Server@@ Session@@ .@@ close(); m@@ Server@@ S@@ es@@ sion = null@@ ; } close@@ Connection@@ Socket@@ (); if ((@@ (m@@ Adapter@@ ) != null@@ ) && (m@@ Adap@@ ter.@@ is@@ Enabled@@ ())) { start@@ Socket@@ Listener@@ s(); } set@@ State@@ (@@ Bluetooth@@ Pb@@ ap.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ ); }
private void m@@ ay@@ be@@ S@@ end@@ R@@ A@@ (@@ java.net.Inet@@ Socket@@ Address d@@ est@@ ) { if ((@@ d@@ est == null@@ ) || (!(@@ is@@ Su@@ it@@ able@@ D@@ est@@ in@@ ation@@ (d@@ est@@ )@@ ))) { d@@ est = m@@ All@@ No@@ des@@ ; } try { synchronized@@ (m@@ Lock) { if ((m@@ R@@ a@@ Length@@ ) < (android.net.@@ i@@ p.@@ R@@ ou@@ ter@@ Ad@@ verti@@ se@@ ment@@ D@@ a@@ e@@ mon@@ .@@ M@@ IN@@ _@@ R@@ A@@ _@@ H@@ E@@ AD@@ ER@@ _S@@ I@@ Z@@ E@@ )) { return@@ ; } android.system.@@ O@@ s.@@ send@@ to@@ (m@@ Socket@@ , m@@ R@@ A@@ , 0, m@@ R@@ a@@ Length@@ , 0, d@@ est@@ ); } m@@ Log.@@ log@@ And@@ E@@ m@@ it@@ (("@@ R@@ A send@@ to " + (d@@ est.@@ get@@ Address@@ ().get@@ Host@@ Address@@ ()))); } catch (android.@@ system.@@ ErrnoException | java.net.@@ Socket@@ Exception e) { if (is@@ Socket@@ Valid@@ ()) { m@@ Log.@@ e@@ (("@@ send@@ to error@@ : " + e@@ )); } } }
private static java.lang.String for@@ mat@@ D@@ ay@@ Per@@ io@@ d@@ Format@@ (java.lang.String p@@ attern@@ , java.lang.String h@@ our@@ , java.lang.String expected@@ , java.util.@@ Local@@ e loc@@ ale@@ ) throw@@ s java.text.@@ Par@@ se@@ Exception { java.text.@@ Sim@@ ple@@ Date@@ For@@ ma@@ t si@@ mp@@ le@@ Date@@ For@@ ma@@ t = new java.text.@@ Sim@@ ple@@ Date@@ Format@@ (p@@ attern@@ , loc@@ ale@@ ); si@@ mp@@ le@@ Date@@ Format@@ .set@@ TimeZone@@ (java.util.@@ Time@@ Z@@ on@@ e.get@@ TimeZone@@ ("@@ UT@@ C@@ ")); assert@@ Equal@@ s(@@ expected@@ , si@@ mp@@ le@@ Date@@ Format@@ .@@ for@@ mat@@ (@@ libcore.@@ java.text.@@ Sim@@ ple@@ Date@@ Format@@ Test.@@ create@@ Date@@ From@@ H@@ our@@ (@@ loc@@ ale@@ ))); }
public void test@@ Dat@@ ag@@ ram@@ Channel@@ () throw@@ s java.lang.Exception { java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l d@@ c = java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Chan@@ ne@@ l.@@ open@@ (); d@@ c.@@ connect@@ (@@ server.@@ get@@ Local@@ Address@@ ()); d@@ c.@@ close(); assert@@ Equal@@ s(@@ java.util.Collection@@ s.@@ E@@ M@@ P@@ TY@@ _M@@ AP@@ , t@@ ag@@ g@@ er.get@@ Li@@ ve@@ Descrip@@ tor@@ s()); }
public static byte@@ [] sub@@ array@@ (@@ byte@@ [] ar@@ r@@ , int offset@@ , int l@@ en@@ ) { if (@@ le@@ n == 0) { return android.@@ security.@@ Array@@ Utils.@@ E@@ M@@ P@@ TY@@ _@@ B@@ Y@@ TE_@@ AR@@ R@@ A@@ Y@@ ; } if ((@@ o@@ ff@@ set == 0) && (@@ le@@ n == (@@ ar@@ r.@@ length@@ ))) { return ar@@ r@@ ; } byte@@ [] result = new byte@@ [@@ l@@ en@@ ]; java.lang.System.@@ array@@ copy@@ (@@ ar@@ r@@ , offset@@ , result@@ , 0, l@@ en@@ ); return result@@ ; }
@java.lang.Override public java.util.@@ Set@@ <java.lang.String@@ > get@@ C@@ ri@@ ti@@ cal@@ Ex@@ t@@ ension@@ O@@ ID@@ s() { return null@@ ; }
public long get@@ L@@ en@@ ame@@ (java.lang.String lan@@ gu@@ age@@ ) { return m@@ L@@ en@@ ame@@ , null@@ , null@@ ); }
@org.junit.Test @com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ annotations.@@ Test@@ Info@@ (@@ id = "@@ 1@@ 4@@ 5@@ 7@@ 8@@ 8@@ 2@@ 1@@ ") public void test@@ P@@ ho@@ to@@ Cap@@ t@@ ure@@ () throw@@ s java.lang.Exception { android.app.@@ In@@ strument@@ ation in@@ strument@@ ation = test@@ F@@ ramework@@ .get@@ In@@ strument@@ ation@@ (); final android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device de@@ vice = android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device@@ .get@@ Instance@@ (in@@ strument@@ ation@@ ); if ((@@ test@@ F@@ ramework@@ .get@@ Api@@ ()) >@@ = 2@@ 4@@ ) { boolean p@@ ho@@ to@@ Test@@ Su@@ c@@ ces@@ s = u@@ se@@ C@@ am@@ er@@ a@@ (in@@ strument@@ ation@@ , "@@ C@@ am@@ er@@ a@@ "); org.junit.@@ Asser@@ t@@ .@@ assert@@ True@@ ("@@ Ne@@ w p@@ ho@@ to w@@ a@@ s not de@@ let@@ ed f@@ ro@@ m th@@ e g@@ all@@ er@@ y@@ ", p@@ ho@@ to@@ Test@@ Su@@ ccess@@ ); } }
@org.junit.Test public void n@@ or@@ m@@ al@@ Add@@ ed@@ D@@ if@@ f@@ ed@@ Field@@ Valu@@ es@@ () { com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value n@@ or@@ m@@ al = new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value@@ ("@@ name@@ ", "@@ type@@ ", new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Value@@ (1@@ )); com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value x = com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Valu@@ e.@@ add@@ ed@@ (@@ n@@ or@@ m@@ al@@ ); assert@@ Equal@@ s("@@ name@@ ", x.@@ name@@ ); assert@@ Equal@@ s("@@ type@@ ", x.@@ typ@@ e); assert@@ Equal@@ s@@ (@@ new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Value@@ (1@@ ), x.@@ current@@ ); assert@@ True@@ (@@ x.@@ add@@ ed@@ ); assert@@ Equal@@ s(@@ D@@ if@@ f@@ ed@@ Field@@ Valu@@ e.@@ Statu@@ s.@@ AD@@ DE@@ LE@@ TED@@ , x.@@ stat@@ us@@ ); }
public static int $@@ no@@ in@@ line@@ $@@ Sh@@ r@@ 2@@ 4@@ And@@ 25@@ 5@@ (@@ int arg@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ ar@@ g >@@ > 2@@ 4@@ ) & 25@@ 5@@ ; }
public void do@@ Call@@ () { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) throw new java.lang.@@ Error@@ ("@@ "); }
static void read@@ (@@ java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l chan@@ , byte@@ [] data@@ , int length@@ , long time@@ out@@ ) throw@@ s com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { java.nio.Byte@@ Buff@@ er bu@@ f = java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (d@@ ata@@ , 0, (@@ l@@ eng@@ th != (-1@@ ) ? l@@ eng@@ th : data@@ .@@ length@@ )); int num@@ W@@ ait@@ s = 0; while ((@@ bu@@ f.@@ posi@@ tion@@ ()) != (@@ bu@@ f.@@ li@@ m@@ it@@ ())) { int count@@ ; coun@@ t = chan@@ .@@ read@@ (@@ bu@@ f@@ ); if (@@ coun@@ t < 0) { com.android.ddmlib.@@ Log.@@ d@@ ("@@ d@@ ms@@ ", "@@ read@@ : channe@@ l E@@ O@@ F@@ "); throw new java.io.IO@@ Exception("@@ E@@ O@@ F@@ "); } else if (@@ coun@@ t == 0) { if ((@@ time@@ out != 0) && ((@@ num@@ W@@ ait@@ s * (com.android.@@ ddmlib.@@ Adb@@ Helper.@@ W@@ A@@ I@@ T_@@ TI@@ ME@@ )) > time@@ out@@ )) { com.android.ddmlib.@@ Log.@@ d@@ ("@@ d@@ d@@ ms@@ ", "@@ read@@ : time@@ out@@ "); throw new com.android.ddmlib.@@ Time@@ out@@ Exception@@ (); } java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (com.android.@@ ddmlib.@@ Adb@@ Helper.@@ W@@ A@@ I@@ T_@@ TI@@ M@@ E); num@@ W@@ ait@@ s@@ ++@@ ; } else { num@@ W@@ ait@@ s = 0; } }
public int get@@ Sim@@ State@@ (@@ int s@@ lot@@ Index@@ ) { int si@@ m@@ State = android.telephony.@@ Sub@@ s@@ cription@@ Manager.get@@ Sim@@ State@@ For@@ S@@ lot@@ Index@@ (s@@ lot@@ Id@@ x@@ ); return si@@ m@@ State@@ ; }
@java.lang.Override protected void fil@@ l@@ R@@ t@@ Test@@ Info@@ s() { r@@ t@@ Test@@ Info@@ s.@@ add(@@ AD@@ V@@ AN@@ C@@ ED@@ TE@@ S@@ T@@ ); r@@ t@@ Test@@ Info@@ s.@@ add(@@ C@@ F@@ G@@ TE@@ S@@ T@@ ); r@@ t@@ Test@@ Info@@ s.@@ add(@@ FA@@ S@@ T@@ P@@ A@@ TH@@ ); r@@ t@@ Test@@ Info@@ s.@@ add(@@ SI@@ M@@ P@@ LE@@ TE@@ S@@ T@@ ); r@@ t@@ Test@@ Info@@ s.@@ add(@@ S@@ H@@ OR@@ T@@ CON@@ DI@@ TION@@ ); }
public void enable@@ Debug@@ Sign@@ ature@@ (java.lang.String st@@ ore@@ O@@ s@@ Path@@ ) { m@@ Store@@ O@@ s@@ P@@ ath = st@@ ore@@ O@@ s@@ Path@@ ; }
private static void tra@@ ver@@ se@@ S@@ V@@ G@@ And@@ Ex@@ tr@@ act@@ (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ T@@ re@@ e s@@ v@@ g@@ T@@ re@@ e@@ , com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g.@@ S@@ V@@ G@@ Gro@@ up@@ No@@ de current@@ Gro@@ up@@ , org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de i@@ tem@@ ) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Node@@ Lis@@ t all@@ Ch@@ ild@@ re@@ n = i@@ tem@@ .get@@ Ch@@ ild@@ No@@ des@@ (); for (@@ int i = 0; i < (@@ all@@ Ch@@ ild@@ r@@ en@@ .get@@ Length@@ ()); i++) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de current@@ No@@ de = all@@ Ch@@ ild@@ r@@ en@@ .@@ i@@ tem@@ (i@@ ); java.lang.String no@@ de@@ Name = current@@ No@@ d@@ e.get@@ Node@@ Name@@ (); if ((((@@ ("@@ path@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ )) || ("@@ re@@ ct@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ ))) || ("@@ c@@ ir@@ cle@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ ))) || ("@@ po@@ ly@@ g@@ on@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ ))) || ("@@ line@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ ))) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ V@@ G@@ Le@@ a@@ ve@@ No@@ de ch@@ il@@ d = new com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ V@@ G@@ Le@@ a@@ ve@@ Node@@ ((@@ no@@ de@@ Name + i@@ )); com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ ex@@ tr@@ act@@ All@@ Item@@ s@@ A@@ s(@@ s@@ v@@ g@@ T@@ re@@ e@@ , ch@@ ild@@ , current@@ Node@@ ); current@@ Gro@@ up@@ .add@@ Ch@@ ild@@ r@@ en@@ (@@ ch@@ ild@@ ); } else if ("@@ g@@ "@@ .@@ equals(@@ no@@ de@@ Name@@ )) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ Gro@@ up@@ No@@ de ch@@ ild@@ Gro@@ u@@ p = new com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ Gro@@ up@@ Node@@ (("@@ ch@@ ild@@ " + i@@ )); current@@ Gro@@ up@@ .add@@ Ch@@ ild@@ r@@ en@@ (@@ ch@@ ild@@ Gro@@ up@@ ); com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ tra@@ ver@@ se@@ S@@ V@@ G@@ And@@ Ex@@ tr@@ act@@ (s@@ v@@ g@@ T@@ re@@ e@@ , ch@@ ild@@ Gro@@ up@@ , current@@ Node@@ ); } else { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ tra@@ ver@@ se@@ S@@ V@@ G@@ And@@ Ex@@ tr@@ act@@ (s@@ v@@ g@@ T@@ re@@ e@@ , current@@ Gro@@ up@@ , current@@ Node@@ ); } } }
public void test@@ S@@ cre@@ en@@ Lay@@ out@@ () throw@@ s java.lang.Exception { int expected@@ S@@ cre@@ en@@ Lay@@ out = com@@ pu@@ te@@ S@@ cre@@ en@@ Lay@@ out@@ (); int expected@@ Siz@@ e = expected@@ S@@ cre@@ en@@ Lay@@ out & (android.content.@@ res@@ .@@ Configur@@ ation.@@ S@@ C@@ RE@@ EN@@ LA@@ Y@@ O@@ U@@ T_@@ SIZ@@ E_@@ MA@@ S@@ K@@ ); int expected@@ Lon@@ g = expected@@ S@@ cre@@ en@@ Lay@@ out & (android.content.@@ res@@ .@@ Configur@@ ation.@@ S@@ C@@ RE@@ EN@@ LA@@ Y@@ O@@ U@@ T_@@ L@@ ON@@ G@@ _M@@ A@@ S@@ K@@ ); boolean n@@ a@@ vi@@ g@@ ation@@ B@@ a@@ r = has@@ N@@ a@@ vi@@ g@@ ation@@ B@@ ar@@ (); for (@@ int i = 0; i < (android.@@ dp@@ i.@@ cts.@@ Configuration@@ S@@ cre@@ en@@ Lay@@ out@@ Test.@@ OR@@ I@@ EN@@ TA@@ TION@@ S@@ .@@ length); i++) { android.app.@@ Ac@@ tivi@@ t@@ y ac@@ tivi@@ t@@ y = start@@ O@@ ri@@ ent@@ ation@@ Activity@@ (android.@@ dp@@ i.@@ cts.@@ Configuration@@ S@@ cre@@ en@@ Lay@@ out@@ Test.@@ OR@@ I@@ EN@@ TA@@ TION@@ S@@ [i]@@ ); android.content.@@ res@@ .@@ Configur@@ ation m@@ Con@@ fig = ac@@ tivity@@ .get@@ Res@@ ources@@ ().get@@ Configuration@@ (); int act@@ ual@@ Siz@@ e = (m@@ Config.@@ s@@ cre@@ en@@ Lay@@ out@@ ) & (android.content.@@ res@@ .@@ Configur@@ ation.@@ S@@ C@@ RE@@ EN@@ LA@@ Y@@ O@@ U@@ T_@@ SIZ@@ E_@@ MA@@ S@@ K@@ ); int act@@ ual@@ Lon@@ g = (m@@ Config.@@ s@@ cre@@ en@@ Lay@@ out@@ ) & (android.content.@@ res@@ .@@ Configur@@ ation.@@ S@@ C@@ RE@@ EN@@ LA@@ Y@@ O@@ U@@ T_@@ L@@ ON@@ G@@ _M@@ A@@ S@@ K@@ ); assert@@ Equal@@ s@@ ((((@@ (("@@ Ex@@ pec@@ ted s@@ cre@@ e@@ n siz@@ e valu@@ e of " + expected@@ Siz@@ e) + " bu@@ t go@@ t ") + act@@ ual@@ Siz@@ e) + " for or@@ i@@ ent@@ ation ") + (android.@@ dp@@ i.@@ cts.@@ Configuration@@ S@@ cre@@ en@@ Lay@@ out@@ Test.@@ OR@@ I@@ EN@@ TA@@ TION@@ S@@ [i]@@ )), expected@@ Size@@ , act@@ ual@@ Siz@@ e); if (!@@ n@@ a@@ vi@@ g@@ ation@@ B@@ ar@@ ) { assert@@ Equal@@ s@@ ((((@@ (("@@ Ex@@ pec@@ ted s@@ cre@@ e@@ n long valu@@ e of " + expected@@ Long@@ ) + " bu@@ t go@@ t ") + act@@ ual@@ Long@@ ) + " for or@@ i@@ ent@@ ation ") + (android.@@ dp@@ i.@@ cts.@@ Configuration@@ S@@ cre@@ en@@ Lay@@ out@@ Test.@@ OR@@ I@@ EN@@ TA@@ TION@@ S@@ [i]@@ )), expected@@ Long@@ , act@@ ual@@ Long@@ ); } te@@ ar@@ Down@@ (); } }
public int u@@ int@@ 32@@ () throw@@ s java.io.IOException { return (@@ (@@ int@@ ) (@@ int@@ v@@ ())); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null void de@@ lete@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ De@@ f@@ l@@ ate@@ F@@ S@@ .@@ De@@ f@@ l@@ ate@@ V@@ File file@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ De@@ lete@@ File@@ Exception { vfs.@@ de@@ lete@@ (file@@ ); }
@java.lang.Override protected void log@@ e@@ (java.lang.String s) { if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ I@@ si@@ m@@ Uicc@@ Record@@ s.@@ DBG) android.util.Log.e@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ I@@ si@@ m@@ Uicc@@ Record@@ s.@@ LOG@@ _@@ TAG, ("@@ [@@ I@@ SI@@ M@@ ] " + s@@ )); }
@javax.annotation.@@ N@@ on@@ null private synchronized com.android.sched.vfs.@@ Input@@ Output@@ VF@@ S get@@ Sec@@ tion@@ VF@@ S@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.library.@@ File@@ Type file@@ Typ@@ e) throw@@ s com.android.jack.library.@@ Library@@ IO@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception { com.android.sched.vfs.@@ Input@@ Output@@ VF@@ S current@@ Sec@@ tion@@ VF@@ S@@ ; if (s@@ ec@@ tion@@ VF@@ S@@ .@@ contain@@ s@@ Key@@ (file@@ Type@@ )) { current@@ Sec@@ tion@@ VF@@ S = sec@@ tion@@ VF@@ S@@ .get@@ (file@@ Type@@ ); } else { com.android.sched.vfs.@@ V@@ P@@ ath pre@@ fix@@ P@@ ath = new com.android.sched.vfs.@@ V@@ Path@@ (file@@ Typ@@ e.get@@ Pre@@ fix@@ (), '@@ /@@ '@@ ); com.android.sched.vfs.@@ VF@@ S output@@ VF@@ S = new com.android.sched.vfs.@@ Pre@@ fix@@ ed@@ F@@ S@@ (@@ v@@ f@@ s, pre@@ fix@@ Path@@ ); if ((@@ g@@ ener@@ ate@@ Jack@@ lib@@ Dig@@ est@@ ) && (file@@ Type == (com.android.jack.@@ library.@@ File@@ Type.@@ P@@ RE@@ BU@@ IL@@ T@@ ))) { try { output@@ VF@@ S = new com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ (@@ output@@ VF@@ S@@ , com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Jack@@ Library@@ Fa@@ ctor@@ y.@@ ME@@ SS@@ A@@ G@@ E_@@ DI@@ G@@ E@@ ST_@@ AL@@ G@@ O@@ )); } catch (com.android.s@@ ched.@@ vfs.@@ W@@ ron@@ g@@ VF@@ S@@ Format@@ Exception e) { throw new com.android.jack.library.@@ Library@@ IO@@ Exception@@ (get@@ Location@@ (), e); } } current@@ Sec@@ tion@@ VF@@ S = new com.android.sched.vfs.@@ Gener@@ ic@@ Input@@ Output@@ VF@@ S@@ (@@ output@@ VF@@ S@@ ); sec@@ tion@@ VF@@ S@@ .@@ put@@ (file@@ Type, current@@ Sec@@ tion@@ VF@@ S@@ ); } return current@@ Sec@@ tion@@ VF@@ S@@ ; }
@java.lang.Override public void run@@ () { while (is@@ Socket@@ Valid@@ ()) { try { final int r@@ va@@ l = android.system.@@ O@@ s.@@ re@@ c@@ v@@ f@@ rom@@ (m@@ Socket@@ , m@@ S@@ o@@ li@@ cation@@ , 0, m@@ S@@ o@@ lic@@ ation.@@ length@@ , 0, so@@ lic@@ itor@@ ); if ((@@ r@@ va@@ l < 1@@ ) || ((m@@ S@@ o@@ li@@ cation@@ [0@@ ]@@ ) != (android.net.@@ i@@ p.@@ R@@ ou@@ ter@@ Ad@@ verti@@ se@@ ment@@ D@@ a@@ e@@ mon@@ .@@ IC@@ M@@ P@@ V@@ 6@@ _N@@ D_@@ RO@@ UT@@ ER@@ _S@@ O@@ L@@ IC@@ I@@ T@@ ))) { continue@@ ; } } catch (android.@@ system.@@ ErrnoException | java.net.@@ Socket@@ Exception e) { if (is@@ Socket@@ Valid@@ ()) { m@@ Log.@@ error@@ (("@@ re@@ c@@ v@@ f@@ ro@@ m error@@ : " + e@@ )); } continue@@ ; } m@@ ay@@ be@@ S@@ end@@ R@@ A@@ (s@@ o@@ lic@@ itor@@ ); } }
private static android.renderscript.@@ Render@@ Scrip@@ t int@@ er@@ nal@@ Create@@ (android.content.@@ Context ct@@ x@@ , int s@@ dk@@ Version@@ , android.renderscript.@@ Render@@ Scrip@@ t.@@ Context@@ Type ct@@ , int flag@@ s) { if (!@@ (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ s@@ In@@ itializ@@ ed@@ )) { android.util.Log.e@@ (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ LOG@@ _@@ TAG, "@@ Render@@ Scrip@@ t.@@ create@@ () cal@@ le@@ d wh@@ e@@ n dis@@ able@@ d@@ ; s@@ om@@ e@@ on@@ e is li@@ k@@ el@@ y to c@@ r@@ as@@ h@@ "); return null@@ ; } if ((@@ flag@@ s & (@@ ~@@ ((@@ (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ C@@ RE@@ A@@ TE_@@ F@@ LA@@ G@@ _@@ LO@@ W@@ _@@ LA@@ TE@@ N@@ C@@ Y@@ ) | (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ C@@ RE@@ A@@ TE_@@ F@@ LA@@ G@@ _@@ LO@@ W@@ _P@@ O@@ W@@ ER@@ )) | (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ C@@ RE@@ A@@ TE_@@ F@@ LA@@ G@@ _@@ W@@ A@@ I@@ T_@@ F@@ OR@@ _@@ AT@@ TA@@ CH@@ )@@ ))) != 0) { throw new android.renderscript.RS@@ Illegal@@ Argument@@ Exception("@@ In@@ va@@ li@@ d flag@@ s p@@ ass@@ ed.@@ "); } android.renderscript.@@ Render@@ Scrip@@ t r@@ s = new android.renderscript.@@ RenderScript@@ (@@ ct@@ x@@ ); rs.@@ m@@ De@@ v = rs.@@ n@@ Device@@ Create@@ (); rs.@@ m@@ Context = rs.@@ n@@ Context@@ Create@@ (r@@ s.@@ m@@ De@@ v@@ , flag@@ s, s@@ dk@@ Version@@ , ct.@@ m@@ ID@@ ); rs.@@ m@@ Context@@ Type = ct@@ ; rs.@@ m@@ Context@@ Flag@@ s = flag@@ s; rs.@@ m@@ Context@@ Sdk@@ Ver@@ sion = s@@ dk@@ Version@@ ; if ((@@ rs.@@ m@@ Context@@ ) == 0) { throw new android.renderscript.RS@@ D@@ ri@@ ver@@ Exception("@@ Faile@@ d to cre@@ ate R@@ S con@@ text.@@ "); } final java.lang.String C@@ AC@@ H@@ E_@@ P@@ AT@@ H = "@@ com.android.@@ renderscript.@@ c@@ ach@@ e@@ "; java.io.File f = new java.io.File@@ (@@ RenderScript@@ Cach@@ e@@ Dir@@ .m@@ Cach@@ e@@ Dir@@ , C@@ AC@@ H@@ E_@@ P@@ A@@ TH@@ ); android.renderscript.@@ Render@@ Scrip@@ t.@@ mC@@ ach@@ e@@ P@@ ath = f@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ (); f@@ .m@@ k@@ d@@ ir@@ s(); rs.@@ n@@ Context@@ Set@@ Cach@@ e@@ Dir@@ (android.@@ renderscript.@@ Render@@ Scrip@@ t.@@ mC@@ ach@@ e@@ Path@@ ); rs.@@ m@@ Message@@ Th@@ re@@ ad = new android.renderscript.@@ Render@@ Scrip@@ t.@@ Message@@ Thread@@ (r@@ s); rs.@@ m@@ Message@@ Thread@@ .@@ start@@ (); return r@@ s; }
private void check@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ Float2Float2@@ () { android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ Float2Float2@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ Float2Float2@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ ast@@ N@@ or@@ m@@ aliz@@ e@@ Float2Float2@@ : " + (e.toString()))); } }
public native void b@@ ind@@ (java.io.FileDescriptor f@@ d, java.net.@@ Socket@@ Address addres@@ s) throw@@ s android.system.@@ Errno@@ Exception, java.net.@@ Socket@@ Exception;
@java.lang.Override public void p@@ r@@ int@@ Op@@ t@@ (java.lang.String s) { }
public int get@@ Time@@ out@@ () { int de@@ la@@ y = get@@ Property@@ (com.android.jack.@@ server.@@ Config@@ File@@ .@@ TI@@ M@@ E_@@ O@@ U@@ T_@@ PRO@@ P@@ ER@@ TY@@ , java.lang.Integ@@ er.@@ value@@ Of@@ (@@ 7@@ 2@@ 00@@ ), new com.android.sched.util.@@ cod@@ ec@@ .@@ Int@@ Co@@ dec@@ ()@@ )@@ .@@ int@@ Value@@ (); if ((@@ de@@ la@@ y < 0) && (@@ de@@ la@@ y != (com.android.jack.@@ server.@@ Config@@ File@@ .@@ TI@@ M@@ E_@@ D@@ IS@@ ABL@@ ED@@ _@@ VAL@@ UE@@ ))) { com.android.jack.@@ server.@@ Config@@ File@@ .@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ W@@ AR@@ N@@ ING@@ , ((("@@ In@@ va@@ li@@ d con@@ fig valu@@ e for " + (com.android.jack.@@ server.@@ Config@@ File@@ .@@ TI@@ M@@ E_@@ O@@ U@@ T_@@ PRO@@ P@@ ER@@ TY@@ )) + "@@ : ") + de@@ lay@@ )); de@@ la@@ y = com.android.jack.@@ server.@@ Config@@ File@@ .@@ TI@@ M@@ E_@@ D@@ IS@@ ABL@@ ED@@ _@@ VAL@@ UE@@ ; } return de@@ lay@@ ; }
public void test_@@ m@@ ulti@@ ple@@ Date@@ () throw@@ s java.text.@@ Par@@ se@@ Exception { java.util.@@ Local@@ e f@@ i = new java.util.@@ Loc@@ ale@@ ("@@ fi@@ "); assert@@ Equal@@ s("@@ tor@@ st@@ a@@ i@@ ", for@@ mat@@ Date@@ (@@ fi@@ , "@@ cc@@ cc@@ ")); assert@@ Equal@@ s("@@ tor@@ st@@ ain@@ ", for@@ mat@@ Date@@ (@@ fi@@ , "@@ E@@ E@@ E@@ ")); }
private void not@@ if@@ y@@ R@@ ou@@ te@@ Change@@ (java.lang.String action@@ , android.net.@@ R@@ ou@@ te@@ Info ro@@ ute@@ ) { invok@@ e@@ For@@ All@@ Ob@@ server@@ s(@@ ( o@@ ) -@@ > o@@ .@@ equal@@ s("@@ up@@ dat@@ ed@@ ")) { o@@ .@@ ro@@ ute@@ Up@@ dat@@ ed@@ (@@ ro@@ ute@@ ); } else { o@@ .@@ ro@@ ute@@ Remo@@ v@@ ed@@ (@@ ro@@ ute@@ ); } }
public void fix@@ up@@ Link@@ Properties@@ (android.net.@@ Link@@ Proper@@ ti@@ es old@@ L@@ p@@ ) { if ((@@ !@@ (m@@ Is@@ Run@@ n@@ ing@@ )) || ((m@@ Network@@ .@@ c@@ lat@@ d@@ ) == null@@ )) { return@@ ; } android.net.@@ Link@@ Proper@@ ti@@ es l@@ p = m@@ Network@@ .@@ lin@@ k@@ Properties@@ ; if ((@@ l@@ p == null@@ ) || (@@ l@@ p@@ .get@@ All@@ Interface@@ Nam@@ es@@ ().@@ contain@@ s@@ (m@@ Iface@@ ))) { return@@ ; } android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ connectivity.@@ N@@ at@@ 4@@ 6@@ 4@@ X@@ lat@@ .@@ TAG, ("@@ c@@ lat@@ d run@@ n@@ ing@@ , up@@ dat@@ ing N@@ A@@ I for " + (m@@ Iface@@ ))); for (android.net.@@ Link@@ Proper@@ ti@@ es st@@ ack@@ ed : old@@ L@@ p@@ .get@@ Stack@@ ed@@ Link@@ s@@ ()) { if (m@@ Iface@@ .@@ equals(@@ st@@ ack@@ ed@@ .get@@ Interface@@ Name@@ ())) { l@@ p.@@ add@@ Stack@@ ed@@ Link@@ (@@ st@@ ack@@ ed@@ ); return@@ ; } } }
public java.lang.@@ Boole@@ an call@@ (com.android.@@ dx.@@ dex.@@ file.@@ Class@@ De@@ f@@ I@@ te@@ m c@@ la@@ z@@ z@@ ) throw@@ s java.lang.Exception { if (c@@ la@@ z@@ z == null@@ ) { return true@@ ; } com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ add@@ Class@@ To@@ Dex@@ (@@ name@@ , c@@ la@@ z@@ ); com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ update@@ Status@@ (@@ true@@ ); if (com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ args.@@ m@@ ulti@@ Dex@@ ) { synchronized@@ (com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ dex@@ R@@ o@@ t@@ ation@@ Lock) { com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ max@@ Method@@ Id@@ s@@ In@@ Pro@@ ces@@ s -@@ = max@@ Method@@ Id@@ s@@ In@@ Class@@ ; com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ max@@ Field@@ Id@@ s@@ In@@ Pro@@ ces@@ s -@@ = max@@ Field@@ Id@@ s@@ In@@ Class@@ ; com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ dex@@ R@@ o@@ t@@ ation@@ Lock@@ .@@ not@@ if@@ y@@ All@@ (); } } return true@@ ; }
@java.lang.Override public com.google.g@@ d@@ t.@@ eclipse.@@ log@@ in@@ .@@ common.@@ V@@ er@@ if@@ ic@@ ation@@ Code@@ H@@ ol@@ der ob@@ tain@@ V@@ er@@ if@@ ic@@ ation@@ Code@@ From@@ Ex@@ ter@@ nal@@ User@@ Inter@@ action@@ (java.lang.String ti@@ t@@ le@@ ) { re@@ cei@@ ve@@ r = new com.google.gct.@@ log@@ in@@ .@@ Can@@ cel@@ l@@ able@@ Server@@ Receiver@@ (); java.lang.String re@@ di@@ re@@ ct@@ Ur@@ l@@ ; try { re@@ di@@ re@@ ct@@ Ur@@ l = re@@ cei@@ ver.@@ get@@ R@@ ed@@ ire@@ ct@@ U@@ ri@@ (); } catch (java.io.IOException e) { log@@ Error@@ And@@ Display@@ Di@@ alo@@ g@@ ((@@ ti@@ t@@ le == null ? "@@ G@@ oog@@ le Log@@ in@@ " : ti@@ t@@ le@@ ), e); return null@@ ; } com.google.@@ api.@@ c@@ li@@ ent.@@ au@@ th@@ .@@ o@@ au@@ th@@ 2.@@ A@@ u@@ th@@ or@@ iz@@ ation@@ Code@@ Request@@ Ur@@ l au@@ th@@ Code@@ Request@@ Ur@@ l = new com.google.@@ api.@@ c@@ li@@ ent.@@ au@@ th@@ .@@ o@@ au@@ th@@ 2.@@ A@@ u@@ th@@ or@@ iz@@ ation@@ Code@@ Request@@ Ur@@ l@@ (@@ com.google.@@ api.@@ c@@ li@@ ent.@@ goog@@ le@@ ap@@ is.@@ au@@ th@@ .@@ o@@ au@@ th@@ 2.@@ G@@ oog@@ le@@ O@@ A@@ u@@ th@@ Constants.@@ A@@ UT@@ H@@ OR@@ I@@ Z@@ A@@ TION@@ _S@@ ER@@ V@@ ER_@@ UR@@ L, c@@ lient@@ Info@@ .get@@ Id@@ ()@@ ).set@@ R@@ ed@@ ire@@ ct@@ U@@ ri@@ (re@@ di@@ re@@ ct@@ Ur@@ l@@ ).set@@ S@@ co@@ p@@ es(@@ com.google.gct.@@ log@@ in@@ .@@ O@@ A@@ u@@ th@@ S@@ co@@ pe@@ Reg@@ is@@ try@@ .get@@ S@@ co@@ p@@ es@@ ()); com@@ .@@ int@@ el@@ li@@ j.@@ ide.@@ B@@ row@@ ser@@ Util.@@ b@@ row@@ se@@ (@@ au@@ th@@ Code@@ Request@@ Ur@@ l.@@ build@@ ()); java.lang.String ve@@ r@@ if@@ ic@@ ation@@ Code@@ ; try { ve@@ r@@ if@@ ic@@ ation@@ Co@@ de = re@@ cei@@ ver.@@ wait@@ For@@ Code@@ (); } catch (java.io.IOException e) { log@@ Error@@ And@@ Display@@ Di@@ alo@@ g@@ ((@@ ti@@ t@@ le == null ? "@@ G@@ oog@@ le Log@@ in@@ " : ti@@ t@@ le@@ ), e); return null@@ ; } return new com.google.g@@ d@@ t.@@ eclipse.@@ log@@ in@@ .@@ common.@@ V@@ er@@ if@@ ic@@ ation@@ Code@@ H@@ ol@@ der@@ (@@ ve@@ r@@ if@@ ic@@ ation@@ Code@@ , re@@ di@@ re@@ ct@@ Ur@@ l@@ ); }
public boolean dis@@ able@@ (java.lang.String package@@ Name, boolean per@@ si@@ st@@ ) throw@@ s android.os.@@ RemoteException { final int call@@ ing@@ U@@ id = android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (); final boolean call@@ er@@ S@@ ys@@ te@@ m = (android.os.@@ User@@ Handle@@ .get@@ App@@ Id@@ (c@@ all@@ ing@@ U@@ id@@ )) == (@@ S@@ Y@@ S@@ TE@@ M@@ _@@ U@@ ID@@ ); if (!@@ call@@ er@@ System@@ ) { if (!(@@ check@@ I@@ f@@ Call@@ er@@ Is@@ For@@ e@@ gro@@ und@@ User@@ ())) { android.util.@@ S@@ log.@@ w@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ dis@@ able@@ ()@@ : not al@@ low@@ ed for n@@ on@@ -@@ ac@@ ti@@ v@@ e an@@ d n@@ on s@@ ys@@ te@@ m user@@ "); return false@@ ; } m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H AD@@ M@@ I@@ N per@@ mission@@ "); if (((@@ is@@ Enabled@@ ()) && (m@@ Permission@@ Re@@ view@@ Requ@@ ire@@ d@@ )) && (@@ start@@ Con@@ s@@ ent@@ U@@ i@@ I@@ f@@ Ne@@ ed@@ ed@@ ed@@ (@@ package@@ Name, call@@ ing@@ U@@ id, Bluetooth@@ Adap@@ ter.@@ AC@@ TION@@ _RE@@ Q@@ UE@@ ST_@@ D@@ IS@@ ABL@@ E@@ ))) { return false@@ ; } } if (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ DBG) { android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, ((("@@ dis@@ able@@ ()@@ : m@@ B@@ luetoo@@ th = " + (m@@ Bluetooth@@ )) + " m@@ B@@ ind@@ ing = ") + (m@@ B@@ ind@@ ing@@ ))); } synchronized@@ (m@@ Receiver@@ ) { if (@@ per@@ si@@ st@@ ) { per@@ si@@ st@@ Bluetooth@@ Setting@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ O@@ F@@ F@@ ); } m@@ Enable@@ Ex@@ ter@@ n@@ al = false@@ ; send@@ Dis@@ able@@ M@@ s@@ g@@ (@@ package@@ Name); } return true@@ ; }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); res@@ et@@ (m@@ Context@@ ); res@@ et@@ (m@@ C@@ S@@ ); res@@ et@@ (m@@ Log@@ ); when(m@@ Log@@ .@@ for@@ Sub@@ Comp@@ on@@ ent@@ (@@ any@@ String@@ ()@@ )).@@ thenReturn@@ (m@@ Log@@ ); mC@@ M = s@@ py@@ (@@ new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ Test.@@ Test@@ Connectivity@@ Manager@@ (m@@ Contex@@ t, mC@@ S@@ )); m@@ S@@ M = new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ Test.@@ Test@@ StateMach@@ ine@@ (); m@@ UN@@ M = new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ ((@@ (android.net.@@ Connectivity@@ Manager@@ ) (m@@ C@@ M@@ )), m@@ S@@ M@@ , m@@ Log@@ , com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ Test.@@ EVEN@@ T_@@ UN@@ M@@ _@@ U@@ P@@ DA@@ TE@@ , com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ Test.@@ EVEN@@ T_@@ P@@ F@@ X_@@ U@@ P@@ DA@@ TE@@ ); }
java.lang.String pro@@ file@@ File@@ () default "@@ "; java.lang.String pro@@ file@@ File@@ () default "@@ "; java.lang.String pro@@ file@@ File@@ File@@ File@@ Name = pro@@ file@@ File@@ File@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ (); if ((@@ pro@@ file@@ File@@ File@@ File@@ File@@ File@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ /@@ ")) { return "@@ "; } java.lang.String pro@@ file@@ File@@ () = null@@ ; java.lang.String pro@@ file@@ File@@ ; if ((@@ pro@@ file@@ File@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ .@@ pro@@ file@@ File@@ "@@ ))) { pro@@ file@@ File@@ P@@ ath = pro@@ file@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ (); return pro@@ file@@ File@@ ; }
public void st@@ op@@ O@@ ff@@ load@@ Control@@ () { if ((m@@ O@@ ff@@ load@@ Control@@ ) != null@@ ) { try { m@@ O@@ ff@@ load@@ Contro@@ l.@@ st@@ op@@ O@@ ff@@ load@@ (@@ boolean su@@ ccess@@ ,@@ java.lang.String er@@ r@@ M@@ s@@ g@@ ) -@@ > { if (!@@ su@@ ccess@@ ) m@@ Log.@@ e@@ (("@@ st@@ op@@ O@@ ff@@ lo@@ ad fa@@ ile@@ d@@ : " + er@@ r@@ M@@ s@@ g@@ )); }); } catch (android.os.RemoteException e) { m@@ Log.@@ e@@ (("@@ fa@@ ile@@ d to st@@ op@@ O@@ ff@@ load@@ : " + e@@ )); } } m@@ O@@ ff@@ load@@ Contro@@ l = null@@ ; m@@ Control@@ Call@@ b@@ ac@@ k = null@@ ; }
@org.junit.Test @@@ java.lang.Runtime@@ (f@@ ro@@ m = Runtime@@ Version@@ .@@ N@@ ) public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 00@@ 4@@ () throw@@ s java.lang.Exception { run@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 00@@ 4@@ ); }
@org.junit.Test public void test@@ 00@@ 2@@ c@@ () throw@@ s java.lang.Exception { java.io.File jack@@ Output@@ ; java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); jack@@ Out@@ put = run@@ Test@@ 00@@ 2@@ (@@ false@@ , "@@ ke@@ e@@ p@@ -@@ fi@@ r@@ st@@ ", er@@ r@@ Out@@ , false@@ , false@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y li@@ b = null@@ ; try { li@@ b = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Input@@ Jack@@ Library@@ From@@ Dir@@ (@@ jack@@ Output@@ ); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 1@@ _P@@ A@@ TH@@ , "@@ Res@@ 1@@ "); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 2@@ _P@@ A@@ TH@@ , "@@ Res@@ 2@@ "); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 3@@ _P@@ A@@ TH@@ , "@@ Res@@ 3@@ "); } final@@ l@@ y { if (@@ li@@ b != null@@ ) { lib.@@ close(); } } junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ O@@ u@@ t.@@ toString@@ ().@@ isEmpty@@ ()); }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ ja@@ v@@ a@@ do@@ c@@ ") public void vi@@ si@@ t@@ Resource@@ Reference@@ (@@ @com.android.annotations.NonNull com.android.tools.@@ l@@ int@@ .@@ d@@ et@@ ec@@ tor.@@ api.@@ Java@@ Context contex@@ t, @com.android.annotations.@@ Null@@ able lo@@ m@@ bo@@ k.@@ ast.@@ A@@ st@@ Visi@@ tor vi@@ si@@ tor@@ , @com.android.annotations.NonNull com.android.tools.@@ l@@ int@@ .@@ d@@ et@@ ec@@ tor.@@ api.@@ No@@ de no@@ de@@ , @com.android.annotations.NonNull java.lang.String type@@ , @com.android.annotations.NonNull java.lang.String name@@ , boolean is@@ F@@ ramework@@ ) { }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.util.@@ Object@@ s.@@ has@@ h@@ Code@@ (s@@ pe@@ c@@ if@@ ier@@ ); }
@org.junit.Test public void build@@ Capabilities@@ _@@ w@@ p@@ a@@ 1@@ Element@@ () { android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult.@@ I@@ n@@ for@@ m@@ ation@@ Elem@@ ent i@@ e = new android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult.@@ I@@ n@@ for@@ m@@ ation@@ Element@@ (); i@@ e.@@ id = android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult.@@ I@@ n@@ for@@ m@@ ation@@ Element.@@ E@@ ID@@ _@@ V@@ S@@ A@@ ; i@@ e@@ .@@ byte@@ s = new byte@@ []{ (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (@@ 8@@ 0@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 2@@ )), (@@ (@@ byte@@ ) (1@@ )), (@@ (@@ byte@@ ) (1@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (@@ 8@@ 0@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 2@@ )), (@@ (@@ byte@@ ) (@@ 2@@ )), (@@ (@@ byte@@ ) (@@ 2@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (@@ 8@@ 0@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 2@@ )), (@@ (@@ byte@@ ) (@@ 4@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (@@ 8@@ 0@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 2@@ )), (@@ (@@ byte@@ ) (@@ 2@@ )), (@@ (@@ byte@@ ) (1@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (@@ 8@@ 0@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 2@@ )), (@@ (@@ byte@@ ) (@@ 2@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )) }; android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult.@@ I@@ n@@ for@@ m@@ ation@@ Element@@ [] i@@ es = new android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult.@@ I@@ n@@ for@@ m@@ ation@@ Element@@ []{ i@@ e }; java.util.@@ Bit@@ Se@@ t be@@ a@@ con@@ C@@ a@@ p = new java.util.@@ Bit@@ Set@@ (1@@ 6@@ ); be@@ a@@ con@@ Cap@@ .set@@ (@@ 4@@ ); java.lang.String result = I@@ n@@ for@@ m@@ ation@@ Element@@ Util.@@ Capabili@@ ties.@@ build@@ Capabilities@@ (i@@ es@@ , be@@ a@@ con@@ Cap@@ ); assert@@ Equal@@ s("@@ [@@ W@@ P@@ A@@ -@@ G@@ RO@@ U@@ P@@ _@@ T@@ K@@ IP@@ -@@ P@@ A@@ I@@ R@@ W@@ IS@@ E_@@ C@@ C@@ M@@ P@@ +@@ I@@ R@@ W@@ IS@@ E_@@ T@@ K@@ IP@@ -@@ P@@ S@@ K@@ ]@@ ", result@@ ); }
protected void set@@ D@@ ns@@ For@@ w@@ ard@@ er@@ s@@ (@@ final android.net.@@ Net@@ wor@@ k network@@ , final android.net.@@ Link@@ Proper@@ ti@@ es l@@ p@@ ) { java.lang.String[] d@@ ns@@ Server@@ s = m@@ Config@@ .@@ default@@ IP@@ v@@ 4@@ D@@ N@@ S@@ ; final java.util.Collection@@ <@@ java.net.Inet@@ Address@@ > d@@ n@@ se@@ s = l@@ p@@ .get@@ D@@ ns@@ Server@@ s(); if ((@@ d@@ n@@ se@@ s != null@@ ) && (!(@@ d@@ ns@@ es.@@ isEmpty@@ ()))) { d@@ ns@@ Server@@ s = android.net.Network@@ Utils.@@ m@@ ake@@ String@@ s(@@ d@@ ns@@ es@@ ); } try { m@@ N@@ M@@ Service.@@ set@@ D@@ ns@@ For@@ w@@ ard@@ er@@ s(@@ network@@ , d@@ ns@@ Server@@ s); m@@ Log.@@ log@@ (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ SE@@ T D@@ N@@ S for@@ w@@ ard@@ er@@ s@@ : network@@ =@@ %@@ s d@@ ns@@ Server@@ s@@ =@@ %@@ s", network@@ , java.util.Arrays.@@ toString@@ (d@@ ns@@ Server@@ s@@ ))); } catch (java.lang.Exception e) { m@@ Log.@@ e@@ (("@@ set@@ t@@ ing D@@ N@@ S for@@ w@@ ard@@ er@@ s fa@@ ile@@ d, " + e@@ )); tr@@ an@@ si@@ tion@@ To@@ (m@@ Set@@ D@@ ns@@ For@@ w@@ ard@@ er@@ s@@ Error@@ State@@ ); } }
public com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ File@@ Handle@@ r get@@ Icc@@ File@@ Handler@@ (@@ int f@@ am@@ il@@ y@@ ) { synchronized@@ (m@@ Lock) { if ((m@@ Uicc@@ Card@@ ) != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Uicc@@ Card@@ Appli@@ c@@ ation ap@@ p = m@@ Uicc@@ Card@@ .get@@ Application@@ (f@@ am@@ il@@ y@@ ); if (@@ ap@@ p != null@@ ) { return app@@ .get@@ Icc@@ File@@ Handler@@ (); } } return null@@ ; } }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ S@@ pe@@ c g@@ ener@@ ate@@ B@@ o@@ x@@ L@@ amb@@ d@@ a@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Type bo@@ x@@ Type, @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Source@@ Posi@@ tion source@@ Posi@@ tion@@ , @javax.annotation.@@ Check@@ For@@ Null com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ S@@ pe@@ c d@@ est@@ Reg@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ S@@ pe@@ c value@@ To@@ B@@ o@@ x@@ , boolean u@@ se@@ T@@ mp@@ , boolean ex@@ tra@@ In@@ st@@ ) { assert (!@@ u@@ se@@ T@@ mp@@ ) || (d@@ est@@ Re@@ g == null@@ ); com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ S@@ pe@@ c t@@ mp@@ B@@ o@@ x@@ ed@@ Re@@ g = (@@ u@@ se@@ T@@ mp@@ ) ? ro@@ p@@ Re@@ g.@@ get@@ Or@@ Create@@ T@@ mp@@ Reg@@ ister@@ (@@ bo@@ x@@ Typ@@ e) : d@@ est@@ Reg@@ ; assert t@@ mp@@ B@@ o@@ x@@ ed@@ Re@@ g != null@@ ; com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ Spec@@ Lis@@ t s@@ ources@@ B@@ o@@ x = com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ Spec@@ List.@@ m@@ ake@@ (@@ value@@ To@@ B@@ o@@ x@@ ); com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ In@@ s@@ n in@@ s@@ t = new com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ P@@ l@@ ain@@ C@@ st@@ In@@ s@@ n@@ (com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ R@@ op@@ s.@@ op@@ B@@ o@@ x@@ L@@ amb@@ d@@ a@@ (@@ value@@ To@@ B@@ o@@ x@@ , s@@ ources@@ B@@ o@@ x@@ ), source@@ Posi@@ tion@@ , t@@ mp@@ B@@ o@@ x@@ ed@@ Reg@@ , s@@ ources@@ B@@ o@@ x@@ , com.android.jack.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Type@@ .@@ int@@ er@@ n@@ (com.android.jack.@@ back@@ end@@ .@@ dex.@@ ro@@ p.@@ R@@ op@@ Helper.@@ con@@ ver@@ t@@ Type@@ To@@ D@@ x@@ (@@ bo@@ x@@ Type@@ ))); if (@@ ex@@ tra@@ In@@ st@@ ) { add@@ Extra@@ In@@ stru@@ ction@@ (in@@ st@@ ); } else { add@@ In@@ stru@@ ction@@ (in@@ st@@ ); } return t@@ mp@@ B@@ o@@ x@@ ed@@ Reg@@ ; }
public void test_@@ parse@@ _@@ D_@@ d@@ d@@ _@@ y@@ y@@ y@@ y@@ _M@@ M@@ M@@ M@@ () throw@@ s java.lang.Exception { org.apache.harmony.@@ tests.@@ java.text.@@ Sim@@ ple@@ Date@@ Format@@ Test.@@ check@@ P@@ attern@@ On@@ Fi@@ x@@ ed@@ Date@@ ("@@ D d@@ d y@@ y@@ y@@ y M@@ M@@ M@@ ", "@@ 7@@ 0 1@@ 1 2@@ 00@@ 2 M@@ arch@@ ", "@@ 2@@ 4@@ 0 1@@ 1 2@@ 00@@ 2 M@@ arch@@ "); }
@java.lang.Override public boolean equals(@@ java.lang.Object o@@ th@@ er@@ Object@@ ) { if (o@@ th@@ er@@ Ob@@ ject instanceof com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value@@ ) { com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value o@@ th@@ er = ((@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value@@ ) (o@@ th@@ er@@ Object@@ )); return ((((@@ (@@ nam@@ e.@@ equals(@@ o@@ th@@ er.@@ name@@ )) && (@@ typ@@ e.@@ equals(@@ o@@ th@@ er.@@ type@@ ))) && (java.util.@@ Object@@ s.@@ equals(@@ current@@ , o@@ th@@ er.@@ current@@ ))) && (java.util.@@ Object@@ s.@@ equals(@@ b@@ as@@ el@@ ine@@ , o@@ th@@ er.@@ b@@ as@@ el@@ ine@@ ))) && (java.util.@@ Object@@ s.@@ equals(@@ add@@ ed@@ , o@@ th@@ er.@@ add@@ ed@@ ))) && (java.util.@@ Object@@ s.@@ equals(@@ de@@ let@@ ed@@ , o@@ th@@ er.@@ de@@ let@@ ed@@ )); } return false@@ ; }
@org.junit.Test public void ret@@ ain@@ ed@@ Size@@ () throw@@ s java.io.IOException { com.android.ahat.@@ Test@@ D@@ um@@ p dum@@ p = com.android.ahat.@@ Test@@ D@@ um@@ p@@ .get@@ Test@@ D@@ um@@ p@@ (); com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ In@@ stan@@ ce an@@ Ob@@ ject = dum@@ p@@ .get@@ D@@ um@@ p@@ ed@@ A@@ hat@@ Instance@@ ("@@ an@@ Object@@ "); com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ S@@ n@@ ap@@ sho@@ t s@@ n@@ ap@@ sho@@ t = dum@@ p@@ .get@@ A@@ hat@@ S@@ n@@ ap@@ sho@@ t@@ (); com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Siz@@ e siz@@ e = an@@ Ob@@ jec@@ t.get@@ Size@@ (); assert@@ Equal@@ s(@@ size@@ , an@@ Ob@@ jec@@ t.get@@ To@@ t@@ al@@ R@@ et@@ ain@@ ed@@ Size@@ ()); assert@@ Equal@@ s(@@ size@@ , an@@ Ob@@ jec@@ t.get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ an@@ Ob@@ jec@@ t.get@@ He@@ ap@@ ())); for (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ He@@ a@@ p he@@ a@@ p : s@@ n@@ ap@@ sho@@ t.get@@ He@@ ap@@ s@@ ()) { if (!(@@ he@@ ap.@@ equals(@@ an@@ Ob@@ jec@@ t.get@@ He@@ ap@@ ()))) { assert@@ Equal@@ s(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ F@@ or he@@ a@@ p '@@ %@@ s@@ '@@ ", he@@ ap@@ .getName@@ ()@@ ), new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Size@@ (), an@@ Ob@@ jec@@ t.get@@ R@@ et@@ ain@@ ed@@ Size@@ (@@ he@@ ap@@ )); } } }
private void res@@ et@@ Store@@ Data@@ (@@ boolean sh@@ ar@@ e@@ Data@@ ) { for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Config@@ Stor@@ e.@@ Store@@ Data@@ Interface@@ > e@@ n@@ try : m@@ Store@@ Data@@ List.@@ e@@ n@@ try@@ Set@@ ()) { e@@ n@@ try@@ .get@@ Value@@ ().@@ res@@ et@@ Data@@ (s@@ har@@ e@@ Data@@ ); } }
@java.lang.Override @com.android.annotations.NonNull public java.util.List<@@ java.io.File@@ > get@@ Re@@ positor@@ ies@@ () { java.util.List<@@ java.io.File@@ > repositor@@ i@@ es = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (); java.io.File android@@ Re@@ p@@ o = new java.io.File@@ (m@@ Sdk@@ Location@@ , ((((@@ (com.android.@@ Sdk@@ Constants.@@ F@@ D_@@ EX@@ TR@@ A@@ S@@ ) + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + "@@ android@@ ") + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + (com.android.@@ Sdk@@ Constants.@@ F@@ D@@ _M@@ 2@@ _RE@@ P@@ O@@ SI@@ T@@ OR@@ Y@@ ))); if (@@ android@@ Re@@ po@@ .is@@ Directory@@ ()) { repositor@@ i@@ es.@@ add(@@ android@@ Re@@ po@@ ); } java.io.File goog@@ le@@ Re@@ p@@ o = new java.io.File@@ (m@@ Sdk@@ Location@@ , ((((@@ (com.android.@@ Sdk@@ Constants.@@ F@@ D_@@ EX@@ TR@@ A@@ S@@ ) + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + "@@ goog@@ le@@ ") + (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) + (com.android.@@ Sdk@@ Constants.@@ F@@ D@@ _M@@ 2@@ _RE@@ P@@ O@@ SI@@ T@@ OR@@ Y@@ ))); if (@@ goog@@ le@@ Re@@ po@@ .is@@ Directory@@ ()) { repositor@@ i@@ es.@@ add(@@ goog@@ le@@ Re@@ po@@ ); } return repositor@@ ies@@ ; }
@java.lang.Override public void run@@ () { if ((m@@ Tra@@ ce@@ File@@ Wri@@ ter@@ ) == null@@ ) { return@@ ; } while (!(m@@ Is@@ Can@@ ce@@ lle@@ d@@ )) { final java.lang.String f@@ rame@@ Coun@@ t = java.lang.Integ@@ er.@@ toString@@ (m@@ Tra@@ ce@@ File@@ Wri@@ t@@ er.get@@ Current@@ F@@ rame@@ Count@@ ()); do@@ ub@@ le file@@ Siz@@ e = m@@ Tra@@ ce@@ File@@ Wri@@ t@@ er.get@@ Current@@ File@@ Size@@ (); file@@ Siz@@ e /@@ = 10@@ 2@@ 4 * 10@@ 2@@ 4@@ ; final java.lang.String f@@ rame@@ Siz@@ e = com.android.ide.@@ eclipse.@@ g@@ l@@ tra@@ ce.@@ G@@ L@@ Tra@@ ce@@ Colle@@ ctor@@ Di@@ alo@@ g.@@ SIZ@@ E_@@ F@@ OR@@ MA@@ T@@ TER@@ .@@ for@@ mat@@ (file@@ Siz@@ e); org.eclipse.swt.@@ widget@@ s.@@ Display@@ .get@@ Default@@ ().@@ s@@ ync@@ Ex@@ ec@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { if (m@@ F@@ ram@@ es@@ Colle@@ c@@ ted@@ L@@ ab@@ e@@ l.@@ is@@ Dis@@ po@@ sed@@ ()) { return@@ ; } m@@ F@@ ram@@ es@@ Colle@@ c@@ ted@@ L@@ ab@@ e@@ l.@@ set@@ Text@@ (f@@ rame@@ Count@@ ); m@@ Tra@@ ce@@ File@@ Size@@ L@@ ab@@ e@@ l.@@ set@@ Text@@ (f@@ rame@@ Siz@@ e); m@@ F@@ ram@@ es@@ Colle@@ c@@ ted@@ L@@ ab@@ e@@ l.@@ pack@@ (); m@@ Tra@@ ce@@ File@@ Size@@ L@@ ab@@ e@@ l.@@ pack@@ (); } }); try { java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (com.android.ide.@@ eclipse.@@ g@@ l@@ tra@@ ce.@@ G@@ L@@ Tra@@ ce@@ Colle@@ ctor@@ Di@@ alo@@ g.@@ Status@@ Ref@@ res@@ h@@ Task@@ .@@ RE@@ F@@ RE@@ S@@ H@@ _@@ IN@@ TER@@ VAL@@ ); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { return@@ ; } }
public long get@@ Down@@ load@@ Size@@ () { return m@@ Down@@ load@@ Size@@ ; }
private static int count@@ Do@@ main@@ Name@@ L@@ ab@@ el@@ s@@ Ex@@ c@@ lu@@ d@@ ing@@ Root@@ (java.lang.String ho@@ st@@ name@@ ) { int result = 1; int ho@@ st@@ name@@ L@@ eng@@ th = ho@@ st@@ nam@@ e.@@ length@@ (); int de@@ li@@ m@@ i@@ ter@@ In@@ dex = ho@@ st@@ nam@@ e.@@ index@@ Of@@ (@@ '@@ .@@ '@@ ); while ((@@ de@@ li@@ m@@ i@@ ter@@ In@@ dex != (-1@@ )) && (@@ de@@ li@@ m@@ i@@ ter@@ In@@ dex != (@@ ho@@ st@@ name@@ L@@ eng@@ th - 1@@ ))) { result@@ ++@@ ; de@@ li@@ m@@ i@@ ter@@ In@@ dex = ho@@ st@@ nam@@ e.@@ index@@ Of@@ (@@ '@@ .@@ '@@ , (@@ de@@ li@@ m@@ i@@ ter@@ In@@ dex + 1@@ )); } return result@@ ; }
@javax.annotation.@@ N@@ on@@ null protected com.android.jack.ir.ast.J@@ Pack@@ age get@@ Package@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String package@@ Name@@ ) throw@@ s com.android.jack.ir.ast.J@@ Package@@ Loo@@ k@@ up@@ Exception { synchronized@@ (@@ package@@ s) { com.android.jack.ir.ast.J@@ Pack@@ age fo@@ un@@ d = package@@ s.get@@ (@@ package@@ Name); if (@@ fo@@ un@@ d == null@@ ) { assert com.android.jack.@@ util.@@ Nam@@ ing@@ Tools.@@ is@@ Package@@ Bin@@ ary@@ Name@@ (@@ package@@ Name); int se@@ par@@ ator@@ In@@ dex = package@@ Nam@@ e.@@ las@@ t@@ Index@@ Of@@ (com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Loo@@ k@@ up@@ .@@ P@@ AC@@ K@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); com.android.jack.ir.ast.J@@ Pack@@ age parent@@ ; java.lang.String si@@ mp@@ le@@ Package@@ Name@@ ; if (@@ se@@ par@@ ator@@ In@@ dex == (-1@@ )) { par@@ ent = to@@ p@@ Level@@ Package@@ ; si@@ mp@@ le@@ Package@@ Name = package@@ Name@@ ; } else { par@@ ent = get@@ Package@@ (@@ package@@ Nam@@ e.@@ sub@@ string@@ (@@ 0, se@@ par@@ ator@@ Index@@ )); si@@ mp@@ le@@ Package@@ Name = package@@ Nam@@ e.@@ sub@@ string@@ ((@@ se@@ par@@ ator@@ In@@ dex + 1@@ )); } if (is@@ P@@ h@@ an@@ to@@ m@@ ) { fo@@ un@@ d = par@@ ent.get@@ Or@@ Create@@ Sub@@ Package@@ (@@ si@@ mp@@ le@@ Package@@ Name); } else { fo@@ un@@ d = par@@ ent.get@@ Sub@@ Package@@ (@@ si@@ mp@@ le@@ Package@@ Name); } package@@ s.@@ put@@ (@@ package@@ Name, fo@@ und@@ ); } return fo@@ und@@ ; } }
public static android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est.@@ Builder f@@ rom@@ Down@@ load@@ Request@@ (android.@@ telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est o@@ th@@ er@@ ) { android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est.@@ Builder result = new android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est.@@ Builder@@ (o@@ th@@ er.@@ source@@ U@@ ri@@ ).set@@ Service@@ Id@@ (o@@ th@@ er.@@ file@@ Service@@ Id@@ ).set@@ Sub@@ s@@ cription@@ Id@@ (o@@ th@@ er.@@ sub@@ s@@ cription@@ Id); result.@@ app@@ Int@@ ent = o@@ th@@ er.@@ ser@@ i@@ aliz@@ ed@@ Result@@ Intent@@ For@@ App@@ ; return result@@ ; }
public boolean p@@ 2@@ p@@ Gro@@ up@@ Remo@@ ve@@ (java.lang.String if@@ a@@ ce@@ ) { if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ if@@ a@@ ce@@ )) return false@@ ; return m@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ gro@@ up@@ Remo@@ ve@@ (@@ if@@ a@@ ce@@ ); }
@java.lang.Override public void vi@@ si@@ t@@ (com.android.jack.@@ dx.@@ io.@@ in@@ stru@@ ction@@ s.@@ De@@ cod@@ ed@@ In@@ stru@@ ction@@ [] all@@ , com.android.jack.@@ dx.@@ io.@@ in@@ stru@@ ction@@ s.@@ De@@ cod@@ ed@@ In@@ stru@@ c@@ tion de@@ cod@@ ed@@ In@@ st@@ ) { re@@ m@@ app@@ ed@@ In@@ stru@@ ction@@ s@@ [@@ ((@@ re@@ m@@ app@@ ing@@ Index@@ )@@ ++@@ )@@ ] = de@@ cod@@ ed@@ In@@ st.@@ w@@ ith@@ Index@@ (c@@ st@@ Index@@ Map@@ .get@@ Re@@ m@@ app@@ ed@@ C@@ st@@ Base@@ Method@@ Ref@@ Index@@ (file@@ , de@@ cod@@ ed@@ In@@ s@@ t.get@@ Index@@ ()@@ ), c@@ st@@ Index@@ Map@@ .get@@ Re@@ m@@ app@@ ed@@ C@@ st@@ Pro@@ to@@ type@@ Ref@@ Index@@ (file@@ , de@@ cod@@ ed@@ In@@ s@@ t.get@@ Sec@@ ond@@ Index@@ ())); }
private void load@@ Ur@@ l@@ () { final android.content.@@ Int@@ ent int@@ ent = get@@ Intent@@ (); if (@@ int@@ ent.@@ has@@ Extra@@ (@@ Int@@ ent.@@ EX@@ TR@@ A@@ _@@ TI@@ T@@ LE@@ )) { set@@ T@@ it@@ le@@ (@@ int@@ ent.get@@ String@@ Extra@@ (@@ Int@@ ent.@@ EX@@ TR@@ A@@ _@@ TI@@ T@@ LE@@ )); } m@@ W@@ eb@@ View@@ .@@ load@@ Ur@@ l@@ (@@ java.lang.String.@@ value@@ Of@@ (@@ int@@ ent.get@@ Data@@ ())); }
@org.junit.Test public void w@@ if@@ i@@ Not@@ Enabled@@ _@@ user@@ Dis@@ ab@@ l@@ es@@ W@@ if@@ i@@ Ne@@ ar@@ S@@ av@@ ed@@ Network@@ _@@ then@@ Remo@@ v@@ es@@ Network@@ _@@ then@@ St@@ ay@@ s() { when(m@@ W@@ if@@ i@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ s@@ ()).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _@@ WI@@ FI@@ _C@@ ON@@ FI@@ G@@ UR@@ A@@ TION@@ ), com.google.@@ android.@@ colle@@ ct.@@ List@@ s.@@ <@@ android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ >@@ new@@ Array@@ List@@ ()); when(m@@ W@@ if@@ i@@ Manager.get@@ Scan@@ Results@@ ()).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _S@@ C@@ AN@@ _RE@@ S@@ UL@@ T@@ )).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s.@@ <@@ android.net.@@ w@@ if@@ i.@@ Scan@@ Result@@ >@@ new@@ Array@@ List@@ ()).@@ thenReturn@@ (@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ W@@ ake@@ up@@ Control@@ ler@@ Test.@@ S@@ AV@@ ED@@ _S@@ C@@ AN@@ _RE@@ S@@ UL@@ T@@ )); when(m@@ W@@ if@@ i@@ W@@ ake@@ up@@ Network@@ Sele@@ ctor@@ .@@ sele@@ ct@@ Network@@ (@@ any@@ Map@@ (), any@@ List@@ ()@@ )).@@ thenReturn@@ (@@ null@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ W@@ if@@ i@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _STA@@ TE_@@ EN@@ ABL@@ ED@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Config@@ ure@@ d@@ Network@@ s@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ W@@ if@@ i@@ State@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Contex@@ t, W@@ if@@ i@@ Manager.@@ WI@@ FI@@ _STA@@ TE_@@ D@@ IS@@ ABL@@ ED@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Config@@ ure@@ d@@ Network@@ s@@ Changed@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ Test@@ Util.@@ send@@ Scan@@ Results@@ A@@ va@@ il@@ able@@ (m@@ Broadcast@@ Receiver@@ , m@@ Context@@ ); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Manager@@ , ne@@ ver@@ ()@@ ).set@@ W@@ if@@ i@@ Enabled@@ (@@ true@@ ); }
public boolean f@@ lu@@ sh@@ () { synchronized@@ (m@@ Lock) { if (!(@@ check@@ Supplicant@@ P2p@@ Iface@@ And@@ Log@@ Fail@@ ure@@ ("@@ f@@ lu@@ sh@@ "@@ ))) return false@@ ; com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ <@@ java.lang.@@ Vo@@ id@@ > result = new com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ Supplicant@@ Result@@ ("@@ f@@ lu@@ sh@@ ()@@ "); try { result.@@ set@@ Result@@ (m@@ I@@ Supplicant@@ P2p@@ Iface@@ .@@ f@@ lu@@ sh@@ ()); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ TAG, ("@@ I@@ Supplicant@@ P2p@@ I@@ face excepti@@ on@@ : " + e@@ )); sup@@ plicant@@ Service@@ Di@@ ed@@ Handler@@ (); } return result.@@ is@@ Su@@ ccess@@ (); } }
private void check@@ Application@@ Exception@@ s(@@ android.@@ a@@ id@@ l.@@ tests.@@ I@@ Test@@ Ser@@ vice service@@ ) throw@@ s android.@@ a@@ id@@ l.@@ tests.@@ Test@@ Service@@ C@@ li@@ ent.@@ Test@@ Fail@@ Exception { m@@ Log.@@ log@@ ("@@ Check@@ ing app@@ lic@@ ation excepti@@ on@@ s.@@ .@@ "); for (@@ int i = -1@@ ; i < 2@@ ; ++@@ i@@ ) { try { service@@ .@@ Throw@@ Application@@ Exception@@ (i@@ ); } catch (android.os.RemoteException ex@@ ) { m@@ Log.@@ log@@ And@@ Throw@@ (("@@ Ser@@ vice th@@ re@@ w Remote@@ Exception@@ : " + (@@ ex@@ .@@ toString@@ ()))); } catch (android.os.@@ Application@@ S@@ pe@@ c@@ if@@ ic@@ Exception ex@@ ) { if ((@@ ex@@ .m@@ Error@@ Code@@ ) != i@@ ) { m@@ Log.@@ log@@ And@@ Throw@@ (("@@ Ser@@ vice th@@ re@@ w w@@ ron@@ g er@@ ror code@@ : " + i@@ )); } } m@@ Log.@@ log@@ ("@@ .@@ .@@ .@@ app@@ lic@@ ation excepti@@ on@@ s work@@ "); }
public void test_@@ read@@ L@@ Byte@@ Buffer@@ J@@ _@@ Posi@@ tion@@ _@@ As@@ _@@ Long@@ () throw@@ s java.lang.Exception { java.nio.Byte@@ Buff@@ er read@@ Buff@@ er = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (@@ org.apache.harmony.@@ tests.@@ java.nio.@@ channe@@ ls.@@ File@@ Channel@@ Test.@@ C@@ AP@@ AC@@ ITY@@ ); try { read@@ On@@ ly@@ File@@ Chan@@ ne@@ l.@@ read@@ (@@ read@@ Buffer@@ , java.lang.@@ Lon@@ g.@@ MA@@ X_@@ VAL@@ U@@ E); fail@@ (); } catch (java.io.IOException expected@@ ) { } }
private void read@@ G@@ f@@ x@@ Info@@ Dat@@ as@@ et@@ (@@ java.io.@@ Buffer@@ ed@@ Read@@ er b@@ r@@ ) throw@@ s java.io.IOException { update@@ B@@ ar@@ Ch@@ art@@ Data@@ Set@@ (com.android.@@ ddm@@ ui@@ lib.@@ S@@ ys@@ info@@ P@@ an@@ e@@ l.@@ Bu@@ g@@ Re@@ port@@ Par@@ ser.@@ parse@@ G@@ f@@ x@@ Info@@ (b@@ r@@ ), "@@ Render@@ ing tim@@ e p@@ er f@@ rame@@ "); }
public void test@@ Handle@@ As@@ Key@@ () { java.util.@@ Set@@ <@@ com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ > set = new java.util.@@ Hash@@ Set@@ <@@ com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ >(); com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Hand@@ le handle@@ 1 = new com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ (com.android.@@ tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ Test.@@ handle@@ Bytes@@ ); set@@ .@@ add(@@ handle@@ 1); assert@@ True@@ (@@ set@@ .@@ contain@@ s(@@ handle@@ 1@@ )); com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Hand@@ le handle@@ 2 = new com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ (com.android.@@ tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ Handle@@ Test.@@ handle@@ Bytes@@ ); set@@ .@@ add(@@ handle@@ 2@@ ); assert@@ True@@ (@@ set@@ .@@ contain@@ s(@@ handle@@ 2@@ )); assert@@ Equal@@ s(@@ set@@ .@@ size@@ (), 1); }
public native long l@@ se@@ e@@ k@@ (java.io.FileDescriptor f@@ d, long offset@@ , int when@@ ce@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@javax.annotation.@@ N@@ on@@ null private java.util.List<@@ java.lang.Integ@@ er@@ > read@@ Call@@ S@@ ite@@ Id@@ s() { if ((@@ t@@ able@@ Of@@ Content@@ s.@@ ap@@ i@@ Level@@ ) < (com.android.jack.@@ dx.@@ dex.@@ Dex@@ Format@@ .@@ AP@@ I@@ _@@ AN@@ D@@ RO@@ ID@@ _@@ O@@ )) { java.util.Collection@@ s.@@ e@@ mpty@@ List@@ (); } com.android.jack.@@ dx.@@ io.@@ Dex@@ Buff@@ er.@@ Sec@@ tion call@@ S@@ ite@@ Id@@ s = open@@ Inter@@ nal@@ (t@@ able@@ Of@@ Content@@ s.@@ call@@ S@@ ite@@ Id@@ s.@@ o@@ ff@@ ); java.lang.Integ@@ er@@ [] result = new java.lang.Integ@@ er@@ [@@ t@@ able@@ Of@@ Content@@ s.@@ call@@ S@@ ite@@ Id@@ s.@@ size@@ ]; for (@@ int i = 0; i < (t@@ able@@ Of@@ Content@@ s.@@ call@@ S@@ ite@@ Id@@ s.@@ siz@@ e); ++@@ i@@ ) { result@@ [i@@ ] = java.lang.Integ@@ er.@@ value@@ Of@@ (c@@ all@@ S@@ ite@@ Id@@ s.@@ read@@ Int@@ ()); } return java.util.Arrays.@@ as@@ List@@ (@@ result@@ ); }
public boolean is@@ Project@@ Th@@ em@@ e@@ () { java.lang.String th@@ em@@ e = m@@ Th@@ em@@ e@@ Com@@ bo@@ .get@@ Item@@ (m@@ Th@@ em@@ e@@ Com@@ bo@@ .get@@ Selection@@ Index@@ ()); return m@@ Project@@ Th@@ em@@ es.@@ contain@@ s(@@ th@@ em@@ e); }
@org.junit.Test public void test@@ Socket@@ Resource@@ Track@@ er@@ Li@@ m@@ it@@ ation@@ () throw@@ s java.lang.Exception { java.util.List<@@ IpSec@@ U@@ dp@@ En@@ cap@@ Response@@ > open@@ U@@ dp@@ En@@ cap@@ Socket@@ s = new java.util.ArrayList<@@ IpSec@@ U@@ dp@@ En@@ cap@@ Response@@ >(); for (@@ int i = 0; i < (com.android.server.@@ IpSec@@ Service@@ Test.@@ MA@@ X@@ _N@@ U@@ M@@ _@@ EN@@ C@@ AP@@ _S@@ O@@ C@@ KE@@ T@@ S@@ ); i++) { IpSec@@ U@@ dp@@ En@@ cap@@ Res@@ pon@@ se new@@ U@@ dp@@ En@@ cap@@ S@@ ock@@ et = m@@ IpSec@@ Service.@@ open@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ 0, new android.os.@@ Bin@@ der@@ ()); assert@@ NotNull@@ (@@ new@@ U@@ dp@@ En@@ cap@@ Socket@@ ); if ((@@ IpSec@@ Manager.@@ Statu@@ s.@@ O@@ K@@ ) != (@@ new@@ U@@ dp@@ En@@ cap@@ Socket@@ .@@ stat@@ us@@ )) { break@@ ; } open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.add@@ (@@ new@@ U@@ dp@@ En@@ cap@@ Socket@@ ); } assert@@ True@@ ("@@ Num@@ b@@ er of op@@ e@@ n U@@ D@@ P enc@@ a@@ p s@@ ocket@@ s is ne@@ g@@ ative@@ ", ((@@ open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.@@ size@@ ()) > 0@@ )); assert@@ True@@ ("@@ Num@@ b@@ er of op@@ e@@ n U@@ D@@ P enc@@ a@@ p s@@ ocket@@ s is out of bo@@ und@@ ", ((@@ open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.@@ size@@ ()) < (com.android.server.@@ IpSec@@ Service@@ Test.@@ MA@@ X@@ _N@@ U@@ M@@ _@@ EN@@ C@@ AP@@ _S@@ O@@ C@@ KE@@ T@@ S@@ ))); IpSec@@ U@@ dp@@ En@@ cap@@ Res@@ pon@@ se ex@@ tra@@ U@@ dp@@ En@@ cap@@ S@@ ock@@ et = m@@ IpSec@@ Service.@@ open@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ 0, new android.os.@@ Bin@@ der@@ ()); assert@@ NotNull@@ (@@ ex@@ tra@@ U@@ dp@@ En@@ cap@@ Socket@@ ); assert@@ Equal@@ s(@@ IpSec@@ Manager.@@ Statu@@ s.@@ RE@@ S@@ O@@ UR@@ C@@ E_@@ UN@@ AV@@ A@@ IL@@ ABL@@ E, ex@@ tra@@ U@@ dp@@ En@@ cap@@ Socket@@ .@@ stat@@ us@@ ); m@@ IpSec@@ Service.@@ close@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.get@@ (0@@ ).@@ resource@@ Id); open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.get@@ (0@@ ).@@ file@@ Descrip@@ tor.@@ close(); open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.@@ remove@@ (@@ 0); ex@@ tra@@ U@@ dp@@ En@@ cap@@ S@@ ock@@ et = m@@ IpSec@@ Service.@@ open@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ 0, new android.os.@@ Bin@@ der@@ ()); assert@@ NotNull@@ (@@ ex@@ tra@@ U@@ dp@@ En@@ cap@@ Socket@@ ); assert@@ Equal@@ s(@@ IpSec@@ Manager.@@ Statu@@ s.@@ O@@ K@@ , ex@@ tra@@ U@@ dp@@ En@@ cap@@ Socket@@ .@@ stat@@ us@@ ); open@@ U@@ dp@@ En@@ cap@@ Socket@@ s.@@ add(@@ ex@@ tra@@ U@@ dp@@ En@@ cap@@ Socket@@ ); for (@@ IpSec@@ U@@ dp@@ En@@ cap@@ Res@@ pon@@ se open@@ S@@ ock@@ et : open@@ U@@ dp@@ En@@ cap@@ Socket@@ s) { m@@ IpSec@@ Service.@@ close@@ U@@ dp@@ En@@ cap@@ s@@ ul@@ ation@@ Socket@@ (@@ open@@ Socket@@ .@@ resource@@ Id); open@@ Socket@@ .@@ file@@ Descrip@@ tor.@@ close(); } }
private final void handle@@ App@@ Di@@ ed@@ Lock@@ ed@@ (com.android.server.@@ am@@ .@@ Process@@ Recor@@ d app@@ , boolean r@@ est@@ art@@ ing@@ , boolean al@@ low@@ R@@ est@@ art@@ ) { int p@@ id = app.@@ p@@ id@@ ; boolean ke@@ p@@ t = cle@@ an@@ Up@@ Application@@ Record@@ Lock@@ ed@@ (@@ app@@ , r@@ est@@ art@@ ing@@ , al@@ low@@ R@@ est@@ art@@ , (-1@@ )); if ((@@ !@@ ke@@ p@@ t@@ ) && (!@@ r@@ est@@ art@@ ing@@ )) { remove@@ L@@ r@@ u@@ Process@@ Lock@@ ed@@ (@@ app@@ ); if (p@@ id > 0) { com.android.server.@@ am@@ .@@ Process@@ List.@@ remove@@ (p@@ id@@ ); } } if ((m@@ Profile@@ Pro@@ c@@ ) == app@@ ) { clear@@ Pro@@ fi@@ ler@@ Lock@@ ed@@ (); } boolean has@@ Visi@@ ble@@ Ac@@ tivi@@ ti@@ es = m@@ Stack@@ Sup@@ er@@ vi@@ s@@ or.@@ handle@@ App@@ Di@@ ed@@ Lock@@ ed@@ (@@ app@@ ); app.@@ ac@@ tivi@@ ties.@@ clear@@ (); if ((@@ app.@@ in@@ strument@@ ation@@ Class@@ ) != null@@ ) { android.util.@@ S@@ log.@@ w@@ (com.android.server.@@ am@@ .@@ Activity@@ Manager@@ Service.TAG, ((("@@ C@@ r@@ as@@ h of ap@@ p " + (@@ app.@@ process@@ Name@@ )) + " run@@ n@@ ing in@@ strument@@ ation ") + (@@ app.@@ in@@ strument@@ ation@@ Class@@ ))); android.os.@@ Bund@@ le in@@ fo = new android.os.@@ Bund@@ le@@ (); info@@ .@@ put@@ String(@@ "@@ short@@ M@@ s@@ g@@ ", "@@ Pro@@ ces@@ s c@@ r@@ as@@ h@@ ed.@@ "); fin@@ is@@ h@@ In@@ strument@@ ation@@ Lock@@ ed@@ (@@ app@@ , Ac@@ tivity.@@ RE@@ S@@ UL@@ T_@@ C@@ AN@@ CE@@ L@@ ED@@ , info@@ ); } if ((@@ !@@ r@@ est@@ art@@ ing@@ ) && has@@ Visi@@ ble@@ Ac@@ tivi@@ ties@@ ) { if (!(m@@ Stack@@ Sup@@ er@@ vi@@ s@@ or.@@ res@@ um@@ e@@ To@@ p@@ Ac@@ tivi@@ ties@@ Lock@@ ed@@ ())) { m@@ Stack@@ Sup@@ er@@ vi@@ s@@ or.@@ en@@ s@@ ure@@ Ac@@ tivi@@ ties@@ Visi@@ ble@@ Lock@@ ed@@ (@@ null@@ , 0); } } }
public static com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value match@@ ed@@ (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value current@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value b@@ as@@ el@@ in@@ e) { return new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value@@ (c@@ urr@@ ent.@@ name@@ , current.@@ type@@ , current.@@ value@@ , b@@ as@@ el@@ ine.@@ value@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value@@ (c@@ urr@@ ent.@@ name@@ , current.@@ value@@ , b@@ as@@ el@@ ine.@@ value@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ D@@ if@@ f@@ ed@@ Field@@ Value match@@ ed@@ Field@@ Valu@@ e.@@ Statu@@ s.@@ AD@@ DE@@ D@@ ); }
@java.lang.Override public boolean p@@ er@@ for@@ m@@ () { try { java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (1@@ 00@@ ); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception ign@@ or@@ ed@@ ) { } }
static byte $@@ op@@ t@@ $@@ no@@ in@@ line@@ $@@ Char@@ To@@ Byte@@ (@@ char a@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) throw new java.lang.@@ Error@@ (); return (@@ (@@ byte@@ ) (@@ a@@ )); }
@java.lang.Override public java.security.@@ P@@ r@@ in@@ c@@ ip@@ al get@@ Sub@@ ject@@ D@@ N@@ () { return null@@ ; }
public void set@@ Imp@@ or@@ ted@@ Librar@@ i@@ es(@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.io.File@@ > import@@ ed@@ Librar@@ i@@ es) { this@@ .@@ import@@ ed@@ Librar@@ i@@ es = new java.util.ArrayList<@@ java.io.File@@ >@@ (@@ import@@ ed@@ Librar@@ ies@@ ); }
public java.lang.String toString@@ () { return config@@ s.@@ toString@@ (); }
private void read@@ (@@ java.io.@@ Input@@ Stream p@@ atch@@ In@@ ) throw@@ s java.io.IOException { java.util.List<@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ Action@@ > new@@ Action@@ s = new java.util.ArrayList<@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ Action@@ >(); @@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ IO@@ Resource@@ Open@@ ed@@ B@@ ut@@ Not@@ S@@ a@@ f@@ el@@ y@@ C@@ lo@@ sed@@ ") java.io.@@ Data@@ Input@@ Stream in = new java.io.@@ Data@@ InputStream@@ (p@@ atch@@ In@@ ); my@@ Is@@ Bin@@ ar@@ y = in@@ .@@ read@@ Boole@@ an@@ (); my@@ Is@@ Str@@ ic@@ t = in@@ .@@ read@@ Boole@@ an@@ (); my@@ O@@ l@@ d@@ Bu@@ il@@ d = in@@ .@@ read@@ UT@@ F@@ (); my@@ New@@ Bu@@ il@@ d = in@@ .@@ read@@ UT@@ F@@ (); int siz@@ e = in@@ .@@ read@@ Int@@ (); while ((@@ size@@ --@@ ) > 0) { int ke@@ y = in@@ .@@ read@@ Int@@ (); com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ Ac@@ tion a@@ ; switch (@@ key@@ ) { case com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ C@@ RE@@ A@@ TE_@@ AC@@ TION_@@ KE@@ Y : a = new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Create@@ Action@@ (@@ this@@ , in@@ ); break@@ ; case com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ U@@ P@@ DA@@ TE_@@ AC@@ TION_@@ KE@@ Y : a = new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Up@@ date@@ Action@@ (@@ this@@ , in@@ ); break@@ ; case com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ U@@ P@@ DA@@ TE_@@ Z@@ IP@@ _@@ AC@@ TION_@@ KE@@ Y : a = new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Up@@ date@@ Zip@@ Action@@ (@@ this@@ , in@@ ); break@@ ; case com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ DE@@ LE@@ TE_@@ AC@@ TION_@@ KE@@ Y : a = new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ De@@ lete@@ Action@@ (@@ this@@ , in@@ ); break@@ ; case com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ .@@ VAL@@ ID@@ A@@ TE_@@ AC@@ TION_@@ KE@@ Y : a = new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Valid@@ ate@@ Action@@ (@@ this@@ , in@@ ); break@@ ; default : throw new java.lang.@@ RuntimeException(("@@ Un@@ k@@ no@@ w@@ n ac@@ tion typ@@ e " + key@@ )); } new@@ Action@@ s.@@ add(@@ a@@ ); } my@@ Action@@ s = new@@ Action@@ s; }
@org.junit.Test public void test@@ State@@ Tr@@ an@@ si@@ tion@@ _@@ Audio@@ On@@ To@@ Audio@@ Dis@@ connec@@ ting@@ _@@ Dis@@ connect@@ Audio@@ () { int num@@ B@@ road@@ cas@@ ts@@ S@@ ent = set@@ Up@@ Audio@@ On@@ State@@ (); num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ ++@@ ; m@@ Headset@@ StateMachine.@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ D@@ IS@@ CONNEC@@ T_@@ A@@ U@@ D@@ IO@@ , m@@ Test@@ Device@@ ); ve@@ r@@ if@@ y@@ (m@@ Headset@@ Service@@ , time@@ out@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ A@@ S@@ Y@@ N@@ C@@ _C@@ AL@@ L_@@ TI@@ ME@@ O@@ U@@ T_@@ M@@ IL@@ LIS@@ ).@@ tim@@ es(@@ num@@ B@@ road@@ cas@@ ts@@ S@@ ent@@ )).@@ send@@ Broadcast@@ As@@ User@@ (@@ any@@ (android.content.@@ Intent@@ .@@ class@@ ), e@@ q@@ (@@ Headset@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ )); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ ve@@ r@@ if@@ y@@ Audio@@ State@@ Broadcast@@ (m@@ Headset@@ Service@@ , ne@@ ver@@ ()).@@ send@@ Broadcast@@ As@@ User@@ (@@ any@@ (android.content.@@ Intent@@ .@@ class@@ ), e@@ q@@ (@@ User@@ Hand@@ le.@@ AL@@ L, Headset@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ ); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ ine@@ Test.@@ ve@@ r@@ if@@ y@@ Audio@@ State@@ Broadcast@@ (m@@ Headset@@ StateMach@@ ine@@ ); org.junit.@@ Asser@@ t@@ .@@ assert@@ Th@@ at@@ (m@@ Headset@@ StateMach@@ in@@ e.get@@ Current@@ State@@ (), org.@@ h@@ am@@ c@@ res@@ t.@@ core.@@ Is@@ Instance@@ Of@@ .@@ instance@@ Of@@ (@@ Headset@@ StateMachine.@@ Audio@@ Dis@@ connec@@ ting@@ .@@ class@@ )); }
org.conscrypt.@@ Abstract@@ Open@@ SSL@@ S@@ es@@ sion get@@ Session@@ To@@ Re@@ u@@ se@@ (@@ long ss@@ l@@ Native@@ P@@ o@@ int@@ er, java.lang.String ho@@ st@@ name@@ , int port@@ ) throw@@ s javax.net.ssl.@@ SSL@@ Exception { org.conscrypt.@@ Open@@ SSL@@ Session@@ Imp@@ l session@@ To@@ Re@@ u@@ se = null@@ ; if (c@@ lient@@ _@@ mode@@ ) { javax.net.ssl.@@ SSL@@ S@@ es@@ sion c@@ ach@@ ed@@ S@@ es@@ sion = get@@ Cach@@ ed@@ Client@@ Session@@ (c@@ lient@@ Session@@ Contex@@ t, ho@@ st@@ name@@ , port@@ ); if (c@@ ach@@ ed@@ S@@ es@@ sion != null@@ ) { if (c@@ ach@@ ed@@ S@@ es@@ sion instanceof org.conscrypt.@@ Open@@ SSL@@ Ex@@ t@@ end@@ ed@@ Session@@ Imp@@ l@@ ) { c@@ ach@@ ed@@ S@@ es@@ sion = ((@@ org.conscrypt.@@ Open@@ SSL@@ Ex@@ t@@ end@@ ed@@ Session@@ Imp@@ l@@ ) (c@@ ach@@ ed@@ Session@@ )@@ ).get@@ De@@ le@@ g@@ ate@@ (); } if (c@@ ach@@ ed@@ S@@ es@@ sion instanceof org.conscrypt.@@ Open@@ SSL@@ Session@@ Imp@@ l@@ ) { session@@ To@@ Re@@ u@@ se = ((@@ org.conscrypt.@@ Open@@ SSL@@ Session@@ Imp@@ l@@ ) (c@@ ach@@ ed@@ Session@@ )); org.conscrypt.@@ NativeCryp@@ to.@@ SSL@@ _@@ set@@ _@@ session@@ (s@@ s@@ l@@ Native@@ P@@ o@@ int@@ er, session@@ To@@ Re@@ us@@ e.@@ ss@@ l@@ Session@@ Native@@ P@@ o@@ int@@ er@@ ); } } return session@@ To@@ Re@@ u@@ se@@ ; }
@java.lang.Override public void get@@ Data@@ Call@@ List@@ (android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ DA@@ TA@@ _C@@ AL@@ L_@@ LIS@@ T, result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); try { radioProx@@ y@@ .get@@ Data@@ Call@@ List@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ get@@ Data@@ Call@@ List@@ ", e); } } }
public void test@@ F@@ ir@@ st@@ M@@ atch@@ es@@ By@@ G@@ i@@ v@@ en@@ M@@ atch@@ er@@ () { android.@@ view@@ .@@ Vi@@ e@@ w fi@@ r@@ st@@ View@@ With@@ Id@@ 1 = create@@ View@@ With@@ Id@@ (@@ R.@@ id.@@ test@@ Id@@ 1); android.@@ view@@ .@@ Vi@@ e@@ w sec@@ ond@@ View@@ With@@ Id@@ 1 = create@@ View@@ With@@ Id@@ (@@ R.@@ id.@@ test@@ Id@@ 1); org.@@ h@@ am@@ c@@ res@@ t.@@ M@@ atch@@ er@@ <@@ android.@@ view@@ .@@ View@@ > id@@ 1@@ F@@ ir@@ st@@ O@@ cc@@ urr@@ en@@ ce@@ M@@ atch@@ er = android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ match@@ er.@@ View@@ M@@ atch@@ er@@ s.@@ th@@ at@@ F@@ ir@@ st@@ M@@ atch@@ es@@ (android.@@ support.@@ test.@@ es@@ pres@@ so@@ .@@ match@@ er.@@ View@@ M@@ atch@@ er@@ s.@@ w@@ ith@@ Id@@ (@@ R.@@ id.@@ test@@ Id@@ 1@@ )); assert@@ True@@ (@@ id@@ 1@@ F@@ ir@@ st@@ O@@ cc@@ urr@@ en@@ ce@@ M@@ atch@@ er.@@ match@@ es(@@ fi@@ r@@ st@@ View@@ With@@ Id@@ 1@@ )); assert@@ False@@ (@@ id@@ 1@@ F@@ ir@@ st@@ O@@ cc@@ urr@@ en@@ ce@@ M@@ atch@@ er.@@ match@@ es@@ (s@@ ec@@ ond@@ View@@ With@@ Id@@ 1@@ )); assert@@ True@@ (@@ id@@ 1@@ F@@ ir@@ st@@ O@@ cc@@ urr@@ en@@ ce@@ M@@ atch@@ er.@@ match@@ es(@@ fi@@ r@@ st@@ View@@ With@@ Id@@ 1@@ )); }
@java.lang.Override public android.app.@@ Ac@@ tivi@@ t@@ y new@@ Activity@@ (java.lang.@@ Class@@ Load@@ er c@@ l@@ , java.lang.String class@@ Name, android.content.@@ Int@@ ent int@@ ent@@ ) throw@@ s java.lang.@@ Class@@ Not@@ F@@ ound@@ Exception, java.lang.Illegal@@ Access@@ Exception, java.lang.@@ In@@ stan@@ ti@@ ation@@ Exception { return (@@ (@@ this@@ .m@@ Activity@@ Provider@@ ) != null@@ ) && (m@@ Activity@@ Provid@@ er.get@@ Activity@@ Class@@ ().get@@ Name@@ ().@@ equal@@ s@@ (@@ class@@ Name@@ )) ? m@@ Activity@@ Provid@@ er.get@@ Activity@@ () : super@@ .@@ new@@ Activity@@ (c@@ l@@ , class@@ Name, int@@ ent@@ ); }
public static java.lang.@@ invok@@ e.@@ Call@@ S@@ it@@ e b@@ sm@@ Loo@@ k@@ up@@ Test@@ 9@@ (java.lang.@@ invok@@ e.@@ Method@@ Hand@@ l@@ es.@@ Loo@@ k@@ u@@ p call@@ er, java.lang.String name@@ , java.lang.@@ invok@@ e.@@ Method@@ Type type@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le static@@ Get@@ ter@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le static@@ Set@@ ter@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le field@@ Get@@ ter@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le field@@ Set@@ ter@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le instance@@ In@@ vok@@ e@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le const@@ r@@ u@@ ctor@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le int@@ er@@ face@@ In@@ vok@@ e@@ , java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le private@@ In@@ vok@@ e) throw@@ s java.lang.@@ Throw@@ able { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ((((@@ ((((@@ ("@@ b@@ sm@@ Loo@@ k@@ up@@ Test@@ 9 [@@ " + static@@ Get@@ ter@@ ) + ", ") + static@@ Set@@ ter@@ ) + ", ") + field@@ Get@@ ter@@ ) + ", ") + field@@ Set@@ ter@@ ) + "@@ ]@@ ")); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (((@@ name + " ") + type@@ )); invok@@ ec@@ u@@ st@@ o@@ m.@@ In@@ vok@@ e@@ C@@ u@@ st@@ o@@ m.@@ check@@ St@@ ati@@ c@@ Field@@ Test@@ 9@@ (@@ static@@ Get@@ ter@@ , static@@ Set@@ ter@@ ); invok@@ ec@@ u@@ st@@ o@@ m.@@ In@@ vok@@ e@@ C@@ u@@ st@@ o@@ m in@@ stan@@ ce = new invok@@ ec@@ u@@ st@@ o@@ m.@@ In@@ vok@@ e@@ C@@ u@@ st@@ om@@ (); instance@@ .@@ check@@ Field@@ Test@@ 9@@ (@@ field@@ Get@@ ter@@ , field@@ Set@@ ter@@ ); instance@@ In@@ vok@@ e.@@ invok@@ e@@ Ex@@ act@@ (in@@ stance@@ ); invok@@ ec@@ u@@ st@@ o@@ m.@@ In@@ vok@@ e@@ C@@ u@@ st@@ o@@ m instance@@ 2 = instance@@ ; int@@ er@@ face@@ In@@ vok@@ e.@@ invok@@ e@@ (in@@ stance@@ 2@@ ); private@@ In@@ vok@@ e.@@ invok@@ e@@ (in@@ stance@@ 2@@ ); final java.lang.@@ invok@@ e.@@ Method@@ Hand@@ l@@ es.@@ Loo@@ k@@ u@@ p lo@@ ok@@ u@@ p = java.lang.@@ invok@@ e.@@ Method@@ Hand@@ l@@ es.@@ lo@@ ok@@ up@@ (); final java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le target@@ M@@ H = lo@@ ok@@ up@@ .@@ find@@ St@@ ati@@ c@@ (@@ lo@@ ok@@ up@@ .@@ lo@@ ok@@ up@@ Class@@ (), name@@ , typ@@ e); return new java.lang.@@ invok@@ e.@@ Constan@@ t@@ Call@@ S@@ ite@@ (@@ target@@ M@@ H@@ .@@ as@@ Type@@ (@@ type@@ )); }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ f@@ p@@ _@@ ma@@ d s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ f@@ p@@ _@@ m@@ ad@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); s.@@ invok@@ e@@ _@@ f@@ p@@ _@@ m@@ ad@@ _test@@ (@@ 0, 0); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
public vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r create@@ Test@@ Runner@@ (@@ java.lang.String.@@ .@@ . arg@@ s) { return new vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ (pro@@ per@@ ties@@ , new java.util.Array@@ List@@ (@@ java.util.Arrays.@@ as@@ List@@ (@@ arg@@ s@@ ))); }
private void fix@@ D@@ 8@@ Output@@ (@@ java.io.File output@@ , java.util.List<@@ java.lang.String> input@@ s) throw@@ s java.io.IOException { byte@@ [] buff@@ er = new byte@@ [@@ 4@@ 0@@ 9@@ 6@@ ]; java.io.File output@@ Co@@ p@@ y = new java.io.File@@ (((@@ out@@ pu@@ t.@@ toString@@ ()) + "@@ .@@ copy@@ ")); out@@ pu@@ t.@@ r@@ en@@ ame@@ To@@ (@@ output@@ Co@@ py@@ ); input@@ s.@@ add(@@ output@@ Co@@ p@@ y.@@ toString@@ ()); try (java.util.@@ ja@@ r.@@ J@@ ar@@ Output@@ Stream output@@ J@@ a@@ r = new java.util.@@ ja@@ r.@@ J@@ ar@@ Output@@ Stream@@ (@@ new java.io.File@@ Output@@ Stream@@ (@@ output@@ ))) { for (java.lang.String in@@ put : input@@ s) { try (java.util.@@ ja@@ r.@@ J@@ ar@@ Input@@ Stream input@@ J@@ a@@ r = new java.util.@@ ja@@ r.@@ J@@ ar@@ InputStream@@ (@@ new java.io.File@@ InputStream@@ (in@@ put@@ ))) { for (java.util.@@ ja@@ r.@@ J@@ ar@@ E@@ n@@ try e@@ n@@ try = input@@ J@@ ar@@ .get@@ Next@@ J@@ ar@@ E@@ n@@ try@@ (); e@@ n@@ try != null@@ ; e@@ n@@ try = input@@ J@@ ar@@ .get@@ Next@@ J@@ ar@@ E@@ n@@ try@@ ()) { if (e@@ n@@ try@@ .getName@@ ().@@ end@@ s@@ With@@ ("@@ .@@ class@@ ")) { continue@@ ; } output@@ J@@ ar.@@ put@@ Next@@ E@@ n@@ try@@ (e@@ n@@ try@@ ); int l@@ eng@@ th = 0; while (@@ l@@ eng@@ th >@@ = 0) { l@@ eng@@ th = input@@ J@@ ar.@@ read@@ (@@ buff@@ er@@ ); if (@@ l@@ eng@@ th > 0) { output@@ J@@ ar.@@ write@@ (@@ buff@@ er, 0, length); } } output@@ J@@ ar.@@ close@@ E@@ n@@ try@@ (); } } } final@@ l@@ y { output@@ Co@@ p@@ y.@@ de@@ lete@@ (); } }
public void test_@@ get@@ S@@ end@@ Buffer@@ Size@@ () throw@@ s java.lang.Exception { int port@@ Num@@ b@@ er = tests.@@ support.@@ Sup@@ port@@ _P@@ ort@@ Manager.get@@ Next@@ Port@@ For@@ U@@ D@@ P@@ (); d@@ s = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ (@@ 0); d@@ s.@@ set@@ S@@ end@@ Buffer@@ Size@@ (1@@ 3@@ 4@@ ); assert@@ True@@ ("@@ In@@ cor@@ re@@ c@@ t buff@@ er size@@ ", ((@@ d@@ s.get@@ S@@ end@@ Buffer@@ Size@@ ()) >@@ = 1@@ 3@@ 4@@ )); d@@ s.@@ close(); try { d@@ s.get@@ S@@ end@@ Buffer@@ Size@@ (); fail@@ ("@@ Socket@@ Exception w@@ a@@ s not throw@@ n@@ .@@ "); } catch (@@ java.net.@@ Socket@@ Exception se@@ ) { } }
@java.lang.Override public java.lang.@@ Vo@@ id call@@ () throw@@ s java.lang.Exception { for@@ w@@ ard@@ T@@ l@@ s@@ Record@@ s("@@ M@@ i@@ T@@ M S@@ -@@ >@@ C@@ ", server@@ InputStream@@ , c@@ lient@@ Output@@ Stream@@ , (in@@ ject@@ E@@ ar@@ ly@@ C@@ C@@ S && in@@ ject@@ In@@ to@@ C@@ li@@ ent ? android.@@ security.@@ cts.@@ Open@@ SSL@@ He@@ art@@ ble@@ ed@@ Test.@@ Hand@@ sh@@ ake@@ Mess@@ age.@@ TYPE_@@ C@@ ER@@ TI@@ F@@ IC@@ AT@@ E : -1@@ )); return null@@ ; }
public void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); enable@@ As@@ si@@ stan@@ t@@ (); la@@ un@@ ch@@ Activity@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ LA@@ UN@@ CH@@ _@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ AC@@ TIV@@ ITY@@ _@@ IN@@ TO@@ _STA@@ C@@ K@@ ); m@@ A@@ m@@ W@@ m@@ State.@@ wait@@ For@@ Valid@@ State@@ (m@@ Device@@ , android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ AC@@ TIV@@ ITY@@ , android.@@ server.@@ cts.@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ STA@@ C@@ K_@@ ID@@ ); android.@@ server.@@ cts.@@ Activity@@ Manager@@ State.@@ Activity@@ St@@ ac@@ k as@@ si@@ stan@@ t@@ St@@ ac@@ k = m@@ A@@ m@@ W@@ m@@ Stat@@ e.get@@ A@@ m@@ State@@ ().get@@ Stack@@ By@@ Id@@ (android.@@ server.@@ cts.@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ STA@@ C@@ K_@@ ID@@ ); android.@@ server.@@ cts.@@ Activity@@ Manager@@ As@@ si@@ stan@@ t@@ Stack@@ Test@@ s.@@ m@@ As@@ si@@ stan@@ t@@ Display@@ Id = 0; remove@@ Stack@@ s(@@ android.@@ server.@@ cts.@@ A@@ SS@@ IS@@ TA@@ N@@ T_@@ STA@@ C@@ K_@@ ID@@ ); dis@@ able@@ As@@ si@@ stan@@ t@@ (); }
@java.lang.Override public final boolean vi@@ si@@ t@@ (@@ Type@@ Dec@@ l@@ ar@@ ation type@@ Dec@@ l@@ , org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ lo@@ ok@@ up@@ .@@ Block@@ S@@ co@@ p@@ e s@@ co@@ p@@ e) { assert false@@ ; return false@@ ; }
public static int po@@ l@@ l@@ (android.@@ system.@@ Str@@ u@@ ct@@ P@@ ol@@ l@@ f@@ d@@ [] f@@ d@@ s, int time@@ out@@ M@@ s) throw@@ s android.system.@@ ErrnoException { return Lib@@ core.@@ os.@@ po@@ l@@ l@@ (f@@ d@@ s, time@@ out@@ M@@ s); }
@org.junit.Test public void test@@ Get@@ E@@ uic@@ c@@ Info@@ 2@@ () { int channe@@ l = mock@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ s@@ es@@ ("@@ B@@ F@@ 2@@ 2@@ 0@@ 3@@ 0@@ 10@@ 2@@ 0@@ 3@@ 9@@ 00@@ 0@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ No@@ []@@ > result@@ Cap@@ tor = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ >(); m@@ E@@ uic@@ c@@ Card@@ .get@@ E@@ uic@@ c@@ Info@@ 2@@ ().@@ to@@ H@@ ex@@ ()@@ ve@@ r@@ if@@ y@@ Store@@ Data@@ (@@ chan@@ nel@@ , "@@ B@@ F@@ 2@@ 00@@ "); }
@java.lang.Override public void send@@ To@@ (@@ byte@@ [] data@@ , java.net.Inet@@ Address d@@ st@@ Add@@ r@@ , int port@@ ) throw@@ s java.io.IOException { try { android.system.@@ O@@ s.@@ send@@ to@@ (m@@ F@@ d, data@@ , 0, data@@ .@@ length@@ , 0, d@@ st@@ Add@@ r@@ , port@@ ); } catch (android.@@ system.@@ ErrnoException e) { e.@@ r@@ e@@ throw@@ As@@ IO@@ Exception@@ (); } }
@com.android.annotations.NonNull private byte@@ [] as@@ R@@ aw@@ ByteArray@@ (@@ int start@@ , int e@@ lement@@ Count@@ ) { get@@ Buffer@@ ().@@ set@@ Posi@@ tion@@ (m@@ Valu@@ es@@ Offset@@ ); assert (m@@ Typ@@ e) != (@@ Type.@@ O@@ B@@ J@@ EC@@ T@@ ); assert (@@ st@@ ar@@ t + e@@ lement@@ Count@@ ) < (m@@ Length@@ ); byte@@ [] byte@@ s = new byte@@ [@@ e@@ lement@@ Coun@@ t * (m@@ Typ@@ e.get@@ Size@@ ()@@ )@@ ]; get@@ Buffer@@ ().@@ read@@ Sub@@ Se@@ qu@@ en@@ ce@@ (@@ byte@@ s, (@@ st@@ ar@@ t * (m@@ Typ@@ e.get@@ Size@@ ()@@ )), (e@@ lement@@ Coun@@ t * (m@@ Typ@@ e.get@@ Size@@ ()))); return byte@@ s; }
@org.junit.Test public void test@@ L@@ amb@@ a@@ 0@@ 2@@ 2@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ LA@@ M@@ B@@ DA@@ 0@@ 2@@ 2@@ 2@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
private static void False@@ C@@ ro@@ ss@@ O@@ ver@@ Loo@@ p@@ 2@@ () { Main.@@ s@@ Ar@@ r@@ I@@ [@@ 2@@ 0@@ ] = -@@ 2@@ ; for (@@ int i = 0; i < (@@ Main.@@ s@@ Ar@@ r@@ F@@ .@@ length); i++) { Main.@@ s@@ Ar@@ r@@ F@@ [i@@ ] = (@@ Main.@@ s@@ Ar@@ r@@ I@@ [@@ 2@@ 0@@ ]; } }
private void set@@ Valu@@ es@@ (java.util.@@ Map@@ <java.lang.String, java.lang.String> valu@@ es) { m@@ Build@@ Info = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _@@ BU@@ IL@@ D@@ IN@@ F@@ O@@ )); m@@ Min@@ or = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _M@@ IN@@ OR@@ )); m@@ Re@@ l@@ ative@@ P@@ ath = valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _P@@ RO@@ J@@ EC@@ T@@ ); m@@ Min@@ Sdk@@ Ver@@ sion = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _@@ AP@@ I@@ )); java.lang.String t@@ m@@ p = valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _@@ G@@ L); if (t@@ m@@ p != null@@ ) { m@@ G@@ l@@ Ver@@ sion = java.lang.Integ@@ er.@@ parse@@ Int@@ (t@@ mp@@ ); } t@@ m@@ p = valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _@@ A@@ B@@ I@@ ); if (t@@ m@@ p != null@@ ) { m@@ Ab@@ i = t@@ mp@@ ; } t@@ m@@ p = valu@@ es@@ .get@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ ex@@ por@@ t.@@ Apk@@ Data@@ .@@ PRO@@ P@@ _S@@ C@@ RE@@ EN@@ S@@ ); if (t@@ m@@ p != null@@ ) { m@@ Sup@@ port@@ s@@ S@@ cre@@ en@@ s = new com.android.sdklib.@@ x@@ m@@ l.@@ M@@ an@@ if@@ est@@ Data@@ .@@ Sup@@ port@@ s@@ S@@ cre@@ en@@ s(@@ t@@ mp@@ ); } }
public void compile@@ A@@ id@@ l@@ File@@ (@@ @com.android.annotations.NonNull java.io.File a@@ id@@ l@@ File@@ , @com.android.annotations.NonNull java.io.File source@@ Output@@ Dir@@ , @com.android.annotations.NonNull java.util.List<@@ java.io.File@@ > import@@ Folder@@ s, @com.android.annotations.@@ Null@@ able com.android.builder.@@ comp@@ il@@ ing.@@ Dependenc@@ y@@ File@@ Process@@ or de@@ pendenc@@ y@@ File@@ Process@@ or@@ ) throw@@ s com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Log@@ ged@@ Error@@ Exception, java.io.IO@@ Exception, java.lang.@@ Inter@@ rup@@ ted@@ Exception { check@@ NotNull@@ (@@ a@@ id@@ l@@ File@@ , "@@ a@@ id@@ l@@ File can@@ not b@@ e null@@ .@@ "); check@@ NotNull@@ (s@@ ource@@ Output@@ Dir@@ , "@@ source@@ Output@@ Di@@ r can@@ not b@@ e null@@ .@@ "); check@@ NotNull@@ (@@ import@@ Folder@@ s, "@@ import@@ Folder@@ s can@@ not b@@ e null@@ .@@ "); com.android.sdklib.@@ I@@ Android@@ T@@ arg@@ et t@@ arg@@ et = m@@ Target@@ Info@@ .get@@ Target@@ (); com.android.sdklib.@@ Build@@ Too@@ l@@ Info build@@ Too@@ l@@ Info = m@@ Target@@ Info@@ .get@@ Build@@ Too@@ l@@ s(); java.lang.String a@@ id@@ l = build@@ Too@@ l@@ Info@@ .get@@ Path@@ (@@ Build@@ Too@@ l@@ Info.@@ Path@@ Id@@ .@@ A@@ ID@@ L); if ((@@ a@@ id@@ l == null@@ ) || (!@@ (@@ new java.io.File@@ (@@ a@@ id@@ l@@ ).@@ is@@ File@@ ()))) { throw new java.lang.Illegal@@ State@@ Exception("@@ a@@ id@@ l is mis@@ sing@@ "); } com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ A@@ id@@ l@@ Process@@ or process@@ or = new com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ A@@ id@@ l@@ Process@@ or@@ (@@ a@@ id@@ l@@ , target@@ .get@@ Path@@ (@@ I@@ Android@@ Target@@ .@@ AN@@ D@@ RO@@ ID@@ _@@ A@@ ID@@ L@@ ), import@@ Folder@@ s, source@@ Output@@ Dir@@ , (@@ de@@ pendenc@@ y@@ File@@ Process@@ or != null ? de@@ pendenc@@ y@@ File@@ Process@@ or : com.android.builder.@@ Android@@ Build@@ er.@@ s@@ No@@ Op@@ Dependenc@@ y@@ File@@ Process@@ or@@ ), mC@@ m@@ d@@ Line@@ Runner@@ ); process@@ or.@@ process@@ File@@ (@@ a@@ id@@ l@@ File@@ ); }
public static final do@@ ub@@ le next@@ D@@ ouble@@ (@@ do@@ ub@@ le valu@@ e) { if (java.lang.@@ D@@ ou@@ b@@ le.@@ is@@ In@@ fin@@ ite@@ (@@ value@@ )) { return value@@ ; } long b@@ it@@ s; if (@@ valu@@ e == 0) { b@@ it@@ s = 0; } else { b@@ it@@ s = java.lang.@@ D@@ ouble@@ .@@ do@@ ub@@ le@@ To@@ Long@@ Bit@@ s(@@ valu@@ e); } return java.lang.@@ D@@ ouble@@ .@@ long@@ Bit@@ s@@ To@@ D@@ ouble@@ ((@@ valu@@ e < 0 ? b@@ it@@ s - 1 : b@@ it@@ s + 1@@ )); }
public com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info.@@ Lay@@ out@@ Param@@ s@@ Info get@@ Lay@@ out@@ Data@@ () { return m@@ Lay@@ out@@ Data@@ ; }
private static char m@@ ay@@ be@@ Str@@ ip@@ Mark@@ er@@ s(@@ java.lang.String s@@ y@@ m@@ b@@ ol@@ , char f@@ all@@ back@@ ) { final int l@@ eng@@ th = s@@ y@@ m@@ bo@@ l.@@ length@@ (); if (@@ l@@ eng@@ th == 1@@ ) { return s@@ y@@ m@@ b@@ ol@@ .@@ char@@ At@@ (@@ 0); } if (@@ l@@ eng@@ th > 1@@ ) { char fi@@ r@@ s@@ t = s@@ y@@ m@@ b@@ ol@@ .@@ char@@ At@@ (@@ 0); char sec@@ on@@ d = s@@ y@@ m@@ b@@ ol@@ .@@ char@@ At@@ (1@@ ); if (((@@ fi@@ r@@ s@@ t == '@@ \@@ u@@ 2@@ 00@@ e@@ '@@ ) || (@@ fi@@ r@@ s@@ t == '@@ \@@ u@@ 2@@ 00@@ f@@ '@@ )) || (@@ fi@@ r@@ s@@ t == '@@ \@@ u@@ 0@@ 6@@ 1@@ c@@ '@@ )) { return sec@@ ond@@ ; } if ((@@ l@@ eng@@ th == 2@@ ) && ((@@ (s@@ ec@@ on@@ d == '@@ \@@ u@@ 2@@ 00@@ e@@ '@@ ) || (s@@ ec@@ on@@ d == '@@ \@@ u@@ 2@@ 00@@ f@@ '@@ )) || (s@@ ec@@ on@@ d == '@@ \@@ u@@ 0@@ 6@@ 1@@ c@@ '@@ ))) { return fi@@ r@@ st@@ ; } } return f@@ all@@ back@@ ; }
public void test@@ Min@@ im@@ al@@ Size@@ D@@ ock@@ ed@@ () throw@@ s java.lang.Exception { if (!@@ (s@@ up@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ ())) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ log@@ And@@ Display@@ (android.@@ server.@@ cts.@@ IN@@ F@@ O@@ , "@@ S@@ k@@ ip@@ p@@ ing test@@ : n@@ o m@@ ulti@@ -@@ w@@ in@@ do@@ w sup@@ port@@ "); return@@ ; } test@@ Min@@ im@@ al@@ Size@@ (android.@@ server.@@ cts.@@ D@@ O@@ C@@ K@@ ED@@ _STA@@ C@@ K_@@ ID@@ ); }
@java.lang.Override public void on@@ R@@ tt@@ Session@@ Remote@@ ly@@ T@@ er@@ min@@ ated@@ (java.lang.String connection@@ Id, android.telecom.@@ Logg@@ ing.@@ Session@@ .@@ Info session@@ Info@@ ) throw@@ s android.os.@@ RemoteException { m@@ Handler.@@ ob@@ tain@@ Message@@ (android.@@ telecom.@@ Connection@@ Service@@ Adapter@@ Ser@@ v@@ an@@ t.@@ MS@@ G@@ _@@ ON@@ _@@ R@@ T@@ T_@@ RE@@ M@@ O@@ TE@@ L@@ Y_@@ TER@@ M@@ IN@@ A@@ TED@@ , connection@@ Id@@ ).@@ send@@ To@@ Target@@ (); }
@java.lang.Override protected void set@@ Up@@ () throw@@ s java.lang.Exception { super@@ .set@@ Up@@ (); m@@ Device = get@@ Device@@ (); m@@ Sup@@ port@@ s@@ S@@ pli@@ t@@ S@@ cre@@ en@@ Multi@@ W@@ in@@ do@@ w = sup@@ port@@ s@@ S@@ pli@@ t@@ S@@ cre@@ en@@ Multi@@ W@@ in@@ do@@ w@@ (); m@@ Source@@ Package@@ Name = android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ S@@ O@@ UR@@ C@@ E_@@ P@@ AC@@ K@@ A@@ G@@ E_@@ N@@ AME@@ ; m@@ Target@@ Package@@ Name = android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ TA@@ R@@ G@@ E@@ T_@@ P@@ AC@@ K@@ A@@ G@@ E_@@ N@@ AME@@ ; cle@@ an@@ up@@ State@@ (); }
protected void for@@ Each@@ (@@ int s@@ lo@@ t, android.renderscript.Allocation ain@@ , android.renderscript.Allocation a@@ out, android.renderscript.@@ Field@@ Pack@@ er v@@ , android.renderscript.@@ Scrip@@ t.@@ L@@ a@@ un@@ ch@@ Option@@ s s@@ c@@ ) { m@@ RS@@ .@@ valid@@ ate@@ (); m@@ RS@@ .@@ valid@@ ate@@ Object@@ (@@ ain@@ ); m@@ RS@@ .@@ valid@@ ate@@ Object@@ (@@ a@@ out); if ((@@ a@@ in == null@@ ) && (@@ a@@ out == null@@ )) { throw new android.renderscript.RS@@ Illegal@@ Argument@@ Exception("@@ A@@ t le@@ as@@ t on@@ e of a@@ in or a@@ out is requ@@ ire@@ d to b@@ e n@@ on@@ -@@ null@@ .@@ "); } long@@ [] in@@ _@@ id@@ s = null@@ ; if (@@ a@@ in != null@@ ) { in@@ _@@ id@@ s = new long@@ [@@ 1@@ ]; in@@ _@@ id@@ s@@ [0@@ ] = ain@@ .get@@ ID@@ (mRS@@ ); } long out@@ _@@ id = 0; if (@@ a@@ out != null@@ ) { out@@ _@@ id = a@@ ou@@ t.get@@ ID@@ (mRS@@ ); } byte@@ [] param@@ s = null@@ ; if (@@ v != null@@ ) { param@@ s = v@@ .get@@ Data@@ (); } int@@ [] li@@ m@@ it@@ s = null@@ ; if (s@@ c != null@@ ) { li@@ m@@ it@@ s = new int@@ [@@ 6@@ ]; li@@ m@@ it@@ s@@ [0@@ ] = s@@ c.@@ x@@ start@@ ; li@@ m@@ it@@ s@@ [@@ 1@@ ] = s@@ c.@@ x@@ end@@ ; li@@ m@@ it@@ s@@ [@@ 2@@ ] = s@@ c.@@ y@@ start@@ ; li@@ m@@ it@@ s@@ [@@ 3@@ ] = s@@ c.@@ y@@ end@@ ; li@@ m@@ it@@ s@@ [@@ 4@@ ] = s@@ c.@@ z@@ start@@ ; li@@ m@@ it@@ s@@ [@@ 5@@ ] = s@@ c.@@ z@@ end@@ ; } m@@ RS@@ .@@ n@@ Script@@ For@@ Each@@ (get@@ ID@@ (mRS), s@@ lo@@ t, in@@ _@@ id@@ s, out@@ _@@ id, param@@ s, li@@ m@@ it@@ s); }
public void pro@@ gu@@ ard@@ Fil@@ es(@@ java.lang.Ob@@ jec@@ t.@@ .@@ . pro@@ gu@@ ard@@ File@@ Array@@ ) { get@@ Pro@@ gu@@ ard@@ Fil@@ es@@ ().@@ add@@ All@@ (pro@@ jec@@ t.@@ fil@@ es@@ (pro@@ gu@@ ard@@ File@@ Array@@ ).get@@ Fil@@ es@@ ()); }
public com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ De@@ cor@@ Comp@@ o@@ si@@ t@@ e set@@ Content@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ I@@ De@@ cor@@ Cont@@ ent cont@@ ent@@ ) { m@@ Cont@@ ent = cont@@ ent@@ ; content.@@ create@@ Control@@ (@@ this@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ G@@ rid@@ Data@@ Helper.@@ create@@ (@@ content.@@ get@@ Control@@ ()).@@ h@@ S@@ p@@ an@@ (@@ 2@@ ).@@ g@@ r@@ ab@@ ().@@ fil@@ l@@ (); java.lang.String t = content.@@ get@@ T@@ it@@ le@@ (); if (@@ t != null@@ ) { set@@ T@@ it@@ le@@ (t@@ ); } org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age i = content.@@ get@@ Image@@ (); if (@@ i != null@@ ) { set@@ Image@@ (i@@ ); } return this@@ ; }
@com.android.annotations.NonNull public static com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List<@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > com@@ pu@@ te@@ (@@ @com.android.annotations.NonNull java.lang.@@ I@@ ter@@ able@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Root@@ Ob@@ j@@ > ro@@ o@@ t@@ s) { com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ To@@ po@@ log@@ ic@@ al@@ S@@ or@@ t.@@ To@@ po@@ log@@ ic@@ al@@ S@@ ort@@ Visi@@ tor vi@@ si@@ tor = new com.android.tools.@@ perflib.@@ he@@ ap.@@ an@@ al@@ y@@ si@@ s.@@ To@@ po@@ log@@ ic@@ al@@ S@@ or@@ t.@@ To@@ po@@ log@@ ic@@ al@@ S@@ ort@@ Visi@@ tor@@ (); for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce ro@@ o@@ t : ro@@ o@@ t@@ s) { ro@@ o@@ t.@@ ac@@ ce@@ p@@ t@@ (@@ vi@@ si@@ tor@@ ); } com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List<@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > instance@@ s = vi@@ si@@ tor@@ .get@@ Or@@ der@@ ed@@ In@@ stan@@ ces@@ (); S@@ n@@ ap@@ sho@@ t.@@ S@@ EN@@ T@@ IN@@ E@@ L_@@ RO@@ O@@ T@@ .set@@ To@@ po@@ log@@ ic@@ al@@ Or@@ der@@ (@@ 0); int current@@ In@@ dex = 0; for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce no@@ de : in@@ stan@@ ces@@ ) { no@@ d@@ e.@@ set@@ To@@ po@@ log@@ ic@@ al@@ Or@@ der@@ ((@@ ++@@ current@@ Index@@ )); } return in@@ stan@@ ces@@ ; }
@org.junit.@@ run@@ ner@@ s.@@ Parameter@@ iz@@ ed.@@ Parameter@@ s(@@ name = "@@ {@@ 0@@ }@@ ") public static java.lang.@@ I@@ ter@@ able@@ <@@ ?@@ > get@@ Param@@ s() throw@@ s java.lang.Exception { int this@@ Api@@ Ver@@ sion = android.os.@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ .@@ S@@ D@@ K_@@ IN@@ T@@ ; if (@@ this@@ Api@@ Ver@@ sion < 1@@ 9@@ ) { android.util.Log.@@ w@@ (com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ RS@@ B@@ ack@@ w@@ ard@@ Comp@@ ati@@ b@@ ili@@ ty@@ Test@@ s.@@ TAG, "@@ AP@@ I ver@@ sion is l@@ es@@ s th@@ an 1@@ 9@@ , n@@ o test@@ s run@@ n@@ ing@@ "); } android.content.@@ Context ct@@ x = android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Target@@ Context@@ (); java.util.ArrayList<@@ com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ Un@@ it@@ Test@@ > valid@@ Un@@ it@@ Test@@ s = new java.util.ArrayList<@@ >(); for (java.lang.@@ Class@@ <@@ ? extends com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ Un@@ it@@ Test@@ > test@@ Clas@@ s : com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ RS@@ Test@@ s.get@@ Test@@ Class@@ es@@ For@@ Current@@ AP@@ I@@ Version@@ ()) { com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ Un@@ it@@ Test t@@ est = test@@ Clas@@ s.get@@ Dec@@ l@@ ar@@ ed@@ Con@@ stru@@ ctor@@ (android.content.@@ Context@@ .@@ class@@ )@@ .@@ new@@ Instance@@ (@@ ct@@ x@@ ); valid@@ Un@@ it@@ Test@@ s.@@ add(@@ test@@ ); } com.android.@@ rs.@@ test@@ back@@ w@@ ard@@ .@@ RS@@ B@@ ack@@ w@@ ard@@ Comp@@ ati@@ b@@ ili@@ ty@@ Test@@ s.@@ check@@ D@@ up@@ li@@ cate@@ Nam@@ es(@@ valid@@ Un@@ it@@ Test@@ s); return valid@@ Un@@ it@@ Test@@ s; }
@org.junit.Test public void request@@ In@@ stall@@ _@@ as@@ ync@@ Su@@ ccess@@ () throw@@ s java.lang.Exception { config@@ ure@@ Call@@ er@@ Has@@ Permission@@ (); android.os.@@ Par@@ cel@@ File@@ Descriptor par@@ cel@@ File@@ Descriptor = com.android.server.@@ time@@ z@@ on@@ e.@@ R@@ ul@@ es@@ Manager@@ Service@@ Test.@@ create@@ Par@@ cel@@ File@@ Descrip@@ tor@@ (com.android.server.@@ time@@ z@@ on@@ e.@@ R@@ ul@@ es@@ Manager@@ Service@@ Test.@@ create@@ Ar@@ b@@ i@@ tr@@ ary@@ Bytes@@ (1@@ 00@@ 0@@ )); com.android.server.@@ time@@ z@@ on@@ e.@@ Check@@ To@@ ke@@ n to@@ ke@@ n = create@@ Ar@@ b@@ i@@ tr@@ ary@@ To@@ k@@ en@@ (); byte@@ [] to@@ k@@ en@@ Byte@@ s = to@@ k@@ en@@ .@@ to@@ ByteArray@@ (); com.android.server.@@ time@@ z@@ on@@ e.@@ R@@ ul@@ es@@ Manager@@ Service@@ Test.@@ Test@@ Call@@ b@@ ac@@ k call@@ b@@ ac@@ k = new com.android.server.@@ time@@ z@@ on@@ e.@@ R@@ ul@@ es@@ Manager@@ Service@@ Test.@@ Test@@ Callback@@ (); assert@@ Equal@@ s(@@ R@@ ul@@ es@@ Manager.@@ S@@ U@@ C@@ CE@@ SS@@ , m@@ R@@ ul@@ es@@ Manager@@ Service.@@ request@@ In@@ stall@@ (@@ par@@ cel@@ File@@ Descrip@@ tor@@ , to@@ k@@ en@@ Bytes@@ , call@@ back@@ )); com.android.server.@@ time@@ z@@ on@@ e.@@ R@@ ul@@ es@@ Manager@@ Service@@ Test@@ .@@ assert@@ C@@ lo@@ sed@@ (@@ par@@ cel@@ File@@ Descrip@@ tor@@ ); call@@ back@@ .@@ assert@@ No@@ Result@@ Recei@@ v@@ ed@@ (); ve@@ r@@ if@@ y@@ No@@ In@@ stall@@ er@@ Call@@ s@@ M@@ ad@@ e@@ (); ve@@ r@@ if@@ y@@ No@@ Package@@ Track@@ er@@ Call@@ s@@ M@@ ad@@ e@@ (); config@@ ure@@ St@@ age@@ In@@ stall@@ Ex@@ pec@@ t@@ ation@@ (@@ TimeZone@@ Di@@ st@@ ro@@ In@@ stall@@ er.@@ IN@@ STA@@ L@@ L@@ _S@@ U@@ C@@ CE@@ SS@@ ); m@@ F@@ ake@@ Ex@@ ec@@ ut@@ or.@@ si@@ m@@ ul@@ ate@@ As@@ ync@@ Ex@@ ec@@ uti@@ on@@ Of@@ L@@ ast@@ Command@@ (); ve@@ r@@ if@@ y@@ St@@ age@@ In@@ stall@@ Cal@@ le@@ d@@ (); ve@@ r@@ if@@ y@@ Package@@ Track@@ er@@ Cal@@ le@@ d@@ (@@ to@@ k@@ en@@ , true@@ ); call@@ back@@ .@@ assert@@ Result@@ Recei@@ v@@ ed@@ (@@ Callback@@ .@@ S@@ U@@ C@@ CE@@ SS@@ ); }
public void get@@ Default@@ Down@@ load@@ able@@ Sub@@ s@@ cription@@ List@@ (android.@@ app.@@ P@@ end@@ ing@@ Int@@ ent call@@ back@@ Intent@@ ) { if (!(@@ is@@ Enabled@@ ())) { android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Manager.@@ send@@ Un@@ ava@@ il@@ able@@ Error@@ (c@@ all@@ back@@ Intent@@ ); return@@ ; } try { android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Manager.get@@ I@@ E@@ uic@@ c@@ Control@@ ler@@ ().get@@ Default@@ Down@@ load@@ able@@ Sub@@ s@@ cription@@ List@@ (m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), call@@ back@@ Intent@@ ); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
public static void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ Option@@ s option@@ s) throw@@ s com.android.jack.@@ Illegal@@ Option@@ s@@ Exception, com.android.jack.@@ Jack@@ User@@ Exception, com.android.sched.@@ s@@ ch@@ ed@@ ul@@ er.@@ Process@@ Exception, com.android.sched.util.@@ config.@@ Configuration@@ Exception { com.android.sched.util.@@ Run@@ n@@ able@@ H@@ oo@@ k@@ s h@@ oo@@ k@@ s = new com.android.sched.util.@@ Run@@ n@@ able@@ H@@ oo@@ k@@ s(); try { com.android.jack.@@ Jack@@ .@@ check@@ (o@@ ption@@ s, h@@ oo@@ k@@ s); com.android.jack.@@ Jack@@ .@@ sub@@ Run@@ (o@@ ption@@ s, h@@ oo@@ k@@ s); } final@@ l@@ y { h@@ oo@@ k@@ s.@@ run@@ H@@ oo@@ k@@ s(); com.android.sched.util.@@ config.@@ Thread@@ Config.@@ un@@ set@@ Config@@ (); } }
org.@@ gradle.@@ model.@@ colle@@ ction@@ .@@ Manag@@ ed@@ Set@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Gro@@ up@@ able@@ Pro@@ duct@@ Flavor@@ > get@@ Pro@@ duct@@ Flavor@@ s();
public static void set@@ Ex@@ t@@ ension@@ Default@@ (com.android.@@ build@@ .gradle.@@ n@@ dk@@ .m@@ an@@ ag@@ ed.@@ N@@ dk@@ Con@@ fig n@@ dk@@ Config@@ ) { if (@@ n@@ dk@@ Config.@@ get@@ Too@@ lch@@ ain@@ ().@@ isEmpty@@ ()) { n@@ dk@@ Config.@@ set@@ Too@@ lch@@ ain@@ (com.android.@@ build@@ .gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Ex@@ t@@ ension@@ Con@@ v@@ en@@ tion@@ .@@ DE@@ FA@@ UL@@ T_@@ TO@@ O@@ L@@ CH@@ A@@ IN@@ ); } else { if ((@@ !@@ (@@ n@@ dk@@ Config.@@ get@@ Too@@ lch@@ ain@@ ().@@ equal@@ s("@@ g@@ cc@@ "@@ ))) && (!(@@ n@@ dk@@ Config.@@ get@@ Too@@ lch@@ ain@@ ().@@ equal@@ s("@@ c@@ lan@@ g@@ "@@ )@@ ))) { throw new org.@@ gradle.@@ api.@@ In@@ valid@@ User@@ Data@@ Exception(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ In@@ va@@ li@@ d toolch@@ a@@ in '@@ %@@ s@@ '@@ . Sup@@ por@@ ted toolch@@ ain@@ s ar@@ e '@@ g@@ cc@@ ' an@@ d '@@ c@@ lan@@ g@@ '@@ .@@ ", n@@ dk@@ Config.@@ get@@ Too@@ lch@@ ain@@ ())); } } if (@@ n@@ dk@@ Config.@@ get@@ Too@@ lch@@ ain@@ Version@@ ().@@ isEmpty@@ ()) { n@@ dk@@ Config.@@ set@@ Too@@ lch@@ ain@@ Version@@ (com.android.@@ build@@ .gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Ex@@ t@@ ension@@ Con@@ v@@ en@@ tion@@ .@@ DE@@ FA@@ UL@@ T_@@ TO@@ O@@ L@@ CH@@ A@@ IN@@ _@@ V@@ E@@ RS@@ I@@ ON@@ ); } n@@ dk@@ Config.@@ get@@ C@@ File@@ P@@ attern@@ ().get@@ In@@ c@@ lu@@ des@@ ().@@ create@@ (@@ new org.@@ gradle.@@ api.@@ Action@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ String@@ >@@ () { @java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ Str@@ ing man@@ ag@@ ed@@ String@@ ) { man@@ ag@@ ed@@ Str@@ ing.@@ set@@ Value@@ ("@@ *@@ *@@ /@@ *@@ .@@ c@@ "); } }); n@@ dk@@ Config.@@ get@@ C@@ p@@ p@@ File@@ P@@ attern@@ ().get@@ In@@ c@@ lu@@ des@@ ().@@ create@@ (@@ new org.@@ gradle.@@ api.@@ Action@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ String@@ >@@ () { @java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ Str@@ ing man@@ ag@@ ed@@ String@@ ) { man@@ ag@@ ed@@ Str@@ ing.@@ set@@ Value@@ ("@@ *@@ /@@ *@@ c@@ p@@ "); } }); n@@ dk@@ Config.@@ get@@ C@@ p@@ p@@ File@@ P@@ attern@@ ().get@@ In@@ c@@ lu@@ des@@ ().@@ create@@ (@@ new org.@@ gradle.@@ api.@@ Action@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ String@@ >@@ () { @java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ man@@ ag@@ ed.@@ Manag@@ ed@@ Str@@ ing man@@ ag@@ ed@@ String@@ ) { man@@ ag@@ ed@@ Str@@ ing.@@ set@@ Value@@ ("@@ *@@ /@@ *@@ .@@ cc@@ "); } }); if (@@ n@@ dk@@ Config.@@ get@@ St@@ l@@ ().@@ isEmpty@@ ()) { n@@ dk@@ Config.@@ set@@ St@@ l@@ (com.android.@@ build@@ .gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Ex@@ t@@ ension@@ Con@@ v@@ en@@ tion@@ .@@ DE@@ FA@@ UL@@ T_@@ S@@ T@@ L); } else { com.android.build.gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ St@@ l@@ Configur@@ ation.@@ check@@ St@@ l@@ (@@ n@@ dk@@ Config.@@ get@@ St@@ l@@ ()); } }
public com.android.@@ dex.@@ Method@@ Hand@@ le ad@@ j@@ u@@ st@@ (com.android.@@ dex.@@ Method@@ Hand@@ le method@@ Handle@@ ) { return new com.android.@@ dex.@@ Method@@ Handle@@ (@@ target@@ , method@@ Handle@@ .get@@ Method@@ Handle@@ Type@@ (), (m@@ ethod@@ Handle@@ .get@@ Method@@ Handle@@ Type@@ ().@@ is@@ Field@@ () ? ad@@ j@@ u@@ st@@ Field@@ (m@@ ethod@@ Handle@@ .get@@ Field@@ Or@@ Method@@ Id@@ ()) : ad@@ j@@ u@@ st@@ Method@@ (m@@ ethod@@ Handle@@ .get@@ Field@@ Or@@ Method@@ Id@@ ()))); }
public static short $@@ no@@ in@@ line@@ $@@ char@@ To@@ D@@ ouble@@ To@@ Short@@ (@@ char valu@@ e) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ (@@ short@@ ) (@@ (@@ do@@ ub@@ le@@ ) (@@ value@@ ))); }
private java.lang.String for@@ mat@@ Date@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ (java.lang.String f@@ m@@ t@@ ) { java.text.@@ Date@@ For@@ ma@@ t date@@ For@@ ma@@ t = new java.text.@@ Sim@@ ple@@ Date@@ Format@@ (f@@ m@@ t, java.util.@@ Loc@@ a@@ le.@@ US@@ ); libcore.@@ java.text.@@ Sim@@ ple@@ Date@@ Format@@ Test.@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ a@@ r c@@ al = new libcore.@@ java.text.@@ Sim@@ ple@@ Date@@ Format@@ Test.@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ (); c@@ al.@@ clear@@ (); c@@ al.@@ set@@ TimeZone@@ (@@ libcore.@@ java.text.@@ Sim@@ ple@@ Date@@ Format@@ Test.@@ UT@@ C@@ ); date@@ Format@@ .set@@ Cal@@ end@@ ar@@ (c@@ al@@ ); return date@@ Format@@ .@@ for@@ mat@@ (@@ new java.util.@@ Date@@ (0@@ )); }
private void update@@ Pri@@ or@@ ity@@ Q@@ ue@@ ue@@ (java.util.@@ Tim@@ er.@@ S@@ ch@@ ed@@ ule@@ d@@ T@@ as@@ k t@@ ask@@ Ex@@ ec@@ u@@ ted@@ , long time@@ F@@ in@@ is@@ h@@ ed@@ ) { synchronized@@ (s@@ ch@@ ed@@ ule@@ d@@ Task@@ Pri@@ or@@ ity@@ Q@@ ue@@ ue@@ ) { s@@ ch@@ ed@@ ule@@ d@@ Task@@ Pri@@ or@@ ity@@ Q@@ ue@@ u@@ e.@@ remove@@ (t@@ ask@@ Ex@@ ec@@ u@@ ted@@ ); if ((@@ t@@ ask@@ Ex@@ ec@@ u@@ ted@@ .@@ per@@ io@@ d@@ ) == null@@ ) { return@@ ; } t@@ ask@@ Ex@@ ec@@ u@@ ted@@ .@@ next@@ Ex@@ ec@@ uti@@ on = (t@@ ask@@ Ex@@ ec@@ u@@ ted@@ .@@ per@@ io@@ d@@ ) + (t@@ ask@@ Ex@@ ec@@ u@@ ted@@ .is@@ At@@ Fi@@ x@@ ed@@ R@@ ate ? t@@ ask@@ Ex@@ ec@@ u@@ ted@@ .@@ next@@ Ex@@ ec@@ uti@@ on : time@@ F@@ in@@ is@@ h@@ ed@@ ); s@@ ch@@ ed@@ ule@@ d@@ Task@@ Pri@@ or@@ ity@@ Q@@ ue@@ u@@ e.@@ add(@@ t@@ ask@@ Ex@@ ec@@ u@@ ted@@ ); } }
private void check@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ (in@@ X@@ , in@@ Y@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ F@@ mo@@ d@@ FloatFloat@@ Float@@ : " + (e.toString()))); } }
private static d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ Element@@ [] m@@ ake@@ Path@@ Element@@ s(@@ java.util.List<@@ java.io.File@@ > fil@@ es@@ , java.io.File o@@ pti@@ m@@ iz@@ ed@@ Directory@@ , java.util.List<@@ java.io.IO@@ Exception@@ > sup@@ pres@@ sed@@ Exception@@ s) { java.util.List<@@ d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ Element@@ > e@@ lement@@ s = new java.util.ArrayList<@@ >(); for (@@ java.io.File fi@@ le : fil@@ es) { java.io.File z@@ i@@ p = null@@ ; java.io.File di@@ r = new java.io.File@@ ("@@ "); d@@ al@@ vi@@ k.@@ system.@@ Dex@@ File dex = null@@ ; java.lang.String p@@ ath = file@@ .get@@ Path@@ (); java.lang.String name = file@@ .getName@@ (); if (p@@ ath.@@ contain@@ s(@@ d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ z@@ ip@@ Se@@ par@@ ator@@ )) { java.lang.String[] s@@ pli@@ t = path@@ .@@ s@@ pli@@ t@@ (d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ z@@ ip@@ Se@@ par@@ ator@@ , 2@@ ); z@@ i@@ p = new java.io.File@@ (s@@ pli@@ t@@ [0@@ ]@@ ); di@@ r = new java.io.File@@ (s@@ pli@@ t@@ [@@ 1@@ ]@@ ); } else if (@@ file.@@ is@@ Directory@@ ()) { e@@ lement@@ s.add@@ (@@ new d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ Element@@ (file@@ , true@@ , null@@ , null@@ )); } else if (@@ file.@@ is@@ File@@ ()) { if (@@ nam@@ e.@@ end@@ s@@ With@@ (d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ DE@@ X@@ _S@@ U@@ F@@ FI@@ X@@ )) { try { dex = d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ load@@ Dex@@ File@@ (file@@ , o@@ pti@@ m@@ iz@@ ed@@ Directory@@ ); } catch (java.io.IOException ex@@ ) { java.lang.System.@@ log@@ E@@ (("@@ Un@@ able to lo@@ ad dex file@@ : " + file@@ ), ex@@ ); } } else { z@@ i@@ p = file@@ ; try { dex = d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ load@@ Dex@@ File@@ (file@@ , o@@ pti@@ m@@ iz@@ ed@@ Directory@@ ); } catch (java.io.IOException sup@@ pres@@ sed@@ ) { sup@@ pres@@ sed@@ Exception@@ s.add@@ (s@@ up@@ pres@@ sed@@ ); } } } else { java.lang.System.@@ log@@ W@@ (("@@ Class@@ Load@@ er re@@ ference@@ d un@@ k@@ no@@ w@@ n path@@ : " + file@@ )); } if ((@@ z@@ i@@ p != null@@ ) || (@@ dex != null@@ )) { e@@ lement@@ s.add@@ (@@ new d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ Element@@ (d@@ ir@@ , false@@ , z@@ ip@@ , dex@@ )); } } return e@@ lement@@ s.@@ to@@ Array@@ (@@ new d@@ al@@ vi@@ k.@@ system.@@ Dex@@ Path@@ List.@@ Element@@ [@@ e@@ lement@@ s.@@ size@@ ()@@ ]@@ ); }
@javax.annotation.@@ N@@ on@@ null protected static com.android.sched.vfs.@@ Input@@ V@@ File get@@ Jack@@ File@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String type@@ Name@@ ) { try { assert (com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Jack@@ In@@ crement@@ al.@@ in@@ crement@@ al@@ Output@@ Library@@ ) != null@@ ; return com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Jack@@ In@@ crement@@ al.@@ in@@ crement@@ al@@ Output@@ Library@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , new com.android.sched.vfs.@@ V@@ Path@@ (@@ type@@ Name, com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Jack@@ In@@ crement@@ al.@@ file@@ Se@@ par@@ ator@@ )); } catch (com.android.jack.@@ library.@@ File@@ Type@@ Do@@ es@@ Not@@ Ex@@ ist@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (@@ e); } }
public native void f@@ s@@ ync@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
private android.@@ security.@@ net.@@ config.@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ E@@ n@@ try@@ Re@@ f parse@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ E@@ n@@ try@@ (android.content.@@ res@@ .@@ Xml@@ Resource@@ Par@@ se@@ r par@@ ser@@ ) throw@@ s android.@@ security.@@ net.@@ config.@@ Xml@@ Config@@ Source@@ .@@ Par@@ ser@@ Exception, java.io.IO@@ Exception, org.@@ xml@@ p@@ ul@@ l.@@ v@@ 1.@@ Xml@@ P@@ ull@@ Par@@ ser@@ Exception { boolean o@@ verrid@@ e@@ P@@ in@@ s = par@@ s@@ er.get@@ Attribute@@ Boole@@ an@@ Value@@ (@@ null@@ , "@@ o@@ verrid@@ e@@ P@@ in@@ s", false@@ ); int source@@ Id = par@@ s@@ er.get@@ Attribute@@ Resource@@ Value@@ (@@ null@@ , "@@ src@@ ", (-1@@ )); final java.lang.String source@@ Str@@ ing = par@@ s@@ er.get@@ Attribute@@ Value@@ (@@ null@@ , "@@ src@@ "); android.@@ security.@@ net.@@ config.@@ Cer@@ t@@ if@@ ic@@ ate@@ S@@ our@@ ce s@@ our@@ ce = null@@ ; if (s@@ ource@@ Str@@ ing == null@@ ) { throw new android.@@ security.@@ net.@@ config.@@ Xml@@ Config@@ Source@@ .@@ Par@@ ser@@ Exception(@@ par@@ ser@@ , "@@ cer@@ t@@ if@@ ic@@ ate@@ s e@@ lem@@ ent mis@@ s@@ ing s@@ r@@ c at@@ tribute@@ "); } if (s@@ ource@@ Id != (-1@@ )) { s@@ our@@ ce = new android.@@ security.@@ net.@@ config.@@ Resource@@ Cer@@ t@@ if@@ ic@@ ate@@ Source@@ (s@@ ource@@ Id, m@@ Context@@ ); } else if ("@@ s@@ ystem@@ "@@ .@@ equals(@@ source@@ String@@ )) { s@@ our@@ ce = android.@@ security.@@ net.@@ config.@@ System@@ Cer@@ t@@ if@@ ic@@ ate@@ Source@@ .get@@ Instance@@ (); } else if ("@@ user@@ "@@ .@@ equals(@@ source@@ String@@ )) { s@@ our@@ ce = android.@@ security.@@ net.@@ config.@@ User@@ Cer@@ t@@ if@@ ic@@ ate@@ Source@@ .get@@ Instance@@ (); } else { throw new android.@@ security.@@ net.@@ config.@@ Xml@@ Config@@ Source@@ .@@ Par@@ ser@@ Exception(@@ par@@ ser@@ , ("@@ Un@@ k@@ no@@ w@@ n cer@@ t@@ if@@ ic@@ ate@@ s src@@ . " + "@@ S@@ ho@@ ul@@ d b@@ e on@@ e of s@@ ystem@@ |@@ user@@ |@@ @@@ resource@@ Val@@ ")); } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Xml@@ Utils.@@ s@@ k@@ ip@@ Current@@ Tag@@ (@@ par@@ ser@@ ); return new android.@@ security.@@ net.@@ config.@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ E@@ n@@ try@@ Ref@@ (s@@ ource@@ , o@@ verrid@@ e@@ P@@ in@@ s); }
@@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ annotations.@@ Visi@@ ble@@ For@@ Test@@ ing public void process@@ S@@ end@@ D@@ t@@ m@@ f@@ (@@ int d@@ t@@ m@@ f@@ , android.@@ bluetooth.Bluetooth@@ Device device@@ ) { if (@@ de@@ vice == null@@ ) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ System@@ Interface@@ .@@ TAG, "@@ process@@ S@@ end@@ D@@ t@@ m@@ f de@@ vice is null@@ "); return@@ ; } if ((m@@ Phone@@ Prox@@ y@@ ) != null@@ ) { try { m@@ Phone@@ Prox@@ y.@@ send@@ D@@ t@@ m@@ f@@ (d@@ t@@ m@@ f@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ System@@ Interface@@ .@@ TAG, android.util.Log.@@ get@@ Stack@@ Tra@@ ce@@ String@@ (@@ new java.lang.@@ Throw@@ able@@ ())); } } else { android.util.Log.e@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ System@@ Interface@@ .@@ TAG, "@@ Hand@@ s@@ f@@ re@@ e phon@@ e pro@@ x@@ y null for send@@ ing D@@ T@@ M@@ F@@ "); } }
public void test@@ Get@@ Valu@@ es@@ 00@@ 2@@ _@@ Int@@ () { org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Stack@@ F@@ ram@@ e.@@ Stack@@ F@@ rame@@ T@@ es@@ ter tes@@ ter = new org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Stack@@ F@@ ram@@ e.@@ Stack@@ F@@ rame@@ Test@@ er(@@ "@@ break@@ p@@ o@@ int@@ Int@@ ", Stack@@ Tra@@ ce@@ 00@@ 2@@ Debug@@ ge@@ e.@@ IN@@ T_@@ SI@@ G@@ N@@ AL@@ ); org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Stack@@ F@@ ram@@ e.@@ Method@@ Info method@@ Info = test@@ er.@@ add@@ Test@@ Method@@ ("@@ run@@ B@@ reak@@ p@@ o@@ int@@ Int@@ "); method@@ Info.@@ add@@ Vari@@ able@@ ("@@ param@@ ", new org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Value@@ (@@ Stack@@ Tra@@ ce@@ 00@@ 2@@ Debug@@ ge@@ e.@@ IN@@ T_@@ P@@ AR@@ AM@@ _@@ VAL@@ UE@@ )); run@@ Stack@@ F@@ rame@@ Test@@ (@@ test@@ er@@ ); }
public long send@@ file@@ (java.io.FileDescriptor out@@ F@@ d, java.io.FileDescriptor in@@ F@@ d, android.util.@@ M@@ ut@@ able@@ Lon@@ g in@@ Offset@@ , long byte@@ Count@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void dis@@ po@@ se@@ (@@ int sub@@ s@@ cription@@ Id) { m@@ Recei@@ v@@ ed@@ Call@@ s.@@ add(@@ java.util.Arrays.@@ as@@ List@@ (android.@@ telephony.@@ cts.@@ em@@ b@@ m@@ st@@ est@@ app.@@ C@@ ts@@ Down@@ load@@ Service.@@ ME@@ TH@@ OD@@ _C@@ LO@@ SE@@ , sub@@ s@@ cription@@ Id@@ )); }
@java.lang.Override public void vi@@ si@@ t@@ (com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Co@@ u@@ n@@ try@@ Zone@@ T@@ re@@ e.@@ Zone@@ No@@ de no@@ de@@ ) { if ((@@ no@@ d@@ e.get@@ Par@@ ent@@ ()) == null@@ ) { return@@ ; } java.lang.String no@@ de@@ Name = en@@ qu@@ o@@ te@@ (@@ no@@ d@@ e.get@@ Id@@ ()); java.@@ tim@@ e.@@ In@@ stan@@ t start@@ In@@ stan@@ t = no@@ d@@ e.get@@ Start@@ In@@ stan@@ t@@ (); java.@@ tim@@ e.@@ In@@ stan@@ t end@@ In@@ stan@@ t = no@@ d@@ e.get@@ En@@ d@@ In@@ stan@@ t@@ (); boolean pri@@ or@@ ity@@ Clas@@ h = no@@ d@@ e.@@ has@@ Pri@@ or@@ ity@@ Clas@@ h@@ (); java.lang.String f@@ rom@@ Tim@@ est@@ am@@ p = start@@ In@@ stan@@ t.@@ toString@@ (); java.lang.String to@@ Tim@@ est@@ am@@ p = (@@ end@@ In@@ stan@@ t == null@@ ) ? "@@ .@@ .@@ .@@ " : end@@ In@@ stan@@ t.@@ toString@@ (); java.lang.String option@@ al@@ Co@@ lo@@ r = (@@ pri@@ or@@ ity@@ Clas@@ h@@ ) ? "@@ ,@@ col@@ or@@ =@@ \"@@ re@@ d@@ \"@@ " : "@@ "; java.lang.String l@@ ab@@ e@@ l = ((((@@ ((@@ no@@ d@@ e.get@@ Zone@@ Info@@ s@@ String@@ ()) + "@@ \n@@ From@@ =@@ ") + f@@ rom@@ Tim@@ est@@ am@@ p@@ ) + " to ") + to@@ Tim@@ est@@ am@@ p@@ ) + "@@ \n@@ Per@@ io@@ d count@@ =@@ ") + (@@ no@@ d@@ e.get@@ Per@@ io@@ d@@ Count@@ ()); write@@ Line@@ ((((@@ ((@@ no@@ de@@ Name + "@@ [@@ l@@ ab@@ el@@ =@@ \"@@ ") + l@@ ab@@ el@@ ) + "@@ \"@@ ") + option@@ al@@ Co@@ l@@ or@@ ) + "@@ ]@@ ;@@ ")); for (com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Co@@ u@@ n@@ try@@ Zone@@ T@@ re@@ e.@@ Zone@@ No@@ de ch@@ il@@ d : no@@ d@@ e.get@@ Ch@@ ild@@ r@@ en@@ ()) { write@@ Line@@ ((((@@ no@@ de@@ Name + " -@@ > ") + (@@ en@@ qu@@ o@@ te@@ (@@ ch@@ ild@@ .get@@ Id@@ ()))) + "@@ ;@@ ")); } }
@java.lang.Override protected java.util.@@ Set@@ <java.lang.String@@ > get@@ Default@@ Valu@@ es@@ () { com.android.@@ resources.@@ D@@ en@@ si@@ ty@@ [] value@@ s = com.android.@@ resources.@@ D@@ en@@ si@@ ty.@@ valu@@ es@@ (); java.util.@@ Set@@ <java.lang.String@@ > f@@ ull@@ Lis@@ t = com.google.common.@@ colle@@ ct.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ pec@@ ted@@ Size@@ (((@@ valu@@ es.@@ length) - 2@@ )); for (com.android.@@ resources.@@ D@@ en@@ si@@ t@@ y valu@@ e : valu@@ es) { if (((@@ valu@@ e != (com.android.@@ resources.@@ D@@ en@@ si@@ ty.@@ NO@@ D@@ P@@ I@@ )) && (@@ valu@@ e != (com.android.@@ resources.@@ D@@ en@@ si@@ ty.@@ AN@@ Y@@ D@@ P@@ I@@ ))) && (@@ valu@@ e.@@ is@@ Re@@ com@@ m@@ end@@ ed@@ ())) { f@@ ull@@ List.@@ add(@@ valu@@ e.get@@ Resource@@ Value@@ ()); } } java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ DE@@ FA@@ UL@@ T@@ : " + f@@ ull@@ List@@ )); return f@@ ull@@ List@@ ; }
private void update@@ Device@@ State@@ (@@ int event@@ Type, boolean state@@ ) { switch (@@ event@@ Typ@@ e) { case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Device@@ State@@ Monitor@@ .@@ EVEN@@ T_@@ S@@ C@@ RE@@ EN@@ _STA@@ TE_@@ CH@@ AN@@ G@@ E@@ D : if ((m@@ Is@@ S@@ cre@@ en@@ On@@ ) == state@@ ) return@@ ; m@@ Is@@ S@@ cre@@ en@@ O@@ n = state@@ ; break@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Device@@ State@@ Monitor@@ .@@ EVEN@@ T_@@ CH@@ AR@@ G@@ ING@@ _STA@@ TE_@@ CH@@ AN@@ G@@ E@@ D : if ((m@@ Is@@ Ch@@ arg@@ ing@@ ) == state@@ ) return@@ ; m@@ Is@@ Ch@@ arg@@ ing = state@@ ; send@@ Device@@ State@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ CH@@ AR@@ G@@ ING@@ _STA@@ TE@@ , m@@ Is@@ Ch@@ arg@@ ing@@ ); break@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Device@@ State@@ Monitor@@ .@@ EVEN@@ T_@@ TE@@ TH@@ ER@@ ING@@ _STA@@ TE_@@ CH@@ AN@@ G@@ E@@ D : if ((m@@ Is@@ T@@ ether@@ ing@@ On@@ ) == state@@ ) return@@ ; m@@ Is@@ T@@ ether@@ ing@@ O@@ n = state@@ ; break@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Device@@ State@@ Monitor@@ .@@ EVEN@@ T_@@ P@@ O@@ W@@ ER@@ _S@@ AV@@ E_@@ M@@ OD@@ E_@@ CH@@ AN@@ G@@ E@@ D : if ((m@@ Is@@ Po@@ w@@ er@@ S@@ a@@ ve@@ On@@ ) == state@@ ) return@@ ; m@@ Is@@ Po@@ w@@ er@@ S@@ a@@ ve@@ O@@ n = state@@ ; send@@ Device@@ State@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ P@@ O@@ W@@ ER@@ _S@@ AV@@ E_@@ M@@ O@@ DE@@ , m@@ Is@@ Po@@ w@@ er@@ S@@ a@@ ve@@ On@@ ); break@@ ; default : return@@ ; } if ((m@@ Is@@ Lo@@ w@@ Data@@ Ex@@ pec@@ ted@@ ) != (is@@ Lo@@ w@@ Data@@ Ex@@ pec@@ ted@@ ())) { m@@ Is@@ Lo@@ w@@ Data@@ Ex@@ pec@@ ted = !@@ (m@@ Is@@ Lo@@ w@@ Data@@ Ex@@ pec@@ ted@@ ); send@@ Device@@ State@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ LO@@ W@@ _@@ DA@@ TA@@ _@@ EX@@ P@@ EC@@ TED@@ , m@@ Is@@ Lo@@ w@@ Data@@ Ex@@ pec@@ ted@@ ); } int new@@ Fil@@ ter = 0; if (!@@ (s@@ ho@@ ul@@ d@@ T@@ ur@@ n@@ O@@ ff@@ Sign@@ al@@ Str@@ ength@@ ())) { new@@ Fil@@ ter |@@ = android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ In@@ d@@ ic@@ ation@@ Fil@@ ter.@@ SI@@ G@@ N@@ AL@@ _S@@ T@@ RE@@ N@@ G@@ TH@@ ; } if (!@@ (s@@ ho@@ ul@@ d@@ T@@ ur@@ n@@ O@@ ff@@ F@@ ull@@ Network@@ Up@@ date@@ ())) { new@@ Fil@@ ter |@@ = android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ In@@ d@@ ic@@ ation@@ Fil@@ ter.@@ F@@ UL@@ L@@ _N@@ E@@ T@@ W@@ OR@@ K@@ _STA@@ TE@@ ; } if (!@@ (s@@ ho@@ ul@@ d@@ T@@ ur@@ n@@ O@@ ff@@ D@@ or@@ man@@ c@@ y@@ Up@@ date@@ ())) { new@@ Fil@@ ter |@@ = android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ In@@ d@@ ic@@ ation@@ Fil@@ ter.@@ DA@@ TA@@ _C@@ AL@@ L_@@ D@@ OR@@ M@@ AN@@ C@@ Y@@ _C@@ H@@ AN@@ G@@ ED@@ ; } if (!@@ (s@@ ho@@ ul@@ d@@ T@@ ur@@ n@@ O@@ ff@@ Link@@ Cap@@ ac@@ ity@@ E@@ s@@ tim@@ ate@@ ())) { new@@ Fil@@ ter |@@ = android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 2.@@ In@@ d@@ ic@@ ation@@ Fil@@ ter.@@ L@@ IN@@ K@@ _C@@ AP@@ AC@@ ITY@@ _@@ E@@ S@@ TI@@ MA@@ TE@@ ; } set@@ Un@@ s@@ ol@@ Response@@ Filter@@ (@@ new@@ Filter@@ , false@@ ); }
@java.lang.Override protected void te@@ ar@@ Down@@ () throw@@ s java.lang.Exception { super@@ .@@ te@@ ar@@ Down@@ (); m@@ Context.@@ close@@ Dat@@ ab@@ ase@@ (); }
boolean send@@ Track@@ Change@@ With@@ Id@@ (@@ boolean request@@ ing@@ , @@@ android.@@ annotation.@@ Null@@ able com.android.bluetooth.@@ avrcp.@@ Media@@ Contro@@ lle@@ r media@@ Control@@ ler@@ ) { if (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, ((("@@ send@@ Track@@ Change@@ With@@ Id (@@ " + request@@ ing@@ ) + "@@ )@@ : cont@@ ro@@ lle@@ r ") + media@@ Control@@ ler@@ )); byte@@ [] tr@@ ack@@ ; long q@@ id = get@@ Active@@ Q@@ ue@@ ue@@ Item@@ Id@@ (m@@ edia@@ Control@@ ler@@ ); if ((@@ !@@ request@@ ing@@ ) && (@@ q@@ id == (m@@ L@@ ast@@ Track@@ Id@@ S@@ ent@@ ))) { if (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, ("@@ not send@@ ing d@@ up@@ li@@ cat@@ e tr@@ ac@@ k chan@@ ge@@ d id " + q@@ id@@ )); return false@@ ; } tr@@ ac@@ k = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ (@@ Av@@ rc@@ p@@ Constants.@@ U@@ ID@@ _S@@ I@@ Z@@ E@@ ).@@ put@@ Long@@ (@@ q@@ id@@ ).@@ array@@ (); if (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, ("@@ tr@@ ack@@ Changed@@ Rs@@ p@@ : 0@@ x@@ " + (com.android.bluetooth.@@ Uti@@ l@@ s@@ .@@ byte@@ Array@@ To@@ String(@@ tr@@ ack@@ )))); int tr@@ ack@@ Changed@@ N@@ T = Av@@ rc@@ p@@ Constants.@@ NO@@ TI@@ F@@ IC@@ A@@ TION_@@ TYPE_@@ CH@@ AN@@ G@@ ED@@ ; if (@@ request@@ ing@@ ) tr@@ ack@@ Changed@@ N@@ T = Av@@ rc@@ p@@ Constants.@@ NO@@ TI@@ F@@ IC@@ A@@ TION_@@ TYPE_@@ IN@@ TER@@ I@@ M@@ ; m@@ Media@@ Interface@@ .@@ tr@@ ack@@ Changed@@ Rs@@ p@@ (@@ tr@@ ack@@ Changed@@ N@@ T, tr@@ ack@@ ); m@@ L@@ ast@@ Track@@ Id@@ S@@ ent = q@@ id@@ ; return tr@@ ack@@ Changed@@ N@@ T == (@@ Av@@ rc@@ p@@ Constants.@@ NO@@ TI@@ F@@ IC@@ A@@ TION_@@ TYPE_@@ CH@@ AN@@ G@@ ED@@ ); }
@java.lang.Override public boolean get@@ Gener@@ ate@@ P@@ n@@ g@@ s() { return model.@@ get@@ Gener@@ ate@@ P@@ n@@ g@@ s(); }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.@@ ja@@ y@@ ce.@@ Method@@ No@@ de get@@ N@@ Node@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d load@@ ed@@ ) throw@@ s com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Format@@ Exception, com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Version@@ Exception, java.io.IOException { com.android.jack.@@ ja@@ y@@ ce.@@ Method@@ No@@ de method@@ No@@ de = n@@ no@@ d@@ e.get@@ (); if ((m@@ ethod@@ No@@ de == null@@ ) || ((m@@ ethod@@ No@@ d@@ e.get@@ Level@@ ()) != (@@ Node@@ Level.@@ F@@ UL@@ L@@ ))) { com.android.jack.@@ ja@@ y@@ ce.@@ Dec@@ l@@ ar@@ ed@@ Type@@ No@@ de dec@@ l@@ ar@@ ed@@ Type@@ No@@ de = enc@@ lo@@ sing@@ Class@@ Load@@ er.get@@ N@@ Node@@ (@@ Node@@ Level.@@ F@@ UL@@ L, load@@ ed@@ .get@@ En@@ c@@ lo@@ sing@@ Type@@ ().get@@ Session@@ ()); method@@ No@@ de = dec@@ l@@ ar@@ ed@@ Type@@ No@@ d@@ e.get@@ Method@@ Node@@ (@@ load@@ ed@@ ); } return method@@ Node@@ ; }
@java.lang.Override public void send@@ Device@@ State@@ (@@ int state@@ Type, boolean state@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ S@@ EN@@ D_@@ DE@@ VIC@@ E_@@ STA@@ TE@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " ") + state@@ Typ@@ e) + "@@ :@@ ") + state@@ )); } try { radioProx@@ y.@@ send@@ Device@@ State@@ (rr@@ .m@@ Ser@@ ial@@ , state@@ Type, state@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ send@@ Device@@ State@@ ", e); } } }
public int io@@ ct@@ l@@ Flag@@ s(@@ java.io.FileDescriptor f@@ d, java.lang.String int@@ er@@ face@@ Name@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@org.junit.Test public void core@@ To@@ J@@ ay@@ ce@@ From@@ Folder@@ () throw@@ s java.lang.Exception { com.android.@@ j@@ il@@ l.@@ Option@@ s option@@ s = new com.android.@@ j@@ il@@ l.@@ Option@@ s(); option@@ s.@@ set@@ Bin@@ ary@@ File@@ (@@ new java.io.File@@ ((@@ (com.android.jack.@@ test.@@ Test@@ s@@ Properties@@ .get@@ Android@@ Root@@ Dir@@ ().get@@ Path@@ ()) + "@@ /@@ out@@ /@@ target@@ /@@ common@@ /@@ ob@@ j@@ /@@ J@@ AV@@ A@@ _@@ L@@ I@@ B@@ R@@ AR@@ I@@ E@@ S@@ /@@ core@@ _@@ int@@ er@@ m@@ ed@@ i@@ at@@ es@@ /@@ class@@ es@@ /@@ "@@ ))); option@@ s.@@ set@@ Ver@@ bo@@ se@@ (@@ true@@ ); option@@ s.@@ contain@@ er = Cont@@ ain@@ er@@ Type.@@ DI@@ R@@ ; option@@ s.@@ output@@ Dir@@ Or@@ Z@@ i@@ p = com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ TestTools.@@ create@@ Temp@@ Dir@@ ("@@ core@@ _@@ ", "@@ _@@ d@@ ir@@ "); new com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ (o@@ ption@@ s, "@@ 0.@@ 1@@ ").@@ process@@ (o@@ ption@@ s.get@@ Bin@@ ary@@ File@@ ()); }
@org.junit.Test public void test@@ 00@@ 1@@ c@@ () throw@@ s java.lang.Exception { java.io.File jack@@ Out@@ put = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); run@@ Test@@ 00@@ 1@@ (@@ jack@@ Output@@ , "@@ ke@@ e@@ p@@ -@@ fi@@ r@@ st@@ ", er@@ r@@ Out@@ , false@@ , false@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y output@@ Li@@ b = null@@ ; try { output@@ Li@@ b = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Input@@ Jack@@ Library@@ From@@ Dir@@ (@@ jack@@ Output@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 1 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 1@@ _P@@ A@@ TH@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 2 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 2@@ _P@@ A@@ TH@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 3 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 3@@ _P@@ A@@ TH@@ ); check@@ J@@ ay@@ ce@@ Not@@ Empty@@ (m@@ y@@ Class@@ 1); check@@ J@@ ay@@ ce@@ Not@@ Empty@@ (m@@ y@@ Class@@ 2@@ ); check@@ J@@ ay@@ ce@@ Not@@ Empty@@ (m@@ y@@ Class@@ 3@@ ); } catch (com.android.jack.@@ library.@@ File@@ Type@@ Do@@ es@@ Not@@ Ex@@ ist@@ Exception e) { junit.framework.Assert.@@ fail@@ (); } final@@ l@@ y { if (@@ output@@ Li@@ b != null@@ ) { output@@ Lib@@ .@@ close(); } junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ O@@ u@@ t.@@ toString@@ ().@@ isEmpty@@ ()); } }
@java.lang.Override protected void on@@ Pre@@ Ex@@ ec@@ ute@@ () { m@@ Bit@@ ma@@ p = get@@ Bit@@ m@@ ap@@ (); m@@ Reference@@ Bit@@ ma@@ p = android.@@ ho@@ lo@@ .@@ cts.@@ Bit@@ m@@ ap@@ As@@ set@@ s.get@@ Bit@@ m@@ ap@@ (get@@ Application@@ Context@@ (), m@@ Bit@@ m@@ ap@@ Name); final float to@@ ler@@ an@@ ce = 0.@@ 0@@ 1@@ F@@ ; m@@ S@@ am@@ e = com@@ par@@ e@@ To@@ (m@@ Bit@@ m@@ ap@@ , m@@ Bit@@ m@@ ap@@ , to@@ ler@@ an@@ ce@@ ); }
private void check@@ Element@@ (@@ java.io.File file@@ , org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Elem@@ ent e@@ lement@@ , java.util.Map@@ <java.lang.String, com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info@@ > m@@ ap@@ ) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Nam@@ ed@@ Node@@ Ma@@ p at@@ tribute@@ s = e@@ lem@@ ent.get@@ At@@ tri@@ b@@ ut@@ es@@ (); for (@@ int i = 0, n = at@@ tri@@ b@@ ut@@ es@@ .get@@ Length@@ (); i < n@@ ; i++) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ At@@ t@@ r at@@ tri@@ b@@ ut@@ e = ((@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ At@@ tr@@ ) (@@ at@@ tri@@ b@@ ut@@ es.@@ i@@ tem@@ (i@@ ))); java.lang.String ur@@ i = at@@ tribute@@ .get@@ Nam@@ es@@ p@@ a@@ ce@@ UR@@ I@@ (); java.lang.String name = at@@ tribute@@ .get@@ Local@@ Name@@ (); java.lang.String valu@@ e = at@@ tribute@@ .get@@ Value@@ (); if (com.android.@@ Sdk@@ Constants.@@ AN@@ D@@ RO@@ ID@@ _@@ UR@@ I@@ .@@ equals(@@ ur@@ i@@ )) { com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info in@@ fo = m@@ ap@@ .get@@ (@@ name@@ ); if (in@@ fo == null@@ ) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ((@@ (("@@ W@@ ar@@ n@@ ing@@ : Un@@ k@@ no@@ w@@ n at@@ tri@@ b@@ ut@@ e '@@ " + name@@ ) + "@@ ' in ") + file@@ )); return@@ ; } if (!@@ (in@@ fo@@ .is@@ Valid@@ (@@ value@@ , null@@ , null@@ ))) { if ((@@ nam@@ e.@@ equal@@ s("@@ d@@ ur@@ ation@@ ")) || (@@ nam@@ e.@@ equal@@ s("@@ ex@@ it@@ F@@ ad@@ e@@ D@@ ur@@ ation@@ "@@ ))) { return@@ ; } java.lang.String mess@@ age = ((((@@ ((("@@ I@@ n fi@@ le " + (file@@ .get@@ Path@@ ())) + "@@ :@@ \n@@ Co@@ ul@@ d not valid@@ ate valu@@ e \"@@ ") + valu@@ e) + "@@ \@@ " for at@@ tri@@ b@@ ut@@ e \@@ '@@ ") + name@@ ) + "@@ ' wh@@ er@@ e th@@ e at@@ tri@@ b@@ ut@@ e in@@ fo h@@ a@@ s for@@ mat@@ s ") + (in@@ fo@@ .get@@ Format@@ s@@ ())) + "@@ \n@@ "; java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ \n@@ " + message@@ )); fail@@ (m@@ ess@@ age@@ ); } if (((@@ valu@@ e.@@ start@@ s@@ With@@ ("@@ @@@ ")) || (@@ valu@@ e.@@ start@@ s@@ With@@ ("@@ ?@@ "@@ ))) && (!@@ (in@@ fo@@ .get@@ Format@@ s@@ ().@@ contain@@ s(@@ Format@@ .@@ RE@@ F@@ ER@@ EN@@ CE@@ )@@ ))) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ((((@@ (("@@ W@@ ar@@ n@@ ing@@ : F@@ o@@ un@@ d resour@@ ce re@@ feren@@ ce for at@@ tri@@ b@@ ut@@ e " + name@@ ) + " wh@@ i@@ ch do@@ es@@ n@@ 't al@@ lo@@ w re@@ ference@@ s ("@@ ) + (in@@ fo@@ .get@@ Format@@ s@@ ())) + "@@ )@@ : valu@@ e w@@ a@@ s ") + value@@ )); } } } } }
private static void start@@ Activity@@ Monitor@@ ing@@ () { if (!(@@ com@@ .@@ int@@ el@@ li@@ j@@ .@@ int@@ er@@ n@@ al.@@ stati@@ s@@ ti@@ c.@@ St@@ ati@@ s@@ ti@@ c@@ s@@ Up@@ load@@ As@@ si@@ stan@@ t.@@ is@@ S@@ end@@ Al@@ low@@ ed@@ ())) { return@@ ; } com@@ .@@ int@@ el@@ li@@ j.@@ con@@ curr@@ enc@@ y.@@ J@@ ob@@ S@@ ch@@ ed@@ ul@@ er.get@@ S@@ ch@@ ed@@ ul@@ er@@ ().@@ s@@ ch@@ ed@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { private int m@@ L@@ ast@@ Count@@ ; @java.lang.Override public void run@@ () { int coun@@ t = com@@ .@@ int@@ el@@ li@@ j.@@ ide.@@ Activity@@ Track@@ er.get@@ Instance@@ ().get@@ Count@@ (); if (@@ coun@@ t > (m@@ L@@ ast@@ Count@@ )) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ # of action@@ s@@ : " + action@@ s@@ )); } m@@ L@@ ast@@ Coun@@ t = count@@ ; } }@@ , 2@@ 0, 2@@ 0, java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ); }
@java.lang.Override public synchronized void on@@ Load@@ Ch@@ ild@@ r@@ en@@ (@@ final java.lang.String parent@@ Media@@ Id, final com.android.bluetooth.@@ a@@ 2@@ d@@ ps@@ in@@ k@@ .m@@ b@@ s.@@ Result@@ <@@ java.util.List<@@ android.@@ media.@@ b@@ row@@ s@@ e.@@ Media@@ B@@ row@@ ser.@@ Media@@ Item@@ >@@ > result@@ ) { if ((m@@ Av@@ rc@@ p@@ C@@ tr@@ l@@ S@@ r@@ v@@ c@@ ) == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ ps@@ in@@ k@@ .m@@ b@@ s.@@ A@@ 2@@ dp@@ Media@@ B@@ row@@ ser@@ Service.TAG, "@@ AV@@ R@@ C@@ P not y@@ et connec@@ ted@@ .@@ "); result.@@ send@@ Result@@ (java.util.@@ Collection@@ s.@@ e@@ mpty@@ List@@ ()); return@@ ; } if (com.android.bluetooth.@@ a@@ 2@@ d@@ ps@@ in@@ k@@ .m@@ b@@ s.@@ A@@ 2@@ dp@@ Media@@ B@@ row@@ ser@@ Service.@@ DBG) android.util.Log.d@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ ps@@ in@@ k@@ .m@@ b@@ s.@@ A@@ 2@@ dp@@ Media@@ B@@ row@@ ser@@ Service.TAG, ("@@ on@@ Load@@ Ch@@ ild@@ re@@ n parent@@ Media@@ Id@@ =@@ " + parent@@ Media@@ Id@@ )); if (!(m@@ Av@@ rc@@ p@@ C@@ tr@@ l@@ S@@ r@@ v@@ c@@ .get@@ Ch@@ ild@@ r@@ en@@ (m@@ A@@ 2@@ dp@@ Device@@ , parent@@ Media@@ Id, 0, 25@@ 5@@ ))) { result.@@ send@@ Result@@ (java.util.@@ Collection@@ s.@@ e@@ mpty@@ List@@ ()); return@@ ; } synchronized@@ (@@ this@@ ) { m@@ Par@@ ent@@ Id@@ To@@ Request@@ Map@@ .@@ put@@ (@@ parent@@ Media@@ Id, result@@ ); } result.@@ d@@ et@@ ach@@ (); }
@org.junit.Test public void add@@ Provider@@ With@@ In@@ valid@@ Cre@@ denti@@ al@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ Configur@@ ation con@@ fig = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ Configuration@@ (); config.@@ ho@@ m@@ e@@ S@@ p = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ H@@ om@@ e@@ S@@ P@@ (); config.@@ ho@@ m@@ e@@ S@@ p.@@ f@@ q@@ d@@ n = com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ ManagerTest.@@ TEST_@@ F@@ Q@@ D@@ N@@ ; config.@@ ho@@ m@@ e@@ S@@ p.@@ f@@ ri@@ end@@ ly@@ Name = com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ ManagerTest.@@ TEST_@@ F@@ R@@ I@@ EN@@ D@@ L@@ Y@@ _N@@ AME@@ ; config.@@ cre@@ denti@@ al = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al@@ (); config.@@ cre@@ denti@@ al.@@ re@@ al@@ m = com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ ManagerTest.@@ TEST_@@ RE@@ AL@@ M@@ ; config.@@ cre@@ denti@@ al.@@ user@@ Cre@@ denti@@ al = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al.@@ User@@ Cre@@ denti@@ al@@ (); config.@@ cre@@ denti@@ al.@@ user@@ Cre@@ denti@@ al.@@ user@@ name = "@@ user@@ name@@ "; config.@@ cre@@ denti@@ al.@@ user@@ Cre@@ denti@@ al.@@ p@@ ass@@ wor@@ d = "@@ p@@ ass@@ wor@@ d@@ "; config.@@ cre@@ denti@@ al.@@ user@@ Cre@@ denti@@ al.@@ e@@ ap@@ Type = android.net.@@ w@@ if@@ i.@@ E@@ AP@@ Constants.@@ E@@ AP@@ _@@ T@@ L@@ S@@ ; config.@@ cre@@ denti@@ al.@@ user@@ Cre@@ denti@@ al.@@ n@@ on@@ E@@ ap@@ In@@ ner@@ M@@ etho@@ d = "@@ MS@@ -@@ CH@@ AP@@ "; assert@@ False@@ (m@@ Manager.@@ add@@ Provider@@ (@@ config@@ )); }
public android.system.@@ Str@@ u@@ ct@@ Time@@ va@@ l get@@ s@@ ock@@ op@@ t@@ Time@@ val@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void end@@ Tra@@ ce@@ Se@@ ed@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Fi@@ el@@ d field@@ ) { com@@ po@@ sed@@ Statu@@ s.@@ po@@ p@@ (); }
public native void m@@ k@@ f@@ if@@ o@@ (java.lang.String path@@ , int mode@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public boolean is@@ File@@ Type@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Input@@ V@@ File v@@ ) { return v@@ .getName@@ ().@@ end@@ s@@ With@@ (get@@ File@@ Ex@@ t@@ ension@@ ()); }
public static int $@@ no@@ in@@ line@@ $@@ Sub@@ Ne@@ g@@ 2@@ (@@ int arg@@ 1, int arg@@ 2@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } int tem@@ p = -@@ arg@@ 1; return (@@ tem@@ p - arg@@ 2@@ ) | (@@ tem@@ p - arg@@ 2@@ ); }
@java.lang.Override public long get@@ Tag@@ Bit@@ s() { long t@@ ag@@ Bit@@ s = com.android.jack.@@ ec@@ j.@@ load@@ er.@@ ja@@ st.@@ Annot@@ ation@@ Utils.@@ get@@ Tag@@ Bit@@ s(@@ j@@ Dec@@ l@@ ar@@ ed@@ Type@@ ); com.android.jack.ir.ast.J@@ Class@@ Or@@ Inter@@ face enc@@ lo@@ sing@@ Type = j@@ Dec@@ l@@ ar@@ ed@@ Typ@@ e.get@@ En@@ c@@ lo@@ sing@@ Type@@ (); if (((@@ enc@@ lo@@ sing@@ Type != null@@ ) && (!(@@ is@@ An@@ on@@ y@@ mo@@ us@@ ()))) && (@@ enc@@ lo@@ sing@@ Type instanceof com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Interface@@ )) { com.android.jack.@@ ec@@ j.@@ load@@ er.@@ ja@@ st.@@ J@@ A@@ st@@ Bin@@ ary@@ Type enc@@ lo@@ s@@ ing = class@@ path@@ Loc@@ ation.@@ find@@ Type@@ ((@@ (com.android.jack.@@ ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Interface@@ ) (@@ enc@@ lo@@ sing@@ Type@@ ))); if (@@ enc@@ lo@@ s@@ ing != null@@ ) { if (com.android.jack.@@ ec@@ j.@@ load@@ er.@@ ja@@ st.@@ Load@@ er@@ Utils.@@ is@@ De@@ pre@@ cat@@ ed@@ (@@ enc@@ lo@@ sing@@ )) { t@@ ag@@ Bit@@ s |@@ = org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ lo@@ ok@@ up@@ .@@ Extra@@ Comp@@ il@@ er@@ Mo@@ d@@ if@@ ier@@ s.@@ Ac@@ c@@ De@@ pre@@ cat@@ ed@@ Imp@@ lic@@ it@@ ly@@ ; } } return t@@ ag@@ Bit@@ s; }
private static native void native@@ D@@ raw@@ Ver@@ ti@@ ces@@ (@@ long native@@ Can@@ va@@ s, int mode@@ , int n@@ , float@@ [] ver@@ t@@ s, int ver@@ t@@ Offset@@ , float@@ [] tex@@ s, int tex@@ Offset@@ , int@@ [] col@@ or@@ s, int col@@ or@@ Offset@@ , short@@ [] ind@@ ic@@ es@@ , int index@@ Offset@@ , int index@@ Count@@ , long native@@ P@@ a@@ int@@ );
static void $@@ no@@ in@@ line@@ $@@ s@@ om@@ e@@ St@@ ati@@ c@@ Method@@ (java.lang.@@ I@@ ter@@ able@@ <@@ ?@@ > it@@ ) { it.@@ i@@ terator@@ (); if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ ("@@ "); } }
public void set@@ Sup@@ p@@ Service@@ In@@ d@@ ic@@ ation@@ (android.os.@@ Handle@@ r h@@ , int wh@@ at@@ , java.lang.Object ob@@ j@@ ) { m@@ S@@ s@@ In@@ d@@ ic@@ ation@@ Reg@@ is@@ tr@@ an@@ t = new android.os.@@ Reg@@ is@@ tr@@ ant@@ (@@ h@@ , wh@@ at@@ , ob@@ j@@ ); }
@java.lang.Override protected void dum@@ p@@ (java.io.FileDescriptor f@@ d, java.io.@@ P@@ r@@ int@@ W@@ rite@@ r w@@ ri@@ ter@@ , java.lang.String[] arg@@ s) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ D@@ U@@ M@@ P@@ , com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.@@ TAG@@ ); if ((@@ args.@@ length) > 0) { de@@ bug@@ Log@@ (("@@ dum@@ ps@@ y@@ s arg@@ ument@@ s, ch@@ ec@@ k for pro@@ to output@@ : " + (android.@@ text.@@ Text@@ Utils.@@ j@@ o@@ in@@ (@@ " ", arg@@ s@@ )))); if (@@ arg@@ s@@ [0@@ ]@@ .@@ start@@ s@@ With@@ ("@@ --@@ pro@@ to@@ ")) { if (@@ arg@@ s@@ [0@@ ]@@ .@@ equal@@ s("@@ --@@ pro@@ to@@ -@@ java@@ -@@ b@@ in@@ ")) { dum@@ p@@ Java@@ (f@@ d@@ ); } else { dum@@ p@@ Native@@ (f@@ d, arg@@ s); } return@@ ; } w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ B@@ luetoo@@ th Status@@ "); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ((@@ " enable@@ d@@ : " + (is@@ Enabled@@ ()))); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ((@@ " state@@ : " + (get@@ State@@ ()))); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ((@@ " addres@@ s@@ : " + (get@@ Address@@ ()))); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ (((@@ " name@@ : " + (get@@ Name@@ ())) + "@@ \n@@ ")); w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ B@@ on@@ de@@ d de@@ vices@@ :@@ "); for (android.bluetooth.Bluetooth@@ Device de@@ vice : get@@ B@@ ond@@ ed@@ De@@ vices@@ ()) { w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ((((@@ ((@@ " " " " + (device@@ .get@@ Address@@ ())) + " [@@ ") + (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.@@ DE@@ VIC@@ E_@@ TYPE_@@ N@@ AME@@ S@@ [@@ device@@ .get@@ Type@@ ()@@ ]@@ )) + "@@ ] ") + (device@@ .getName@@ ()))); } java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); synchronized@@ (m@@ Pro@@ fil@@ es) { for (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Profile@@ Ser@@ vice pro@@ fi@@ le : m@@ Pro@@ fil@@ es) { pro@@ file.@@ dum@@ p@@ (s@@ b@@ ); } } w@@ ri@@ ter.@@ write@@ (s@@ b.@@ toString@@ ()); w@@ ri@@ ter.@@ f@@ lu@@ sh@@ (); dum@@ p@@ Native@@ (f@@ d, arg@@ s); }
public void dis@@ connect@@ In@@ d@@ ic@@ ation@@ (@@ int to@@ k@@ en@@ , int result@@ Code@@ ) { android.util.Log.d@@ (com.android.bluetooth.@@ s@@ ap.@@ S@@ ap@@ R@@ il@@ Recei@@ ver.@@ TAG, ((("@@ dis@@ connect@@ In@@ d@@ ic@@ ation@@ : to@@ ke@@ n " + to@@ k@@ en@@ ) + " result@@ Co@@ de ") + result@@ Code@@ )); com.android.bluetooth.@@ s@@ ap.@@ S@@ ap@@ Message s@@ ap@@ Message = new com.android.bluetooth.@@ s@@ ap.@@ S@@ ap@@ Message@@ (@@ S@@ ap@@ Mess@@ age.@@ ID@@ _@@ TR@@ AN@@ S@@ F@@ ER_@@ A@@ UT@@ H@@ ); s@@ ap@@ Mess@@ age.@@ set@@ Result@@ Code@@ (@@ result@@ Code@@ ); remove@@ On@@ go@@ ing@@ Re@@ q@@ And@@ S@@ end@@ Message@@ (@@ to@@ k@@ en@@ , s@@ ap@@ Message@@ ); }
public void test@@ O@@ ver@@ lay@@ 1@@ Content@@ () throw@@ s java.lang.Exception { java.io.File pro@@ ject = build@@ Project@@ ("@@ o@@ ver@@ lay@@ 1@@ ", Base@@ P@@ lu@@ gin@@ .@@ G@@ R@@ AD@@ L@@ E_@@ M@@ IN@@ _@@ V@@ E@@ RS@@ I@@ ON@@ ); java.io.File d@@ raw@@ able@@ Out@@ put = new java.io.File@@ (pro@@ ject@@ , (("@@ build@@ /@@ " + (com.android.@@ build@@ .gradle.@@ Base@@ P@@ lu@@ gin@@ .@@ F@@ D_@@ I@@ )) + "@@ /@@ res@@ /@@ de@@ bug@@ /@@ d@@ raw@@ able@@ ")); com.android.build.gradle.@@ Man@@ ual@@ Build@@ Test.@@ check@@ Image@@ Co@@ l@@ or@@ (d@@ raw@@ able@@ Output@@ , "@@ no@@ _@@ o@@ ver@@ la@@ y.@@ p@@ n@@ g@@ ", com.android.build.gradle.@@ Man@@ ual@@ Build@@ Test.@@ G@@ RE@@ EN@@ ); com.android.build.gradle.@@ Man@@ ual@@ Build@@ Test.@@ check@@ Image@@ Co@@ l@@ or@@ (d@@ raw@@ able@@ Output@@ , "@@ type@@ _@@ o@@ ver@@ la@@ y.@@ p@@ n@@ g@@ ", com.android.build.gradle.@@ Man@@ ual@@ Build@@ Test.@@ G@@ RE@@ EN@@ ); }
protected void final@@ iz@@ e@@ () { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ F@@ in@@ aliz@@ er st@@ ar@@ ted an@@ d s@@ p@@ in@@ n@@ ing.@@ .@@ .@@ "); int j = 0; long start@@ ; long end@@ ; st@@ ar@@ t = java.lang.System.@@ n@@ an@@ o@@ Time@@ (); for (@@ int i = 0; i < 1@@ 0000@@ 00@@ ; i++) j@@ ++@@ ; en@@ d = java.lang.System.@@ n@@ an@@ o@@ Time@@ (); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ F@@ in@@ aliz@@ er do@@ n@@ e s@@ p@@ in@@ n@@ ing.@@ "); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ F@@ in@@ aliz@@ er s@@ le@@ e@@ p@@ ing for@@ e@@ ve@@ r no@@ w@@ .@@ "); while (@@ true@@ ) { Main.@@ s@@ n@@ oo@@ z@@ e@@ (1@@ 0000@@ ); } }
public static java.lang.String get@@ J@@ vm@@ Arg@@ () { java.lang.String build@@ Di@@ r = java.lang.@@ System@@ .get@@ en@@ v@@ ("@@ PRO@@ J@@ EC@@ T_@@ BU@@ IL@@ D_@@ DI@@ R@@ "); build@@ Di@@ r = (@@ build@@ Di@@ r == null@@ ) ? "@@ build@@ " : build@@ Dir@@ ; java.io.File ja@@ co@@ co@@ co@@ co@@ co@@ A@@ g@@ ent = new java.io.File@@ (@@ build@@ Dir@@ , "@@ ja@@ co@@ co@@ /@@ ag@@ ent.@@ ja@@ r@@ "); if (!(@@ ja@@ co@@ A@@ g@@ ent.@@ is@@ File@@ ())) { try { org.@@ ja@@ co@@ co@@ co@@ .@@ ag@@ ent.@@ A@@ g@@ ent@@ J@@ ar.@@ ex@@ tr@@ act@@ To@@ (@@ ja@@ co@@ co@@ co@@ A@@ g@@ ent@@ ); } catch (java.io.IOException ign@@ or@@ ed@@ ) { fail@@ ("@@ Error ex@@ tr@@ act@@ ing ja@@ co@@ c@@ o ag@@ ent@@ "); } } java.lang.String j@@ vm@@ Arg@@ s = ((("@@ -@@ java@@ ag@@ ent@@ :@@ " + (@@ ja@@ co@@ A@@ g@@ ent.@@ toString@@ ())) + "@@ =@@ d@@ est@@ file@@ =@@ ") + build@@ Dir@@ ) + "@@ /@@ ja@@ co@@ co@@ co@@ /@@ test.@@ exec@@ "; return j@@ vm@@ Arg@@ s; }
private static android.net.Network@@ State build@@ Mo@@ b@@ ile@@ IP@@ v@@ 4@@ U@@ ps@@ tr@@ eam@@ State@@ () { return com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ build@@ Mo@@ b@@ ile@@ U@@ ps@@ tr@@ eam@@ State@@ (@@ true@@ , false@@ , false@@ ); }
public com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ G@@ rid@@ Lay@@ out@@ Builder s@@ p@@ ac@@ ing@@ (@@ int s) { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ G@@ rid@@ Lay@@ out@@ Build@@ er.@@ m@@ G@@ L@@ .@@ verti@@ cal@@ S@@ p@@ ac@@ ing = s; com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ G@@ rid@@ Lay@@ out@@ Build@@ er.@@ m@@ G@@ L@@ .@@ h@@ or@@ iz@@ on@@ t@@ al@@ S@@ p@@ ac@@ ing = s; return this@@ ; }
@java.lang.Override public boolean check@@ For@@ Con@@ di@@ tion@@ () { boolean con@@ di@@ tion = false@@ ; boolean is@@ Su@@ c@@ ces@@ s = m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ M@@ atch@@ es@@ ("@@ (@@ ?@@ i@@ )@@ n@@ o th@@ an@@ k@@ s(@@ ?@@ -@@ i@@ )@@ "@@ )).@@ wait@@ For@@ Ex@@ ist@@ s(@@ java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LIS@@ EC@@ ON@@ D@@ S@@ .@@ con@@ ver@@ t@@ (@@ 3@@ L, java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ )); try { if (is@@ Su@@ ccess@@ ) { m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ M@@ atch@@ es@@ ("@@ (@@ ?@@ i@@ )@@ n@@ o th@@ an@@ k@@ s(@@ ?@@ -@@ i@@ )@@ "@@ )).@@ c@@ li@@ ck@@ (); con@@ di@@ tion = true@@ ; } is@@ Su@@ c@@ ces@@ s = m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ M@@ atch@@ es@@ ("@@ (@@ ?@@ i@@ )@@ continue@@ (@@ ?@@ -@@ i@@ )@@ "@@ )).@@ wait@@ For@@ Ex@@ ist@@ s(@@ java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LIS@@ EC@@ ON@@ D@@ S@@ .@@ con@@ ver@@ t@@ (@@ 3@@ L, java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ )); if (is@@ Su@@ ccess@@ ) { m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ M@@ atch@@ es@@ ("@@ (@@ ?@@ i@@ )@@ continue@@ (@@ ?@@ -@@ i@@ )@@ "@@ )).@@ c@@ li@@ ck@@ (); con@@ di@@ tion = true@@ ; } } catch (android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Object@@ Not@@ F@@ ound@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ ("@@ Faile@@ d to dis@@ mis@@ s th@@ e AP@@ I De@@ mo@@ s Test con@@ fi@@ r@@ m@@ ation po@@ pu@@ p di@@ alo@@ g@@ s@@ "); } return con@@ di@@ tion@@ ; }
@@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Not@@ Null @java.lang.Override public com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ P@@ si@@ Element@@ Visi@@ tor build@@ Visi@@ tor@@ (@@ @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Not@@ Null final com@@ .@@ int@@ el@@ li@@ j.@@ code@@ In@@ spec@@ tion@@ .@@ Pro@@ b@@ lem@@ s@@ H@@ ol@@ der ho@@ l@@ der@@ , boolean is@@ On@@ Th@@ e@@ F@@ ly@@ ) { return new com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ En@@ dp@@ o@@ int@@ P@@ si@@ Element@@ Visi@@ tor@@ () { @java.lang.Override public void vi@@ si@@ t@@ Annot@@ ation@@ (@@ com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ P@@ si@@ Annot@@ ation annot@@ ation@@ ) { if (!(@@ annot@@ ation@@ .get@@ Q@@ u@@ al@@ if@@ i@@ ed@@ Name@@ ().@@ equals(@@ G@@ ct@@ Constants.@@ AP@@ P@@ _@@ EN@@ G@@ IN@@ E_@@ AN@@ NO@@ TA@@ TION_@@ AP@@ I@@ ))) { return@@ ; } com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ P@@ si@@ Annot@@ ation@@ M@@ em@@ ber@@ Value annot@@ ation@@ M@@ em@@ ber@@ Value = annotation.@@ find@@ Attribute@@ Value@@ (@@ com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ Api@@ Name@@ In@@ spec@@ tion@@ .@@ AP@@ I@@ _N@@ AM@@ E_@@ AT@@ TR@@ I@@ BU@@ TE@@ ); if (@@ annot@@ ation@@ M@@ em@@ ber@@ Value == null@@ ) { return@@ ; } java.lang.String name@@ Value@@ With@@ Q@@ u@@ o@@ te@@ s = annot@@ ation@@ M@@ em@@ ber@@ Valu@@ e.get@@ Text@@ (); java.lang.String name@@ Value = com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ util.@@ En@@ dp@@ o@@ int@@ Uti@@ li@@ ties.@@ remove@@ B@@ e@@ gin@@ n@@ ing@@ And@@ En@@ d@@ ing@@ Q@@ u@@ o@@ tes@@ (@@ name@@ Value@@ With@@ Q@@ u@@ o@@ tes@@ ); if (!(@@ com.google.g@@ ct@@ .@@ int@@ el@@ li@@ j.@@ end@@ p@@ o@@ int@@ s.@@ valid@@ ation.@@ Api@@ Name@@ In@@ spec@@ tion@@ .@@ AP@@ I@@ _N@@ AM@@ E_@@ P@@ AT@@ TER@@ N@@ .@@ match@@ er(@@ name@@ Value@@ ).@@ match@@ es@@ ())) { ho@@ l@@ d@@ er.@@ register@@ Pro@@ b@@ lem@@ (@@ annot@@ ation@@ , "@@ In@@ va@@ li@@ d ap@@ i name@@ . Th@@ e ap@@ i name m@@ us@@ t mat@@ ch '@@ [@@ a@@ -@@ z@@ ]@@ +@@ [@@ A@@ -@@ Z@@ a@@ -@@ z@@ 0@@ -@@ 9@@ ]@@ *@@ '@@ ", Local@@ Q@@ ui@@ ck@@ Fi@@ x.@@ E@@ M@@ P@@ TY@@ _@@ AR@@ R@@ A@@ Y); } } }; }
private void register@@ All@@ App@@ Event@@ s() { for (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ Appli@@ c@@ ation ap@@ p : m@@ Uicc@@ Application@@ s) { if (@@ ap@@ p != null@@ ) { log@@ ("@@ register@@ Uicc@@ Card@@ Event@@ s@@ : register@@ ing for EVEN@@ T_@@ AP@@ P@@ _RE@@ AD@@ Y@@ "); app.@@ register@@ For@@ Read@@ y@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Pro@@ file.@@ EVEN@@ T_@@ AP@@ P@@ _RE@@ AD@@ Y@@ , null@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Record@@ s i@@ r = app@@ .get@@ Icc@@ Record@@ s(); if (i@@ r != null@@ ) { log@@ ("@@ register@@ Uicc@@ Card@@ Event@@ s@@ : register@@ ing for EVEN@@ T_@@ RE@@ C@@ OR@@ D@@ S_@@ LOA@@ DE@@ D@@ "); ir.@@ register@@ For@@ Record@@ s@@ Load@@ ed@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Pro@@ file.@@ EVEN@@ T_@@ RE@@ C@@ OR@@ D@@ S_@@ LOA@@ DE@@ D@@ , null@@ ); ir.@@ register@@ For@@ Record@@ s@@ Event@@ s@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Pro@@ file.@@ EVEN@@ T_@@ IC@@ C@@ _RE@@ C@@ OR@@ D_@@ EVEN@@ T@@ S@@ , null@@ ); } } }
@java.lang.Override public void in@@ itializ@@ e@@ (@@ int key@@ size@@ , java.security.@@ Sec@@ ure@@ R@@ an@@ do@@ m r@@ an@@ do@@ m@@ ) { final java.lang.String name = org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ EC@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ .@@ SIZ@@ E_@@ TO@@ _C@@ UR@@ V@@ E_@@ N@@ AME@@ .get@@ (@@ key@@ siz@@ e); if (@@ name == null@@ ) { throw new java.security.@@ In@@ valid@@ Parameter@@ Exception(("@@ un@@ k@@ no@@ w@@ n ke@@ y siz@@ e " + key@@ size@@ )); } gro@@ u@@ p = org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ EC@@ Gro@@ up@@ Contex@@ t.get@@ C@@ ur@@ ve@@ By@@ Name@@ (@@ name@@ ); }
private boolean connect@@ Socket@@ () { try { if ((m@@ P@@ se@@ R@@ ec@@ ) == null@@ ) { android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ TAG, ("@@ connect@@ Socket@@ : U@@ U@@ ID@@ : " + (@@ Bluetooth@@ U@@ uid@@ .@@ P@@ B@@ AP@@ _P@@ SE@@ .get@@ U@@ uid@@ ()))); m@@ S@@ ock@@ et = m@@ Device.@@ create@@ R@@ f@@ com@@ m@@ Socket@@ To@@ Service@@ Record@@ (@@ Bluetooth@@ U@@ uid@@ .@@ P@@ B@@ AP@@ _P@@ SE@@ .get@@ U@@ uid@@ ()); } else if ((m@@ P@@ se@@ R@@ ec@@ .get@@ L@@ 2@@ cap@@ P@@ sm@@ ()) != (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ L@@ 2@@ C@@ AP@@ _@@ IN@@ VAL@@ ID@@ _P@@ S@@ M@@ )) { android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ TAG, ("@@ connect@@ Socket@@ : P@@ S@@ M@@ : " + (m@@ P@@ se@@ R@@ ec@@ .get@@ L@@ 2@@ cap@@ P@@ sm@@ ()))); m@@ S@@ ock@@ et = m@@ Device.@@ create@@ L@@ 2@@ cap@@ Socket@@ (m@@ P@@ se@@ R@@ ec@@ .get@@ L@@ 2@@ cap@@ P@@ sm@@ ()); } else { android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ TAG, ("@@ connect@@ Socket@@ : chan@@ nel@@ : " + (m@@ P@@ se@@ R@@ ec@@ .get@@ R@@ f@@ com@@ m@@ Channel@@ Number@@ ()))); m@@ S@@ ock@@ et = m@@ Device.@@ create@@ R@@ f@@ com@@ m@@ Socket@@ (m@@ P@@ se@@ R@@ ec@@ .get@@ R@@ f@@ com@@ m@@ Channel@@ Number@@ ()); } if ((m@@ Socket@@ ) != null@@ ) { m@@ Socket@@ .@@ connect@@ (); return true@@ ; } else { android.util.Log.@@ w@@ (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ TAG, "@@ Co@@ ul@@ d not cre@@ ate s@@ ocket@@ "); return false@@ ; } } catch (java.io.IOException e) { android.util.Log.e@@ (com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ TAG, "@@ Error while connect@@ ing s@@ ocket@@ ", e); return false@@ ; } }
void to@@ g@@ g@@ g@@ le@@ M@@ ute@@ () { if (m@@ Call@@ s@@ Manager.@@ has@@ E@@ merg@@ enc@@ y@@ Call@@ ()) { android.telecom.@@ Log.@@ v@@ (@@ this@@ , "@@ ign@@ or@@ ing to@@ g@@ g@@ g@@ le@@ M@@ ut@@ e for em@@ erg@@ enc@@ y call@@ "); return@@ ; } m@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ send@@ Message@@ With@@ Session@@ Info@@ (@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ TO@@ G@@ G@@ L@@ E_@@ M@@ U@@ TE@@ ); }
public native void set@@ s@@ ock@@ op@@ t@@ Byte@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ , int valu@@ e) throw@@ s android.system.@@ Errno@@ Exception;
@org.junit.Test public void test@@ Class@@ Imp@@ lement@@ s@@ T@@ w@@ o@@ Inter@@ fa@@ ces@@ With@@ S@@ ame@@ De@@ f@@ ender@@ Method@@ () throw@@ s java.lang.Exception { run@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 3@@ 4@@ ); }
@java.lang.Override public boolean run@@ () { synchronized@@ (m@@ Lock) { m@@ Ex@@ ec@@ uti@@ on@@ Th@@ re@@ ad = java.lang.@@ Thread@@ .@@ current@@ Thread@@ (); if (m@@ Can@@ ce@@ lle@@ d@@ ) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ i@@ ("@@ P@@ y@@ th@@ on pro@@ ces@@ s w@@ a@@ s can@@ ce@@ lle@@ d b@@ e@@ for@@ e be@@ ing aw@@ a@@ i@@ ted@@ .@@ "); return false@@ ; } } boolean su@@ ccess@@ ; try { su@@ c@@ ces@@ s = (m@@ Pro@@ ces@@ s.@@ wait@@ For@@ ()) == 0; com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ i@@ ("@@ P@@ y@@ th@@ on pro@@ ces@@ s ter@@ min@@ ate@@ s n@@ or@@ m@@ all@@ y.@@ "); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ i@@ ("@@ P@@ y@@ th@@ on pro@@ ces@@ s is int@@ er@@ rup@@ ted@@ .@@ "); } return su@@ ccess@@ ; }
@java.lang.Override public void on@@ Activity@@ Result@@ (@@ int request@@ , int result@@ , android.content.@@ Int@@ ent data@@ ) { if (@@ requ@@ est == (@@ com.@@ android@@ .@@ package@@ in@@ stall@@ er.@@ Package@@ In@@ stall@@ er@@ Ac@@ tivity.@@ RE@@ Q@@ UE@@ ST_@@ EN@@ ABL@@ E_@@ UN@@ K@@ NO@@ W@@ N@@ _S@@ O@@ UR@@ CE@@ S@@ )) { if ((@@ result == (@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ )) && (is@@ Un@@ k@@ no@@ wn@@ S@@ ources@@ Enabled@@ ())) { in@@ iti@@ ate@@ In@@ stall@@ (); } else { fin@@ is@@ h@@ (); } }
public char get@@ Min@@ us@@ Sign@@ () { return min@@ us@@ Sign@@ .@@ char@@ At@@ (@@ 0); }
private static java.nio.Byte@@ Buff@@ er get@@ Android@@ M@@ an@@ if@@ est@@ From@@ Apk@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce apk@@ , com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Utils.@@ Zip@@ Sec@@ tion@@ s z@@ ip@@ Sec@@ tion@@ s) throw@@ s com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception, com.android.@@ apk@@ si@@ g.@@ z@@ i@@ p.@@ Zip@@ Format@@ Exception, java.io.IOException { java.util.List<@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ C@@ en@@ tr@@ al@@ Directory@@ Record@@ > c@@ d@@ Record@@ s = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 1.@@ V@@ 1@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ parse@@ Zip@@ C@@ en@@ tr@@ al@@ Directory@@ (@@ apk@@ , z@@ ip@@ Sec@@ tion@@ s); java.nio.Byte@@ Buff@@ er result = com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er.get@@ Android@@ M@@ an@@ if@@ est@@ From@@ Apk@@ (c@@ d@@ Record@@ s, ap@@ k.@@ s@@ li@@ ce@@ (@@ 0, z@@ ip@@ Sec@@ tion@@ s.get@@ Zip@@ C@@ en@@ tr@@ al@@ Directory@@ Offset@@ ())); if (@@ result == null@@ ) { throw new com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception("@@ M@@ is@@ s@@ ing Android@@ M@@ an@@ if@@ est.@@ xml@@ "); } return result@@ ; }
@org.junit.Test public void test@@ F@@ Su@@ f@@ fix@@ () { int channe@@ l = mock@@ Log@@ ic@@ al@@ Channel@@ Res@@ pon@@ s@@ es@@ ("@@ B@@ F@@ 2@@ D@@ 1@@ 4@@ A@@ 0@@ 12@@ E@@ 3@@ 10@@ 5@@ A@@ 0@@ A@@ 8@@ 9@@ 6@@ 7@@ 0000@@ 00@@ 4@@ 5@@ 2@@ 3@@ F@@ 9@@ F@@ 7@@ 00@@ 10@@ 1@@ 9@@ 00@@ 0@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info@@ []@@ > result@@ Cap@@ tor = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Test.@@ Result@@ Cap@@ tor@@ <@@ >(); m@@ E@@ uic@@ c@@ Card@@ .get@@ All@@ Pro@@ fil@@ es@@ (); assert@@ Equal@@ s(@@ 1, pro@@ fil@@ es.@@ length); assert@@ Equal@@ s("@@ 9@@ 8@@ 7@@ 6@@ 0000@@ 0000@@ 00@@ 5@@ 4@@ 32@@ ", pro@@ fil@@ es@@ [0@@ ]@@ .get@@ Icc@@ id@@ ()); assert@@ Equal@@ s(@@ Profile@@ State.@@ EN@@ ABL@@ ED@@ , pro@@ fil@@ es@@ [0@@ ]@@ .get@@ State@@ ()); ve@@ r@@ if@@ y@@ Store@@ Data@@ (@@ chan@@ nel@@ , "@@ B@@ F@@ 2@@ D@@ 0@@ D@@ 5@@ C@@ 0@@ B@@ 5@@ A@@ 9@@ 0@@ 9@@ 1@@ 9@@ 2@@ B@@ 7@@ 9@@ F@@ 7@@ 0@@ 9@@ 5@@ 9@@ 5@@ 99@@ B@@ F@@ 7@@ 6@@ "); }
@java.lang.Override public void get@@ H@@ ardwar@@ e@@ Config@@ (android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ G@@ E@@ T_@@ H@@ AR@@ D@@ W@@ AR@@ E_@@ CON@@ FI@@ G@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); try { radioProx@@ y@@ .get@@ H@@ ardwar@@ e@@ Config@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ get@@ H@@ ardwar@@ e@@ Config@@ ", e); } } }
@java.lang.Override protected javax.@@ sw@@ ing.@@ I@@ co@@ n get@@ Set@@ I@@ con@@ (@@ boolean is@@ M@@ u@@ ted@@ ) { return i@@ con@@ s.@@ G@@ oog@@ le@@ C@@ lo@@ ud@@ Too@@ l@@ s@@ I@@ con@@ s.@@ C@@ LO@@ U@@ D_@@ B@@ RE@@ A@@ K@@ P@@ O@@ IN@@ T@@ ; }
private static <@@ K@@ , V extends java.lang.@@ Comp@@ ar@@ able@@ <@@ V@@ >@@ > void check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ N@@ a@@ vi@@ g@@ able@@ Map@@ _@@ key@@ And@@ Value@@ Collection@@ s(@@ java.util.@@ N@@ a@@ vi@@ g@@ able@@ Map@@ <@@ K@@ , V@@ > m@@ ap@@ , java.util.List<@@ K@@ > ke@@ ys@@ In@@ Or@@ der@@ , java.util.List<@@ V@@ > valu@@ es@@ In@@ Or@@ der@@ , K ab@@ s@@ ent@@ Key@@ ) { java.util.List<@@ K@@ > re@@ ver@@ se@@ Key@@ s = libcore.@@ java.util.Collection@@ s@@ Test.@@ re@@ ver@@ se@@ Co@@ py@@ Of@@ (@@ ke@@ ys@@ In@@ Or@@ der@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ Set@@ (m@@ ap.@@ key@@ Set@@ (), ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ or@@ der@@ ed@@ Set@@ (m@@ ap.@@ key@@ Set@@ (), ke@@ ys@@ In@@ Or@@ der@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ N@@ a@@ vi@@ g@@ able@@ Set@@ (m@@ ap.@@ n@@ a@@ vi@@ g@@ able@@ Key@@ Set@@ (), ke@@ ys@@ In@@ Or@@ der@@ , ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ N@@ a@@ vi@@ g@@ able@@ Set@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ des@@ c@@ end@@ ing@@ Key@@ Set@@ (), ke@@ ys@@ In@@ Or@@ der@@ , ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ N@@ a@@ vi@@ g@@ able@@ Set@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Key@@ Set@@ (), re@@ ver@@ se@@ Ke@@ ys@@ , ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ Set@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ key@@ Set@@ (), ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ or@@ der@@ ed@@ Set@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ key@@ Set@@ (), re@@ ver@@ se@@ Ke@@ ys@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ N@@ a@@ vi@@ g@@ able@@ Set@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ n@@ a@@ vi@@ g@@ able@@ Key@@ Set@@ (), re@@ ver@@ se@@ Ke@@ ys@@ , ab@@ s@@ ent@@ Key@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ Or@@ der@@ ed@@ Collection@@ (m@@ ap.@@ valu@@ es@@ (), valu@@ es@@ In@@ Or@@ der@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ or@@ der@@ ed@@ Collection@@ (m@@ ap.@@ valu@@ es@@ (), valu@@ es@@ In@@ Or@@ der@@ ); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ un@@ mo@@ d@@ if@@ i@@ able@@ Or@@ der@@ ed@@ Collection@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ valu@@ es@@ (), libcore.@@ java.util.Collection@@ s@@ Test.@@ re@@ ver@@ se@@ Co@@ py@@ Of@@ (@@ valu@@ es@@ In@@ Or@@ der@@ )); libcore.@@ java.util.Collection@@ s@@ Test.@@ check@@ _@@ or@@ der@@ ed@@ Collection@@ (m@@ ap.@@ des@@ c@@ end@@ ing@@ Map@@ ().@@ valu@@ es@@ (), libcore.@@ java.util.Collection@@ s@@ Test.@@ re@@ ver@@ se@@ Co@@ py@@ Of@@ (@@ valu@@ es@@ In@@ Or@@ der@@ )); }
private static void add@@ St@@ y@@ le@@ To@@ Path@@ (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ Le@@ a@@ ve@@ No@@ de path@@ , java.lang.String valu@@ e) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E, ("@@ St@@ y@@ le fo@@ un@@ d is " + value@@ )); if (@@ valu@@ e != null@@ ) { java.lang.String[] par@@ t@@ s = valu@@ e.@@ s@@ pli@@ t@@ ("@@ ;@@ "); for (@@ int k = (@@ par@@ ts.@@ length) - 1; k >@@ = 0; k@@ --@@ ) { java.lang.String sub@@ St@@ y@@ le = par@@ ts@@ [@@ k@@ ]; java.lang.String[] name@@ Value = sub@@ St@@ y@@ le.@@ s@@ pli@@ t@@ ("@@ :@@ "); if ((((@@ name@@ Valu@@ e.@@ length) == 2@@ ) && ((@@ name@@ Value@@ [0@@ ]@@ ) != null@@ )) && ((@@ name@@ Value@@ [@@ 1@@ ]@@ ) != null@@ )) { if (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ pres@@ ent@@ ation@@ Map@@ .@@ contain@@ s@@ Key@@ (@@ name@@ Value@@ [0@@ ]@@ )) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ fil@@ l@@ P@@ res@@ ent@@ ation@@ At@@ tri@@ b@@ ut@@ es@@ (p@@ ath@@ , name@@ Value@@ [0@@ ]@@ , name@@ Value@@ [@@ 1@@ ]@@ ); } else if (@@ name@@ Value@@ [0@@ ]@@ .@@ equal@@ s@@ (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ S@@ V@@ G@@ _@@ OP@@ AC@@ ITY@@ )) { com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ fil@@ l@@ P@@ res@@ ent@@ ation@@ At@@ tri@@ b@@ ut@@ es@@ (p@@ ath@@ , com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ S@@ v@@ g@@ 2@@ V@@ ec@@ tor.@@ S@@ V@@ G@@ _@@ F@@ IL@@ L_@@ OP@@ AC@@ ITY@@ , name@@ Value@@ [@@ 1@@ ]@@ ); } } } } }
private boolean process@@ Ar@@ ch@@ i@@ ve@@ (@@ java.io.File file@@ ) throw@@ s java.io.IOException { java.util.@@ z@@ i@@ p.@@ Zip@@ File z@@ i@@ p = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (file@@ ); java.io.@@ ByteArray@@ Output@@ Stream b@@ a@@ o@@ s = new java.io.@@ ByteArray@@ Output@@ Stream@@ (@@ 4@@ 0000@@ ); byte@@ [] bu@@ f = new byte@@ [@@ 2@@ 0000@@ ]; boolean an@@ y = false@@ ; java.util.ArrayList<@@ ? extends java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ > en@@ tri@@ es@@ Lis@@ t = java.util.Collection@@ s.@@ list@@ (@@ z@@ i@@ p.@@ en@@ tri@@ es@@ ()); if (s@@ ort@@ ) { java.util.Collection@@ s.@@ s@@ ort@@ (@@ en@@ tri@@ es@@ List@@ , new java.util.@@ Comp@@ ar@@ ator@@ <@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ >@@ () { public int com@@ par@@ e@@ (java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try a@@ , java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try b@@ ) { return com.android.@@ dx.@@ c@@ f.@@ di@@ re@@ ct.@@ Class@@ Path@@ Open@@ er.@@ com@@ par@@ e@@ Class@@ Nam@@ es(@@ a@@ .getName@@ (), b@@ .getName@@ ()); } }); } cons@@ um@@ er.@@ on@@ Process@@ Ar@@ ch@@ i@@ ve@@ Start@@ (file@@ ); for (java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try on@@ e : en@@ tri@@ es@@ List@@ ) { final boolean is@@ Dire@@ ctor@@ y = on@@ e.@@ is@@ Directory@@ (); java.lang.String p@@ ath = on@@ e.get@@ Name@@ (); if (@@ fil@@ ter.@@ ac@@ ce@@ p@@ t@@ (p@@ ath@@ )) { final byte@@ [] byte@@ s; if (!@@ is@@ Directory@@ ) { java.io.@@ Input@@ Stream in = z@@ ip@@ .get@@ InputStream@@ (@@ on@@ e); b@@ a@@ os.@@ res@@ et@@ (); for (@@ ; ;@@ ) { int am@@ t = in@@ .@@ read@@ (@@ bu@@ f@@ ); if (@@ am@@ t < 0) { break@@ ; } b@@ a@@ os.@@ write@@ (@@ bu@@ f@@ , 0, am@@ t@@ ); } in@@ .@@ close(); byte@@ s = b@@ a@@ os.@@ to@@ ByteArray@@ (); } else { byte@@ s = new byte@@ [0@@ ]; } an@@ y |@@ = cons@@ um@@ er.@@ process@@ File@@ Bytes@@ (p@@ ath@@ , on@@ e.get@@ Time@@ (), byte@@ s); } z@@ i@@ p.@@ close(); return any@@ ; }
@java.lang.Override public java.lang.String toString@@ () { return ((((@@ ((@@ (("@@ Apk@@ Info@@ {@@ " + "@@ m@@ Package@@ Name@@ =@@ '@@ ") + (m@@ Package@@ Name@@ )) + '@@ \@@ '@@ ) + ", m@@ Version@@ Code@@ =@@ ") + (m@@ Version@@ Code@@ )) + ", m@@ Version@@ Name@@ =@@ '@@ ") + (m@@ Version@@ Name@@ )) + '@@ \@@ '@@ ) + '@@ }@@ '@@ ; }
@com.android.annotations.NonNull private com.android.@@ m@@ an@@ if@@ merger.@@ I@@ Merg@@ er@@ Log.@@ File@@ And@@ Lin@@ e xml@@ File@@ And@@ Line@@ (@@ @com.android.annotations.NonNull org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de no@@ de@@ , @com.android.annotations.@@ Null@@ able java.lang.String default@@ Name@@ ) { java.lang.String name = xml@@ File@@ Name@@ (@@ no@@ de@@ , default@@ Name); int lin@@ e = com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Utils.@@ ex@@ tr@@ act@@ Line@@ Number@@ (@@ no@@ de@@ ); return new com.android.@@ m@@ an@@ if@@ merger.@@ I@@ Merg@@ er@@ Log.@@ File@@ And@@ Line@@ (@@ name@@ , line@@ ); }
public static native int EV@@ P@@ _M@@ D@@ _C@@ T@@ X_@@ copy@@ (@@ long d@@ st@@ _@@ ct@@ x@@ , long src@@ _@@ ct@@ x@@ );
@com.android.annotations.NonNull com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Pro@@ duct@@ Flavor@@ Data@@ <@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ C@@ ore@@ Pro@@ duct@@ Flavor@@ > get@@ Default@@ Config@@ ();
@org.junit.Test public void test@@ 00@@ 4@@ () throw@@ s java.lang.Exception { java.lang.String t@@ est = "@@ com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ test@@ 00@@ 4@@ "; java.lang.String a@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 00@@ 4@@ /@@ A@@ ;@@ "; com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Comp@@ il@@ ation@@ Proper@@ ti@@ es pro@@ per@@ ti@@ es = default@@ Properties@@ (); compile@@ And@@ Valid@@ ate@@ Typ@@ es(@@ test@@ , pro@@ per@@ ties@@ , new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Valid@@ ator@@ s@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ ("@@ check@@ ()@@ I@@ ", new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ Id@@ ter@@ al@@ vi@@ k@@ Code@@ Valid@@ ator@@ (@@ resource@@ , "@@ A@@ .@@ check@@ .@@ no@@ -@@ j@@ ls.@@ d@@ al@@ vi@@ k@@ "@@ )@@ )))); pro@@ per@@ ti@@ es = pro@@ per@@ ties.@@ w@@ ith@@ P@@ res@@ er@@ ve@@ J@@ l@@ s@@ (@@ true@@ ); compile@@ And@@ Valid@@ ate@@ Typ@@ es(@@ test@@ , pro@@ per@@ ties@@ , new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ ("@@ check@@ ()@@ I@@ ", new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Method@@ D@@ al@@ vi@@ k@@ Code@@ Valid@@ ator@@ (@@ resource@@ (@@ test@@ , "@@ A@@ .@@ check@@ .@@ j@@ ls.@@ d@@ al@@ vi@@ k@@ "@@ )@@ )))); }
boolean colle@@ ct@@ For@@ ce@@ St@@ op@@ Provider@@ s(@@ java.lang.String name@@ , int app@@ Id, boolean do@@ it@@ , boolean ev@@ en@@ Per@@ si@@ st@@ ent@@ , int user@@ Id, java.util.ArrayList<@@ com.android.server.@@ am@@ .@@ Content@@ Provider@@ Record@@ > result@@ ) { boolean d@@ id@@ S@@ om@@ et@@ h@@ ing = false@@ ; if (@@ name != null@@ ) { d@@ id@@ S@@ om@@ et@@ h@@ ing = colle@@ ct@@ For@@ ce@@ St@@ op@@ Provider@@ s@@ Lock@@ ed@@ (@@ name@@ , app@@ Id, do@@ it@@ , ev@@ en@@ Per@@ si@@ st@@ ent@@ , user@@ Id, m@@ S@@ ing@@ let@@ on@@ By@@ Class@@ , result@@ ); } if ((@@ !@@ do@@ it@@ ) && d@@ id@@ S@@ om@@ et@@ h@@ ing@@ ) { return true@@ ; } if (@@ user@@ Id == (android.os.@@ User@@ Hand@@ le.@@ US@@ ER_@@ AL@@ L@@ )) { for (@@ int i = 0; i < (m@@ Provider@@ s@@ By@@ Class@@ Per@@ U@@ ser.@@ size@@ ()); i++) { if (@@ colle@@ ct@@ For@@ ce@@ St@@ op@@ Provider@@ s@@ Lock@@ ed@@ (@@ name@@ , app@@ Id, do@@ it@@ , ev@@ en@@ Per@@ si@@ st@@ ent@@ , user@@ Id, m@@ Provider@@ s@@ By@@ Class@@ Per@@ U@@ ser.@@ value@@ At@@ (i@@ ), result@@ )) { if (@@ !@@ do@@ it@@ ) { return true@@ ; } d@@ id@@ S@@ om@@ et@@ h@@ ing = true@@ ; } } else { java.util.@@ Hash@@ Map@@ <@@ android.content.@@ Comp@@ on@@ ent@@ Name, com.android.server.@@ am@@ .@@ Content@@ Provider@@ Record@@ > i@@ tem@@ s = get@@ Provider@@ s@@ By@@ Clas@@ s(@@ user@@ Id); if (i@@ tem@@ s != null@@ ) { d@@ id@@ S@@ om@@ et@@ h@@ ing |@@ = colle@@ ct@@ For@@ ce@@ St@@ op@@ Provider@@ s@@ Lock@@ ed@@ (@@ name@@ , app@@ Id, do@@ it@@ , ev@@ en@@ Per@@ si@@ st@@ ent@@ , user@@ Id, i@@ tem@@ s, result@@ ); } } return d@@ id@@ S@@ om@@ et@@ h@@ ing@@ ; }
public void set@@ S@@ ur@@ face@@ Text@@ ure@@ (android.@@ g@@ raphic@@ s.@@ S@@ ur@@ face@@ Text@@ ur@@ e s@@ ur@@ face@@ Text@@ ure@@ ) { if (s@@ ur@@ face@@ Text@@ ur@@ e == null@@ ) { throw new java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception("@@ s@@ ur@@ face@@ Text@@ ur@@ e m@@ us@@ t not b@@ e null@@ "); } if ((m@@ S@@ ur@@ face@@ ) != null@@ ) { m@@ S@@ ur@@ face@@ .@@ re@@ le@@ ase@@ (); } m@@ S@@ ur@@ face = s@@ ur@@ face@@ Text@@ ure@@ ; if ((@@ (m@@ View@@ Flag@@ s) & (@@ V@@ I@@ SI@@ B@@ IL@@ ITY@@ _M@@ A@@ S@@ K@@ )) == (@@ V@@ I@@ SI@@ BL@@ E@@ )) { m@@ S@@ ur@@ face@@ .set@@ On@@ F@@ rame@@ A@@ va@@ il@@ able@@ Listener@@ (m@@ Up@@ date@@ Listener@@ ); } m@@ Up@@ date@@ S@@ ur@@ face = true@@ ; in@@ valid@@ ate@@ Par@@ ent@@ I@@ f@@ Ne@@ ed@@ (); }
private void create@@ P@@ ag@@ es@@ () { m@@ Av@@ d@@ Manager@@ P@@ age = new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Av@@ d@@ Manager@@ P@@ age@@ (m@@ P@@ ag@@ es@@ Root@@ Comp@@ o@@ si@@ te@@ , m@@ Up@@ dat@@ er@@ Data@@ ); if ((@@ java.lang.@@ System@@ .get@@ en@@ v@@ ("@@ AN@@ D@@ RO@@ ID@@ _S@@ D@@ K@@ M@@ AN@@ _@@ EX@@ P@@ ")) != null@@ ) { m@@ Pack@@ ag@@ es@@ P@@ age = new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age@@ (m@@ P@@ ag@@ es@@ Root@@ Comp@@ o@@ si@@ te@@ , m@@ Up@@ dat@@ er@@ Data@@ ); } else { m@@ Local@@ Package@@ P@@ age = new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Local@@ Pack@@ ag@@ es@@ P@@ age@@ (m@@ P@@ ag@@ es@@ Root@@ Comp@@ o@@ si@@ te@@ , m@@ Up@@ dat@@ er@@ Data@@ ); m@@ Remote@@ Pack@@ ag@@ es@@ P@@ age = new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Remote@@ Pack@@ ag@@ es@@ P@@ age@@ (m@@ P@@ ag@@ es@@ Root@@ Comp@@ o@@ si@@ te@@ , m@@ Up@@ dat@@ er@@ Data@@ ); } }
private void create@@ Apk@@ (com.android.@@ apk@@ build@@ er@@ .@@ int@@ er@@ n@@ al.@@ Apk@@ Builder@@ Imp@@ l apk@@ Builder@@ , java.lang.String output@@ fil@@ en@@ ame@@ ) throw@@ s com.android.@@ apk@@ builder.@@ Apk@@ Build@@ er.@@ Apk@@ Cre@@ ation@@ Exception, java.io.File@@ Not@@ F@@ ound@@ Exception { java.io.File@@ Input@@ Stream res@@ ou@@ ce@@ Package@@ Zip@@ File = new java.io.File@@ InputStream@@ (@@ new java.io.File@@ (m@@ Out@@ Folder@@ , m@@ Resource@@ File@@ )); m@@ Zip@@ Ar@@ ch@@ i@@ v@@ es.@@ add(@@ res@@ ou@@ ce@@ Package@@ Zip@@ File@@ ); if (m@@ S@@ ig@@ ne@@ d@@ ) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ Cre@@ at@@ ing %@@ s an@@ d sign@@ ing i@@ t wit@@ h a de@@ bu@@ g ke@@ y.@@ .@@ .@@ ", output@@ fil@@ en@@ ame@@ )); } else { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ Cre@@ at@@ ing %@@ s for re@@ le@@ ase.@@ .@@ ", output@@ fil@@ en@@ ame@@ )); } java.io.File f = new java.io.File@@ (m@@ Out@@ Folder@@ , output@@ fil@@ en@@ ame@@ ); apk@@ Build@@ er.@@ create@@ Package@@ (f@@ .get@@ Ab@@ so@@ lu@@ te@@ File@@ (), m@@ Zip@@ Ar@@ ch@@ i@@ v@@ es@@ , m@@ Ar@@ ch@@ i@@ ve@@ Fil@@ es@@ , m@@ Java@@ Res@@ ources@@ , m@@ Res@@ ources@@ J@@ ar@@ s, m@@ Native@@ Librar@@ ies@@ ); m@@ Zip@@ Ar@@ ch@@ i@@ v@@ es.@@ remove@@ (@@ res@@ ou@@ ce@@ Package@@ Zip@@ File@@ ); }
private void write@@ Java@@ Method@@ B@@ o@@ d@@ y@@ () throw@@ s java.io.IOException { if ((@@ com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ As@@ m@@ Helper.@@ is@@ Interface@@ (c@@ urrent@@ Class@@ )) && (!@@ (com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ As@@ m@@ Helper.@@ is@@ St@@ ati@@ c@@ In@@ it@@ (c@@ urrent@@ Method@@ )@@ ))) { throw new com.android.@@ j@@ il@@ l.@@ J@@ il@@ l@@ Exception@@ ((@@ (com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ As@@ m@@ Helper.@@ is@@ St@@ ati@@ c@@ (c@@ urrent@@ Method@@ ) ? "@@ static@@ " : "@@ default@@ ") + " m@@ etho@@ d int@@ o int@@ er@@ face is not suppor@@ ted@@ ")); } source@@ Info@@ Wri@@ ter.@@ write@@ Debug@@ B@@ e@@ gin@@ (c@@ urrent@@ Class@@ , start@@ Line@@ ); w@@ ri@@ ter.@@ write@@ Key@@ wor@@ d@@ (@@ To@@ k@@ en@@ .@@ ME@@ TH@@ OD@@ _@@ B@@ Y); w@@ ri@@ ter.@@ write@@ Open@@ (); write@@ Local@@ s(); write@@ B@@ o@@ d@@ y@@ (); source@@ Info@@ Wri@@ ter.@@ write@@ Debug@@ En@@ d@@ (c@@ urrent@@ Class@@ , end@@ Line@@ ); w@@ ri@@ ter.@@ write@@ C@@ lose@@ (); }
public void test_@@ get@@ Ne@@ g@@ ative@@ Pre@@ fix@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ (); d@@ f@@ .set@@ Ne@@ g@@ ative@@ Pre@@ fix@@ ("@@ --@@ "); assert@@ True@@ ("@@ In@@ cor@@ re@@ c@@ t ne@@ g@@ ativ@@ e pre@@ fix@@ ", d@@ f@@ .get@@ Ne@@ g@@ ative@@ Pre@@ fix@@ ().@@ equal@@ s("@@ --@@ ")); }
void dis@@ connect@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ I@@ N per@@ mission@@ "); synchronized@@ (@@ this@@ ) { if ((m@@ Pb@@ ap@@ StateMach@@ ine@@ Map@@ ) != null@@ ) { m@@ Pb@@ ap@@ StateMach@@ ine@@ Map@@ .get@@ (device@@ ).@@ send@@ Message@@ (@@ Pb@@ ap@@ StateMachine.@@ D@@ IS@@ CONNEC@@ T@@ ); } } }
public void on@@ User@@ S@@ wit@@ ch@@ ed@@ (@@ int user@@ Id) { m@@ Service@@ C@@ ache.@@ in@@ valid@@ ate@@ Cach@@ e@@ (@@ user@@ Id); m@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ in@@ valid@@ ate@@ Cach@@ e@@ (@@ user@@ Id); m@@ Pre@@ fer@@ re@@ d@@ Ser@@ vices.@@ on@@ User@@ S@@ wit@@ ch@@ ed@@ (@@ user@@ Id); m@@ Pre@@ fer@@ re@@ d@@ N@@ fc@@ F@@ Ser@@ vices.@@ on@@ User@@ S@@ wit@@ ch@@ ed@@ (@@ user@@ Id); }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Sim@@ ple@@ Test@@ 2@@ .@@ class@@ ) @org.junit.Test public void test@@ Runner@@ _S@@ im@@ ple@@ Test@@ 2@@ _@@ O@@ ne@@ Method@@ () throw@@ s java.lang.Exception { java.lang.String[] arg@@ s = new java.lang.String@@ []{ "@@ test@@ Sim@@ ple@@ 2@@ " }; vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (@@ arg@@ s); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ su@@ ccess@@ ("@@ test@@ Sim@@ ple@@ 2@@ ").@@ com@@ pl@@ et@@ ed@@ N@@ or@@ m@@ all@@ y@@ (); }
public void test@@ Is@@ Sup@@ ported@@ _@@ And@@ _@@ For@@ Name@@ _N@@ or@@ m@@ al@@ Provider@@ () throw@@ s java.lang.Exception { libcore.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Set@@ t@@ able@@ Char@@ set@@ Provid@@ er.@@ set@@ De@@ le@@ g@@ ate@@ (@@ new org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test.@@ Mock@@ Char@@ set@@ Provider@@ ()); try { assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ mock@@ Char@@ set@@ 10@@ ")); assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ Mock@@ Char@@ set@@ 1@@ 1@@ ")); assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ Mock@@ Char@@ set@@ 12@@ ")); assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ M@@ O@@ C@@ K@@ Char@@ set@@ 10@@ ")); assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ M@@ O@@ C@@ K@@ Char@@ set@@ 1@@ ")); assert@@ True@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .is@@ Sup@@ ported@@ ("@@ M@@ O@@ C@@ K@@ Char@@ set@@ 12@@ ")); assert@@ True@@ (((@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 10@@ ")) instanceof org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test.@@ Mock@@ Char@@ set@@ )); assert@@ True@@ (((@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 1@@ 1@@ ")) instanceof org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test.@@ Mock@@ Char@@ set@@ )); assert@@ True@@ (((@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 12@@ ")) instanceof org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test.@@ Mock@@ Char@@ set@@ )); assert@@ True@@ (((@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 10@@ ")) == (@@ org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test@@ .@@ char@@ set@@ 2@@ ))); java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 1@@ "); assert@@ True@@ (((@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ mock@@ Char@@ set@@ 12@@ ")) == (@@ org.apache.harmony.@@ tests.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ Test@@ .@@ char@@ set@@ 2@@ ))); } final@@ l@@ y { libcore.@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ Set@@ t@@ able@@ Char@@ set@@ Provid@@ er.@@ clear@@ De@@ le@@ g@@ ate@@ (); } }
private void check@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ () { android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 4@@ 9@@ 1@@ 5@@ 4@@ 9@@ 1@@ 5@@ 4@@ 9@@ 1@@ 4@@ 9@@ 2@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 4@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ X@@ (in@@ X@@ ); script@@ .@@ for@@ Each@@ _test@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ (in@@ Y@@ , out); ve@@ r@@ if@@ y@@ Results@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ (in@@ Y@@ , in@@ X@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ X@@ (in@@ X@@ ); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ (in@@ Y@@ , out); ve@@ r@@ if@@ y@@ Results@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ (in@@ Y@@ , in@@ X@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ At@@ an@@ 2@@ pi@@ FloatFloat@@ Float@@ : " + (e.toString()))); } }
private void check@@ I@@ Bu@@ s@@ P@@ res@@ ent@@ () { if (@@ System@@ Info@@ .is@@ Lin@@ u@@ x@@ ) { try { java.lang.@@ Pro@@ ces@@ s pro@@ c = java.lang.@@ Run@@ tim@@ e.get@@ Runtime@@ ().@@ exec@@ ("@@ p@@ s -@@ e@@ f@@ "); java.io.@@ Buffer@@ ed@@ Read@@ er read@@ er = new java.io.@@ Buffer@@ ed@@ Read@@ er@@ (@@ new java.io.@@ InputStream@@ Read@@ er@@ (pro@@ c@@ .get@@ InputStream@@ ())); try { for (java.lang.String lin@@ e = read@@ er.@@ read@@ Line@@ (); lin@@ e != null@@ ; lin@@ e = read@@ er.@@ read@@ Line@@ ()) { if (@@ lin@@ e.@@ contain@@ s("@@ i@@ bu@@ s@@ -@@ d@@ a@@ e@@ mon@@ ")) { not@@ if@@ y@@ Un@@ suppor@@ ted@@ ("@@ un@@ suppor@@ ted@@ .@@ i@@ bu@@ s.@@ message@@ "); break@@ ; } } } final@@ l@@ y { read@@ er.@@ close(); } } catch (java.io.IOException ex@@ ) { } } }
@com.android.annotations.NonNull public org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age get@@ W@@ ar@@ n@@ ing@@ I@@ con@@ (@@ @com.android.annotations.NonNull org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age im@@ age@@ ) { if ((m@@ W@@ ar@@ n@@ ing@@ I@@ con@@ s) != null@@ ) { org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age com@@ b@@ ine@@ d = m@@ W@@ ar@@ n@@ ing@@ I@@ con@@ s.get@@ (@@ im@@ age@@ ); if (@@ com@@ b@@ ine@@ d != null@@ ) { return com@@ b@@ in@@ ed@@ ; } } else { m@@ W@@ ar@@ n@@ ing@@ I@@ con@@ s = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); } org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age com@@ b@@ ine@@ d = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ ui.@@ Error@@ Image@@ Comp@@ o@@ si@@ te@@ (@@ im@@ age@@ , true@@ ).@@ create@@ Image@@ (); m@@ W@@ ar@@ n@@ ing@@ I@@ con@@ s.@@ put@@ (@@ im@@ age@@ , com@@ b@@ in@@ ed@@ ); return com@@ b@@ in@@ ed@@ ; }
public void run@@ Test@@ () { if (m@@ U@@ se@@ In@@ tr@@ in@@ si@@ c@@ ) { m@@ In@@ tr@@ in@@ si@@ c@@ .@@ for@@ Each@@ (m@@ Out@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ ); } else if (m@@ U@@ se@@ H@@ al@@ f@@ Pre@@ c@@ i@@ sion@@ ) { m@@ Script@@ .@@ for@@ Each@@ _@@ copy@@ In@@ _@@ h@@ al@@ f@@ (m@@ In@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ , m@@ S@@ c@@ r@@ atch@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ 1); m@@ Script@@ .@@ for@@ Each@@ _@@ h@@ or@@ z@@ _@@ h@@ al@@ f@@ (m@@ S@@ c@@ r@@ atch@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ 2@@ ); m@@ Script@@ .@@ for@@ Each@@ _@@ ver@@ t@@ _@@ h@@ al@@ f@@ (m@@ Out@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ ); } else { m@@ Script@@ .@@ for@@ Each@@ _@@ copy@@ In@@ (m@@ In@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ , m@@ S@@ c@@ r@@ atch@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ 1); m@@ Script@@ .@@ for@@ Each@@ _@@ h@@ or@@ z@@ (m@@ S@@ c@@ r@@ atch@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ 2@@ ); m@@ Script@@ .@@ for@@ Each@@ _@@ ver@@ t@@ (m@@ Out@@ P@@ i@@ x@@ el@@ s@@ Allocation@@ ); } }
static java.lang.Object new@@ Instance@@ () { try { java.lang.@@ Class@@ <@@ ?@@ > c = Local@@ Class@@ 3@@ .@@ C@@ C@@ .@@ class@@ ; return c@@ .@@ new@@ Instance@@ (); } catch (java.lang.Exception ex@@ ) { ex@@ .@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (java.lang.@@ System.@@ out); return null@@ ; } }
@java.lang.Override protected void res@@ et@@ E@@ d@@ itor@@ From@@ (@@ com.google.gct.@@ ide@@ a.@@ de@@ bug@@ g@@ er.@@ C@@ lo@@ ud@@ Debug@@ Run@@ Configur@@ ation s) { }
@org.junit.Test public void test@@ Create@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ () throw@@ s java.lang.Exception { android.net.@@ IpSec@@ Con@@ fig ip@@ Sec@@ Con@@ fig = new android.net.@@ IpSec@@ Config@@ (); add@@ Default@@ S@@ p@@ is@@ And@@ Remote@@ Add@@ r@@ To@@ IpSec@@ Config@@ (@@ ip@@ Sec@@ Config@@ ); add@@ A@@ u@@ th@@ And@@ Cryp@@ t@@ To@@ IpSec@@ Config@@ (@@ ip@@ Sec@@ Config@@ ); android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ pon@@ se create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p = m@@ IpSec@@ Service.@@ create@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (@@ ip@@ Sec@@ Config@@ , new android.os.@@ Bin@@ der@@ ()); assert@@ Equal@@ s(@@ IpSec@@ Manager.@@ Statu@@ s.@@ O@@ K@@ , create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ stat@@ us@@ ); ve@@ r@@ if@@ y@@ (m@@ Mock@@ Net@@ d@@ ).@@ ip@@ Sec@@ Add@@ Sec@@ urit@@ y@@ As@@ so@@ c@@ i@@ ation@@ (e@@ q@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id@@ ), any@@ Int@@ (), e@@ q@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ ), any@@ String@@ (), any@@ String@@ (), any@@ Long@@ (), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ TEST_@@ S@@ P@@ I@@ _@@ O@@ UT@@ ), any@@ Int@@ (), any@@ Int@@ (), e@@ q@@ (@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 25@@ 6@@ ), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ A@@ UT@@ H@@ _@@ KE@@ Y@@ ), any@@ Int@@ (), e@@ q@@ (@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ ), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y@@ ), any@@ Int@@ (), e@@ q@@ ("@@ "), e@@ q@@ (@@ new byte@@ []{ }@@ ), e@@ q@@ (0@@ ), any@@ Int@@ (), any@@ Int@@ (), any@@ Int@@ ()); ve@@ r@@ if@@ y@@ (m@@ Mock@@ Net@@ d@@ ).@@ ip@@ Sec@@ Add@@ Sec@@ urit@@ y@@ As@@ so@@ c@@ i@@ ation@@ (e@@ q@@ (@@ create@@ Tr@@ an@@ s@@ for@@ m@@ Res@@ p.@@ resource@@ Id@@ ), any@@ Int@@ (), e@@ q@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ ), any@@ String@@ (), any@@ String@@ (), any@@ String@@ (), any@@ Long@@ (), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ TEST_@@ S@@ P@@ I@@ _@@ IN@@ ), any@@ Int@@ (), e@@ q@@ (@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 25@@ 6@@ ), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ A@@ UT@@ H@@ _@@ KE@@ Y@@ ), any@@ Int@@ (), e@@ q@@ (@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ ), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y@@ ), any@@ Int@@ (), e@@ q@@ (com.android.server.@@ IpSec@@ Service@@ Parameter@@ iz@@ ed@@ Test.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y@@ ), any@@ Int@@ (), e@@ q@@ (0@@ ), any@@ Int@@ ()); }
public void test@@ D@@ er@@ e@@ g@@ is@@ tr@@ ation@@ () throw@@ s java.lang.Exception { android.telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ Test@@ D@@ S@@ Call@@ b@@ ac@@ k stat@@ us@@ Call@@ b@@ ac@@ k = new android.telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ Test@@ D@@ S@@ Callback@@ (); android.telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ Test@@ D@@ P@@ Call@@ b@@ ac@@ k pro@@ g@@ res@@ s@@ Call@@ b@@ ac@@ k = new android.telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ Test@@ D@@ P@@ Callback@@ (); android.telephony.@@ m@@ b@@ m@@ s.@@ Down@@ load@@ Requ@@ est requ@@ est = do@@ wn@@ load@@ Request@@ Temp@@ lat@@ e.@@ build@@ (); m@@ Down@@ load@@ Session@@ .@@ register@@ Pro@@ g@@ res@@ s@@ Listener@@ (@@ request@@ , m@@ Callback@@ Ex@@ ec@@ ut@@ or@@ , pro@@ g@@ res@@ s@@ Callback@@ ); m@@ Down@@ load@@ Session@@ .@@ register@@ Status@@ Listener@@ (@@ request@@ , m@@ Callback@@ Ex@@ ec@@ ut@@ or@@ , stat@@ us@@ Callback@@ ); m@@ Down@@ load@@ Session@@ .@@ un@@ register@@ Pro@@ g@@ res@@ s@@ Listener@@ (@@ request@@ , pro@@ g@@ res@@ s@@ Callback@@ ); m@@ Down@@ load@@ Session@@ .@@ un@@ register@@ Status@@ Listener@@ (@@ request@@ , stat@@ us@@ Callback@@ ); m@@ M@@ id@@ d@@ le@@ war@@ e@@ Contro@@ l.@@ fi@@ re@@ On@@ State@@ Up@@ dat@@ ed@@ (@@ null@@ , null@@ , 0); assert@@ Null@@ (@@ stat@@ us@@ Callback@@ .@@ wait@@ On@@ State@@ Up@@ dat@@ ed@@ (android.@@ telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ S@@ H@@ OR@@ T_@@ TI@@ ME@@ O@@ UT@@ )); m@@ M@@ id@@ d@@ le@@ war@@ e@@ Contro@@ l.@@ fi@@ re@@ On@@ Pro@@ g@@ res@@ s@@ Up@@ dat@@ ed@@ (@@ null@@ , null@@ , 0, 0, 0); assert@@ Null@@ (pro@@ g@@ res@@ s@@ Callback@@ .@@ wait@@ On@@ Pro@@ g@@ res@@ s@@ Up@@ dat@@ ed@@ (android.@@ telephony.@@ em@@ b@@ m@@ s.@@ cts.@@ M@@ b@@ ms@@ Down@@ load@@ Callback@@ Test.@@ S@@ H@@ OR@@ T_@@ TI@@ ME@@ O@@ UT@@ )); }
@java.lang.Override public synchronized void on@@ T@@ c@@ p@@ Socket@@ Stat@@ s@@ Event@@ (@@ int@@ [] network@@ Id@@ s, int@@ [] pack@@ et@@ S@@ ent@@ Coun@@ ter@@ s, int@@ [] pack@@ et@@ Lo@@ st@@ Coun@@ ter@@ s) { if (((@@ network@@ Id@@ s.@@ length) != (p@@ ack@@ et@@ S@@ ent@@ Coun@@ ter@@ s.@@ length@@ )) || ((@@ network@@ Id@@ s.@@ length) != (p@@ ack@@ et@@ Lo@@ st@@ Coun@@ ter@@ s.@@ length@@ ))) { android.util.Log.e@@ (com.android.server.@@ connectivity.@@ Net@@ d@@ Event@@ Listener@@ Service.TAG, "@@ In@@ va@@ li@@ d dat@@ a FI@@ X@@ ME@@ "); return@@ ; } long tim@@ est@@ am@@ p = java.lang.System.@@ current@@ Time@@ Milli@@ s(); for (@@ int i = 0; i < (@@ network@@ Id@@ s.@@ length); i++) { int net@@ Id = network@@ Id@@ s@@ [i@@ ]; int s@@ ent = pack@@ et@@ S@@ ent@@ Coun@@ ter@@ s@@ [i@@ ]; int lo@@ s@@ t = pack@@ et@@ Lo@@ st@@ Coun@@ ter@@ s@@ [i@@ ]; get@@ Met@@ ri@@ c@@ s@@ For@@ Network@@ (@@ tim@@ est@@ am@@ p@@ , net@@ Id@@ ).@@ add@@ T@@ c@@ p@@ Stat@@ s@@ Result@@ (s@@ ent@@ , lo@@ st@@ ); } if (com.android.server.@@ connectivity.@@ Net@@ d@@ Event@@ Listener@@ Service.@@ DBG) { java.util.@@ String@@ J@@ o@@ in@@ er j = new java.util.@@ String@@ J@@ o@@ in@@ er@@ ("@@ , "); for (@@ int i = 0; i < (@@ network@@ Id@@ s.@@ length); i++) { int net@@ Id = network@@ Id@@ s@@ [i@@ ]; int s@@ ent = pack@@ et@@ S@@ ent@@ Coun@@ ter@@ s@@ [i@@ ]; int lo@@ s@@ t = pack@@ et@@ Lo@@ st@@ Coun@@ ter@@ s@@ [i@@ ]; j.@@ add(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ {@@ net@@ Id@@ =@@ %@@ d, s@@ ent@@ =@@ %@@ d, lo@@ st@@ =@@ %@@ d@@ }@@ ", net@@ Id, s@@ ent@@ , lo@@ st@@ )); } android.util.Log.d@@ (com.android.server.@@ connectivity.@@ Net@@ d@@ Event@@ Listener@@ Service.TAG, ("@@ T@@ c@@ p@@ Socket@@ Stat@@ s@@ Event@@ : " + (@@ j.@@ toString@@ ()))); } }
@java.lang.Override public void set@@ Sms@@ Listener@@ (android.@@ telephony.@@ im@@ s@@ .@@ int@@ er@@ n@@ al.@@ a@@ id@@ l.@@ I@@ Ims@@ Sms@@ Listen@@ er l@@ ) throw@@ s android.os.@@ RemoteException { synchronized@@ (m@@ Lock) { this@@ .set@@ Sms@@ Listener@@ (@@ l@@ ); } }
private android.@@ dat@@ ab@@ ase.@@ C@@ ur@@ s@@ or qu@@ er@@ y@@ C@@ arrier@@ Id@@ For@@ Current@@ Sub@@ s@@ cription@@ (android.net.@@ Ur@@ i ur@@ i@@ , java.lang.String[] pro@@ jec@@ tion@@ In@@ ) { int sub@@ Id = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Sub@@ s@@ cription@@ Control@@ l@@ er.get@@ Instance@@ ().get@@ Default@@ Sub@@ Id@@ (); if (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ ur@@ i@@ .get@@ L@@ ast@@ Path@@ Se@@ g@@ ment@@ ()))) { try { sub@@ Id = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ ur@@ i@@ .get@@ L@@ ast@@ Path@@ Se@@ g@@ ment@@ ()); } catch (java.lang.@@ Number@@ Format@@ Exception e) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ in@@ va@@ li@@ d sub@@ id in provid@@ ed ur@@ i@@ " + ur@@ i@@ )); } } android.util.Log.d@@ (com.android.@@ provid@@ er@@ s.@@ telephony.@@ C@@ arrier@@ Id@@ Provid@@ er.@@ TAG, ("@@ qu@@ er@@ y@@ C@@ arrier@@ Id@@ For@@ Sub@@ Id@@ : " + sub@@ Id@@ )); if (s@@ ub@@ Id == (android.@@ telephony.@@ Sub@@ s@@ cription@@ Manager.@@ DE@@ FA@@ UL@@ T_@@ S@@ U@@ B@@ S@@ C@@ R@@ IP@@ TION_@@ ID@@ )) { sub@@ Id = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Sub@@ s@@ cription@@ Control@@ l@@ er.get@@ Instance@@ ().get@@ Default@@ Sub@@ Id@@ (); } if (!(m@@ Current@@ Sub@@ s@@ cription@@ Map@@ .@@ contain@@ s@@ Key@@ (s@@ ub@@ Id@@ ))) { return new android.@@ dat@@ ab@@ ase.@@ M@@ at@@ ri@@ x@@ C@@ ur@@ s@@ or@@ (pro@@ jec@@ tion@@ In@@ , 0); } final android.@@ dat@@ ab@@ ase.@@ M@@ at@@ ri@@ x@@ C@@ ur@@ s@@ or c = new android.@@ dat@@ ab@@ ase.@@ M@@ at@@ ri@@ x@@ C@@ ur@@ s@@ or@@ (pro@@ jec@@ tion@@ In@@ , 1); final android.@@ dat@@ ab@@ ase.@@ M@@ at@@ ri@@ x@@ C@@ ur@@ s@@ or.@@ R@@ o@@ w@@ Builder ro@@ w = c@@ .@@ new@@ R@@ o@@ w@@ (); for (@@ int i = 0; i < (c@@ .get@@ Co@@ lum@@ n@@ Count@@ ()); i++) { final java.lang.String co@@ lum@@ n@@ Name = c@@ .get@@ Co@@ lum@@ n@@ Name@@ (i@@ ); if (@@ C@@ arrier@@ Id@@ .@@ C@@ AR@@ R@@ I@@ ER_@@ ID@@ .@@ equals(@@ co@@ lum@@ n@@ Name@@ )) { row@@ .add@@ (m@@ Current@@ Sub@@ s@@ cription@@ Map@@ .get@@ (s@@ ub@@ Id@@ ).@@ fi@@ r@@ st@@ ); } else if (@@ C@@ arrier@@ Id@@ .@@ N@@ AME@@ .@@ equals(@@ co@@ lum@@ n@@ Name@@ )) { row@@ .add@@ (m@@ Current@@ Sub@@ s@@ cription@@ Map@@ .get@@ (s@@ ub@@ Id@@ ).@@ sec@@ ond@@ ); } else { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ In@@ va@@ li@@ d co@@ lum@@ n " + (pro@@ jec@@ tion@@ In@@ [i]@@ ))); } } return c@@ ; }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d method@@ ) throw@@ s java.lang.Exception { if ((@@ ((m@@ ethod@@ .get@@ En@@ c@@ lo@@ sing@@ Type@@ ().@@ is@@ Ex@@ ter@@ nal@@ ()) || (m@@ ethod@@ .is@@ Native@@ ())) || (m@@ ethod@@ .is@@ Abstract@@ ())) || (!(@@ fil@@ ter.@@ ac@@ ce@@ p@@ t@@ (@@ this@@ .get@@ Class@@ (), method@@ )@@ ))) { return@@ ; } com.android.jack.@@ c@@ f@@ g.@@ Control@@ F@@ low@@ G@@ rap@@ h c@@ f@@ g = method@@ .get@@ Mark@@ er@@ (com.android.jack.@@ c@@ f@@ g.@@ Control@@ F@@ low@@ G@@ rap@@ h@@ .@@ class@@ ); assert c@@ f@@ g != null@@ ; for (com.android.jack.@@ c@@ f@@ g.@@ Bas@@ ic@@ B@@ loc@@ k b@@ b : c@@ f@@ g.@@ get@@ No@@ des@@ ()) { if (b@@ b != null@@ ) { b@@ b@@ .get@@ Mark@@ er@@ (com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ d@@ fa@@ .@@ re@@ ach@@ ing@@ de@@ fs.@@ Re@@ ach@@ ing@@ De@@ f@@ s@@ Mark@@ er@@ .@@ class@@ ); } }
public static java.util.Collection@@ <@@ java.lang.Ob@@ ject@@ []@@ > get@@ N@@ ine@@ P@@ atch@@ es@@ () { java.io.File p@@ n@@ g@@ Fol@@ der = get@@ P@@ n@@ g@@ Folder@@ (); java.io.File n@@ ine@@ P@@ atch@@ Fol@@ der = new java.io.File@@ (p@@ n@@ g@@ Folder@@ , "@@ n@@ ine@@ p@@ atch@@ "); java.io.File@@ [] file@@ s = n@@ ine@@ P@@ atch@@ Fol@@ d@@ er.@@ list@@ Fil@@ es@@ (@@ new java.io.File@@ Filter@@ () { @java.lang.Override public boolean ac@@ ce@@ p@@ t@@ (@@ java.io.File file@@ ) { return file@@ .get@@ Path@@ ().@@ end@@ s@@ With@@ (@@ Sdk@@ Constants.@@ D@@ O@@ T_@@ 9@@ P@@ N@@ G@@ ); } }); if (file@@ s != null@@ ) { com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ Builder@@ <@@ java.lang.Ob@@ ject@@ []@@ > param@@ s = com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ build@@ er@@ (); for (@@ java.io.File fi@@ le : fil@@ es) { param@@ s.add@@ (@@ new java.lang.Ob@@ ject@@ []{ file@@ , file@@ .getName@@ () }); } return param@@ s.@@ build@@ (); } return com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ o@@ f@@ (); }
@java.lang.Override public boolean on@@ T@@ ou@@ ch@@ (android.@@ view@@ .@@ Vi@@ e@@ w v@@ , android.@@ view@@ .@@ Mo@@ tion@@ Ev@@ ent event@@ ) { if ((m@@ S@@ n@@ ake@@ View@@ .get@@ G@@ ame@@ State@@ ()) == (@@ S@@ n@@ ake@@ View@@ .@@ R@@ UN@@ N@@ ING@@ )) { float x = (@@ ev@@ ent.get@@ X@@ ()) / (@@ v@@ .get@@ W@@ id@@ th@@ ()); float y = (@@ ev@@ ent.get@@ Y@@ ()) / (@@ v@@ .get@@ He@@ ig@@ ht@@ ()); short di@@ re@@ c@@ tion = 0; di@@ re@@ c@@ tion |@@ = (@@ x > y@@ ) ? 1 : 0; di@@ re@@ c@@ tion |@@ = (@@ x > (@@ 1 - y@@ )) ? 2 : 0; m@@ S@@ n@@ ake@@ View@@ .@@ mo@@ ve@@ S@@ n@@ ake@@ (d@@ ire@@ ction@@ ); } else { m@@ S@@ n@@ ake@@ View@@ .@@ mo@@ ve@@ S@@ n@@ ake@@ (@@ com.@@ ex@@ am@@ p@@ le.@@ android.@@ s@@ n@@ ak@@ e.@@ S@@ n@@ ak@@ e.@@ M@@ O@@ V@@ E_@@ U@@ P@@ ); } return false@@ ; }
private void read@@ Head@@ er@@ () throw@@ s java.io.IOException { m@@ Type = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ TYP@@ E@@ )); final long sh@@ O@@ ff@@ set = read@@ W@@ or@@ d@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ S@@ H@@ O@@ F@@ )); final int sh@@ Num@@ b@@ er = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ S@@ H@@ N@@ U@@ M@@ )); final int sh@@ Siz@@ e = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ S@@ H@@ EN@@ T@@ SIZ@@ E@@ )); final int sh@@ Str@@ In@@ dex = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ S@@ H@@ S@@ TR@@ N@@ D@@ X@@ )); read@@ Sec@@ tion@@ Head@@ er@@ s(@@ sh@@ Offset@@ , sh@@ Number@@ , sh@@ Size@@ , sh@@ Str@@ Index@@ ); final long p@@ h@@ O@@ ff@@ set = read@@ W@@ or@@ d@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ P@@ H@@ O@@ F@@ F@@ )); final int p@@ h@@ Num@@ b@@ er = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ P@@ H@@ N@@ U@@ M@@ )); final int p@@ h@@ Siz@@ e = read@@ H@@ al@@ f@@ (get@@ Head@@ er@@ Offset@@ (android.os.@@ cts.@@ Read@@ E@@ l@@ f.@@ O@@ F@@ F@@ SE@@ T_@@ P@@ H@@ EN@@ T@@ SIZ@@ E@@ )); read@@ Pro@@ g@@ ram@@ Head@@ er@@ s(@@ p@@ h@@ Offset@@ , p@@ h@@ Number@@ , p@@ h@@ Siz@@ e); }
@org.junit.Test public void valid@@ ate@@ Polic@@ y@@ With@@ out@@ Server@@ U@@ ri@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y po@@ lic@@ y = android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y@@ Test.@@ create@@ Polic@@ y@@ (); byte@@ [] raw@@ U@@ ri@@ Byte@@ s = new byte@@ [@@ (android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y@@ Test.@@ MA@@ X_@@ UR@@ I@@ _@@ B@@ Y@@ TE@@ S@@ ) + 1@@ ]; po@@ lic@@ y.@@ po@@ lic@@ y@@ Server@@ Ur@@ i = new java.lang.String@@ (r@@ aw@@ U@@ ri@@ Bytes@@ , java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); assert@@ False@@ (@@ po@@ lic@@ y.@@ valid@@ ate@@ ()); }
@java.lang.Override public void check@@ (@@ @javax.annotation.@@ N@@ on@@ null javax.@@ lang.@@ model.@@ e@@ lem@@ ent.@@ Elem@@ ent e@@ lement@@ , @javax.annotation.@@ N@@ on@@ null javax.annotation.@@ process@@ ing.@@ Process@@ ing@@ En@@ vi@@ ron@@ m@@ ent en@@ v@@ ) { javax.@@ lang.@@ model.@@ typ@@ e.@@ Type@@ M@@ ir@@ ror key@@ Id@@ Type = en@@ v@@ .get@@ Type@@ Uti@@ l@@ s@@ ().@@ er@@ as@@ ure@@ (@@ en@@ v@@ .get@@ Element@@ Uti@@ l@@ s@@ ().get@@ Type@@ Element@@ (com.android.s@@ ched.@@ util.@@ config.@@ id.@@ Key@@ Id@@ .@@ class@@ .get@@ Can@@ on@@ ic@@ al@@ Name@@ ()).@@ as@@ Type@@ ()); if (@@ key@@ Id@@ Type == null@@ ) { en@@ v@@ .get@@ Mess@@ ag@@ er@@ ().@@ p@@ r@@ int@@ Message@@ (@@ javax.@@ tools.@@ Di@@ ag@@ no@@ s@@ ti@@ c.@@ K@@ ind@@ .@@ ER@@ R@@ OR@@ , (("@@ C@@ an not ge@@ t e@@ lem@@ ent typ@@ e '@@ " + (com.android.s@@ ched.@@ util.@@ config.@@ id.@@ Property@@ Id@@ .@@ class@@ .get@@ Can@@ on@@ ic@@ al@@ Name@@ ())) + "@@ '@@ ")); return@@ ; } for (@@ javax.@@ lang.@@ model.@@ e@@ lem@@ ent.@@ Elem@@ ent enc@@ lo@@ sed@@ Elem@@ ent : e@@ lem@@ ent.get@@ En@@ c@@ lo@@ sed@@ Element@@ s@@ ()) { if (((@@ enc@@ lo@@ sed@@ Element.@@ get@@ K@@ ind@@ ()) == (@@ javax.@@ lang.@@ model.@@ e@@ lem@@ ent.@@ Element@@ K@@ ind@@ .@@ FI@@ E@@ L@@ D@@ )) && (@@ en@@ v@@ .get@@ Type@@ Uti@@ l@@ s@@ ().@@ is@@ Sub@@ type@@ (@@ en@@ v@@ .get@@ Type@@ Uti@@ l@@ s@@ ().@@ er@@ as@@ ure@@ (@@ enc@@ lo@@ sed@@ Element.@@ as@@ Type@@ ()@@ ), key@@ Id@@ Type@@ ))) { no@@ Key@@ Id = false@@ ; if (!(@@ enc@@ lo@@ sed@@ Element.@@ get@@ Mo@@ d@@ if@@ ier@@ s@@ ().@@ contain@@ s(@@ javax.@@ lang.@@ model.@@ e@@ lem@@ ent.@@ Mo@@ d@@ if@@ i@@ er.@@ STA@@ TI@@ C@@ ))) { en@@ v@@ .get@@ Mess@@ ag@@ er@@ ().@@ p@@ r@@ int@@ Message@@ (@@ javax.@@ tools.@@ Di@@ ag@@ no@@ s@@ ti@@ c.@@ K@@ ind@@ .@@ W@@ AR@@ N@@ ING@@ , "@@ Key@@ Id sho@@ ul@@ d b@@ e dec@@ l@@ ar@@ ed static@@ ", enc@@ lo@@ sed@@ Element@@ ); } if (!(@@ enc@@ lo@@ sed@@ Element.@@ get@@ Mo@@ d@@ if@@ ier@@ s@@ ().@@ contain@@ s(@@ javax.@@ lang.@@ model.@@ e@@ lem@@ ent.@@ Mo@@ d@@ if@@ i@@ er.@@ F@@ IN@@ AL@@ ))) { en@@ v@@ .get@@ Mess@@ ag@@ er@@ ().@@ p@@ r@@ int@@ Message@@ (@@ javax.@@ tools.@@ Di@@ ag@@ no@@ s@@ ti@@ c.@@ K@@ ind@@ .@@ ER@@ R@@ OR@@ , "@@ Key@@ Id m@@ us@@ t b@@ e dec@@ l@@ ar@@ ed final@@ ", enc@@ lo@@ sed@@ Element@@ ); } } if (@@ no@@ Key@@ Id) { en@@ v@@ .get@@ Mess@@ ag@@ er@@ ().@@ p@@ r@@ int@@ Message@@ (@@ javax.@@ tools.@@ Di@@ ag@@ no@@ s@@ ti@@ c.@@ K@@ ind@@ .@@ ER@@ R@@ OR@@ , "@@ Type do@@ es not contain@@ s Key@@ Id@@ ", e@@ lement@@ ); } }
private void update@@ Doc@@ L@@ ab@@ el@@ s() { java.lang.String do@@ c@@ Ur@@ l = ((@@ java.lang.String@@ ) (m@@ y@@ W@@ iz@@ ard@@ Stat@@ e.get@@ (@@ "@@ do@@ c@@ Ur@@ l@@ "@@ ))); com.android.tools.@@ ide@@ a.@@ tem@@ pl@@ at@@ es.@@ Temp@@ l@@ ate@@ Met@@ ad@@ at@@ a m@@ et@@ ad@@ at@@ a = my@@ W@@ iz@@ ard@@ Stat@@ e.get@@ Temp@@ l@@ ate@@ Met@@ ad@@ ata@@ (); java.lang.String ti@@ t@@ le = (m@@ et@@ ad@@ at@@ a != null@@ ) ? m@@ et@@ ad@@ ata@@ .get@@ T@@ it@@ le@@ () : null@@ ; if (@@ do@@ c@@ Ur@@ l != null@@ ) && (@@ ti@@ t@@ le != null@@ )) { my@@ Doc@@ P@@ an@@ e@@ l.@@ set@@ Visi@@ ble@@ (@@ true@@ ); my@@ Doc@@ L@@ ab@@ e@@ l.@@ set@@ H@@ yp@@ er@@ lin@@ k@@ Text@@ ("@@ Ch@@ ec@@ k th@@ e ", (("@@ \"@@ " + ti@@ t@@ le@@ ) + "@@ \@@ " do@@ c@@ ument@@ ation@@ "), "@@ "); my@@ Doc@@ L@@ ab@@ e@@ l.@@ set@@ H@@ yp@@ er@@ lin@@ k@@ Target@@ (@@ do@@ c@@ Ur@@ l@@ ); } else { my@@ Doc@@ P@@ an@@ e@@ l.@@ set@@ Visi@@ ble@@ (@@ false@@ ); } }
protected void on@@ Test@@ Runner@@ Cre@@ ated@@ () { }
public void test@@ S@@ c@@ ro@@ l@@ l@@ To@@ () throw@@ s java.lang.@@ Throw@@ able { final android.@@ widget@@ .@@ Text@@ Vi@@ e@@ w t@@ v = new android.@@ text.@@ method@@ .@@ cts.@@ Text@@ View@@ No@@ Im@@ e@@ (m@@ Activity@@ ); t@@ v@@ .set@@ Text@@ Size@@ (@@ Typ@@ ed@@ Valu@@ e.@@ C@@ O@@ M@@ P@@ L@@ EX@@ _@@ UN@@ I@@ T_@@ S@@ P@@ , 1@@ 0); run@@ Test@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { m@@ Ac@@ tivity.@@ set@@ Content@@ View@@ (t@@ v@@ ); t@@ v@@ .set@@ S@@ ing@@ le@@ Line@@ (@@ true@@ ); t@@ v@@ .set@@ Lin@@ es(@@ 2@@ ); } }); get@@ In@@ strument@@ ation@@ ().@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); android.@@ text.@@ Text@@ P@@ a@@ int p@@ a@@ int = t@@ v@@ .get@@ P@@ a@@ int@@ (); final android.@@ text.@@ Lay@@ out lay@@ out = t@@ v@@ .get@@ Lay@@ out@@ (); final java.lang.String@@ Builder long@@ E@@ no@@ u@@ g@@ h@@ T@@ ex@@ t = new java.lang.String@@ Builder@@ (android.@@ text.@@ method@@ .@@ cts.@@ T@@ ou@@ ch@@ Test.@@ L@@ ON@@ G@@ _@@ TE@@ X@@ T@@ ); while ((@@ get@@ Text@@ W@@ id@@ th@@ (@@ long@@ E@@ no@@ u@@ g@@ h@@ Text@@ , p@@ a@@ int@@ )) <@@ = (t@@ v@@ .get@@ W@@ id@@ th@@ ())) { long@@ E@@ no@@ u@@ g@@ h@@ T@@ ex@@ t.@@ append@@ (android.@@ text.@@ method@@ .@@ cts.@@ T@@ ou@@ ch@@ Test.@@ L@@ ON@@ G@@ _@@ TE@@ X@@ T@@ ); } run@@ Test@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { t@@ v@@ .set@@ Text@@ (@@ long@@ E@@ no@@ u@@ g@@ h@@ Text@@ ); } }); get@@ In@@ strument@@ ation@@ ().@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); final int wid@@ th = get@@ Text@@ W@@ id@@ th@@ (@@ long@@ E@@ no@@ u@@ g@@ h@@ Text@@ , p@@ a@@ int@@ ); run@@ Test@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { android.@@ text.@@ method@@ .@@ T@@ ou@@ ch@@ .@@ s@@ c@@ ro@@ l@@ To@@ (t@@ v@@ , lay@@ out, ((@@ wid@@ th - (t@@ v@@ .get@@ W@@ id@@ th@@ ())) - 1@@ ), 0); } }); get@@ In@@ strument@@ ation@@ ().@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); assert@@ Equal@@ s@@ (((@@ wid@@ th - (t@@ v@@ .get@@ W@@ id@@ th@@ ())) - 1@@ ), t@@ v@@ .get@@ S@@ c@@ ro@@ l@@ X@@ ()); assert@@ Equal@@ s(@@ 0, t@@ v@@ .get@@ S@@ c@@ ro@@ l@@ Y@@ ()); run@@ Test@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { android.@@ text.@@ method@@ .@@ T@@ ou@@ ch@@ .@@ s@@ c@@ ro@@ l@@ l@@ To@@ (t@@ v@@ , lay@@ out, (@@ wid@@ th + 1@@ 00@@ ), 5@@ ); } }); get@@ In@@ strument@@ ation@@ ().@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); assert@@ Equal@@ s@@ ((@@ wid@@ th - (t@@ v@@ .get@@ W@@ id@@ th@@ ()@@ )), t@@ v@@ .get@@ S@@ c@@ ro@@ l@@ X@@ (), 1.@@ 0F@@ ); assert@@ Equal@@ s(@@ 5, t@@ v@@ .get@@ S@@ c@@ ro@@ l@@ l@@ Y@@ ()); run@@ Test@@ On@@ U@@ i@@ Thread@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { android.@@ text.@@ method@@ .@@ T@@ ou@@ ch@@ .@@ s@@ c@@ ro@@ l@@ l@@ To@@ (t@@ v@@ , out, (@@ wid@@ th - 10@@ ), 5@@ ); } }); get@@ In@@ strument@@ ation@@ ().@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); assert@@ Equal@@ s@@ ((@@ wid@@ th - (t@@ v@@ .get@@ S@@ ync@@ (); assert@@ Equal@@ s(@@ 1.@@ 0F@@ ), t@@ v@@ .get@@ S@@ ync@@ ()); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); com.android.bluetooth.@@ Test@@ Utils.@@ set@@ Adapter@@ Service@@ (m@@ Adapter@@ Service@@ ); m@@ Adap@@ ter = android.@@ bluetooth.Bluetooth@@ Adap@@ t@@ er.get@@ Default@@ Adapter@@ (); m@@ Test@@ Device = m@@ Adap@@ t@@ er.get@@ Remote@@ Device@@ ("@@ 00@@ :@@ 0@@ 1@@ :@@ 0@@ 2@@ :@@ 0@@ 3@@ :@@ 0@@ 4@@ :@@ 0@@ 5@@ "); m@@ Handler@@ Th@@ re@@ ad = new android.os.@@ Handler@@ Thread@@ ("@@ Pb@@ ap@@ Test@@ Handler@@ Thread@@ "); m@@ Handler@@ Thread@@ .@@ start@@ (); m@@ Handle@@ r = new android.os.@@ Handler@@ (m@@ Handler@@ Thread@@ .get@@ Loo@@ per@@ ()); m@@ Bluetooth@@ Pb@@ ap@@ Ser@@ vice = mock@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service@@ .@@ class@@ ); do@@ No@@ th@@ ing@@ ().@@ when(m@@ Bluetooth@@ Pb@@ ap@@ Service@@ ).@@ check@@ Or@@ Get@@ Phone@@ b@@ oo@@ k@@ Permission@@ (@@ any@@ ()); m@@ Pb@@ ap@@ StateMach@@ in@@ e = com.android.bluetooth.@@ p@@ b@@ ap.@@ Pb@@ ap@@ StateMachine.@@ m@@ ake@@ (m@@ Bluetooth@@ Pb@@ ap@@ Service@@ , m@@ Handler@@ Thread@@ .get@@ Loo@@ per@@ (), m@@ Test@@ Device@@ , m@@ Socket@@ , m@@ Bluetooth@@ Pb@@ ap@@ Service@@ , m@@ Handler@@ , com.android.bluetooth.@@ p@@ b@@ ap.@@ Pb@@ ap@@ StateMach@@ ine@@ Test.@@ TEST_@@ NO@@ TI@@ F@@ IC@@ A@@ TION_@@ ID@@ ); }
public void test@@ P@@ l@@ ain@@ Valu@@ es@@ () throw@@ s java.lang.Exception { assert@@ Equal@@ s@@ (("@@ string@@ s.@@ xml@@ :@@ 10@@ : W@@ ar@@ n@@ ing@@ : \"@@ thro@@ u@@ g@@ ht@@ \@@ " is a com@@ m@@ on mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ th@@ ou@@ g@@ ht@@ \@@ " or \"@@ thro@@ u@@ g@@ h@@ \@@ " or \"@@ thro@@ u@@ g@@ ho@@ ut@@ \"@@ ?@@ \n@@ " + ((@@ (("@@ string@@ s.@@ xml@@ :@@ 12@@ : W@@ ar@@ n@@ ing@@ : \"@@ Se@@ ach@@ \@@ " is a com@@ m@@ on mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ Se@@ arch@@ \"@@ ?@@ \n@@ " + "@@ string@@ s.@@ xml@@ :@@ 16@@ : W@@ ar@@ n@@ ing@@ : \"@@ T@@ us@@ con@@ \@@ " is a com@@ m@@ on mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ T@@ u@@ c@@ s@@ on@@ \"@@ ?@@ \n") + "@@ string@@ s.@@ xml@@ :@@ 6@@ : W@@ ar@@ n@@ ing@@ : \"@@ And@@ ri@@ o@@ d@@ \@@ " is a com@@ m@@ on mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ Android@@ \"@@ ?@@ \n") + "@@ string@@ s.@@ xml@@ :@@ 6@@ : W@@ ar@@ n@@ ing@@ : \"@@ ac@@ tivi@@ tes@@ \@@ " lo@@ ok@@ s li@@ k@@ e a mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ ac@@ tivi@@ \"@@ ?@@ \n") + "@@ string@@ s.@@ xml@@ :@@ 8@@ : W@@ ar@@ n@@ ing@@ : \"@@ C@@ mo@@ pu@@ ter@@ \@@ " lo@@ ok@@ s li@@ k@@ e a mis@@ s@@ p@@ ell@@ ing@@ ; d@@ id y@@ o@@ u m@@ e@@ an \"@@ Com@@ pu@@ ter@@ \"@@ ?@@ "@@ )), l@@ int@@ Project@@ ("@@ res@@ /@@ valu@@ es@@ /@@ typ@@ os.@@ xml@@ =@@ >@@ res@@ /@@ valu@@ es@@ /@@ string@@ s.@@ xml@@ ")); }
public void pre@@ Dex@@ Library@@ (@@ @com.android.annotations.NonNull java.io.File input@@ File@@ , @com.android.annotations.NonNull java.io.File out@@ File@@ , @com.android.annotations.NonNull com.android.builder.@@ Dex@@ Option@@ s dex@@ Option@@ s) throw@@ s com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Log@@ ged@@ Error@@ Exception, java.io.IO@@ Exception, java.lang.@@ Inter@@ rup@@ ted@@ Exception { check@@ NotNull@@ (in@@ put@@ File@@ , "@@ input@@ File can@@ not b@@ e null@@ .@@ "); check@@ NotNull@@ (@@ out@@ File@@ , "@@ out@@ File can@@ not b@@ e null@@ .@@ "); check@@ NotNull@@ (@@ dex@@ Option@@ s, "@@ dex@@ Option@@ s can@@ not b@@ e null@@ .@@ "); com.android.sdklib.@@ Build@@ Too@@ l@@ Info build@@ Too@@ l@@ Info = m@@ Target@@ Info@@ .get@@ Build@@ Too@@ l@@ s(); java.util.ArrayList<@@ java.lang.String> com@@ man@@ d = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (); java.lang.String d@@ x = build@@ Too@@ l@@ Info@@ .get@@ Path@@ (@@ Build@@ Too@@ l@@ Info.@@ Path@@ Id@@ .@@ D@@ X@@ ); if ((@@ d@@ x == null@@ ) || (!@@ (@@ new java.io.File@@ (d@@ x@@ ).@@ is@@ File@@ ()))) { throw new java.lang.Illegal@@ State@@ Exception("@@ d@@ x is mis@@ sing@@ "); } command@@ .add@@ (d@@ x@@ ); if ((@@ dex@@ Option@@ s.get@@ Java@@ Ma@@ x@@ He@@ ap@@ Size@@ ()) != null@@ ) { command@@ .add@@ (("@@ -@@ J@@ X@@ m@@ x@@ " + (@@ dex@@ Option@@ s.get@@ Java@@ Ma@@ x@@ He@@ ap@@ Size@@ ()))); } command@@ .add@@ ("@@ --@@ dex@@ "); if (m@@ Ver@@ bo@@ se@@ Ex@@ ec@@ ) { command@@ .add@@ ("@@ --@@ ver@@ bo@@ se@@ "); } if (@@ dex@@ Option@@ s.get@@ J@@ um@@ bo@@ Mode@@ ()) { command@@ .add@@ ("@@ -@@ for@@ ce@@ -@@ j@@ um@@ bo@@ "); } command@@ .add@@ ("@@ --@@ output@@ "); command@@ .@@ add(@@ out@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); command@@ .add@@ (in@@ put@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); mC@@ m@@ d@@ Line@@ Run@@ ner.@@ run@@ C@@ m@@ d@@ Line@@ (@@ command@@ , null@@ ); }
@java.lang.Override public int com@@ par@@ e@@ (com.android.@@ ahat.@@ Instance@@ Utils.@@ Native@@ Alloc@@ ation a@@ , com.android.ahat.@@ Instance@@ Utils.@@ Native@@ Alloc@@ ation b@@ ) { return com.android.ahat.@@ Instance@@ Utils.@@ Native@@ Alloc@@ ation b@@ .get@@ Native@@ Alloc@@ com@@ par@@ e@@ (@@ b.@@ size@@ , a.@@ siz@@ e); }
public static java.net.Inet@@ Address@@ [] b@@ lock@@ ing@@ Resol@@ ve@@ All@@ Loc@@ all@@ y@@ (android.net.@@ Net@@ wor@@ k network@@ , java.lang.String name@@ ) throw@@ s java.net.@@ Un@@ k@@ no@@ wn@@ Host@@ Exception { final android.system.@@ Str@@ u@@ ct@@ Add@@ r@@ in@@ fo h@@ int@@ s = new android.system.@@ Str@@ u@@ ct@@ Add@@ r@@ info@@ (); h@@ int@@ s.@@ a@@ i@@ _@@ flag@@ s = 0; h@@ int@@ s.@@ a@@ i@@ _@@ f@@ am@@ il@@ y = android.system.@@ O@@ s@@ Constants.@@ A@@ F@@ _@@ UN@@ S@@ P@@ EC@@ ; h@@ int@@ s.@@ a@@ i@@ _@@ s@@ ock@@ typ@@ e = android.system.@@ O@@ s@@ Constants.@@ S@@ O@@ C@@ K_@@ D@@ G@@ R@@ AM@@ ; final android.net.@@ Net@@ wor@@ k network@@ For@@ Resol@@ v = android.net.@@ d@@ n@@ s.@@ Resol@@ v@@ Util.@@ get@@ Network@@ With@@ U@@ se@@ Local@@ Nam@@ es@@ er@@ ver@@ s@@ Flag@@ (@@ network@@ ); try { return Lib@@ core.@@ os.@@ android@@ _@@ get@@ add@@ r@@ info@@ (@@ name@@ , h@@ int@@ s, (@@ (@@ int@@ ) (@@ network@@ For@@ Resol@@ v@@ .@@ net@@ Id@@ ))); } catch (android.@@ system.@@ G@@ a@@ i@@ Exception g@@ a@@ i@@ ) { g@@ a@@ i.@@ r@@ e@@ throw@@ As@@ Un@@ k@@ no@@ wn@@ Host@@ Exception("@@ T@@ L@@ S@@ -@@ b@@ yp@@ as@@ s res@@ ol@@ uti@@ on fa@@ ile@@ d@@ "); return null@@ ; } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public javax.@@ lang.@@ model.@@ typ@@ e.@@ Type@@ M@@ ir@@ ror get@@ Type@@ M@@ ir@@ ror@@ () throw@@ s com.android.sched.@@ build@@ .@@ S@@ ch@@ ed@@ Annot@@ ation@@ Process@@ or.@@ Ab@@ ort@@ Exception { javax.annotation.@@ process@@ ing.@@ Process@@ ing@@ En@@ vi@@ ron@@ m@@ ent local@@ En@@ v = com.android.sched.@@ build@@ .@@ S@@ ch@@ ed@@ Annot@@ ation@@ Process@@ or.@@ Item@@ s.@@ en@@ v@@ ; assert local@@ En@@ v != null@@ ; return local@@ En@@ v@@ .get@@ Type@@ Uti@@ l@@ s@@ ().get@@ Dec@@ l@@ ar@@ ed@@ Type@@ (get@@ Type@@ Element@@ (), local@@ En@@ v@@ .get@@ Type@@ Uti@@ l@@ s@@ ().get@@ W@@ ild@@ c@@ ard@@ Type@@ (@@ null@@ , null@@ )); }
@java.lang.Override protected void eng@@ ine@@ In@@ it@@ V@@ er@@ if@@ y@@ (@@ java.security.@@ P@@ u@@ bli@@ c@@ Ke@@ y public@@ Key@@ ) throw@@ s java.security.@@ In@@ valid@@ Key@@ Exception { if (@@ has@@ En@@ d@@ ()) { throw new java.lang.@@ Error@@ ("@@ un@@ suppor@@ ted ke@@ y go@@ t it@@ "); } try { p@@ r@@ int@@ ln@@ ("@@ y@@ a@@ y go@@ t it@@ "); } catch (@@ org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Key@@ Exception e) { throw new java.security.@@ In@@ valid@@ Key@@ Exception@@ (@@ e); } }
private static void add@@ File@@ With@@ F@@ oo@@ ter@@ s@@ To@@ D@@ ro@@ p@@ B@@ o@@ x@@ (android.os.@@ D@@ ro@@ p@@ B@@ o@@ x@@ Manager d@@ b@@ , java.util.@@ Hash@@ Map@@ <java.lang.String, java.lang.@@ Long@@ > tim@@ est@@ am@@ ps@@ , java.lang.String he@@ ad@@ er@@ s, java.lang.String f@@ oo@@ ter@@ s, java.lang.String fil@@ en@@ ame@@ , int max@@ Size@@ , java.lang.String t@@ ag@@ ) throw@@ s java.io.IOException { if ((@@ d@@ b == null@@ ) || (!(@@ d@@ b.@@ is@@ Tag@@ Enabled@@ (t@@ ag@@ )@@ ))) return@@ ; java.io.File fi@@ le = new java.io.File@@ (@@ fil@@ en@@ ame@@ ); long file@@ Tim@@ e = file.@@ las@@ t@@ Mo@@ d@@ if@@ i@@ ed@@ (); if (file@@ Tim@@ e <@@ = 0) return@@ ; if ((@@ tim@@ est@@ am@@ p@@ s.@@ contain@@ s@@ Key@@ (@@ fil@@ en@@ ame@@ )) && ((@@ tim@@ est@@ am@@ p@@ s.get@@ (@@ fil@@ en@@ ame@@ )) == file@@ Time@@ )) { return@@ ; } tim@@ est@@ am@@ p@@ s.@@ put@@ (@@ fil@@ en@@ ame@@ , file@@ Time@@ ); android.util.@@ S@@ log.@@ i@@ (com.android.server.@@ B@@ oot@@ Recei@@ ver.@@ TAG, ((@@ (("@@ Co@@ py@@ ing " + fil@@ en@@ ame@@ ) + " to D@@ ro@@ p@@ B@@ o@@ x ("@@ ) + t@@ ag@@ ) + "@@ )@@ ")); d@@ b.@@ add@@ Text@@ (t@@ ag@@ , ((@@ he@@ ad@@ er@@ s + (android.os.@@ File@@ Utils.@@ read@@ Text@@ File@@ (file@@ , max@@ Size@@ , "@@ [@@ TR@@ UN@@ C@@ A@@ TED@@ ]@@ \n@@ "@@ ))) + f@@ oo@@ ter@@ s@@ )); android.util.@@ S@@ log.@@ i@@ (com.android.server.@@ B@@ oot@@ Recei@@ ver.@@ TAG, java.lang.String@@ .@@ for@@ mat@@ ("@@ Co@@ pi@@ ed to D@@ ro@@ p@@ bo@@ x@@ : fil@@ en@@ ame@@ =@@ %@@ s, max@@ Size@@ =@@ %@@ d, t@@ ag@@ =@@ %@@ s", fil@@ en@@ ame@@ , max@@ Size@@ , t@@ ag@@ )); }
@javax.annotation.@@ N@@ on@@ null public static final java.io.File get@@ Jack@@ Root@@ Dir@@ () { return com.android.jack.test.@@ Test@@ s@@ Properties@@ .get@@ Jack@@ Root@@ Dir@@ (); }
public void run@@ () { while (!(@@ gu@@ ard@@ 2@@ .get@@ ())); Main.@@ load@@ (); Main.@@ expec@@ t@@ Equal@@ s@@ 6@@ 4@@ ((@@ -@@ 9@@ 8@@ 7@@ 6@@ 5@@ 4@@ 32@@ 1@@ L@@ ), m.@@ l@@ ); }
@java.lang.Override public java.lang.String get@@ Java@@ Source@@ Comp@@ ati@@ b@@ ili@@ ty@@ () { return m@@ Java@@ Source@@ Comp@@ ati@@ b@@ ili@@ ty@@ ; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 3@@ 8@@ 4@@ T@@ c@@ p@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 3@@ 8@@ 4@@ , get@@ A@@ u@@ th@@ Key@@ (@@ 3@@ 8@@ 4@@ ), 1@@ 9@@ 2@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , false@@ , 1); }
protected boolean sup@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ Mode@@ () { if (!(m@@ Config@@ Load@@ ed@@ )) { try { exec@@ ute@@ Sh@@ ell@@ Command@@ ((("@@ am st@@ ar@@ t -@@ n " + "@@ android.@@ server.@@ app@@ /@@ .@@ ") + (@@ S@@ U@@ P@@ P@@ OR@@ T_@@ O@@ B@@ S@@ ER@@ V@@ ER@@ ))); wait@@ For@@ Res@@ um@@ e@@ ("@@ android.@@ server.@@ app@@ ", android.@@ server.@@ cts.@@ S@@ U@@ P@@ P@@ OR@@ T_@@ O@@ B@@ S@@ ER@@ V@@ ER@@ ); java.util.@@ Ma@@ p ma@@ p = get@@ Log@@ Result@@ s(@@ android.@@ server.@@ cts.@@ S@@ U@@ P@@ P@@ OR@@ T_@@ O@@ B@@ S@@ ER@@ V@@ ER@@ ); java.lang.String valu@@ e = ((@@ java.lang.String@@ ) (m@@ ap@@ .get@@ (@@ RE@@ S@@ UL@@ T_@@ KE@@ Y_@@ H@@ E@@ AD@@ ))); if ((@@ valu@@ e != null@@ ) && (@@ valu@@ e.@@ equal@@ s("@@ O@@ K@@ "@@ ))) { m@@ Config@@ Load@@ ed = true@@ ; m@@ Sup@@ port@@ Multi@@ W@@ in@@ do@@ w = !@@ (m@@ ap@@ .get@@ ("@@ config@@ _@@ sup@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ ").@@ equals(@@ "@@ false@@ ")); } exec@@ ute@@ Sh@@ ell@@ Command@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ Test@@ Bas@@ e.@@ AM@@ _@@ F@@ OR@@ C@@ E_@@ S@@ TO@@ P@@ _@@ TEST_@@ P@@ AC@@ K@@ A@@ G@@ E); clear@@ Log@@ s(); } catch (java.lang.Exception e) { e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } } return m@@ Sup@@ port@@ Multi@@ W@@ in@@ do@@ w@@ ; }
private android.app.@@ P@@ end@@ ing@@ Int@@ ent create@@ Tele@@ com@@ P@@ end@@ ing@@ Intent@@ (java.lang.String action@@ , android.net.@@ Ur@@ i data@@ , android.os.@@ User@@ Hand@@ le user@@ Handle@@ ) { android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (@@ action@@ , data@@ , m@@ Contex@@ t, com.android.server.@@ telecom.@@ com@@ pon@@ ent@@ s.@@ Tele@@ com@@ Broadcast@@ Receiver@@ .@@ class@@ ); int@@ ent.@@ put@@ Extra@@ (@@ Tele@@ com@@ Broadcast@@ Intent@@ Process@@ or.@@ EX@@ TR@@ A@@ _@@ US@@ ER@@ H@@ AN@@ D@@ LE@@ , user@@ Handle@@ ); return android.app.@@ P@@ end@@ ing@@ Int@@ ent.get@@ Broadcast@@ (m@@ Contex@@ t, 0, int@@ ent@@ , P@@ end@@ ing@@ Int@@ ent.@@ F@@ LA@@ G@@ _@@ U@@ P@@ DA@@ TE_@@ C@@ UR@@ RE@@ N@@ T@@ ); }
@java.lang.Override public void qu@@ er@@ y@@ Call@@ B@@ ar@@ r@@ ing@@ (@@ int c@@ b@@ Type, android.os.@@ Message result@@ ) { qu@@ er@@ y@@ Call@@ B@@ ar@@ r@@ ing@@ (c@@ b@@ Type, com.android.@@ ims.@@ Ims@@ U@@ t.@@ S@@ ER@@ VIC@@ E_@@ C@@ LA@@ SS@@ _N@@ ON@@ E, result@@ ); }
public native android.system.@@ Str@@ u@@ ct@@ L@@ ing@@ er get@@ s@@ ock@@ op@@ t@@ L@@ ing@@ er@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ Errno@@ Exception;
public java.lang.@@ ref@@ le@@ ct.@@ Type@@ [] get@@ Gener@@ ic@@ Exception@@ Typ@@ es@@ () { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception("@@ Ex@@ ec@@ ut@@ able@@ .get@@ Gener@@ ic@@ Exception@@ Typ@@ es@@ () not im@@ p@@ lem@@ en@@ ted on Android@@ .@@ "); }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Long@@ Test@@ .@@ class@@ , time@@ out = 1@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Long@@ Test@@ _@@ With@@ Time@@ out@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ ("@@ test@@ ", "@@ java.util.@@ concurrent.@@ Time@@ out@@ Exception@@ \n@@ ").@@ ab@@ or@@ ted@@ (); }
@java.lang.Override public java.lang.String in@@ stall@@ Remote@@ Package@@ (java.lang.String remo@@ te@@ File@@ Path@@ , boolean re@@ in@@ stall@@ , java.lang.String.@@ .@@ . ex@@ tra@@ Arg@@ s) throw@@ s com.android.ddmlib.@@ In@@ stall@@ Exception { try { com.android.ddmlib.@@ Device.@@ In@@ stall@@ Recei@@ ve@@ r re@@ cei@@ ve@@ r = new com.android.ddmlib.@@ Device.@@ In@@ stall@@ Receiver@@ (); java.lang.String@@ Builder option@@ Str@@ ing = new java.lang.String@@ Builder@@ (); if (re@@ in@@ stall@@ ) { option@@ Str@@ ing.@@ append("@@ -@@ r "); } if (@@ ex@@ tra@@ Arg@@ s != null@@ ) { option@@ Str@@ ing.@@ append(@@ com.google.common.@@ b@@ ase.@@ J@@ o@@ in@@ er.@@ on@@ (@@ ' '@@ ).@@ j@@ o@@ in@@ (@@ ex@@ tra@@ Arg@@ s@@ )); } java.lang.String c@@ m@@ d = java.lang.String@@ .@@ for@@ mat@@ ("@@ p@@ m in@@ st@@ al@@ l %@@ 1@@ $@@ s \"@@ %@@ 2@@ $@@ s@@ \"@@ ", option@@ Str@@ ing.@@ toString@@ (), remo@@ te@@ File@@ Path@@ ); exec@@ ute@@ Sh@@ ell@@ Command@@ (c@@ m@@ d, re@@ cei@@ ver@@ , com.android.ddmlib.@@ Device.@@ IN@@ STA@@ L@@ L_@@ TI@@ ME@@ O@@ U@@ T_@@ M@@ IN@@ U@@ TE@@ S@@ , java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ M@@ IN@@ U@@ TE@@ S@@ ); return re@@ cei@@ ver.@@ get@@ Error@@ Message@@ (); } catch (com.android.@@ ddmlib.@@ Time@@ out@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ Sh@@ ell@@ Command@@ Un@@ res@@ pon@@ si@@ ve@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (java.io.IOException e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } }
private void re@@ pla@@ ce@@ Event@@ List@@ (@@ int s@@ lot@@ Id) { if ((m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Set@@ up@@ Event@@ List@@ Setting@@ s) != null@@ ) { for (@@ int curr@@ ent : m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Set@@ up@@ Event@@ List@@ Setting@@ s.@@ event@@ List@@ ) { if (c@@ urr@@ ent != (com.android.@@ st@@ k.@@ St@@ k@@ App@@ Service.@@ IN@@ VAL@@ ID@@ _S@@ E@@ T@@ U@@ P@@ _@@ EVEN@@ T@@ )) { if ((@@ (m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ C@@ m@@ d@@ .get@@ Set@@ Event@@ List@@ ()) == null@@ ) || (!(@@ find@@ Event@@ (c@@ urrent@@ , m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ C@@ m@@ d@@ .get@@ Set@@ Event@@ List@@ ().@@ event@@ List@@ )@@ ))) { if (is@@ Un@@ register@@ able@@ Event@@ (c@@ urrent@@ , s@@ lot@@ Id@@ )) { un@@ register@@ Event@@ (c@@ urrent@@ , s@@ lot@@ Id); } } } } m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Set@@ up@@ Event@@ List@@ Setting@@ s = m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ C@@ m@@ d@@ .get@@ Set@@ Event@@ List@@ (); m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ Set@@ up@@ Event@@ C@@ m@@ d = m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ C@@ m@@ d@@ ; m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ Current@@ C@@ m@@ d = m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ M@@ ain@@ C@@ m@@ d@@ ; register@@ Event@@ s(@@ s@@ lot@@ Id); }
static void field@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Class@@ S@@ pe@@ c@@ if@@ ic@@ ation class@@ Spec@@ , @javax.annotation.@@ Check@@ For@@ Null com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Annot@@ ation@@ S@@ pe@@ c@@ if@@ ic@@ ation annot@@ ation@@ Type, @javax.annotation.@@ Check@@ For@@ Null java.lang.String type@@ S@@ ig@@ , java.lang.String name@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Mo@@ d@@ if@@ ier@@ S@@ pe@@ c@@ if@@ ic@@ ation mo@@ d@@ if@@ ier@@ ) { assert name != null@@ ; com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Name@@ S@@ pe@@ c@@ if@@ ic@@ ation type@@ Sign@@ at@@ ur@@ e = null@@ ; if (@@ type@@ S@@ i@@ g != null@@ ) { type@@ Sign@@ at@@ ur@@ e = com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ (@@ type@@ S@@ ig@@ , com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ Filter@@ Se@@ par@@ ator@@ .@@ C@@ LA@@ SS@@ ); } else { assert nam@@ e.@@ equal@@ s("@@ *@@ "); } class@@ Spec@@ .add@@ (@@ new com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Field@@ S@@ pe@@ c@@ if@@ ic@@ ation@@ (com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ (@@ name@@ , com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ Filter@@ Se@@ par@@ ator@@ .@@ G@@ EN@@ ER@@ AL@@ ), mo@@ d@@ if@@ ier@@ , type@@ Sign@@ ature@@ , annot@@ ation@@ Type@@ )); }
public void v@@ p@@ n@@ Pre@@ par@@ e@@ And@@ E@@ st@@ a@@ bli@@ sh@@ () { android.os.@@ Par@@ cel@@ File@@ Descriptor des@@ crip@@ tor = null@@ ; android.content.@@ Int@@ ent new@@ Int@@ ent = android.net.@@ V@@ p@@ n@@ Service.@@ pre@@ par@@ e@@ (@@ this@@ ); if (@@ new@@ Int@@ ent != null@@ ) { try { des@@ crip@@ tor = v@@ p@@ n@@ Service@@ .@@ new android.net.@@ V@@ p@@ n@@ Service.@@ Builder@@ ().@@ add@@ Addres@@ s("@@ 8@@ .@@ 8@@ .@@ 8@@ ", 3@@ 0@@ ).@@ est@@ a@@ bli@@ sh@@ (); } final@@ l@@ y { try { des@@ crip@@ tor.@@ close(); po@@ p@@ ul@@ ate@@ Info@@ (@@ R.@@ str@@ ing.@@ device@@ _@@ o@@ wn@@ er@@ _@@ v@@ p@@ n@@ _@@ connection@@ ); } catch (java.lang.Exception e) { po@@ p@@ ul@@ ate@@ Info@@ (@@ R.@@ str@@ ing.@@ device@@ _@@ o@@ wn@@ er@@ _@@ no@@ _@@ v@@ p@@ n@@ _@@ connection@@ ); } } else { po@@ p@@ ul@@ ate@@ Info@@ (@@ R.@@ str@@ ing.@@ device@@ _@@ o@@ wn@@ er@@ _@@ no@@ _@@ v@@ p@@ n@@ _@@ connection@@ ); } }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ f@@ p@@ 1@@ 6 s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ f@@ p@@ 16@@ (p@@ RS@@ ); for (@@ int n@@ D@@ im@@ s = 1; n@@ D@@ im@@ s <@@ = 3@@ ; n@@ D@@ im@@ s@@ ++) { Test@@ H@@ al@@ f@@ (p@@ RS@@ , s, n@@ D@@ im@@ s); Test@@ H@@ al@@ f@@ 2@@ (p@@ RS@@ , s, n@@ D@@ im@@ s); Test@@ H@@ al@@ f@@ 3@@ (p@@ RS@@ , s, n@@ D@@ im@@ s); Test@@ H@@ al@@ f@@ 4@@ (p@@ RS@@ , s, n@@ D@@ im@@ s); } s.@@ invok@@ e@@ _@@ f@@ p@@ 16@@ _test@@ (); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
private void update@@ Min@@ ute@@ Control@@ () { if (is@@ 2@@ 4@@ H@@ our@@ View@@ ()) { if ((m@@ Min@@ ute@@ S@@ p@@ in@@ ner@@ Input@@ ) != null@@ ) { m@@ Min@@ ute@@ S@@ p@@ in@@ ner@@ In@@ pu@@ t.@@ set@@ Im@@ e@@ Option@@ s(@@ E@@ d@@ itor@@ Info.@@ I@@ M@@ E_@@ AC@@ TION_@@ D@@ ON@@ E); } else { if ((m@@ Min@@ ute@@ S@@ p@@ in@@ ner@@ Input@@ ) != null@@ ) { m@@ Min@@ ute@@ S@@ p@@ in@@ ner@@ In@@ pu@@ t.@@ set@@ Im@@ e@@ Option@@ s(@@ E@@ d@@ itor@@ Info.@@ I@@ M@@ E_@@ AC@@ TION@@ _N@@ EX@@ T@@ ); } } }
private void dum@@ p@@ To@@ Dir@@ (com.android.s@@ ched.@@ vfs.@@ V@@ Di@@ r src@@ Root@@ Dir@@ , com.android.sched.vfs.@@ V@@ Di@@ r d@@ est@@ Root@@ Dir@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ C@@ lose@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ Read@@ Exception, com.android.sched.util.file.@@ C@@ annot@@ W@@ rite@@ Exception, com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { for (com.android.s@@ ched.@@ vfs.@@ V@@ Elem@@ ent e@@ lem@@ ent : src@@ Root@@ Dir@@ .@@ list@@ ()) { java.lang.String e@@ lement@@ Name = e@@ lem@@ ent.get@@ Name@@ (); if (e@@ lem@@ ent.@@ is@@ V@@ Dir@@ ()) { com.android.sched.vfs.@@ V@@ Di@@ r di@@ r = d@@ est@@ Root@@ Dir@@ .@@ create@@ V@@ Dir@@ (e@@ lement@@ Name); dum@@ p@@ To@@ Dir@@ ((@@ (com.android.s@@ ched.@@ vfs.@@ V@@ Dir@@ ) (e@@ lement@@ )), d@@ ir@@ ); } else { com.android.sched.vfs.@@ V@@ File fi@@ le = d@@ est@@ Root@@ Dir@@ .@@ create@@ V@@ File@@ (e@@ lement@@ Name); try (@@ java.io.@@ Input@@ Stream is = ((@@ com.android.sched.vfs.@@ V@@ File@@ ) (e@@ lement@@ )@@ ).get@@ InputStream@@ ()) { try (@@ java.io.@@ Output@@ Stream o@@ s = file@@ .get@@ Output@@ Stream@@ ()) { new com.android.sched.util.@@ str@@ eam@@ .@@ Location@@ Byte@@ Stream@@ Su@@ ck@@ er@@ (is@@ , o@@ s, e@@ lement@@ , file@@ ).@@ su@@ ck@@ (); } catch (java.io.IOException e) { throw new com.android.sched.util.file.@@ C@@ annot@@ C@@ lose@@ Exception(@@ file@@ , e); } } catch (java.io.IOException e) { throw new com.android.sched.util.file.@@ C@@ annot@@ C@@ lose@@ Exception(@@ file@@ , e); } } } } }
private void on@@ Ref@@ res@@ h@@ (@@ boolean b@@ ) { }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 5@@ 12@@ T@@ c@@ p@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 5@@ 12@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (@@ 5@@ 12@@ ), 25@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
@@@ android.telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Reg@@ is@@ tr@@ ation@@ Imp@@ l@@ Bas@@ e.@@ Ims@@ Reg@@ is@@ tr@@ ation@@ T@@ ec@@ h private int get@@ Connection@@ Type@@ () { synchronized@@ (m@@ Lock) { return m@@ Connection@@ Type@@ ; } }
public boolean sup@@ port@@ s@@ Parameter@@ (@@ java.lang.Object param@@ eter@@ ) { java.lang.@@ Boole@@ an sup@@ port@@ s@@ Param@@ et@@ er = java.security.@@ Provid@@ er.@@ Service.@@ s@@ Sup@@ port@@ s@@ Param@@ et@@ er.get@@ (@@ typ@@ e); if (s@@ up@@ port@@ s@@ Param@@ et@@ er == null@@ ) { return true@@ ; } if (!@@ sup@@ port@@ s@@ Parameter@@ ) { throw new java.security.@@ In@@ valid@@ Parameter@@ Exception(("@@ Can@@ not u@@ se a param@@ et@@ er wit@@ h " + (@@ type@@ ))); } if ((@@ param@@ et@@ er != null@@ ) && (!(@@ param@@ et@@ er instanceof java.security.@@ Key@@ ))) { throw new java.security.@@ In@@ valid@@ Parameter@@ Exception("@@ Param@@ et@@ er sho@@ ul@@ d b@@ e of typ@@ e Key@@ "); } en@@ s@@ ure@@ Sup@@ ported@@ Ke@@ ys@@ In@@ itializ@@ ed@@ (); if (((@@ key@@ Class@@ es) == null@@ ) && ((@@ key@@ Format@@ s) == null@@ )) { return true@@ ; } java.security.@@ Ke@@ y key@@ Par@@ am = ((@@ java.security.@@ Key@@ ) (@@ param@@ eter@@ )); if (((@@ key@@ Class@@ es) != null@@ ) && (is@@ In@@ List@@ (@@ key@@ Class@@ es@@ , key@@ Param@@ .get@@ Class@@ ()))) { return true@@ ; } if (((@@ key@@ Format@@ s) != null@@ ) && (is@@ In@@ List@@ (@@ key@@ Format@@ s, key@@ Param@@ .get@@ Format@@ ()))) { return true@@ ; } return false@@ ; }
public void de@@ f@@ le@@ ct@@ Call@@ (java.lang.String call@@ Id, java.lang.String de@@ f@@ le@@ ct@@ Number@@ ) { try { m@@ Adap@@ ter.@@ de@@ f@@ le@@ ct@@ Call@@ (c@@ all@@ Id, de@@ f@@ le@@ ct@@ Number@@ ); } catch (android.os.RemoteException e) { } }
public void add@@ Data@@ (@@ java.util.List<@@ com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ in@@ crement@@ al.@@ Dependenc@@ y@@ Data@@ > data@@ List@@ ) { m@@ Data@@ List.@@ add@@ All@@ (d@@ ata@@ List@@ ); }
public android.system.@@ Str@@ u@@ ct@@ Time@@ va@@ l get@@ s@@ ock@@ op@@ t@@ Time@@ val@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ get@@ s@@ ock@@ op@@ t@@ Time@@ val@@ (f@@ d, le@@ vel@@ , option@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Clas@@ s create@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Pack@@ age enc@@ lo@@ sing@@ Package@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er load@@ er@@ ) { assert (@@ sign@@ ature@@ ) != null@@ ; java.lang.String b@@ in@@ ary@@ Name = com.android.jack.@@ util.@@ Nam@@ ing@@ Tools.@@ get@@ Class@@ Bin@@ ary@@ Name@@ From@@ Descrip@@ tor@@ (@@ sign@@ ature@@ ); java.lang.String si@@ mp@@ le@@ Name = com.android.jack.@@ util.@@ Nam@@ ing@@ Tools.@@ get@@ Sim@@ ple@@ Class@@ Name@@ From@@ Bin@@ ary@@ Name@@ (b@@ in@@ ary@@ Name); com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Clas@@ s j@@ Class@@ Type = new com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ (com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ , si@@ mp@@ le@@ Name, mo@@ d@@ if@@ ier@@ s, enc@@ lo@@ sing@@ Package@@ , load@@ er@@ ); return j@@ Class@@ Type@@ ; }
public void test_@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s() { java.util.@@ Loc@@ a@@ le.@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s("@@ x@@ -@@ f@@ oo@@ ", ext@@ ension@@ s); assert@@ Equal@@ s("@@ f@@ oo@@ ", ext@@ ension@@ s.get@@ (@@ '@@ x@@ '@@ )); ext@@ ension@@ s.@@ clear@@ (); java.util.@@ Loc@@ a@@ le.@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s.@@ clear@@ (); java.util.@@ Loc@@ a@@ le.@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s("@@ x@@ -@@ f@@ oo@@ -@@ y@@ -@@ b@@ ar@@ -@@ z@@ -@@ b@@ a@@ z@@ ", ext@@ ension@@ s); assert@@ Equal@@ s("@@ f@@ oo@@ ", ext@@ ension@@ s.get@@ (@@ '@@ x@@ '@@ )); assert@@ Equal@@ s("@@ b@@ ar@@ ", ext@@ ension@@ s.get@@ (@@ '@@ y@@ '@@ )); assert@@ Equal@@ s("@@ b@@ a@@ z@@ ", ext@@ ension@@ s.get@@ (@@ '@@ z@@ '@@ )); ext@@ ension@@ s.@@ clear@@ (); java.util.@@ Loc@@ a@@ le.@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s("@@ x@@ -@@ f@@ oo@@ o@@ -@@ b@@ a@@ ar@@ -@@ b@@ a@@ a@@ a@@ a@@ z@@ ", ext@@ ension@@ s); assert@@ Equal@@ s("@@ f@@ oo@@ o@@ -@@ b@@ a@@ ar@@ -@@ b@@ a@@ z@@ ", ext@@ ension@@ s.get@@ (@@ '@@ x@@ '@@ )); ext@@ ension@@ s.@@ clear@@ (); java.util.@@ Loc@@ a@@ le.@@ parse@@ Ser@@ i@@ aliz@@ ed@@ Ex@@ t@@ ension@@ s("@@ x@@ -@@ f@@ oo@@ o@@ -@@ b@@ a@@ ar@@ -@@ b@@ a@@ z@@ -@@ y@@ -@@ g@@ a@@ -@@ c@@ a@@ ar@@ -@@ c@@ a@@ z@@ ", ext@@ ension@@ s); assert@@ Equal@@ s("@@ f@@ oo@@ o@@ -@@ b@@ a@@ ar@@ -@@ b@@ a@@ z@@ ", ext@@ ension@@ s.get@@ (@@ '@@ x@@ '@@ )); assert@@ Equal@@ s("@@ g@@ a@@ a@@ -@@ c@@ a@@ ar@@ -@@ c@@ a@@ z@@ ", ext@@ ension@@ s.get@@ (@@ '@@ y@@ '@@ )); }
@java.lang.Override public void src@@ To@@ Ex@@ e@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File out, boolean z@@ ip@@ File@@ , @javax.annotation.@@ N@@ on@@ null java.io.File@@ .@@ .@@ .@@ . s@@ ources@@ ) throw@@ s java.lang.Exception { java.util.List<@@ java.lang.String> arg@@ s = new java.util.ArrayList<@@ java.lang.String@@ >(); src@@ To@@ Com@@ mon@@ (@@ arg@@ s, s@@ ources@@ ); if (@@ z@@ ip@@ File@@ ) { args.@@ add@@ ("@@ --@@ output@@ -@@ dex@@ -@@ z@@ ip@@ "); } else { args.@@ add@@ ("@@ --@@ output@@ -@@ dex@@ "); } args.@@ add(@@ ou@@ t.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); args.@@ add@@ All@@ (@@ ex@@ tra@@ Jack@@ Arg@@ s); if (@@ w@@ ith@@ Debug@@ Info@@ s) { args.@@ add@@ ("@@ -@@ g@@ "); } com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ add@@ File@@ (@@ arg@@ s, false@@ , s@@ ources@@ ); com.android.jack.test.@@ util.@@ Ex@@ ec@@ ute@@ File ex@@ e@@ c = new com.android.jack.test.@@ util.@@ Ex@@ ec@@ ute@@ File@@ (@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )); exec@@ .set@@ Er@@ r@@ (@@ out@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Out@@ (@@ er@@ r@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Ver@@ bo@@ se@@ (is@@ Ver@@ bo@@ se@@ ); try { if ((@@ exec@@ .@@ run@@ ()) != 0) { throw new java.lang.Runtime@@ Exception("@@ J@@ ac@@ k compile@@ r ex@@ i@@ ted wit@@ h an error@@ "); } } catch (com.android.jack.@@ test.@@ util.@@ Ex@@ ec@@ File@@ Exception e) { throw new java.lang.Runtime@@ Exception("@@ A@@ n er@@ ror o@@ cc@@ ure@@ d while run@@ n@@ ing Jack@@ ", e); } }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public void qu@@ er@@ y@@ F@@ d@@ n@@ () { int service@@ Class@@ X@@ ; service@@ Class@@ X = ((@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Command@@ s@@ Interface@@ .@@ S@@ ER@@ VIC@@ E_@@ C@@ LA@@ SS@@ _@@ V@@ O@@ IC@@ E@@ ) + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Command@@ s@@ Interface@@ .@@ S@@ ER@@ VIC@@ E_@@ C@@ LA@@ SS@@ _@@ DA@@ TA@@ )) + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Command@@ s@@ Interface@@ .@@ S@@ ER@@ VIC@@ E_@@ C@@ LA@@ SS@@ _@@ FA@@ X@@ ); mC@@ i.@@ qu@@ er@@ y@@ F@@ ac@@ ili@@ ty@@ Lock@@ For@@ App@@ (@@ Command@@ s@@ Interface@@ .@@ C@@ B@@ _@@ F@@ AC@@ IL@@ ITY@@ _@@ B@@ A@@ _@@ F@@ D@@ , "@@ ", service@@ Class@@ X@@ , m@@ A@@ id, m@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ Appli@@ c@@ ation.@@ EVEN@@ T_@@ Q@@ U@@ ER@@ Y_@@ F@@ AC@@ IL@@ ITY@@ _@@ F@@ D@@ N@@ _@@ D@@ ON@@ E@@ )); }
@java.lang.Override public void de@@ lete@@ Sms@@ On@@ Sim@@ (@@ int index@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ DE@@ LE@@ TE_@@ S@@ M@@ S_@@ ON@@ _S@@ I@@ M@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ V@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " in@@ dex = ") + index@@ )); } try { radioProx@@ y.@@ de@@ lete@@ Sms@@ On@@ Sim@@ (rr@@ .m@@ Ser@@ ial@@ , index@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ de@@ lete@@ Sms@@ On@@ Sim@@ ", e); } } }
public void p@@ au@@ se@@ Scan@@ () { android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Statu@@ s stat@@ us@@ ; synchronized@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ V@@ e@@ n@@ do@@ r@@ H@@ al.@@ s@@ Lock) { try { if ((m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ ) == null@@ ) return@@ ; if ((@@ (m@@ Scan@@ ) != null@@ ) && (!(m@@ Scan@@ .@@ p@@ a@@ us@@ ed@@ ))) { statu@@ s = m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ .@@ st@@ op@@ B@@ ack@@ gro@@ und@@ Scan@@ (m@@ Scan@@ .@@ c@@ m@@ d@@ Id); if (!(@@ ok@@ (@@ stat@@ us@@ ))) return@@ ; } m@@ Scan@@ .@@ p@@ au@@ se@@ d = true@@ ; } } catch (android.os.RemoteException e) { handle@@ Remote@@ Exception(@@ e); } } }
public void de@@ ac@@ ti@@ v@@ ate@@ Data@@ Call@@ (@@ int c@@ id, @@@ android.telephony.@@ data@@ .@@ Data@@ Service.@@ Request@@ Re@@ as@@ on int re@@ as@@ on@@ , android.telephony.@@ data@@ .@@ Data@@ Service@@ Call@@ b@@ ac@@ k call@@ back@@ ) { call@@ back@@ .@@ on@@ De@@ ac@@ ti@@ v@@ ate@@ Data@@ Call@@ Comp@@ lete@@ (@@ Data@@ Service@@ Callback@@ .@@ RE@@ S@@ UL@@ T_@@ ER@@ R@@ OR@@ _@@ UN@@ S@@ U@@ P@@ P@@ OR@@ TED@@ ); }
@org.junit.Test public void test@@ In@@ it@@ State@@ () throw@@ s java.lang.Exception { org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ , m@@ H@@ id@@ Device@@ Service@@ .get@@ Connection@@ State@@ (m@@ Test@@ Device@@ )); byte@@ [] test@@ Device = new byte@@ []{ 16@@ , 1@@ 7@@ , 1@@ 8@@ , 1@@ 9@@ , 2@@ 0, 2@@ 1 }; m@@ H@@ id@@ Device@@ Service.@@ on@@ Application@@ State@@ Changed@@ From@@ Native@@ (@@ test@@ Device@@ , true@@ ); m@@ H@@ id@@ Device@@ Service.@@ on@@ Connec@@ t@@ State@@ Changed@@ From@@ Native@@ (@@ test@@ Device@@ , 0); }
@org.junit.Test public void test@@ Broadcast@@ Ref@@ res@@ h@@ () { android.os.@@ Message ms@@ g = new android.os.@@ Message@@ (); ms@@ g.@@ wh@@ at = ((@@ java.lang.Integ@@ er@@ ) (get@@ St@@ ati@@ c@@ Field@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ I@@ si@@ m@@ Uicc@@ Record@@ s@@ .@@ class@@ , m@@ I@@ si@@ m@@ Uicc@@ Record@@ s, "@@ EVEN@@ T_@@ I@@ SI@@ M@@ _RE@@ F@@ RE@@ S@@ H@@ "@@ ))); m@@ I@@ si@@ m@@ Uicc@@ Record@@ s.@@ handle@@ Message@@ (m@@ s@@ g@@ ); org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ <@@ android.content.@@ Intent@@ > int@@ ent@@ Cap@@ t@@ ur@@ e = org.@@ mock@@ it@@ o@@ .@@ Argument@@ Cap@@ tor@@ .@@ for@@ Clas@@ s(@@ android.content.@@ Intent@@ .@@ class@@ ); ve@@ r@@ if@@ y@@ (m@@ Context@@ ).@@ send@@ Broadcast@@ (@@ int@@ ent@@ Cap@@ t@@ ure@@ .@@ cap@@ t@@ ure@@ ()); assert@@ Equal@@ s@@ ((@@ (android.content.@@ Intent@@ ) (@@ int@@ ent@@ Cap@@ t@@ ure@@ .get@@ Value@@ ()@@ )@@ ).get@@ Action@@ (), I@@ si@@ m@@ Uicc@@ Record@@ s.@@ IN@@ TE@@ N@@ T_@@ I@@ SI@@ M@@ _RE@@ F@@ RE@@ S@@ H@@ ); }
private static void check@@ Throw@@ s@@ Par@@ ser@@ Exception@@ (java.lang.String xml@@ ) throw@@ s java.lang.Exception { try { libcore.@@ util.@@ TimeZone@@ F@@ in@@ der@@ Test.@@ parse@@ (@@ xml@@ ); fail@@ (); } catch (@@ org.@@ xml@@ p@@ ul@@ l.@@ v@@ 1.@@ Xml@@ P@@ ull@@ Par@@ ser@@ Exception expected@@ ) { } }
private static void provid@@ e@@ J@@ ar@@ E@@ n@@ try@@ (java.util.@@ ja@@ r.@@ J@@ ar@@ File ja@@ r@@ File@@ , java.util.@@ ja@@ r.@@ J@@ ar@@ E@@ n@@ try ja@@ r@@ E@@ n@@ try@@ , com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ In@@ spec@@ t@@ J@@ ar@@ E@@ n@@ try@@ Requ@@ est request@@ , byte@@ [] t@@ mp@@ bu@@ f@@ ) throw@@ s java.io.IOException { com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ in@@ k data@@ S@@ in@@ k = requ@@ est.@@ get@@ Data@@ S@@ in@@ k@@ (); try (@@ java.io.@@ Input@@ Stream in = ja@@ r@@ File@@ .get@@ InputStream@@ (@@ ja@@ r@@ E@@ n@@ try@@ )) { int ch@@ un@@ k@@ Size@@ ; while ((@@ ch@@ un@@ k@@ Siz@@ e = in@@ .@@ read@@ (t@@ mp@@ bu@@ f@@ )) > 0) { data@@ S@@ in@@ k.@@ cons@@ um@@ e@@ (t@@ mp@@ bu@@ f@@ , 0, ch@@ un@@ k@@ Siz@@ e); } request@@ .@@ do@@ ne@@ (); } }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ config@@ ") org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Ob@@ ject config@@ ) throw@@ s org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Exception { try { w@@ if@@ i@@ Connec@@ t@@ By@@ Config@@ (@@ config@@ ); } catch (@@ java.security.@@ Gener@@ al@@ Sec@@ urit@@ y@@ Exception e) { java.lang.String ms@@ g = "@@ C@@ au@@ g@@ h@@ t Gener@@ al@@ Sec@@ urit@@ y@@ Exception wit@@ h th@@ e provid@@ ed@@ " + "@@ config@@ ur@@ ation@@ "; throw new java.lang.Runtime@@ Exception@@ (m@@ s@@ g@@ ); } return true@@ ; }
private void add@@ Co@@ ver@@ age@@ Listener@@ () { if (get@@ Boole@@ an@@ Argument@@ (com.android.@@ test.@@ run@@ ner.@@ Android@@ J@@ Un@@ it@@ Run@@ ner.@@ AR@@ G@@ U@@ M@@ EN@@ T_@@ C@@ O@@ V@@ ER@@ A@@ G@@ E@@ )) { java.lang.String cover@@ age@@ File@@ P@@ ath = get@@ Argument@@ s@@ ().get@@ String@@ (com.android.@@ test.@@ run@@ ner.@@ Android@@ J@@ Un@@ it@@ Run@@ ner.@@ AR@@ G@@ U@@ M@@ EN@@ T_@@ C@@ O@@ V@@ ER@@ A@@ G@@ E_@@ P@@ A@@ TH@@ ); add@@ Listener@@ (@@ new com.android.@@ test.@@ run@@ ner.@@ list@@ en@@ er.@@ Co@@ ver@@ age@@ Listener@@ (@@ this@@ , cover@@ age@@ File@@ Path@@ )); } }
private void m@@ ark@@ I@@ f@@ N@@ ec@@ ess@@ ary@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ No@@ de no@@ de@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Ke@@ e@@ p@@ Mo@@ d@@ if@@ i@@ er mo@@ d@@ if@@ ier@@ ) { com.android.jack.@@ sh@@ ro@@ b.@@ se@@ ed.@@ Se@@ ed@@ Mark@@ er m@@ ark@@ er = no@@ d@@ e.@@ add@@ Mark@@ er@@ I@@ f@@ Ab@@ s@@ ent@@ (@@ new com.android.jack.@@ sh@@ ro@@ b.@@ se@@ ed.@@ Se@@ ed@@ Mark@@ er@@ (m@@ o@@ d@@ if@@ ier@@ )); if (m@@ ark@@ er != null@@ ) { if ((m@@ ark@@ er.get@@ Mo@@ d@@ if@@ ier@@ ()) != mo@@ d@@ if@@ ier@@ ) { no@@ d@@ e.@@ add@@ Mark@@ er@@ (@@ new com.android.jack.@@ sh@@ ro@@ b.@@ se@@ ed.@@ Se@@ ed@@ Mark@@ er@@ (@@ new com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Ke@@ e@@ p@@ Mo@@ d@@ if@@ ier@@ ())); } } }
@java.lang.Override @@@ android.@@ annotation.@@ NonNull public android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le get@@ Config@@ For@@ Sub@@ Id@@ (@@ int sub@@ Id) { try { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ RE@@ AD@@ _P@@ R@@ I@@ V@@ IL@@ E@@ G@@ ED@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ , null@@ ); } catch (java.lang.@@ Sec@@ urit@@ y@@ Exception e) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ RE@@ AD@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ , null@@ ); } int phon@@ e@@ Id = android.telephony.@@ Sub@@ s@@ cription@@ Manager.get@@ Phone@@ Id@@ (s@@ ub@@ Id); android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le ret@@ Con@@ fig = android.telephony.@@ C@@ arrier@@ Config@@ Manager.get@@ Default@@ Config@@ (); if (android.@@ telephony.@@ Sub@@ s@@ cription@@ Manager.@@ is@@ Valid@@ Phone@@ Id@@ (@@ phon@@ e@@ Id@@ )) { android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le con@@ fig = m@@ Config@@ From@@ Default@@ App@@ [@@ phon@@ e@@ Id@@ ]; if (@@ con@@ fig != null@@ ) { ret@@ Config.@@ put@@ All@@ (@@ config@@ ); ret@@ Config.@@ put@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y@@ _C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _@@ O@@ V@@ ER@@ R@@ ID@@ E_@@ B@@ O@@ O@@ L, true@@ ); } con@@ fig = m@@ Config@@ From@@ C@@ arrier@@ App@@ [@@ phon@@ e@@ Id@@ ]; if (@@ con@@ fig != null@@ ) { ret@@ Config.@@ put@@ All@@ (@@ config@@ ); ret@@ Config.@@ put@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y@@ _C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _@@ O@@ V@@ ER@@ R@@ ID@@ E_@@ B@@ O@@ L, true@@ ); } } return ret@@ Config@@ ; }
private void load@@ List@@ () { final com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ Source@@ [] k@@ no@@ wn@@ Source@@ s = m@@ Up@@ dat@@ er@@ Data@@ .get@@ S@@ ources@@ ().get@@ S@@ ources@@ (@@ Sdk@@ Source@@ C@@ ate@@ gor@@ y.@@ US@@ ER_@@ AD@@ D@@ ON@@ S@@ ); m@@ List@@ View@@ er.@@ set@@ Input@@ (@@ k@@ no@@ wn@@ S@@ ources@@ ); m@@ List@@ View@@ er.@@ ref@@ res@@ h@@ (); }
public static com.android.builder.@@ pro@@ file.@@ Recor@@ der get@@ () { return com.android.builder.@@ pro@@ file.@@ Process@@ Recor@@ der@@ Fa@@ ctor@@ y.@@ is@@ Enabled@@ () ? com.android.builder.@@ pro@@ file.@@ Thread@@ Record@@ er.@@ re@@ cor@@ d@@ er.get@@ () : com.android.builder.@@ pro@@ file.@@ Thread@@ Record@@ er.@@ dum@@ my@@ Recor@@ der@@ ; }
@java.lang.Override public void send@@ Connection@@ Event@@ (java.lang.String event@@ , android.os.@@ Bund@@ le ex@@ tr@@ as@@ ) { m@@ L@@ ast@@ Connection@@ Ev@@ ent = event@@ ; }
public static com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ature@@ Info find@@ Sign@@ ature@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce apk@@ , com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Utils.@@ Zip@@ Sec@@ tion@@ s z@@ ip@@ Sec@@ tion@@ s, int b@@ lock@@ Id, com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult result@@ ) throw@@ s com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ S@@ ch@@ em@@ e.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ ature@@ Not@@ F@@ ound@@ Exception, java.io.IOException { com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce apk@@ Sign@@ ing@@ Block@@ ; long apk@@ Sign@@ ing@@ Block@@ Offset@@ ; try { com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Utils.@@ Apk@@ Sign@@ ing@@ Block@@ loc@@ k apk@@ Sign@@ ing@@ Block@@ Info = com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Utils.@@ find@@ Apk@@ Sign@@ ing@@ Block@@ (@@ apk@@ , z@@ ip@@ Sec@@ tion@@ s); apk@@ Sign@@ ing@@ Block@@ O@@ ff@@ set = apk@@ Sign@@ ing@@ Block@@ Info@@ .get@@ Start@@ Offset@@ (); apk@@ Sign@@ ing@@ B@@ loc@@ k = apk@@ Sign@@ ing@@ Block@@ Info@@ .get@@ Content@@ s(); } catch (com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Not@@ F@@ ound@@ Exception e) { throw new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Sign@@ ature@@ Not@@ F@@ ound@@ Exception(@@ e.get@@ Message@@ (), e); } java.nio.Byte@@ Buff@@ er apk@@ Sign@@ ing@@ Block@@ Bu@@ f = apk@@ Sign@@ ing@@ Block@@ .get@@ Byte@@ Buffer@@ (@@ 0, (@@ (@@ int@@ ) (@@ apk@@ Sign@@ ing@@ Block@@ .@@ size@@ ()))); apk@@ Sign@@ ing@@ Block@@ Bu@@ f.@@ or@@ der@@ (@@ java.nio.Byte@@ Or@@ d@@ er.@@ L@@ I@@ T@@ T@@ L@@ E_@@ EN@@ DI@@ AN@@ ); java.nio.Byte@@ Buff@@ er apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ B@@ loc@@ k = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ find@@ Apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ Block@@ (@@ apk@@ Sign@@ ing@@ Block@@ Bu@@ f@@ , b@@ lock@@ Id, result@@ ); return new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e.@@ Sign@@ ature@@ Info@@ (@@ apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ Block@@ , apk@@ Sign@@ ing@@ Block@@ Offset@@ , z@@ ip@@ Sec@@ tion@@ s.get@@ Zip@@ C@@ en@@ tr@@ al@@ Directory@@ Offset@@ (), z@@ ip@@ Sec@@ tion@@ s.get@@ Zip@@ En@@ d@@ Of@@ C@@ en@@ tr@@ al@@ Directory@@ Offset@@ (), z@@ ip@@ Sec@@ tion@@ s.get@@ Zip@@ En@@ d@@ Of@@ C@@ en@@ tr@@ al@@ Directory@@ ()); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public java.nio.@@ file.@@ at@@ tribute@@ .@@ File@@ Tim@@ e get@@ L@@ ast@@ Mo@@ d@@ if@@ i@@ ed@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Par@@ ent@@ V@@ File file@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ Get@@ Mo@@ d@@ if@@ ic@@ ation@@ Time@@ Exception { try { return java.nio.@@ file.@@ Fil@@ es@@ .get@@ L@@ ast@@ Mo@@ d@@ if@@ i@@ ed@@ Time@@ (get@@ Native@@ File@@ (file@@ .get@@ Path@@ ()).@@ to@@ Path@@ ()).@@ to@@ Path@@ ()); } catch (java.io.IOException e) { throw new com.android.sched.util.file.@@ C@@ annot@@ Read@@ Exception@@ (@@ this@@ , e); } }
private int t@@ ether@@ (java.lang.String if@@ a@@ ce@@ , com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ Mod@@ e mode@@ ) { if (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ DBG) android.util.Log.d@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ TAG, ("@@ T@@ ether@@ ing " + if@@ a@@ ce@@ )); synchronized@@ (m@@ P@@ u@@ bli@@ c@@ S@@ ync@@ ) { com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ T@@ ether@@ State t@@ ether@@ State = m@@ T@@ ether@@ Stat@@ es@@ .get@@ (@@ if@@ a@@ ce@@ ); if (t@@ ether@@ State == null@@ ) { android.util.Log.e@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ TAG, (("@@ T@@ ri@@ ed to T@@ et@@ h@@ er an un@@ k@@ no@@ w@@ n if@@ a@@ ce@@ : " + if@@ a@@ ce@@ ) + ", ign@@ or@@ ing@@ ")); return android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER_@@ ER@@ R@@ OR@@ _@@ UN@@ K@@ NO@@ W@@ N@@ _@@ I@@ F@@ AC@@ E@@ ; } if ((@@ t@@ ether@@ State.@@ las@@ t@@ State@@ ) != (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ AV@@ A@@ IL@@ ABL@@ E@@ )) { android.util.Log.e@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing.@@ TAG, (("@@ T@@ ri@@ ed to T@@ et@@ h@@ er an un@@ ava@@ il@@ able if@@ a@@ ce@@ : " + if@@ a@@ ce@@ ) + ", ign@@ or@@ ing@@ ")); return android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER_@@ ER@@ R@@ OR@@ _@@ UN@@ AV@@ A@@ IL@@ _@@ I@@ F@@ AC@@ E@@ ; } t@@ ether@@ State.@@ state@@ Mach@@ ine.@@ send@@ Message@@ (@@ T@@ ether@@ Interface@@ StateMachine.@@ C@@ M@@ D_@@ TE@@ TH@@ ER@@ _RE@@ Q@@ UE@@ S@@ TED@@ , mode@@ ); return android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER_@@ ER@@ R@@ OR@@ _N@@ O@@ _@@ ER@@ R@@ OR@@ ; } }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 4@@ .@@ Long@@ Test@@ .@@ class@@ , time@@ out = 1@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Long@@ Test@@ _@@ With@@ Time@@ out@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ ("@@ test@@ ", "@@ java.util.@@ concurrent.@@ Time@@ out@@ Exception@@ \n@@ ").@@ ab@@ or@@ ted@@ (); }
private static void run@@ At@@ t@@ ach@@ Test@@ C@@ m@@ d@@ (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ I@@ Test@@ Device device@@ , java.lang.String p@@ kg@@ , java.lang.String ag@@ ent@@ Param@@ s) throw@@ s java.lang.Exception { java.lang.String att@@ ach@@ C@@ m@@ d = ((("@@ c@@ m@@ d ac@@ tivi@@ t@@ y st@@ ar@@ t -@@ S -@@ W " + ag@@ ent@@ Param@@ s) + " -@@ n ") + p@@ kg@@ ) + "@@ /@@ android.@@ j@@ vm@@ ti@@ .@@ J@@ vm@@ ti@@ Activity@@ "; java.lang.String att@@ ach@@ Re@@ pl@@ y = device@@ .@@ exec@@ ute@@ Sh@@ ell@@ Command@@ (@@ att@@ ach@@ C@@ m@@ d@@ ); if ((@@ att@@ ach@@ Re@@ pl@@ y != null@@ ) && (!(@@ att@@ ach@@ Re@@ pl@@ y.@@ tr@@ im@@ ().@@ isEmpty@@ ()))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ att@@ ach@@ Re@@ pl@@ y@@ ); } }
@org.junit.Test public void pro@@ vision@@ ing@@ Not@@ Requ@@ ire@@ d@@ W@@ h@@ en@@ C@@ arrier@@ Config@@ M@@ is@@ sing@@ () { set@@ up@@ For@@ Requ@@ ire@@ d@@ Pro@@ vision@@ ing@@ (); when(m@@ C@@ arrier@@ Config@@ Manager.get@@ Config@@ ()).@@ thenReturn@@ (@@ null@@ ); when(m@@ C@@ arrier@@ Config@@ Manager.get@@ Config@@ ()).@@ thenReturn@@ (@@ null@@ ); when(m@@ C@@ arrier@@ Config@@ Manager.get@@ Config@@ ()).@@ thenReturn@@ (@@ null@@ ); when(m@@ C@@ arrier@@ Config@@ Manager.get@@ Config@@ ()).@@ thenReturn@@ (@@ null@@ ); when(m@@ C@@ arrier@@ Config@@ Manager.get@@ Config@@ ()).@@ thenReturn@@ (@@ null@@ ); m@@ T@@ ether@@ ing.@@ is@@ T@@ ether@@ Pro@@ vision@@ ing@@ Requ@@ ire@@ d@@ ()))); }
public void run@@ () { while (!(@@ gu@@ ard@@ 1@@ .get@@ ())); Main.@@ f@@ ull@@ (); Main.@@ expec@@ t@@ Equal@@ s@@ 6@@ 4@@ ((@@ -1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ L@@ ), m.@@ l@@ ); }
public void test@@ Com@@ ment@@ And@@ Extra@@ In@@ S@@ ame@@ Or@@ der@@ () throw@@ s java.lang.Exception { java.lang.String com@@ m@@ ent = libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ m@@ ake@@ String@@ (1@@ 7@@ , "@@ z@@ "); byte@@ [] ex@@ tr@@ a = libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ m@@ ake@@ String@@ (1@@ 1, "@@ a@@ "@@ ).get@@ Bytes@@ (); java.util.@@ z@@ i@@ p.@@ Zip@@ Output@@ Stream out = libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ create@@ Zip@@ Output@@ Stream@@ (m@@ File@@ ); java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try z@@ e = new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ ("@@ x@@ "); z@@ e.@@ set@@ Size@@ (@@ 0); z@@ e.@@ set@@ Time@@ (@@ libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ EN@@ TR@@ Y_@@ TI@@ M@@ E); z@@ e.@@ set@@ Extra@@ (@@ ex@@ tra@@ ); z@@ e.@@ set@@ Com@@ ment@@ (@@ com@@ ment@@ ); out.@@ put@@ Next@@ E@@ n@@ try@@ (@@ z@@ e); out.@@ close@@ E@@ n@@ try@@ (); z@@ e = new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ ("@@ y@@ "); z@@ e.@@ set@@ Time@@ (@@ libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ Test.@@ EN@@ TR@@ Y_@@ TI@@ M@@ E); z@@ e.@@ set@@ Extra@@ (@@ ex@@ tra@@ ); z@@ e.@@ set@@ Com@@ ment@@ (@@ com@@ ment@@ ); out.@@ put@@ Next@@ E@@ n@@ try@@ (@@ z@@ e); out.@@ close@@ E@@ n@@ try@@ (); out.@@ close(); java.util.@@ z@@ i@@ p.@@ Zip@@ File z@@ ip@@ File = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (m@@ File@@ ); try { assert@@ Equal@@ s(@@ com@@ ment@@ , z@@ ip@@ File@@ .get@@ E@@ n@@ try@@ ("@@ x@@ "@@ ).get@@ Com@@ ment@@ ()); assert@@ True@@ (@@ java.util.Arrays.@@ equals(@@ ex@@ tra@@ , z@@ ip@@ File@@ .get@@ E@@ n@@ try@@ ("@@ x@@ "@@ ).get@@ Extra@@ ())); assert@@ Equal@@ s(@@ com@@ ment@@ , z@@ ip@@ File@@ .get@@ E@@ n@@ try@@ ("@@ y@@ "@@ ).get@@ Com@@ ment@@ ()); assert@@ True@@ (@@ java.util.Arrays.@@ equals(@@ ex@@ tra@@ , z@@ ip@@ File@@ .get@@ E@@ n@@ try@@ ("@@ y@@ "@@ ).get@@ Extra@@ ())); } final@@ l@@ y { z@@ ip@@ File@@ .@@ close(); } }
public java.util.@@ ja@@ r.@@ M@@ an@@ if@@ est get@@ M@@ an@@ if@@ est@@ () throw@@ s java.io.IOException { if ((m@@ an@@ if@@ est@@ ) != null@@ ) { return m@@ an@@ if@@ est@@ ; } if ((m@@ an@@ if@@ est@@ ) == null@@ ) { return null@@ ; } m@@ an@@ if@@ est = new java.util.@@ ja@@ r.@@ M@@ an@@ if@@ est@@ (m@@ an@@ if@@ est@@ Bytes@@ , ((@@ ve@@ r@@ if@@ ier@@ ) != null@@ )); m@@ an@@ if@@ est@@ Byte@@ s = null@@ ; return m@@ an@@ if@@ est@@ ; }
@java.lang.Override protected boolean start@@ () { android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ start@@ ()@@ "); m@@ Session@@ Status@@ Handle@@ r = new com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ Pb@@ ap@@ Handler@@ (); android.content.@@ Intent@@ Fil@@ ter fil@@ ter = new android.content.@@ Intent@@ Filter@@ (); fil@@ ter.@@ add@@ Action@@ (@@ Bluetooth@@ Device.@@ AC@@ TION@@ _C@@ ON@@ NEC@@ TION_@@ AC@@ CE@@ SS@@ _RE@@ P@@ L@@ Y); fil@@ ter.@@ add@@ Action@@ (@@ Bluetooth@@ Device.@@ AC@@ TION_@@ AC@@ L_@@ D@@ IS@@ CONNEC@@ TED@@ ); fil@@ ter.@@ add@@ Action@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ A@@ UT@@ H@@ _RE@@ S@@ P@@ ON@@ S@@ E_@@ AC@@ TION@@ ); fil@@ ter.@@ add@@ Action@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ A@@ UT@@ H@@ _C@@ AN@@ CE@@ L@@ L@@ ED@@ _@@ AC@@ TION@@ ); m@@ Inter@@ rup@@ ted = false@@ ; com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Config.@@ in@@ it@@ (@@ this@@ ); m@@ Session@@ Status@@ Handler.@@ send@@ Message@@ (m@@ Session@@ Status@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ STA@@ R@@ T_@@ LIS@@ TE@@ N@@ ER@@ )); if ((m@@ Cont@@ act@@ Change@@ Ob@@ server@@ ) == null@@ ) { register@@ Receiver@@ (m@@ Pb@@ ap@@ Receiver@@ , fil@@ ter@@ ); try { if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ DE@@ BU@@ G) { android.util.Log.d@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ Reg@@ ister@@ ing ob@@ server@@ "); } m@@ Cont@@ act@@ Change@@ Ob@@ ser@@ ve@@ r = new com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.@@ Bluetooth@@ Pb@@ ap@@ Content@@ Ob@@ server@@ (); get@@ Content@@ Resol@@ ver@@ ().@@ register@@ Content@@ Ob@@ server@@ (com.android.bluetooth.@@ util.@@ Device@@ Polic@@ y@@ Utils.@@ get@@ En@@ ter@@ pri@@ se@@ Phone@@ U@@ ri@@ (@@ this@@ ), false@@ , m@@ Cont@@ act@@ Change@@ Ob@@ server@@ ); } catch (android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Exception e) { android.util.Log.e@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, ("@@ S@@ Q@@ L@@ it@@ e excepti@@ on@@ : " + e@@ )); } catch (java.lang.@@ Illegal@@ State@@ Exception e) { android.util.Log.e@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ Service.TAG, "@@ Illeg@@ al st@@ ate excepti@@ on@@ , cont@@ ent ob@@ ser@@ ve@@ r is al@@ read@@ y register@@ ed@@ "); } } return true@@ ; }
static long $@@ op@@ t@@ $@@ no@@ in@@ line@@ $@@ D@@ ouble@@ To@@ Long@@ (@@ do@@ ub@@ le a@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) throw new java.lang.@@ Error@@ (); return (@@ (@@ long@@ ) (@@ a@@ )); }
private void p@@ er@@ for@@ m@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Sub@@ s@@ ti@@ t@@ uti@@ on@@ (com.android.@@ m@@ an@@ if@@ merger.@@ M@@ an@@ if@@ est@@ Merg@@ er@@ 2.@@ M@@ an@@ if@@ est@@ Info m@@ an@@ if@@ est@@ Info@@ , com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Doc@@ um@@ ent xml@@ Doc@@ ument@@ , com.android.@@ m@@ an@@ if@@ merger.@@ Merg@@ ing@@ Re@@ por@@ t.@@ Builder merg@@ ing@@ Re@@ port@@ Builder@@ ) { java.util.Map@@ <java.lang.String, java.lang.String> final@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Value@@ s = m@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Valu@@ es@@ ; if (!(m@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Valu@@ es.@@ contain@@ s@@ Key@@ ("@@ app@@ li@@ cation@@ Id@@ "@@ ))) { java.lang.String package@@ Name = (m@@ an@@ if@@ est@@ Info@@ .get@@ M@@ ain@@ M@@ an@@ if@@ est@@ Package@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ()) ? m@@ an@@ if@@ est@@ Info@@ .get@@ M@@ ain@@ M@@ an@@ if@@ est@@ Package@@ Name@@ ().get@@ () : xml@@ Doc@@ um@@ ent.get@@ Package@@ Name@@ (); final@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Value@@ s = com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ Map@@ .@@ <java.lang.String, java.lang.String@@ >@@ build@@ er@@ ().@@ put@@ All@@ (m@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Valu@@ es@@ ).@@ put@@ (@@ "@@ package@@ Name@@ ", package@@ Name@@ ).@@ put@@ ("@@ app@@ li@@ cation@@ Id@@ ", package@@ Name@@ ).@@ build@@ (); } com.android.@@ m@@ an@@ if@@ merger.@@ P@@ la@@ ce@@ ho@@ l@@ der@@ Handler.@@ Key@@ Bas@@ ed@@ Value@@ Resol@@ ver@@ <java.lang.String@@ > pla@@ ce@@ H@@ ol@@ der@@ Value@@ Resol@@ ve@@ r = new com.android.@@ m@@ an@@ if@@ merger.@@ M@@ an@@ if@@ est@@ Merg@@ er@@ 2.@@ Map@@ Bas@@ ed@@ Key@@ Bas@@ ed@@ Value@@ Resol@@ ver@@ <java.lang.String@@ >@@ (@@ final@@ P@@ la@@ ce@@ H@@ ol@@ der@@ Valu@@ es@@ ); com.android.@@ m@@ an@@ if@@ merger.@@ P@@ la@@ ce@@ ho@@ l@@ der@@ Handle@@ r pla@@ ce@@ ho@@ l@@ der@@ Handle@@ r = new com.android.@@ m@@ an@@ if@@ merger.@@ P@@ la@@ ce@@ ho@@ l@@ der@@ Handler@@ (); pla@@ ce@@ ho@@ l@@ der@@ Handler.@@ vi@@ si@@ t@@ (m@@ M@@ er@@ ge@@ Type, xml@@ Doc@@ ument@@ , pla@@ ce@@ H@@ ol@@ der@@ Value@@ Resol@@ ver@@ , merg@@ ing@@ Re@@ port@@ Builder@@ ); }
public void add@@ (java.lang.String name@@ , java.lang.String valu@@ e) { data@@ .add@@ (@@ new com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ Th@@ em@@ e@@ Mode@@ l.@@ D@@ um@@ p@@ Th@@ em@@ e@@ Mode@@ l@@ Data@@ (@@ name@@ , value@@ )); }
@org.junit.Test public void long@@ _@@ to@@ _@@ int@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ L@@ ON@@ G@@ _@@ TO@@ _@@ IN@@ T@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
com.android.ddmlib.@@ S@@ ync@@ Ser@@ vice get@@ S@@ ync@@ Service@@ () throw@@ s com.android.ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception, com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { int f@@ re@@ ad = 0; java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an@@ (@@ to@@ m@@ ic@@ ); java.lang.String f@@ ut@@ ur@@ e = m@@ Ser@@ vice == f@@ .m@@ Socket@@ ; return f@@ fi@@ c@@ ; }
private void create@@ Parameter@@ s(@@ @javax.annotation.@@ Check@@ For@@ Null org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ lo@@ ok@@ up@@ .@@ S@@ yn@@ th@@ et@@ ic@@ Argument@@ B@@ ind@@ ing@@ [] s@@ ab@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info info@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d method@@ , @javax.annotation.@@ N@@ on@@ null java.util.@@ Set@@ <java.lang.String@@ > al@@ read@@ y@@ Nam@@ ed@@ Vari@@ ab@@ l@@ es@@ , boolean for@@ ce@@ To@@ Imp@@ lic@@ it@@ ) { if (s@@ a@@ b != null@@ ) { for (@@ int i = 0; i < (s@@ ab@@ .@@ length); ++@@ i@@ ) { org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ lo@@ ok@@ up@@ .@@ S@@ yn@@ th@@ et@@ ic@@ Argument@@ B@@ ind@@ ing ar@@ g = s@@ ab@@ [i@@ ]; java.lang.String arg@@ Name = java.lang.String.@@ value@@ Of@@ (@@ ar@@ g.@@ name@@ ); if (@@ al@@ read@@ y@@ Nam@@ ed@@ Vari@@ ab@@ l@@ es.@@ contain@@ s(@@ arg@@ Name@@ )) { arg@@ Name +@@ = "@@ _@@ " + i@@ ; } create@@ Parameter@@ (in@@ fo@@ , method@@ , arg@@ Name, ar@@ g.@@ type@@ , ((@@ get@@ F@@ in@@ al@@ Mo@@ d@@ if@@ ier@@ (@@ arg@@ )) | (@@ for@@ ce@@ To@@ Imp@@ lic@@ i@@ t ? com.android.jack.ir.ast.J@@ Mo@@ d@@ if@@ i@@ er.@@ I@@ M@@ P@@ L@@ IC@@ I@@ T : com.android.jack.ir.ast.J@@ Mo@@ d@@ if@@ i@@ er.@@ S@@ Y@@ N@@ TH@@ E@@ TI@@ C@@ ))); al@@ read@@ y@@ Nam@@ ed@@ Vari@@ ab@@ l@@ es.@@ add(@@ arg@@ Name); } } }
public void test_@@ update@@ $@@ Byte@@ Buffer@@ () { java.nio.Byte@@ Buff@@ er byte@@ Buff@@ er = java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (@@ new byte@@ []{ 1, 2, 3@@ , 4 }; byte@@ Buff@@ er.@@ posi@@ tion@@ (@@ 2@@ ); ad@@ l.@@ update@@ (@@ byte@@ Buffer@@ ); assert@@ Equal@@ s("@@ update@@ (@@ Byte@@ Buffer@@ ) fa@@ ile@@ d to up@@ d@@ ate th@@ e check@@ su@@ m to th@@ e cor@@ re@@ c@@ t valu@@ e ", 2@@ 6@@ 2@@ 1@@ 4@@ 8@@ , ad@@ l.get@@ Value@@ ()); assert@@ Equal@@ s(@@ 3@@ , byte@@ Buff@@ er.@@ posi@@ tion@@ ()); ad@@ l.@@ res@@ et@@ (); java.nio.Byte@@ Buff@@ er di@@ re@@ ct@@ Byte@@ Buff@@ er = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ Dire@@ ct@@ (@@ 3@@ ); di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ put@@ ((@@ (@@ byte@@ ) (1@@ )@@ )).@@ put@@ ((@@ (@@ byte@@ ) (@@ 2@@ )@@ )).@@ put@@ ((@@ (@@ byte@@ ) (@@ 3@@ ))); di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ posi@@ tion@@ (@@ 2@@ ); ad@@ l.@@ update@@ (d@@ ire@@ ct@@ Byte@@ Buffer@@ ); assert@@ Equal@@ s("@@ update@@ (@@ Byte@@ Buffer@@ ) fa@@ ile@@ d to up@@ d@@ ate th@@ e check@@ su@@ m to th@@ e cor@@ re@@ c@@ t valu@@ e ", 2@@ 6@@ 2@@ 1@@ 4@@ 8@@ , ad@@ l.get@@ Value@@ ()); assert@@ Equal@@ s(@@ 3@@ , byte@@ Buff@@ er.@@ posi@@ tion@@ ()); ad@@ l.@@ res@@ et@@ (); java.nio.Byte@@ Buff@@ er di@@ re@@ ct@@ Byte@@ Buff@@ er = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ Dire@@ ct@@ (@@ 3@@ ); di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ put@@ ((@@ (@@ byte@@ ) (1@@ )@@ )).@@ put@@ ((@@ (@@ byte@@ ) (@@ 2@@ )@@ )).@@ put@@ ((@@ (@@ byte@@ ) (@@ 3@@ ))); di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ f@@ li@@ p@@ (); di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ posi@@ tion@@ (@@ 2@@ ); ad@@ l.@@ update@@ (d@@ ire@@ ct@@ Byte@@ Buffer@@ ); assert@@ Equal@@ s("@@ update@@ (@@ Byte@@ Buffer@@ ) fa@@ ile@@ d to up@@ d@@ ate th@@ e check@@ su@@ m to th@@ e cor@@ re@@ c@@ t valu@@ e ", 2@@ 1@@ 4@@ 8@@ , ad@@ l.get@@ Value@@ ()); assert@@ Equal@@ s(@@ 3@@ , di@@ re@@ ct@@ Byte@@ Buff@@ er.@@ posi@@ tion@@ ()); }
public void test_@@ g@@ c@@ () { java.util.@@ Run@@ tim@@ e r@@ t = java.lang.@@ Run@@ tim@@ e.get@@ Runtime@@ (); java.util.@@ V@@ ec@@ tor@@ <java.lang.String@@ Buffer@@ > ve@@ c = new java.util.@@ V@@ ec@@ tor@@ <java.lang.String@@ Buffer@@ >(); long b@@ e@@ for@@ e@@ Test = r@@ t.@@ f@@ re@@ e@@ M@@ em@@ or@@ y@@ (); while ((@@ r@@ t.@@ f@@ re@@ e@@ M@@ em@@ or@@ y@@ ()) < ((@@ b@@ e@@ for@@ e@@ Test * 2@@ ) / 3@@ )) { v@@ ec@@ .add@@ (@@ new java.lang.String@@ Buffer@@ (1@@ 00@@ 0@@ )); } ve@@ c = null@@ ; long b@@ e@@ for@@ e@@ G@@ C = (r@@ t.@@ to@@ t@@ al@@ M@@ em@@ or@@ y@@ ()) - (r@@ t.@@ f@@ re@@ e@@ M@@ em@@ or@@ y@@ ()); r@@ t.@@ g@@ c@@ (); long a@@ f@@ ter@@ G@@ C = (r@@ t.@@ to@@ t@@ al@@ M@@ em@@ or@@ y@@ ()) - (r@@ t.@@ f@@ re@@ e@@ M@@ em@@ or@@ y@@ ()); assert@@ True@@ ((((@@ ("@@ m@@ em@@ or@@ y w@@ a@@ s not re@@ le@@ ase@@ d a@@ f@@ ter call@@ ing System.@@ g@@ c@@ ().@@ " + "@@ b@@ e@@ for@@ e g@@ c@@ : ") + b@@ e@@ for@@ e@@ G@@ C@@ ) + "; a@@ f@@ ter g@@ c@@ : ") + a@@ f@@ ter@@ G@@ C@@ ), (b@@ e@@ for@@ e@@ G@@ C >@@ = a@@ f@@ ter@@ G@@ C@@ )); }
private void test@@ Pre@@ view@@ P@@ i@@ ct@@ ure@@ Siz@@ es@@ Com@@ b@@ in@@ ation@@ By@@ C@@ am@@ er@@ a@@ (@@ int c@@ am@@ er@@ a@@ Id) throw@@ s java.lang.Exception { in@@ itializ@@ e@@ Message@@ Loo@@ per@@ (c@@ am@@ er@@ a@@ Id); mC@@ am@@ er@@ a@@ .set@@ Pre@@ view@@ Display@@ (get@@ Activity@@ ().get@@ S@@ ur@@ face@@ View@@ ().get@@ H@@ ol@@ der@@ ()); android.hardware.@@ C@@ am@@ er@@ a.@@ Parameter@@ s param@@ eter@@ s = mC@@ am@@ er@@ a@@ .get@@ Parameter@@ s(); android.hardware.@@ cts.@@ C@@ am@@ er@@ a@@ Test.@@ Pre@@ view@@ C@@ b@@ For@@ Pre@@ view@@ P@@ i@@ ct@@ ure@@ Siz@@ es@@ Com@@ b@@ in@@ ation call@@ b@@ ac@@ k = new android.hardware.@@ cts.@@ C@@ am@@ er@@ a@@ Test.@@ Pre@@ view@@ C@@ b@@ For@@ Pre@@ view@@ P@@ i@@ ct@@ ure@@ Siz@@ es@@ Com@@ b@@ in@@ ation@@ (); for (android.@@ hardware.@@ C@@ am@@ er@@ a.@@ Siz@@ e pre@@ view@@ Siz@@ e : param@@ eter@@ s.get@@ Sup@@ ported@@ Pre@@ view@@ Siz@@ es@@ ()) { for (android.@@ hardware.@@ C@@ am@@ er@@ a.@@ Siz@@ e pi@@ ct@@ ure@@ Siz@@ e : param@@ eter@@ s.get@@ Sup@@ ported@@ P@@ i@@ ct@@ ure@@ Siz@@ es@@ ()) { android.util.Log.@@ v@@ (@@ TAG, ((((@@ ((@@ (("@@ Test pre@@ view@@ Size@@ =@@ (@@ " + (p@@ re@@ view@@ Siz@@ e.@@ wid@@ th@@ )) + "@@ ,@@ ") + (p@@ re@@ view@@ Siz@@ e.@@ he@@ ig@@ ht@@ )) + ") pi@@ ct@@ ure@@ Size@@ =@@ ("@@ ) + (p@@ i@@ ct@@ ure@@ Siz@@ e.@@ wid@@ th@@ )) + "@@ ,@@ ") + (p@@ i@@ ct@@ ure@@ Siz@@ e.@@ he@@ ig@@ ht@@ )) + "@@ )@@ ")); m@@ Pre@@ view@@ Callback@@ Res@@ ult = false@@ ; mC@@ am@@ er@@ a@@ .set@@ Pre@@ view@@ Callback@@ (c@@ all@@ back@@ ); call@@ back@@ .@@ expected@@ Pre@@ view@@ Siz@@ e = pre@@ view@@ Size@@ ; param@@ eter@@ s.@@ set@@ Pre@@ view@@ Size@@ (p@@ re@@ view@@ Siz@@ e.@@ wid@@ th@@ , pre@@ view@@ Siz@@ e.@@ he@@ ig@@ ht@@ ); param@@ eter@@ s.@@ set@@ P@@ i@@ ct@@ ure@@ Size@@ (p@@ i@@ ct@@ ure@@ Siz@@ e.@@ wid@@ th@@ , pi@@ ct@@ ure@@ Siz@@ e.@@ he@@ ig@@ ht@@ ); mC@@ am@@ er@@ a@@ .set@@ Parameter@@ s(@@ param@@ eter@@ s); assert@@ Equal@@ s(@@ pre@@ view@@ Size@@ , mC@@ am@@ er@@ a@@ .get@@ Parameter@@ s@@ ().get@@ Pre@@ view@@ Size@@ ()); assert@@ Equal@@ s(@@ pi@@ ct@@ ure@@ Size@@ , mC@@ am@@ er@@ a@@ .get@@ Parameter@@ s@@ ().get@@ P@@ i@@ ct@@ ure@@ Size@@ ()); mC@@ am@@ er@@ a.@@ start@@ Pre@@ view@@ (); wait@@ For@@ Pre@@ view@@ D@@ one@@ (); assert@@ True@@ (m@@ Pre@@ view@@ Callback@@ Result@@ ); mC@@ am@@ er@@ a.@@ t@@ ake@@ P@@ i@@ ct@@ ure@@ (m@@ Sh@@ ut@@ ter@@ Callback@@ , m@@ R@@ aw@@ P@@ i@@ ct@@ ure@@ Callback@@ , m@@ J@@ pe@@ g@@ P@@ i@@ ct@@ ure@@ Callback@@ ); wait@@ For@@ S@@ n@@ ap@@ sho@@ t@@ D@@ one@@ (); assert@@ True@@ (m@@ J@@ pe@@ g@@ P@@ i@@ ct@@ ure@@ Callback@@ Result@@ ); assert@@ NotNull@@ (m@@ J@@ pe@@ g@@ Data@@ ); try { android.@@ g@@ raphic@@ s.@@ Bit@@ ma@@ p b = android.@@ g@@ raphic@@ s.@@ Bit@@ m@@ ap@@ Fa@@ ctor@@ y.@@ de@@ code@@ ByteArray@@ (m@@ J@@ pe@@ g@@ Data@@ , 0, m@@ J@@ pe@@ g@@ Data@@ .@@ length); assert@@ Equal@@ s(@@ pi@@ ct@@ ure@@ Siz@@ e.@@ wid@@ th@@ , b@@ .get@@ W@@ id@@ th@@ ()); assert@@ Equal@@ s(@@ pi@@ ct@@ ure@@ Siz@@ e.@@ he@@ ig@@ h@@ t, b@@ .get@@ He@@ ig@@ ht@@ ()); b.@@ re@@ c@@ y@@ cle@@ (); b = null@@ ; } catch (@@ java.lang.O@@ ut@@ Of@@ M@@ em@@ or@@ y@@ Error e) { android.util.Log.d@@ (@@ TAG, "@@ Bit@@ ma@@ p siz@@ e ex@@ ce@@ ed@@ s V@@ M st@@ ac@@ k size@@ "); } } ter@@ min@@ ate@@ Message@@ Loo@@ per@@ (); }
java.@@ aw@@ t.@@ im@@ age.@@ Buffer@@ ed@@ Im@@ age get@@ Image@@ (@@ int w@@ , int h@@ );
private void handle@@ No@@ t@@ if@@ ic@@ ation@@ De@@ let@@ ed@@ () { m@@ No@@ t@@ if@@ ic@@ ation@@ S@@ ho@@ w@@ n = false@@ ; m@@ Re@@ com@@ m@@ end@@ ed@@ Net@@ wor@@ k = null@@ ; }
public void start@@ N@@ att@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ (com.android.server.@@ connectivity.@@ Network@@ A@@ g@@ ent@@ Info n@@ a@@ i@@ , int int@@ er@@ val@@ Sec@@ ond@@ s, android.os.@@ Mess@@ eng@@ er mess@@ eng@@ er, android.os.@@ I@@ Bin@@ der b@@ in@@ der@@ , java.lang.String src@@ Add@@ r@@ String@@ , int src@@ Port@@ , java.lang.String d@@ st@@ Add@@ r@@ String@@ , int d@@ st@@ Port@@ ) { if (@@ n@@ a@@ i == null@@ ) { not@@ if@@ y@@ Mess@@ eng@@ er@@ (m@@ ess@@ eng@@ er, com.android.server.@@ connectivity.@@ NO@@ _@@ KE@@ E@@ P@@ AL@@ I@@ V@@ E, com.android.server.@@ connectivity.@@ ER@@ R@@ OR@@ _@@ IN@@ VAL@@ ID@@ _N@@ E@@ T@@ W@@ OR@@ K@@ ); return@@ ; } java.net.Inet@@ Address src@@ Address@@ ; java.net.Inet@@ Address d@@ st@@ Address@@ ; try { android.util.Log.d@@ (com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ TAG, ((("@@ Source@@ Add@@ r@@ : " + src@@ Add@@ r@@ String@@ ) + "@@ D@@ st@@ Add@@ r@@ : ") + d@@ st@@ Add@@ r@@ String@@ )); src@@ Address = android.net.Network@@ Utils.@@ num@@ er@@ ic@@ To@@ Inet@@ Addres@@ s(@@ src@@ Add@@ r@@ String@@ ); d@@ st@@ Address = android.net.Network@@ Utils.@@ num@@ er@@ ic@@ To@@ Inet@@ Addres@@ s(@@ d@@ st@@ Add@@ r@@ String@@ ); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { android.util.Log.d@@ (com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ TAG, "@@ Co@@ ul@@ d@@ n@@ 't par@@ se i@@ p addres@@ s@@ es@@ "); not@@ if@@ y@@ Mess@@ eng@@ er@@ (m@@ ess@@ eng@@ er, com.android.server.@@ connectivity.@@ NO@@ _@@ KE@@ E@@ P@@ AL@@ I@@ V@@ E, com.android.server.@@ connectivity.@@ ER@@ R@@ OR@@ _@@ IN@@ VAL@@ ID@@ _@@ IP@@ _@@ AD@@ D@@ RE@@ SS@@ ); return@@ ; } android.net.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Packet@@ Data pack@@ et@@ ; try { pack@@ et = new android.net.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Packet@@ Data@@ (s@@ rc@@ Addres@@ s, src@@ Port@@ , d@@ st@@ Addres@@ s, N@@ AT@@ T_@@ P@@ OR@@ T@@ ); } catch (android.net.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Packet@@ Data e) { not@@ if@@ y@@ Mess@@ eng@@ er@@ (m@@ ess@@ eng@@ er, com.android.server.@@ connectivity.@@ NO@@ _@@ KE@@ E@@ P@@ AL@@ I@@ V@@ E, e.@@ error@@ ); return@@ ; } com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Info k@@ i = new com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Info@@ (m@@ ess@@ eng@@ er, b@@ in@@ der@@ , n@@ a@@ i@@ , pack@@ et@@ , int@@ er@@ val@@ Sec@@ ond@@ s); android.util.Log.d@@ (com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ TAG, ("@@ Create@@ d ke@@ e@@ p@@ al@@ i@@ ve@@ : " + (@@ k@@ i.@@ toString@@ ()))); m@@ Connectivity@@ Service@@ Handler.@@ ob@@ tain@@ Message@@ (@@ Network@@ A@@ g@@ ent.@@ C@@ M@@ D@@ _STA@@ R@@ T_@@ P@@ AC@@ KE@@ T_@@ KE@@ E@@ P@@ AL@@ I@@ V@@ E, k@@ i@@ ).@@ send@@ To@@ Target@@ (); }
@java.lang.Override protected boolean st@@ op@@ () { android.util.Log.@@ i@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.TAG, "@@ st@@ op@@ ()@@ "); if (!(m@@ St@@ ar@@ ted@@ )) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.TAG, "@@ st@@ op@@ () cal@@ le@@ d b@@ e@@ for@@ e start@@ ()@@ "); return true@@ ; } m@@ St@@ ar@@ ted = false@@ ; com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMachine.@@ d@@ est@@ ro@@ y@@ (m@@ StateMach@@ ine@@ ); m@@ StateMach@@ in@@ e = null@@ ; m@@ System@@ Interface@@ .@@ st@@ op@@ (); m@@ StateMach@@ in@@ es@@ Thread@@ .@@ qu@@ it@@ S@@ a@@ f@@ el@@ y@@ (); m@@ StateMach@@ in@@ es@@ Th@@ re@@ ad = null@@ ; com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.@@ set@@ Headset@@ Service@@ (@@ null@@ ); return true@@ ; }
public void test@@ Equal@@ s@@ _@@ check@@ s@@ Ex@@ ec@@ ut@@ able@@ () throw@@ s java.lang.Exception { java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d method@@ 0 = libcore.@@ java.lang.@@ ref@@ le@@ ct.@@ Parameter@@ Test.@@ Non@@ Id@@ enti@@ cal@@ Parameter@@ s@@ .@@ class@@ .get@@ Dec@@ l@@ ar@@ ed@@ Method@@ ("@@ method@@ 0@@ ", java.lang.String@@ .@@ class@@ ); java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d method@@ 1 = libcore.@@ java.lang.@@ ref@@ le@@ ct.@@ Parameter@@ Test.@@ Non@@ Id@@ enti@@ cal@@ Parameter@@ s@@ .@@ class@@ .get@@ Dec@@ l@@ ar@@ ed@@ Method@@ ("@@ method@@ 1@@ ", java.lang.String@@ .@@ class@@ ); java.lang.@@ ref@@ le@@ ct.@@ Param@@ et@@ er method@@ 0@@ P@@ 0 = method@@ 0@@ .get@@ Parameter@@ s@@ ()@@ [0@@ ]; java.lang.@@ ref@@ le@@ ct.@@ Param@@ et@@ er method@@ 1@@ P@@ 0 = method@@ 1@@ .get@@ Parameter@@ s@@ ()@@ [0@@ ]; assert@@ False@@ (m@@ ethod@@ 0@@ P@@ 0.@@ equal@@ s@@ (m@@ ethod@@ 1@@ P@@ 0@@ )); assert@@ False@@ (m@@ ethod@@ 1@@ P@@ 0.@@ equal@@ s@@ (m@@ ethod@@ 0@@ P@@ 0@@ )); }
private void check@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 32, 3@@ , -@@ 4@@ 2@@ 1@@ 7@@ 2@@ 1@@ 7@@ 2@@ 1@@ 4@@ 6@@ 4@@ 6@@ 4@@ 2@@ 1@@ 4@@ 2@@ 1@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 32, 3@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 32, 3@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ab@@ s@@ Int@@ 3@@ U@@ int@@ 3@@ : " + (e.toString()))); } }
private android.telephony.@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er con@@ ver@@ t@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ To@@ Rad@@ io@@ H@@ AL@@ (android.@@ telephony.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er r@@ as@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 1.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ i@@ er r@@ as@@ In@@ H@@ al@@ For@@ ma@@ t = new android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 1.@@ Rad@@ io@@ Access@@ S@@ pe@@ c@@ if@@ ier@@ (); r@@ as@@ In@@ H@@ al@@ Format@@ .@@ rad@@ io@@ Access@@ Net@@ wor@@ k = ra@@ s.get@@ Rad@@ io@@ Access@@ Network@@ (); java.util.List<@@ java.lang.Integ@@ er@@ > b@@ and@@ s = null@@ ; switch (r@@ a@@ s.get@@ Rad@@ io@@ Access@@ Network@@ ()) { case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ .@@ G@@ ER@@ A@@ N : b@@ and@@ s = r@@ as@@ In@@ H@@ al@@ Format@@ .@@ g@@ er@@ an@@ B@@ and@@ s; break@@ ; case android.telephony.@@ Access@@ Network@@ Constants.@@ Rad@@ io@@ Access@@ Network@@ .@@ UT@@ R@@ A@@ N : b@@ and@@ s = r@@ as@@ In@@ H@@ al@@ Format@@ .@@ u@@ tr@@ an@@ B@@ and@@ s; break@@ ; case android.telephony.@@ Network@@ Constants.@@ Rad@@ io@@ Access@@ Network@@ .@@ E@@ UT@@ R@@ A@@ N : b@@ and@@ s = r@@ as@@ In@@ H@@ al@@ Format@@ .@@ e@@ u@@ tr@@ an@@ B@@ and@@ s; break@@ ; default : android.util.Log.@@ w@@ t@@ f@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ _@@ TAG, (("@@ rad@@ io@@ Access@@ Net@@ wor@@ k " + (r@@ a@@ s.get@@ Rad@@ io@@ Access@@ Network@@ ())) + " not suppor@@ ted@@ !@@ ")); return null@@ ; } if ((@@ ra@@ s.get@@ B@@ and@@ s@@ ()) != null@@ ) { for (@@ int b@@ an@@ d : ra@@ s.get@@ B@@ and@@ s@@ ()) { b@@ and@@ s.add@@ (b@@ and@@ ); } } if ((@@ ra@@ s.get@@ Channel@@ s@@ ()) != null@@ ) { for (@@ int channe@@ l : ra@@ s.get@@ Channel@@ s@@ ()) { r@@ as@@ In@@ H@@ al@@ Format@@ .@@ channe@@ ls.@@ add(@@ chan@@ nel@@ ); } } return r@@ as@@ In@@ H@@ al@@ Format@@ ; }
public static void d@@ (java.lang.String pre@@ fix@@ , java.lang.String for@@ mat@@ , java.lang.Ob@@ jec@@ t.@@ .@@ . arg@@ s) { if (android.@@ telecom.@@ Log.@@ s@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ ) { android.telecom.@@ Log.@@ m@@ ay@@ be@@ Dis@@ able@@ Logg@@ ing@@ (); android.util.@@ S@@ log.@@ i@@ (android.@@ telecom.@@ Log.@@ TAG, android.telecom.@@ Log.@@ build@@ Message@@ (p@@ re@@ fix@@ , for@@ mat@@ , arg@@ s@@ )); } else if (android.@@ telecom.@@ Log.@@ DE@@ BU@@ G) { android.util.@@ S@@ log.@@ d@@ (android.@@ telecom.@@ Log.@@ TAG, android.telecom.@@ Log.@@ build@@ Message@@ (p@@ re@@ fix@@ , for@@ mat@@ , arg@@ s@@ )); } }
public android.net.@@ w@@ if@@ i.@@ IC@@ lient@@ Inter@@ face set@@ up@@ D@@ ri@@ ver@@ For@@ Client@@ Mode@@ () { m@@ W@@ if@@ i@@ con@@ d = m@@ W@@ if@@ i@@ In@@ ject@@ or@@ .m@@ ake@@ W@@ if@@ i@@ con@@ d@@ (); if ((m@@ W@@ if@@ i@@ con@@ d@@ ) == null@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ TAG, "@@ Faile@@ d to ge@@ t re@@ feren@@ ce to w@@ if@@ i@@ con@@ d@@ "); return null@@ ; } android.net.@@ w@@ if@@ i.@@ IC@@ lient@@ Inter@@ face c@@ lient@@ Inter@@ face = null@@ ; try { c@@ lient@@ Inter@@ face = m@@ W@@ if@@ i@@ con@@ d.@@ create@@ Client@@ Interface@@ (); } catch (android.os.RemoteException e@@ 1@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ TAG, "@@ Faile@@ d to ge@@ t IC@@ lient@@ Inter@@ face du@@ e to remo@@ t@@ e excepti@@ on@@ "); return null@@ ; } if (c@@ lient@@ Inter@@ face == null@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ TAG, "@@ Co@@ ul@@ d not ge@@ t IC@@ lient@@ Inter@@ face in@@ stan@@ ce f@@ ro@@ m w@@ if@@ i@@ con@@ d@@ "); return null@@ ; } android.os.@@ B@@ ind@@ er.@@ al@@ low@@ Block@@ ing@@ (c@@ lient@@ Interface@@ .@@ as@@ Bin@@ der@@ ()); mC@@ lient@@ Inter@@ face = c@@ lient@@ Interface@@ ; try { mC@@ lient@@ Interface@@ Name = c@@ lient@@ Interface@@ .get@@ Interface@@ Name@@ (); m@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ne@@ r = mC@@ lient@@ Interface@@ .get@@ W@@ if@@ i@@ Scan@@ ner@@ Imp@@ l@@ (); m@@ Scan@@ Event@@ Handle@@ r = new com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ Scan@@ Event@@ Handler@@ (); m@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner.@@ sub@@ s@@ cri@@ be@@ Scan@@ Event@@ s@@ (m@@ Scan@@ Event@@ Handler@@ ); m@@ P@@ no@@ Scan@@ Event@@ Handle@@ r = new com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ P@@ no@@ Scan@@ Event@@ Handler@@ (); m@@ W@@ if@@ i@@ con@@ d@@ Scan@@ ner.@@ sub@@ s@@ cri@@ be@@ P@@ no@@ Scan@@ Event@@ s@@ (m@@ P@@ no@@ Scan@@ Event@@ Handler@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ TAG, "@@ Faile@@ d to ref@@ res@@ h w@@ if@@ i@@ con@@ d scan@@ ne@@ r du@@ e to remo@@ t@@ e excepti@@ on@@ "); } return c@@ lient@@ Interface@@ ; }
public void test_@@ is@@ Re@@ ach@@ able@@ _@@ b@@ y@@ _@@ IC@@ M@@ P@@ () throw@@ s java.lang.Exception { java.net.Inet@@ Address@@ [] in@@ et@@ Addres@@ se@@ s = java.net.Inet@@ Addres@@ s.get@@ All@@ By@@ Name@@ ("@@ w@@ w@@ w@@ .@@ goog@@ le.@@ com@@ "); for (@@ java.net.Inet@@ Address i@@ a : in@@ et@@ Address@@ es) { assert@@ True@@ (@@ ia@@ .is@@ Re@@ ach@@ able@@ By@@ IC@@ M@@ P@@ (@@ 5@@ 00@@ 0@@ )); } final java.net.Inet@@ Address b@@ l@@ ack@@ ho@@ le@@ Address = java.net.Inet@@ Addres@@ s.get@@ By@@ Name@@ ("@@ 1@@ 00@@ :@@ :@@ 1@@ "); assert@@ False@@ (b@@ l@@ ack@@ ho@@ le@@ Addres@@ s.@@ is@@ Re@@ ach@@ able@@ (1@@ 00@@ 0@@ )); }
public void on@@ In@@ vi@@ t@@ ation@@ Result@@ (@@ byte@@ [] b@@ ss@@ id, int statu@@ s) { }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.test.@@ toolchain.@@ Android@@ Too@@ lch@@ a@@ in create@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (@@ @javax.annotation.@@ Null@@ able java.util.Map@@ <java.lang.String, java.lang.String> pro@@ per@@ ties@@ ) { com.android.jack.test.@@ toolchain.@@ Android@@ Too@@ lch@@ a@@ in c@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Android@@ Too@@ lch@@ ain@@ .@@ class@@ , ign@@ or@@ ed@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ s); c@@ and@@ id@@ ate@@ TestTools.@@ set@@ Source@@ Level@@ (@@ le@@ vel@@ ); c@@ and@@ id@@ ate@@ TestTools.@@ set@@ With@@ Debug@@ Info@@ s(@@ w@@ ith@@ Debug@@ Info@@ s); if ((@@ pro@@ per@@ ti@@ es != null@@ ) && (c@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s instanceof com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ )) { com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in = ((@@ com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ ) (c@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s@@ )); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.String> e@@ n@@ try : pro@@ per@@ ties.@@ e@@ n@@ try@@ Set@@ ()) { jack@@ Bas@@ ed@@ Too@@ lch@@ ain.@@ add@@ Property@@ (e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ()); } } return c@@ and@@ id@@ ate@@ Test@@ Too@@ l@@ s; }
@java.lang.Override public java.io.FileDescriptor s@@ ocket@@ (@@ int do@@ main@@ , int type@@ , int pro@@ to@@ col@@ ) throw@@ s android.system.@@ ErrnoException { return t@@ ag@@ Socket@@ (@@ os.@@ s@@ ocket@@ (@@ do@@ main@@ , type@@ , pro@@ to@@ col@@ )); }
public boolean is@@ En@@ c@@ r@@ y@@ ption@@ Algorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m al@@ gorith@@ m@@ ) { switch (@@ al@@ gorith@@ m@@ .getName@@ ()) { case android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C : return true@@ ; default : return false@@ ; } }
@com.android.annotations.NonNull public com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ Build@@ Type set@@ Pro@@ gu@@ ard@@ Fil@@ es@@ (java.lang.@@ I@@ ter@@ able@@ <@@ ?@@ > pro@@ gu@@ ard@@ File@@ I@@ ter@@ able@@ ) { get@@ Pro@@ gu@@ ard@@ Fil@@ es@@ ().@@ clear@@ (); for (@@ java.lang.Object pro@@ gu@@ ard@@ File : pro@@ gu@@ ard@@ File@@ I@@ ter@@ able@@ ) { get@@ Pro@@ gu@@ ard@@ Fil@@ es@@ ().@@ add(@@ pro@@ jec@@ t.@@ file@@ (pro@@ gu@@ ard@@ File@@ )); } return this@@ ; }
public org.@@ gradle.@@ api.@@ file.@@ File@@ Colle@@ c@@ tion do@@ Call@@ (@@ java.lang.Object it@@ ) { org.@@ gradle.@@ api.@@ file.@@ File@@ Colle@@ c@@ tion class@@ p@@ ath = s@@ co@@ p@@ e.get@@ G@@ lo@@ b@@ al@@ S@@ co@@ pe@@ ().get@@ Project@@ ().@@ fil@@ es@@ (s@@ co@@ p@@ e.get@@ G@@ lo@@ b@@ al@@ S@@ co@@ pe@@ ().get@@ Android@@ Builder@@ ().get@@ Comp@@ ile@@ Class@@ path@@ (s@@ co@@ p@@ e.get@@ Variant@@ Data@@ ().get@@ Variant@@ Configuration@@ ())); if (@@ tes@@ ted@@ Variant@@ Data != null@@ ) { if ((@@ !@@ (@@ tes@@ ted@@ Variant@@ Data@@ .get@@ Type@@ ().@@ equal@@ s@@ (com.android.@@ build@@ .gradle.@@ t@@ ask@@ s.@@ fa@@ ctor@@ y.@@ L@@ I@@ B@@ R@@ AR@@ Y@@ ))) || (s@@ co@@ p@@ e.get@@ Variant@@ Data@@ ().get@@ Type@@ ().@@ equal@@ s@@ (com.android.@@ build@@ .gradle.@@ t@@ ask@@ s.@@ fa@@ ctor@@ y.@@ UN@@ I@@ T_@@ TE@@ S@@ T@@ ))) { class@@ p@@ ath = class@@ path@@ .@@ p@@ lu@@ s(@@ tes@@ ted@@ Variant@@ Data@@ .@@ java@@ Comp@@ ile@@ Task@@ .get@@ Class@@ path@@ ()).@@ p@@ lu@@ s(@@ tes@@ ted@@ Variant@@ Data@@ .@@ java@@ Comp@@ ile@@ Task@@ .get@@ Output@@ s@@ ().get@@ Fil@@ es@@ ()); } if ((@@ s@@ co@@ p@@ e.get@@ Variant@@ Data@@ ().get@@ Type@@ ().@@ equal@@ s@@ (com.android.@@ build@@ .gradle.@@ t@@ ask@@ s.@@ fa@@ ctor@@ y.@@ UN@@ I@@ T_@@ TE@@ S@@ T@@ )) && (@@ tes@@ ted@@ Variant@@ Data@@ .get@@ Type@@ ().@@ equal@@ s@@ (com.android.@@ build@@ .gradle.@@ t@@ ask@@ s.@@ fa@@ ctor@@ y.@@ L@@ I@@ B@@ R@@ AR@@ Y@@ ))) { class@@ p@@ ath = class@@ path@@ .m@@ in@@ u@@ s(@@ s@@ co@@ p@@ e.get@@ G@@ lo@@ b@@ al@@ S@@ co@@ pe@@ ().get@@ Project@@ ().@@ fil@@ es(@@ tes@@ ted@@ Variant@@ Data@@ .get@@ Variant@@ Configuration@@ ().get@@ Output@@ ().get@@ J@@ ar@@ File@@ ())); } } return class@@ path@@ ; }
public static int min@@ B@@ and@@ wid@@ th@@ (@@ int a@@ , int b@@ ) { if ((@@ a == (android.net.@@ Network@@ Capabili@@ ties.@@ L@@ IN@@ K_@@ B@@ AN@@ D@@ W@@ ID@@ TH@@ _@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ )) && (@@ b == (android.net.@@ Network@@ Capabili@@ ties.@@ L@@ IN@@ K_@@ B@@ AN@@ D@@ W@@ ID@@ TH@@ _@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ ))) { return android.net.Network@@ Capabili@@ ties.@@ L@@ IN@@ K_@@ B@@ AN@@ D@@ W@@ ID@@ TH@@ _@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ ; } else if (@@ a == (android.net.@@ Network@@ Capabili@@ ties.@@ L@@ IN@@ K_@@ B@@ AN@@ D@@ W@@ ID@@ TH@@ _@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ )) { return b@@ ; } else if (@@ b == (android.net.@@ Network@@ Capabili@@ ties.@@ L@@ IN@@ K_@@ B@@ AN@@ D@@ W@@ ID@@ TH@@ _@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ )) { return a@@ ; } else { return java.lang.@@ M@@ ath@@ .m@@ in@@ (@@ a@@ , b@@ ); } }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ Se@@ t B@@ luetoo@@ th T@@ ether@@ ing@@ ") public void bluetooth@@ P@@ an@@ Set@@ Bluetooth@@ T@@ ether@@ ing@@ (@@ @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ enable@@ ") boolean enable@@ ) { com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ fa@@ c@@ ad@@ e.@@ bluetooth.Bluetooth@@ P@@ an@@ F@@ ac@@ ad@@ e.@@ s@@ P@@ an@@ Pro@@ file.@@ set@@ Bluetooth@@ T@@ ether@@ ing@@ (@@ enable@@ ); }
private void valid@@ ate@@ S@@ en@@ si@@ tivity@@ (@@ int request@@ , int result@@ ) { int s@@ en@@ si@@ tivity@@ De@@ l@@ t@@ a = java.lang.@@ M@@ ath.@@ ab@@ s@@ ((@@ requ@@ est - result@@ )); int s@@ en@@ si@@ tivity@@ Error@@ M@@ arg@@ in = (@@ (@@ int@@ ) (@@ requ@@ est * (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ Cap@@ t@@ ure@@ Request@@ Test.@@ S@@ EN@@ SI@@ TIV@@ ITY@@ _@@ ER@@ R@@ OR@@ _M@@ AR@@ G@@ IN@@ _@@ R@@ A@@ TE@@ ))); m@@ Colle@@ ctor@@ .@@ expec@@ t@@ True@@ ((@@ (("@@ S@@ en@@ si@@ tivi@@ t@@ y is in@@ va@@ li@@ d for A@@ E man@@ au@@ l cont@@ ro@@ l test@@ , request@@ : " + request@@ ) + " result@@ : ") + result@@ ), (s@@ en@@ si@@ tivity@@ De@@ l@@ t@@ a < s@@ en@@ si@@ tivity@@ Error@@ M@@ arg@@ in@@ )); }
@java.lang.Override public java.util.Collection@@ <@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ > get@@ Res@@ ources@@ (com.android.@@ resources.@@ Resource@@ Type type@@ , com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Re@@ positor@@ y resour@@ ces@@ ) { update@@ (); java.util.@@ Hash@@ Map@@ <java.lang.String, com.android.ide.common.@@ render@@ ing.@@ api.@@ Resource@@ Value@@ > li@@ s@@ t = m@@ Resource@@ Item@@ s.get@@ (@@ typ@@ e); java.util.ArrayList<@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ > i@@ tem@@ s = new java.util.ArrayList<@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ >(); if (@@ li@@ s@@ t != null@@ ) { java.util.Collection@@ <@@ com.android.ide.common.@@ render@@ ing.@@ api.@@ Resource@@ Value@@ > value@@ s = li@@ st.@@ valu@@ es@@ (); for (com.android.ide.@@ common.@@ render@@ ing.@@ api.@@ Resource@@ Value re@@ s : valu@@ es) { com.android.@@ util.@@ Pa@@ ir@@ <@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ , java.lang.@@ Boole@@ an@@ > p@@ a@@ i@@ r = resources.@@ create@@ Resource@@ Item@@ (@@ type@@ , res@@ .getName@@ ()); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ I@@ te@@ m ite@@ m = p@@ a@@ ir@@ .get@@ F@@ ir@@ st@@ (); if (p@@ a@@ ir@@ .get@@ Sec@@ ond@@ ()) { i@@ tem@@ s.@@ add(@@ i@@ tem@@ ); } i@@ tem@@ .add@@ (@@ this@@ ); } } return i@@ tem@@ s; }
@java.lang.Override public void dum@@ p@@ (java.io.FileDescriptor f@@ d, java.io.@@ P@@ r@@ int@@ W@@ rite@@ r w@@ ri@@ ter@@ , java.lang.String[] arg@@ s) { if ((m@@ Bluetooth@@ Bin@@ der@@ ) == null@@ ) { w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ B@@ luetoo@@ th Ser@@ vice not connec@@ ted@@ "); } else { try { m@@ Bluetooth@@ B@@ ind@@ er.@@ dum@@ p@@ (f@@ d, arg@@ s); } catch (android.os.RemoteException re@@ ) { w@@ ri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ RemoteException while call@@ ing B@@ luetoo@@ th Service@@ "); } } }
private void test@@ W@@ if@@ i@@ Configuration@@ S@@ a@@ ve@@ Load@@ (@@ W@@ if@@ i@@ Configur@@ ation config@@ ) { assert@@ True@@ (m@@ Supplicant@@ Network@@ .@@ s@@ a@@ ve@@ W@@ if@@ i@@ Configuration@@ (@@ config@@ )); W@@ if@@ i@@ Configur@@ ation load@@ Con@@ fig = new W@@ if@@ i@@ Configuration@@ (); java.util.Map@@ <java.lang.String, java.lang.String> network@@ Extra@@ s = new java.util.@@ Hash@@ Map@@ <@@ >(); assert@@ True@@ (m@@ Supplicant@@ Network@@ .@@ load@@ W@@ if@@ i@@ Configuration@@ (@@ load@@ Config@@ , network@@ Ex@@ tr@@ as@@ )); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Uti@@ l@@ .@@ assert@@ Configuration@@ Equal@@ For@@ Supplicant@@ (@@ config@@ , load@@ Config@@ ); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Uti@@ l@@ .@@ assert@@ Configuration@@ Equal@@ For@@ Supplicant@@ (@@ config@@ , load@@ Config@@ ); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Uti@@ l@@ .@@ assert@@ Configuration@@ Equal@@ For@@ Supplicant@@ (@@ config@@ , load@@ Config@@ ); com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ Test@@ Uti@@ l@@ .@@ assert@@ Configuration@@ Equal@@ s(@@ config.@@ update@@ Id@@ ent@@ if@@ ier@@ ), m@@ Supplicant@@ Vari@@ ab@@ l@@ es.@@ update@@ Id@@ ent@@ if@@ ier@@ ); }
public static native void EC@@ _P@@ O@@ IN@@ T_@@ set@@ _@@ a@@ f@@ fin@@ e@@ _@@ co@@ or@@ d@@ in@@ at@@ es@@ (@@ int type@@ , int gro@@ up@@ C@@ t@@ x@@ , int p@@ o@@ int@@ C@@ t@@ x@@ , byte@@ [] x@@ , byte@@ [] y@@ );
public void remove@@ Typ@@ ed@@ e@@ f@@ Class@@ es@@ () { if ((@@ (@@ class@@ Dir@@ ) != null@@ ) && (@@ (@@ class@@ Fil@@ es) != null@@ )) && (!@@ (@@ class@@ Fil@@ es.@@ isEmpty@@ ()))) { boolean qu@@ i@@ et = false@@ ; boolean ver@@ bo@@ se = false@@ ; boolean d@@ r@@ y@@ R@@ u@@ n = false@@ ; com.android.build.gradle.@@ t@@ ask@@ s.@@ annotations.@@ R@@ m@@ Type@@ De@@ f@@ s remove@@ r = new com.android.build.gradle.@@ t@@ ask@@ s.@@ annotations.@@ R@@ m@@ Type@@ De@@ f@@ s@@ (@@ this@@ , qu@@ i@@ et@@ , ver@@ bo@@ se@@ , d@@ r@@ y@@ Run@@ ); remo@@ ver.@@ remove@@ (@@ class@@ Fil@@ es@@ ); } }
public void register@@ Ar@@ t@@ if@@ act@@ Type@@ (@@ @com.android.annotations.NonNull java.lang.String name@@ , boolean is@@ Test@@ , int ar@@ t@@ if@@ act@@ Typ@@ e) { if ((@@ ex@@ tra@@ Ar@@ t@@ if@@ act@@ Map@@ .get@@ (@@ name@@ )) != null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ Ar@@ t@@ if@@ ac@@ t wit@@ h name %@@ 1@@ $@@ s al@@ read@@ y register@@ ed.@@ ", name@@ )); } ex@@ tra@@ Ar@@ t@@ if@@ act@@ Map@@ .@@ put@@ (@@ name@@ , new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Ar@@ t@@ if@@ act@@ M@@ eta@@ Data@@ Imp@@ l@@ (@@ name@@ , is@@ Test@@ , ar@@ t@@ if@@ act@@ Type@@ )); }
@java.lang.Override public java.util.List<@@ java.lang.String> get@@ Ac@@ ces@@ si@@ b@@ ili@@ ty@@ Id@@ s() { java.util.List<@@ java.lang.String> result@@ s = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (@@ qu@@ er@@ y@@ View@@ ("@@ get@@ ac@@ ces@@ si@@ b@@ ili@@ ty@@ id@@ s@@ ").@@ s@@ pli@@ t@@ (@@ " ")); if ((@@ result@@ s.@@ size@@ ()) == 2@@ ) { try { java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ result@@ s.get@@ (0@@ )); java.lang.@@ Lon@@ g.@@ parse@@ Long@@ (@@ result@@ s.get@@ (1@@ )); return result@@ s; } catch (java.lang.@@ Number@@ Format@@ Exception e) { com.android.@@ ch@@ im@@ p@@ ch@@ at@@ .@@ core.@@ Ch@@ im@@ p@@ View@@ .@@ LOG@@ .@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ SE@@ V@@ ER@@ E, ("@@ Error ret@@ ri@@ ev@@ ing ac@@ ces@@ i@@ b@@ ili@@ t@@ y id@@ s@@ : " + (@@ e.get@@ Message@@ ()))); } java.util.List<@@ java.lang.String> e@@ mp@@ t@@ y = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ 0@@ ", "@@ 0@@ "); return e@@ mpty@@ ; }
@java.lang.Override public void get@@ Sign@@ al@@ Str@@ ength@@ (android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SI@@ G@@ N@@ AL@@ _S@@ T@@ RE@@ N@@ G@@ TH@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); try { radioProx@@ y@@ .get@@ Sign@@ al@@ Str@@ ength@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ get@@ Sign@@ al@@ Str@@ ength@@ ", e); } } }
public void test@@ Re@@ fa@@ ctor@@ 5@@ () throw@@ s java.lang.Exception { check@@ Re@@ fa@@ ctor@@ ing@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ re@@ fa@@ ctor@@ ing@@ s.@@ core.@@ R@@ en@@ ame@@ Resource@@ Par@@ ti@@ c@@ ip@@ ant@@ Test.@@ TEST_@@ PRO@@ J@@ EC@@ T, "@@ @@@ lay@@ out@@ /@@ ac@@ tivity@@ _@@ main@@ ", "@@ new@@ lay@@ out@@ ", ("@@ CH@@ AN@@ G@@ E@@ S@@ :@@ \n@@ " + ((((@@ ((@@ (("@@ --@@ --@@ --@@ --@@ --@@ -@@ \n@@ " + "@@ * R@@ en@@ am@@ e \@@ '@@ test@@ Re@@ fa@@ ctor@@ 5@@ /@@ res@@ /@@ lay@@ out@@ /@@ ac@@ tivity@@ _@@ m@@ ain.@@ xml@@ \@@ ' to \@@ '@@ new@@ layout.@@ xml@@ \@@ '@@ \n") + "@@ * R@@ en@@ am@@ e \@@ '@@ test@@ Re@@ fa@@ ctor@@ 5@@ /@@ res@@ /@@ lay@@ out@@ -@@ l@@ and@@ /@@ ac@@ tivity@@ _@@ m@@ ain.@@ xml@@ \@@ ' to \@@ '@@ new@@ layout.@@ xml@@ \@@ '@@ \n") + "@@ * M@@ ain@@ Ac@@ tivity.@@ ja@@ v@@ a - /@@ test@@ Re@@ fa@@ ctor@@ 5@@ /@@ src@@ /@@ com@@ /@@ ex@@ am@@ ple@@ /@@ re@@ fa@@ ctor@@ ing@@ test@@ /@@ M@@ ain@@ Ac@@ tivity.@@ java@@ \n") + " < set@@ Content@@ View@@ (@@ R.@@ layout.@@ ac@@ tivity@@ _@@ main@@ )@@ ;@@ \n") + " --@@ -@@ \n") + " > set@@ Content@@ View@@ (@@ R.@@ lay@@ out@@ .@@ new@@ lay@@ out@@ )@@ ;@@ \n") + "@@ \n") + "@@ * R.@@ ja@@ v@@ a - /@@ test@@ Re@@ fa@@ ctor@@ 5@@ /@@ g@@ en@@ /@@ com@@ /@@ ex@@ am@@ ple@@ /@@ re@@ fa@@ ctor@@ ing@@ test@@ /@@ R.@@ java@@ \n") + " < public static final int ac@@ tivity@@ _@@ main@@ =@@ 0@@ x@@ 7@@ f@@ 0@@ 3@@ 0000@@ ;@@ \n") + " --@@ -@@ \n") + " > public static final int new@@ lay@@ out@@ =@@ 0@@ x@@ 7@@ f@@ 0@@ 3@@ 0000@@ ;@@ "@@ ))); }
@java.lang.Override public boolean vi@@ si@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face typ@@ e) { if (@@ ac@@ ce@@ p@@ t@@ Filter@@ (@@ type@@ )) { str@@ eam@@ .@@ p@@ r@@ int@@ (com.android.jack.@@ ir.@@ Con@@ di@@ tion@@ nal@@ Str@@ u@@ ct@@ ure@@ P@@ r@@ int@@ er@@ .@@ for@@ mat@@ t@@ er.get@@ Name@@ (@@ type@@ )); str@@ eam@@ .@@ p@@ r@@ int@@ ln@@ ("@@ :@@ "); return true@@ ; } else { return false@@ ; } }
public void test@@ Display@@ Av@@ d@@ List@@ Of@@ O@@ ne@@ S@@ n@@ ap@@ sho@@ t@@ () { com.android.s@@ dk@@ man@@ ag@@ er.@@ Ma@@ in ma@@ in = new com.android.s@@ dk@@ man@@ ag@@ er.@@ M@@ ain@@ (); m@@ ain.@@ set@@ Logg@@ er@@ (m@@ Log@@ ); m@@ Av@@ d@@ Manager.@@ create@@ Av@@ d@@ (m@@ Av@@ d@@ Folder@@ , this@@ .getName@@ (), m@@ Target@@ , null@@ , null@@ , null@@ , true@@ , false@@ , m@@ Log@@ ); m@@ Log.@@ clear@@ (); m@@ ain.@@ dis@@ play@@ Av@@ d@@ List@@ (m@@ Av@@ d@@ Manager@@ ); assert@@ Equal@@ s@@ ((((@@ ((((@@ ((("@@ [@@ P A@@ va@@ il@@ able And@@ ro@@ id V@@ ir@@ t@@ u@@ al De@@ vices@@ :@@ \n@@ " + ", P Name@@ : ") + (@@ this@@ .getName@@ ())) + "@@ \n") + ", P Path@@ : ") + (m@@ Av@@ d@@ Folder@@ )) + "@@ \n") + ", P Target@@ : And@@ ro@@ id 0.@@ 0 (@@ AP@@ I le@@ ve@@ l 0@@ )@@ \n") + ", P S@@ k@@ in@@ : H@@ V@@ G@@ A@@ \n") + ", P S@@ n@@ ap@@ sho@@ t@@ : true@@ \n") + "@@ ]@@ "), m@@ Log.@@ toString@@ ()); }
public boolean is@@ In@@ com@@ ing@@ Call@@ Per@@ m@@ it@@ ted@@ (com.android.server.@@ telecom.@@ Cal@@ l ex@@ c@@ lu@@ de@@ Call@@ , android.telecom.@@ Phone@@ Ac@@ count@@ Hand@@ le phon@@ e@@ Ac@@ count@@ Handle@@ ) { if (@@ phon@@ e@@ Ac@@ count@@ Hand@@ le == null@@ ) { return false@@ ; } android.telecom.@@ Phone@@ Ac@@ coun@@ t phon@@ e@@ Ac@@ coun@@ t = m@@ Phone@@ Ac@@ count@@ Reg@@ is@@ tr@@ ar@@ .get@@ Phone@@ Ac@@ count@@ Un@@ check@@ ed@@ (@@ phon@@ e@@ Ac@@ count@@ Handle@@ ); if (@@ phon@@ e@@ Ac@@ coun@@ t == null@@ ) { return false@@ ; } if (!(@@ phon@@ e@@ Ac@@ coun@@ t.@@ is@@ S@@ el@@ f@@ Manag@@ ed@@ ())) { return ((@@ !@@ (@@ has@@ Ma@@ x@@ im@@ um@@ Manag@@ ed@@ R@@ ing@@ ing@@ Call@@ s(@@ ex@@ c@@ lu@@ de@@ Call@@ ))) && (!(@@ has@@ Ma@@ x@@ im@@ um@@ Manag@@ ed@@ Li@@ ve@@ Call@@ s(@@ ex@@ c@@ lu@@ de@@ Call@@ )@@ ))) && (!(@@ has@@ Ma@@ x@@ im@@ um@@ Manag@@ ed@@ H@@ old@@ ing@@ Call@@ s(@@ ex@@ c@@ lu@@ de@@ Call@@ ))); } else { return ((@@ (!(@@ has@@ E@@ merg@@ enc@@ y@@ Call@@ ())) && (!(@@ has@@ Ma@@ x@@ im@@ um@@ S@@ el@@ f@@ Manag@@ ed@@ R@@ ing@@ Call@@ s(@@ ex@@ c@@ lu@@ de@@ Call@@ , phon@@ e@@ Ac@@ count@@ Handle@@ )@@ ))) && (!(@@ has@@ Ma@@ x@@ im@@ um@@ S@@ el@@ f@@ Manag@@ ed@@ Call@@ s(@@ ex@@ c@@ lu@@ de@@ Call@@ , phon@@ e@@ Ac@@ count@@ Handle@@ )@@ ))) && (!(@@ has@@ Manag@@ ed@@ Call@@ s@@ ())); } }
void on@@ Connec@@ t@@ (@@ java.net.Inet@@ Address remo@@ te@@ Addres@@ s, int remo@@ te@@ Port@@ , boolean update@@ Socket@@ State@@ ) { connec@@ ted = true@@ ; connect@@ Address = new java.net.Inet@@ Socket@@ Addres@@ s(@@ remo@@ te@@ Addres@@ s, remo@@ te@@ Port@@ ); if (@@ update@@ Socket@@ State && ((@@ s@@ ocket@@ ) != null@@ )) { s@@ ocket@@ .@@ on@@ Connec@@ ted@@ (@@ remo@@ te@@ Addres@@ s, remo@@ te@@ Port@@ ); } }
private static java.util.Map@@ <java.lang.String, java.lang.String> to@@ Head@@ er@@ Map@@ (@@ java.util.List<@@ com.android.@@ vo@@ lle@@ y.@@ Head@@ er@@ > all@@ Head@@ er@@ s) { java.util.Map@@ <java.lang.String, java.lang.String> he@@ ad@@ er@@ s = new java.util.@@ T@@ re@@ e@@ Map@@ <@@ >@@ (@@ java.lang.String.@@ C@@ A@@ S@@ E_@@ IN@@ S@@ EN@@ SI@@ TIV@@ E_@@ OR@@ D@@ ER@@ ); for (com.android.@@ vo@@ lle@@ y.@@ Head@@ er he@@ ad@@ er : all@@ Head@@ er@@ s) { he@@ ad@@ er@@ s.@@ put@@ (@@ he@@ ad@@ er.get@@ Name@@ (), he@@ ad@@ er.get@@ Value@@ ()); } return he@@ ad@@ er@@ s; }
@org.junit.Test public void test@@ E@@ valu@@ ate@@ Network@@ s@@ _@@ null@@ Re@@ com@@ m@@ end@@ ation@@ () { when(m@@ W@@ if@@ i@@ Config@@ Manager.@@ w@@ as@@ E@@ p@@ h@@ em@@ er@@ al@@ Network@@ De@@ let@@ ed@@ (@@ any@@ String@@ ()@@ )).@@ thenReturn@@ (@@ false@@ ); when(m@@ Network@@ S@@ core@@ Manager.@@ request@@ Re@@ com@@ m@@ end@@ ation@@ (@@ any@@ (android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Request@@ .@@ class@@ )@@ )).@@ thenReturn@@ (@@ null@@ ); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation result = m@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ .@@ e@@ valu@@ ate@@ Network@@ s(@@ com.google.@@ android.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ TR@@ US@@ TED@@ _S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ 1, com.android.server.@@ w@@ if@@ i.@@ Re@@ com@@ m@@ end@@ ed@@ Network@@ E@@ valu@@ ator@@ Test.@@ TR@@ US@@ TED@@ _S@@ C@@ AN@@ _@@ DE@@ TA@@ IL@@ ), null@@ , null@@ , false@@ , null@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Null@@ (@@ result@@ ); ve@@ r@@ if@@ y@@ (m@@ Network@@ S@@ core@@ Manager@@ ).@@ request@@ Re@@ com@@ m@@ end@@ ation@@ (@@ any@@ (android.net.@@ Re@@ com@@ m@@ end@@ ation@@ Request@@ .@@ class@@ )); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Config@@ Manager@@ , ne@@ ver@@ ()@@ ).set@@ Network@@ C@@ and@@ id@@ ate@@ Scan@@ Result@@ (@@ any@@ Int@@ (), any@@ (android.net.@@ w@@ if@@ i.@@ Scan@@ Result@@ .@@ class@@ ), any@@ Int@@ ()); }
static void get@@ Int@@ (java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le m@@ , Main.@@ Value@@ H@@ ol@@ der v@@ , int value@@ , boolean expec@@ t@@ Fail@@ ure@@ ) throw@@ s java.lang.@@ Throw@@ able { boolean excepti@@ on@@ Throw@@ n = false@@ ; try { final int go@@ t = (@@ v == null@@ ) ? (@@ (@@ int@@ ) (m@@ .@@ invok@@ e@@ Ex@@ act@@ ())) : (@@ (@@ int@@ ) (m@@ .@@ invok@@ e@@ Ex@@ act@@ (@@ v@@ ))); Main.@@ Test@@ er@@ .@@ assert@@ True@@ ((@@ go@@ t == value@@ )); } catch (java.lang.@@ invok@@ e.@@ W@@ ron@@ g@@ Method@@ Type@@ Exception e) { excepti@@ on@@ Throw@@ n = true@@ ; } Main.@@ Test@@ er@@ .@@ assert@@ Equal@@ s(@@ excepti@@ on@@ Th@@ ro@@ wn@@ , expec@@ t@@ Fail@@ ure@@ ); }
@org.junit.Test @org.junit.@@ I@@ gn@@ or@@ e public void test@@ 00@@ 1@@ d@@ () throw@@ s java.lang.Exception { java.io.File jack@@ Out@@ put = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); run@@ Test@@ 00@@ 1@@ (@@ jack@@ Output@@ , "@@ ke@@ e@@ p@@ -@@ fi@@ r@@ st@@ ", er@@ r@@ Out@@ , false@@ , true@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y output@@ Li@@ b = null@@ ; try { output@@ Li@@ b = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Input@@ Jack@@ Library@@ From@@ Dir@@ (@@ jack@@ Output@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 1 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 1@@ _P@@ A@@ TH@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 2 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 2@@ _P@@ A@@ TH@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 3 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 2@@ _P@@ A@@ TH@@ ); com.android.sched.vfs.@@ Input@@ V@@ File my@@ Class@@ 3 = output@@ Lib@@ .get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ TYP@@ E@@ 3@@ _P@@ A@@ TH@@ ); check@@ J@@ ay@@ ce@@ Not@@ Empty@@ (m@@ y@@ Class@@ 2@@ ); check@@ J@@ ay@@ ce@@ Not@@ Empty@@ (m@@ y@@ Class@@ 3@@ ); } catch (com.android.jack.@@ library.@@ File@@ Type@@ Do@@ es@@ Not@@ Ex@@ ist@@ Exception e) { junit.framework.Assert.@@ fail@@ (); } final@@ l@@ y { if (@@ output@@ Li@@ b != null@@ ) { output@@ Lib@@ .@@ close(); } java.lang.String er@@ r@@ Str@@ ing = er@@ r@@ O@@ u@@ t.@@ toString@@ (); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ Str@@ ing.@@ contain@@ s("@@ Type com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ test@@ 00@@ 1.@@ jack.@@ M@@ y@@ Class@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ Str@@ ing.@@ contain@@ s("@@ Type com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ test@@ 00@@ 1.@@ jack.@@ M@@ y@@ Class@@ 2@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ Str@@ ing.@@ contain@@ s("@@ Type com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ test@@ 00@@ 1.@@ jack.@@ M@@ y@@ Class@@ 3@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ Str@@ ing.@@ contain@@ s("@@ h@@ a@@ s al@@ read@@ y be@@ e@@ n import@@ ed@@ ")); } }
synchronized void re@@ cor@@ d@@ Scan@@ Start@@ (android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s setting@@ s, boolean fil@@ ter@@ ed@@ , int scan@@ ner@@ Id) { com.android.bluetooth.@@ g@@ at@@ t.@@ App@@ Scan@@ Stat@@ s.@@ L@@ ast@@ S@@ c@@ an exist@@ ing@@ S@@ c@@ an = get@@ Scan@@ From@@ Scan@@ ner@@ Id@@ (s@@ can@@ ner@@ Id); if (@@ exist@@ ing@@ S@@ c@@ an != null@@ ) { return@@ ; } (@@ this@@ .m@@ Scan@@ s@@ St@@ ar@@ ted@@ )@@ ++@@ ; start@@ Tim@@ e = android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ (); com.android.bluetooth.@@ g@@ at@@ t.@@ App@@ Scan@@ Stat@@ s.@@ L@@ ast@@ S@@ c@@ an s@@ c@@ an = new com.android.bluetooth.@@ g@@ at@@ t.@@ App@@ Scan@@ Stat@@ s.@@ L@@ ast@@ Scan@@ (@@ start@@ Time@@ , 0, false@@ , false@@ , fil@@ ter@@ ed@@ , scan@@ ner@@ Id); if (@@ setting@@ s != null@@ ) { scan@@ .@@ op@@ port@@ un@@ is@@ ti@@ c = (@@ setting@@ s.get@@ Scan@@ Mode@@ ()) == (android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s.@@ S@@ C@@ AN@@ _M@@ OD@@ E_@@ OP@@ P@@ OR@@ T@@ UN@@ IS@@ TI@@ C@@ ); scan@@ .@@ back@@ gro@@ un@@ d = ((@@ setting@@ s.get@@ Callback@@ Type@@ ()) & (android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ TYPE_@@ FI@@ RS@@ T_@@ MA@@ T@@ CH@@ )) != 0; } com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent scan@@ Ev@@ ent = new com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Event@@ (); scan@@ Ev@@ ent.@@ set@@ Scan@@ Event@@ Type@@ (@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent.@@ S@@ C@@ AN@@ _@@ EVEN@@ T_@@ STA@@ R@@ T@@ ); scan@@ Ev@@ ent.@@ set@@ Scan@@ T@@ ec@@ h@@ no@@ log@@ y@@ Type@@ (@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent.@@ S@@ C@@ AN@@ _@@ TE@@ CH@@ _@@ TYPE_@@ L@@ E); scan@@ Ev@@ ent.@@ set@@ Event@@ Time@@ Milli@@ s(@@ java.lang.System.@@ current@@ Time@@ Milli@@ s()); scan@@ Ev@@ ent.@@ set@@ In@@ iti@@ ator@@ (@@ tr@@ un@@ cate@@ App@@ Name@@ (@@ app@@ Name@@ )); m@@ G@@ att@@ Service.@@ add@@ Scan@@ Event@@ (s@@ can@@ Event@@ ); if (!(@@ is@@ Scan@@ n@@ ing@@ ())) { try { boolean is@@ U@@ no@@ pti@@ m@@ iz@@ ed = !@@ ((@@ (s@@ can@@ .@@ fil@@ ter@@ ed@@ ) || (s@@ can@@ .@@ back@@ gro@@ und@@ )) || (s@@ can@@ .@@ op@@ port@@ un@@ is@@ ti@@ c@@ )); m@@ Scan@@ Start@@ Tim@@ e = start@@ Time@@ ; m@@ B@@ atter@@ y@@ Stat@@ s.@@ no@@ te@@ B@@ le@@ Scan@@ St@@ ar@@ ted@@ (@@ work@@ Source@@ , is@@ U@@ no@@ pti@@ m@@ iz@@ ed@@ ); } catch (android.os.RemoteException e) { } } m@@ On@@ go@@ ing@@ Scan@@ s.@@ put@@ (s@@ can@@ ner@@ Id, scan@@ ); }
@java.lang.Override public com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ [] get@@ Res@@ ources@@ (com.android.@@ resources.@@ Resource@@ Type typ@@ e) { java.util.List<@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ > i@@ tem@@ s = m@@ P@@ u@@ bli@@ c@@ Resource@@ Map@@ .get@@ (@@ typ@@ e); return i@@ tem@@ s.@@ to@@ Array@@ (@@ new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ [i@@ tem@@ s.@@ size@@ ()@@ ]@@ ); }
@java.lang.Override public int com@@ par@@ e@@ To@@ (@@ java.lang.Object o@@ ) { com.android.@@ dx.@@ dex.@@ file.@@ Call@@ S@@ ite@@ Id@@ I@@ te@@ m o@@ th@@ er = ((@@ com.android.@@ dx.@@ dex.@@ file.@@ Call@@ S@@ ite@@ Id@@ Item@@ ) (o@@ )); return call@@ S@@ ite@@ .@@ com@@ par@@ e@@ To@@ (o@@ th@@ er.@@ call@@ S@@ ite@@ ); }
public static long d@@ ig@@ est@@ File@@ (@@ java.io.File file@@ ) throw@@ s java.io.IOException { if (@@ com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Utils.@@ is@@ Zip@@ File@@ (file@@ .getName@@ ())) { java.util.@@ z@@ i@@ p.@@ Zip@@ File z@@ ip@@ File@@ ; try { z@@ ip@@ File = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (file@@ ); } catch (java.io.IOException e) { com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Run@@ ner.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (@@ e); return com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Dig@@ est@@ er.@@ d@@ ig@@ est@@ Reg@@ ul@@ ar@@ File@@ (file@@ ); } try { return com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Dig@@ est@@ er@@ .@@ do@@ Dig@@ est@@ Zip@@ File@@ (@@ z@@ ip@@ File@@ ); } final@@ l@@ y { z@@ ip@@ File@@ .@@ close(); } } return com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Dig@@ est@@ er.@@ d@@ ig@@ est@@ Reg@@ ul@@ ar@@ File@@ (file@@ ); }
@java.lang.Override protected void tex@@ t@@ Changed@@ (@@ javax.@@ sw@@ ing.@@ ev@@ ent.@@ Doc@@ ument@@ Ev@@ ent e) { if (m@@ y@@ Up@@ dat@@ ing@@ ) return@@ ; my@@ Up@@ dat@@ ing = true@@ ; try { update@@ Data@@ Mode@@ l@@ (); my@@ Up@@ date@@ Listen@@ er.@@ update@@ (); } final@@ l@@ y { my@@ Up@@ dat@@ ing = false@@ ; } }
@org.junit.Test public void test@@ Comp@@ ile@@ 0@@ 2@@ 3@@ () throw@@ s java.lang.Exception { java.lang.String package@@ Name = "@@ com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ test@@ 0@@ 2@@ 3@@ .@@ jack@@ "; java.lang.String class@@ Pre@@ fi@@ x = (@@ package@@ Nam@@ e.@@ re@@ pla@@ ce@@ (@@ '@@ .@@ '@@ , '@@ _@@ '@@ )) + "@@ _@@ "; java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > in@@ put = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); in@@ pu@@ t.@@ put@@ ("@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ S@@ wit@@ ch@@ 2@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 2@@ $@@ En@@ um@@ 2@@ _@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 2@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 2@@ $@@ En@@ um@@ 2@@ _@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ En@@ um@@ 2@@ $@@ En@@ um@@ 2@@ 2@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ false@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 2@@ $@@ En@@ um@@ 2@@ _@@ "), false@@ )); in@@ pu@@ t.@@ put@@ ("@@ S@@ yn@@ th@@ et@@ ic@@ S@@ wit@@ ch@@ m@@ ap@@ Class@@ -@@ *@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 1@@ $@@ En@@ um@@ 1_@@ "), true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ (@@ (@@ class@@ Pre@@ fi@@ x + "@@ En@@ um@@ 2@@ $@@ En@@ um@@ 2@@ _@@ "), true@@ )); check@@ Comp@@ ile@@ d@@ Code@@ (@@ package@@ Name, input@@ ); }
synchronized android.@@ bluetooth.Bluetooth@@ Device get@@ Device@@ () { return mC@@ urrent@@ Device@@ ; }
protected void on@@ Up@@ date@@ Icc@@ A@@ va@@ il@@ abili@@ ty@@ () { if ((m@@ Uicc@@ Control@@ ler@@ ) == null@@ ) { return@@ ; } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Card@@ Appli@@ c@@ ation new@@ Uicc@@ Appli@@ c@@ ation = get@@ Uicc@@ Card@@ Application@@ (); if ((m@@ Uicc@@ Ap@@ pl@@ cation@@ ) != new@@ Uicc@@ Application@@ ) { m@@ Is@@ Sim@@ Read@@ y = false@@ ; if ((m@@ Uicc@@ Ap@@ pl@@ cation@@ ) != null@@ ) { log@@ ("@@ Remo@@ v@@ ing st@@ al@@ e ic@@ c ob@@ ject@@ s.@@ "); m@@ Uicc@@ Ap@@ pl@@ c@@ ation.@@ un@@ register@@ For@@ Read@@ y@@ (@@ this@@ ); m@@ Uicc@@ Ap@@ pl@@ c@@ ation.@@ un@@ register@@ For@@ Lock@@ ed@@ (@@ this@@ ); if ((m@@ Icc@@ Record@@ s) != null@@ ) { m@@ Icc@@ Record@@ s.@@ un@@ register@@ For@@ Record@@ s@@ Load@@ ed@@ (@@ this@@ ); } m@@ Icc@@ Record@@ s = null@@ ; m@@ Uicc@@ Ap@@ pl@@ c@@ ation = null@@ ; } if (@@ new@@ Uicc@@ Appli@@ c@@ ation != null@@ ) { log@@ ("@@ Ne@@ w c@@ ar@@ d fo@@ und@@ "); m@@ Uicc@@ Ap@@ pl@@ c@@ ation = new@@ Uicc@@ Application@@ ; m@@ Icc@@ Record@@ s = m@@ Uicc@@ Ap@@ pl@@ cation@@ .get@@ Icc@@ Record@@ s(); if (m@@ Phon@@ e.@@ is@@ Phone@@ Type@@ G@@ sm@@ ()) { m@@ Uicc@@ Ap@@ pl@@ c@@ ation.@@ register@@ For@@ Read@@ y@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Service@@ State@@ Track@@ er.@@ EVEN@@ T_@@ SI@@ M@@ _RE@@ AD@@ Y@@ , null@@ ); m@@ Uicc@@ Ap@@ pl@@ c@@ ation.@@ register@@ For@@ Lock@@ ed@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Service@@ State@@ Track@@ er.@@ EVEN@@ T_@@ SI@@ M@@ _@@ LO@@ C@@ K@@ ED@@ , null@@ ); if ((m@@ Icc@@ Record@@ s) != null@@ ) { m@@ Icc@@ Record@@ s.@@ register@@ For@@ Record@@ s@@ Load@@ ed@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Service@@ State@@ Track@@ er.@@ EVEN@@ T_@@ SI@@ M@@ _RE@@ C@@ OR@@ D@@ S_@@ LOA@@ DE@@ D@@ , null@@ ); } } else if (m@@ Is@@ Sub@@ s@@ cription@@ From@@ R@@ u@@ im@@ ) { m@@ Uicc@@ Ap@@ pl@@ c@@ ation.@@ register@@ For@@ Read@@ y@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Service@@ State@@ Track@@ er.@@ EVEN@@ T_@@ R@@ U@@ I@@ M@@ _RE@@ AD@@ Y@@ , null@@ ); m@@ Icc@@ Record@@ s) != null@@ ) { m@@ Icc@@ Record@@ s.@@ register@@ For@@ Record@@ s@@ Load@@ ed@@ (@@ this@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Service@@ State@@ Track@@ er.@@ EVEN@@ T_@@ R@@ U@@ I@@ M@@ _RE@@ C@@ OR@@ D@@ S_@@ LOA@@ DE@@ D@@ , null@@ ); } } } }
public void test@@ A@@ u@@ th@@ enti@@ cate@@ With@@ Po@@ st@@ () throw@@ s java.lang.Exception { com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Res@@ pon@@ se ple@@ ase@@ A@@ u@@ th@@ enti@@ cat@@ e = new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ Response@@ Code@@ (@@ 4@@ 0@@ 1@@ ).@@ add@@ Head@@ er@@ ("@@ W@@ W@@ W@@ -@@ A@@ u@@ th@@ enti@@ cate@@ : Bas@@ i@@ c re@@ al@@ m@@ =@@ \@@ "@@ protected ar@@ e@@ a@@ \"@@ ").@@ set@@ B@@ o@@ d@@ y@@ ("@@ P@@ le@@ as@@ e au@@ th@@ enti@@ cat@@ e.@@ "); server.@@ en@@ qu@@ e@@ ue@@ (p@@ le@@ ase@@ A@@ u@@ th@@ enti@@ cate@@ ); server.@@ en@@ qu@@ e@@ ue@@ (p@@ le@@ ase@@ A@@ u@@ th@@ enti@@ cate@@ ); server.@@ en@@ qu@@ e@@ ue@@ (p@@ le@@ ase@@ A@@ u@@ th@@ enti@@ cate@@ ); server.@@ en@@ qu@@ e@@ ue@@ (@@ new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ B@@ o@@ d@@ y@@ ("@@ Su@@ ccess@@ f@@ u@@ l au@@ th@@ !@@ ")); server.@@ play@@ (); java.net.@@ A@@ u@@ th@@ enti@@ cat@@ or@@ .set@@ Default@@ (@@ new libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Sim@@ ple@@ A@@ u@@ th@@ enti@@ cat@@ or@@ ()); java.net.@@ H@@ ttp@@ URL@@ Connec@@ tion connec@@ tion = ((@@ java.net.@@ H@@ ttp@@ URL@@ Connection@@ ) (@@ server.@@ get@@ Ur@@ l@@ ("@@ /@@ ").@@ open@@ Connection@@ ())); connection@@ .set@@ Do@@ Output@@ (@@ true@@ ); byte@@ [] request@@ B@@ o@@ d@@ y = new byte@@ []{ '@@ A@@ '@@ , '@@ B@@ '@@ , '@@ C@@ '@@ , '@@ D@@ ' }; java.io.@@ Output@@ Stream output@@ Stream = connection@@ .get@@ Output@@ Stream@@ (); output@@ Stream@@ .@@ write@@ (@@ request@@ B@@ o@@ d@@ y@@ ); output@@ Stream@@ .@@ close(); assert@@ Equal@@ s("@@ Su@@ ccess@@ f@@ u@@ l au@@ th@@ !@@ ", read@@ As@@ c@@ i@@ i@@ (@@ connection@@ .get@@ InputStream@@ (), java.lang.Integ@@ er.@@ MA@@ X_@@ VAL@@ UE@@ )); com.google.@@ mock@@ w@@ eb@@ server.@@ Record@@ ed@@ Requ@@ est requ@@ est = server.@@ t@@ ake@@ Request@@ (); assert@@ Cont@@ ain@@ s@@ Non@@ e@@ M@@ atch@@ ing@@ (@@ requ@@ est.@@ get@@ Head@@ er@@ s@@ (), "@@ A@@ u@@ th@@ or@@ iz@@ ation@@ : .@@ *@@ "); for (@@ int i = 0; i < 3@@ ; i++) { requ@@ est = server.@@ t@@ ake@@ Request@@ (); assert@@ Equal@@ s("@@ P@@ O@@ S@@ T / H@@ T@@ T@@ P@@ /@@ 1.@@ 1@@ ", requ@@ est.@@ get@@ Request@@ Line@@ ()); assert@@ Cont@@ ain@@ s(@@ requ@@ est.@@ get@@ Head@@ er@@ s@@ (), ("@@ A@@ u@@ th@@ or@@ iz@@ ation@@ : Bas@@ i@@ c " + (@@ libcore.@@ java.net.@@ URL@@ Connection@@ Test.@@ Sim@@ ple@@ A@@ u@@ th@@ enti@@ cat@@ or.@@ B@@ A@@ S@@ E_@@ 6@@ 4@@ _C@@ RE@@ D@@ EN@@ TI@@ AL@@ S@@ ))); assert@@ Equal@@ s(@@ java.util.Arrays.@@ toString@@ (@@ request@@ B@@ o@@ d@@ y@@ ), java.util.Arrays.@@ toString@@ (@@ requ@@ est.@@ get@@ B@@ o@@ d@@ y@@ ())); } }
synchronized boolean register@@ App@@ (android.bluetooth.Bluetooth@@ H@@ id@@ Device@@ App@@ Configur@@ ation config@@ , android.@@ bluetooth.Bluetooth@@ H@@ id@@ Device@@ App@@ S@@ dp@@ Setting@@ s s@@ dp@@ , android.@@ bluetooth.Bluetooth@@ H@@ id@@ Device@@ App@@ Q@@ o@@ s@@ Setting@@ s in@@ Q@@ o@@ s, android.@@ bluetooth.Bluetooth@@ H@@ id@@ Device@@ App@@ Q@@ o@@ s@@ Setting@@ s out@@ Q@@ o@@ s, android.@@ bluetooth.@@ I@@ Bluetooth@@ H@@ id@@ Device@@ Call@@ b@@ ac@@ k call@@ back@@ ) { if (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.TAG, "@@ register@@ App@@ ()@@ "); } if ((m@@ User@@ U@@ id@@ ) != 0) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.TAG, "@@ register@@ App@@ : fa@@ ile@@ d b@@ ec@@ au@@ se s@@ om@@ e u@@ se@@ r al@@ read@@ y u@@ se@@ s it@@ . "); return false@@ ; } m@@ App@@ Con@@ fig = config@@ ; m@@ User@@ U@@ id = android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (); android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.TAG, ("@@ register@@ App@@ : cal@@ le@@ r uid@@ =@@ " + (m@@ User@@ U@@ id@@ ))); m@@ Call@@ b@@ ac@@ k = call@@ back@@ ; return register@@ App@@ Native@@ (s@@ d@@ p.@@ name@@ , s@@ d@@ p.@@ des@@ cription@@ , s@@ d@@ p.@@ provid@@ er, s@@ d@@ p.@@ su@@ b@@ class@@ , s@@ d@@ p.@@ des@@ crip@@ tor@@ s, (in@@ Q@@ o@@ s == null ? null : in@@ Q@@ os.@@ to@@ Array@@ ()@@ ), (@@ out@@ Q@@ o@@ s == null ? null : out@@ Q@@ os.@@ to@@ Array@@ ())); }
@java.lang.Override public void set@@ C@@ L@@ I@@ R@@ (@@ int c@@ li@@ r@@ Mode@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SE@@ T_@@ C@@ L@@ I@@ R@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " c@@ li@@ r@@ Mod@@ e = ") + c@@ li@@ r@@ Mode@@ )); } try { radioProx@@ y.@@ set@@ C@@ li@@ r@@ (rr@@ .m@@ Ser@@ ial@@ , c@@ li@@ r@@ Mode@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ set@@ C@@ L@@ I@@ R@@ ", e); } } }
@java.lang.Override public void handle@@ Message@@ (android.os.@@ Message ms@@ g@@ ) { synchronized@@ (@@ this@@ ) { final long m@@ illi@@ s@@ Le@@ f@@ t = (m@@ St@@ op@@ Time@@ In@@ F@@ ut@@ ure@@ ) - (android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ ()); if (m@@ illi@@ s@@ Le@@ f@@ t <@@ = 0) { on@@ F@@ in@@ is@@ h@@ (); } else if (m@@ illi@@ s@@ Le@@ f@@ t < (m@@ Coun@@ t@@ do@@ wn@@ Inter@@ val@@ )) { send@@ Message@@ De@@ lay@@ ed@@ (@@ ob@@ tain@@ Message@@ (android.os.@@ Count@@ Down@@ Tim@@ er.@@ MS@@ G@@ ), m@@ illi@@ s@@ Le@@ f@@ t@@ ); } else { long las@@ t@@ T@@ i@@ ck@@ St@@ ar@@ t = android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ (); on@@ T@@ i@@ ck@@ (m@@ illi@@ s@@ Le@@ f@@ t@@ ); long de@@ la@@ y = (@@ las@@ t@@ T@@ i@@ ck@@ St@@ ar@@ t + (m@@ Coun@@ t@@ do@@ wn@@ Inter@@ val@@ )) - (android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ ()); while (@@ de@@ la@@ y < 0) de@@ la@@ y +@@ = m@@ Coun@@ t@@ do@@ wn@@ Inter@@ val@@ ; if (!(m@@ Can@@ ce@@ lle@@ d@@ )) { send@@ Message@@ De@@ lay@@ ed@@ (@@ ob@@ tain@@ Message@@ (android.os.@@ Count@@ Down@@ Tim@@ er.@@ MS@@ G@@ ), de@@ lay@@ ); } } }
public void send@@ En@@ ve@@ lo@@ pe@@ With@@ Statu@@ s(@@ java.lang.String cont@@ ent@@ s, android.os.@@ Message res@@ ponse@@ ) { get@@ Command@@ s@@ Interface@@ ().@@ send@@ En@@ ve@@ lo@@ pe@@ With@@ Statu@@ s(@@ cont@@ ent@@ s, res@@ ponse@@ ); }
public com.android.@@ lay@@ out@@ lib.@@ api.@@ Lay@@ out@@ S@@ c@@ en@@ e create@@ S@@ c@@ en@@ e@@ (com.android.@@ lay@@ out@@ lib.@@ api.@@ S@@ c@@ en@@ e@@ Param@@ s param@@ s) { if ((m@@ B@@ rid@@ g@@ e) != null@@ ) { m@@ B@@ rid@@ g@@ e.@@ create@@ S@@ c@@ en@@ e@@ (@@ param@@ s); } else if ((m@@ Le@@ g@@ ac@@ y@@ B@@ rid@@ g@@ e) != null@@ ) { return create@@ Le@@ g@@ ac@@ y@@ S@@ c@@ en@@ e@@ (@@ param@@ s); } return null@@ ; }
public void test@@ VF@@ E@@ 3@@ () { try { new do@@ t.@@ junit.@@ op@@ cod@@ es.@@ i@@ get@@ _@@ short@@ .@@ d.@@ T_@@ i@@ get@@ _@@ short@@ _@@ 1@@ 3@@ ().@@ run@@ (); fail@@ ("@@ expec@@ ted a No@@ Su@@ ch@@ Field@@ Error excepti@@ on@@ "); } catch (java.lang.@@ No@@ Su@@ ch@@ Field@@ Error e) { } }
public java.lang.String get@@ Display@@ Variant@@ (java.util.@@ Local@@ e loc@@ ale@@ ) { try { java.util.@@ Loc@@ a@@ le.@@ Build@@ er.@@ n@@ or@@ m@@ aliz@@ e@@ And@@ Valid@@ ate@@ Variant@@ (@@ vari@@ ant@@ Code@@ ); } catch (java.util.@@ I@@ l@@ for@@ m@@ ed@@ Loc@@ ale@@ Exception il@@ f@@ e) { return vari@@ ant@@ Code@@ ; } java.lang.String result = libcore.@@ icu@@ .@@ IC@@ U@@ .get@@ Display@@ Variant@@ (@@ this@@ , loc@@ ale@@ ); if (@@ result == null@@ ) { result = libcore.@@ icu@@ .@@ IC@@ U@@ .get@@ Display@@ Variant@@ (@@ this@@ , java.util.@@ Loc@@ ale@@ .get@@ Default@@ ()); } if (@@ result.@@ isEmpty@@ ()) { return vari@@ ant@@ Code@@ ; } return result@@ ; }
public void remove@@ Profile@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Profile@@ Ser@@ vice pro@@ file@@ ) { android.os.@@ Message m = m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.@@ ME@@ SS@@ A@@ G@@ E_@@ PRO@@ F@@ IL@@ E_@@ S@@ ER@@ VIC@@ E_@@ UN@@ RE@@ G@@ IS@@ TER@@ ED@@ , pro@@ file@@ ); m@@ Handler.@@ send@@ Message@@ (m@@ ); }
void in@@ it@@ () { android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (android.@@ bluetooth.@@ I@@ Bluetooth@@ Headset@@ Phone@@ .@@ class@@ .getName@@ ()); int@@ ent.@@ set@@ Comp@@ on@@ ent@@ (@@ int@@ ent.@@ res@@ ol@@ ve@@ System@@ Service@@ (m@@ Service@@ .get@@ Package@@ Manager@@ (), 0@@ )); if ((@@ (@@ int@@ ent.get@@ Comp@@ on@@ ent@@ ()) == null@@ ) || (!(m@@ Service.@@ b@@ ind@@ Service@@ (@@ int@@ ent@@ , m@@ Phone@@ Prox@@ y@@ Connection@@ , 0@@ )@@ ))) { android.util.Log.e@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ System@@ Interface@@ .@@ TAG, "@@ Co@@ ul@@ d not b@@ in@@ d to B@@ luetoo@@ th Head@@ set Phon@@ e Service@@ "); } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face load@@ Class@@ Or@@ Interface@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Pack@@ age load@@ ing@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String si@@ mp@@ le@@ Name@@ ) { for (com.android.s@@ ched.@@ vfs.@@ Input@@ V@@ Elem@@ ent su@@ b : d@@ ir.@@ list@@ ()) { if ((@@ !@@ (s@@ ub@@ .is@@ V@@ Dir@@ ())) && (is@@ Jack@@ File@@ Name@@ Of@@ (s@@ ub@@ .getName@@ (), si@@ mp@@ le@@ Name@@ ))) { try { return new com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er@@ (in@@ put@@ Jack@@ Library@@ , load@@ ing@@ , si@@ mp@@ le@@ Name, ((@@ com.android.sched.vfs.@@ Input@@ V@@ File@@ ) (s@@ ub@@ )), lo@@ ok@@ up@@ , default@@ Load@@ Level@@ ).@@ load@@ (); } catch (java.io.IOException e) { throw new com.android.jack.@@ load@@ .@@ Jack@@ Load@@ ing@@ Exception@@ (s@@ ub@@ .get@@ Location@@ (), e); } catch (com.android.jack.@@ library.@@ Library@@ Format@@ Exception e) { throw new com.android.jack.@@ load@@ .@@ Jack@@ Load@@ ing@@ Exception@@ (s@@ ub@@ .get@@ Location@@ (), e); } catch (com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Format@@ Exception e) { throw new com.android.jack.@@ load@@ .@@ Jack@@ Load@@ ing@@ Exception@@ (s@@ ub@@ .get@@ Location@@ (), new com.android.jack.library.@@ Library@@ Format@@ Exception@@ (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ (), e@@ )); } catch (com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Version@@ Exception e) { throw new com.android.jack.@@ load@@ .@@ Jack@@ Load@@ ing@@ Exception@@ (s@@ ub@@ .get@@ Location@@ (), new com.android.jack.library.@@ Library@@ Format@@ Exception@@ (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ (), e@@ )); } } throw new com.android.jack.@@ ir.ast.@@ M@@ is@@ sing@@ J@@ Type@@ Loo@@ k@@ up@@ Exception(@@ load@@ ing@@ , si@@ mp@@ le@@ Name); }
@java.lang.Override public void run@@ () { m@@ Manager.@@ register@@ Callback@@ (m@@ Call@@ ab@@ ck@@ , new android.os.@@ Handler@@ ()); m@@ Manager.@@ un@@ register@@ Callback@@ (m@@ Call@@ ab@@ ck@@ ); }
private static void cal@@ c@@ ul@@ ate@@ B@@ or@@ der@@ Co@@ l@@ or@@ For@@ View@@ Node@@ (com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ View@@ No@@ de no@@ de@@ , int result@@ ) { org.eclipse.swt.@@ g@@ raphic@@ s.@@ Co@@ lo@@ r b@@ or@@ der@@ Co@@ l@@ or@@ ; switch (@@ result@@ ) { case com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l.@@ CON@@ TR@@ A@@ ST_@@ P@@ A@@ S@@ S : b@@ or@@ der@@ Co@@ lo@@ r = com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ B@@ or@@ der@@ Co@@ l@@ or@@ P@@ ass@@ ; break@@ ; case com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l.@@ CON@@ TR@@ A@@ ST_@@ FA@@ I@@ L : b@@ or@@ der@@ Co@@ lo@@ r = com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ B@@ or@@ der@@ Co@@ l@@ or@@ Fail@@ ; break@@ ; case com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Mode@@ l.@@ CON@@ TR@@ A@@ ST_@@ IN@@ DE@@ TER@@ M@@ IN@@ AT@@ E : default : b@@ or@@ der@@ Co@@ lo@@ r = com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ B@@ or@@ der@@ Co@@ l@@ or@@ In@@ d@@ eter@@ min@@ ate@@ ; } com.android.@@ hierarchyviewerlib.@@ ui.@@ E@@ valu@@ ate@@ Con@@ tr@@ ast@@ Dis@@ pla@@ y.@@ s@@ B@@ or@@ der@@ Co@@ l@@ or@@ For@@ View@@ No@@ d@@ e.@@ put@@ (@@ no@@ de@@ , b@@ or@@ der@@ Co@@ l@@ or@@ ); }
@java.lang.Override public void send@@ Text@@ For@@ Sub@@ s@@ cri@@ ber@@ With@@ Option@@ s@@ (@@ int sub@@ Id, java.lang.String call@@ ing@@ Package@@ , java.lang.String d@@ est@@ Add@@ r@@ , java.lang.String s@@ c@@ Add@@ r@@ , java.lang.String par@@ t@@ s, android.app.@@ P@@ end@@ ing@@ Int@@ ent s@@ ent@@ Intent@@ s, android.app.@@ P@@ end@@ ing@@ Int@@ ent de@@ li@@ ver@@ y@@ Intent@@ s, boolean per@@ si@@ st@@ Message@@ , int pri@@ or@@ ity@@ , boolean expec@@ t@@ M@@ ore@@ , int valid@@ ity@@ Per@@ io@@ d@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Sms@@ Interface@@ Manager icc@@ Sms@@ Int@@ M@@ g@@ r = get@@ Icc@@ Sms@@ Interface@@ Manager@@ (s@@ ub@@ Id); if (@@ icc@@ Sms@@ Int@@ M@@ g@@ r != null@@ ) { icc@@ Sms@@ Int@@ M@@ g@@ r.@@ send@@ Text@@ With@@ Option@@ s(@@ call@@ ing@@ Package@@ , d@@ est@@ Add@@ r@@ , s@@ c@@ Add@@ r@@ , par@@ t@@ s, s@@ ent@@ Intent@@ s, de@@ li@@ ver@@ y@@ Intent@@ s, per@@ si@@ st@@ Message@@ , pri@@ or@@ ity@@ , expec@@ t@@ M@@ ore@@ , valid@@ ity@@ Per@@ io@@ d@@ ); } else { android.telephony.@@ R@@ log.@@ e@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Uicc@@ Sms@@ Control@@ ler.@@ LOG@@ _@@ TAG, (("@@ send@@ Text@@ With@@ Option@@ s icc@@ Sms@@ Int@@ M@@ g@@ r is null for@@ " + " Sub@@ s@@ cription@@ : ") + sub@@ Id@@ )); } }
private com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Java@@ Ar@@ t@@ if@@ act@@ Imp@@ l create@@ Un@@ it@@ Test@@ s@@ Java@@ Ar@@ t@@ if@@ act@@ (@@ @com.android.annotations.NonNull com.android.builder.@@ core.@@ Variant@@ Type vari@@ ant@@ Type, @com.android.annotations.NonNull Base@@ Variant@@ Data@@ <@@ ? extends Base@@ Variant@@ Output@@ Data@@ > vari@@ ant@@ Data@@ ) { com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Mode@@ l@@ Build@@ er.@@ Source@@ Provider@@ s source@@ Provider@@ s = com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Mode@@ l@@ Build@@ er.@@ d@@ eter@@ m@@ ine@@ Source@@ Provider@@ s(@@ vari@@ ant@@ Data@@ ); com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Dependenc@@ ies@@ Imp@@ l de@@ pendenc@@ i@@ es = com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Dependenc@@ ies@@ Imp@@ l.@@ c@@ lon@@ e@@ Dependenc@@ i@@ es(@@ vari@@ ant@@ Data@@ , android@@ Builder@@ ); java.util.List<@@ java.io.File@@ > ex@@ tra@@ Gener@@ ated@@ Source@@ Folder@@ s = vari@@ ant@@ Data@@ .get@@ Extra@@ Gener@@ ated@@ Source@@ Folder@@ s(); return new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ model.@@ Java@@ Ar@@ t@@ if@@ act@@ Imp@@ l@@ (@@ vari@@ ant@@ Typ@@ e.get@@ Ar@@ t@@ if@@ act@@ Name@@ (), vari@@ ant@@ Data@@ .@@ as@@ se@@ m@@ ble@@ Variant@@ Task@@ .getName@@ (), vari@@ ant@@ Data@@ .@@ compile@@ Task@@ .getName@@ (), com.google.common.@@ colle@@ ct.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (@@ vari@@ ant@@ Data@@ .@@ pre@@ par@@ e@@ Dependenc@@ ies@@ Task@@ .getName@@ (), t@@ ask@@ Manager.@@ create@@ Mock@@ able@@ J@@ ar@@ .getName@@ ()@@ ), (@@ ex@@ tra@@ Gener@@ ated@@ Source@@ Folder@@ s != null ? ex@@ tra@@ Gener@@ ated@@ Source@@ Folder@@ s : java.util.Collection@@ s.@@ <@@ java.io.File@@ >@@ e@@ mpty@@ List@@ ()@@ ), ((@@ vari@@ ant@@ Data@@ .@@ java@@ c@@ Task@@ ) != null ? vari@@ ant@@ Data@@ .@@ java@@ c@@ Task@@ .get@@ D@@ est@@ in@@ ation@@ Dir@@ () : vari@@ ant@@ Data@@ .get@@ S@@ co@@ pe@@ ().get@@ Java@@ Output@@ Dir@@ ()@@ ), vari@@ ant@@ Data@@ .get@@ S@@ co@@ pe@@ ().get@@ Java@@ Res@@ ources@@ D@@ est@@ in@@ ation@@ Dir@@ (), t@@ ask@@ Manager.get@@ G@@ lo@@ b@@ al@@ S@@ co@@ pe@@ ().get@@ Mock@@ able@@ Android@@ J@@ ar@@ File@@ (), de@@ pendenc@@ ies@@ , source@@ Provider@@ s.@@ vari@@ ant@@ Source@@ Provider@@ , source@@ Provider@@ s.@@ m@@ ulti@@ Flavor@@ Source@@ Provider@@ ); }
@javax.annotation.@@ N@@ on@@ null private synchronized com.android.sched.vfs.@@ Input@@ VF@@ S get@@ Sec@@ tion@@ VF@@ S@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.library.@@ File@@ Type file@@ Typ@@ e) { com.android.sched.vfs.@@ Input@@ VF@@ S current@@ Sec@@ tion@@ VF@@ S@@ ; if (s@@ ec@@ tion@@ VF@@ S@@ .@@ contain@@ s@@ Key@@ (file@@ Type@@ )) { current@@ Sec@@ tion@@ VF@@ S = sec@@ tion@@ VF@@ S@@ .get@@ (file@@ Type@@ ); } else { com.android.sched.vfs.@@ VF@@ S pre@@ fix@@ ed@@ Input@@ VF@@ S@@ ; try { pre@@ fix@@ ed@@ Input@@ VF@@ S = new com.android.sched.vfs.@@ Pre@@ fix@@ ed@@ F@@ S@@ (@@ v@@ f@@ s, new com.android.sched.vfs.@@ V@@ Path@@ (file@@ Typ@@ e.get@@ Pre@@ fix@@ (), '@@ /@@ '@@ )); } catch (com.android.s@@ ched.@@ util.@@ file.@@ C@@ annot@@ Create@@ File@@ Exception e) { com.android.jack.library.@@ Library@@ Read@@ ing@@ Exception re@@ port@@ able = new com.android.jack.library.@@ Library@@ Read@@ ing@@ Exception(@@ e); com.android.jack.@@ Jack@@ .get@@ Session@@ ().get@@ Re@@ por@@ ter@@ ().@@ re@@ port@@ (@@ Se@@ ver@@ it@@ y.@@ FA@@ TA@@ L, re@@ port@@ able@@ ); throw new com.android.jack.@@ Jack@@ Ab@@ ort@@ Exception@@ (re@@ port@@ able@@ ); } if (file@@ Type == (com.android.jack.@@ library.@@ File@@ Type.@@ DE@@ X@@ )) { try { current@@ Sec@@ tion@@ VF@@ S = new com.android.sched.vfs.@@ Gener@@ ic@@ Input@@ VF@@ S@@ (@@ new com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ (p@@ re@@ fix@@ ed@@ Input@@ VF@@ S@@ , com.android.sched.util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Jack@@ Library@@ Fa@@ ctor@@ y.@@ ME@@ SS@@ A@@ G@@ E_@@ DI@@ G@@ E@@ ST_@@ AL@@ G@@ O@@ ))); } catch (com.android.s@@ ched.@@ vfs.@@ W@@ ron@@ g@@ VF@@ S@@ Format@@ Exception e) { com.android.jack.library.@@ Library@@ Read@@ ing@@ Exception re@@ port@@ able = new com.android.jack.library.@@ Library@@ Read@@ ing@@ Exception(@@ e); com.android.jack.@@ Jack@@ .get@@ Session@@ ().get@@ Re@@ por@@ ter@@ ().@@ re@@ port@@ (@@ Se@@ ver@@ it@@ y.@@ FA@@ TA@@ L, re@@ port@@ able@@ ); throw new com.android.jack.@@ Jack@@ Ab@@ ort@@ Exception@@ (re@@ port@@ able@@ ); } } else { current@@ Sec@@ tion@@ VF@@ S = new com.android.sched.vfs.@@ Gener@@ ic@@ Input@@ VF@@ S@@ (p@@ re@@ fix@@ ed@@ Input@@ VF@@ S@@ ); } sec@@ tion@@ VF@@ S@@ .@@ put@@ (file@@ Type, current@@ Sec@@ tion@@ VF@@ S@@ ); } return current@@ Sec@@ tion@@ VF@@ S@@ ; }
private static void m@@ ay@@ be@@ Dis@@ able@@ Logg@@ ing@@ () { if (!@@ (android.@@ telecom.@@ Log.@@ m@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enabled@@ )) { return@@ ; } if ((@@ android.telecom.@@ Log.@@ m@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ St@@ op@@ Tim@@ e) < (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s@@ ())) { android.telecom.@@ Log.@@ m@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ St@@ op@@ Tim@@ e = 0; android.telecom.@@ Log.@@ m@@ Is@@ User@@ Ex@@ t@@ end@@ ed@@ Logg@@ ing@@ Enable@@ d = false@@ ; } }
@java.lang.Override public java.lang.String get@@ S@@ ig@@ Al@@ g@@ Name@@ () { return org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to@@ .get@@ _@@ X@@ 509@@ _@@ si@@ g@@ _@@ al@@ g@@ _@@ param@@ eter@@ (m@@ Context@@ ); }
protected void open@@ Device@@ (java.lang.String c@@ am@@ er@@ a@@ Id, android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ t@@ est@@ case@@ s.@@ Block@@ ing@@ State@@ Call@@ b@@ ac@@ k list@@ ener@@ ) throw@@ s java.lang.Exception { mC@@ am@@ er@@ a = android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ C@@ am@@ er@@ a@@ Test@@ Utils.@@ C@@ am@@ er@@ a@@ Test@@ Utils.@@ open@@ C@@ am@@ er@@ a@@ (m@@ C@@ am@@ er@@ a@@ Manager@@ , c@@ am@@ er@@ a@@ Id, list@@ ener@@ , m@@ Handler@@ ); m@@ Colle@@ ctor@@ .set@@ C@@ am@@ er@@ a@@ Id@@ (c@@ am@@ er@@ a@@ Id); m@@ St@@ ati@@ c@@ Info = new android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ hel@@ per@@ s.@@ St@@ ati@@ c@@ Met@@ ad@@ ata@@ (m@@ C@@ am@@ er@@ a@@ Manager.get@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s(@@ c@@ am@@ er@@ a@@ Id@@ ), android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ hel@@ per@@ s.@@ St@@ ati@@ c@@ Met@@ ad@@ ata@@ .@@ Check@@ Level.@@ A@@ SS@@ ER@@ T, null@@ ); m@@ Or@@ der@@ ed@@ Pre@@ view@@ Size@@ s = get@@ Sup@@ ported@@ Pre@@ view@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , get@@ Display@@ Size@@ ()); m@@ Or@@ der@@ ed@@ V@@ ide@@ o@@ Size@@ s = get@@ Sup@@ ported@@ V@@ ide@@ o@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ t@@ est@@ case@@ s.@@ P@@ RE@@ V@@ I@@ E@@ W@@ _S@@ I@@ Z@@ E_@@ B@@ O@@ UN@@ D@@ ); m@@ Or@@ der@@ ed@@ S@@ ti@@ l@@ l@@ Size@@ s = get@@ Sup@@ ported@@ S@@ ti@@ l@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , null@@ ); if (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ t@@ est@@ case@@ s.@@ C@@ am@@ er@@ a@@ 2@@ Android@@ Test@@ C@@ ase.@@ V@@ ER@@ B@@ O@@ SE@@ ) { android.util.Log.@@ v@@ (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ t@@ est@@ case@@ s.@@ C@@ am@@ er@@ a@@ 2@@ Android@@ Test@@ C@@ ase.@@ TAG, (("@@ C@@ am@@ er@@ a " + c@@ am@@ er@@ a@@ Id) + " is open@@ ed@@ ")); } }
private void test@@ S@@ ing@@ le@@ P@@ ass@@ () { java.util.Map@@ <java.lang.String, java.lang.String> e@@ mpty@@ Ma@@ p = java.util.Collection@@ s.@@ e@@ mpty@@ Map@@ (); final com.android.ddmlib.@@ tes@@ tr@@ un@@ ner.@@ Test@@ Id@@ ent@@ if@@ i@@ er test@@ Id = new com.android.ddmlib.@@ tes@@ tr@@ un@@ ner.@@ Test@@ Id@@ ent@@ if@@ ier@@ ("@@ com.@@ f@@ oo@@ .@@ F@@ oo@@ Test@@ ", "@@ test@@ F@@ oo@@ "); org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ re@@ play@@ (m@@ Mock@@ Build@@ ); m@@ Result@@ Re@@ port@@ er.@@ in@@ vo@@ cation@@ St@@ ar@@ ted@@ (m@@ Mock@@ Build@@ ); m@@ Result@@ Re@@ port@@ er.@@ test@@ Run@@ St@@ ar@@ ted@@ (com.android.@@ cts.@@ util.@@ Ab@@ i@@ Utils.@@ create@@ Id@@ (@@ Un@@ it@@ Test@@ s.@@ A@@ B@@ I@@ .getName@@ (), "@@ run@@ "), 1); m@@ Result@@ Re@@ port@@ er.@@ test@@ St@@ ar@@ ted@@ (@@ test@@ Id); m@@ Result@@ Re@@ port@@ er.@@ test@@ En@@ d@@ ed@@ (@@ test@@ Id, e@@ mpty@@ Map@@ ); m@@ Result@@ Re@@ port@@ er.@@ test@@ Run@@ En@@ d@@ ed@@ (@@ 3@@ 00@@ 0, e@@ mpty@@ Map@@ ); m@@ Result@@ Re@@ port@@ er.@@ in@@ vo@@ cation@@ En@@ d@@ ed@@ (1@@ ); m@@ Result@@ Re@@ port@@ er.@@ put@@ S@@ um@@ m@@ ary@@ (com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ result.@@ C@@ ts@@ Xml@@ Result@@ Re@@ por@@ ter@@ Test.@@ S@@ U@@ M@@ M@@ AR@@ Y_@@ LIS@@ T@@ ); java.lang.String out@@ put = get@@ Output@@ (); final java.lang.String expected@@ Test@@ Out@@ put = java.lang.String@@ .@@ for@@ mat@@ (("@@ <@@ Test@@ Res@@ ult test@@ P@@ lan@@ =@@ \"@@ N@@ A@@ \@@ " start@@ time@@ =@@ \"@@ ign@@ ore@@ \@@ " end@@ time@@ =@@ \"@@ ign@@ ore@@ \@@ " + "@@ ver@@ sion@@ =@@ \"@@ %@@ s@@ \@@ " s@@ ui@@ te@@ =@@ \"@@ %@@ s@@ \@@ " re@@ ference@@ Ur@@ l@@ =@@ \"@@ %@@ s@@ \"@@ > "), com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ result.@@ C@@ ts@@ Xml@@ Result@@ Re@@ port@@ er.@@ C@@ T@@ S@@ _RE@@ S@@ UL@@ T_@@ F@@ IL@@ E_@@ V@@ E@@ RS@@ I@@ ON@@ , "@@ C@@ T@@ S@@ ", com.android.@@ cts.@@ tr@@ ad@@ e@@ f@@ ed.@@ result.@@ C@@ ts@@ Xml@@ Result@@ Re@@ por@@ ter@@ Test.@@ TEST_@@ S@@ U@@ M@@ AR@@ Y_@@ URL@@ ); assert@@ True@@ (@@ out@@ pu@@ t.@@ contain@@ s("@@ <@@ S@@ um@@ m@@ ar@@ y fa@@ ile@@ d@@ =@@ \"@@ 0@@ \@@ " not@@ Ex@@ ec@@ u@@ ted@@ =@@ \"@@ 0@@ \@@ " time@@ out@@ =@@ \"@@ 0@@ \@@ " p@@ ass@@ =@@ \"@@ 1@@ \@@ " /@@ >@@ ")); assert@@ True@@ (@@ out@@ pu@@ t.@@ contain@@ s@@ ((("@@ <@@ Test@@ Pack@@ age name@@ =@@ \"@@ \@@ " app@@ Package@@ Name@@ =@@ \"@@ run@@ \@@ " ab@@ i@@ =@@ \"@@ " + (@@ Un@@ it@@ Test@@ s.@@ A@@ B@@ I@@ .getName@@ ())) + "@@ \@@ " d@@ ig@@ est@@ =@@ \"@@ >@@ "@@ ))); assert@@ True@@ (@@ out@@ pu@@ t.@@ contain@@ s("@@ <@@ Test@@ C@@ as@@ e name@@ =@@ \"@@ F@@ oo@@ Test@@ \@@ " pri@@ or@@ ity@@ =@@ \"@@ >@@ ")); final java.lang.String test@@ C@@ ase@@ T@@ a@@ g = java.lang.String@@ .@@ for@@ mat@@ ("@@ <@@ Test name@@ =@@ \"@@ %@@ s@@ \@@ " result@@ =@@ \"@@ p@@ ass@@ \"@@ p@@ ass@@ \"@@ ", test@@ Id@@ .get@@ Test@@ Name@@ ()); assert@@ True@@ (@@ out@@ pu@@ t.@@ contain@@ s(@@ test@@ C@@ ase@@ Tag@@ )); org.@@ e@@ as@@ y@@ mock@@ .@@ E@@ as@@ y@@ Mock@@ .@@ ve@@ r@@ if@@ y@@ (m@@ Mock@@ Build@@ ); }
@org.junit.Test public void compile@@ With@@ Annot@@ ation@@ Process@@ or@@ No@@ A@@ ut@@ o@@ _@@ class@@ path@@ () throw@@ s java.lang.Exception { java.util.List<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ > ex@@ c@@ lu@@ de = new java.util.ArrayList<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ >(); ex@@ c@@ lu@@ d@@ e.@@ add@@ (com.android.jack.@@ test.@@ toolchain.@@ J@@ il@@ l@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in ja@@ c@@ k = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ , ex@@ c@@ lu@@ de@@ ); java.io.File jack@@ O@@ u@@ t = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); java.io.File process@@ or@@ s = com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.get@@ No@@ Config@@ Process@@ or@@ s(); jack.@@ set@@ Annot@@ ation@@ Process@@ or@@ Class@@ es@@ (java.util.@@ Collection@@ s.@@ sing@@ let@@ on@@ List@@ (com.android.jack.@@ annotation.@@ process@@ or.@@ s@@ am@@ p@@ le.@@ process@@ or@@ s.@@ Source@@ Annot@@ ation@@ Process@@ or@@ .@@ class@@ .getName@@ ())); jack.@@ add@@ To@@ Class@@ path@@ (@@ jack@@ .get@@ Default@@ B@@ oot@@ Class@@ path@@ ()); jack.@@ add@@ To@@ Class@@ path@@ (pro@@ cess@@ or@@ s); jack.@@ src@@ To@@ Lib@@ (@@ jack@@ Out@@ , false@@ , com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.@@ AN@@ NO@@ TA@@ TION@@ S_@@ DI@@ R@@ , com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.@@ AN@@ NO@@ TA@@ TED@@ _@@ DI@@ R@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y lib@@ O@@ u@@ t = open@@ Dir@@ As@@ Jack@@ Library@@ (@@ jack@@ Out@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (@@ lib@@ O@@ u@@ t.@@ contain@@ s@@ File@@ Type@@ (@@ File@@ Type.@@ RS@@ C@@ )); lib@@ O@@ u@@ t.get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , new com.android.sched.vfs.@@ V@@ Path@@ ("@@ Annot@@ ated@@ 2@@ D@@ up@@ li@@ cat@@ ed@@ ", '@@ /@@ '@@ )); }
public void set@@ M@@ eta@@ Dir@@ s(@@ @javax.annotation.@@ N@@ on@@ null java.util.List<@@ java.io.File@@ > m@@ eta@@ Dir@@ s) { m@@ eta@@ Imp@@ or@@ t = new java.util.ArrayList<@@ java.io.File@@ >@@ (m@@ eta@@ Dir@@ s); }
@java.lang.Override public void run@@ () { try { java.io.File out@@ put = java.io.File@@ .@@ create@@ Temp@@ File@@ ("@@ pre@@ dex@@ ", "@@ .@@ ja@@ r@@ "); out@@ pu@@ t.@@ de@@ lete@@ On@@ Ex@@ it@@ (); output@@ Fil@@ es@@ [i@@ i@@ ] = output@@ ; com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Pre@@ Dex@@ Cach@@ e.get@@ Cach@@ e@@ ().@@ pre@@ Dex@@ Library@@ (m@@ D@@ x@@ Ex@@ e@@ , input@@ , output@@ , dex@@ Option@@ s, m@@ Build@@ Too@@ l@@ Info@@ , false@@ , c@@ l@@ r@@ ); } catch (java.lang.Exception ign@@ or@@ ed@@ ) { } }
public void test@@ Request@@ Up@@ date@@ Stream@@ ing@@ Ser@@ vices@@ () throw@@ s java.lang.Exception { java.util.List<@@ java.lang.String> test@@ Clas@@ se@@ s = java.util.Arrays.@@ as@@ List@@ (@@ "@@ class@@ 1@@ ", "@@ class@@ 2@@ "); m@@ Stream@@ ing@@ Session@@ .@@ request@@ Up@@ date@@ Stream@@ ing@@ Ser@@ vices@@ (@@ test@@ Class@@ es@@ ); java.util.List<@@ android.telephony.@@ m@@ b@@ m@@ s.@@ Stream@@ ing@@ Service@@ Info@@ > service@@ Info@@ s = ((@@ java.util.List<@@ android.telephony.@@ m@@ b@@ m@@ s.@@ Stream@@ ing@@ Service@@ Info@@ >@@ ) (m@@ Callback@@ .@@ wait@@ On@@ Stream@@ ing@@ Ser@@ vices@@ Up@@ dat@@ ed@@ ().@@ arg@@ 1@@ )); assert@@ Equal@@ s@@ ((@@ (android.@@ telephony.@@ m@@ b@@ m@@ s.@@ Service@@ Info@@ ) (@@ C@@ ts@@ Stream@@ ing@@ Service.@@ S@@ T@@ RE@@ AM@@ ING@@ _S@@ ER@@ VIC@@ E_@@ IN@@ F@@ O@@ )), ((@@ android.telephony.@@ m@@ b@@ m@@ s.@@ Service@@ Info@@ ) (@@ service@@ Info@@ s.get@@ (0@@ )))); assert@@ Equal@@ s(@@ 0, m@@ Callback@@ .get@@ Num@@ Error@@ Call@@ s()); java.util.List<@@ java.util.@@ List@@ > request@@ Stream@@ ing@@ Ser@@ vices@@ Call@@ s = get@@ M@@ id@@ d@@ le@@ war@@ e@@ Call@@ s(@@ C@@ ts@@ Stream@@ ing@@ Service.@@ ME@@ TH@@ OD@@ _RE@@ Q@@ UE@@ ST_@@ U@@ P@@ DA@@ TE_@@ S@@ T@@ RE@@ AM@@ ING@@ _S@@ ER@@ VIC@@ E@@ S@@ ); assert@@ Equal@@ s(@@ 1, request@@ Stream@@ ing@@ Ser@@ vices@@ Call@@ s.@@ size@@ ()); assert@@ Equal@@ s(@@ 3@@ , request@@ Stream@@ ing@@ Ser@@ vices@@ Call@@ s.get@@ (0@@ ).@@ size@@ ()); java.util.List<@@ java.lang.String> m@@ id@@ d@@ le@@ war@@ e@@ Recei@@ v@@ ed@@ Service@@ Clas@@ se@@ s = ((@@ java.util.List<@@ java.lang.String@@ >@@ ) (@@ request@@ Stream@@ ing@@ Ser@@ vices@@ Call@@ s.get@@ (0@@ ).get@@ (@@ 2@@ ))); assert@@ Equal@@ s(@@ test@@ Class@@ es.@@ size@@ (), m@@ id@@ d@@ le@@ war@@ e@@ Recei@@ v@@ ed@@ Service@@ Class@@ es.@@ size@@ ()); }
public void test@@ W@@ ild@@ c@@ ard@@ s@@ Re@@ jec@@ ted@@ For@@ Ip@@ Address@@ () { assert@@ False@@ (@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ("@@ 1.@@ 2.@@ 3@@ .@@ 4@@ ", new libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ St@@ ub@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ ("@@ c@@ n@@ =@@ *@@ .@@ 2.@@ 3@@ .@@ 4@@ "@@ ))); assert@@ False@@ (@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ("@@ 1.@@ 2.@@ 3@@ .@@ 4@@ ", new libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ St@@ ub@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ ("@@ c@@ n@@ =@@ *@@ .@@ 2.@@ 3@@ .@@ 4@@ ").@@ add@@ Sub@@ ject@@ Al@@ ter@@ native@@ Name@@ (@@ libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ AL@@ T_@@ IP@@ A@@ _N@@ AME@@ , "@@ *@@ .@@ 2.@@ 3@@ .@@ 4@@ ").@@ add@@ Sub@@ ject@@ Al@@ ter@@ native@@ Name@@ (@@ libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ AL@@ T_@@ D@@ N@@ S@@ _N@@ AME@@ , "@@ *@@ .@@ 2.@@ 3@@ .@@ 4@@ "@@ ))); assert@@ False@@ (@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ("@@ 2@@ 00@@ 1@@ :@@ 12@@ 3@@ 4@@ :@@ :@@ :@@ 1@@ ", new libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ St@@ ub@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ ("@@ c@@ n@@ =@@ *@@ :@@ 12@@ 3@@ 4@@ :@@ :@@ 1@@ "@@ ))); assert@@ False@@ (@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ("@@ 2@@ 00@@ 1@@ :@@ 12@@ 3@@ 4@@ :@@ :@@ :@@ 1@@ ", new libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ St@@ ub@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ ("@@ c@@ n@@ =@@ *@@ :@@ 12@@ 3@@ 4@@ :@@ 1@@ ").@@ add@@ Sub@@ ject@@ Al@@ ter@@ native@@ Name@@ (@@ libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ AL@@ T_@@ IP@@ A@@ _N@@ AME@@ , "@@ *@@ :@@ 12@@ 3@@ 4@@ :@@ 1@@ ").@@ add@@ Sub@@ ject@@ Al@@ ter@@ native@@ Name@@ (@@ libcore.@@ javax.net.ssl.@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ Test.@@ AL@@ T_@@ D@@ N@@ S@@ _N@@ AME@@ , "@@ *@@ :@@ 12@@ 3@@ 4@@ :@@ 1@@ "@@ ))); }
@java.lang.Override public javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s get@@ Hand@@ sh@@ ake@@ Status@@ () { synchronized@@ (@@ state@@ Lock) { switch (@@ eng@@ ine@@ State@@ ) { case H@@ AN@@ D@@ S@@ H@@ A@@ K@@ E_@@ W@@ AN@@ TE@@ D : if (get@@ U@@ se@@ Client@@ Mode@@ ()) { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NE@@ ED@@ _@@ W@@ R@@ AP@@ ; } else { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NE@@ ED@@ _@@ UN@@ W@@ R@@ AP@@ ; } case H@@ AN@@ D@@ S@@ H@@ A@@ K@@ E_@@ STA@@ R@@ TE@@ D : if ((@@ hand@@ sh@@ ake@@ S@@ in@@ k.@@ ava@@ il@@ able@@ ()) > 0) { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NE@@ ED@@ _@@ W@@ R@@ AP@@ ; } else { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NE@@ ED@@ _@@ UN@@ W@@ R@@ AP@@ ; } case H@@ AN@@ D@@ S@@ H@@ A@@ K@@ E_@@ C@@ O@@ M@@ P@@ LE@@ TE@@ D : if ((@@ hand@@ sh@@ ake@@ S@@ in@@ k.@@ ava@@ il@@ able@@ ()) == 0) { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NO@@ T_@@ H@@ AN@@ D@@ S@@ H@@ A@@ K@@ ING@@ ; } else { return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NE@@ ED@@ _@@ W@@ R@@ AP@@ ; } case NE@@ W : case M@@ OD@@ E_@@ SE@@ T : case C@@ LO@@ SE@@ D : case RE@@ AD@@ Y : case RE@@ AD@@ Y_@@ H@@ AN@@ D@@ S@@ H@@ A@@ K@@ E_@@ C@@ U@@ T_@@ TH@@ RO@@ U@@ G@@ H : return javax.net.ssl.@@ SSL@@ En@@ g@@ ine@@ Res@@ ult.@@ Hand@@ sh@@ ake@@ Statu@@ s.@@ NO@@ T_@@ H@@ AN@@ D@@ S@@ H@@ A@@ K@@ ING@@ ; default : break@@ ; } throw new java.lang.Illegal@@ State@@ Exception(("@@ U@@ ne@@ x@@ pec@@ ted eng@@ in@@ e state@@ : " + (@@ eng@@ ine@@ State@@ ))); } }
public java.lang.String get@@ Host@@ Ex@@ ec@@ uti@@ on@@ Flag@@ s() { return java.lang.String@@ .@@ for@@ mat@@ ("@@ -@@ X@@ n@@ ore@@ lo@@ cat@@ e -@@ X@@ im@@ age@@ :@@ %@@ s", get@@ Host@@ P@@ IC@@ C@@ ore@@ Image@@ Path@@ ()); }
@java.lang.Override public int get@@ Stream@@ ing@@ Ser@@ vices@@ (java.lang.String app@@ Name, int sub@@ s@@ cription@@ Id, java.util.List<@@ java.lang.String> service@@ Class@@ es) throw@@ s android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Exception { return 0; }
public com.android.builder.@@ Default@@ Build@@ Type in@@ it@@ With@@ (com.android.@@ builder.@@ Default@@ Build@@ Type th@@ at@@ ) { _@@ in@@ it@@ With@@ (@@ th@@ at@@ ); set@@ Debug@@ g@@ able@@ (@@ th@@ at@@ .is@@ Debug@@ g@@ able@@ ()); set@@ J@@ n@@ i@@ Debug@@ Build@@ (@@ th@@ at@@ .is@@ J@@ n@@ i@@ Debug@@ Build@@ ()); set@@ Render@@ script@@ Debug@@ Build@@ (@@ th@@ at@@ .is@@ Render@@ script@@ Debug@@ Build@@ ()); set@@ Render@@ script@@ O@@ pti@@ m@@ Level@@ (@@ th@@ at@@ .get@@ Render@@ script@@ O@@ pti@@ m@@ Level@@ ()); set@@ Package@@ Name@@ Su@@ f@@ fix@@ (@@ th@@ at@@ .get@@ Package@@ Name@@ Su@@ f@@ fix@@ ()); set@@ Version@@ Name@@ Su@@ f@@ fix@@ (@@ th@@ at@@ .get@@ Version@@ Name@@ Su@@ f@@ fix@@ ()); set@@ Run@@ Pro@@ gu@@ ard@@ (@@ th@@ at@@ .is@@ Run@@ Pro@@ gu@@ ard@@ ()); set@@ Zip@@ A@@ li@@ gn@@ (@@ th@@ at@@ .is@@ Zip@@ A@@ li@@ gn@@ ()); set@@ Sign@@ ing@@ Config@@ (@@ th@@ at@@ .get@@ Sign@@ ing@@ Config@@ ()); set@@ Pro@@ gu@@ ard@@ R@@ ul@@ es(@@ th@@ at@@ .get@@ Pro@@ gu@@ ard@@ R@@ ul@@ es@@ ()); return this@@ ; }
com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ S@@ c@@ ale@@ Info get@@ Ver@@ ti@@ cal@@ Tr@@ an@@ s@@ for@@ m@@ () { return m@@ Can@@ va@@ s.@@ cont@@ ro@@ l@@ To@@ Lay@@ out@@ (@@ this@@ ); }
public void test@@ D@@ up@@ li@@ cate@@ En@@ tri@@ es@@ () throw@@ s java.lang.Exception { java.lang.String name@@ 1 = "@@ test_@@ file@@ _@@ name@@ 1@@ "; java.lang.String name@@ 2 = "@@ test_@@ file@@ _@@ name@@ 2@@ "; java.io.@@ ByteArray@@ Output@@ Stream b@@ a@@ o@@ s = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); java.util.@@ z@@ i@@ p.@@ Zip@@ Output@@ Stream out = new java.util.@@ z@@ i@@ p.@@ Zip@@ Output@@ Stream@@ (b@@ a@@ o@@ s); out.@@ put@@ Next@@ E@@ n@@ try@@ (@@ new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ (@@ name@@ 2@@ )); byte@@ [] byte@@ s; byte@@ s = "@@ b@@ ad@@ "@@ .get@@ Bytes@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ UT@@ F@@ -@@ 8@@ ")); int b@@ ad@@ Siz@@ e = byte@@ s.@@ length@@ ; out.@@ write@@ (@@ byte@@ s); out.@@ close@@ E@@ n@@ try@@ (); out.@@ put@@ Next@@ E@@ n@@ try@@ (@@ new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ (@@ name@@ 1@@ )); byte@@ s = "@@ g@@ oo@@ d@@ "@@ .get@@ Bytes@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ UT@@ F@@ -@@ 8@@ ")); int g@@ oo@@ d@@ Siz@@ e = byte@@ s.@@ length@@ ; out.@@ write@@ (@@ byte@@ s); out.@@ close@@ E@@ n@@ try@@ (); out.@@ close(); byte@@ [] buff@@ er = b@@ a@@ os.@@ to@@ ByteArray@@ (); libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ Test.@@ re@@ pla@@ ce@@ Bytes@@ (@@ buff@@ er, name@@ 2@@ .get@@ Bytes@@ (), name@@ 1@@ .get@@ Bytes@@ ()); java.io.File b@@ ad@@ Z@@ i@@ p = create@@ Temp@@ or@@ ary@@ Zip@@ File@@ (); libcore.@@ java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ Test.@@ write@@ Bytes@@ (b@@ ad@@ Zip@@ , buff@@ er@@ ); try { java.util.@@ z@@ i@@ p.@@ Zip@@ File b@@ ad = new java.util.@@ z@@ i@@ p.@@ Zip@@ File@@ (b@@ ad@@ Zip@@ ); java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try e@@ n@@ try = b@@ ad@@ .get@@ E@@ n@@ try@@ (@@ name@@ 1); if (e@@ n@@ try == null@@ ) { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ("@@ get@@ E@@ n@@ try return@@ s n@@ o e@@ n@@ try@@ "); } else { long e@@ n@@ try@@ Siz@@ e = e@@ n@@ try@@ .get@@ Size@@ (); if (e@@ n@@ try@@ Siz@@ e == b@@ ad@@ Siz@@ e) { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ("@@ get@@ E@@ n@@ try return@@ s th@@ e fi@@ r@@ s@@ t e@@ n@@ try i@@ t find@@ s@@ "); } else if (e@@ n@@ try@@ Siz@@ e == g@@ oo@@ d@@ Siz@@ e) { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ("@@ get@@ E@@ n@@ try return@@ s th@@ e sec@@ on@@ d e@@ n@@ try i@@ t find@@ s@@ "); } java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ (("@@ Siz@@ e is@@ : " + e@@ n@@ try@@ Size@@ )); } try { b@@ ad@@ .@@ close(); } catch (java.lang.Exception e) { } fail@@ (); } catch (java.util.@@ z@@ i@@ p.@@ Zip@@ Exception expected@@ ) { } }
public boolean can@@ cel@@ () { synchronized@@ (@@ can@@ ce@@ lle@@ d@@ ) { if (@@ can@@ ce@@ lle@@ d@@ [0@@ ]@@ ) return false@@ ; can@@ ce@@ lle@@ d@@ [0@@ ] = true@@ ; return s@@ ch@@ ed@@ ule@@ d@@ ; } }
@java.lang.Override public void st@@ op@@ () { if (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ p@@ 2@@ p.@@ P2p@@ P@@ r@@ int@@ er@@ Connection@@ .@@ TAG, "@@ st@@ op@@ ()@@ "); if ((m@@ M@@ d@@ ns@@ Dis@@ cover@@ y@@ ) != null@@ ) { m@@ M@@ d@@ ns@@ Dis@@ cover@@ y.@@ st@@ op@@ (); if ((m@@ M@@ d@@ ns@@ Dis@@ cover@@ y@@ Time@@ out@@ ) != null@@ ) { m@@ M@@ d@@ ns@@ Dis@@ cover@@ y@@ Time@@ out.@@ can@@ cel@@ (); } m@@ Connection@@ Listen@@ er = null@@ ; }
private void check@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 7@@ 4@@ 1@@ 4@@ 2@@ 7@@ 4@@ 4@@ 4@@ 4@@ 2@@ 7@@ 4@@ 2@@ 9@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 32, 2, -@@ 7@@ 4@@ 2@@ 1@@ 4@@ 2@@ 7@@ 4@@ 2@@ 9@@ 4@@ 2@@ 1@@ 4@@ 2@@ 7@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ L@@ dex@@ p@@ Float2@@ Int@@ 2@@ Float2@@ : " + (e.toString()))); } }
public void set@@ C@@ ro@@ ss@@ h@@ a@@ ir@@ Location@@ (@@ int x@@ , int y@@ ) { synchronized@@ (@@ this@@ ) { c@@ ro@@ ss@@ h@@ a@@ ir@@ Loc@@ ation = new org.eclipse.swt.@@ g@@ raphic@@ s.@@ P@@ o@@ int@@ (@@ x@@ , y@@ ); } not@@ if@@ y@@ C@@ ro@@ ss@@ h@@ a@@ ir@@ Mo@@ v@@ ed@@ (); }
@java.lang.Override public void ac@@ ce@@ p@@ t@@ (@@ int result@@ ) { if (@@ result == (android.@@ app.@@ Ac@@ tivity.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ )) { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } else { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } else { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } else { log@@ Fail@@ (); statu@@ s = FA@@ IL@@ ; } }
public static int throw@@ On@@ Error@@ (@@ int error@@ Flag@@ ) throw@@ s android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ le@@ g@@ ac@@ y.@@ Le@@ g@@ ac@@ y@@ Exception@@ Utils.@@ Buffer@@ Q@@ ue@@ ue@@ Ab@@ an@@ do@@ ne@@ d@@ Exception { if (@@ error@@ F@@ la@@ g == (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ uti@@ ls.@@ C@@ am@@ er@@ a@@ Bin@@ der@@ De@@ cor@@ ator@@ .@@ NO@@ _@@ ER@@ R@@ OR@@ )) { return android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ uti@@ ls.@@ C@@ am@@ er@@ a@@ Bin@@ der@@ De@@ cor@@ ator@@ .@@ NO@@ _@@ ER@@ R@@ OR@@ ; } else if (@@ error@@ F@@ la@@ g == (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ uti@@ ls.@@ C@@ am@@ er@@ a@@ Bin@@ der@@ De@@ cor@@ ator@@ .@@ EN@@ O@@ DE@@ V@@ )) { throw new android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ le@@ g@@ ac@@ y.@@ Le@@ g@@ ac@@ y@@ Exception@@ Utils.@@ Buffer@@ Q@@ ue@@ ue@@ ue@@ Ab@@ an@@ do@@ ne@@ d@@ Exception@@ (); } if (@@ error@@ F@@ la@@ g < 0) { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception(("@@ Un@@ k@@ no@@ w@@ n er@@ ror " + error@@ Flag@@ )); } return error@@ Flag@@ ; }
public org.conscrypt.@@ Open@@ SSL@@ X@@ 509@@ Cer@@ t@@ if@@ i@@ cat@@ e de@@ lete@@ Ex@@ t@@ ension@@ (java.lang.String o@@ id@@ ) { long co@@ p@@ y = org.conscrypt.@@ NativeCryp@@ to.@@ X@@ 509@@ _@@ d@@ up@@ (m@@ Context@@ ); org.conscrypt.@@ NativeCryp@@ to.@@ X@@ 509@@ _@@ de@@ lete@@ _@@ ext@@ (@@ copy@@ , o@@ id@@ ); return new org.conscrypt.@@ Open@@ SSL@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ (@@ copy@@ ); }
@java.lang.Override public java.@@ m@@ ath.@@ B@@ ig@@ Integ@@ er get@@ Ser@@ ial@@ Number@@ () { return null@@ ; }
@java.lang.Override public boolean s@@ ati@@ s@@ fi@@ ed@@ By@@ (android.net.@@ Network@@ S@@ pe@@ c@@ if@@ i@@ er o@@ th@@ er@@ ) { boolean mat@@ ch = equals(@@ o@@ th@@ er@@ ); if (m@@ atch@@ ) { if ((@@ (!(@@ uid@@ Of@@ Call@@ er@@ Valid@@ )) || (!(@@ uid@@ Of@@ Client@@ Valid@@ ))) || ((@@ uid@@ Of@@ Call@@ er@@ ) != (@@ uid@@ Of@@ Client@@ ))) { android.util.Log.e@@ ("@@ W@@ if@@ i@@ A@@ war@@ e@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ ", "@@ s@@ ati@@ s@@ fi@@ ed@@ By@@ : mis@@ mat@@ ch of call@@ ing U@@ ID@@ !@@ ?@@ "); return false@@ ; } } return match@@ ; }
private void load@@ S@@ am@@ pl@@ es@@ For@@ Target@@ (com.android.s@@ dklib.@@ I@@ Android@@ T@@ arg@@ et target@@ ) { java.lang.String old@@ C@@ ho@@ ic@@ e = null@@ ; if ((m@@ S@@ am@@ pl@@ es@@ Path@@ s.@@ size@@ ()) > 0) { int se@@ l@@ In@@ dex = m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .get@@ Selection@@ Index@@ (); if (@@ se@@ l@@ In@@ dex > (-1@@ )) { old@@ C@@ ho@@ ic@@ e = m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .get@@ Item@@ (@@ se@@ l@@ Index@@ ); } } m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .@@ remove@@ All@@ (); m@@ S@@ am@@ pl@@ es@@ Path@@ s.@@ clear@@ (); if (t@@ arg@@ et != null@@ ) { java.lang.String s@@ am@@ pl@@ es@@ Root@@ P@@ ath = target@@ .get@@ Path@@ (@@ I@@ Android@@ Target@@ .@@ S@@ AM@@ P@@ LE@@ S@@ ); java.io.File s@@ am@@ pl@@ es@@ Di@@ r = new java.io.File@@ (s@@ am@@ pl@@ es@@ Root@@ Path@@ ); find@@ S@@ am@@ pl@@ es@@ M@@ an@@ if@@ est@@ s(@@ s@@ am@@ pl@@ es@@ Dir@@ , m@@ S@@ am@@ pl@@ es@@ Path@@ s); if ((m@@ S@@ am@@ pl@@ es@@ Path@@ s.@@ size@@ ()) == 0) { m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .add@@ ("@@ Th@@ is t@@ arg@@ et h@@ a@@ s n@@ o s@@ am@@ pl@@ es@@ . P@@ le@@ as@@ e sele@@ c@@ t an@@ o@@ th@@ er target@@ .@@ "); m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .@@ sele@@ ct@@ (@@ 0); return@@ ; } int se@@ l@@ In@@ dex = 0; int i = 0; int n = s@@ am@@ pl@@ es@@ Root@@ Path@@ .@@ length@@ (); java.util.@@ Set@@ <java.lang.String@@ > path@@ s = new java.util.@@ T@@ re@@ e@@ Set@@ <java.lang.String@@ >(); for (java.lang.String p@@ ath : m@@ S@@ am@@ pl@@ es@@ Path@@ s) { if ((@@ path@@ .@@ length@@ ()) > n@@ ) { p@@ ath = path@@ .@@ sub@@ string@@ (@@ n@@ ); if ((@@ path@@ .@@ char@@ At@@ (0@@ )) == (@@ java.io.File@@ .@@ se@@ par@@ ator@@ Char@@ )) { p@@ ath = path@@ .@@ sub@@ string@@ (1@@ ); } if (p@@ ath.@@ end@@ s@@ With@@ (@@ java.io.File@@ .@@ se@@ par@@ ator@@ )) { p@@ ath = path@@ .@@ sub@@ string@@ (@@ 0, ((@@ path@@ .@@ length@@ ()) - 1@@ )); } p@@ ath = path@@ .@@ re@@ pla@@ ce@@ All@@ (java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ qu@@ o@@ te@@ (@@ java.io.File@@ .@@ se@@ par@@ ator@@ ), " > "); } if ((@@ old@@ C@@ ho@@ ic@@ e != null@@ ) && (@@ old@@ C@@ ho@@ i@@ ce.@@ equals(@@ path@@ ))) { se@@ l@@ In@@ dex = i@@ ; } path@@ s.add@@ (p@@ ath@@ ); i@@ ++@@ ; } m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .set@@ Item@@ s(@@ path@@ s.@@ to@@ Array@@ (@@ new java.lang.String@@ [0@@ ]@@ )); m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .@@ sele@@ ct@@ (@@ se@@ l@@ Index@@ ); } else { m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .add@@ ("@@ P@@ le@@ as@@ e sele@@ c@@ t a target@@ .@@ "); m@@ S@@ am@@ pl@@ es@@ Com@@ bo@@ .@@ sele@@ ct@@ (@@ 0); } } }
@java.lang.Override public boolean for@@ ce@@ Ref@@ res@@ h@@ () { if ("@@ "@@ .@@ equal@@ s@@ (m@@ Server@@ )) { return false@@ ; } if (android.@@ util.@@ N@@ t@@ p@@ Tr@@ us@@ ted@@ Tim@@ e.@@ LOG@@ D@@ ) android.util.Log.d@@ (android.@@ util.@@ N@@ t@@ p@@ Tr@@ us@@ ted@@ Tim@@ e.@@ TAG, "@@ for@@ ce@@ Ref@@ res@@ h@@ () f@@ ro@@ m c@@ ach@@ e mis@@ s@@ "); final android.net.@@ S@@ n@@ t@@ p@@ C@@ li@@ ent c@@ li@@ ent = new android.net.@@ S@@ n@@ t@@ p@@ Client@@ (); if (c@@ li@@ ent.@@ request@@ Time@@ (m@@ Server@@ , (@@ int@@ ) (m@@ Time@@ out@@ )@@ ))) { m@@ Has@@ Cach@@ e = true@@ ; mC@@ ach@@ ed@@ N@@ t@@ p@@ Tim@@ e = c@@ li@@ ent.get@@ N@@ t@@ p@@ Time@@ (); mC@@ ach@@ ed@@ N@@ t@@ p@@ E@@ l@@ ap@@ sed@@ Re@@ al@@ tim@@ e = c@@ li@@ ent.get@@ N@@ t@@ p@@ Time@@ Reference@@ (); mC@@ ach@@ ed@@ N@@ t@@ p@@ Cer@@ t@@ a@@ int@@ y = (c@@ li@@ ent.get@@ R@@ ound@@ T@@ ri@@ p@@ Time@@ ()) / 2@@ ; return true@@ ; } else { return false@@ ; } }
public void do@@ Imp@@ ort@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ S@@ es@@ sion session@@ ) throw@@ s com.android.jack.@@ back@@ end@@ .@@ ja@@ y@@ ce.@@ Imp@@ ort@@ Con@@ f@@ li@@ ct@@ Exception, com.android.jack.ir.ast.J@@ Package@@ Loo@@ k@@ up@@ Exception, com.android.jack.ir.ast.J@@ Type@@ Loo@@ k@@ up@@ Exception { for (com.android.jack.@@ library.@@ Input@@ Librar@@ y input@@ Librar@@ y : input@@ Librar@@ i@@ es) { com.android.sched.vfs.@@ Input@@ Root@@ V@@ Di@@ r librar@@ y@@ V@@ Di@@ r = input@@ Library@@ .get@@ Input@@ V@@ Dir@@ (); com.android.jack.@@ back@@ end@@ .@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ File@@ Imp@@ ort@@ er.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E, "@@ Imp@@ ort@@ ing {@@ 0@@ }@@ ", librar@@ y@@ V@@ Dir@@ .get@@ Location@@ ().get@@ Des@@ cription@@ ()); for (com.android.s@@ ched.@@ vfs.@@ Input@@ V@@ Elem@@ ent sub@@ File : librar@@ y@@ V@@ Dir@@ .@@ list@@ ()) { import@@ J@@ ay@@ ce@@ File@@ (in@@ put@@ Library@@ , sub@@ File@@ , session@@ , "@@ "); } } }
@java.lang.Override public boolean is@@ Test@@ Co@@ ver@@ age@@ Enabled@@ () { return m@@ Test@@ Co@@ ver@@ age@@ Enabled@@ ; }
private void al@@ low@@ Ap@@ ps@@ Control@@ () { android.content.@@ Int@@ ent al@@ low@@ Ap@@ ps@@ Control@@ Int@@ ent = new android.content.@@ Intent@@ (@@ By@@ o@@ d@@ Hel@@ per@@ Ac@@ tivity.@@ AC@@ TION@@ _RE@@ SE@@ T_@@ US@@ ER@@ _RE@@ S@@ TR@@ IC@@ TION@@ ).@@ put@@ Extra@@ (@@ By@@ o@@ d@@ Hel@@ per@@ Ac@@ tivity.@@ EX@@ TR@@ A@@ _P@@ AR@@ AME@@ TER@@ _@@ 1, User@@ Manager.@@ D@@ IS@@ AL@@ LO@@ W@@ _@@ AP@@ P@@ S@@ _C@@ ON@@ T@@ RO@@ L); start@@ Activity@@ (@@ al@@ low@@ Ap@@ ps@@ Control@@ Intent@@ ); }
private java.lang.String get@@ Sms@@ Imp@@ lement@@ ation@@ ().get@@ Sms@@ () { return get@@ Sms@@ Imp@@ lement@@ ation@@ ().get@@ Sms@@ Format@@ (); }
@java.lang.Override public void request@@ I@@ si@@ m@@ A@@ u@@ th@@ enti@@ cation@@ (java.lang.String n@@ on@@ ce@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ I@@ SI@@ M@@ _@@ A@@ UT@@ H@@ EN@@ TI@@ C@@ A@@ TION@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " n@@ on@@ ce = ") + n@@ on@@ ce@@ )); } try { radioProx@@ y.@@ request@@ I@@ si@@ m@@ A@@ u@@ th@@ enti@@ cation@@ (rr@@ .m@@ Ser@@ ial@@ , con@@ ver@@ t@@ Null@@ To@@ Empty@@ String(@@ n@@ on@@ ce@@ )); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ request@@ I@@ si@@ m@@ A@@ u@@ th@@ enti@@ cation@@ ", e); } } }
public void exec@@ ute@@ (@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Elem@@ ent e@@ lement@@ ) { render@@ Class@@ es@@ (e@@ lement@@ ); }
private void for@@ mat@@ Inter@@ nal@@ (java.lang.String p@@ attern@@ , libcore.@@ util.@@ Zone@@ Info.@@ W@@ all@@ Tim@@ e w@@ all@@ Time@@ , libcore.@@ util.@@ Zone@@ Info z@@ one@@ Info@@ ) { byte@@ [] byte@@ s = p@@ attern@@ .get@@ Bytes@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); if (@@ byte@@ s.@@ length) == 0) { return@@ ; } java.nio.Byte@@ Buff@@ er for@@ mat@@ Buff@@ er = java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (@@ byte@@ s); while (@@ for@@ mat@@ Buff@@ er.@@ re@@ main@@ ing@@ ()) > 0) { boolean output@@ Current@@ By@@ t@@ e = true@@ ; byte current@@ By@@ t@@ e = for@@ mat@@ Buff@@ er.get@@ (@@ for@@ mat@@ Buff@@ er.@@ posi@@ tion@@ ()); if (c@@ urrent@@ By@@ t@@ e == '@@ %@@ '@@ ) { output@@ Current@@ By@@ t@@ e = handle@@ To@@ k@@ en@@ (@@ for@@ mat@@ Buffer@@ , w@@ all@@ Time@@ , z@@ one@@ Info@@ ); } if (@@ output@@ Current@@ Byte@@ ) { output@@ Byte@@ (@@ for@@ mat@@ Buff@@ er.get@@ (@@ for@@ mat@@ Buff@@ er.@@ posi@@ tion@@ ())); } for@@ mat@@ Buff@@ er.@@ posi@@ tion@@ ((@@ (@@ for@@ mat@@ Buff@@ er.@@ posi@@ tion@@ ()) + 1@@ )); } }
private static java.util.@@ Local@@ e in@@ it@@ Default@@ (java.util.@@ Loc@@ a@@ le.@@ C@@ ate@@ gor@@ y cate@@ gor@@ y@@ ) { return java.util.@@ Loc@@ ale@@ .get@@ Instance@@ (java.lang.@@ System@@ .get@@ Property@@ (c@@ ate@@ gor@@ y.@@ lan@@ gu@@ age@@ Key@@ , java.util.@@ Loc@@ a@@ le.@@ No@@ Image@@ Pre@@ load@@ H@@ ol@@ der@@ .@@ default@@ Loc@@ ale@@ .get@@ L@@ an@@ gu@@ age@@ ()@@ ), java.lang.@@ System@@ .get@@ Property@@ (c@@ ate@@ gor@@ y.@@ script@@ Key@@ , java.util.@@ Loc@@ a@@ le.@@ No@@ Image@@ Pre@@ load@@ H@@ ol@@ der@@ .@@ default@@ Loc@@ ale@@ .get@@ Script@@ ()@@ ), java.lang.@@ System@@ .get@@ Property@@ (c@@ ate@@ gor@@ y.@@ co@@ u@@ n@@ try@@ Key@@ , java.util.@@ Loc@@ a@@ le.@@ No@@ Image@@ Pre@@ load@@ H@@ ol@@ der@@ .@@ default@@ Loc@@ ale@@ .get@@ Co@@ u@@ n@@ try@@ ()@@ ), java.lang.@@ System@@ .get@@ Property@@ (c@@ ate@@ gor@@ y.@@ vari@@ ant@@ Key@@ , java.util.@@ Loc@@ a@@ le.@@ No@@ Image@@ Pre@@ load@@ H@@ ol@@ der@@ .@@ default@@ Loc@@ ale@@ .get@@ Variant@@ ()@@ ), null@@ ); }
public void add@@ F@@ 6@@ 4@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ D@@ ouble@@ 3 v@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { m@@ N@@ .add@@ F@@ 6@@ 4@@ (@@ new android.renderscript.@@ D@@ ouble@@ 3@@ (@@ v@@ .@@ x@@ , v@@ .@@ y@@ , v@@ .@@ z@@ )); return@@ ; } add@@ F@@ 6@@ 4@@ (@@ v@@ .@@ x@@ ); add@@ F@@ 6@@ 4@@ (@@ v@@ .@@ y@@ ); add@@ F@@ 6@@ 4@@ (@@ v@@ .@@ z@@ ); }
private void process@@ New@@ Resource@@ File@@ (@@ java.io.File source@@ Folder@@ , com.android.ide.common.@@ res@@ 2.@@ Resource@@ File resource@@ File@@ ) throw@@ s com.android.ide.common.@@ res@@ 2.@@ Merg@@ ing@@ Exception { if (@@ resource@@ File != null@@ ) { if ((@@ resource@@ File@@ .get@@ Type@@ ()) == (@@ Data@@ File@@ .@@ File@@ Type.@@ G@@ EN@@ ER@@ A@@ TED@@ _@@ F@@ IL@@ E@@ S@@ )) { m@@ Gener@@ ated@@ Set@@ .@@ process@@ New@@ Data@@ File@@ (s@@ ource@@ Folder@@ , resource@@ File@@ , true@@ ); } else { process@@ New@@ Data@@ File@@ (s@@ ource@@ Folder@@ , resource@@ File@@ , true@@ ); } }
private void check@@ Length@@ Float4@@ Float@@ () { android.renderscript.Allocation in@@ V = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 3@@ 3@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Length@@ Float4@@ Float@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Length@@ Float4@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Length@@ Float4Float4@@ (in@@ V@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Length@@ Float4Float4@@ : " + (e.toString()))); } }
public android.@@ bluetooth.@@ le.@@ Ad@@ verti@@ sing@@ Set@@ Parameter@@ s.@@ Builder set@@ In@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ (@@ boolean in@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ ) { m@@ In@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er = in@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ ; return this@@ ; }
public void test@@ 2@@ () throw@@ s java.lang.Exception { m@@ Enable@@ d = com.google.common.@@ colle@@ ct.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (@@ P@@ l@@ ur@@ al@@ s@@ D@@ et@@ ec@@ tor.@@ M@@ I@@ SS@@ ING@@ , P@@ l@@ ur@@ al@@ s@@ D@@ et@@ ec@@ tor.@@ EX@@ TR@@ A@@ ); assert@@ Equal@@ s@@ (("@@ " + ((((@@ ((((@@ ("@@ res@@ /@@ valu@@ es@@ -@@ c@@ s@@ /@@ pl@@ ur@@ al@@ s@@ 3@@ .@@ xml@@ :@@ 3@@ : Error@@ : F@@ or local@@ e \"@@ c@@ s@@ \@@ " (@@ C@@ z@@ ec@@ h@@ ) th@@ e fo@@ l@@ low@@ ing qu@@ an@@ ti@@ es sho@@ ul@@ d al@@ s@@ o b@@ e de@@ fin@@ ed@@ : f@@ ew@@ , man@@ y [@@ M@@ is@@ sing@@ Q@@ u@@ an@@ ti@@ ty@@ ]@@ \n@@ " + " <@@ pl@@ ur@@ al@@ s name@@ =@@ \"@@ d@@ ra@@ f@@ t@@ \"@@ >@@ \n") + " ^@@ \n") + "@@ res@@ /@@ valu@@ es@@ -@@ z@@ h@@ -@@ r@@ C@@ N@@ /@@ pl@@ ur@@ al@@ s@@ 3@@ .@@ xml@@ :@@ 3@@ : W@@ ar@@ n@@ ing@@ : F@@ or lan@@ gu@@ age \"@@ z@@ h@@ \@@ " (@@ Ch@@ in@@ es@@ e) th@@ e fo@@ l@@ low@@ ing qu@@ an@@ ti@@ es ar@@ e not re@@ le@@ v@@ ant@@ : on@@ e [@@ Un@@ us@@ ed@@ Q@@ u@@ an@@ ti@@ ty@@ ]@@ \n") + " <@@ pl@@ ur@@ al@@ s name@@ =@@ \"@@ d@@ ra@@ f@@ t@@ \"@@ >@@ \n") + " ^@@ \n") + "@@ res@@ /@@ valu@@ es@@ -@@ z@@ h@@ -@@ r@@ C@@ N@@ /@@ pl@@ ur@@ al@@ s@@ 3@@ .@@ xml@@ :@@ 7@@ : W@@ ar@@ n@@ ing@@ : F@@ or lan@@ gu@@ age \"@@ z@@ h@@ \@@ " (@@ Ch@@ in@@ es@@ e) th@@ e fo@@ l@@ low@@ ing qu@@ an@@ ti@@ es ar@@ e not re@@ le@@ v@@ ant@@ : on@@ e [@@ Un@@ us@@ ed@@ Q@@ u@@ an@@ ti@@ ty@@ ]@@ \n") + " <@@ pl@@ ur@@ al@@ s name@@ =@@ \"@@ ti@@ t@@ le@@ _@@ d@@ ay@@ _@@ di@@ alo@@ g@@ _@@ cont@@ ent@@ \"@@ >@@ \n") + " ^@@ \n") + "@@ 1 error@@ s, 2 war@@ n@@ ing@@ s@@ \n@@ "@@ )), l@@ int@@ Project@@ ("@@ res@@ /@@ valu@@ es@@ -@@ z@@ h@@ -@@ r@@ C@@ N@@ /@@ pl@@ ur@@ al@@ s@@ 3@@ .@@ xml@@ ", "@@ res@@ /@@ valu@@ es@@ -@@ c@@ s@@ /@@ pl@@ ur@@ al@@ s@@ 3@@ .@@ xml@@ ")); }
private void update@@ Device@@ Pre@@ f@@ () { if ((m@@ Th@@ is@@ Device@@ ) != null@@ ) { if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (m@@ Th@@ is@@ Device.@@ device@@ Name@@ )) { m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ T@@ it@@ le@@ (m@@ Th@@ is@@ Device.@@ device@@ Addres@@ s); } else { m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ T@@ it@@ le@@ (m@@ Th@@ is@@ Device.@@ device@@ Name); } java.lang.String[] stat@@ us@@ Ar@@ ra@@ y = get@@ Res@@ ources@@ ().get@@ String@@ Array@@ (@@ R.@@ ar@@ ra@@ y.@@ w@@ if@@ i@@ _@@ p@@ 2@@ p@@ _@@ stat@@ us@@ ); java.lang.String@@ Buff@@ er s@@ b = new java.lang.String@@ Buffer@@ (); sb.@@ append(@@ stat@@ us@@ Array@@ [@@ m@@ Th@@ is@@ Device.@@ stat@@ us@@ ]@@ ); if ((@@ (m@@ Connec@@ ted@@ Gro@@ up@@ ) != null@@ ) && (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (m@@ Connec@@ ted@@ Gro@@ up@@ .get@@ Network@@ Name@@ ()@@ )@@ ))) { sb.@@ append("@@ ("@@ ); sb.@@ append@@ (m@@ Connec@@ ted@@ Gro@@ up@@ .get@@ Network@@ Name@@ ()); sb.@@ append("@@ )@@ "); } m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ S@@ um@@ m@@ ary@@ (s@@ b.@@ toString@@ ()); m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ Per@@ si@@ st@@ ent@@ (@@ false@@ ); m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ Enabled@@ (@@ true@@ ); m@@ Th@@ is@@ Device@@ Pre@@ f@@ .set@@ Sele@@ ct@@ able@@ (@@ false@@ ); } }
@java.lang.Override public android.net.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Network@@ S@@ pe@@ c@@ if@@ i@@ er create@@ From@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l in@@ ) { android.net.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Network@@ S@@ pe@@ c@@ if@@ i@@ er n@@ s = new android.net.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ (); n@@ s.@@ typ@@ e = in@@ .@@ read@@ Int@@ (); n@@ s.@@ ro@@ le = in@@ .@@ read@@ Int@@ (); n@@ s.@@ c@@ lient@@ Id = in@@ .@@ read@@ Int@@ (); n@@ s.@@ session@@ Id = in@@ .@@ read@@ Int@@ (); n@@ s.@@ pe@@ er@@ Id = in@@ .@@ read@@ Int@@ (); n@@ s.@@ pe@@ er@@ Ma@@ c = in@@ .@@ create@@ ByteArray@@ (); n@@ s.@@ p@@ m@@ k = in@@ .@@ create@@ ByteArray@@ (); n@@ s.@@ p@@ ass@@ p@@ h@@ r@@ as@@ e = in@@ .@@ read@@ String@@ (); return ns@@ ; }
public void test_@@ hand@@ sh@@ ake@@ _@@ fail@@ s@@ With@@ In@@ valid@@ S@@ C@@ T@@ () throw@@ s java.lang.Exception { org.conscrypt.@@ Open@@ SSL@@ Socket@@ Imp@@ l@@ Test.@@ Test@@ Connec@@ tion connec@@ tion = new org.conscrypt.@@ Open@@ SSL@@ Socket@@ Imp@@ l@@ Test.@@ Test@@ Connection@@ (@@ new java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ []{ cer@@ t, c@@ a }@@ , cer@@ t@@ Key@@ ); connection@@ .@@ c@@ lient@@ H@@ oo@@ k@@ s.@@ ct@@ V@@ er@@ if@@ ic@@ ation@@ Enable@@ d = true@@ ; connection@@ .@@ server@@ H@@ oo@@ k@@ s.@@ s@@ ct@@ T@@ L@@ S@@ Ex@@ t@@ en@@ sion = org.conscrypt.@@ Test@@ Utils.@@ read@@ Test@@ File@@ ("@@ ct@@ -@@ si@@ g@@ ne@@ d@@ -@@ tim@@ est@@ am@@ p@@ -@@ list@@ -@@ in@@ valid@@ "); try { connection@@ .@@ do@@ Hand@@ sh@@ ake@@ (); fail@@ ("@@ SSL@@ Hand@@ sh@@ ake@@ Exception not throw@@ n@@ "); } catch (java.util.@@ concurrent.@@ Ex@@ ec@@ uti@@ on@@ Exception e) { assert@@ Equal@@ s(@@ javax.net.ssl.@@ SSL@@ Hand@@ sh@@ ake@@ Exception@@ .@@ class@@ , e.get@@ C@@ au@@ se@@ ().get@@ Class@@ ()); assert@@ Equal@@ s(@@ java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception@@ .@@ class@@ , e.get@@ C@@ au@@ se@@ ().get@@ C@@ au@@ se@@ ().get@@ Class@@ ()); } }
public void test_@@ Per@@ M@@ il@@ l@@ () { java.lang.String p@@ atter@@ n = "@@ 0.@@ 00@@ \@@ u@@ 2@@ 0@@ 3@@ 0@@ "; do@@ ub@@ le num@@ b@@ er = 0.@@ 1; java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s d@@ f@@ s; android.@@ icu@@ .@@ text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s icu@@ D@@ f@@ s; java.util.@@ Local@@ e loc@@ ale@@ ; local@@ e = java.util.@@ Loc@@ a@@ le.@@ US@@ ; d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); assert@@ Equal@@ s("@@ 1@@ 00@@ .@@ 00@@ \@@ u@@ 2@@ 0@@ 3@@ 0@@ ", new java.text.@@ Dec@@ im@@ al@@ Format@@ (p@@ attern@@ , d@@ f@@ s@@ )@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); d@@ fs.@@ set@@ Per@@ M@@ il@@ l@@ (@@ '@@ ;@@ '@@ ); assert@@ Equal@@ s("@@ 1@@ 00@@ .@@ 00@@ ;@@ ", new java.text.@@ Dec@@ im@@ al@@ Format@@ (p@@ attern@@ , d@@ f@@ s@@ )@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); local@@ e = new java.util.@@ Loc@@ ale@@ ("@@ ar@@ "); icu@@ D@@ f@@ s = new android.@@ icu@@ .@@ text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); assert@@ Equal@@ s("@@ ", icu@@ D@@ f@@ s.get@@ Per@@ M@@ il@@ l@@ String@@ ()); d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); assert@@ Equal@@ s("@@ s("@@ s("@@ ", new java.text.@@ Dec@@ im@@ al@@ Format@@ (p@@ attern@@ , d@@ f@@ s@@ )@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); local@@ e = new java.util.@@ Loc@@ ale@@ ("@@ en@@ _@@ US@@ _P@@ O@@ SI@@ X@@ "); icu@@ D@@ f@@ s = new android.@@ icu@@ .@@ text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); assert@@ Equal@@ s("@@ 0@@ /@@ 00@@ ", icu@@ D@@ f@@ s.get@@ Per@@ M@@ il@@ l@@ String@@ ()); d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ loc@@ ale@@ ); assert@@ Equal@@ s("@@ 1@@ 00@@ .@@ 00@@ \@@ u@@ 2@@ 0@@ 3@@ 0@@ ", new java.text.@@ Dec@@ im@@ al@@ Format@@ (p@@ attern@@ , d@@ f@@ s@@ )@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); }
@java.lang.Override public synchronized void close@@ () throw@@ s com.android.jack.library.@@ Library@@ IO@@ Exception { if ((@@ lin@@ k@@ ed@@ Output@@ Jack@@ Lib@@ ) != null@@ ) { lin@@ k@@ ed@@ Output@@ Jack@@ Lib@@ .@@ not@@ if@@ y@@ To@@ C@@ lose@@ (); } else if (!(@@ or@@ ig@@ in@@ al@@ VF@@ S@@ .is@@ C@@ lo@@ sed@@ ())) { try { for (com.android.s@@ ched.@@ vfs.@@ Input@@ VF@@ S current@@ Sec@@ tion@@ VF@@ S : sec@@ tion@@ VF@@ S@@ .@@ valu@@ es@@ ()) { current@@ Sec@@ tion@@ VF@@ S@@ .@@ close(); } vfs.@@ close(); } catch (java.io.IOException e) { throw new com.android.jack.library.@@ Library@@ IO@@ Exception@@ (get@@ Location@@ (), e); } } }
@com.android.annotations.@@ Null@@ able public com.android.builder.@@ model.@@ Android@@ Pro@@ ject exec@@ ute@@ (@@ @com.android.annotations.NonNull java.util.List<@@ java.lang.String> arg@@ ument@@ s, @com.android.annotations.@@ Null@@ able java.io.@@ Output@@ Stream s@@ t@@ do@@ ut@@ , boolean return@@ Mode@@ l@@ , @com.android.annotations.NonNull java.lang.String.@@ .@@ . t@@ ask@@ s) { org.@@ gradle.@@ too@@ l@@ ing.@@ Project@@ Connec@@ tion connec@@ tion = get@@ Project@@ Connection@@ (); try { java.util.List<@@ java.lang.String> arg@@ s = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ ity@@ ((@@ 2 + (@@ arg@@ ument@@ s.@@ size@@ ()))); args.@@ add@@ ("@@ -@@ i@@ "); args.@@ add@@ ("@@ -@@ u@@ "); args.@@ add@@ All@@ (@@ arg@@ ument@@ s); connection@@ .@@ new@@ Build@@ ()@@ .@@ for@@ Task@@ s(@@ t@@ ask@@ s@@ ).set@@ St@@ and@@ ard@@ Output@@ (s@@ t@@ do@@ ut@@ ).@@ w@@ ith@@ Argument@@ s(@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )).@@ run@@ (); if (@@ return@@ Mode@@ l@@ ) { return connection@@ .get@@ Mode@@ l@@ (com.android.@@ builder.@@ model.@@ Android@@ Project@@ .@@ class@@ ); } } final@@ l@@ y { connection@@ .@@ close(); } return null@@ ; }
@java.lang.Override protected void _@@ in@@ it@@ With@@ (@@ @com.android.annotations.NonNull com.android.builder.@@ model.@@ Base@@ Con@@ fig th@@ at@@ ) { super@@ .@@ _@@ in@@ it@@ With@@ (@@ th@@ at@@ ); sh@@ r@@ in@@ k@@ Resource@@ s = ((@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ Build@@ Typ@@ e) (@@ th@@ at@@ )).@@ is@@ Sh@@ r@@ in@@ k@@ Res@@ ources@@ (); u@@ se@@ J@@ ac@@ k = ((@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ Build@@ Typ@@ e) (@@ th@@ at@@ )@@ ).get@@ U@@ se@@ Jack@@ (); }
public void set@@ Al@@ p@@ n@@ Pro@@ to@@ col@@ s@@ (@@ byte@@ []@@ [] pro@@ to@@ col@@ s) { this@@ .m@@ Al@@ p@@ n@@ Pro@@ to@@ col@@ s = android.net.@@ SSL@@ Cer@@ t@@ if@@ ic@@ ate@@ Socket@@ Fa@@ ctor@@ y.@@ to@@ N@@ p@@ n@@ Pro@@ to@@ col@@ s@@ List@@ (pro@@ to@@ col@@ s); }
public void test_@@ set@@ All@@ $@@ T@@ () { java.lang.String[] string@@ s = new java.lang.String@@ [@@ 3@@ ]; string@@ s@@ [0@@ ] = "@@ a@@ "; string@@ s@@ [0@@ ] = "@@ b@@ "; string@@ s@@ [0@@ ] = "@@ c@@ "; java.util.Arrays.@@ set@@ All@@ (@@ string@@ s, ( x@@ ) -@@ > "@@ a@@ " + x@@ ); assert@@ Equal@@ s("@@ a@@ 0@@ ", string@@ s@@ [0@@ ]@@ ); assert@@ Equal@@ s("@@ a@@ 1@@ ", string@@ s@@ [@@ 1@@ ]@@ ); assert@@ Equal@@ s("@@ a@@ 2@@ ", string@@ s@@ [@@ 2@@ ]@@ ); try { java.util.Arrays.@@ set@@ All@@ (@@ string@@ s, null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception e) { } }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") private void in@@ it@@ Client@@ Mod@@ ule@@ Com@@ bo@@ () { final java.lang.@@ Mod@@ ule@@ [] mo@@ du@@ le@@ s = com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ mo@@ du@@ le.@@ Mod@@ ule@@ Manager.get@@ Instance@@ (m@@ y@@ Project@@ ).get@@ Mod@@ ul@@ es@@ (); for (java.lang.@@ Mod@@ ul@@ e mo@@ d@@ ul@@ e : mo@@ d@@ ul@@ es) { final org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ android.@@ fa@@ c@@ et@@ .@@ Android@@ Fa@@ ce@@ t face@@ t = org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ android.@@ fa@@ c@@ et@@ .@@ Android@@ F@@ ac@@ et@@ .get@@ Instance@@ (m@@ o@@ du@@ le@@ ); if ((@@ face@@ t != null@@ ) && ((@@ com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ ro@@ o@@ ts.@@ Mod@@ ule@@ Root@@ Manager.get@@ Instance@@ (m@@ o@@ du@@ le@@ ).get@@ Content@@ R@@ oo@@ ts@@ ().@@ length) > 0@@ )) { java.lang.String mo@@ du@@ le@@ Name@@ L@@ ab@@ e@@ l = mo@@ du@@ le@@ .getName@@ (); if ((@@ fa@@ c@@ et@@ .get@@ M@@ an@@ if@@ est@@ ()) != null@@ ) { final java.lang.String package@@ Name = fa@@ c@@ et@@ .get@@ M@@ an@@ if@@ est@@ ().get@@ Package@@ ().get@@ Value@@ (); if (!(@@ com.google.common.@@ b@@ ase.@@ String@@ s.@@ is@@ Null@@ Or@@ Empty@@ (@@ package@@ Name@@ ))) { mo@@ du@@ le@@ Name@@ L@@ ab@@ e@@ l +@@ = java.lang.String@@ .@@ for@@ mat@@ (@@ " (@@ %@@ s@@ )@@ ", package@@ Name); } } my@@ Client@@ Mod@@ ule@@ Com@@ bo@@ .add@@ Item@@ (@@ new com.android.tools.@@ ide@@ a.@@ ui.@@ Api@@ Com@@ bo@@ B@@ o@@ x@@ Item@@ (m@@ o@@ du@@ le@@ .getName@@ (), mo@@ du@@ le@@ Name@@ L@@ ab@@ el@@ , 1, 1@@ )); } } }
public void b@@ roadcast@@ W@@ ps@@ Time@@ out@@ Event@@ (java.lang.String if@@ a@@ ce@@ ) { send@@ Message@@ (@@ if@@ a@@ ce@@ , com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Monitor@@ .@@ W@@ P@@ S_@@ TI@@ ME@@ O@@ U@@ T_@@ EVEN@@ T@@ ); }
public void add@@ Build@@ Type@@ (@@ @com.android.annotations.NonNull com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ Build@@ Type build@@ Typ@@ e) { build@@ Type.@@ in@@ it@@ (@@ sign@@ ing@@ Config@@ s.get@@ (com.android.@@ builder.@@ core.@@ Builder@@ Constants.@@ DE@@ BU@@ G@@ )); java.lang.String name = build@@ Typ@@ e.get@@ Name@@ (); com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Variant@@ Manager.@@ check@@ Name@@ (@@ name@@ , "@@ Build@@ Type@@ "); if (pro@@ duct@@ Flavor@@ s.@@ contain@@ s@@ Key@@ (@@ name@@ )) { throw new java.lang.Runtime@@ Exception("@@ Build@@ Type name@@ s can@@ not col@@ l@@ id@@ e wit@@ h Pro@@ duct@@ F@@ la@@ vo@@ r nam@@ es@@ "); } com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ api.@@ Default@@ Android@@ Source@@ Se@@ t main@@ Source@@ Se@@ t = ((@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ api.@@ Default@@ Android@@ Source@@ Set@@ ) (@@ ext@@ ension@@ .get@@ Source@@ Set@@ s@@ Cont@@ ain@@ er@@ ().@@ m@@ ay@@ be@@ Create@@ (@@ name@@ ))); com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ api.@@ Default@@ Android@@ Source@@ Se@@ t un@@ it@@ Test@@ Source@@ Se@@ t = null@@ ; if (@@ vari@@ ant@@ Fa@@ ctor@@ y.@@ has@@ Test@@ S@@ co@@ pe@@ ()) { un@@ it@@ Test@@ Source@@ Se@@ t = ((@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ api.@@ Default@@ Android@@ Source@@ Set@@ ) (@@ ext@@ ension@@ .get@@ Source@@ Set@@ s@@ Cont@@ ain@@ er@@ ().@@ m@@ ay@@ be@@ Create@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Variant@@ Manager.@@ com@@ pu@@ te@@ Source@@ Set@@ Name@@ (@@ build@@ Typ@@ e.get@@ Name@@ (), com.android.builder.@@ core.@@ Variant@@ Type.@@ UN@@ I@@ T_@@ TE@@ S@@ T@@ )))); } com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Build@@ Type@@ Data build@@ Type@@ Data = new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ Build@@ Type@@ Data@@ (@@ build@@ Type, pro@@ ject@@ , main@@ Source@@ Set@@ , un@@ it@@ Test@@ Source@@ Set@@ ); build@@ Typ@@ es.@@ put@@ (@@ name@@ , build@@ Type@@ Data@@ ); }
public int ava@@ il@@ able@@ Process@@ or@@ s() { return (@@ (@@ int@@ ) (@@ Lib@@ core.@@ os.@@ s@@ ys@@ con@@ f@@ (android.os.@@ O@@ s@@ Constants.@@ _S@@ C@@ _N@@ PRO@@ CE@@ SS@@ O@@ RS@@ _C@@ ON@@ F@@ ))); }
private static boolean run@@ Access@@ Check@@ (java.lang.String source@@ _@@ type@@ , java.lang.String target@@ _@@ type@@ , java.lang.String ob@@ j@@ _@@ class@@ , java.lang.String per@@ m@@ ) { java.lang.String s@@ _@@ us@@ r = "@@ u@@ "; java.lang.String t@@ _@@ us@@ r = "@@ u@@ "; java.lang.String s@@ _@@ ro@@ le = "@@ r@@ "; java.lang.String t@@ _@@ ro@@ le@@ ; if (@@ ob@@ j@@ _@@ class@@ .@@ equal@@ s("@@ fil@@ es@@ ystem@@ ")) { s@@ _@@ ro@@ le = "@@ ob@@ ject@@ _@@ r@@ "; t@@ _@@ ro@@ le = "@@ ob@@ ject@@ _@@ r@@ "; } else if (@@ ob@@ j@@ _@@ class@@ .@@ equal@@ s("@@ process@@ ")) { t@@ _@@ ro@@ le = "@@ r@@ "; } else { t@@ _@@ ro@@ le = "@@ ob@@ ject@@ _@@ r@@ "; } java.lang.String s@@ our@@ ce = java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ s@@ :@@ %@@ s@@ :@@ %@@ s@@ :@@ %@@ s@@ 0@@ ", s@@ _@@ us@@ r@@ , s@@ _@@ ro@@ le@@ , source@@ _@@ typ@@ e); java.lang.String t@@ arg@@ et = java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ s@@ :@@ %@@ s@@ :@@ %@@ s@@ :@@ %@@ s@@ :@@ s@@ :@@ s@@ 0@@ ", t@@ _@@ us@@ r@@ , t@@ _@@ ro@@ le@@ , target@@ _@@ typ@@ e); return android.@@ security.@@ cts.@@ SE@@ Lin@@ u@@ x@@ Test.@@ check@@ SE@@ Lin@@ u@@ x@@ Access@@ (s@@ ource@@ , target@@ , ob@@ j@@ _@@ class@@ , per@@ m@@ , "@@ "); }
public static android.system.@@ Str@@ u@@ ct@@ Time@@ va@@ l f@@ rom@@ Milli@@ s@@ (@@ long m@@ illi@@ s) { long t@@ v@@ _@@ se@@ c = m@@ illi@@ s / 1@@ 00@@ 0; long t@@ v@@ _@@ u@@ se@@ c = (m@@ illi@@ s - (t@@ v@@ _@@ se@@ c * 1@@ 00@@ 0@@ )) * 1@@ 00@@ 0; return new android.system.@@ Str@@ u@@ ct@@ Time@@ val@@ (t@@ v@@ _@@ sec@@ , t@@ v@@ _@@ u@@ sec@@ ); }
public org.eclipse.@@ core.@@ resources.@@ I@@ Res@@ our@@ ce find@@ Resource@@ File@@ (java.lang.String ur@@ l@@ ) { if (!(@@ ur@@ l.@@ start@@ s@@ With@@ ("@@ @@@ "@@ ))) { return null@@ ; } int type@@ En@@ d = ur@@ l.@@ index@@ Of@@ (@@ '@@ /@@ '@@ , 1); if (@@ type@@ En@@ d == (-1@@ )) { return null@@ ; } java.lang.String type@@ Name = ur@@ l.@@ sub@@ string@@ (@@ 1, type@@ En@@ d@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Type typ@@ e = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ Resource@@ Typ@@ e.get@@ En@@ um@@ (@@ type@@ Name); if (@@ typ@@ e == null@@ ) { return null@@ ; } java.lang.String name = ur@@ l.@@ sub@@ string@@ ((@@ type@@ En@@ d + 1@@ )); return find@@ Resource@@ File@@ (@@ type@@ , name@@ ); }
@com.android.annotations.@@ Null@@ able @java.lang.Override public java.util.Map@@ <java.lang.String, java.lang.String> get@@ Test@@ In@@ strument@@ ation@@ Runner@@ Argument@@ s() { return com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); }
@org.junit.Test public void test@@ 00@@ 2@@ f@@ () throw@@ s java.lang.Exception { java.io.File jack@@ Output@@ ; java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); jack@@ Out@@ put = run@@ Test@@ 00@@ 2@@ (@@ true@@ , "@@ ke@@ e@@ p@@ -@@ fi@@ r@@ st@@ ", er@@ r@@ Out@@ , false@@ , false@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y li@@ b = null@@ ; try { li@@ b = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Input@@ Jack@@ Library@@ From@@ Dir@@ (@@ jack@@ Output@@ ); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 1@@ _P@@ A@@ TH@@ , "@@ Res@@ 1@@ "); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 2@@ _P@@ A@@ TH@@ , "@@ Res@@ 2@@ "); check@@ Resource@@ Content@@ (@@ lib@@ , com.android.jack.@@ file@@ con@@ f@@ li@@ ct.@@ File@@ Con@@ f@@ li@@ ct@@ Test@@ s.@@ RE@@ S@@ O@@ UR@@ CE@@ 3@@ _P@@ A@@ TH@@ , "@@ Res@@ 3@@ "); } final@@ l@@ y { if (@@ li@@ b != null@@ ) { lib.@@ close(); } } junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ O@@ u@@ t.@@ toString@@ ().@@ isEmpty@@ ()); }
public void test@@ Server@@ Socket@@ Channel@@ () throw@@ s java.lang.Exception { java.nio.@@ channe@@ ls.@@ Server@@ Socket@@ Chan@@ ne@@ l ss@@ c = java.nio.@@ channe@@ ls.@@ Server@@ Socket@@ Chan@@ ne@@ l.@@ open@@ (); ss@@ c.@@ b@@ ind@@ (@@ null@@ ); ss@@ c.@@ close(); assert@@ Equal@@ s(@@ java.util.Collection@@ s.@@ E@@ M@@ P@@ TY@@ _M@@ AP@@ , t@@ ag@@ g@@ er.get@@ Li@@ ve@@ Descrip@@ tor@@ s()); }
@javax.annotation.@@ N@@ on@@ null private com.android.jack.test.@@ toolchain.@@ Android@@ Too@@ lch@@ a@@ in create@@ Reference@@ Too@@ lch@@ ain@@ (@@ @javax.annotation.@@ Null@@ able java.util.Map@@ <java.lang.String, java.lang.String> pro@@ per@@ ties@@ ) { com.android.jack.test.@@ toolchain.@@ Android@@ Too@@ lch@@ a@@ in re@@ ference@@ Test@@ Too@@ l@@ s = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Reference@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Android@@ Too@@ lch@@ ain@@ .@@ class@@ ); re@@ ference@@ TestTools.@@ set@@ Source@@ Level@@ (@@ le@@ vel@@ ); re@@ ference@@ TestTools.@@ set@@ With@@ Debug@@ Info@@ s(@@ w@@ ith@@ Debug@@ Info@@ s); if ((@@ pro@@ per@@ ti@@ es != null@@ ) && (re@@ ference@@ Test@@ Too@@ l@@ s instanceof com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ )) { com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in = ((@@ com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ ) (re@@ ference@@ Test@@ Too@@ l@@ s@@ )); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.String> e@@ n@@ try : pro@@ per@@ ties.@@ e@@ n@@ try@@ Set@@ ()) { jack@@ Bas@@ ed@@ Too@@ lch@@ ain.@@ add@@ Property@@ (e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ()); } } return re@@ ference@@ Test@@ Too@@ l@@ s; }
@org.junit.Test public void test@@ Name@@ P@@ attern@@ Class@@ () { com.android.jack.@@ sh@@ ro@@ b.@@ spec@@ .@@ Name@@ S@@ pe@@ c@@ if@@ ic@@ ation s@@ pe@@ c = com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ ("@@ a.@@ b.@@ *@@ .@@ d@@ ", Name@@ Format@@ .@@ C@@ LA@@ SS@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c.@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c.@@ e.@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c@@ /@@ e.@@ d@@ ")); s@@ pe@@ c = com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ ("@@ a.@@ b.@@ *@@ .@@ d@@ ", Filter@@ Se@@ par@@ ator@@ .@@ C@@ LA@@ SS@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c.@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c.@@ d@@ ")); s@@ pe@@ c = com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ name@@ ("@@ a.@@ b.@@ ?@@ .@@ d@@ ", Filter@@ Se@@ par@@ ator@@ .@@ C@@ LA@@ SS@@ ); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ c.@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ ce.@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ .@@ d@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (s@@ pec@@ .@@ match@@ es@@ ("@@ a.@@ b.@@ /@@ .@@ d@@ ")); }
private void add@@ Listener@@ s(@@ java.io.@@ P@@ r@@ int@@ Stream w@@ ri@@ ter@@ ) { if (get@@ Boole@@ an@@ Argument@@ (com.android.@@ test.@@ run@@ ner.@@ Android@@ J@@ Un@@ it@@ Run@@ ner.@@ AR@@ G@@ U@@ M@@ EN@@ T_@@ S@@ U@@ I@@ TE_@@ A@@ SS@@ I@@ G@@ N@@ M@@ EN@@ T@@ )) { add@@ Listener@@ (@@ new com.android.@@ test.@@ run@@ ner.@@ list@@ en@@ er.@@ Su@@ ite@@ As@@ sign@@ ment@@ P@@ r@@ int@@ er(@@ w@@ ri@@ ter@@ )); } else { add@@ Listener@@ (@@ new org.@@ jun@@ it@@ .@@ int@@ er@@ n@@ al.@@ Text@@ Listener@@ (@@ w@@ ri@@ ter@@ )); add@@ Listener@@ (@@ new com.android.@@ test.@@ run@@ ner.@@ list@@ en@@ er.@@ In@@ strument@@ ation@@ Result@@ P@@ r@@ int@@ er@@ (@@ this@@ )); add@@ De@@ lay@@ Listener@@ (); add@@ Co@@ ver@@ age@@ Listener@@ (); } }
@java.lang.Override public boolean process@@ Message@@ (android.os.@@ Message ms@@ g@@ ) { log@@ (("@@ De@@ li@@ ver@@ ing@@ State.@@ process@@ Message@@ :@@ " + (m@@ s@@ g.@@ wh@@ at@@ ))); switch (m@@ s@@ g.@@ wh@@ at@@ ) { case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ NE@@ W@@ _S@@ M@@ S : handle@@ New@@ Sms@@ ((@@ (android.os.@@ As@@ ync@@ Result@@ ) (m@@ s@@ g.@@ ob@@ j@@ ))); send@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ RE@@ T@@ UR@@ N@@ _@@ TO@@ _@@ ID@@ L@@ E); return H@@ AN@@ D@@ L@@ ED@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ IN@@ J@@ EC@@ T_@@ S@@ M@@ S : handle@@ In@@ ject@@ Sms@@ ((@@ (android.os.@@ As@@ ync@@ Result@@ ) (m@@ s@@ g.@@ ob@@ j@@ ))); send@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ RE@@ T@@ UR@@ N@@ _@@ TO@@ _@@ ID@@ L@@ E); return H@@ AN@@ D@@ L@@ ED@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ B@@ RO@@ AD@@ C@@ A@@ ST_@@ S@@ M@@ S : com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Track@@ er in@@ bo@@ und@@ Sms@@ Track@@ er = ((@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Track@@ er@@ ) (m@@ s@@ g.@@ ob@@ j@@ )); if (pro@@ cess@@ Message@@ Par@@ t@@ (in@@ bo@@ und@@ Sms@@ Track@@ er@@ )) { tr@@ an@@ si@@ tion@@ To@@ (m@@ W@@ ait@@ ing@@ State@@ ); } else { log@@ (("@@ N@@ o b@@ road@@ cas@@ t s@@ ent on process@@ ing EVEN@@ T_@@ B@@ RO@@ AD@@ C@@ A@@ ST_@@ S@@ M@@ S in De@@ li@@ ver@@ ing " + "@@ state@@ . Retur@@ n to Id@@ le state@@ ")); send@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ RE@@ T@@ UR@@ N@@ _@@ TO@@ _@@ ID@@ L@@ E); } return H@@ AN@@ D@@ L@@ ED@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ RE@@ T@@ UR@@ N@@ _@@ TO@@ _@@ ID@@ L@@ E : tr@@ an@@ si@@ tion@@ To@@ (m@@ Id@@ le@@ State@@ ); return H@@ AN@@ D@@ L@@ ED@@ ; case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ B@@ RO@@ AD@@ C@@ A@@ ST_@@ C@@ O@@ M@@ P@@ LE@@ T@@ E : case com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ In@@ bo@@ und@@ Sms@@ Handler.@@ EVEN@@ T_@@ STA@@ R@@ T_@@ AC@@ CE@@ P@@ T@@ ING@@ _S@@ M@@ S : default : return NO@@ T_@@ H@@ AN@@ D@@ L@@ ED@@ ; } }
public void test_@@ SSL@@ En@@ g@@ ine@@ _@@ get@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ _@@ return@@ s@@ Co@@ pi@@ es@@ () throw@@ s java.lang.Exception { libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context c = libcore.@@ javax.net.ssl.@@ Test@@ SSL@@ Context.@@ create@@ (); javax.net.ssl.@@ SSL@@ En@@ gin@@ e = c.@@ c@@ lient@@ Context.@@ create@@ SSL@@ En@@ g@@ ine@@ (); assert@@ Not@@ S@@ ame@@ (@@ e.get@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ (), e.get@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ ()); c.@@ close(); }
public boolean can@@ cel@@ B@@ ond@@ Process@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { if (!@@ (com.android.bluetooth.@@ Utils.@@ check@@ Call@@ er@@ ())) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, "@@ can@@ cel@@ B@@ ond@@ Process@@ () - No@@ t al@@ low@@ ed for n@@ on@@ -@@ ac@@ ti@@ v@@ e user@@ "); return false@@ ; } com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Ser@@ vice ser@@ vice = get@@ Service@@ (); if (@@ ser@@ vice == null@@ ) return false@@ ; return service@@ .@@ can@@ cel@@ B@@ ond@@ Process@@ (device@@ ); }
public static libcore.@@ icu@@ .@@ Loc@@ ale@@ Data get@@ (java.util.@@ Local@@ e loc@@ ale@@ ) throw@@ s java.util.@@ I@@ l@@ l@@ for@@ m@@ ed@@ Loc@@ ale@@ Exception { final java.lang.String lan@@ gu@@ age@@ T@@ a@@ g = loc@@ a@@ le.@@ to@@ L@@ an@@ gu@@ age@@ Tag@@ (); synchronized@@ (@@ libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ Cach@@ e) { libcore.@@ icu@@ .@@ Loc@@ ale@@ Data loc@@ ale@@ Data = libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ Cach@@ e.get@@ (@@ lan@@ gu@@ age@@ Tag@@ ); if (@@ loc@@ ale@@ Data != null@@ ) { return loc@@ ale@@ Data@@ ; } } libcore.@@ icu@@ .@@ Loc@@ ale@@ Data new@@ Loc@@ ale@@ Data = libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ in@@ it@@ Loc@@ ale@@ Data@@ (@@ loc@@ ale@@ ); synchronized@@ (@@ libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ Cach@@ e) { libcore.@@ icu@@ .@@ Loc@@ ale@@ Data loc@@ ale@@ Data = libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ (@@ lan@@ gu@@ age@@ Tag@@ ); if (@@ loc@@ ale@@ Data != null@@ ) { return loc@@ ale@@ Data@@ ; } libcore.@@ icu@@ .@@ Loc@@ ale@@ Data@@ .@@ loc@@ ale@@ Data@@ C@@ ache.@@ put@@ (@@ lan@@ gu@@ age@@ Tag@@ , new@@ Loc@@ ale@@ Data@@ ); return new@@ Loc@@ ale@@ Data@@ ; } }
public static long m@@ m@@ m@@ ap@@ (@@ long addres@@ s, long byte@@ Count@@ , int pro@@ t, int flag@@ s, java.io.FileDescriptor f@@ d, long offset@@ ) throw@@ s android.system.@@ ErrnoException { return Lib@@ core.@@ os.@@ m@@ ap@@ (@@ addres@@ s, byte@@ Count@@ , pro@@ t, flag@@ s, f@@ d, offset@@ ); }
private boolean check@@ Listener@@ Permission@@ (@@ int event@@ s, java.lang.String call@@ ing@@ Package@@ , java.lang.String message@@ ) { if ((@@ event@@ s & (android.@@ telephony.@@ Phone@@ State@@ Listen@@ er.@@ LIS@@ TE@@ N@@ _C@@ E@@ L@@ L_@@ LO@@ C@@ A@@ TION@@ )) != 0) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ AC@@ CE@@ SS@@ _C@@ O@@ A@@ RS@@ E_@@ LO@@ C@@ A@@ TION@@ , null@@ ); if ((m@@ App@@ Op@@ s.@@ no@@ te@@ Op@@ (@@ App@@ O@@ ps@@ Manager.@@ OP@@ _C@@ O@@ A@@ RS@@ E_@@ LO@@ C@@ A@@ TION@@ , android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (), call@@ ing@@ Package@@ )) != (android.@@ app.@@ App@@ O@@ ps@@ Manager.@@ M@@ OD@@ E_@@ AL@@ LO@@ W@@ ED@@ )) { return false@@ ; } } if ((@@ event@@ s & (android.@@ telephony.@@ Phone@@ State@@ Listen@@ er.@@ LIS@@ TE@@ N@@ _C@@ E@@ L@@ L_@@ IN@@ F@@ O@@ )) != 0) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ AC@@ CE@@ SS@@ _C@@ O@@ A@@ RS@@ E_@@ LO@@ C@@ A@@ TION@@ , null@@ ); if ((m@@ App@@ Op@@ s.@@ no@@ te@@ Op@@ (@@ App@@ O@@ ps@@ Manager.@@ OP@@ _C@@ O@@ A@@ RS@@ E_@@ LO@@ C@@ A@@ TION@@ , android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (), call@@ ing@@ Package@@ )) != (android.@@ app.@@ App@@ O@@ ps@@ Manager.@@ M@@ OD@@ E_@@ AL@@ LO@@ W@@ ED@@ )) { return false@@ ; } } if ((@@ event@@ s & (com.android.server.@@ Telephony@@ Reg@@ is@@ try@@ .@@ EN@@ F@@ OR@@ C@@ E_@@ P@@ H@@ ON@@ E_@@ STATE_@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _M@@ A@@ S@@ K@@ )) != 0) { if (!(@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Telephony@@ Permission@@ s.@@ check@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Read@@ Phone@@ State@@ (m@@ Contex@@ t, call@@ ing@@ Package@@ , message@@ ))) { return false@@ ; } } if ((@@ event@@ s & (com.android.server.@@ Telephony@@ Reg@@ is@@ try@@ .@@ P@@ RE@@ C@@ IS@@ E_@@ P@@ H@@ ON@@ E_@@ STATE_@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _M@@ A@@ S@@ K@@ )) != 0) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ RE@@ AD@@ _P@@ RE@@ C@@ IS@@ E_@@ P@@ H@@ ON@@ E_@@ STA@@ TE@@ , null@@ ); } return true@@ ; }
public java.lang.String to@@ S@@ a@@ f@@ e@@ String@@ () { java.lang.String s@@ ch@@ em@@ e = get@@ S@@ ch@@ em@@ e@@ (); java.lang.String ss@@ p = get@@ S@@ ch@@ em@@ e@@ S@@ pe@@ c@@ if@@ ic@@ Par@@ t@@ (); if (s@@ ch@@ em@@ e != null@@ ) { if ((((@@ (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ te@@ l@@ ")) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ si@@ p@@ "@@ ))) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ s@@ ms@@ "@@ ))) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ sm@@ st@@ o@@ "@@ ))) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ ma@@ il@@ to@@ "@@ ))) { java.lang.String@@ Builder bu@@ ilder = new java.lang.String@@ Builder@@ (@@ 6@@ 4@@ ); builder.@@ append@@ (s@@ ch@@ em@@ e); builder.@@ append(@@ '@@ :@@ '@@ ); if (s@@ s@@ p != null@@ ) { for (@@ int i = 0; i < (s@@ s@@ p.@@ length@@ ()); i++) { char c = ss@@ p@@ .@@ char@@ At@@ (i@@ ); if (((@@ c == '@@ -@@ '@@ ) || (@@ c == '@@ @@@ '@@ )) || (@@ c == '@@ .@@ '@@ )) { builder.@@ append@@ (c@@ ); } else { builder.@@ append(@@ '@@ x@@ '@@ ); } } } return builder.@@ toString@@ (); } else if ((@@ (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ h@@ ttp@@ ")) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ h@@ tt@@ ps@@ "@@ ))) || (s@@ ch@@ em@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ ("@@ f@@ t@@ p@@ "@@ ))) { ss@@ p = (("@@ /@@ " + (get@@ Host@@ ())) + ((@@ get@@ Port@@ ()) != (-1@@ ) ? "@@ :@@ " + (get@@ Port@@ ()) : "@@ ")) + "@@ /@@ .@@ .@@ "; } } java.lang.String@@ Builder bu@@ ilder = new java.lang.String@@ Builder@@ (@@ 6@@ 4@@ ); if (s@@ ch@@ em@@ e != null@@ ) { builder.@@ append@@ (s@@ ch@@ em@@ e); builder.@@ append(@@ '@@ :@@ '@@ ); } if (s@@ s@@ p != null@@ ) { builder.@@ append@@ (s@@ s@@ p@@ ); } return builder.@@ toString@@ (); }
public void add@@ S@@ a@@ f@@ el@@ y@@ (@@ java.lang.Object ob@@ j@@ ) { boolean r@@ e@@ try@@ ; final int old@@ Po@@ s = m@@ Po@@ s; do { r@@ e@@ try = false@@ ; try { add(@@ ob@@ j@@ ); } catch (java.lang.@@ Array@@ Index@@ Out@@ Of@@ B@@ ound@@ s@@ Exception e) { m@@ Po@@ s = old@@ Po@@ s; res@@ iz@@ e@@ ((@@ (m@@ L@@ en@@ ) * 2@@ )); r@@ e@@ try = true@@ ; } } while (r@@ e@@ try ); }
public static com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ View@@ No@@ de parse@@ View@@ H@@ ierarchy@@ (@@ java.io.@@ Buffer@@ ed@@ Read@@ er in@@ , com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ W@@ in@@ do@@ w w@@ in@@ do@@ w@@ ) { com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ View@@ No@@ de current@@ No@@ de = null@@ ; int current@@ De@@ p@@ th = -1@@ ; java.lang.String line@@ ; try { while ((@@ lin@@ e = in@@ .@@ read@@ Line@@ ()) != null@@ ) { if ("@@ D@@ ON@@ E@@ .@@ "@@ .@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ (@@ line@@ )) { break@@ ; } int de@@ p@@ th = 0; while ((@@ line@@ .@@ char@@ At@@ (@@ de@@ p@@ th@@ )) == ' '@@ ) { de@@ p@@ th@@ ++@@ ; } while (@@ de@@ p@@ th <@@ = current@@ De@@ p@@ th@@ ) { if (c@@ urrent@@ No@@ de != null@@ ) { current@@ No@@ de = current@@ No@@ d@@ e.@@ parent@@ ; } current@@ De@@ p@@ th@@ --@@ ; } try { current@@ No@@ de = new com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ View@@ Node@@ (@@ w@@ in@@ do@@ w@@ , current@@ Node@@ , lin@@ e.@@ sub@@ string@@ (@@ de@@ p@@ th@@ )); } catch (java.lang.@@ Number@@ Format@@ Exception e) { com.android.ddmlib.@@ Log.@@ e@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ TAG, ("@@ N@@ F@@ E read@@ ing " + (@@ lin@@ e.@@ sub@@ string@@ (@@ de@@ p@@ th@@ )))); } current@@ De@@ p@@ th = de@@ p@@ th@@ ; } } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ e@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ TAG, ("@@ Error read@@ ing vi@@ e@@ w h@@ ierarch@@ y str@@ eam@@ : " + (@@ e.get@@ Message@@ ()))); return null@@ ; } if (c@@ urrent@@ No@@ de == null@@ ) { return null@@ ; } while ((@@ current@@ No@@ d@@ e.@@ parent@@ ) != null@@ ) { current@@ No@@ de = current@@ No@@ d@@ e.@@ parent@@ ; } return current@@ Node@@ ; }
@java.lang.Override public void run@@ () { java.lang.String l@@ ab@@ e@@ l = java.lang.String@@ .@@ for@@ mat@@ ("@@ Chan@@ g@@ e at@@ tri@@ b@@ ut@@ e %@@ 1@@ $@@ s", action@@ s.get@@ (0@@ ).get@@ T@@ it@@ le@@ ()); if ((@@ action@@ s.@@ size@@ ()) > 1@@ ) { l@@ ab@@ e@@ l +@@ = java.lang.String@@ .@@ for@@ mat@@ (@@ " (@@ %@@ 1@@ $@@ d e@@ lement@@ s@@ )@@ ", action@@ s.@@ size@@ ()); } if (m@@ E@@ d@@ itor@@ .is@@ E@@ d@@ it@@ Xml@@ Mode@@ l@@ P@@ end@@ ing@@ ()) { log@@ Error@@ ("@@ Ac@@ tion '@@ %@@ 1@@ $@@ s@@ ' fa@@ ile@@ d@@ : X@@ M@@ L chan@@ ge@@ s pend@@ ing@@ , do@@ c@@ um@@ ent m@@ ig@@ h@@ t b@@ e cor@@ rup@@ t.@@ ", l@@ ab@@ el@@ ); return@@ ; } m@@ E@@ d@@ itor@@ .@@ w@@ rap@@ U@@ n@@ do@@ E@@ d@@ it@@ Xml@@ Mode@@ l@@ (@@ l@@ ab@@ el@@ , new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { for (com.android.ide.@@ eclipse.adt.@@ editors.@@ layout.@@ g@@ scrip@@ ts.@@ M@@ en@@ u@@ Ac@@ tion a@@ 2 : action@@ s) { if (@@ a@@ 2 instanceof com.android.ide.@@ eclipse.adt.@@ editors.@@ layout.@@ g@@ scrip@@ ts.@@ M@@ en@@ u@@ Action@@ .@@ Action@@ ) { ((@@ com.android.ide.@@ eclipse.adt.@@ editors.@@ layout.@@ g@@ scrip@@ ts.@@ M@@ en@@ u@@ Action@@ .@@ Action@@ ) (@@ a@@ 2@@ )@@ ).get@@ Callback@@ ().@@ action@@ (@@ a@@ 2, key@@ , (!@@ is@@ Check@@ ed@@ )); } } }); }
@java.lang.Override public void de@@ f@@ le@@ ct@@ Call@@ (java.lang.String call@@ Id, java.lang.String de@@ f@@ le@@ ct@@ Number@@ ) { try { android.telecom.@@ Log.@@ start@@ Session@@ (@@ Log@@ Utils.@@ Session@@ s.@@ IC@@ A@@ _@@ DE@@ F@@ L@@ EC@@ T_@@ C@@ AL@@ L, m@@ O@@ wn@@ er@@ Comp@@ on@@ ent@@ Name); long to@@ ke@@ n = android.os.@@ B@@ ind@@ er.@@ clear@@ Call@@ ing@@ Id@@ enti@@ ty@@ (); try { synchronized@@ (m@@ Lock) { android.telecom.@@ Log.@@ i@@ (@@ this@@ , "@@ de@@ f@@ le@@ ct@@ Call@@ (@@ %@@ s@@ ,@@ %@@ s@@ )@@ ", call@@ Id, de@@ f@@ le@@ ct@@ Number@@ ); com.android.server.@@ telecom.@@ Cal@@ l cal@@ l = m@@ Call@@ Id@@ M@@ app@@ er.get@@ Call@@ (c@@ all@@ Id); if (c@@ al@@ l != null@@ ) { m@@ Call@@ s@@ Manager.@@ de@@ f@@ le@@ ct@@ Call@@ (c@@ all@@ , de@@ f@@ le@@ ct@@ Number@@ ); } else { android.telecom.@@ Log.@@ w@@ (@@ this@@ , "@@ de@@ f@@ le@@ ct@@ Call@@ , un@@ k@@ no@@ w@@ n cal@@ l id@@ : %@@ s", call@@ Id); } } final@@ l@@ y { android.os.@@ B@@ ind@@ er.@@ r@@ est@@ ore@@ Call@@ ing@@ Id@@ enti@@ ty@@ (@@ to@@ k@@ en@@ ); } } final@@ l@@ y { android.telecom.@@ Log.@@ end@@ Session@@ (); } }
private com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Lay@@ out@@ Device get@@ Sele@@ c@@ ted@@ Device@@ () { return ((@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Lay@@ out@@ Device@@ ) (m@@ Device@@ Com@@ bo@@ .get@@ Data@@ ())); }
public android.@@ bluetooth.@@ le.@@ Ad@@ verti@@ sing@@ Set@@ Parameter@@ s.@@ Builder set@@ Pri@@ m@@ ary@@ P@@ h@@ y@@ (@@ int pri@@ m@@ ary@@ P@@ h@@ y@@ ) { if ((@@ pri@@ m@@ ary@@ P@@ h@@ y != (android.bluetooth.Bluetooth@@ Device.@@ P@@ H@@ Y_@@ L@@ E_@@ 1@@ M@@ )) && (@@ pri@@ m@@ ary@@ P@@ h@@ y != (android.bluetooth.Bluetooth@@ Device.@@ P@@ H@@ Y_@@ L@@ E_@@ C@@ O@@ DE@@ D@@ ))) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ b@@ ad pri@@ m@@ ary@@ P@@ h@@ y " + pri@@ m@@ ary@@ P@@ h@@ y@@ )); } m@@ ary@@ P@@ h@@ y = pri@@ m@@ ary@@ P@@ h@@ y@@ ; return this@@ ; }
static final java.lang.String get@@ Media@@ Dir@@ String@@ () { android.os.@@ Bund@@ le b@@ und@@ le = android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Argument@@ s(); java.lang.String media@@ Dir@@ Str@@ ing = b@@ und@@ le@@ .get@@ String@@ ("@@ media@@ -@@ path@@ "); if (m@@ edia@@ Dir@@ Str@@ ing != null@@ ) { android.util.Log.@@ w@@ ("@@ U@@ s@@ ing user@@ -@@ sup@@ pli@@ ed media@@ -@@ p@@ ath str@@ ing %@@ s", media@@ Dir@@ String@@ ); return media@@ Dir@@ Str@@ ing + (m@@ edia@@ Dir@@ Str@@ ing.@@ end@@ s@@ With@@ ("@@ /@@ ") ? "@@ " : "@@ /@@ "); } else { return (android.@@ m@@ ed@@ i@@ as@@ tr@@ es@@ s.@@ cts.@@ W@@ or@@ k@@ Dir@@ .get@@ To@@ p@@ Dir@@ String@@ ()) + "@@ test@@ /@@ "; } }
public void test_@@ j@@ o@@ in@@ Gro@@ up@@ L@@ java@@ _@@ net@@ _S@@ ocket@@ Address@@ L@@ java@@ _@@ net@@ _@@ Network@@ Interface@@ _@@ IP@@ v@@ 6@@ () throw@@ s java.lang.Exception { test_@@ j@@ o@@ in@@ Gro@@ up@@ L@@ java@@ _@@ net@@ _S@@ ocket@@ Address@@ L@@ java@@ _@@ net@@ _@@ Network@@ Interface@@ (@@ ip@@ v@@ 6@@ Network@@ Interface@@ , org.apache.harmony.@@ tests.@@ java.net.@@ Multi@@ cast@@ Socket@@ Test.@@ G@@ O@@ OD@@ _@@ IP@@ v@@ 6@@ , org.apache.harmony.@@ tests.@@ java.net.@@ Multi@@ cast@@ Socket@@ Test.@@ B@@ AD@@ _@@ IP@@ v@@ 6@@ ); }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ Retur@@ n curr@@ ent W@@ F@@ C Mod@@ e if Enabled@@ .@@ ") public java.lang.String im@@ s@@ Get@@ W@@ fc@@ Mode@@ () { if (!@@ (com.android.@@ ims.@@ Ims@@ Manager.@@ is@@ W@@ fc@@ Enabled@@ By@@ User@@ For@@ S@@ lot@@ ())) { return Telephony@@ Constants.@@ W@@ F@@ C@@ _M@@ OD@@ E_@@ D@@ IS@@ ABL@@ ED@@ ; } return com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ fa@@ c@@ ad@@ e.@@ telephony.@@ Telephony@@ Utils.@@ get@@ W@@ fc@@ Mode@@ String@@ (com.android.@@ ims.@@ Ims@@ Manager.get@@ W@@ fc@@ Mode@@ For@@ S@@ lot@@ ()); }
private void start@@ Socket@@ Listener@@ () { if (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.@@ D@@ ) android.util.Log.d@@ (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.TAG, "@@ st@@ ar@@ t S@@ ock@@ et Listener@@ s@@ "); st@@ op@@ Listener@@ s(); m@@ Server@@ S@@ ock@@ et = com.android.bluetooth.@@ Ob@@ ex@@ Server@@ Socket@@ s.@@ create@@ In@@ sec@@ ure@@ (@@ this@@ ); com.android.bluetooth.@@ s@@ d@@ p.@@ S@@ dp@@ Manager s@@ dp@@ Manager = com.android.bluetooth.@@ s@@ d@@ p.@@ S@@ dp@@ Manager.get@@ Default@@ Manager@@ (); if ((@@ s@@ dp@@ Manager == null@@ ) || ((m@@ Server@@ Socket@@ ) == null@@ )) { android.util.Log.e@@ (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.TAG, ((("@@ ER@@ R@@ OR@@ :@@ server@@ s@@ ock@@ et ob@@ ject is N@@ UL@@ L s@@ d@@ p man@@ age@@ r :@@ " + s@@ dp@@ Manager@@ ) + " m@@ Server@@ Socket@@ :@@ ") + (m@@ Server@@ Socket@@ ))); return@@ ; } s@@ dp@@ Manager.@@ create@@ Op@@ p@@ O@@ ps@@ Record@@ ("@@ O@@ B@@ E@@ X Ob@@ ject P@@ us@@ h@@ ", m@@ Server@@ Socket@@ .get@@ R@@ f@@ com@@ m@@ Channel@@ (), m@@ Server@@ Socket@@ .get@@ L@@ 2@@ cap@@ P@@ sm@@ (), 25@@ 8@@ , S@@ dp@@ Manager.@@ OP@@ P@@ _@@ F@@ OR@@ MA@@ T@@ ); }
public void for@@ ce@@ (@@ boolean m@@ et@@ ad@@ ata@@ ) throw@@ s java.io.IOException { check@@ Open@@ (); if ((@@ (m@@ o@@ de@@ ) & (@@ O@@ _@@ AC@@ C@@ M@@ O@@ DE@@ )) != (@@ O@@ _@@ R@@ D@@ ON@@ L@@ Y@@ )) { try { if (m@@ et@@ ad@@ ata@@ ) { Lib@@ core.@@ os.@@ f@@ s@@ ync@@ (f@@ d@@ ); } else { Lib@@ core.@@ os.@@ f@@ dat@@ as@@ ync@@ (f@@ d@@ ); } } catch (android.@@ system.@@ ErrnoException er@@ rno@@ Exception@@ ) { throw er@@ rno@@ Exception@@ .@@ r@@ e@@ throw@@ As@@ IO@@ Exception@@ (); } } }
@@@ android.@@ support.@@ annotation.@@ Visi@@ ble@@ For@@ Test@@ ing public boolean connect@@ Audio@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { return connect@@ Audio@@ Native@@ (com.android.bluetooth.@@ Utils.@@ get@@ Byte@@ Addres@@ s(@@ device@@ )); }
@javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face create@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Pack@@ age load@@ ing@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er class@@ Or@@ Interface@@ Load@@ er, @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ v@@ 00@@ 0@@ 2.@@ io.@@ J@@ ay@@ ce@@ Inter@@ nal@@ Read@@ er@@ Imp@@ l ja@@ y@@ ce@@ Inter@@ nal@@ Read@@ er@@ Imp@@ l@@ ) throw@@ s java.io.IO@@ Exception;
private static org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Ob@@ ject build@@ Link@@ Properties@@ (android.net.@@ Link@@ Proper@@ ti@@ es data@@ ) throw@@ s org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Exception { org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Ob@@ ject in@@ fo = new org.@@ j@@ s@@ on@@ .@@ J@@ S@@ ON@@ Object@@ (); info@@ .@@ put@@ ("@@ Interface@@ Name@@ ", data@@ .get@@ Interface@@ Name@@ ()); info@@ .@@ put@@ ("@@ Link@@ Address@@ es@@ ", com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ j@@ s@@ on@@ r@@ p@@ c.@@ J@@ s@@ on@@ Build@@ er.@@ build@@ (d@@ ata@@ .get@@ Link@@ Address@@ es@@ ())); info@@ .@@ put@@ ("@@ D@@ ns@@ Server@@ s", com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ j@@ s@@ on@@ r@@ p@@ c.@@ J@@ s@@ on@@ Build@@ er.@@ build@@ (d@@ ata@@ .get@@ D@@ ns@@ Server@@ s@@ ())); info@@ .@@ put@@ ("@@ Do@@ main@@ s", data@@ .get@@ Do@@ main@@ s()); info@@ .@@ put@@ ("@@ M@@ t@@ u@@ ", data@@ .get@@ M@@ t@@ u@@ ()); info@@ .@@ put@@ ("@@ R@@ out@@ es@@ ", com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ j@@ s@@ on@@ r@@ p@@ c.@@ J@@ s@@ on@@ Build@@ er.@@ build@@ (d@@ ata@@ .get@@ R@@ out@@ es@@ ())); info@@ .@@ put@@ ("@@ Is@@ Pri@@ v@@ ate@@ D@@ ns@@ Active@@ ", data@@ .is@@ Pri@@ v@@ ate@@ D@@ ns@@ Active@@ ()); info@@ .@@ put@@ ("@@ Pri@@ v@@ ate@@ D@@ ns@@ Server@@ Name@@ ", data@@ .get@@ Pri@@ v@@ ate@@ D@@ ns@@ Server@@ Name@@ ()); return info@@ ; }
java.util.Collection@@ <@@ java.io.File@@ > get@@ Comp@@ ile@@ Librar@@ ies@@ ();
@java.lang.Override public android.telephony.@@ Network@@ Reg@@ is@@ tr@@ ation@@ State.@@ Vo@@ i@@ ce@@ S@@ pe@@ c@@ if@@ ic@@ State@@ s get@@ Vo@@ i@@ ce@@ S@@ pe@@ c@@ if@@ ic@@ Stat@@ es@@ () { return m@@ Vo@@ i@@ ce@@ S@@ pe@@ c@@ if@@ ic@@ Stat@@ es@@ ; }
private void check@@ Mod@@ f@@ FloatFloat@@ Float@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 1, -@@ 7@@ 7@@ 7@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out@@ I@@ re@@ t = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ Out@@ I@@ ret@@ (@@ out@@ I@@ ret@@ ); script@@ .@@ for@@ Each@@ _test@@ Mod@@ f@@ FloatFloat@@ Float@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Mod@@ f@@ FloatFloat@@ Float@@ (in@@ X@@ , out@@ I@@ ret@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Mod@@ f@@ FloatFloat@@ Float@@ : " + (e.toString()))); } try { android.renderscript.Allocation out@@ I@@ re@@ t = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 1@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ Out@@ I@@ ret@@ (@@ out@@ I@@ ret@@ ); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Mod@@ f@@ FloatFloat@@ Float@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Mod@@ f@@ FloatFloat@@ Float@@ (in@@ X@@ , out@@ I@@ ret@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Mod@@ f@@ FloatFloat@@ Float@@ : " + (e.toString()))); } }
public long b@@ e@@ for@@ e@@ Hand@@ sh@@ ake@@ (@@ long contex@@ t@@ ) throw@@ s javax.net.ssl.@@ SSL@@ Exception { long s = org.conscrypt.@@ NativeCryp@@ to.@@ SSL@@ _@@ new@@ (@@ contex@@ t@@ ); java.util.List<@@ java.lang.String> c@@ ip@@ her@@ Su@@ ite@@ s = new java.util.ArrayList<@@ java.lang.String@@ >(); if ((@@ enable@@ d@@ Cip@@ her@@ Su@@ it@@ es) == null@@ ) { c@@ ip@@ her@@ Su@@ it@@ es.@@ add@@ ("@@ EC@@ D@@ H@@ E@@ -@@ RS@@ A@@ -@@ A@@ E@@ S@@ 12@@ 8@@ -@@ S@@ H@@ A@@ "); if (@@ ps@@ k@@ Enabled@@ ) { c@@ ip@@ her@@ Su@@ it@@ es.@@ add(@@ 0, "@@ EC@@ D@@ H@@ E@@ -@@ P@@ S@@ K@@ -@@ A@@ E@@ S@@ 12@@ 8@@ -@@ G@@ C@@ M@@ -@@ S@@ H@@ A@@ 25@@ 6@@ "); } else { c@@ ip@@ her@@ Su@@ it@@ es.@@ add@@ All@@ (@@ enable@@ d@@ Cip@@ her@@ Su@@ it@@ es@@ ); } org.conscrypt.@@ NativeCryp@@ to.@@ SSL@@ _@@ set@@ _@@ c@@ ip@@ her@@ _@@ list@@ s(@@ s, c@@ ip@@ her@@ Su@@ it@@ es.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ c@@ ip@@ her@@ Su@@ it@@ es.@@ size@@ ()@@ ]@@ )); if ((@@ chan@@ nel@@ Id@@ Pri@@ v@@ ate@@ Key@@ ) != null@@ ) { org.conscrypt.@@ NativeCryp@@ to.@@ SSL@@ _@@ set@@ 1_@@ t@@ l@@ s@@ _@@ chan@@ nel@@ _@@ id@@ (s@@ , chan@@ nel@@ Id@@ Pri@@ v@@ ate@@ Key@@ .get@@ Native@@ Ref@@ ()); } return s; }
void remove@@ Config@@ (java.lang.String name@@ ) { synchronized@@ (m@@ Config@@ s) { for (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Lay@@ out@@ Device.@@ Device@@ Con@@ fig con@@ fig : m@@ Config@@ s) { if (@@ config.@@ get@@ Name@@ ().@@ equals(@@ name@@ )) { m@@ Config@@ s.@@ remove@@ (@@ config@@ ); } } }
@java.lang.Override public java.lang.String ser@@ i@@ aliz@@ e@@ () { float d@@ ur@@ ation = (@@ (@@ float@@ ) (@@ time@@ M@@ s@@ )) / 1@@ 00@@ 0.@@ 0F@@ ; java.lang.String py@@ d@@ ic@@ t = com.android.@@ mon@@ key@@ run@@ ner.@@ re@@ cor@@ d@@ er.@@ action@@ s.@@ P@@ y@@ Di@@ ct@@ Uti@@ l@@ Builder@@ .@@ new@@ Builder@@ ().@@ add@@ T@@ up@@ le@@ ("@@ start@@ ", start@@ x@@ , st@@ ar@@ ty@@ ).@@ add@@ T@@ up@@ le@@ ("@@ end@@ ", end@@ x@@ , end@@ y@@ ).@@ add@@ ("@@ d@@ ur@@ ation@@ ", d@@ ur@@ ation@@ ).@@ add@@ ("@@ s@@ te@@ ps@@ ", s@@ te@@ ps@@ ).@@ build@@ (); return "@@ D@@ R@@ A@@ G@@ |@@ " + py@@ di@@ ct@@ ; }
@java.lang.Override protected java.lang.String get@@ Service@@ Interface@@ () { return android.telephony.@@ ims.@@ Ims@@ Service.@@ S@@ ER@@ VIC@@ E_@@ IN@@ TER@@ F@@ AC@@ E@@ ; }
public static javax.net.ssl.@@ X@@ 509@@ Ex@@ t@@ end@@ ed@@ Tr@@ u@@ st@@ Manager get@@ Default@@ Tr@@ u@@ st@@ Manager@@ () throw@@ s java.security.@@ Key@@ Manage@@ ment@@ Exception { javax.net.ssl.@@ X@@ 509@@ Ex@@ t@@ end@@ ed@@ Tr@@ u@@ st@@ Manager result = org.conscrypt.@@ SSL@@ Parameter@@ s@@ Imp@@ l@@ .@@ default@@ Tr@@ u@@ st@@ Manager@@ ; if (@@ result == null@@ ) { org.conscrypt.@@ SSL@@ Parameter@@ s@@ Imp@@ l@@ .@@ default@@ Tr@@ u@@ st@@ Manager = result = org.conscrypt.@@ SSL@@ Parameter@@ s@@ Imp@@ l.@@ create@@ Default@@ Tr@@ u@@ st@@ Manager@@ (); } return result@@ ; }
public long get@@ G@@ ps@@ Date@@ Time@@ () { java.lang.String d@@ ate = m@@ At@@ tri@@ b@@ ut@@ es@@ .get@@ (android.@@ media.@@ E@@ x@@ if@@ Interface@@ .@@ TAG@@ _@@ G@@ P@@ S_@@ DA@@ TE@@ STA@@ M@@ P@@ ); java.lang.String tim@@ e = m@@ At@@ tri@@ b@@ ut@@ es@@ .get@@ (android.@@ media.@@ E@@ x@@ if@@ Interface@@ .@@ TAG@@ _@@ G@@ P@@ S_@@ TI@@ ME@@ STA@@ M@@ P@@ ); if (((@@ d@@ ate == null@@ ) || (@@ tim@@ e == null@@ )) || ((@@ !@@ (d@@ at@@ e.@@ match@@ es@@ ("@@ .@@ *@@ [@@ 1@@ -@@ 9@@ ]@@ .@@ *@@ "@@ ))) && (!(@@ tim@@ e.@@ match@@ es@@ ("@@ .@@ *@@ [@@ 1@@ -@@ 9@@ ]@@ .@@ *@@ "@@ )@@ )@@ ))) return -1@@ ; java.lang.String date@@ Time@@ Str@@ ing = (d@@ ate + ' '@@ ) + time@@ ; java.text.@@ Par@@ se@@ Posi@@ tion po@@ s = new java.text.@@ Par@@ se@@ Posi@@ tion@@ (@@ 0); try { java.util.@@ D@@ ate dat@@ et@@ im@@ e = android.@@ media.@@ E@@ x@@ if@@ Interface@@ .@@ s@@ Format@@ ter.@@ parse@@ (@@ date@@ Time@@ String@@ , po@@ s); if (d@@ at@@ et@@ im@@ e == null@@ ) return -1@@ ; return dat@@ et@@ im@@ e.get@@ Time@@ (); } catch (java.lang.@@ Illegal@@ Argument@@ Exception ex@@ ) { return -1@@ ; } }
@java.lang.Override public boolean is@@ Comp@@ ati@@ ble@@ (com.android.@@ dx.@@ dex.@@ code.@@ D@@ al@@ v@@ In@@ s@@ n in@@ s@@ n@@ ) { if (!@@ (in@@ s@@ n instanceof com.android.@@ dx.@@ dex.@@ code.@@ C@@ st@@ In@@ s@@ n@@ )) { return false@@ ; } com.android.@@ dx.@@ dex.@@ code.@@ C@@ st@@ In@@ s@@ n c@@ i = ((@@ com.android.@@ dx.@@ dex.@@ code.@@ C@@ st@@ In@@ s@@ n@@ ) (in@@ s@@ n@@ )); int c@@ p@@ i = c@@ i@@ .get@@ Index@@ (); if (!(@@ un@@ si@@ g@@ ne@@ d@@ F@@ it@@ s@@ In@@ Short@@ (c@@ pi@@ ))) { return false@@ ; } com.android.@@ dx.@@ ro@@ p.@@ c@@ st.@@ Constan@@ t c@@ s@@ t = c@@ i@@ .get@@ Constan@@ t@@ (); if (!@@ (c@@ s@@ t instanceof com.android.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Method@@ Ref@@ ) { return s@@ t instanceof com.android.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ Type@@ )) || (c@@ s@@ t instanceof com.android.@@ dx.@@ ro@@ p.@@ c@@ st.@@ C@@ st@@ In@@ vok@@ e@@ D@@ yn@@ am@@ ic@@ ))) { return false@@ ; } com.android.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ Spec@@ Lis@@ t reg@@ s = c@@ i@@ .get@@ Reg@@ ister@@ s(); return (com.android.@@ dx.@@ dex.@@ code@@ .@@ for@@ m.@@ For@@ m@@ 3@@ 5@@ c.@@ wor@@ d@@ Count@@ (@@ reg@@ s@@ )) >@@ = 0; }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); res@@ et@@ (m@@ Context@@ ); m@@ Service@@ Context = new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ C@@ arrier@@ Config@@ Change@@ Listener@@ Test.@@ Mock@@ Context@@ (m@@ Context@@ ); m@@ Handle@@ r = new android.os.@@ Handler@@ (android.os.@@ Loo@@ per.@@ my@@ Loo@@ per@@ ()); m@@ Callback@@ Coun@@ t = 0; m@@ Listen@@ er = new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ C@@ arrier@@ Config@@ Change@@ Listener@@ (m@@ Service@@ Contex@@ t, m@@ Handler@@ , () -@@ > do@@ Callback@@ ()); }
public void test@@ A@@ es@@ G@@ c@@ m@@ 12@@ 8@@ T@@ c@@ p@@ 4@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m au@@ th@@ Cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S_@@ G@@ C@@ M@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ A@@ E@@ AD@@ _@@ KE@@ Y@@ , 12@@ 8@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , null@@ , au@@ th@@ Cryp@@ t, false@@ , 1, true@@ ); }
private static void add@@ Id@@ s(@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de no@@ de@@ , java.util.@@ Set@@ <java.lang.String@@ > id@@ s) { if ((@@ no@@ d@@ e.get@@ Node@@ Type@@ ()) == (@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ d@@ e.@@ E@@ LE@@ M@@ EN@@ T_@@ NO@@ DE@@ )) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Elem@@ ent e@@ lem@@ ent = ((@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Element@@ ) (@@ no@@ de@@ )); java.lang.String id = e@@ lem@@ ent.get@@ Attribute@@ N@@ S@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ AN@@ D@@ RO@@ ID@@ _@@ UR@@ I@@ , com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ AT@@ TR@@ _@@ ID@@ ); if (@@ id.@@ start@@ s@@ With@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ NE@@ W@@ _@@ ID@@ _P@@ RE@@ FI@@ X@@ )) { id@@ s.add@@ (com.android.ide.@@ common.@@ layout.@@ Base@@ View@@ R@@ u@@ le.@@ str@@ ip@@ Id@@ Pre@@ fix@@ (@@ id@@ )); } } org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Node@@ Lis@@ t ch@@ ild@@ re@@ n = no@@ d@@ e.get@@ Ch@@ ild@@ No@@ des@@ (); for (@@ int i = 0, n = ch@@ ild@@ r@@ en@@ .get@@ Length@@ (); i < n@@ ; i++) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de ch@@ il@@ d = ch@@ ild@@ r@@ en@@ .@@ i@@ tem@@ (i@@ ); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ re@@ .@@ Client@@ R@@ ul@@ es@@ En@@ g@@ ine.@@ add@@ Id@@ s(@@ ch@@ ild@@ , id@@ s); } }
boolean add@@ S@@ av@@ ed@@ P@@ r@@ int@@ er@@ (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er p@@ r@@ int@@ er@@ ) { android.net.@@ Ur@@ i p@@ r@@ int@@ er@@ Ur@@ i = p@@ r@@ int@@ er.get@@ U@@ ri@@ (); com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er ol@@ d = find@@ (p@@ r@@ int@@ er@@ U@@ ri@@ ); if (@@ ol@@ d != null@@ ) { if (p@@ r@@ int@@ er.@@ equals(@@ old@@ )) { return false@@ ; } m@@ S@@ av@@ ed@@ P@@ r@@ int@@ er@@ s.@@ remove@@ (@@ old@@ ); } m@@ S@@ av@@ ed@@ P@@ r@@ int@@ er@@ s.@@ add(@@ 0, p@@ r@@ int@@ er@@ ); s@@ a@@ ve@@ (); return true@@ ; }
@java.lang.Override public void send@@ S@@ MS@@ Ex@@ pec@@ t@@ M@@ ore@@ (java.lang.String s@@ ms@@ c@@ P@@ du@@ , java.lang.String p@@ du@@ , android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ S@@ EN@@ D@@ _S@@ M@@ S_@@ EX@@ P@@ EC@@ T_@@ M@@ O@@ RE@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ G@@ sm@@ Sms@@ Message ms@@ g = const@@ r@@ u@@ ct@@ G@@ sm@@ S@@ end@@ Sms@@ R@@ il@@ Request@@ (s@@ ms@@ c@@ P@@ du@@ , p@@ du@@ ); try { radioProx@@ y.@@ send@@ S@@ MS@@ Ex@@ pec@@ t@@ M@@ ore@@ (rr@@ .m@@ Ser@@ ial@@ , ms@@ g@@ ); m@@ Met@@ ri@@ c@@ s.@@ write@@ R@@ il@@ S@@ end@@ Sms@@ (m@@ Phone@@ Id, r@@ .m@@ Ser@@ ial@@ , Sms@@ Session@@ .@@ Ev@@ ent.@@ T@@ ec@@ h@@ .@@ S@@ M@@ S_@@ G@@ S@@ M@@ , Sms@@ Session@@ .@@ Ev@@ ent.@@ Format@@ .@@ S@@ M@@ S_@@ F@@ OR@@ MA@@ T_@@ 3@@ G@@ P@@ P@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ send@@ S@@ MS@@ Ex@@ pec@@ t@@ M@@ ore@@ ", e); } } }
@org.junit.Test public void match@@ Do@@ main@@ W@@ h@@ en@@ Sec@@ ond@@ ary@@ Is@@ Su@@ b@@ do@@ main@@ Of@@ Pri@@ m@@ ary@@ () throw@@ s java.lang.Exception { com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ Do@@ main@@ M@@ atch@@ er do@@ main@@ M@@ atch@@ er = new com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ Do@@ main@@ M@@ atch@@ er@@ ("@@ goog@@ le.@@ com@@ ", java.util.Arrays.@@ as@@ List@@ ("@@ test.@@ goog@@ le.@@ com@@ ")); assert@@ Equal@@ s(@@ Do@@ main@@ M@@ atch@@ er.@@ MA@@ T@@ CH@@ _S@@ EC@@ ON@@ D@@ AR@@ Y@@ , do@@ main@@ M@@ atch@@ er.@@ is@@ Sub@@ Do@@ main@@ ("@@ goog@@ le.@@ com@@ ")); assert@@ Equal@@ s(@@ Do@@ main@@ M@@ atch@@ er.@@ MA@@ T@@ CH@@ _S@@ EC@@ ON@@ D@@ AR@@ Y@@ , do@@ main@@ M@@ atch@@ er.@@ is@@ Sub@@ Do@@ main@@ ("@@ test.@@ goog@@ le.@@ com@@ ")); assert@@ Equal@@ s(@@ Do@@ main@@ M@@ atch@@ er.@@ MA@@ T@@ CH@@ _P@@ R@@ I@@ M@@ AR@@ Y@@ , do@@ main@@ M@@ atch@@ er.@@ is@@ Sub@@ Do@@ main@@ ("@@ ab@@ c@@ d.@@ test.@@ goog@@ le.@@ com@@ ")); }
public android.os.@@ Par@@ cel@@ File@@ Descriptor get@@ In@@ Call@@ To@@ C@@ s@@ R@@ tt@@ P@@ ip@@ e@@ For@@ C@@ s() { return (m@@ In@@ Call@@ To@@ Connection@@ Service@@ Stream@@ s) == null ? null : m@@ In@@ Call@@ To@@ Connection@@ Service@@ Stream@@ s@@ [0@@ ]; }
@java.lang.Override public void ex@@ it@@ () { log@@ ((@@ (("@@ Ex@@ i@@ t Connec@@ ting@@ (@@ " + (m@@ Device@@ )) + "@@ )@@ : ") + (com.android.bluetooth.@@ he@@ ar@@ ing@@ a@@ id.@@ He@@ ar@@ ing@@ A@@ id@@ StateMachine.@@ message@@ W@@ hat@@ To@@ String@@ (get@@ Current@@ Message@@ ().@@ wh@@ at@@ )))); }
public long get@@ R@@ et@@ ain@@ ed@@ Size@@ (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ He@@ a@@ p he@@ ap@@ ) { int in@@ dex = he@@ ap@@ .get@@ Index@@ (); return (in@@ dex >@@ = 0) && (in@@ dex < (m@@ R@@ et@@ ain@@ ed@@ Siz@@ es.@@ length@@ )) ? m@@ R@@ et@@ ain@@ ed@@ Siz@@ es@@ [@@ he@@ ap@@ .get@@ Index@@ ()@@ ] : 0; }
public static void in@@ it@@ (android.@@ pre@@ ference@@ .@@ Pre@@ ference@@ S@@ cre@@ e@@ n pre@@ f@@ S@@ cre@@ en@@ , com.android.@@ phon@@ e.@@ Sub@@ s@@ cription@@ Info@@ Hel@@ p@@ er sub@@ Info@@ Hel@@ per@@ ) { android.@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce call@@ For@@ w@@ ard@@ ing@@ Pre@@ f = pre@@ f@@ S@@ cre@@ en@@ .@@ find@@ Pre@@ ference@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Call@@ Option@@ s.@@ C@@ AL@@ L_@@ F@@ OR@@ W@@ AR@@ D@@ ING@@ _@@ KE@@ Y); call@@ For@@ w@@ ard@@ ing@@ Pre@@ f@@ .set@@ Intent@@ (s@@ ub@@ Info@@ Hel@@ p@@ er.get@@ Intent@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Call@@ For@@ w@@ ard@@ Option@@ s@@ .@@ class@@ )); android.@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce add@@ i@@ tion@@ al@@ G@@ sm@@ Setting@@ s@@ Pre@@ f = pre@@ f@@ S@@ cre@@ en@@ .@@ find@@ Pre@@ ference@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Call@@ Option@@ s.@@ AD@@ DI@@ TION@@ AL@@ _@@ G@@ S@@ M@@ _S@@ E@@ T@@ ING@@ S_@@ KE@@ Y); add@@ i@@ tion@@ al@@ G@@ sm@@ Setting@@ s@@ Pre@@ f@@ .set@@ Intent@@ (s@@ ub@@ Info@@ Hel@@ p@@ er.get@@ Intent@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Add@@ i@@ tion@@ al@@ Call@@ Option@@ s@@ .@@ class@@ )); android.@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce call@@ B@@ ar@@ r@@ ing@@ Pre@@ f = pre@@ f@@ S@@ cre@@ en@@ .@@ find@@ Pre@@ ference@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Call@@ Option@@ s.@@ C@@ AL@@ L_@@ B@@ AR@@ R@@ ING@@ _@@ KE@@ Y); android.telephony.@@ C@@ arrier@@ Config@@ Manager config@@ Manager = ((@@ android.telephony.@@ C@@ arrier@@ Config@@ Manager@@ ) (p@@ ref@@ S@@ cre@@ en@@ .get@@ Context@@ ().get@@ System@@ Service@@ (@@ Context.@@ C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _S@@ ER@@ VIC@@ E@@ ))); android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le b = config@@ Manager.get@@ Config@@ (); if ((@@ b != null@@ ) && (b@@ .get@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y@@ _S@@ H@@ O@@ W@@ _C@@ AL@@ L_@@ B@@ AR@@ R@@ ING@@ _@@ U@@ I@@ _@@ B@@ O@@ O@@ L@@ ))) { call@@ B@@ ar@@ r@@ ing@@ Pre@@ f@@ .set@@ Intent@@ (s@@ ub@@ Info@@ Hel@@ p@@ er.get@@ Intent@@ (com.android.@@ phon@@ e.@@ G@@ sm@@ U@@ m@@ ts@@ Call@@ B@@ ar@@ r@@ ing@@ Option@@ s@@ .@@ class@@ )); } else { pre@@ f@@ S@@ cre@@ en@@ .@@ remove@@ Pre@@ ference@@ (c@@ all@@ B@@ ar@@ r@@ ing@@ Pre@@ f@@ ); } }
@org.junit.Test @@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ S@@ m@@ all@@ Test public void test@@ D@@ on@@ t@@ B@@ ind@@ W@@ h@@ en@@ Null@@ C@@ arrier@@ Package@@ () throw@@ s android.os.@@ RemoteException { set@@ up@@ Resol@@ ver@@ (1@@ ); java.util.List<@@ android.content.@@ p@@ m.@@ Resol@@ ve@@ Info@@ > in@@ fo = new java.util.ArrayList<@@ >(); java.util.@@ Set@@ <java.lang.String@@ > f@@ e@@ ature@@ s = new java.util.@@ Hash@@ Set@@ <@@ >(); f@@ e@@ at@@ ur@@ es.@@ add(@@ Ims@@ Resol@@ ver.@@ ME@@ TA@@ DA@@ TA@@ _@@ E@@ M@@ ER@@ G@@ EN@@ C@@ Y@@ _M@@ M@@ TE@@ L_@@ F@@ E@@ AT@@ U@@ RE@@ ); f@@ e@@ at@@ ur@@ es.@@ add(@@ Ims@@ Resol@@ ver.@@ ME@@ TA@@ DA@@ TA@@ _M@@ M@@ TE@@ L_@@ F@@ E@@ AT@@ U@@ RE@@ ); f@@ e@@ at@@ ur@@ es.@@ add(@@ Ims@@ Resol@@ ver.@@ ME@@ TA@@ DA@@ TA@@ _@@ R@@ C@@ S_@@ F@@ E@@ AT@@ U@@ RE@@ ); info@@ .add@@ (get@@ Resol@@ ve@@ Info@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Resol@@ ver@@ Test.@@ TEST_@@ C@@ AR@@ R@@ I@@ ER_@@ DE@@ FA@@ UL@@ T_@@ N@@ AME@@ , f@@ e@@ at@@ ur@@ es@@ , true@@ )); when(m@@ Mock@@ P@@ M@@ .@@ qu@@ er@@ y@@ Intent@@ Ser@@ vices@@ As@@ User@@ (@@ any@@ (), any@@ Int@@ (), any@@ Int@@ ()@@ )).@@ thenReturn@@ (in@@ fo@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Service@@ Contro@@ lle@@ r cont@@ ro@@ lle@@ r = mock@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Service@@ Control@@ ler@@ .@@ class@@ ); m@@ Test@@ Ims@@ Resol@@ ver.@@ set@@ Ims@@ Service@@ Control@@ ler@@ Fa@@ ctory@@ (@@ new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Resol@@ ver.@@ Ims@@ Service@@ Control@@ ler@@ Fa@@ ctory@@ () { @java.lang.Override public java.lang.String get@@ Service@@ Interface@@ () { return Ims@@ Service@@ Control@@ ler.@@ S@@ ER@@ VIC@@ E_@@ IN@@ TER@@ F@@ AC@@ E@@ ; } @java.lang.Override public com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Service@@ Contro@@ lle@@ r create@@ (android.content.@@ Context contex@@ t, android.content.@@ Comp@@ on@@ ent@@ Name com@@ pon@@ ent@@ Name, com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Service@@ Control@@ ler.@@ Ims@@ Service@@ Control@@ ler@@ Callback@@ s call@@ back@@ s) { when@@ (@@ cont@@ ro@@ l@@ er.get@@ Comp@@ on@@ ent@@ Name@@ ()).@@ thenReturn@@ (@@ com@@ pon@@ ent@@ Name); return cont@@ ro@@ l@@ ler@@ ; } }); set@@ Config@@ C@@ arrier@@ String(@@ 0, null@@ ); m@@ Test@@ Ims@@ Resol@@ ver.@@ po@@ p@@ ul@@ ate@@ Cach@@ e@@ And@@ Start@@ B@@ ind@@ (); wait@@ For@@ Handler@@ Action@@ (m@@ Test@@ Ims@@ Resol@@ ver.@@ get@@ Handler@@ (), com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ ims.@@ Ims@@ Resol@@ ver@@ Test.@@ TEST_@@ TI@@ ME@@ O@@ UT@@ ); ve@@ r@@ if@@ y@@ (@@ cont@@ ro@@ l@@ ler@@ , ne@@ ver@@ ()).@@ b@@ ind@@ (@@ any@@ ()); ve@@ r@@ if@@ y@@ (@@ cont@@ ro@@ l@@ ler@@ , ne@@ ver@@ ()).@@ un@@ b@@ ind@@ (); }
public void test@@ Create@@ Av@@ d@@ With@@ S@@ n@@ ap@@ sho@@ t@@ () { m@@ Av@@ d@@ Manager.@@ create@@ Av@@ d@@ (m@@ Av@@ d@@ Folder@@ , this@@ .getName@@ (), m@@ Target@@ , null@@ , null@@ , null@@ , false@@ , true@@ , m@@ Log@@ ); assert@@ Equal@@ s@@ ((("@@ [@@ P Create@@ d AV@@ D '@@ " + (@@ this@@ .getName@@ ())) + "@@ \@@ ' b@@ ase@@ d on And@@ ro@@ id 0.@@ 0@@ \n@@ ]@@ "), m@@ Log.@@ toString@@ ()); assert@@ True@@ (("@@ Ex@@ pec@@ ted s@@ n@@ ap@@ sho@@ ts.@@ im@@ g in " + (m@@ Av@@ d@@ Folder@@ )), new java.io.File@@ (m@@ Av@@ d@@ Folder@@ , "@@ s@@ n@@ ap@@ sho@@ ts.@@ im@@ g@@ ").@@ exist@@ s()); java.util.Map@@ <java.lang.String, java.lang.String> ma@@ p = com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Project@@ Proper@@ ties.@@ parse@@ Property@@ File@@ (@@ new com.android.sdklib.@@ io.@@ File@@ W@@ rap@@ per@@ (@@ av@@ d@@ Folder@@ , "@@ config.@@ in@@ i@@ "), m@@ Log@@ ); assert@@ Equal@@ s(@@ "@@ true@@ ", m@@ ap@@ .get@@ ("@@ s@@ n@@ ap@@ sho@@ t.@@ pres@@ ent@@ ")); }
public void test@@ 2@@ _@@ 0@@ Set@@ Enabled@@ Get@@ Enabled@@ () throw@@ s java.lang.Exception { if (!(@@ is@@ Bas@@ s@@ B@@ oo@@ st@@ A@@ va@@ il@@ able@@ ())) { return@@ ; } get@@ Bas@@ s@@ B@@ oo@@ st@@ (get@@ Session@@ Id@@ ()); try { m@@ Bas@@ s@@ B@@ oo@@ st.@@ set@@ Enabled@@ (@@ true@@ ); assert@@ True@@ ("@@ in@@ va@@ li@@ d st@@ ate f@@ ro@@ m get@@ Enabled@@ ", m@@ Bas@@ s@@ B@@ oo@@ s@@ t.get@@ Enabled@@ ()); m@@ Bas@@ s@@ B@@ oo@@ st.@@ set@@ Enabled@@ (@@ false@@ ); assert@@ False@@ ("@@ in@@ va@@ li@@ d st@@ ate to get@@ Enabled@@ ", m@@ Bas@@ s@@ B@@ oo@@ s@@ t.get@@ Enabled@@ ()); } catch (java.lang.@@ Illegal@@ State@@ Exception e) { fail@@ ("@@ set@@ Enabled@@ () in w@@ ron@@ g state@@ "); } final@@ l@@ y { re@@ le@@ ase@@ Bas@@ s@@ B@@ oo@@ st@@ (); } }
@java.lang.Override public void fa@@ ctory@@ Res@@ et@@ (@@ int sub@@ Id) { e@@ n@@ for@@ ce@@ Connectivity@@ Inter@@ nal@@ Permission@@ (); if (m@@ User@@ Manager.@@ has@@ User@@ Res@@ tr@@ ic@@ tion@@ (@@ User@@ Manager.@@ D@@ IS@@ AL@@ LO@@ W@@ _N@@ E@@ T@@ W@@ OR@@ K@@ _RE@@ SE@@ T@@ )) { return@@ ; } final long id@@ enti@@ t@@ y = android.os.@@ B@@ ind@@ er.@@ clear@@ Call@@ ing@@ Id@@ enti@@ ty@@ (); try { if ((@@ android.telephony.@@ Sub@@ s@@ cription@@ Manager.@@ is@@ U@@ s@@ able@@ Sub@@ Id@@ Value@@ (s@@ ub@@ Id@@ )) && (!(m@@ User@@ Manager.@@ has@@ User@@ Res@@ tr@@ ic@@ tion@@ (@@ User@@ Manager.@@ D@@ IS@@ AL@@ LO@@ W@@ _C@@ ON@@ FI@@ G@@ _M@@ O@@ B@@ IL@@ E_@@ NE@@ T@@ W@@ OR@@ K@@ S@@ )@@ ))) { set@@ Data@@ Enabled@@ (s@@ ub@@ Id, true@@ ); set@@ Network@@ Selection@@ Mode@@ A@@ ut@@ om@@ ati@@ c@@ (s@@ ub@@ Id); java.lang.String default@@ Net@@ wor@@ k = android.telephony.@@ Telephony@@ Manager.get@@ Telephony@@ Property@@ (m@@ Sub@@ s@@ cription@@ Control@@ l@@ er.get@@ Phone@@ Id@@ (s@@ ub@@ Id@@ ), "@@ ro@@ .@@ telephon@@ y@@ .@@ default@@ _@@ network@@ ", null@@ ); int network@@ Type = (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ default@@ Network@@ ))) ? java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ default@@ Network@@ ) : com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phon@@ e.@@ P@@ RE@@ F@@ ER@@ RE@@ D@@ _N@@ T_@@ M@@ O@@ DE@@ ; set@@ Pre@@ fer@@ re@@ d@@ Network@@ Type@@ (s@@ ub@@ Id, network@@ Type@@ ); m@@ Phon@@ e.@@ set@@ Data@@ R@@ o@@ am@@ ing@@ Enabled@@ (@@ false@@ ); } } final@@ l@@ y { android.os.@@ B@@ ind@@ er.@@ r@@ est@@ ore@@ Call@@ ing@@ Id@@ enti@@ ty@@ (@@ id@@ enti@@ ty@@ ); } }
private void cal@@ c@@ ul@@ ate@@ () { java.util.Map@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ , java.lang.Integ@@ er@@ > to@@ p@@ S@@ or@@ t = get@@ To@@ po@@ log@@ ic@@ al@@ S@@ ort@@ (m@@ He@@ ap@@ .get@@ R@@ oo@@ ts@@ ()); java.util.@@ Set@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > ro@@ o@@ t@@ s = com.google.common.@@ colle@@ ct.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ Root@@ Ob@@ j ro@@ o@@ t : m@@ He@@ ap@@ .get@@ R@@ oo@@ ts@@ ()) { if ((@@ ro@@ o@@ t.get@@ Re@@ fer@@ re@@ d@@ Instance@@ ()) != null@@ ) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce re@@ f = ro@@ o@@ t.get@@ Re@@ fer@@ re@@ d@@ Instance@@ (); i@@ do@@ m.@@ put@@ (re@@ f@@ , ref@@ ); ro@@ o@@ ts.@@ add(@@ ref@@ ); } } boolean chan@@ ge@@ d = true@@ ; while (@@ chan@@ ged@@ ) { chan@@ ge@@ d = false@@ ; for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce no@@ de : to@@ p@@ S@@ or@@ t.@@ key@@ Set@@ ()) { if (!(@@ ro@@ o@@ ts.@@ contain@@ s(@@ no@@ de@@ ))) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce do@@ min@@ at@@ or = null@@ ; for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce pre@@ dec@@ ess@@ or : no@@ d@@ e.get@@ Re@@ feren@@ ces@@ ()) { if (@@ do@@ min@@ at@@ or == null@@ ) { do@@ min@@ at@@ or = pre@@ dec@@ ess@@ or@@ ; } else { if ((@@ i@@ do@@ m@@ .get@@ (p@@ re@@ dec@@ ess@@ or@@ )) != null@@ ) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce f@@ ing@@ er@@ A = do@@ min@@ ator@@ ; com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce f@@ ing@@ er@@ B = pre@@ dec@@ ess@@ or@@ ; while (!(@@ f@@ ing@@ er@@ A@@ .@@ equals(@@ f@@ ing@@ er@@ B@@ ))) { if ((@@ to@@ p@@ S@@ or@@ t.get@@ (f@@ ing@@ er@@ A@@ )) < (@@ to@@ p@@ S@@ or@@ t.get@@ (f@@ ing@@ er@@ B@@ ))) { f@@ ing@@ er@@ B = i@@ do@@ m@@ .get@@ (f@@ ing@@ er@@ B@@ ); } else { f@@ ing@@ er@@ A = i@@ do@@ m@@ .get@@ (f@@ ing@@ er@@ A@@ ); } } do@@ min@@ at@@ or = f@@ ing@@ er@@ A@@ ; } } } } if ((@@ i@@ do@@ m@@ .get@@ (@@ no@@ de@@ )) != do@@ min@@ ator@@ ) { i@@ do@@ m.@@ put@@ (@@ no@@ de@@ , do@@ min@@ ator@@ ); chan@@ ge@@ d = true@@ ; } } } }
public void dis@@ able@@ Profile@@ (java.lang.String c@@ ard@@ Id, java.lang.String icc@@ id, boolean ref@@ res@@ h@@ , java.util.@@ concurrent.@@ Ex@@ ec@@ ut@@ or exec@@ ut@@ or@@ , android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ Result@@ Callback@@ <@@ java.lang.@@ Vo@@ id@@ > call@@ back@@ ) { try { get@@ I@@ E@@ uic@@ c@@ Card@@ Control@@ ler@@ ().@@ dis@@ able@@ Profile@@ (m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), c@@ ard@@ Id, icc@@ id, ref@@ res@@ h@@ , new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ e@@ uicc.@@ ID@@ is@@ able@@ Profile@@ Callback@@ .@@ St@@ ub@@ () { @java.lang.Override public void on@@ Comp@@ lete@@ (@@ int result@@ Code@@ ) { exec@@ ut@@ or.@@ exec@@ ute@@ ((@@ ) -@@ > call@@ back@@ .@@ on@@ Comp@@ lete@@ (@@ result@@ Code@@ , null@@ )); } }); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ TAG, "@@ Error call@@ ing dis@@ able@@ Profile@@ ", e); throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
void st@@ op@@ () { if (com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ V@@ DBG) android.util.Log.@@ v@@ (com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.TAG, "@@ st@@ op@@ ()@@ "); m@@ Sh@@ u@@ t@@ do@@ w@@ n = true@@ ; com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ s@@ Server@@ Socket@@ s) != null@@ ) { com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ s@@ Server@@ Socket@@ s.@@ sh@@ u@@ t@@ do@@ wn@@ (@@ false@@ ); com.android.bluetooth.@@ m@@ ap@@ c@@ li@@ ent.@@ M@@ ns@@ Service.@@ s@@ Server@@ Socket@@ s = null@@ ; } }
@java.lang.Override public void unt@@ ag@@ (java.io.FileDescriptor s@@ ocket@@ Descrip@@ tor@@ ) throw@@ s java.net.@@ Socket@@ Exception { libcore.@@ d@@ al@@ vi@@ k.@@ system.@@ Socket@@ Tag@@ g@@ ing@@ Test.@@ Stat@@ And@@ Descriptor exist@@ ing = li@@ ve@@ Descrip@@ tor@@ s.@@ remove@@ (s@@ ocket@@ Descrip@@ tor@@ .get@@ Int@@ $@@ ()); }
@com.android.annotations.NonNull public java.util.Collection@@ <@@ com.android.builder.@@ de@@ pendenc@@ y.@@ J@@ ar@@ Dependenc@@ y@@ > get@@ J@@ ar@@ Dependenc@@ ies@@ () { return m@@ J@@ ar@@ s; }
public void test@@ Get@@ Sim@@ Co@@ u@@ n@@ try@@ I@@ so@@ () { if ((m@@ Telephony@@ Manager.get@@ Phone@@ Type@@ ()) == (android.@@ telephony.@@ Telephony@@ Manager.@@ P@@ H@@ ON@@ E_@@ TYPE_@@ N@@ ON@@ E@@ )) return@@ ; java.lang.String co@@ u@@ n@@ try@@ Co@@ de = m@@ Telephony@@ Manager.get@@ Sim@@ Co@@ u@@ n@@ try@@ I@@ so@@ (); assert@@ True@@ ((@@ (("@@ Co@@ u@@ n@@ try cod@@ e '@@ " + co@@ u@@ n@@ try@@ Code@@ ) + "@@ ' d@@ id not mat@@ ch ") + (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ IS@@ O@@ _C@@ O@@ UN@@ TR@@ Y@@ _C@@ OD@@ E_@@ P@@ AT@@ TER@@ N@@ )), java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ match@@ es@@ (android.@@ telephony.@@ cts.@@ Telephony@@ ManagerTest.@@ IS@@ O@@ _C@@ O@@ UN@@ TR@@ Y@@ _C@@ OD@@ E_@@ P@@ AT@@ TER@@ N@@ , co@@ u@@ n@@ try@@ Code@@ )); }
private void g@@ ener@@ ate@@ Method@@ M@@ ain@@ (@@ org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ Class@@ Visi@@ tor c@@ v@@ ) { org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ Method@@ Visi@@ tor m@@ v = c@@ v@@ .@@ vi@@ si@@ t@@ Method@@ (((@@ org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ Op@@ cod@@ es.@@ AC@@ C@@ _P@@ U@@ BL@@ IC@@ ) + (@@ org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ Op@@ cod@@ es.@@ AC@@ C@@ _STA@@ TI@@ C@@ )), "@@ main@@ ", "@@ (@@ [@@ L@@ java@@ /@@ lan@@ g@@ /@@ String@@ ;@@ )@@ V@@ ", null@@ , null@@ ); java.lang.String int@@ er@@ nal@@ Name = org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ Typ@@ e.get@@ Inter@@ nal@@ Name@@ (@@ const@@ method@@ hand@@ le.@@ Con@@ st@@ Test@@ .@@ class@@ ); m@@ v@@ .@@ vi@@ si@@ t@@ Method@@ In@@ s@@ n@@ (@@ Op@@ cod@@ es.@@ IN@@ V@@ O@@ KE@@ STA@@ TI@@ C@@ , int@@ er@@ nal@@ Name, "@@ test@@ 1@@ ", "@@ ()@@ L@@ java@@ /@@ lan@@ g@@ /@@ invok@@ e@@ /@@ Method@@ Handle@@ ;@@ ", false@@ ); m@@ v@@ .@@ vi@@ si@@ t@@ Method@@ In@@ s@@ n@@ (@@ Op@@ cod@@ es.@@ IN@@ V@@ O@@ KE@@ STA@@ TI@@ C@@ , int@@ er@@ nal@@ Name, "@@ test@@ 2@@ ", "@@ ()@@ L@@ java@@ /@@ lan@@ g@@ /@@ invok@@ e@@ /@@ Method@@ Type@@ ;@@ ", false@@ ); m@@ v@@ .@@ vi@@ si@@ t@@ In@@ s@@ n@@ (@@ Op@@ cod@@ es.@@ RE@@ T@@ UR@@ N@@ ); m@@ v@@ .@@ vi@@ si@@ t@@ Ma@@ x@@ s@@ ((@@ -1@@ ), (-1@@ )); }
@java.lang.Override public void on@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ W@@ rite@@ (android.bluetooth.Bluetooth@@ G@@ at@@ t g@@ at@@ t, android.@@ bluetooth.Bluetooth@@ G@@ att@@ Char@@ ac@@ ter@@ is@@ ti@@ c char@@ ac@@ ter@@ is@@ ti@@ c@@ , int statu@@ s) { if (@@ write@@ Log@@ For@@ On@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ W@@ rite@@ ()) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ("@@ on@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ W@@ rite@@ : " + stat@@ us@@ )); } long time@@ E@@ l@@ ap@@ se = (android.os.@@ System@@ C@@ lock@@ .@@ el@@ ap@@ sed@@ Re@@ al@@ time@@ ()) - (m@@ Start@@ W@@ rite@@ Time@@ ); if (@@ time@@ E@@ l@@ ap@@ se < ((m@@ W@@ rite@@ Tim@@ e) * 1@@ 00@@ 0@@ )) { write@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ (@@ g@@ at@@ t, (@@ (@@ int@@ ) (@@ time@@ E@@ l@@ ap@@ se / 1@@ 00@@ 0@@ ))); } }
private static boolean is@@ Sup@@ port@@ M@@ MS@@ () { return android.telephony.@@ Sms@@ Manager.get@@ Default@@ ().get@@ C@@ arrier@@ Config@@ Valu@@ es@@ ().get@@ Boole@@ an@@ (@@ Sms@@ Manager.@@ M@@ MS@@ _C@@ ON@@ FI@@ G@@ _M@@ M@@ S_@@ EN@@ ABL@@ ED@@ , true@@ ); }
@java.lang.Override public boolean dis@@ po@@ se@@ () { return super@@ .@@ dis@@ po@@ se@@ (); }
@org.junit.@@ Test@@ (@@ expec@@ ted = java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception@@ .@@ class@@ ) public void test_@@ set@@ TimeZone@@ _@@ null@@ () { builder.@@ set@@ TimeZone@@ (@@ null@@ ); }
@java.lang.Override public boolean is@@ Render@@ script@@ Debug@@ g@@ able@@ () { return render@@ script@@ Debug@@ g@@ able@@ ; }
public static java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l open@@ (@@ java.net.Inet@@ Socket@@ Address ad@@ b@@ S@@ ock@@ Add@@ r@@ , com.android.ddmlib.@@ Device device@@ , int device@@ Port@@ ) throw@@ s com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l ad@@ b@@ Ch@@ an = java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l.@@ open@@ (@@ ad@@ b@@ S@@ ock@@ Add@@ r@@ ); try { ad@@ b@@ Chan@@ .@@ s@@ ocket@@ ().@@ set@@ T@@ c@@ p@@ No@@ De@@ lay@@ (@@ true@@ ); ad@@ b@@ Chan@@ .@@ config@@ ure@@ Block@@ ing@@ (@@ false@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ set@@ Device@@ (@@ ad@@ b@@ Chan@@ , device@@ ); byte@@ [] re@@ q = com.android.ddmlib.@@ Adb@@ Helper.@@ create@@ Adb@@ For@@ w@@ ard@@ Request@@ (@@ null@@ , device@@ Port@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ write@@ (@@ ad@@ b@@ Chan@@ , re@@ q@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ Adb@@ Res@@ pon@@ se res@@ p = com.android.ddmlib.@@ Adb@@ Helper.@@ read@@ Adb@@ Response@@ (@@ ad@@ b@@ Chan@@ , false@@ ); if (!(@@ res@@ p.@@ ok@@ ay@@ )) { throw new java.io.IO@@ Exception("@@ connec@@ tion requ@@ est re@@ jec@@ ted@@ "); } ad@@ b@@ Chan@@ .@@ config@@ ure@@ Block@@ ing@@ (@@ true@@ ); } final@@ l@@ y { ad@@ b@@ Chan@@ .@@ close(); } return ad@@ b@@ Chan@@ ; }
private void assert@@ Do@@ main@@ O@@ ne@@ (java.lang.String do@@ main@@ , java.lang.String exec@@ ut@@ able@@ ) throw@@ s com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Device@@ Not@@ A@@ va@@ il@@ able@@ Exception { java.util.List<@@ android.@@ cts.@@ security.@@ SE@@ Lin@@ u@@ x@@ Host@@ Test.@@ Process@@ D@@ eta@@ il@@ s@@ > pro@@ c@@ s = android.@@ cts.@@ security.@@ SE@@ Lin@@ u@@ x@@ Host@@ Test.@@ Process@@ D@@ eta@@ il@@ s.get@@ Pro@@ c@@ Map@@ (m@@ Device@@ ).get@@ (@@ do@@ main@@ ); java.util.List<@@ android.@@ cts.@@ security.@@ SE@@ Lin@@ u@@ x@@ Host@@ Test.@@ Process@@ D@@ eta@@ il@@ s@@ > ex@@ e@@ Pro@@ c@@ s = android.@@ cts.@@ security.@@ SE@@ Lin@@ u@@ x@@ Host@@ Test.@@ Process@@ D@@ eta@@ il@@ s.get@@ Ex@@ e@@ Map@@ (m@@ Device@@ ).get@@ (@@ exec@@ ut@@ able@@ ); java.lang.String ms@@ g = ((@@ (("@@ Ex@@ pec@@ ted 1 pro@@ ces@@ s in SE@@ Lin@@ u@@ x do@@ ma@@ in \"@@ " + do@@ main@@ ) + "@@ \"@@ ") + " F@@ o@@ un@@ d \"@@ ") + pro@@ c@@ s) + "@@ \"@@ "; assert@@ NotNull@@ (m@@ s@@ g@@ , pro@@ c@@ s); assert@@ Equal@@ s@@ (m@@ s@@ g@@ , 1, pro@@ c@@ s.@@ size@@ ()); ms@@ g = ((((@@ (("@@ Ex@@ pec@@ ted exec@@ ut@@ able \"@@ " + exec@@ ut@@ able@@ ) + "@@ \@@ " in SE@@ Lin@@ u@@ x do@@ ma@@ in \"@@ ") + do@@ main@@ ) + "@@ \"@@ ") + "@@ F@@ ound@@ : \"@@ ") + pro@@ c@@ s) + "@@ \"@@ "; assert@@ Equal@@ s@@ (m@@ s@@ g@@ , exec@@ ut@@ able@@ , pro@@ c@@ s.get@@ (0@@ ).@@ pro@@ c@@ T@@ it@@ le@@ ); ms@@ g = ((@@ (("@@ Ex@@ pec@@ ted 1 pro@@ ces@@ s wit@@ h exec@@ ut@@ able \"@@ " + exec@@ ut@@ able@@ ) + "@@ \"@@ ") + " F@@ o@@ un@@ d \"@@ ") + pro@@ c@@ s) + "@@ \"@@ "; assert@@ NotNull@@ (m@@ s@@ g@@ , ex@@ e@@ Pro@@ c@@ s); assert@@ Equal@@ s@@ (m@@ s@@ g@@ , 1, ex@@ e@@ Pro@@ c@@ s.@@ size@@ ()); ms@@ g = ((((@@ (("@@ Ex@@ pec@@ ted exec@@ ut@@ able \"@@ " + exec@@ ut@@ able@@ ) + "@@ \@@ " in SE@@ Lin@@ u@@ x do@@ ma@@ in \"@@ ") + do@@ main@@ ) + "@@ \"@@ ") + "@@ F@@ ound@@ : \"@@ ") + pro@@ c@@ s) + "@@ \"@@ "; assert@@ Equal@@ s@@ (m@@ s@@ g@@ , exec@@ ut@@ able@@ , ex@@ e@@ Pro@@ c@@ s.get@@ (0@@ ).@@ pro@@ c@@ T@@ it@@ le@@ ); }
public void test@@ Hash@@ Code@@ And@@ Equal@@ s@@ Do@@ es@@ Not@@ P@@ er@@ for@@ m@@ Network@@ I@@ o@@ () throw@@ s java.lang.Exception { final d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .@@ Polic@@ y old@@ Polic@@ y = d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .get@@ Thread@@ Polic@@ y@@ (); d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .set@@ Thread@@ Polic@@ y@@ (@@ new d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .@@ Polic@@ y@@ () { @java.lang.Override public void on@@ W@@ rite@@ To@@ Dis@@ k@@ () { fail@@ ("@@ Block@@ gu@@ ard@@ .@@ Polic@@ y.@@ on@@ W@@ rite@@ To@@ Dis@@ k@@ "); } @java.lang.Override public void on@@ Read@@ From@@ Dis@@ k@@ () { fail@@ ("@@ Block@@ gu@@ ard@@ .@@ Polic@@ y.@@ on@@ Read@@ From@@ Dis@@ k@@ "); } @java.lang.Override public void on@@ Network@@ () { fail@@ ("@@ Block@@ gu@@ ard@@ .@@ Polic@@ y.@@ on@@ Network@@ "); } @java.lang.Override public void on@@ Un@@ buff@@ er@@ ed@@ IO@@ () { fail@@ ("@@ Block@@ gu@@ ard@@ .@@ Polic@@ y.@@ on@@ Un@@ buff@@ er@@ ed@@ IO@@ "); } @java.lang.Override public void on@@ C@@ u@@ st@@ om@@ S@@ low@@ Call@@ (java.lang.String name@@ ) { fail@@ (("@@ Block@@ gu@@ ard@@ .@@ Polic@@ y.@@ on@@ C@@ u@@ st@@ om@@ S@@ low@@ Call@@ : " + name@@ )); } @java.lang.Override public int get@@ Polic@@ y@@ M@@ ask@@ () { return 0; } }); try { java.net.@@ UR@@ L ur@@ l = new java.net.@@ URL@@ ("@@ h@@ ttp@@ :@@ /@@ w@@ w@@ w@@ w@@ w@@ .@@ goog@@ le.@@ com@@ /@@ "); java.net.@@ UR@@ L ur@@ l@@ 2 = new java.net.@@ URL@@ ("@@ h@@ ttp@@ :@@ /@@ /@@ w@@ w@@ .@@ n@@ est.@@ com@@ /@@ "); ur@@ l.@@ equals(@@ ur@@ l@@ 2@@ ); ur@@ l@@ 2.@@ has@@ h@@ Code@@ (); } final@@ l@@ y { d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .set@@ Thread@@ Polic@@ y@@ (@@ old@@ Polic@@ y@@ ); } }
public java.io.FileDescriptor d@@ up@@ (java.io.FileDescriptor old@@ F@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@javax.annotation.@@ N@@ on@@ null void de@@ lete@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ V@@ P@@ ath path@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ De@@ lete@@ File@@ Exception { throw new java.lang.@@ Asser@@ tion@@ Error@@ (); }
@org.junit.Test public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 0@@ 1@@ 5@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 0@@ 1@@ 5@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
private void update@@ Link@@ Properties@@ (com.android.server.@@ connectivity.@@ Network@@ A@@ g@@ ent@@ Info network@@ A@@ g@@ ent@@ , android.net.@@ Link@@ Proper@@ ti@@ es old@@ L@@ p@@ ) { android.net.@@ Link@@ Proper@@ ti@@ es new@@ L@@ p = network@@ A@@ g@@ ent.@@ lin@@ k@@ Properties@@ ; int net@@ Id = network@@ A@@ g@@ ent.@@ network@@ .@@ net@@ Id@@ ; if ((@@ network@@ A@@ g@@ ent.@@ c@@ lat@@ d@@ ) != null@@ ) { network@@ A@@ g@@ ent.@@ c@@ lat@@ d.@@ fix@@ up@@ Link@@ Properties@@ (@@ old@@ L@@ p@@ ); } update@@ Inter@@ fa@@ ces@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ , net@@ Id, network@@ A@@ g@@ ent.@@ network@@ Capabilities@@ ); update@@ M@@ t@@ u@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ ); update@@ T@@ c@@ p@@ Buffer@@ Siz@@ es(@@ network@@ A@@ g@@ ent@@ ); update@@ R@@ out@@ es@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ , net@@ Id); update@@ D@@ ns@@ es@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ , net@@ Id); if (com.android.server.@@ connectivity.@@ N@@ at@@ 4@@ 6@@ 4@@ X@@ lat@@ .@@ requ@@ i@@ res@@ C@@ lat@@ (@@ network@@ A@@ g@@ ent@@ )) { network@@ A@@ g@@ ent.@@ start@@ C@@ lat@@ (m@@ Net@@ d, m@@ Track@@ er@@ Handler@@ ); } if (is@@ Default@@ Network@@ (@@ network@@ A@@ g@@ ent@@ )) { handle@@ Ap@@ pl@@ y@@ Default@@ Prox@@ y@@ (@@ new@@ L@@ p@@ .get@@ H@@ ttp@@ Prox@@ y@@ ()); } else { update@@ Prox@@ y@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ , network@@ A@@ g@@ ent@@ ); } if (!(@@ java.util.@@ Object@@ s.@@ equal@@ s@@ (@@ new@@ L@@ p@@ , old@@ L@@ p@@ ))) { not@@ if@@ y@@ I@@ fa@@ ces@@ Changed@@ For@@ Network@@ Stat@@ s(); not@@ if@@ y@@ Network@@ Callback@@ s(@@ network@@ A@@ g@@ ent@@ , Connectivity@@ Manager.@@ C@@ AL@@ L@@ B@@ AC@@ K_@@ IP@@ _C@@ H@@ AN@@ G@@ ED@@ ); } m@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Track@@ er.@@ handle@@ Check@@ Ke@@ e@@ p@@ al@@ i@@ v@@ es@@ S@@ ti@@ l@@ Valid@@ (@@ network@@ A@@ g@@ ent@@ ); }
private void con@@ ference@@ (java.lang.String call@@ Id@@ 1, java.lang.String call@@ Id@@ 2@@ ) { android.telecom.@@ Log.@@ d@@ (@@ this@@ , "@@ con@@ feren@@ ce %@@ s, %@@ s", call@@ Id@@ 1, call@@ Id@@ 2@@ ); android.telecom.@@ Connec@@ tion connection@@ 2 = find@@ Connection@@ For@@ Action@@ (c@@ all@@ Id@@ 2, "@@ con@@ ference@@ "); android.telecom.@@ Con@@ feren@@ ce con@@ ference@@ 2 = get@@ Null@@ Con@@ ference@@ (); if (@@ connection@@ 2 == (android.@@ telecom.@@ Connection@@ Service@@ .get@@ Null@@ Connection@@ ())) { con@@ ference@@ 2 = find@@ Con@@ ference@@ For@@ Action@@ (c@@ all@@ Id@@ 2, "@@ con@@ ference@@ "); if (@@ con@@ ference@@ 2 == (get@@ Null@@ Con@@ ference@@ ())) { android.telecom.@@ Log.@@ w@@ (@@ this@@ , "@@ Connection@@ 2 or Con@@ ference@@ 2 mis@@ s@@ ing in con@@ feren@@ ce requ@@ est %@@ s.@@ ", call@@ Id@@ 2@@ ); return@@ ; } } android.telecom.@@ Connec@@ tion connection@@ 1 = find@@ Connection@@ For@@ Action@@ (c@@ all@@ Id@@ 1, "@@ con@@ ference@@ "); if (@@ connection@@ 1 == (android.@@ telecom.@@ Connection@@ Service@@ .get@@ Null@@ Connection@@ ())) { android.telecom.@@ Con@@ feren@@ ce con@@ ference@@ 1 = find@@ Con@@ ference@@ For@@ Action@@ (c@@ all@@ Id@@ 1, "@@ add@@ Connection@@ "); if (@@ con@@ ference@@ 1 == (get@@ Null@@ Con@@ ference@@ ())) { android.telecom.@@ Log.@@ w@@ (@@ this@@ , "@@ Connection@@ 1 or Con@@ ference@@ 1 mis@@ s@@ ing in con@@ feren@@ ce requ@@ est %@@ s.@@ ", call@@ Id@@ 1); } else { if (@@ connection@@ 2 != (android.@@ telecom.@@ Connection@@ Service@@ .get@@ Null@@ Connection@@ ())) { con@@ ference@@ 1.@@ on@@ M@@ er@@ ge@@ (@@ connection@@ 2@@ ); } else { android.telecom.@@ Log.@@ w@@ t@@ f@@ (@@ this@@ , ("@@ Th@@ er@@ e c@@ an on@@ l@@ y b@@ e on@@ e con@@ feren@@ ce an@@ d an at@@ tem@@ p@@ t w@@ a@@ s m@@ ad@@ e to " + "@@ merg@@ e t@@ w@@ o con@@ feren@@ ces.@@ ")); return@@ ; } } else { if (@@ con@@ ference@@ 2 != (get@@ Null@@ Con@@ ference@@ ())) { con@@ ference@@ 2.@@ on@@ M@@ er@@ ge@@ (@@ connection@@ 1); } else { on@@ Con@@ ference@@ (@@ connection@@ 1, connection@@ 2@@ ); } } }
private void update@@ F@@ on@@ t@@ L@@ ab@@ el@@ () { m@@ F@@ on@@ t@@ B@@ utton@@ .set@@ Text@@ (m@@ Valu@@ es.@@ tex@@ t@@ F@@ on@@ t.get@@ F@@ on@@ t@@ Name@@ ()); }
public static org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l get@@ Instance@@ (@@ byte@@ [] in@@ , java.lang.String en@@ cod@@ ing@@ ) throw@@ s java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception { try { if (@@ org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l.@@ P@@ K@@ I@@ _P@@ A@@ TH@@ _N@@ AME@@ .@@ equals(@@ en@@ cod@@ ing@@ )) { return ((@@ org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l@@ ) (@@ org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l.@@ A@@ S@@ N@@ 1.@@ de@@ code@@ (in@@ ))); } else if (@@ org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l.@@ P@@ K@@ C@@ S@@ 7@@ _N@@ AME@@ .@@ equals(@@ en@@ cod@@ ing@@ )) { return org.apache.harmony.@@ security.@@ provider.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ Path@@ Imp@@ l.get@@ Cer@@ t@@ Path@@ From@@ Content@@ Info@@ (((@@ org.apache.harmony.@@ security.@@ p@@ k@@ c@@ s@@ 7@@ .@@ Content@@ Info@@ ) (@@ Content@@ Info.@@ A@@ S@@ N@@ 1.@@ de@@ code@@ (in@@ )))); } else { throw new java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception(("@@ Un@@ suppor@@ ted en@@ cod@@ ing@@ : " + en@@ cod@@ ing@@ )); } } catch (java.io.IOException e) { throw new java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception("@@ In@@ cor@@ re@@ c@@ t en@@ code@@ d for@@ m@@ ", e); } }
@java.lang.Override public boolean is@@ Gener@@ ated@@ () { return false@@ ; }
public void set@@ Package@@ (@@ com.goog@@ le@@ .@@ do@@ c@@ la@@ va@@ .@@ Package@@ Info p@@ kg@@ ) { m@@ Cont@@ ain@@ ing@@ Pack@@ age = p@@ kg@@ ; }
@java.lang.Override public boolean do@@ es@@ Result@@ C@@ on@@ for@@ m@@ To@@ Polic@@ y@@ (@@ org.conscrypt.@@ ct.@@ C@@ T@@ V@@ er@@ if@@ ic@@ ation@@ Res@@ ult result@@ , java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ i@@ cat@@ e cer@@ t@@ if@@ ic@@ ate@@ ) { java.util.List<@@ org.conscrypt.@@ ct.@@ C@@ T@@ Log@@ Info@@ > log@@ Se@@ t = new java.util.@@ Hash@@ Set@@ (); for (@@ org.conscrypt.@@ ct.@@ V@@ er@@ if@@ i@@ ed@@ S@@ C@@ T ve@@ r@@ if@@ i@@ ed@@ S@@ C@@ T : res@@ ul@@ t.get@@ Valid@@ S@@ C@@ T@@ s@@ ()) { org.conscrypt.@@ ct.@@ C@@ T@@ Log@@ Info lo@@ g = log@@ Stor@@ e.get@@ K@@ no@@ wn@@ Log@@ (@@ ve@@ r@@ if@@ i@@ ed@@ S@@ C@@ T@@ .@@ s@@ c@@ t.get@@ Log@@ ID@@ ()); if (@@ lo@@ g != null@@ ) { log@@ Set@@ .@@ add(@@ log@@ ); } } return (@@ log@@ Set@@ .@@ size@@ ()) >@@ = (m@@ in@@ im@@ um@@ Log@@ Count@@ ); }
public static android.os.@@ Z@@ y@@ go@@ te@@ Pro@@ ces@@ s get@@ Process@@ () { synchronized@@ (android.@@ w@@ eb@@ k@@ it.@@ W@@ eb@@ View@@ Z@@ y@@ go@@ te@@ .@@ s@@ Lock) { android.@@ w@@ eb@@ k@@ it.@@ W@@ eb@@ View@@ Z@@ y@@ go@@ te@@ .@@ connect@@ To@@ Z@@ y@@ go@@ te@@ I@@ f@@ Ne@@ ed@@ ed@@ (); return android.@@ w@@ eb@@ k@@ it.@@ W@@ eb@@ View@@ Z@@ y@@ go@@ te@@ .@@ s@@ Z@@ y@@ go@@ te@@ ; } }
@javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ Dec@@ l@@ ar@@ ed@@ Type@@ No@@ de get@@ N@@ Node@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ja@@ y@@ ce.@@ Node@@ Leve@@ l min@@ im@@ um@@ Level@@ ) throw@@ s com.android.jack.library.@@ Library@@ Format@@ Exception, com.android.jack.library.@@ Library@@ IO@@ Exception { com.android.jack.@@ ja@@ y@@ ce.@@ Dec@@ l@@ ar@@ ed@@ Type@@ No@@ de typ@@ e = n@@ no@@ d@@ e.get@@ (); if ((@@ typ@@ e == null@@ ) || (!(@@ typ@@ e.get@@ Level@@ ().@@ ke@@ e@@ p@@ (m@@ in@@ im@@ um@@ Level@@ )@@ ))) { java.io.@@ Input@@ Stream in = null@@ ; try { in = new java.io.@@ Buffer@@ ed@@ InputStream@@ (s@@ ource@@ .get@@ InputStream@@ ()); com.android.jack.@@ ja@@ y@@ ce.@@ Node@@ Leve@@ l load@@ Leve@@ l = get@@ Level@@ For@@ Load@@ ing@@ (m@@ in@@ im@@ um@@ Level@@ ); typ@@ e = com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Read@@ er@@ Fa@@ ctory@@ .get@@ (in@@ put@@ Jack@@ Library@@ , in@@ ).@@ read@@ Type@@ (@@ load@@ Level@@ ); n@@ no@@ de = new java.lang.@@ re@@ f.@@ S@@ o@@ f@@ t@@ Reference@@ <@@ com.android.jack.@@ ja@@ y@@ ce.@@ Dec@@ l@@ ar@@ ed@@ Type@@ Node@@ >@@ (@@ typ@@ e); } catch (com.android.s@@ ched.@@ util.@@ file.@@ W@@ ron@@ g@@ Permission@@ Exception e) { throw new com.android.jack.library.@@ Library@@ IO@@ Exception@@ (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ (), e); } catch (java.io.IOException e) { throw new com.android.jack.library.@@ Library@@ IO@@ Exception@@ (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ (), e); } catch (com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Format@@ Exception e) { com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ SE@@ V@@ ER@@ E, (("@@ Librar@@ y " + (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ ().get@@ Des@@ cription@@ ())) + " is in@@ valid@@ "), e); throw new com.android.jack.library.@@ Library@@ Format@@ Exception@@ (in@@ put@@ Jack@@ Library@@ .get@@ Location@@ ()); } final@@ l@@ y { try { if (@@ in != null@@ ) { in@@ .@@ close(); } } catch (java.io.IOException e) { com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ W@@ AR@@ N@@ ING@@ , ("@@ Faile@@ d to c@@ lo@@ se in@@ put str@@ e@@ am on " + (s@@ ource@@ .get@@ Location@@ ().get@@ Des@@ cription@@ ()@@ )), e); } tr@@ ac@@ er.get@@ St@@ ati@@ s@@ ti@@ c@@ (com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Class@@ Or@@ Interface@@ Load@@ er.@@ N@@ NO@@ D@@ E_@@ RE@@ LO@@ AD@@ ).@@ add@@ (((@@ load@@ Count@@ ) > 0@@ )); (@@ load@@ Count@@ )@@ ++@@ ; } return type@@ ; }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null protected java.util.List<@@ com.android.sched.util.@@ cod@@ ec@@ .@@ Pa@@ ir@@ Co@@ dec@@ .@@ Pa@@ ir@@ <@@ T, U@@ >@@ > con@@ ver@@ t@@ B@@ ack@@ (@@ @javax.annotation.@@ N@@ on@@ null java.util.Map@@ <@@ T, U@@ > data@@ ) { java.util.List<@@ com.android.sched.util.@@ cod@@ ec@@ .@@ Pa@@ ir@@ Co@@ dec@@ .@@ Pa@@ ir@@ <@@ T, U@@ >@@ > li@@ s@@ t = new java.util.ArrayList<@@ Pa@@ ir@@ Co@@ dec@@ .@@ Pa@@ ir@@ <@@ T, U@@ >@@ (d@@ ata@@ .@@ size@@ ()); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <@@ T, U@@ > e@@ n@@ try : data@@ .@@ e@@ n@@ try@@ Set@@ ()) { li@@ st.@@ add@@ (@@ new com.android.sched.util.@@ cod@@ ec@@ .@@ Pa@@ ir@@ Co@@ dec@@ .@@ Pa@@ ir@@ <@@ T, U@@ >@@ (e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ())); } return list@@ ; }
@java.lang.Override public void on@@ Play@@ back@@ State@@ Changed@@ (android.@@ media.@@ session@@ .@@ Play@@ back@@ State state@@ ) { synchronized@@ (m@@ W@@ ait@@ Lock) { m@@ On@@ Play@@ back@@ State@@ Changed@@ Cal@@ le@@ d = true@@ ; m@@ W@@ ait@@ Lock@@ .@@ not@@ if@@ y@@ (); } }
public void add@@ Imp@@ or@@ ted@@ Library@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.library.@@ Input@@ Librar@@ y source@@ ) { import@@ ed@@ Librar@@ i@@ es.@@ add@@ (s@@ ource@@ ); }
private final void res@@ et@@ Context@@ () { org.conscrypt.@@ Open@@ SSL@@ Dig@@ est@@ Context ct@@ x = new org.conscrypt.@@ Open@@ SSL@@ Dig@@ est@@ Context@@ (@@ org.conscrypt.@@ NativeCryp@@ to.@@ EV@@ P@@ _M@@ D@@ _C@@ T@@ X_@@ create@@ ()); org.conscrypt.@@ NativeCryp@@ to.@@ EV@@ P@@ _M@@ D@@ _C@@ T@@ X_@@ in@@ it@@ (@@ ct@@ x@@ .get@@ Context@@ ()); if (@@ sign@@ ing@@ ) { enable@@ D@@ S@@ A@@ Sign@@ ature@@ Non@@ ce@@ H@@ ard@@ en@@ ing@@ I@@ f@@ Appli@@ c@@ able@@ (); org.conscrypt.@@ NativeCryp@@ to.@@ EV@@ P@@ _S@@ ign@@ In@@ it@@ (@@ ct@@ x@@ .get@@ Context@@ (), ev@@ p@@ Algorith@@ m@@ ); } else { org.conscrypt.@@ NativeCryp@@ to.@@ EV@@ P@@ _@@ V@@ er@@ if@@ y@@ In@@ it@@ (@@ ct@@ x@@ .get@@ Context@@ (), ev@@ p@@ Algorith@@ m@@ ); } this@@ .@@ ct@@ x = ct@@ x@@ ; }
private void sho@@ w@@ Error@@ And@@ F@@ in@@ is@@ h@@ (java.lang.String ur@@ l@@ ) { if ((m@@ Error@@ Di@@ alo@@ g@@ ) != null@@ ) { m@@ Error@@ Di@@ alo@@ g.@@ set@@ Message@@ (get@@ Res@@ ources@@ ().get@@ String(@@ R.@@ str@@ ing.@@ setting@@ s@@ _@@ s@@ a@@ f@@ et@@ y@@ le@@ g@@ al@@ _@@ ac@@ tivity@@ _@@ un@@ re@@ ach@@ able@@ , ur@@ l@@ )); m@@ Error@@ Di@@ alo@@ g.@@ sho@@ w@@ (); } else { m@@ Error@@ Di@@ alo@@ g = new android.app.@@ Al@@ er@@ t@@ Di@@ alo@@ g.@@ Builder@@ (@@ this@@ ).set@@ Message@@ (get@@ Res@@ ources@@ ().get@@ String(@@ R.@@ str@@ ing.@@ setting@@ s@@ _@@ s@@ a@@ f@@ et@@ y@@ le@@ g@@ al@@ _@@ ac@@ tivity@@ _@@ un@@ re@@ ach@@ able@@ , ur@@ l@@ )).@@ set@@ T@@ it@@ le@@ (@@ R.@@ str@@ ing.@@ setting@@ s@@ _@@ s@@ a@@ f@@ et@@ y@@ le@@ g@@ al@@ _@@ ac@@ tivity@@ _@@ ti@@ t@@ le@@ ).set@@ Posi@@ tive@@ B@@ utton@@ (android.@@ R.@@ str@@ ing.@@ ok@@ , this@@ ).set@@ On@@ Can@@ cel@@ Listener@@ (@@ this@@ ).set@@ Can@@ cel@@ able@@ (@@ true@@ ).@@ sho@@ w@@ (); } }
public boolean c@@ li@@ ck@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Control@@ P@@ o@@ int mo@@ u@@ se@@ Po@@ s) { int x = get@@ Z@@ oo@@ m@@ X@@ (); if (@@ x > 0) { if ((@@ (m@@ ou@@ se@@ P@@ os.@@ x@@ ) >@@ = x@@ ) && ((@@ mo@@ u@@ se@@ P@@ os.@@ x@@ ) <@@ = (@@ x + (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Render@@ Pre@@ view@@ Manager.@@ Z@@ O@@ O@@ M@@ _@@ IC@@ ON@@ _@@ W@@ ID@@ TH@@ )@@ ))) { int y = get@@ Z@@ oo@@ m@@ Y@@ (); if ((@@ (m@@ ou@@ se@@ P@@ os.@@ y@@ ) >@@ = y@@ ) && ((@@ mo@@ u@@ se@@ P@@ os.@@ y@@ ) <@@ = (@@ y + (@@ 3 * (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Render@@ Pre@@ view@@ Manager.@@ Z@@ O@@ O@@ M@@ _@@ IC@@ ON@@ _@@ H@@ E@@ I@@ G@@ H@@ T@@ )@@ ))) { if ((@@ mo@@ u@@ se@@ P@@ os.@@ y@@ ) < (@@ y + (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Render@@ Pre@@ view@@ Manager.@@ Z@@ O@@ M@@ _@@ IC@@ ON@@ _@@ H@@ E@@ I@@ G@@ H@@ T@@ ))) { z@@ oo@@ m@@ In@@ (); } else if ((@@ mo@@ u@@ se@@ P@@ os.@@ y@@ ) < (@@ y + (@@ 2 * (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Render@@ Pre@@ view@@ Manager.@@ Z@@ O@@ M@@ _@@ IC@@ ON@@ _@@ H@@ E@@ I@@ G@@ H@@ T@@ )@@ ))) { z@@ oo@@ m@@ Out@@ (); } else { z@@ oo@@ m@@ Res@@ et@@ (); } } return true@@ ; } com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ g@@ le@@ 2.@@ Render@@ Pre@@ vi@@ e@@ w pre@@ vi@@ e@@ w = get@@ Pre@@ view@@ (m@@ ou@@ se@@ Po@@ s); if (p@@ re@@ vi@@ e@@ w != null@@ ) { boolean handle@@ d = pre@@ view@@ .@@ c@@ li@@ ck@@ ((((@@ mo@@ u@@ se@@ P@@ os.@@ x@@ ) - (get@@ X@@ ())) - (p@@ re@@ view@@ .get@@ X@@ ()@@ )), ((@@ (m@@ ou@@ se@@ P@@ os.@@ y@@ ) - (get@@ Y@@ ())) - (p@@ re@@ view@@ .get@@ Y@@ ()))); if (@@ handle@@ d@@ ) { mo@@ v@@ ed@@ (m@@ ou@@ se@@ Po@@ s); return true@@ ; } } return false@@ ; }
@org.junit.Test public void test@@ System@@ Run@@ n@@ ing@@ () { when(m@@ Network@@ S@@ cor@@ er@@ App@@ Manager.get@@ Active@@ S@@ cor@@ er@@ ()).@@ thenReturn@@ (com.android.server.@@ Network@@ S@@ core@@ Service@@ Test.@@ NE@@ W@@ _S@@ C@@ OR@@ ER@@ ); m@@ Network@@ S@@ core@@ Service.@@ s@@ ystem@@ Run@@ n@@ ing@@ (); ve@@ r@@ if@@ y@@ (m@@ Context@@ ).@@ b@@ ind@@ Service@@ As@@ User@@ (com.android.server.@@ device@@ po@@ lic@@ y.@@ Mock@@ Utils.@@ check@@ Intent@@ (@@ new android.content.@@ Intent@@ ().@@ set@@ Comp@@ on@@ ent@@ (@@ new android.content.@@ Comp@@ on@@ ent@@ Name@@ (com.android.server.@@ Network@@ S@@ core@@ Service@@ Test.@@ NE@@ W@@ _S@@ C@@ OR@@ ER@@ .m@@ Package@@ Name, com.android.server.@@ Network@@ S@@ core@@ Service@@ Test.@@ NE@@ W@@ _S@@ C@@ OR@@ ER@@ .m@@ S@@ cor@@ ing@@ Service@@ Class@@ Name@@ )@@ )), any@@ (android.content.@@ Service@@ Connection@@ .@@ class@@ ), e@@ q@@ ((@@ (android.content.@@ Context.@@ B@@ IN@@ D_@@ A@@ UT@@ O@@ _C@@ RE@@ A@@ TE@@ ) | (android.content.@@ Context.@@ B@@ IN@@ D_@@ F@@ O@@ RE@@ G@@ RO@@ UN@@ D@@ _S@@ ER@@ VIC@@ E@@ )@@ )), e@@ q@@ (@@ User@@ Hand@@ le.@@ S@@ Y@@ S@@ TE@@ M@@ )); }
private void in@@ it@@ () { final android.os.@@ Mess@@ eng@@ er mess@@ eng@@ er = get@@ Mess@@ eng@@ er@@ (); if (m@@ ess@@ eng@@ er == null@@ ) { f@@ at@@ al@@ ("@@ Faile@@ d to ob@@ t@@ a@@ in ser@@ vice Mess@@ eng@@ er@@ "); } android.os.@@ Handler@@ Th@@ re@@ ad t = new android.os.@@ Handler@@ Thread@@ ("@@ N@@ s@@ d@@ Manager@@ "); t.@@ start@@ (); m@@ Handle@@ r = new android.net.@@ ns@@ d.@@ N@@ s@@ d@@ Manager.@@ Service@@ Handler@@ (@@ t.get@@ Loo@@ per@@ ()); m@@ As@@ ync@@ Chan@@ ne@@ l.@@ connect@@ (m@@ Contex@@ t, m@@ Handler@@ , mess@@ eng@@ er@@ ); try { m@@ Connec@@ ted@@ .@@ aw@@ ait@@ (); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { f@@ at@@ al@@ ("@@ Inter@@ rup@@ ted w@@ a@@ i@@ t at in@@ it@@ "); } }
public void test@@ In@@ stall@@ _@@ w@@ ith@@ B@@ ad@@ ly@@ For@@ m@@ ed@@ Bund@@ le@@ Version@@ () throw@@ s java.lang.Exception { java.lang.String in@@ valid@@ Bund@@ le@@ Ver@@ sion = "@@ A@@ 0@@ 1.@@ 00@@ 1@@ "; byte@@ [] ver@@ sion@@ Byte@@ s = libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ Bund@@ le@@ Version@@ .@@ Bytes@@ (in@@ valid@@ Bund@@ le@@ Version@@ , libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er@@ Test.@@ NE@@ W@@ _@@ R@@ UL@@ E@@ S_@@ V@@ E@@ RS@@ I@@ ON@@ , 1); libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le b@@ und@@ le = libcore.@@ t@@ z@@ data@@ .@@ update@@ 2.@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er@@ Test.@@ create@@ TimeZone@@ Bund@@ le@@ With@@ Version@@ Bytes@@ (@@ ver@@ sion@@ Bytes@@ ); assert@@ Equal@@ s(@@ TimeZone@@ Bund@@ le@@ In@@ stall@@ er.@@ IN@@ STA@@ L@@ L_@@ FA@@ IL@@ _@@ B@@ AD@@ _@@ B@@ UN@@ D@@ L@@ E_@@ S@@ TR@@ U@@ C@@ T@@ U@@ RE@@ , in@@ stall@@ er.@@ in@@ stall@@ With@@ Error@@ Code@@ (b@@ und@@ le@@ .get@@ Bytes@@ ())); assert@@ No@@ Content@@ In@@ st@@ al@@ le@@ d@@ (); }
void add@@ S@@ wit@@ ch@@ Bas@@ ic@@ Block@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ c@@ f@@ g.@@ S@@ wit@@ ch@@ Bas@@ ic@@ B@@ loc@@ k b@@ lock@@ , @javax.annotation.@@ N@@ on@@ null java.util.List<@@ com.android.jack.ir.ast.J@@ C@@ ase@@ State@@ ment@@ > case@@ s, @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ State@@ m@@ ent default@@ C@@ as@@ e) { assert b@@ loc@@ k != null@@ ; assert case@@ s != null@@ ; assert default@@ C@@ as@@ e != null@@ ; b@@ lock@@ s@@ To@@ Resol@@ v@@ e.@@ add@@ (@@ new com.android.jack.@@ c@@ f@@ g.@@ For@@ w@@ ard@@ B@@ r@@ an@@ ch@@ Resol@@ ver.@@ S@@ wit@@ ch@@ Bas@@ ic@@ Block@@ To@@ Resol@@ ve@@ (b@@ lock@@ , case@@ s, default@@ C@@ ase@@ )); }
private java.lang.String g@@ ener@@ ate@@ Text@@ S@@ rc@@ (com.android.@@ m@@ s.@@ model.@@ S@@ l@@ id@@ es@@ ho@@ w@@ Mode@@ l s@@ l@@ id@@ es@@ ho@@ w@@ , int posi@@ tion@@ ) { final java.lang.String pre@@ fi@@ x = "@@ tex@@ t@@ _@@ "; final java.lang.String po@@ st@@ fi@@ x = "@@ .@@ t@@ xt@@ "; java.lang.String@@ Builder s@@ r@@ c = new java.lang.String@@ Builder@@ (p@@ re@@ fix@@ ).@@ append(@@ posi@@ tion@@ ).@@ append(@@ po@@ st@@ fix@@ ); boolean has@@ D@@ up@@ S@@ r@@ c = false@@ ; do { for (com.android.@@ m@@ m@@ s.@@ model.@@ S@@ l@@ ide@@ Mode@@ l mode@@ l : s@@ l@@ id@@ es@@ ho@@ w@@ ) { if (m@@ o@@ de@@ l.@@ has@@ Text@@ ()) { if (m@@ o@@ de@@ l.get@@ Text@@ ().get@@ S@@ rc@@ ().@@ equals(@@ s@@ r@@ c.@@ toString@@ ())) { s@@ r@@ c = new java.lang.String@@ Builder@@ (p@@ re@@ fix@@ ).@@ append@@ ((@@ posi@@ tion + 1@@ )).@@ append(@@ po@@ st@@ fix@@ ); has@@ D@@ up@@ S@@ r@@ c |@@ = true@@ ; break@@ ; } } has@@ D@@ up@@ S@@ r@@ c &@@ = false@@ ; } while (@@ has@@ D@@ up@@ S@@ r@@ c ); return s@@ r@@ c.@@ toString@@ (); }
@java.lang.Override public void end@@ Visi@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ New@@ Ar@@ ra@@ y x@@ ) { check@@ (@@ x@@ .get@@ Array@@ Type@@ (), x@@ ); }
@java.lang.Override public int get@@ Display@@ R@@ ule@@ (android.@@ telephony.@@ Service@@ State service@@ State@@ ) { int r@@ ule@@ ; if ((@@ ((m@@ Par@@ ent@@ App@@ ) != null@@ ) && ((m@@ Par@@ ent@@ App@@ .get@@ Uicc@@ Card@@ ()) != null@@ )) && ((m@@ Par@@ ent@@ App@@ .get@@ Uicc@@ Card@@ ().get@@ Oper@@ ator@@ B@@ r@@ and@@ O@@ verrid@@ e@@ ()) != null@@ )) { r@@ ul@@ e = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _P@@ L@@ M@@ N@@ ; } else if ((@@ android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (get@@ Service@@ Provider@@ Name@@ ())) || ((m@@ S@@ p@@ n@@ Display@@ Con@@ di@@ tion@@ ) == (-1@@ ))) { r@@ ul@@ e = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _P@@ L@@ M@@ N@@ ; } else if (s@@ ho@@ ul@@ d@@ Con@@ s@@ id@@ er@@ Service@@ State@@ R@@ o@@ am@@ ing@@ () ? !@@ (@@ service@@ Stat@@ e.get@@ R@@ o@@ am@@ ing@@ ()) : is@@ On@@ M@@ atch@@ ing@@ P@@ l@@ m@@ n@@ (@@ service@@ Stat@@ e.get@@ Oper@@ ator@@ Num@@ er@@ ic@@ ())) { r@@ ul@@ e = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _S@@ P@@ N@@ ; if ((@@ (m@@ S@@ p@@ n@@ Display@@ Con@@ di@@ tion@@ ) & 1@@ ) == 1@@ ) { r@@ ul@@ e |@@ = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _P@@ L@@ M@@ N@@ ; } } else { r@@ ul@@ e = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _P@@ L@@ M@@ N@@ ; if ((@@ (m@@ S@@ p@@ n@@ Display@@ Con@@ di@@ tion@@ ) & 2@@ ) == 0) { r@@ ul@@ e |@@ = S@@ P@@ N@@ _@@ R@@ UL@@ E_@@ S@@ H@@ O@@ W@@ _S@@ P@@ N@@ ; } } return r@@ ule@@ ; }
@java.lang.Override public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l d@@ est@@ , int flag@@ s) { d@@ est.@@ write@@ Long@@ (m@@ in@@ H@@ om@@ e@@ Down@@ lin@@ k@@ B@@ and@@ wid@@ th@@ ); d@@ est.@@ write@@ Long@@ (m@@ in@@ H@@ om@@ e@@ U@@ pl@@ in@@ k@@ B@@ and@@ wid@@ th@@ ); d@@ est.@@ write@@ Long@@ (m@@ in@@ R@@ o@@ am@@ ing@@ Down@@ lin@@ k@@ B@@ and@@ wid@@ th@@ ); d@@ est.@@ write@@ Long@@ (m@@ in@@ R@@ o@@ am@@ ing@@ U@@ pl@@ in@@ k@@ B@@ and@@ wid@@ th@@ ); d@@ est.@@ write@@ Long@@ (@@ update@@ Inter@@ val@@ In@@ Min@@ ut@@ es@@ ); d@@ est.@@ write@@ String(@@ update@@ Method@@ ); d@@ est.@@ write@@ String(@@ res@@ tr@@ ic@@ tion@@ ); d@@ est.@@ write@@ String(@@ po@@ lic@@ y@@ Server@@ U@@ ri@@ ); d@@ est.@@ write@@ String(@@ user@@ name@@ ); d@@ est.@@ write@@ String@@ (b@@ ase@@ 6@@ 4@@ En@@ cod@@ ed@@ P@@ ass@@ wor@@ d@@ ); d@@ est.@@ write@@ String(@@ tr@@ u@@ st@@ Root@@ Cer@@ t@@ Ur@@ l@@ ); d@@ est.@@ write@@ ByteArray@@ (@@ tr@@ u@@ st@@ Root@@ Cer@@ t@@ Sh@@ a@@ 25@@ 6@@ F@@ ing@@ er@@ p@@ r@@ int@@ ); d@@ est.@@ write@@ String@@ Array@@ (@@ ex@@ c@@ lu@@ d@@ ed@@ S@@ s@@ id@@ List@@ ); android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y.@@ write@@ Pro@@ to@@ Port@@ Map@@ (d@@ est@@ , requ@@ ire@@ d@@ Pro@@ to@@ Port@@ Map@@ ); d@@ est.@@ write@@ Int@@ (m@@ a@@ x@@ im@@ um@@ B@@ ss@@ Load@@ Value@@ ); android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y.@@ write@@ R@@ o@@ am@@ ing@@ Par@@ t@@ ner@@ List@@ (d@@ est@@ , flag@@ s, pre@@ fer@@ re@@ d@@ R@@ o@@ am@@ ing@@ Par@@ t@@ ner@@ List@@ ); }
@java.lang.Override public void on@@ Start@@ (android.content.@@ Int@@ ent int@@ ent@@ , int start@@ id@@ ) { android.util.Log.d@@ (com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Receiver@@ Service.@@ LOG@@ _@@ TAG, "@@ Recei@@ ve@@ r ser@@ vice st@@ ar@@ ted@@ "); byte@@ [] bo@@ d@@ y@@ ; byte@@ [] he@@ ad@@ er@@ ; bo@@ d@@ y = int@@ ent.get@@ ByteArray@@ Extra@@ ("@@ data@@ "); he@@ ad@@ er = int@@ ent.get@@ ByteArray@@ Extra@@ ("@@ he@@ ad@@ er@@ "); android.util.Log.d@@ (com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Receiver@@ Service.@@ LOG@@ _@@ TAG, "@@ he@@ ad@@ er@@ :@@ "); android.util.Log.d@@ (com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Receiver@@ Service.@@ LOG@@ _@@ TAG, com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ H@@ ex@@ D@@ um@@ p.@@ dum@@ p@@ H@@ ex@@ String(@@ he@@ ad@@ er@@ )); android.util.Log.d@@ (com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Receiver@@ Service.@@ LOG@@ _@@ TAG, "@@ bo@@ d@@ y@@ :@@ "); android.util.Log.d@@ (com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Receiver@@ Service.@@ LOG@@ _@@ TAG, com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ H@@ ex@@ D@@ um@@ p.@@ dum@@ p@@ H@@ ex@@ String(@@ bo@@ d@@ y@@ )); com.android.s@@ ms@@ pu@@ sh@@ .@@ un@@ it@@ Test@@ s.@@ Data@@ V@@ er@@ if@@ y.@@ Set@@ L@@ ast@@ Recei@@ v@@ ed@@ P@@ du@@ (@@ bo@@ d@@ y@@ ); }
public int set@@ Al@@ low@@ ed@@ C@@ arrier@@ s@@ (@@ int s@@ lot@@ Id, java.util.List<@@ android.@@ service@@ .@@ c@@ arri@@ er.@@ C@@ arrier@@ Id@@ ent@@ if@@ ier@@ > c@@ arrier@@ s) { try { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ I@@ Telephon@@ y ser@@ vice = get@@ I@@ Telephony@@ (); if (@@ ser@@ vice != null@@ ) { return service@@ .set@@ Al@@ low@@ ed@@ C@@ arrier@@ s(@@ s@@ lot@@ Id, c@@ arrier@@ s); } } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ Telephony@@ Manager.@@ TAG, "@@ Error call@@ ing I@@ Telephony@@ #@@ set@@ Al@@ low@@ ed@@ C@@ arrier@@ s", e); } return -1@@ ; }
public void test@@ Ex@@ tr@@ act@@ 7@@ () throw@@ s java.lang.Exception { check@@ Re@@ fa@@ ctor@@ ing@@ ("@@ ex@@ tr@@ act@@ st@@ y@@ le@@ 2.@@ xml@@ ", "@@ new@@ st@@ y@@ l@@ es@@ 8@@ .@@ xml@@ ", "@@ new@@ st@@ y@@ le@@ ", true@@ , true@@ , 2, "@@ @@@ +@@ id@@ /@@ b@@ utton@@ 1@@ ", "@@ @@@ +@@ id@@ /@@ b@@ utton@@ 2@@ "); }
private static int con@@ ver@@ t@@ R@@ an@@ To@@ H@@ al@@ R@@ an@@ (@@ int rad@@ io@@ Access@@ Network@@ ) { switch (@@ rad@@ io@@ Access@@ Network@@ ) { case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ G@@ ER@@ A@@ N : return 1; case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ UT@@ R@@ A@@ N : return 2@@ ; case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ E@@ UT@@ R@@ A@@ N : return 3@@ ; case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ C@@ D@@ MA@@ 2@@ 00@@ 0 : return 4@@ ; case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ I@@ W@@ LA@@ N : return 5@@ ; case android.telephony.@@ Access@@ Network@@ Constants.@@ Access@@ Network@@ Type.@@ UN@@ K@@ NO@@ W@@ N : default : return 0; } }
private void d@@ et@@ ach@@ Vo@@ lum@@ e@@ (android.net.@@ Ur@@ i ur@@ i@@ ) { if ((@@ android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ P@@ id@@ ()) != (java.lang.@@ Pro@@ ces@@ s.@@ my@@ P@@ id@@ ())) { throw new java.lang.@@ Sec@@ urit@@ y@@ Exception("@@ Open@@ ing an@@ d c@@ lo@@ s@@ ing dat@@ ab@@ ase@@ s not al@@ low@@ ed.@@ "); } java.lang.String vo@@ lum@@ e = ur@@ i@@ .get@@ Path@@ Se@@ g@@ ment@@ s@@ ().get@@ (@@ 0); if (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ IN@@ TER@@ N@@ AL@@ _@@ V@@ O@@ L@@ U@@ ME@@ .@@ equals(@@ vo@@ lum@@ e@@ )) { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception("@@ De@@ let@@ ing th@@ e int@@ er@@ n@@ al vo@@ lum@@ e is not al@@ low@@ ed@@ "); } else if (!@@ (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ EX@@ TER@@ N@@ AL@@ _@@ V@@ O@@ L@@ U@@ ME@@ .@@ equals(@@ vo@@ lum@@ e@@ ))) { throw new java.lang.Illegal@@ Argument@@ Exception(("@@ Th@@ er@@ e is n@@ o vo@@ lum@@ e name@@ d " + vo@@ lum@@ e@@ )); } try { m@@ Dat@@ ab@@ as@@ es@@ Lock@@ .@@ write@@ Lock@@ ().@@ lock@@ (); com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ Dat@@ ab@@ ase@@ Hel@@ p@@ er dat@@ ab@@ as@@ e = m@@ Dat@@ ab@@ as@@ es@@ .get@@ (@@ vo@@ lum@@ e); if (d@@ at@@ ab@@ as@@ e == null@@ ) return@@ ; try { java.io.File fi@@ le = new java.io.File@@ (d@@ at@@ ab@@ as@@ e.get@@ Read@@ able@@ Dat@@ ab@@ ase@@ ().get@@ Path@@ ()); file.@@ set@@ L@@ ast@@ Mo@@ d@@ if@@ i@@ ed@@ (java.lang.@@ System.@@ current@@ Time@@ Milli@@ s()); } catch (java.lang.Exception e) { android.util.Log.e@@ (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ TAG, "@@ Can't to@@ u@@ ch dat@@ ab@@ as@@ e file@@ ", e); } m@@ Dat@@ ab@@ as@@ es.@@ remove@@ (@@ vo@@ lum@@ e); dat@@ ab@@ ase.@@ close(); } final@@ l@@ y { m@@ Dat@@ ab@@ as@@ es@@ Lock@@ .@@ write@@ Lock@@ ().@@ un@@ lock@@ (); } get@@ Context@@ ().get@@ Content@@ Resol@@ ver@@ ().@@ not@@ if@@ y@@ Change@@ (@@ ur@@ i@@ , null@@ ); if (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ LO@@ C@@ AL@@ _@@ LOG@@ V@@ ) android.util.Log.@@ v@@ (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ TAG, ("@@ D@@ et@@ ach@@ ed vo@@ lum@@ e@@ : " + vo@@ lum@@ e@@ )); }
public void test_@@ enable@@ Dis@@ able@@ () { if (!(m@@ Has@@ Bluetooth@@ )) { return@@ ; } android.@@ bluetooth.Bluetooth@@ Adap@@ ter ad@@ ap@@ ter = android.@@ bluetooth.Bluetooth@@ Adap@@ t@@ er.get@@ Default@@ Adapter@@ (); for (@@ int i = 0; i < 5@@ ; i++) { dis@@ able@@ (@@ ad@@ ap@@ ter@@ ); enable@@ (@@ ad@@ ap@@ ter@@ ); } }
protected boolean sup@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ () { if (!@@ (android.@@ w@@ m.@@ cts.@@ C@@ ro@@ ss@@ App@@ D@@ r@@ ag@@ And@@ D@@ ro@@ p@@ Test@@ s.@@ is@@ Multi@@ W@@ in@@ do@@ w@@ ())) { return false@@ ; } return true@@ ; }
public void import@@ Project@@ s(@@ @com.android.annotations.NonNull java.util.List<@@ java.io.File@@ > pro@@ ject@@ Dir@@ s) throw@@ s java.io.IOException { m@@ S@@ um@@ m@@ ar@@ y = new com.android.tools.@@ gradle.@@ eclipse.@@ Imp@@ ort@@ S@@ um@@ m@@ ary@@ (@@ this@@ ); m@@ Project@@ Map@@ .@@ clear@@ (); m@@ Handle@@ d@@ J@@ ar@@ s.@@ clear@@ (); m@@ W@@ ar@@ n@@ ing@@ s.@@ clear@@ (); m@@ Error@@ s.@@ clear@@ (); m@@ W@@ or@@ k@@ s@@ p@@ a@@ ce@@ Project@@ s = null@@ ; m@@ Root@@ Mod@@ ule@@ s = java.util.Collection@@ s.@@ e@@ mpty@@ List@@ (); m@@ Mod@@ ule@@ s = com.android.tools.@@ gradle.@@ eclipse.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); for (@@ java.io.File fi@@ le : pro@@ ject@@ Dir@@ s) { if (@@ file.@@ is@@ File@@ ()) { assert !@@ (@@ file.@@ is@@ Directory@@ ()); fi@@ le = file@@ .get@@ Par@@ ent@@ File@@ (); } gu@@ ess@@ W@@ or@@ k@@ s@@ p@@ a@@ ce@@ (file@@ ); if (com.android.@@ tools.@@ gradle.@@ eclipse.@@ G@@ rad@@ le@@ Imp@@ or@@ t.@@ is@@ Ad@@ t@@ Project@@ Dir@@ (file@@ )) { gu@@ ess@@ Sdk@@ (file@@ ); gu@@ ess@@ N@@ dk@@ (file@@ ); try { com.android.tools.@@ gradle.@@ eclipse.@@ E@@ c@@ li@@ p@@ se@@ Pro@@ jec@@ t.get@@ Project@@ (@@ this@@ , file@@ ); } catch (com.android.@@ tools.@@ gradle.@@ eclipse.@@ G@@ rad@@ le@@ Imp@@ or@@ t.@@ Imp@@ ort@@ Exception e) { return@@ ; } catch (java.lang.Exception e) { re@@ port@@ Error@@ (@@ null@@ , file@@ , e.toString@@ (), false@@ ); return@@ ; } } else { re@@ port@@ Error@@ (@@ null@@ , file@@ , ("@@ No@@ t a re@@ co@@ gn@@ iz@@ ed pro@@ ject@@ : " + file@@ ), false@@ ); return@@ ; } java.util.@@ Set@@ <@@ com.android.tools.@@ gradle.@@ eclipse.@@ E@@ c@@ li@@ p@@ se@@ Project@@ > pro@@ ject@@ s = com.android.tools.@@ gradle.@@ eclipse.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (m@@ Project@@ Map@@ .@@ valu@@ es@@ ()); m@@ Root@@ Mod@@ ule@@ s = com.android.tools.@@ gradle.@@ eclipse.@@ E@@ c@@ li@@ p@@ se@@ Pro@@ jec@@ t.@@ p@@ er@@ for@@ m@@ Imp@@ ort@@ (@@ this@@ , pro@@ ject@@ s); for (com.android.@@ tools.@@ gradle.@@ eclipse.@@ Imp@@ ort@@ Mod@@ ul@@ e mo@@ d@@ ul@@ e : m@@ Root@@ Mod@@ ul@@ es) { m@@ Mod@@ ul@@ es.@@ add@@ (m@@ o@@ du@@ le@@ ); m@@ Mod@@ ul@@ es.@@ add@@ All@@ (m@@ o@@ du@@ le@@ .get@@ All@@ Dependenc@@ ies@@ ()); } }
public void test_@@ parse@@ _@@ w@@ ith@@ Multi@@ pli@@ er@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t for@@ ma@@ t = ((@@ java.text.@@ Dec@@ im@@ al@@ Format@@ ) (@@ java.text.@@ Number@@ Format@@ .get@@ Number@@ Instance@@ (java.util.@@ Loc@@ a@@ le.@@ EN@@ G@@ LIS@@ H@@ ))); java.lang.@@ Num@@ b@@ er result@@ ; for@@ mat@@ .set@@ Multi@@ pli@@ er@@ (1@@ 00@@ ); result = for@@ mat@@ .@@ parse@@ ("@@ 9@@ 2@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 5@@ 8@@ 0@@ 7@@ ", new java.text.@@ Par@@ se@@ Posi@@ tion@@ (0@@ )); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result typ@@ e m@@ ulti@@ pli@@ er 1@@ 00@@ : " + result@@ ), java.lang.@@ D@@ ouble@@ .@@ class@@ , res@@ ul@@ t.get@@ Class@@ ()); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result for m@@ ulti@@ pli@@ er 1@@ 00@@ : " + result@@ ), 9@@ .@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 6@@ E@@ 16@@ , result@@ .@@ do@@ ub@@ le@@ Value@@ ()); for@@ mat@@ .set@@ Multi@@ pli@@ er@@ (1@@ 00@@ 0); result = for@@ mat@@ .@@ parse@@ ("@@ 9@@ 2@@ 2@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 7@@ ", new java.text.@@ Par@@ se@@ Posi@@ tion@@ (0@@ )); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result typ@@ e m@@ ulti@@ pli@@ er 1@@ 00@@ 0@@ : " + result@@ ), java.lang.@@ D@@ ouble@@ .@@ class@@ , res@@ ul@@ t.get@@ Class@@ ()); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result for m@@ ulti@@ pli@@ er 1@@ 00@@ 0@@ : " + result@@ ), 9@@ .@@ 2@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 6@@ E@@ 1@@ 5, result@@ .@@ do@@ ub@@ le@@ Value@@ ()); for@@ mat@@ .set@@ Multi@@ pli@@ er@@ (1@@ 0000@@ ); result = for@@ mat@@ .@@ parse@@ ("@@ 9@@ 2@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 7@@ ", new java.text.@@ Par@@ se@@ Posi@@ tion@@ (0@@ )); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result typ@@ e m@@ ulti@@ pli@@ er 1@@ 0000@@ : " + result@@ ), java.lang.@@ D@@ ouble@@ .@@ class@@ , res@@ ul@@ t.get@@ Class@@ ()); assert@@ Equal@@ s@@ (("@@ W@@ ron@@ g result for m@@ ulti@@ pli@@ er 1@@ 0000@@ : " + result@@ ), 9@@ .@@ 2@@ 2@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 6@@ E@@ 1@@ 4@@ , result@@ .@@ do@@ ub@@ le@@ Value@@ ()); }
public android.@@ bluetooth.@@ le.@@ Per@@ io@@ d@@ ic@@ Ad@@ verti@@ sing@@ Parameter@@ s.@@ Builder set@@ In@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ (@@ boolean in@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ ) { m@@ In@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er = in@@ c@@ lu@@ de@@ T@@ x@@ Po@@ w@@ er@@ ; return this@@ ; }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ M@@ ed@@ i@@ um@@ Test public void test@@ S@@ end@@ Call@@ Event@@ Null@@ () throw@@ s java.lang.Exception { com.android.server.@@ telecom.@@ tests.@@ Id@@ Pa@@ i@@ r id@@ s = start@@ And@@ M@@ ake@@ Active@@ In@@ com@@ ing@@ Call@@ ("@@ 6@@ 50@@ -@@ 5@@ 5@@ 5@@ -1@@ 2@@ 12@@ ", m@@ Phone@@ Ac@@ count@@ A@@ 0@@ .get@@ Ac@@ count@@ Handle@@ (), m@@ Connection@@ Service@@ Fi@@ xt@@ ure@@ A@@ ); assert@@ Equal@@ s(@@ Cal@@ l.@@ STATE_@@ AC@@ TIV@@ E, m@@ In@@ Call@@ Service@@ Fi@@ xt@@ ure@@ X@@ .get@@ Call@@ (@@ id@@ s.@@ m@@ Call@@ Id@@ ).get@@ State@@ ()); m@@ In@@ Call@@ Service@@ Fi@@ xt@@ ure@@ X@@ .m@@ In@@ Call@@ Adap@@ ter.@@ send@@ Call@@ Event@@ (@@ id@@ s.@@ m@@ Call@@ Id, com.android.server.@@ telecom.@@ tests.@@ Bas@@ ic@@ Call@@ Test@@ s.@@ TEST_@@ EVEN@@ T, null@@ ); ve@@ r@@ if@@ y@@ (m@@ Connection@@ Service@@ Fi@@ xt@@ ure@@ A@@ .get@@ Test@@ D@@ ouble@@ (), time@@ out@@ (com.android.server.@@ telecom.@@ tests.@@ TEST_@@ TI@@ ME@@ O@@ UT@@ )).@@ send@@ Call@@ Event@@ (@@ id@@ s.@@ m@@ Call@@ Id, com.android.server.@@ telecom.@@ tests.@@ Bas@@ ic@@ Call@@ Test@@ s.@@ TEST_@@ EVEN@@ T, null@@ , any@@ ()); }
@javax.annotation.@@ N@@ on@@ null public static java.io.File get@@ Runtime@@ En@@ vi@@ ron@@ ment@@ Root@@ Dir@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String r@@ t@@ Name@@ ) { java.lang.String r@@ t@@ Location@@ P@@ ath = com.android.jack.test.@@ Test@@ s@@ Properties@@ .get@@ Property@@ ((@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ R@@ UN@@ TI@@ M@@ E_@@ LO@@ C@@ A@@ TION@@ _P@@ RE@@ FI@@ X@@ ) + r@@ t@@ Name@@ )); if (r@@ t@@ Location@@ P@@ ath == null@@ ) { throw new com.android.jack.test.@@ Test@@ Configuration@@ Exception@@ ((((@@ (("@@ Loc@@ ation for run@@ tim@@ e '@@ " + r@@ t@@ Name@@ ) + "@@ ' is not s@@ pe@@ c@@ if@@ i@@ ed@@ . Se@@ t pro@@ per@@ t@@ y '@@ ") + (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ R@@ UN@@ TI@@ M@@ E_@@ LO@@ C@@ A@@ TION@@ _P@@ RE@@ FI@@ X@@ )) + r@@ t@@ Name@@ ) + "@@ '@@ ")); } java.io.File r@@ t@@ Loc@@ ation = new java.io.File@@ (r@@ t@@ Location@@ Path@@ ); if (!(@@ r@@ t@@ Loc@@ ation.@@ exist@@ s@@ ())) { throw new com.android.jack.test.@@ Test@@ Configuration@@ Exception@@ ((((@@ ("@@ Loc@@ ation for run@@ tim@@ e " + r@@ t@@ Name@@ ) + " do@@ es not exist@@ : '@@ ") + r@@ t@@ Location@@ Path@@ ) + "@@ '@@ ")); } if (!(@@ r@@ t@@ Loc@@ ation.@@ is@@ Directory@@ ())) { throw new com.android.jack.test.@@ Test@@ Configuration@@ Exception@@ ((((@@ ("@@ Loc@@ ation for run@@ tim@@ e " + r@@ t@@ Name@@ ) + " is not a di@@ re@@ ctory@@ : '@@ ") + r@@ t@@ Location@@ Path@@ ) + "@@ '@@ ")); } return r@@ t@@ Location@@ ; }
private void handle@@ Interface@@ Ser@@ v@@ ing@@ State@@ Active@@ (@@ int mode@@ , com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMach@@ in@@ e w@@ ho@@ ) { if ((m@@ No@@ t@@ if@@ y@@ List.@@ index@@ Of@@ (@@ w@@ ho@@ )) < 0) { m@@ No@@ t@@ if@@ y@@ List.@@ add(@@ w@@ ho@@ ); m@@ IP@@ v@@ 6@@ T@@ ether@@ ing@@ Co@@ or@@ d@@ in@@ ator@@ .add@@ Active@@ Down@@ str@@ eam@@ (@@ w@@ ho@@ , mode@@ ); } if (m@@ o@@ de == (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ TE@@ TH@@ ER@@ ED@@ )) { m@@ For@@ w@@ ard@@ ed@@ Down@@ str@@ eam@@ s.@@ add(@@ w@@ ho@@ ); } else { m@@ For@@ w@@ ard@@ ed@@ Down@@ str@@ eam@@ s.@@ remove@@ (@@ w@@ ho@@ ); } if ((@@ w@@ ho@@ .@@ int@@ er@@ face@@ Type@@ ()) == (android.net.@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER@@ ING@@ _@@ WI@@ FI@@ )) { int w@@ if@@ i@@ Mod@@ e = android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager.@@ I@@ F@@ AC@@ E_@@ IP@@ _M@@ OD@@ E_@@ CON@@ FI@@ G@@ UR@@ A@@ TION_@@ ER@@ R@@ OR@@ ; switch (m@@ o@@ de@@ ) { case com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ TE@@ TH@@ ER@@ E@@ D : w@@ if@@ i@@ Mod@@ e = android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager.@@ I@@ F@@ AC@@ E_@@ IP@@ _M@@ OD@@ E_@@ TE@@ TH@@ ER@@ ED@@ ; break@@ ; case com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ LO@@ C@@ AL@@ _@@ ON@@ L@@ Y : w@@ if@@ i@@ Mod@@ e = android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager.@@ I@@ F@@ AC@@ E_@@ IP@@ _M@@ OD@@ E_@@ LO@@ C@@ AL@@ _@@ ON@@ L@@ Y@@ ; break@@ ; } if (@@ w@@ if@@ i@@ Mod@@ e != (android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager.@@ I@@ F@@ AC@@ E_@@ IP@@ _M@@ OD@@ E_@@ CON@@ FI@@ G@@ UR@@ A@@ TION_@@ ER@@ R@@ OR@@ )) { get@@ W@@ if@@ i@@ Manager@@ ().@@ update@@ Interface@@ Ip@@ State@@ (@@ w@@ ho@@ .@@ int@@ er@@ face@@ Name@@ (), w@@ if@@ i@@ Mode@@ ); } } }
@javax.annotation.@@ N@@ on@@ null public static <@@ T@@ > com.android.sched.util.@@ config.@@ id.@@ Default@@ Fa@@ ctory@@ Property@@ Id@@ <@@ T@@ > create@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String des@@ cription@@ , @javax.annotation.@@ N@@ on@@ null java.lang.@@ Class@@ <@@ T@@ > typ@@ e) { return new com.android.sched.util.@@ config.@@ id.@@ Default@@ Fa@@ ctory@@ Property@@ Id@@ <@@ T@@ >@@ (@@ name@@ , des@@ cription@@ , new com.android.sched.util.@@ cod@@ ec@@ .@@ Default@@ Fa@@ ctory@@ Sele@@ ctor@@ <@@ T@@ >@@ (@@ type@@ )); }
@java.lang.Override public boolean get@@ Is@@ S@@ o@@ f@@ t@@ Reference@@ () { return m@@ Is@@ S@@ o@@ f@@ t@@ Reference@@ ; }
@org.junit.Test public void test@@ V@@ p@@ n@@ () throw@@ s java.lang.Exception { android.app.@@ In@@ strument@@ ation in@@ strument@@ ation = test@@ F@@ ramework@@ .get@@ In@@ strument@@ ation@@ (); android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device de@@ vice = test@@ F@@ ramework@@ .get@@ Device@@ (); if (!(@@ ve@@ r@@ if@@ y@@ V@@ p@@ n@@ Status@@ ())) { com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ App@@ Manager.@@ in@@ stall@@ App@@ (in@@ strument@@ ation@@ , "@@ F@@ re@@ d@@ V@@ P@@ N@@ .@@ apk@@ "); com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ App@@ L@@ a@@ un@@ ch@@ er.@@ la@@ un@@ ch@@ (in@@ strument@@ ation@@ , "@@ Test@@ V@@ P@@ N@@ "); device@@ .@@ register@@ W@@ atch@@ er@@ (com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ w@@ atch@@ er@@ s.@@ V@@ p@@ n@@ Po@@ pu@@ p@@ W@@ atch@@ er@@ .@@ class@@ .getName@@ (), new com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ w@@ atch@@ er@@ s.@@ V@@ p@@ n@@ Po@@ pu@@ p@@ W@@ atch@@ er@@ (in@@ Device@@ )); m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ resource@@ Id@@ (com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ s@@ mo@@ k@@ e.@@ V@@ p@@ n@@ Test.@@ STA@@ R@@ T_@@ V@@ P@@ N@@ _@@ B@@ UT@@ T@@ ON@@ _RE@@ S@@ )).@@ c@@ li@@ ck@@ And@@ W@@ ait@@ For@@ New@@ W@@ in@@ do@@ w@@ (); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ ("@@ Faile@@ d to fin@@ d th@@ e V@@ P@@ N loc@@ k i@@ co@@ n a@@ f@@ ter start@@ ing V@@ P@@ N@@ !@@ ", ve@@ r@@ if@@ y@@ V@@ p@@ n@@ Status@@ ()); m@@ Device.@@ remove@@ W@@ atch@@ er@@ (com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ w@@ atch@@ er@@ s.@@ V@@ p@@ n@@ Po@@ pu@@ p@@ W@@ atch@@ er@@ .@@ class@@ .getName@@ ()); } com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ App@@ Manager.@@ un@@ in@@ stall@@ App@@ (in@@ strument@@ ation@@ , "@@ Test@@ V@@ P@@ N@@ ", null@@ ); }
public void test_@@ Ap@@ ia@@ _@@ j@@ um@@ p@@ For@@ w@@ ard@@ O@@ ver@@ Inter@@ n@@ ation@@ al@@ Date@@ Line@@ _P@@ 12@@ _@@ to@@ _M@@ 12@@ () { java.@@ tim@@ e.@@ z@@ on@@ e.@@ Zone@@ R@@ ule@@ s t@@ est = p@@ a@@ c@@ if@@ ic@@ Ap@@ ia@@ (); java.@@ tim@@ e.@@ In@@ stan@@ t in@@ stan@@ t@@ B@@ e@@ for@@ e = java.@@ tim@@ e.@@ Local@@ Dat@@ e.@@ o@@ f@@ (1@@ 8@@ 9@@ 2, 7@@ , 2@@ ).@@ at@@ Start@@ Of@@ D@@ ay@@ (@@ java.@@ tim@@ e.@@ Zone@@ Offset@@ .@@ UT@@ C@@ ).@@ to@@ In@@ stan@@ t@@ (); java.@@ tim@@ e.@@ z@@ on@@ e.@@ Zone@@ Offset@@ Tr@@ an@@ si@@ tion tr@@ an@@ s = test.@@ next@@ Tr@@ an@@ si@@ tion@@ (in@@ stan@@ t@@ B@@ e@@ for@@ e); assert@@ Equal@@ s(@@ tr@@ an@@ s.get@@ Date@@ Time@@ B@@ e@@ for@@ e@@ (), java.@@ tim@@ e.@@ Local@@ Date@@ Tim@@ e.@@ o@@ f@@ (1@@ 8@@ 9@@ 2, 7@@ , 5, 0, 0@@ )); assert@@ Equal@@ s(@@ tr@@ an@@ s.get@@ Date@@ Time@@ A@@ f@@ ter@@ (), java.@@ tim@@ e.@@ Local@@ Date@@ Tim@@ e.@@ o@@ f@@ (1@@ 8@@ 9@@ 2, 7@@ , 4@@ , 0, 0@@ )); assert@@ Equal@@ s(@@ tr@@ an@@ s.@@ is@@ G@@ ap@@ (), false@@ ); assert@@ Equal@@ s(@@ tr@@ an@@ s.@@ is@@ O@@ ver@@ l@@ ap@@ (), true@@ ); assert@@ Equal@@ s(@@ tr@@ an@@ s.@@ is@@ Valid@@ Offset@@ (@@ java.@@ tim@@ e.@@ Zone@@ Offset@@ .@@ o@@ f@@ H@@ our@@ s@@ Min@@ ut@@ es@@ Sec@@ ond@@ s@@ ((@@ +@@ 12@@ ), 3@@ , 4@@ )), true@@ ); assert@@ Equal@@ s(@@ tr@@ an@@ s.@@ is@@ Valid@@ Offset@@ (@@ java.@@ tim@@ e.@@ Zone@@ Offset@@ .@@ o@@ f@@ H@@ our@@ s@@ Min@@ ut@@ es@@ Sec@@ ond@@ s@@ ((@@ -1@@ 1@@ ), (@@ -@@ 2@@ 6@@ ), (@@ -@@ 5@@ 6@@ )@@ )), true@@ ); assert@@ Equal@@ s(@@ tr@@ an@@ s.get@@ D@@ ur@@ ation@@ (), java.@@ tim@@ e.@@ D@@ ur@@ ation.@@ o@@ f@@ H@@ our@@ s@@ ((@@ -@@ 2@@ 4@@ ))); assert@@ Equal@@ s(@@ tr@@ an@@ s.get@@ In@@ stan@@ t@@ (), java.@@ tim@@ e.@@ Local@@ Date@@ Tim@@ e.@@ o@@ f@@ (1@@ 8@@ 9@@ 2, 7@@ , 4@@ , 0, 0@@ ).@@ to@@ In@@ stan@@ t@@ (@@ java.@@ tim@@ e.@@ Zone@@ Offset@@ .@@ o@@ f@@ H@@ our@@ s@@ Min@@ ut@@ es@@ Sec@@ ond@@ s@@ ((@@ -1@@ 1@@ ), (@@ -@@ 2@@ 6@@ ), (@@ -@@ 5@@ 6@@ )))); java.@@ tim@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e z@@ d@@ t = java.@@ tim@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e.@@ o@@ f@@ (1@@ 8@@ 9@@ 2, 7@@ , 4@@ , 2@@ 3@@ , 0, java.@@ tim@@ e.@@ Zone@@ Id@@ .@@ o@@ f@@ ("@@ Pa@@ c@@ if@@ ic@@ /@@ Ap@@ ia@@ ")); assert@@ Equal@@ s(@@ z@@ d@@ t.@@ p@@ lu@@ s@@ H@@ our@@ s(@@ 2@@ ).@@ to@@ Local@@ Date@@ Time@@ (), java.@@ tim@@ e.@@ Local@@ Date@@ Tim@@ e.@@ o@@ f@@ (1@@ 8@@ 7@@ 9@@ , 7@@ , 4@@ , 1, 0, 0@@ )); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d public static com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Contro@@ lle@@ r m@@ ake@@ (android.content.@@ Context c@@ , com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Command@@ s@@ Inter@@ face c@@ i@@ ) { if ((@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Control@@ ler.@@ m@@ Instance@@ ) != null@@ ) { throw new java.lang.Runtime@@ Exception("@@ Uicc@@ Control@@ ler.@@ m@@ ake@@ () sho@@ ul@@ d on@@ l@@ y b@@ e cal@@ le@@ d on@@ ce@@ "); } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Control@@ ler.@@ m@@ In@@ stan@@ ce = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Control@@ ler@@ (c@@ , c@@ i@@ ); return com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Uicc@@ Control@@ ler.@@ m@@ Instance@@ ; }
synchronized void n@@ Allocation@@ 1@@ D@@ Element@@ Data@@ (@@ long id, int x@@ o@@ ff@@ , int m@@ ip@@ , int comp@@ Id@@ x@@ , byte@@ [] d, int size@@ Bytes@@ ) { valid@@ ate@@ (); r@@ s@@ n@@ Allocation@@ 1@@ D@@ Element@@ Data@@ (m@@ Contex@@ t, id, x@@ o@@ ff@@ , m@@ ip@@ , comp@@ Id@@ x@@ , d, size@@ Bytes@@ ); }
private void process@@ Log@@ Lin@@ es(@@ java.lang.String[] lin@@ es) { java.util.List<@@ com.android.@@ ddm@@ ui@@ lib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Message@@ > add@@ ed@@ Log@@ Lin@@ es(@@ java.util.List<@@ com.android.@@ ddm@@ ui@@ lib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Message@@ > de@@ let@@ ed@@ Log@@ Lin@@ es) { java.util.List<@@ com.android.@@ ddm@@ ui@@ lib.@@ log@@ cat@@ .@@ Log@@ C@@ at@@ Message@@ > de@@ let@@ ed@@ Log@@ Lin@@ e = m@@ Log@@ Mess@@ ag@@ es.@@ add@@ ed@@ Message@@ (@@ add@@ ed@@ Mess@@ ag@@ es@@ ); if ((m@@ ess@@ ag@@ es.@@ size@@ ()) > 0) { send@@ Message@@ Recei@@ v@@ ed@@ Event@@ (m@@ ess@@ ag@@ es@@ , de@@ let@@ ed@@ Mess@@ ag@@ es.@@ to@@ m@@ (@@ de@@ let@@ ed@@ Mess@@ ag@@ es@@ ); } }
@org.junit.Test @@@ java.lang.Runtime@@ (f@@ ro@@ m = Runtime@@ Version@@ .@@ N@@ ) public void test@@ Default@@ Method@@ 0@@ 12@@ () throw@@ s java.lang.Exception { run@@ (@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ 0@@ 12@@ ); }
public static void tr@@ an@@ s@@ for@@ m@@ (@@ float a@@ , float b@@ , float c@@ , float d, float e@@ , float f@@ , com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ V@@ d@@ Path@@ .@@ Node@@ [] no@@ d@@ es) { float@@ [] p@@ r@@ e = new float@@ [@@ 2@@ ]; for (@@ int i = 0; i < (@@ no@@ d@@ es.@@ length); i++) { no@@ des@@ [i]@@ .@@ tr@@ an@@ s@@ for@@ m@@ (@@ a@@ , b@@ , c@@ , d, e@@ , f@@ , pre@@ ); } }
@java.lang.Override public com.android.@@ dx.@@ dex.@@ file.@@ Class@@ De@@ f@@ I@@ te@@ m call@@ () { com.android.@@ dx.@@ dex.@@ file.@@ Class@@ De@@ f@@ I@@ te@@ m c@@ la@@ z@@ z = com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ trans@@ l@@ ate@@ Clas@@ s(@@ name@@ , byte@@ s, class@@ File@@ ); com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ trans@@ l@@ ate@@ Tim@@ e +@@ = (java.lang.@@ System.@@ n@@ an@@ o@@ Time@@ ()) - no@@ w@@ ; com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ method@@ De@@ f@@ s +@@ = class@@ File@@ .get@@ Method@@ s@@ ().@@ size@@ (); com.android.@@ dx.@@ command@@ .@@ dex@@ er.@@ Main.@@ field@@ De@@ f@@ s +@@ = class@@ File@@ .get@@ Field@@ s@@ ().@@ size@@ (); return c@@ la@@ z@@ z@@ ; }
public static int $@@ no@@ in@@ line@@ $@@ Sh@@ l@@ 0@@ (@@ int arg@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return ar@@ g <@@ < 0; }
public static java.lang.String get@@ N@@ dk@@ Build@@ Task@@ Name@@ (@@ @com.android.annotations.NonNull org.@@ grad@@ le@@ .@@ native@@ pla@@ t@@ for@@ m.@@ Native@@ Bin@@ ary@@ S@@ pe@@ c b@@ in@@ ary@@ ) { return com.android.build.gradle.@@ n@@ dk@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Nam@@ ing@@ S@@ ch@@ em@@ e.get@@ Task@@ Name@@ (b@@ in@@ ary@@ , "@@ build@@ ", "@@ N@@ dk@@ "); }
public void test@@ Display@@ Nam@@ es@@ On@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ () { assert@@ Equal@@ s("@@ J@@ an@@ ", for@@ mat@@ Date@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ ("@@ M@@ M@@ ")); assert@@ Equal@@ s("@@ J@@ an@@ ", for@@ mat@@ Date@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ ("@@ L@@ L@@ ")); assert@@ Equal@@ s("@@ Th@@ u@@ ", for@@ mat@@ Date@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ ("@@ E@@ E@@ E@@ ")); assert@@ Equal@@ s("@@ Th@@ u@@ ", for@@ mat@@ Date@@ Non@@ G@@ re@@ gor@@ i@@ an@@ Cal@@ end@@ ar@@ ("@@ cc@@ c@@ ")); }
public boolean is@@ O@@ l@@ der@@ Th@@ an@@ (@@ int re@@ le@@ ase@@ , int sub@@ Re@@ le@@ as@@ e) { return (@@ (@@ this@@ .@@ re@@ le@@ ase@@ Code@@ ) > re@@ le@@ as@@ e) || ((@@ (@@ this@@ .@@ re@@ le@@ ase@@ Code@@ ) == re@@ le@@ as@@ e) && (@@ (@@ this@@ .@@ sub@@ Re@@ le@@ ase@@ Code@@ ) > sub@@ Re@@ le@@ ase@@ )); }
@org.junit.Test public void test@@ Set@@ W@@ ps@@ Device@@ Type@@ () throw@@ s java.lang.Exception { java.lang.String valid@@ Device@@ Type = "@@ 10@@ -@@ 00@@ 5@@ 0F@@ 2@@ 0@@ 4@@ -@@ 5@@ "; java.lang.String in@@ valid@@ Device@@ Type@@ 1 = "@@ 10@@ -@@ 0@@ 2@@ 0@@ 5@@ 0F@@ 2@@ 0@@ 4@@ -@@ 5@@ "; java.lang.String in@@ valid@@ Device@@ Type@@ 2 = "@@ 10@@ 2@@ -@@ 00@@ 5@@ 0F@@ 2@@ 0@@ 4@@ -@@ 5@@ "; when(m@@ I@@ Supplicant@@ St@@ a@@ Iface@@ Mock@@ .set@@ W@@ ps@@ Device@@ Type@@ (@@ any@@ (@@ byte@@ []@@ .@@ class@@ )@@ )).@@ thenReturn@@ (m@@ Status@@ Su@@ ccess@@ ); exec@@ ute@@ And@@ Valid@@ ate@@ In@@ itializ@@ ation@@ Se@@ qu@@ en@@ ce@@ (@@ false@@ , false@@ , false@@ ); assert@@ True@@ (m@@ D@@ u@@ t.@@ set@@ W@@ ps@@ Device@@ Type@@ (@@ valid@@ Device@@ Type@@ )); assert@@ False@@ (m@@ D@@ u@@ t.@@ set@@ W@@ ps@@ Device@@ Type@@ (in@@ valid@@ Device@@ Type@@ 1@@ )); assert@@ False@@ (m@@ D@@ u@@ t.@@ set@@ W@@ ps@@ Device@@ Type@@ (in@@ valid@@ Device@@ Type@@ 2@@ )); }
@java.lang.Override protected com.android.server.@@ IpSec@@ Service.@@ Resource@@ Track@@ er get@@ Resource@@ Track@@ er@@ () { return get@@ User@@ Record@@ ().@@ tr@@ an@@ s@@ for@@ m@@ Q@@ u@@ o@@ t@@ a@@ Track@@ er@@ ; }
public static short $@@ no@@ in@@ line@@ $@@ short@@ To@@ Char@@ To@@ Short@@ (@@ short valu@@ e) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ (@@ short@@ ) (@@ (@@ char@@ ) (@@ value@@ ))); }
public void test@@ D@@ if@@ f@@ 6@@ () throw@@ s java.lang.Exception { java.lang.String re@@ feren@@ ce = "@@ " + ((((@@ ((((@@ ((((@@ ((("@@ <@@ m@@ an@@ if@@ est@@ \n@@ " + " xml@@ ns@@ :@@ android@@ =@@ \"@@ h@@ ttp@@ :@@ /@@ /@@ s@@ ch@@ em@@ a@@ s.@@ android.@@ com@@ /@@ apk@@ /@@ res@@ /@@ android@@ \"@@ \n") + " xml@@ ns@@ :@@ too@@ l@@ s@@ =@@ \"@@ h@@ ttp@@ :@@ /@@ /@@ s@@ ch@@ em@@ a@@ s.@@ android.@@ com@@ /@@ too@@ l@@ s@@ \"@@ \n") + " package@@ =@@ \"@@ com.@@ ex@@ am@@ p@@ le.@@ lib@@ 3@@ \"@@ >@@ \n") + "@@ \n") + " <@@ ac@@ tivi@@ t@@ y android@@ :@@ name@@ =@@ \"@@ ac@@ tivity@@ O@@ ne@@ \@@ " ") + " android@@ :@@ config@@ Chan@@ g@@ es@@ =@@ \"@@ loc@@ ale@@ \"@@ >@@ \n") + "@@ \n") + " <@@ int@@ ent@@ -@@ fil@@ ter android@@ :@@ l@@ ab@@ el@@ =@@ \"@@ @@@ string@@ /@@ f@@ oo@@ \"@@ /@@ >@@ \n") + "@@ \n") + " <@@ /@@ ac@@ tivity@@ >@@ \n") + "@@ <@@ /@@ m@@ an@@ if@@ est@@ >@@ "); java.lang.String o@@ th@@ er = "@@ " + ((((@@ ((@@ (("@@ <@@ m@@ an@@ if@@ est@@ \n@@ " + " xml@@ ns@@ :@@ android@@ =@@ \"@@ h@@ ttp@@ :@@ /@@ /@@ /@@ s@@ ch@@ em@@ a@@ s.@@ android.@@ com@@ /@@ apk@@ /@@ res@@ /@@ android@@ \"@@ \n") + " xml@@ ns@@ :@@ too@@ l@@ s@@ =@@ \"@@ h@@ ttp@@ :@@ /@@ s@@ ch@@ em@@ a@@ s.@@ android.@@ com@@ /@@ too@@ l@@ s@@ \"@@ \n") + " package@@ =@@ \"@@ com.@@ ex@@ am@@ p@@ le.@@ lib@@ 3@@ \"@@ >@@ \n") + "@@ \n") + " <@@ ac@@ tivi@@ t@@ y android@@ :@@ name@@ =@@ \"@@ ac@@ tivity@@ O@@ ne@@ \@@ " ") + " android@@ :@@ config@@ Chan@@ g@@ es@@ =@@ \"@@ loc@@ ale@@ \"@@ /@@ >@@ \n") + "@@ <@@ /@@ m@@ an@@ if@@ est@@ >@@ "); com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Doc@@ um@@ ent ref@@ Doc@@ um@@ ent = com.android.@@ m@@ an@@ if@@ merger.@@ Test@@ Utils.@@ xml@@ Doc@@ ument@@ From@@ String@@ (@@ new com.android.@@ m@@ an@@ if@@ merger.@@ Test@@ Utils.@@ Test@@ Source@@ Location@@ (get@@ Class@@ (), "@@ test@@ D@@ if@@ f@@ 6@@ ()@@ "), re@@ ference@@ ); com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Doc@@ um@@ ent o@@ th@@ er@@ Doc@@ um@@ ent = com.android.@@ m@@ an@@ if@@ merger.@@ Test@@ Utils.@@ xml@@ Doc@@ ument@@ From@@ String@@ (@@ new com.android.@@ m@@ an@@ if@@ merger.@@ Test@@ Utils.@@ Test@@ Source@@ Location@@ (get@@ Class@@ (), "@@ test@@ D@@ if@@ f@@ 6@@ ()@@ "), o@@ th@@ er@@ ); assert@@ True@@ (re@@ f@@ Doc@@ um@@ ent.get@@ Root@@ Node@@ ().get@@ Node@@ By@@ Type@@ And@@ Key@@ (@@ M@@ an@@ if@@ est@@ Mode@@ l.@@ Node@@ Typ@@ es.@@ AC@@ TIV@@ ITY@@ , "@@ com.@@ ex@@ am@@ p@@ le.@@ lib@@ 3@@ .@@ ac@@ tivity@@ O@@ ne@@ "@@ ).get@@ ().@@ com@@ par@@ e@@ To@@ (o@@ th@@ er@@ Doc@@ um@@ ent.get@@ Root@@ Node@@ ().get@@ Node@@ By@@ Type@@ And@@ Key@@ (@@ M@@ an@@ if@@ est@@ Mode@@ l.@@ Node@@ Typ@@ es.@@ AC@@ TIV@@ ITY@@ , "@@ com.@@ ex@@ am@@ p@@ le.@@ lib@@ 3@@ .@@ ac@@ tivity@@ O@@ ne@@ "@@ ).get@@ ()).@@ is@@ P@@ res@@ ent@@ ()); }
@java.lang.Override public void on@@ R@@ tt@@ Session@@ Remote@@ ly@@ T@@ er@@ min@@ ated@@ (java.lang.String call@@ Id, android.telecom.@@ Logg@@ ing.@@ Session@@ .@@ Info session@@ Info@@ ) throw@@ s android.os.@@ RemoteException { }
public void test@@ In@@ strument@@ ation@@ Not@@ Al@@ low@@ ed@@ () { android.content.@@ Context my@@ Context = get@@ In@@ strument@@ ation@@ ().get@@ Context@@ (); android.content.@@ Comp@@ on@@ ent@@ Name app@@ D@@ if@@ f@@ Cer@@ t@@ In@@ strument@@ ation = new android.content.@@ Comp@@ on@@ ent@@ Name@@ (m@@ y@@ Contex@@ t, com.android.@@ cts.@@ in@@ strument@@ ation@@ d@@ if@@ f@@ cer@@ t@@ app.@@ Empty@@ In@@ strument@@ ation@@ .@@ class@@ ); try { get@@ In@@ strument@@ ation@@ ().get@@ Context@@ ().@@ start@@ In@@ strument@@ ation@@ (@@ app@@ D@@ if@@ f@@ Cer@@ t@@ In@@ strument@@ ation@@ , null@@ , new android.os.@@ Bund@@ le@@ ()); fail@@ ("@@ co@@ ul@@ d la@@ un@@ ch in@@ strument@@ ation@@ "); } catch (java.lang.@@ Sec@@ urit@@ y@@ Exception e) { } }
@org.junit.Test public void test@@ B@@ oo@@ k@@ m@@ ark@@ W@@ eb@@ S@@ ite@@ In@@ B@@ row@@ ser@@ () throw@@ s java.lang.Exception { android.app.@@ In@@ strument@@ ation in@@ strument@@ ation = test@@ F@@ ramework@@ .get@@ In@@ strument@@ ation@@ (); android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device de@@ vice = android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device@@ .get@@ Instance@@ (in@@ strument@@ ation@@ ); com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ App@@ L@@ a@@ un@@ ch@@ er.@@ la@@ un@@ ch@@ (in@@ strument@@ ation@@ , "@@ B@@ row@@ ser@@ "); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ resource@@ Id@@ (@@ Res@@ .@@ B@@ RO@@ W@@ S@@ ER_@@ URL@@ _@@ TE@@ X@@ T_@@ FI@@ E@@ L@@ D@@ _RE@@ S@@ )).@@ c@@ li@@ ck@@ (); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ resource@@ Id@@ (@@ Res@@ .@@ B@@ RO@@ W@@ S@@ ER_@@ URL@@ _@@ TE@@ X@@ T_@@ FI@@ E@@ L@@ D@@ _RE@@ S@@ )).@@ clear@@ Text@@ Field@@ (); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ resource@@ Id@@ (@@ Res@@ .@@ B@@ RO@@ W@@ S@@ ER_@@ URL@@ _@@ TE@@ X@@ T_@@ FI@@ E@@ L@@ D@@ _RE@@ S@@ )).@@ set@@ Text@@ ("@@ es@@ p@@ n@@ .@@ com@@ "); device@@ .@@ pres@@ s@@ En@@ ter@@ (); device@@ .@@ pres@@ s@@ M@@ en@@ u@@ (); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ ("@@ S@@ av@@ e to b@@ oo@@ k@@ m@@ ark@@ s@@ "@@ )).@@ c@@ li@@ ck@@ (); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ ("@@ O@@ K@@ "@@ )).@@ c@@ li@@ ck@@ (); device@@ .@@ pres@@ s@@ M@@ en@@ u@@ (); device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ ("@@ B@@ oo@@ k@@ m@@ ark@@ s@@ "@@ )).@@ c@@ li@@ ck@@ (); assert@@ True@@ (((@@ device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ ("@@ B@@ oo@@ k@@ m@@ ark@@ s@@ "@@ )).@@ exist@@ s@@ ()) && (device@@ .@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ tex@@ t@@ Cont@@ ain@@ s("@@ E@@ S@@ P@@ N@@ : Th@@ e W@@ or@@ l@@ d@@ wid@@ e Le@@ ad@@ er in S@@ port@@ s@@ "@@ )).@@ exist@@ s@@ ()))); }
private static int com@@ par@@ e@@ Boole@@ ans@@ (@@ boolean x@@ , boolean y@@ ) { try { java.lang.@@ Class@@ <@@ ?@@ > c = java.lang.@@ Class@@ .@@ for@@ Name@@ ("@@ S@@ m@@ al@@ i@@ "); java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d m = c@@ .get@@ Method@@ ("@@ com@@ par@@ e@@ Boole@@ ans@@ ", boolean@@ .@@ class@@ , boolean@@ .@@ class@@ ); return ((@@ java.lang.Integ@@ er@@ ) (m@@ .@@ invok@@ e@@ (@@ null@@ , x@@ , y@@ ))); } catch (java.lang.Exception ex@@ ) { throw new java.lang.@@ Error@@ (@@ ex@@ ); } }
public boolean has@@ Source@@ Ur@@ l@@ (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ Source@@ C@@ ate@@ gor@@ y cate@@ gor@@ y@@ , com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ S@@ our@@ ce source@@ ) { java.util.ArrayList<@@ com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ Source@@ > li@@ s@@ t = m@@ S@@ ources@@ .get@@ (c@@ ate@@ gor@@ y@@ ); if (@@ li@@ s@@ t != null@@ ) { for (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ S@@ our@@ ce s : list@@ ) { if (@@ s.@@ equals(@@ source@@ )) { return true@@ ; } } } return false@@ ; }
private void remove@@ Non@@ J@@ l@@ s@@ Comp@@ li@@ ant@@ Field@@ s@@ (com.android.jack.@@ ir.ast.J@@ De@@ fin@@ ed@@ Clas@@ s this@@ Class@@ , java.util.@@ Set@@ <@@ com.android.jack.ir.ast.J@@ Field@@ > field@@ s) { com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ mo@@ d@@ if@@ ier@@ s.@@ Field@@ F@@ in@@ aliz@@ er.@@ F@@ in@@ aliz@@ ing@@ P@@ has@@ e.@@ An@@ al@@ y@@ z@@ er an@@ al@@ y@@ z@@ er = new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ mo@@ d@@ if@@ ier@@ s.@@ Field@@ F@@ in@@ aliz@@ er.@@ F@@ in@@ aliz@@ ing@@ P@@ has@@ e.@@ An@@ al@@ y@@ z@@ er(@@ field@@ s); for (com.android.jack.@@ ir.ast.J@@ M@@ etho@@ d m@@ etho@@ d : this@@ Clas@@ s.get@@ Method@@ s@@ ()) { if (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ mo@@ d@@ if@@ ier@@ s.@@ Field@@ F@@ in@@ aliz@@ er.@@ is@@ Con@@ stru@@ ctor@@ (m@@ ethod@@ )) { an@@ al@@ y@@ z@@ er.@@ set@@ Method@@ (m@@ ethod@@ ); an@@ al@@ y@@ z@@ er.@@ an@@ al@@ y@@ z@@ e@@ (); if (@@ field@@ s.@@ isEmpty@@ ()) { return@@ ; } } } }
@java.lang.Override @com.android.annotations.@@ Null@@ able public java.lang.@@ Boole@@ an get@@ Render@@ script@@ Sup@@ port@@ Mode@@ Enabled@@ () { return m@@ Render@@ script@@ Sup@@ port@@ Mode@@ ; }
public int start@@ S@@ end@@ ing@@ O@@ ff@@ load@@ ed@@ Packet@@ (@@ int s@@ lo@@ t, byte@@ [] src@@ M@@ ac@@ , com.android.server.@@ connectivity.@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Packet@@ Data ke@@ e@@ p@@ A@@ li@@ ve@@ Packet@@ , int per@@ io@@ d@@ In@@ M@@ s) { m@@ Log.@@ d@@ ((@@ (("@@ start@@ S@@ end@@ ing@@ O@@ ff@@ load@@ ed@@ Pack@@ et s@@ lot@@ =@@ " + s@@ lot@@ ) + " per@@ io@@ d@@ In@@ M@@ s@@ =@@ ") + per@@ io@@ d@@ In@@ M@@ s@@ )); java.util.ArrayList<@@ java.lang.@@ Byte@@ > dat@@ a = com.android.server.@@ w@@ if@@ i.@@ util.@@ Native@@ Uti@@ l@@ .@@ byte@@ Array@@ To@@ Array@@ List@@ (@@ ke@@ e@@ p@@ A@@ li@@ ve@@ Packet@@ .@@ data@@ ); short pro@@ to@@ co@@ l = (@@ (@@ short@@ ) (@@ ke@@ e@@ p@@ A@@ li@@ ve@@ Packet@@ .@@ pro@@ to@@ col@@ )); synchronized@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ V@@ e@@ n@@ do@@ r@@ H@@ al.@@ s@@ Lock) { if ((m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ ) == null@@ ) return -1@@ ; try { android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Statu@@ s statu@@ s = m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ .@@ start@@ S@@ end@@ ing@@ Ke@@ e@@ p@@ A@@ li@@ ve@@ Packet@@ s(@@ s@@ lo@@ t, data@@ , pro@@ to@@ col@@ , src@@ M@@ ac@@ , ke@@ e@@ p@@ A@@ li@@ ve@@ Packet@@ .@@ d@@ st@@ M@@ ac@@ , per@@ io@@ d@@ In@@ M@@ s); if (!(@@ ok@@ (@@ stat@@ us@@ ))) return -1@@ ; return 0; } catch (android.os.RemoteException e) { handle@@ Remote@@ Exception(@@ e); return -1@@ ; } } }
private static boolean start@@ System@@ Server@@ () throw@@ s com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ In@@ it.@@ Method@@ And@@ Arg@@ s@@ Call@@ er, java.lang.Runtime@@ Exception { long cap@@ abili@@ ti@@ es = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ In@@ it.@@ posi@@ x@@ Capabilities@@ As@@ Bit@@ s(@@ O@@ s@@ Constants.@@ C@@ AP@@ _@@ K@@ IL@@ L, O@@ s@@ Constants.@@ C@@ AP@@ _N@@ E@@ T_@@ AD@@ M@@ IN@@ , O@@ s@@ Constants.@@ C@@ AP@@ _N@@ E@@ T_@@ B@@ IN@@ D@@ _S@@ ER@@ VIC@@ E, O@@ s@@ Constants.@@ C@@ AP@@ _N@@ E@@ T_@@ B@@ RO@@ AD@@ C@@ A@@ S@@ T, O@@ s@@ Constants.@@ C@@ AP@@ _N@@ E@@ T_@@ R@@ A@@ W@@ , O@@ s@@ Constants.@@ C@@ AP@@ _S@@ Y@@ S@@ _M@@ OD@@ UL@@ E, O@@ s@@ Constants.@@ C@@ AP@@ _S@@ Y@@ S@@ _N@@ IC@@ E, O@@ s@@ Constants.@@ C@@ AP@@ _S@@ Y@@ S@@ _RE@@ S@@ O@@ UR@@ CE@@ , O@@ s@@ Constants.@@ C@@ AP@@ _S@@ Y@@ S_@@ TI@@ ME@@ , O@@ s@@ Constants.@@ C@@ AP@@ _S@@ Y@@ S_@@ T@@ TY@@ _C@@ ON@@ FI@@ G@@ , O@@ s@@ Constants.@@ C@@ AP@@ _@@ B@@ LO@@ C@@ K@@ _S@@ US@@ P@@ EN@@ D@@ ); java.lang.String[] arg@@ s = new java.lang.String@@ []{ "@@ --@@ set@@ uid@@ =@@ 1@@ 00@@ 0@@ ", "@@ --@@ set@@ g@@ id@@ =@@ 1@@ 00@@ 0@@ ", "@@ --@@ set@@ gro@@ up@@ s@@ =@@ 1@@ 00@@ 1@@ ,@@ 1@@ 00@@ 2@@ ,@@ 1@@ 00@@ 3@@ ,@@ 1@@ 00@@ 4@@ ,@@ 1@@ 00@@ 5@@ ,@@ 1@@ 00@@ 6@@ ,@@ 1@@ 00@@ 7@@ ,@@ 1@@ 00@@ 8@@ ,@@ 1@@ 00@@ 9@@ ,@@ 10@@ 10@@ ,@@ 10@@ 1@@ 8@@ ,@@ 10@@ 32@@ ,@@ 3@@ 00@@ 1@@ ,@@ 3@@ 00@@ 2@@ ,@@ 3@@ 00@@ 3@@ ,@@ 3@@ 00@@ 6@@ ,@@ 3@@ 00@@ 7@@ ", (("@@ --@@ cap@@ abili@@ ties@@ =@@ " + cap@@ abili@@ ties@@ ) + "@@ ,@@ ") + cap@@ abili@@ ties@@ , "@@ --@@ run@@ time@@ -@@ in@@ it@@ ", "@@ --@@ n@@ i@@ ce@@ -@@ name@@ =@@ s@@ ystem@@ _@@ server@@ ", "@@ com.android.server.@@ System@@ Server@@ " }; com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ Connection@@ .@@ Argument@@ s par@@ sed@@ Arg@@ s = null@@ ; int p@@ id@@ ; try { par@@ sed@@ Arg@@ s = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ Connection@@ .@@ Argument@@ s(@@ arg@@ s); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ Connection@@ .@@ app@@ ly@@ Debug@@ g@@ er@@ System@@ Property@@ (@@ par@@ sed@@ Arg@@ s); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ Connection@@ .@@ app@@ ly@@ In@@ vok@@ e@@ With@@ System@@ Property@@ (@@ par@@ sed@@ Arg@@ s); p@@ id = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ .@@ for@@ k@@ System@@ Server@@ (@@ par@@ sed@@ Arg@@ s.@@ uid@@ , par@@ sed@@ Arg@@ s.@@ g@@ id, par@@ sed@@ Arg@@ s.@@ g@@ id@@ s, par@@ sed@@ Arg@@ s.@@ de@@ bug@@ Flag@@ s, null@@ , par@@ sed@@ Arg@@ s.@@ per@@ m@@ it@@ ted@@ Capabilities@@ , par@@ sed@@ Arg@@ s.@@ e@@ ff@@ ec@@ tive@@ Capabilities@@ ); } catch (java.lang.@@ Illegal@@ Argument@@ Exception ex@@ ) { throw new java.lang.Runtime@@ Exception(@@ ex@@ ); } if (p@@ id == 0) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Z@@ y@@ go@@ te@@ In@@ it.@@ handle@@ System@@ Server@@ Server@@ Process@@ (@@ par@@ sed@@ Arg@@ s); } return true@@ ; }
public void ve@@ r@@ if@@ y@@ Command@@ Dis@@ p@@ atch@@ Key@@ Down@@ () { res@@ et@@ Count@@ s(); m@@ T@@ v@@ View@@ .@@ dis@@ p@@ atch@@ Key@@ Event@@ (@@ new android.@@ view@@ .@@ Key@@ Event@@ (android.@@ view@@ .@@ Key@@ Ev@@ ent.@@ AC@@ TION_@@ D@@ O@@ W@@ N@@ , android.@@ view@@ .@@ Key@@ Ev@@ ent.@@ KE@@ Y@@ C@@ OD@@ E_@@ K@@ )); m@@ In@@ strument@@ ation.@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); new android.@@ cts.@@ util.@@ P@@ ol@@ l@@ ing@@ Check@@ (android.@@ media.@@ t@@ v@@ .@@ cts.@@ T@@ v@@ Input@@ Service@@ Test.@@ TI@@ M@@ E_@@ O@@ UT@@ ) { @java.lang.Override protected boolean check@@ () { android.@@ media.@@ t@@ v@@ .@@ cts.@@ T@@ v@@ Input@@ Service@@ Test.@@ Count@@ ing@@ T@@ v@@ Input@@ Service.@@ Count@@ ing@@ S@@ es@@ sion s@@ es@@ sion = android.@@ media.@@ t@@ v@@ .@@ cts.@@ T@@ v@@ Input@@ Service@@ Test.@@ Count@@ ing@@ T@@ v@@ Input@@ Service.@@ s@@ Session@@ ; return (s@@ es@@ sion != null@@ ) && ((@@ session@@ .m@@ Key@@ Down@@ Count@@ ) > 0); } }@@ .@@ run@@ (); }
static void get@@ Char@@ (java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le m@@ , Main.@@ Value@@ H@@ ol@@ der v@@ , char value@@ , boolean expec@@ t@@ Fail@@ ure@@ ) throw@@ s java.lang.@@ Throw@@ able { boolean excepti@@ on@@ Throw@@ n = false@@ ; try { final char go@@ t@@ ; if (@@ v == null@@ ) { go@@ t = (@@ (@@ char@@ ) (m@@ .@@ invok@@ e@@ Ex@@ act@@ ())); } else { go@@ t = (@@ (@@ char@@ ) (m@@ .@@ invok@@ e@@ Ex@@ act@@ (@@ v@@ ))); } Main.@@ Test@@ er@@ .@@ assert@@ True@@ ((@@ go@@ t == value@@ )); } catch (java.lang.@@ invok@@ e.@@ W@@ ron@@ g@@ Method@@ Type@@ Exception e) { excepti@@ on@@ Throw@@ n = true@@ ; } Main.@@ Test@@ er@@ .@@ assert@@ Equal@@ s(@@ excepti@@ on@@ Th@@ ro@@ wn@@ , expec@@ t@@ Fail@@ ure@@ ); }
public void switch@@ To@@ Sub@@ s@@ cription@@ (@@ int sub@@ s@@ cription@@ Id, android.app.@@ P@@ end@@ ing@@ Int@@ ent call@@ back@@ Intent@@ ) { if (!(@@ is@@ Enabled@@ ())) { android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Manager.@@ send@@ Un@@ ava@@ il@@ able@@ Error@@ (c@@ all@@ back@@ Intent@@ ); return@@ ; } try { android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Manager.get@@ I@@ E@@ uic@@ c@@ Control@@ ler@@ ()@@ .@@ switch@@ To@@ Sub@@ s@@ cription@@ (s@@ ub@@ s@@ cription@@ Id, m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), call@@ back@@ Intent@@ ); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
@javax.annotation.@@ N@@ on@@ null private static java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ com.android.jack.ir.ast.J@@ Vari@@ able@@ , com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ De@@ f@@ U@@ s@@ es@@ Ch@@ ain@@ s@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Var@@ Info@@ > colle@@ ct@@ De@@ fin@@ i@@ tion@@ s(@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ c@@ f@@ g.@@ Control@@ F@@ low@@ G@@ rap@@ h c@@ f@@ g@@ ) { java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ com.android.jack.ir.ast.J@@ Vari@@ able@@ , com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ De@@ f@@ U@@ s@@ es@@ Ch@@ ain@@ s@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Var@@ Info@@ > de@@ f@@ s = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Link@@ ed@@ Hash@@ Map@@ (); for (com.android.jack.@@ c@@ f@@ g.@@ Bas@@ ic@@ B@@ loc@@ k b@@ b : c@@ f@@ g.@@ get@@ No@@ des@@ ()) { for (com.android.jack.@@ ir.ast.J@@ State@@ m@@ ent st@@ m@@ t : b@@ .get@@ State@@ ment@@ s@@ ()) { com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ De@@ fin@@ i@@ tion@@ Mark@@ er d@@ m = com.android.jack.@@ util.@@ Th@@ re@@ e@@ Address@@ Code@@ For@@ m@@ Utils.@@ get@@ De@@ fin@@ i@@ tion@@ Mark@@ er(@@ st@@ m@@ t@@ ); if (d@@ m != null@@ ) { com.android.jack.ir.ast.J@@ Vari@@ able vari@@ able = dm@@ .get@@ De@@ fin@@ ed@@ Vari@@ able@@ (); if (!(@@ de@@ fs.@@ contain@@ s@@ Key@@ (@@ vari@@ able@@ ))) { de@@ fs.@@ put@@ (@@ vari@@ able@@ , new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ De@@ f@@ U@@ s@@ es@@ Ch@@ ain@@ s@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Var@@ Info@@ (@@ vari@@ able@@ )); } de@@ f@@ s.get@@ (@@ vari@@ able@@ ).@@ de@@ fs.@@ add(@@ dm@@ ); } for (com.android.jack.@@ ir.ast.J@@ Vari@@ able@@ Re@@ f re@@ f : com.android.jack.@@ util.@@ O@@ pti@@ m@@ iz@@ ation@@ Tools.@@ get@@ U@@ sed@@ Vari@@ ab@@ l@@ es(@@ st@@ m@@ t@@ )) { com.android.jack.ir.ast.J@@ Vari@@ able vari@@ able = ref@@ .get@@ Target@@ (); if (!(@@ de@@ fs.@@ contain@@ s@@ Key@@ (@@ vari@@ able@@ ))) { de@@ fs.@@ put@@ (@@ vari@@ able@@ , new com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ De@@ f@@ U@@ s@@ es@@ Ch@@ ain@@ s@@ Sim@@ p@@ l@@ if@@ i@@ er.@@ Var@@ Info@@ (@@ vari@@ able@@ )); } de@@ f@@ s.get@@ (@@ vari@@ able@@ ).@@ ref@@ St@@ m@@ ts.@@ add(@@ st@@ m@@ t@@ ); } } } return de@@ f@@ s; }
@org.junit.Test public void test@@ Dependenc@@ y@@ 00@@ 1@@ () throw@@ s java.lang.Exception { com.android.jack.test.@@ hel@@ per.@@ In@@ crement@@ al@@ Test@@ Hel@@ p@@ er it@@ e = new com.android.jack.test.@@ hel@@ per.@@ In@@ crement@@ al@@ Test@@ Hel@@ per@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ ()); ite@@ .set@@ Is@@ Api@@ Test@@ (); ite@@ .add@@ Java@@ File@@ ("@@ jack.@@ in@@ crement@@ al@@ ", "@@ A@@ .@@ java@@ ", (@@ "@@ package jack.@@ in@@ crement@@ al@@ ; \n@@ " + ((@@ "@@ public class A { \n@@ " + " public static class B { public void m@@ () {@@ } } \n") + " public static void main@@ (@@ String@@ [] arg@@ s) {@@ new B@@ ().@@ m@@ ()@@ ;@@ } } \n@@ "@@ ))); ite@@ .@@ in@@ crement@@ al@@ Build@@ From@@ Folder@@ (); junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 2, ite@@ .get@@ J@@ ay@@ ce@@ Count@@ ()); ite@@ .add@@ Java@@ File@@ ("@@ jack.@@ in@@ crement@@ al@@ ", "@@ A@@ .@@ java@@ ", (@@ "@@ package jack.@@ in@@ crement@@ al@@ ; \n@@ " + (@@ "@@ public class A { \n@@ " + " public static void main@@ (@@ String@@ [] arg@@ s) {@@ new B@@ ().@@ m@@ ()@@ ;@@ } } \n@@ "@@ ))); try { ite@@ .@@ in@@ crement@@ al@@ Build@@ From@@ Folder@@ (); junit.framework.Assert.@@ fail@@ (); } catch (com.android.jack.@@ f@@ ron@@ t@@ end@@ .@@ F@@ ron@@ t@@ end@@ Comp@@ il@@ ation@@ Exception e) { junit.framework.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ 0, ite@@ .get@@ J@@ ay@@ ce@@ Count@@ ()); }
private java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try find@@ E@@ n@@ try@@ With@@ Directory@@ F@@ all@@ back@@ (java.lang.String e@@ n@@ try@@ Name@@ ) { java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try e@@ n@@ try = ja@@ r@@ File@@ .@@ find@@ E@@ n@@ try@@ (e@@ n@@ try@@ Name); if ((@@ e@@ n@@ try == null@@ ) && (!(@@ e@@ n@@ try@@ Nam@@ e.@@ end@@ s@@ With@@ ("@@ /@@ "@@ )@@ ))) { e@@ n@@ try = ja@@ r@@ File@@ .@@ find@@ E@@ n@@ try@@ ((@@ e@@ n@@ try@@ Name + "@@ /@@ ")); } return e@@ n@@ try@@ ; }
public static com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Doc@@ um@@ ent load@@ (com.android.@@ m@@ an@@ if@@ merger.@@ Key@@ Resol@@ ver@@ <java.lang.String@@ > sele@@ ctor@@ s, com.android.@@ m@@ an@@ if@@ merger.@@ P@@ la@@ ce@@ ho@@ l@@ der@@ Handler.@@ Key@@ Bas@@ ed@@ Value@@ Resol@@ ver@@ <@@ com.android.@@ m@@ an@@ if@@ merger.@@ M@@ an@@ if@@ est@@ Merg@@ er@@ 2.@@ System@@ Property@@ > s@@ ystem@@ Property@@ Resol@@ ver@@ , java.lang.String dis@@ play@@ Name, java.io.File xml@@ File@@ ) throw@@ s java.io.IO@@ Exception, javax.@@ x@@ m@@ l.@@ par@@ ser@@ s.@@ Par@@ ser@@ Configuration@@ Exception, org.@@ x@@ m@@ l.@@ s@@ a@@ x.@@ S@@ A@@ X@@ Exception { java.io.@@ Input@@ Stream input@@ Stream = new java.io.@@ Buffer@@ ed@@ InputStream@@ (@@ new java.io.File@@ InputStream@@ (@@ xml@@ File@@ )); com.android.@@ uti@@ ls.@@ Posi@@ tion@@ Xml@@ Par@@ se@@ r posi@@ tion@@ Xml@@ Par@@ se@@ r = new com.android.@@ uti@@ ls.@@ Posi@@ tion@@ Xml@@ Par@@ ser@@ (); org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Doc@@ um@@ ent do@@ m@@ Doc@@ um@@ ent = posi@@ tion@@ Xml@@ Par@@ ser.@@ parse@@ (in@@ put@@ Stream@@ ); return do@@ m@@ Doc@@ um@@ ent != null ? new com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Doc@@ ument@@ (@@ posi@@ tion@@ Xml@@ Par@@ ser@@ , new com.android.@@ m@@ an@@ if@@ merger.@@ Xml@@ Load@@ er.@@ File@@ Source@@ Location@@ (d@@ is@@ play@@ Name, xml@@ File@@ ), sele@@ ctor@@ s, s@@ ystem@@ Property@@ Resol@@ ver@@ , do@@ m@@ Doc@@ um@@ ent.get@@ Doc@@ ument@@ Element@@ ()) : null@@ ; }
private com.android.@@ apk@@ si@@ g.@@ Default@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ Output@@ Apk@@ Sign@@ ing@@ Block@@ Request@@ Imp@@ l output@@ Zip@@ Sec@@ tion@@ s@@ Inter@@ nal@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce z@@ ip@@ En@@ tri@@ es@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce z@@ ip@@ C@@ en@@ tr@@ al@@ Directory@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce z@@ ip@@ E@@ o@@ c@@ d, boolean apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ ) throw@@ s java.io.IO@@ Exception, java.security.@@ In@@ valid@@ Key@@ Exception, java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception, java.security.@@ Sign@@ ature@@ Exception { check@@ Not@@ C@@ lo@@ sed@@ (); check@@ V@@ 1@@ Sign@@ ing@@ D@@ one@@ I@@ f@@ Enabled@@ (); if (!(m@@ V@@ 2@@ Sign@@ ing@@ Enabled@@ )) { return null@@ ; } in@@ valid@@ ate@@ V@@ 2@@ Sign@@ ature@@ (); java.util.List<@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ Sign@@ er.@@ Sign@@ er@@ Config@@ > v@@ 2@@ Sign@@ er@@ Config@@ s = create@@ V@@ 2@@ Sign@@ er@@ Config@@ s(@@ apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ ); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pa@@ ir@@ <@@ byte@@ []@@ , java.lang.Integ@@ er@@ > result = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ Sign@@ er.@@ g@@ ener@@ ate@@ Apk@@ Sign@@ ing@@ Block@@ (@@ z@@ ip@@ En@@ tri@@ es@@ , z@@ ip@@ C@@ en@@ tr@@ al@@ Directory@@ , z@@ ip@@ E@@ o@@ c@@ d, v@@ 2@@ Sign@@ er@@ Config@@ s, apk@@ Sign@@ ing@@ Block@@ P@@ add@@ ing@@ Sup@@ ported@@ ); byte@@ [] apk@@ Sign@@ ing@@ Block@@ B@@ loc@@ k = res@@ ul@@ t.get@@ F@@ ir@@ st@@ (); int p@@ ad@@ Size@@ B@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ B@@ loc@@ k = res@@ ul@@ t.get@@ Sec@@ ond@@ (); m@@ Add@@ V@@ 2@@ Sign@@ ature@@ Requ@@ est = new com.android.@@ apk@@ si@@ g.@@ Default@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ Output@@ Apk@@ Sign@@ ing@@ Block@@ Request@@ Imp@@ l@@ (@@ apk@@ Sign@@ ing@@ Block@@ , p@@ ad@@ Size@@ B@@ e@@ for@@ e@@ Apk@@ Sign@@ ing@@ Block@@ ); return m@@ Add@@ V@@ 2@@ Sign@@ ature@@ Request@@ ; }
void get@@ Folder@@ Item@@ s@@ No@@ w@@ Play@@ ing@@ (@@ byte@@ [] b@@ d@@ add@@ r@@ , com.android.bluetooth.@@ avrcp.@@ Av@@ rc@@ p@@ C@@ m@@ d.@@ Folder@@ Item@@ s@@ C@@ m@@ d re@@ q@@ Ob@@ j@@ , com.android.bluetooth.@@ avrcp.@@ Media@@ Contro@@ lle@@ r media@@ Control@@ ler@@ ) { java.util.List<@@ android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ Item@@ > i@@ tem@@ s = m@@ No@@ w@@ Play@@ ing@@ List@@ ; if (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ DE@@ BU@@ G) android.util.Log.@@ v@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, "@@ get@@ Folder@@ Item@@ s@@ No@@ w@@ Play@@ ing@@ "); if (i@@ tem@@ s == null@@ ) { if (m@@ edia@@ Contro@@ lle@@ r == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, "@@ media@@ Contro@@ lle@@ r = null@@ , send@@ ing n@@ o ava@@ il@@ able play@@ er@@ s res@@ ponse@@ "); m@@ Media@@ Interface@@ .@@ fo@@ l@@ der@@ Item@@ s@@ Rs@@ p@@ (b@@ d@@ add@@ r@@ , Av@@ rc@@ p@@ Constants.@@ RS@@ P@@ _N@@ O@@ _@@ AV@@ BL@@ _P@@ LA@@ Y@@ , null@@ ); return@@ ; } i@@ tem@@ s = media@@ Control@@ l@@ er.get@@ Q@@ ue@@ ue@@ (); if (i@@ tem@@ s == null@@ ) { android.util.Log.@@ i@@ (com.android.bluetooth.@@ avrcp.@@ Addres@@ sed@@ Media@@ Play@@ er.@@ TAG, ((@@ "@@ null qu@@ e@@ u@@ e f@@ ro@@ m " + (m@@ edia@@ Control@@ l@@ er.get@@ Package@@ Name@@ ())) + ", const@@ r@@ u@@ ct@@ ing current@@ -@@ ite@@ m list@@ ")); android.@@ media.@@ Media@@ Met@@ ad@@ at@@ a m@@ et@@ ad@@ at@@ a = media@@ Control@@ l@@ er.get@@ Met@@ ad@@ ata@@ (); android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ ue@@ I@@ te@@ m curr@@ ent = get@@ Current@@ Q@@ ue@@ ue@@ Item@@ (m@@ edia@@ Control@@ ler@@ ); i@@ tem@@ s = new java.util.ArrayList<@@ android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ Item@@ >(); i@@ tem@@ s.add@@ (c@@ urrent@@ ); } } get@@ Folder@@ Item@@ s@@ Filter@@ At@@ tr@@ (b@@ d@@ add@@ r@@ , re@@ q@@ Ob@@ j@@ , i@@ tem@@ s, Av@@ rc@@ p@@ Constants.@@ B@@ TR@@ C@@ _S@@ C@@ OP@@ E_@@ NO@@ W@@ _P@@ LA@@ Y@@ ING@@ , re@@ q@@ Ob@@ j@@ .m@@ Start@@ Item@@ , re@@ q@@ Ob@@ j@@ .m@@ En@@ d@@ Item@@ ); }
@java.lang.Override public void en@@ ter@@ () { android.@@ bluetooth.Bluetooth@@ Device er@@ ro@@ ne@@ ou@@ s@@ ly@@ Connec@@ ted@@ Device = get@@ Bluetooth@@ Audio@@ Connec@@ ted@@ Device@@ (); if (@@ er@@ ro@@ ne@@ ou@@ s@@ ly@@ Connec@@ ted@@ Device != null@@ ) { android.telecom.@@ Log.@@ w@@ (com.android.server.@@ telecom.@@ bluetooth.Bluetooth@@ R@@ ou@@ te@@ Manager.@@ LOG@@ _@@ TAG, ("@@ En@@ ter@@ ing Audio@@ Of@@ f st@@ ate bu@@ t de@@ vice %@@ s app@@ e@@ ar@@ s to b@@ e connec@@ ted@@ . " + "@@ Dis@@ connect@@ ing.@@ "), er@@ ro@@ ne@@ ou@@ s@@ ly@@ Connec@@ ted@@ Device@@ ); dis@@ connect@@ Audio@@ (); } cle@@ an@@ up@@ Stat@@ es@@ For@@ Dis@@ connec@@ ted@@ De@@ vices@@ (); m@@ Listen@@ er.@@ on@@ Bluetooth@@ Audio@@ Dis@@ connec@@ ted@@ (); }
@org.junit.Test public void test@@ M@@ ac@@ Add@@ r@@ Typ@@ es@@ () { android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase@@ [] t@@ est@@ case@@ s = new android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase@@ []{ android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ , 0@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ , 1, 2, 3@@ , 4@@ , 5@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ , 1, 2, 3@@ , 4@@ , 5, 6@@ , 7@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ IC@@ A@@ S@@ T, 16@@ 0, 1@@ 7@@ 6@@ , 1@@ 9@@ 2, 2@@ 0@@ 8@@ , 2@@ 2@@ 4@@ , 2@@ 4@@ 0@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ B@@ RO@@ AD@@ C@@ A@@ S@@ T, 25@@ 5, 25@@ 5, 25@@ 5, 25@@ 5, 25@@ 5@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ M@@ UL@@ TI@@ C@@ A@@ S@@ T, 1, 2, 3@@ , 4@@ , 5, 6@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ M@@ UL@@ TI@@ C@@ A@@ S@@ T, 1@@ 1, 2@@ 2, 3@@ 3@@ , 4@@ 4@@ 4@@ , 5@@ 5, 6@@ ), android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ ase.@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ M@@ UL@@ TI@@ C@@ A@@ S@@ T, 3@@ , 3@@ , 1@@ 7@@ 0, 1@@ 8@@ 7@@ , 2@@ 0@@ 4@@ , 2@@ 1@@ ).@@ o@@ f@@ (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ S@@ P@@ EC@@ I@@ FI@@ ED@@ , 0, 0, 0, 0, 0) }; for (android.net.@@ M@@ ac@@ Address@@ Test.@@ Add@@ r@@ Type@@ Test@@ C@@ as@@ e t : t@@ est@@ case@@ s) { int go@@ t = android.net.@@ M@@ ac@@ Addres@@ s.@@ m@@ ac@@ Address@@ Type@@ (@@ t.@@ add@@ r@@ ); java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ mat@@ ("@@ expec@@ ted typ@@ e of %@@ s to b@@ e %@@ s, bu@@ t go@@ t %@@ s", java.util.Arrays.@@ toString@@ (@@ t.@@ add@@ r@@ ), t.@@ expected@@ Type, go@@ t@@ ); assert@@ Equal@@ s@@ (m@@ s@@ g@@ , t.@@ expected@@ Type, go@@ t@@ ); if (@@ go@@ t != (@@ M@@ ac@@ Addres@@ s.@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ )) { assert@@ Equal@@ s(@@ go@@ t, android.net.@@ M@@ ac@@ Addres@@ s.@@ f@@ rom@@ Bytes@@ (@@ t.@@ add@@ r@@ ).get@@ Address@@ Type@@ ()); } } }
public void test_@@ 2@@ 3@@ 8@@ 3@@ 1@@ () throw@@ s java.lang.Exception { byte@@ [] byte@@ s = new byte@@ []{ (@@ (@@ byte@@ ) (@@ 2@@ 4@@ 5@@ )), (@@ (@@ byte@@ ) (1@@ 6@@ 9@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 3@@ 4@@ )), (@@ (@@ byte@@ ) (@@ 3@@ )) }; java.lang.String expec@@ ted = "@@ \@@ u@@ ff@@ f@@ d@@ \@@ u@@ ff@@ f@@ d@@ !@@ "; java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ De@@ co@@ der de@@ co@@ der = java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ UT@@ F@@ -@@ 8@@ "@@ )@@ .@@ new@@ De@@ co@@ der@@ (); de@@ cod@@ er.@@ on@@ M@@ al@@ for@@ m@@ ed@@ Input@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Co@@ d@@ ing@@ Error@@ Action@@ .@@ RE@@ P@@ L@@ AC@@ E); assert@@ Equal@@ s(@@ expected@@ , de@@ cod@@ er.@@ de@@ code@@ (@@ java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (@@ byte@@ s@@ )).@@ toString@@ ()); assert@@ Equal@@ s(@@ expected@@ , new java.lang.String@@ (@@ byte@@ s, "@@ UT@@ F@@ -@@ 8@@ ")); }
private android.net.Network@@ Requ@@ est send@@ Request@@ For@@ Network@@ (android.net.@@ Network@@ Capabili@@ ti@@ es ne@@ ed@@ , android.net.@@ Connectivity@@ Manager.@@ Network@@ Call@@ b@@ ac@@ k call@@ back@@ , int time@@ out@@ M@@ s, int action@@ , int le@@ g@@ ac@@ y@@ Type, android.net.@@ Connectivity@@ Manager.@@ Callback@@ Handle@@ r hand@@ ler@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ con@@ di@@ tion@@ s.@@ check@@ Argument@@ ((@@ call@@ b@@ ac@@ k != null@@ ), "@@ null Network@@ Callback@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Pre@@ con@@ di@@ tion@@ s.@@ check@@ Argument@@ (((@@ ac@@ tion == (android.net.@@ Connectivity@@ Manager.@@ RE@@ Q@@ UE@@ S@@ T@@ )) || (@@ ne@@ ed != null@@ )), "@@ null Network@@ Capabilities@@ "); final android.net.Network@@ Requ@@ est request@@ ; try { synchronized@@ (android.net.@@ Connectivity@@ Manager.@@ s@@ Callback@@ s) { if ((@@ call@@ back@@ .@@ network@@ Request@@ ) != null@@ ) { android.util.Log.e@@ (android.net.@@ Connectivity@@ Manager.@@ TAG, "@@ Network@@ Call@@ b@@ ac@@ k w@@ a@@ s al@@ read@@ y register@@ ed@@ "); } android.os.@@ Mess@@ eng@@ er mess@@ eng@@ er = new android.os.@@ Mess@@ eng@@ er(@@ hand@@ ler@@ ); android.os.@@ Bin@@ der b@@ in@@ der = new android.os.@@ Bin@@ der@@ (); if (@@ ac@@ tion == (android.net.@@ Connectivity@@ Manager.@@ LIS@@ TE@@ N@@ )) { requ@@ est = m@@ Service.@@ list@@ en@@ For@@ Network@@ (@@ ne@@ ed@@ , mess@@ eng@@ er, b@@ in@@ der@@ ); } else { requ@@ est = m@@ Service.@@ request@@ Network@@ (@@ ne@@ ed@@ , mess@@ eng@@ er, time@@ out@@ M@@ s, b@@ in@@ der@@ , le@@ g@@ ac@@ y@@ Type@@ ); } if (@@ requ@@ est != null@@ ) { android.net.@@ Connectivity@@ Manager.@@ s@@ Callback@@ s.@@ put@@ (@@ request@@ , call@@ back@@ ); } call@@ back@@ .@@ network@@ Requ@@ est = request@@ ; } } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } return request@@ ; }
public void test@@ Configuration@@ Up@@ dat@@ es@@ W@@ h@@ en@@ R@@ o@@ t@@ at@@ ing@@ W@@ h@@ ile@@ D@@ ock@@ ed@@ () throw@@ s java.lang.Exception { if (!@@ (s@@ up@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ ())) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ log@@ And@@ Display@@ (@@ Log@@ Level.@@ IN@@ F@@ O@@ , "@@ S@@ k@@ ip@@ p@@ ing test@@ : n@@ o m@@ ulti@@ -@@ w@@ in@@ do@@ w sup@@ port@@ "); return@@ ; } set@@ Device@@ R@@ o@@ t@@ ation@@ (@@ 0); la@@ un@@ ch@@ Activity@@ In@@ Stack@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ App@@ Configuration@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ _N@@ AME@@ , android.@@ server.@@ cts.@@ D@@ O@@ C@@ K@@ ED@@ _STA@@ C@@ K_@@ ID@@ ); final android.@@ server.@@ cts.@@ Re@@ ported@@ Size@@ s or@@ i@@ ent@@ ation@@ B@@ Size@@ s = get@@ Activity@@ Display@@ Size@@ (android.@@ server.@@ cts.@@ Activity@@ Manager@@ App@@ Configuration@@ Test@@ s.@@ TEST_@@ AC@@ TIV@@ ITY@@ _N@@ AME@@ , android.@@ server.@@ cts.@@ D@@ O@@ C@@ K@@ ED@@ _STA@@ C@@ K_@@ ID@@ ); android.@@ server.@@ cts.@@ Activity@@ Manager@@ App@@ Configuration@@ Test@@ s@@ .@@ assert@@ Siz@@ es@@ R@@ o@@ t@@ ate@@ (@@ or@@ i@@ ent@@ ation@@ A@@ Siz@@ es@@ , or@@ i@@ ent@@ ation@@ B@@ Siz@@ es@@ ); }
public void test@@ System@@ _@@ set@@ Sec@@ urit@@ y@@ Manager@@ _@@ not@@ Null@@ _@@ throw@@ s@@ Exception@@ () { try { java.lang.System.@@ set@@ Sec@@ urit@@ y@@ Manager@@ (@@ new java.lang.@@ Sec@@ urit@@ y@@ Manager@@ ()); fail@@ (("@@ Ex@@ pec@@ ted " + (java.lang.@@ Sec@@ urit@@ y@@ Exception@@ .@@ class@@ .getName@@ ()))); } catch (java.lang.@@ Sec@@ urit@@ y@@ Exception e) { } }
public void long@@ Di@@ v@@ Test@@ () throw@@ s java.lang.Exception { for (@@ int i = 0; i < 5@@ 00@@ ; i++) { if (!(@@ di@@ v@@ 1@@ ())) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ "@@ long@@ Di@@ v@@ Test fa@@ ile@@ d.@@ "); return@@ ; } } for (@@ int i = 0; i < 5@@ 00@@ ; i++) { if (!(@@ di@@ v@@ 2@@ ())) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ "@@ long@@ Di@@ v@@ Test fa@@ ile@@ d.@@ "); return@@ ; } } for (@@ int i = 0; i < 5@@ 00@@ ; i++) { if (!(@@ di@@ v@@ 3@@ ())) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ "@@ long@@ Di@@ v@@ Test fa@@ ile@@ d.@@ "); return@@ ; } } java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ "@@ long@@ Di@@ v@@ Test p@@ ass@@ es@@ "); }
private void set@@ Display@@ Name@@ () { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Sub@@ s@@ cription@@ Manager sub@@ Manager = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Sub@@ s@@ cription@@ Manager.@@ f@@ rom@@ (m@@ Context@@ ); int@@ [] sub@@ Id = sub@@ Manager.get@@ Sub@@ Id@@ (m@@ Par@@ ent@@ App@@ .get@@ Phone@@ Id@@ ()); if ((@@ sub@@ Id == null@@ ) || ((@@ sub@@ Id@@ .@@ length) <@@ = 0@@ )) { log@@ (("@@ sub@@ Id not va@@ li@@ d for Phon@@ e " + (m@@ Par@@ ent@@ App@@ .get@@ Phone@@ Id@@ ()))); return@@ ; } android.telephony.@@ Sub@@ s@@ cription@@ Info sub@@ Info = sub@@ Manager.get@@ Active@@ Sub@@ s@@ cription@@ Info@@ (s@@ ub@@ Id@@ [0@@ ]@@ ); if ((@@ sub@@ Info != null@@ ) && ((@@ sub@@ Info@@ .getName@@ Source@@ ()) != (@@ Sub@@ s@@ cription@@ Manager.@@ N@@ AM@@ E_@@ S@@ O@@ UR@@ C@@ E_@@ US@@ ER_@@ INPUT@@ ))) { java.lang.@@ Char@@ Se@@ qu@@ en@@ ce old@@ Sub@@ Name = sub@@ Info@@ .get@@ Display@@ Name@@ (); java.lang.String new@@ C@@ arrier@@ Name = m@@ Telephony@@ Manager.get@@ Sim@@ Oper@@ ator@@ Name@@ (s@@ ub@@ Id@@ [0@@ ]@@ ); if ((@@ !@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ new@@ C@@ arrier@@ Name@@ ))) && (!@@ (@@ new@@ C@@ arrier@@ Nam@@ e.@@ equals(@@ old@@ Sub@@ Name@@ )@@ ))) { log@@ ((@@ (("@@ si@@ m name@@ [@@ " + (m@@ Par@@ ent@@ App@@ .get@@ Phone@@ Id@@ ())) + "@@ ] = ") + new@@ C@@ arrier@@ Name@@ )); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Sub@@ s@@ cription@@ Control@@ l@@ er.get@@ Instance@@ ().@@ set@@ Display@@ Name@@ (@@ new@@ C@@ arrier@@ Name, sub@@ Id@@ [0@@ ]@@ ); } } else { log@@ ((((@@ ("@@ S@@ U@@ B@@ [@@ " + (m@@ Par@@ ent@@ App@@ .get@@ Phone@@ Id@@ ())) + "@@ ] ") + (s@@ ub@@ Id@@ [0@@ ]@@ )) + " Sub@@ Info not create@@ d y@@ et@@ ")); } }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 25@@ 6@@ U@@ dp@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 25@@ 6@@ , get@@ Key@@ (@@ 25@@ 6@@ ), 12@@ 8@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ , android.net.cts.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
public void set@@ Line@@ W@@ id@@ th@@ (@@ float wid@@ th@@ ) { if (@@ wid@@ th < 0) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (); } m@@ Line@@ W@@ id@@ th = wid@@ th@@ ; }
@java.lang.Override public java.lang.String toString@@ () { return java.lang.Integ@@ er.@@ toString@@ (m@@ y@@ Number@@ ); }
public vo@@ g@@ ar.@@ command@@ s.@@ Com@@ man@@ d build@@ () { vo@@ g@@ ar.@@ command@@ s.@@ Command@@ .@@ Builder bu@@ ilder = new vo@@ g@@ ar.@@ command@@ s.@@ Command@@ .@@ Builder@@ (@@ log@@ ); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.String> e@@ n@@ try : en@@ v@@ .@@ e@@ n@@ try@@ Set@@ ()) { builder.@@ en@@ v@@ (e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ()); } builder.@@ arg@@ s(@@ vm@@ Command@@ ); if (@@ class@@ path@@ Vi@@ a@@ Property@@ ) { builder.@@ arg@@ s@@ (("@@ -@@ D@@ java@@ .@@ class@@ .@@ path@@ =@@ " + (@@ class@@ path@@ ))); } else { builder.@@ arg@@ s("@@ -@@ class@@ path@@ ", class@@ path@@ .@@ toString@@ ()); } if (!(@@ b@@ oot@@ Class@@ path@@ .is@@ Empty@@ ())) { builder.@@ arg@@ s@@ (("@@ -@@ X@@ b@@ oo@@ t@@ class@@ path@@ /@@ a@@ :@@ " + (b@@ oot@@ Class@@ path@@ ))); } if ((@@ user@@ Dir@@ ) != null@@ ) { builder.@@ arg@@ s@@ (("@@ -@@ D@@ us@@ er.@@ d@@ ir@@ =@@ " + (@@ user@@ Dir@@ ))); } if ((@@ de@@ bug@@ Port@@ ) != null@@ ) { builder.@@ arg@@ s@@ ((("@@ -@@ X@@ run@@ jdw@@ p@@ :@@ trans@@ port@@ =@@ d@@ t@@ _@@ s@@ ocket@@ ,@@ addres@@ s@@ =@@ " + (@@ de@@ bug@@ Port@@ )) + "@@ ,@@ server@@ =@@ y@@ ,@@ s@@ us@@ pend@@ =@@ y@@ ")); } builder.@@ arg@@ s(@@ vm@@ Arg@@ s); builder.@@ arg@@ s@@ (m@@ ain@@ Class@@ ); builder.@@ arg@@ s(@@ arg@@ s); builder.@@ te@@ e@@ (@@ output@@ ); builder.@@ max@@ Length@@ (m@@ a@@ x@@ Length@@ ); return builder.@@ build@@ (); }
@java.lang.Override public synchronized void on@@ Dis@@ connect@@ (@@ int connection@@ Id) { m@@ Thread@@ s.@@ remove@@ (@@ connection@@ Id); }
@org.junit.Test public void test@@ Bas@@ ic@@ D@@ ns@@ Configuration@@ P@@ us@@ h@@ ed@@ () throw@@ s java.lang.Exception { mC@@ ell@@ Network@@ A@@ g@@ ent = new com.android.server.@@ Connectivity@@ Service@@ Test.@@ Mock@@ Network@@ A@@ g@@ ent@@ (@@ TR@@ AN@@ S@@ P@@ OR@@ T_@@ CE@@ L@@ L@@ UL@@ AR@@ ); mC@@ ell@@ Network@@ A@@ g@@ ent.@@ connect@@ (@@ false@@ ); wait@@ For@@ Id@@ le@@ (); final android.net.@@ Link@@ Proper@@ ti@@ es cel@@ l@@ L@@ p = new android.net.@@ Link@@ Properties@@ (); cel@@ l@@ L@@ p.@@ set@@ Interface@@ Name@@ ("@@ test_@@ r@@ m@@ net@@ _@@ data@@ 0@@ "); mC@@ ell@@ Network@@ A@@ g@@ ent.@@ send@@ Link@@ Properties@@ (@@ cel@@ l@@ L@@ p@@ ); wait@@ For@@ Id@@ le@@ (); ve@@ r@@ if@@ y@@ (m@@ Network@@ Manage@@ ment@@ Service@@ , tim@@ es@@ (1@@ )).@@ set@@ D@@ ns@@ Configuration@@ For@@ Network@@ (@@ any@@ Int@@ (), m@@ String@@ Array@@ Cap@@ tor.@@ cap@@ t@@ ure@@ (), any@@ ()); com.android.server.@@ Connectivity@@ Service@@ Test@@ .@@ assert@@ Empty@@ (m@@ String@@ Array@@ Cap@@ tor@@ .get@@ Value@@ ()); res@@ et@@ (m@@ Network@@ Manage@@ ment@@ Service@@ ); cel@@ l@@ L@@ p.@@ add@@ D@@ ns@@ Server@@ (@@ java.net.Inet@@ Addres@@ s.get@@ By@@ Name@@ ("@@ 2@@ 00@@ 1@@ :@@ d@@ b@@ 8@@ :@@ :@@ :@@ 1@@ ")); cel@@ l@@ L@@ p.@@ add@@ D@@ ns@@ Server@@ (@@ java.net.Inet@@ Addres@@ s.get@@ By@@ Name@@ ("@@ 1@@ 9@@ 2.@@ 0.@@ 2.@@ 1@@ ")); mC@@ ell@@ Network@@ A@@ g@@ ent.@@ send@@ Link@@ Properties@@ (@@ cel@@ l@@ L@@ p@@ ); wait@@ For@@ Id@@ le@@ (); ve@@ r@@ if@@ y@@ (m@@ Network@@ Manage@@ ment@@ Service@@ , tim@@ es@@ (1@@ )).@@ set@@ D@@ ns@@ Configuration@@ For@@ Network@@ (@@ any@@ Int@@ (), m@@ String@@ Array@@ Cap@@ tor.@@ cap@@ t@@ ure@@ (), any@@ ()); assert@@ Equal@@ s(@@ 2, m@@ String@@ Array@@ Cap@@ tor@@ .get@@ Value@@ ().@@ length); assert@@ True@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ Array@@ Utils.@@ contain@@ s@@ All@@ (m@@ String@@ Array@@ Cap@@ tor@@ .get@@ Value@@ (), new java.lang.String@@ []{ "@@ 2@@ 00@@ 1@@ :@@ d@@ b@@ 8@@ :@@ :@@ 1@@ ", "@@ 1@@ 9@@ 2.@@ 0.@@ 2.@@ 0.@@ 2.@@ 1@@ " }@@ )); res@@ et@@ (m@@ Network@@ Manage@@ ment@@ Service@@ ); }
public void test@@ G@@ oo@@ d@@ O@@ verrid@@ e@@ File@@ () throw@@ s java.lang.Exception { byte@@ [] cont@@ ent = new byte@@ [@@ (@@ int@@ ) (in@@ .@@ length@@ ()@@ )@@ ]; in@@ .@@ read@@ F@@ ul@@ ly@@ (@@ cont@@ ent@@ ); cont@@ ent@@ [@@ 6@@ ] = '@@ 9@@ '@@ ; cont@@ ent@@ [@@ 7@@ ] = '@@ 9@@ '@@ ; cont@@ ent@@ [@@ 8@@ ] = '@@ 9@@ '@@ ; cont@@ ent@@ [@@ 10@@ ] = '@@ z@@ '@@ ; in@@ .@@ close(); java.lang.String g@@ oo@@ d@@ File = libcore.@@ util.@@ Zone@@ Info@@ DB@@ Test.@@ m@@ ake@@ Temp@@ or@@ ary@@ File@@ (@@ cont@@ ent@@ ); try { libcore.@@ util.@@ Zone@@ Info@@ DB@@ .@@ T@@ z@@ Data dat@@ a = new libcore.@@ util.@@ Zone@@ Info@@ DB@@ .@@ T@@ z@@ Data@@ (@@ g@@ oo@@ d@@ File@@ , libcore.@@ util.@@ Zone@@ Info@@ DB@@ Test.@@ DE@@ FA@@ UL@@ T_@@ F@@ IL@@ E_@@ 1, libcore.@@ util.@@ Zone@@ Info@@ DB@@ Test.@@ DE@@ FA@@ UL@@ T_@@ F@@ IL@@ E_@@ 2@@ ); assert@@ Equal@@ s("@@ 99@@ z@@ ", data@@ .get@@ Version@@ ()); assert@@ Equal@@ s(@@ java.util.@@ Time@@ Z@@ on@@ e.get@@ A@@ va@@ il@@ able@@ ID@@ s@@ ().@@ length@@ , data@@ .get@@ A@@ va@@ il@@ able@@ ID@@ s@@ ().@@ length); } final@@ l@@ y { new java.io.File@@ (@@ g@@ oo@@ d@@ File@@ ).@@ de@@ lete@@ (); } }
@java.lang.Override public java.util.List<@@ com.android.ide.common.@@ render@@ ing.@@ api.@@ View@@ Info@@ > get@@ Root@@ View@@ () { return m@@ Root@@ View@@ Info@@ ; }
@@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ annotations.@@ G@@ u@@ ard@@ ed@@ By@@ (@@ "@@ this@@ ") private void set@@ V@@ p@@ n@@ For@@ ce@@ d@@ With@@ Ex@@ em@@ ption@@ s@@ Lock@@ ed@@ (@@ boolean e@@ n@@ for@@ ce@@ , @@@ android.@@ annotation.@@ Null@@ able java.util.List<@@ java.lang.String> ex@@ e@@ mp@@ ted@@ Pack@@ ag@@ es) { final java.util.@@ Set@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ > remo@@ v@@ ed@@ R@@ an@@ ge@@ s = new android.util.@@ Array@@ Set@@ (m@@ Block@@ ed@@ User@@ s); final java.util.@@ Set@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ > add@@ ed@@ R@@ an@@ g@@ es@@ ; if (e@@ n@@ for@@ ce@@ ) { add@@ ed@@ R@@ an@@ ge@@ s = create@@ User@@ And@@ Res@@ tr@@ ic@@ ted@@ Pro@@ fil@@ es@@ R@@ an@@ g@@ es@@ (m@@ User@@ Handle@@ , null@@ , ex@@ e@@ mp@@ ted@@ Pack@@ ag@@ es@@ ); remo@@ v@@ ed@@ R@@ an@@ g@@ es.@@ remove@@ All@@ (@@ add@@ ed@@ R@@ an@@ g@@ es@@ ); add@@ ed@@ R@@ an@@ g@@ es.@@ remove@@ All@@ (m@@ Block@@ ed@@ User@@ s); } else { add@@ ed@@ R@@ an@@ ge@@ s = java.util.Collection@@ s.@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ >@@ e@@ mpty@@ Set@@ (); } set@@ Al@@ low@@ On@@ ly@@ V@@ p@@ n@@ For@@ U@@ id@@ s@@ (@@ false@@ , remo@@ v@@ ed@@ R@@ an@@ g@@ es@@ ); set@@ Al@@ low@@ On@@ ly@@ V@@ p@@ n@@ For@@ U@@ id@@ s@@ (@@ true@@ , add@@ ed@@ R@@ an@@ g@@ es@@ ); }
@com.android.annotations.NonNull public java.util.@@ Set@@ <java.lang.String@@ > get@@ Appli@@ c@@ able@@ Filter@@ s() { if (!(@@ enable@@ )) { return java.util.Collection@@ s.@@ sing@@ let@@ on@@ (@@ null@@ ); } java.util.@@ Set@@ <java.lang.String@@ > result@@ s = com.google.common.@@ colle@@ ct.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ pec@@ ted@@ Size@@ (@@ valu@@ es.@@ size@@ ()); for (java.lang.String valu@@ e : valu@@ es) { if (@@ al@@ low@@ ed@@ Valu@@ es.@@ contain@@ s(@@ value@@ )) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ F@@ O@@ UN@@ D@@ : " + value@@ )); result@@ s.@@ add(@@ valu@@ e); } else { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ NO@@ T@@ : " + value@@ )); } } return result@@ s; }
private boolean is@@ Location@@ Enabled@@ () { return (@@ Setting@@ s.@@ Sec@@ ure@@ .get@@ Int@@ (get@@ Content@@ Resol@@ ver@@ (), Setting@@ s.@@ Sec@@ ure@@ .@@ LO@@ C@@ A@@ TION@@ _M@@ O@@ DE@@ , Setting@@ s.@@ Sec@@ ure@@ .@@ LO@@ C@@ A@@ TION@@ _M@@ OD@@ E_@@ O@@ F@@ F@@ )) != (@@ Setting@@ s.@@ Sec@@ ure@@ .@@ LO@@ C@@ A@@ TION@@ _M@@ OD@@ E_@@ O@@ F@@ F@@ ); }
@java.lang.Override public boolean vi@@ si@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ C@@ atch@@ B@@ loc@@ k catch@@ Block@@ ) { super@@ .@@ vi@@ si@@ t@@ (@@ catch@@ Block@@ ); assert current@@ St@@ m@@ ts.@@ isEmpty@@ (); java.util.List<@@ com.android.jack.ir.ast.J@@ State@@ ment@@ > catch@@ St@@ m@@ t@@ s = catch@@ Block@@ .get@@ State@@ ment@@ s(); assert (@@ catch@@ St@@ m@@ ts.@@ size@@ ()) >@@ = 1; ac@@ ce@@ p@@ t@@ (@@ catch@@ St@@ m@@ t@@ s.get@@ (0@@ )); assert (c@@ f@@ g@@ ) != null@@ ; com.android.jack.@@ c@@ f@@ g.@@ C@@ atch@@ Bas@@ ic@@ B@@ loc@@ k catch@@ Bas@@ ic@@ B@@ loc@@ k = new com.android.jack.@@ c@@ f@@ g.@@ C@@ atch@@ Bas@@ ic@@ Block@@ (c@@ f@@ g@@ , current@@ St@@ m@@ t@@ s, catch@@ Block@@ .get@@ C@@ atch@@ Typ@@ es@@ (), catch@@ Block@@ .get@@ C@@ atch@@ Var@@ ()); set@@ Block@@ Of@@ State@@ ment@@ (@@ catch@@ Bas@@ ic@@ Block@@ ); com.android.jack.ir.ast.J@@ State@@ m@@ ent next@@ State@@ m@@ ent = com.android.jack.@@ util.@@ Control@@ F@@ low@@ Hel@@ p@@ er.get@@ Next@@ State@@ ment@@ (get@@ Con@@ c@@ ret@@ e@@ State@@ ment@@ (@@ catch@@ Block@@ )); if (@@ next@@ State@@ m@@ ent != null@@ ) { for@@ w@@ ard@@ B@@ r@@ an@@ ch@@ Resol@@ ver.@@ add@@ N@@ or@@ m@@ al@@ Bas@@ ic@@ Block@@ (@@ catch@@ Bas@@ ic@@ Block@@ , next@@ State@@ ment@@ ); } ac@@ ce@@ p@@ t@@ (@@ catch@@ St@@ m@@ ts.@@ sub@@ List@@ (@@ 1, catch@@ St@@ m@@ ts.@@ size@@ ())); return false@@ ; }
private void handle@@ Net@@ Cap@@ (android.net.@@ Net@@ wor@@ k network@@ , android.net.Network@@ Capabili@@ ti@@ es new@@ N@@ c@@ ) { android.net.Network@@ State new@@ State = null@@ ; final android.net.Network@@ State pre@@ v = m@@ Network@@ Map@@ .get@@ (@@ network@@ ); if (p@@ re@@ v == null@@ ) { new@@ State = new android.net.Network@@ State@@ (@@ null@@ , null@@ , new@@ N@@ c@@ , network@@ , null@@ , null@@ ); } else if (!@@ (@@ new@@ N@@ c.@@ equals(@@ pre@@ v@@ .@@ network@@ Capabilities@@ ))) { new@@ State = new android.net.Network@@ State@@ (@@ null@@ , pre@@ v@@ .@@ lin@@ k@@ Properties@@ , new@@ N@@ c@@ , network@@ , null@@ , null@@ ); } else { return@@ ; } if (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ V@@ DBG) { android.util.Log.d@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ TAG, java.lang.String@@ .@@ for@@ mat@@ ("@@ EVEN@@ T_@@ ON@@ _C@@ AP@@ A@@ B@@ IL@@ I@@ TI@@ E@@ S for %@@ s@@ : %@@ s", network@@ , new@@ N@@ c@@ )); } m@@ Network@@ Map@@ .@@ put@@ (@@ network@@ , new@@ State@@ ); not@@ if@@ y@@ Target@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ EVEN@@ T_@@ ON@@ _C@@ AP@@ A@@ B@@ IL@@ I@@ TI@@ E@@ S@@ , network@@ ); }
@com.android.annotations.NonNull @java.lang.Override public com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Res@@ ult exec@@ ute@@ (@@ @com.android.annotations.NonNull com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Info process@@ Info@@ , @com.android.annotations.NonNull com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Output@@ Handle@@ r process@@ Output@@ Handler@@ ) { java.util.List<@@ java.lang.String> com@@ man@@ d = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ (); command@@ .@@ add(@@ process@@ Info@@ .get@@ Ex@@ ec@@ ut@@ able@@ ()); command@@ .add@@ All@@ (pro@@ cess@@ Info@@ .get@@ Arg@@ s()); java.lang.String command@@ Str@@ ing = com.google.common.@@ b@@ ase.@@ J@@ o@@ in@@ er.@@ on@@ (@@ ' '@@ ).@@ j@@ o@@ in@@ (@@ command@@ ); m@@ Logg@@ er.@@ info@@ (("@@ command@@ : " + command@@ String@@ )); try { java.lang.@@ Process@@ Builder process@@ Builder = new java.lang.@@ Process@@ Builder@@ (@@ command@@ ); java.util.Map@@ <java.lang.String, java.lang.Ob@@ ject@@ > en@@ v@@ Vari@@ able@@ Ma@@ p = process@@ Info@@ .get@@ En@@ vi@@ ron@@ ment@@ (); if (!(@@ en@@ v@@ Vari@@ able@@ Map@@ .is@@ Empty@@ ())) { java.util.Map@@ <java.lang.String, java.lang.String> en@@ v = process@@ Build@@ er.@@ en@@ vi@@ ron@@ ment@@ (); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.Ob@@ ject@@ > e@@ n@@ try : en@@ v@@ Vari@@ able@@ Map@@ .@@ e@@ n@@ try@@ Set@@ ()) { en@@ v@@ .@@ put@@ (e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ().@@ toString@@ ()); } } java.lang.@@ Pro@@ ces@@ s pro@@ ces@@ s = process@@ Build@@ er.@@ start@@ (); com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Out@@ put out@@ put = process@@ Output@@ Handler.@@ create@@ Output@@ (); int ex@@ it@@ Co@@ de = com.android.ide.common.@@ pro@@ ces@@ s.@@ Default@@ Process@@ Ex@@ ec@@ ut@@ or.@@ g@@ r@@ ab@@ Process@@ Output@@ (pro@@ cess@@ , output@@ ); process@@ Output@@ Handler.@@ handle@@ Output@@ (@@ output@@ ); return new com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Result@@ Imp@@ l@@ (@@ command@@ String@@ , ex@@ it@@ Code@@ ); } catch (java.io.IOException e) { return new com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Result@@ Imp@@ l@@ (@@ command@@ String@@ , e); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { return new com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Result@@ Imp@@ l@@ (@@ command@@ String@@ , e); } catch (com.android.ide.@@ common.@@ pro@@ ces@@ s.@@ Process@@ Exception e) { return new com.android.ide.common.@@ pro@@ ces@@ s.@@ Process@@ Result@@ Imp@@ l@@ (@@ command@@ String@@ , e); } }
@java.lang.Override public boolean equals(@@ java.lang.Object ob@@ j@@ ) { if (@@ (@@ this@@ ) == ob@@ j@@ ) return true@@ ; if ((@@ ob@@ j == null@@ ) || ((@@ get@@ Class@@ ()) != (@@ ob@@ j@@ .get@@ Class@@ ()))) return false@@ ; java.text.@@ Date@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s th@@ at = ((@@ java.text.@@ Date@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s) (@@ ob@@ j@@ )); if (!@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ((((@@ ("@@ ("@@ ("@@ ("@@ as@@ , th@@ at@@ .@@ er@@ as@@ )) && (@@ java.util.Arrays.@@ equal@@ s@@ (m@@ on@@ th@@ s, th@@ at@@ .@@ mon@@ th@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ t@@ in@@ y@@ Mon@@ th@@ s, th@@ at@@ .@@ t@@ in@@ y@@ Mon@@ th@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ w@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ w@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equal@@ s@@ (@@ short@@ W@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ short@@ W@@ e@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ t@@ in@@ y@@ W@@ e@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ t@@ in@@ y@@ W@@ e@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ st@@ and@@ Al@@ one@@ Mon@@ th@@ s, th@@ at@@ .@@ st@@ and@@ Al@@ one@@ Mon@@ th@@ s@@ ))) && (@@ java.util.Arrays.@@ equal@@ s@@ (@@ short@@ St@@ and@@ Al@@ one@@ Mon@@ th@@ s, th@@ at@@ .@@ short@@ St@@ and@@ Al@@ one@@ Mon@@ th@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ t@@ in@@ y@@ St@@ and@@ Al@@ one@@ Mon@@ th@@ s, th@@ at@@ .@@ t@@ in@@ y@@ St@@ and@@ Al@@ one@@ Mon@@ th@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ st@@ and@@ Al@@ one@@ W@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ st@@ and@@ Al@@ one@@ W@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equal@@ s@@ (@@ short@@ St@@ and@@ Al@@ one@@ W@@ e@@ e@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ short@@ St@@ and@@ Al@@ one@@ W@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ t@@ in@@ y@@ St@@ and@@ Al@@ one@@ W@@ e@@ k@@ d@@ ay@@ s, th@@ at@@ .@@ t@@ in@@ y@@ St@@ and@@ Al@@ one@@ W@@ e@@ k@@ d@@ ay@@ s@@ ))) && (@@ java.util.Arrays.@@ equals(@@ am@@ p@@ m@@ s, th@@ at@@ .@@ am@@ p@@ ms@@ ))) && ((((@@ local@@ P@@ attern@@ Char@@ s) != null@@ ) && (@@ local@@ P@@ attern@@ Char@@ s.@@ equals(@@ th@@ at@@ .@@ local@@ P@@ attern@@ Char@@ s) || (((@@ local@@ P@@ attern@@ Char@@ s) == null@@ ) && ((@@ th@@ at@@ .@@ local@@ P@@ attern@@ Char@@ s) == null@@ )@@ )@@ ))) { return false@@ ; } if ((((@@ z@@ one@@ String@@ s) == null@@ ) && ((@@ th@@ at@@ .@@ z@@ one@@ String@@ s) == null@@ )) && (java.util.@@ Object@@ s.@@ equals(@@ loc@@ ale@@ , th@@ at@@ .@@ loc@@ ale@@ ))) { return true@@ ; } return java.util.Arrays.@@ de@@ e@@ p@@ Equal@@ s(@@ get@@ Zone@@ String@@ s@@ W@@ rap@@ per@@ (), th@@ at@@ .get@@ Zone@@ String@@ s@@ W@@ rap@@ per@@ ()); }
@org.junit.Test public void test@@ S@@ pli@@ t@@ L@@ ast@@ Per@@ io@@ d@@ () { com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ TimeZone@@ Name@@ s time@@ Zone@@ Name@@ s = com.@@ i@@ b@@ m.@@ icu@@ .@@ text.@@ TimeZone@@ Nam@@ es@@ .get@@ Instance@@ (@@ U@@ Loc@@ a@@ le.@@ EN@@ G@@ LIS@@ H@@ ); com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Bas@@ ic@@ Time@@ Z@@ on@@ e thro@@ ol@@ ul@@ u@@ T@@ z = ((@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Bas@@ ic@@ Time@@ Z@@ on@@ e) (@@ com.@@ i@@ b@@ m.@@ icu@@ .@@ util.@@ Time@@ Z@@ on@@ e.get@@ TimeZone@@ ("@@ Pa@@ c@@ if@@ ic@@ /@@ H@@ on@@ ol@@ ul@@ u@@ "@@ ))); int thro@@ ol@@ ul@@ u@@ R@@ aw@@ O@@ ff@@ set = -@@ 3@@ 6@@ 0000@@ 00@@ ; int thro@@ ol@@ ul@@ u@@ D@@ st@@ O@@ ff@@ set = 0; java.lang.String thro@@ ol@@ ul@@ u@@ O@@ l@@ d@@ Name = null@@ ; java.lang.String thro@@ ol@@ ul@@ u@@ New@@ Name = "@@ H@@ aw@@ a@@ i@@ -@@ A@@ le@@ uti@@ an St@@ and@@ ar@@ d Time@@ "; java.@@ tim@@ e.@@ In@@ stan@@ t start@@ In@@ stan@@ t = java.@@ tim@@ e.@@ In@@ stan@@ t.@@ E@@ P@@ O@@ CH@@ ; java.@@ tim@@ e.@@ In@@ stan@@ t end@@ In@@ stan@@ t = java.@@ tim@@ e.@@ In@@ stan@@ t.@@ o@@ f@@ E@@ po@@ ch@@ Sec@@ ond@@ (@@ 6@@ 3@@ 1@@ 1@@ 5@@ 2@@ 00@@ 0@@ L); com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Offset@@ Per@@ io@@ d U ol@@ ul@@ u@@ Per@@ io@@ d = com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Offset@@ Per@@ io@@ d.@@ create@@ (@@ time@@ Zone@@ Nam@@ es@@ , android.renderscript.Alloc@@ ol@@ ul@@ u@@ T@@ z@@ , start@@ In@@ stan@@ t, end@@ In@@ stan@@ t@@ ); java.@@ tim@@ e.@@ In@@ stan@@ t par@@ ti@@ tion@@ In@@ stan@@ t = java.@@ tim@@ e.@@ In@@ stan@@ t.@@ o@@ f@@ E@@ po@@ ch@@ Sec@@ ond@@ (@@ 5@@ 0000@@ L); com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Offset@@ Per@@ io@@ d@@ [] sh@@ ard@@ s = com.android.@@ libcore.@@ time@@ z@@ on@@ e.@@ t@@ z@@ lo@@ ok@@ up@@ .@@ z@@ on@@ et@@ re@@ e.@@ Zone@@ Offset@@ Per@@ io@@ d.@@ s@@ pli@@ t@@ At@@ Time@@ (@@ edia@@ ol@@ ul@@ u@@ Per@@ io@@ d, time@@ Zone@@ Nam@@ es@@ , ynchroniz@@ ol@@ ul@@ u@@ T@@ z@@ , par@@ ti@@ tion@@ In@@ stan@@ t@@ ); assert@@ Equal@@ s(@@ start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [0@@ ]@@ .get@@ Start@@ In@@ stan@@ t@@ ()); assert@@ Equal@@ s(@@ par@@ ti@@ tion@@ In@@ stan@@ t, sh@@ ard@@ s@@ [0@@ ]@@ .get@@ En@@ d@@ In@@ stan@@ t@@ ()); assert@@ Equal@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ s(@@ ol@@ ul@@ u@@ R@@ aw@@ Offset@@ Milli@@ s()); assert@@ Equal@@ s(@@ current.@@ ol@@ ul@@ u@@ O@@ l@@ d@@ Name, sh@@ ard@@ s@@ [0@@ ]@@ .getName@@ ()); assert@@ Equal@@ s(@@ par@@ ti@@ tion@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t@@ ()); assert@@ Equal@@ s(@@ end@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ En@@ d@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ En@@ d@@ In@@ stan@@ t@@ ()); assert@@ Equal@@ s(@@ current.@@ ol@@ ul@@ u@@ R@@ aw@@ Offset@@ , sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ R@@ aw@@ Offset@@ , sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ R@@ aw@@ Offset@@ , sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ D@@ st@@ Offset@@ , sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ In@@ stan@@ t.@@ j@@ u@@ st@@ Offset@@ , sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@ t, sh@@ ard@@ s@@ [@@ 1@@ ]@@ .get@@ Start@@ In@@ stan@@
public static final void main@@ (@@ java.lang.String[] arg@@ v@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ enable@@ Debug@@ g@@ ing@@ Fe@@ at@@ ur@@ es@@ (); if (((@@ arg@@ v@@ .@@ length) == 2@@ ) && (@@ arg@@ v@@ [@@ 1@@ ]@@ .@@ equal@@ s("@@ app@@ li@@ cation@@ "@@ ))) { if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ DE@@ BU@@ G) android.util.@@ S@@ log.@@ d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ TAG, "@@ Runtime@@ In@@ it@@ : Start@@ ing app@@ li@@ cation@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ re@@ di@@ re@@ ct@@ Log@@ Stream@@ s(); } else { if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ DE@@ BU@@ G) android.util.@@ S@@ log.@@ d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ TAG, "@@ Runtime@@ In@@ it@@ : Start@@ ing too@@ l@@ "); } com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ common@@ In@@ it@@ (); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it@@ .@@ native@@ F@@ in@@ is@@ h@@ In@@ it@@ (); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ DE@@ BU@@ G) android.util.@@ S@@ log.@@ d@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ os.@@ Runtime@@ In@@ it.@@ TAG, "@@ Le@@ av@@ ing Runtime@@ In@@ it@@ !@@ "); }
static float $@@ op@@ t@@ $@@ no@@ in@@ line@@ $@@ Long@@ To@@ Float@@ (@@ long a@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) throw new java.lang.@@ Error@@ (); return (@@ (@@ float@@ ) (@@ a@@ )); }
private com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est find@@ And@@ Remo@@ ve@@ Request@@ From@@ List@@ (@@ int ser@@ ial@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = null@@ ; synchronized@@ (m@@ Request@@ List@@ ) { r@@ r = m@@ Request@@ Lis@@ t.get@@ (@@ ser@@ ial@@ ); if (r@@ r != null@@ ) { m@@ Request@@ List.@@ remove@@ (@@ ser@@ ial@@ ); } } if (r@@ r != null@@ ) { } return r@@ ; }
@java.lang.Override public void run@@ C@@ on@@ for@@ m@@ Test@@ (@@ java.lang.String[] src@@ Des@@ cription@@ ) { java.util.List<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ > ex@@ c@@ lu@@ de@@ Lis@@ t = new java.util.ArrayList<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ >@@ (1@@ ); ex@@ c@@ lu@@ de@@ List.@@ add@@ (com.android.jack.@@ test.@@ toolchain.@@ J@@ il@@ l@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in jack@@ Too@@ lch@@ a@@ in = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ , ex@@ c@@ lu@@ de@@ List@@ ); try { java.io.File source@@ Fol@@ der = build@@ Source@@ Folder@@ (s@@ rc@@ Des@@ cription@@ ); java.io.File dex@@ Out@@ Di@@ r = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); jack@@ Too@@ lch@@ ain.@@ add@@ To@@ Class@@ path@@ (@@ jack@@ Too@@ lch@@ ain@@ .get@@ Default@@ B@@ oot@@ Class@@ path@@ ()); jack@@ Too@@ lch@@ ain.@@ set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ); jack@@ Too@@ lch@@ ain.@@ src@@ To@@ Ex@@ e@@ (@@ dex@@ Out@@ Dir@@ , false@@ , source@@ Folder@@ ); } catch (java.lang.Exception e) { e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); junit.framework.Assert.@@ fail@@ (); } }
@java.lang.Override public void close@@ () throw@@ s java.io.IOException { if (@@ has@@ En@@ tri@@ es) { super@@ .@@ close(); } else { sub@@ Stream@@ .@@ close(); } }
@java.lang.Override public void end@@ Visi@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ S@@ ynchroniz@@ ed@@ B@@ loc@@ k j@@ S@@ ync@@ B@@ ock@@ ) { if (!(@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ Lock@@ Ex@@ p@@ r@@ ().get@@ Type@@ ().@@ is@@ S@@ ame@@ Type@@ (@@ am@@ s@@ ))) { return@@ ; } com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Requ@@ est t@@ r = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Request@@ (@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ Par@@ ent@@ ()); tr@@ .@@ append@@ (@@ new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Pre@@ pend@@ State@@ ment@@ (@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ S@@ ynchroniz@@ ed@@ Block@@ (), m@@ ake@@ B@@ oo@@ st@@ Call@@ (@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ Source@@ Info@@ ()))); tr@@ .@@ append@@ (@@ new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ App@@ end@@ State@@ ment@@ (@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ S@@ ynchroniz@@ ed@@ Block@@ (), m@@ ake@@ Res@@ et@@ Call@@ (@@ j@@ S@@ ync@@ B@@ ock@@ .get@@ Source@@ Info@@ ()))); tr@@ .@@ com@@ m@@ it@@ (); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ In@@ ser@@ ted b@@ oo@@ s@@ t / res@@ et Call@@ s.@@ "); }
public static void main@@ (@@ java.lang.String[] arg@@ s) { Main.@@ In@@ line@@ Vo@@ id@@ (); if ((@@ Main.@@ In@@ line@@ Int@@ ()) != 4@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ W@@ ide@@ ()) != 8@@ L@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ Parameter@@ (@@ 4@@ 2@@ )) != 4@@ 2@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ W@@ ide@@ Parameter@@ (@@ 4@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 7@@ L@@ )) != 4@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 7@@ L@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ Reference@@ Parameter@@ (@@ M@@ ain@@ .@@ class@@ )) != (@@ M@@ ain@@ .@@ class@@ )) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ Add@@ ()) != 8@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ Field@@ Access@@ ()) != 4@@ 3@@ ) || ((@@ Main.@@ In@@ line@@ Field@@ Access@@ ()) != 4@@ )) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ With@@ Control@@ F@@ low@@ (@@ true@@ )) != 4@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ line@@ With@@ Control@@ F@@ low@@ (@@ false@@ )) != 2@@ ) { throw new java.lang.@@ Error@@ (); } if ((@@ Main.@@ In@@ lin@@ ed@@ In@@ tr@@ in@@ si@@ c@@ s@@ A@@ re@@ S@@ ti@@ l@@ In@@ tr@@ in@@ si@@ c@@ ()) != 1@@ ) { throw new java.lang.@@ Error@@ (); } }
@java.lang.Override public void on@@ Pri@@ v@@ ate@@ D@@ ns@@ Valid@@ ation@@ Event@@ (@@ int net@@ Id, java.lang.String ip@@ Addres@@ s, java.lang.String ho@@ st@@ name@@ , boolean valid@@ ated@@ ) { try { m@@ Handler.@@ send@@ Message@@ (m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.server.@@ Connectivity@@ Service.@@ EVEN@@ T_@@ P@@ R@@ I@@ V@@ A@@ TE_@@ D@@ N@@ S_@@ VAL@@ ID@@ A@@ TION_@@ U@@ P@@ DA@@ TE@@ , new com.android.server.@@ connectivity.@@ D@@ ns@@ Manager.@@ Pri@@ v@@ ate@@ D@@ ns@@ Valid@@ ation@@ Up@@ date@@ (@@ net@@ Id, java.net.Inet@@ Addres@@ s.@@ parse@@ Num@@ er@@ ic@@ Addres@@ s(@@ ip@@ Address@@ ), ho@@ st@@ name@@ , valid@@ ated@@ ))); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { } }
@java.lang.Override public void f@@ re@@ e@@ Un@@ der@@ ly@@ ing@@ Res@@ ources@@ () { for (@@ int di@@ re@@ c@@ tion : com.android.server.@@ IpSec@@ Service.@@ DI@@ RE@@ C@@ TION@@ S@@ ) { int s@@ p@@ i = m@@ S@@ p@@ is@@ [@@ di@@ re@@ ction@@ ]@@ .get@@ S@@ pi@@ (); try { m@@ S@@ r@@ v@@ Config.@@ get@@ Net@@ d@@ Instance@@ ().@@ ip@@ Sec@@ De@@ lete@@ Sec@@ urit@@ y@@ As@@ so@@ c@@ i@@ ation@@ (m@@ Resource@@ Id, di@@ re@@ ction@@ , m@@ Config.@@ get@@ Local@@ Address@@ (), m@@ Config.@@ get@@ Remote@@ Address@@ (), s@@ pi@@ , 0, 0); } catch (android.os.@@ Service@@ S@@ pe@@ c@@ if@@ ic@@ Exception e) { } catch (android.os.RemoteException e) { android.util.Log.e@@ (com.android.server.@@ IpSec@@ Service.TAG, ("@@ Faile@@ d to de@@ let@@ e S@@ A wit@@ h ID@@ : " + (m@@ Resource@@ Id@@ ))); } } get@@ Resource@@ Track@@ er@@ ().@@ g@@ i@@ ve@@ (); }
void cle@@ an@@ up@@ () { m@@ Reg@@ ul@@ ar@@ Scan@@ Client@@ s.@@ clear@@ (); m@@ B@@ atch@@ Client@@ s.@@ clear@@ (); m@@ S@@ us@@ pend@@ ed@@ Scan@@ Client@@ s.@@ clear@@ (); m@@ Scan@@ N@@ ativ@@ e.@@ cle@@ an@@ up@@ (); if ((m@@ Activity@@ Manager@@ ) != null@@ ) { try { m@@ Activity@@ Manager.@@ remove@@ On@@ U@@ id@@ Imp@@ ort@@ an@@ ce@@ Listener@@ (m@@ U@@ id@@ Imp@@ ort@@ an@@ ce@@ Listener@@ ); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { android.util.Log.e@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ Scan@@ Manager.@@ TAG, "@@ excepti@@ on wh@@ e@@ n invok@@ ing remove@@ On@@ U@@ id@@ Imp@@ ort@@ an@@ ce@@ Listener@@ ", e); } } if ((m@@ D@@ m@@ ) != null@@ ) { m@@ D@@ m.@@ un@@ register@@ Display@@ Listener@@ (m@@ Display@@ Listener@@ ); } if ((m@@ Handler@@ ) != null@@ ) { m@@ Handler.@@ remove@@ Callback@@ s@@ And@@ Mess@@ ag@@ es@@ (@@ null@@ ); android.os.@@ Loo@@ p@@ er lo@@ op@@ er = m@@ Hand@@ l@@ er.get@@ Loo@@ per@@ (); if (@@ lo@@ op@@ er != null@@ ) { lo@@ op@@ er.@@ qu@@ it@@ S@@ a@@ f@@ el@@ y@@ (); } m@@ Handle@@ r = null@@ ; } }
public void on@@ N@@ fc@@ F@@ Service@@ Changed@@ () { if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ DBG) android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ TAG, "@@ Pre@@ fer@@ re@@ d N@@ F@@ C@@ -@@ F ser@@ vice chan@@ g@@ ed.@@ "); synchronized@@ (m@@ Lock) { g@@ ener@@ ate@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ Cach@@ e@@ Lock@@ ed@@ (); } }
@java.lang.Override public boolean on@@ Connec@@ t@@ (android.bluetooth.Bluetooth@@ Device device@@ , android.@@ bluetooth.Bluetooth@@ S@@ ock@@ et s@@ ocket@@ ) { if (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.@@ D@@ ) { android.util.Log.d@@ (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.TAG, (((@@ " on@@ Connec@@ t Bluetooth@@ S@@ ock@@ et :@@ " + s@@ ocket@@ ) + " \@@ n :@@ de@@ vice :@@ ") + device@@ )); } com.android.bluetooth.@@ Bluetooth@@ Ob@@ ex@@ Trans@@ por@@ t trans@@ por@@ t = new com.android.bluetooth.@@ Bluetooth@@ Ob@@ ex@@ Trans@@ port@@ (s@@ ocket@@ ); android.os.@@ Message ms@@ g = m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ op@@ p.@@ Bluetooth@@ Op@@ p@@ Service.@@ MS@@ G@@ _@@ IN@@ C@@ O@@ M@@ ING@@ _@@ B@@ TO@@ P@@ _C@@ ON@@ NEC@@ TION@@ ); ms@@ g.@@ ob@@ j = trans@@ port@@ ; ms@@ g.@@ send@@ To@@ Target@@ (); m@@ Ac@@ ce@@ p@@ t@@ New@@ Connec@@ t = false@@ ; return true@@ ; }
private void s@@ ch@@ ed@@ ule@@ Time@@ out@@ () { m@@ Handler.@@ remove@@ Mess@@ ag@@ es@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ man@@ ag@@ ed@@ pro@@ vision@@ ing.@@ By@@ o@@ d@@ Hel@@ per@@ Ac@@ tivity.@@ MS@@ G@@ _@@ TI@@ ME@@ O@@ UT@@ ); m@@ Handler.@@ send@@ Message@@ De@@ lay@@ ed@@ (m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ man@@ ag@@ ed@@ pro@@ vision@@ ing.@@ By@@ o@@ d@@ Hel@@ per@@ Ac@@ tivity.@@ MS@@ G@@ _@@ TI@@ ME@@ O@@ UT@@ ), m@@ Time@@ out); }
public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l d@@ est@@ , int flag@@ s) { if ((@@ network@@ Capabilities@@ ) != null@@ ) { d@@ est.@@ write@@ Int@@ (1@@ ); network@@ Capabili@@ ties.@@ write@@ To@@ Par@@ cel@@ (d@@ est@@ , flag@@ s); } else { d@@ est.@@ write@@ Int@@ (@@ 0); } d@@ est.@@ write@@ Int@@ (@@ le@@ g@@ ac@@ y@@ Type@@ ); d@@ est.@@ write@@ Int@@ (@@ request@@ Id); d@@ est.@@ write@@ String(@@ typ@@ e.@@ name@@ ()); }
@java.lang.Override public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l d@@ est@@ , int flag@@ s) { d@@ est.@@ write@@ Long@@ (m@@ Network@@ Capabilities@@ ); d@@ est.@@ write@@ Long@@ (m@@ Trans@@ port@@ Typ@@ es@@ ); d@@ est.@@ write@@ Int@@ (m@@ Link@@ Up@@ B@@ and@@ wid@@ th@@ K@@ b@@ ps@@ ); d@@ est.@@ write@@ Int@@ (m@@ Link@@ Down@@ B@@ and@@ wid@@ th@@ K@@ b@@ ps@@ ); d@@ est.@@ write@@ Par@@ cel@@ able@@ ((@@ (android.os.@@ Par@@ cel@@ able@@ ) (m@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ )), flag@@ s); d@@ est.@@ write@@ Int@@ (m@@ Sign@@ al@@ Str@@ ength@@ ); d@@ est.@@ write@@ Array@@ Set@@ (@@ new android.util.@@ Array@@ Set@@ (m@@ U@@ id@@ s@@ )); }
@java.lang.Override public boolean can@@ Add@@ M@@ ore@@ Manag@@ ed@@ Pro@@ fil@@ es@@ () { com.android.server.@@ p@@ m.@@ User@@ Manager@@ Service.@@ check@@ Manage@@ User@@ s@@ Permission@@ ("@@ ch@@ ec@@ k if m@@ or@@ e man@@ age@@ d pro@@ file@@ s c@@ an b@@ e add@@ ed.@@ "); synchronized@@ (m@@ Pack@@ ag@@ es@@ Lock) { if ((@@ num@@ ber@@ Of@@ User@@ s@@ Of@@ Type@@ Lock@@ ed@@ (@@ User@@ Info.@@ F@@ LA@@ G@@ _M@@ AN@@ A@@ G@@ ED@@ _P@@ RO@@ F@@ IL@@ E, true@@ )) >@@ = (com.android.server.@@ p@@ m.@@ User@@ Manager@@ Service.@@ MA@@ X@@ _M@@ AN@@ A@@ G@@ ED@@ _P@@ RO@@ F@@ IL@@ E@@ S@@ )) { return false@@ ; } } int user@@ s@@ Coun@@ t = get@@ A@@ li@@ ve@@ User@@ s@@ Ex@@ c@@ lu@@ d@@ ing@@ G@@ u@@ est@@ s@@ Count@@ (); return (@@ user@@ s@@ Coun@@ t == 1@@ ) || (@@ user@@ s@@ Coun@@ t < (android.os.@@ User@@ Manager.get@@ Ma@@ x@@ Sup@@ ported@@ User@@ s@@ ())); }
@org.junit.Test public void test@@ Comp@@ ile@@ 0@@ 2@@ 1@@ () throw@@ s java.lang.Exception { java.lang.String package@@ Name = "@@ com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ test@@ 0@@ 2@@ 1.@@ jack@@ "; java.lang.String class@@ Pre@@ fi@@ x = (@@ package@@ Nam@@ e.@@ re@@ pla@@ ce@@ (@@ '@@ .@@ '@@ , '@@ _@@ '@@ )) + "@@ _@@ "; java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > in@@ put = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); in@@ pu@@ t.@@ put@@ ("@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ ("@@ java@@ _@@ lan@@ g@@ _@@ Thread@@ $@@ State@@ ", false@@ )); in@@ pu@@ t.@@ put@@ ("@@ S@@ yn@@ th@@ et@@ ic@@ S@@ wit@@ ch@@ m@@ ap@@ Class@@ -@@ *@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ ("@@ java@@ _@@ lan@@ g@@ _@@ Thread@@ $@@ State@@ ", true@@ )); check@@ Comp@@ ile@@ d@@ Code@@ (@@ package@@ Name, input@@ ); }
private boolean result@@ (java.lang.String test@@ Name, final com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ tim@@ ing t, com.android.@@ rs.@@ test.@@ Int@@ 2 java@@ Rs@@ l@@ t, com.android.@@ rs.@@ test.@@ Int@@ 2 r@@ s@@ Rs@@ l@@ t@@ ) { final boolean su@@ c@@ ces@@ s = ((@@ java@@ Rs@@ l@@ t.@@ x@@ ) == (r@@ s@@ Rs@@ l@@ t.@@ x@@ )) && ((@@ java@@ Rs@@ l@@ t.@@ y@@ ) == (r@@ s@@ Rs@@ l@@ t.@@ y@@ )); java.lang.String statu@@ s = (s@@ u@@ ccess@@ ) ? "@@ P@@ A@@ SS@@ ED@@ " : "@@ FA@@ IL@@ ED@@ "; if (s@@ u@@ c@@ ces@@ s && (@@ t != null@@ )) statu@@ s +@@ = " + (@@ t.@@ string@@ ()); android.util.Log.@@ i@@ (com.android.@@ rs.@@ test.@@ U@@ T_@@ re@@ du@@ ce.@@ TAG, ((((@@ ((((@@ test@@ Name + "@@ : ja@@ v@@ a ("@@ ) + (@@ java@@ Rs@@ l@@ t.@@ x@@ )) + ", ") + (@@ java@@ Rs@@ l@@ t.@@ y@@ )) + "@@ )@@ ") + ", r@@ s ("@@ ) + (r@@ s@@ Rs@@ l@@ t.@@ x@@ )) + ", ") + (r@@ s@@ Rs@@ l@@ t.@@ y@@ )) + "@@ )@@ ") + "@@ : ") + stat@@ us@@ )); return su@@ ccess@@ ; }
public static void update@@ Thread@@ (android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Dat@@ ab@@ as@@ e d@@ b@@ , long th@@ read@@ _@@ id@@ ) { if (@@ th@@ read@@ _@@ id < 0) { com.android.@@ provid@@ er@@ s.@@ telephony.@@ M@@ ms@@ Sms@@ Dat@@ ab@@ ase@@ Helper.@@ update@@ All@@ Thread@@ s(@@ d@@ b@@ , null@@ , null@@ ); return@@ ; } com.android.@@ provid@@ er@@ s.@@ telephony.@@ M@@ ms@@ Sms@@ Dat@@ ab@@ ase@@ Helper.@@ update@@ All@@ Thread@@ s(@@ d@@ b@@ , "@@ (@@ th@@ read@@ _@@ id = ?@@ )@@ ", new java.lang.String@@ []{ java.lang.String.@@ value@@ Of@@ (@@ th@@ read@@ _@@ id@@ ) }); }
public void test@@ Min@@ im@@ al@@ Size@@ D@@ ock@@ ed@@ () throw@@ s java.lang.Exception { if ((@@ !@@ (s@@ up@@ port@@ s@@ Multi@@ W@@ in@@ do@@ w@@ Mode@@ ())) || (!@@ (s@@ up@@ port@@ s@@ S@@ pli@@ t@@ S@@ cre@@ en@@ Multi@@ W@@ in@@ do@@ w@@ ()))) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ log@@ And@@ Display@@ (android.@@ server.@@ cts.@@ IN@@ F@@ O@@ , "@@ S@@ k@@ ip@@ p@@ ing test@@ : n@@ o m@@ ulti@@ -@@ w@@ in@@ do@@ w sup@@ port@@ "); return@@ ; } test@@ Min@@ im@@ al@@ Size@@ (android.@@ server.@@ cts.@@ D@@ O@@ C@@ K@@ ED@@ _STA@@ C@@ K_@@ ID@@ ); }
void send@@ Media@@ Key@@ Event@@ (@@ int key@@ , int state@@ ) { com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ List.@@ d@@ ((@@ (("@@ send@@ Media@@ Key@@ Event@@ : key@@ =@@ " + key@@ ) + " state@@ =@@ ") + state@@ )); int ac@@ tion = (@@ st@@ ate == 0) ? android.@@ view@@ .@@ Key@@ Ev@@ ent.@@ AC@@ TION_@@ D@@ O@@ W@@ N : android.@@ view@@ .@@ Key@@ Ev@@ ent.@@ AC@@ TION_@@ U@@ P@@ ; android.@@ view@@ .@@ Key@@ Ev@@ ent ev@@ ent = new android.@@ view@@ .@@ Key@@ Event@@ (@@ action@@ , com.android.bluetooth.@@ avrcp.@@ Hel@@ per@@ s.@@ av@@ rc@@ p@@ P@@ ass@@ thro@@ u@@ g@@ h@@ To@@ Key@@ Code@@ (@@ key@@ )); m@@ Media@@ Session@@ Manager.@@ dis@@ p@@ atch@@ Media@@ Key@@ Event@@ (@@ event@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null java.io.@@ Output@@ Stream open@@ W@@ rite@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Base@@ V@@ File file@@ ) throw@@ s com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { assert (m@@ d@@ Fa@@ ctory@@ ) != null@@ ; return new java.security.@@ Dig@@ est@@ Output@@ Stream@@ (@@ vfs.@@ open@@ W@@ rite@@ (file@@ ), m@@ d@@ Fa@@ ctor@@ y.@@ create@@ ()) { @java.lang.Override public void close@@ () throw@@ s java.io.IOException { super@@ .@@ close(); com.android.sched.vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ .@@ this@@ .@@ d@@ ig@@ est = new java.lang.String@@ (com.android.s@@ ched.@@ vfs.@@ Message@@ Dig@@ est@@ F@@ S@@ .@@ en@@ code@@ (get@@ Message@@ Dig@@ est@@ ().@@ d@@ ig@@ est@@ ())); } }; }
public void re@@ load@@ Sdk@@ (com.android.@@ uti@@ ls.@@ I@@ Logg@@ er log@@ ) { java.util.ArrayList<@@ com.android.sdklib.@@ I@@ Android@@ Target@@ > li@@ s@@ t = new java.util.ArrayList<@@ com.android.sdklib.@@ I@@ Android@@ Target@@ >(); com.android.sdklib.@@ Sdk@@ Manager.@@ load@@ P@@ la@@ t@@ for@@ ms@@ (m@@ O@@ s@@ Sdk@@ Path@@ , list@@ , log@@ ); com.android.sdklib.@@ Sdk@@ Manager.@@ load@@ Add@@ On@@ s@@ (m@@ O@@ s@@ Sdk@@ Path@@ , list@@ , log@@ ); java.util.Collection@@ s.@@ s@@ ort@@ (@@ list@@ ); set@@ Target@@ s(@@ li@@ st.@@ to@@ Array@@ (@@ new com.android.sdklib.@@ I@@ Android@@ Target@@ [@@ li@@ st.@@ size@@ ()@@ ]@@ )); in@@ itializ@@ e@@ S@@ am@@ ple@@ Path@@ s(@@ log@@ ); }
java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ [] value@@ () { }; new java.util.ArrayList<@@ java.lang.@@ Class@@ <@@ ? extends com.android.jack.test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ >(); ex@@ c@@ lu@@ de@@ C@@ la@@ z@@ .add@@ (com.android.jack.@@ test.@@ toolchain.@@ I@@ Too@@ lch@@ ain@@ >@@ >@@ > i@@ Too@@ lch@@ ain@@ .@@ class@@ );
private void check@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 16@@ , 4@@ , -@@ 4@@ 2@@ 1@@ 1@@ 7@@ 2@@ 1@@ 1@@ 7@@ 2@@ 1@@ 1@@ 4@@ 2@@ 1@@ 4@@ 2@@ 1@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 16@@ , 4@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ab@@ s@@ Short@@ 4@@ Short@@ 4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 16@@ , 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Ab@@ s@@ Short@@ 4@@ U@@ short@@ 4@@ : " + (e.toString()))); } }
public void dis@@ po@@ se@@ () { synchronized@@ (@@ this@@ ) { if ((m@@ Service@@ ) == null@@ ) { return@@ ; } try { m@@ Service.@@ dis@@ po@@ se@@ (m@@ App@@ Name, m@@ Sub@@ s@@ cription@@ Id); } catch (android.os.RemoteException e) { } } }
private void start@@ US@@ B@@ T@@ ether@@ ing@@ () { com.android.@@ p@@ m@@ c.@@ P@@ M@@ C@@ M@@ ain@@ Ac@@ tivity.@@ On@@ Start@@ T@@ ether@@ ing@@ Call@@ b@@ ac@@ k t@@ ether@@ Call@@ b@@ ac@@ k = new com.android.@@ p@@ m@@ c.@@ P@@ M@@ C@@ M@@ ain@@ Ac@@ tivity.@@ On@@ Start@@ T@@ ether@@ ing@@ Callback@@ (); m@@ Con@@ n@@ Manager.@@ start@@ T@@ ether@@ ing@@ (@@ Connectivity@@ Manager.@@ TE@@ TH@@ ER@@ ING@@ _@@ US@@ B@@ , true@@ , t@@ ether@@ Callback@@ ); if (@@ u@@ T@@ ether@@ ed@@ ) { m@@ B@@ t@@ n@@ St@@ ar@@ t.@@ set@@ Enabled@@ (@@ false@@ ); m@@ Rad@@ io@@ Gro@@ up@@ .set@@ F@@ o@@ c@@ us@@ able@@ (@@ false@@ ); m@@ Text@@ View@@ .set@@ Text@@ ("@@ St@@ ar@@ ted us@@ b t@@ ether@@ ing@@ "); } }
void on@@ Bluetooth@@ State@@ Change@@ (@@ boolean on@@ );
public void start@@ Track@@ ing@@ B@@ ss@@ id@@ s(@@ android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Scan@@ ner.@@ B@@ ss@@ id@@ Info@@ [] b@@ ss@@ id@@ Info@@ s, int ap@@ Lo@@ st@@ Th@@ res@@ ho@@ l@@ d, android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Scan@@ ner.@@ B@@ ss@@ id@@ Listen@@ er list@@ ener@@ ) { }
public int write@@ v@@ (java.io.FileDescriptor f@@ d, java.lang.Ob@@ ject@@ [] buff@@ er@@ s, int@@ [] offset@@ s, int@@ [] byte@@ Count@@ s) throw@@ s android.system.@@ Errno@@ Exception, java.io.@@ Inter@@ rup@@ ted@@ IO@@ Exception;
@java.lang.Override public void app@@ ly@@ () { for (@@ java.lang.Object c@@ and@@ id@@ ate : to@@ Annot@@ ate@@ ) { if (c@@ and@@ id@@ ate instanceof com.android.jack.@@ ir.ast.@@ Annot@@ able@@ ) { com.android.jack.@@ ir.ast.@@ Annot@@ able annot@@ able = ((@@ com.android.jack.@@ ir.ast.@@ Annot@@ able@@ ) (c@@ and@@ id@@ ate@@ )); if (@@ annot@@ able@@ .get@@ Annot@@ ation@@ (@@ annot@@ ation@@ ).@@ isEmpty@@ ()) { com.android.jack.ir.ast.J@@ Annot@@ ation@@ Li@@ ter@@ al li@@ ter@@ al = new com.android.jack.ir.ast.J@@ Annot@@ ation@@ Li@@ ter@@ al@@ (com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ , annot@@ ation@@ .get@@ R@@ et@@ en@@ tion@@ Polic@@ y@@ (), annot@@ ation@@ ); annot@@ ab@@ le.@@ add@@ Annot@@ ation@@ (@@ li@@ ter@@ al@@ ); li@@ ter@@ al.@@ update@@ Par@@ ent@@ s@@ ((@@ (com.android.jack.@@ ir.ast.J@@ Node@@ ) (@@ annot@@ able@@ ))); } } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public com.android.sched.vfs.@@ V@@ P@@ ath get@@ Path@@ () { return w@@ r@@ app@@ ed@@ File@@ .get@@ Path@@ (); }
void st@@ op@@ Scan@@ () { (@@ this@@ .@@ scan@@ s@@ St@@ op@@ p@@ ed@@ )@@ ++@@ ; if (!(@@ is@@ Scan@@ n@@ ing@@ )) return@@ ; is@@ Scan@@ n@@ ing = false@@ ; st@@ op@@ Tim@@ e = java.lang.System.@@ current@@ Time@@ Milli@@ s(); long curr@@ Tim@@ e = (@@ st@@ op@@ Tim@@ e) - (@@ start@@ Time@@ ); min@@ Scan@@ Tim@@ e = java.lang.@@ M@@ ath@@ .m@@ in@@ (c@@ urr@@ Time@@ , min@@ Scan@@ Time@@ ); max@@ Scan@@ Tim@@ e = java.lang.@@ M@@ ath@@ .m@@ a@@ x@@ (c@@ urr@@ Time@@ , max@@ Scan@@ Time@@ ); to@@ t@@ al@@ Scan@@ Tim@@ e +@@ = curr@@ Time@@ ; las@@ t@@ Scan@@ s.add@@ (c@@ urr@@ Time@@ ); if ((@@ las@@ t@@ Scan@@ s.@@ size@@ ()) > (com.android.bluetooth.@@ g@@ at@@ t.@@ Context@@ Map@@ .@@ Scan@@ Stat@@ s.@@ N@@ U@@ M@@ _S@@ C@@ AN@@ _@@ D@@ UR@@ A@@ TION@@ S_@@ KE@@ P@@ T@@ )) { las@@ t@@ Scan@@ s.@@ remove@@ (@@ 0); } com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent scan@@ Ev@@ ent = new com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Event@@ (); scan@@ Ev@@ ent.@@ set@@ Scan@@ Event@@ Type@@ (@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent.@@ S@@ C@@ AN@@ _@@ EVEN@@ T_@@ S@@ TO@@ P@@ ); scan@@ Ev@@ ent.@@ set@@ Scan@@ T@@ ec@@ h@@ no@@ log@@ y@@ Type@@ (@@ Bluetooth@@ Pro@@ to.@@ Scan@@ Ev@@ ent.@@ S@@ C@@ AN@@ _@@ TE@@ CH@@ _@@ TYPE_@@ L@@ E); scan@@ Ev@@ ent.@@ set@@ In@@ iti@@ ator@@ (@@ app@@ Name); scan@@ Ev@@ ent.@@ set@@ Event@@ Time@@ Milli@@ s(@@ java.lang.System.@@ current@@ Time@@ Milli@@ s()); synchronized@@ (m@@ Scan@@ Event@@ s) { if ((m@@ Scan@@ Event@@ s.@@ size@@ ()) == (com.android.bluetooth.@@ g@@ at@@ t.@@ Context@@ Map@@ .@@ N@@ U@@ M@@ _S@@ C@@ AN@@ _@@ EVEN@@ T@@ S_@@ KE@@ P@@ T@@ )) m@@ Scan@@ Event@@ s.@@ remove@@ (@@ 0); m@@ Scan@@ Event@@ s.add@@ (s@@ can@@ Event@@ ); } } }
public static boolean update@@ Project@@ s(@@ org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Java@@ Project@@ [] android@@ Project@@ s) { try { int pro@@ ject@@ Coun@@ t = android@@ Project@@ s.@@ length@@ ; org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ Cont@@ ain@@ er@@ [] librar@@ y@@ Cont@@ ain@@ er@@ s = new org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ Cont@@ ain@@ er@@ [@@ pro@@ ject@@ Count@@ ]; org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ Cont@@ ain@@ er@@ [] de@@ pendenc@@ y@@ Cont@@ ain@@ er@@ s = new org.eclipse.@@ jd@@ t.@@ core.@@ I@@ Class@@ path@@ Cont@@ ain@@ er@@ [@@ pro@@ ject@@ Count@@ ]; for (@@ int i = 0; i < pro@@ ject@@ Count@@ ; i++) { librar@@ y@@ Cont@@ ain@@ er@@ s@@ [i@@ ] = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.@@ al@@ loc@@ ate@@ Library@@ Cont@@ ain@@ er(@@ android@@ Project@@ s@@ [i]@@ ); de@@ pendenc@@ y@@ Cont@@ ain@@ er@@ s@@ [i@@ ] = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Library@@ Class@@ path@@ Cont@@ ain@@ er@@ In@@ itializ@@ er.@@ al@@ loc@@ ate@@ Dependenc@@ y@@ Cont@@ ain@@ er(@@ android@@ Project@@ s@@ [i]@@ ); } org.eclipse.@@ jd@@ t.@@ core.@@ Java@@ C@@ or@@ e.@@ set@@ Class@@ path@@ Cont@@ ain@@ er@@ (@@ new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Path@@ (com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ Constants.@@ CON@@ TA@@ IN@@ ER_@@ L@@ I@@ B@@ R@@ AR@@ I@@ E@@ S@@ ), android@@ Project@@ s, librar@@ y@@ Cont@@ ain@@ er@@ s, new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Null@@ Pro@@ g@@ res@@ s@@ Monitor@@ ()); org.eclipse.@@ jd@@ t.@@ core.@@ Java@@ C@@ or@@ e.@@ set@@ Class@@ path@@ Cont@@ ain@@ er@@ (@@ new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Path@@ (com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ Constants.@@ CON@@ TA@@ IN@@ ER_@@ DE@@ P@@ EN@@ D@@ EN@@ C@@ I@@ E@@ S@@ ), android@@ Project@@ s, de@@ pendenc@@ y@@ Cont@@ ain@@ er@@ s, new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Null@@ Pro@@ g@@ res@@ s@@ Monitor@@ ()); return true@@ ; } catch (@@ org.eclipse.@@ jd@@ t.@@ core.@@ Java@@ Mode@@ l@@ Exception e) { return false@@ ; } }
public void close@@ () { android.util.Log.d@@ (android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ TAG, ("@@ Remo@@ v@@ ing Tr@@ an@@ s@@ for@@ m wit@@ h Id " + (m@@ Resource@@ Id@@ ))); if ((m@@ Resource@@ Id) == (android.net.@@ IpSec@@ Manager.@@ IN@@ VAL@@ ID@@ _RE@@ S@@ O@@ UR@@ C@@ E_@@ ID@@ )) { mC@@ lose@@ G@@ u@@ ard@@ .@@ close(); return@@ ; } try { android.net.@@ I@@ IpSec@@ Ser@@ vice s@@ v@@ c = get@@ IpSec@@ Service@@ (); synchronized@@ (m@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ Callback@@ ) { if ((m@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ ) != null@@ ) { st@@ op@@ N@@ att@@ Ke@@ e@@ p@@ al@@ i@@ ve@@ (); } } s@@ v@@ c.@@ de@@ lete@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (m@@ Resource@@ Id); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ As@@ Runtime@@ Exception@@ (); } final@@ l@@ y { m@@ Resource@@ Id = android.net.@@ IpSec@@ Manager.@@ IN@@ VAL@@ ID@@ _RE@@ S@@ O@@ UR@@ C@@ E_@@ ID@@ ; mC@@ lose@@ G@@ u@@ ard@@ .@@ close(); } }
public int size@@ () { return config@@ s.@@ size@@ (); }
private void ex@@ it@@ Id@@ le@@ Mode@@ () { com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ ui.@@ Device@@ Manager@@ P@@ age.@@ C@@ ell@@ Info c@@ i = get@@ T@@ able@@ Selection@@ (); if ((@@ c@@ i == null@@ ) || ((@@ c@@ i.@@ m@@ Device@@ ) == null@@ )) { return@@ ; } com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ ui.@@ Device@@ Manager@@ P@@ age.@@ C@@ ell@@ Info c@@ i = new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ ui.@@ Device@@ Manager@@ P@@ age.@@ C@@ ell@@ (), c@@ i.@@ m@@ Device@@ , false@@ ); final java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@
@java.lang.Override public void test@@ Faile@@ d@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ la@@ un@@ ch@@ .@@ junit.@@ run@@ tim@@ e.@@ Test@@ Fail@@ ur@@ e statu@@ s, com.android.ddmlib.@@ tes@@ tr@@ un@@ ner.@@ Test@@ Id@@ ent@@ if@@ i@@ er test@@ , java.lang.String tra@@ ce@@ ) { }
public abstract java.util.Collection@@ <@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Item@@ > get@@ Res@@ ources@@ (com.android.@@ resources.@@ Resource@@ Type type@@ , com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ resources.@@ man@@ ag@@ er.@@ Resource@@ Re@@ positor@@ y resour@@ ces@@ );
public void device@@ Connec@@ ted@@ (@@ final com.android.ddmlib.@@ I@@ Device device@@ ) { exec@@ ute@@ In@@ B@@ ack@@ gro@@ und@@ ("@@ Connec@@ t@@ ing device@@ ", new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { if (device@@ .is@@ On@@ line@@ ()) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ set@@ up@@ Device@@ For@@ w@@ ard@@ (device@@ ); if (!@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ is@@ View@@ Server@@ Run@@ n@@ ing@@ (device@@ ))) { if (!@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ start@@ View@@ Server@@ (device@@ ))) { try { java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (@@ 2@@ 00@@ 0); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { com.android.ddmlib.@@ Log.@@ e@@ (com.android.@@ hierarchyviewerlib.@@ H@@ ierarchy@@ View@@ er@@ Dire@@ ctor@@ .@@ TAG, ("@@ Un@@ able to de@@ bu@@ g de@@ vice " + device@@ )); com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ remove@@ Device@@ For@@ w@@ ard@@ (device@@ ); return@@ ; } if (!@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ start@@ View@@ Server@@ (device@@ ))) { com.android.ddmlib.@@ Log.@@ e@@ (com.android.@@ hierarchyviewerlib.@@ H@@ ierarchy@@ View@@ er@@ Dire@@ ctor@@ .@@ TAG, ("@@ Un@@ able to de@@ bu@@ g de@@ vice " + device@@ )); com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ remove@@ Device@@ For@@ w@@ ard@@ (device@@ ); } else { load@@ View@@ Server@@ Info@@ And@@ W@@ in@@ do@@ w@@ s(@@ device@@ ); } return@@ ; } } load@@ View@@ Server@@ Info@@ And@@ W@@ in@@ do@@ w@@ s(@@ device@@ ); } }); }
public void test@@ Read@@ W@@ rite@@ _@@ Non@@ Block@@ _N@@ or@@ m@@ al@@ () throw@@ s java.lang.Exception { byte@@ [] source@@ Ar@@ ra@@ y = new byte@@ [@@ org.apache.harmony.@@ tests.@@ java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Channel@@ Test.@@ C@@ AP@@ AC@@ ITY@@ _N@@ OR@@ M@@ AL@@ ]; byte@@ [] target@@ Ar@@ ra@@ y = new byte@@ [@@ org.apache.harmony.@@ tests.@@ java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Channel@@ Test.@@ C@@ AP@@ AC@@ ITY@@ _N@@ OR@@ M@@ AL@@ ]; for (@@ int i = 0; i < (s@@ ource@@ Ar@@ ra@@ y.@@ length); i++) { source@@ Array@@ [i@@ ] = (@@ (@@ byte@@ ) (i@@ )); } this@@ .@@ chan@@ nel@@ 1.@@ config@@ ure@@ Block@@ ing@@ (@@ false@@ ); this@@ .@@ chan@@ nel@@ 2.@@ config@@ ure@@ Block@@ ing@@ (@@ false@@ ); chan@@ nel@@ 1.@@ connect@@ (@@ chan@@ nel@@ 2@@ Addres@@ s); chan@@ nel@@ 2.@@ connect@@ (@@ chan@@ nel@@ 2@@ Addres@@ s); read@@ W@@ rite@@ Read@@ Data@@ (@@ this@@ .@@ chan@@ nel@@ 1, source@@ Array@@ , this@@ .@@ chan@@ nel@@ 2, target@@ Array@@ , org.apache.harmony.@@ tests.@@ java.nio.@@ channe@@ ls.@@ Dat@@ ag@@ ram@@ Channel@@ Test.@@ C@@ AP@@ AC@@ ITY@@ _N@@ OR@@ M@@ AL@@ , "@@ test@@ Read@@ W@@ rite@@ _@@ Non@@ Block@@ _N@@ or@@ m@@ al@@ "); }
private org.eclipse.@@ core.@@ resources.@@ I@@ Res@@ our@@ ce copy@@ J@@ ar@@ In@@ to@@ Project@@ (@@ org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject pro@@ ject@@ , java.io.File ja@@ r@@ Path@@ , org.eclipse.@@ core.@@ run@@ tim@@ e.@@ I@@ Pro@@ g@@ res@@ s@@ Mon@@ it@@ or mon@@ itor@@ ) throw@@ s java.io.IO@@ Exception, org.eclipse.@@ core.@@ run@@ tim@@ e.@@ C@@ ore@@ Exception { org.eclipse.@@ core.@@ resources.@@ I@@ Res@@ our@@ ce re@@ s = pro@@ jec@@ t.@@ find@@ M@@ em@@ ber@@ (@@ Sdk@@ Constants.@@ F@@ D@@ _N@@ A@@ TIV@@ E_@@ L@@ I@@ B@@ S@@ ); if (re@@ s == null@@ ) { org.eclipse.@@ core.@@ resources.@@ I@@ Fol@@ der res@@ Fol@@ der = pro@@ jec@@ t.get@@ Folder@@ (@@ Sdk@@ Constants.@@ F@@ D@@ _N@@ A@@ TIV@@ E_@@ L@@ I@@ B@@ S@@ ); res@@ Fol@@ d@@ er.@@ create@@ (@@ I@@ Resource@@ .@@ F@@ OR@@ CE@@ , true@@ , new org.eclipse.@@ core.@@ run@@ tim@@ e.@@ Sub@@ Pro@@ g@@ res@@ s@@ Monitor@@ (m@@ on@@ itor@@ , 1@@ )); re@@ s = res@@ Folder@@ ; } org.eclipse.@@ core.@@ run@@ tim@@ e.@@ IP@@ ath res@@ P@@ ath = (re@@ s == null@@ ) ? null : res@@ .get@@ Location@@ (); java.io.File o@@ s@@ Res@@ Di@@ r = (@@ res@@ P@@ ath == null@@ ) ? null : res@@ Path@@ .@@ to@@ File@@ (); java.io.File d@@ est@@ P@@ ath = new java.io.File@@ (o@@ s@@ Res@@ Dir@@ , ja@@ r@@ Path@@ .getName@@ ()); copy@@ File@@ (@@ ja@@ r@@ Path@@ , d@@ est@@ Path@@ ); return pro@@ jec@@ t.@@ find@@ M@@ em@@ ber@@ ((((@@ com.android.sdklib.@@ Sdk@@ Constants.@@ F@@ D@@ _N@@ A@@ TIV@@ E_@@ L@@ I@@ B@@ S@@ ) + (com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ Constants.@@ W@@ S@@ _S@@ E@@ P@@ )) + (d@@ est@@ Path@@ .getName@@ ()))); }
public android.@@ g@@ raphic@@ s.@@ Bit@@ ma@@ p get@@ P@@ ho@@ to@@ (@@ int app@@ W@@ id@@ get@@ Id) { android.@@ dat@@ ab@@ ase.@@ C@@ ur@@ s@@ or c = null@@ ; android.@@ g@@ raphic@@ s.@@ Bit@@ ma@@ p b@@ it@@ ma@@ p = null@@ ; try { android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Dat@@ ab@@ as@@ e d@@ b = get@@ Read@@ able@@ Dat@@ ab@@ ase@@ (); java.lang.String[] sele@@ ction@@ Arg@@ s = new java.lang.String@@ []{ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ P@@ ho@@ to@@ Dat@@ ab@@ ase@@ Helper.@@ FI@@ E@@ L@@ D_@@ AP@@ P@@ W@@ ID@@ G@@ E@@ T_@@ ID@@ , java.lang.String.@@ value@@ Of@@ (@@ app@@ W@@ id@@ get@@ Id) }; c = d@@ b.@@ qu@@ er@@ y@@ (@@ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ P@@ ho@@ to@@ Dat@@ ab@@ ase@@ Helper.@@ TA@@ BL@@ E_@@ P@@ H@@ O@@ TO@@ S@@ , com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ P@@ ho@@ to@@ Dat@@ ab@@ ase@@ Helper.@@ P@@ H@@ O@@ TO@@ S@@ _P@@ RO@@ J@@ EC@@ TION@@ , "@@ ?@@ =@@ ?@@ ", sele@@ ction@@ Arg@@ s, null@@ , null@@ , null@@ , null@@ , null@@ ); if ((@@ c != null@@ ) && (@@ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ LOG@@ D@@ )) { android.util.Log.d@@ (@@ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ TAG, ("@@ get@@ P@@ ho@@ to qu@@ er@@ y count@@ =@@ " + (c@@ .get@@ Count@@ ()))); } if ((@@ c != null@@ ) && (@@ c.@@ mo@@ ve@@ To@@ F@@ ir@@ st@@ ())) { byte@@ [] dat@@ a = c@@ .get@@ B@@ lo@@ b@@ (@@ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ P@@ ho@@ to@@ Dat@@ ab@@ ase@@ Helper.@@ IN@@ DE@@ X@@ _P@@ H@@ O@@ TO@@ _@@ B@@ LO@@ B@@ ); if (d@@ at@@ a != null@@ ) { b@@ it@@ ma@@ p = android.@@ g@@ raphic@@ s.@@ Bit@@ m@@ ap@@ Fa@@ ctor@@ y.@@ de@@ code@@ ByteArray@@ (d@@ ata@@ , 0, data@@ .@@ length); } } } catch (android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Exception e) { android.util.Log.e@@ (@@ com.@@ co@@ o@@ li@@ ri@@ s.@@ media.@@ P@@ ho@@ to@@ App@@ W@@ id@@ get@@ Provid@@ er.@@ TAG, "@@ Co@@ ul@@ d not lo@@ ad p@@ ho@@ to f@@ ro@@ m dat@@ ab@@ ase@@ ", e); } final@@ l@@ y { if (@@ c != null@@ ) { c.@@ close(); } } return b@@ it@@ m@@ ap@@ ; }
@java.lang.Override public java.lang.String in@@ stall@@ Package@@ (java.lang.String package@@ File@@ Path@@ , boolean re@@ in@@ stall@@ , java.lang.String.@@ .@@ . ex@@ tra@@ Arg@@ s) throw@@ s com.android.ddmlib.@@ In@@ stall@@ Exception { try { java.lang.String remo@@ te@@ File@@ P@@ ath = s@@ ync@@ Package@@ To@@ Device@@ (@@ package@@ File@@ Path@@ ); java.lang.String result = in@@ stall@@ Remote@@ Package@@ (@@ remo@@ te@@ File@@ Path@@ , re@@ in@@ stall@@ , ex@@ tra@@ Arg@@ s); remove@@ Remote@@ Package@@ (@@ remo@@ te@@ File@@ Path@@ ); return result@@ ; } catch (java.io.IOException e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ Time@@ out@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ S@@ ync@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } catch (com.android.@@ ddmlib.@@ S@@ ync@@ Exception e) { throw new com.android.ddmlib.@@ In@@ stall@@ Exception(@@ e); } }
@java.lang.Override public com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ H@@ ierarchy@@ View@@ er get@@ H@@ ierarchy@@ View@@ er@@ () { return new com.android.@@ mon@@ key@@ run@@ ner.@@ e@@ as@@ y.@@ H@@ ierarchy@@ View@@ er@@ (device@@ ); }
@java.lang.Override public int b@@ ul@@ k@@ In@@ ser@@ t@@ (android.net.@@ Ur@@ i ur@@ i@@ , android.content.@@ Content@@ Valu@@ es@@ [] valu@@ es) { int mat@@ ch = com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ UR@@ I@@ _M@@ AT@@ CH@@ ER@@ .@@ match@@ (@@ ur@@ i@@ ); if (m@@ at@@ ch == (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ V@@ O@@ L@@ U@@ ME@@ S@@ )) { return super@@ .@@ b@@ ul@@ k@@ In@@ ser@@ t@@ (@@ ur@@ i@@ , valu@@ es@@ ); } com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ Dat@@ ab@@ ase@@ Hel@@ p@@ er hel@@ p@@ er = get@@ Dat@@ ab@@ ase@@ For@@ U@@ ri@@ (@@ ur@@ i@@ ); if (@@ hel@@ p@@ er == null@@ ) { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception(("@@ Un@@ k@@ no@@ w@@ n UR@@ I@@ : " + ur@@ i@@ )); } android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Dat@@ ab@@ as@@ e d@@ b = hel@@ p@@ er.get@@ Wri@@ t@@ able@@ Dat@@ ab@@ ase@@ (); if (d@@ b == null@@ ) { throw new java.lang.Illegal@@ State@@ Exception(("@@ Co@@ ul@@ d@@ n@@ 't op@@ e@@ n dat@@ ab@@ as@@ e for " + ur@@ i@@ )); } if ((@@ mat@@ ch == (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ A@@ U@@ D@@ IO@@ _P@@ LA@@ Y@@ LIS@@ T@@ S_@@ ID@@ )) || (m@@ at@@ ch == (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ A@@ U@@ D@@ IO@@ _P@@ LA@@ Y@@ LIS@@ T@@ S_@@ ID@@ _@@ ME@@ M@@ B@@ E@@ RS@@ ))) { return play@@ list@@ B@@ ul@@ k@@ In@@ ser@@ t@@ (d@@ b@@ , ur@@ i@@ , valu@@ es@@ ); } else if (m@@ at@@ ch == (com.android.@@ provid@@ er@@ s.@@ media.@@ Media@@ Provid@@ er.@@ M@@ T@@ P@@ _@@ O@@ B@@ J@@ EC@@ T_@@ RE@@ F@@ ER@@ EN@@ CE@@ S@@ )) { int hand@@ le = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ ur@@ i@@ .get@@ Path@@ Se@@ g@@ ment@@ s@@ ().get@@ (@@ 2@@ )); return set@@ Object@@ Re@@ feren@@ ces@@ (@@ hel@@ per@@ , d@@ b@@ , handle@@ , valu@@ es@@ ); } d@@ b.@@ be@@ gin@@ Trans@@ action@@ (); java.util.ArrayList<@@ java.lang.@@ Long@@ > not@@ if@@ y@@ R@@ o@@ w@@ Id@@ s = new java.util.ArrayList<@@ java.lang.@@ Long@@ >(); int num@@ In@@ ser@@ ted = 0; try { int le@@ n = valu@@ es.@@ length@@ ; for (@@ int i = 0; i < l@@ en@@ ; i++) { if ((@@ valu@@ es@@ [i]@@ ) != null@@ ) { in@@ ser@@ t@@ Inter@@ nal@@ (@@ ur@@ i@@ , match@@ , valu@@ es@@ [i]@@ , not@@ if@@ y@@ R@@ o@@ w@@ Id@@ s); } num@@ In@@ ser@@ ted = l@@ en@@ ; d@@ b.@@ set@@ Trans@@ action@@ Su@@ ccess@@ f@@ ul@@ (); } final@@ l@@ y { d@@ b.@@ end@@ Trans@@ action@@ (); } if (@@ ur@@ i != null@@ ) { if (@@ ur@@ i.@@ toString@@ ().@@ contain@@ s("@@ cont@@ ent@@ :@@ /@@ /@@ /@@ media@@ /@@ ex@@ ter@@ nal@@ ")) { not@@ if@@ y@@ M@@ t@@ p@@ (@@ not@@ if@@ y@@ R@@ o@@ w@@ Id@@ s); } } } get@@ Context@@ ().get@@ Content@@ Resol@@ ver@@ ().@@ not@@ if@@ y@@ Change@@ (@@ ur@@ i@@ , null@@ ); return num@@ In@@ ser@@ ted@@ ; }
public void test@@ Ser@@ i@@ aliz@@ e@@ Session@@ _@@ Null@@ O@@ C@@ S@@ P@@ Res@@ pon@@ s@@ es@@ () throw@@ s java.lang.Exception { org.conscrypt.@@ Open@@ SSL@@ Session@@ Imp@@ l mock@@ S@@ es@@ sion = mock@@ (@@ org.conscrypt.@@ Open@@ SSL@@ Session@@ Imp@@ l@@ .@@ class@@ ); when(m@@ ock@@ Session@@ .get@@ Id@@ ()).@@ thenReturn@@ (@@ new byte@@ []{ 1@@ 7@@ , 9@@ , 3@@ , 3@@ 2 }); when(m@@ ock@@ Session@@ .get@@ P@@ e@@ er@@ Host@@ ()).@@ thenReturn@@ ("@@ ssl.@@ ex@@ am@@ p@@ le.@@ com@@ "); when(m@@ ock@@ Session@@ .get@@ P@@ e@@ er@@ Port@@ ()).@@ thenReturn@@ (@@ 4@@ 3@@ ); when(m@@ ock@@ Session@@ .get@@ En@@ cod@@ ed@@ ()).@@ thenReturn@@ (@@ new byte@@ []{ 1, 2, 3 }); when(m@@ ock@@ Session@@ .get@@ Status@@ Res@@ pon@@ s@@ es@@ ()).@@ thenReturn@@ (@@ null@@ ); java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ i@@ cat@@ e mock@@ Cer@@ t = mock@@ (@@ java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ .@@ class@@ ); when(m@@ ock@@ Cer@@ t.get@@ En@@ cod@@ ed@@ ()).@@ thenReturn@@ (@@ new byte@@ []{ 5, 6@@ , 7@@ , 1@@ 6 }); when(m@@ ock@@ Session@@ .get@@ P@@ e@@ er@@ Cer@@ t@@ if@@ i@@ cat@@ es@@ ()).@@ thenReturn@@ (@@ new java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ []{ mock@@ Cer@@ t }); org.conscrypt.@@ SSL@@ Client@@ Session@@ Cach@@ e mock@@ Cach@@ e = mock@@ (@@ org.conscrypt.@@ SSL@@ Client@@ Session@@ Cach@@ e@@ .@@ class@@ ); org.conscrypt.@@ Client@@ Session@@ Context contex@@ t = new org.conscrypt.@@ Client@@ Session@@ Context@@ (); con@@ text.@@ set@@ Per@@ si@@ st@@ ent@@ Cach@@ e@@ (m@@ ock@@ Cach@@ e); con@@ text.@@ put@@ Session@@ (m@@ ock@@ Session@@ ); ve@@ r@@ if@@ y@@ (m@@ ock@@ Cach@@ e@@ ).@@ put@@ Session@@ Data@@ (e@@ q@@ (m@@ ock@@ Session@@ ), any@@ (@@ byte@@ []@@ .@@ class@@ )); }
public java.io.FileDescriptor open@@ (java.lang.String path@@ , int flag@@ s, int mode@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ open@@ (p@@ ath@@ , flag@@ s, mode@@ ); }
private void qu@@ er@@ y@@ New@@ Device@@ For@@ Info@@ (com.android.@@ ddmlib.@@ Device device@@ ) { try { device@@ .@@ f@@ et@@ ch@@ Properties@@ (); qu@@ er@@ y@@ New@@ Device@@ For@@ Mo@@ unt@@ ing@@ P@@ o@@ int@@ (device@@ , I@@ Device.@@ M@@ N@@ T_@@ EX@@ TER@@ N@@ AL@@ _S@@ T@@ OR@@ A@@ G@@ E); qu@@ er@@ y@@ New@@ Device@@ For@@ Mo@@ unt@@ ing@@ P@@ o@@ int@@ (device@@ , I@@ Device.@@ M@@ N@@ T_@@ DA@@ TA@@ ); qu@@ er@@ y@@ New@@ Device@@ For@@ Mo@@ unt@@ ing@@ P@@ o@@ int@@ (device@@ , I@@ Device.@@ M@@ N@@ T_@@ RO@@ O@@ T@@ ); if (device@@ .is@@ E@@ m@@ ul@@ ator@@ ()) { com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ s@@ ol@@ e cons@@ ol@@ e = com.android.ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le@@ .get@@ Con@@ so@@ le@@ (device@@ ); if (@@ cons@@ ol@@ e != null@@ ) { device@@ .set@@ Av@@ d@@ Name@@ (@@ con@@ so@@ le@@ .get@@ Av@@ d@@ Name@@ ()); con@@ so@@ le.@@ close(); } } catch (com.android.@@ ddmlib.@@ Time@@ out@@ Exception e) { com.android.ddmlib.@@ Log.@@ w@@ ("@@ Device@@ Monitor@@ ", java.lang.String@@ .@@ for@@ mat@@ ("@@ Connec@@ tion time@@ out get@@ t@@ ing in@@ fo for de@@ vice %@@ s", device@@ .get@@ Ser@@ ial@@ Number@@ ())); } catch (com.android.@@ ddmlib.@@ Adb@@ Command@@ Re@@ jec@@ ted@@ Exception e) { com.android.ddmlib.@@ Log.@@ w@@ ("@@ Device@@ Monitor@@ ", java.lang.String@@ .@@ for@@ mat@@ ("@@ Ad@@ b re@@ jec@@ ted com@@ man@@ d to ge@@ t de@@ vice %@@ 1@@ $@@ s info@@ : %@@ 2@@ $@@ s", device@@ .get@@ Ser@@ ial@@ Number@@ (), e.get@@ Message@@ ())); } catch (com.android.@@ ddmlib.@@ Sh@@ ell@@ Command@@ Un@@ res@@ pon@@ si@@ ve@@ Exception e) { com.android.ddmlib.@@ Log.@@ w@@ ("@@ Device@@ Monitor@@ ", java.lang.String@@ .@@ for@@ mat@@ ("@@ Ad@@ b sh@@ el@@ l com@@ man@@ d too@@ k to@@ o long return@@ ing in@@ fo for de@@ vice %@@ s", device@@ .get@@ Ser@@ ial@@ Number@@ ())); } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ w@@ ("@@ Device@@ Monitor@@ ", java.lang.String@@ .@@ for@@ mat@@ ("@@ I@@ O Error get@@ t@@ ing in@@ fo for de@@ vice %@@ s", device@@ .get@@ Ser@@ ial@@ Number@@ ())); } } }
@java.lang.Override public int get@@ Target@@ Sdk@@ Version@@ (@@ @com.android.annotations.NonNull java.io.File m@@ an@@ if@@ est@@ File@@ ) { try { java.lang.Object valu@@ e = com.android.@@ x@@ m@@ l.@@ Android@@ M@@ an@@ if@@ est.@@ get@@ Target@@ Sdk@@ Version@@ (@@ new com.android.@@ io.@@ File@@ W@@ rap@@ per@@ (m@@ an@@ if@@ est@@ File@@ )); if (@@ valu@@ e != null@@ ) { return ((@@ java.lang.Integ@@ er@@ ) (@@ value@@ )); } else { return -1@@ ; } } catch (@@ javax.@@ x@@ m@@ l.@@ x@@ path@@ .@@ X@@ Path@@ Ex@@ pres@@ sion@@ Exception e) { } catch (com.android.@@ io.@@ Stream@@ Exception e) { throw new java.lang.Runtime@@ Exception(@@ e); } return -1@@ ; }
public int write@@ (@@ java.nio.Byte@@ Buff@@ er src@@ ) throw@@ s java.io.IOException { en@@ s@@ ure@@ Open@@ (); if (!(@@ w@@ ri@@ t@@ able@@ )) throw new java.nio.@@ channe@@ ls.@@ Non@@ Wri@@ t@@ able@@ Channel@@ Exception@@ (); synchronized@@ (@@ posi@@ tion@@ Lock) { int n = 0; int t@@ i = -1@@ ; java.lang.Object tra@@ ce@@ Context = s@@ un@@ .m@@ is@@ c.@@ I@@ o@@ Tra@@ ce.@@ file@@ W@@ rite@@ B@@ e@@ gin@@ (p@@ ath@@ ); try { be@@ gin@@ (); t@@ i = th@@ read@@ s.add@@ (); if (!(@@ is@@ Open@@ ())) return 0; do { n = s@@ un@@ .@@ nio.@@ ch@@ .@@ IO@@ Util.@@ write@@ (f@@ d, src@@ , (-1@@ ), n@@ d@@ ); } while ((@@ n == (s@@ un@@ .@@ nio.@@ ch@@ .@@ IO@@ Statu@@ s.@@ IN@@ TER@@ R@@ U@@ P@@ TED@@ )) && (is@@ Open@@ ()) ); return s@@ un@@ .@@ nio.@@ ch@@ .@@ IO@@ Statu@@ s.@@ n@@ or@@ m@@ aliz@@ e@@ (@@ n@@ ); } final@@ l@@ y { th@@ read@@ s.@@ remove@@ (@@ ti@@ ); end@@ ((@@ n > 0@@ )); s@@ un@@ .m@@ is@@ c.@@ I@@ o@@ Tra@@ ce.@@ file@@ W@@ rite@@ En@@ d@@ (@@ tra@@ ce@@ Contex@@ t, (@@ n > 0 ? n : 0@@ )); assert s@@ un@@ .@@ nio.@@ ch@@ .@@ IO@@ Statu@@ s.@@ check@@ (@@ n@@ ); } } }
private void com@@ pu@@ te@@ E@@ d@@ it@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s() { ed@@ it@@ H@@ ig@@ ht@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s.@@ clear@@ (); java.@@ aw@@ t.@@ R@@ ec@@ t@@ an@@ g@@ le r = null@@ ; int f = ed@@ it@@ Se@@ g@@ m@@ ent.@@ fi@@ r@@ st@@ ; int s = ed@@ it@@ Se@@ g@@ m@@ ent.@@ sec@@ ond@@ ; int m@@ in = java.lang.@@ M@@ ath@@ .m@@ in@@ (f@@ , s); int d@@ if@@ f = java.lang.@@ M@@ ath.@@ ab@@ s@@ ((@@ f - s@@ )); switch (@@ ed@@ it@@ Reg@@ i@@ on@@ ) { case LE@@ F@@ T_@@ P@@ AT@@ C@@ H : ed@@ it@@ P@@ atch@@ Reg@@ i@@ on = dis@@ play@@ Co@@ or@@ d@@ in@@ at@@ es@@ (@@ new java.@@ aw@@ t.@@ R@@ ec@@ t@@ an@@ g@@ le@@ (@@ 0, min@@ , 1, d@@ if@@ f@@ )); ed@@ it@@ H@@ ig@@ ht@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s.add@@ All@@ (get@@ H@@ or@@ iz@@ on@@ t@@ al@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s(@@ 0, min@@ , im@@ ag@@ e.get@@ W@@ id@@ th@@ (), d@@ if@@ f@@ )); break@@ ; case R@@ I@@ G@@ H@@ T_@@ P@@ AD@@ D@@ IN@@ G : ed@@ it@@ P@@ atch@@ Reg@@ i@@ on = dis@@ play@@ Co@@ or@@ d@@ in@@ at@@ es@@ (@@ new java.@@ aw@@ t.@@ R@@ ec@@ t@@ an@@ g@@ le@@ (((@@ im@@ ag@@ e.get@@ W@@ id@@ th@@ ()) - 1@@ ), min@@ , 1, d@@ if@@ f@@ )); ed@@ it@@ H@@ ig@@ ht@@ Reg@@ i@@ on@@ s.add@@ All@@ (get@@ H@@ or@@ iz@@ on@@ t@@ al@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s(@@ 0, min@@ , im@@ ag@@ e.get@@ W@@ id@@ th@@ (), d@@ if@@ f@@ )); break@@ ; case TO@@ P@@ _P@@ AT@@ C@@ H : ed@@ it@@ P@@ atch@@ Reg@@ i@@ on = dis@@ play@@ Co@@ or@@ d@@ in@@ at@@ es@@ (@@ new java.@@ aw@@ t.@@ R@@ ec@@ t@@ an@@ g@@ le@@ (m@@ in@@ , 0, d@@ if@@ f@@ , 1@@ )); ed@@ it@@ H@@ ig@@ ht@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s.add@@ All@@ (get@@ Ver@@ ti@@ cal@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s@@ (m@@ in@@ , 0, d@@ if@@ f@@ , im@@ ag@@ e.get@@ He@@ ig@@ ht@@ ())); break@@ ; case B@@ O@@ T@@ TO@@ M@@ _P@@ AD@@ D@@ IN@@ G : ed@@ it@@ P@@ atch@@ Reg@@ i@@ on = dis@@ play@@ Co@@ or@@ d@@ in@@ at@@ es@@ (@@ new java.@@ aw@@ t.@@ R@@ ec@@ t@@ an@@ g@@ le@@ (m@@ in@@ , ((@@ im@@ ag@@ e.get@@ He@@ ig@@ ht@@ ()) - 1@@ ), d@@ if@@ f@@ , 1@@ )); ed@@ it@@ H@@ ig@@ ht@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s.add@@ All@@ (get@@ Ver@@ ti@@ cal@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s@@ (m@@ in@@ , 0, d@@ if@@ f@@ , im@@ ag@@ e.get@@ He@@ ig@@ ht@@ ())); } }
public void update@@ Pre@@ ference@@ Intent@@ s(@@ android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ ference@@ Gro@@ u@@ p pre@@ f@@ s, final java.lang.String ac@@ c@@ count@@ Type, android.@@ ac@@ count@@ s.@@ Ac@@ coun@@ t ac@@ count@@ ) { final android.content.@@ p@@ m.@@ Package@@ Manager p@@ m = m@@ F@@ r@@ ag@@ m@@ ent.get@@ Activity@@ ().get@@ Package@@ Manager@@ (); for (@@ int i = 0; i < (p@@ ref@@ s.get@@ Pre@@ ference@@ Count@@ ()@@ )@@ ;@@ ) { android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce pre@@ f = pre@@ f@@ s.get@@ Pre@@ ference@@ (i@@ ); if (p@@ re@@ f instanceof android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ ference@@ Gro@@ up@@ ) { update@@ Pre@@ ference@@ Intent@@ s@@ ((@@ (android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ ference@@ Gro@@ up@@ ) (p@@ ref@@ )), ac@@ c@@ count@@ Type, ac@@ count@@ ); } android.content.@@ Int@@ ent int@@ ent = pre@@ f@@ .get@@ Intent@@ (); if (@@ int@@ ent != null@@ ) { if (android.@@ provider.@@ Setting@@ s.@@ AC@@ TION_@@ LO@@ C@@ A@@ TION@@ _S@@ O@@ UR@@ C@@ E_@@ SE@@ T@@ T@@ ING@@ S@@ .@@ equal@@ s@@ (@@ int@@ ent.get@@ Action@@ ())) { pre@@ f@@ .set@@ On@@ Pre@@ ference@@ C@@ li@@ ck@@ Listener@@ (@@ new com.android.@@ setting@@ s.@@ ac@@ count@@ s.@@ Ac@@ count@@ Type@@ Pre@@ ference@@ Load@@ er.@@ F@@ r@@ ag@@ ment@@ St@@ ar@@ ter@@ (com.android.@@ setting@@ s.@@ loc@@ ation.@@ Location@@ Setting@@ s@@ .@@ class@@ .getName@@ (), R.@@ str@@ ing.@@ loc@@ ation@@ _@@ setting@@ s@@ _@@ ti@@ t@@ le@@ )); } else { android.content.@@ p@@ m.@@ Resol@@ ve@@ Info r@@ i = p@@ m.@@ res@@ ol@@ ve@@ Activity@@ As@@ User@@ (@@ int@@ ent@@ , Package@@ Manager.@@ MA@@ T@@ CH@@ _@@ DE@@ FA@@ UL@@ T_@@ ON@@ L@@ Y@@ , m@@ User@@ Handle@@ .get@@ Id@@ ent@@ if@@ ier@@ ()); if (r@@ i == null@@ ) { pre@@ fs.@@ remove@@ Pre@@ ference@@ (p@@ ref@@ ); continue@@ ; } int@@ ent.@@ put@@ Extra@@ (com.android.@@ setting@@ s.@@ ac@@ count@@ s.@@ Ac@@ count@@ Type@@ Pre@@ ference@@ Load@@ er.@@ AC@@ C@@ O@@ UN@@ T_@@ KE@@ Y@@ , ac@@ count@@ ); int@@ ent.@@ set@@ Flag@@ s@@ ((@@ (@@ int@@ ent.get@@ Flag@@ s@@ ()) | (android.content.@@ Int@@ ent.@@ F@@ LA@@ G@@ _@@ AC@@ TIV@@ ITY@@ _N@@ E@@ W@@ _@@ TA@@ S@@ K@@ ))); pre@@ f@@ .set@@ On@@ Pre@@ ference@@ C@@ li@@ ck@@ Listener@@ (@@ new android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ ference@@ .@@ On@@ Pre@@ ference@@ C@@ li@@ ck@@ Listener@@ () { @java.lang.Override public boolean on@@ Pre@@ ference@@ C@@ li@@ ck@@ (android.@@ support.@@ v@@ 7@@ .@@ pre@@ ference@@ .@@ Pre@@ feren@@ ce pre@@ ference@@ ) { android.content.@@ Int@@ ent pre@@ f@@ Int@@ ent = pre@@ ference@@ .get@@ Intent@@ (); if (is@@ S@@ a@@ f@@ e@@ Intent@@ (p@@ m@@ , pre@@ f@@ Intent@@ , ac@@ c@@ count@@ Type@@ )) { m@@ F@@ r@@ ag@@ m@@ ent.get@@ Activity@@ ().@@ start@@ Activity@@ As@@ User@@ (p@@ ref@@ Intent@@ , m@@ User@@ Handle@@ ); } else { android.util.Log.e@@ (com.android.@@ setting@@ s.@@ ac@@ count@@ s.@@ Ac@@ count@@ Type@@ Pre@@ ference@@ Load@@ er.@@ TAG, (("@@ Ref@@ us@@ ing to la@@ un@@ ch au@@ th@@ enti@@ cat@@ or int@@ ent b@@ ec@@ au@@ se@@ " + "@@ i@@ t ex@@ p@@ lo@@ it@@ s Setting@@ s per@@ mission@@ s@@ : ") + pre@@ f@@ Intent@@ )); } return true@@ ; } }); } i@@ ++@@ ; }
private long start@@ ing@@ Task@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ server.@@ Server@@ Info info@@ ) throw@@ s com.android.jack.@@ server.@@ Jack@@ H@@ ttp@@ Ser@@ ver.@@ Server@@ C@@ lo@@ sed@@ Exception { long id@@ ; synchronized@@ (@@ lock@@ ) { if (s@@ h@@ ut@@ ting@@ Down@@ ) { throw new com.android.jack.@@ server.@@ Jack@@ H@@ ttp@@ Ser@@ ver.@@ Server@@ C@@ lo@@ sed@@ Exception@@ (); } id = info@@ .@@ to@@ t@@ al@@ Local@@ ; (in@@ fo@@ .@@ to@@ t@@ al@@ Local@@ )@@ ++@@ ; if ((@@ info@@ .@@ current@@ Local@@ ) == 0) { can@@ cel@@ Tim@@ er@@ (); ex@@ it@@ Id@@ le@@ Mode@@ (); } (in@@ fo@@ .@@ current@@ Local@@ )@@ ++@@ ; if ((@@ info@@ .@@ current@@ Local@@ ) > (in@@ fo@@ .m@@ a@@ x@@ Local@@ )) { info@@ .m@@ a@@ x@@ Loc@@ al = info@@ .@@ current@@ Local@@ ; } } return id@@ ; }
synchronized int get@@ Connection@@ State@@ () { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ hf@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); return android.@@ bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ T@@ ING@@ ; }
public static int do@@ ub@@ le@@ Con@@ di@@ tion@@ Equal@@ Z@@ er@@ o@@ (@@ do@@ ub@@ le d@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ d > 4@@ 2.@@ 0) != false ? 1@@ 3 : 5@@ 4@@ ; }
private void handle@@ Config@@ ure@@ d@@ Network@@ s@@ Changed@@ () { java.util.List<@@ android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ > w@@ if@@ i@@ Configuration@@ s = m@@ W@@ if@@ i@@ Manager.get@@ Config@@ ure@@ d@@ Network@@ s(); if (@@ w@@ if@@ i@@ Configuration@@ s == null@@ ) { return@@ ; } m@@ S@@ av@@ ed@@ Network@@ s.@@ clear@@ (); m@@ S@@ av@@ ed@@ S@@ s@@ id@@ s.@@ clear@@ (); for (@@ int i = 0; i < (@@ w@@ if@@ i@@ Configur@@ ations.@@ size@@ ()); i++) { android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation w@@ if@@ i@@ Configur@@ ation = w@@ if@@ i@@ Configur@@ ations.@@ get@@ (i@@ ); if (((@@ w@@ if@@ i@@ Configur@@ ation.@@ statu@@ s) != (@@ W@@ if@@ i@@ Configur@@ ation.@@ Statu@@ s.@@ EN@@ ABL@@ ED@@ )) || (@@ w@@ if@@ i@@ Configur@@ ation.@@ u@@ se@@ Ex@@ ter@@ nal@@ S@@ co@@ res@@ )) { continue@@ ; } if (@@ w@@ if@@ i@@ Configur@@ ation.@@ has@@ No@@ Inter@@ net@@ Access@@ ()) { continue@@ ; } java.lang.String s@@ si@@ d = com.android.@@ network@@ re@@ com@@ m@@ end@@ ation.@@ W@@ if@@ i@@ Configuration@@ Util.@@ remove@@ D@@ ouble@@ Q@@ u@@ o@@ tes@@ (@@ w@@ if@@ i@@ Configuration@@ ); if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (s@@ s@@ id@@ )) { continue@@ ; } m@@ S@@ av@@ ed@@ Network@@ s.@@ put@@ (s@@ s@@ id, w@@ if@@ i@@ Configuration@@ ); m@@ S@@ av@@ ed@@ S@@ s@@ id@@ s.add@@ (s@@ s@@ id@@ ); } m@@ S@@ av@@ ed@@ S@@ s@@ id@@ s@@ In@@ L@@ ast@@ Scan@@ .@@ ret@@ ain@@ All@@ (m@@ S@@ av@@ ed@@ S@@ s@@ id@@ s); }
@java.lang.Override public void on@@ Result@@ (android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info@@ [] pro@@ fil@@ es) { try { call@@ back@@ .@@ on@@ Comp@@ lete@@ (@@ E@@ uic@@ c@@ Card@@ Manager.@@ RE@@ S@@ UL@@ T_@@ O@@ K@@ , pro@@ fil@@ es@@ ); } catch (android.os.RemoteException excepti@@ on@@ ) { throw excepti@@ on@@ .@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
public void open@@ C@@ am@@ er@@ a@@ Device@@ (@@ int c@@ am@@ er@@ a@@ Id) throw@@ s com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Exception { com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ Log@@ t.@@ i@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Service.TAG, java.lang.String@@ .@@ for@@ mat@@ ("@@ Open@@ ing c@@ am@@ er@@ a %@@ d@@ ", c@@ am@@ er@@ a@@ Id@@ )); java.lang.String[] de@@ vices@@ ; try { device@@ s = mC@@ am@@ er@@ a@@ Manager.get@@ C@@ am@@ er@@ a@@ Id@@ List@@ (); if ((@@ device@@ s == null@@ ) || ((@@ de@@ vices.@@ length) == 0@@ )) { throw new com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Exception("@@ N@@ o c@@ am@@ er@@ a de@@ vices@@ "); } if ((m@@ M@@ em@@ or@@ y@@ Q@@ u@@ o@@ t@@ a@@ ) == (-1@@ )) { for (java.lang.String c@@ am@@ Id : de@@ vices@@ ) { android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s char@@ s = mC@@ am@@ er@@ a@@ Manager.get@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s(@@ c@@ am@@ Id); android.util.@@ Siz@@ e max@@ Y@@ u@@ v@@ Siz@@ e = com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Utils.@@ get@@ Y@@ u@@ v@@ Output@@ Siz@@ es@@ (m@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s@@ )@@ [0@@ ]; int qu@@ o@@ t@@ a = ((@@ (m@@ a@@ x@@ Y@@ u@@ v@@ Siz@@ e.get@@ W@@ id@@ th@@ ()) * (m@@ a@@ x@@ Y@@ u@@ v@@ Siz@@ e.get@@ He@@ ig@@ ht@@ ())) * 4@@ ) * 3@@ ; if (@@ qu@@ o@@ t@@ a > (m@@ M@@ em@@ or@@ y@@ Q@@ u@@ o@@ t@@ a@@ )) { m@@ M@@ em@@ or@@ y@@ Q@@ u@@ o@@ t@@ a = qu@@ o@@ t@@ a@@ ; } } } catch (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ C@@ am@@ er@@ a@@ Access@@ Exception e) { throw new com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Exception("@@ Faile@@ d to ge@@ t de@@ vice I@@ D list@@ ", e); } try { mC@@ am@@ er@@ a = m@@ Block@@ ing@@ C@@ am@@ er@@ a@@ Manager.@@ open@@ C@@ am@@ er@@ a@@ (@@ de@@ vices@@ [@@ c@@ am@@ er@@ a@@ Id@@ ]@@ , mC@@ am@@ er@@ a@@ Listener@@ , mC@@ am@@ er@@ a@@ Handler@@ ); mC@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s = mC@@ am@@ er@@ a@@ Manager.get@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s(@@ de@@ vices@@ [@@ c@@ am@@ er@@ a@@ Id@@ ]@@ ); m@@ Socket@@ Q@@ ue@@ u@@ o@@ t@@ a = new java.util.@@ concurrent.@@ Se@@ m@@ ap@@ h@@ ore@@ (m@@ M@@ em@@ or@@ y@@ Q@@ u@@ o@@ t@@ a@@ , true@@ ); } catch (android.@@ hardware.@@ c@@ am@@ er@@ a@@ 2.@@ C@@ am@@ er@@ a@@ Access@@ Exception e) { throw new com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ it@@ s.@@ I@@ ts@@ Exception("@@ Faile@@ d to op@@ e@@ n c@@ am@@ er@@ a@@ ", e); } catch (com.android.@@ ex@@ .@@ c@@ am@@ er@@ a@@ 2.@@ b@@ lock@@ ing.@@ Block@@ ing@@ C@@ am@@ er@@ a@@ Manager.@@ Block@@ ing@@ Open@@ Exception e) { throw new com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ c@@ am@@ er@@ a.@@ I@@ ts@@ Exception("@@ Faile@@ d to op@@ e@@ n c@@ am@@ er@@ a f@@ ter b@@ lock@@ ing@@ )@@ ", e); } }
@java.lang.Override public int has@@ h@@ Code@@ () { int result = m@@ Source@@ File@@ .@@ has@@ h@@ Code@@ (); result = (@@ 3@@ 1 * result@@ ) + (m@@ Build@@ Too@@ l@@ s@@ Re@@ vision@@ .@@ has@@ h@@ Code@@ ()); return result@@ ; }
@java.lang.Override public void not@@ if@@ y@@ Sim@@ Ac@@ ti@@ v@@ ation@@ State@@ Changed@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phon@@ e s@@ ender@@ , int ac@@ ti@@ v@@ ation@@ State@@ ) { try { m@@ Reg@@ is@@ try@@ .@@ not@@ if@@ y@@ Sim@@ Ac@@ ti@@ v@@ ation@@ State@@ Changed@@ For@@ Phone@@ Id@@ (s@@ end@@ er.get@@ Phone@@ Id@@ (), send@@ er.get@@ Sub@@ Id@@ (), ac@@ ti@@ v@@ ation@@ State@@ ); } catch (android.os.RemoteException ex@@ ) { } }
protected void de@@ fin@@ e@@ (com.android.s@@ dk@@ man@@ ag@@ er.@@ Command@@ Line@@ Process@@ or.@@ Mod@@ e mode@@ , boolean mand@@ ator@@ y@@ , java.lang.String ver@@ b@@ , java.lang.String di@@ re@@ ct@@ Object@@ , java.lang.String short@@ Name, java.lang.String long@@ Name, java.lang.String des@@ cription@@ , java.lang.Object default@@ Value@@ ) { assert !@@ (m@@ and@@ ator@@ y && (m@@ o@@ de == (com.android.s@@ dk@@ man@@ ag@@ er.@@ Command@@ Line@@ Process@@ or.@@ Mod@@ e.@@ B@@ O@@ O@@ LE@@ AN@@ ))); assert short@@ Name != null@@ ; assert long@@ Name != null@@ ; assert (@@ (@@ short@@ Name != null@@ ) && (@@ (@@ short@@ Nam@@ e.@@ length@@ ()) > 0@@ )) || (@@ (@@ long@@ Name != null@@ ) && (@@ long@@ Nam@@ e.@@ length@@ ()) > 0@@ )); if (d@@ ire@@ ct@@ Ob@@ ject == null@@ ) { di@@ re@@ ct@@ Ob@@ ject = com.android.s@@ dk@@ man@@ ag@@ er.@@ Command@@ Line@@ Process@@ or.@@ NO@@ _@@ V@@ ER@@ B@@ _@@ O@@ B@@ J@@ EC@@ T@@ ; } java.lang.String ke@@ y = (((@@ ver@@ b + "@@ /@@ ") + di@@ re@@ ct@@ Object@@ ) + "@@ /@@ ") + long@@ Name@@ ; m@@ Argument@@ s.@@ put@@ (@@ key@@ , new com.android.s@@ dk@@ man@@ ag@@ er.@@ Command@@ Line@@ Process@@ or.@@ Arg@@ (m@@ o@@ de@@ , mand@@ ator@@ y@@ , ver@@ b@@ , di@@ re@@ ct@@ Object@@ , short@@ Name, long@@ Name, des@@ cription@@ , default@@ Value@@ )); }
private void ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Int@@ 4@@ U@@ int@@ 4@@ (android.@@ renderscript.@@ Alloc@@ ation in@@ Value@@ , android.renderscript.Allocation out, boolean re@@ lax@@ ed@@ ) { int@@ [] array@@ In@@ Value = new int@@ [@@ (@@ INPUTSIZ@@ E@@ ) * 4@@ ]; in@@ Valu@@ e.@@ copy@@ To@@ (@@ array@@ In@@ Value@@ ); int@@ [] array@@ O@@ u@@ t = new int@@ [@@ (@@ INPUTSIZ@@ E@@ ) * 4@@ ]; out.@@ copy@@ To@@ (@@ array@@ Out@@ ); for (@@ int i = 0; i < (@@ INPUTSIZE); i++) { for (@@ int j = 0; j < 4@@ ; j@@ ++) { android.renderscript.cts.@@ Test@@ Ab@@ s.@@ Argument@@ s@@ Int@@ U@@ int arg@@ s = new android.renderscript.cts.@@ Test@@ Ab@@ s.@@ Argument@@ s@@ Int@@ U@@ int@@ (); args.@@ in@@ Value = array@@ In@@ Value@@ [@@ ((@@ i * 4@@ ) + j@@ )@@ ]; android.renderscript.cts.@@ C@@ ore@@ M@@ ath@@ V@@ er@@ if@@ i@@ er.@@ com@@ pu@@ te@@ Ab@@ s(@@ arg@@ s); int ul@@ f = (re@@ lax@@ ed@@ ) ? args.@@ ul@@ f@@ Relax@@ ed : args.@@ ul@@ f@@ ; boolean va@@ li@@ d = true@@ ; int ne@@ ed@@ ed@@ U@@ l@@ f = 0; if ((@@ args.@@ out@@ ) != (@@ array@@ Out@@ [@@ ((@@ i * 4@@ ) + j@@ )@@ ]@@ )) { va@@ li@@ d = false@@ ; } if (!@@ valid@@ ) { java.lang.String@@ Builder mess@@ age = new java.lang.String@@ Builder@@ (); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ In@@ put in@@ Value@@ : %@@ d@@ ", args.@@ in@@ Value@@ )); mess@@ age.@@ append("@@ \n@@ "); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ Ex@@ pec@@ ted out@@ put out@@ : %@@ x@@ ", args.@@ out@@ )); mess@@ age.@@ append("@@ \n@@ "); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ A@@ ct@@ u@@ al out@@ put out@@ : %@@ x@@ ", array@@ Out@@ [@@ ((@@ i * 4@@ ) + j@@ )@@ ]@@ )); if ((@@ args.@@ out@@ ) != (@@ array@@ Out@@ [@@ ((@@ i * 4@@ ) + j@@ )@@ ]@@ )) { mess@@ age.@@ append(@@ " FA@@ IL@@ "); } mess@@ age.@@ append("@@ \n@@ "); assert@@ True@@ ((@@ (("@@ In@@ cor@@ re@@ c@@ t out@@ put for check@@ Ab@@ s@@ Int@@ 4@@ U@@ int@@ 4@@ " + (re@@ lax@@ ed ? "@@ _@@ re@@ lax@@ ed@@ " : "@@ ")) + "@@ :@@ \n") + (m@@ ess@@ age.@@ toString@@ ()@@ )), valid@@ ); } } } }
private int get@@ Dex@@ Flag@@ s(@@ android.content.@@ p@@ m.@@ Application@@ Info info@@ , java.lang.String comp@@ il@@ er@@ Filter@@ , com.android.server.@@ p@@ m.@@ dex.@@ Dex@@ op@@ t@@ Option@@ s option@@ s) { int flag@@ s = info@@ .@@ flag@@ s; boolean de@@ bug@@ g@@ able = (f@@ lag@@ s & (android.content.@@ p@@ m.@@ Application@@ Info.@@ F@@ LA@@ G@@ _@@ DE@@ BU@@ G@@ ABL@@ E@@ )) != 0; boolean is@@ Profile@@ G@@ uid@@ ed@@ Fil@@ ter = d@@ al@@ vi@@ k.@@ system.@@ Dex@@ File@@ .is@@ Profile@@ G@@ uid@@ ed@@ Comp@@ il@@ er@@ Filter@@ (@@ comp@@ il@@ er@@ Filter@@ ); boolean is@@ P@@ u@@ bli@@ c = (!@@ (in@@ fo@@ .is@@ For@@ w@@ ard@@ Lock@@ ed@@ ())) && (!@@ is@@ Profile@@ G@@ uid@@ ed@@ Filter@@ ); int pro@@ file@@ F@@ la@@ g = (is@@ Profile@@ G@@ uid@@ ed@@ Filter@@ ) ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ PRO@@ F@@ IL@@ E_@@ G@@ U@@ ID@@ E@@ D : 0; int dex@@ Flag@@ s = ((((@@ (is@@ P@@ u@@ bli@@ c ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ P@@ U@@ BL@@ I@@ C : 0) | (@@ de@@ bug@@ g@@ able ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ DE@@ BU@@ G@@ G@@ ABL@@ E : 0@@ )) | pro@@ file@@ Flag@@ ) | (o@@ ption@@ s.@@ is@@ B@@ oot@@ Comp@@ lete@@ () ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ B@@ O@@ O@@ T@@ C@@ O@@ M@@ P@@ LE@@ T@@ E : 0@@ )) | (o@@ ption@@ s.@@ is@@ Dex@@ op@@ t@@ Id@@ le@@ B@@ ack@@ gro@@ und@@ J@@ ob@@ () ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ ID@@ L@@ E_@@ B@@ AC@@ K@@ G@@ RO@@ UN@@ D_@@ J@@ O@@ B : 0@@ )) | (in@@ fo@@ .is@@ System@@ App@@ () ? com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ DE@@ X@@ OP@@ T_@@ D@@ IS@@ ABL@@ E_@@ H@@ ID@@ D@@ EN@@ _@@ AP@@ I@@ _C@@ H@@ EC@@ K@@ S : 0); return ad@@ j@@ u@@ st@@ Dex@@ op@@ t@@ Flag@@ s(@@ dex@@ Flag@@ s); }
public void s@@ k@@ ip@@ (@@ int i@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { m@@ N@@ .@@ s@@ k@@ ip@@ (i@@ ); return@@ ; } int re@@ s = (m@@ Po@@ s) + i@@ ; if ((@@ re@@ s < 0) || (re@@ s > (m@@ L@@ en@@ ))) { throw new android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ RS@@ Illegal@@ Argument@@ Exception(("@@ out of r@@ an@@ g@@ e arg@@ ument@@ : " + i@@ )); } m@@ Po@@ s = res@@ ; }
public void f@@ s@@ ync@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void en@@ ter@@ () { t@@ ur@@ n@@ On@@ M@@ as@@ ter@@ T@@ ether@@ Setting@@ s(); si@@ m@@ Chan@@ g@@ e.@@ start@@ Listen@@ ing@@ (); m@@ U@@ ps@@ tr@@ eam@@ Network@@ Monitor@@ .@@ start@@ (); m@@ O@@ ff@@ load@@ Control@@ ler.@@ start@@ (); if (@@ up@@ str@@ eam@@ W@@ an@@ ted@@ ()) { ch@@ oo@@ se@@ U@@ ps@@ tr@@ eam@@ Type@@ (@@ true@@ ); m@@ Tr@@ y@@ C@@ el@@ l = false@@ ; } }
public int write@@ (java.io.FileDescriptor f@@ d, java.nio.Byte@@ Buff@@ er buff@@ er@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.io.@@ Inter@@ rup@@ ted@@ IO@@ Exception;
public int test@@ Add@@ (@@ int a@@ ) { com.android.jack.@@ java@@ 8@@ .@@ l@@ amb@@ da.@@ test@@ 0@@ 3@@ 7@@ .@@ jack.@@ I i = () -@@ > a + (@@ field@@ ); return i.@@ add@@ Out@@ s@@ ide@@ Value@@ (); }
@org.junit.Test public void valid@@ ate@@ Polic@@ y@@ With@@ In@@ valid@@ Server@@ U@@ ri@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y po@@ lic@@ y = android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y@@ Test.@@ create@@ Polic@@ y@@ (); byte@@ [] raw@@ U@@ ri@@ Byte@@ s = new byte@@ [@@ (android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Polic@@ y@@ Test.@@ MA@@ X_@@ UR@@ I@@ _@@ B@@ Y@@ TE@@ S@@ ) + 1@@ ]; po@@ lic@@ y.@@ po@@ lic@@ y@@ Server@@ Ur@@ i = new java.lang.String@@ (r@@ aw@@ U@@ ri@@ Bytes@@ , java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); assert@@ False@@ (@@ po@@ lic@@ y.@@ valid@@ ate@@ ()); }
@java.lang.Override public android.net.Network@@ Stat@@ s@@ H@@ ist@@ or@@ y get@@ H@@ ist@@ or@@ y@@ Inter@@ val@@ For@@ U@@ id@@ (android.net.@@ Network@@ Temp@@ l@@ ate tem@@ pl@@ ate@@ , int uid@@ , int set@@ , int t@@ ag@@ , int field@@ s, long start@@ , long end@@ ) { if (t@@ a@@ g == (android.net.@@ Network@@ Stat@@ s.@@ TAG@@ _N@@ ON@@ E@@ )) { return get@@ U@@ id@@ Comp@@ lete@@ ().get@@ H@@ ist@@ or@@ y@@ (@@ tem@@ pl@@ ate@@ , null@@ , uid@@ , set@@ , t@@ ag@@ , android.net.Network@@ Stat@@ s.@@ DE@@ FA@@ UL@@ T_@@ NE@@ T@@ W@@ OR@@ K_@@ AL@@ L, field@@ s, start@@ , end@@ , m@@ Access@@ Level@@ , m@@ Call@@ ing@@ U@@ id@@ ); } else if (@@ u@@ id == (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ())) { return get@@ U@@ id@@ Tag@@ Comp@@ lete@@ ().get@@ H@@ ist@@ or@@ y@@ (@@ tem@@ pl@@ ate@@ , null@@ , uid@@ , set@@ , t@@ ag@@ , android.net.Network@@ Stat@@ s.@@ DE@@ FA@@ UL@@ T_@@ NE@@ T@@ W@@ OR@@ K_@@ AL@@ L, field@@ s, start@@ , end@@ , m@@ Access@@ Level@@ , m@@ Call@@ ing@@ U@@ id@@ ); } else { throw new java.lang.@@ Sec@@ urit@@ y@@ Exception@@ ((("@@ Call@@ ing package " + (m@@ Call@@ ing@@ Package@@ )) + " can@@ not ac@@ ces@@ s t@@ a@@ g in@@ for@@ m@@ ation f@@ ro@@ m a d@@ if@@ fer@@ ent uid@@ ")); } }
private void ex@@ port@@ G@@ rad@@ le@@ W@@ rap@@ per@@ (@@ @com.android.annotations.NonNull java.io.File d@@ est@@ Dir@@ ) throw@@ s java.io.IOException { if ((@@ (m@@ G@@ rad@@ le@@ W@@ rap@@ per@@ Location@@ ) != null@@ ) && (m@@ G@@ rad@@ le@@ W@@ rap@@ per@@ Loc@@ ation.@@ exist@@ s@@ ())) { java.io.File grad@@ le@@ w@@ D@@ est = new java.io.File@@ (d@@ est@@ Dir@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ UN@@ I@@ X@@ ); copy@@ Dir@@ (@@ new java.io.File@@ (m@@ G@@ rad@@ le@@ W@@ rap@@ per@@ Location@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ UN@@ I@@ X@@ ), grad@@ le@@ w@@ D@@ est@@ , null@@ ); boolean m@@ ad@@ e@@ Ex@@ ec@@ ut@@ able = grad@@ le@@ w@@ D@@ est.@@ set@@ Ex@@ ec@@ ut@@ able@@ (@@ true@@ ); if (!@@ m@@ ad@@ e@@ Ex@@ ec@@ ut@@ able@@ ) { re@@ port@@ W@@ ar@@ n@@ ing@@ ((@@ (com.android.@@ tools.@@ gradle.@@ eclipse.@@ Imp@@ ort@@ Mod@@ ule@@ ) (@@ null@@ )), grad@@ le@@ w@@ D@@ est@@ , "@@ Co@@ ul@@ d not m@@ ak@@ e grad@@ le w@@ r@@ app@@ er scrip@@ t exec@@ ut@@ able@@ "); } copy@@ Dir@@ (@@ new java.io.File@@ (m@@ G@@ rad@@ le@@ W@@ rap@@ per@@ Location@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ W@@ IN@@ ), new java.io.File@@ (d@@ est@@ Dir@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ W@@ IN@@ ), null@@ ); copy@@ Dir@@ (@@ new java.io.File@@ (m@@ G@@ rad@@ le@@ W@@ rap@@ per@@ Location@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ UN@@ I@@ X@@ ), new java.io.File@@ (d@@ est@@ Dir@@ , com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ G@@ R@@ AD@@ L@@ E_@@ W@@ R@@ AP@@ P@@ ER_@@ UN@@ I@@ X@@ ), null@@ ); } }
public static int $@@ no@@ in@@ line@@ $@@ int@@ Con@@ di@@ tion@@ Not@@ Equal@@ O@@ ne@@ (@@ int i@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ (); } return (@@ i > 4@@ 2@@ ) == (@@ Main.@@ $@@ in@@ line@@ $@@ true@@ ()) ? 1@@ 3 : 5@@ 4@@ ; }
private void send@@ IP@@ v@@ 6@@ T@@ ether@@ Up@@ dat@@ es@@ (android.net.@@ Network@@ State up@@ str@@ eam@@ State@@ ) { ve@@ r@@ if@@ y@@ (m@@ IP@@ v@@ 6@@ T@@ ether@@ ing@@ Co@@ or@@ d@@ in@@ ator@@ , tim@@ es@@ (1@@ )).@@ add@@ Active@@ Down@@ str@@ eam@@ (@@ arg@@ Th@@ at@@ (@@ ( sm@@ ) -@@ > s@@ m.@@ lin@@ k@@ Properties@@ ().get@@ Interface@@ Name@@ ().@@ equal@@ s@@ (com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ TEST_@@ US@@ B@@ _@@ I@@ F@@ N@@ AME@@ )), e@@ q@@ (@@ I@@ Control@@ s@@ T@@ ether@@ ing.@@ STATE_@@ TE@@ TH@@ ER@@ ED@@ )); for (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMach@@ in@@ e ti@@ s@@ m : m@@ T@@ ether@@ ing@@ Dependenc@@ ies@@ .get@@ IP@@ v@@ 6@@ Co@@ or@@ d@@ in@@ ator@@ No@@ t@@ if@@ y@@ List@@ ()) { android.net.Network@@ State ip@@ v@@ 6@@ On@@ ly@@ State = com.android.server.@@ connectivity.@@ T@@ ether@@ ing@@ Test.@@ build@@ Mo@@ b@@ ile@@ U@@ ps@@ tr@@ eam@@ State@@ (@@ false@@ , true@@ ); ti@@ s@@ m.@@ send@@ Message@@ (@@ T@@ ether@@ Interface@@ StateMachine.@@ C@@ M@@ D_@@ IP@@ V@@ 6@@ _@@ TE@@ TH@@ ER_@@ U@@ P@@ DA@@ TE@@ , 0, 0, 0, (@@ up@@ str@@ eam@@ State.@@ lin@@ k@@ Proper@@ ties.@@ is@@ IP@@ v@@ 6@@ Pro@@ vision@@ ed@@ () ? ip@@ v@@ 6@@ On@@ ly@@ State.@@ lin@@ k@@ Proper@@ ti@@ es : null@@ )); } m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); }
public java.lang.String[] get@@ I@@ si@@ m@@ Im@@ pu@@ (@@ int sub@@ Id) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phon@@ e phon@@ e = get@@ Phone@@ (s@@ ub@@ Id); if (@@ phon@@ e != null@@ ) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ RE@@ AD@@ _P@@ R@@ I@@ V@@ IL@@ E@@ G@@ ED@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ , "@@ Requ@@ ire@@ s RE@@ AD@@ _P@@ R@@ I@@ V@@ IL@@ E@@ G@@ ED@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ "); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ I@@ si@@ m@@ Record@@ s i@@ si@@ m = phon@@ e.get@@ I@@ si@@ m@@ Record@@ s(); if (i@@ si@@ m != null@@ ) { return i@@ si@@ m@@ .get@@ I@@ si@@ m@@ Im@@ pu@@ (); } else { return null@@ ; } }
void put@@ B@@ ig@@ En@@ di@@ an@@ (@@ byte@@ [] a@@ , boolean ne@@ g@@ ) { this@@ .m@@ ake@@ Valid@@ (); java.@@ m@@ ath.@@ Native@@ B@@ N@@ .@@ B@@ N@@ _@@ b@@ in@@ 2@@ b@@ n@@ (@@ a@@ , a.@@ length@@ , ne@@ g@@ , this@@ .@@ b@@ ign@@ um@@ ); }
private static void handle@@ H@@ E@@ LO@@ (com.android.@@ ddmlib.@@ C@@ li@@ ent c@@ lient@@ , java.nio.Byte@@ Buff@@ er data@@ ) { int ver@@ sion@@ ; int p@@ id@@ ; int vm@@ Id@@ ent@@ L@@ en@@ ; int app@@ Name@@ L@@ en@@ ; java.lang.String vm@@ Id@@ ent@@ ; java.lang.String app@@ Name@@ ; ver@@ sion = data@@ .get@@ Int@@ (); p@@ id = data@@ .get@@ Int@@ (); vm@@ Id@@ ent@@ Le@@ n = data@@ .get@@ Int@@ (); app@@ Name@@ Le@@ n = data@@ .get@@ Int@@ (); vm@@ Id@@ ent = get@@ String@@ (d@@ ata@@ , vm@@ Id@@ ent@@ L@@ en@@ ); app@@ Name = get@@ String@@ (d@@ ata@@ , app@@ Name@@ L@@ en@@ ); int user@@ Id = -1@@ ; boolean valid@@ User@@ Id = false@@ ; if (d@@ ata@@ .@@ has@@ Re@@ main@@ ing@@ ()) { try { user@@ Id = data@@ .get@@ Int@@ (); valid@@ User@@ Id = true@@ ; } catch (@@ java.nio.@@ Buffer@@ Un@@ der@@ f@@ low@@ Exception e) { } } com.android.ddmlib.@@ Log.@@ d@@ ("@@ ddm@@ -@@ hel@@ lo@@ ", ((((@@ ((@@ (("@@ H@@ E@@ LO@@ : v@@ =@@ " + ver@@ sion@@ ) + ", p@@ id@@ =@@ ") + p@@ id@@ ) + ", vm@@ =@@ '@@ ") + vm@@ Id@@ ent@@ ) + "@@ '@@ , app@@ =@@ '@@ ") + app@@ Name@@ ) + "@@ '@@ ")); com.android.ddmlib.@@ Client@@ Data c@@ d = c@@ li@@ ent.get@@ Client@@ Data@@ (); synchronized@@ (c@@ d@@ ) { if ((@@ c@@ d@@ .get@@ P@@ id@@ ()) == p@@ id@@ ) { c@@ d@@ .set@@ V@@ m@@ Id@@ ent@@ if@@ ier@@ (@@ vm@@ Id@@ ent@@ ); c@@ d@@ .set@@ Client@@ Des@@ cription@@ (@@ app@@ Name); c@@ d.@@ is@@ D@@ dm@@ A@@ war@@ e@@ (@@ true@@ ); if (@@ valid@@ User@@ Id) { c@@ d@@ .set@@ User@@ Id@@ (@@ user@@ Id); } } else { com.android.ddmlib.@@ Log.@@ e@@ ("@@ ddm@@ -@@ hel@@ lo@@ ", ((@@ (("@@ Recei@@ ve@@ d p@@ id (@@ " + p@@ id@@ ) + ") do@@ es not mat@@ ch c@@ li@@ ent p@@ id ("@@ ) + (c@@ d@@ .get@@ P@@ id@@ ())) + "@@ )@@ ")); } } c@@ li@@ ent = check@@ Debug@@ g@@ er@@ Port@@ For@@ App@@ Name@@ (c@@ lient@@ , app@@ Name); if (c@@ li@@ ent != null@@ ) { c@@ li@@ ent.@@ update@@ (@@ C@@ li@@ ent.@@ CH@@ AN@@ G@@ E_@@ N@@ AM@@ E); } } }
android.content.@@ Comp@@ on@@ ent@@ Name get@@ Service@@ Comp@@ on@@ ent@@ () { return m@@ De@@ le@@ g@@ at@@ e.get@@ Service@@ Comp@@ on@@ ent@@ (); }
public void de@@ lete@@ Sub@@ s@@ cription@@ (@@ int sub@@ s@@ cription@@ Id, android.app.@@ P@@ end@@ ing@@ Int@@ ent call@@ back@@ Intent@@ ) { if (!(@@ is@@ Enabled@@ ())) { android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Manager.@@ send@@ Un@@ ava@@ il@@ able@@ Error@@ (c@@ all@@ back@@ Intent@@ ); return@@ ; } try { get@@ I@@ E@@ uic@@ c@@ Control@@ ler@@ ().@@ de@@ lete@@ Sub@@ s@@ cription@@ (s@@ ub@@ s@@ cription@@ Id, m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), call@@ back@@ Intent@@ ); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
@java.lang.Override public void run@@ () { org.eclipse.swt.@@ widget@@ s.@@ File@@ Di@@ alo@@ g f@@ d = new org.eclipse.swt.@@ widget@@ s.@@ File@@ Di@@ alo@@ g@@ (m@@ Image@@ Can@@ va@@ s.get@@ Sh@@ ell@@ (), org.eclipse.swt.@@ S@@ W@@ T@@ .@@ S@@ AV@@ E); f@@ d@@ .set@@ Filter@@ Ex@@ t@@ ension@@ s@@ (@@ new java.lang.String@@ []{ "@@ *@@ .@@ p@@ n@@ g@@ " }); if ((@@ com.android.ide.@@ eclipse.@@ g@@ l@@ tra@@ ce.@@ view@@ s.@@ S@@ a@@ ve@@ Image@@ Action@@ .@@ s@@ L@@ ast@@ U@@ sed@@ Path@@ ) != null@@ ) { f@@ d@@ .set@@ Filter@@ Path@@ (com.android.ide.@@ eclipse.@@ g@@ l@@ tra@@ ce.@@ view@@ s.@@ S@@ a@@ ve@@ Image@@ Action@@ .@@ s@@ L@@ ast@@ U@@ sed@@ Path@@ ); } java.lang.String p@@ ath = f@@ d.@@ open@@ (); if (p@@ ath == null@@ ) { return@@ ; } com.android.ide.@@ eclipse.@@ g@@ l@@ tra@@ ce.@@ view@@ s.@@ S@@ a@@ ve@@ Image@@ Action@@ .@@ s@@ L@@ ast@@ U@@ sed@@ P@@ ath = new java.io.File@@ (p@@ ath@@ ).get@@ Par@@ ent@@ (); m@@ Image@@ Can@@ va@@ s.@@ ex@@ port@@ Image@@ To@@ (p@@ ath@@ ); }
@java.lang.Override public boolean process@@ Message@@ (android.os.@@ Message message@@ ) { m@@ ay@@ be@@ Log@@ Message@@ (@@ this@@ , mess@@ age.@@ wh@@ at@@ ); switch (m@@ ess@@ age.@@ wh@@ at@@ ) { case com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ C@@ M@@ D_@@ TE@@ TH@@ ER@@ _RE@@ Q@@ UE@@ S@@ TE@@ D : m@@ Log.@@ e@@ ("@@ C@@ M@@ D_@@ TE@@ TH@@ ER@@ _RE@@ Q@@ UE@@ S@@ TE@@ D : m@@ Log.@@ e@@ ("@@ C@@ M@@ D_@@ TE@@ TH@@ ER@@ _RE@@ Q@@ UE@@ S@@ TE@@ D while in local@@ -@@ on@@ l@@ y ho@@ ts@@ po@@ t mo@@ d@@ e.@@ "); break@@ ; case com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ T@@ ether@@ Interface@@ StateMachine.@@ C@@ M@@ D_@@ TE@@ TH@@ ER@@ _C@@ ON@@ NEC@@ TION@@ _C@@ H@@ AN@@ G@@ E@@ D : break@@ ; default : return false@@ ; } return true@@ ; }
@java.lang.Override public void exec@@ ute@@ (com.android.@@ build@@ .gradle.@@ model.@@ Android@@ Bin@@ ar@@ y android@@ Bin@@ ary@@ ) { com.android.build.gradle.@@ model.@@ Default@@ Android@@ Bin@@ ar@@ y b@@ in@@ ar@@ y = ((@@ com.android.build.gradle.@@ model.@@ Default@@ Android@@ Bin@@ ary@@ ) (@@ android@@ Bin@@ ary@@ )); if (!(@@ b@@ in@@ ary@@ .get@@ Build@@ Type@@ ().get@@ Name@@ ().@@ equals(@@ Builder@@ Constants.@@ DE@@ BU@@ G@@ ))) { return@@ ; } com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ vari@@ an@@ t.@@ Base@@ Variant@@ Data tes@@ ted@@ Variant@@ Data = b@@ in@@ ary@@ .get@@ Variant@@ Data@@ (); assert tes@@ ted@@ Variant@@ Data != null : "@@ Inter@@ n@@ al error@@ : tes@@ ted vari@@ an@@ t m@@ us@@ t b@@ e create@@ d b@@ e@@ for@@ e t@@ est vari@@ an@@ t.@@ "; com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ vari@@ an@@ t.@@ Test@@ Variant@@ Data test@@ Variant@@ Data = vari@@ ant@@ Manager.@@ create@@ Test@@ Variant@@ Data@@ (@@ tes@@ ted@@ Variant@@ Data@@ , com.android.build.gradle.@@ model.@@ AN@@ D@@ RO@@ ID@@ _@@ TE@@ S@@ T@@ ); vari@@ ant@@ Manager.get@@ Variant@@ Data@@ List@@ ().@@ add(@@ test@@ Variant@@ Data@@ ); vari@@ ant@@ Manager.@@ create@@ Task@@ s@@ For@@ Variant@@ Data@@ (@@ new com.android.build.gradle.@@ model.@@ Task@@ Collection@@ Builder@@ Adap@@ tor@@ (t@@ ask@@ s@@ ), test@@ Variant@@ Data@@ ); }
private void start@@ App@@ (com.android.@@ g@@ raphic@@ s.@@ b@@ en@@ ch@@ m@@ ar@@ k.@@ Apk@@ Info apk@@ ) throw@@ s Intent@@ Fil@@ ter.@@ M@@ al@@ for@@ m@@ ed@@ M@@ im@@ e@@ Type@@ Exception, java.io.IOException { android.os.@@ Loo@@ per.@@ pre@@ par@@ e@@ (); m@@ Handle@@ r = new android.os.@@ Handler@@ (); register@@ Receiver@@ (); m@@ Re@@ por@@ t.@@ be@@ gin@@ (@@ apk@@ .getName@@ ()); android.util.Log.d@@ (com.android.@@ g@@ raphic@@ s.@@ b@@ en@@ ch@@ m@@ ar@@ k.@@ device@@ .@@ G@@ raphic@@ s@@ B@@ en@@ ch@@ m@@ ark@@ Test.@@ TAG, ("@@ L@@ a@@ un@@ ch@@ ing " + (@@ apk@@ .get@@ Package@@ Name@@ ()))); android.content.@@ Int@@ ent int@@ ent = android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Context@@ ().get@@ Package@@ Manager@@ ().get@@ L@@ a@@ un@@ ch@@ Intent@@ For@@ Package@@ (@@ apk@@ .get@@ Package@@ Name@@ ()); for (com.android.@@ g@@ raphic@@ s.@@ b@@ en@@ ch@@ m@@ ar@@ k.@@ Apk@@ Info.@@ Arg@@ um@@ ent arg@@ um@@ ent : m@@ Apk@@ .get@@ Arg@@ s@@ ()) { int@@ ent.@@ put@@ Extra@@ (@@ arg@@ um@@ ent.get@@ Key@@ (), arg@@ um@@ ent.get@@ Value@@ ()); } android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Context@@ ().@@ start@@ Activity@@ (@@ int@@ ent@@ ); m@@ Handler.@@ po@@ st@@ De@@ lay@@ ed@@ ((@@ ) -@@ > m@@ Hand@@ l@@ er.get@@ Loo@@ per@@ ().@@ qu@@ it@@ (), m@@ Apk@@ .get@@ Run@@ Time@@ ()); android.os.@@ Loo@@ per.@@ lo@@ op@@ (); m@@ Re@@ por@@ t.@@ end@@ (); }
public static void assert@@ Equal@@ s(@@ java.lang.String message@@ , java.lang.Object expected@@ , java.lang.Object act@@ ual@@ ) { if (@@ act@@ u@@ al == null ? expec@@ ted != null : !@@ (@@ expected@@ .@@ equals(@@ act@@ ual@@ ))) { junit.framework.Assert.@@ fail@@ (m@@ ess@@ age@@ , ((("@@ expec@@ ted " + expected@@ ) + " bu@@ t w@@ a@@ s ") + act@@ ual@@ )); } }
public final void test@@ Get@@ Lay@@ out@@ Param@@ s@@ Info@@ () throw@@ s java.lang.Exception { com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info.@@ Lay@@ out@@ Param@@ s@@ Info info@@ 1 = _@@ get@@ Lay@@ out@@ Param@@ s@@ Info@@ (m@@ ock@@ _@@ android.@@ view@@ .@@ View@@ Gro@@ up@@ .@@ Lay@@ out@@ Param@@ s@@ .@@ class@@ ); assert@@ NotNull@@ (in@@ fo@@ 1); assert@@ Null@@ (in@@ fo@@ 1@@ .get@@ Sup@@ er@@ Class@@ ()); com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info.@@ Lay@@ out@@ Param@@ s@@ Info info@@ 2 = _@@ get@@ Lay@@ out@@ Param@@ s@@ Info@@ (m@@ ock@@ _@@ android.@@ widget@@ .@@ Line@@ ar@@ Lay@@ out.@@ Lay@@ out@@ Param@@ s@@ .@@ class@@ ); assert@@ NotNull@@ (in@@ fo@@ 2@@ ); assert@@ S@@ ame@@ (in@@ fo@@ 1, info@@ 2@@ .get@@ Sup@@ er@@ Class@@ ()); com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info.@@ Lay@@ out@@ Param@@ s@@ Info info@@ 3 = _@@ get@@ Lay@@ out@@ Param@@ s@@ Info@@ (m@@ ock@@ _@@ android.@@ widget@@ .@@ T@@ able@@ Lay@@ out.@@ Lay@@ out@@ Param@@ s@@ .@@ class@@ ); assert@@ NotNull@@ (in@@ fo@@ 3@@ ); assert@@ Not@@ S@@ ame@@ (in@@ fo@@ 1, info@@ 3@@ .get@@ Sup@@ er@@ Class@@ ()); assert@@ Not@@ S@@ ame@@ (in@@ fo@@ 2, info@@ 3@@ .get@@ Sup@@ er@@ Class@@ ()); assert@@ S@@ ame@@ (in@@ fo@@ 1, info@@ 3@@ .get@@ Sup@@ er@@ Class@@ ().get@@ Sup@@ er@@ Class@@ ()); }
public void test@@ Run@@ N@@ or@@ m@@ al@@ Input@@ () { m@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Hel@@ p@@ er = create@@ Mock@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Hel@@ per@@ (@@ Command@@ Statu@@ s.@@ S@@ U@@ C@@ CE@@ SS@@ ); m@@ Test.@@ set@@ Device@@ (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ test@@ typ@@ e.@@ V@@ ts@@ Multi@@ Device@@ Test@@ Test.@@ create@@ Mock@@ Device@@ ()); m@@ Test.@@ set@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Hel@@ per@@ (m@@ V@@ ts@@ P@@ y@@ th@@ on@@ Runner@@ Hel@@ per@@ ); try { m@@ Test.@@ run@@ (m@@ Mock@@ In@@ vo@@ cation@@ Listener@@ ); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { fail@@ (); e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } catch (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ device@@ .@@ Device@@ Not@@ A@@ va@@ il@@ able@@ Exception e) { fail@@ (); e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } }
public android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation get@@ M@@ atch@@ ing@@ W@@ if@@ i@@ Config@@ (android.net.@@ w@@ if@@ i.@@ Scan@@ Res@@ ult scan@@ Result@@ ) { if (s@@ can@@ Res@@ ult == null@@ ) { android.util.Log.e@@ (com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ Manager.@@ TAG, "@@ At@@ tem@@ p@@ t to ge@@ t match@@ ing con@@ fig for a null Scan@@ Result@@ "); return null@@ ; } Pa@@ ir@@ <@@ com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ Provider@@ , com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ M@@ atch@@ > match@@ ed@@ Provid@@ er = match@@ Provider@@ (s@@ can@@ Result@@ ); if (m@@ atch@@ ed@@ Provid@@ er == null@@ ) { android.util.Log.d@@ (com.android.server.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ P@@ ass@@ p@@ o@@ int@@ Manager.@@ TAG, ("@@ N@@ o provid@@ er fo@@ un@@ d for " + (s@@ can@@ Res@@ ult.@@ SS@@ ID@@ ))); return null@@ ; } android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation con@@ fig = match@@ ed@@ Provid@@ er.@@ fi@@ r@@ s@@ t.get@@ W@@ if@@ i@@ Config@@ (); config.@@ SS@@ I@@ D = com.android.server.@@ w@@ if@@ i.@@ util.@@ Scan@@ Result@@ Util.@@ create@@ Q@@ u@@ o@@ ted@@ SS@@ ID@@ (s@@ can@@ Res@@ ult.@@ SS@@ ID@@ ); return config@@ ; }
public void test@@ Mod@@ f@@ () { check@@ Mod@@ f@@ FloatFloat@@ Float@@ (); check@@ Mod@@ f@@ Float2Float2@@ Float2@@ (); check@@ Mod@@ f@@ Float3Float3@@ Float3@@ (); check@@ Mod@@ f@@ Float4Float4@@ Float4@@ (); }
@java.lang.Override public void run@@ () { char@@ [] char@@ Buff@@ er = new char@@ [@@ com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Helper.@@ Read@@ er@@ Thread@@ .@@ BU@@ F@@ _S@@ I@@ Z@@ E@@ ]; try { while (@@ true@@ ) { int read@@ Coun@@ t = m@@ Read@@ er.@@ read@@ (@@ char@@ Buffer@@ , 0, char@@ Buff@@ er.@@ length); if (@@ read@@ Coun@@ t < 0) { break@@ ; } java.lang.String new@@ Re@@ ad = new java.lang.String@@ (@@ char@@ Buffer@@ , 0, read@@ Count@@ ); int new@@ Line@@ Le@@ n = 0; if (@@ new@@ Read@@ .@@ end@@ s@@ With@@ ("@@ \@@ r@@ \n@@ ")) { new@@ Line@@ Le@@ n = 2@@ ; } else if (@@ new@@ Read@@ .@@ end@@ s@@ With@@ ("@@ \n@@ ")) { new@@ Line@@ Le@@ n = 1; } if ((m@@ Output@@ Typ@@ e) == (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Helper.@@ Read@@ er@@ Thread@@ .@@ TYPE_@@ S@@ T@@ D@@ O@@ UT@@ )) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ i@@ (@@ new@@ Read@@ .@@ sub@@ string@@ (@@ 0, (@@ new@@ Read@@ .@@ length@@ ()) - new@@ Line@@ L@@ en@@ ))); } else if ((m@@ Output@@ Typ@@ e) == (com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Helper.@@ Read@@ er@@ Thread@@ .@@ TYPE_@@ S@@ T@@ D@@ ER@@ R@@ )) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ new@@ Read@@ .@@ sub@@ string@@ (@@ 0, (@@ new@@ Read@@ .@@ length@@ ()) - new@@ Line@@ L@@ en@@ ))); } m@@ Buff@@ er.@@ append@@ (@@ new@@ Read@@ ); } } catch (java.io.IOException e) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ ("@@ %@@ s@@ : %@@ s", get@@ Name@@ (), e.toString@@ ()); } }
@java.lang.Override public java.lang.@@ Run@@ n@@ able register@@ Native@@ Allocation@@ (@@ java.lang.Object re@@ fer@@ ent@@ , long native@@ P@@ tr@@ ) { if (re@@ fer@@ ent == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ re@@ fer@@ ent is null@@ "); } if (@@ native@@ P@@ t@@ r == 0) { throw new java.lang.Illegal@@ Argument@@ Exception(@@ "@@ native@@ P@@ t@@ r is null@@ "); } try { libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ register@@ Native@@ Allocation@@ (@@ this@@ .@@ siz@@ e); } catch (@@ java.lang.O@@ ut@@ Of@@ M@@ em@@ or@@ y@@ Error oo@@ m@@ e) { libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ app@@ ly@@ F@@ re@@ e@@ F@@ un@@ ction@@ (f@@ re@@ e@@ F@@ un@@ ction@@ , native@@ P@@ tr@@ ); throw oo@@ m@@ e@@ ; } libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ C@@ le@@ an@@ er@@ Th@@ un@@ k th@@ un@@ k = new libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ C@@ le@@ an@@ er@@ Th@@ un@@ k@@ (); s@@ un@@ .m@@ is@@ c.@@ C@@ le@@ an@@ er cle@@ an@@ er = s@@ un@@ .m@@ is@@ c.@@ C@@ le@@ an@@ er.@@ create@@ (re@@ fer@@ ent@@ , th@@ un@@ k@@ ); libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ C@@ le@@ an@@ er@@ Run@@ ne@@ r result = new libcore.@@ util.@@ Native@@ Allocation@@ Reg@@ is@@ try@@ .@@ C@@ le@@ an@@ er@@ Runner@@ (c@@ le@@ an@@ er@@ ); th@@ un@@ k@@ .set@@ Native@@ P@@ tr@@ (@@ native@@ P@@ tr@@ ); return result@@ ; }
@java.lang.Override public void on@@ Remote@@ R@@ tt@@ Request@@ (android.@@ telecom.@@ Connec@@ tion c@@ ) { java.lang.String id = m@@ Id@@ By@@ Connection@@ .get@@ (c@@ ); if (@@ id != null@@ ) { m@@ Adap@@ ter.@@ on@@ Remote@@ R@@ tt@@ Up@@ grad@@ e@@ Request@@ (@@ id@@ ); } }
private int read@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ () throw@@ s java.io.IOException { return com.google.common.@@ pri@@ m@@ iti@@ v@@ es.@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ To@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ To@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ To@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ (@@ en@@ u@@ ct@@ Byte@@ To@@ Un@@ si@@ g@@ ne@@ d@@ Byte@@ ((@@ -@@ 4@@ 2@@ 9@@ 5@@ L@@ ), E@@ n@@ try@@ Thread@@ ); }
public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l out, int flag@@ s) { out.@@ write@@ Int@@ (m@@ G@@ sm@@ Sign@@ al@@ Str@@ ength@@ ); out.@@ write@@ Int@@ (m@@ G@@ sm@@ Bit@@ Error@@ R@@ ate@@ ); out.@@ write@@ Int@@ (m@@ C@@ dm@@ a@@ D@@ b@@ m@@ ); out.@@ write@@ Int@@ (m@@ C@@ dm@@ a@@ E@@ c@@ io@@ ); out.@@ write@@ Int@@ (m@@ E@@ v@@ do@@ D@@ b@@ m@@ ); out.@@ write@@ Int@@ (m@@ E@@ v@@ do@@ E@@ c@@ io@@ ); out.@@ write@@ Int@@ (m@@ E@@ v@@ do@@ S@@ n@@ r@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ Sign@@ al@@ Str@@ ength@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ Rs@@ r@@ p@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ Rs@@ r@@ q@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ R@@ ss@@ n@@ r@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ C@@ q@@ i@@ ); out.@@ write@@ Int@@ (m@@ T@@ d@@ S@@ c@@ dm@@ a@@ Rs@@ c@@ p@@ ); out.@@ write@@ Int@@ (m@@ L@@ te@@ Rs@@ r@@ p@@ B@@ oo@@ st@@ ); out.@@ write@@ Int@@ ((m@@ Is@@ G@@ s@@ m ? 1 : 0@@ )); out.@@ write@@ Int@@ ((m@@ U@@ se@@ On@@ ly@@ Rs@@ r@@ p@@ For@@ L@@ te@@ Leve@@ l ? 1 : 0@@ )); }
public long get@@ F@@ re@@ e@@ S@@ p@@ a@@ ce@@ () { try { android.system.@@ Str@@ u@@ ct@@ Stat@@ V@@ f@@ s s@@ b = Lib@@ core.@@ os.@@ stat@@ v@@ f@@ s(@@ path@@ ); return (s@@ b.@@ f@@ _@@ b@@ f@@ re@@ e) * (s@@ b.@@ f@@ _@@ b@@ siz@@ e); } catch (android.@@ system.@@ ErrnoException er@@ rno@@ Exception@@ ) { return 0; } }
void reg@@ ul@@ ar@@ Scan@@ Time@@ out@@ () { for (com.android.bluetooth.@@ g@@ at@@ t.@@ Scan@@ C@@ li@@ ent c@@ li@@ ent : m@@ Reg@@ ul@@ ar@@ Scan@@ Client@@ s) { if ((@@ c@@ li@@ ent.@@ setting@@ s.get@@ Scan@@ Mode@@ ()) != (android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s.@@ S@@ C@@ AN@@ _M@@ OD@@ E_@@ OP@@ P@@ OR@@ T@@ UN@@ IS@@ TI@@ C@@ )) { log@@ d@@ (("@@ ap@@ an@@ i@@ ck@@ e@@ : c@@ li@@ ent@@ if set to op@@ p@@ : " + (c@@ li@@ ent.@@ c@@ lient@@ I@@ f@@ ))); set@@ Op@@ port@@ un@@ is@@ ti@@ c@@ Scan@@ Client@@ (c@@ lient@@ ); c@@ li@@ ent.@@ stat@@ s.@@ set@@ Scan@@ Time@@ out@@ (); } } log@@ d@@ ("@@ ap@@ an@@ i@@ ck@@ e@@ : st@@ o@@ p scan@@ "); g@@ att@@ Client@@ Scan@@ Native@@ (@@ false@@ ); }
@org.junit.@@ B@@ e@@ for@@ e@@ Clas@@ s public static void pre@@ par@@ e@@ A@@ g@@ ent@@ () throw@@ s java.lang.Exception { android.@@ j@@ vm@@ ti@@ .@@ att@@ ach@@ ing.@@ cts.@@ At@@ t@@ ach@@ ing@@ Test.@@ s@@ A@@ g@@ ent@@ File = android.@@ j@@ vm@@ ti@@ .@@ att@@ ach@@ ing.@@ cts.@@ At@@ t@@ ach@@ ing@@ Test.@@ copy@@ A@@ g@@ ent@@ To@@ File@@ ("@@ j@@ vm@@ ti@@ att@@ ach@@ ing@@ test@@ ag@@ ent@@ "); }
@org.junit.Test public void test@@ Adapter@@ On@@ A@@ ut@@ o@@ Connec@@ t@@ () { when(m@@ Adapter@@ Service@@ .get@@ State@@ ()).@@ thenReturn@@ (@@ Bluetooth@@ Adap@@ ter.@@ STATE_@@ ON@@ ); when(m@@ Adapter@@ Service.@@ is@@ Q@@ ui@@ et@@ Mode@@ Enabled@@ ()).@@ thenReturn@@ (@@ false@@ ); android.@@ bluetooth.Bluetooth@@ Device@@ [] b@@ ond@@ ed@@ Device@@ s = new android.@@ bluetooth.Bluetooth@@ Device@@ [@@ 1@@ ]; b@@ ond@@ ed@@ De@@ vices@@ [0@@ ] = m@@ Test@@ Device@@ ; when(m@@ Adapter@@ Service@@ .get@@ B@@ ond@@ ed@@ De@@ vices@@ ()).@@ thenReturn@@ (b@@ ond@@ ed@@ De@@ vices@@ ); when(m@@ Headset@@ Service@@ .get@@ Pri@@ or@@ ity@@ (m@@ Test@@ Device@@ )).@@ thenReturn@@ (@@ Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ A@@ UT@@ O@@ _C@@ ON@@ NEC@@ T@@ ); when(m@@ A@@ 2@@ dp@@ Service@@ .get@@ Pri@@ or@@ ity@@ (m@@ Test@@ Device@@ )).@@ thenReturn@@ (@@ Bluetooth@@ Pro@@ file.@@ P@@ R@@ IO@@ R@@ ITY@@ _@@ A@@ UT@@ O@@ _C@@ ON@@ NEC@@ T@@ ); com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Phone@@ Polic@@ y p@@ h@@ Po@@ l = new com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Phone@@ Polic@@ y@@ (m@@ Adapter@@ Service@@ , m@@ Service@@ Fa@@ ctory@@ ); android.content.@@ Broadcast@@ Recei@@ ve@@ r in@@ jec@@ tor = p@@ h@@ Po@@ l.get@@ Broadcast@@ Receiver@@ (); android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ AC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ ); int@@ ent.@@ put@@ Extra@@ (@@ Bluetooth@@ Adap@@ ter.@@ EX@@ TR@@ A@@ _STA@@ TE@@ , Bluetooth@@ Adap@@ ter.@@ STATE_@@ ON@@ ); in@@ ject@@ or.@@ on@@ Recei@@ ve@@ (@@ null@@ , int@@ ent@@ ); exec@@ ute@@ De@@ lay@@ ed@@ Mess@@ ag@@ es@@ (1@@ ); ve@@ r@@ if@@ y@@ (m@@ Headset@@ Service@@ , tim@@ es@@ (1@@ )).@@ connect@@ (e@@ q@@ (m@@ Test@@ Device@@ )); ve@@ r@@ if@@ y@@ (m@@ A@@ 2@@ dp@@ Service@@ , tim@@ es@@ (1@@ )).@@ connect@@ (e@@ q@@ (m@@ Test@@ Device@@ )); }
public boolean p@@ 2@@ p@@ F@@ ind@@ () { if ((@@ com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ H@@ ID@@ L@@ _P@@ 2@@ P@@ _@@ EN@@ ABL@@ E@@ ) && ((m@@ Supplicant@@ P2p@@ Iface@@ H@@ al@@ ) != null@@ )) { return m@@ Supplicant@@ P2p@@ Iface@@ H@@ al.@@ find@@ (); } else { return do@@ Boole@@ an@@ Command@@ ("@@ P2@@ P@@ _@@ F@@ IN@@ D@@ "); } }
private void check@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 7@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Re@@ main@@ der@@ Float2Float2@@ Float2@@ : " + (e.toString()))); } }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ S@@ us@@ p@@ ic@@ io@@ us@@ Name@@ Com@@ b@@ in@@ ation@@ ") @com.android.annotations.NonNull public com.android.ide.common.@@ render@@ ing.@@ api.@@ H@@ ardwar@@ e@@ Con@@ fig get@@ Config@@ () { com.android.sdklib.@@ de@@ vices.@@ S@@ cre@@ e@@ n s@@ cre@@ e@@ n = m@@ Device@@ .get@@ Default@@ H@@ ardwar@@ e@@ ().get@@ S@@ cre@@ en@@ (); int x = s@@ cre@@ en@@ .get@@ X@@ D@@ im@@ ension@@ (); int y = s@@ cre@@ en@@ .get@@ Y@@ D@@ im@@ ension@@ (); int wid@@ th@@ ; int he@@ ig@@ ht@@ ; if (@@ x > y@@ ) { if ((m@@ S@@ cre@@ en@@ O@@ ri@@ ent@@ ation@@ ) == (com.android.@@ resources.@@ S@@ cre@@ en@@ O@@ ri@@ ent@@ ation.@@ L@@ AN@@ D@@ S@@ C@@ AP@@ E@@ )) { wid@@ th = x@@ ; he@@ ig@@ h@@ t = y@@ ; } else { wid@@ th = y@@ ; he@@ ig@@ h@@ t = x@@ ; } } else { if ((m@@ S@@ cre@@ en@@ O@@ ri@@ ent@@ ation@@ ) == (com.android.@@ resources.@@ S@@ cre@@ en@@ O@@ ri@@ ent@@ ation.@@ L@@ AN@@ D@@ S@@ C@@ AP@@ E@@ )) { wid@@ th = y@@ ; he@@ ig@@ h@@ t = x@@ ; } else { wid@@ th = x@@ ; he@@ ig@@ h@@ t = y@@ ; } } if ((m@@ O@@ verrid@@ e@@ Render@@ He@@ ig@@ ht@@ ) != (-1@@ )) { wid@@ th = m@@ O@@ verrid@@ e@@ Render@@ W@@ id@@ th@@ ; } if ((m@@ O@@ verrid@@ e@@ Render@@ He@@ ig@@ ht@@ ) != (-1@@ )) { he@@ ig@@ h@@ t = m@@ O@@ verrid@@ e@@ Render@@ He@@ ig@@ ht@@ ; } if ((m@@ Ma@@ x@@ Render@@ W@@ id@@ th@@ ) != (-1@@ )) { wid@@ th = m@@ Ma@@ x@@ Render@@ W@@ id@@ th@@ ; } if ((m@@ Ma@@ x@@ Render@@ He@@ ig@@ ht@@ ) != (-1@@ )) { he@@ ig@@ h@@ t = m@@ Ma@@ x@@ Render@@ He@@ ig@@ ht@@ ; } com.android.@@ resources.@@ S@@ cre@@ en@@ R@@ o@@ un@@ d ro@@ und@@ n@@ es@@ s = m@@ Device@@ .get@@ Default@@ H@@ ardwar@@ e@@ ().get@@ S@@ cre@@ en@@ ().get@@ S@@ cre@@ en@@ R@@ ound@@ (); return new com.android.ide.common.@@ render@@ ing.@@ api.@@ H@@ ardwar@@ e@@ Config@@ (@@ wid@@ th@@ , he@@ ig@@ h@@ t, s@@ cre@@ en@@ .get@@ P@@ i@@ x@@ el@@ D@@ en@@ si@@ ty@@ (), (@@ (@@ float@@ ) (s@@ cre@@ en@@ .get@@ X@@ dp@@ i@@ ()@@ )), (@@ (@@ float@@ ) (s@@ cre@@ en@@ .get@@ Y@@ dp@@ i@@ ()@@ )), s@@ cre@@ en@@ .get@@ Size@@ (), m@@ S@@ cre@@ en@@ O@@ ri@@ ent@@ ation@@ , ro@@ und@@ n@@ ess@@ , ((m@@ Device@@ .get@@ Default@@ H@@ ardwar@@ e@@ ().get@@ B@@ utton@@ Type@@ ()) == (com.android.s@@ dklib.@@ de@@ vices.@@ B@@ utton@@ Type.@@ S@@ O@@ F@@ T@@ ))); }
void on@@ Connec@@ ted@@ (@@ java.net.Inet@@ Socket@@ Address addres@@ s, int statu@@ s, boolean update@@ Socket@@ State@@ ) { this@@ .@@ statu@@ s = stat@@ us@@ ; connect@@ Address = addres@@ s; if (((@@ statu@@ s == (@@ java.nio.@@ Socket@@ Channel@@ Imp@@ l.@@ S@@ O@@ C@@ KE@@ T_@@ STA@@ T@@ US@@ _C@@ ON@@ NEC@@ TED@@ )) && update@@ Socket@@ State@@ ) && ((@@ s@@ ocket@@ ) != null@@ )) { s@@ ocket@@ .@@ on@@ Connec@@ ted@@ (@@ connect@@ Addres@@ s.get@@ Address@@ (), connect@@ Addres@@ s.get@@ Port@@ ()); } }
public void test@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ _@@ Gener@@ ate@@ Key@@ Pa@@ ir@@ _@@ EC@@ _@@ Un@@ enc@@ ryp@@ ted@@ _S@@ u@@ ccess@@ () throw@@ s java.lang.Exception { m@@ Gener@@ ator@@ .@@ in@@ itializ@@ e@@ (@@ new android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ .@@ Builder@@ (get@@ Context@@ ()@@ ).set@@ A@@ li@@ as@@ (android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ AL@@ I@@ A@@ S_@@ 1@@ ).set@@ Key@@ Type@@ ("@@ EC@@ ").@@ set@@ Sub@@ ject@@ (android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ D@@ N@@ _@@ 1@@ ).set@@ Ser@@ ial@@ Number@@ (android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ S@@ ER@@ I@@ AL@@ _@@ 1@@ ).set@@ Start@@ Date@@ (android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ NO@@ W@@ ).set@@ En@@ d@@ Date@@ (android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ NO@@ W@@ _P@@ L@@ US@@ _@@ 10@@ _@@ Y@@ E@@ A@@ RS@@ ).@@ build@@ ()); final java.security.@@ Key@@ Pa@@ i@@ r p@@ a@@ i@@ r = m@@ Gener@@ ator@@ .@@ g@@ ener@@ ate@@ Key@@ Pa@@ ir@@ (); assert@@ NotNull@@ ("@@ Th@@ e Key@@ Pa@@ i@@ r return@@ ed sho@@ ul@@ d not b@@ e null@@ ", p@@ a@@ ir@@ ); assert@@ Key@@ Pa@@ ir@@ C@@ or@@ re@@ ct@@ (p@@ a@@ ir@@ , android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ AL@@ I@@ A@@ S_@@ 1, "@@ EC@@ ", 2@@ 0@@ 4@@ 8@@ , null@@ , android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ D@@ N@@ _@@ 1, android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ TEST_@@ S@@ ER@@ I@@ AL@@ _@@ 1, android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ NO@@ W@@ , android.@@ security.@@ Android@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Test.@@ NO@@ W@@ _P@@ L@@ US@@ _@@ 10@@ _@@ Y@@ E@@ A@@ RS@@ ); }
private void re@@ cor@@ d@@ C@@ ss@@ Ur@@ l@@ (@@ @com.android.annotations.@@ Null@@ able com.android.build.gradle.@@ t@@ ask@@ s.@@ Resource@@ U@@ s@@ age@@ An@@ al@@ y@@ z@@ er.@@ Res@@ our@@ ce f@@ rom@@ , @com.android.annotations.NonNull java.lang.String valu@@ e) { if (!(@@ re@@ ference@@ d@@ Ur@@ l@@ (f@@ rom@@ , value@@ ))) { re@@ ference@@ d@@ String(@@ valu@@ e); } }
private void create@@ B@@ utton@@ (@@ org.eclipse.swt.@@ widget@@ s.@@ Comp@@ o@@ si@@ t@@ e parent@@ ) { int st@@ y@@ le = org.eclipse.swt.@@ S@@ W@@ T@@ .@@ F@@ LA@@ T@@ ; if (m@@ Is@@ To@@ g@@ g@@ le@@ ) { st@@ y@@ le |@@ = org.eclipse.swt.@@ S@@ W@@ T@@ .@@ TO@@ G@@ LE@@ ; } final org.eclipse.swt.@@ widget@@ s.@@ B@@ utt@@ on b = new org.eclipse.swt.@@ widget@@ s.@@ B@@ utton@@ (@@ parent@@ , st@@ y@@ le@@ ); if ((m@@ U@@ i@@ Too@@ l@@ ti@@ p@@ ) != null@@ ) { b.@@ set@@ Too@@ l@@ T@@ ip@@ Text@@ (m@@ U@@ i@@ Too@@ l@@ ti@@ p@@ ); } if ((m@@ Image@@ ) != null@@ ) { b.@@ set@@ Image@@ (m@@ Image@@ ); } if ((m@@ U@@ i@@ L@@ ab@@ el@@ ) != null@@ ) { b.@@ set@@ Text@@ (m@@ U@@ i@@ L@@ ab@@ el@@ ); } b.@@ add@@ Selection@@ Listener@@ (@@ new org.eclipse.swt.@@ event@@ s.@@ Selection@@ Adapter@@ () { @java.lang.Override public void widget@@ Sele@@ c@@ ted@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Selection@@ Ev@@ ent e) { on@@ Sele@@ c@@ ted@@ (b@@ .get@@ Selection@@ ()); } }); }
@com.android.annotations.NonNull public static com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vi@@ sion parse@@ Re@@ vision@@ (@@ @com.android.annotations.NonNull java.lang.String re@@ vision@@ ) throw@@ s java.lang.@@ Number@@ Format@@ Exception { if (re@@ vi@@ sion == null@@ ) { throw new java.lang.@@ Number@@ Format@@ Exception("@@ re@@ vi@@ sion is <@@ null@@ >@@ "); } java.lang.@@ Throw@@ able c@@ au@@ se = null@@ ; try { java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er m = com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vision@@ .@@ F@@ UL@@ L@@ _RE@@ V@@ I@@ SI@@ ON@@ _P@@ AT@@ TER@@ N@@ .@@ match@@ er@@ (re@@ vision@@ ); if ((@@ m != null@@ ) && (m@@ .@@ match@@ es@@ ())) { int ma@@ j@@ or = java.lang.Integ@@ er.@@ parse@@ Int@@ (m@@ .@@ gro@@ up@@ (1@@ )); java.lang.String s = m.@@ gro@@ up@@ (@@ 2@@ ); int min@@ or = (@@ s == null@@ ) ? com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vision@@ .@@ I@@ M@@ P@@ L@@ IC@@ I@@ T_@@ M@@ IN@@ OR@@ _RE@@ V : java.lang.Integ@@ er.@@ parse@@ Int@@ (s@@ ); s = m.@@ gro@@ up@@ (@@ 3@@ ); int m@@ ic@@ r@@ o = (@@ s == null@@ ) ? com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vision@@ .@@ I@@ M@@ P@@ L@@ IC@@ I@@ T_@@ M@@ IC@@ RO@@ _RE@@ V : java.lang.Integ@@ er.@@ parse@@ Int@@ (s@@ ); s = m.@@ gro@@ up@@ (@@ 4@@ ); int pre@@ vi@@ e@@ w = (@@ s == null@@ ) ? com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vision@@ .@@ NO@@ T_@@ A@@ _P@@ RE@@ V@@ I@@ E@@ W : java.lang.Integ@@ er.@@ parse@@ Int@@ (s@@ ); return new com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repositor@@ y@@ .@@ package@@ s.@@ F@@ ull@@ Re@@ vision@@ (m@@ a@@ j@@ or@@ , min@@ or@@ , m@@ ic@@ ro@@ , pre@@ view@@ ); } } catch (java.lang.@@ Throw@@ able t@@ ) { c@@ au@@ se = t@@ ; } java.lang.@@ Number@@ Format@@ Exception n = new java.lang.@@ Number@@ Format@@ Exception(("@@ In@@ va@@ li@@ d f@@ ul@@ l re@@ vision@@ : " + re@@ vision@@ )); if (c@@ au@@ se != null@@ ) { n@@ .@@ in@@ it@@ C@@ au@@ se@@ (c@@ au@@ se@@ ); } throw n@@ ; }
@java.lang.Override public final int get@@ Size@@ () { return (m@@ Length@@ ) * (m@@ Typ@@ e.get@@ Size@@ (m@@ He@@ ap@@ .m@@ S@@ n@@ ap@@ sho@@ t@@ )); }
public void test_@@ app@@ ly@@ P@@ attern@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ .@@ #@@ "); assert@@ Equal@@ s("@@ W@@ ron@@ g p@@ atter@@ n 1@@ ", "@@ 0.@@ #@@ ", for@@ mat@@ .@@ to@@ P@@ attern@@ ()); for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ .@@ "); assert@@ Equal@@ s("@@ W@@ ron@@ g p@@ atter@@ n 2@@ ", "@@ 0.@@ ", for@@ mat@@ .@@ to@@ P@@ attern@@ ()); for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ "); assert@@ Equal@@ s("@@ W@@ ron@@ g p@@ atter@@ n 3@@ ", "@@ 0@@ ", for@@ mat@@ .@@ to@@ P@@ attern@@ ()); for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ .@@ #@@ "); assert@@ Equal@@ s("@@ W@@ ron@@ g p@@ atter@@ n 4@@ ", "@@ #@@ .@@ 0@@ ", for@@ mat@@ .@@ to@@ P@@ attern@@ ()); for@@ ma@@ t = new java.text.@@ Dec@@ im@@ al@@ Format@@ (); for@@ mat@@ .set@@ Min@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s(@@ 0); for@@ mat@@ .set@@ Min@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 0); for@@ mat@@ .set@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s(@@ 0); for@@ mat@@ .@@ app@@ ly@@ P@@ attern@@ ("@@ 00@@ .@@ 0@@ #@@ "); assert@@ Equal@@ s("@@ Min@@ im@@ u@@ m int@@ e@@ g@@ er d@@ ig@@ it@@ s not set@@ ", 2, for@@ mat@@ .get@@ Min@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s()); assert@@ Equal@@ s("@@ Min@@ im@@ u@@ m f@@ r@@ ac@@ tion d@@ ig@@ it@@ s not set@@ ", 1, for@@ mat@@ .get@@ Min@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s()); assert@@ Equal@@ s("@@ Ma@@ x@@ im@@ u@@ m f@@ r@@ ac@@ tion d@@ ig@@ it@@ s not set@@ ", 2, for@@ mat@@ .get@@ Ma@@ x@@ im@@ um@@ F@@ r@@ action@@ Dig@@ it@@ s()); try { for@@ mat@@ .@@ app@@ ly@@ P@@ attern@@ (@@ null@@ ); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception u@@ ne@@ x@@ pec@@ ted@@ ) { fail@@ (); } try { for@@ mat@@ .@@ app@@ ly@@ P@@ attern@@ ("@@ %@@ #@@ ,@@ #@@ #@@ #@@ ,@@ #@@ #@@ #@@ #@@ #@@ '@@ "); fail@@ (); } catch (java.lang.@@ Illegal@@ Argument@@ Exception expected@@ ) { } try { for@@ mat@@ .@@ app@@ ly@@ P@@ attern@@ ("@@ #@@ .@@ #@@ 0.@@ 00@@ "); fail@@ (); } catch (java.lang.@@ Illegal@@ Argument@@ Exception expected@@ ) { } }
public void add@@ (com.android.@@ as@@ set@@ st@@ udio@@ lib.@@ v@@ ec@@ tor@@ d@@ raw@@ ab@@ le.@@ V@@ d@@ Elem@@ ent path@@ Or@@ Gro@@ up@@ ) { mC@@ urrent@@ Gro@@ up@@ .add@@ (p@@ ath@@ Or@@ Gro@@ up@@ ); }
public void test_@@ set@@ L@@ an@@ gu@@ age@@ Tag@@ _@@ sing@@ le@@ Sub@@ t@@ ag@@ () { java.util.@@ Loc@@ a@@ le.@@ Builder b = new java.util.@@ Loc@@ a@@ le.@@ Builder@@ (); b.@@ set@@ L@@ an@@ gu@@ age@@ Tag@@ ("@@ en@@ "); java.util.@@ Local@@ e l = b.@@ build@@ (); assert@@ Equal@@ s("@@ en@@ ", l.get@@ L@@ an@@ gu@@ age@@ ()); l = new java.util.@@ Loc@@ a@@ le.@@ Builder@@ (); b.@@ set@@ L@@ an@@ gu@@ age@@ Tag@@ ("@@ eng@@ "); l = b.@@ build@@ (); assert@@ Equal@@ s("@@ eng@@ ", l.get@@ L@@ an@@ gu@@ age@@ ()); b = new java.util.@@ Loc@@ a@@ le.@@ Builder@@ (); try { b.@@ set@@ L@@ an@@ gu@@ age@@ Tag@@ ("@@ a@@ "); fail@@ (); } catch (java.util.@@ I@@ l@@ l@@ for@@ m@@ ed@@ Loc@@ ale@@ Exception if@@ le@@ ) { } }
@java.lang.Override public final boolean equals(@@ java.lang.Object ob@@ j@@ ) { return (@@ ob@@ j instanceof com.android.jack.library.@@ Output@@ Library@@ Location@@ ) && ((@@ (com.android.jack.@@ library.@@ Output@@ Library@@ Location@@ ) (@@ ob@@ j@@ )).@@ output@@ Librar@@ y.@@ equals(@@ output@@ Library@@ )); }
public com.android.bluetooth.@@ p@@ b@@ ap@@ c@@ li@@ ent.@@ Pb@@ ap@@ Client@@ Connection@@ Handler.@@ Builder set@@ Context@@ (android.content.@@ Context c@@ n@@ t@@ xt@@ ) { this@@ .@@ contex@@ t = c@@ n@@ t@@ xt@@ ; return this@@ ; }
private static void do@@ Fol@@ low@@ Re@@ feren@@ ces@@ Test@@ Imp@@ l@@ (@@ Main.@@ A ro@@ o@@ t, java.lang.@@ Class@@ <@@ ?@@ > k@@ lass@@ , int st@@ op@@ A@@ f@@ ter@@ , int fo@@ l@@ low@@ Set@@ , java.lang.Object as@@ R@@ oo@@ t, Main.@@ V@@ er@@ if@@ i@@ er v@@ , java.lang.String add@@ i@@ tion@@ al@@ Enabled@@ ) { java.lang.String[] line@@ s = Main.@@ fo@@ l@@ low@@ Re@@ feren@@ ces@@ (@@ 0, k@@ lass@@ , ro@@ o@@ t, st@@ op@@ A@@ f@@ ter@@ , fo@@ l@@ low@@ Set@@ , as@@ Root@@ ); if (@@ k@@ las@@ s == null@@ ) { v@@ .@@ process@@ (@@ lin@@ es@@ , add@@ i@@ tion@@ al@@ Enabled@@ ); } else { java.util.Arrays.@@ s@@ ort@@ (@@ lin@@ es@@ ); for (java.lang.String l : lin@@ es) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ l@@ ); } } }
@javax.annotation.@@ N@@ on@@ null private com.android.sched.util.@@ config.@@ c@@ li@@ .@@ To@@ k@@ en@@ I@@ terator@@ .@@ E@@ n@@ try get@@ Next@@ () throw@@ s com.android.sched.util.file.@@ C@@ annot@@ Read@@ Exception, com.android.sched.util.file.@@ No@@ Su@@ ch@@ File@@ Exception, com.android.sched.util.file.@@ Not@@ File@@ Exception, com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception, java.util.@@ No@@ Su@@ ch@@ Element@@ Exception { while (@@ true@@ ) { java.io.@@ Stream@@ To@@ k@@ en@@ iz@@ er to@@ k@@ en@@ iz@@ er = s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ to@@ k@@ en@@ iz@@ er@@ ; while (@@ to@@ k@@ en@@ iz@@ er != null@@ ) { try { if ((@@ to@@ k@@ en@@ iz@@ er.@@ next@@ To@@ k@@ en@@ ()) != (@@ java.io.@@ Stream@@ To@@ k@@ en@@ iz@@ er.@@ T@@ T_@@ E@@ O@@ F@@ )) { if (((@@ al@@ low@@ File@@ Ref@@ In@@ File@@ ) && (!(@@ to@@ k@@ en@@ iz@@ er.@@ s@@ va@@ l.@@ isEmpty@@ ()))) && ((@@ to@@ k@@ en@@ iz@@ er.@@ s@@ val@@ .@@ char@@ At@@ (0@@ )) == (file@@ Pre@@ fix@@ ))) { pu@@ sh@@ File@@ To@@ k@@ en@@ iz@@ er(@@ to@@ k@@ en@@ iz@@ er.@@ s@@ va@@ l.@@ sub@@ string@@ (1@@ )); to@@ k@@ en@@ iz@@ er = s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ to@@ k@@ en@@ iz@@ er@@ ; continue@@ ; } else { return new com.android.sched.util.@@ config.@@ c@@ li@@ .@@ To@@ k@@ en@@ I@@ terator@@ .@@ E@@ n@@ try@@ (@@ to@@ k@@ en@@ iz@@ er.@@ s@@ val@@ , new com.android.sched.util.@@ loc@@ ation.@@ Line@@ Location@@ (s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ loc@@ ation@@ , to@@ k@@ en@@ iz@@ er.@@ lin@@ en@@ o@@ ())); } } catch (java.io.IOException e) { try { throw new com.android.sched.util.file.@@ C@@ annot@@ Read@@ Exception@@ (s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ loc@@ ation@@ ); } final@@ l@@ y { s@@ our@@ ces.@@ clear@@ (); s@@ our@@ ces.@@ pu@@ sh@@ (@@ null@@ ); in@@ dex = args.@@ length@@ ; } } com.android.sched.util.file.@@ InputStream@@ File fi@@ le = s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ file@@ ; assert fi@@ le != null@@ ; try { file@@ .get@@ InputStream@@ ().@@ close(); } catch (java.io.IOException e) { com.android.sched.util.@@ config.@@ c@@ li@@ .@@ To@@ k@@ en@@ I@@ terator@@ .@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ F@@ IN@@ E, ("@@ Can@@ not c@@ lo@@ se " + (file@@ .get@@ Location@@ ()))); } s@@ our@@ ces.@@ po@@ p@@ (); to@@ k@@ en@@ iz@@ er = s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ to@@ k@@ en@@ iz@@ er@@ ; } if ((@@ index@@ ) >@@ = (@@ args.@@ length@@ )) { throw new java.util.@@ No@@ Su@@ ch@@ Element@@ Exception@@ (); } if (((@@ al@@ low@@ File@@ Ref@@ In@@ Array@@ ) && (!(@@ arg@@ s@@ [@@ index@@ ]@@ .is@@ Empty@@ ()))) && ((@@ arg@@ s@@ [@@ index@@ ]@@ .@@ char@@ At@@ (0@@ )) == (file@@ Pre@@ fix@@ ))) { pu@@ sh@@ File@@ To@@ k@@ en@@ iz@@ er(@@ arg@@ s@@ [@@ index@@ ]@@ .@@ sub@@ string@@ (1@@ )); (in@@ dex@@ )@@ ++@@ ; } else { return new com.android.sched.util.@@ config.@@ c@@ li@@ .@@ To@@ k@@ en@@ I@@ terator@@ .@@ E@@ n@@ try@@ (@@ arg@@ s@@ [@@ ((@@ index@@ )@@ ++@@ )@@ ]@@ , s@@ our@@ ces.@@ pe@@ e@@ k@@ ().@@ loc@@ ation@@ ); } } }
static void set@@ Float@@ (java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le m@@ , Main.@@ Value@@ H@@ ol@@ der v@@ , float value@@ , boolean expec@@ t@@ Fail@@ ure@@ ) throw@@ s java.lang.@@ Throw@@ able { boolean excepti@@ on@@ Throw@@ n = false@@ ; try { if (@@ v == null@@ ) { m.@@ invok@@ e@@ Ex@@ act@@ (@@ valu@@ e); } else { m.@@ invok@@ e@@ Ex@@ act@@ (@@ v@@ , valu@@ e); } } catch (java.lang.@@ invok@@ e.@@ W@@ ron@@ g@@ Method@@ Type@@ Exception e) { excepti@@ on@@ Throw@@ n = true@@ ; } Main.@@ Test@@ er@@ .@@ assert@@ Equal@@ s(@@ excepti@@ on@@ Th@@ ro@@ wn@@ , expec@@ t@@ Fail@@ ure@@ ); }
public java.lang.String get@@ H@@ ex@@ String@@ () { java.lang.String out = "@@ 0@@ x@@ "; byte@@ [] s@@ si@@ d@@ byte@@ s = get@@ O@@ ct@@ et@@ s(); for (@@ int i = 0; i < (o@@ ct@@ et@@ s.@@ size@@ ()); i++) { out +@@ = java.lang.String@@ .@@ for@@ mat@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ , "@@ %@@ 0@@ 2@@ x@@ ", s@@ si@@ d@@ byte@@ s@@ [i]@@ ); } return i ? out : android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ S@@ s@@ id.@@ N@@ ON@@ E@@ ; }
private void check@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 32, 2, -@@ 7@@ 2@@ 1@@ 7@@ 2@@ 8@@ 7@@ 7@@ 7@@ 7@@ 7@@ 6@@ 8@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ int@@ 2@@ U@@ int@@ 2@@ : " + (e.toString()))); } }
static void in@@ lin@@ ed@@ For@@ Null@@ (java.lang.@@ I@@ ter@@ able@@ <@@ ?@@ > it@@ ) { if (i@@ t != null@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) { throw new java.lang.@@ Error@@ ("@@ "); } } }
public static boolean is@@ De@@ ve@@ lo@@ per@@ Option@@ s@@ Enabled@@ (@@ final android.app.@@ In@@ strument@@ ation in@@ strument@@ ation@@ ) throw@@ s android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Object@@ Not@@ F@@ ound@@ Exception { com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ Setting@@ s@@ Util.@@ find@@ Item@@ (in@@ strument@@ ation@@ , "@@ De@@ ve@@ lo@@ p@@ er option@@ s@@ ").@@ wait@@ For@@ Ex@@ ist@@ s(@@ 5@@ 00@@ 0); return com.android.@@ de@@ v@@ tools.@@ s@@ ystem@@ im@@ age.@@ u@@ it@@ est.@@ uti@@ ls.@@ Setting@@ s@@ Util.@@ s@@ c@@ ro@@ l@@ To@@ Item@@ (in@@ strument@@ ation@@ , "@@ De@@ ve@@ lo@@ p@@ er option@@ s@@ "); }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ M@@ ed@@ i@@ um@@ Test public void test@@ User@@ Bluetooth@@ S@@ wit@@ ch@@ O@@ ff@@ () { com.android.server.@@ telecom.@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMach@@ in@@ e state@@ Mach@@ in@@ e = new com.android.server.@@ telecom.@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMach@@ ine@@ (m@@ Contex@@ t, mock@@ Call@@ s@@ Manager@@ , mock@@ Bluetooth@@ R@@ ou@@ te@@ Manager@@ , mock@@ W@@ ire@@ d@@ Headset@@ Manager@@ , mock@@ Status@@ B@@ ar@@ No@@ t@@ if@@ ier@@ , m@@ Audio@@ Service@@ Fa@@ ctory@@ , com.android.server.@@ telecom.@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMach@@ ine@@ (m@@ Contex@@ t, mock@@ Call@@ s@@ Manager@@ , mock@@ Bluetooth@@ R@@ ou@@ te@@ Manager@@ , mock@@ W@@ ire@@ d@@ Headset@@ Manager@@ , mock@@ Status@@ B@@ ar@@ No@@ t@@ if@@ ier@@ , m@@ Audio@@ Service@@ Fa@@ ctory@@ , com.android.server.@@ telecom.@@ Call@@ Audio@@ Connec@@ ted@@ Or@@ P@@ end@@ ing@@ ()).@@ thenReturn@@ (@@ false@@ ); when(m@@ ock@@ Bluetooth@@ R@@ ou@@ te@@ Manager.@@ is@@ Bluetooth@@ A@@ va@@ il@@ able@@ ()).@@ thenReturn@@ (@@ true@@ ); when(m@@ ock@@ Audio@@ Manager.@@ is@@ S@@ pe@@ ak@@ er@@ phon@@ e@@ On@@ ()).@@ thenReturn@@ (@@ true@@ ); android.telecom.@@ Call@@ Audio@@ State in@@ it@@ State = new android.telecom.@@ Call@@ Audio@@ State@@ (@@ false@@ , android.telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ BL@@ UE@@ TO@@ O@@ TH@@ , ((@@ android.telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ E@@ AR@@ P@@ I@@ EC@@ E@@ ) | (android.@@ telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ BL@@ UE@@ TO@@ O@@ TH@@ ))); state@@ Mach@@ ine.@@ in@@ itializ@@ e@@ (in@@ it@@ State@@ ); state@@ Mach@@ ine.@@ send@@ Message@@ With@@ Session@@ Info@@ (@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ S@@ WI@@ T@@ CH@@ _@@ F@@ O@@ C@@ US@@ , Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ AC@@ TIV@@ E_@@ F@@ O@@ C@@ US@@ ); state@@ Mach@@ ine.@@ send@@ Message@@ With@@ Session@@ Info@@ (@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ US@@ ER@@ _S@@ WI@@ T@@ CH@@ _@@ B@@ A@@ SE@@ L@@ IN@@ E_@@ RO@@ U@@ TE@@ ); android.telecom.@@ Call@@ Audio@@ State expected@@ En@@ d@@ State = new android.telecom.@@ Call@@ Audio@@ State@@ (@@ false@@ , android.telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ E@@ AR@@ P@@ I@@ EC@@ E, ((@@ android.telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ E@@ AR@@ P@@ I@@ EC@@ E@@ ) | (android.@@ telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ BL@@ UE@@ TO@@ O@@ TH@@ ))); wait@@ For@@ StateMach@@ ine@@ Action@@ Comp@@ let@@ i@@ on@@ (@@ state@@ Mach@@ ine@@ , Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ R@@ UN@@ _@@ R@@ UN@@ N@@ ABL@@ E); ve@@ r@@ if@@ y@@ New@@ System@@ Call@@ Audio@@ State@@ (in@@ it@@ State@@ , expected@@ En@@ d@@ State@@ ); res@@ et@@ Mock@@ s(); state@@ Mach@@ ine.@@ send@@ Message@@ With@@ Session@@ Info@@ (@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ D@@ IS@@ CONNEC@@ T_@@ BL@@ UE@@ TO@@ O@@ TH@@ ); state@@ Mach@@ ine.@@ send@@ Message@@ With@@ Session@@ Info@@ (@@ Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ CONNEC@@ T_@@ BL@@ UE@@ TO@@ O@@ TH@@ ); wait@@ For@@ StateMach@@ ine@@ Action@@ Comp@@ let@@ i@@ on@@ (@@ state@@ Mach@@ ine@@ , Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ R@@ UN@@ _@@ R@@ UN@@ N@@ ABL@@ E); assert@@ Equal@@ s(@@ expected@@ En@@ d@@ State@@ , state@@ Mach@@ in@@ e.get@@ Current@@ Call@@ Audio@@ State@@ ()); }
public void test@@ Par@@ se@@ D@@ ouble@@ With@@ Default@@ () throw@@ s java.lang.Exception { java.util.@@ Loc@@ a@@ le.@@ set@@ Default@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ ); assert@@ Equal@@ s(@@ 1@@ 00@@ 0.@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ 1@@ 00@@ 0@@ ", 0@@ )); assert@@ Equal@@ s(@@ 2.@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ 2@@ x@@ ", 3@@ )); assert@@ Equal@@ s(@@ 4@@ .@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ ", 4@@ )); assert@@ Equal@@ s(@@ 5@@ .@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ test@@ ", 5@@ )); java.util.@@ Loc@@ a@@ le.@@ set@@ Default@@ (java.util.@@ Loc@@ a@@ le.@@ F@@ R@@ AN@@ C@@ E); assert@@ Equal@@ s(@@ 1@@ 00@@ 0.@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ 1@@ 00@@ 0@@ ", (-1@@ ))); assert@@ Equal@@ s(@@ 8@@ .@@ 0, com.android.@@ uti@@ ls.@@ Sdk@@ Utils.@@ parse@@ Loc@@ aliz@@ ed@@ D@@ ouble@@ ("@@ ", 8@@ )); }
public com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Card@@ Application@@ Statu@@ s.@@ Per@@ so@@ Sub@@ State get@@ Per@@ so@@ Sub@@ State@@ () { synchronized@@ (m@@ Lock) { return m@@ Per@@ so@@ Sub@@ State@@ ; } }
public static final android.os.@@ Pro@@ ces@@ s.@@ Process@@ Start@@ Res@@ ult start@@ (@@ final java.lang.String process@@ Class@@ , final java.lang.String n@@ i@@ ce@@ Name, int uid@@ , int g@@ id, int@@ [] g@@ id@@ s, int art@@ Flag@@ s, int mo@@ unt@@ Ex@@ ter@@ nal@@ , int target@@ Sdk@@ Version@@ , java.lang.String se@@ Info@@ , java.lang.String ab@@ i@@ , java.lang.String in@@ stru@@ ction@@ Set@@ , java.lang.String app@@ Data@@ Dir@@ , java.lang.String invok@@ e@@ With@@ , java.lang.String[] z@@ y@@ go@@ te@@ Arg@@ s) { return android.os.@@ Pro@@ ces@@ s.@@ z@@ y@@ go@@ te@@ Pro@@ ces@@ s.@@ start@@ (pro@@ cess@@ Class@@ , n@@ i@@ ce@@ Name, uid@@ , g@@ id, g@@ id@@ s, art@@ Flag@@ s, mo@@ unt@@ Ex@@ ter@@ nal@@ , target@@ Sdk@@ Version@@ , se@@ Info@@ , ab@@ i@@ , in@@ stru@@ ction@@ Set@@ , app@@ Data@@ Dir@@ , invok@@ e@@ With@@ , z@@ y@@ go@@ te@@ Arg@@ s); }
@java.lang.Override public final java.lang.String toString@@ () { java.lang.String str@@ ; com.android.jack.@@ util.@@ Default@@ Text@@ Out@@ put out = new com.android.jack.@@ util.@@ Default@@ Text@@ Output@@ (@@ true@@ ); com.android.jack.@@ ir.@@ im@@ p@@ l.@@ To@@ String@@ Gener@@ ation@@ Visi@@ tor v = new com.android.jack.@@ ir.@@ im@@ p@@ l.@@ To@@ String@@ Gener@@ ation@@ Visi@@ tor@@ (@@ out); v@@ .@@ ac@@ ce@@ p@@ t@@ (@@ this@@ ); st@@ r = out.@@ toString@@ (); com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info source@@ Info = get@@ Source@@ Info@@ (); if (s@@ ource@@ Info != (com.android.jack.@@ ir.@@ source@@ info@@ .@@ Source@@ Info.@@ UN@@ K@@ NO@@ W@@ N@@ )) { st@@ r +@@ = (@@ " (@@ " + (get@@ Source@@ Info@@ ().@@ toString@@ ())) + "@@ )@@ "; } return str@@ ; }
private static void assert@@ M@@ e@@ id@@ (java.lang.String m@@ e@@ id@@ ) { if ((m@@ e@@ id.@@ length@@ ()) == 1@@ 4@@ ) { android.telephony.@@ cts.@@ Telephony@@ Manager@@ Test@@ .@@ assert@@ M@@ e@@ id@@ Format@@ (m@@ e@@ id@@ ); } else if ((m@@ e@@ id.@@ length@@ ()) == 8@@ ) { android.telephony.@@ cts.@@ Telephony@@ Manager@@ Test@@ .@@ assert@@ H@@ ex@@ ad@@ ec@@ im@@ al@@ E@@ s@@ n@@ Format@@ (m@@ e@@ id@@ ); } else { fail@@ ("@@ de@@ vice id on C@@ D@@ M@@ A m@@ us@@ t b@@ e 1@@ 4@@ -@@ d@@ ig@@ i@@ t he@@ x ME@@ I@@ D or 8@@ -@@ d@@ ig@@ i@@ t he@@ x E@@ S@@ N@@ .@@ "); } }
public android.net.@@ w@@ if@@ i.@@ IC@@ lient@@ Inter@@ face set@@ up@@ D@@ ri@@ ver@@ For@@ Client@@ Mode@@ () { m@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ set@@ up@@ D@@ ri@@ ver@@ For@@ Client@@ Mode@@ (@@ w@@ if@@ i@@ con@@ d@@ ); return m@@ W@@ if@@ i@@ con@@ d@@ Contro@@ l.@@ set@@ up@@ D@@ ri@@ ver@@ For@@ Client@@ Mode@@ (@@ w@@ if@@ i@@ con@@ d@@ ); }
public boolean update@@ Ad@@ n@@ Record@@ s@@ In@@ E@@ f@@ By@@ Index@@ (@@ int e@@ f@@ id, java.lang.String new@@ Tag@@ , java.lang.String new@@ Phone@@ Number@@ , int index@@ , java.lang.String p@@ in@@ 2@@ ) { if ((@@ phon@@ e.get@@ Context@@ ().@@ check@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ W@@ R@@ I@@ TE_@@ CON@@ TA@@ C@@ T@@ S@@ )) != (android.content.@@ p@@ m.@@ Package@@ Manager.@@ P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ G@@ R@@ AN@@ TED@@ )) { throw new java.lang.@@ Sec@@ urit@@ y@@ Exception("@@ Requ@@ ire@@ s android.@@ per@@ mission@@ .@@ W@@ R@@ I@@ TE_@@ CON@@ TA@@ C@@ T@@ S per@@ mission@@ "); } if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Phone@@ B@@ oo@@ k@@ Interface@@ Manager.@@ DBG) log@@ d@@ ((((@@ ((((@@ ((@@ (("@@ update@@ Ad@@ n@@ Record@@ s@@ In@@ E@@ f@@ By@@ Index@@ : e@@ f@@ id@@ =@@ " + e@@ f@@ id@@ ) + " Index@@ =@@ ") + index@@ ) + " =@@ > ") + "@@ ("@@ ) + new@@ Tag@@ ) + "@@ ,@@ ") + new@@ Phone@@ Number@@ ) + "@@ )@@ ") + " p@@ in@@ 2@@ =@@ ") + p@@ in@@ 2@@ )); synchronized@@ (m@@ Lock) { check@@ Thread@@ (); su@@ c@@ ces@@ s = false@@ ; java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an statu@@ s = new java.util.@@ concurrent.@@ at@@ om@@ ic@@ .@@ A@@ to@@ m@@ ic@@ Boole@@ an@@ (@@ false@@ ); android.os.@@ Message res@@ pon@@ se = m@@ Base@@ Handler.@@ ob@@ tain@@ Message@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Icc@@ Phone@@ B@@ oo@@ k@@ Interface@@ Manager.@@ EVEN@@ T_@@ U@@ P@@ DA@@ TE_@@ D@@ ON@@ E, stat@@ us@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Ad@@ n@@ Recor@@ d new@@ Ad@@ n = new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Ad@@ n@@ Record@@ (@@ new@@ Tag@@ , new@@ Phone@@ Number@@ ); ad@@ n@@ C@@ ache.@@ update@@ Ad@@ n@@ By@@ Index@@ (e@@ f@@ id, new@@ Ad@@ n@@ , index@@ , p@@ in@@ 2, res@@ ponse@@ ); while (!(@@ statu@@ s.get@@ ())) { try { m@@ Lock@@ .@@ wait@@ (); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { log@@ d@@ (@@ "@@ int@@ er@@ rup@@ ted while try@@ ing to up@@ d@@ ate b@@ y index@@ "); } } return su@@ ccess@@ ; }
protected boolean get@@ Lock@@ ed@@ Record@@ s@@ Load@@ ed@@ () { return ((m@@ Record@@ s@@ To@@ Load@@ ) == 0) && ((m@@ Lock@@ ed@@ Record@@ s@@ Re@@ q@@ Re@@ as@@ on@@ ) == (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ uicc.@@ Icc@@ Record@@ s.@@ LO@@ C@@ K@@ ED@@ _RE@@ C@@ OR@@ D@@ S@@ _RE@@ Q@@ _RE@@ A@@ S@@ ON@@ _P@@ IN@@ _@@ LO@@ C@@ K@@ ED@@ )); }
@java.lang.Override public void f@@ ch@@ mo@@ d@@ (java.io.FileDescriptor f@@ d, int mode@@ ) throw@@ s android.system.@@ ErrnoException { d@@ al@@ vi@@ k.@@ system.@@ Block@@ G@@ u@@ ard@@ .get@@ Thread@@ Polic@@ y@@ ().@@ on@@ W@@ rite@@ To@@ Dis@@ k@@ (); os.@@ f@@ ch@@ mo@@ d@@ (f@@ d, mode@@ ); }
boolean wait@@ For@@ Callback@@ (@@ int call@@ back@@ ) { java.util.@@ I@@ terator@@ <@@ java.lang.Integ@@ er@@ > i@@ t = m@@ Callback@@ Q@@ ue@@ u@@ e.@@ i@@ terator@@ (); while (@@ it.@@ has@@ Next@@ ()) { if ((@@ it.@@ next@@ ()) == call@@ back@@ ) { it.@@ remove@@ (); return true@@ ; } } mC@@ urrent@@ W@@ ait@@ For@@ Call@@ b@@ ac@@ k = call@@ back@@ ; m@@ Block@@ er = new java.util.@@ concurrent.@@ Count@@ Down@@ L@@ atch@@ (1@@ ); try { return m@@ Block@@ er.@@ aw@@ ait@@ (android.net.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ cts.@@ S@@ ing@@ le@@ Device@@ Test.@@ W@@ A@@ I@@ T_@@ F@@ OR@@ _@@ A@@ W@@ AR@@ E_@@ CH@@ AN@@ G@@ E, java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ); } catch (java.lang.@@ Inter@@ rup@@ ted@@ Exception e) { return false@@ ; } }
public void cle@@ an@@ Up@@ () { if (is@@ Run@@ n@@ ing@@ ()) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ ("@@ K@@ il@@ l th@@ e run@@ n@@ ing pro@@ ces@@ s.@@ "); m@@ Pro@@ ces@@ s.@@ d@@ est@@ ro@@ y@@ (); } try { m@@ St@@ d@@ in@@ Wri@@ ter.@@ close(); } catch (java.io.IOException e) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ e); } try { m@@ S@@ t@@ do@@ ut@@ Read@@ er.@@ close(); } catch (java.io.IOException e) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ e); } try { m@@ St@@ der@@ r@@ Read@@ er.@@ close(); } catch (java.io.IOException e) { com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ log.@@ Log@@ Util.@@ C@@ Log.@@ e@@ (@@ e); } com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Util.@@ j@@ o@@ in@@ Thread@@ (m@@ S@@ t@@ do@@ ut@@ Thread@@ , com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Util.@@ TH@@ RE@@ AD@@ _@@ J@@ O@@ IN@@ _@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ EC@@ S@@ ); com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Util.@@ j@@ o@@ in@@ Thread@@ (m@@ St@@ der@@ r@@ Thread@@ , com.android.@@ tr@@ ad@@ e@@ f@@ ed.@@ util.@@ Process@@ Util.@@ TH@@ RE@@ AD@@ _@@ J@@ O@@ IN@@ _@@ TI@@ ME@@ O@@ U@@ T_@@ MS@@ EC@@ S@@ ); }
public static void valid@@ ate@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ir.ast.@@ c@@ f@@ g.@@ J@@ Bas@@ ic@@ Block@@ Elem@@ ent e@@ lement@@ ) { new com.android.jack.@@ ir.ast.@@ c@@ f@@ g.@@ C@@ F@@ G@@ Ex@@ pres@@ sion@@ Valid@@ ator@@ ().@@ ac@@ ce@@ p@@ t@@ (e@@ lement@@ ); }
void on@@ Device@@ Selection@@ () { com.android.sdklib.@@ de@@ vices.@@ Device current@@ Device = get@@ Sele@@ c@@ ted@@ Device@@ (); if (c@@ urrent@@ Device != null@@ ) { fil@@ l@@ Device@@ Properties@@ (c@@ urrent@@ Device@@ ); } to@@ g@@ g@@ le@@ C@@ am@@ er@@ as@@ (); valid@@ ate@@ P@@ age@@ (); }
private boolean parse@@ A@@ id@@ l@@ Output@@ (@@ java.util.ArrayList<@@ java.lang.String> lin@@ es@@ , org.eclipse.@@ core.@@ resources.@@ I@@ File file@@ ) { if ((@@ lin@@ es.@@ size@@ ()) == 0) { return false@@ ; } java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er m@@ ; for (@@ int i = 0; i < (@@ lin@@ es.@@ size@@ ()); i++) { java.lang.String p = lin@@ es@@ .get@@ (i@@ ); m = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ build@@ .@@ n@@ on@@ java.@@ A@@ id@@ l@@ Gener@@ ator@@ .@@ s@@ A@@ id@@ l@@ P@@ attern@@ 1.@@ match@@ er@@ (p@@ ); if (m@@ .@@ match@@ es@@ ()) { java.lang.String line@@ St@@ r = m.@@ gro@@ up@@ (@@ 2@@ ); java.lang.String ms@@ g = m.@@ gro@@ up@@ (@@ 3@@ ); int lin@@ e = 0; try { lin@@ e = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ line@@ Str@@ ); } catch (java.lang.@@ Number@@ Format@@ Exception e) { return true@@ ; } com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ pro@@ jec@@ t.@@ Base@@ Project@@ Helper.@@ m@@ ark@@ Resource@@ (file@@ , Android@@ Constants.@@ M@@ AR@@ K@@ ER_@@ A@@ ID@@ L, ms@@ g@@ , line@@ , I@@ Mark@@ er.@@ SE@@ V@@ ER@@ ITY@@ _@@ ER@@ R@@ OR@@ ); continue@@ ; } return true@@ ; } return false@@ ; }
@org.junit.Test @@@ java.lang.Runtime@@ (f@@ ro@@ m = Runtime@@ Version@@ .@@ N@@ ) public void ret@@ ro@@ L@@ amb@@ d@@ a@@ Default@@ Method@@ s@@ Test@@ 0@@ 2@@ 4@@ () throw@@ s java.lang.Exception { run@@ (@@ RE@@ T@@ RO@@ LA@@ M@@ B@@ DA@@ _@@ DE@@ FA@@ UL@@ T@@ ME@@ TH@@ OD@@ S_@@ 0@@ 2@@ 4@@ ); }
public boolean is@@ Manage@@ Ims@@ Con@@ ference@@ Call@@ Sup@@ ported@@ () { return m@@ Is@@ Manage@@ Ims@@ Con@@ ference@@ Call@@ Sup@@ ported@@ ; }
public int fc@@ n@@ t@@ l@@ Vo@@ id@@ (java.io.FileDescriptor f@@ d, int c@@ m@@ d@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ fc@@ n@@ t@@ l@@ Vo@@ id@@ (f@@ d, c@@ m@@ d@@ ); }
private static void do@@ Test@@ Pri@@ m@@ i@@ tive@@ Field@@ s@@ Integ@@ r@@ al@@ () { ar@@ t.@@ Test@@ 9@@ 0@@ 6@@ .@@ Int@@ Ob@@ ject int@@ Ob@@ ject = new ar@@ t.@@ Test@@ 9@@ 0@@ 6@@ .@@ Int@@ Object@@ (); ar@@ t.@@ Test@@ 9@@ 0@@ 6@@ .set@@ Tag@@ (@@ int@@ Object@@ , 1@@ 0000@@ ); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ ar@@ t.@@ Test@@ 9@@ 0@@ 6@@ .@@ i@@ ter@@ ate@@ Th@@ ro@@ u@@ g@@ h@@ He@@ ap@@ Pri@@ m@@ i@@ tive@@ Field@@ s(@@ 1@@ 0000@@ )); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ ar@@ t.@@ Test@@ 9@@ 0@@ 6@@ .get@@ Tag@@ (@@ int@@ Object@@ )); }
public int dex@@ op@@ t@@ (java.lang.String apk@@ Path@@ , int uid@@ , boolean is@@ P@@ u@@ bli@@ c@@ , java.lang.String p@@ kg@@ Name, java.lang.String in@@ stru@@ ction@@ Set@@ , int dex@@ op@@ t@@ Ne@@ ed@@ ed@@ ed@@ , boolean vm@@ S@@ a@@ f@@ e@@ Mode@@ , boolean de@@ bug@@ g@@ able@@ ) { if (!@@ (com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ is@@ Valid@@ In@@ stru@@ ction@@ Set@@ (in@@ stru@@ ction@@ Set@@ ))) { android.util.@@ S@@ log.@@ e@@ (com.android.server.@@ p@@ m.@@ In@@ stall@@ er.@@ TAG, ("@@ In@@ va@@ li@@ d in@@ stru@@ c@@ tion set@@ : " + in@@ stru@@ ction@@ Set@@ )); return -1@@ ; } return m@@ In@@ stall@@ er.@@ dex@@ op@@ t@@ (@@ apk@@ Path@@ , uid@@ , is@@ P@@ u@@ bli@@ c@@ , p@@ kg@@ Name, in@@ stru@@ ction@@ Set@@ , dex@@ op@@ t@@ Ne@@ ed@@ ed@@ ed@@ ed@@ , de@@ bug@@ g@@ able@@ ); }
public void test@@ Multi@@ pl@@ y@@ _@@ ne@@ ar@@ 6@@ 4@@ Bit@@ O@@ ver@@ f@@ low@@ _@@ ne@@ g@@ ative@@ () { assert@@ Equal@@ s("@@ -@@ 9@@ 2@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 8@@ ", libcore.@@ java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ Test.@@ b@@ ig@@ Multi@@ pl@@ y@@ (java.lang.@@ Lon@@ g.@@ M@@ IN@@ _@@ VAL@@ UE@@ , 1@@ ).@@ toString@@ ()); assert@@ Equal@@ s("@@ -@@ 9@@ 2@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 8@@ ", libcore.@@ java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ Test.@@ b@@ ig@@ Multi@@ pl@@ y@@ ((@@ (java.lang.@@ Lon@@ g.@@ M@@ IN@@ _@@ VAL@@ UE@@ ) / 2@@ ), 2@@ ).@@ toString@@ ()); assert@@ Equal@@ s("@@ -@@ 9@@ 2@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 8@@ ", libcore.@@ java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ Test.@@ b@@ ig@@ Multi@@ pl@@ y@@ ((@@ -@@ (1@@ L <@@ < 3@@ 1@@ )), (1@@ L <@@ < 32@@ )).@@ toString@@ ()); assert@@ Equal@@ s("@@ -@@ 9@@ 2@@ 2@@ 3@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 7@@ 5@@ 8@@ 0@@ 7@@ ", libcore.@@ java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ Test.@@ b@@ ig@@ Multi@@ pl@@ y@@ ((@@ -@@ 4@@ 2@@ 12@@ 8@@ 4@@ 7@@ 16@@ 2@@ 3@@ L@@ ), 2@@ 1@@ 8@@ 9@@ 3@@ 4@@ 0@@ 9@@ L@@ ).@@ toString@@ ()); assert@@ Equal@@ s("@@ -@@ 9@@ 2@@ 3@@ 7@@ 2@@ 0@@ 3@@ 6@@ 8@@ 5@@ 4@@ 7@@ 7@@ 5@@ 8@@ 10@@ ", libcore.@@ java.@@ m@@ ath.@@ B@@ ig@@ Dec@@ im@@ al@@ Test.@@ b@@ ig@@ Multi@@ pl@@ y@@ (((@@ -@@ ((@@ java.lang.@@ Lon@@ g.@@ M@@ IN@@ _@@ VAL@@ UE@@ ) / 2@@ )) + 1@@ ), (@@ -@@ 2@@ )).@@ toString@@ ()); }
public boolean config@@ ure@@ R@@ o@@ am@@ ing@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ N@@ ativ@@ e.@@ R@@ o@@ am@@ ing@@ Con@@ fig config@@ ) { synchronized@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ V@@ e@@ n@@ do@@ r@@ H@@ al.@@ s@@ Lock) { if ((m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ ) == null@@ ) return b@@ oo@@ l@@ Result@@ (@@ false@@ ); try { android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ St@@ a@@ R@@ o@@ am@@ ing@@ Con@@ fig ro@@ am@@ ing@@ Con@@ fig = new android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ St@@ a@@ R@@ o@@ am@@ ing@@ Config@@ (); if ((@@ config.@@ b@@ l@@ ack@@ list@@ B@@ ss@@ id@@ s) != null@@ ) { for (java.lang.String b@@ s@@ si@@ d : config.@@ b@@ l@@ ack@@ list@@ B@@ ss@@ id@@ s) { byte@@ [] ma@@ c = com.android.server.@@ w@@ if@@ i.@@ util.@@ Native@@ Util.@@ m@@ ac@@ Address@@ To@@ ByteArray@@ (b@@ ss@@ id@@ ); ro@@ am@@ ing@@ Config.@@ b@@ ss@@ id@@ B@@ l@@ ack@@ li@@ st.@@ add@@ (m@@ ac@@ ); } } if ((@@ config.@@ wh@@ ite@@ list@@ S@@ s@@ id@@ s) != null@@ ) { for (java.lang.String ss@@ id@@ St@@ r : config.@@ wh@@ ite@@ list@@ S@@ s@@ id@@ s) { java.lang.String un@@ qu@@ o@@ ted@@ S@@ s@@ id@@ St@@ r = android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Info.@@ remove@@ D@@ ouble@@ Q@@ u@@ o@@ tes@@ (s@@ s@@ id@@ Str@@ ); int le@@ n = un@@ qu@@ o@@ ted@@ S@@ s@@ id@@ Str@@ .@@ length@@ (); if (@@ le@@ n > 32@@ ) { m@@ Log.@@ er@@ r@@ ("@@ config@@ ure@@ R@@ o@@ am@@ ing@@ : s@@ k@@ i@@ p in@@ va@@ li@@ d SS@@ I@@ D %@@ ").@@ r@@ (@@ un@@ qu@@ o@@ ted@@ S@@ s@@ id@@ Str@@ ).@@ f@@ lu@@ sh@@ (); continue@@ ; } byte@@ [] s@@ si@@ d = new byte@@ [@@ l@@ en@@ ]; for (@@ int i = 0; i < l@@ en@@ ; i++) { ss@@ id@@ [i@@ ] = (@@ (@@ byte@@ ) (@@ un@@ qu@@ o@@ ted@@ S@@ s@@ id@@ Str@@ .@@ char@@ At@@ (i@@ ))); } ro@@ am@@ ing@@ Config.@@ ss@@ id@@ W@@ h@@ ite@@ li@@ st.@@ add@@ (s@@ s@@ id@@ ); } } android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Statu@@ s statu@@ s = m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ .@@ config@@ ure@@ R@@ o@@ am@@ ing@@ (@@ ro@@ am@@ ing@@ Config@@ ); if (!(@@ ok@@ (@@ stat@@ us@@ ))) return false@@ ; } catch (android.os.RemoteException e) { handle@@ Remote@@ Exception(@@ e); return false@@ ; } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { m@@ Log.@@ er@@ r@@ ("@@ Illeg@@ al arg@@ ument@@ ").@@ f@@ lu@@ sh@@ (); return false@@ ; } return true@@ ; } } } }
public void request@@ All@@ Pro@@ fil@@ es@@ (java.lang.String c@@ ard@@ Id, java.util.@@ concurrent.@@ Ex@@ ec@@ ut@@ or exec@@ ut@@ or@@ , android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ Result@@ Callback@@ <@@ android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info@@ []@@ > call@@ back@@ ) { try { get@@ I@@ E@@ uic@@ c@@ Card@@ Control@@ ler@@ ().get@@ All@@ Pro@@ fil@@ es@@ (m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), c@@ ard@@ Id, new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ e@@ uicc.@@ I@@ Get@@ All@@ Pro@@ fil@@ es@@ Callback@@ .@@ St@@ ub@@ () { @java.lang.Override public void on@@ Comp@@ lete@@ (@@ int result@@ Code@@ , android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info@@ [] pro@@ fil@@ es) { exec@@ ut@@ or.@@ exec@@ ute@@ ((@@ ) -@@ > call@@ back@@ .@@ on@@ Comp@@ lete@@ (@@ result@@ Code@@ , pro@@ fil@@ es@@ )); } }); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ TAG, "@@ Error call@@ ing get@@ All@@ Pro@@ fil@@ es@@ ", e); throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
private void not@@ if@@ y@@ Host@@ E@@ m@@ u@@ De@@ ac@@ ti@@ v@@ ated@@ (@@ int te@@ ch@@ no@@ log@@ y@@ ) { m@@ Listen@@ er.@@ on@@ Host@@ Card@@ E@@ m@@ ul@@ ation@@ De@@ ac@@ ti@@ v@@ ated@@ (@@ te@@ ch@@ no@@ log@@ y@@ ); }
@java.lang.Override public boolean st@@ op@@ Cre@@ at@@ ing@@ S@@ en@@ s@@ f@@ Res@@ D@@ ur@@ ing@@ Ac@@ ti@@ v@@ ation@@ For@@ Service@@ (@@ int user@@ Id, android.content.@@ Comp@@ on@@ ent@@ Name service@@ , boolean st@@ op@@ ) throw@@ s android.os.@@ RemoteException { com.android.@@ n@@ f@@ c.@@ N@@ fc@@ Permission@@ s.@@ valid@@ ate@@ User@@ Id@@ (@@ user@@ Id); com.android.@@ n@@ f@@ c.@@ N@@ fc@@ Permission@@ s.@@ e@@ n@@ for@@ ce@@ User@@ Permission@@ s@@ (m@@ Context@@ ); if (!(@@ is@@ N@@ fc@@ F@@ Service@@ In@@ st@@ al@@ le@@ d@@ (@@ user@@ Id, service@@ ))) { return false@@ ; } return false@@ ; }
public void test@@ A@@ es@@ C@@ b@@ c@@ H@@ m@@ ac@@ Sh@@ a@@ 1@@ T@@ c@@ p@@ 6@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m cryp@@ t = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 1, android.net.cts.@@ IpSec@@ ManagerTest.@@ get@@ Key@@ (1@@ 6@@ 0@@ ), 9@@ 6@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 6@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , cryp@@ t, au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
@java.lang.Override protected void on@@ Dis@@ connect@@ () { super@@ .@@ on@@ Dis@@ connect@@ (); }
public native int po@@ l@@ l@@ (android.@@ system.@@ Str@@ u@@ ct@@ P@@ ol@@ l@@ f@@ d@@ [] f@@ d@@ s, int time@@ out@@ M@@ s) throw@@ s android.system.@@ Errno@@ Exception;
@@@ java.lang.@@ De@@ pre@@ cate@@ d public java.util.List<@@ java.lang.String> get@@ C@@ arrier@@ Package@@ Nam@@ es@@ For@@ Intent@@ (android.content.@@ p@@ m.@@ Package@@ Manager package@@ Manager@@ , android.content.@@ Int@@ ent int@@ ent@@ ) { if ((m@@ Uicc@@ Profile@@ ) != null@@ ) { return m@@ Uicc@@ Profile@@ .get@@ C@@ arrier@@ Package@@ Nam@@ es@@ For@@ Intent@@ (@@ package@@ Manager@@ , int@@ ent@@ ); } else { return null@@ ; } }
public void test@@ Con@@ stru@@ ctor@@ _@@ Null@@ Start@@ Date@@ _@@ Fail@@ ure@@ () throw@@ s java.lang.Exception { android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ S@@ pe@@ c s@@ pe@@ c = new android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ (get@@ Context@@ (), android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ Test.@@ TEST_@@ AL@@ I@@ A@@ S_@@ 1, "@@ RS@@ A@@ ", 10@@ 2@@ 4@@ , null@@ , android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ Test.@@ TEST_@@ D@@ N@@ _@@ 1, android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ Test.@@ S@@ ER@@ I@@ AL@@ _@@ 1, null@@ , android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ Test.@@ NO@@ W@@ _P@@ L@@ US@@ _@@ 10@@ _@@ Y@@ E@@ A@@ RS@@ , 0); assert@@ Equal@@ s(@@ android.@@ security.@@ Key@@ Pa@@ ir@@ Gener@@ ator@@ Spec@@ Test.@@ DE@@ FA@@ UL@@ T_@@ C@@ ER@@ T_@@ NO@@ T_@@ B@@ E@@ F@@ O@@ RE@@ , spec@@ .get@@ Start@@ Date@@ ()); }
public void test@@ Channel@@ Read@@ _@@ excepti@@ on@@ On@@ C@@ lose@@ W@@ h@@ en@@ Block@@ ed@@ () throw@@ s java.lang.Exception { test@@ Channel@@ Read@@ _@@ excepti@@ on@@ On@@ C@@ lose@@ W@@ h@@ en@@ Block@@ ed@@ (@@ libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ Channel@@ Read@@ er@@ (file@@ Input@@ Channel@@ ); java.lang.@@ Th@@ re@@ ad chan@@ nel@@ Read@@ er@@ Th@@ re@@ ad = libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ create@@ And@@ Start@@ Thread@@ ("@@ Channel@@ Read@@ er@@ ", chan@@ nel@@ Read@@ er@@ ); chan@@ nel@@ Read@@ er.@@ wait@@ For@@ Thread@@ To@@ Block@@ (); file@@ Input@@ Chan@@ ne@@ l.@@ close(); libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ Channel@@ Read@@ er chan@@ nel@@ Read@@ er@@ (file@@ Input@@ Channel@@ ); java.lang.@@ Th@@ re@@ ad chan@@ nel@@ Read@@ er@@ Th@@ re@@ ad = libcore.@@ java.nio.@@ channe@@ ls.@@ File@@ IO@@ Inter@@ rup@@ t@@ Test.@@ create@@ And@@ Start@@ Thread@@ ("@@ Channel@@ Read@@ er@@ ", chan@@ nel@@ Read@@ er@@ ); chan@@ nel@@ Read@@ er.@@ wait@@ For@@ Thread@@ To@@ Block@@ (); }
private C@@ am@@ er@@ a.@@ Siz@@ e get@@ O@@ pti@@ m@@ al@@ Pre@@ view@@ Size@@ (@@ java.util.List<@@ android.hardware.@@ C@@ am@@ er@@ a.@@ Size@@ > siz@@ es@@ , int w@@ , int h@@ ) { final do@@ ub@@ le A@@ S@@ P@@ EC@@ T_@@ TO@@ L@@ ER@@ AN@@ C@@ E = 0.@@ 1; do@@ ub@@ le target@@ R@@ ati@@ o = (@@ (@@ do@@ ub@@ le@@ ) (@@ 6@@ 4@@ 0@@ )) / (@@ (@@ do@@ ub@@ le@@ ) (@@ 4@@ 8@@ 0@@ )); if (@@ size@@ s == null@@ ) return null@@ ; android.hardware.@@ C@@ am@@ er@@ a.@@ Siz@@ e o@@ pti@@ m@@ al@@ Siz@@ e = null@@ ; int min@@ D@@ if@@ f = java.lang.Integ@@ er.@@ MA@@ X_@@ VAL@@ UE@@ ; int c@@ ur@@ D@@ if@@ f@@ ; int target@@ He@@ ig@@ h@@ t = h@@ ; int target@@ W@@ id@@ th = w@@ ; boolean as@@ pec@@ t@@ R@@ ati@@ o = true@@ ; boolean m@@ a@@ int@@ ain@@ C@@ e@@ il@@ ing = true@@ ; if ((@@ siz@@ es.@@ size@@ ()) == 0) return null@@ ; while (@@ true@@ ) { for (android.@@ hardware.@@ C@@ am@@ er@@ a.@@ Siz@@ e siz@@ e : siz@@ es) { if (@@ as@@ pec@@ t@@ R@@ ati@@ o@@ ) { do@@ ub@@ le r@@ ati@@ o = (@@ (@@ do@@ ub@@ le@@ ) (@@ siz@@ e.@@ wid@@ th@@ )) / (@@ siz@@ e.@@ he@@ ig@@ ht@@ ); if ((@@ java.lang.@@ M@@ ath.@@ ab@@ s@@ ((@@ r@@ ati@@ o - target@@ R@@ ati@@ o@@ ))) > A@@ S@@ P@@ EC@@ T_@@ TO@@ L@@ ER@@ AN@@ CE@@ ) { continue@@ ; } } c@@ ur@@ D@@ if@@ f = (java.lang.@@ M@@ ath.@@ ab@@ s@@ (((@@ siz@@ e.@@ he@@ ig@@ ht@@ ) - target@@ He@@ ig@@ ht@@ ))) + (java.lang.@@ M@@ ath.@@ ab@@ s@@ (((@@ siz@@ e.@@ wid@@ th@@ ) - target@@ W@@ id@@ th@@ ))); if ((@@ (m@@ a@@ int@@ ain@@ C@@ e@@ il@@ ing && (c@@ ur@@ D@@ if@@ f < min@@ D@@ if@@ f@@ )) && ((@@ siz@@ e.@@ he@@ ig@@ ht@@ ) <@@ = target@@ He@@ ig@@ ht@@ )) && ((@@ siz@@ e.@@ wid@@ th@@ ) <@@ = target@@ W@@ id@@ th@@ )) { o@@ pti@@ m@@ al@@ Siz@@ e = size@@ ; min@@ D@@ if@@ f = c@@ ur@@ D@@ if@@ f@@ ; } else if ((m@@ a@@ int@@ ain@@ C@@ e@@ il@@ ing == false@@ ) && (c@@ ur@@ D@@ if@@ f < min@@ D@@ if@@ f@@ )) { o@@ pti@@ m@@ al@@ Siz@@ e = size@@ ; min@@ D@@ if@@ f = c@@ ur@@ D@@ if@@ f@@ ; } } if ((@@ o@@ pti@@ m@@ al@@ Siz@@ e == null@@ ) && (@@ as@@ pec@@ t@@ R@@ ati@@ o == true@@ )) { as@@ pec@@ t@@ R@@ ati@@ o = false@@ ; } else if (m@@ a@@ int@@ ain@@ C@@ e@@ il@@ ing == true@@ ) { m@@ a@@ int@@ ain@@ C@@ e@@ il@@ ing = false@@ ; } else { break@@ ; } } } return o@@ pti@@ m@@ al@@ Size@@ ; }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { if (!@@ (@@ int@@ ent.get@@ Action@@ ().@@ equal@@ s@@ (com.android.@@ p@@ m@@ c.@@ A@@ 2@@ dp@@ Recei@@ ver.@@ A@@ 2@@ D@@ P@@ _@@ IN@@ TE@@ N@@ T@@ ))) return@@ ; boolean al@@ ar@@ m = int@@ ent.@@ has@@ Extra@@ (com.android.@@ p@@ m@@ c.@@ A@@ 2@@ dp@@ Recei@@ ver.@@ A@@ 2@@ D@@ P@@ _@@ AL@@ AR@@ M@@ ); if (@@ al@@ ar@@ m@@ ) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ A@@ 2@@ dp@@ Recei@@ ver.@@ TAG, "@@ Recei@@ ve@@ d Al@@ ar@@ m b@@ road@@ cas@@ t message@@ "); handle@@ Al@@ ar@@ m@@ (@@ int@@ ent@@ ); } else { process@@ Parameter@@ s@@ (@@ int@@ ent@@ ); android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ A@@ 2@@ dp@@ Recei@@ ver.@@ TAG, "@@ Recei@@ ve@@ d P@@ M@@ C com@@ man@@ d message@@ "); } }
public void handle@@ Message@@ (android.os.@@ Message ms@@ g@@ ) { if ((@@ ms@@ g.@@ wh@@ at@@ ) == 0) { m@@ Con@@ s@@ um@@ ing = false@@ ; set@@ Enabled@@ (@@ true@@ ); } else if ((@@ ms@@ g.@@ wh@@ at@@ ) == (-1@@ )) { set@@ Enabled@@ (@@ false@@ ); } }
public void register@@ Listener@@ (android.os.@@ st@@ or@@ age.@@ Stor@@ age@@ Event@@ Listen@@ er list@@ ener@@ ) { if (@@ list@@ en@@ er == null@@ ) { return@@ ; } synchronized@@ (m@@ Listener@@ s) { if ((@@ (m@@ Bin@@ der@@ Listener@@ ) == null@@ ) && ((m@@ Mo@@ unt@@ Service@@ ) != null@@ )) { try { m@@ Bin@@ der@@ Listen@@ er = new android.os.@@ st@@ or@@ age.@@ Stor@@ age@@ Manager.@@ Mo@@ unt@@ Service@@ Bin@@ der@@ Listener@@ (); m@@ Mo@@ unt@@ Service.@@ register@@ Listener@@ (m@@ Bin@@ der@@ Listener@@ ); } catch (android.os.RemoteException re@@ x@@ ) { android.util.Log.e@@ (android.os.@@ st@@ or@@ age.@@ Stor@@ age@@ Manager.@@ TAG, "@@ Reg@@ is@@ ter m@@ Bin@@ der@@ Listen@@ er fa@@ ile@@ d@@ "); return@@ ; } } m@@ Listener@@ s.add@@ (@@ new android.os.@@ st@@ or@@ age.@@ Stor@@ age@@ Manager.@@ Listener@@ De@@ le@@ g@@ ate@@ (@@ list@@ ener@@ )); } }
synchronized void on@@ Connec@@ t@@ State@@ Changed@@ From@@ Native@@ (@@ byte@@ [] addres@@ s, int state@@ ) { if (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.TAG, ((("@@ on@@ Connec@@ t@@ State@@ Changed@@ ()@@ : addres@@ s@@ =@@ " + (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ 0@@ 2@@ x@@ ", java.util.Arrays.@@ toString@@ (@@ addres@@ s@@ )@@ ))) + " state@@ =@@ ") + state@@ )); } android.os.@@ Message ms@@ g = m@@ Handler.@@ ob@@ tain@@ Message@@ (com.android.bluetooth.@@ h@@ id.@@ H@@ id@@ Device@@ Service.@@ ME@@ SS@@ A@@ G@@ E_@@ CONNEC@@ T_@@ STATE_@@ CH@@ AN@@ G@@ ED@@ ); ms@@ g.@@ ob@@ j = addres@@ s; ms@@ g.@@ arg@@ 1 = state@@ ; m@@ Handler.@@ send@@ Message@@ (m@@ s@@ g@@ ); }
public void set@@ From@@ Field@@ Pack@@ er@@ (@@ int x@@ o@@ ff@@ , int y@@ o@@ ff@@ , int z@@ o@@ ff@@ , int w@@ , int h@@ , int d, android.renderscript.@@ Field@@ Pack@@ er f@@ p@@ ) { m@@ RS@@ .@@ valid@@ ate@@ (); int e@@ Siz@@ e = m@@ Type.@@ m@@ Element.@@ get@@ Bytes@@ Size@@ (); final byte@@ [] dat@@ a = f@@ p@@ .get@@ Data@@ (); int data@@ _@@ l@@ eng@@ th = f@@ p@@ .get@@ Po@@ s(); int coun@@ t = (@@ w * h@@ ) * d@@ ; if ((@@ e@@ Siz@@ e * count@@ ) != data@@ _@@ length) { throw new android.renderscript.RS@@ Illegal@@ Argument@@ Exception@@ ((((@@ ("@@ Fi@@ el@@ d pack@@ er l@@ eng@@ th " + data@@ _@@ length) + " not di@@ vi@@ si@@ b@@ le b@@ y e@@ lem@@ ent siz@@ e ") + e@@ Siz@@ e) + "@@ .@@ ")); } if ((m@@ Current@@ D@@ im@@ Z@@ ) > 0) { copy@@ 3@@ D@@ R@@ an@@ ge@@ From@@ Un@@ check@@ ed@@ (@@ x@@ o@@ ff@@ , y@@ o@@ ff@@ , z@@ o@@ ff@@ , w@@ , h@@ , d, data@@ , Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , data@@ .@@ length); } else if ((m@@ Current@@ D@@ im@@ Y@@ ) > 0) { copy@@ 2@@ D@@ R@@ an@@ ge@@ From@@ Un@@ check@@ ed@@ (@@ x@@ o@@ ff@@ , y@@ o@@ ff@@ , w@@ , h@@ , data@@ , Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , data@@ .@@ length); } else { copy@@ 1@@ D@@ R@@ an@@ ge@@ From@@ Un@@ check@@ ed@@ (@@ x@@ o@@ ff@@ , w@@ , data@@ ); } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null public synchronized com.android.sched.vfs.@@ Output@@ V@@ File create@@ Output@@ V@@ File@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ V@@ P@@ ath path@@ ) throw@@ s com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception { assert !@@ (@@ vfs.@@ is@@ C@@ lo@@ sed@@ ()); java.io.File fi@@ le = new java.io.File@@ (d@@ ir@@ , path@@ .get@@ Path@@ As@@ String(@@ Zip@@ Utils.@@ Z@@ IP@@ _S@@ E@@ P@@ AR@@ AT@@ OR@@ )); if ((@@ !@@ (file@@ .get@@ Par@@ ent@@ File@@ ().@@ m@@ k@@ d@@ ir@@ s@@ ())) && (!(@@ file@@ .get@@ Par@@ ent@@ File@@ ().@@ is@@ Directory@@ ()))) { throw new com.android.sched.util.file.@@ C@@ annot@@ Create@@ File@@ Exception@@ (@@ new com.android.sched.util.@@ loc@@ ation.@@ Directory@@ Location@@ (file@@ .get@@ Par@@ ent@@ File@@ ())); } assert !@@ (p@@ ath.@@ equals(@@ V@@ Path@@ .@@ RO@@ O@@ T@@ )); java.lang.String new@@ E@@ n@@ try@@ Name = path@@ .get@@ Path@@ As@@ String(@@ Zip@@ Utils.@@ Z@@ IP@@ _S@@ E@@ P@@ AR@@ AT@@ OR@@ ); java.lang.String parent@@ E@@ n@@ try@@ Name = z@@ ip@@ E@@ n@@ try@@ .getName@@ (); if (!(@@ parent@@ E@@ n@@ try@@ Nam@@ e.@@ isEmpty@@ ())) { new@@ E@@ n@@ try@@ Name = parent@@ E@@ n@@ try@@ Name + new@@ E@@ n@@ try@@ Name@@ ; } return new com.android.sched.vfs.@@ Input@@ Output@@ Zip@@ V@@ File@@ (@@ v@@ f@@ s, file@@ , new java.util.@@ z@@ i@@ p.@@ Zip@@ E@@ n@@ try@@ (@@ new@@ E@@ n@@ try@@ Name@@ )); }
@org.junit.Test @@@ java.lang.@@ Run@@ tim@@ e public void test@@ 10@@ 3@@ () throw@@ s java.lang.Exception { java.lang.String t@@ est = "@@ com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ test@@ 10@@ 3@@ "; java.lang.String a@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 3@@ /@@ jack@@ /@@ A@@ ;@@ "; java.lang.String b@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 3@@ /@@ jack@@ /@@ B@@ ;@@ "; java.lang.String c@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 3@@ /@@ jack@@ /@@ C@@ ;@@ "; java.lang.String d@@ Type = "@@ L@@ com@@ /@@ android@@ /@@ jack@@ /@@ o@@ pti@@ m@@ iz@@ ation@@ s@@ /@@ value@@ pro@@ p@@ ag@@ ation@@ /@@ test@@ 10@@ 3@@ /@@ jack@@ /@@ D@@ ;@@ "; java.lang.String fo@@ o = (("@@ f@@ oo@@ (@@ " + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ )) + "@@ )@@ ") + (com.android.jack.@@ o@@ pti@@ m@@ iz@@ ations.@@ value@@ pro@@ p@@ ag@@ ation.@@ Value@@ Pro@@ p@@ ag@@ ation@@ Test@@ s.@@ S@@ TR@@ ); compile@@ And@@ Valid@@ ate@@ (@@ default@@ Properties@@ (), new com.android.jack.test.@@ dex.@@ Dex@@ File@@ Typ@@ es@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (@@ a@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ A@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )).@@ in@@ ser@@ t@@ (b@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ B@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )).@@ in@@ ser@@ t@@ (c@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ C@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )).@@ in@@ ser@@ t@@ (d@@ Type, new com.android.jack.test.@@ dex.@@ Dex@@ Type@@ Method@@ s@@ Valid@@ ator@@ ().@@ in@@ ser@@ t@@ (f@@ oo@@ , d@@ al@@ vi@@ k@@ (@@ test@@ , "@@ D@@ .@@ f@@ oo@@ .@@ d@@ al@@ vi@@ k@@ "@@ )@@ )), test@@ ); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null protected com.android.jack.ir.ast.J@@ State@@ m@@ ent update@@ C@@ atch@@ Block@@ List@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ State@@ m@@ ent c@@ lon@@ ed@@ St@@ m@@ t, @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ State@@ m@@ ent or@@ ign@@ al@@ St@@ m@@ t@@ ) { com.android.jack.ir.ast.J@@ State@@ m@@ ent result = super@@ .@@ update@@ C@@ atch@@ Block@@ List@@ (c@@ lon@@ ed@@ St@@ m@@ t, or@@ ign@@ al@@ St@@ m@@ t@@ ); for (com.android.jack.@@ ir.ast.J@@ C@@ atch@@ B@@ loc@@ k catch@@ B@@ loc@@ k : call@@ S@@ ite@@ St@@ m@@ t.get@@ J@@ C@@ atch@@ Block@@ s@@ ()) { result.@@ append@@ C@@ atch@@ Block@@ (@@ catch@@ Block@@ ); } return result@@ ; }
@java.lang.Override protected void eng@@ ine@@ Up@@ date@@ (@@ byte@@ [] input@@ , int offset@@ , int l@@ en@@ ) { org.conscrypt.@@ Open@@ SSL@@ Dig@@ est@@ Context ct@@ x@@ Re@@ f = ct@@ x@@ ; org.conscrypt.@@ NativeCryp@@ to.@@ EV@@ P@@ _@@ Dig@@ est@@ Up@@ date@@ (@@ ct@@ x@@ , input@@ , offset@@ , l@@ en@@ ); }
public void test_@@ Con@@ stru@@ ctor@@ () throw@@ s java.lang.Exception { java.util.@@ Tim@@ er t = null@@ ; try { t = new java.util.@@ Tim@@ er@@ (); tests.@@ api.@@ java.util.@@ Tim@@ er@@ Test.@@ Tim@@ er@@ Test@@ T@@ as@@ k test@@ T@@ as@@ k = new tests.@@ api.@@ java.util.@@ Tim@@ er@@ Test.@@ Tim@@ er@@ Test@@ Task@@ (); t.@@ s@@ ch@@ ed@@ ule@@ (@@ test@@ Task@@ , 2@@ 00@@ ); aw@@ ait@@ Run@@ (@@ test@@ Task@@ ); t.@@ can@@ cel@@ (); } final@@ l@@ y { if (@@ t != null@@ ) t.@@ can@@ cel@@ (); } }
public android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le get@@ C@@ arrier@@ Config@@ () { android.telephony.@@ C@@ arrier@@ Config@@ Manager c@@ arrier@@ Config@@ Manager = m@@ Contex@@ t.get@@ System@@ Service@@ (android.@@ telephony.@@ C@@ arrier@@ Config@@ Manager@@ .@@ class@@ ); return c@@ arrier@@ Config@@ Manager.get@@ Config@@ For@@ Sub@@ Id@@ (get@@ Sub@@ Id@@ ()); }
@org.junit.Test public void x@@ or@@ _@@ long@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ X@@ OR@@ _@@ L@@ ON@@ G@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
@java.lang.Override public void on@@ Setting@@ s@@ Changed@@ (com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Setting@@ s@@ Contro@@ lle@@ r cont@@ ro@@ l@@ ler@@ , com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Setting@@ s@@ Control@@ ler.@@ Setting@@ s old@@ Setting@@ s) { if ((m@@ Down@@ load@@ Cach@@ e) != null@@ ) { if ((@@ cont@@ ro@@ l@@ er.get@@ Setting@@ s@@ ().get@@ U@@ se@@ Down@@ load@@ Cach@@ e@@ ()) && ((m@@ Down@@ load@@ Cach@@ e.get@@ Str@@ ate@@ g@@ y@@ ()) != (@@ Down@@ load@@ C@@ ache.@@ Str@@ ate@@ g@@ y.@@ F@@ RE@@ S@@ H@@ _C@@ AC@@ H@@ E@@ ))) { m@@ Down@@ load@@ Cach@@ e = null@@ ; } else if ((@@ !@@ (@@ cont@@ ro@@ l@@ l@@ er.get@@ Setting@@ s@@ ().get@@ U@@ se@@ Down@@ load@@ Cach@@ e@@ ())) && ((m@@ Down@@ load@@ Cach@@ e.get@@ Str@@ ate@@ g@@ y@@ ()) != (@@ Down@@ load@@ C@@ ache.@@ Str@@ ate@@ g@@ y.@@ DI@@ RE@@ C@@ T@@ ))) { m@@ Down@@ load@@ Cach@@ e = null@@ ; } } if (((@@ old@@ Setting@@ s.get@@ For@@ ce@@ H@@ ttp@@ ()) != (@@ cont@@ ro@@ l@@ l@@ er.get@@ Setting@@ s@@ ().get@@ For@@ ce@@ H@@ ttp@@ ())) || ((@@ old@@ Setting@@ s.get@@ Enable@@ Pre@@ view@@ s@@ ()) != (@@ cont@@ ro@@ l@@ l@@ er.get@@ Setting@@ s@@ ().get@@ Enable@@ Pre@@ view@@ s@@ ()))) { ref@@ res@@ h@@ S@@ ources@@ (@@ false@@ ); } }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ Method@@ Nam@@ es@@ D@@ if@@ fer@@ ing@@ On@@ ly@@ By@@ C@@ ase@@ ") public static void main@@ (@@ java.lang.String[] arg@@ s) { if (((@@ args.@@ length) == 1@@ ) && ("@@ %@@ f@@ "@@ .@@ equals(@@ arg@@ s@@ [0@@ ]@@ ))) { arg@@ s = com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ NO@@ _@@ AR@@ G@@ S@@ ; } com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ set@@ Flag@@ s(@@ arg@@ s); if (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ is@@ Head@@ l@@ ess@@ ()) { java.lang.System.@@ set@@ Property@@ (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ A@@ W@@ T_@@ H@@ E@@ AD@@ LE@@ SS@@ , java.lang.@@ Boole@@ an@@ .@@ TR@@ UE@@ .@@ toString@@ ()); } else if (@@ java.@@ aw@@ t.@@ G@@ raphic@@ s@@ En@@ vi@@ ron@@ m@@ ent.@@ is@@ Head@@ l@@ ess@@ ()) { com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ sho@@ w@@ Message@@ ("@@ Start@@ u@@ p Error@@ ", "@@ Un@@ able to d@@ et@@ ec@@ t g@@ raphic@@ s en@@ vi@@ ron@@ ment@@ ", true@@ ); java.lang.System.@@ ex@@ it@@ (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ NO@@ _@@ G@@ R@@ AP@@ H@@ IC@@ S@@ ); } else if ((@@ args.@@ length) == 0) { try { com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ in@@ stall@@ P@@ atch@@ (); } catch (java.lang.@@ Throw@@ able t@@ ) { com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ sho@@ w@@ Message@@ ("@@ Up@@ d@@ ate Faile@@ d@@ ", t@@ ); java.lang.System.@@ ex@@ it@@ (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ U@@ P@@ DA@@ TE_@@ FA@@ IL@@ ED@@ ); } } com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ create@@ Record@@ File@@ (); try { com@@ .@@ int@@ el@@ li@@ j.@@ ide.@@ B@@ oot@@ str@@ ap@@ .m@@ ain@@ (@@ arg@@ s, ((@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ M@@ ain@@ .@@ class@@ .getName@@ ()) + "@@ Imp@@ l@@ "), "@@ start@@ "); } catch (java.lang.@@ Throw@@ able t@@ ) { com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ sho@@ w@@ Message@@ ("@@ St@@ ar@@ t Faile@@ d@@ ", t@@ ); java.lang.System.@@ ex@@ it@@ (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ide@@ a.@@ Main.@@ STA@@ R@@ T@@ U@@ P@@ _@@ EX@@ CE@@ P@@ TION@@ ); } } }
@java.lang.Override public void on@@ C@@ li@@ ck@@ (android.content.@@ Di@@ alo@@ g@@ Inter@@ face di@@ alo@@ g@@ , int wh@@ i@@ ch@@ ) { set@@ Result@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ bluetooth.@@ RE@@ S@@ UL@@ T_@@ C@@ AN@@ CE@@ L@@ ED@@ ); fin@@ is@@ h@@ (); }
private void in@@ it@@ J@@ n@@ i@@ () throw@@ s java.io.IOException { java.io.File j@@ n@@ i@@ Di@@ r = new java.io.File@@ (m@@ Dir@@ , "@@ j@@ n@@ i@@ "); if (!(@@ j@@ n@@ i@@ Dir@@ .@@ exist@@ s@@ ())) { return@@ ; } if (m@@ N@@ dk@@ Project@@ ) { m@@ Native@@ Source@@ s = j@@ n@@ i@@ Dir@@ ; java.io.File m@@ ake@@ fi@@ le = new java.io.File@@ (@@ j@@ n@@ i@@ Dir@@ , "@@ Android@@ .m@@ k@@ "); if (m@@ ake@@ file.@@ exist@@ s@@ ()) { java.util.@@ reg@@ ex@@ .@@ P@@ atter@@ n p@@ atter@@ n = java.util.@@ reg@@ ex@@ .@@ P@@ attern@@ .@@ compile@@ ("@@ \@@ \@@ s@@ *@@ LO@@ C@@ AL@@ _M@@ OD@@ UL@@ E@@ \@@ \@@ s@@ *@@ :@@ =@@ \@@ \@@ s@@ *@@ (@@ \@@ \@@ S@@ +@@ )@@ \@@ s@@ *@@ "); for (java.lang.String lin@@ e : com.google.common.@@ io.@@ Fil@@ es.@@ read@@ Lin@@ es@@ (m@@ ake@@ file@@ , Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )) { java.util.@@ reg@@ ex@@ .@@ M@@ atch@@ er match@@ er = p@@ attern@@ .@@ match@@ er(@@ line@@ ); if (m@@ atch@@ er.@@ match@@ es@@ ()) { m@@ Native@@ Mod@@ ule@@ Name = match@@ er.@@ gro@@ up@@ (1@@ ); if ((m@@ Native@@ Lib@@ s) != null@@ ) { java.lang.String lib@@ Name = ("@@ lib@@ " + (m@@ Native@@ Mod@@ ule@@ Name@@ )) + "@@ .@@ so@@ "; java.util.@@ List@@ I@@ terator@@ <@@ java.io.File@@ > i@@ ter@@ at@@ or = m@@ Native@@ Lib@@ s.@@ list@@ I@@ terator@@ (); while (i@@ terator@@ .@@ has@@ Next@@ ()) { java.io.File li@@ b = i@@ terator@@ .@@ next@@ (); if (@@ lib@@ Nam@@ e.@@ equals(@@ lib@@ .getName@@ ())) { i@@ terator@@ .@@ remove@@ (); } } if (m@@ Native@@ Lib@@ s.@@ isEmpty@@ ()) { m@@ Native@@ Lib@@ s = null@@ ; } } break@@ ; } } } else { m@@ Imp@@ ort@@ er.@@ re@@ port@@ W@@ ar@@ n@@ ing@@ (@@ this@@ , get@@ Class@@ Path@@ File@@ (), ("@@ Pro@@ ject contain@@ s a j@@ n@@ i di@@ re@@ ctory@@ , bu@@ t do@@ es not h@@ av@@ e an E@@ c@@ li@@ ps@@ e C@@ /@@ C@@ +@@ + " + "@@ n@@ ature@@ : m@@ al@@ for@@ m@@ ed N@@ D@@ K pro@@ ject@@ ?@@ ")); } }
public void test_@@ set@@ Gro@@ up@@ ing@@ Se@@ par@@ ator@@ () { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f@@ ; java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s d@@ f@@ s = new java.text.@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s(@@ java.util.@@ Loc@@ a@@ le.@@ US@@ ); d@@ fs.@@ set@@ Gro@@ up@@ ing@@ Se@@ par@@ ator@@ (@@ ' '@@ ); d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ ,@@ #@@ 0.@@ 00@@ ;@@ -@@ #@@ ,@@ #@@ 0.@@ 00@@ ", d@@ f@@ s); assert@@ Equal@@ s("@@ 1 2@@ 3@@ 4@@ .@@ 00@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); d@@ f = new java.text.@@ Dec@@ im@@ al@@ Format@@ ("@@ #@@ ,@@ #@@ 0.@@ 00@@ ;@@ -@@ #@@ ,@@ #@@ 0.@@ 00@@ ;@@ -@@ #@@ ,@@ #@@ #@@ 0.@@ 00@@ ;@@ -@@ #@@ ,@@ #@@ #@@ 0.@@ 00@@ ", d@@ f@@ s); assert@@ Equal@@ s("@@ $@@ 1 2@@ 3@@ 4@@ .@@ 00@@ ", d@@ f@@ .@@ for@@ mat@@ (@@ num@@ ber@@ )); }
public static int for@@ k@@ And@@ Spec@@ i@@ aliz@@ e@@ (@@ int uid@@ , int g@@ id, int@@ [] g@@ id@@ s, int de@@ bug@@ Flag@@ s, int@@ []@@ [] r@@ li@@ m@@ it@@ s, java.lang.String SE@@ Info@@ , java.lang.String n@@ i@@ ce@@ Name@@ ) { d@@ al@@ vi@@ k.@@ system.@@ Z@@ y@@ go@@ te@@ .@@ pre@@ For@@ k@@ (); int p@@ id = d@@ al@@ vi@@ k.@@ system.@@ Z@@ y@@ go@@ te@@ .@@ native@@ For@@ k@@ And@@ Spec@@ i@@ aliz@@ e@@ (@@ uid@@ , g@@ id, g@@ id@@ s, de@@ bug@@ Flag@@ s, r@@ li@@ m@@ it@@ s, SE@@ Info@@ , n@@ i@@ ce@@ Name); d@@ al@@ vi@@ k.@@ system.@@ Z@@ y@@ go@@ te@@ .@@ po@@ st@@ For@@ k@@ (); return p@@ id@@ ; }
public void test_@@ Con@@ stru@@ ctor@@ L@@ java@@ _@@ n@@ p@@ _@@ n@@ es@@ _@@ in@@ stru@@ ction@@ () { java.text.@@ Dec@@ im@@ al@@ Format@@ (); java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f@@ 2 = ((@@ java.text.@@ Dec@@ im@@ al@@ Format@@ ) (d@@ f@@ 1.@@ c@@ lon@@ e@@ ())); assert@@ True@@ ("@@ Has@@ h code@@ s of equal@@ s ob@@ ject ar@@ e not equal@@ ", ((@@ d@@ f@@ 2.@@ has@@ h@@ Code@@ ()) == (d@@ f@@ 1.@@ has@@ h@@ Code@@ ()))); }
public void test_@@ Con@@ stru@@ ctor@@ Z@@ () throw@@ s java.lang.Exception { java.util.@@ Tim@@ er t = null@@ ; try { t = new java.util.@@ Tim@@ er@@ (@@ true@@ ); tests.@@ api.@@ java.util.@@ Tim@@ er@@ Test.@@ Tim@@ er@@ Test@@ T@@ as@@ k test@@ T@@ as@@ k = new tests.@@ api.@@ java.util.@@ Tim@@ er@@ Test.@@ Tim@@ er@@ Test@@ Task@@ (); t.@@ s@@ ch@@ ed@@ ule@@ (@@ test@@ Task@@ , 2@@ 00@@ ); aw@@ ait@@ Run@@ (@@ test@@ Task@@ ); t.@@ can@@ cel@@ (); } final@@ l@@ y { if (@@ t != null@@ ) t.@@ can@@ cel@@ (); } }
@org.junit.Test public void compile@@ With@@ Annot@@ ation@@ Process@@ or@@ No@@ A@@ ut@@ o@@ _@@ class@@ path@@ () throw@@ s java.lang.Exception { com.android.jack.test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ a@@ in ja@@ c@@ k = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Bas@@ ed@@ Too@@ lch@@ ain@@ .@@ class@@ ); java.io.File jack@@ O@@ u@@ t = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (); java.io.File process@@ or@@ s = com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.get@@ No@@ Config@@ Process@@ or@@ s(); jack.@@ set@@ Annot@@ ation@@ Process@@ or@@ Class@@ es@@ (java.util.@@ Collection@@ s.@@ sing@@ let@@ on@@ List@@ (com.android.jack.@@ annotation.@@ process@@ or.@@ s@@ am@@ p@@ le.@@ process@@ or@@ s.@@ Source@@ Annot@@ ation@@ Process@@ or@@ .@@ class@@ .getName@@ ())); jack.@@ add@@ To@@ Class@@ path@@ (@@ jack@@ .get@@ Default@@ B@@ oot@@ Class@@ path@@ ()); jack.@@ add@@ To@@ Class@@ path@@ (pro@@ cess@@ or@@ s); jack.@@ src@@ To@@ Lib@@ (@@ jack@@ Out@@ , false@@ , com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.@@ AN@@ NO@@ TA@@ TION@@ S_@@ DI@@ R@@ , com.android.jack.@@ annotation.@@ process@@ or.@@ Annot@@ ation@@ Process@@ or@@ Test@@ s.@@ AN@@ NO@@ TA@@ TED@@ _@@ DI@@ R@@ ); com.android.jack.library.@@ Input@@ Jack@@ Librar@@ y lib@@ O@@ u@@ t = com.android.jack.library.@@ Jack@@ Library@@ Fa@@ ctory@@ .get@@ Input@@ Library@@ (@@ new com.android.sched.vfs.@@ Dire@@ ct@@ F@@ S@@ (@@ new com.android.sched.util.file.@@ Directory@@ (@@ jack@@ O@@ u@@ t.get@@ Path@@ (), null@@ , com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ Ex@@ ist@@ en@@ ce.@@ M@@ U@@ ST_@@ EX@@ IS@@ T, com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ Permission@@ .@@ RE@@ AD@@ , com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ Change@@ Permission@@ .@@ NO@@ CH@@ AN@@ G@@ E@@ ), com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ Permission@@ .@@ RE@@ AD@@ )); junit.framework.@@ Asser@@ t@@ .@@ assert@@ False@@ (@@ lib@@ O@@ u@@ t.@@ contain@@ s@@ File@@ Type@@ (@@ File@@ Type.@@ RS@@ C@@ )); lib@@ O@@ u@@ t.get@@ File@@ (@@ File@@ Type.@@ J@@ A@@ Y@@ CE@@ , new com.android.sched.vfs.@@ V@@ Path@@ ("@@ Annot@@ ated@@ 2@@ D@@ up@@ li@@ cat@@ ed@@ ", '@@ /@@ '@@ )); }
public void set@@ Var@@ (@@ int index@@ , do@@ ub@@ le v@@ ) { m@@ RS@@ .@@ n@@ Script@@ Set@@ Var@@ D@@ (get@@ ID@@ (mRS), index@@ , v@@ , m@@ U@@ se@@ In@@ c@@ Sup@@ p@@ ); }
@org.junit.Test public void test@@ Comp@@ ile@@ 0@@ 2@@ 1@@ () throw@@ s java.lang.Exception { java.lang.String package@@ Name = "@@ com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ test@@ 0@@ 2@@ 1.@@ jack@@ "; java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > input@@ 1 = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); { input@@ 1.@@ put@@ ("@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ ("@@ java@@ -@@ lan@@ g@@ -@@ Thread@@ $@@ State@@ ", true@@ )); } java.util.Map@@ <java.lang.String, com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ > input@@ 2 = com.google.common.@@ colle@@ ct.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ (); { input@@ 2.@@ put@@ ("@@ S@@ wit@@ ch@@ 1@@ ", new com.android.@@ jack@@ .@@ switch@@ state@@ m@@ ent.@@ S@@ wit@@ ch@@ state@@ ment@@ Test@@ s.@@ V@@ er@@ if@@ ier@@ Info@@ (@@ true@@ ).@@ s@@ pe@@ c@@ if@@ y@@ Info@@ ("@@ java@@ -@@ lan@@ g@@ -@@ Thread@@ $@@ State@@ ", true@@ )); } compile@@ Code@@ (@@ package@@ Name, input@@ 1, input@@ 2@@ ); }
public int s@@ ync@@ Get@@ Sup@@ ported@@ Fe@@ at@@ ur@@ es(@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ util.@@ As@@ ync@@ Chan@@ ne@@ l chan@@ nel@@ ) { android.os.@@ Message result@@ M@@ s@@ g = channe@@ l.@@ send@@ Message@@ S@@ ynch@@ ro@@ no@@ us@@ ly@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ StateMachine.@@ C@@ M@@ D_@@ G@@ E@@ T_@@ S@@ U@@ P@@ P@@ OR@@ TED@@ _@@ F@@ E@@ AT@@ U@@ RE@@ S@@ ); int suppor@@ ted@@ Fe@@ ature@@ Se@@ t = result@@ M@@ s@@ g.@@ arg@@ 1; result@@ M@@ s@@ g.@@ re@@ c@@ y@@ cle@@ (); boolean dis@@ able@@ R@@ t@@ t = android.os.@@ System@@ Properties@@ .get@@ Boole@@ an@@ ("@@ config.@@ dis@@ able@@ _@@ r@@ tt@@ ", false@@ ); if (d@@ is@@ able@@ R@@ tt@@ ) { suppor@@ ted@@ Fe@@ ature@@ Se@@ t &@@ = ~@@ ((@@ W@@ if@@ i@@ Man@@ g@@ er.@@ WI@@ FI@@ _@@ F@@ E@@ AT@@ UR@@ E_@@ D@@ 2@@ D_@@ R@@ T@@ T@@ ) | (@@ W@@ if@@ i@@ Man@@ g@@ er.@@ WI@@ FI@@ _@@ F@@ E@@ AT@@ UR@@ E_@@ D@@ 2@@ AP@@ _@@ R@@ T@@ T@@ )); } return suppor@@ ted@@ Fe@@ ature@@ Set@@ ; }
private static java.lang.String m@@ ap@@ To@@ String@@ (java.util.@@ Map@@ <java.lang.String, java.lang.Integ@@ er@@ > m@@ ap@@ ) { java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ ("@@ "); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.Integ@@ er@@ > e@@ n@@ try : m@@ ap.@@ e@@ n@@ try@@ Set@@ ()) { sb.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ s %@@ d@@ \n@@ ", e@@ n@@ try@@ .get@@ Key@@ (), e@@ n@@ try@@ .get@@ Value@@ ())); } return sb.@@ toString@@ (); }
private void dum@@ p@@ Met@@ ri@@ c@@ s(@@ java.io.FileDescriptor f@@ d@@ ) { android.util.Log.@@ i@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, "@@ dum@@ p@@ Met@@ ri@@ c@@ s@@ "); com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Bluetooth@@ Lo@@ g m@@ et@@ ri@@ c@@ s = new com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Bluetooth@@ Pro@@ to.@@ Bluetooth@@ Log@@ (); m@@ et@@ ri@@ c@@ s.@@ set@@ Num@@ B@@ ond@@ ed@@ De@@ vices@@ (get@@ B@@ ond@@ ed@@ De@@ vices@@ ().@@ length); for (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Profile@@ Ser@@ vice pro@@ fi@@ le : m@@ Pro@@ fil@@ es) { pro@@ file.@@ dum@@ p@@ Pro@@ to@@ (m@@ et@@ ri@@ c@@ s); } byte@@ [] native@@ Met@@ ri@@ c@@ s@@ Byte@@ s = dum@@ p@@ Met@@ ri@@ c@@ s@@ Native@@ (); android.util.Log.@@ i@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, ("@@ dum@@ p@@ Met@@ ri@@ c@@ s, native m@@ et@@ ri@@ c@@ s siz@@ e is " + (@@ native@@ Met@@ ri@@ c@@ s@@ By@@ t@@ es.@@ length@@ ))); try { m@@ et@@ ri@@ c@@ s.@@ m@@ er@@ ge@@ From@@ (@@ native@@ Met@@ ri@@ c@@ s@@ Bytes@@ ); } catch (@@ com.google.@@ pro@@ to@@ bu@@ f@@ .m@@ ic@@ ro@@ .@@ In@@ valid@@ Pro@@ to@@ col@@ Buffer@@ M@@ ic@@ ro@@ Exception ex@@ ) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, ("@@ Pro@@ ble@@ m par@@ s@@ ing m@@ et@@ ri@@ c@@ s Pro@@ to@@ bu@@ f@@ : " + (@@ ex@@ .get@@ Message@@ ()))); return@@ ; } byte@@ [] m@@ et@@ ri@@ c@@ s@@ Byte@@ s = android.util.@@ Base@@ 6@@ 4@@ .@@ en@@ code@@ (m@@ et@@ ri@@ c@@ s.@@ to@@ ByteArray@@ (), Base@@ 6@@ 4@@ .@@ DE@@ FA@@ UL@@ T@@ ); android.util.Log.@@ i@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service.TAG, ("@@ dum@@ p@@ Met@@ ri@@ c@@ s, com@@ b@@ ine@@ d m@@ et@@ ri@@ c@@ s siz@@ e is " + (m@@ et@@ ri@@ c@@ s@@ By@@ t@@ es.@@ length@@ ))); try (@@ java.io.File@@ Output@@ Stream pro@@ to@@ O@@ u@@ t = new java.io.File@@ Output@@ Stream@@ (f@@ d@@ )) { pro@@ to@@ O@@ u@@ t.@@ write@@ (m@@ et@@ ri@@ c@@ s@@ Bytes@@ ); } catch (java.io.IOException e) { error@@ Log@@ ("@@ Un@@ able to w@@ ri@@ t@@ e J@@ av@@ a pro@@ to@@ bu@@ f to fi@@ le des@@ crip@@ tor.@@ "); } }
public void test_@@ get@@ Network@@ Interface@@ () throw@@ s java.io.IOException { java.net.@@ Multi@@ cast@@ S@@ ock@@ et ms@@ s = new java.net.@@ Multi@@ cast@@ Socket@@ (@@ 0); java.net.@@ Network@@ Inter@@ face th@@ e@@ Inter@@ face = ms@@ s.get@@ Network@@ Interface@@ (); assert@@ True@@ (("@@ net@@ wor@@ k int@@ er@@ face return@@ ed w@@ ron@@ g net@@ wor@@ k int@@ er@@ face wh@@ e@@ n not set@@ :@@ " + th@@ e@@ Interface@@ ), th@@ e@@ Interface@@ .get@@ Inet@@ Address@@ es@@ ().@@ has@@ M@@ ore@@ Element@@ s()); java.net.Inet@@ Address fi@@ r@@ st@@ Address = th@@ e@@ Interface@@ .get@@ Inet@@ Address@@ es@@ ().@@ next@@ Element@@ (); assert@@ True@@ (@@ fi@@ r@@ st@@ Addres@@ s.@@ is@@ An@@ y@@ Local@@ Address@@ ()); ms@@ s.@@ set@@ Network@@ Interface@@ (@@ ip@@ v@@ 4@@ Network@@ Interface@@ ); assert@@ Equal@@ s("@@ get@@ Network@@ Inter@@ face d@@ id not return int@@ er@@ face set b@@ y set@@ Ne@@ work@@ Interface@@ ", ip@@ v@@ 4@@ Network@@ Interface@@ , ms@@ s.get@@ Network@@ Interface@@ ()); ms@@ s.@@ set@@ Network@@ Interface@@ (@@ lo@@ op@@ back@@ Interface@@ ); assert@@ Equal@@ s@@ (("@@ get@@ Network@@ Inter@@ face d@@ id not return net@@ wor@@ k int@@ er@@ face set b@@ y sec@@ ond@@ " + " set@@ Network@@ Inter@@ face call@@ "), lo@@ op@@ back@@ Interface@@ , ms@@ s.get@@ Network@@ Interface@@ ()); ms@@ s.@@ close(); if ((@@ ip@@ v@@ 6@@ Network@@ Interface@@ ) != null@@ ) { ms@@ s = new java.net.@@ Multi@@ cast@@ Socket@@ (@@ 0); ms@@ s.@@ set@@ Network@@ Interface@@ (@@ ip@@ v@@ 6@@ network@@ Interface@@ ); assert@@ Equal@@ s("@@ get@@ Network@@ Inter@@ face d@@ id not return int@@ er@@ face set b@@ y set@@ Ne@@ work@@ Interface@@ ", ip@@ v@@ 6@@ network@@ Interface@@ , ms@@ s.get@@ Network@@ Interface@@ ()); ms@@ s.@@ close(); } ms@@ s = new java.net.@@ Multi@@ cast@@ Socket@@ (@@ 0); java.util.@@ En@@ um@@ er@@ ation addres@@ se@@ s = ip@@ v@@ 4@@ Network@@ Interface@@ .get@@ Inet@@ Address@@ es@@ (); if (@@ addres@@ s@@ es.@@ has@@ M@@ ore@@ Element@@ s@@ ()) { fi@@ r@@ st@@ Address = ((@@ java.net.Inet@@ Addres@@ s) (@@ addres@@ s@@ es.@@ next@@ Element@@ ())); ms@@ s.@@ set@@ Interface@@ (@@ fi@@ r@@ st@@ Addres@@ s); assert@@ Equal@@ s("@@ get@@ Network@@ Inter@@ face d@@ id not return int@@ er@@ face set b@@ y set@@ Interface@@ ", ip@@ v@@ 4@@ Network@@ Interface@@ , ms@@ s.get@@ Network@@ Interface@@ ()); } ms@@ s.@@ close(); }
@java.lang.Override public void remove@@ Ims@@ Fe@@ ature@@ (@@ int s@@ lot@@ Id, int f@@ e@@ ature@@ ) throw@@ s android.os.@@ RemoteException { synchronized@@ (m@@ Fe@@ at@@ ur@@ es) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (android.@@ telephony.@@ ims.@@ M@@ OD@@ I@@ F@@ Y@@ _P@@ H@@ ON@@ E_@@ STA@@ TE@@ , "@@ create@@ Ims@@ Fe@@ ature@@ "); on@@ Remo@@ ve@@ Ims@@ Fe@@ ature@@ Inter@@ nal@@ (s@@ lot@@ Id, f@@ e@@ ature@@ ); } }
@javax.annotation.@@ N@@ on@@ null private static java.lang.String con@@ ver@@ t@@ Name@@ To@@ P@@ attern@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ Name@@ For@@ ma@@ t for@@ mat@@ ) { java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (); for (@@ int i = 0; i < (@@ nam@@ e.@@ length@@ ()); i++) { char c = name@@ .@@ char@@ At@@ (i@@ ); switch (c@@ ) { case '@@ ?@@ ' : com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ append@@ P@@ attern@@ Not@@ Se@@ par@@ ator@@ (@@ for@@ mat@@ , s@@ b@@ ); break@@ ; case '@@ *@@ ' : int j = i + 1; if ((@@ j < (@@ nam@@ e.@@ length@@ ())) && ((@@ name@@ .@@ char@@ At@@ (@@ j@@ )) == '@@ *@@ '@@ )) { sb.@@ append("@@ .@@ *@@ "); i@@ ++@@ ; } else { com.android.jack.@@ sh@@ ro@@ b.@@ pro@@ gu@@ ard@@ .@@ G@@ ram@@ m@@ ar@@ Action@@ s.@@ append@@ P@@ attern@@ Not@@ Se@@ par@@ ator@@ (@@ for@@ mat@@ , s@@ b@@ ); sb.@@ append("@@ *@@ "); } break@@ ; case '@@ $@@ ' : sb.@@ append("@@ \@@ \@@ $@@ "); break@@ ; default : sb.@@ append@@ (c@@ ); break@@ ; } } return sb.@@ toString@@ (); }
public void write@@ To@@ Par@@ cel@@ (android.os.@@ Par@@ ce@@ l out, int flag@@ s) { out.@@ write@@ Par@@ cel@@ able@@ (@@ new android.os.@@ Par@@ cel@@ U@@ uid@@ (m@@ U@@ uid@@ ), 0); out.@@ write@@ Int@@ (m@@ Instance@@ Id); out.@@ write@@ Int@@ (m@@ Service@@ Type@@ ); out.@@ write@@ Typ@@ ed@@ Array@@ (m@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s.@@ to@@ Array@@ (@@ new android.@@ bluetooth.Bluetooth@@ G@@ att@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ [0@@ ]@@ ), 0); android.@@ bluetooth.Bluetooth@@ G@@ att@@ In@@ c@@ lu@@ d@@ ed@@ Service@@ [] in@@ c@@ lu@@ d@@ ed@@ Service@@ s = new android.@@ bluetooth.Bluetooth@@ G@@ att@@ In@@ c@@ lu@@ d@@ ed@@ Service@@ [@@ m@@ In@@ c@@ lu@@ d@@ ed@@ Ser@@ vices.@@ size@@ ()@@ ]; int i = 0; for (android.bluetooth.Bluetooth@@ G@@ att@@ Ser@@ vice s : m@@ In@@ c@@ lu@@ d@@ ed@@ Ser@@ vices@@ ) { in@@ c@@ lu@@ d@@ ed@@ Ser@@ vices@@ [i@@ ] = new android.@@ bluetooth.Bluetooth@@ G@@ att@@ In@@ c@@ lu@@ d@@ ed@@ Service@@ (@@ s.get@@ U@@ uid@@ (), s.get@@ Instance@@ Id@@ (), s.get@@ Type@@ ()); i@@ ++@@ ; } out.@@ write@@ Typ@@ ed@@ Array@@ (in@@ c@@ lu@@ d@@ ed@@ Ser@@ vices@@ , 0); }
@javax.annotation.@@ N@@ on@@ null @java.lang.Override java.io.@@ Output@@ Stream open@@ W@@ rite@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Par@@ ent@@ V@@ File file@@ ) throw@@ s com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { assert !@@ (is@@ C@@ lo@@ sed@@ ()); assert cap@@ abili@@ ties.@@ contain@@ s(@@ Capabili@@ ties.@@ W@@ R@@ I@@ TE@@ ); java.io.File p@@ ath = get@@ Native@@ File@@ (file@@ .get@@ Path@@ ()); try { return new java.io.File@@ Output@@ Stream@@ (p@@ ath@@ ); } catch (@@ java.io.File@@ Not@@ F@@ ound@@ Exception e) { com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ check@@ Permission@@ s(@@ path@@ , file@@ .get@@ Location@@ (), Permission@@ .@@ W@@ R@@ I@@ TE@@ ); throw new com.android.sched.util.@@ Con@@ current@@ IO@@ Exception(@@ e); } }
public static void com@@ pu@@ te@@ A@@ co@@ s@@ pi@@ (android.@@ renderscript.@@ cts.@@ Test@@ A@@ co@@ s@@ p@@ i.@@ Argument@@ s@@ Float@@ F@@ lo@@ at arg@@ s) { args.@@ ul@@ f = 5@@ ; args.@@ ul@@ f@@ Relax@@ ed = 12@@ 8@@ ; args.@@ out = (@@ (@@ float@@ ) ((@@ java.lang.Str@@ i@@ ct@@ M@@ ath.@@ a@@ co@@ s(@@ args.@@ in@@ )) / (@@ java.lang.Str@@ i@@ ct@@ M@@ ath.@@ P@@ I@@ ))); }
@java.lang.Override void on@@ St@@ op@@ () { if (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Man@@ ual@@ Dis@@ cover@@ y.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Man@@ ual@@ Dis@@ cover@@ y.@@ TAG, "@@ on@@ St@@ op@@ "); m@@ W@@ if@@ i@@ Monitor@@ .@@ close(); all@@ P@@ r@@ int@@ er@@ s@@ Lo@@ st@@ (); }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ k@@ er@@ nel@@ 3@@ d s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ k@@ er@@ nel@@ 3@@ d@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); in@@ itializ@@ e@@ G@@ lo@@ b@@ al@@ s(@@ p@@ RS@@ , s); s@@ .@@ for@@ Each@@ _@@ in@@ it@@ _@@ va@@ r@@ s(@@ A@@ ); s@@ .@@ for@@ Each@@ _@@ ro@@ o@@ t@@ (@@ A@@ , B@@ ); s.@@ invok@@ e@@ _@@ ve@@ r@@ if@@ y@@ _@@ ro@@ o@@ t@@ (); s.@@ invok@@ e@@ _@@ k@@ er@@ nel@@ _test@@ (); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
public static boolean contain@@ s@@ Attribute@@ (@@ java.util.ArrayList<@@ com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ des@@ crip@@ tor@@ s.@@ Attribute@@ Descrip@@ tor@@ > at@@ tri@@ b@@ ut@@ es@@ , java.lang.String ns@@ U@@ ri@@ , com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info info@@ ) { java.lang.String xml@@ Local@@ Name = info@@ .getName@@ (); for (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ des@@ crip@@ tor@@ s.@@ Attribute@@ Descriptor des@@ c : at@@ tri@@ b@@ ut@@ es) { if (d@@ es@@ c@@ .get@@ Xml@@ Local@@ Name@@ ().@@ equals(@@ xml@@ Local@@ Name@@ )) { if ((@@ ns@@ Ur@@ i == (d@@ es@@ c@@ .get@@ Nam@@ es@@ p@@ a@@ ce@@ U@@ ri@@ ())) || ((@@ ns@@ Ur@@ i != null@@ ) && (@@ ns@@ U@@ ri@@ .@@ equals(@@ des@@ c@@ .get@@ Nam@@ es@@ p@@ a@@ ce@@ U@@ ri@@ ()@@ )@@ ))) { return true@@ ; } } return false@@ ; }
@java.lang.Override com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Reference@@ I@@ ter@@ at@@ or get@@ Re@@ feren@@ ces@@ () { java.util.List<@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Reference@@ > ref@@ s = new java.util.@@ Abstract@@ List<@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Reference@@ >@@ () { @java.lang.Override public int size@@ () { return m@@ Field@@ Valu@@ es.@@ length@@ ; } @java.lang.Override public com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Re@@ feren@@ ce get@@ (@@ int index@@ ) { com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Field@@ Value fi@@ el@@ d = m@@ Field@@ Valu@@ es@@ [@@ index@@ ]; com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Value valu@@ e = field@@ .@@ value@@ ; if ((@@ valu@@ e != null@@ ) && (@@ valu@@ e.@@ is@@ A@@ hat@@ Instance@@ ())) { boolean st@@ ron@@ g = (!(@@ field@@ .@@ nam@@ e.@@ equal@@ s("@@ re@@ fer@@ ent@@ "@@ ))) || (!(@@ is@@ Instance@@ Of@@ Class@@ ("@@ java.lang.@@ re@@ f.@@ Reference@@ "@@ ))); return new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Reference@@ (s@@ rc@@ , ("@@ .@@ " + (@@ field@@ .@@ name@@ )), valu@@ e.@@ as@@ A@@ hat@@ Instance@@ (), st@@ ron@@ g@@ ); } return null@@ ; } }; return new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ Reference@@ I@@ terator@@ (re@@ f@@ s); }
@java.lang.Override protected void p@@ r@@ int@@ Filter@@ ed@@ Pro@@ b@@ lem@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ re@@ port@@ ing.@@ Re@@ port@@ ab@@ le.@@ Pro@@ b@@ lem@@ Leve@@ l pro@@ b@@ lem@@ Level@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String message@@ , @javax.annotation.@@ Check@@ For@@ Null java.lang.String file@@ Name, int start@@ Line@@ , int end@@ Line@@ , int start@@ Co@@ lum@@ n@@ , int end@@ Co@@ lum@@ n@@ ) { java.lang.String@@ Buff@@ er message@@ Buff@@ er = new java.lang.String@@ Buffer@@ (pro@@ b@@ lem@@ Level.@@ toString@@ ()); message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); if (file@@ Name != null@@ ) { message@@ Buff@@ er.@@ append(@@ file@@ Name); } message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); if (@@ start@@ Lin@@ e >@@ = 0) { message@@ Buff@@ er.@@ append(@@ start@@ Line@@ ); } message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); if (@@ end@@ Lin@@ e >@@ = 0) { message@@ Buff@@ er.@@ append(@@ end@@ Line@@ ); } message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); if (@@ start@@ Co@@ lum@@ n >@@ = 0) { message@@ Buff@@ er.@@ append(@@ start@@ Co@@ lum@@ n@@ ); } message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); if (@@ end@@ Co@@ lum@@ n >@@ = 0) { message@@ Buff@@ er.@@ append(@@ end@@ Co@@ lum@@ n@@ ); } message@@ Buff@@ er.@@ append@@ (com.android.jack.@@ re@@ port@@ ing.@@ Sdk@@ Re@@ port@@ er.@@ ME@@ SS@@ A@@ G@@ E_@@ SE@@ P@@ AR@@ AT@@ OR@@ ); message@@ Buff@@ er.@@ append@@ (m@@ ess@@ age@@ ); java.io.@@ P@@ r@@ int@@ Stream p@@ r@@ int@@ er = str@@ eam@@ By@@ Leve@@ l.get@@ (pro@@ b@@ lem@@ Level@@ ); if (p@@ r@@ int@@ er == null@@ ) { p@@ r@@ int@@ er = re@@ por@@ ter@@ Stream@@ ; } p@@ r@@ int@@ er.@@ p@@ r@@ int@@ ln@@ (m@@ ess@@ age@@ Buff@@ er.@@ toString@@ ()); }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 4@@ .@@ Fail@@ Test@@ .@@ class@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Fail@@ Test@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ ("@@ fail@@ ure@@ ", "@@ java.lang.@@ Asser@@ tion@@ Error@@ : fa@@ ile@@ d.@@ \n@@ ").@@ su@@ ccess@@ ("@@ su@@ ccess@@ ").@@ su@@ ccess@@ (@@ "@@ throw@@ A@@ no@@ th@@ er@@ Ex@@ pec@@ ted@@ Exception@@ ").@@ fail@@ ure@@ (@@ "@@ throw@@ Exception@@ ", "@@ java.lang.Runtime@@ Exception@@ : excepti@@ on@@ \n@@ ").@@ su@@ ccess@@ (@@ "@@ throw@@ Ex@@ pec@@ ted@@ Exception@@ ").@@ com@@ pl@@ et@@ ed@@ N@@ or@@ m@@ all@@ y@@ (); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s android.os.@@ Remote@@ Exception, android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Object@@ Not@@ F@@ ound@@ Exception { android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device m@@ Device = android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Device@@ .get@@ Instance@@ (in@@ strument@@ ation@@ ); if (!(m@@ Device@@ .is@@ S@@ cre@@ en@@ On@@ ())) { m@@ Device.@@ w@@ ake@@ Up@@ (); m@@ Device.@@ wait@@ (android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ Un@@ ti@@ l.@@ has@@ Object@@ (android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ B@@ y.@@ res@@ ("@@ android@@ ", "@@ g@@ low@@ _@@ p@@ ad@@ _@@ view@@ "@@ )), 1@@ 0000@@ ); m@@ Device.@@ sw@@ ip@@ e@@ (@@ 5@@ 6@@ 0, 1@@ 5@@ 00@@ , 5@@ 6@@ 0, 1@@ 00@@ 0, 4@@ 0); } m@@ Device.@@ pres@@ s@@ H@@ om@@ e@@ (); }
@java.lang.Override public void send@@ (@@ byte@@ [] data@@ ) throw@@ s java.io.IOException { m@@ Socket@@ .@@ send@@ (@@ new java.net.@@ Dat@@ ag@@ ram@@ Packet@@ (d@@ ata@@ , data@@ .@@ length@@ )); }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { if ((@@ com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ us@@ b.@@ U@@ s@@ b@@ Access@@ or@@ y@@ Test@@ Ac@@ tivity.@@ AC@@ TION_@@ US@@ B@@ _P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ .@@ equal@@ s@@ (@@ int@@ ent.get@@ Action@@ ())) || (@@ U@@ s@@ b@@ Manager.@@ AC@@ TION_@@ US@@ B@@ _@@ AC@@ CE@@ SS@@ OR@@ Y_@@ AT@@ TA@@ CH@@ ED@@ .@@ equal@@ s@@ (@@ int@@ ent.get@@ Action@@ ()))) { android.hardware.@@ us@@ b.@@ U@@ s@@ b@@ Access@@ or@@ y ac@@ cess@@ or@@ y = int@@ ent.get@@ Par@@ cel@@ able@@ Extra@@ (@@ U@@ s@@ b@@ Manager.@@ EX@@ TR@@ A@@ _@@ AC@@ CE@@ SS@@ OR@@ Y); if (@@ int@@ ent.get@@ Boole@@ an@@ Extra@@ (@@ U@@ s@@ b@@ Manager.@@ EX@@ TR@@ A@@ _P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ _@@ G@@ R@@ AN@@ TED@@ , false@@ )) { open@@ Access@@ or@@ y@@ (@@ ac@@ cess@@ or@@ y@@ ); } else { android.util.Log.@@ i@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ us@@ b.@@ U@@ s@@ b@@ Access@@ or@@ y@@ Test@@ Ac@@ tivity.@@ TAG, "@@ Per@@ mis@@ sion d@@ en@@ i@@ ed.@@ .@@ "); } m@@ Permission@@ Request@@ P@@ end@@ ing = false@@ ; } else if (@@ U@@ s@@ b@@ Manager.@@ AC@@ TION_@@ US@@ B@@ _@@ AC@@ CE@@ SS@@ OR@@ Y_@@ DE@@ TA@@ CH@@ ED@@ .@@ equal@@ s@@ (@@ int@@ ent.get@@ Action@@ ())) { android.hardware.@@ us@@ b.@@ U@@ s@@ b@@ Access@@ or@@ y ac@@ cess@@ or@@ y = int@@ ent.get@@ Par@@ cel@@ able@@ Extra@@ (@@ U@@ s@@ b@@ Manager.@@ EX@@ TR@@ A@@ _@@ AC@@ CE@@ SS@@ OR@@ Y); if ((@@ ac@@ cess@@ or@@ y != null@@ ) && (@@ ac@@ cess@@ or@@ y.@@ equal@@ s@@ (m@@ Access@@ or@@ y@@ ))) { close@@ Access@@ or@@ y@@ (); } }
private void sho@@ w@@ In@@ com@@ ing@@ Call@@ No@@ t@@ if@@ ic@@ ation@@ (com.android.server.@@ telecom.@@ Cal@@ l call@@ ) { android.telecom.@@ Log.@@ i@@ (@@ this@@ , "@@ sho@@ w@@ In@@ com@@ ing@@ Call@@ No@@ t@@ if@@ ic@@ ation sho@@ w@@ Cal@@ l = %@@ s", call@@ ); java.lang.String name = "@@ "; if ((@@ cal@@ l.get@@ Call@@ er@@ Display@@ Name@@ P@@ res@@ ent@@ ation@@ ()) == (android.@@ telecom.@@ Tele@@ com@@ Manager.@@ P@@ RE@@ S@@ EN@@ TA@@ TION_@@ AL@@ LO@@ W@@ ED@@ )) { name = cal@@ l.get@@ Call@@ er@@ Display@@ Name@@ (); } if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ name@@ )) { name = cal@@ l.get@@ Name@@ (); } android.app.@@ No@@ t@@ if@@ ic@@ ation.@@ Builder bu@@ ilder = get@@ No@@ t@@ if@@ ic@@ ation@@ Builder@@ (c@@ al@@ l.get@@ Target@@ Phone@@ Ac@@ count@@ L@@ ab@@ el@@ (), name@@ , cal@@ l.get@@ Phone@@ Number@@ ()); m@@ No@@ t@@ if@@ ic@@ ation@@ Manager.@@ not@@ if@@ y@@ (com.android.server.@@ telecom.@@ ui.@@ In@@ com@@ ing@@ Call@@ No@@ t@@ if@@ i@@ er.@@ NO@@ TI@@ F@@ IC@@ A@@ TION_@@ IN@@ C@@ O@@ M@@ ING@@ _C@@ AL@@ L, builder.@@ build@@ ()); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); when(m@@ Mock@@ In@@ ject@@ or@@ .get@@ W@@ if@@ i@@ A@@ war@@ e@@ State@@ Manager@@ ()).@@ thenReturn@@ (m@@ A@@ war@@ e@@ State@@ Manager@@ ); m@@ D@@ u@@ t = new com.android.server.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ Native@@ (m@@ Mock@@ In@@ ject@@ or@@ , false@@ ); when(m@@ Mock@@ In@@ ject@@ or@@ .get@@ W@@ if@@ i@@ A@@ war@@ e@@ Native@@ ()).@@ thenReturn@@ (m@@ D@@ ut@@ ); com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Mock@@ Utils.@@ in@@ it@@ H@@ al@@ Mock@@ Library@@ (); com.android.server.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ H@@ al@@ Mock@@ .@@ in@@ it@@ A@@ war@@ e@@ H@@ al@@ Mock@@ Library@@ (m@@ D@@ ut@@ ); com.android.server.@@ w@@ if@@ i.@@ aw@@ ar@@ e.@@ W@@ if@@ i@@ A@@ war@@ e@@ N@@ ativ@@ e.@@ in@@ it@@ A@@ war@@ e@@ Handler@@ s@@ Native@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Native@@ .@@ class@@ , W@@ if@@ i@@ N@@ ativ@@ e.@@ s@@ W@@ lan@@ 0@@ Index@@ ); com.android.server.@@ w@@ if@@ i.@@ H@@ al@@ Mock@@ Utils.@@ set@@ H@@ al@@ Mock@@ Object@@ (m@@ A@@ war@@ e@@ H@@ al@@ Mock@@ ); }
public static java.lang.String[] check@@ Enabled@@ Pro@@ to@@ col@@ s(@@ java.lang.String[] pro@@ to@@ col@@ s) { if (pro@@ to@@ col@@ s == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception("@@ pro@@ to@@ col@@ s == null@@ "); } pro@@ to@@ col@@ s = org.conscrypt.@@ P@@ la@@ t@@ for@@ m.@@ fil@@ ter@@ Pro@@ to@@ col@@ s@@ I@@ f@@ Ne@@ ed@@ (pro@@ to@@ col@@ s); for (@@ int i = 0; i < (pro@@ to@@ co@@ ls.@@ length); i++) { java.lang.String pro@@ to@@ co@@ l = pro@@ to@@ col@@ s@@ [i@@ ]; if (pro@@ to@@ co@@ l == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception@@ ((("@@ pro@@ to@@ col@@ s@@ [@@ " + i@@ ) + "@@ ] == null@@ ")); } if ((@@ (!(@@ pro@@ to@@ co@@ l.@@ equals(@@ org.conscrypt.@@ NativeCryp@@ to.@@ S@@ U@@ P@@ P@@ OR@@ TED@@ _P@@ RO@@ TO@@ C@@ O@@ L_@@ T@@ L@@ S@@ V@@ 1@@ ))) && (!(@@ pro@@ to@@ co@@ l.@@ equals(@@ org.conscrypt.@@ NativeCryp@@ to.@@ S@@ U@@ P@@ P@@ OR@@ TED@@ _P@@ RO@@ TO@@ C@@ O@@ L_@@ T@@ L@@ S@@ V@@ 1_@@ 1@@ )@@ ))) && (!(@@ pro@@ to@@ co@@ l.@@ equals(@@ org.conscrypt.@@ NativeCryp@@ to.@@ S@@ U@@ P@@ P@@ OR@@ TED@@ _P@@ RO@@ TO@@ C@@ O@@ L_@@ T@@ L@@ S@@ V@@ 1_@@ 2@@ )@@ ))) { throw new java.lang.Illegal@@ Argument@@ Exception@@ ((("@@ pro@@ to@@ co@@ l " + pro@@ to@@ col@@ ) + " is not suppor@@ ted@@ ")); } } return pro@@ to@@ col@@ s; }
@java.lang.Override public void handle@@ (@@ com.@@ s@@ un@@ .@@ net.@@ h@@ ttp@@ server.@@ H@@ ttp@@ Ex@@ chan@@ g@@ e ex@@ chan@@ g@@ e) throw@@ s java.io.IOException { java.lang.@@ Class@@ Load@@ er load@@ er = com.android.ahat.@@ St@@ ati@@ c@@ Handler@@ .@@ class@@ .get@@ Class@@ Load@@ er@@ (); java.io.@@ Input@@ Stream is = load@@ er.get@@ Resource@@ As@@ Stream@@ (m@@ Resource@@ Name); if (@@ is == null@@ ) { ex@@ chan@@ g@@ e.get@@ Response@@ Head@@ er@@ s@@ ().@@ add@@ ("@@ Content@@ -@@ Type@@ ", "@@ tex@@ t@@ /@@ ht@@ ml@@ "); ex@@ chan@@ g@@ e.@@ send@@ Response@@ Head@@ er@@ s(@@ 4@@ 0@@ 4@@ , 0); java.io.@@ P@@ r@@ int@@ Stream p@@ s = new java.io.@@ P@@ r@@ int@@ Stream@@ (@@ ex@@ chan@@ g@@ e.get@@ Response@@ B@@ o@@ d@@ y@@ ()); com.android.ahat.@@ H@@ t@@ ml@@ Do@@ c do@@ c = new com.android.ahat.@@ H@@ t@@ ml@@ Doc@@ (@@ ps@@ , com.android.ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ ("@@ ahat@@ "), com.android.ahat.@@ Doc@@ Str@@ ing.@@ ur@@ i@@ ("@@ st@@ y@@ le.@@ c@@ ss@@ ")); do@@ c.@@ b@@ ig@@ (com.android.@@ ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ ("@@ Res@@ our@@ ce not fo@@ und@@ .@@ ")); do@@ c.@@ close(); } else { ex@@ chan@@ g@@ e.get@@ Response@@ Head@@ er@@ s@@ ().@@ add@@ ("@@ Content@@ -@@ Type@@ ", m@@ Content@@ Type@@ ); ex@@ chan@@ g@@ e.@@ send@@ Response@@ Head@@ er@@ s(@@ 2@@ 00@@ , 0); java.io.@@ Output@@ Stream o@@ s = ex@@ chan@@ g@@ e.get@@ Response@@ B@@ o@@ d@@ y@@ (); int read@@ ; byte@@ [] bu@@ f = new byte@@ [@@ 4@@ 0@@ 9@@ 6@@ ]; while ((@@ re@@ ad = is.@@ read@@ (@@ bu@@ f@@ )) > 0) { os.@@ write@@ (@@ bu@@ f@@ , 0, read@@ ); } is.@@ close(); os.@@ close(); } }
@java.lang.Override public void lib@@ To@@ Lib@@ (@@ @javax.annotation.@@ N@@ on@@ null java.io.File@@ [] in@@ , @javax.annotation.@@ N@@ on@@ null java.io.File out, boolean z@@ ip@@ Fil@@ es) throw@@ s java.lang.Exception { java.util.List<@@ java.lang.String> command@@ Lin@@ e = new java.util.ArrayList<@@ java.lang.String@@ >(); lib@@ To@@ Com@@ mon@@ (@@ command@@ Line@@ , get@@ Class@@ path@@ As@@ String@@ (), in@@ ); if (@@ z@@ ip@@ Fil@@ es) { command@@ L@@ ine.@@ add@@ ("@@ --@@ output@@ -@@ jack@@ "); command@@ L@@ ine.@@ add(@@ ou@@ t.get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()); } else { if ((@@ in@@ crement@@ al@@ Folder@@ ) != null@@ ) { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception@@ (); } add@@ Properties@@ For@@ Output@@ Jack@@ Dir@@ (@@ command@@ Line@@ , out); } com.android.jack.test.@@ util.@@ Ex@@ ec@@ ute@@ File ex@@ e@@ c = new com.android.jack.test.@@ util.@@ Ex@@ ec@@ ute@@ File@@ (@@ command@@ L@@ ine.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ command@@ L@@ ine.@@ size@@ ()@@ ]@@ )); exec@@ .@@ in@@ her@@ it@@ En@@ vi@@ ron@@ ment@@ (); exec@@ .set@@ Er@@ r@@ (@@ er@@ r@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Out@@ (@@ out@@ R@@ ed@@ ire@@ ct@@ Stream@@ ); exec@@ .set@@ Ver@@ bo@@ se@@ (is@@ Ver@@ bo@@ se@@ ); if ((@@ exec@@ .@@ run@@ ()) != 0) { throw new java.lang.Runtime@@ Exception("@@ J@@ ac@@ k compile@@ r ex@@ i@@ ted wit@@ h an error@@ "); } }
private void on@@ Un@@ k@@ no@@ wn@@ At@@ (java.lang.String at@@ String@@ , byte@@ [] addres@@ s) { com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Ev@@ ent ev@@ ent = new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Event@@ (@@ Headset@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ UN@@ K@@ NO@@ W@@ N@@ _@@ AT@@ , at@@ String@@ , get@@ Device@@ (@@ addres@@ s@@ )); send@@ Message@@ To@@ Service@@ (@@ event@@ ); }
private void create@@ Typ@@ es(@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Pack@@ age enc@@ lo@@ sing@@ Package@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ir.@@ im@@ p@@ l.@@ Reference@@ M@@ app@@ er ref@@ Map@@ , @javax.annotation.@@ N@@ on@@ null org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ ast.@@ Type@@ Dec@@ l@@ ar@@ ation type@@ Dec@@ l@@ ar@@ ation@@ ) { if ((@@ type@@ Dec@@ l@@ ar@@ ation.@@ b@@ ind@@ ing@@ ) == null@@ ) { return@@ ; } com.android.jack.@@ ir.@@ im@@ p@@ l.@@ E@@ c@@ j@@ Source@@ Type@@ Load@@ er.@@ create@@ Type@@ (re@@ f@@ Map@@ , enc@@ lo@@ sing@@ Package@@ , type@@ Dec@@ l@@ ar@@ ation.@@ b@@ ind@@ ing@@ , type@@ Dec@@ l@@ ar@@ ation@@ , new com.android.sched.util.@@ loc@@ ation.@@ File@@ Location@@ (@@ new java.io.File@@ (@@ new java.lang.String@@ (@@ type@@ Dec@@ l@@ ar@@ ation.@@ comp@@ il@@ ation@@ Res@@ ult.@@ file@@ Name@@ )))); if ((@@ type@@ Dec@@ l@@ ar@@ ation.@@ m@@ em@@ ber@@ Typ@@ es) != null@@ ) { for (@@ org.eclipse.@@ jd@@ t@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ ast.@@ Type@@ Dec@@ l@@ ar@@ ation m@@ em@@ ber@@ Type : type@@ Dec@@ l@@ ar@@ ation.@@ m@@ em@@ ber@@ Typ@@ es) { create@@ Typ@@ es(@@ enc@@ lo@@ sing@@ Package@@ , ref@@ Map@@ , m@@ em@@ ber@@ Type@@ ); } } }
@java.lang.Override public void dis@@ po@@ se@@ () { synchronized@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phone@@ Prox@@ y.@@ lock@@ For@@ Rad@@ io@@ T@@ ec@@ h@@ no@@ log@@ y@@ Chan@@ g@@ e) { super@@ .@@ dis@@ po@@ se@@ (); log@@ ("@@ dis@@ po@@ se@@ "); un@@ register@@ For@@ R@@ u@@ im@@ Record@@ Event@@ s(); mC@@ M@@ .@@ un@@ register@@ For@@ A@@ va@@ il@@ able@@ (@@ this@@ ); mC@@ M@@ .@@ un@@ register@@ For@@ O@@ ff@@ Or@@ Not@@ A@@ va@@ il@@ able@@ (@@ this@@ ); mC@@ M@@ .@@ un@@ register@@ For@@ On@@ (@@ this@@ ); m@@ SS@@ T@@ .@@ un@@ register@@ For@@ Network@@ At@@ t@@ ach@@ ed@@ (@@ this@@ ); mC@@ M@@ .@@ un@@ register@@ For@@ Network@@ Sup@@ p@@ Service@@ No@@ t@@ if@@ ic@@ ation@@ (@@ this@@ ); mC@@ M@@ .@@ un@@ register@@ For@@ Ex@@ it@@ E@@ merg@@ enc@@ y@@ Callback@@ Mode@@ (@@ this@@ ); remove@@ Callback@@ s@@ (m@@ Ex@@ it@@ E@@ c@@ m@@ Run@@ n@@ able@@ ); m@@ P@@ end@@ ing@@ M@@ m@@ is.@@ clear@@ (); mC@@ T@@ .@@ dis@@ po@@ se@@ (); m@@ Data@@ Connection@@ Track@@ er.@@ dis@@ po@@ se@@ (); m@@ SS@@ T@@ .@@ dis@@ po@@ se@@ (); mC@@ dm@@ a@@ SS@@ M@@ .@@ dis@@ po@@ se@@ (@@ this@@ ); m@@ S@@ MS@@ .@@ dis@@ po@@ se@@ (); m@@ R@@ u@@ im@@ Phone@@ B@@ oo@@ k@@ Interface@@ Manager.@@ dis@@ po@@ se@@ (); m@@ R@@ u@@ im@@ Sms@@ Interface@@ Manager.@@ dis@@ po@@ se@@ (); m@@ Sub@@ Info.@@ dis@@ po@@ se@@ (); m@@ E@@ ri@@ Manager.@@ dis@@ po@@ se@@ (); } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { org.@@ mock@@ it@@ o@@ .@@ Mock@@ it@@ o@@ Annot@@ ations.@@ in@@ it@@ Mock@@ s@@ (@@ this@@ ); java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d m@@ etho@@ d = com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service@@ .@@ class@@ .get@@ Dec@@ l@@ ar@@ ed@@ Method@@ ("@@ set@@ Adapter@@ Service@@ ", com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Service@@ .@@ class@@ ); method@@ .set@@ Ac@@ ces@@ si@@ ble@@ (@@ true@@ ); method@@ .@@ invok@@ e@@ (m@@ Adapter@@ Service@@ , m@@ Adapter@@ Service@@ ); m@@ Target@@ Context = android.@@ support.@@ test.@@ In@@ strument@@ ation@@ Reg@@ is@@ try@@ .get@@ Target@@ Context@@ (); m@@ Adap@@ ter = android.@@ bluetooth.Bluetooth@@ Adap@@ t@@ er.get@@ Default@@ Adapter@@ (); m@@ Test@@ Device = m@@ Adap@@ t@@ er.get@@ Remote@@ Device@@ ("@@ 00@@ :@@ 0@@ 1@@ :@@ 0@@ 2@@ :@@ 0@@ 3@@ :@@ 0@@ 4@@ :@@ 0@@ 5@@ "); m@@ Handler@@ Th@@ re@@ ad = new android.os.@@ Handler@@ Thread@@ ("@@ A@@ 2@@ dp@@ StateMach@@ ine@@ Test@@ Handler@@ Thread@@ "); m@@ Handler@@ Thread@@ .@@ start@@ (); m@@ A@@ 2@@ dp@@ StateMach@@ in@@ e = new com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ ine@@ (m@@ A@@ 2@@ dp@@ Service@@ , m@@ Target@@ Contex@@ t, m@@ A@@ 2@@ dp@@ Native@@ Interface@@ , m@@ Handler@@ Thread@@ .get@@ Loo@@ per@@ ()); m@@ A@@ 2@@ dp@@ StateMachine.@@ start@@ (); }
private java.lang.String get@@ F@@ oo@@ ter@@ (java.lang.String lin@@ k@@ ) { return ((("@@ <@@ b@@ r@@ >@@ <@@ b@@ r@@ >@@ F@@ or d@@ eta@@ il@@ s, vi@@ si@@ t th@@ e@@ " + " <@@ a h@@ ref@@ =@@ '@@ ") + lin@@ k@@ ) + "@@ '@@ >@@ ") + "@@ V@@ T@@ S d@@ as@@ h@@ bo@@ ard@@ .@@ <@@ /@@ a@@ >@@ "; }
void dum@@ p@@ (@@ java.util.ArrayList<@@ android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info@@ > ser@@ vices@@ ) { for (android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info ser@@ vice : ser@@ vices@@ ) { if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ DE@@ BU@@ G) android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ N@@ fc@@ F@@ Ser@@ vices@@ C@@ ache.@@ TAG, service@@ .@@ toString@@ ()); } } }
public static void build@@ (@@ org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject pro@@ ject@@ , org.eclipse.@@ core.@@ run@@ tim@@ e.@@ I@@ Pro@@ g@@ res@@ s@@ Mon@@ it@@ or mon@@ itor@@ , boolean enable@@ Po@@ st@@ C@@ ) throw@@ s org.eclipse.@@ core.@@ run@@ tim@@ e.@@ C@@ ore@@ Exception { if (@@ enable@@ Po@@ st@@ C@@ ) { java.util.Map@@ <java.lang.String, java.lang.String> arg@@ s = new java.util.@@ T@@ re@@ e@@ Map@@ <java.lang.String, java.lang.String@@ >(); args.@@ put@@ (@@ Ad@@ t@@ Constants.@@ F@@ UL@@ L_@@ BU@@ IL@@ D@@ _RE@@ Q@@ UE@@ S@@ TED@@ , "@@ "); org.eclipse.@@ core.@@ resources.@@ I@@ Project@@ Des@@ cri@@ pti@@ on des@@ c = pro@@ jec@@ t.get@@ Des@@ cription@@ (); org.eclipse.@@ core.@@ resources.@@ I@@ Command@@ [] command@@ s = des@@ c@@ .get@@ Build@@ Spec@@ (); for (@@ int i = 0; i < (@@ command@@ s.@@ length); ++@@ i@@ ) { pro@@ jec@@ t.@@ build@@ (@@ In@@ crement@@ al@@ Project@@ Build@@ er.@@ IN@@ C@@ RE@@ M@@ EN@@ TA@@ L_@@ BU@@ IL@@ D@@ , command@@ s@@ [i]@@ .get@@ Builder@@ Name@@ (), arg@@ s, mon@@ itor@@ ); } } else { pro@@ jec@@ t.@@ build@@ (@@ In@@ crement@@ al@@ Project@@ Build@@ er.@@ IN@@ C@@ RE@@ M@@ EN@@ TA@@ L_@@ BU@@ IL@@ D@@ , mon@@ itor@@ ); } }
public void test@@ Is@@ C@@ am@@ er@@ a@@ Enabled@@ In@@ Pri@@ m@@ ary@@ Profile@@ () throw@@ s java.lang.Exception { assert@@ False@@ (m@@ Device@@ Polic@@ y@@ Manager.get@@ C@@ am@@ er@@ a@@ Dis@@ able@@ d@@ (m@@ Pri@@ m@@ ary@@ Ad@@ min@@ Comp@@ on@@ ent@@ )); assert@@ False@@ (m@@ Device@@ Polic@@ y@@ Manager.get@@ C@@ am@@ er@@ a@@ Dis@@ able@@ d@@ (@@ null@@ )); check@@ Can@@ Open@@ C@@ am@@ er@@ a@@ (@@ true@@ ); }
public boolean is@@ Ch@@ ild@@ Call@@ () { return m@@ Is@@ Ch@@ ild@@ Call@@ ; }
private com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e get@@ StateMach@@ ine@@ (android.bluetooth.Bluetooth@@ Device device@@ ) { if (@@ de@@ vice == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, "@@ get@@ StateMach@@ in@@ e fa@@ ile@@ d@@ : de@@ vice can@@ not b@@ e null@@ "); return null@@ ; } synchronized@@ (m@@ StateMach@@ in@@ es) { com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e s@@ m = m@@ StateMach@@ in@@ es@@ .get@@ (device@@ ); if (s@@ m != null@@ ) { return sm@@ ; } if ((m@@ StateMach@@ in@@ es.@@ size@@ ()) > (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ MA@@ X_@@ A@@ 2@@ D@@ P@@ _STA@@ TE_@@ M@@ AC@@ H@@ IN@@ E@@ S@@ )) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, ("@@ Ma@@ x@@ im@@ u@@ m num@@ b@@ er of A@@ 2@@ D@@ P st@@ ate m@@ ach@@ ine@@ s re@@ ach@@ ed@@ : " + (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ MA@@ X_@@ A@@ 2@@ D@@ P@@ _STA@@ TE_@@ M@@ AC@@ H@@ IN@@ E@@ S@@ ))); return null@@ ; } if (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.@@ DBG) { android.util.Log.d@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, ("@@ Cre@@ at@@ ing a new st@@ ate m@@ ach@@ in@@ e for " + device@@ )); } s@@ m = com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMachine.@@ m@@ ake@@ (device@@ , this@@ , this@@ , m@@ A@@ 2@@ dp@@ Native@@ Interface@@ , m@@ StateMach@@ in@@ es@@ Thread@@ .get@@ Loo@@ per@@ ()); m@@ StateMach@@ in@@ es.@@ put@@ (device@@ , sm@@ ); return sm@@ ; } }
public void test@@ M@@ ig@@ r@@ ated@@ () { org.@@ gradle.@@ too@@ l@@ ing.@@ G@@ rad@@ le@@ Connec@@ tor connec@@ tor = org.@@ gradle.@@ too@@ l@@ ing.@@ G@@ rad@@ le@@ Connec@@ tor@@ .@@ new@@ Connec@@ tor@@ (); java.io.File pro@@ ject@@ Di@@ r = new java.io.File@@ (get@@ Test@@ Dir@@ (), "@@ m@@ ig@@ r@@ ated@@ "); connec@@ tor@@ .@@ for@@ Project@@ Directory@@ (pro@@ ject@@ Dir@@ ); org.@@ gradle.@@ too@@ l@@ ing.@@ Project@@ Connec@@ tion connec@@ tion = connec@@ tor.@@ connect@@ (); try { com.android.build.gradle.@@ model.@@ Android@@ Pro@@ ject mode@@ l = connection@@ .get@@ Mode@@ l@@ (com.android.@@ build@@ .gradle.@@ model.@@ Android@@ Project@@ .@@ class@@ ); assert@@ NotNull@@ ("@@ Mode@@ l Object@@ ", mode@@ l@@ ); assert@@ Equal@@ s("@@ Mode@@ l Name@@ ", "@@ m@@ ig@@ r@@ ated@@ ", model.@@ get@@ Name@@ ()); assert@@ False@@ ("@@ Librar@@ y Project@@ ", model.@@ is@@ Library@@ ()); com.android.build.gradle.@@ model.@@ Pro@@ duct@@ Flavor@@ Cont@@ ain@@ er default@@ Con@@ fig = model.@@ get@@ Default@@ Config@@ (); new com.android.build.gradle.@@ model.@@ Android@@ Project@@ Test.@@ Source@@ Provider@@ Test@@ er@@ (m@@ o@@ de@@ l.get@@ Name@@ (), pro@@ ject@@ Dir@@ , "@@ main@@ ", default@@ Config.@@ get@@ Source@@ Provider@@ ()@@ ).set@@ Java@@ Dir@@ ("@@ src@@ ").@@ set@@ Res@@ ources@@ Dir@@ ("@@ src@@ ").@@ set@@ A@@ id@@ l@@ Dir@@ ("@@ src@@ ").@@ set@@ Render@@ script@@ Dir@@ ("@@ src@@ ").@@ set@@ Res@@ Dir@@ ("@@ res@@ ").@@ set@@ As@@ set@@ s@@ Dir@@ ("@@ as@@ set@@ s@@ ").@@ set@@ M@@ an@@ if@@ est@@ File@@ ("@@ Android@@ M@@ an@@ if@@ est.@@ xml@@ ").@@ test@@ (); new com.android.build.gradle.@@ model.@@ Android@@ Project@@ Test.@@ Source@@ Provider@@ Test@@ er@@ (m@@ o@@ de@@ l.get@@ Name@@ (), pro@@ ject@@ Dir@@ , "@@ in@@ strument@@ Test@@ ", default@@ Config.@@ get@@ Test@@ Source@@ Provider@@ ()@@ ).set@@ Java@@ Dir@@ ("@@ test@@ s@@ /@@ java@@ ").@@ set@@ Res@@ ources@@ Dir@@ ("@@ test@@ s@@ /@@ resour@@ ces@@ ").@@ set@@ A@@ id@@ l@@ Dir@@ ("@@ test@@ s@@ /@@ a@@ id@@ l@@ ").@@ set@@ J@@ n@@ i@@ Dir@@ ("@@ test@@ s@@ /@@ j@@ n@@ i@@ ").@@ set@@ Render@@ script@@ Dir@@ ("@@ test@@ s@@ /@@ r@@ s@@ ").@@ set@@ Res@@ Dir@@ ("@@ test@@ s@@ /@@ res@@ ").@@ set@@ As@@ set@@ s@@ Dir@@ ("@@ test@@ s@@ /@@ as@@ set@@ s@@ ").@@ set@@ M@@ an@@ if@@ est@@ File@@ ("@@ test@@ s@@ /@@ Android@@ M@@ an@@ if@@ est.@@ xml@@ ").@@ test@@ (); } final@@ l@@ y { connection@@ .@@ close(); } }
private int load@@ Instance@@ D@@ um@@ p@@ () throw@@ s java.io.IOException { long id = read@@ Id@@ (); int st@@ ack@@ Id = m@@ In@@ pu@@ t.@@ read@@ Int@@ (); com.android.tools.@@ perflib.@@ he@@ ap.@@ Stack@@ Tr@@ ac@@ e st@@ ac@@ k = m@@ Stat@@ e.get@@ Stack@@ Tra@@ ce@@ (@@ st@@ ack@@ Id); final long class@@ Id = read@@ Id@@ (); int re@@ main@@ ing = m@@ In@@ pu@@ t.@@ read@@ Int@@ (); final com.android.tools.@@ perflib.@@ he@@ ap.@@ Class@@ In@@ stan@@ ce in@@ stan@@ ce = new com.android.tools.@@ perflib.@@ he@@ ap.@@ Class@@ Instance@@ (@@ id, st@@ ack@@ ); final byte@@ [] dat@@ a = new byte@@ [@@ re@@ main@@ ing@@ ]; m@@ In@@ pu@@ t.@@ read@@ F@@ ul@@ ly@@ (d@@ ata@@ ); final java.io.@@ Data@@ Input@@ Stream str@@ e@@ am = new java.io.@@ Data@@ InputStream@@ (@@ new java.io.@@ ByteArray@@ InputStream@@ (d@@ ata@@ )); m@@ Po@@ st.@@ add@@ (@@ new com.android.tools.@@ perflib.@@ he@@ ap.@@ H@@ pro@@ f@@ Par@@ ser.@@ Po@@ st@@ Oper@@ ation@@ (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ H@@ pro@@ f@@ Par@@ ser.@@ RE@@ S@@ O@@ L@@ V@@ E_@@ C@@ LA@@ SS@@ E@@ S@@ , new java.util.@@ concurrent.@@ Call@@ able@@ () { @java.lang.Override public java.lang.@@ Vo@@ id call@@ () throw@@ s java.lang.Exception { instance@@ .set@@ Class@@ (m@@ State.@@ find@@ Class@@ (@@ class@@ Id@@ )); return null@@ ; } }@@ )); m@@ Po@@ st.@@ add@@ (@@ new com.android.tools.@@ perflib.@@ he@@ ap.@@ H@@ pro@@ f@@ Par@@ ser.@@ Po@@ st@@ Oper@@ ation@@ (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ H@@ pro@@ f@@ Par@@ ser.@@ RE@@ S@@ O@@ L@@ V@@ E_@@ VAL@@ UE@@ S@@ , new java.util.@@ concurrent.@@ Call@@ able@@ () { @java.lang.Override public java.lang.@@ Vo@@ id call@@ () throw@@ s java.lang.Exception { com.android.tools.@@ perflib.@@ he@@ ap.@@ Class@@ Ob@@ j c@@ la@@ z@@ z = instance@@ .get@@ Class@@ Ob@@ j@@ (); while (c@@ la@@ z@@ z != null@@ ) { for (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ Fi@@ el@@ d fi@@ el@@ d : c@@ la@@ z@@ z@@ .get@@ Field@@ s@@ ()) { instance@@ .add@@ Field@@ (@@ field@@ , read@@ Value@@ (@@ str@@ eam@@ , instance@@ , field@@ .get@@ Type@@ ())); } c@@ la@@ z@@ z = c@@ la@@ z@@ z@@ z@@ .get@@ Sup@@ er@@ Class@@ Ob@@ j@@ (); } return null@@ ; } }@@ )); instance@@ .set@@ He@@ ap@@ (m@@ State.@@ mC@@ urrent@@ He@@ ap@@ ); m@@ State.@@ add@@ Instance@@ (@@ id, instance@@ ); return ((@@ ((m@@ Id@@ Siz@@ e) + 4@@ ) + (m@@ Id@@ Size@@ )) + 4@@ ) + re@@ main@@ ing@@ ; }
public void to@@ g@@ g@@ le@@ Method@@ Pro@@ fil@@ ing@@ () { try { switch (m@@ Client@@ Data@@ .get@@ Method@@ Pro@@ fil@@ ing@@ Status@@ ()) { case TR@@ AC@@ ER_@@ O@@ N : st@@ op@@ Method@@ Pro@@ fil@@ ing@@ (); break@@ ; case S@@ AM@@ P@@ L@@ ER_@@ O@@ N : st@@ op@@ Method@@ S@@ am@@ pl@@ ing@@ (); break@@ ; case O@@ F@@ F : start@@ Method@@ Pro@@ fil@@ ing@@ (); break@@ ; } } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ w@@ ("@@ d@@ d@@ ms@@ ", "@@ To@@ g@@ g@@ le m@@ etho@@ d pro@@ fil@@ ing fa@@ ile@@ d@@ "); } }
private void c@@ m@@ d@@ List@@ (java.io.FileDescriptor f@@ d, java.io.@@ P@@ r@@ int@@ W@@ rite@@ r p@@ w@@ , java.lang.String[] arg@@ s) { final java.util.ArrayList<@@ android.net.@@ Connectivity@@ Met@@ ri@@ c@@ s@@ Event@@ > event@@ s; synchronized@@ (m@@ Lock) { event@@ s = new java.util.Array@@ List@@ (m@@ Buffer@@ ); } if (((@@ args.@@ length) > 1@@ ) && (@@ arg@@ s@@ [@@ 1@@ ]@@ .@@ equal@@ s("@@ pro@@ to@@ "@@ ))) { for (com.android.server.@@ connectivity.@@ m@@ et@@ ri@@ c@@ s.@@ n@@ an@@ o@@ .@@ Ip@@ Connectivity@@ Log@@ Clas@@ s.@@ Ip@@ Connectivity@@ Ev@@ ent e@@ v : com.android.server.@@ connectivity.@@ Ip@@ Connectivity@@ Event@@ Build@@ er.@@ to@@ Pro@@ to@@ (@@ event@@ s@@ )) { p@@ w@@ .@@ p@@ r@@ int@@ (@@ ev@@ .@@ toString@@ ()); } if ((m@@ Net@@ d@@ Listener@@ ) != null@@ ) { m@@ Net@@ d@@ Listen@@ er.@@ list@@ As@@ Pro@@ to@@ s(@@ p@@ w@@ ); } m@@ Default@@ Network@@ Monitor@@ .@@ list@@ Event@@ s@@ As@@ Pro@@ to@@ (p@@ w@@ ); return@@ ; } for (android.net.@@ Connectivity@@ Met@@ ri@@ c@@ s@@ Ev@@ ent e@@ v : event@@ s) { p@@ w@@ .@@ p@@ r@@ int@@ ln@@ (@@ ev@@ .@@ toString@@ ()); } if ((m@@ Net@@ d@@ Listener@@ ) != null@@ ) { m@@ Net@@ d@@ Listen@@ er.@@ list@@ (p@@ w@@ ); } m@@ Default@@ Network@@ Monitor@@ .@@ list@@ Event@@ s(@@ p@@ w@@ ); }
public static int St@@ ati@@ c@@ Con@@ di@@ tion@@ Null@@ s() { java.lang.Object a = null@@ ; java.lang.Object b = null@@ ; return a == b ? 5 : 2@@ ; }
@java.lang.Override public int com@@ par@@ e@@ (com.android.@@ ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info a@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info b@@ ) { java.lang.String a@@ Name = a@@ .@@ class@@ Ob@@ j@@ .get@@ Class@@ Name@@ (); java.lang.String b@@ Name = b@@ .@@ class@@ Ob@@ j@@ .get@@ Class@@ Name@@ (); return a@@ Nam@@ e.@@ com@@ par@@ e@@ To@@ (b@@ Name); }
@org.junit.Test public void test@@ Bin@@ der@@ De@@ ath@@ A@@ f@@ ter@@ C@@ le@@ an@@ up@@ And@@ Re@@ le@@ ase@@ Do@@ es@@ No@@ th@@ ing@@ () throw@@ s android.os.@@ RemoteException { com.android.server.@@ IpSec@@ Service.@@ Ref@@ coun@@ ted@@ Resource@@ <@@ com.android.server.@@ IpSec@@ Service.@@ I@@ Resource@@ > ref@@ coun@@ ted@@ Res@@ our@@ ce = get@@ Test@@ Ref@@ coun@@ ted@@ Resource@@ (); ref@@ coun@@ ted@@ Resource@@ .@@ user@@ Re@@ le@@ ase@@ (); assert@@ Resource@@ State@@ (re@@ f@@ coun@@ ted@@ Resource@@ , (-1@@ ), 1, 1, 1, 1, 1, 1); ref@@ coun@@ ted@@ Resource@@ .@@ b@@ in@@ der@@ Di@@ ed@@ (); assert@@ Resource@@ State@@ (re@@ f@@ coun@@ ted@@ Resource@@ , (-1@@ ), 2, 1, 1); }
boolean is@@ Met@@ ad@@ ata@@ S@@ yn@@ ce@@ d@@ () { if (((@@ get@@ Q@@ ue@@ ue@@ ()) != null@@ ) && ((@@ get@@ Active@@ Q@@ ue@@ ue@@ ID@@ ()) != (android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ I@@ te@@ m curr@@ I@@ te@@ m = null@@ ; for (android.@@ media.@@ session@@ .@@ Media@@ Session@@ .@@ Q@@ ue@@ ue@@ I@@ te@@ m ite@@ m : get@@ Q@@ ue@@ ue@@ ()) { if ((@@ i@@ tem@@ .get@@ Q@@ ue@@ ue@@ Id@@ ()) == (get@@ Active@@ Q@@ ue@@ ue@@ ID@@ ())) { curr@@ I@@ te@@ m = i@@ tem@@ ; break@@ ; } } com.android.bluetooth.@@ avrcp.@@ Met@@ ad@@ at@@ a q@@ ite@@ m = com.android.bluetooth.@@ avrcp.@@ Util.@@ to@@ Met@@ ad@@ ata@@ (c@@ urr@@ Item@@ ); com.android.bluetooth.@@ avrcp.@@ Met@@ ad@@ at@@ a m@@ dat@@ a = com.android.bluetooth.@@ avrcp.@@ Util.@@ to@@ Met@@ ad@@ ata@@ (get@@ Met@@ ad@@ ata@@ ()); q@@ i@@ tem@@ .m@@ edia@@ Id = "@@ "; m@@ data@@ .m@@ edia@@ Id = "@@ "; if ((@@ curr@@ I@@ te@@ m == null@@ ) || (!(@@ q@@ i@@ tem@@ .@@ equal@@ s@@ (m@@ data@@ )@@ ))) { if (com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er.@@ DE@@ BU@@ G) { android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er.@@ TAG, ("@@ Met@@ ad@@ at@@ a current@@ l@@ y out of s@@ yn@@ c for " + (m@@ Package@@ Name@@ ))); android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er.@@ TAG, (@@ " current.@@ C@@ urr@@ ent qu@@ e@@ ue@@ Item@@ : " + curr@@ Item@@ )); android.util.Log.d@@ (com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er.@@ TAG, (@@ " [ C@@ urr@@ ent m@@ et@@ ad@@ at@@ a : " + (get@@ Met@@ ad@@ ata@@ ().get@@ Des@@ cription@@ ()))); } return false@@ ; } return true@@ ; }
public void add@@ Ob@@ j@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Base@@ Ob@@ j ob@@ j@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { if (@@ ob@@ j != null@@ ) { m@@ N@@ .add@@ Ob@@ j@@ (@@ ob@@ j@@ .get@@ N@@ Ob@@ j@@ ()); } else { m@@ N@@ .add@@ Ob@@ j@@ (@@ null@@ ); } return@@ ; } if (@@ ob@@ j != null@@ ) { add@@ I@@ 32@@ (@@ ob@@ j@@ .get@@ ID@@ (@@ null@@ )); } else { add@@ I@@ 32@@ (@@ 0); } }
org.@@ gradle.@@ model.@@ colle@@ ction@@ .@@ Manag@@ ed@@ Set@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Build@@ Type@@ > get@@ Build@@ Typ@@ es@@ ();
@org.junit.Test public void test@@ Builder@@ _@@ Bas@@ ed@@ On@@ A@@ no@@ th@@ er@@ Profile@@ () { android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info p = new android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info.@@ Builder@@ ().@@ set@@ Icc@@ id@@ ("@@ 2@@ 1@@ 4@@ 3@@ 0000@@ 0000@@ 0000@@ 6@@ 5@@ 8@@ 7@@ ").@@ set@@ N@@ i@@ ck@@ name@@ ("@@ pro@@ fi@@ le n@@ i@@ ck@@ name@@ ").@@ set@@ Profile@@ Name@@ ("@@ pro@@ fi@@ le name@@ ").@@ set@@ Service@@ Provider@@ Name@@ ("@@ ser@@ vice provid@@ er@@ ").@@ set@@ C@@ arrier@@ Id@@ (@@ new android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info.@@ Builder@@ ().@@ set@@ Icc@@ id@@ ("@@ 2@@ 1@@ 4@@ 3@@ 0000@@ 0000@@ 0000@@ 0000@@ 6@@ 5@@ 8@@ 7@@ ").@@ set@@ N@@ i@@ ck@@ name@@ ("@@ pro@@ fi@@ le n@@ i@@ ck@@ name@@ ").@@ set@@ Profile@@ Name@@ ("@@ pro@@ fi@@ le name@@ ").@@ set@@ Service@@ Provider@@ Name@@ ("@@ ser@@ vice provid@@ er@@ ").@@ set@@ C@@ arrier@@ Id@@ ent@@ if@@ ier@@ (@@ new android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info.@@ P@@ O@@ L@@ IC@@ Y_@@ F@@ IL@@ E_@@ STATE_@@ EN@@ ABL@@ ED@@ ).set@@ Profile@@ Clas@@ s(@@ E@@ uic@@ c@@ Profile@@ Info.@@ PRO@@ F@@ IL@@ E_@@ STATE_@@ ER@@ A@@ TION@@ AL@@ ).set@@ Polic@@ y@@ R@@ ul@@ es(@@ E@@ uic@@ c@@ Profile@@ Info.@@ P@@ O@@ L@@ IC@@ Y_@@ R@@ UL@@ E_@@ D@@ O@@ _N@@ O@@ T_@@ DE@@ LE@@ TE@@ ).set@@ Uicc@@ Access@@ R@@ ule@@ (@@ new android.telephony.@@ Uicc@@ Access@@ R@@ ule@@ []{ new android.telephony.@@ Uicc@@ Access@@ R@@ ule@@ (@@ new byte@@ [0@@ ]@@ , null@@ , 0) }@@ ).@@ build@@ (); android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info co@@ pi@@ ed = new android.@@ service@@ .@@ e@@ uicc.@@ E@@ uic@@ c@@ Profile@@ Info.@@ Builder@@ (p@@ ).@@ build@@ (); assert@@ Equal@@ s(@@ p@@ , co@@ pi@@ ed@@ ); assert@@ Equal@@ s(@@ p.@@ has@@ h@@ Code@@ (), co@@ pi@@ ed.@@ has@@ h@@ Code@@ ()); }
public void test@@ Client@@ Config@@ ure@@ d@@ G@@ z@@ ip@@ Content@@ En@@ cod@@ ing@@ () throw@@ s java.lang.Exception { byte@@ [] bo@@ d@@ y@@ Byte@@ s = g@@ z@@ ip@@ ("@@ A@@ B@@ C@@ DE@@ F@@ G@@ H@@ I@@ J@@ K@@ L@@ M@@ NO@@ P@@ Q@@ RS@@ T@@ U@@ V@@ W@@ X@@ Y@@ Z@@ "@@ .get@@ Bytes@@ ("@@ UT@@ F@@ -@@ 8@@ ")); server.@@ en@@ qu@@ e@@ ue@@ (@@ new com.google.@@ mock@@ w@@ eb@@ server.@@ Mock@@ Response@@ ().@@ set@@ B@@ o@@ d@@ y@@ (@@ bo@@ d@@ y@@ Bytes@@ ).@@ add@@ Head@@ er@@ ("@@ Content@@ -@@ En@@ cod@@ ing@@ : g@@ z@@ ip@@ ").@@ add@@ Head@@ er@@ (("@@ Content@@ -@@ Length@@ : " + (@@ bo@@ d@@ y@@ By@@ t@@ es.@@ length@@ )))); server.@@ play@@ (); java.net.@@ URL@@ Connec@@ tion connec@@ tion = server.@@ get@@ Ur@@ l@@ ("@@ /@@ ").@@ open@@ Connection@@ (); connection@@ .add@@ Request@@ Property@@ ("@@ Ac@@ ce@@ p@@ t@@ -@@ En@@ cod@@ ing@@ ", "@@ g@@ z@@ ip@@ "); java.io.@@ Input@@ Stream g@@ un@@ z@@ ip@@ p@@ ed@@ I@@ n = new java.util.@@ z@@ i@@ p.@@ G@@ Z@@ IP@@ InputStream@@ (@@ connection@@ .get@@ InputStream@@ ()); assert@@ Equal@@ s("@@ A@@ B@@ C@@ DE@@ F@@ G@@ H@@ I@@ J@@ K@@ L@@ M@@ NO@@ P@@ Q@@ RS@@ T@@ U@@ V@@ W@@ X@@ Y@@ Z@@ ", read@@ As@@ c@@ i@@ i@@ (@@ g@@ un@@ z@@ ip@@ p@@ ed@@ In@@ , java.lang.Integ@@ er.@@ MA@@ X_@@ VAL@@ UE@@ )); assert@@ Equal@@ s(@@ bo@@ d@@ y@@ By@@ t@@ es.@@ length@@ , connection@@ .get@@ Content@@ Length@@ ()); com.google.@@ mock@@ w@@ eb@@ server.@@ Record@@ ed@@ Requ@@ est requ@@ est = server.@@ t@@ ake@@ Request@@ (); assert@@ Cont@@ ain@@ s(@@ requ@@ est.@@ get@@ Head@@ er@@ s@@ (), "@@ Ac@@ ce@@ p@@ t@@ -@@ En@@ cod@@ ing@@ : g@@ z@@ ip@@ "); }
@java.lang.Override public java.util.@@ Set@@ <@@ vo@@ g@@ ar.@@ t@@ ask@@ s.@@ Task@@ > in@@ stall@@ Task@@ s() { java.util.@@ Set@@ <@@ vo@@ g@@ ar.@@ t@@ ask@@ s.@@ Task@@ > result = new java.util.@@ Hash@@ Set@@ <@@ vo@@ g@@ ar.@@ t@@ ask@@ s.@@ Task@@ >(); for (@@ java.io.File class@@ path@@ Elem@@ ent : run@@ .@@ class@@ path@@ .get@@ Element@@ s@@ ()) { java.lang.String name = run@@ .@@ b@@ as@@ en@@ ame@@ Of@@ J@@ ar@@ (@@ class@@ path@@ Element@@ ); java.io.File local@@ De@@ x = run@@ .@@ local@@ Dex@@ File@@ (@@ name@@ ); java.io.File local@@ Des@@ u@@ g@@ ar@@ Temp@@ Di@@ r = run@@ .@@ local@@ Des@@ u@@ g@@ ar@@ Temp@@ Dir@@ (@@ name@@ ); result.@@ add(@@ create@@ Create@@ Dex@@ J@@ ar@@ Task@@ (@@ run@@ .@@ class@@ path@@ , class@@ path@@ Element@@ , name@@ , null@@ , local@@ Dex@@ , local@@ Des@@ u@@ g@@ ar@@ Temp@@ Dir@@ )); } result.@@ add@@ (@@ new vo@@ g@@ ar.@@ t@@ ask@@ s.@@ M@@ k@@ d@@ ir@@ Task@@ (@@ run@@ .m@@ k@@ d@@ ir@@ , d@@ al@@ vi@@ k@@ Cach@@ e@@ ())); return result@@ ; }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null java.io.@@ Output@@ Stream open@@ W@@ rite@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Un@@ i@@ on@@ VF@@ S@@ .@@ Un@@ i@@ on@@ V@@ File file@@ , boolean append@@ ) throw@@ s com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { if (!(@@ is@@ Wri@@ t@@ able@@ ())) { throw new java.lang.@@ Un@@ suppor@@ ted@@ Oper@@ ation@@ Exception@@ (); } com.android.sched.vfs.@@ Base@@ V@@ File w@@ r@@ app@@ ed@@ File = file@@ .get@@ W@@ r@@ app@@ ed@@ Fil@@ es@@ ().get@@ (@@ 0); boolean w@@ r@@ app@@ ed@@ File@@ Is@@ Wri@@ t@@ able = w@@ r@@ app@@ ed@@ File@@ .get@@ VF@@ S@@ ().get@@ Capabilities@@ ().@@ contain@@ s(@@ Capabili@@ ties.@@ W@@ R@@ I@@ TE@@ ); if (!@@ w@@ r@@ app@@ ed@@ File@@ Is@@ Wri@@ t@@ able@@ ) { try { load@@ Wri@@ t@@ able@@ File@@ (file@@ ); } catch (com.android.s@@ ched.@@ util.@@ file.@@ C@@ annot@@ Create@@ File@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (@@ e); } } return file@@ .get@@ W@@ r@@ app@@ ed@@ Fil@@ es@@ ().get@@ (0@@ ).get@@ Output@@ Stream@@ (@@ append@@ ); }
public void on@@ Connec@@ t@@ (@@ java.net.Inet@@ Address remo@@ te@@ Addres@@ s, int remo@@ te@@ Port@@ ) { is@@ Connec@@ ted = true@@ ; im@@ p@@ l.@@ on@@ Connec@@ t@@ (@@ remo@@ te@@ Addres@@ s, remo@@ te@@ Port@@ ); }
private static void parse@@ Sign@@ er@@ s(@@ java.nio.Byte@@ Buff@@ er apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 2@@ Block@@ , java.util.@@ Set@@ <@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ Content@@ Dig@@ est@@ Algorith@@ m@@ > cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , int max@@ Sdk@@ Version@@ , com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ Res@@ ult result@@ ) throw@@ s java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception { java.nio.Byte@@ Buff@@ er sign@@ er@@ s; try { sign@@ er@@ s = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.get@@ Length@@ Pre@@ fix@@ ed@@ S@@ li@@ ce@@ (@@ apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 2@@ Block@@ ); } catch (com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception e) { result.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 2@@ _S@@ I@@ G@@ _M@@ AL@@ F@@ OR@@ ME@@ D@@ _S@@ I@@ G@@ NE@@ RS@@ ); return@@ ; } if (!(@@ sign@@ er@@ s.@@ has@@ Re@@ main@@ ing@@ ())) { result.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 2@@ _S@@ I@@ G@@ _N@@ O@@ _S@@ I@@ G@@ NE@@ RS@@ ); return@@ ; } java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctor@@ y cer@@ t@@ Fa@@ ctory@@ ; try { cer@@ t@@ Fa@@ ctor@@ y = java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctory@@ .get@@ Instance@@ ("@@ X@@ .@@ 509@@ "); } catch (@@ java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d to ob@@ t@@ a@@ in X@@ .@@ 50@@ 9 Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctory@@ ", e); } int sign@@ er@@ Coun@@ t = 0; while (@@ sign@@ er@@ s.@@ has@@ Re@@ main@@ ing@@ ()) { int sign@@ er@@ In@@ dex = sign@@ er@@ Count@@ ; sign@@ er@@ Count@@ ++@@ ; com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ Res@@ ult.@@ Sign@@ er@@ Info sign@@ er@@ Info = new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ Res@@ ult.@@ Sign@@ er@@ Info@@ (); sign@@ er@@ Info.@@ in@@ dex = sign@@ er@@ Index@@ ; result.@@ sign@@ er@@ s.@@ add(@@ sign@@ er@@ Info@@ ); try { java.nio.Byte@@ Buff@@ er si@@ g@@ ne@@ r = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.get@@ Length@@ Pre@@ fix@@ ed@@ S@@ li@@ ce@@ (@@ sign@@ er@@ s); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 2.@@ V@@ 2@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ parse@@ Sign@@ er(@@ sign@@ er, cer@@ t@@ Fa@@ ctory@@ , sign@@ er@@ Info@@ , cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , max@@ Sdk@@ Version@@ ); } catch (com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception | java.nio.@@ Buffer@@ Un@@ der@@ f@@ low@@ Exception e) { sign@@ er@@ Info.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 2@@ _S@@ I@@ G@@ _M@@ AL@@ F@@ OR@@ ME@@ D@@ _S@@ I@@ G@@ N@@ ER@@ ); return@@ ; } } }
@java.lang.Override protected void on@@ Create@@ (android.os.@@ Bund@@ le ic@@ le@@ ) { super@@ .@@ on@@ Create@@ (@@ ic@@ le@@ ); request@@ W@@ in@@ do@@ w@@ Fe@@ ature@@ (@@ W@@ in@@ do@@ w@@ .@@ F@@ E@@ AT@@ UR@@ E_@@ NO@@ _@@ TI@@ T@@ L@@ E); get@@ W@@ in@@ do@@ w@@ ().@@ set@@ B@@ ack@@ gro@@ und@@ D@@ raw@@ able@@ Resource@@ (@@ R.@@ d@@ raw@@ able@@ .@@ class@@ _@@ z@@ er@@ o@@ _@@ back@@ gro@@ und@@ ); if ((m@@ ess@@ age@@ Q@@ ue@@ ue@@ ) == null@@ ) { message@@ Q@@ ue@@ u@@ e = new java.util.ArrayList<@@ android.telephony.@@ Sms@@ Message@@ >(); } byte@@ [] p@@ d@@ u = get@@ Intent@@ ().get@@ ByteArray@@ Extra@@ ("@@ p@@ du@@ "); java.lang.String for@@ ma@@ t = get@@ Intent@@ ().get@@ String@@ Extra@@ (@@ "@@ for@@ mat@@ "); android.telephony.@@ Sms@@ Message raw@@ Message = android.telephony.@@ Sms@@ Mess@@ age.@@ create@@ From@@ P@@ du@@ (p@@ du@@ , for@@ mat@@ ); java.lang.@@ Char@@ Se@@ qu@@ en@@ ce message@@ Char@@ s = raw@@ Mess@@ ag@@ e.get@@ Message@@ B@@ o@@ d@@ y@@ (); java.lang.String mess@@ age = message@@ Char@@ s.@@ toString@@ (); if (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (m@@ ess@@ age@@ )) { if ((m@@ ess@@ age@@ Q@@ ue@@ u@@ e.@@ size@@ ()) == 0) { fin@@ is@@ h@@ (); } return@@ ; } message@@ Q@@ ue@@ u@@ e.@@ add@@ (r@@ aw@@ Message@@ ); if ((m@@ ess@@ age@@ Q@@ ue@@ u@@ e.@@ size@@ ()) == 1@@ ) { dis@@ play@@ Z@@ er@@ o@@ Message@@ (r@@ aw@@ Message@@ ); } if (@@ ic@@ le != null@@ ) { m@@ Tim@@ er@@ Se@@ t = ic@@ le@@ .get@@ Long@@ (com.android.@@ m@@ m@@ m@@ s.@@ ui.@@ Class@@ Z@@ er@@ o@@ Ac@@ tivity.@@ TI@@ M@@ ER_@@ FI@@ RE@@ , m@@ Tim@@ er@@ Set@@ ); } }
private int con@@ ver@@ t@@ RIL@@ Reg@@ State@@ To@@ Service@@ State@@ (@@ int reg@@ State@@ ) { switch (@@ reg@@ State@@ ) { case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ NO@@ T_@@ RE@@ G@@ _M@@ T_@@ NO@@ T_@@ SE@@ AR@@ CH@@ ING@@ _@@ O@@ P : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ NO@@ T_@@ RE@@ G@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ RE@@ G@@ _@@ H@@ O@@ M@@ E : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ H@@ O@@ ME@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ NO@@ T_@@ RE@@ G@@ _M@@ T_@@ SE@@ AR@@ CH@@ ING@@ _@@ O@@ P : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ SE@@ AR@@ CH@@ ING@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ RE@@ G@@ _@@ D@@ EN@@ I@@ E@@ D : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ D@@ EN@@ I@@ ED@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ UN@@ K@@ NO@@ W@@ N : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ UN@@ K@@ NO@@ W@@ N@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ RE@@ G@@ _@@ RO@@ AM@@ IN@@ G : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ RO@@ AM@@ ING@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ NO@@ T_@@ RE@@ G@@ _M@@ T_@@ NO@@ T_@@ SE@@ AR@@ CH@@ ING@@ _@@ OP@@ _@@ E@@ M : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ NO@@ T_@@ RE@@ G@@ _@@ E@@ M@@ ER@@ G@@ EN@@ C@@ Y@@ _C@@ AL@@ L_@@ EN@@ ABL@@ ED@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ NO@@ T_@@ RE@@ G@@ _M@@ T_@@ SE@@ AR@@ CH@@ ING@@ _@@ OP@@ _@@ E@@ M : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ SE@@ AR@@ CH@@ ING@@ _@@ E@@ M@@ ER@@ G@@ EN@@ C@@ Y@@ _C@@ AL@@ L_@@ EN@@ ABL@@ ED@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ RE@@ G@@ _@@ D@@ EN@@ I@@ ED@@ _@@ E@@ M : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ D@@ EN@@ I@@ ED@@ _@@ E@@ M@@ ER@@ G@@ EN@@ C@@ Y@@ _C@@ AL@@ L_@@ EN@@ ABL@@ ED@@ ; case android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ Reg@@ State.@@ UN@@ K@@ NO@@ W@@ N@@ _@@ E@@ M : return android.telephony.@@ Service@@ State.@@ RIL@@ _RE@@ G@@ _STA@@ TE_@@ UN@@ K@@ NO@@ W@@ N@@ _@@ E@@ M@@ ER@@ G@@ EN@@ C@@ Y@@ _C@@ AL@@ L_@@ EN@@ ABL@@ ED@@ ; default : return android.telephony.@@ Service@@ State.@@ RE@@ G@@ IS@@ TR@@ A@@ TION@@ _STA@@ TE_@@ NO@@ T_@@ RE@@ G@@ IS@@ TER@@ ED@@ _@@ AN@@ D@@ _N@@ O@@ T_@@ SE@@ AR@@ CH@@ ING@@ ; } }
@org.junit.Test public void valid@@ ate@@ Cer@@ t@@ Cre@@ denti@@ al@@ With@@ M@@ is@@ match@@ F@@ ing@@ er@@ p@@ r@@ int@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al cre@@ d = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al@@ (); cre@@ d.@@ re@@ al@@ m = "@@ re@@ al@@ m@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al.@@ User@@ Cre@@ denti@@ al@@ (); cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ user@@ name = "@@ user@@ name@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ p@@ ass@@ wor@@ d = "@@ p@@ ass@@ wor@@ d@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ e@@ ap@@ Type = android.net.@@ w@@ if@@ i.@@ E@@ AP@@ Constants.@@ E@@ AP@@ _@@ T@@ L@@ S@@ ; cre@@ d.@@ cer@@ t@@ Cre@@ denti@@ al = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al.@@ Cer@@ t@@ if@@ ic@@ ate@@ Cre@@ denti@@ al@@ (); cre@@ d.@@ cer@@ t@@ Cre@@ denti@@ al.@@ cer@@ t@@ Type = "@@ x@@ 509@@ v@@ 3@@ "; cre@@ d.@@ cer@@ t@@ Cre@@ denti@@ al.@@ cer@@ t@@ Sh@@ a@@ 25@@ 6@@ F@@ ing@@ er@@ P@@ r@@ int = new byte@@ [@@ 32@@ ]; java.util.Arrays.@@ fil@@ l@@ (@@ cre@@ d.@@ cer@@ t@@ Cre@@ denti@@ al.@@ cer@@ t@@ Sh@@ a@@ 25@@ 6@@ F@@ ing@@ er@@ P@@ r@@ int@@ , (@@ (@@ byte@@ ) (0@@ ))); cre@@ d.@@ c@@ a@@ Cer@@ t@@ if@@ i@@ cat@@ e = android.net.@@ w@@ if@@ i.@@ F@@ ake@@ Key@@ s.@@ C@@ A@@ _C@@ ER@@ T@@ 0; cre@@ d.@@ c@@ lient@@ Cer@@ t@@ if@@ ic@@ ate@@ Ch@@ a@@ in = new java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ []{ android.net.@@ w@@ if@@ i.@@ F@@ ake@@ Key@@ s.@@ C@@ L@@ I@@ EN@@ T_@@ C@@ ER@@ T }; cre@@ d.@@ c@@ lient@@ Pri@@ v@@ ate@@ Ke@@ y = android.net.@@ w@@ if@@ i.@@ F@@ ake@@ Key@@ s.@@ RS@@ A@@ _@@ KE@@ Y@@ 1; assert@@ False@@ (@@ cre@@ d.@@ valid@@ ate@@ ()); }
public void test@@ Lib@@ Test@@ De@@ p@@ () { com.android.build.gradle.@@ model.@@ Android@@ Project@@ Test.@@ Project@@ Data pro@@ ject@@ Data = get@@ Mode@@ l@@ For@@ Project@@ ("@@ lib@@ Test@@ De@@ p@@ "); com.android.builder.@@ model.@@ Android@@ Pro@@ ject mode@@ l = pro@@ ject@@ Data@@ .@@ mode@@ l@@ ; java.util.Collection@@ <@@ com.android.builder.@@ model.@@ Variant@@ > vari@@ ant@@ s = model.@@ get@@ Vari@@ an@@ ts@@ (); com.android.builder.@@ model.@@ Vari@@ an@@ t de@@ bug@@ Vari@@ an@@ t = com.android.build.gradle.@@ model.@@ Android@@ Project@@ Test.@@ get@@ Variant@@ (@@ vari@@ ant@@ s, "@@ de@@ bug@@ "); assert@@ NotNull@@ (@@ de@@ bug@@ Variant@@ ); java.util.Collection@@ <@@ com.android.builder.@@ model.@@ Android@@ Ar@@ t@@ if@@ act@@ > ex@@ tra@@ Android@@ Ar@@ t@@ if@@ ac@@ t = de@@ bug@@ Vari@@ an@@ t.get@@ Extra@@ Android@@ Ar@@ t@@ if@@ act@@ s(); com.android.builder.@@ model.@@ Android@@ Ar@@ t@@ if@@ ac@@ t test@@ Ar@@ t@@ if@@ ac@@ t = com.android.build.gradle.@@ model.@@ Android@@ Project@@ Test.@@ get@@ Android@@ Ar@@ t@@ if@@ act@@ (@@ ex@@ tra@@ Android@@ Ar@@ t@@ if@@ act@@ , com.android.build.gradle.@@ model.@@ AR@@ TI@@ F@@ AC@@ T_@@ AN@@ D@@ RO@@ ID@@ _@@ TE@@ S@@ T@@ ); assert@@ NotNull@@ (@@ test@@ Ar@@ t@@ if@@ act@@ ); com.android.builder.@@ model.@@ Dependenc@@ i@@ es test@@ Dependenc@@ i@@ es = test@@ Ar@@ t@@ if@@ ac@@ t.get@@ Dependenc@@ ies@@ (); java.util.Collection@@ <@@ java.io.File@@ > ja@@ r@@ s = test@@ Dependenc@@ ies@@ .get@@ Java@@ Librar@@ ies@@ (); assert@@ Equal@@ s(@@ 2, ja@@ rs.@@ size@@ ()); for (@@ java.io.File f : ja@@ r@@ s) { assert@@ True@@ (((@@ f@@ .getName@@ ().@@ equal@@ s("@@ gu@@ ava@@ -1@@ 1.@@ 0.@@ 2.@@ ja@@ r@@ ")) || (f@@ .getName@@ ().@@ equal@@ s("@@ j@@ s@@ r@@ 3@@ 0@@ 5@@ -@@ 1.@@ 3@@ .@@ 9@@ .@@ ja@@ r@@ "@@ )))); } }
private void b@@ ind@@ And@@ In@@ itializ@@ e@@ () throw@@ s android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Exception { android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Utils.@@ start@@ B@@ ind@@ ing@@ (m@@ Contex@@ t, android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ M@@ B@@ MS@@ _S@@ T@@ RE@@ AM@@ ING@@ _S@@ ER@@ VIC@@ E_@@ AC@@ TION@@ , new android.content.@@ Service@@ Connection@@ () { @java.lang.Override public void on@@ Service@@ Connec@@ ted@@ (android.content.@@ Comp@@ on@@ ent@@ Name name@@ , android.os.@@ I@@ Bin@@ der service@@ ) { android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ I@@ M@@ b@@ ms@@ Stream@@ ing@@ Ser@@ vice str@@ eam@@ ing@@ Ser@@ vice = I@@ M@@ b@@ ms@@ Stream@@ ing@@ Service.@@ St@@ ub@@ .@@ as@@ Interface@@ (@@ service@@ ); int result@@ ; try { result = str@@ eam@@ ing@@ Service.@@ in@@ itializ@@ e@@ (m@@ Callback@@ To@@ App@@ , m@@ Sub@@ s@@ cription@@ Id); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ LOG@@ _@@ TAG, "@@ Ser@@ vice di@@ ed b@@ e@@ for@@ e in@@ itializ@@ ation@@ "); send@@ Error@@ To@@ App@@ (@@ M@@ b@@ ms@@ Exception@@ .@@ In@@ itializ@@ ation@@ Error@@ s.@@ ER@@ R@@ OR@@ _@@ UN@@ ABL@@ E_@@ TO@@ _@@ IN@@ I@@ TI@@ AL@@ I@@ Z@@ E, e.toString@@ ()); android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed.@@ set@@ (@@ false@@ ); return@@ ; } catch (java.lang.@@ Runtime@@ Exception e) { android.util.Log.e@@ (android.@@ telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ LOG@@ _@@ TAG, "@@ Run@@ tim@@ e excepti@@ on d@@ ur@@ ing in@@ itializ@@ ation@@ "); send@@ Error@@ To@@ App@@ (@@ M@@ b@@ ms@@ Exception@@ .@@ In@@ itializ@@ ation@@ Error@@ s.@@ ER@@ R@@ OR@@ _@@ UN@@ ABL@@ E_@@ TO@@ _@@ IN@@ I@@ TI@@ AL@@ I@@ Z@@ E, e.toString@@ ()); android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; return@@ ; } if (@@ result != (android.@@ telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Exception@@ .@@ S@@ U@@ C@@ CE@@ SS@@ )) { send@@ Error@@ To@@ App@@ (@@ result@@ , "@@ Error return@@ ed d@@ ur@@ ing in@@ itializ@@ ation@@ "); android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed.@@ set@@ (@@ false@@ ); return@@ ; } try { str@@ eam@@ ing@@ Service.@@ as@@ Bin@@ der@@ ().@@ lin@@ k@@ To@@ De@@ ath@@ (m@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ , 0); } catch (android.os.RemoteException e) { send@@ Error@@ To@@ App@@ (@@ M@@ b@@ ms@@ Exception@@ .@@ ER@@ R@@ OR@@ _M@@ ID@@ D@@ LE@@ W@@ AR@@ E_@@ LO@@ S@@ T, "@@ M@@ id@@ d@@ le@@ war@@ e lo@@ s@@ t d@@ ur@@ ing in@@ itializ@@ ation@@ "); android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; return@@ ; } m@@ Service.@@ set@@ (@@ str@@ eam@@ ing@@ Service@@ ); } @java.lang.Override public void on@@ Service@@ Dis@@ connec@@ ted@@ (android.content.@@ Comp@@ on@@ ent@@ Name name@@ ) { android.telephony.@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; m@@ Service.@@ set@@ (@@ null@@ ); } }); }
public void test@@ Method@@ E@@ n@@ try@@ () { log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ test@@ Method@@ E@@ n@@ try st@@ ar@@ ted@@ "); synchroniz@@ er.@@ re@@ cei@@ ve@@ Message@@ (@@ J@@ P@@ DA@@ Debug@@ ge@@ e@@ S@@ ynchroniz@@ er.@@ S@@ G@@ N@@ L@@ _RE@@ AD@@ Y); org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Event@@ Builder bu@@ ilder = create@@ Method@@ E@@ n@@ try@@ Event@@ Builder@@ (@@ org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Thread@@ On@@ ly@@ Mo@@ d@@ if@@ ier@@ Test.@@ TEST_@@ C@@ LA@@ SS@@ _N@@ AM@@ E); test@@ Event@@ With@@ Thread@@ On@@ ly@@ Mo@@ d@@ if@@ ier@@ (@@ build@@ er, org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Event@@ Mo@@ d@@ if@@ ier@@ s.@@ Thread@@ On@@ ly@@ Mo@@ d@@ if@@ ier@@ Test.@@ TEST_@@ C@@ LA@@ SS@@ _N@@ AM@@ E); log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ ("@@ test@@ Method@@ E@@ n@@ try do@@ ne@@ "); }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ Se@@ t En@@ h@@ an@@ ce@@ d 4@@ G mo@@ d@@ e.@@ ") public void im@@ s@@ Set@@ En@@ h@@ an@@ ce@@ d@@ 4@@ g@@ Mode@@ (@@ @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ enable@@ ") java.lang.@@ Boole@@ an enable@@ ) { m@@ Ims@@ Manager.@@ set@@ En@@ h@@ an@@ ce@@ d@@ 4@@ g@@ L@@ te@@ Mode@@ Setting@@ For@@ S@@ lot@@ (@@ enable@@ ); }
public void test@@ Merg@@ ed@@ Res@@ ources@@ By@@ Name@@ () throw@@ s java.lang.Exception { com.android.ide.common.@@ res@@ 2.@@ Resource@@ Merg@@ er merg@@ er = com.android.ide.common.@@ res@@ 2.@@ Resource@@ Merg@@ er@@ Test.@@ get@@ Resource@@ Merg@@ er@@ (); ve@@ r@@ if@@ y@@ Resource@@ Ex@@ ist@@ s@@ (m@@ erg@@ er, "@@ d@@ raw@@ able@@ /@@ i@@ con@@ ", "@@ d@@ raw@@ able@@ -@@ l@@ dp@@ i@@ /@@ i@@ con@@ ", "@@ d@@ raw@@ able@@ /@@ i@@ con@@ 2@@ ", "@@ d@@ raw@@ able@@ /@@ p@@ atch@@ ", "@@ raw@@ /@@ f@@ oo@@ ", "@@ lay@@ out@@ /@@ main@@ ", "@@ lay@@ out@@ /@@ lay@@ out@@ _@@ ref@@ ", "@@ lay@@ out@@ /@@ al@@ i@@ as@@ _@@ re@@ pla@@ ce@@ d@@ _@@ b@@ y@@ _@@ file@@ ", "@@ lay@@ out@@ /@@ file@@ _@@ re@@ pla@@ ce@@ d@@ _@@ b@@ y@@ _@@ al@@ i@@ as@@ ", "@@ d@@ raw@@ able@@ /@@ col@@ or@@ _@@ d@@ raw@@ able@@ ", "@@ d@@ raw@@ able@@ /@@ d@@ raw@@ able@@ _@@ ref@@ ", "@@ col@@ or@@ /@@ col@@ or@@ ", "@@ string@@ /@@ b@@ as@@ ic@@ _@@ string@@ ", "@@ string@@ /@@ x@@ l@@ if@@ f@@ _@@ string@@ ", "@@ string@@ /@@ x@@ l@@ if@@ f@@ _@@ w@@ ith@@ _@@ c@@ arri@@ age@@ _@@ return@@ ", "@@ string@@ /@@ st@@ y@@ le@@ d@@ _@@ string@@ ", "@@ st@@ y@@ le@@ /@@ st@@ y@@ le@@ ", "@@ array@@ /@@ string@@ _@@ array@@ ", "@@ at@@ tr@@ /@@ d@@ im@@ en@@ _@@ at@@ tr@@ ", "@@ at@@ tr@@ /@@ string@@ _@@ at@@ tr@@ ", "@@ at@@ tr@@ /@@ enum@@ _@@ at@@ tr@@ ", "@@ at@@ tr@@ /@@ flag@@ _@@ at@@ tr@@ ", "@@ at@@ tr@@ /@@ b@@ la@@ h@@ ", "@@ at@@ tr@@ /@@ b@@ la@@ h@@ 2@@ ", "@@ at@@ tr@@ /@@ flag@@ At@@ tr@@ ", "@@ dec@@ l@@ ar@@ e@@ -@@ st@@ y@@ le@@ able@@ /@@ dec@@ l@@ ar@@ e@@ _@@ st@@ y@@ le@@ able@@ ", "@@ d@@ im@@ en@@ /@@ d@@ im@@ en@@ ", "@@ d@@ im@@ en@@ -@@ sw@@ 6@@ 00@@ dp@@ /@@ offset@@ ", "@@ id@@ /@@ i@@ tem@@ _@@ id@@ ", "@@ int@@ e@@ g@@ er@@ /@@ int@@ e@@ g@@ er@@ "); }
public int send@@ to@@ (java.io.FileDescriptor f@@ d, byte@@ [] byte@@ s, int byte@@ Offset@@ , int byte@@ Count@@ , int flag@@ s, java.net.Inet@@ Address in@@ et@@ Addres@@ s, int port@@ ) throw@@ s android.system.@@ Errno@@ Exception, java.net.@@ Socket@@ Exception;
@java.lang.Override public java.lang.String ser@@ i@@ aliz@@ e@@ () { float d@@ ur@@ ation = (@@ time@@ M@@ s) / 1@@ 00@@ 0.@@ 0F@@ ; java.lang.String py@@ d@@ ic@@ t = com.android.@@ mon@@ key@@ run@@ ner.@@ re@@ cor@@ d@@ er.@@ action@@ s.@@ P@@ y@@ Di@@ ct@@ Uti@@ l@@ Builder@@ .@@ new@@ Builder@@ ().@@ add@@ T@@ up@@ le@@ ("@@ start@@ ", start@@ x@@ , st@@ ar@@ ty@@ ).@@ add@@ T@@ up@@ le@@ ("@@ end@@ ", end@@ x@@ , end@@ y@@ ).@@ add@@ ("@@ d@@ ur@@ ation@@ ", d@@ ur@@ ation@@ ).@@ add@@ ("@@ s@@ te@@ ps@@ ", s@@ te@@ ps@@ ).@@ build@@ (); return "@@ D@@ R@@ A@@ G@@ |@@ " + py@@ di@@ ct@@ ; }
@java.lang.Override public boolean is@@ Pre@@ view@@ () { return m@@ Item@@ s.@@ isEmpty@@ (); }
@java.lang.Override public void on@@ R@@ tt@@ In@@ iti@@ ation@@ Fail@@ ure@@ (com.android.server.@@ telecom.@@ Cal@@ l call@@ , int re@@ as@@ on@@ ) { }
@com.android.annotations.@@ Null@@ able private com.android.builder.@@ model.@@ Android@@ Pro@@ ject exec@@ ute@@ (@@ @com.android.annotations.NonNull java.util.List<@@ java.lang.String> arg@@ ument@@ s, boolean return@@ Mode@@ l@@ , @com.android.annotations.NonNull java.lang.String.@@ .@@ . t@@ ask@@ s) { org.@@ gradle.@@ too@@ l@@ ing.@@ Project@@ Connec@@ tion connec@@ tion = get@@ Project@@ Connection@@ (); try { java.util.List<@@ java.lang.String> arg@@ s = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ ity@@ ((@@ 2 + (@@ arg@@ ument@@ s.@@ size@@ ()))); args.@@ add@@ ("@@ -@@ i@@ "); args.@@ add@@ ("@@ -@@ u@@ "); args.@@ add@@ All@@ (@@ arg@@ ument@@ s); org.@@ gradle.@@ too@@ l@@ ing.@@ Build@@ L@@ a@@ un@@ ch@@ er la@@ un@@ ch@@ er = connection@@ .@@ new@@ Build@@ ()@@ .@@ for@@ Task@@ s(@@ t@@ ask@@ s@@ ).@@ w@@ ith@@ Argument@@ s(@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )).@@ set@@ J@@ vm@@ Argument@@ s@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ J@@ a@@ co@@ A@@ g@@ ent.get@@ J@@ vm@@ Arg@@ ()); if ((@@ s@@ t@@ do@@ ut@@ ) != null@@ ) { la@@ un@@ ch@@ er.@@ set@@ St@@ and@@ ard@@ Output@@ (s@@ t@@ do@@ ut@@ ); } la@@ un@@ ch@@ er.@@ run@@ (); if (@@ return@@ Mode@@ l@@ ) { return connection@@ .get@@ Mode@@ l@@ (com.android.@@ builder.@@ model.@@ Android@@ Project@@ .@@ class@@ ); } } final@@ l@@ y { connection@@ .@@ close(); } return null@@ ; }
public void test@@ Reg@@ ister@@ T@@ w@@ i@@ ce@@ With@@ S@@ ame@@ S@@ en@@ s@@ or@@ () { android.hardware.@@ S@@ en@@ s@@ or s@@ en@@ s@@ or = m@@ S@@ en@@ s@@ or@@ Manager.get@@ Default@@ S@@ en@@ s@@ or@@ (@@ S@@ en@@ s@@ or.@@ TYPE_@@ AC@@ CE@@ L@@ ER@@ O@@ ME@@ TER@@ ); if (s@@ en@@ s@@ or == null@@ ) { throw new android.hardware.@@ cts.@@ hel@@ per@@ s.@@ S@@ en@@ s@@ or@@ Not@@ Sup@@ ported@@ Exception@@ (android.@@ hardware.@@ S@@ en@@ s@@ or.@@ TYPE_@@ AC@@ CE@@ L@@ ER@@ O@@ ME@@ TER@@ ); } boolean result = m@@ S@@ en@@ s@@ or@@ Manager.@@ register@@ Listener@@ (m@@ Null@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ , s@@ en@@ s@@ or@@ , S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y@@ _N@@ OR@@ M@@ AL@@ ); assert@@ True@@ (@@ result@@ ); result = m@@ S@@ en@@ s@@ or@@ Manager.@@ register@@ Listener@@ (m@@ Null@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ , s@@ en@@ s@@ or@@ , S@@ en@@ s@@ or@@ Manager.@@ S@@ EN@@ S@@ OR@@ _@@ DE@@ LA@@ Y@@ _N@@ OR@@ M@@ AL@@ ); assert@@ False@@ (@@ result@@ ); m@@ S@@ en@@ s@@ or@@ Manager.@@ un@@ register@@ Listener@@ (m@@ Null@@ S@@ en@@ s@@ or@@ Event@@ Listener@@ ); }
@com.android.annotations.NonNull public java.util.Map@@ <java.lang.String, com.android.builder.@@ model.@@ Android@@ Project@@ > get@@ All@@ Mode@@ l@@ s() { java.util.Map@@ <java.lang.String, com.android.builder.@@ model.@@ Android@@ Project@@ > all@@ Mode@@ l@@ s = get@@ All@@ Mode@@ l@@ s@@ (@@ new com.android.build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ fi@@ xt@@ ure@@ .@@ Get@@ Android@@ Mode@@ l@@ Action@@ (), false@@ ); for (com.android.@@ builder.@@ model.@@ Android@@ Pro@@ ject pro@@ ject : all@@ Mode@@ ls.@@ valu@@ es@@ ()) { if (!(@@ pro@@ jec@@ t.get@@ S@@ ync@@ I@@ ss@@ u@@ es@@ ().@@ isEmpty@@ ())) { java.lang.String@@ Builder ms@@ g = new java.lang.String@@ Builder@@ (); ms@@ g.@@ append("@@ Pro@@ ject ").@@ append(@@ pro@@ jec@@ t.get@@ Name@@ ()).@@ append(@@ " h@@ ad s@@ yn@@ c is@@ s@@ ue@@ s :@@ \n@@ "); for (com.android.@@ builder.@@ model.@@ S@@ ync@@ I@@ ss@@ u@@ e s@@ ync@@ I@@ ss@@ u@@ e : pro@@ jec@@ t.get@@ S@@ ync@@ I@@ ss@@ u@@ es@@ ()) { ms@@ g.@@ append@@ (s@@ ync@@ I@@ ss@@ ue@@ ); ms@@ g.@@ append("@@ \n@@ "); } fail@@ (m@@ s@@ g.@@ toString@@ ()); } } return all@@ Mode@@ l@@ s; }
private void in@@ it@@ De@@ vices@@ () { m@@ Device@@ Lis@@ t = null@@ ; com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ S@@ d@@ k s@@ d@@ k = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .get@@ Current@@ (); if (s@@ d@@ k != null@@ ) { m@@ Device@@ Manager = new com.android.sdklib.@@ de@@ vices.@@ Device@@ Manager@@ (com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ P@@ lu@@ gin@@ .get@@ Default@@ ()); m@@ Device@@ Lis@@ t = m@@ Device@@ Manager.get@@ De@@ vices@@ (s@@ dk@@ .get@@ Sdk@@ Location@@ ()); } if ((@@ (m@@ Device@@ List@@ ) != null@@ ) && ((m@@ Device@@ List.@@ size@@ ()) > 0@@ )) { com.android.sdklib.@@ de@@ vices.@@ Device fi@@ r@@ s@@ t = m@@ Device@@ Lis@@ t.get@@ (@@ 0); sele@@ ct@@ Device@@ (@@ fi@@ r@@ st@@ ); java.util.List<@@ com.android.sdklib.@@ de@@ vices.@@ State@@ > state@@ s = fi@@ r@@ s@@ t.get@@ All@@ Stat@@ es@@ (); sele@@ ct@@ Device@@ State@@ (@@ stat@@ es@@ .get@@ (0@@ )); } else { sele@@ ct@@ Device@@ (@@ null@@ ); } }
@org.junit.Test public void test@@ Valid@@ Config@@ Is@@ S@@ av@@ ed@@ On@@ Fail@@ ure@@ To@@ Start@@ () throw@@ s java.lang.Exception { when(m@@ W@@ if@@ i@@ In@@ ject@@ or@@ .m@@ ake@@ W@@ if@@ i@@ con@@ d@@ ()).@@ thenReturn@@ (@@ null@@ ); when(m@@ W@@ if@@ i@@ In@@ ject@@ or@@ .get@@ W@@ if@@ i@@ Ap@@ Config@@ Store@@ ()).@@ thenReturn@@ (m@@ W@@ if@@ i@@ Ap@@ Config@@ Stor@@ e); android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configur@@ ation con@@ fig = new android.net.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Configuration@@ (); config.@@ SS@@ I@@ D = "@@ Th@@ is@@ Is@@ A@@ Config@@ "; m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.@@ en@@ ter@@ S@@ o@@ f@@ t@@ AP@@ Mode@@ (@@ config@@ ); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s("@@ S@@ o@@ f@@ t@@ AP@@ Mode@@ State@@ ", m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); m@@ Loo@@ per.@@ dis@@ p@@ atch@@ All@@ (); assert@@ Equal@@ s("@@ S@@ o@@ f@@ t@@ AP@@ Mode@@ State@@ ", m@@ W@@ if@@ i@@ StateMach@@ ine@@ Pri@@ m@@ e.get@@ Current@@ Mode@@ ()); ve@@ r@@ if@@ y@@ (m@@ W@@ if@@ i@@ Ap@@ Config@@ Store@@ ).set@@ Ap@@ Configuration@@ (e@@ q@@ (@@ config@@ )); }
private void po@@ st@@ Ad@@ j@@ u@@ st@@ Su@@ g@@ g@@ es@@ ted@@ Stream@@ Vo@@ lum@@ e@@ (@@ final int di@@ re@@ ction@@ , final int su@@ g@@ g@@ es@@ ted@@ Stream@@ , final int flag@@ s, final java.lang.String package@@ Name, final java.lang.String TAG@@ ) { m@@ Handler.@@ po@@ st@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { try { m@@ Audio@@ Service.@@ ad@@ j@@ u@@ st@@ Su@@ g@@ g@@ es@@ ted@@ Stream@@ Vo@@ lum@@ e@@ (d@@ ire@@ ction@@ , su@@ g@@ g@@ g@@ es@@ ted@@ Stream@@ , flag@@ s, package@@ Name, TAG@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (@@ TAG, "@@ Error ad@@ j@@ u@@ st@@ ing default vo@@ lum@@ e.@@ ", e); } } }); }
static void set@@ D@@ ouble@@ (java.lang.@@ invok@@ e.@@ Method@@ Hand@@ le m@@ , Main.@@ Value@@ H@@ ol@@ der v@@ , do@@ ub@@ le value@@ , boolean expec@@ t@@ Fail@@ ure@@ ) throw@@ s java.lang.@@ Throw@@ able { boolean excepti@@ on@@ Throw@@ n = false@@ ; try { if (@@ v == null@@ ) { m.@@ invok@@ e@@ Ex@@ act@@ (@@ valu@@ e); } else { m.@@ invok@@ e@@ Ex@@ act@@ (@@ v@@ , valu@@ e); } } catch (java.lang.@@ invok@@ e.@@ W@@ ron@@ g@@ Method@@ Type@@ Exception e) { excepti@@ on@@ Throw@@ n = true@@ ; } Main.@@ Test@@ er@@ .@@ assert@@ Equal@@ s(@@ excepti@@ on@@ Th@@ ro@@ wn@@ , expec@@ t@@ Fail@@ ure@@ ); }
static boolean is@@ Abstract@@ (java.lang.@@ Class@@ <@@ ?@@ > k@@ lass@@ ) { return ((@@ k@@ las@@ s.get@@ Mo@@ d@@ if@@ ier@@ s@@ ()) & (java.lang.@@ ref@@ le@@ ct.@@ Mo@@ d@@ if@@ i@@ er.@@ A@@ B@@ S@@ TR@@ AC@@ T@@ )) == (java.lang.@@ ref@@ le@@ ct.@@ Mo@@ d@@ if@@ i@@ er.@@ A@@ B@@ S@@ TR@@ AC@@ T@@ ); }
private static synchronized java.security.@@ Ke@@ y get@@ En@@ cryp@@ t@@ Key@@ (java.lang.String al@@ gorith@@ m@@ ) throw@@ s java.lang.Exception { java.security.@@ Ke@@ y ke@@ y = libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ EN@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y@@ S@@ .get@@ (@@ al@@ gorith@@ m@@ ); if (@@ ke@@ y != null@@ ) { return key@@ ; } al@@ gorith@@ m = libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ get@@ Base@@ Algorith@@ m@@ (@@ al@@ gorith@@ m@@ ); if (@@ al@@ gorith@@ m.@@ start@@ s@@ With@@ ("@@ RS@@ A@@ ")) { java.security.@@ Key@@ Fa@@ ctor@@ y k@@ f = java.security.@@ Key@@ Fa@@ ctory@@ .get@@ Instance@@ ("@@ RS@@ A@@ "); java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ S@@ pe@@ c key@@ S@@ pe@@ c = new java.security.@@ spec@@ .@@ RS@@ AP@@ ri@@ v@@ ate@@ Key@@ Spec@@ (@@ libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ RS@@ A@@ _@@ 2@@ 0@@ 4@@ 8@@ _@@ mo@@ d@@ ul@@ u@@ s, libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ RS@@ A@@ _@@ 2@@ 0@@ 4@@ 8@@ _@@ private@@ Ex@@ pon@@ ent@@ ); ke@@ y = k@@ f.@@ g@@ ener@@ ate@@ Pri@@ v@@ ate@@ (@@ key@@ Spec@@ ); } else { javax.@@ cryp@@ to.@@ Key@@ Gener@@ at@@ or k@@ g = javax.@@ cryp@@ to.@@ Key@@ Gener@@ ator@@ .get@@ Instance@@ (@@ al@@ gorith@@ m@@ ); ke@@ y = k@@ g.@@ g@@ ener@@ ate@@ Key@@ (); } libcore.@@ javax.@@ cryp@@ to.@@ Cip@@ her@@ Test.@@ EN@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y@@ S@@ .@@ put@@ (@@ al@@ gorith@@ m@@ , key@@ ); return key@@ ; }
private synchronized void in@@ it@@ (@@ @com.android.annotations.NonNull com.android.@@ uti@@ ls.@@ I@@ Logg@@ er logg@@ er@@ ) { if ((m@@ Sdk@@ Info@@ ) == null@@ ) { java.lang.String ho@@ st@@ ; if ((@@ com.android.@@ Sdk@@ Constants.@@ C@@ UR@@ RE@@ N@@ T_@@ P@@ LA@@ T@@ F@@ OR@@ M@@ ) == (com.android.@@ Sdk@@ Constants.@@ P@@ LA@@ T@@ F@@ OR@@ M@@ _@@ D@@ AR@@ W@@ IN@@ )) { ho@@ s@@ t = "@@ d@@ ar@@ w@@ in@@ -@@ x@@ 8@@ 6@@ "; } else if ((@@ com.android.@@ Sdk@@ Constants.@@ C@@ UR@@ RE@@ N@@ T_@@ P@@ LA@@ T@@ F@@ OR@@ M@@ ) == (com.android.@@ Sdk@@ Constants.@@ P@@ LA@@ T@@ F@@ OR@@ M@@ _@@ L@@ IN@@ U@@ X@@ )) { ho@@ s@@ t = "@@ lin@@ u@@ x@@ "; } else { throw new java.lang.Illegal@@ State@@ Exception("@@ W@@ in@@ do@@ w@@ s is not suppor@@ ted for pla@@ t@@ for@@ m de@@ ve@@ lo@@ p@@ ment@@ "); } m@@ Sdk@@ Info = new com.android.builder.@@ s@@ dk@@ .@@ Sdk@@ Info@@ (@@ new java.io.File@@ (m@@ T@@ re@@ e@@ Location@@ , (("@@ out@@ /@@ ho@@ st@@ /@@ " + ho@@ st@@ ) + "@@ /@@ framework@@ /@@ annotations.@@ ja@@ r@@ "@@ )), m@@ N@@ dk@@ Location@@ , new java.io.File@@ (m@@ T@@ re@@ e@@ Location@@ , (("@@ out@@ /@@ ho@@ st@@ /@@ " + ho@@ st@@ ) + "@@ /@@ b@@ in@@ /@@ ad@@ b@@ "@@ )), new java.io.File@@ (get@@ Host@@ Too@@ l@@ s@@ Folder@@ (), com.android.@@ Sdk@@ Constants.@@ F@@ N@@ _@@ Z@@ IP@@ AL@@ I@@ G@@ N@@ )); } }
private void process@@ File@@ (@@ java.io.File source@@ Folder@@ , java.io.File file@@ , com.android.build@@ er@@ .@@ int@@ er@@ n@@ al.@@ comp@@ il@@ er.@@ Source@@ Se@@ arch@@ er.@@ Source@@ File@@ Process@@ or process@@ or@@ ) throw@@ s java.io.IO@@ Exception, java.lang.@@ Inter@@ rup@@ ted@@ Exception { if (@@ file.@@ is@@ File@@ ()) { if (@@ check@@ Ex@@ t@@ ension@@ (file@@ )) { process@@ or.@@ process@@ File@@ (s@@ ource@@ Folder@@ , file@@ ); } } else if (@@ file.@@ is@@ Directory@@ ()) { java.io.File@@ [] ch@@ ild@@ re@@ n = file.@@ list@@ Fil@@ es@@ (); if (@@ ch@@ ild@@ re@@ n != null@@ ) { for (@@ java.io.File ch@@ il@@ d : ch@@ ild@@ r@@ en@@ ) { process@@ File@@ (s@@ ource@@ Folder@@ , ch@@ ild@@ , process@@ or@@ ); } } }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null java.io.@@ Input@@ Stream open@@ Read@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Par@@ ent@@ V@@ File file@@ ) throw@@ s com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { assert !@@ (is@@ C@@ lo@@ sed@@ ()); assert cap@@ abili@@ ties.@@ contain@@ s(@@ Capabili@@ ties.@@ RE@@ AD@@ ); java.io.File p@@ ath = get@@ Native@@ File@@ (file@@ .get@@ Path@@ ()); try { return new java.io.File@@ InputStream@@ (p@@ ath@@ ); } catch (@@ java.io.File@@ Not@@ F@@ ound@@ Exception e) { com.android.sched.util.file.@@ File@@ Or@@ Dire@@ ctor@@ y.@@ check@@ Permission@@ s(@@ path@@ , file@@ .get@@ Location@@ (), Permission@@ .@@ RE@@ AD@@ ); throw new com.android.sched.util.@@ Con@@ current@@ IO@@ Exception(@@ e); } }
private void load@@ View@@ Server@@ Info@@ And@@ W@@ in@@ do@@ w@@ s@@ (@@ final com.android.ddmlib.@@ I@@ Device device@@ ) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ View@@ Server@@ Info view@@ Server@@ Info = com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ load@@ View@@ Server@@ Info@@ (device@@ ); if (@@ view@@ Server@@ Info == null@@ ) { return@@ ; } com.android.@@ hierarchyviewerlib.@@ device@@ .@@ W@@ in@@ do@@ w@@ [] w@@ in@@ do@@ w@@ s = com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ load@@ W@@ in@@ do@@ w@@ s(@@ device@@ ); com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ Device@@ Selection@@ Mode@@ l@@ ().@@ add@@ Device@@ (device@@ , w@@ in@@ do@@ w@@ s); if ((@@ view@@ Server@@ Info.@@ pro@@ to@@ col@@ Version@@ ) >@@ = 3@@ ) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ W@@ in@@ do@@ w@@ Up@@ dat@@ er.@@ start@@ Listen@@ For@@ W@@ in@@ do@@ w@@ Chan@@ g@@ es@@ (@@ this@@ , device@@ ); fo@@ c@@ us@@ Changed@@ (device@@ ); } }
public void set@@ Test@@ Output@@ Dir@@ (@@ java.io.File test@@ Output@@ Dir@@ ) { this@@ .@@ test@@ Output@@ Di@@ r = test@@ Output@@ Dir@@ ; }
@org.junit.Test public void valid@@ ate@@ User@@ Cre@@ denti@@ al@@ With@@ out@@ C@@ a@@ Cer@@ t@@ () throw@@ s java.lang.Exception { android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al cre@@ d = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al@@ (); cre@@ d.@@ re@@ al@@ m = "@@ re@@ al@@ m@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al = new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ p@@ p@@ s.@@ Cre@@ denti@@ al.@@ User@@ Cre@@ denti@@ al@@ (); cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ user@@ name = "@@ user@@ name@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ p@@ ass@@ wor@@ d = "@@ p@@ ass@@ wor@@ d@@ "; cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ e@@ ap@@ Type = android.net.@@ w@@ if@@ i.@@ E@@ AP@@ Constants.@@ E@@ AP@@ _@@ T@@ L@@ S@@ ; cre@@ d.@@ user@@ Cre@@ denti@@ al.@@ n@@ on@@ E@@ ap@@ In@@ ner@@ M@@ etho@@ d = "@@ MS@@ -@@ CH@@ AP@@ "; assert@@ False@@ (@@ cre@@ d.@@ valid@@ ate@@ ()); }
public void test@@ Control@@ ler@@ Up@@ date@@ () { com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er w@@ r@@ app@@ er = com.android.bluetooth.@@ avrcp.@@ Media@@ Play@@ er@@ W@@ r@@ app@@ er.@@ w@@ rap@@ (m@@ Mock@@ Control@@ ler@@ , m@@ Thread@@ .get@@ Loo@@ per@@ ()); org.junit.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ w@@ r@@ app@@ er.@@ is@@ Read@@ y@@ ()); w@@ r@@ app@@ er.@@ register@@ Callback@@ (m@@ Test@@ C@@ b@@ s); com.android.bluetooth.@@ avrcp.@@ Media@@ Contro@@ lle@@ r m@@ Up@@ dat@@ ed@@ Contro@@ lle@@ r = mock@@ (com.android.bluetooth.@@ avrcp.@@ Media@@ Control@@ ler@@ .@@ class@@ ); do@@ Return@@ (m@@ Test@@ State@@ ).@@ when(m@@ Up@@ dat@@ ed@@ Control@@ ler@@ ).get@@ Play@@ back@@ State@@ (); m@@ Test@@ Met@@ ad@@ ata@@ .@@ put@@ String(@@ Media@@ Met@@ ad@@ ata@@ .@@ ME@@ TA@@ DA@@ TA@@ _@@ KE@@ Y_@@ TI@@ T@@ LE@@ , "@@ Ne@@ w T@@ it@@ le@@ "); do@@ Return@@ (m@@ Test@@ Met@@ ad@@ ata@@ .@@ build@@ ()).@@ when(m@@ Up@@ dat@@ ed@@ Control@@ ler@@ ).get@@ Met@@ ad@@ ata@@ (); do@@ Return@@ (@@ null@@ ).@@ when(m@@ Mock@@ Control@@ ler@@ ).get@@ Q@@ ue@@ ue@@ (); w@@ r@@ app@@ er.@@ update@@ Media@@ Control@@ ler@@ (m@@ Up@@ dat@@ ed@@ Control@@ ler@@ ); ve@@ r@@ if@@ y@@ (m@@ Up@@ dat@@ ed@@ Control@@ ler@@ ).@@ register@@ Callback@@ (m@@ Control@@ ler@@ C@@ b@@ s.@@ cap@@ t@@ ure@@ (), any@@ ()); com.android.bluetooth.@@ avrcp.@@ Media@@ Control@@ ler.@@ Call@@ b@@ ac@@ k cont@@ ro@@ l@@ ler@@ Callback@@ s = m@@ Control@@ ler@@ C@@ b@@ s.get@@ Value@@ (); cont@@ ro@@ l@@ ler@@ Callback@@ s.@@ on@@ Met@@ ad@@ ata@@ Changed@@ (m@@ Test@@ Met@@ ad@@ ata@@ .@@ build@@ ()); ve@@ r@@ if@@ y@@ (m@@ Test@@ C@@ b@@ s, ne@@ ver@@ ()).@@ media@@ Up@@ dat@@ ed@@ Callback@@ (@@ any@@ ()); }
private void update@@ C@@ arrier@@ Id@@ And@@ Name@@ (@@ int c@@ id, java.lang.String name@@ ) { boolean up@@ d@@ ate = false@@ ; if (!(@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ C@@ arrier@@ Id@@ ent@@ if@@ i@@ er.@@ equals(@@ name@@ , mC@@ arrier@@ Name, true@@ ))) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ C@@ arrier@@ Id@@ ent@@ if@@ i@@ er.@@ log@@ d@@ ((@@ (("@@ [@@ update@@ C@@ arrier@@ Name@@ ] f@@ rom@@ :@@ " + (m@@ C@@ arrier@@ Name@@ )) + " to@@ :@@ ") + name@@ )); mC@@ arrier@@ Name = name@@ ; up@@ d@@ ate = true@@ ; } if (c@@ id != (m@@ C@@ arrier@@ Id@@ )) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ C@@ arrier@@ Id@@ ent@@ if@@ i@@ er.@@ log@@ d@@ ((@@ (("@@ [@@ update@@ C@@ arrier@@ Id@@ ] f@@ rom@@ :@@ " + (m@@ C@@ arrier@@ Id@@ )) + " to@@ :@@ ") + c@@ id@@ )); mC@@ arrier@@ Id = c@@ id@@ ; up@@ d@@ ate = true@@ ; } if (@@ update@@ ) { mC@@ arrier@@ Id@@ Local@@ Log.@@ log@@ ((@@ (("@@ [@@ update@@ C@@ arrier@@ Id@@ And@@ Name@@ ] c@@ id@@ :@@ " + (m@@ C@@ arrier@@ Id@@ )) + " name@@ :@@ ") + (m@@ C@@ arrier@@ Name@@ ))); final android.content.@@ Int@@ ent int@@ ent = new android.content.@@ Intent@@ (android.@@ telephony.@@ Telephony@@ Manager.@@ AC@@ TION@@ _S@@ U@@ B@@ S@@ C@@ R@@ IP@@ TION@@ _C@@ AR@@ R@@ I@@ ER_@@ ID@@ EN@@ TI@@ TY@@ _C@@ H@@ AN@@ G@@ ED@@ ); int@@ ent.@@ put@@ Extra@@ (@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _C@@ AR@@ R@@ I@@ ER_@@ ID@@ , mC@@ arrier@@ Id); int@@ ent.@@ put@@ Extra@@ (@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _C@@ AR@@ R@@ I@@ ER@@ _N@@ AME@@ , mC@@ arrier@@ Name); int@@ ent.@@ put@@ Extra@@ (@@ Telephony@@ Manager.@@ EX@@ TR@@ A@@ _S@@ U@@ B@@ S@@ C@@ R@@ IP@@ TION_@@ ID@@ , m@@ Phon@@ e.get@@ Sub@@ Id@@ ()); m@@ Context.@@ send@@ Broadcast@@ (@@ int@@ ent@@ ); android.content.@@ Content@@ Value@@ s c@@ v = new android.content.@@ Content@@ Valu@@ es@@ (); c@@ v@@ .@@ put@@ (@@ C@@ arrier@@ Id@@ .@@ C@@ AR@@ R@@ I@@ ER_@@ ID@@ , mC@@ arrier@@ Id); c@@ v@@ .@@ put@@ (@@ C@@ arrier@@ Id@@ .@@ N@@ AME@@ , mC@@ arrier@@ Name); m@@ Contex@@ t.get@@ Content@@ Resol@@ ver@@ ().@@ update@@ (android.net.@@ U@@ ri@@ .@@ w@@ ith@@ App@@ end@@ ed@@ Path@@ (@@ C@@ arrier@@ Id@@ .@@ CON@@ TE@@ N@@ T_@@ UR@@ I@@ , java.lang.Integ@@ er.@@ toString@@ (m@@ Phon@@ e.get@@ Sub@@ Id@@ ()@@ )), c@@ v@@ , null@@ , null@@ ); } }
public void test_@@ EV@@ P@@ _C@@ ip@@ her@@ In@@ it@@ _@@ ex@@ _@@ Null@@ _@@ Fail@@ ure@@ () throw@@ s java.lang.Exception { org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Cip@@ her@@ Context contex@@ t = new org.apache.harmony.xnet.provider.jsse.@@ Open@@ SSL@@ Cip@@ her@@ Context@@ (@@ org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ EV@@ P@@ _C@@ IP@@ H@@ ER@@ _C@@ T@@ X@@ _@@ new@@ ()); int ev@@ p@@ Cip@@ h@@ er = org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ EV@@ P@@ _@@ get@@ _@@ c@@ ip@@ her@@ b@@ yn@@ ame@@ ("@@ a@@ es@@ -1@@ 2@@ 8@@ -@@ ec@@ b@@ "); try { org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ EV@@ P@@ _C@@ ip@@ her@@ In@@ it@@ _@@ ex@@ (@@ org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to@@ Test.@@ N@@ UL@@ L, ev@@ p@@ Cip@@ her@@ , null@@ , null@@ , true@@ ); fail@@ ("@@ Null contex@@ t sho@@ ul@@ d throw Null@@ P@@ o@@ int@@ er@@ Exception@@ "); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } }
public boolean is@@ Valid@@ () { return (@@ addres@@ s) != 0; }
@java.lang.Override public final int in@@ itializ@@ e@@ (@@ final android.telephony.@@ m@@ b@@ m@@ s.@@ I@@ M@@ b@@ ms@@ Stream@@ ing@@ Manager@@ Call@@ b@@ ac@@ k call@@ back@@ , final int sub@@ s@@ cription@@ Id) throw@@ s android.os.@@ RemoteException { final int u@@ id = android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (); call@@ back@@ .@@ as@@ Bin@@ der@@ ().@@ lin@@ k@@ To@@ De@@ ath@@ (@@ new android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ () { @java.lang.Override public void b@@ in@@ der@@ Di@@ ed@@ () { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , sub@@ s@@ cription@@ Id); } }@@ , 0); return in@@ itializ@@ e@@ (@@ new android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Stream@@ ing@@ Session@@ Callback@@ () { @java.lang.Override public void on@@ Error@@ (@@ int error@@ Code@@ , java.lang.String message@@ ) { try { call@@ back@@ .@@ on@@ Error@@ (@@ error@@ Code@@ , message@@ ); } catch (android.os.RemoteException e) { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , sub@@ s@@ cription@@ Id); } } @java.lang.Override public void on@@ Stream@@ ing@@ Ser@@ vices@@ Up@@ dat@@ ed@@ (@@ java.util.List<@@ android.telephony.@@ m@@ b@@ m@@ s.@@ Stream@@ ing@@ Service@@ Info@@ > ser@@ vices@@ ) { try { call@@ back@@ .@@ on@@ Stream@@ ing@@ Ser@@ vices@@ Up@@ dat@@ ed@@ (@@ ser@@ vices@@ ); } catch (android.os.RemoteException e) { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , sub@@ s@@ cription@@ Id); } } @java.lang.Override public void on@@ M@@ id@@ d@@ le@@ war@@ e@@ Read@@ y@@ () { try { call@@ back@@ .@@ on@@ M@@ id@@ d@@ le@@ war@@ e@@ Read@@ y@@ (); } catch (android.os.RemoteException e) { on@@ App@@ Callback@@ Di@@ ed@@ (@@ uid@@ , sub@@ s@@ cription@@ Id); } } }@@ , sub@@ s@@ cription@@ Id); }
synchronized void n@@ Allocation@@ Read@@ 1@@ D@@ (@@ long id, int o@@ ff@@ , int m@@ ip@@ , int count@@ , java.lang.Object d, int size@@ Bytes@@ , android.renderscript.Element.@@ Data@@ Type d@@ t, int m@@ Size@@ , boolean u@@ se@@ P@@ add@@ ing@@ ) { valid@@ ate@@ (); r@@ s@@ n@@ Allocation@@ Read@@ 1@@ D@@ (m@@ Contex@@ t, id, o@@ ff@@ , m@@ ip@@ , count@@ , d, size@@ Bytes@@ , d@@ t.@@ m@@ ID@@ , m@@ Size@@ , u@@ se@@ P@@ add@@ ing@@ ); }
@java.lang.Override public void on@@ Create@@ (android.@@ dat@@ ab@@ ase.@@ s@@ q@@ li@@ te@@ .@@ S@@ Q@@ Li@@ te@@ Dat@@ ab@@ as@@ e d@@ b@@ ) { d@@ b.@@ exec@@ S@@ Q@@ L@@ ((((@@ ((((@@ ((((@@ ((((@@ ((("@@ C@@ RE@@ AT@@ E TA@@ BL@@ E " + (com.android.@@ provid@@ er@@ s.@@ telephony.@@ Telephony@@ Provid@@ er.@@ C@@ AR@@ R@@ I@@ E@@ RS@@ _@@ TA@@ BL@@ E@@ )) + "@@ (@@ _@@ id IN@@ TE@@ G@@ E@@ R P@@ R@@ I@@ M@@ AR@@ Y KE@@ Y@@ ,@@ ") + "@@ name TE@@ X@@ T@@ ,@@ ") + "@@ num@@ er@@ i@@ c TE@@ X@@ T@@ ,@@ ") + "@@ m@@ c@@ c TE@@ X@@ T@@ ,@@ ") + "@@ m@@ n@@ c TE@@ X@@ T@@ ,@@ ") + "@@ ap@@ n TE@@ X@@ T@@ ,@@ ") + "@@ u@@ se@@ r TE@@ X@@ T@@ ,@@ ") + "@@ ser@@ ve@@ r TE@@ X@@ T@@ ,@@ ") + "@@ p@@ ass@@ wor@@ d TE@@ X@@ T@@ ,@@ ") + "@@ pro@@ x@@ y TE@@ X@@ T@@ ,@@ ") + "@@ por@@ t TE@@ X@@ T@@ ,@@ ") + "@@ m@@ ms@@ pro@@ x@@ y TE@@ X@@ T@@ ,@@ ") + "@@ m@@ ms@@ por@@ t TE@@ X@@ T@@ ,@@ ") + "@@ m@@ ms@@ c TE@@ X@@ T@@ ,@@ ") + "@@ au@@ th@@ typ@@ e IN@@ TE@@ G@@ ER@@ ,@@ ") + "@@ typ@@ e TE@@ X@@ T@@ ,@@ ") + "@@ curr@@ ent IN@@ TE@@ G@@ ER@@ ,@@ ") + "@@ pro@@ to@@ co@@ l TE@@ X@@ T@@ ,@@ ") + "@@ ro@@ am@@ ing@@ _@@ pro@@ to@@ co@@ l TE@@ X@@ T@@ ,@@ ") + "@@ c@@ arrier@@ _@@ enable@@ d B@@ O@@ O@@ LE@@ AN@@ ,@@ ") + "@@ be@@ ar@@ er IN@@ TE@@ G@@ ER@@ ,@@ ") + "@@ s@@ p@@ n TE@@ X@@ T@@ ,@@ ") + "@@ im@@ s@@ i TE@@ X@@ T@@ ,@@ ") + "@@ g@@ id TE@@ X@@ T@@ ,@@ ") + "@@ m@@ v@@ no@@ _@@ typ@@ e TE@@ X@@ T@@ )@@ ;@@ ")); in@@ it@@ Dat@@ ab@@ ase@@ (d@@ b@@ ); }
public static java.lang.String m@@ ap@@ Library@@ Name@@ (java.lang.String n@@ i@@ ck@@ name@@ ) { return ("@@ lib@@ " + n@@ i@@ ck@@ name@@ ) + "@@ .@@ so@@ "; }
public native void t@@ c@@ d@@ r@@ ain@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@java.lang.Override public void get@@ Network@@ Selection@@ Mode@@ (android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ Q@@ U@@ ER@@ Y@@ _N@@ E@@ T@@ W@@ OR@@ K@@ _S@@ E@@ L@@ EC@@ TION@@ _M@@ O@@ DE@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); try { radioProx@@ y@@ .get@@ Network@@ Selection@@ Mode@@ (rr@@ .m@@ Ser@@ ial@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ get@@ Network@@ Selection@@ Mode@@ ", e); } } }
@java.lang.Override public void on@@ Connection@@ State@@ Change@@ (android.bluetooth.Bluetooth@@ G@@ at@@ t g@@ at@@ t, int statu@@ s, int new@@ State@@ ) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ("@@ on@@ Connection@@ State@@ Chan@@ g@@ e " + stat@@ us@@ )); if (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ )) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ((("@@ State Connec@@ ted to ma@@ c addres@@ s " + (@@ g@@ at@@ t.get@@ Device@@ ().get@@ Address@@ ())) + " statu@@ s ") + stat@@ us@@ )); m@@ Bluetooth@@ G@@ at@@ t.@@ dis@@ cover@@ Ser@@ vices@@ (); } else if (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ )) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ((("@@ State Dis@@ connec@@ ted f@@ ro@@ m ma@@ c addres@@ s " + (@@ g@@ at@@ t.get@@ Device@@ ().get@@ Address@@ ())) + " statu@@ s ") + stat@@ us@@ )); } else if (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ T@@ ING@@ )) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ((("@@ Connec@@ t@@ ing to ma@@ c addres@@ s " + (@@ g@@ at@@ t.get@@ Device@@ ().get@@ Address@@ ())) + " statu@@ s ") + stat@@ us@@ )); } else if (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ T@@ ING@@ )) { android.util.Log.d@@ (com.android.@@ p@@ m@@ c.@@ G@@ att@@ Client@@ Listen@@ er.@@ TAG, ((("@@ State Dis@@ connect@@ ing f@@ ro@@ m ma@@ c addres@@ s " + (@@ g@@ at@@ t.get@@ Device@@ ().get@@ Address@@ ())) + " statu@@ s ") + stat@@ us@@ )); } }
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ S@@ m@@ all@@ Test @org.junit.Test public void test@@ Reg@@ is@@ tr@@ ation@@ Callback@@ S@@ end@@ Current@@ State@@ Dis@@ connec@@ ted@@ () throw@@ s android.os.@@ RemoteException { android.telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Reg@@ is@@ tr@@ ation@@ Imp@@ l@@ Bas@@ e.@@ Call@@ b@@ ac@@ k m@@ Callback@@ 2 = s@@ py@@ (@@ new android.telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Reg@@ is@@ tr@@ ation@@ Imp@@ l@@ Bas@@ e.@@ Callback@@ ()); com.android.@@ ims.@@ Ims@@ Re@@ as@@ on@@ Info in@@ fo = new com.android.@@ ims.@@ Ims@@ Re@@ as@@ on@@ Info@@ (com.android.@@ ims.@@ Ims@@ Re@@ as@@ on@@ Info.@@ C@@ OD@@ E_@@ LO@@ C@@ AL@@ _N@@ E@@ T@@ W@@ OR@@ K@@ _N@@ O@@ _@@ L@@ TE_@@ C@@ O@@ V@@ ER@@ A@@ G@@ E, 0); m@@ Reg@@ is@@ tr@@ ation.@@ on@@ D@@ er@@ e@@ g@@ ister@@ ed@@ (in@@ fo@@ ); m@@ Reg@@ B@@ ind@@ er.@@ add@@ Reg@@ is@@ tr@@ ation@@ Listener@@ (m@@ Callback@@ 2@@ ); ve@@ r@@ if@@ y@@ (m@@ Callback@@ ).@@ on@@ D@@ er@@ e@@ g@@ ister@@ ed@@ (e@@ q@@ (in@@ fo@@ )); ve@@ r@@ if@@ y@@ (m@@ Callback@@ 2@@ ).@@ on@@ D@@ er@@ e@@ g@@ ister@@ ed@@ (e@@ q@@ (in@@ fo@@ )); }
protected void t@@ _@@ Format@@ With@@ Field@@ (@@ int count@@ , java.text.@@ For@@ ma@@ t for@@ mat@@ , java.lang.Object ob@@ ject@@ , java.lang.String tex@@ t, java.text.@@ Format@@ .@@ Fi@@ el@@ d field@@ , int be@@ gin@@ , int end@@ ) { java.lang.String@@ Buff@@ er buff@@ er = new java.lang.String@@ Buffer@@ (); java.text.@@ Field@@ Posi@@ tion po@@ s = new java.text.@@ Field@@ Posi@@ tion@@ (@@ field@@ ); for@@ mat@@ .@@ for@@ mat@@ (@@ ob@@ ject@@ , buff@@ er, po@@ s); if (@@ tex@@ t == null@@ ) { assert@@ Equal@@ s@@ ((("@@ Test " + count@@ ) + "@@ : in@@ cor@@ re@@ c@@ t for@@ mat@@ ted tex@@ t@@ "), this@@ .@@ tex@@ t, buff@@ er.@@ toString@@ ()); } else { assert@@ Equal@@ s@@ ((("@@ Test " + count@@ ) + "@@ : in@@ cor@@ re@@ c@@ t for@@ mat@@ ted tex@@ t@@ "), tex@@ t, buff@@ er.@@ toString@@ ()); } if ((@@ be@@ g@@ in != (p@@ os.@@ get@@ B@@ e@@ gin@@ Index@@ ())) || (@@ en@@ d != (p@@ os.@@ get@@ En@@ d@@ Index@@ ()))) { assert@@ Equal@@ s@@ (((@@ be@@ g@@ in + "@@ .@@ ") + end@@ ), ((@@ (p@@ os.@@ get@@ B@@ e@@ gin@@ Index@@ ()) + "@@ .@@ ") + (p@@ os.@@ get@@ En@@ d@@ Index@@ ()))); } }
public java.io.@@ Buffer@@ ed@@ Read@@ er get@@ InputStream@@ () throw@@ s java.io.IOException { if ((@@ in@@ ) != null@@ ) { return in@@ ; } return in = new java.io.@@ Buffer@@ ed@@ Read@@ er@@ (@@ new java.io.@@ InputStream@@ Read@@ er@@ (s@@ ocket@@ Chan@@ ne@@ l.@@ s@@ ocket@@ ().get@@ InputStream@@ ())); }
private void handle@@ Imp@@ ort@@ an@@ ce@@ Change@@ (com.android.bluetooth.@@ g@@ at@@ t.@@ Scan@@ Manager.@@ U@@ id@@ Imp@@ ort@@ an@@ ce im@@ p@@ ) { if (@@ im@@ p == null@@ ) { return@@ ; } int u@@ id = im@@ p.@@ uid@@ ; int import@@ an@@ ce = im@@ p@@ .@@ import@@ an@@ ce@@ ; if (@@ import@@ an@@ ce <@@ = (@@ Activity@@ Manager.@@ Run@@ n@@ ing@@ App@@ Process@@ Info.@@ I@@ M@@ P@@ OR@@ TA@@ N@@ C@@ E_@@ F@@ O@@ RE@@ G@@ RO@@ UN@@ D@@ _S@@ ER@@ VIC@@ E@@ )) { for (com.android.bluetooth.@@ g@@ at@@ t.@@ Scan@@ C@@ li@@ ent c@@ li@@ ent : m@@ Reg@@ ul@@ ar@@ Scan@@ Client@@ s) { if ((@@ (c@@ li@@ ent.@@ app@@ U@@ id@@ ) == uid@@ ) && ((@@ c@@ li@@ ent.@@ p@@ as@@ si@@ ve@@ Setting@@ s) != null@@ )) { c@@ li@@ ent.@@ setting@@ s = c@@ li@@ ent.@@ p@@ as@@ si@@ ve@@ Setting@@ s; c@@ li@@ ent.@@ p@@ as@@ si@@ ve@@ Setting@@ s = null@@ ; } } else { for (com.android.bluetooth.@@ g@@ at@@ t.@@ Scan@@ C@@ li@@ ent c@@ li@@ ent : m@@ Reg@@ ul@@ ar@@ Scan@@ Client@@ s) { if ((@@ c@@ li@@ ent.@@ app@@ U@@ id@@ ) == uid@@ ) { c@@ li@@ ent.@@ p@@ as@@ si@@ ve@@ Setting@@ s = c@@ li@@ ent.@@ setting@@ s; android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s.@@ Builder bu@@ ilder = new android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s.@@ Builder@@ (); android.@@ bluetooth.@@ le.@@ Scan@@ Setting@@ s setting@@ s = c@@ li@@ ent.@@ setting@@ s; builder.@@ set@@ Scan@@ Mode@@ (@@ Scan@@ Setting@@ s.@@ S@@ C@@ AN@@ _M@@ OD@@ E_@@ LO@@ W@@ _P@@ O@@ W@@ ER@@ ); builder.@@ set@@ Callback@@ Type@@ (@@ setting@@ s.get@@ Callback@@ Type@@ ()); builder.@@ set@@ Scan@@ Result@@ Type@@ (@@ setting@@ s.get@@ Scan@@ Result@@ Type@@ ()); builder.@@ set@@ Re@@ port@@ De@@ lay@@ (@@ setting@@ s.get@@ Re@@ port@@ De@@ lay@@ Milli@@ s()); builder.@@ set@@ Num@@ Of@@ M@@ atch@@ es(@@ setting@@ s.get@@ Num@@ Of@@ M@@ atch@@ es@@ ()); c@@ li@@ ent.@@ setting@@ s = builder.@@ build@@ (); } } m@@ Scan@@ N@@ ativ@@ e.@@ config@@ ure@@ Reg@@ ul@@ ar@@ Scan@@ Param@@ s(); }
public void add@@ Connection@@ To@@ Con@@ ference@@ Control@@ ler@@ (com.android.@@ ser@@ vices.@@ telephony.@@ Telephony@@ Connec@@ tion connection@@ ) { com.android.@@ ser@@ vices.@@ telephony.@@ Log.@@ d@@ (@@ this@@ , ("@@ Add@@ ing I@@ M@@ S connec@@ tion to con@@ feren@@ ce cont@@ ro@@ l@@ ler@@ : " + connection@@ )); m@@ Ims@@ Con@@ ference@@ Control@@ ler.@@ add(@@ connection@@ ); }
@java.lang.Override public void check@@ Valid@@ ity@@ () { if (!@@ (((@@ parent@@ ) instanceof com.android.jack.ir.ast.J@@ State@@ ment@@ ) || ((@@ parent@@ ) instanceof com.android.jack.ir.ast.J@@ Abstract@@ Method@@ B@@ o@@ d@@ y@@ ))) { throw new com.android.jack.@@ ir.@@ Inter@@ nal@@ Comp@@ il@@ er@@ Exception@@ (@@ this@@ , "@@ In@@ va@@ li@@ d parent@@ "); } }
@java.lang.Override public void on@@ R@@ tt@@ In@@ iti@@ ation@@ Fail@@ ure@@ (com.android.server.@@ telecom.@@ Cal@@ l call@@ , int re@@ as@@ on@@ ) { not@@ if@@ y@@ R@@ tt@@ Fail@@ ure@@ (c@@ all@@ ); update@@ Call@@ (c@@ all@@ , false@@ , true@@ ); }
@java.lang.Override public java.util.Collection@@ <@@ com.android.builder.@@ model.@@ Sign@@ ing@@ Config@@ > get@@ Sign@@ ing@@ Config@@ s() { return com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ copy@@ Of@@ (@@ com.google.common.@@ colle@@ ct.@@ I@@ ter@@ ab@@ l@@ es.@@ tr@@ an@@ s@@ for@@ m@@ (m@@ o@@ de@@ l.get@@ Sign@@ ing@@ Config@@ s@@ (), new com.google.common.@@ b@@ ase.@@ F@@ un@@ ction@@ <@@ com.android.build.gradle.@@ man@@ ag@@ ed.@@ Sign@@ ing@@ Config@@ , com.android.builder.@@ model.@@ Sign@@ ing@@ Config@@ >@@ () { @java.lang.Override public com.android.build.gradle.@@ man@@ ag@@ ed.@@ Sign@@ ing@@ Con@@ fig app@@ ly@@ (com.android.@@ build@@ .gradle.@@ man@@ ag@@ ed.@@ Sign@@ ing@@ Con@@ fig sign@@ ing@@ Config@@ ) { return new com.android.build.gradle.@@ man@@ ag@@ ed.@@ Sign@@ ing@@ Config@@ Adap@@ tor@@ (@@ sign@@ ing@@ Config@@ ); } }@@ )); }
@org.junit.Test public void test@@ Par@@ cel@@ Network@@ Capabilities@@ () { final java.util.@@ Set@@ <@@ android.net.@@ U@@ id@@ R@@ an@@ ge@@ > uid@@ s = new android.util.@@ Array@@ Set@@ (); uid@@ s.add@@ (@@ new android.net.@@ U@@ id@@ R@@ an@@ ge@@ (@@ 5@@ 0, 1@@ 00@@ )); uid@@ s.add@@ (@@ new android.net.@@ U@@ id@@ R@@ an@@ ge@@ (@@ 3@@ 00@@ 0, 4@@ 00@@ 0@@ )); final android.net.Network@@ Capabili@@ ti@@ es net@@ C@@ a@@ p = new android.net.Network@@ Capabilities@@ ().@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ IN@@ TER@@ NE@@ T@@ ).set@@ Al@@ low@@ ed@@ U@@ id@@ s(@@ uid@@ s@@ ).@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _@@ E@@ I@@ MS@@ ).@@ add@@ Capabili@@ ty@@ (android.net.@@ Network@@ Capabili@@ ties.@@ NE@@ T_@@ C@@ AP@@ A@@ B@@ IL@@ ITY@@ _N@@ O@@ T_@@ ME@@ TER@@ ED@@ ); assert@@ Equal@@ s@@ Th@@ ro@@ u@@ g@@ h@@ M@@ ar@@ sh@@ all@@ ing@@ (@@ net@@ Cap@@ ); }
@java.lang.Override protected java.lang.String get@@ E@@ F@@ Path@@ (@@ int e@@ f@@ id@@ ) { switch (e@@ f@@ id@@ ) { case E@@ F@@ _S@@ M@@ S : case E@@ F@@ _C@@ S@@ T : case E@@ F@@ _@@ R@@ U@@ I@@ M@@ _S@@ P@@ N : case E@@ F@@ _C@@ SI@@ M@@ _@@ L@@ I : case E@@ F@@ _C@@ SI@@ M@@ _M@@ D@@ N : case E@@ F@@ _C@@ SI@@ M@@ _@@ I@@ M@@ SI@@ M : case E@@ F@@ _C@@ SI@@ M@@ _C@@ D@@ MA@@ H@@ O@@ M@@ E : case E@@ F@@ _C@@ SI@@ M@@ _@@ E@@ P@@ R@@ L : return (@@ M@@ F@@ _S@@ I@@ M@@ ) + (@@ D@@ F@@ _C@@ D@@ MA@@ ); } return get@@ Com@@ mon@@ Icc@@ E@@ F@@ Path@@ (e@@ f@@ id@@ ); }
@java.lang.Override public void sho@@ w@@ Po@@ pu@@ p@@ (@@ com@@ .@@ int@@ el@@ li@@ j.@@ ui.@@ aw@@ t.@@ Re@@ l@@ ative@@ P@@ o@@ int sho@@ w@@ Target@@ ) { if ((@@ (m@@ y@@ Po@@ pu@@ p@@ ) == null@@ ) || (m@@ y@@ Po@@ pu@@ p.@@ is@@ Dis@@ po@@ sed@@ ())) { com.google.gct.@@ ide@@ a.@@ el@@ y@@ si@@ um@@ .@@ User@@ Sele@@ ctor@@ .@@ Po@@ pu@@ p@@ P@@ an@@ e@@ l po@@ pu@@ p@@ P@@ an@@ e@@ l = new com.google.gct.@@ ide@@ a.@@ el@@ y@@ si@@ um@@ .@@ User@@ Sele@@ ctor@@ .@@ Po@@ pu@@ p@@ P@@ an@@ el@@ (); po@@ pu@@ p@@ P@@ an@@ e@@ l.@@ in@@ itializ@@ e@@ Content@@ (get@@ Text@@ ()); com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ ui.@@ po@@ pu@@ p.@@ Comp@@ on@@ ent@@ Po@@ pu@@ p@@ Builder po@@ pu@@ p = com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ ui.@@ po@@ pu@@ p.@@ J@@ B@@ Po@@ pu@@ p@@ Fa@@ ctory@@ .get@@ Instance@@ ().@@ create@@ Comp@@ on@@ ent@@ Po@@ pu@@ p@@ Builder@@ (@@ po@@ pu@@ p@@ P@@ an@@ el@@ , po@@ pu@@ p@@ P@@ an@@ e@@ l.get@@ In@@ iti@@ al@@ F@@ o@@ c@@ us@@ ()); my@@ J@@ B@@ Po@@ pu@@ p = po@@ pu@@ p.@@ create@@ Po@@ pu@@ p@@ (); } if (!(m@@ y@@ J@@ B@@ Po@@ pu@@ p.@@ is@@ Visi@@ ble@@ ())) { my@@ J@@ B@@ Po@@ pu@@ p.@@ sho@@ w@@ (s@@ ho@@ w@@ Target@@ ); } }
@org.junit.Test public void test@@ Message@@ From@@ Native@@ _@@ device@@ Connec@@ ted@@ () { mC@@ urrent@@ Device = get@@ Test@@ Device@@ (@@ 0); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Ev@@ ent connec@@ ted@@ Ev@@ ent = new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Event@@ (@@ Headset@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ CONNEC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ , Headset@@ H@@ al@@ Constants.@@ CONNEC@@ TION@@ _STA@@ TE_@@ CONNEC@@ TED@@ , mC@@ urrent@@ Device@@ ); m@@ Headset@@ Service.@@ message@@ From@@ Native@@ (@@ connec@@ ted@@ Event@@ ); ve@@ r@@ if@@ y@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service@@ Test.@@ s@@ Object@@ s@@ Fa@@ ctory@@ ).@@ m@@ ake@@ StateMach@@ ine@@ (m@@ Current@@ Device@@ , m@@ Headset@@ Service@@ .get@@ StateMach@@ in@@ es@@ Thread@@ Loo@@ per@@ (), m@@ Headset@@ Service@@ , m@@ Native@@ Interface@@ , m@@ System@@ Interface@@ ); ve@@ r@@ if@@ y@@ (m@@ StateMach@@ in@@ es@@ .get@@ (m@@ Current@@ Device@@ )).@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ STA@@ C@@ K_@@ EVEN@@ T, connec@@ ted@@ Event@@ ); when(m@@ StateMach@@ in@@ es@@ .get@@ (m@@ Current@@ Device@@ ).get@@ Device@@ ()).@@ thenReturn@@ (m@@ Current@@ Device@@ ); when(m@@ StateMach@@ in@@ es@@ .get@@ (m@@ Current@@ Device@@ ).get@@ Connection@@ State@@ ()).@@ thenReturn@@ (@@ Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ ); org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ , m@@ Headset@@ Service@@ .get@@ Connection@@ State@@ (m@@ Current@@ Device@@ )); org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ java.util.Collection@@ s.@@ sing@@ let@@ on@@ List@@ (m@@ Current@@ Device@@ ), m@@ Headset@@ Service@@ .get@@ Connec@@ ted@@ De@@ vices@@ ()); com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Ev@@ ent dis@@ connect@@ Ev@@ ent = new com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Stack@@ Event@@ (@@ Headset@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ CONNEC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ ED@@ , Headset@@ H@@ al@@ Constants.@@ CONNEC@@ TION@@ _STA@@ TE_@@ D@@ IS@@ CONNEC@@ TED@@ , mC@@ urrent@@ Device@@ ); m@@ Headset@@ Service.@@ message@@ From@@ Native@@ (d@@ is@@ connect@@ Event@@ ); ve@@ r@@ if@@ y@@ (m@@ StateMach@@ in@@ es@@ .get@@ (m@@ Current@@ Device@@ )).@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ STA@@ C@@ K_@@ EVEN@@ T, dis@@ connect@@ Event@@ ); when(m@@ StateMach@@ in@@ es@@ .get@@ (m@@ Current@@ Device@@ ).get@@ Connection@@ State@@ ()).@@ thenReturn@@ (@@ Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ ); org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ , m@@ Headset@@ Service@@ .get@@ Connection@@ State@@ (m@@ Current@@ Device@@ )); org.junit.@@ Asser@@ t@@ .@@ assert@@ Equal@@ s(@@ java.util.Collection@@ s.@@ E@@ M@@ P@@ TY@@ _@@ LIS@@ T, m@@ Headset@@ Service@@ .get@@ Connec@@ ted@@ De@@ vices@@ ()); }
private static void create@@ G@@ rad@@ le@@ Properties@@ (@@ @com.android.annotations.NonNull java.io.File loc@@ ation@@ ) throw@@ s java.io.IOException { com.google.common.@@ io.@@ Fil@@ es.@@ write@@ (("@@ org.@@ gradle.@@ j@@ vm@@ arg@@ s@@ =@@ -@@ X@@ m@@ x@@ 8@@ 0@@ 9@@ 6@@ m -@@ X@@ X@@ :@@ Ma@@ x@@ Per@@ m@@ Size@@ =@@ 2@@ 0@@ 4@@ 8@@ m@@ \n@@ " + "@@ org.@@ gradle.@@ d@@ a@@ e@@ mon@@ =@@ true@@ \n@@ "), new java.io.File@@ (@@ loc@@ ation@@ , "@@ gradle.@@ pro@@ per@@ ties@@ "), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ default@@ Char@@ set@@ ()); }
private void check@@ S@@ in@@ h@@ Float2Float2@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 7@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ S@@ in@@ h@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ S@@ in@@ h@@ Float2Float2@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ in@@ h@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ S@@ in@@ h@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ S@@ in@@ h@@ Float2Float2@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ S@@ in@@ h@@ Float2Float2@@ : " + (e.toString()))); } }
public java.util.Collection@@ <@@ com.android.@@ b@@ ip@@ s.@@ dis@@ cover@@ y.@@ Dis@@ cover@@ ed@@ P@@ r@@ int@@ er@@ > get@@ S@@ av@@ ed@@ P@@ r@@ int@@ er@@ s() { return get@@ Ch@@ ild@@ r@@ en@@ ().@@ str@@ eam@@ ().@@ fil@@ ter@@ (@@ ( ch@@ ild@@ ) -@@ > ch@@ il@@ d != (@@ this@@ )).@@ f@@ lat@@ Map@@ (@@ ( ch@@ ild@@ ) -@@ > ch@@ ild@@ .get@@ S@@ av@@ ed@@ P@@ r@@ int@@ er@@ s@@ ().@@ str@@ eam@@ ()).@@ colle@@ ct@@ (java.util.@@ str@@ eam@@ .@@ Colle@@ ctor@@ s.@@ to@@ List@@ ()); }
@java.lang.Override public java.lang.String get@@ Short@@ Des@@ cription@@ () { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Android@@ Target@@ Data t@@ arg@@ et = get@@ Android@@ Target@@ (); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ m@@ an@@ if@@ est.@@ des@@ crip@@ tor@@ s.@@ Android@@ M@@ an@@ if@@ est@@ Descrip@@ tor@@ s m@@ an@@ if@@ est@@ Descrip@@ tor@@ s = null@@ ; if (t@@ arg@@ et != null@@ ) { m@@ an@@ if@@ est@@ Descrip@@ tor@@ s = target@@ .get@@ M@@ an@@ if@@ est@@ Descrip@@ tor@@ s(); } java.lang.String name = get@@ Descrip@@ tor@@ ().get@@ U@@ i@@ Name@@ (); if ((@@ ((m@@ an@@ if@@ est@@ Descrip@@ tor@@ s != null@@ ) && ((@@ get@@ Xml@@ Node@@ ()) != null@@ )) && ((@@ get@@ Xml@@ Node@@ ()) instanceof org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Element@@ )) && (get@@ Xml@@ Node@@ ().@@ has@@ At@@ tri@@ b@@ ut@@ es@@ ())) { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ des@@ crip@@ tor@@ s.@@ Element@@ Descriptor des@@ c = get@@ Descrip@@ tor@@ (); if ((@@ des@@ c != (m@@ an@@ if@@ est@@ Descrip@@ tor@@ s.get@@ M@@ an@@ if@@ est@@ Element@@ ())) && (d@@ es@@ c != (m@@ an@@ if@@ est@@ Descrip@@ tor@@ s.get@@ Application@@ Element@@ ()))) { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Elem@@ ent e@@ le@@ m = ((@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Element@@ ) (get@@ Xml@@ Node@@ ())); java.lang.String att@@ r = _@@ Element@@ _@@ get@@ Attribute@@ N@@ S@@ (e@@ lem@@ , Sdk@@ Constants.@@ N@@ S@@ _RE@@ S@@ O@@ UR@@ CE@@ S@@ , Android@@ M@@ an@@ if@@ est@@ Descrip@@ tor@@ s.@@ AN@@ D@@ RO@@ ID@@ _N@@ AM@@ E_@@ AT@@ TR@@ ); if ((@@ att@@ r == null@@ ) || ((@@ at@@ tr@@ .@@ length@@ ()) == 0@@ )) { att@@ r = _@@ Element@@ _@@ get@@ Attribute@@ N@@ S@@ (e@@ lem@@ , Sdk@@ Constants.@@ N@@ S@@ _RE@@ S@@ O@@ UR@@ CE@@ S@@ , Android@@ M@@ an@@ if@@ est@@ Descrip@@ tor@@ s.@@ AN@@ D@@ RO@@ ID@@ _@@ LA@@ B@@ E@@ L_@@ AT@@ TR@@ ); } if ((@@ att@@ r != null@@ ) && ((@@ at@@ tr@@ .@@ length@@ ()) > 0@@ )) { if ((@@ at@@ tr@@ .@@ index@@ Of@@ (@@ name@@ )) >@@ = 0) { return at@@ tr@@ ; } else { return java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ 1@@ $@@ s (@@ %@@ 2@@ $@@ s@@ )@@ ", at@@ tr@@ , name@@ ); } } } return java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ 1@@ $@@ s", name@@ ); }
public static void cap@@ t@@ ure@@ View@@ (@@ @com.android.annotations.NonNull com.android.ddmlib.@@ C@@ li@@ ent c@@ lient@@ , @com.android.annotations.NonNull java.lang.String view@@ R@@ oo@@ t, @com.android.annotations.NonNull java.lang.String view@@ , @com.android.annotations.NonNull com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ Cap@@ t@@ ure@@ View@@ Handle@@ r hand@@ ler@@ ) throw@@ s java.io.IOException { com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ send@@ J@@ d@@ w@@ p@@ Packet@@ (c@@ lient@@ , com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ CH@@ UN@@ K_@@ V@@ U@@ C@@ V@@ , view@@ R@@ oo@@ t, view@@ , hand@@ ler@@ ); }
@org.junit.Test public void test@@ System@@ Property@@ Al@@ low@@ s@@ Start@@ () { set@@ up@@ F@@ un@@ ction@@ ing@@ H@@ ardwar@@ e@@ Interface@@ (); when(m@@ System@@ Properties@@ .get@@ Boole@@ an@@ (e@@ q@@ (com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ O@@ ff@@ load@@ Control@@ ler.@@ O@@ F@@ LO@@ AD@@ _@@ EN@@ ABL@@ ED@@ _S@@ Y@@ S@@ PRO@@ P@@ _@@ KE@@ Y@@ ), any@@ Boole@@ an@@ ()@@ )).@@ thenReturn@@ (@@ true@@ ); final com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ O@@ ff@@ load@@ Contro@@ lle@@ r o@@ ff@@ lo@@ ad = new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ O@@ ff@@ load@@ Control@@ ler@@ (@@ null@@ , m@@ H@@ ardwar@@ e@@ , m@@ System@@ Properties@@ , new android.net.@@ util.@@ S@@ har@@ ed@@ Log@@ ("@@ test@@ ")); o@@ ff@@ load@@ .@@ start@@ (); final org.@@ mock@@ it@@ o@@ .@@ In@@ Or@@ der in@@ Or@@ der = in@@ Or@@ der@@ (m@@ H@@ ardwar@@ e@@ , m@@ System@@ Properties@@ ); in@@ Or@@ d@@ er.@@ ve@@ r@@ if@@ y@@ (m@@ H@@ ardwar@@ e@@ , new com.android.server.@@ connectivity.@@ t@@ ether@@ ing.@@ O@@ ff@@ load@@ Control@@ ler.@@ O@@ F@@ LO@@ AD@@ _@@ EN@@ ABL@@ ED@@ _S@@ Y@@ S@@ PRO@@ P@@ _@@ KE@@ Y@@ , true@@ ); in@@ Or@@ d@@ er.@@ ve@@ r@@ if@@ y@@ (m@@ H@@ ardwar@@ e@@ , tim@@ es@@ (1@@ )).@@ in@@ it@@ O@@ ff@@ load@@ Config@@ (); in@@ Or@@ d@@ er.@@ ve@@ r@@ if@@ y@@ (m@@ H@@ ardwar@@ e@@ , tim@@ es@@ (1@@ )).@@ in@@ it@@ O@@ ff@@ load@@ Control@@ (@@ any@@ (@@ O@@ ff@@ load@@ H@@ ardwar@@ e@@ Interface@@ .@@ Control@@ Callback@@ .@@ class@@ )); in@@ Or@@ d@@ er.@@ ve@@ r@@ if@@ y@@ No@@ M@@ ore@@ Inter@@ action@@ s(); }
public int get@@ s@@ ock@@ op@@ t@@ Int@@ (java.io.FileDescriptor f@@ d, int le@@ vel@@ , int option@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ get@@ s@@ ock@@ op@@ t@@ Int@@ (f@@ d, le@@ vel@@ , option@@ ); }
@java.lang.Override public org.conscrypt.@@ ct.@@ C@@ T@@ Log@@ Info get@@ K@@ no@@ wn@@ Log@@ (@@ byte@@ [] log@@ Id) { return org.conscrypt.@@ C@@ T@@ Log@@ Store@@ Imp@@ l.@@ K@@ NO@@ W@@ N@@ _@@ LOG@@ S@@ .get@@ (@@ java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (@@ log@@ Id@@ )); }
@java.lang.Override public void write@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Output@@ V@@ Di@@ r output@@ V@@ Dir@@ ) throw@@ s com.android.jack.@@ back@@ end@@ .@@ dex.@@ Dex@@ Wri@@ ting@@ Exception { int dex@@ Coun@@ t = 1; com.android.jack.@@ tools.@@ merger.@@ Jack@@ Merg@@ er merg@@ er = new com.android.jack.@@ tools.@@ merger.@@ Jack@@ Merg@@ er(@@ create@@ Dex@@ File@@ ()); com.android.sched.vfs.@@ Output@@ V@@ File output@@ Dex@@ ; try { output@@ De@@ x = get@@ Output@@ Dex@@ (@@ output@@ V@@ Dir@@ , (@@ dex@@ Count@@ ++@@ )); java.util.List<@@ com.android.sched.vfs.@@ Input@@ V@@ File@@ > main@@ Dex@@ Lis@@ t = new java.util.ArrayList<@@ com.android.sched.vfs.@@ Input@@ V@@ File@@ >(); java.util.List<@@ com.android.sched.vfs.@@ Input@@ V@@ File@@ > any@@ Dex@@ Lis@@ t = new java.util.ArrayList<@@ com.android.sched.vfs.@@ Input@@ V@@ File@@ >(); fil@@ l@@ Dex@@ List@@ s@@ (m@@ ain@@ Dex@@ List@@ , any@@ Dex@@ List@@ ); for (com.android.s@@ ched.@@ vfs.@@ Input@@ V@@ File current@@ De@@ x : main@@ Dex@@ List@@ ) { try { m@@ er@@ ge@@ Dex@@ (m@@ erg@@ er, current@@ Dex@@ ); } catch (com.android.jack.@@ tools.@@ merger.@@ M@@ er@@ ge@@ O@@ ver@@ f@@ lo@@ w e) { throw new com.android.jack.@@ back@@ end@@ .@@ dex.@@ Dex@@ Wri@@ ting@@ Exception("@@ To@@ o man@@ y class@@ es in ma@@ in dex@@ . In@@ dex o@@ ver@@ f@@ lo@@ w while merg@@ ing dex fil@@ es@@ ", e); } } for (com.android.s@@ ched.@@ vfs.@@ Input@@ V@@ File current@@ De@@ x : any@@ Dex@@ List@@ ) { try { m@@ er@@ ge@@ Dex@@ (m@@ erg@@ er, current@@ Dex@@ ); } catch (com.android.jack.@@ tools.@@ merger.@@ M@@ er@@ ge@@ O@@ ver@@ f@@ lo@@ w e) { fin@@ is@@ h@@ M@@ er@@ ge@@ (m@@ erg@@ er, output@@ Dex@@ ); output@@ De@@ x = get@@ Output@@ Dex@@ (@@ output@@ V@@ Dir@@ , (@@ dex@@ Count@@ ++@@ )); merg@@ er = new com.android.jack.@@ tools.@@ merger.@@ Jack@@ Merg@@ er(@@ create@@ Dex@@ File@@ ()); try { m@@ er@@ ge@@ Dex@@ (m@@ erg@@ er, current@@ Dex@@ ); } catch (com.android.jack.@@ tools.@@ merger.@@ M@@ er@@ ge@@ O@@ ver@@ f@@ lo@@ w e@@ 1@@ ) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (); } } } catch (com.android.s@@ ched.@@ util.@@ file.@@ C@@ annot@@ Create@@ File@@ Exception e) { throw new com.android.jack.@@ back@@ end@@ .@@ dex.@@ Dex@@ Wri@@ ting@@ Exception(@@ e); } fin@@ is@@ h@@ M@@ er@@ ge@@ (m@@ erg@@ er, output@@ Dex@@ ); }
@org.junit.Test public void test@@ 00@@ 2@@ e@@ () throw@@ s java.lang.Exception { java.io.File jack@@ Output@@ ; java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); try { jack@@ Out@@ put = run@@ Test@@ 00@@ 2@@ (@@ true@@ , "@@ fail@@ ", er@@ r@@ Out@@ , true@@ , false@@ ); junit.framework.Assert.@@ fail@@ (); } catch (com.android.jack.@@ Jack@@ Ab@@ ort@@ Exception e) { junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (((@@ e.get@@ C@@ au@@ se@@ ()) instanceof com.android.jack.library.@@ Library@@ Read@@ ing@@ Exception@@ )); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (((@@ e.get@@ C@@ au@@ se@@ ()) instanceof com.android.jack.@@ resource@@ .@@ Resource@@ Imp@@ ort@@ Con@@ f@@ li@@ ct@@ Exception@@ )); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (((@@ e.get@@ C@@ au@@ se@@ ()) instanceof com.android.jack.@@ resource@@ .@@ Resource@@ Imp@@ ort@@ Con@@ f@@ li@@ ct@@ Exception@@ )); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (((@@ e.get@@ C@@ au@@ se@@ ()) instanceof com.android.jack.@@ resource@@ .@@ Resource@@ Imp@@ ort@@ Con@@ f@@
public java.lang.String str@@ ip@@ Telephon@@ e@@ Number@@ (java.lang.String v@@ Card@@ ) { java.lang.String[] att@@ r = v@@ Card@@ .@@ s@@ pli@@ t@@ (java.lang.@@ System@@ .get@@ Property@@ ("@@ lin@@ e.@@ se@@ par@@ ator@@ ")); java.lang.String str@@ ip@@ Telephon@@ e@@ Number@@ P@@ o@@ int i = 0; i < (@@ at@@ tr@@ .@@ length); i++) { if (@@ at@@ tr@@ [i]@@ .@@ start@@ s@@ With@@ ("@@ TE@@ L@@ ")) { at@@ tr@@ [i@@ ] = at@@ tr@@ [i]@@ .@@ re@@ pla@@ ce@@ ("@@ ("@@ , "@@ "); at@@ tr@@ [i@@ ] = at@@ tr@@ [i]@@ .@@ re@@ pla@@ ce@@ ("@@ )@@ ", "@@ "); at@@ tr@@ [i@@ ] = at@@ tr@@ [i]@@ .@@ re@@ pla@@ ce@@ ("@@ -@@ ", "@@ "); at@@ tr@@ [i@@ ] = at@@ tr@@ [i]@@ .@@ re@@ pla@@ ce@@ (@@ " ", "@@ "); } } for (@@ int i = 0; i < (@@ at@@ tr@@ .@@ length); i++) { if (!(@@ at@@ tr@@ [i]@@ .is@@ Empty@@ ())) { str@@ ip@@ ed@@ C@@ ar@@ d = str@@ ip@@ ed@@ Card@@ .@@ con@@ cat@@ (((@@ at@@ tr@@ [i]@@ ) + "@@ \n@@ ")); } } if (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ V@@ c@@ ard@@ Manager.@@ V@@ ) android.util.Log.@@ v@@ (com.android.bluetooth.@@ p@@ b@@ ap.@@ Bluetooth@@ Pb@@ ap@@ V@@ c@@ ard@@ Manager.@@ TAG, ("@@ V@@ c@@ ar@@ d wit@@ h str@@ ip@@ p@@ ed telephon@@ e no@@ .@@ : " + V@@ c@@ ard@@ )); return V@@ c@@ ard@@ ; }
public static javax.net.ssl.@@ SSL@@ S@@ es@@ sion w@@ rap@@ SSL@@ Session@@ (@@ org.conscrypt.@@ Abstract@@ Open@@ SSL@@ S@@ es@@ sion ss@@ l@@ Session@@ ) { if ((@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ .@@ S@@ D@@ K_@@ IN@@ T@@ ) <@@ = 2@@ 3@@ ) { return ss@@ l@@ Session@@ ; } else { return new org.conscrypt.@@ Open@@ SSL@@ Ex@@ t@@ end@@ ed@@ Session@@ Imp@@ l@@ (s@@ s@@ l@@ Session@@ ); } }
@@@ java.lang.@@ De@@ pre@@ cate@@ d @com.android.annotations.@@ Visi@@ ble@@ For@@ Test@@ ing@@ (@@ vi@@ si@@ b@@ ili@@ t@@ y = com.android.@@ annotations.@@ Visi@@ ble@@ For@@ Test@@ ing.@@ Visi@@ b@@ ili@@ ty.@@ P@@ R@@ I@@ V@@ A@@ TE@@ ) protected void set@@ Target@@ s(@@ @com.android.annotations.NonNull com.android.sdklib.@@ I@@ Android@@ Target@@ [] target@@ s) { assert target@@ s != null@@ ; m@@ Target@@ s = target@@ s; }
public com.android.ide.common.@@ render@@ ing.@@ api.@@ Render@@ S@@ es@@ sion create@@ S@@ c@@ en@@ e@@ (com.android.ide.@@ common.@@ render@@ ing.@@ api.@@ Param@@ s param@@ s) { if ((m@@ B@@ rid@@ g@@ e) != null@@ ) { return m@@ B@@ rid@@ g@@ e.@@ create@@ Session@@ (@@ param@@ s); } else if ((m@@ Le@@ g@@ ac@@ y@@ B@@ rid@@ g@@ e) != null@@ ) { return create@@ Le@@ g@@ ac@@ y@@ S@@ c@@ en@@ e@@ (@@ param@@ s); } return null@@ ; }
public void test_@@ re@@ pla@@ ce@@ All@@ () { java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <java.lang.String, java.lang.String> ma@@ p = new java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <@@ >(); java.lang.String key@@ 1 = "@@ key@@ 1@@ "; java.lang.String key@@ 2 = "@@ key@@ 2@@ "; java.lang.String key@@ 3 = "@@ key@@ 3@@ "; m@@ ap.@@ put@@ (@@ key@@ 1, "@@ 1@@ "); m@@ ap.@@ put@@ (@@ key@@ 2, "@@ 2@@ "); m@@ ap.@@ put@@ (@@ key@@ 3@@ , "@@ 3@@ "); m@@ ap.@@ re@@ pla@@ ce@@ All@@ (@@ ( k@@ , v@@ ) -@@ > k + v@@ ); assert@@ Equal@@ s("@@ key@@ 1@@ 1@@ 1@@ ", m@@ ap@@ .get@@ (@@ key@@ 1@@ )); assert@@ Equal@@ s("@@ key@@ 2@@ 2@@ ", m@@ ap@@ .get@@ (@@ key@@ 2@@ )); assert@@ Equal@@ s("@@ key@@ 3@@ ", m@@ ap@@ .get@@ (@@ key@@ 3@@ )); assert@@ Equal@@ s(@@ 3@@ , m@@ ap.@@ size@@ ()); try { m@@ ap.@@ re@@ pla@@ ce@@ All@@ (@@ new java.util.@@ f@@ un@@ ction@@ .@@ B@@ i@@ F@@ un@@ ction@@ <java.lang.String, java.lang.String@@ , java.lang.String@@ >@@ () { @java.lang.Override public java.lang.String app@@ ly@@ (java.lang.String s, java.lang.String s@@ 2@@ ) { m@@ ap.@@ put@@ ("@@ key@@ 4@@ ", "@@ 4@@ "); return "@@ "; } }); fail@@ ("@@ S@@ ho@@ ul@@ d h@@ av@@ e throw@@ n@@ "); } catch (java.util.@@ Con@@ current@@ Mo@@ d@@ if@@ ic@@ ation@@ Exception expected@@ ) { } }
private static void assert@@ SSL@@ Context@@ Default@@ Configuration@@ (@@ javax.net.ssl.@@ SSL@@ Context ss@@ l@@ Context@@ ) { javax.net.ssl.@@ SSL@@ Parameter@@ s default@@ Parameter@@ s = ss@@ l@@ Contex@@ t.get@@ Default@@ SSL@@ Parameter@@ s(); libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ SSL@@ Context@@ Enabled@@ Pro@@ to@@ col@@ s(@@ ss@@ l@@ Contex@@ t.get@@ Pro@@ to@@ col@@ (), default@@ Parameter@@ s.get@@ Pro@@ to@@ col@@ s()); libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ Default@@ Cip@@ her@@ Su@@ it@@ es@@ (@@ default@@ Parameter@@ s.get@@ Cip@@ her@@ Su@@ it@@ es@@ ()); assert@@ False@@ (@@ default@@ Parameter@@ s.get@@ W@@ ant@@ Client@@ A@@ u@@ th@@ ()); assert@@ False@@ (@@ default@@ Parameter@@ s.get@@ Ne@@ ed@@ Client@@ A@@ u@@ th@@ ()); javax.net.ssl.@@ SSL@@ Parameter@@ s suppor@@ ted@@ Parameter@@ s = ss@@ l@@ Contex@@ t.get@@ Sup@@ ported@@ SSL@@ Parameter@@ s(); libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ Sup@@ ported@@ Cip@@ her@@ Su@@ it@@ es@@ (s@@ up@@ ported@@ Parameter@@ s.get@@ Cip@@ her@@ Su@@ it@@ es@@ ()); libcore.@@ java.security.@@ St@@ and@@ ard@@ Nam@@ es@@ .@@ assert@@ Sup@@ ported@@ Pro@@ to@@ col@@ s(@@ suppor@@ ted@@ Parameter@@ s.get@@ Pro@@ to@@ col@@ s()); assert@@ False@@ (s@@ up@@ ported@@ Parameter@@ s.get@@ W@@ ant@@ Client@@ A@@ u@@ th@@ ()); assert@@ False@@ (s@@ up@@ ported@@ Parameter@@ s.get@@ Ne@@ ed@@ Client@@ A@@ u@@ th@@ ()); libcore.@@ javax.net.ssl.@@ SSL@@ Configuration@@ Asser@@ ts@@ .@@ assert@@ Cont@@ ain@@ s@@ All@@ ("@@ Un@@ suppor@@ ted enable@@ d c@@ ip@@ h@@ er su@@ it@@ es@@ ", suppor@@ ted@@ Parameter@@ s.get@@ Cip@@ her@@ Su@@ it@@ es@@ (), default@@ Parameter@@ s.get@@ Cip@@ her@@ Su@@ it@@ es@@ ()); libcore.@@ javax.net.ssl.@@ SSL@@ Configuration@@ Asser@@ ts@@ .@@ assert@@ Cont@@ ain@@ s@@ All@@ ("@@ Un@@ suppor@@ ted enable@@ d pro@@ to@@ col@@ s", suppor@@ ted@@ Parameter@@ s.get@@ Pro@@ to@@ col@@ s@@ (), default@@ Parameter@@ s.get@@ Pro@@ to@@ col@@ s()); }
public static native byte@@ []@@ [] EC@@ _P@@ O@@ IN@@ T_@@ get@@ _@@ a@@ f@@ fin@@ e@@ _@@ co@@ or@@ d@@ in@@ at@@ es@@ (@@ int type@@ , int gro@@ up@@ C@@ t@@ x@@ , int p@@ o@@ int@@ C@@ t@@ x@@ );
public void event@@ (android.@@ telecom.@@ Logg@@ ing.@@ Event@@ Manager.@@ Logg@@ able re@@ cor@@ d@@ E@@ n@@ try@@ , java.lang.String event@@ , java.lang.String for@@ mat@@ , java.lang.Ob@@ jec@@ t.@@ .@@ . arg@@ s) { java.lang.String ms@@ g@@ ; try { ms@@ g = ((@@ arg@@ s == null@@ ) || ((@@ args.@@ length) == 0@@ )) ? for@@ ma@@ t : java.lang.String@@ .@@ for@@ mat@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ , for@@ mat@@ , arg@@ s); } catch (java.util.@@ Illegal@@ Format@@ Exception if@@ e) { android.telecom.@@ Log.@@ e@@ ("@@ Log@@ ", if@@ e@@ , "@@ Illegal@@ Format@@ Exception@@ : for@@ mat@@ String@@ =@@ '@@ %@@ s@@ ' num@@ Arg@@ s@@ =@@ %@@ d@@ ", for@@ mat@@ , args.@@ length); ms@@ g = for@@ ma@@ t + " (@@ A@@ n er@@ ror o@@ cc@@ ur@@ re@@ d while for@@ mat@@ t@@ ing th@@ e mess@@ age.@@ )@@ "; } event@@ (re@@ cor@@ d@@ E@@ n@@ try@@ , event@@ , ms@@ g@@ ); }
org.eclipse.@@ core.@@ resources.@@ I@@ Mark@@ er create@@ Mark@@ er@@ From@@ Se@@ arch@@ M@@ atch@@ (@@ org.eclipse.@@ core.@@ resources.@@ I@@ File file@@ , org.eclipse.@@ jd@@ t.@@ core.@@ se@@ arch@@ .@@ Se@@ arch@@ M@@ at@@ ch match@@ ) { java.util.@@ Hash@@ Map@@ <java.lang.String, java.lang.Ob@@ ject@@ > ma@@ p = new java.util.@@ Hash@@ Map@@ <java.lang.String, java.lang.Ob@@ ject@@ >(); m@@ ap.@@ put@@ (@@ I@@ Mark@@ er.@@ CH@@ AR@@ _STA@@ R@@ T, new java.lang.Integ@@ er@@ (m@@ atch@@ .get@@ Offset@@ ())); m@@ ap.@@ put@@ (@@ I@@ Mark@@ er.@@ CH@@ AR@@ _@@ EN@@ D@@ , new java.lang.Integ@@ er@@ ((@@ (m@@ atch@@ .get@@ Offset@@ ()) + (m@@ atch@@ .get@@ Length@@ ()@@ )))); org.eclipse.@@ core.@@ resources.@@ I@@ Mark@@ er m@@ ark@@ er = null@@ ; try { m@@ ark@@ er = file.@@ create@@ Mark@@ er(@@ I@@ Mark@@ er.@@ TE@@ X@@ T@@ ); m@@ ark@@ er.@@ set@@ At@@ tri@@ b@@ ut@@ es@@ (m@@ ap@@ ); } catch (@@ org.eclipse.@@ core.@@ run@@ tim@@ e.@@ C@@ ore@@ Exception e) { m@@ ark@@ er.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); } return m@@ ark@@ er@@ ; }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Long@@ Su@@ ite@@ .@@ class@@ , time@@ out = 1@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Long@@ Su@@ ite@@ _@@ With@@ Time@@ out@@ () throw@@ s java.lang.Exception { vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (); run@@ ner.@@ run@@ (); expected@@ Results@@ ()@@ .@@ for@@ Test@@ Clas@@ s(@@ vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 3@@ .@@ Long@@ Test@@ .@@ class@@ ).@@ fail@@ ure@@ ("@@ test@@ ", "@@ java.util.@@ concurrent.@@ Time@@ out@@ Exception@@ \n@@ ").@@ ab@@ or@@ ted@@ (); }
@org.junit.Test public void test_@@ read@@ All@@ Line@@ $@@ Path@@ $@@ Char@@ set@@ () throw@@ s java.io.IOException { junit.framework.@@ Test@@ C@@ ase@@ .@@ assert@@ True@@ (@@ java.nio.@@ file.@@ Fil@@ es.@@ exist@@ s(@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ ())); libcore.@@ java.nio.@@ file.@@ Fil@@ es@@ Set@@ up@@ .@@ write@@ To@@ File@@ (@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ (), ("@@ \n@@ " + (@@ libcore.@@ java.nio.@@ file.@@ Fil@@ es@@ Set@@ up@@ .@@ TEST_@@ F@@ IL@@ E_@@ DA@@ TA@@ _@@ 2@@ )), java.nio.@@ file.@@ St@@ and@@ ard@@ Open@@ Option@@ .@@ AP@@ P@@ EN@@ D@@ ); java.util.List<@@ java.lang.String> out = java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es(@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ (), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Open@@ Option@@ .@@ AP@@ P@@ EN@@ D@@ ); java.util.List<@@ java.lang.String> out = java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es(@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ (), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); assert@@ Equal@@ s(@@ libcore.@@ java.nio.@@ file.@@ Fil@@ es@@ Set@@ up@@ .@@ TEST_@@ F@@ IL@@ E_@@ DA@@ TA@@ , ou@@ t.get@@ (0@@ )); assert@@ Equal@@ s(@@ libcore.@@ java.nio.@@ file.@@ Fil@@ es@@ Set@@ up@@ .@@ TEST_@@ F@@ IL@@ E_@@ DA@@ TA@@ _@@ 2, ou@@ t.get@@ (1@@ )); out = java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es(@@ fil@@ es@@ Set@@ up@@ .get@@ Data@@ File@@ Path@@ (), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 16@@ ); assert@@ Equal@@ s(@@ 1, out.@@ size@@ ()); assert@@ Equal@@ s("@@ UT@@ F@@ -@@ 8@@ ", libcore.@@ java.nio.@@ file.@@ Fil@@ es@@ Set@@ up@@ .@@ res@@ et@@ (); try { java.nio.@@ file.@@ Fil@@ es.@@ read@@ All@@ Lin@@ es(@@ fil@@ es@@ Set@@ up@@ .get@@ Test@@ Path@@ (), java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ ("@@ UT@@ F@@ -@@ 8@@ ")); fail@@ (); } catch (@@ java.nio.@@ file.@@ No@@ Su@@ ch@@ File@@ Exception expected@@ ) { } }
private static java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set get@@ Con@@ so@@ le@@ En@@ cod@@ ing@@ () { java.lang.String con@@ so@@ le@@ Char@@ set@@ Name = null@@ ; try { java.lang.@@ ref@@ le@@ ct.@@ M@@ etho@@ d en@@ cod@@ ing@@ M@@ etho@@ d = java.io.@@ Con@@ so@@ le@@ .@@ class@@ .get@@ Dec@@ l@@ ar@@ ed@@ Method@@ ("@@ en@@ cod@@ ing@@ "); en@@ cod@@ ing@@ Method@@ .set@@ Ac@@ ces@@ si@@ ble@@ (@@ true@@ ); con@@ so@@ le@@ Char@@ set@@ Name = ((@@ java.lang.String@@ ) (@@ en@@ cod@@ ing@@ Method@@ .@@ invok@@ e@@ (@@ null@@ ))); } catch (java.lang.@@ Ref@@ le@@ c@@ tive@@ Oper@@ ation@@ Exception ign@@ or@@ ed@@ ) { } if (@@ con@@ so@@ le@@ Char@@ set@@ Name == null@@ ) { java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set default@@ Char@@ set = java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ default@@ Char@@ set@@ (); java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ((("@@ war@@ n@@ ing@@ : Faile@@ d to ob@@ t@@ a@@ in cons@@ ol@@ e char@@ ac@@ ter en@@ cod@@ ing name@@ . As@@ s@@ um@@ ing " + default@@ Char@@ set@@ ) + " in@@ s@@ te@@ ad@@ ")); return default@@ Char@@ set@@ ; } else { try { return java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ for@@ Name@@ (@@ con@@ so@@ le@@ Char@@ set@@ Name); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set default@@ Char@@ set = java.@@ n@@ io@@ .@@ char@@ set@@ .@@ Char@@ set@@ .@@ default@@ Char@@ set@@ (); java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ ((((@@ ("@@ war@@ n@@ ing@@ : Con@@ s@@ ol@@ e u@@ se@@ s un@@ k@@ no@@ w@@ n char@@ ac@@ ter en@@ cod@@ ing@@ : " + con@@ so@@ le@@ Char@@ set@@ Name@@ ) + "@@ . As@@ s@@ um@@ ing ") + default@@ Char@@ set@@ ) + " in@@ s@@ te@@ ad@@ ")); return default@@ Char@@ set@@ ; } }
@org.junit.Test public void test@@ Base@@ Inter@@ sec@@ tion@@ C@@ ast@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 3@@ 9@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
@com.android.annotations.NonNull @java.lang.Override public java.util.Collection@@ <@@ java.io.File@@ > get@@ J@@ ar@@ R@@ ule@@ Fil@@ es@@ () { return build@@ Typ@@ e.get@@ J@@ ar@@ R@@ ule@@ Fil@@ es@@ (); }
@com.android.annotations.NonNull public com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ u@@ p get@@ (@@ @com.android.annotations.NonNull com.android.builder.@@ model.@@ Android@@ Librar@@ y librar@@ y@@ ) { com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ u@@ p vi@@ si@@ b@@ ili@@ t@@ y = m@@ Library@@ Map@@ .get@@ (@@ librar@@ y@@ ); if (@@ vi@@ si@@ b@@ ili@@ t@@ y == null@@ ) { vi@@ si@@ b@@ ili@@ t@@ y = new com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ .@@ Library@@ Resource@@ Visi@@ b@@ ili@@ ty@@ (@@ librar@@ y@@ ); java.util.List<@@ ? extends com.android.builder.@@ model.@@ Android@@ Library@@ > de@@ pend@@ s@@ O@@ n = librar@@ y@@ .get@@ Library@@ Dependenc@@ ies@@ (); if (!(@@ de@@ pend@@ s@@ On@@ .is@@ Empty@@ ())) { java.util.List<@@ com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ > li@@ s@@ t = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Ex@@ pec@@ ted@@ Size@@ (((@@ de@@ pend@@ s@@ On@@ .@@ size@@ ()) + 1@@ )); li@@ st.@@ add(@@ vi@@ si@@ b@@ ili@@ ty@@ ); for (com.android.@@ builder.@@ model.@@ Android@@ Librar@@ y d : de@@ pend@@ s@@ On@@ ) { com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ u@@ p v = get@@ (d@@ ); if (!(@@ v@@ .is@@ Empty@@ ())) { li@@ st.@@ add(@@ v@@ ); } } if (!(@@ li@@ st.@@ isEmpty@@ ())) { vi@@ si@@ b@@ ili@@ t@@ y = new com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ .@@ Multi@@ ple@@ Library@@ Resource@@ Visi@@ b@@ ili@@ ty@@ (@@ list@@ ); } } m@@ Library@@ Map@@ .@@ put@@ (@@ librar@@ y@@ , vi@@ si@@ b@@ ili@@ ty@@ ); } return vi@@ si@@ b@@ ili@@ ty@@ ; }
public int enable@@ F@@ ir@@ m@@ war@@ e@@ R@@ o@@ am@@ ing@@ (@@ int state@@ ) { k@@ il@@ ro@@ y@@ (); synchronized@@ (com.android.server.@@ w@@ if@@ i.@@ W@@ if@@ i@@ V@@ e@@ n@@ do@@ r@@ H@@ al.@@ s@@ Lock) { if ((m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ ) == null@@ ) return android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Status@@ Co@@ d@@ e.@@ ER@@ R@@ OR@@ _N@@ O@@ T_@@ STA@@ R@@ TED@@ ; k@@ il@@ ro@@ y@@ (); try { k@@ il@@ ro@@ y@@ (); byte val@@ ; switch (@@ state@@ ) { case W@@ if@@ i@@ N@@ ativ@@ e.@@ D@@ IS@@ ABL@@ E_@@ FI@@ R@@ M@@ W@@ AR@@ E_@@ RO@@ AM@@ IN@@ G : va@@ l = android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ St@@ a@@ R@@ o@@ am@@ ing@@ State.@@ D@@ IS@@ ABL@@ ED@@ ; break@@ ; case W@@ if@@ i@@ N@@ ativ@@ e.@@ EN@@ ABL@@ E_@@ FI@@ R@@ M@@ W@@ AR@@ E_@@ RO@@ AM@@ IN@@ G : va@@ l = android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ St@@ a@@ R@@ o@@ am@@ ing@@ State.@@ EN@@ ABL@@ ED@@ ; break@@ ; default : m@@ Log.@@ e@@ (("@@ enable@@ F@@ ir@@ m@@ war@@ e@@ R@@ o@@ am@@ ing in@@ va@@ li@@ d arg@@ um@@ ent " + state@@ )); return android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Status@@ Co@@ d@@ e.@@ ER@@ R@@ OR@@ _@@ IN@@ VAL@@ ID@@ _@@ AR@@ G@@ S@@ ; } k@@ il@@ ro@@ y@@ (); android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Statu@@ s statu@@ s = m@@ I@@ W@@ if@@ i@@ St@@ a@@ Iface@@ .set@@ R@@ o@@ am@@ ing@@ State@@ (@@ val@@ ); m@@ Log.@@ d@@ (("@@ set@@ R@@ o@@ am@@ ing@@ State return@@ ed " + (@@ statu@@ s.@@ code@@ ))); return statu@@ s.@@ code@@ ; } catch (android.os.RemoteException e) { k@@ il@@ ro@@ y@@ (); handle@@ Remote@@ Exception(@@ e); return android.hardware.@@ w@@ if@@ i.@@ V@@ 1_@@ 0.@@ W@@ if@@ i@@ Status@@ Co@@ d@@ e.@@ ER@@ R@@ OR@@ _@@ UN@@ K@@ NO@@ W@@ N@@ ; } } }
public byte@@ [] get@@ Int@@ As@@ Array@@ (@@ int valu@@ e) { byte@@ [] ar@@ ra@@ y = ((@@ java.nio.Byte@@ Buffer@@ ) (m@@ Int@@ Buff@@ er.@@ re@@ w@@ ind@@ ()@@ )).@@ put@@ Int@@ (@@ value@@ ).@@ array@@ (); return array@@ ; }
public void add@@ U@@ 32@@ (@@ long v@@ ) { if (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t.@@ sho@@ ul@@ d@@ Th@@ un@@ k@@ ()) { m@@ N@@ .add@@ U@@ 32@@ (@@ v@@ ); return@@ ; } if ((@@ v < 0) || (@@ v > 4@@ 2@@ 9@@ 4@@ 9@@ 6@@ 7@@ 2@@ 9@@ 5@@ L@@ )) { android.util.Log.e@@ ("@@ r@@ s", (("@@ Field@@ Pack@@ er.@@ add@@ U@@ 32@@ ( " + v@@ ) + " )@@ ")); throw new java.lang.Illegal@@ Argument@@ Exception("@@ S@@ av@@ ing valu@@ e out of r@@ an@@ g@@ e for type@@ "); } al@@ ign@@ (@@ 4@@ ); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) (@@ v & 25@@ 5@@ )); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) ((@@ v >@@ > 8@@ ) & 25@@ 5@@ )); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) ((@@ v >@@ > 16@@ ) & 25@@ 5@@ )); m@@ Data@@ [@@ ((m@@ Po@@ s@@ )@@ ++@@ )@@ ] = (@@ (@@ byte@@ ) ((@@ v >@@ > 2@@ 4@@ ) & 25@@ 5@@ )); }
@java.lang.Override public synchronized void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d method@@ ) throw@@ s java.lang.Exception { if ((@@ ((m@@ ethod@@ .get@@ En@@ c@@ lo@@ sing@@ Type@@ ().@@ is@@ Ex@@ ter@@ nal@@ ()) || (m@@ ethod@@ .is@@ Native@@ ())) || (m@@ ethod@@ .is@@ Abstract@@ ())) || (!(@@ fil@@ ter.@@ ac@@ ce@@ p@@ t@@ (@@ this@@ .get@@ Class@@ (), method@@ )@@ ))) { return@@ ; } com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Requ@@ est t@@ r = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Request@@ (m@@ ethod@@ ); com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Method@@ Call@@ Dis@@ p@@ atch@@ Ad@@ j@@ u@@ st@@ er.@@ Method@@ Call@@ Ad@@ j@@ us@@ ter vi@@ si@@ tor = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Method@@ Call@@ Dis@@ p@@ atch@@ Ad@@ j@@ u@@ st@@ er.@@ Method@@ Call@@ Ad@@ j@@ u@@ st@@ er(@@ tr@@ , method@@ .get@@ En@@ c@@ lo@@ sing@@ Type@@ ()); vi@@ si@@ tor.@@ ac@@ ce@@ p@@ t@@ (m@@ ethod@@ ); if (m@@ ethod@@ .@@ contain@@ s@@ Mark@@ er@@ (com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Ne@@ ed@@ s@@ R@@ e@@ this@@ ing@@ .@@ class@@ )) { com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Method@@ Call@@ Dis@@ p@@ atch@@ Ad@@ j@@ u@@ st@@ er.@@ Th@@ is@@ Access@@ Ad@@ j@@ us@@ ter vi@@ si@@ tor@@ 2 = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Method@@ Call@@ Dis@@ p@@ atch@@ Ad@@ j@@ u@@ st@@ er.@@ Th@@ is@@ Access@@ Ad@@ j@@ u@@ st@@ er(@@ tr@@ , method@@ ); vi@@ si@@ tor@@ 2.@@ ac@@ ce@@ p@@ t@@ (m@@ ethod@@ ); method@@ .@@ remove@@ Mark@@ er@@ (com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Ne@@ ed@@ s@@ R@@ e@@ this@@ ing@@ .@@ class@@ ); } tr@@ .@@ com@@ m@@ it@@ (); }
private void get@@ P@@ i@@ x@@ el@@ Valu@@ es@@ From@@ Output@@ Buffer@@ (@@ java.nio.Byte@@ Buff@@ er buff@@ er, int x@@ , int y@@ , com.android.@@ cts.@@ vid@@ e@@ o@@ per@@ f.@@ V@@ ide@@ o@@ En@@ co@@ der@@ De@@ co@@ der@@ Test.@@ Y@@ U@@ V@@ Value result@@ ) { result.@@ m@@ Y = buff@@ er.get@@ (((@@ y * (m@@ Buffer@@ Str@@ ide@@ )) + x@@ )); if (is@@ D@@ st@@ Se@@ m@@ i@@ P@@ lan@@ ar@@ ()) { int in@@ dex = ((@@ (m@@ Buffer@@ Str@@ id@@ e) * (m@@ Buffer@@ Str@@ ide@@ He@@ ig@@ ht@@ )) + ((@@ y / 2@@ ) * (m@@ Buffer@@ Str@@ ide@@ ))) + ((@@ x / 2@@ ) * 2@@ ); result.@@ m@@ U = buff@@ er.get@@ (in@@ dex@@ ); result.@@ m@@ V = buff@@ er.get@@ ((@@ in@@ dex + 1@@ )); } else { int v@@ O@@ ff@@ set = ((m@@ Buffer@@ Str@@ id@@ e) * (m@@ Buffer@@ Str@@ ide@@ He@@ ig@@ ht@@ )) / 4@@ ; int in@@ dex = ((@@ (m@@ Buffer@@ Str@@ id@@ e) * (m@@ Buffer@@ Str@@ ide@@ He@@ ig@@ ht@@ )) + (((@@ y / 2@@ ) * (m@@ Buffer@@ Str@@ ide@@ )) / 2@@ )) + (@@ x / 2@@ ); result.@@ m@@ U = buff@@ er.get@@ (in@@ dex@@ ); result.@@ m@@ V = buff@@ er.get@@ ((@@ in@@ dex + v@@ Offset@@ )); } }
public java.util.List<@@ com.android.ide.common.@@ render@@ ing.@@ api.@@ View@@ Info@@ > get@@ Root@@ View@@ () { return null@@ ; }
final void get@@ (@@ long@@ [] d@@ st@@ , int d@@ st@@ Offset@@ , int long@@ Count@@ ) { check@@ Is@@ Ac@@ ces@@ si@@ ble@@ (); int byte@@ Coun@@ t = check@@ Get@@ B@@ ound@@ s(@@ Size@@ Of@@ .@@ L@@ ON@@ G@@ , d@@ st.@@ length@@ , d@@ st@@ Offset@@ , long@@ Count@@ ); this@@ .@@ b@@ lock@@ .@@ pe@@ e@@ k@@ Long@@ Array@@ (((@@ offset@@ ) + (@@ posi@@ tion@@ )), d@@ st@@ , d@@ st@@ Offset@@ , long@@ Count@@ , or@@ d@@ er.@@ ne@@ ed@@ s@@ S@@ w@@ ap@@ ); posi@@ tion +@@ = byte@@ Count@@ ; }
void put@@ B@@ ig@@ En@@ di@@ an@@ T@@ w@@ o@@ s@@ Comp@@ lement@@ (@@ byte@@ [] a@@ ) { this@@ .m@@ ake@@ Valid@@ (); java.@@ m@@ ath.@@ Native@@ B@@ N@@ .@@ t@@ w@@ o@@ s@@ Comp@@ 2@@ b@@ n@@ (@@ a@@ , a.@@ length@@ , this@@ .@@ b@@ ign@@ um@@ ); }
private javax.@@ cryp@@ to.@@ Key@@ A@@ g@@ re@@ em@@ ent@@ S@@ p@@ i get@@ S@@ pi@@ () { try { return get@@ S@@ pi@@ (@@ null@@ ); } catch (@@ java.security.@@ In@@ valid@@ Key@@ Exception e) { throw new java.lang.Illegal@@ State@@ Exception("@@ Un@@ re@@ ach@@ able cod@@ e (@@ In@@ valid@@ Key@@ Exception throw@@ n for n@@ on@@ -@@ s@@ pe@@ c@@ if@@ i@@ ed key@@ )@@ "); } }
java.lang.String get@@ Zone@@ Info@@ s@@ String@@ () { return z@@ one@@ Info@@ s.@@ str@@ eam@@ ().@@ m@@ ap@@ (@@ ( z@@ ) -@@ > (((@@ z@@ .get@@ Id@@ ()) + "@@ ("@@ ) + (@@ z@@ .get@@ Pri@@ or@@ ity@@ ())) + "@@ )@@ ").@@ colle@@ ct@@ (java.util.@@ str@@ eam@@ .@@ Colle@@ ctor@@ s.@@ to@@ List@@ ()).@@ toString@@ (); }
static float $@@ op@@ t@@ $@@ no@@ in@@ line@@ $@@ Char@@ To@@ Float@@ (@@ char a@@ ) { if (@@ M@@ ain@@ .@@ do@@ Throw@@ ) throw new java.lang.@@ Error@@ (); return (@@ (@@ float@@ ) (@@ a@@ )); }
public void test@@ Connec@@ t@@ O@@ ver@@ Prox@@ y@@ _@@ im@@ pli@@ c@@ it@@ _@@ h@@ ttp@@ _@@ fail@@ s() throw@@ s java.lang.Exception { byte@@ [] file@@ Content@@ s = "@@ ab@@ c@@ de@@ f 12@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ "@@ .get@@ Bytes@@ (@@ java.@@ n@@ io@@ .@@ char@@ set@@ .@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); java.net.@@ UR@@ L file@@ Ur@@ l = add@@ File@@ E@@ n@@ try@@ (@@ libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ F@@ IL@@ E_@@ P@@ A@@ TH@@ , file@@ Content@@ s); java.net.@@ Prox@@ y@@ Sele@@ ct@@ or default@@ Prox@@ y@@ Sele@@ ct@@ or = java.net.@@ Prox@@ y@@ Sele@@ ctor@@ .get@@ Default@@ (); try { libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ Count@@ ing@@ Prox@@ y count@@ ing@@ Prox@@ y = libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ Count@@ ing@@ Prox@@ y.@@ start@@ (); java.net.@@ Prox@@ y pro@@ x@@ y = count@@ ing@@ Prox@@ y.@@ as@@ Prox@@ y@@ (); libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ S@@ ing@@ le@@ Prox@@ y@@ Sele@@ ct@@ or pro@@ x@@ y@@ Sele@@ ct@@ or = new libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test.@@ S@@ ing@@ le@@ Prox@@ y@@ Sele@@ ctor@@ (pro@@ x@@ y@@ ); java.net.@@ Prox@@ y@@ Sele@@ ctor@@ .set@@ Default@@ (pro@@ x@@ y@@ Sele@@ ctor@@ ); java.net.@@ URL@@ Connec@@ tion connec@@ tion = file@@ Ur@@ l.@@ open@@ Connection@@ (); java.io.@@ Input@@ Stream input@@ Stream = connection@@ .get@@ InputStream@@ (); java.io.IOException e = pro@@ x@@ y@@ Sele@@ ctor@@ .get@@ L@@ ast@@ Exception@@ (); assert@@ Equal@@ s("@@ F@@ T@@ P connection@@ s o@@ ve@@ r H@@ T@@ P pro@@ x@@ y not suppor@@ ted@@ ", e.get@@ Message@@ ()); libcore.@@ java.net.@@ F@@ t@@ p@@ URL@@ Connection@@ Test@@ .@@ assert@@ Content@@ s(@@ file@@ Content@@ s, input@@ Stream@@ ); int num@@ Connection@@ s = count@@ ing@@ Prox@@ y.@@ sh@@ u@@ t@@ do@@ wn@@ And@@ Get@@ Connection@@ Count@@ (); assert@@ Equal@@ s(@@ 0, num@@ Connection@@ s); } final@@ l@@ y { java.net.@@ Prox@@ y@@ Sele@@ ctor@@ .set@@ Default@@ (@@ default@@ Prox@@ y@@ Sele@@ ctor@@ ); } }
@org.junit.Test @@@ com.android.jack.test.@@ junit.@@ K@@ no@@ wn@@ I@@ ss@@ u@@ e public void test@@ In@@ vok@@ e@@ P@@ ol@@ y@@ m@@ or@@ p@@ hic@@ 00@@ 6@@ _@@ 2@@ () throw@@ s java.lang.Exception { com.android.jack.test.@@ toolchain.@@ Jack@@ Api@@ Too@@ lch@@ ain@@ Bas@@ e toolch@@ a@@ in = com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ C@@ and@@ id@@ ate@@ Too@@ lch@@ ain@@ (com.android.jack.@@ test.@@ toolchain.@@ Jack@@ Api@@ Too@@ lch@@ ain@@ Base@@ .@@ class@@ ); java.io.@@ ByteArray@@ Output@@ Stream out = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); java.io.@@ ByteArray@@ Output@@ Stream er@@ r@@ O@@ u@@ t = new java.io.@@ ByteArray@@ Output@@ Stream@@ (); toolchain.@@ set@@ Output@@ Stream@@ (@@ out); toolchain.@@ set@@ Error@@ Stream@@ (@@ er@@ r@@ Out@@ ); toolchain.@@ add@@ To@@ Class@@ path@@ (@@ toolch@@ ain@@ .get@@ Default@@ B@@ oot@@ Class@@ path@@ ()); toolchain.@@ add@@ Property@@ (@@ Option@@ s.@@ AN@@ D@@ RO@@ ID@@ _M@@ IN@@ _@@ AP@@ I@@ _@@ L@@ EV@@ E@@ L@@ .getName@@ (), java.lang.String.@@ value@@ Of@@ (com.android.jack.@@ java@@ 7@@ .@@ In@@ vok@@ e@@ P@@ ol@@ y@@ m@@ or@@ p@@ hic@@ Test@@ s.@@ O@@ _@@ AP@@ I@@ _@@ L@@ EV@@ E@@ L@@ )); toolchain.@@ src@@ To@@ Ex@@ e@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ create@@ Temp@@ Dir@@ (), false@@ , com.android.jack.test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Test@@ Root@@ Dir@@ ("@@ com.android.jack.@@ java@@ 7@@ .@@ invok@@ e@@ po@@ ly@@ m@@ or@@ p@@ hic@@ .@@ test@@ 00@@ 6@@ ")); junit.framework.@@ Asser@@ t@@ .@@ assert@@ True@@ (@@ er@@ r@@ O@@ u@@ t.@@ toString@@ ().@@ isEmpty@@ ()); }
@java.lang.Override public com.android.builder.@@ core.@@ Default@@ Build@@ Type create@@ (@@ @com.android.annotations.NonNull java.lang.String name@@ ) { return in@@ stan@@ ti@@ ator@@ .@@ new@@ Instance@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ d@@ s@@ l.@@ Build@@ Type@@ D@@ s@@ l@@ .@@ class@@ , name@@ , pro@@ ject@@ , in@@ stan@@ ti@@ ator@@ ); }
protected void re@@ cei@@ ve@@ _@@ o@@ ver@@ size@@ _@@ java@@ _@@ net@@ _@@ Dat@@ ag@@ ram@@ Packet@@ () throw@@ s java.lang.Exception { final int@@ [] port@@ s = tests.@@ support.@@ Sup@@ port@@ _P@@ ort@@ Manager.get@@ Next@@ Port@@ s@@ For@@ U@@ D@@ P@@ (@@ 2@@ ); final int port@@ Num@@ b@@ er = port@@ s@@ [0@@ ]; class Test@@ D@@ G@@ R@@ c@@ v@@ O@@ ve@@ r implements java.lang.@@ Run@@ n@@ able { public void run@@ () { java.net.Inet@@ Address local@@ Ho@@ s@@ t = null@@ ; try { local@@ Ho@@ s@@ t = java.net.Inet@@ Addres@@ s.get@@ Local@@ Host@@ (); java.lang.@@ Thread@@ .@@ s@@ le@@ e@@ p@@ (1@@ 00@@ 0); java.net.@@ Dat@@ ag@@ ram@@ S@@ ock@@ et s@@ d@@ s = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ (@@ port@@ s@@ [@@ 1@@ ]@@ ); java.net.@@ Dat@@ ag@@ ram@@ Pack@@ et r@@ d@@ p = new java.net.@@ Dat@@ ag@@ ram@@ Packet@@ ("@@ 0@@ 12@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ "@@ .get@@ Bytes@@ (), 1@@ 0, local@@ Host@@ , port@@ Number@@ ); s@@ d@@ s.@@ send@@ (r@@ dp@@ ); s@@ d@@ s.@@ close(); } catch (java.lang.Exception e) { throw new java.lang.Runtime@@ Exception(@@ e); } } try { new java.lang.@@ Thread@@ (@@ new Test@@ D@@ G@@ R@@ c@@ v@@ O@@ ver@@ (), "@@ D@@ G@@ S@@ ender@@ O@@ ver@@ ").@@ start@@ (); d@@ s = new java.net.@@ Dat@@ ag@@ ram@@ Socket@@ (@@ port@@ Number@@ ); d@@ s.@@ set@@ S@@ o@@ Time@@ out@@ (@@ 6@@ 00@@ 0); byte@@ [] r@@ bu@@ f = new byte@@ [@@ 5@@ ]; java.net.@@ Dat@@ ag@@ ram@@ Pack@@ et r@@ d@@ p = new java.net.@@ Dat@@ ag@@ ram@@ Packet@@ (r@@ bu@@ f@@ , r@@ bu@@ f.@@ length); d@@ s.@@ re@@ cei@@ ve@@ (r@@ dp@@ ); d@@ s.@@ close(); assert@@ True@@ (("@@ S@@ end@@ /@@ Recei@@ v@@ e o@@ ver@@ siz@@ e fa@@ ile@@ d to return cor@@ re@@ c@@ t data@@ : " + (@@ new java.lang.String@@ (r@@ bu@@ f@@ , 0, 5@@ )@@ )), new java.lang.String@@ (r@@ bu@@ f@@ , 0, 5@@ ).@@ equal@@ s("@@ 0@@ 12@@ 3@@ 4@@ ")); } catch (java.lang.Exception e) { java.lang.System.@@ er@@ r.@@ p@@ r@@ int@@ ln@@ (("@@ Exception d@@ ur@@ ing s@@ en@@ d test@@ : " + e@@ )); e.@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (); fail@@ ((((@@ ("@@ por@@ t " + port@@ Number@@ ) + " Exception@@ : ") + e) + " d@@ ur@@ ing o@@ ver@@ siz@@ e s@@ en@@ d test@@ ")); } final@@ l@@ y { d@@ s.@@ close(); } }
private synchronized android.@@ security.@@ cts.@@ Open@@ SSL@@ He@@ art@@ ble@@ ed@@ Test.@@ T@@ l@@ s@@ Recor@@ d get@@ F@@ ir@@ st@@ Record@@ Recei@@ v@@ ed@@ A@@ f@@ ter@@ C@@ C@@ S@@ W@@ as@@ In@@ jec@@ ted@@ () { return m@@ F@@ ir@@ st@@ Record@@ Recei@@ v@@ ed@@ A@@ f@@ ter@@ C@@ C@@ S@@ W@@ as@@ In@@ jec@@ ted@@ ; }
public native void set@@ en@@ v@@ (java.lang.String name@@ , java.lang.String value@@ , boolean o@@ ver@@ write@@ ) throw@@ s android.system.@@ Errno@@ Exception;
@@@ android.@@ test.@@ s@@ ui@@ te@@ builder.@@ annotation.@@ S@@ m@@ all@@ Test @org.junit.Test public void test@@ In@@ itializ@@ ation@@ With@@ E@@ ar@@ pi@@ e@@ ce@@ And@@ Bluetooth@@ No@@ Headset@@ () { android.telecom.@@ Call@@ Audio@@ State expected@@ State = new android.telecom.@@ Call@@ Audio@@ State@@ (@@ false@@ , android.telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ BL@@ UE@@ TO@@ O@@ TH@@ , ((@@ (android.@@ telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ E@@ AR@@ P@@ I@@ EC@@ E@@ ) | (android.@@ telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ S@@ P@@ E@@ A@@ K@@ ER@@ )) | (android.@@ telecom.@@ Call@@ Audio@@ State.@@ RO@@ UT@@ E_@@ BL@@ UE@@ TO@@ O@@ TH@@ ))); in@@ itializ@@ ation@@ Test@@ Hel@@ per@@ (@@ expected@@ State@@ , Call@@ Audio@@ R@@ ou@@ te@@ StateMachine.@@ E@@ AR@@ P@@ I@@ EC@@ E_@@ F@@ OR@@ C@@ E_@@ EN@@ ABL@@ ED@@ ); }
@org.junit.Test public void test@@ Default@@ Method@@ Reference@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ G@@ W@@ T_@@ LA@@ M@@ B@@ DA@@ _@@ TEST_@@ 32@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
private java.lang.String get@@ Name@@ From@@ Input@@ V@@ File@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.library.@@ Input@@ Librar@@ y jack@@ Library@@ , @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Input@@ V@@ File jp@@ p@@ File@@ ) { com.android.sched.util.@@ loc@@ ation.@@ Loc@@ ation lo@@ c = jp@@ p@@ File@@ .get@@ Location@@ (); java.lang.String name@@ ; if (@@ lo@@ c instanceof com.android.sched.util.@@ loc@@ ation.@@ Zip@@ Location@@ ) { name = ((@@ com.android.sched.util.@@ loc@@ ation.@@ Zip@@ Location@@ ) (@@ jp@@ p@@ File@@ .get@@ Location@@ ()@@ )@@ ).get@@ E@@ n@@ try@@ Name@@ (); if ((@@ jack@@ Library@@ .get@@ Ma@@ j@@ or@@ Version@@ ()) != 0) { name = nam@@ e.@@ sub@@ string@@ (((@@ File@@ Type.@@ J@@ P@@ .@@ build@@ Dir@@ V@@ Path@@ (@@ null@@ ).@@ s@@ pli@@ t@@ ().@@ i@@ terator@@ ().@@ next@@ ().@@ length@@ ()) + 1@@ )); } else { name = nam@@ e.@@ sub@@ string@@ ("@@ J@@ AC@@ K@@ -@@ IN@@ F@@ /@@ "@@ .@@ length@@ ()); } } else { name = ((@@ com.android.sched.util.@@ loc@@ ation.@@ File@@ Location@@ ) (@@ jp@@ p@@ File@@ .get@@ Location@@ ()@@ )@@ ).get@@ Path@@ (); if ((@@ jack@@ Library@@ .get@@ Ma@@ j@@ or@@ Version@@ ()) != 0) { java.lang.String pre@@ fi@@ x = (@@ File@@ Type.@@ J@@ P@@ .@@ build@@ Dir@@ V@@ Path@@ (@@ null@@ ).@@ s@@ pli@@ t@@ ().@@ i@@ terator@@ ().@@ next@@ ()) + '@@ /@@ '@@ ; name = nam@@ e.@@ sub@@ string@@ (((@@ nam@@ e.@@ las@@ t@@ Index@@ Of@@ (p@@ re@@ fix@@ )) + (p@@ re@@ fi@@ x.@@ length@@ ()))); } else { name = nam@@ e.@@ sub@@ string@@ ("@@ J@@ AC@@ K@@ -@@ IN@@ F@@ /@@ "@@ .@@ length@@ ()); } } return name@@ ; }
public static java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l create@@ P@@ ass@@ Th@@ ro@@ u@@ g@@ h@@ Connection@@ (@@ java.net.Inet@@ Socket@@ Address ad@@ b@@ S@@ ock@@ Add@@ r@@ , com.android.ddmlib.@@ Device device@@ , int p@@ id@@ ) throw@@ s com.android.ddmlib.@@ Time@@ out@@ Exception, java.io.IOException { java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l ad@@ b@@ Ch@@ an = java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l.@@ open@@ (@@ ad@@ b@@ S@@ ock@@ Add@@ r@@ ); try { ad@@ b@@ Chan@@ .@@ s@@ ocket@@ ().@@ set@@ T@@ c@@ p@@ No@@ De@@ lay@@ (@@ true@@ ); ad@@ b@@ Chan@@ .@@ config@@ ure@@ Block@@ ing@@ (@@ false@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ set@@ Device@@ (@@ ad@@ b@@ Chan@@ , device@@ ); byte@@ [] re@@ q = com.android.ddmlib.@@ Adb@@ Helper.@@ create@@ J@@ d@@ w@@ p@@ For@@ w@@ ard@@ Request@@ (p@@ id@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ write@@ (@@ ad@@ b@@ Chan@@ , re@@ q@@ ); com.android.ddmlib.@@ Adb@@ Helper.@@ Adb@@ Res@@ pon@@ se res@@ p = com.android.ddmlib.@@ Adb@@ Helper.@@ read@@ Adb@@ Response@@ (@@ ad@@ b@@ Chan@@ , false@@ ); if (!(@@ res@@ p.@@ ok@@ ay@@ )) { throw new java.io.IO@@ Exception(("@@ connec@@ tion requ@@ est re@@ jec@@ ted@@ : " + (@@ res@@ p.@@ message@@ ))); } ad@@ b@@ Chan@@ .@@ config@@ ure@@ Block@@ ing@@ (@@ true@@ ); } final@@ l@@ y { ad@@ b@@ Chan@@ .@@ close(); } return ad@@ b@@ Chan@@ ; }
private com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Network@@ Fa@@ ctor@@ y.@@ Network@@ Interface@@ State network@@ For@@ Request@@ (@@ Network@@ Requ@@ est request@@ ) { java.lang.String requ@@ es@@ ted@@ I@@ face = null@@ ; android.net.Network@@ S@@ pe@@ c@@ if@@ i@@ er s@@ pe@@ c@@ if@@ i@@ er = requ@@ est.@@ network@@ Capabilities@@ .get@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ (); if (s@@ pe@@ c@@ if@@ i@@ er instanceof android.net.@@ String@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ ) { requ@@ es@@ ted@@ I@@ face = ((@@ android.net.@@ String@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ ) (s@@ pe@@ c@@ if@@ ier@@ )).@@ s@@ pe@@ c@@ if@@ ier@@ ; } com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Network@@ Fa@@ ctor@@ y.@@ Network@@ Interface@@ State net@@ wor@@ k = null@@ ; if (!@@ (android.@@ text.@@ Text@@ Utils.@@ isEmpty@@ (@@ requ@@ es@@ ted@@ Iface@@ ))) { com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Network@@ Fa@@ ctor@@ y.@@ Network@@ Interface@@ State n = m@@ Track@@ ing@@ Inter@@ fa@@ ces@@ .get@@ (@@ requ@@ es@@ ted@@ Iface@@ ); net@@ wor@@ k = (@@ n@@ .@@ stati@@ s@@ if@@ i@@ ed@@ (@@ requ@@ est.@@ network@@ Capabilities@@ )) ? n : null@@ ; } else { for (com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Network@@ Fa@@ ctor@@ y.@@ Network@@ Interface@@ State n : m@@ Track@@ ing@@ Inter@@ fa@@ ces.@@ valu@@ es@@ ()) { if (@@ n@@ .@@ stati@@ s@@ if@@ i@@ ed@@ (@@ requ@@ est.@@ network@@ Capabilities@@ )) { net@@ wor@@ k = n@@ ; break@@ ; } } return network@@ ; }
@org.junit.Test public void a@@ get@@ _@@ wid@@ e@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ A@@ G@@ E@@ T_@@ W@@ ID@@ E@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
private void check@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 7@@ 9@@ 1@@ 4@@ 6@@ 4@@ 6@@ 7@@ 9@@ 1@@ 4@@ 6@@ 4@@ 6@@ 4@@ 8@@ L); android.renderscript.Allocation in@@ Y = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 32, 4@@ , -@@ 7@@ 4@@ 6@@ 4@@ 6@@ 9@@ 1@@ 4@@ 6@@ 9@@ 1@@ 4@@ 6@@ 4@@ 8@@ 8@@ 8@@ 7@@ 8@@ 7@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); script@@ .@@ for@@ Each@@ _test@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , in@@ Y@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ In@@ Y@@ (in@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , out); ve@@ r@@ if@@ y@@ Results@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , in@@ Y@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Po@@ wn@@ Float4@@ Int@@ 4@@ Float4@@ : " + (e.toString()))); } }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face typ@@ e) throw@@ s java.lang.Exception { com.android.sched.vfs.@@ Output@@ V@@ File v@@ File = output@@ Library@@ .get@@ J@@ ay@@ ce@@ Output@@ V@@ File@@ (@@ typ@@ e); try { java.io.@@ Output@@ Stream out = new java.io.@@ Buffer@@ ed@@ Output@@ Stream@@ (@@ v@@ File@@ .@@ open@@ W@@ rite@@ ()); try { com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ W@@ rite@@ r write@@ r = new com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Wri@@ ter@@ (@@ out); w@@ ri@@ ter.@@ write@@ (@@ type@@ , ("@@ ja@@ c@@ k " + (com.android.jack.@@ Jack@@ .get@@ Version@@ String@@ ()))); if (com.android.s@@ ched.@@ util.@@ config.@@ Thread@@ Config.@@ get@@ (@@ Jack@@ In@@ crement@@ al.@@ G@@ EN@@ ER@@ A@@ TE_@@ C@@ O@@ M@@ P@@ IL@@ ER@@ _STA@@ TE@@ )@@ .@@ boolean@@ Value@@ ()) { assert v@@ File instanceof com.android.sched.vfs.@@ Dire@@ ct@@ File@@ ; com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Comp@@ il@@ er@@ State c@@ s@@ m = com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Jack@@ In@@ crement@@ al@@ .get@@ Comp@@ il@@ er@@ State@@ (); assert c@@ s@@ m != null@@ ; c@@ s@@ m.@@ add@@ M@@ app@@ ing@@ B@@ et@@ w@@ e@@ en@@ Java@@ File@@ And@@ Type@@ Name@@ (@@ typ@@ e.get@@ Source@@ Info@@ ().get@@ File@@ Name@@ (), com.android.jack.@@ ex@@ per@@ im@@ ent@@ al.@@ in@@ crement@@ al.@@ Jack@@ In@@ crement@@ al@@ .get@@ Format@@ ter@@ ().get@@ Name@@ (@@ type@@ )); } } final@@ l@@ y { out.@@ close(); } } catch (java.io.IOException e) { throw new com.android.jack.@@ Jack@@ File@@ Exception@@ ((("@@ Co@@ ul@@ d not w@@ ri@@ t@@ e J@@ ac@@ k fi@@ le to out@@ put '@@ " + v@@ File@@ ) + "@@ '@@ "), e); } }
@java.lang.Override protected void register@@ T@@ ab@@ s() { add@@ Fail@@ ur@@ es@@ T@@ ab@@ (); if (!(@@ get@@ Results@@ ().get@@ Pack@@ ag@@ es@@ ().@@ isEmpty@@ ())) { add@@ T@@ ab@@ ("@@ Pack@@ ag@@ es@@ ", new org.@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ re@@ por@@ t.@@ Sim@@ ple@@ H@@ t@@ ml@@ Wri@@ ter@@ >@@ () { @java.lang.Override protected void do@@ Ex@@ ec@@ ute@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ re@@ por@@ t.@@ Sim@@ ple@@ H@@ t@@ ml@@ W@@ rite@@ r w@@ ri@@ ter@@ ) throw@@ s java.io.IOException { render@@ Pack@@ ag@@ es(@@ w@@ ri@@ ter@@ ); } }); } add@@ T@@ ab@@ ("@@ Class@@ es@@ ", new org.@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ re@@ por@@ t.@@ Error@@ ing@@ Action@@ <@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ re@@ por@@ t.@@ Sim@@ ple@@ H@@ t@@ ml@@ Wri@@ ter@@ >@@ () { @java.lang.Override public void do@@ Ex@@ ec@@ ute@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ test.@@ re@@ por@@ t.@@ Sim@@ ple@@ H@@ t@@ ml@@ W@@ rite@@ r ht@@ ml@@ Wri@@ ter@@ ) throw@@ s java.io.IOException { render@@ Class@@ es(@@ ht@@ ml@@ Wri@@ ter@@ ); } }); }
public void time@@ Re@@ l@@ ative@@ Date@@ Time@@ Format@@ ter@@ _@@ get@@ Re@@ l@@ ative@@ Time@@ S@@ p@@ an@@ String@@ (@@ int re@@ ps@@ ) throw@@ s java.lang.Exception { java.util.@@ Local@@ e l = java.util.@@ Loc@@ a@@ le.@@ US@@ ; java.util.@@ Time@@ Z@@ on@@ e ut@@ c = java.util.@@ Time@@ Z@@ on@@ e.get@@ TimeZone@@ ("@@ UT@@ C@@ "); int flag@@ s = 0; for (@@ int re@@ p = 0; re@@ p < re@@ ps@@ ; ++@@ re@@ p@@ ) { libcore.@@ icu@@ .@@ Re@@ l@@ ative@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Time@@ Format@@ ter.@@ f@@ rom@@ (f@@ , libcore.@@ icu@@ .@@ Re@@ l@@ ative@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@ Date@@
@java.lang.Override public void value@@ Changed@@ (@@ javax.@@ sw@@ ing.@@ ev@@ ent.@@ List@@ Selection@@ Ev@@ ent e) { com.google.gct.@@ log@@ in@@ .@@ Cre@@ denti@@ ale@@ d@@ U@@ se@@ r u@@ se@@ r = ((@@ com.google.gct.@@ log@@ in@@ .@@ Cre@@ denti@@ ale@@ d@@ User@@ ) (m@@ y@@ J@@ Lis@@ t.get@@ Sele@@ c@@ ted@@ Value@@ ())); if ((@@ u@@ se@@ r != null@@ ) && (!(@@ u@@ se@@ r instanceof com.google.gct.@@ ide@@ a.@@ el@@ y@@ si@@ um@@ .@@ User@@ Sele@@ ctor@@ .@@ Po@@ pu@@ p@@ P@@ an@@ e@@ l.@@ Empty@@ Mark@@ er@@ ))) { this@@ .set@@ Text@@ (@@ us@@ er.get@@ E@@ ma@@ il@@ ()); javax.@@ sw@@ ing.@@ S@@ w@@ ing@@ Uti@@ li@@ ties.@@ invok@@ e@@ L@@ at@@ er@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { @java.lang.Override public void run@@ () { com.google.gct.@@ ide@@ a.@@ el@@ y@@ si@@ um@@ .@@ User@@ Sele@@ ctor@@ .@@ this@@ .@@ h@@ ide@@ Po@@ pu@@ p@@ (); } }); } }
public static void sh@@ u@@ t@@ do@@ wn@@ () { com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ check@@ Ex@@ ec@@ ut@@ or@@ (); com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ s@@ Ex@@ ec@@ ut@@ or@@ Service.@@ sh@@ u@@ t@@ do@@ wn@@ (); com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ s@@ Ex@@ ec@@ ut@@ or@@ Ser@@ vice = com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Ex@@ ec@@ ut@@ or@@ S@@ ing@@ let@@ on@@ .@@ create@@ (); }
public void dum@@ p@@ (java.io.FileDescriptor f@@ d, java.io.@@ P@@ r@@ int@@ W@@ rite@@ r p@@ w@@ , java.lang.String[] arg@@ s) { p@@ w@@ .@@ p@@ r@@ int@@ ln@@ (@@ " T@@ 3@@ T Id@@ ent@@ if@@ i@@ er c@@ ach@@ e en@@ tri@@ es@@ : "); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info@@ > e@@ n@@ try : m@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ e@@ n@@ try@@ Set@@ ()) { p@@ w@@ .@@ p@@ r@@ int@@ ln@@ ((@@ " N@@ F@@ C@@ ID@@ 2@@ : " + (e@@ n@@ try@@ .get@@ Key@@ ()))); p@@ w@@ .@@ p@@ r@@ int@@ ln@@ (@@ " N@@ fc@@ F@@ Service@@ Info@@ : "); e@@ n@@ try@@ .get@@ Value@@ ().@@ dum@@ p@@ (f@@ d, p@@ w@@ , arg@@ s); } p@@ w@@ .@@ p@@ r@@ int@@ ln@@ ("@@ "); m@@ R@@ out@@ ing@@ Manager.@@ dum@@ p@@ (f@@ d, p@@ w@@ , arg@@ s); p@@ w@@ .@@ p@@ r@@ int@@ ln@@ ("@@ "); }
public void test@@ Is@@ Par@@ ent@@ al@@ Control@@ s@@ Enabled@@ () { m@@ Manager.@@ is@@ Par@@ ent@@ al@@ Control@@ s@@ Enabled@@ (); }
@java.lang.Override @javax.annotation.@@ N@@ on@@ null com.android.sched.util.@@ loc@@ ation.@@ Loc@@ ation get@@ V@@ File@@ Location@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Un@@ i@@ on@@ VF@@ S@@ .@@ Un@@ i@@ on@@ V@@ File file@@ ) { return file@@ .get@@ W@@ r@@ app@@ ed@@ Fil@@ es@@ ().get@@ Location@@ (); }
public void test_@@ SSL@@ _@@ do@@ _@@ hand@@ sh@@ ake@@ _N@@ UL@@ L_@@ SSL@@ () throw@@ s java.lang.Exception { try { org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ SSL@@ _@@ do@@ _@@ hand@@ sh@@ ake@@ (@@ org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to@@ Test.@@ N@@ UL@@ L, null@@ , null@@ , 0, false@@ , null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to@@ Test@@ .@@ assert@@ No@@ Error@@ s(); }
public static native java.lang.String get@@ IS@@ O@@ 3@@ L@@ an@@ gu@@ age@@ (java.lang.String lan@@ gu@@ age@@ Code@@ );
public void test@@ J@@ u@@ st@@ A@@ u@@ th@@ () throw@@ s java.lang.Exception { android.net.@@ IpSecAlgorith@@ m a@@ ut@@ h = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 25@@ 6@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , au@@ th@@ , null@@ , false@@ , 1, false@@ ); check@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ cts.@@ IP@@ PRO@@ TO@@ _@@ T@@ C@@ P@@ , android.net.cts.@@ IpSec@@ ManagerTest.@@ IP@@ V@@ 4@@ _@@ LO@@ OP@@ B@@ AC@@ K@@ , null@@ , au@@ th@@ , null@@ , false@@ , 1, true@@ ); }
private void po@@ st@@ Create@@ () { if ((m@@ Up@@ dat@@ er@@ Data@@ ) != null@@ ) { m@@ Text@@ Sdk@@ O@@ s@@ Path@@ .set@@ Text@@ (m@@ Up@@ dat@@ er@@ Data@@ .get@@ O@@ s@@ Sdk@@ Root@@ ()); } m@@ T@@ re@@ e@@ View@@ er.@@ set@@ Content@@ Provider@@ (@@ new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age.@@ P@@ kg@@ Content@@ Provider@@ ()); m@@ Co@@ lum@@ n@@ Ap@@ i.@@ set@@ L@@ ab@@ el@@ Provider@@ (@@ new org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ T@@ re@@ e@@ Co@@ lum@@ n@@ View@@ er@@ L@@ ab@@ el@@ Provider@@ (@@ new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age.@@ P@@ kg@@ C@@ ell@@ L@@ ab@@ el@@ Provider@@ (m@@ Co@@ lum@@ n@@ Api@@ ))); m@@ Co@@ lum@@ n@@ Nam@@ e.@@ set@@ L@@ ab@@ el@@ Provider@@ (@@ new org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ T@@ re@@ e@@ Co@@ lum@@ n@@ View@@ er@@ L@@ ab@@ el@@ Provider@@ (@@ new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age.@@ P@@ kg@@ C@@ ell@@ L@@ ab@@ el@@ Provider@@ (m@@ Co@@ lum@@ n@@ Name@@ ))); m@@ Co@@ lum@@ n@@ Statu@@ s.@@ set@@ L@@ ab@@ el@@ Provider@@ (@@ new org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ T@@ re@@ e@@ Co@@ lum@@ n@@ View@@ er@@ L@@ ab@@ el@@ Provider@@ (@@ new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age.@@ P@@ kg@@ C@@ ell@@ L@@ ab@@ el@@ Provider@@ (m@@ Co@@ lum@@ n@@ Status@@ ))); m@@ Co@@ lum@@ n@@ Re@@ vision@@ .set@@ L@@ ab@@ el@@ Provider@@ (@@ new org.eclipse.@@ j@@ face@@ .@@ viewer@@ s.@@ T@@ re@@ e@@ Co@@ lum@@ n@@ View@@ er@@ L@@ ab@@ el@@ Provider@@ (@@ new com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Pack@@ ag@@ es@@ P@@ age.@@ P@@ kg@@ C@@ ell@@ L@@ ab@@ el@@ Provider@@ (m@@ Co@@ lum@@ n@@ Re@@ vision@@ ))); org.eclipse.swt.@@ g@@ raphic@@ s.@@ F@@ on@@ t@@ Data f@@ on@@ t@@ Data = m@@ T@@ re@@ e.get@@ F@@ on@@ t@@ ().get@@ F@@ on@@ t@@ Data@@ ()@@ [0@@ ]; f@@ on@@ t@@ Data@@ .set@@ St@@ y@@ le@@ (@@ S@@ W@@ T@@ .@@ I@@ TA@@ L@@ IC@@ ); m@@ T@@ re@@ e@@ F@@ on@@ t@@ I@@ t@@ al@@ i@@ c = new org.eclipse.swt.@@ g@@ raphic@@ s.@@ F@@ on@@ t@@ (m@@ T@@ re@@ e.get@@ Display@@ (), f@@ on@@ t@@ Data@@ ); m@@ Co@@ l@@ or@@ Up@@ d@@ ate = new org.eclipse.swt.@@ g@@ raphic@@ s.@@ Co@@ l@@ or@@ (m@@ T@@ re@@ e.get@@ Display@@ (), 25@@ 5, 2@@ 0@@ 4@@ ); m@@ Co@@ l@@ or@@ Ne@@ w = new org.eclipse.swt.@@ g@@ raphic@@ s.@@ Co@@ l@@ or@@ (m@@ T@@ re@@ e.get@@ Display@@ (), 25@@ 5, 2@@ 3@@ 8@@ , 2@@ 0@@ 4@@ ); m@@ T@@ re@@ e.@@ add@@ Dis@@ po@@ se@@ Listener@@ (@@ new org.eclipse.swt.@@ event@@ s.@@ Dis@@ po@@ se@@ Listener@@ () { public void widget@@ Dis@@ po@@ sed@@ (@@ org.eclipse.swt.@@ event@@ s.@@ Dis@@ po@@ se@@ Ev@@ ent e) { m@@ T@@ re@@ e@@ F@@ on@@ t@@ I@@ t@@ al@@ ic@@ .@@ dis@@ po@@ se@@ (); m@@ Co@@ l@@ or@@ Up@@ dat@@ e.@@ dis@@ po@@ se@@ (); m@@ Co@@ l@@ or@@ Up@@ dat@@ e.@@ dis@@ po@@ se@@ (); m@@ Co@@ l@@ or@@ New@@ .@@ dis@@ po@@ se@@ (); m@@ T@@ re@@ e@@ F@@ on@@ t@@ I@@ t@@ al@@ i@@ c = null@@ ; m@@ Co@@ l@@ or@@ Up@@ d@@ ate = null@@ ; m@@ Co@@ l@@ or@@ Ne@@ w = null@@ ; } }); m@@ Status@@ B@@ utton@@ .set@@ Image@@ (get@@ Image@@ ("@@ stat@@ us@@ _@@ ok@@ _@@ 16@@ .@@ p@@ n@@ g@@ ")); }
public void test@@ E@@ o@@ f@@ In@@ En@@ ti@@ ty@@ Value@@ () throw@@ s java.lang.Exception { assert@@ Par@@ se@@ Fail@@ ure@@ ("@@ <@@ !@@ EN@@ TI@@ T@@ Y a@@ a \"@@ un@@ ter@@ min@@ ated@@ "); }
public void test@@ Ex@@ ec@@ ute@@ Q@@ u@@ er@@ y@@ () throw@@ s java.@@ s@@ q@@ l.@@ S@@ Q@@ L@@ Exception { java.lang.String[] qu@@ er@@ ies@@ 2 = new java.lang.String@@ []{ "@@ up@@ d@@ ate z@@ o@@ o set name@@ =@@ '@@ M@@ as@@ h@@ a@@ '@@ , f@@ am@@ il@@ y@@ =@@ '@@ cat@@ ' wh@@ er@@ e id@@ =@@ ;@@ ", "@@ in@@ ser@@ t int@@ o h@@ ut@@ ch (@@ id, an@@ im@@ al@@ _@@ id, addres@@ s) value@@ s (@@ 1, ?@@ ,@@ '@@ B@@ ir@@ d@@ s@@ -@@ ho@@ u@@ se@@ , 1@@ '@@ )@@ ;@@ ", "@@ in@@ ser@@ t int@@ o h@@ ut@@ ch (@@ id, an@@ im@@ al@@ _@@ id, addres@@ s) value@@ s (@@ ?@@ , 1, '@@ H@@ or@@ se@@ -@@ ho@@ u@@ se@@ , 5@@ '@@ )@@ ;@@ " }; for (@@ int i = 0; i < (@@ qu@@ er@@ ies@@ 2.@@ length); i++) { java.@@ s@@ q@@ l.@@ Pre@@ par@@ ed@@ State@@ m@@ ent p@@ s = null@@ ; try { p@@ s = con@@ n@@ .@@ pre@@ par@@ e@@ State@@ ment@@ (@@ qu@@ er@@ ies@@ 2@@ [i]@@ ); p@@ s.@@ exec@@ ute@@ Q@@ u@@ er@@ y@@ (); fail@@ (("@@ S@@ Q@@ L@@ Exception is not throw@@ n for qu@@ er@@ y@@ : " + (@@ qu@@ er@@ ies@@ 2@@ [i]@@ ))); } catch (@@ java.@@ s@@ q@@ l.@@ S@@ Q@@ L@@ Exception s@@ q@@ le@@ ) { } final@@ l@@ y { try { p@@ s.@@ close(); } catch (java.lang.Exception e@@ e) { } } try { java.@@ s@@ q@@ l.@@ Pre@@ par@@ ed@@ State@@ m@@ ent p@@ s = null@@ ; java.lang.String qu@@ er@@ y = "@@ cre@@ ate vi@@ e@@ w addres@@ s a@@ s sele@@ c@@ t addres@@ s f@@ ro@@ m h@@ ut@@ ch wh@@ er@@ e an@@ im@@ al@@ _@@ id@@ =@@ ?@@ "; p@@ s = con@@ n@@ .@@ pre@@ par@@ e@@ State@@ ment@@ (@@ qu@@ er@@ y@@ ); p@@ s.@@ exec@@ ute@@ Q@@ u@@ er@@ y@@ (); p@@ s = con@@ n@@ .@@ pre@@ par@@ e@@ State@@ ment@@ ("@@ sele@@ c@@ t * f@@ ro@@ m addres@@ s@@ "); p@@ s.@@ exec@@ ute@@ Q@@ u@@ er@@ y@@ (); fail@@ (("@@ S@@ Q@@ L@@ Exception is not throw@@ n for qu@@ er@@ y@@ : " + qu@@ er@@ y@@ )); } catch (java.lang.Exception s@@ q@@ le@@ ) { } java.lang.String qu@@ er@@ y = "@@ sele@@ c@@ t * f@@ ro@@ m z@@ o@@ o wh@@ er@@ e id = ?@@ "; java.@@ s@@ q@@ l.@@ Pre@@ par@@ ed@@ State@@ m@@ ent p@@ s = null@@ ; try { p@@ s = con@@ n@@ .@@ pre@@ par@@ e@@ State@@ ment@@ (@@ qu@@ er@@ y@@ ); p@@ s.@@ set@@ Int@@ (@@ 1, 1); java.@@ s@@ q@@ l.@@ Result@@ Se@@ t r@@ s = p@@ s.@@ exec@@ ute@@ Q@@ u@@ er@@ y@@ (); assert@@ Equal@@ s(@@ 1, r@@ s.get@@ Int@@ (1@@ )); assert@@ Equal@@ s("@@ K@@ es@@ h@@ a@@ ", r@@ s.get@@ String(@@ 2@@ )); assert@@ Equal@@ s("@@ par@@ ro@@ t@@ ", r@@ s.get@@ String(@@ 3@@ )); } final@@ l@@ y { try { p@@ s.@@ close(); } catch (java.lang.Exception e@@ e) { } } }
protected void open@@ Device@@ (java.lang.String c@@ am@@ er@@ a@@ Id) throw@@ s java.lang.Exception { mC@@ am@@ er@@ a = android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ C@@ am@@ er@@ a@@ Test@@ Utils.@@ C@@ am@@ er@@ a@@ Test@@ Utils.@@ open@@ C@@ am@@ er@@ a@@ (m@@ C@@ am@@ er@@ a@@ Manager@@ , c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Listener@@ , m@@ Handler@@ ); m@@ Colle@@ ctor@@ .set@@ C@@ am@@ er@@ a@@ Id@@ (c@@ am@@ er@@ a@@ Id); m@@ St@@ ati@@ c@@ Info = new android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ hel@@ per@@ s.@@ St@@ ati@@ c@@ Met@@ ad@@ ata@@ (m@@ C@@ am@@ er@@ a@@ Manager.get@@ C@@ am@@ er@@ a@@ Char@@ ac@@ ter@@ is@@ ti@@ c@@ s(@@ c@@ am@@ er@@ a@@ Id@@ ), android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ hel@@ per@@ s.@@ St@@ ati@@ c@@ Met@@ ad@@ ata@@ .@@ Check@@ Level.@@ A@@ SS@@ ER@@ T, null@@ ); m@@ Or@@ der@@ ed@@ Pre@@ view@@ Size@@ s = get@@ Sup@@ ported@@ Pre@@ view@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , get@@ Pre@@ view@@ Size@@ B@@ ound@@ (m@@ V@@ ide@@ o@@ Size@@ , get@@ Sup@@ ported@@ V@@ ide@@ o@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , android.hardware.@@ c@@ am@@ er@@ a@@ 2.@@ cts.@@ t@@ est@@ case@@ s.@@ P@@ RE@@ V@@ I@@ E@@ W@@ _S@@ I@@ Z@@ E_@@ B@@ O@@ UN@@ D@@ ); m@@ Or@@ der@@ ed@@ S@@ ti@@ l@@ l@@ Size@@ s = get@@ Sup@@ ported@@ S@@ ti@@ l@@ Siz@@ es@@ (c@@ am@@ er@@ a@@ Id, mC@@ am@@ er@@ a@@ Manager@@ , null@@ ); m@@ Min@@ Pre@@ view@@ F@@ rame@@ D@@ ur@@ ation@@ Ma@@ p = m@@ St@@ ati@@ c@@ Info@@ .get@@ A@@ va@@ il@@ able@@ Min@@ F@@ rame@@ D@@ ur@@ ation@@ s@@ For@@ Format@@ Check@@ ed@@ (@@ Image@@ Format@@ .@@ Y@@ U@@ V@@ _@@ 4@@ 2@@ 0@@ _@@ 8@@ ); }
public void test@@ Ex@@ p@@ 10@@ () { check@@ Ex@@ p@@ 10@@ FloatFloat@@ (); check@@ Ex@@ p@@ 10@@ Float2Float2@@ (); check@@ Ex@@ p@@ 10@@ Float3Float3@@ (); check@@ Ex@@ p@@ 10@@ Float4Float4@@ (); }
private static java.lang.String get@@ Fail@@ ure@@ Message@@ (@@ int input@@ ) { java.lang.String@@ Builder new@@ Str@@ ing = new java.lang.String@@ Builder@@ (); new@@ Str@@ ing.@@ append@@ ((("@@ Test in@@ put :@@ " + input@@ ) + "@@ \n@@ ")); for (@@ int i = 0; i < (com.android.server.@@ w@@ if@@ i.@@ util.@@ W@@ if@@ i@@ Permission@@ s@@ Uti@@ l@@ Test.@@ MA@@ X@@ _P@@ ER@@ M@@ I@@ SS@@ I@@ ON@@ S@@ ); i++) { if (com.android.server.@@ w@@ if@@ i.@@ util.@@ W@@ if@@ i@@ Permission@@ s@@ Uti@@ l@@ Test.@@ get@@ Val@@ At@@ Offset@@ (in@@ put@@ , i@@ )) { new@@ Str@@ ing.@@ append@@ ((@@ (com.android.server.@@ w@@ if@@ i.@@ util.@@ W@@ if@@ i@@ Permission@@ s@@ Uti@@ l@@ Test.@@ s@@ Permission@@ s@@ [i]@@ ) + "@@ :@@ \@@ t@@ Tr@@ u@@ e ")); } else { new@@ Str@@ ing.@@ append@@ ((@@ (com.android.server.@@ w@@ if@@ i.@@ util.@@ W@@ if@@ i@@ Permission@@ s@@ Uti@@ l@@ Test.@@ s@@ Permission@@ s@@ [i]@@ ) + "@@ :@@ \@@ t@@ F@@ al@@ se ")); } new@@ Str@@ ing.@@ append("@@ \n@@ "); } return new@@ Str@@ ing.@@ toString@@ (); }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ Res@@ et@@ s Telephony@@ Manager setting@@ s to fa@@ ctor@@ y default@@ .@@ ") public void im@@ s@@ Fa@@ ctory@@ Res@@ et@@ () { m@@ Ims@@ Manager.@@ fa@@ ctory@@ Res@@ et@@ S@@ lot@@ (); }
public java.util.List<@@ com.android.ide.@@ eclipse.adt.@@ editors.@@ layout.@@ g@@ scrip@@ ts.@@ M@@ en@@ u@@ Action@@ > call@@ Get@@ Context@@ M@@ en@@ u@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ editors.@@ layout.@@ u@@ im@@ o@@ de@@ l.@@ U@@ i@@ View@@ Element@@ No@@ de e@@ lement@@ ) { com.android.ide.@@ eclipse.adt.@@ editors.@@ layout.@@ g@@ scrip@@ ts.@@ I@@ View@@ R@@ ul@@ e r@@ ul@@ e = load@@ R@@ ule@@ (e@@ lement@@ ); if (r@@ ul@@ e != null@@ ) { try { return r@@ ule@@ .get@@ Context@@ M@@ en@@ u@@ (); } catch (java.lang.Exception e) { log@@ Error@@ ("@@ %@@ s.get@@ Context@@ M@@ en@@ u@@ () fa@@ ile@@ d@@ : %@@ s", r@@ ule@@ .get@@ Class@@ ().get@@ Sim@@ ple@@ Name@@ (), e.toString@@ ()); } return null@@ ; }
public void set@@ M@@ an@@ if@@ est@@ (@@ java.io.File m@@ an@@ if@@ est@@ ) { m@@ M@@ an@@ if@@ est = m@@ an@@ if@@ est@@ ; }
public void lin@@ k@@ (java.lang.String old@@ Path@@ , java.lang.String new@@ Path@@ ) throw@@ s android.system.@@ Errno@@ Exception;
boolean connect@@ Audio@@ () { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ hf@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); if (!(m@@ StateMachine.@@ is@@ Connec@@ ted@@ ())) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.TAG, "@@ connect@@ Audio@@ : pro@@ fi@@ le not connec@@ ted@@ "); return false@@ ; } if ((m@@ StateMach@@ in@@ e.get@@ Audio@@ State@@ ()) != (android.bluetooth.Bluetooth@@ Headset@@ .@@ STATE_@@ A@@ U@@ D@@ IO@@ _@@ D@@ IS@@ CONNEC@@ TED@@ )) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.TAG, ("@@ connect@@ Audio@@ : a@@ ud@@ i@@ o is not id@@ le@@ , curr@@ ent st@@ ate " + (m@@ StateMach@@ in@@ e.get@@ Audio@@ State@@ ()))); return false@@ ; } m@@ StateMachine.@@ send@@ Message@@ (@@ Headset@@ StateMachine.@@ CONNEC@@ T_@@ A@@ U@@ D@@ IO@@ ); return true@@ ; }
@java.lang.Override public void app@@ ly@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (android.net.@@ IpSec@@ Manager is@@ m@@ , int di@@ re@@ ction@@ , android.net.@@ IpSec@@ Tr@@ an@@ s@@ for@@ m tr@@ an@@ s@@ for@@ m@@ ) throw@@ s java.lang.Exception { is@@ m.@@ app@@ ly@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (m@@ F@@ d, di@@ re@@ ction@@ , tr@@ an@@ s@@ for@@ m@@ ); }
@java.lang.Override public void on@@ Manager@@ Connec@@ ted@@ (@@ int statu@@ s) { android.util.Log.@@ v@@ (com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ s@@ en@@ s@@ or@@ s.@@ hel@@ per@@ s.@@ Open@@ C@@ V@@ Librar@@ y.@@ TAG, ("@@ Ne@@ w Load@@ ing stat@@ us@@ : " + stat@@ us@@ )); switch (@@ statu@@ s) { case org.@@ op@@ enc@@ v@@ .@@ android.@@ Load@@ er@@ Callback@@ Interface@@ .@@ S@@ U@@ C@@ CE@@ S@@ S : { com.android.@@ cts.@@ ve@@ r@@ if@@ i@@ er.@@ s@@ en@@ s@@ or@@ s.@@ hel@@ per@@ s.@@ Open@@ C@@ V@@ Librar@@ y.@@ m@@ Load@@ ed = true@@ ; } break@@ ; default : { super@@ .@@ on@@ Manager@@ Connec@@ ted@@ (@@ stat@@ us@@ ); } break@@ ; } do@@ n@@ e.@@ count@@ Down@@ (); }
public boolean is@@ O@@ l@@ der@@ Or@@ Equal@@ s@@ Th@@ an@@ (@@ int re@@ le@@ ase@@ , int sub@@ Re@@ le@@ as@@ e) { return (@@ (@@ this@@ .@@ re@@ le@@ ase@@ Code@@ ) > re@@ le@@ as@@ e) || ((@@ (@@ this@@ .@@ re@@ le@@ ase@@ Code@@ ) == re@@ le@@ as@@ e) && (@@ (@@ this@@ .@@ sub@@ Re@@ le@@ ase@@ Code@@ ) >@@ = sub@@ Re@@ le@@ ase@@ )); }
public java.util.@@ Loc@@ a@@ le.@@ Builder set@@ Script@@ (java.lang.String script@@ ) { if ((@@ scrip@@ t == null@@ ) || (@@ script.@@ isEmpty@@ ())) { this@@ .@@ scrip@@ t = "@@ "; return this@@ ; } final java.lang.String low@@ er@@ case@@ Scrip@@ t = script.@@ to@@ Lo@@ w@@ er@@ C@@ ase@@ (java.util.@@ Loc@@ a@@ le.@@ RO@@ O@@ T@@ ); if (!(@@ java.util.@@ Loc@@ a@@ le.@@ is@@ Valid@@ B@@ c@@ p@@ 4@@ 7@@ Al@@ p@@ h@@ a@@ (@@ low@@ er@@ case@@ Scrip@@ t, 4@@ , 4@@ ))) { throw new java.util.@@ I@@ l@@ l@@ for@@ m@@ ed@@ Loc@@ ale@@ Exception(("@@ In@@ va@@ li@@ d script@@ : " + script@@ )); } this@@ .@@ scrip@@ t = java.util.@@ Loc@@ a@@ le.@@ ti@@ t@@ le@@ C@@ ase@@ As@@ c@@ i@@ i@@ W@@ or@@ d@@ (@@ low@@ er@@ case@@ Script@@ ); return this@@ ; }
android.net.@@ IpSec@@ Con@@ fig build@@ IpSec@@ Config@@ () throw@@ s java.lang.Exception { android.net.@@ IpSec@@ Manager ip@@ Sec@@ Manager = new android.net.@@ IpSec@@ Manager@@ (m@@ IpSec@@ Service@@ ); when(m@@ Mock@@ Net@@ d.@@ ip@@ Sec@@ Alloc@@ ate@@ S@@ pi@@ (@@ any@@ Int@@ (), any@@ Int@@ (), any@@ String@@ (), any@@ Int@@ ()@@ )).@@ thenReturn@@ (com.android.server.@@ IpSec@@ Service@@ Test.@@ D@@ RO@@ ID@@ _S@@ P@@ I@@ ).@@ thenReturn@@ (com.android.server.@@ IpSec@@ Service@@ Test.@@ D@@ RO@@ ID@@ _S@@ P@@ I@@ 2@@ ); android.net.@@ IpSecAlgorith@@ m enc@@ ryp@@ t@@ Al@@ g@@ o = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ C@@ R@@ Y@@ P@@ T_@@ A@@ E@@ S@@ _C@@ B@@ C@@ , com.android.server.@@ IpSec@@ Service@@ Test.@@ C@@ R@@ Y@@ P@@ T_@@ KE@@ Y); android.net.@@ IpSecAlgorith@@ m au@@ th@@ Al@@ g@@ o = new android.net.@@ IpSecAlgorith@@ m@@ (android.net.@@ IpSecAlgorith@@ m.@@ A@@ UT@@ H@@ _@@ H@@ M@@ AC@@ _S@@ H@@ A@@ 25@@ 6@@ , com.android.server.@@ IpSec@@ Service@@ Test.@@ A@@ UT@@ H@@ _@@ KE@@ Y@@ , ((@@ com.android.server.@@ IpSec@@ Service@@ Test.@@ A@@ UT@@ H@@ _@@ KE@@ Y@@ .@@ length) * 8@@ )); java.net.Inet@@ Address local@@ Add@@ r = java.net.Inet@@ Addres@@ s.get@@ By@@ Address@@ (@@ new byte@@ []{ 12@@ 7@@ , 0, 0, 1 }); java.net.Inet@@ Address remo@@ te@@ Add@@ r = java.net.Inet@@ Addres@@ s.get@@ By@@ Address@@ (@@ new byte@@ []{ 8@@ , 4@@ , 4 }); android.net.@@ IpSec@@ Manager.@@ Sec@@ urit@@ y@@ Parameter@@ In@@ dex out@@ S@@ p@@ i = ip@@ Sec@@ Manager.@@ res@@ er@@ ve@@ Sec@@ urit@@ y@@ Parameter@@ Index@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ , local@@ Add@@ r@@ ); android.net.@@ IpSec@@ Manager.@@ Sec@@ urit@@ y@@ Parameter@@ In@@ dex in@@ S@@ p@@ i = ip@@ Sec@@ Manager.@@ res@@ er@@ ve@@ Sec@@ urit@@ y@@ Parameter@@ Index@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ , local@@ Add@@ r@@ ); android.net.@@ IpSec@@ Con@@ fig con@@ fig = new android.net.@@ IpSec@@ Config@@ (); config.@@ set@@ S@@ pi@@ Resource@@ Id@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ , in@@ S@@ pi@@ .get@@ Resource@@ Id@@ ()); config.@@ set@@ S@@ pi@@ Resource@@ Id@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ , out@@ S@@ pi@@ .get@@ Resource@@ Id@@ ()); config.@@ set@@ En@@ c@@ r@@ y@@ ption@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ , enc@@ ryp@@ t@@ Al@@ go@@ ); config.@@ set@@ A@@ u@@ th@@ enti@@ cation@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ O@@ UT@@ , au@@ th@@ Al@@ go@@ ); config.@@ set@@ En@@ c@@ r@@ y@@ ption@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ , enc@@ ryp@@ t@@ Al@@ go@@ ); config.@@ set@@ A@@ u@@ th@@ enti@@ cation@@ (@@ IpSec@@ Tr@@ an@@ s@@ for@@ m.@@ DI@@ RE@@ C@@ TION_@@ IN@@ , au@@ th@@ Al@@ go@@ ); config.@@ set@@ Remote@@ Addres@@ s(@@ remo@@ te@@ Add@@ r@@ ); return config@@ ; }
public final void add@@ Reference@@ Clas@@ s(@@ @com.android.annotations.NonNull com.android.tools.@@ perflib.@@ he@@ ap.@@ Class@@ Ob@@ j re@@ ference@@ Class@@ ) { m@@ Reference@@ Class@@ es.@@ add(@@ re@@ ference@@ Class@@ ); }
private static boolean sho@@ ul@@ d@@ Output@@ Apk@@ E@@ n@@ try@@ (com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er@@ En@@ gin@@ e apk@@ Sign@@ er, java.util.@@ ja@@ r.@@ J@@ ar@@ File in@@ File@@ , java.util.@@ ja@@ r.@@ J@@ ar@@ E@@ n@@ try in@@ E@@ n@@ try@@ , byte@@ [] t@@ mp@@ bu@@ f@@ ) throw@@ s java.io.IOException { if (@@ apk@@ S@@ ig@@ ne@@ r == null@@ ) { return true@@ ; } com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ Input@@ J@@ ar@@ E@@ n@@ try@@ In@@ stru@@ ction@@ s in@@ stru@@ ction@@ s = apk@@ Sign@@ er.@@ input@@ J@@ ar@@ E@@ n@@ try@@ (in@@ E@@ n@@ try@@ .getName@@ ()); com.android.@@ apk@@ si@@ g.@@ Apk@@ Sign@@ er@@ En@@ g@@ ine.@@ In@@ spec@@ t@@ J@@ ar@@ E@@ n@@ try@@ Requ@@ est in@@ spec@@ t@@ E@@ n@@ try@@ Requ@@ est = in@@ stru@@ ction@@ s.get@@ In@@ spec@@ t@@ J@@ ar@@ E@@ n@@ try@@ Request@@ (); if (in@@ spec@@ t@@ E@@ n@@ try@@ Requ@@ est != null@@ ) { com.android.@@ sign@@ ap@@ k.@@ Sign@@ Ap@@ k.@@ provid@@ e@@ J@@ ar@@ E@@ n@@ try@@ (in@@ File@@ , in@@ E@@ n@@ try@@ , in@@ spec@@ t@@ E@@ n@@ try@@ Request@@ , t@@ mp@@ bu@@ f@@ ); } switch (in@@ stru@@ ction@@ s.get@@ Output@@ Polic@@ y@@ ()) { case O@@ UT@@ P@@ U@@ T : return true@@ ; case S@@ K@@ I@@ P : case O@@ UT@@ P@@ U@@ T_@@ B@@ Y_@@ EN@@ G@@ IN@@ E : return false@@ ; default : throw new java.lang.@@ RuntimeException(("@@ Un@@ suppor@@ ted out@@ put po@@ lic@@ y@@ : " + (in@@ stru@@ ction@@ s.get@@ Output@@ Polic@@ y@@ ()))); } }
public static java.lang.String es@@ cap@@ e@@ Resource@@ String@@ (java.lang.String s) { int n = s.@@ length@@ (); if (@@ n == 0) { return "@@ "; } java.lang.String@@ Builder s@@ b = new java.lang.String@@ Builder@@ (((@@ s.@@ length@@ ()) * 2@@ )); boolean has@@ S@@ p@@ ac@@ e = ((@@ s@@ .@@ char@@ At@@ (0@@ )) == ' '@@ ) || ((@@ s@@ .@@ char@@ At@@ ((@@ n - 1@@ ))) == ' '@@ ); if (@@ has@@ S@@ p@@ a@@ ce@@ ) { sb.@@ append(@@ '@@ "@@ '@@ ); } else if ((@@ (s@@ .@@ char@@ At@@ (0@@ )) == '@@ @@@ '@@ ) || ((@@ s@@ .@@ char@@ At@@ (0@@ )) == '@@ ?@@ '@@ )) { sb.@@ append(@@ '@@ \@@ \@@ '@@ ); } for (@@ int i = 0; i < n@@ ; ++@@ i@@ ) { char c = s@@ .@@ char@@ At@@ (i@@ ); switch (c@@ ) { case '@@ \@@ '@@ ' : if (!@@ has@@ S@@ p@@ a@@ ce@@ ) { sb.@@ append(@@ '@@ \@@ \@@ '@@ ); } sb.@@ append(@@ '@@ \@@ \@@ '@@ ); break@@ ; case '@@ "@@ ' : case '@@ \@@ \@@ ' : sb.@@ append(@@ '@@ \@@ \@@ '@@ ); sb.@@ append@@ (c@@ ); break@@ ; case '@@ <@@ ' : sb.@@ append@@ (com.android.@@ Sdk@@ Constants.@@ L@@ T_@@ EN@@ TI@@ TY@@ ); break@@ ; case '@@ &@@ ' : sb.@@ append@@ (com.android.@@ Sdk@@ Constants.@@ AM@@ P@@ _@@ EN@@ TI@@ TY@@ ); break@@ ; case '@@ \n@@ ' : sb.@@ append("@@ \@@ \n@@ "); break@@ ; case '@@ \@@ t@@ ' : sb.@@ append("@@ \@@ \@@ \@@ t@@ "); break@@ ; default : sb.@@ append@@ (c@@ ); break@@ ; } } if (@@ has@@ S@@ p@@ a@@ ce@@ ) { sb.@@ append(@@ '@@ "@@ '@@ ); } return sb.@@ toString@@ (); }
public android.net.Network@@ Stat@@ s read@@ Network@@ Stat@@ s@@ D@@ eta@@ il@@ (@@ int li@@ m@@ it@@ U@@ id, java.lang.String[] li@@ m@@ it@@ I@@ fa@@ ces@@ , int li@@ m@@ it@@ Tag@@ , android.net.Network@@ Stat@@ s las@@ t@@ Stat@@ s) throw@@ s java.io.IOException { return read@@ Network@@ Stat@@ s@@ D@@ eta@@ il@@ Inter@@ nal@@ (@@ li@@ m@@ it@@ U@@ id, li@@ m@@ it@@ I@@ fa@@ ces@@ , li@@ m@@ it@@ Tag@@ , las@@ t@@ Stat@@ s); }
public void test@@ Null@@ Re@@ pe@@ ated@@ Field@@ s() { com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o mess@@ age = new com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ (); mess@@ age.@@ re@@ pe@@ ated@@ Int@@ 3@@ 2 = null@@ ; com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ Message@@ N@@ an@@ o@@ .@@ to@@ ByteArray@@ (m@@ ess@@ age@@ ); assert@@ NotNull@@ (m@@ ess@@ age.@@ toString@@ ()); mess@@ age = new com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ N@@ an@@ o@@ O@@ u@@ ter@@ Clas@@ s.@@ Test@@ All@@ Typ@@ es@@ N@@ an@@ o@@ (); mess@@ age.@@ re@@ pe@@ ated@@ N@@ es@@ ted@@ En@@ u@@ m = null@@ ; com.google.@@ pro@@ to@@ bu@@ f.@@ n@@ an@@ o@@ .@@ Message@@ N@@ an@@ o@@ .@@ to@@ ByteArray@@ (m@@ ess@@ age@@ ); assert@@ NotNull@@ (m@@ ess@@ age.@@ toString@@ ()); }
public void ms@@ ync@@ (@@ long addres@@ s, long byte@@ Count@@ , int flag@@ s) throw@@ s android.system.@@ ErrnoException { os.@@ ms@@ ync@@ (@@ addres@@ s, byte@@ Count@@ , flag@@ s); }
@javax.annotation.@@ N@@ on@@ null @java.lang.Override public com.android.jack.ir.ast.J@@ Method@@ Id get@@ Method@@ Id@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String name@@ , @javax.annotation.@@ N@@ on@@ null java.util.List<@@ ? extends com.android.jack.ir.ast.J@@ Type@@ > arg@@ s@@ Type, @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ ir.ast.@@ Method@@ K@@ in@@ d k@@ ind@@ ) throw@@ s com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Loo@@ k@@ up@@ Exception { assert !@@ ((@@ nam@@ e.@@ contain@@ s("@@ ("@@ )) || (@@ nam@@ e.@@ contain@@ s("@@ )@@ "@@ ))); load@@ er.@@ en@@ s@@ ure@@ Method@@ s@@ (@@ this@@ ); for (com.android.jack.@@ ir.ast.J@@ M@@ etho@@ d m@@ etho@@ d : method@@ s) { com.android.jack.ir.ast.J@@ Method@@ Id id = method@@ .get@@ Method@@ Id@@ (); if ((@@ id.@@ equals(@@ name@@ , arg@@ s@@ Type@@ )) && ((@@ id@@ .get@@ K@@ ind@@ ()) == k@@ ind@@ )) { return id@@ ; } } for (com.android.jack.@@ ir.ast.J@@ Inter@@ face j@@ Type : get@@ Imp@@ lement@@ s@@ ()) { try { return j@@ Typ@@ e.get@@ Method@@ Id@@ (@@ name@@ , arg@@ s@@ Type, k@@ ind@@ ); } catch (com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Loo@@ k@@ up@@ Exception e) { } } com.android.jack.ir.ast.J@@ Clas@@ s super@@ Clas@@ s = get@@ Sup@@ er@@ Class@@ (); if (@@ super@@ Clas@@ s != null@@ ) { try { return super@@ Clas@@ s.get@@ Method@@ Id@@ (@@ name@@ , arg@@ s@@ Type, k@@ ind@@ ); } catch (com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Loo@@ k@@ up@@ Exception e) { } } throw new com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Method@@ Id@@ Loo@@ k@@ up@@ Exception@@ (@@ this@@ , name@@ , arg@@ s@@ Type@@ ); }
private void ve@@ r@@ if@@ y@@ Results@@ Ab@@ s@@ Int@@ U@@ int@@ (android.@@ renderscript.@@ Alloc@@ ation in@@ Value@@ , android.renderscript.Allocation out, boolean re@@ lax@@ ed@@ ) { int@@ [] array@@ In@@ Value = new int@@ [@@ (@@ INPUTSIZ@@ E@@ ) * 1@@ ]; in@@ Valu@@ e.@@ copy@@ To@@ (@@ array@@ In@@ Value@@ ); int@@ [] array@@ O@@ u@@ t = new int@@ [@@ (@@ INPUTSIZ@@ E@@ ) * 1@@ ]; out.@@ copy@@ To@@ (@@ array@@ Out@@ ); for (@@ int i = 0; i < (@@ INPUTSIZE); i++) { for (@@ int j = 0; j < 1; j@@ ++) { android.renderscript.cts.@@ Test@@ Ab@@ s.@@ Argument@@ s@@ Int@@ U@@ int arg@@ s = new android.renderscript.cts.@@ Test@@ Ab@@ s.@@ Argument@@ s@@ Int@@ U@@ int@@ (); args.@@ in@@ Value = array@@ In@@ Value@@ [i@@ ]; android.renderscript.cts.@@ C@@ ore@@ M@@ ath@@ V@@ er@@ if@@ i@@ er.@@ com@@ pu@@ te@@ Ab@@ s(@@ arg@@ s); int ul@@ f = (re@@ lax@@ ed@@ ) ? args.@@ ul@@ f@@ Relax@@ ed : args.@@ ul@@ f@@ ; boolean va@@ li@@ d = true@@ ; int ne@@ ed@@ ed@@ U@@ l@@ f = 0; if ((@@ args.@@ out@@ ) != (@@ array@@ Out@@ [@@ ((@@ i * 1@@ ) + j@@ )@@ ]@@ )) { va@@ li@@ d = false@@ ; } if (!@@ valid@@ ) { java.lang.String@@ Builder mess@@ age = new java.lang.String@@ Builder@@ (); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ In@@ put in@@ Value@@ : %@@ d@@ ", args.@@ in@@ Value@@ )); mess@@ age.@@ append("@@ \n@@ "); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ Ex@@ pec@@ ted out@@ put out@@ : %@@ x@@ ", args.@@ out@@ )); mess@@ age.@@ append("@@ \n@@ "); mess@@ age.@@ append(@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ A@@ ct@@ u@@ al out@@ put out@@ : %@@ x@@ ", array@@ Out@@ [@@ ((@@ i * 1@@ ) + j@@ )@@ ]@@ )); if ((@@ args.@@ out@@ ) != (@@ array@@ Out@@ [@@ ((@@ i * 1@@ ) + j@@ )@@ ]@@ )) { mess@@ age.@@ append(@@ " FA@@ IL@@ "); } mess@@ age.@@ append("@@ \n@@ "); assert@@ True@@ ((@@ (("@@ In@@ cor@@ re@@ c@@ t out@@ put for check@@ Ab@@ s@@ Int@@ " + (re@@ lax@@ ed ? "@@ _@@ re@@ lax@@ ed@@ " : "@@ ")) + "@@ :@@ \n") + (m@@ ess@@ age.@@ toString@@ ()@@ )), valid@@ ); } } } }
@@@ java.lang.@@ Sup@@ pres@@ s@@ W@@ ar@@ n@@ ing@@ s("@@ resource@@ ") @javax.annotation.@@ N@@ on@@ null @java.lang.Override java.io.@@ Output@@ Stream open@@ W@@ rite@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Cach@@ ed@@ Dire@@ ct@@ F@@ S@@ .@@ Cach@@ ed@@ Par@@ ent@@ V@@ File file@@ , boolean append@@ ) throw@@ s com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception { assert !@@ (is@@ C@@ lo@@ sed@@ ()); assert cap@@ abili@@ ties.@@ contain@@ s(@@ Capabili@@ ties.@@ W@@ R@@ I@@ TE@@ ); VF@@ S@@ Stat@@ C@@ ate@@ gor@@ y.@@ DI@@ R@@ _@@ W@@ R@@ I@@ TE@@ .get@@ Coun@@ ter@@ Stat@@ (get@@ Tr@@ ac@@ er@@ (), info@@ String@@ ).@@ in@@ c@@ Value@@ (); java.io.File p@@ ath = get@@ Native@@ File@@ (file@@ .get@@ Path@@ ()); try { java.io.@@ Output@@ Stream o@@ s = new java.io.File@@ Output@@ Stream@@ (p@@ ath@@ , append@@ ); assert (o@@ s = tr@@ ack@@ Open@@ ed@@ Stream@@ (o@@ s, file@@ )) != null@@ ; return o@@ s; } catch (@@ java.io.File@@ Not@@ F@@ ound@@ Exception e) { com.android.sched.vfs.@@ Dire@@ ct@@ F@@ S@@ .@@ check@@ File@@ Not@@ F@@ ound@@ (e@@ , path@@ , file@@ .get@@ Location@@ ()); throw new java.lang.@@ Asser@@ tion@@ Error@@ (@@ e); } }
public java.util.ArrayList<@@ com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ ve@@ Info@@ > com@@ pu@@ te@@ Up@@ dat@@ es@@ (java.util.@@ Collection@@ <@@ com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ ve@@ > sele@@ c@@ ted@@ Ar@@ ch@@ i@@ v@@ es@@ , com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ Source@@ s s@@ ources@@ , java.lang.@@ Package@@ [] local@@ P@@ kg@@ s, boolean in@@ c@@ lu@@ de@@ Ob@@ s@@ ol@@ et@@ es) { java.util.ArrayList<@@ com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ ve@@ Info@@ > arch@@ i@@ ve@@ s = new java.util.ArrayList<@@ com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ ve@@ Info@@ >(); java.util.ArrayList<@@ java.lang.@@ Package@@ > remo@@ te@@ P@@ kg@@ s = new java.util.ArrayList<@@ java.lang.@@ Package@@ >(); com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Sdk@@ Source@@ [] remo@@ te@@ Source@@ s = s@@ ources@@ .get@@ All@@ S@@ ources@@ (); com.android.s@@ dk@@ ui@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ ve@@ Info@@ [] local@@ Ar@@ ch@@ i@@ ve@@ s = create@@ Local@@ Ar@@ ch@@ i@@ v@@ es(@@ local@@ P@@ kg@@ s); if (@@ sele@@ c@@ ted@@ Ar@@ ch@@ i@@ ve@@ s == null@@ ) { sele@@ c@@ ted@@ Ar@@ ch@@ i@@ ve@@ s = find@@ Up@@ dat@@ es(@@ local@@ Ar@@ ch@@ i@@ v@@ es@@ , remo@@ te@@ P@@ kg@@ s, remo@@ te@@ S@@ ources@@ , in@@ c@@ lu@@ de@@ Ob@@ s@@ ol@@ et@@ es@@ ); } for (com.android.s@@ dk@@ lib@@ .@@ int@@ er@@ n@@ al.@@ repository.@@ Ar@@ ch@@ i@@ v@@ e a : sele@@ c@@ ted@@ Ar@@ ch@@ i@@ v@@ es) { in@@ ser@@ t@@ Ar@@ ch@@ i@@ ve@@ (@@ a@@ , arch@@ i@@ v@@ es@@ , sele@@ c@@ ted@@ Ar@@ ch@@ i@@ v@@ es@@ , remo@@ te@@ P@@ kg@@ s, remo@@ te@@ S@@ ources@@ , local@@ Ar@@ ch@@ i@@ v@@ es@@ , false@@ ); } fix@@ M@@ is@@ sing@@ Local@@ Dependenc@@ i@@ es(@@ arch@@ i@@ v@@ es@@ , sele@@ c@@ ted@@ Ar@@ ch@@ i@@ v@@ es@@ , remo@@ te@@ P@@ kg@@ s, remo@@ te@@ S@@ ources@@ , local@@ Ar@@ ch@@ i@@ v@@ es@@ ); return arch@@ i@@ v@@ es@@ ; }
@java.lang.Override public final void ac@@ ce@@ p@@ t@@ (com.android.@@ tools.@@ perflib.@@ he@@ ap.@@ Visi@@ tor vi@@ si@@ tor@@ ) { vi@@ si@@ tor.@@ vi@@ si@@ t@@ (in@@ stance@@ ); }
@java.lang.Override public java.io.File get@@ Output@@ Dir@@ () { return output@@ Dir@@ ; }
private void per@@ si@@ st@@ Bluetooth@@ Setting@@ (@@ int valu@@ e) { long call@@ ing@@ Id@@ enti@@ t@@ y = android.os.@@ B@@ ind@@ er.@@ clear@@ Call@@ ing@@ Id@@ enti@@ ty@@ (); Setting@@ s.@@ G@@ lo@@ b@@ al.@@ put@@ Int@@ (m@@ Contex@@ t.get@@ Content@@ Resol@@ ver@@ (), Setting@@ s.@@ G@@ lo@@ b@@ al.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ ON@@ , valu@@ e); android.os.@@ B@@ ind@@ er.@@ r@@ est@@ ore@@ Call@@ ing@@ Id@@ enti@@ ty@@ (c@@ all@@ ing@@ Id@@ enti@@ ty@@ ); }
public void request@@ E@@ uic@@ c@@ Ch@@ all@@ eng@@ e@@ (java.lang.String c@@ ard@@ Id, java.util.@@ concurrent.@@ Ex@@ ec@@ ut@@ or exec@@ ut@@ or@@ , android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ Result@@ Callback@@ <@@ byte@@ []@@ > call@@ back@@ ) { try { get@@ I@@ E@@ uic@@ c@@ Card@@ Control@@ ler@@ ().get@@ E@@ uic@@ c@@ Ch@@ all@@ eng@@ e@@ (m@@ Contex@@ t.get@@ Op@@ Package@@ Name@@ (), c@@ ard@@ Id, new com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ e@@ uicc.@@ I@@ Get@@ E@@ uic@@ c@@ Ch@@ all@@ eng@@ e@@ Callback@@ .@@ St@@ ub@@ () { @java.lang.Override public void on@@ Comp@@ lete@@ (@@ int result@@ Code@@ , byte@@ [] ch@@ all@@ eng@@ e) { exec@@ ut@@ or.@@ exec@@ ute@@ ((@@ ) -@@ > call@@ back@@ .@@ on@@ Comp@@ lete@@ (@@ result@@ Code@@ , ch@@ all@@ eng@@ e@@ )); } }); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Card@@ Manager.@@ TAG, "@@ Error call@@ ing get@@ E@@ uic@@ c@@ Ch@@ all@@ eng@@ e@@ ", e); throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
public long get@@ Ex@@ c@@ lu@@ si@@ ve@@ Time@@ (java.lang.String th@@ read@@ ) { com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Method@@ Info.@@ Method@@ Stat@@ s stat@@ s = m@@ Per@@ Thread@@ Stat@@ s.get@@ (@@ th@@ read@@ ); return stat@@ s != null ? stat@@ s.@@ ex@@ c@@ lu@@ si@@ ve@@ Time@@ (@@ th@@ read@@ ); }
@java.lang.Override public java.io.File call@@ () throw@@ s java.lang.Exception { return ((@@ com.android.build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ vari@@ an@@ t.@@ Apk@@ Variant@@ Output@@ Data@@ ) (s@@ co@@ p@@ e.get@@ Variant@@ Output@@ Data@@ ()@@ )@@ )@@ )@@ .@@ package@@ Application@@ Task@@ .get@@ Output@@ File@@ (); }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { send@@ Remote@@ R@@ tt@@ Request@@ (); }
@java.lang.Override public android.@@ icu@@ .@@ im@@ p@@ l.@@ U@@ Resource@@ .@@ T@@ able@@ S@@ in@@ k get@@ Or@@ Create@@ T@@ able@@ S@@ in@@ k@@ (android.@@ icu@@ .@@ im@@ p@@ l.@@ U@@ Resource@@ .@@ Ke@@ y key@@ ) { if (@@ ke@@ y.@@ cont@@ ent@@ Equal@@ s(@@ android.@@ icu@@ .@@ text.@@ Date@@ Inter@@ val@@ Info.@@ IN@@ TER@@ VAL@@ _@@ F@@ OR@@ MA@@ T@@ S_@@ KE@@ Y@@ )) { return s@@ k@@ el@@ et@@ on@@ S@@ in@@ k@@ ; } return null@@ ; }
private void update@@ Ho@@ ver@@ Reg@@ i@@ on@@ (@@ int x@@ , int y@@ ) { com.android.@@ d@@ raw@@ 9@@ p@@ atch@@ .@@ ui.@@ Image@@ View@@ er.@@ Up@@ date@@ Reg@@ i@@ on@@ Info verti@@ cal@@ P@@ atch@@ (@@ x@@ , y@@ ); com.android.@@ d@@ raw@@ 9@@ p@@ atch@@ .@@ ui.@@ Image@@ View@@ er.@@ Up@@ date@@ Reg@@ i@@ on@@ Info verti@@ cal@@ Up@@ date@@ Reg@@ i@@ on = find@@ Ver@@ ti@@ cal@@ P@@ atch@@ (@@ x@@ , y@@ ); com.android.@@ d@@ raw@@ 9@@ p@@ atch@@ .@@ ui.@@ Image@@ View@@ er.@@ Up@@ date@@ Reg@@ i@@ on@@ Info h@@ or@@ iz@@ on@@ t@@ al@@ Up@@ date@@ Reg@@ i@@ on = find@@ H@@ or@@ iz@@ on@@ t@@ al@@ P@@ atch@@ (@@ x@@ , y@@ ); com@@ pu@@ te@@ H@@ ig@@ h@@ li@@ g@@ ht@@ Reg@@ i@@ on@@ s(@@ verti@@ cal@@ Up@@ date@@ Reg@@ i@@ on@@ , h@@ or@@ iz@@ on@@ t@@ al@@ Up@@ date@@ Reg@@ i@@ on@@ ); com.android.@@ d@@ raw@@ 9@@ p@@ atch@@ .@@ ui.@@ Image@@ View@@ er.@@ Up@@ date@@ Reg@@ i@@ on@@ Info ed@@ it@@ Reg@@ i@@ on = pi@@ ck@@ Up@@ date@@ Reg@@ i@@ on@@ (@@ x@@ , y@@ , verti@@ cal@@ Up@@ date@@ Reg@@ i@@ on@@ , h@@ or@@ iz@@ on@@ t@@ al@@ Up@@ date@@ Reg@@ i@@ on@@ ); if (@@ ed@@ it@@ Reg@@ i@@ on != null@@ ) { java.@@ aw@@ t.@@ C@@ ur@@ s@@ or c = get@@ C@@ ur@@ s@@ or@@ (@@ x@@ , y@@ , ed@@ it@@ Reg@@ i@@ on@@ ); set@@ C@@ ur@@ s@@ or@@ (c@@ ); } else { set@@ C@@ ur@@ s@@ or@@ (@@ java.@@ aw@@ t.@@ C@@ ur@@ s@@ or@@ .get@@ Default@@ C@@ ur@@ s@@ or@@ ()); } }
private void check@@ L@@ g@@ am@@ ma@@ Float4@@ Int@@ 4@@ Float4@@ () { android.renderscript.Allocation in@@ X = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 4@@ , -@@ 4@@ 2@@ 9@@ 1@@ 4@@ 9@@ 1@@ 4@@ 9@@ 4@@ 8@@ 7@@ 9@@ 1@@ 4@@ 4@@ 8@@ L); try { android.renderscript.Allocation out@@ Y = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 32, 4@@ ), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); script.@@ set@@ _@@ g@@ Alloc@@ Out@@ Y@@ (@@ out@@ Y); script@@ .@@ for@@ Each@@ _test@@ L@@ g@@ am@@ ma@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ L@@ g@@ am@@ ma@@ Float4@@ Int@@ 4@@ Float4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out@@ Y = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ SI@@ G@@ N@@ ED@@ _@@ 32, 4@@ ), android.renderscript.cts.INPUTSIZE); android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelaxed.@@ set@@ _@@ g@@ Alloc@@ Out@@ Y@@ (@@ out@@ Y); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ L@@ g@@ am@@ ma@@ Float4@@ Int@@ 4@@ Float4@@ (in@@ X@@ , out); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ L@@ g@@ am@@ ma@@ Float4@@ Int@@ 4@@ Float4@@ : " + (e.toString()))); } }
public void test@@ Pro@@ gu@@ ard@@ File@@ (@@ java.lang.Object pro@@ gu@@ ard@@ File@@ ) { get@@ Test@@ Pro@@ gu@@ ard@@ Fil@@ es@@ ().@@ add(@@ pro@@ jec@@ t.@@ file@@ (pro@@ gu@@ ard@@ File@@ )); }
public java.io.FileDescriptor d@@ up@@ (java.io.FileDescriptor old@@ F@@ d@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ d@@ up@@ (@@ old@@ F@@ d@@ ); }
public void test@@ De@@ code@@ U@@ int@@ 32@@ () throw@@ s java.io.IOException { final java.io.@@ ByteArray@@ Input@@ Stream in@@ put = new java.io.@@ ByteArray@@ InputStream@@ (@@ new byte@@ []{ (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (0@@ )), (@@ (@@ byte@@ ) (1@@ 0@@ 3@@ )), (@@ (@@ byte@@ ) (@@ 6@@ 9@@ )), (@@ (@@ byte@@ ) (@@ 3@@ 5@@ )), (@@ (@@ byte@@ ) (1@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 3@@ 9@@ )), (@@ (@@ byte@@ ) (@@ 2@@ 0@@ 5@@ )), (@@ (@@ byte@@ ) (1@@ 7@@ 1@@ )), (@@ (@@ byte@@ ) (1@@ 6@@ )) }); final long@@ [] expec@@ ted = new long@@ []{ 0, 1@@ 9@@ 0@@ 8@@ 7@@ 4@@ 3@@ , 2@@ 7@@ 9@@ 6@@ 9@@ 4@@ 8@@ 3@@ 1 }; com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ De@@ co@@ der d = new com.android.tools.@@ r@@ p@@ c@@ lib.@@ b@@ in@@ ar@@ y.@@ De@@ co@@ der@@ (in@@ put@@ ); for (@@ long u@@ 3@@ 2 : expected@@ ) { assert@@ Equal@@ s(@@ u@@ 32, ((@@ d.@@ u@@ int@@ 32@@ ()) & -1@@ )); } }
@javax.annotation.@@ N@@ on@@ null private java.util.@@ Set@@ <java.lang.String@@ > get@@ Mo@@ d@@ if@@ i@@ ed@@ File@@ Nam@@ es(@@ @javax.annotation.@@ N@@ on@@ null java.util.@@ Set@@ <java.lang.String@@ > java@@ File@@ Nam@@ es) { assert (file@@ Dependenc@@ i@@ es) != null@@ ; java.util.@@ Set@@ <java.lang.String@@ > mo@@ d@@ if@@ i@@ ed@@ File@@ Name@@ s = new java.util.@@ Hash@@ Set@@ <java.lang.String@@ >(); for (java.lang.String java@@ File@@ Name : file@@ Dependenc@@ ies@@ .get@@ Comp@@ ile@@ d@@ Java@@ Fil@@ es@@ ()) { if (@@ java@@ File@@ Nam@@ es.@@ contain@@ s(@@ java@@ File@@ Name@@ )) { java.io.File java@@ File = new java.io.File@@ (@@ java@@ File@@ Name); for (java.lang.String type@@ Name : file@@ Dependenc@@ ies@@ .get@@ Type@@ Nam@@ es(@@ java@@ File@@ Name@@ )) { java.io.File dex@@ File = get@@ Dex@@ File@@ (@@ type@@ Name); if ((@@ !@@ (@@ dex@@ File@@ .@@ exist@@ s@@ ())) || ((@@ java@@ File@@ .@@ las@@ t@@ Mo@@ d@@ if@@ i@@ ed@@ ()) > (@@ dex@@ File@@ .@@ las@@ t@@ Mo@@ d@@ if@@ i@@ ed@@ ()))) { mo@@ d@@ if@@ i@@ ed@@ File@@ Nam@@ es.@@ add(@@ java@@ File@@ Name); } } return mo@@ d@@ if@@ i@@ ed@@ File@@ Nam@@ es@@ ; }
@java.lang.Override public void set@@ Sms@@ c@@ Addres@@ s(@@ java.lang.String addres@@ s, android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SE@@ T_@@ S@@ MS@@ C@@ _@@ AD@@ D@@ RE@@ SS@@ , result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " addres@@ s = ") + addres@@ s@@ )); } try { radioProx@@ y.@@ set@@ Sms@@ c@@ Addres@@ s(@@ r@@ r@@ .m@@ Ser@@ ial@@ , con@@ ver@@ t@@ Null@@ To@@ Empty@@ String(@@ addres@@ s@@ )); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ set@@ Sms@@ c@@ Address@@ ", e); } } }
@com.android.annotations.NonNull @java.lang.Override public java.util.List<@@ java.lang.String> get@@ Project@@ Dependenc@@ ies@@ Path@@ () { return com.google.common.@@ colle@@ ct.@@ Im@@ m@@ ut@@ able@@ List.@@ copy@@ (m@@ o@@ du@@ le@@ Dir@@ , m@@ ut@@ able@@ List.@@ o@@ du@@ le@@ Dir@@ , m@@ O@@ ri@@ gin@@ al@@ Mod@@ ule@@ ); }
private void e@@ n@@ for@@ ce@@ W@@ if@@ i@@ Display@@ Permission@@ (@@ int uid@@ ) { m@@ Context.@@ e@@ n@@ for@@ ce@@ Permission@@ (android.@@ M@@ an@@ if@@ est.@@ per@@ mission@@ .@@ CON@@ FI@@ G@@ UR@@ E_@@ WI@@ FI@@ _@@ D@@ IS@@ P@@ LA@@ Y@@ , uid@@ , (-1@@ ), "@@ W@@ if@@ i@@ P2p@@ Service@@ "); }
@java.lang.Override protected void on@@ Connec@@ t@@ (@@ java.net.Inet@@ Address remo@@ te@@ Addres@@ s, int remo@@ te@@ Port@@ ) { super@@ .@@ on@@ Connec@@ ted@@ (@@ remo@@ te@@ Addres@@ s, remo@@ te@@ Port@@ ); is@@ Native@@ Connec@@ ted = true@@ ; connec@@ ted@@ Address = remo@@ te@@ Address@@ ; connec@@ ted@@ P@@ or@@ t = remo@@ te@@ Port@@ ; }
public void test_@@ X@@ 509@@ _N@@ AM@@ E_@@ has@@ h@@ es@@ () { javax.@@ security.@@ au@@ th@@ .@@ x@@ 5@@ 00@@ .@@ X@@ 5@@ 00@@ P@@ r@@ in@@ c@@ ip@@ al name = new javax.@@ security.@@ au@@ th@@ .@@ x@@ 5@@ 00@@ .@@ X@@ 5@@ 00@@ P@@ r@@ in@@ c@@ ip@@ al@@ ("@@ C@@ N@@ =@@ local@@ ho@@ st@@ "); assert@@ Equal@@ s@@ ((@@ -1@@ 3@@ 7@@ 2@@ 6@@ 4@@ 2@@ 6@@ 5@@ 6@@ ), org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ X@@ 509@@ _N@@ AM@@ E_@@ has@@ h@@ (@@ name@@ )); assert@@ Equal@@ s@@ ((@@ -1@@ 6@@ 2@@ 6@@ 1@@ 7@@ 0@@ 6@@ 2@@ ), org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ X@@ 509@@ _N@@ AM@@ E_@@ has@@ h@@ _@@ old@@ (@@ name@@ )); }
public static android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Script@@ In@@ tr@@ in@@ si@@ c@@ Con@@ vo@@ l@@ ve@@ 3@@ x@@ 3 create@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Render@@ Scrip@@ t r@@ s, android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Elem@@ ent e) { float@@ [] f = new float@@ []{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 }; if ((((@@ !@@ (@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ U@@ 8@@ (r@@ s@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ U@@ 8@@ _@@ 2@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ U@@ 8@@ _@@ 3@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ U@@ 8@@ _@@ 4@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ F32@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ F32@@ _@@ 2@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ F32@@ _@@ 3@@ (r@@ s@@ )@@ )@@ ))) && (!(@@ e.@@ is@@ Comp@@ ati@@ ble@@ (android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Element.@@ F32@@ _@@ 4@@ (r@@ s@@ )@@ )@@ ))) { throw new android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ RS@@ Illegal@@ Argument@@ Exception("@@ Un@@ sup@@ or@@ ted e@@ lem@@ ent typ@@ e.@@ "); } long id@@ ; boolean m@@ U@@ se@@ In@@ c@@ Sup@@ p = false@@ ; if (@@ true || ((@@ rs.@@ is@@ U@@ se@@ Native@@ ()) && ((@@ android.os.@@ Build@@ .@@ V@@ E@@ RS@@ I@@ ON@@ .@@ S@@ D@@ K_@@ IN@@ T@@ ) < 2@@ 1@@ ))) { android.util.Log.@@ v@@ ("@@ In@@ c R@@ S Test@@ ", "@@ Cre@@ at@@ ing In@@ tr@@ in@@ si@@ c@@ "); m@@ U@@ se@@ In@@ c@@ Sup@@ p = true@@ ; id = rs.@@ n@@ Script@@ In@@ tr@@ in@@ si@@ c@@ Create@@ (@@ 1, e.get@@ ID@@ (r@@ s@@ )); android.util.Log.@@ v@@ ("@@ In@@ c R@@ S Test@@ ", "@@ Cre@@ ati@@ e In@@ tr@@ in@@ si@@ c Comp@@ let@@ ed@@ "); } else { id = rs.@@ n@@ Script@@ In@@ tr@@ in@@ si@@ c@@ Create@@ (@@ 1, e.get@@ ID@@ (r@@ s@@ )); } android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Script@@ In@@ tr@@ in@@ si@@ c@@ Con@@ vo@@ l@@ ve@@ 3@@ x@@ 3 s@@ i = new android.@@ support.@@ v@@ 8@@ .@@ renderscript.@@ Script@@ In@@ tr@@ in@@ si@@ c@@ Con@@ vo@@ l@@ ve@@ 3@@ x@@ 3@@ (@@ id, r@@ s); si@@ .set@@ In@@ c@@ Sup@@ p@@ (m@@ U@@ se@@ In@@ c@@ Sup@@ p@@ ); si@@ .set@@ Co@@ e@@ f@@ fi@@ c@@ i@@ ent@@ s(@@ f@@ ); return si@@ ; }
public void b@@ ind@@ Response@@ (@@ int ind@@ _@@ id, boolean ind@@ _@@ statu@@ s) { final android.@@ bluetooth.@@ I@@ Bluetooth@@ Head@@ set ser@@ vice = m@@ Service@@ ; if ((@@ ser@@ vice != null@@ ) && (is@@ Enabled@@ ())) { try { service@@ .@@ b@@ ind@@ Response@@ (in@@ d@@ _@@ id, ind@@ _@@ stat@@ us@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.bluetooth.Bluetooth@@ Headset@@ .@@ TAG, e.toString@@ ()); } } else { android.util.Log.@@ w@@ (android.bluetooth.Bluetooth@@ Headset@@ .@@ TAG, "@@ Prox@@ y not att@@ ach@@ ed to service@@ "); if (android.bluetooth.Bluetooth@@ Headset@@ .@@ DBG) android.util.Log.d@@ (android.bluetooth.Bluetooth@@ Headset@@ .@@ TAG, android.util.Log.@@ get@@ Stack@@ Tra@@ ce@@ String@@ (@@ new java.lang.@@ Throw@@ able@@ ())); } }
public void com@@ pu@@ te@@ Call@@ Stat@@ s@@ (com.android.@@ tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l c@@ , com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l parent@@ , com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Thread@@ Info th@@ read@@ ) { long method@@ Id = c@@ .get@@ Method@@ Id@@ (); com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Method@@ Profile@@ Data@@ .@@ Builder bu@@ ilder = get@@ Profile@@ Data@@ Builder@@ (m@@ ethod@@ Id); builder.@@ add@@ Call@@ Time@@ (c@@ , parent@@ , th@@ read@@ ); builder.@@ in@@ crement@@ In@@ vo@@ cation@@ Count@@ (c@@ , th@@ read@@ ); for (com.android.@@ tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l cal@@ le@@ e : c@@ .get@@ Cal@@ le@@ es@@ ()) { com@@ pu@@ te@@ Call@@ Stat@@ s(@@ cal@@ le@@ e@@ , c@@ , th@@ read@@ ); } }
@java.lang.Override public void create@@ Fil@@ es@@ () throw@@ s java.io.IOException { java.io.File ro@@ o@@ t = get@@ Location@@ (); java.io.File s@@ r@@ c = new java.io.File@@ (@@ ro@@ o@@ t, "@@ src@@ "); java.io.File ma@@ in = new java.io.File@@ (s@@ rc@@ , "@@ main@@ "); m@@ ain.@@ m@@ k@@ d@@ ir@@ s(); java.io.File m@@ an@@ if@@ est = new java.io.File@@ (m@@ ain@@ , "@@ Android@@ M@@ an@@ if@@ est.@@ xml@@ "); com.google.common.@@ io.@@ Fil@@ es.@@ write@@ ((@@ (("@@ <@@ ?@@ x@@ m@@ l ver@@ sion@@ =@@ \"@@ 1.@@ 0@@ \@@ " en@@ cod@@ ing@@ =@@ \"@@ ut@@ f@@ -@@ 8@@ \"@@ ?@@ >@@ \n@@ " + ("@@ <@@ m@@ an@@ if@@ est xml@@ ns@@ :@@ android@@ =@@ \"@@ h@@ ttp@@ :@@ /@@ /@@ s@@ ch@@ em@@ a@@ s.@@ android.@@ com@@ /@@ apk@@ /@@ res@@ /@@ android@@ \"@@ \n@@ " + " package@@ =@@ \"@@ com@@ ")) + (get@@ Path@@ ().@@ re@@ pla@@ ce@@ (@@ '@@ :@@ '@@ , '@@ .@@ '@@ ))) + "@@ \@@ " /@@ >@@ \n@@ "), m@@ an@@ if@@ est@@ , Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); }
public void set@@ e@@ uid@@ (@@ int e@@ uid@@ ) throw@@ s android.system.@@ Errno@@ Exception;
private synchronized boolean check@@ Connection@@ () { if ((m@@ Socket@@ Channel@@ ) == null@@ ) { java.net.Inet@@ Socket@@ Address s@@ ocket@@ Add@@ r@@ ; try { java.net.Inet@@ Address ho@@ st@@ Add@@ r = java.net.Inet@@ Addres@@ s.get@@ By@@ Name@@ (com.android.@@ ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le.@@ H@@ O@@ S@@ T@@ ); s@@ ocket@@ Add@@ r = new java.net.Inet@@ Socket@@ Addres@@ s(@@ ho@@ st@@ Add@@ r@@ , m@@ Port@@ ); m@@ Socket@@ Chan@@ ne@@ l = java.nio.@@ channe@@ ls.@@ Socket@@ Chan@@ ne@@ l.@@ open@@ (s@@ ocket@@ Add@@ r@@ ); } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ w@@ (com.android.@@ ddmlib.@@ E@@ m@@ ul@@ ator@@ Con@@ so@@ le.@@ LOG@@ _@@ TAG, ("@@ Faile@@ d to st@@ ar@@ t E@@ m@@ ul@@ at@@ or cons@@ ol@@ e for " + (java.lang.@@ Integ@@ er.@@ toString@@ (m@@ Port@@ )))); return false@@ ; } } return p@@ ing@@ (); }
public void chan@@ ge@@ Event@@ Cach@@ e@@ Size@@ (@@ int new@@ Siz@@ e) { java.util.@@ concurrent.@@ Link@@ ed@@ Block@@ ing@@ Q@@ ue@@ ue@@ <@@ android.telecom.@@ Logg@@ ing.@@ Event@@ Manager.@@ Event@@ Record@@ > old@@ Event@@ Lo@@ g = m@@ Event@@ Record@@ s; m@@ Event@@ Record@@ s = new java.util.@@ concurrent.@@ Link@@ ed@@ Block@@ ing@@ Q@@ ue@@ ue@@ <@@ >@@ (@@ new@@ Siz@@ e); m@@ Call@@ Event@@ Record@@ Map@@ .@@ clear@@ (); old@@ Event@@ Log@@ .@@ for@@ Each@@ (@@ this@@ :@@ :@@ add@@ Call@@ Event@@ Record@@ ); }
protected <@@ T extends com.android.jack.ir.ast.J@@ Reference@@ Type@@ > T get@@ Non@@ Array@@ Type@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String sign@@ ature@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ lo@@ ok@@ up@@ .@@ J@@ Loo@@ k@@ up@@ .@@ Adapter@@ <@@ T@@ > ad@@ ap@@ ter@@ ) throw@@ s com.android.jack.@@ ir.ast.@@ M@@ is@@ sing@@ J@@ Type@@ Loo@@ k@@ up@@ Exception { java.util.Map@@ <java.lang.String, T@@ > c@@ ach@@ e = ad@@ ap@@ t@@ er.get@@ Cach@@ e@@ (); T type@@ ; synchronized@@ (c@@ ach@@ e) { typ@@ e = c@@ ach@@ e.get@@ (@@ sign@@ ature@@ ); if (@@ typ@@ e == null@@ ) { assert com.android.jack.@@ util.@@ Nam@@ ing@@ Tools.@@ is@@ Class@@ Descrip@@ tor@@ (@@ sign@@ ature@@ ) : ("@@ In@@ va@@ li@@ d sign@@ at@@ ur@@ e '@@ " + sign@@ ature@@ ) + "@@ '@@ "; typ@@ e = find@@ Class@@ Or@@ Interface@@ (@@ sign@@ ature@@ , ad@@ ap@@ ter@@ ); c@@ ache.@@ put@@ (@@ sign@@ ature@@ , typ@@ e); } } return type@@ ; }
public static void com@@ pu@@ te@@ L@@ dex@@ p@@ (android.@@ renderscript.@@ cts.@@ Test@@ L@@ dex@@ p.@@ Argument@@ s@@ Float@@ Int@@ F@@ lo@@ at arg@@ s) { args.@@ ul@@ f = 4@@ ; args.@@ ul@@ f@@ Relax@@ ed = 12@@ ; args.@@ out = (@@ (@@ float@@ ) ((@@ args.@@ in@@ X@@ ) * (@@ java.lang.Str@@ i@@ ct@@ M@@ ath.@@ po@@ w@@ (@@ 2.@@ 0, args.@@ in@@ Y@@ )))); }
@java.lang.Override public boolean check@@ For@@ Con@@ di@@ tion@@ () { android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Ob@@ ject android@@ C@@ l@@ ing = m@@ Device.@@ find@@ Object@@ (@@ new android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Sele@@ ctor@@ ().@@ resource@@ Id@@ (@@ Res@@ .@@ AN@@ D@@ RO@@ ID@@ _@@ W@@ E@@ L@@ C@@ O@@ M@@ E_@@ C@@ L@@ ING@@ _RE@@ S@@ )); try { if (@@ android@@ C@@ l@@ ing.@@ exist@@ s@@ ()) { android@@ C@@ l@@ ing.@@ c@@ li@@ ck@@ (); return true@@ ; } else { return false@@ ; } } catch (android.@@ support.@@ test.@@ u@@ ia@@ ut@@ o@@ mat@@ or.@@ U@@ i@@ Object@@ Not@@ F@@ ound@@ Exception e) { junit.framework.Assert.@@ fail@@ (@@ e.get@@ Stack@@ Tra@@ ce@@ ().@@ toString@@ ()); return false@@ ; } }
private static java.lang.String get@@ F@@ r@@ ag@@ ment@@ Info@@ (android.@@ security.@@ cts.@@ Open@@ SSL@@ E@@ ar@@ ly@@ C@@ C@@ S@@ Test.@@ T@@ l@@ s@@ Recor@@ d re@@ cor@@ d, boolean m@@ ay@@ B@@ e@@ En@@ cryp@@ ted@@ ) { java.lang.String@@ Builder result = new java.lang.String@@ Builder@@ (); if (m@@ ay@@ B@@ e@@ En@@ cryp@@ ted@@ ) { result.@@ append("@@ enc@@ ryp@@ ted@@ ?@@ "); } else { switch (re@@ cor@@ d.@@ pro@@ to@@ col@@ ) { case android.@@ security.@@ cts.@@ Open@@ SSL@@ He@@ art@@ ble@@ ed@@ Test.@@ T@@ l@@ s@@ Pro@@ to@@ co@@ ls.@@ AL@@ ER@@ T : result.@@ append@@ ((@@ (("@@ le@@ vel@@ : " + ((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ m@@ ent.@@ length) > 0 ? java.lang.String.@@ value@@ Of@@ (((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ ment@@ [0@@ ]@@ ) & 25@@ 5@@ )) : "@@ n@@ /@@ a@@ ")) + ", des@@ cription@@ : ") + ((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ m@@ ent.@@ length) > 1 ? java.lang.String.@@ value@@ Of@@ (((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ ment@@ [@@ 1@@ ]@@ ) & 25@@ 5@@ )) : "@@ n@@ /@@ a@@ "@@ ))); break@@ ; case android.@@ security.@@ cts.@@ Open@@ SSL@@ He@@ art@@ ble@@ ed@@ Test.@@ T@@ l@@ s@@ Pro@@ to@@ co@@ ls.@@ AP@@ P@@ L@@ IC@@ A@@ TION_@@ DA@@ T@@ A : break@@ ; case android.@@ security.@@ cts.@@ Open@@ SSL@@ E@@ ar@@ ly@@ C@@ S@@ Test.@@ T@@ l@@ s@@ Pro@@ to@@ co@@ ls.@@ CH@@ AN@@ G@@ E_@@ C@@ IP@@ H@@ ER@@ _S@@ P@@ E@@ C : result.@@ append@@ (("@@ p@@ ay@@ load@@ : " + ((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ m@@ ent.@@ length) > 0 ? java.lang.String.@@ value@@ Of@@ (((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ ment@@ [0@@ ]@@ ) & 25@@ 5@@ )) : "@@ n@@ /@@ a@@ "@@ ))); break@@ ; case android.@@ security.@@ cts.@@ Open@@ SSL@@ He@@ art@@ ble@@ ed@@ Test.@@ T@@ l@@ s@@ Pro@@ to@@ co@@ ls.@@ H@@ AN@@ D@@ S@@ H@@ A@@ K@@ E : result.@@ append@@ (("@@ type@@ : " + ((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ m@@ ent.@@ length) > 0 ? java.lang.String.@@ value@@ Of@@ (((@@ re@@ cor@@ d.@@ f@@ r@@ ag@@ ment@@ [0@@ ]@@ ) & 25@@ 5@@ )) : "@@ n@@ /@@ a@@ "@@ ))); break@@ ; } } result.@@ append("@@ , ").@@ append@@ (("@@ f@@ r@@ ag@@ m@@ ent length@@ : " + (re@@ cor@@ d.@@ f@@ r@@ ag@@ m@@ ent.@@ length@@ ))); return result.@@ toString@@ (); }
static long $@@ op@@ t@@ $@@ Di@@ v@@ Z@@ er@@ o@@ (@@ long a@@ ) { return a / 0; }
private static java.util.@@ ja@@ r.@@ J@@ ar@@ File ret@@ ri@@ e@@ ve@@ (@@ final java.net.@@ UR@@ L ur@@ l@@ , final s@@ un@@ .@@ net.@@ w@@ w@@ .@@ pro@@ to@@ co@@ l.@@ ja@@ r.@@ URL@@ J@@ ar@@ File@@ .@@ URL@@ J@@ ar@@ File@@ C@@ lose@@ Contro@@ lle@@ r close@@ Control@@ ler@@ ) throw@@ s java.io.IOException { java.util.@@ ja@@ r.@@ J@@ ar@@ File result = null@@ ; try (@@ final java.io.@@ Input@@ Stream in = ur@@ l.@@ open@@ Connection@@ ().get@@ InputStream@@ ()) { result = java.security.@@ Access@@ Control@@ ler@@ .@@ do@@ Pri@@ vi@@ le@@ ged@@ (@@ new java.security.@@ Pri@@ vi@@ le@@ ged@@ Exception@@ Action@@ <@@ java.util.@@ ja@@ r.@@ J@@ ar@@ File@@ >@@ () { public java.util.@@ ja@@ r.@@ J@@ ar@@ File run@@ () throw@@ s java.io.IOException { java.nio.@@ file.@@ P@@ ath t@@ mp@@ File = java.nio.@@ file.@@ Fil@@ es.@@ create@@ Temp@@ File@@ ("@@ ja@@ r@@ _@@ c@@ ach@@ e@@ ", null@@ ); try { java.nio.@@ file.@@ Fil@@ es.@@ copy@@ (in, t@@ mp@@ File@@ , java.nio.@@ file.@@ St@@ and@@ ard@@ Co@@ py@@ Option@@ .@@ RE@@ P@@ L@@ AC@@ E_@@ EX@@ IS@@ T@@ ING@@ ); java.util.@@ ja@@ r.@@ J@@ ar@@ File ja@@ r@@ File = new s@@ un@@ .@@ net.@@ w@@ w@@ .@@ pro@@ to@@ co@@ l.@@ ja@@ r.@@ URL@@ J@@ ar@@ File@@ (t@@ mp@@ File@@ .@@ to@@ File@@ (), close@@ Control@@ ler@@ ); t@@ mp@@ File@@ .@@ to@@ File@@ ().@@ de@@ lete@@ On@@ Ex@@ it@@ (); return ja@@ r@@ File@@ ; } catch (java.lang.@@ Throw@@ able th@@ r@@ ) { try { java.nio.@@ file.@@ Fil@@ es.@@ de@@ lete@@ (t@@ mp@@ File@@ ); } catch (java.io.IOException io@@ e) { th@@ r.@@ add@@ Sup@@ pres@@ sed@@ (@@ io@@ e); } throw th@@ r@@ ; } }); } catch (@@ java.security.@@ Pri@@ vi@@ le@@ ged@@ Action@@ Exception p@@ a@@ e) { throw ((@@ java.io.IO@@ Exception@@ ) (p@@ a@@ e.get@@ Exception@@ ())); } return result@@ ; }
public static com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce g@@ ener@@ ate@@ Apk@@ Sign@@ ing@@ Block@@ C@@ D@@ Offset@@ (com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce b@@ e@@ for@@ e@@ C@@ en@@ tr@@ al@@ Dir@@ , com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ce e@@ o@@ c@@ d@@ ) throw@@ s java.io.IOException { long c@@ en@@ tr@@ al@@ Dir@@ Offset@@ For@@ Dig@@ est@@ ing = b@@ e@@ for@@ e@@ C@@ en@@ tr@@ al@@ Dir@@ .@@ size@@ (); java.nio.Byte@@ Buff@@ er e@@ o@@ c@@ d@@ Bu@@ f = java.nio.Byte@@ Buff@@ er.@@ al@@ loc@@ ate@@ ((@@ (@@ int@@ ) (e@@ o@@ c@@ d.@@ size@@ ()))); e@@ o@@ c@@ d@@ Bu@@ f.@@ or@@ der@@ (@@ java.nio.Byte@@ Or@@ d@@ er.@@ L@@ I@@ T@@ L@@ E_@@ EN@@ DI@@ AN@@ ); e@@ o@@ c@@ d.@@ copy@@ To@@ (@@ 0, (@@ (@@ int@@ ) (e@@ o@@ c@@ d.@@ size@@ ()@@ )), e@@ o@@ c@@ d@@ Bu@@ f@@ ); e@@ o@@ c@@ d@@ Bu@@ f.@@ f@@ li@@ p@@ (); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ z@@ i@@ p.@@ Zip@@ Utils.@@ set@@ Zip@@ E@@ o@@ c@@ d@@ C@@ en@@ tr@@ al@@ Directory@@ Offset@@ (e@@ o@@ c@@ d@@ Bu@@ f@@ , c@@ en@@ tr@@ al@@ Dir@@ Offset@@ For@@ Dig@@ est@@ ing@@ ); return com.android.@@ apk@@ si@@ g.@@ util.@@ Data@@ S@@ our@@ ces.@@ as@@ Data@@ Source@@ (e@@ o@@ c@@ d@@ Bu@@ f@@ ); }
public boolean enable@@ (java.lang.String package@@ Name@@ ) throw@@ s android.os.@@ RemoteException { final int call@@ ing@@ U@@ id = android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ (); final boolean call@@ er@@ S@@ ys@@ te@@ m = (android.os.@@ User@@ Handle@@ .get@@ App@@ Id@@ (c@@ all@@ ing@@ U@@ id@@ )) == (@@ S@@ Y@@ S@@ TE@@ M@@ _@@ U@@ ID@@ ); if (is@@ Bluetooth@@ Dis@@ al@@ low@@ ed@@ ()) { if (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ DBG) { android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ enable@@ ()@@ : not en@@ ab@@ l@@ ing - b@@ luetoo@@ th dis@@ al@@ low@@ ed@@ "); } return false@@ ; } if (!@@ call@@ er@@ System@@ ) { if (!(@@ check@@ I@@ f@@ Call@@ er@@ Is@@ For@@ e@@ gro@@ und@@ User@@ ())) { android.util.@@ S@@ log.@@ w@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ enable@@ ()@@ : not al@@ low@@ ed for n@@ on@@ -@@ ac@@ ti@@ v@@ e an@@ d n@@ on s@@ ys@@ te@@ m user@@ "); return false@@ ; } m@@ Context.@@ e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ BL@@ UE@@ TO@@ O@@ TH@@ _@@ AD@@ M@@ IN@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H AD@@ M@@ I@@ N per@@ mission@@ "); if ((@@ (!(@@ is@@ Enabled@@ ())) && (m@@ Permission@@ Re@@ view@@ Requ@@ ire@@ d@@ )) && (@@ start@@ Con@@ s@@ ent@@ U@@ i@@ I@@ f@@ Ne@@ ed@@ ed@@ ed@@ (@@ package@@ Name, call@@ ing@@ U@@ id, Bluetooth@@ Adap@@ ter.@@ AC@@ TION@@ _RE@@ Q@@ UE@@ ST_@@ EN@@ ABL@@ E@@ ))) { return false@@ ; } } if (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ DBG) { android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, ((((@@ ((("@@ enable@@ (@@ " + package@@ Name@@ ) + "@@ )@@ : m@@ B@@ luetoo@@ th =@@ ") + (m@@ Bluetooth@@ )) + " m@@ B@@ ind@@ ing = ") + (m@@ B@@ ind@@ ing@@ )) + " m@@ State = ") + (android.bluetooth.Bluetooth@@ Adap@@ ter.@@ name@@ For@@ State@@ (m@@ State@@ )))); } synchronized@@ (m@@ Receiver@@ ) { m@@ Q@@ ui@@ et@@ Enable@@ Ex@@ ter@@ n@@ al = false@@ ; m@@ Enable@@ Ex@@ ter@@ n@@ al = true@@ ; send@@ Enable@@ M@@ s@@ g@@ (@@ false@@ , com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ RE@@ A@@ S@@ ON@@ _P@@ AC@@ K@@ A@@ G@@ E, package@@ Name); } if (com.android.server.@@ Bluetooth@@ Manager@@ Service.@@ DBG) { android.util.@@ S@@ log.@@ d@@ (com.android.server.@@ Bluetooth@@ Manager@@ Service.TAG, "@@ en@@ able return@@ ing@@ "); } return true@@ ; }
private java.util.List<@@ java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ > check@@ Tr@@ us@@ ted@@ (@@ java.security.@@ cer@@ t.@@ X@@ 509@@ Cer@@ t@@ if@@ ic@@ ate@@ [] ch@@ ain@@ , java.lang.String au@@ th@@ Type, javax.net.ssl.@@ SSL@@ S@@ es@@ sion session@@ , javax.net.ssl.@@ SSL@@ Parameter@@ s param@@ eter@@ s, boolean c@@ lient@@ A@@ u@@ th@@ ) throw@@ s java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception { byte@@ [] o@@ c@@ s@@ p@@ Data = null@@ ; java.lang.String ho@@ st@@ name = null@@ ; if (s@@ es@@ sion != null@@ ) { ho@@ st@@ name = session@@ .get@@ P@@ e@@ er@@ Host@@ (); o@@ c@@ s@@ p@@ Data = get@@ O@@ c@@ s@@ p@@ Data@@ From@@ Session@@ (s@@ ession@@ ); } if ((@@ s@@ es@@ sion != null@@ ) && (@@ param@@ eter@@ s != null@@ )) { java.lang.String id@@ ent@@ if@@ ic@@ ation@@ Algorith@@ m = param@@ eter@@ s.get@@ En@@ dp@@ o@@ int@@ Id@@ ent@@ if@@ ic@@ ation@@ Algorith@@ m@@ (); if ((@@ id@@ ent@@ if@@ ic@@ ation@@ Algorith@@ m != null@@ ) && ("@@ H@@ T@@ T@@ P@@ S@@ "@@ .@@ equals(@@ id@@ ent@@ if@@ ic@@ ation@@ Algorith@@ m.@@ to@@ Up@@ per@@ C@@ ase@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ )@@ ))) { javax.net.ssl.@@ Host@@ name@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = javax.net.ssl.@@ H@@ tt@@ ps@@ URL@@ Connection@@ .get@@ Default@@ Host@@ name@@ V@@ er@@ if@@ ier@@ (); if (!(@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ (@@ ho@@ st@@ name@@ , session@@ ))) { throw new java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception("@@ N@@ o sub@@ ject@@ Al@@ t@@ Name@@ s on th@@ e cer@@ t@@ if@@ i@@ cat@@ e match@@ "); } } } return check@@ Tr@@ us@@ ted@@ (@@ ch@@ ain@@ , o@@ c@@ s@@ p@@ Data@@ , au@@ th@@ Type, ho@@ st@@ name@@ , c@@ lient@@ A@@ u@@ th@@ ); }
public java.lang.String get@@ Method@@ Name@@ (@@ long class@@ ID@@ , long method@@ ID@@ ) { org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Method@@ [] method@@ s = get@@ Method@@ s@@ (@@ class@@ ID@@ ); for (@@ org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ M@@ etho@@ d m@@ M@@ ir@@ ror@@ .@@ Method@@ Info method@@ Info : method@@ s) { if (m@@ ethod@@ I@@ D == (m@@ ethod@@ .get@@ Method@@ ID@@ ())) { return method@@ .getName@@ (); } } return "@@ un@@ k@@ no@@ wn@@ "; }
public void set@@ Ac@@ ces@@ si@@ ble@@ (@@ java.nio.Byte@@ Or@@ d@@ er.@@ w@@ rap@@ (f@@ ram@@ e.@@ st@@ ack@@ F@@ rame@@ Access@@ or att@@ ach@@ (d@@ al@@ vi@@ k.@@ system.@@ E@@ m@@ ul@@ ated@@ Stack@@ F@@ ram@@ e st@@ ack@@ F@@ rame@@ ) { f@@ ram@@ e = st@@ ack@@ F@@ rame@@ ; f@@ rame@@ Bu@@ f = java.nio.Byte@@ Buff@@ er.@@ w@@ rap@@ (f@@ ram@@ e.@@ st@@ ack@@ F@@ rame@@ ).@@ or@@ der@@ (@@ java.nio.Byte@@ Or@@ d@@ er.@@ L@@ I@@ T@@ T@@ L@@ E_@@ EN@@ DI@@ AN@@ ); num@@ Arg@@ s = f@@ ram@@ e.@@ typ@@ es@@ ().@@ length@@ ; return this@@ ; }
@java.lang.Override public java.lang.String get@@ Service@@ Interface@@ () { return android.telephony.@@ ims.@@ Ims@@ Service.@@ S@@ ER@@ VIC@@ E_@@ IN@@ TER@@ F@@ AC@@ E@@ ; }
void s@@ il@@ en@@ ce@@ R@@ ing@@ er@@ s() { for (com.android.server.@@ telecom.@@ Cal@@ l cal@@ l : m@@ R@@ ing@@ Call@@ s) { cal@@ l.@@ s@@ il@@ en@@ ce@@ (); } m@@ R@@ ing@@ ing@@ Call@@ s.@@ clear@@ (); m@@ R@@ ing@@ er.@@ st@@ op@@ R@@ ing@@ ing@@ (); m@@ R@@ ing@@ er.@@ st@@ op@@ Call@@ W@@ ait@@ ing@@ (); if (m@@ Call@@ s@@ Manager.@@ has@@ R@@ ing@@ ing@@ Call@@ ()) { return@@ ; } m@@ Call@@ Audio@@ Mode@@ StateMachine.@@ send@@ Message@@ With@@ Arg@@ s(@@ Call@@ Audio@@ Mode@@ StateMachine.@@ NO@@ _M@@ OR@@ E_@@ R@@ ING@@ _C@@ AL@@ L@@ S@@ , m@@ ake@@ Arg@@ s@@ For@@ Mode@@ StateMach@@ ine@@ ()); }
@javax.annotation.@@ N@@ on@@ null protected static java.lang.Object in@@ stan@@ ti@@ ate@@ Con@@ stru@@ ctor@@ With@@ Parameter@@ s(@@ @javax.annotation.@@ N@@ on@@ null java.lang.String class@@ Name, @javax.annotation.@@ N@@ on@@ null java.lang.@@ Class@@ <@@ ?@@ >@@ [] param@@ eter@@ Typ@@ es@@ , @javax.annotation.@@ N@@ on@@ null java.lang.Ob@@ ject@@ [] param@@ eter@@ In@@ stan@@ ces@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String ver@@ sion@@ ) throw@@ s com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Version@@ Exception { java.lang.Object const@@ r@@ u@@ ctor@@ In@@ stan@@ ce = null@@ ; try { java.lang.@@ Class@@ <@@ ?@@ > ja@@ y@@ ce@@ Read@@ er@@ Clas@@ s = java.lang.@@ Class@@ .@@ for@@ Name@@ (@@ class@@ Name); java.lang.@@ ref@@ le@@ ct.@@ Con@@ stru@@ ctor@@ <@@ ?@@ > const@@ r@@ u@@ ct@@ or = ja@@ y@@ ce@@ Read@@ er@@ Clas@@ s.get@@ Con@@ stru@@ ctor@@ (@@ param@@ eter@@ Typ@@ es@@ ); const@@ r@@ u@@ ctor@@ In@@ stan@@ ce = const@@ r@@ u@@ ctor@@ .@@ new@@ Instance@@ (@@ param@@ eter@@ In@@ stan@@ ces@@ ); } catch (java.lang.@@ Sec@@ urit@@ y@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ ("@@ Sec@@ urit@@ y is@@ su@@ e wit@@ h J@@ ay@@ ce str@@ eam@@ "); } catch (java.lang.@@ Illegal@@ Argument@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (("@@ Illeg@@ al arg@@ um@@ ent for J@@ ay@@ ce process@@ or for ver@@ sion " + ver@@ sion@@ )); } catch (java.lang.@@ Class@@ Not@@ F@@ ound@@ Exception e) { throw new com.android.jack.@@ ja@@ y@@ ce.@@ J@@ ay@@ ce@@ Version@@ Exception@@ ((("@@ J@@ ay@@ ce ver@@ sion " + ver@@ sion@@ ) + " not suppor@@ ted@@ ")); } catch (java.lang.@@ No@@ Su@@ ch@@ Method@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (("@@ J@@ ay@@ ce process@@ ing m@@ etho@@ d not fo@@ un@@ d for ver@@ sion " + ver@@ sion@@ )); } catch (java.lang.@@ In@@ stan@@ ti@@ ation@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (("@@ Pro@@ ble@@ m in@@ stan@@ ti@@ at@@ ing J@@ ay@@ ce process@@ or for ver@@ sion " + ver@@ sion@@ )); } catch (java.lang.@@ Illegal@@ Access@@ Exception e) { throw new java.lang.@@ Asser@@ tion@@ Error@@ (("@@ Pro@@ ble@@ m ac@@ cess@@ ing J@@ ay@@ ce process@@ or for ver@@ sion " + ver@@ sion@@ )); } catch (java.lang.@@ ref@@ le@@ ct.@@ In@@ vo@@ cation@@ Target@@ Exception e) { throw new java.lang.Runtime@@ Exception(@@ e.get@@ C@@ au@@ se@@ ()); } return const@@ r@@ u@@ ctor@@ Instance@@ ; }
@java.lang.Override public synchronized int b@@ ind@@ Server@@ () { java.net.Inet@@ Socket@@ Address server@@ Address = get@@ S@@ ync@@ Server@@ Addres@@ s(); try { log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ (("@@ [@@ S@@ Y@@ N@@ C@@ ] B@@ ind@@ ing s@@ ock@@ et on@@ : " + server@@ Address@@ )); int s@@ ync@@ Server@@ P@@ or@@ t = server@@ Addres@@ s.get@@ Port@@ (); java.net.Inet@@ Address s@@ ync@@ Server@@ Inet@@ Address = server@@ Addres@@ s.get@@ Addres@@ s(); server@@ S@@ ock@@ et = new java.net.@@ Server@@ Socket@@ (s@@ ync@@ Server@@ Port@@ , 0, s@@ ync@@ Server@@ Inet@@ Addres@@ s); if (s@@ ync@@ Server@@ P@@ or@@ t == 0) { int local@@ S@@ ync@@ P@@ or@@ t = server@@ Socket@@ .get@@ Local@@ Port@@ (); if (is@@ S@@ ync@@ Port@@ Con@@ f@@ li@@ ct@@ ing@@ With@@ Trans@@ port@@ Addres@@ s(@@ local@@ S@@ ync@@ Port@@ )) { log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ (("@@ [@@ S@@ Y@@ N@@ C@@ ] R@@ e@@ try@@ ing@@ , a@@ s s@@ yn@@ c por@@ t is al@@ read@@ y u@@ se@@ d in trans@@ por@@ t addres@@ s@@ : " + local@@ S@@ ync@@ Port@@ )); java.net.@@ Server@@ S@@ ock@@ et new@@ Server@@ S@@ ock@@ et = new java.net.@@ Server@@ Socket@@ (@@ 0, s@@ ync@@ Server@@ Inet@@ Addres@@ s); server@@ Socket@@ .@@ close(); server@@ S@@ ock@@ et = new@@ Server@@ Socket@@ ; } } int local@@ P@@ or@@ t = server@@ Socket@@ .get@@ Local@@ Port@@ (); log@@ Wri@@ ter.@@ p@@ r@@ int@@ ln@@ ((((@@ ("@@ [@@ S@@ Y@@ N@@ C@@ ] B@@ o@@ un@@ d s@@ ock@@ et on@@ : " + server@@ Addres@@ s) + " (@@ loc@@ al port@@ : ") + local@@ Port@@ ) + "@@ )@@ ")); return local@@ Port@@ ; } catch (java.io.IOException e) { throw new org.apache.harmony.jpda.tests.@@ framework.@@ Test@@ Error@@ Exception("@@ [@@ S@@ Y@@ N@@ C@@ ] Exception in b@@ ind@@ ing for s@@ ock@@ et s@@ yn@@ c connection@@ ", e); } }
@org.junit.Test public void sub@@ _@@ float@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ S@@ U@@ B@@ _@@ FLOA@@ T@@ ).set@@ S@@ rc@@ Dir@@ Name@@ ("@@ j@@ m@@ ").@@ set@@ Ref@@ Dir@@ Name@@ ("@@ .@@ ").@@ add@@ Reference@@ Extra@@ S@@ ources@@ (@@ new java.io.File@@ (com.android.jack.@@ test.@@ toolchain.@@ Abstract@@ TestTools.@@ get@@ Jack@@ Root@@ Dir@@ (), "@@ jack@@ -@@ test@@ s@@ /@@ src@@ /@@ com@@ /@@ android@@ /@@ jack@@ /@@ D@@ x@@ Test@@ C@@ ase.@@ java@@ "@@ )).@@ compile@@ And@@ Run@@ Test@@ (); }
public void test_@@ equal@@ s() { java.text.@@ Number@@ For@@ ma@@ t n@@ f@@ 1 = java.text.@@ Number@@ Format@@ .get@@ Instance@@ (); java.text.@@ Number@@ For@@ ma@@ t n@@ f@@ 2 = java.text.@@ Number@@ Format@@ .get@@ Instance@@ (); assert@@ True@@ ("@@ Object@@ s ar@@ e not equal@@ ", n@@ f@@ 1.@@ equals(@@ n@@ f@@ 2@@ )); assert@@ True@@ ("@@ TH@@ e s@@ am@@ e Object@@ s ar@@ e not equal@@ ", n@@ f@@ 1.@@ equals(@@ n@@ f@@ 1@@ )); n@@ f@@ 2.@@ set@@ Ma@@ x@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s(@@ 1@@ 00@@ ); assert@@ False@@ ("@@ D@@ if@@ fer@@ ent Number@@ For@@ ma@@ t ar@@ e equal@@ ", n@@ f@@ 1.@@ equals(@@ n@@ f@@ 2@@ )); n@@ f@@ 2.@@ set@@ Ma@@ x@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s(@@ n@@ f@@ 1@@ .get@@ Ma@@ x@@ im@@ um@@ Integ@@ er@@ Dig@@ it@@ s()); assert@@ False@@ ("@@ TH@@ e s@@ am@@ e Object@@ s ar@@ e equal@@ ", n@@ f@@ 1.@@ equals(@@ n@@ f@@ 2@@ )); n@@ f@@ 1 = java.text.@@ Number@@ Format@@ .get@@ Integ@@ er@@ Instance@@ (); n@@ f@@ 2 = java.text.@@ Number@@ Format@@ .get@@ Integ@@ er@@ Instance@@ (java.util.@@ Loc@@ a@@ le.@@ CH@@ IN@@ A@@ ); assert@@ False@@ ("@@ D@@ if@@ fer@@ ent Number@@ For@@ ma@@ t ar@@ e equal@@ ", n@@ f@@ 1.@@ equals(@@ n@@ f@@ 2@@ )); assert@@ False@@ ("@@ Ob@@ ject is e@@ qu@@ al null@@ ", n@@ f@@ 1.@@ equal@@ s@@ (@@ null@@ )); }
private static native boolean native@@ _@@ in@@ ver@@ t@@ (@@ long native@@ _@@ ob@@ ject@@ , long native@@ _@@ in@@ ver@@ se@@ );
void g@@ ener@@ ate@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ Cach@@ e@@ Lock@@ ed@@ () { if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ DBG) android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ TAG, "@@ g@@ ener@@ ate@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ Cach@@ e@@ Lock@@ ed@@ "); m@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ clear@@ (); if ((m@@ Pre@@ fer@@ re@@ d@@ For@@ e@@ gro@@ und@@ Service@@ ) != null@@ ) { for (android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info ser@@ vice : m@@ Ser@@ vices@@ ) { if (m@@ Pre@@ fer@@ re@@ d@@ For@@ e@@ gro@@ und@@ Service.@@ equals(@@ service@@ .get@@ Comp@@ on@@ ent@@ ())) { m@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ put@@ (@@ service@@ .get@@ N@@ fc@@ id@@ 2@@ (), service@@ ); break@@ ; } } } if (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ DBG) { android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ TAG, ("@@ m@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ Cach@@ e@@ : size@@ =@@ " + (m@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ size@@ ()))); for (java.util.@@ Map@@ .@@ E@@ n@@ try@@ <java.lang.String, android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ N@@ fc@@ F@@ Service@@ Info@@ > e@@ n@@ try : m@@ For@@ e@@ gro@@ und@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ e@@ n@@ try@@ Set@@ ()) { android.util.Log.d@@ (com.android.@@ n@@ f@@ c.@@ c@@ ar@@ de@@ m@@ ul@@ ation.@@ Reg@@ ister@@ ed@@ T@@ 3@@ t@@ Id@@ ent@@ if@@ ier@@ s@@ C@@ ache.@@ TAG, (((@@ " " " " + (e@@ n@@ try@@ .get@@ Key@@ ())) + "@@ /@@ ") + (e@@ n@@ try@@ .get@@ Value@@ ().get@@ Comp@@ on@@ ent@@ ().@@ toString@@ ()))); } } update@@ R@@ out@@ ing@@ Lock@@ ed@@ (); }
private void assert@@ Do@@ main@@ Z@@ er@@ o@@ Or@@ N@@ (java.lang.String do@@ main@@ , java.lang.String.@@ .@@ . exec@@ ut@@ ab@@ l@@ es) throw@@ s java.io.File@@ Not@@ F@@ ound@@ Exception { java.util.List<@@ android.@@ security.@@ cts.@@ SE@@ Lin@@ u@@ x@@ Do@@ main@@ Test.@@ Process@@ D@@ eta@@ il@@ s@@ > pro@@ c@@ s = android.@@ security.@@ cts.@@ SE@@ Lin@@ u@@ x@@ Do@@ main@@ Test.@@ Process@@ D@@ eta@@ il@@ s.get@@ Process@@ Map@@ ().get@@ (@@ do@@ main@@ ); if (pro@@ c@@ s == null@@ ) { return@@ ; } java.util.@@ Set@@ <java.lang.String@@ > exec@@ Lis@@ t = new java.util.@@ Hash@@ Set@@ <java.lang.String@@ >@@ (@@ java.util.Arrays.@@ as@@ List@@ (@@ exec@@ ut@@ ab@@ l@@ es@@ )); for (android.@@ security.@@ cts.@@ SE@@ Lin@@ u@@ x@@ Do@@ main@@ Test.@@ Process@@ D@@ eta@@ il@@ s p : pro@@ c@@ s) { java.lang.String ms@@ g = ((((@@ (("@@ Ex@@ pec@@ ted on@@ e of \"@@ " + exec@@ List@@ ) + "@@ \@@ " in SE@@ Lin@@ u@@ x do@@ ma@@ in \"@@ ") + do@@ main@@ ) + "@@ \"@@ ") + " F@@ ound@@ : \"@@ ") + p@@ ) + "@@ \"@@ "; assert@@ True@@ (m@@ s@@ g@@ , exec@@ List.@@ contain@@ s(@@ p.@@ pro@@ c@@ T@@ it@@ le@@ )); } }
private void update@@ Interface@@ State@@ (java.lang.String if@@ a@@ ce@@ , boolean up@@ ) { boolean mo@@ d@@ if@@ i@@ ed = m@@ Fa@@ ctor@@ y.@@ update@@ Interface@@ Link@@ State@@ (@@ if@@ a@@ ce@@ , up@@ ); if (m@@ o@@ d@@ if@@ i@@ ed@@ ) { boolean res@@ tr@@ ic@@ ted = is@@ Res@@ tr@@ ic@@ ted@@ Interface@@ (@@ if@@ a@@ ce@@ ); int n = m@@ Listener@@ s.@@ be@@ gin@@ Broadcast@@ (); for (@@ int i = 0; i < n@@ ; i++) { try { if (@@ res@@ tr@@ ic@@ ted@@ ) { com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Track@@ er.@@ Listener@@ Info list@@ ener@@ Info = ((@@ com.android.server.@@ ether@@ net.@@ E@@ th@@ er@@ net@@ Track@@ er.@@ Listener@@ Info@@ ) (m@@ Listener@@ s.get@@ Broadcast@@ C@@ oo@@ k@@ i@@ e@@ (i@@ ))); if (!(@@ list@@ ener@@ Info.@@ can@@ U@@ se@@ Res@@ tr@@ ic@@ ted@@ Network@@ s@@ )) continue@@ ; } m@@ Listener@@ s.get@@ Broadcast@@ Item@@ (i@@ ).@@ on@@ A@@ va@@ il@@ abili@@ ty@@ Changed@@ (@@ if@@ a@@ ce@@ , up@@ ); } catch (android.os.RemoteException e) { } } m@@ Listener@@ s.@@ fin@@ is@@ h@@ Broadcast@@ (); }
public com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ At@@ tr@@ s@@ Xml@@ Par@@ se@@ r pre@@ load@@ () { org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ Doc@@ um@@ ent do@@ c = get@@ Doc@@ ument@@ (); if (@@ do@@ c == null@@ ) { com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ P@@ lu@@ gin@@ .@@ log@@ (@@ I@@ Statu@@ s.@@ W@@ AR@@ N@@ ING@@ , "@@ Faile@@ d to fin@@ d %@@ 1@@ $@@ s", m@@ O@@ s@@ At@@ tr@@ s@@ Xml@@ Path@@ ); return this@@ ; } org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ de re@@ s = do@@ c@@ .get@@ F@@ ir@@ st@@ Ch@@ ild@@ (); while (((@@ re@@ s != null@@ ) && ((@@ res@@ .get@@ Node@@ Type@@ ()) != (@@ org.@@ w@@ 3@@ c@@ .@@ do@@ m.@@ No@@ d@@ e.@@ E@@ LE@@ M@@ EN@@ T_@@ NO@@ DE@@ ))) && (!(@@ res@@ .get@@ Node@@ Name@@ ().@@ equal@@ s("@@ resour@@ ces@@ "@@ )@@ ))) { re@@ s = res@@ .get@@ Next@@ S@@ i@@ b@@ l@@ ing@@ (); } if (re@@ s == null@@ ) { com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ P@@ lu@@ gin@@ .@@ log@@ (@@ I@@ Statu@@ s.@@ W@@ AR@@ N@@ ING@@ , "@@ Faile@@ d to fin@@ d a <@@ resour@@ ces@@ > no@@ de in %@@ 1@@ $@@ s", m@@ O@@ s@@ At@@ tr@@ s@@ Xml@@ Path@@ ); return this@@ ; } parse@@ Res@@ ources@@ (@@ res@@ ); return this@@ ; }
@java.lang.Override protected void handle@@ O@@ u@@ ter@@ Field@@ Read@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Tr@@ an@@ s@@ for@@ m@@ ation@@ Requ@@ est tr@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Field@@ Re@@ f field@@ Ref@@ , @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face ac@@ cess@@ or@@ Class@@ ) { com.android.jack.ir.ast.J@@ Fi@@ el@@ d fi@@ el@@ d = field@@ Ref@@ .get@@ Field@@ Id@@ ().get@@ Field@@ (); assert fi@@ el@@ d != null@@ ; com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Get@@ ter@@ Mark@@ er m@@ ark@@ er = ac@@ cess@@ or@@ Clas@@ s.get@@ Mark@@ er@@ (com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Get@@ ter@@ Mark@@ er@@ .@@ class@@ ); if (m@@ ark@@ er == null@@ ) { m@@ ark@@ er = new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Get@@ ter@@ Mark@@ er@@ (); ac@@ cess@@ or@@ Clas@@ s.add@@ Mark@@ er@@ (m@@ ark@@ er@@ ); } com.android.jack.ir.ast.J@@ M@@ etho@@ d get@@ ter = m@@ ark@@ er.get@@ Or@@ Create@@ Get@@ ter@@ (@@ field@@ , ((@@ com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ ) (@@ ac@@ cess@@ or@@ Class@@ ))); com.android.jack.ir.ast.J@@ Method@@ Id get@@ ter@@ Id = get@@ t@@ er.get@@ Method@@ Id@@ (); com.android.jack.ir.ast.J@@ Method@@ Cal@@ l get@@ ter@@ Cal@@ l = new com.android.jack.ir.ast.J@@ Method@@ Call@@ (@@ field@@ Ref@@ .get@@ Source@@ Info@@ (), null@@ , ac@@ cess@@ or@@ Class@@ , get@@ ter@@ Id, get@@ t@@ er.get@@ Type@@ (), get@@ ter@@ Id@@ .@@ can@@ B@@ e@@ V@@ ir@@ t@@ ual@@ ()); if (!(@@ field@@ .is@@ St@@ ati@@ c@@ ())) { com.android.jack.ir.ast.J@@ Ex@@ pres@@ sion in@@ stan@@ ce = field@@ Ref@@ .get@@ Instance@@ (); assert in@@ stan@@ ce != null@@ ; get@@ ter@@ Cal@@ l.@@ add@@ Arg@@ (in@@ stance@@ ); } assert (get@@ ter@@ Cal@@ l.get@@ Arg@@ s@@ ().@@ size@@ ()) == (get@@ t@@ er.get@@ Param@@ s@@ ().@@ size@@ ()); tr@@ .@@ append@@ (@@ new com.android.jack.@@ tr@@ an@@ s@@ for@@ m@@ ations.@@ requ@@ est.@@ Re@@ pla@@ ce@@ (@@ field@@ Ref@@ , get@@ ter@@ Call@@ )); }
public void load@@ Lay@@ out@@ Param@@ s@@ At@@ tri@@ b@@ ut@@ es@@ (com.android.ide.@@ common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info.@@ Lay@@ out@@ Param@@ s@@ Info info@@ ) { if ((@@ get@@ Doc@@ ument@@ ()) != null@@ ) { com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ View@@ Class@@ Info view@@ Lay@@ out@@ Clas@@ s = info@@ .get@@ View@@ Lay@@ out@@ Class@@ (); java.lang.String xml@@ Name = java.lang.String@@ .@@ for@@ mat@@ ("@@ %@@ 1@@ $@@ s@@ _@@ %@@ 2@@ $@@ s", view@@ Lay@@ out@@ Clas@@ s.get@@ Short@@ Class@@ Name@@ (), info@@ .get@@ Short@@ Class@@ Name@@ ()); xml@@ Name = com.android.ide.@@ eclipse.adt.@@ Ad@@ t@@ Utils.@@ str@@ ip@@ F@@ ir@@ st@@ (@@ xml@@ Name, "@@ Param@@ s@@ "); com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Dec@@ l@@ ar@@ e@@ St@@ y@@ le@@ able@@ Info st@@ y@@ le = m@@ St@@ y@@ le@@ Map@@ .get@@ (@@ xml@@ Name); if (@@ st@@ y@@ le != null@@ ) { java.lang.String de@@ fin@@ ed@@ B@@ y = (@@ view@@ Lay@@ out@@ Clas@@ s.get@@ F@@ ull@@ Class@@ Name@@ ()) + (@@ D@@ O@@ T_@@ LA@@ Y@@ O@@ U@@ T_@@ P@@ AR@@ AM@@ S@@ ); com.android.ide.common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info@@ [] at@@ tribute@@ s = st@@ y@@ le@@ .get@@ At@@ tri@@ b@@ ut@@ es@@ (); for (com.android.ide.@@ common.@@ resources.@@ pla@@ t@@ for@@ m.@@ Attribute@@ Info at@@ tri@@ b@@ ut@@ e : at@@ tri@@ b@@ ut@@ es) { if ((@@ at@@ tribute@@ .get@@ De@@ fin@@ ed@@ By@@ ()) == null@@ ) { at@@ tribute@@ .set@@ De@@ fin@@ ed@@ By@@ (@@ de@@ fin@@ ed@@ By@@ ); } } info@@ .set@@ At@@ tri@@ b@@ ut@@ es(@@ at@@ tri@@ b@@ ut@@ es@@ ); } } }
@com.android.annotations.NonNull public com.android.builder.@@ core.@@ Apk@@ Info@@ Par@@ ser.@@ Apk@@ Info parse@@ Apk@@ (@@ @com.android.annotations.NonNull java.io.File apk@@ File@@ ) throw@@ s com.android.ide.@@ common@@ .@@ int@@ er@@ n@@ al.@@ Log@@ ged@@ Error@@ Exception, java.io.IO@@ Exception, java.lang.@@ Inter@@ rup@@ ted@@ Exception { if (!(m@@ A@@ ap@@ t@@ File@@ .is@@ File@@ ())) { throw new java.lang.Illegal@@ State@@ Exception(("@@ a@@ ap@@ t is mis@@ s@@ ing f@@ ro@@ m loc@@ ation@@ : " + (m@@ A@@ ap@@ t@@ File@@ .get@@ Ab@@ so@@ lu@@ te@@ Path@@ ()))); } final java.util.List<@@ java.lang.String> a@@ ap@@ t@@ Out@@ put = get@@ A@@ ap@@ t@@ Output@@ (@@ apk@@ File@@ ); return com.android.builder.@@ core.@@ Apk@@ Info@@ Par@@ s@@ er.get@@ Apk@@ Info@@ (@@ a@@ ap@@ t@@ Output@@ ); }
private java.util.List<@@ android.@@ bluetooth.Bluetooth@@ Device@@ > get@@ De@@ vices@@ M@@ atch@@ ing@@ Connection@@ Stat@@ es@@ (@@ int@@ [] stat@@ es) { e@@ n@@ for@@ ce@@ Call@@ ing@@ Or@@ S@@ el@@ f@@ Permission@@ (com.android.bluetooth.@@ hf@@ p.@@ BL@@ UE@@ TO@@ O@@ TH@@ _P@@ ER@@ M@@ , "@@ Ne@@ ed BL@@ UE@@ TO@@ O@@ T@@ H per@@ mission@@ "); java.util.ArrayList<@@ android.@@ bluetooth.Bluetooth@@ Device@@ > device@@ s = new java.util.ArrayList<@@ >(); if (@@ state@@ s == null@@ ) { return de@@ vices@@ ; } synchronized@@ (m@@ StateMach@@ in@@ es) { for (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ StateMach@@ in@@ e state@@ Mach@@ in@@ e : m@@ StateMach@@ in@@ es.@@ valu@@ es@@ ()) { int current@@ State = state@@ Mach@@ in@@ e.get@@ Connection@@ State@@ (); for (@@ int st@@ ate : stat@@ es) { if (c@@ urrent@@ State == state@@ ) { de@@ vices.@@ add(@@ state@@ Mach@@ in@@ e.get@@ Device@@ ()); break@@ ; } } } return de@@ vices@@ ; }
public void test@@ New@@ Instance@@ String@@ _@@ String@@ Con@@ stru@@ ctor@@ () { run@@ Test@@ New@@ Instance@@ String@@ ("@@ (@@ L@@ java@@ /@@ lan@@ g@@ /@@ String@@ ;@@ )@@ V@@ ", new org.apache.harmony.jpda.tests.@@ jdw@@ p.@@ Class@@ Type.@@ New@@ Instance@@ String@@ Test.@@ Con@@ stru@@ ctor@@ Argument@@ s@@ Provider@@ () { @java.lang.Override public void provid@@ e@@ Con@@ stru@@ ctor@@ Argument@@ s(@@ java.util.List<@@ org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Value@@ > const@@ r@@ u@@ ctor@@ Argument@@ s) { long de@@ bug@@ ge@@ e@@ Class@@ Id = get@@ Class@@ ID@@ By@@ Sign@@ ature@@ (get@@ Debug@@ ge@@ e@@ Class@@ Sign@@ ature@@ ()); org.apache.harmony.jpda.tests.@@ framework.@@ jdw@@ p.@@ Value test@@ String@@ Value = get@@ St@@ ati@@ c@@ Field@@ Value@@ (@@ de@@ bug@@ ge@@ e@@ Class@@ Id, "@@ TEST_@@ S@@ TR@@ ING@@ "); const@@ r@@ u@@ ctor@@ Argument@@ s.@@ add(@@ test@@ String@@ Value@@ ); } }); }
@org.junit.Test public void test@@ Ap@@ pl@@ y@@ W@@ h@@ en@@ New@@ File@@ Ex@@ ist@@ s@@ Str@@ i@@ ct@@ () throw@@ s java.lang.Exception { my@@ P@@ atch@@ Spec@@ .set@@ Str@@ i@@ ct@@ (@@ true@@ ); my@@ P@@ atch@@ Spec@@ .set@@ De@@ lete@@ Fil@@ es@@ (java.util.@@ Collection@@ s.@@ sing@@ let@@ on@@ List@@ ("@@ lib@@ /@@ java@@ _@@ p@@ id@@ *@@ .@@ h@@ pro@@ f@@ ")); com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ at@@ ch p@@ at@@ ch = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ File@@ Cre@@ ator@@ .@@ create@@ (m@@ y@@ P@@ atch@@ Spec@@ , my@@ File@@ , com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ TEST_@@ U@@ I@@ ); com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ util.@@ io.@@ File@@ Util.@@ write@@ To@@ File@@ (@@ new java.io.File@@ (m@@ y@@ O@@ l@@ der@@ Dir@@ , "@@ new@@ file.@@ t@@ xt@@ "), "@@ hel@@ lo@@ "); com@@ .@@ int@@ el@@ li@@ j.@@ open@@ api.@@ util.@@ io.@@ File@@ Util.@@ write@@ To@@ File@@ (@@ new java.io.File@@ (m@@ y@@ O@@ l@@ der@@ Dir@@ , "@@ lib@@ /@@ java@@ _@@ p@@ id@@ 12@@ 3@@ 4@@ .@@ h@@ pro@@ f@@ "), "@@ b@@ y@@ e@@ !@@ "); com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ File@@ Cre@@ ator@@ .@@ Pre@@ par@@ ation@@ Res@@ ult pre@@ par@@ ation@@ Res@@ ult = com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ P@@ atch@@ File@@ Cre@@ ator@@ .@@ pre@@ par@@ e@@ And@@ Valid@@ ate@@ (m@@ y@@ File@@ , my@@ O@@ l@@ der@@ Dir@@ , com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ TEST_@@ U@@ I@@ ); assert@@ Equal@@ s(@@ 1, pre@@ par@@ ation@@ Res@@ ult.@@ valid@@ ation@@ Result@@ s.@@ size@@ ()); assert@@ Equal@@ s@@ (@@ new com@@ .@@ int@@ el@@ li@@ j.@@ up@@ dat@@ er.@@ Valid@@ ation@@ Result@@ (@@ Valid@@ ation@@ Res@@ ult.@@ K@@ ind@@ .@@ CON@@ F@@ L@@ IC@@ T, "@@ new@@ file.@@ t@@ xt@@ ", Valid@@ ation@@ Res@@ ult.@@ Action@@ .@@ VAL@@ ID@@ A@@ TE@@ , "@@ U@@ ne@@ x@@ pec@@ ted file@@ ", Valid@@ ation@@ Res@@ ult.@@ Option@@ .@@ DE@@ LE@@ TE@@ ), pre@@ par@@ ation@@ Res@@ ult.@@ valid@@ ation@@ Result@@ s.get@@ (0@@ )); assert@@ Appli@@ ed@@ And@@ Re@@ ver@@ ted@@ C@@ or@@ re@@ ct@@ ly@@ (p@@ atch@@ , pre@@ par@@ ation@@ Result@@ ); }
public void register@@ Listener@@ (com.android.s@@ dklib.@@ de@@ vices.@@ Device@@ Manager.@@ De@@ vices@@ Change@@ Listen@@ er list@@ ener@@ ) { com.android.sdklib.@@ de@@ vices.@@ Device@@ Manager.@@ list@@ ener@@ s.@@ add(@@ list@@ ener@@ ); }
private void send@@ Connection@@ State@@ Change@@ (@@ int pro@@ file@@ , android.content.@@ Int@@ ent con@@ n@@ Intent@@ ) { android.@@ bluetooth.Bluetooth@@ Device de@@ vice = con@@ n@@ Int@@ ent.get@@ Par@@ cel@@ able@@ Extra@@ (@@ Bluetooth@@ Device.@@ EX@@ TR@@ A@@ _@@ DE@@ VIC@@ E); int pre@@ v@@ State = con@@ n@@ Int@@ ent.get@@ Int@@ Extra@@ (@@ Bluetooth@@ Pro@@ file.@@ EX@@ TR@@ A@@ _P@@ RE@@ V@@ IO@@ US@@ _STA@@ TE@@ , (-1@@ )); int st@@ ate = con@@ n@@ Int@@ ent.get@@ Int@@ Extra@@ (@@ Bluetooth@@ Pro@@ file.@@ EX@@ TR@@ A@@ _STA@@ TE@@ , (-1@@ )); android.util.Log.d@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Proper@@ ties.@@ TAG, ((((@@ ((("@@ PRO@@ F@@ IL@@ E_@@ CONNEC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ E@@ : pro@@ file@@ =@@ " + pro@@ file@@ ) + ", device@@ =@@ ") + device@@ ) + ", ") + pre@@ v@@ State@@ ) + " -@@ > ") + state@@ )); if (!@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Proper@@ ties.@@ is@@ N@@ or@@ m@@ al@@ State@@ Tr@@ an@@ si@@ tion@@ (p@@ re@@ v@@ State@@ , state@@ ))) { android.util.Log.@@ w@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Adapter@@ Proper@@ ties.@@ TAG, ((((@@ ((("@@ PRO@@ F@@ IL@@ E_@@ CONNEC@@ TION@@ _STA@@ TE_@@ CH@@ AN@@ G@@ E@@ : ab@@ n@@ or@@ m@@ al tr@@ an@@ si@@ tion for pro@@ file@@ =@@ " + pro@@ file@@ ) + ", device@@ =@@ ") + device@@ ) + ", ") + pre@@ v@@ State@@ ) + " -@@ > ") + state@@ )); } send@@ Connection@@ State@@ Change@@ (device@@ , pro@@ file@@ , state@@ , pre@@ v@@ State@@ ); }
private int get@@ Parameter@@ Mo@@ d@@ if@@ ier@@ (@@ @javax.annotation.Non@@ ne@@ g@@ ativ@@ e int local@@ Id@@ x@@ , @javax.annotation.@@ Check@@ For@@ Null org.@@ ob@@ ject@@ w@@ e@@ b.@@ as@@ m.@@ tr@@ e@@ e.@@ Local@@ Vari@@ able@@ No@@ de l@@ v@@ n@@ ) { if ((@@ current@@ Method@@ .@@ param@@ eter@@ s) != null@@ ) { return (c@@ urrent@@ Method@@ .@@ param@@ eter@@ s.get@@ ((@@ com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ As@@ m@@ Helper.@@ is@@ St@@ ati@@ c@@ (c@@ urrent@@ Method@@ ) ? local@@ Id@@ x : local@@ Id@@ x - 1@@ )).@@ ac@@ cess@@ ) | (com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ Method@@ B@@ o@@ d@@ y@@ Wri@@ ter.@@ N@@ AM@@ E_@@ P@@ RE@@ S@@ EN@@ T@@ ); } else if (@@ l@@ v@@ n == null@@ ) { return AC@@ C@@ _S@@ Y@@ N@@ TH@@ E@@ TI@@ C@@ ; } return com.android.@@ j@@ il@@ l.@@ f@@ ron@@ t@@ end@@ .@@ java.@@ Method@@ B@@ o@@ d@@ y@@ Wri@@ ter.@@ NO@@ _M@@ OD@@ I@@ FI@@ ER@@ ; }
private void exec@@ ute@@ Build@@ (@@ java.util.List<@@ java.lang.String> arg@@ ument@@ s, org.@@ gradle.@@ too@@ l@@ ing.@@ Project@@ Connec@@ tion connection@@ , java.lang.String[] t@@ ask@@ s) { java.util.List<@@ java.lang.String> arg@@ s = com.google.common.@@ colle@@ ct.@@ List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ ity@@ ((@@ 2 + (@@ arg@@ ument@@ s.@@ size@@ ()))); args.@@ add@@ ("@@ -@@ i@@ "); args.@@ add@@ ("@@ -@@ u@@ "); args.@@ add@@ All@@ (@@ arg@@ ument@@ s); org.@@ gradle.@@ too@@ l@@ ing.@@ Build@@ L@@ a@@ un@@ ch@@ er la@@ un@@ ch@@ er = connection@@ .@@ new@@ Build@@ ()@@ .@@ for@@ Task@@ s(@@ t@@ ask@@ s@@ ).@@ w@@ ith@@ Argument@@ s(@@ args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )); java.lang.String@@ Builder j@@ vm@@ Argument@@ s = new java.lang.String@@ Builder@@ (); java.lang.String de@@ bug@@ Integ@@ r@@ ation@@ Test = java.lang.@@ System@@ .get@@ en@@ v@@ ("@@ DE@@ BU@@ G@@ _@@ IN@@ N@@ ER_@@ TE@@ S@@ T@@ "); if ((@@ !@@ (@@ com.google.common.@@ b@@ ase.@@ String@@ s.@@ is@@ Null@@ Or@@ Empty@@ (@@ de@@ bug@@ Integ@@ r@@ ation@@ Test@@ ))) && (@@ de@@ bug@@ Integ@@ r@@ ation@@ Test.@@ equals(@@ name@@ ))) { j@@ vm@@ Argument@@ s.@@ append("@@ -@@ ag@@ ent@@ lib@@ :@@ jdw@@ p@@ =@@ trans@@ port@@ =@@ d@@ t@@ _@@ s@@ ocket@@ ,@@ server@@ =@@ y@@ ,@@ s@@ us@@ pend@@ =@@ y@@ ,@@ addres@@ s@@ =@@ 5@@ 00@@ 5@@ "); } if (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ J@@ a@@ co@@ A@@ g@@ ent.@@ is@@ J@@ a@@ co@@ Enabled@@ ()) { if ((@@ j@@ vm@@ Argument@@ s.@@ length@@ ()) != 0) { j@@ vm@@ Argument@@ s.@@ append(@@ ' '@@ ); } j@@ vm@@ Argument@@ s.@@ append@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ e@@ g@@ r@@ ation.@@ common.@@ uti@@ ls.@@ J@@ a@@ co@@ co@@ A@@ g@@ ent.get@@ J@@ vm@@ Arg@@ ()); } if ((@@ j@@ vm@@ Argument@@ s.@@ length@@ ()) > 0) { la@@ un@@ ch@@ er.@@ set@@ J@@ vm@@ Argument@@ s(@@ j@@ vm@@ Argument@@ s.@@ toString@@ ()); } if ((@@ s@@ t@@ do@@ ut@@ ) != null@@ ) { la@@ un@@ ch@@ er.@@ set@@ St@@ and@@ ard@@ Output@@ (s@@ t@@ do@@ ut@@ ); } la@@ un@@ ch@@ er.@@ run@@ (); }
private void b@@ ind@@ And@@ In@@ itializ@@ e@@ () throw@@ s android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Exception { android.telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Utils.@@ start@@ B@@ ind@@ ing@@ (m@@ Contex@@ t, android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ M@@ B@@ M@@ S_@@ D@@ O@@ W@@ N@@ LO@@ AD@@ _S@@ ER@@ VIC@@ E_@@ AC@@ TION@@ , new android.content.@@ Service@@ Connection@@ () { @java.lang.Override public void on@@ Service@@ Connec@@ ted@@ (android.content.@@ Comp@@ on@@ ent@@ Name name@@ , android.os.@@ I@@ Bin@@ der service@@ ) { android.telephony.@@ m@@ b@@ m@@ s.@@ ve@@ n@@ do@@ r.@@ I@@ M@@ b@@ ms@@ Down@@ load@@ Ser@@ vice do@@ wn@@ load@@ Ser@@ vice = I@@ M@@ b@@ ms@@ Down@@ load@@ Service.@@ St@@ ub@@ .@@ as@@ Interface@@ (@@ service@@ ); int result@@ ; try { result = do@@ wn@@ load@@ Service.@@ in@@ itializ@@ e@@ (m@@ Sub@@ s@@ cription@@ Id, m@@ Callback@@ ); } catch (android.os.RemoteException e) { android.util.Log.e@@ (android.@@ telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ LOG@@ _@@ TAG, "@@ Ser@@ vice di@@ ed b@@ e@@ for@@ e in@@ itializ@@ ation@@ "); android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; return@@ ; } catch (java.lang.@@ Runtime@@ Exception e) { android.util.Log.e@@ (android.@@ telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ LOG@@ _@@ TAG, "@@ Run@@ tim@@ e excepti@@ on d@@ ur@@ ing in@@ itializ@@ ation@@ "); send@@ Error@@ To@@ App@@ (@@ M@@ b@@ ms@@ Exception@@ .@@ In@@ itializ@@ ation@@ Error@@ s.@@ ER@@ R@@ OR@@ _@@ UN@@ ABL@@ E_@@ TO@@ _@@ IN@@ I@@ TI@@ AL@@ I@@ Z@@ E, e.toString@@ ()); android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; return@@ ; } if (@@ result != (android.@@ telephony.@@ m@@ b@@ m@@ s.@@ M@@ b@@ ms@@ Exception@@ .@@ S@@ U@@ C@@ CE@@ SS@@ )) { send@@ Error@@ To@@ App@@ (@@ result@@ , "@@ Error return@@ ed d@@ ur@@ ing in@@ itializ@@ ation@@ "); android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; return@@ ; } try { do@@ wn@@ load@@ Service.@@ as@@ Bin@@ der@@ ().@@ lin@@ k@@ To@@ De@@ ath@@ (m@@ De@@ ath@@ R@@ ec@@ ip@@ i@@ ent@@ , 0); } catch (android.os.RemoteException e) { send@@ Error@@ To@@ App@@ (@@ M@@ b@@ ms@@ Exception@@ .@@ ER@@ R@@ OR@@ _M@@ ID@@ D@@ LE@@ W@@ AR@@ E_@@ LO@@ S@@ T, "@@ M@@ id@@ d@@ le@@ war@@ e lo@@ s@@ t d@@ ur@@ ing in@@ itializ@@ ation@@ "); android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed.@@ set@@ (@@ false@@ ); return@@ ; } m@@ Service.@@ set@@ (@@ do@@ wn@@ load@@ Service@@ ); } @java.lang.Override public void on@@ Service@@ Dis@@ connec@@ ted@@ (android.content.@@ Comp@@ on@@ ent@@ Name name@@ ) { android.telephony.@@ M@@ b@@ ms@@ Down@@ load@@ Manager.@@ s@@ Is@@ In@@ itializ@@ ed = false@@ ; m@@ Service.@@ set@@ (@@ null@@ ); } }); }
public void device@@ Connec@@ ted@@ (@@ final com.android.ddmlib.@@ I@@ Device device@@ ) { if (device@@ .is@@ On@@ line@@ ()) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ set@@ up@@ Device@@ For@@ w@@ ard@@ (device@@ ); if (!@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ is@@ View@@ Server@@ Run@@ n@@ ing@@ (device@@ ))) { if (!@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ start@@ View@@ Server@@ (device@@ ))) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ remove@@ Device@@ For@@ w@@ ard@@ (device@@ ); com.android.ddmlib.@@ Log.@@ e@@ ("@@ hierarchy@@ ", ("@@ Un@@ able to de@@ bu@@ g de@@ vice " + device@@ )); return@@ ; } } com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ View@@ Server@@ Info view@@ Server@@ Info = com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ load@@ View@@ Server@@ Info@@ (device@@ ); exec@@ ute@@ In@@ B@@ ack@@ gro@@ und@@ (@@ new java.lang.@@ Run@@ n@@ able@@ () { public void run@@ () { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ W@@ in@@ do@@ w@@ [] w@@ in@@ do@@ w@@ s = com.android.@@ hierarchyviewerlib.@@ device@@ .@@ Device@@ B@@ rid@@ g@@ e.@@ load@@ W@@ in@@ do@@ w@@ s(@@ device@@ ); com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ Device@@ Selection@@ Mode@@ l.get@@ Mode@@ l@@ ().@@ add@@ Device@@ (device@@ , w@@ in@@ do@@ w@@ s); } }); if ((@@ view@@ Server@@ Info@@ .get@@ Pro@@ to@@ col@@ Version@@ ()) >@@ = 3@@ ) { com.android.@@ hierarchyviewerlib.@@ device@@ .@@ W@@ in@@ do@@ w@@ Up@@ dat@@ er.@@ start@@ Listen@@ For@@ W@@ in@@ do@@ w@@ Chan@@ g@@ es@@ (@@ this@@ , device@@ ); fo@@ c@@ us@@ Changed@@ (device@@ ); } } }
private static java.util.List<@@ java.lang.String> get@@ Pre@@ fer@@ re@@ d@@ H@@ our@@ Format@@ s(@@ android.@@ icu@@ .@@ util.@@ U@@ Local@@ e u@@ Loc@@ ale@@ ) { android.@@ icu@@ .@@ util.@@ U@@ Local@@ e ma@@ x = android.@@ icu@@ .@@ util.@@ U@@ Loc@@ a@@ le.@@ add@@ Li@@ k@@ el@@ y@@ Sub@@ t@@ ag@@ s(@@ u@@ Loc@@ ale@@ ); java.lang.String co@@ u@@ n@@ try = max@@ .get@@ Co@@ u@@ n@@ try@@ (); if (@@ co@@ u@@ n@@ try@@ .is@@ Empty@@ ()) { co@@ u@@ n@@ try = "@@ 00@@ 1@@ "; } java.lang.String lan@@ g@@ Co@@ u@@ n@@ try = ((m@@ a@@ x@@ .get@@ L@@ an@@ gu@@ age@@ ()) + "@@ _@@ ") + co@@ u@@ n@@ try@@ ; java.util.List<@@ java.lang.String> li@@ s@@ t = android.@@ icu@@ .@@ text.@@ Date@@ Time@@ P@@ attern@@ Gener@@ ator@@ .@@ LO@@ C@@ AL@@ E_@@ TO@@ _P@@ RE@@ F@@ ER@@ ED@@ _@@ H@@ O@@ UR@@ .get@@ (@@ lan@@ g@@ Co@@ u@@ n@@ try@@ ); if (@@ li@@ s@@ t == null@@ ) { li@@ s@@ t = android.@@ icu@@ .@@ text.@@ Date@@ Time@@ P@@ attern@@ Gener@@ ator@@ .@@ LO@@ C@@ AL@@ E_@@ TO@@ _P@@ RE@@ F@@ ER@@ ED@@ _@@ H@@ O@@ UR@@ .get@@ (@@ co@@ u@@ n@@ try@@ ); if (@@ li@@ s@@ t == null@@ ) { li@@ s@@ t = java.util.Collection@@ s.@@ sing@@ let@@ on@@ List@@ ("@@ H@@ "); } } return list@@ ; }
@java.lang.Override public void write@@ To@@ (com.android.jack.@@ dx.@@ util.@@ Annot@@ ated@@ Out@@ put out, com.android.jack.@@ dx.@@ dex.@@ code.@@ D@@ al@@ v@@ In@@ s@@ n in@@ s@@ n@@ ) { com.android.jack.@@ dx.@@ ro@@ p.@@ code.@@ Reg@@ ister@@ Spec@@ Lis@@ t reg@@ s = ex@@ pli@@ c@@ iti@@ z@@ e@@ (in@@ s@@ n@@ .get@@ Reg@@ ister@@ s()); int s@@ z = reg@@ s.@@ size@@ (); int r@@ 0 = (s@@ z > 0) ? reg@@ s.get@@ (0@@ ).get@@ Reg@@ () : 0; int r@@ 1 = (s@@ z > 1@@ ) ? reg@@ s.get@@ (1@@ ).get@@ Reg@@ () : 0; int r@@ 2 = (s@@ z > 2@@ ) ? reg@@ s.get@@ (@@ 2@@ ).get@@ Reg@@ () : 0; int r@@ 3 = (s@@ z > 3@@ ) ? reg@@ s.get@@ (@@ 3@@ ).get@@ Reg@@ () : 0; int r@@ 4 = (s@@ z > 4@@ ) ? reg@@ s.get@@ (@@ 4@@ ).get@@ Reg@@ () : 0; write@@ (@@ out, op@@ code@@ Un@@ it@@ (in@@ s@@ n@@ , m@@ ake@@ Byte@@ (r@@ 4@@ , s@@ z@@ )), code@@ Un@@ it@@ (r@@ 0, r@@ 1, r@@ 2, r@@ 3@@ )); }
@com.android.annotations.NonNull public Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ .@@ Provid@@ er get@@ Resource@@ Visi@@ b@@ ili@@ ty@@ () { if ((m@@ Resource@@ Visi@@ b@@ ili@@ ty@@ ) == null@@ ) { m@@ Resource@@ Visi@@ b@@ ili@@ t@@ y = new com.android.ide.common.@@ repository.@@ Resource@@ Visi@@ b@@ ili@@ ty@@ Loo@@ k@@ up@@ .@@ Provider@@ (); } return m@@ Resource@@ Visi@@ b@@ ili@@ ty@@ ; }
@java.lang.Override protected boolean eng@@ ine@@ V@@ er@@ if@@ y@@ (@@ byte@@ [] si@@ g@@ Bytes@@ ) throw@@ s java.security.@@ Sign@@ ature@@ Exception { if ((@@ key@@ ) == null@@ ) { throw new java.security.@@ Sign@@ ature@@ Exception("@@ Ne@@ ed RS@@ A public key@@ "); } if (in@@ put@@ Is@@ Too@@ Long@@ ) { return false@@ ; } byte@@ [] output@@ Buff@@ er = new byte@@ [@@ input@@ Buff@@ er.@@ length@@ ]; try { final int result@@ Size@@ ; try { result@@ Siz@@ e = org.apache.harmony.xnet.provider.jsse.@@ NativeCryp@@ to.@@ RS@@ A@@ _@@ public@@ _@@ dec@@ ryp@@ t@@ (@@ si@@ g@@ By@@ t@@ es.@@ length@@ , si@@ g@@ Bytes@@ , output@@ Buffer@@ , key@@ .get@@ P@@ key@@ Context@@ (), NativeCryp@@ to.@@ RS@@ A@@ _P@@ K@@ C@@ S@@ 1@@ _P@@ AD@@ D@@ ING@@ ); } catch (@@ java.security.@@ Sign@@ ature@@ Exception e) { throw e@@ ; } catch (java.lang.Exception e) { return false@@ ; } if (@@ result@@ Siz@@ e != (@@ output@@ Buff@@ er.@@ length@@ )) { output@@ Buff@@ er = java.util.Arrays.@@ copy@@ Of@@ (@@ output@@ Buffer@@ , result@@ Siz@@ e); } boolean match@@ es = result@@ Siz@@ e == (in@@ put@@ Offset@@ ); for (@@ int i = 0; i < result@@ Size@@ ; i++) { if ((@@ input@@ Buffer@@ [i]@@ ) != (@@ output@@ Buffer@@ [i]@@ )) { match@@ es = false@@ ; } } return match@@ es@@ ; } catch (java.lang.Exception ex@@ ) { throw new java.security.@@ Sign@@ ature@@ Exception(@@ ex@@ ); } final@@ l@@ y { input@@ O@@ ff@@ set = 0; } }
@java.lang.Override public boolean s@@ ati@@ s@@ fi@@ ed@@ By@@ (android.net.@@ Network@@ S@@ pe@@ c@@ if@@ i@@ er o@@ th@@ er@@ ) { if (o@@ th@@ er == null@@ ) return true@@ ; if (!(@@ o@@ th@@ er instanceof android.net.@@ String@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ )) return false@@ ; return s@@ pe@@ c@@ if@@ i@@ er.@@ equal@@ s@@ ((@@ (android.net.@@ String@@ Network@@ S@@ pe@@ c@@ if@@ ier@@ ) (o@@ th@@ er@@ )).@@ s@@ pe@@ c@@ if@@ ier@@ ); }
@@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ (d@@ es@@ cri@@ pti@@ on = "@@ For@@ ge@@ t a w@@ if@@ i net@@ wor@@ k wit@@ h pri@@ or@@ ity@@ ") public void w@@ if@@ i@@ For@@ get@@ Network@@ (@@ @@@ com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ r@@ p@@ c.@@ R@@ p@@ c@@ Parameter@@ (@@ name = "@@ w@@ if@@ i@@ SS@@ ID@@ ") java.lang.Integ@@ er new@@ tor@@ Id) { com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ fa@@ c@@ ad@@ e.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager@@ F@@ ac@@ ad@@ e.@@ W@@ if@@ i@@ Action@@ Listen@@ er list@@ en@@ er = new com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ fa@@ c@@ ad@@ e.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Manager@@ F@@ ac@@ ad@@ e.@@ W@@ if@@ i@@ Action@@ Listener@@ (m@@ Event@@ F@@ ac@@ ad@@ e@@ , com.goog@@ le@@ code.@@ android@@ _@@ script@@ ing.@@ fa@@ c@@ ad@@ e.@@ w@@ if@@ i.@@ W@@ if@@ i@@ Constants.@@ W@@ if@@ i@@ For@@ get@@ Network@@ Callback@@ ); m@@ W@@ if@@ i@@ .@@ for@@ get@@ (@@ new@@ tor@@ k@@ Id, list@@ ener@@ ); }
public void test@@ Connection@@ Faile@@ d@@ () throw@@ s java.lang.@@ Throw@@ able { if (!@@ (android.@@ media.@@ t@@ v@@ .@@ cts.@@ Utils.@@ has@@ T@@ v@@ Input@@ F@@ ramework@@ (get@@ Activity@@ ()))) { return@@ ; } m@@ T@@ v@@ View@@ .@@ t@@ u@@ ne@@ ("@@ in@@ valid@@ _@@ input@@ _@@ id@@ ", T@@ v@@ Con@@ tr@@ ac@@ t.@@ Chan@@ ne@@ ls.@@ CON@@ TE@@ N@@ T_@@ UR@@ I@@ ); m@@ In@@ strument@@ ation.@@ wait@@ For@@ Id@@ le@@ S@@ ync@@ (); new android.@@ cts.@@ util.@@ P@@ ol@@ l@@ ing@@ Check@@ (android.@@ media.@@ t@@ v@@ .@@ cts.@@ T@@ v@@ View@@ Test.@@ TI@@ M@@ E_@@ O@@ UT@@ ) { @java.lang.Override protected boolean check@@ () { return (m@@ Callback@@ .get@@ Connection@@ Faile@@ d@@ Count@@ ()) > 0; } }@@ .@@ run@@ (); }
com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ it@@ e add(@@ java.util.List<@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Stack@@ F@@ rame@@ > path@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ In@@ stan@@ ce in@@ st@@ ) { m@@ Object@@ s.add@@ (in@@ st@@ ); java.lang.String he@@ a@@ p = in@@ s@@ t.get@@ He@@ ap@@ ().get@@ Name@@ (); m@@ Siz@@ es@@ By@@ He@@ ap.@@ put@@ (@@ he@@ ap@@ , ((@@ get@@ Size@@ (@@ he@@ ap@@ )) + (in@@ s@@ t.get@@ Size@@ ()))); java.util.Map@@ <@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ Class@@ Ob@@ j@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info@@ > class@@ To@@ Object@@ s@@ Info = m@@ Object@@ s@@ Info@@ Map@@ .get@@ (in@@ s@@ t.get@@ He@@ ap@@ ()); if (@@ class@@ To@@ Object@@ s@@ Info == null@@ ) { class@@ To@@ Object@@ s@@ Info = new java.util.@@ Hash@@ Map@@ <@@ com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ A@@ hat@@ Class@@ Ob@@ j@@ , com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info@@ >(); m@@ Object@@ s@@ Info@@ Map@@ .@@ put@@ (in@@ s@@ t.get@@ He@@ ap@@ (), class@@ To@@ Object@@ s@@ Info@@ ); } com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info in@@ fo = class@@ To@@ Object@@ s@@ Info@@ .get@@ (in@@ s@@ t.get@@ Class@@ Ob@@ j@@ ()); if (in@@ fo == null@@ ) { in@@ fo = new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ .@@ Object@@ s@@ Info@@ (in@@ s@@ t.get@@ He@@ ap@@ (), in@@ s@@ t.get@@ Class@@ Ob@@ j@@ (), 0, 0); m@@ Object@@ s@@ Info@@ s.add@@ (in@@ fo@@ ); class@@ To@@ Object@@ s@@ Info.@@ put@@ (in@@ s@@ t.get@@ Class@@ Ob@@ j@@ (), info@@ ); } (in@@ fo@@ .@@ num@@ In@@ stan@@ ces@@ )@@ ++@@ ; info@@ .@@ num@@ Byte@@ s +@@ = in@@ s@@ t.get@@ Size@@ (); if (!@@ (p@@ ath@@ .is@@ Empty@@ ())) { java.lang.String ne@@ x@@ t = path@@ .get@@ (0@@ ).@@ toString@@ (); com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ it@@ e ch@@ il@@ d = m@@ Ch@@ ild@@ r@@ en@@ .get@@ (@@ next@@ ); if (@@ ch@@ il@@ d == null@@ ) { ch@@ il@@ d = new com.android.ahat.@@ he@@ ap@@ dum@@ p.@@ S@@ ite@@ (@@ this@@ , ne@@ x@@ t, in@@ s@@ t.get@@ Id@@ (), ((@@ path@@ .@@ size@@ ()) - 1@@ )); m@@ Ch@@ ild@@ r@@ en@@ .@@ put@@ (@@ ne@@ x@@ t, ch@@ ild@@ ); } return ch@@ ild@@ .add@@ (p@@ ath.@@ sub@@ List@@ (@@ 1, path@@ .@@ size@@ ()@@ ), in@@ st@@ ); } else { return this@@ ; } }
private boolean get@@ W@@ if@@ i@@ W@@ ake@@ up@@ Enabled@@ Setting@@ () { return (@@ Setting@@ s.@@ G@@ lo@@ b@@ al@@ .get@@ Int@@ (m@@ Contex@@ t.get@@ Content@@ Resol@@ ver@@ (), Setting@@ s.@@ G@@ lo@@ b@@ al.@@ WI@@ FI@@ _@@ W@@ A@@ KE@@ U@@ P@@ _@@ EN@@ ABL@@ ED@@ , 0@@ )) == 1; }
public static boolean is@@ Fa@@ ctory@@ RO@@ M@@ () { return ((@@ com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ get@@ F@@ ir@@ st@@ Api@@ Level@@ ()) == (com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ IN@@ T_@@ VAL@@ U@@ E_@@ I@@ F@@ _@@ UN@@ SE@@ T@@ )) == (com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ IN@@ T_@@ VAL@@ U@@ E_@@ I@@ F@@ _@@ UN@@ SE@@ T@@ )) && (@@ common.@@ util.@@ Property@@ Util.@@ get@@ F@@ ir@@ st@@ Api@@ Level@@ ()) == (com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ IN@@ T_@@ VAL@@ U@@ E_@@ I@@ F@@ _@@ UN@@ SE@@ T@@ )) == (com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ get@@ F@@ ir@@ st@@ Api@@ Level@@ ())) == (com.android.@@ comp@@ ati@@ b@@ ili@@ ty.@@ common.@@ util.@@ Property@@ Util.@@ IN@@ T_@@ VAL@@ U@@ E_@@ I@@ F@@ _@@ UN@@ SE@@ T@@ ); }
private static void p@@ r@@ int@@ Re@@ feren@@ ces@@ (com.android.@@ ahat.@@ Do@@ c do@@ c@@ , com.android.ahat.@@ Q@@ u@@ er@@ y qu@@ er@@ y@@ , com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce in@@ st@@ ) { do@@ c.@@ sec@@ tion@@ ("@@ Object@@ s wit@@ h Reference@@ s to this Object@@ "); if (in@@ s@@ t.get@@ H@@ ard@@ Re@@ feren@@ ces@@ ().@@ isEmpty@@ ()) { do@@ c.@@ p@@ r@@ int@@ ln@@ (com.android.@@ ahat.@@ Doc@@ Str@@ ing.@@ tex@@ t@@ ("@@ (@@ n@@ one@@ )@@ ")); } else { do@@ c.@@ t@@ able@@ (@@ new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Object@@ ")); java.util.Collection@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > re@@ ference@@ s = in@@ s@@ t.get@@ H@@ ard@@ Re@@ feren@@ ces@@ (); com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ct@@ or sele@@ ct@@ or = new com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ctor@@ (@@ qu@@ er@@ y@@ , com.android.ahat.@@ Object@@ Handler.@@ H@@ AR@@ D@@ _RE@@ F@@ S_@@ ID@@ , re@@ feren@@ ces.@@ size@@ ()); int li@@ m@@ i@@ t = sele@@ ctor@@ .get@@ Sele@@ c@@ ted@@ Li@@ m@@ it@@ (); java.util.@@ I@@ terator@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > i@@ ter = re@@ feren@@ ces.@@ i@@ terator@@ (); for (@@ int i = 0; (@@ i < li@@ m@@ it@@ ) && (@@ it@@ er.@@ has@@ Next@@ ()); i++) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce re@@ f = it@@ er.@@ next@@ (); do@@ c.@@ row@@ (com.android.@@ ahat.@@ Valu@@ e.@@ render@@ (re@@ f@@ )); } do@@ c.@@ end@@ (); sele@@ ctor@@ .@@ render@@ (@@ do@@ c@@ ); } if ((@@ in@@ s@@ t.get@@ S@@ o@@ f@@ t@@ Re@@ feren@@ ces@@ ()) != null@@ ) { do@@ c.@@ sec@@ tion@@ ("@@ Object@@ s wit@@ h S@@ o@@ f@@ t Reference@@ s to this Object@@ "); do@@ c.@@ t@@ able@@ (@@ new com.android.ahat.@@ Co@@ lum@@ n@@ ("@@ Object@@ ")); java.util.Collection@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > re@@ ference@@ s = in@@ s@@ t.get@@ S@@ o@@ f@@ t@@ Re@@ feren@@ ces@@ (); com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ct@@ or sele@@ ct@@ or = new com.android.ahat.@@ Li@@ m@@ it@@ Sele@@ ctor@@ (@@ qu@@ er@@ y@@ , com.android.ahat.@@ Object@@ Handler.@@ S@@ O@@ F@@ T_@@ RE@@ F@@ S_@@ ID@@ , re@@ feren@@ ces.@@ size@@ ()); int li@@ m@@ i@@ t = sele@@ ctor@@ .get@@ Sele@@ c@@ ted@@ Li@@ m@@ it@@ (); java.util.@@ I@@ terator@@ <@@ com.android.tools.@@ perflib.@@ he@@ ap.@@ Instance@@ > i@@ ter = re@@ feren@@ ces.@@ i@@ terator@@ (); for (@@ int i = 0; (@@ int i < li@@ m@@ it@@ ) && (@@ it@@ er.@@ has@@ Next@@ ()); i++) { com.android.tools.@@ perflib.@@ he@@ ap.@@ In@@ stan@@ ce re@@ f = it@@ er.@@ next@@ (); do@@ c.@@ row@@ (com.android.@@ ahat.@@ Valu@@ e.@@ render@@ (re@@ f@@ )); } do@@ c.@@ end@@ (); sele@@ ctor@@ .@@ render@@ (@@ do@@ c@@ ); } }
@com.android.annotations.@@ Null@@ able public static com.android.sdklib.@@ Android@@ Ver@@ sion get@@ Version@@ (@@ @com.android.annotations.@@ Null@@ able java.lang.String value@@ , @com.android.annotations.@@ Null@@ able com.android.sdklib.@@ I@@ Android@@ Target@@ [] target@@ s) { if ((@@ valu@@ e == null@@ ) || (@@ valu@@ e.@@ isEmpty@@ ())) { return null@@ ; } if (java.lang.@@ Char@@ act@@ er.@@ is@@ Dig@@ it@@ (@@ value@@ .@@ char@@ At@@ (0@@ ))) { try { int ap@@ i = java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ valu@@ e); if (@@ ap@@ i >@@ = 1@@ ) { return new com.android.sdklib.@@ Android@@ Version@@ (@@ ap@@ i@@ , null@@ ); } return null@@ ; } catch (java.lang.@@ Number@@ Format@@ Exception e) { return null@@ ; } } if (@@ target@@ s != null@@ ) { for (@@ int i = (@@ target@@ s.@@ length) - 1; i >@@ = 0; i@@ --@@ ) { com.android.sdklib.@@ I@@ Android@@ T@@ arg@@ et t@@ arg@@ et = target@@ s@@ [i@@ ]; if (@@ target@@ .is@@ P@@ la@@ t@@ for@@ m@@ ()) { com.android.sdklib.@@ Android@@ Ver@@ sion ver@@ sion = target@@ .get@@ Version@@ (); if ((@@ ver@@ sion@@ .is@@ Pre@@ view@@ ()) && (@@ valu@@ e.@@ equal@@ s@@ I@@ gn@@ ore@@ C@@ ase@@ (@@ ver@@ sion@@ .get@@ Co@@ d@@ en@@ ame@@ ()))) { return new com.android.sdklib.@@ Android@@ Version@@ (@@ ver@@ sion@@ .get@@ Api@@ Level@@ (), ver@@ sion@@ .get@@ Co@@ d@@ en@@ ame@@ ()); } } } int ap@@ i = com.android.ide.common.@@ s@@ dk@@ .@@ Sdk@@ Version@@ Info@@ .get@@ Api@@ By@@ Pre@@ view@@ Name@@ (@@ value@@ , false@@ ); if (@@ ap@@ i != (-1@@ )) { return new com.android.sdklib.@@ Android@@ Version@@ ((@@ ap@@ i - 1@@ ), valu@@ e); } return new com.android.sdklib.@@ Android@@ Version@@ (com.android.ide.@@ common.@@ s@@ dk@@ .@@ Sdk@@ Version@@ Info.@@ H@@ I@@ G@@ H@@ E@@ ST_@@ K@@ NO@@ W@@ N@@ _@@ AP@@ I@@ , valu@@ e); }
boolean process@@ () { if ((m@@ Q@@ ue@@ u@@ e.@@ size@@ ()) == 0) { return false@@ ; } short ti@@ d = m@@ Q@@ ue@@ u@@ e.@@ po@@ l@@ l@@ (); int m@@ id = m@@ Message@@ Id@@ s@@ By@@ T@@ id@@ .get@@ (t@@ id@@ ); if ((@@ (m@@ Number@@ Of@@ R@@ et@@ ri@@ es) != null@@ ) && (m@@ Number@@ Of@@ R@@ et@@ ri@@ es.@@ contain@@ s@@ Key@@ (m@@ id@@ ))) { int num@@ R@@ et@@ ri@@ es = m@@ Number@@ Of@@ R@@ et@@ ri@@ es@@ .get@@ (m@@ id@@ ); if (@@ num@@ R@@ et@@ ri@@ es == (-1@@ )) { m@@ D@@ u@@ t.@@ on@@ Message@@ S@@ end@@ Fail@@ No@@ t@@ if@@ ic@@ ation@@ (t@@ id, N@@ an@@ Status@@ Type.@@ IN@@ TER@@ N@@ AL@@ _@@ FA@@ IL@@ U@@ RE@@ ); } else { int current@@ R@@ et@@ ri@@ es = m@@ R@@ et@@ ri@@ es@@ By@@ M@@ id@@ .get@@ (m@@ id@@ ); if (c@@ urrent@@ R@@ et@@ ri@@ es > num@@ R@@ et@@ ri@@ es) { return false@@ ; } else if (c@@ urrent@@ R@@ et@@ ri@@ es == num@@ R@@ et@@ ri@@ es) { m@@ D@@ u@@ t.@@ on@@ Message@@ S@@ end@@ Su@@ ccess@@ No@@ t@@ if@@ ic@@ ation@@ (t@@ id@@ ); } else { m@@ D@@ u@@ t.@@ on@@ Message@@ S@@ end@@ Fail@@ No@@ t@@ if@@ ic@@ ation@@ (t@@ id, N@@ an@@ Status@@ Type.@@ NO@@ _@@ O@@ TA@@ _@@ AC@@ K@@ ); } m@@ R@@ et@@ ri@@ es@@ By@@ M@@ id.@@ put@@ (m@@ id, (c@@ urrent@@ R@@ et@@ ri@@ es + 1@@ )); } } else { m@@ D@@ u@@ t.@@ on@@ Message@@ S@@ end@@ Su@@ ccess@@ No@@ t@@ if@@ ic@@ ation@@ (t@@ id@@ ); } return true@@ ; }
@java.lang.Override public void end@@ Tra@@ ce@@ Se@@ ed@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Fi@@ el@@ d field@@ ) { com@@ po@@ sed@@ Statu@@ s.@@ po@@ p@@ (); for (com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ tr@@ ac@@ er.@@ Tr@@ ac@@ er@@ B@@ r@@ us@@ h b@@ r@@ us@@ h : b@@ r@@ us@@ h@@ es) { b@@ r@@ us@@ h@@ .@@ end@@ Tra@@ ce@@ Se@@ ed@@ (@@ field@@ ); } }
private void add@@ In@@ c@@ lu@@ si@@ ve@@ Time@@ (com.android.@@ tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l call@@ , com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l parent@@ , com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Thread@@ Info th@@ read@@ , com.android.tools.@@ perflib.@@ vm@@ tra@@ ce.@@ C@@ lock@@ Type typ@@ e) { long tim@@ e = cal@@ l.get@@ In@@ c@@ lu@@ si@@ ve@@ Time@@ (@@ type@@ , java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ N@@ AN@@ O@@ S@@ EC@@ ON@@ D@@ S@@ ); m@@ All@@ Thread@@ Stat@@ s.add@@ In@@ c@@ lu@@ si@@ ve@@ Time@@ (@@ time@@ , typ@@ e); get@@ Per@@ Thread@@ C@@ um@@ ul@@ ative@@ Stat@@ s(@@ th@@ read@@ ).@@ add@@ In@@ c@@ lu@@ si@@ ve@@ Time@@ (@@ time@@ , typ@@ e); if (@@ par@@ ent != null@@ ) { get@@ Per@@ Call@@ er@@ Time@@ (@@ th@@ read@@ , parent@@ ).@@ add@@ In@@ c@@ lu@@ si@@ ve@@ Time@@ (@@ time@@ , typ@@ e); } for (com.android.@@ tools.@@ perflib.@@ vm@@ tra@@ ce.@@ Cal@@ l cal@@ le@@ e : cal@@ l.get@@ Cal@@ le@@ es@@ ()) { } }
public android.telephony.@@ e@@ uicc.@@ E@@ uic@@ c@@ Info get@@ E@@ uic@@ c@@ Info@@ () { if (!(@@ is@@ Enabled@@ ())) { return null@@ ; } try { return get@@ I@@ E@@ uic@@ c@@ Control@@ ler@@ ().get@@ E@@ uic@@ c@@ Info@@ (); } catch (android.os.RemoteException e) { throw e.@@ r@@ e@@ throw@@ From@@ System@@ Server@@ (); } }
@java.lang.Override public boolean vi@@ si@@ t@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ Throw@@ State@@ m@@ ent throw@@ St@@ m@@ t@@ ) { super@@ .@@ vi@@ si@@ t@@ (@@ throw@@ St@@ m@@ t@@ ); com.android.jack.@@ c@@ f@@ g.@@ Throw@@ Bas@@ ic@@ B@@ loc@@ k throw@@ B@@ loc@@ k = new com.android.jack.@@ c@@ f@@ g.@@ Throw@@ Bas@@ ic@@ Block@@ (((@@ b@@ as@@ ic@@ Block@@ Id@@ )@@ ++@@ ), current@@ St@@ m@@ t@@ s); set@@ Block@@ Of@@ State@@ ment@@ (@@ throw@@ Block@@ ); for@@ w@@ ard@@ B@@ r@@ an@@ ch@@ Resol@@ ver.@@ add@@ P@@ e@@ i@@ Bas@@ ic@@ Block@@ (@@ throw@@ Block@@ , null@@ , throw@@ St@@ m@@ t.get@@ J@@ C@@ atch@@ Block@@ s()); return false@@ ; }
public void add@@ Request@@ Response@@ Pa@@ ir@@ (android.@@ telecom.@@ Logg@@ ing.@@ Event@@ Manager.@@ Tim@@ ed@@ Event@@ Pa@@ i@@ r p@@ ) { if (@@ request@@ Response@@ Pa@@ ir@@ s.@@ contain@@ s@@ Key@@ (@@ p.@@ m@@ Request@@ )) { request@@ Response@@ Pa@@ ir@@ s.get@@ (@@ p.@@ m@@ Request@@ ).@@ add@@ (p@@ ); } else { java.util.ArrayList<@@ android.telecom.@@ Logg@@ ing.@@ Event@@ Manager.@@ Tim@@ ed@@ Event@@ Pa@@ ir@@ > res@@ ponse@@ s = new java.util.ArrayList<@@ >(); res@@ pon@@ s@@ es.@@ add@@ (p@@ ); request@@ Response@@ Pa@@ ir@@ s.@@ put@@ (@@ p.@@ m@@ Request@@ , res@@ pon@@ s@@ es@@ ); } }
public java.lang.Ob@@ ject@@ [] get@@ Element@@ s(@@ java.lang.Object input@@ Element@@ ) { if (in@@ put@@ Elem@@ ent instanceof com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ Device@@ Selection@@ Mode@@ l@@ ) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (("@@ L@@ EN@@ G@@ T@@ H " + (m@@ o@@ de@@ l.get@@ De@@ vices@@ ().@@ length@@ ))); return model.@@ get@@ De@@ vices@@ (); } return new java.lang.Ob@@ ject@@ [0@@ ]; }
public static void list@@ View@@ R@@ oo@@ ts@@ (com.android.@@ ddmlib.@@ C@@ li@@ ent c@@ lient@@ , com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ List@@ View@@ R@@ oo@@ ts@@ Handle@@ r re@@ pl@@ y@@ Handler@@ ) throw@@ s java.io.IOException { java.nio.Byte@@ Buff@@ er bu@@ f = al@@ loc@@ Buffer@@ (@@ 4@@ ); com.android.ddmlib.@@ J@@ d@@ w@@ p@@ Pack@@ et pack@@ et = new com.android.ddmlib.@@ J@@ d@@ w@@ p@@ Packet@@ (@@ bu@@ f@@ ); java.nio.Byte@@ Buff@@ er ch@@ un@@ k@@ Bu@@ f = get@@ Ch@@ un@@ k@@ Data@@ Bu@@ f@@ (@@ bu@@ f@@ ); ch@@ un@@ k@@ Bu@@ f.@@ put@@ Int@@ (1@@ ); fin@@ is@@ h@@ Ch@@ un@@ k@@ Packet@@ (p@@ ack@@ et@@ , com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ CH@@ UN@@ K_@@ V@@ UL@@ W@@ , ch@@ un@@ k@@ Bu@@ f.@@ posi@@ tion@@ ()); c@@ li@@ ent.@@ send@@ And@@ Con@@ s@@ um@@ e@@ (p@@ ack@@ et@@ , re@@ pl@@ y@@ Handler@@ ); }
public static void set@@ Process@@ U@@ se@@ Local@@ Nam@@ es@@ er@@ ver@@ s(@@ android.net.@@ Net@@ wor@@ k network@@ ) { final long net@@ id@@ For@@ Resol@@ v = android.net.@@ NE@@ TI@@ D_@@ US@@ E_@@ LO@@ C@@ AL@@ _N@@ AME@@ S@@ ER@@ V@@ E@@ RS@@ ) | (@@ long@@ ) (@@ network@@ .@@ net@@ Id@@ )); android.net.Network@@ Utils.@@ b@@ ind@@ Process@@ To@@ Network@@ For@@ Host@@ Resol@@ uti@@ on@@ ((@@ (@@ int@@ ) (@@ net@@ id@@ For@@ Resol@@ v@@ ))); }
@java.lang.Override public void on@@ Recei@@ ve@@ (android.content.@@ Context contex@@ t, android.content.@@ Int@@ ent int@@ ent@@ ) { android.util.Log.d@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Remote@@ De@@ vices.@@ TAG, ("@@ re@@ cei@@ ve@@ d int@@ ent@@ : " + int@@ ent@@ )); java.lang.String ac@@ tion = int@@ ent.get@@ Action@@ (); switch (@@ action@@ ) { case android.@@ bluetooth.Bluetooth@@ Headset@@ .@@ AC@@ TION_@@ H@@ F@@ _@@ IN@@ D@@ IC@@ A@@ TO@@ RS@@ _@@ VAL@@ U@@ E_@@ CH@@ AN@@ G@@ E@@ D : on@@ H@@ f@@ In@@ di@@ cat@@ or@@ Value@@ Changed@@ (@@ int@@ ent@@ ); break@@ ; default : android.util.Log.@@ w@@ (com.android.bluetooth.@@ b@@ t@@ service@@ .@@ Remote@@ De@@ vices.@@ TAG, ("@@ un@@ handle@@ d int@@ ent@@ : " + int@@ ent@@ )); break@@ ; } }
private static void parse@@ Sign@@ er@@ s(@@ java.nio.Byte@@ Buff@@ er apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 3@@ Block@@ , java.util.@@ Set@@ <@@ com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Content@@ Dig@@ est@@ Algorith@@ m@@ > cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , int min@@ Sdk@@ Version@@ , int max@@ Sdk@@ Version@@ , com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult result@@ ) throw@@ s java.security.@@ No@@ Su@@ ch@@ Algorith@@ m@@ Exception { java.nio.Byte@@ Buff@@ er sign@@ er@@ s; try { sign@@ er@@ s = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ get@@ Length@@ Pre@@ fix@@ ed@@ S@@ li@@ ce@@ (@@ apk@@ Sign@@ ature@@ S@@ ch@@ em@@ e@@ V@@ 3@@ Block@@ ); } catch (com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception e) { result.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 3@@ _S@@ I@@ G@@ _M@@ AL@@ F@@ OR@@ ME@@ D@@ _S@@ I@@ G@@ NE@@ RS@@ ); return@@ ; } if (!(@@ sign@@ er@@ s.@@ has@@ Re@@ main@@ ing@@ ())) { result.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 3@@ _S@@ I@@ G@@ _N@@ O@@ _S@@ I@@ G@@ NE@@ RS@@ ); return@@ ; } java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctor@@ y cer@@ t@@ Fa@@ ctory@@ ; try { cer@@ t@@ Fa@@ ctor@@ y = java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctory@@ .get@@ Instance@@ ("@@ X@@ .@@ 509@@ "); } catch (@@ java.security.@@ cer@@ t.@@ Cer@@ t@@ if@@ ic@@ ate@@ Exception e) { throw new java.lang.Runtime@@ Exception("@@ Faile@@ d to ob@@ t@@ a@@ in X@@ .@@ 50@@ 9 Cer@@ t@@ if@@ ic@@ ate@@ Fa@@ ctory@@ ", e); } int sign@@ er@@ Coun@@ t = 0; while (@@ sign@@ er@@ s.@@ has@@ Re@@ main@@ ing@@ ()) { int sign@@ er@@ In@@ dex = sign@@ er@@ Count@@ ; sign@@ er@@ Count@@ ++@@ ; com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult.@@ Sign@@ er@@ Info sign@@ er@@ Info = new com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ Res@@ ult.@@ Sign@@ er@@ Info@@ (); sign@@ er@@ Info.@@ in@@ dex = sign@@ er@@ Index@@ ; result.@@ sign@@ er@@ s.@@ add(@@ sign@@ er@@ Info@@ ); try { java.nio.Byte@@ Buff@@ er si@@ g@@ ne@@ r = com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ Apk@@ Sign@@ ing@@ Block@@ Utils.@@ get@@ Length@@ Pre@@ fix@@ ed@@ S@@ li@@ ce@@ (@@ sign@@ er@@ s); com.android.@@ apk@@ si@@ g@@ .@@ int@@ er@@ n@@ al.@@ ap@@ k.@@ v@@ 3@@ .@@ V@@ 3@@ S@@ ch@@ em@@ e@@ V@@ er@@ if@@ i@@ er.@@ parse@@ Sign@@ er(@@ sign@@ er, cer@@ t@@ Fa@@ ctory@@ , sign@@ er@@ Info@@ , cont@@ ent@@ Dig@@ est@@ s@@ To@@ V@@ er@@ if@@ y@@ , min@@ Sdk@@ Version@@ , max@@ Sdk@@ Version@@ ); } catch (com.android.@@ apk@@ si@@ g.@@ ap@@ k.@@ Apk@@ Format@@ Exception | java.nio.@@ Buffer@@ Un@@ der@@ f@@ low@@ Exception e) { sign@@ er@@ Info.@@ add@@ Error@@ (@@ I@@ ss@@ u@@ e.@@ V@@ 3@@ _S@@ I@@ G@@ _M@@ AL@@ F@@ OR@@ ME@@ D@@ _S@@ I@@ G@@ N@@ ER@@ ); return@@ ; } }
@org.junit.Test public void test@@ Method@@ Ref@@ 00@@ 6@@ () throw@@ s java.lang.Exception { new com.android.jack.test.@@ hel@@ per.@@ Runtime@@ Test@@ Hel@@ per@@ (@@ ME@@ TH@@ OD@@ RE@@ F@@ 00@@ 6@@ ).set@@ Source@@ Level@@ (@@ Source@@ Level.@@ J@@ AV@@ A@@ _@@ 8@@ ).@@ compile@@ And@@ Run@@ Test@@ (); }
com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ cat@@ .@@ M@@ en@@ u get@@ M@@ ain@@ M@@ en@@ u@@ (@@ int s@@ lot@@ Id) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ cat@@ .@@ C@@ at@@ Log.@@ d@@ (com.android.@@ st@@ k.@@ St@@ k@@ App@@ Service.@@ LOG@@ _@@ TAG, ("@@ St@@ k@@ App@@ Service@@ , get@@ M@@ ain@@ M@@ en@@ u@@ , si@@ m id@@ : " + s@@ lot@@ Id@@ )); if ((@@ (s@@ lot@@ Id >@@ = 0) && (s@@ lot@@ Id < (m@@ Sim@@ Count@@ ))) && ((m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ M@@ ain@@ C@@ m@@ d@@ ) != null@@ )) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ cat@@ .@@ M@@ en@@ u m@@ en@@ u = m@@ St@@ k@@ Context@@ [@@ s@@ lot@@ Id@@ ]@@ .m@@ M@@ ain@@ C@@ m@@ d@@ .get@@ M@@ en@@ u@@ (); if ((m@@ en@@ u != null@@ ) && ((m@@ Sim@@ Count@@ ) > (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phone@@ Constants.@@ MA@@ X@@ _P@@ H@@ ON@@ E_@@ C@@ O@@ UN@@ T_@@ S@@ ING@@ L@@ E_@@ SI@@ M@@ ))) { if ((m@@ en@@ u@@ .@@ ti@@ t@@ le@@ ) == null@@ ) { com.android.@@ st@@ k.@@ St@@ k@@ M@@ en@@ u@@ Con@@ fig con@@ fig = com.android.@@ st@@ k.@@ St@@ k@@ M@@ en@@ u@@ Config.@@ get@@ Instance@@ (get@@ Application@@ Context@@ ()); java.lang.String l@@ ab@@ e@@ l = config.@@ get@@ L@@ ab@@ el@@ (s@@ lot@@ Id); if (@@ l@@ ab@@ e@@ l != null@@ ) { android.os.@@ Par@@ ce@@ l par@@ ce@@ l = android.os.@@ Par@@ ce@@ l.@@ ob@@ tain@@ (); m@@ en@@ u@@ .@@ write@@ To@@ Par@@ cel@@ (@@ par@@ cel@@ , 0); par@@ ce@@ l.@@ set@@ Data@@ Posi@@ tion@@ (@@ 0); m@@ en@@ u = M@@ en@@ u@@ .@@ C@@ RE@@ AT@@ OR@@ .@@ create@@ From@@ Par@@ cel@@ (@@ par@@ cel@@ ); par@@ ce@@ l.@@ re@@ c@@ y@@ cle@@ (); m@@ en@@ u@@ .@@ ti@@ t@@ le = l@@ ab@@ el@@ ; } } } return m@@ en@@ u@@ ; } else { return null@@ ; } }
public static android.net.@@ M@@ ac@@ Address get@@ ake@@ R@@ an@@ do@@ m@@ Address@@ () { return android.net.@@ M@@ ac@@ Addres@@ s.@@ m@@ ake@@ R@@ an@@ do@@ m@@ Addres@@ s(@@ android.net.@@ M@@ ac@@ Addres@@ s.@@ B@@ A@@ S@@ E_@@ AN@@ D@@ RO@@ ID@@ _M@@ AC@@ , new java.util.@@ R@@ an@@ do@@ m@@ ()); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () { res@@ et@@ L@@ atch@@ (); m@@ Local@@ S@@ ock@@ et = null@@ ; m@@ Local@@ S@@ ock@@ Name = null@@ ; m@@ L@@ ast@@ R@@ ec@@ v@@ Bu@@ f = null@@ ; m@@ Ex@@ i@@ ted = false@@ ; m@@ Recei@@ ve@@ r = new android.net.@@ util.@@ Block@@ ing@@ Socket@@ Read@@ er@@ () { @java.lang.Override protected java.io.FileDescriptor create@@ Socket@@ () { java.io.FileDescriptor s = null@@ ; try { s = android.system.@@ O@@ s.@@ s@@ ocket@@ (android.net.@@ util.@@ A@@ F@@ _@@ IN@@ E@@ T@@ 6@@ , android.net.@@ util.@@ S@@ O@@ C@@ K_@@ D@@ G@@ R@@ AM@@ , android.net.@@ util.@@ IP@@ PRO@@ TO@@ _@@ U@@ D@@ P@@ ); android.system.@@ O@@ s.@@ b@@ ind@@ (s@@ , android.net.@@ util.@@ Block@@ ing@@ Socket@@ Read@@ er@@ Test.@@ LO@@ OP@@ B@@ AC@@ K@@ 6@@ , 0); m@@ Local@@ S@@ ock@@ Name = ((@@ java.net.Inet@@ Socket@@ Addres@@ s) (android.@@ system.@@ O@@ s.get@@ s@@ ock@@ name@@ (s@@ ))); android.system.@@ O@@ s.@@ set@@ s@@ ock@@ op@@ t@@ Time@@ val@@ (s@@ , android.net.@@ util.@@ S@@ O@@ L@@ _S@@ O@@ C@@ KE@@ T, android.net.@@ util.@@ S@@ O@@ _S@@ N@@ D@@ TI@@ ME@@ O@@ , android.net.@@ util.@@ Block@@ ing@@ Socket@@ Read@@ er@@ Test.@@ TI@@ ME@@ O@@ ); } catch (android.@@ system.@@ ErrnoException | java.net.@@ Socket@@ Exception e) { close@@ Socket@@ (s@@ ); fail@@ (); return null@@ ; } m@@ Local@@ S@@ ock@@ et = s; return s; } @java.lang.Override protected void handle@@ Packet@@ (@@ byte@@ [] re@@ c@@ v@@ bu@@ f@@ , int length) { m@@ L@@ ast@@ R@@ ec@@ v@@ Bu@@ f = java.util.Arrays.@@ copy@@ Of@@ (re@@ c@@ v@@ bu@@ f@@ , length); m@@ L@@ atch@@ .@@ count@@ Down@@ (); } @java.lang.Override protected void on@@ Ex@@ it@@ () { m@@ Ex@@ i@@ ted = true@@ ; m@@ L@@ atch@@ .@@ count@@ Down@@ (); } }; }
@com.android.annotations.NonNull @java.lang.Override public java.util.List<@@ java.io.File@@ > get@@ J@@ ar@@ s() { return com.google.common.@@ b@@ ase.@@ J@@ ar@@ s@@ .@@ for@@ m@@ ations.@@ ast.@@ in@@ ner.@@ Multi@@ J@@ ar@@ Imp@@ l@@ (m@@ on@@ ); }
private static java.lang.String parse@@ O@@ th@@ er@@ H@@ om@@ e@@ Par@@ t@@ ner@@ Instance@@ (android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ P@@ P@@ S@@ No@@ de no@@ de@@ ) throw@@ s android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ Par@@ sing@@ Exception { if (@@ no@@ d@@ e.@@ is@@ Le@@ a@@ f@@ ()) { throw new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ Par@@ sing@@ Exception("@@ Le@@ a@@ f no@@ de not expec@@ ted for O@@ th@@ er@@ H@@ om@@ e@@ Par@@ t@@ ne@@ r instance@@ "); java.lang.String f@@ q@@ d@@ n = null@@ ; for (android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ P@@ P@@ S@@ No@@ de ch@@ il@@ d : no@@ d@@ e.get@@ Ch@@ ild@@ r@@ en@@ ()) { switch (@@ ch@@ ild@@ .getName@@ ()) { case android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ NO@@ D@@ E_@@ F@@ Q@@ D@@ N : f@@ q@@ d@@ n = android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ s@@ er.get@@ P@@ ps@@ Node@@ Value@@ (@@ ch@@ ild@@ ); break@@ ; default : throw new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ Par@@ sing@@ Exception(("@@ Un@@ k@@ no@@ w@@ n no@@ de un@@ der O@@ th@@ er@@ H@@ om@@ e@@ Par@@ t@@ ne@@ r instance@@ : " + (@@ ch@@ ild@@ .getName@@ ()))); } } if (f@@ q@@ d@@ n == null@@ ) throw new android.net.@@ w@@ if@@ i.@@ hotspot@@ 2.@@ om@@ ad@@ m.@@ P@@ P@@ S@@ M@@ O@@ Par@@ ser.@@ Par@@ sing@@ Exception("@@ O@@ th@@ er@@ H@@ om@@ e@@ Par@@ t@@ ne@@ r in@@ stan@@ ce mis@@ s@@ ing F@@ Q@@ D@@ N field@@ "); return f@@ q@@ d@@ n@@ ; }
public static native byte@@ [] i@@ 2@@ d@@ _@@ X@@ 509@@ _P@@ U@@ B@@ KE@@ Y@@ (@@ long ct@@ x@@ );
public java.lang.String get@@ Too@@ lch@@ ain@@ Directory@@ (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ core.@@ Too@@ lch@@ a@@ in get@@ Too@@ lch@@ ain@@ Directory@@ s@@ (@@ toolch@@ ain@@ Name, toolch@@ ain@@ Version@@ , ab@@ i@@ );
static java.lang.String[] get@@ Algorith@@ m@@ s(@@ java.lang.String pro@@ per@@ ty@@ Name@@ ) { java.lang.String pro@@ per@@ ty@@ ; if (@@ pro@@ per@@ ty@@ Nam@@ e.@@ isEmpty@@ ()) { java.lang.String pro@@ per@@ ty@@ P@@ ath = pro@@ per@@ ty@@ P@@ .@@ char@@ At@@ (i@@ ); if ((@@ pro@@ per@@ ty@@ P@@ .@@ char@@ At@@ (i@@ .@@ char@@ At@@ (i@@ )) == null@@ ) { return null@@ ; } } return pro@@ per@@ ty@@ ; }
private static java.util.Map@@ <java.lang.String, java.lang.Integ@@ er@@ > string@@ To@@ Map@@ (java.lang.String str@@ ) { java.util.Map@@ <java.lang.String, java.lang.Integ@@ er@@ > ma@@ p = new java.util.@@ Hash@@ Map@@ <@@ >(); for (java.lang.String e@@ n@@ try : str@@ .@@ s@@ pli@@ t@@ ("@@ \n@@ ")) { java.lang.String[] par@@ t@@ s = e@@ n@@ try@@ .@@ s@@ pli@@ t@@ (@@ " "); m@@ ap.@@ put@@ (@@ par@@ ts@@ [0@@ ]@@ , java.lang.Integ@@ er.@@ parse@@ Int@@ (@@ par@@ ts@@ [@@ 1@@ ]@@ )); } return m@@ ap@@ ; }
@@@ vo@@ g@@ ar.@@ target@@ .@@ Test@@ Runner@@ Properties@@ (@@ test@@ Clas@@ s = vo@@ g@@ ar.@@ target@@ .@@ jun@@ it@@ 4@@ .@@ Test@@ Method@@ With@@ Parameter@@ Test@@ .@@ class@@ ) @org.junit.Test public void test@@ Runner@@ _@@ Test@@ Method@@ With@@ Parameter@@ Test@@ _@@ Requ@@ es@@ ted@@ () throw@@ s java.lang.Exception { java.lang.String method@@ Name = "@@ param@@ eter@@ iz@@ ed@@ "; vo@@ g@@ ar.@@ target@@ .@@ Test@@ Run@@ ne@@ r run@@ ne@@ r = test@@ Runner@@ R@@ u@@ le.@@ create@@ Test@@ Runner@@ (m@@ ethod@@ Name); run@@ ner.@@ run@@ (); expected@@ Results@@ ().@@ fail@@ ure@@ (m@@ ethod@@ Name, (("@@ java.lang.@@ Exception@@ : M@@ etho@@ d " + method@@ Name@@ ) + " sho@@ ul@@ d h@@ av@@ e n@@ o param@@ eter@@ s@@ \n@@ "@@ )).@@ com@@ pl@@ et@@ ed@@ N@@ or@@ m@@ all@@ y@@ (); }
public void connection@@ State@@ Changed@@ (android.bluetooth.Bluetooth@@ Device device@@ , int new@@ State@@ , int pre@@ v@@ State@@ ) { if ((@@ pre@@ v@@ State != (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ )) && (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ CONNEC@@ TED@@ ))) { if ((@@ get@@ De@@ vices@@ M@@ atch@@ ing@@ Connection@@ Stat@@ es@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.@@ A@@ U@@ D@@ IO@@ _C@@ ON@@ NEC@@ TA@@ BL@@ E_@@ STA@@ TE@@ S@@ ).@@ size@@ ()) > 1@@ ) { m@@ Native@@ Interface@@ .@@ config@@ ure@@ In@@ b@@ and@@ R@@ ing@@ ing@@ Enabled@@ U@@ sing@@ B@@ si@@ r@@ (@@ false@@ ); m@@ In@@ b@@ and@@ R@@ ing@@ ing@@ Al@@ low@@ ed = false@@ ; } } if ((@@ pre@@ v@@ State != (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ )) && (@@ new@@ State == (android.bluetooth.Bluetooth@@ Pro@@ file.@@ STATE_@@ D@@ IS@@ CONNEC@@ TED@@ ))) { if ((@@ get@@ De@@ vices@@ M@@ atch@@ ing@@ Connection@@ Stat@@ es@@ (com.android.bluetooth.@@ hf@@ p.@@ Headset@@ Service.@@ A@@ U@@ D@@ IO@@ _C@@ ON@@ NEC@@ TA@@ BL@@ E_@@ STA@@ TE@@ S@@ ).@@ size@@ ()) <@@ = 1@@ ) { m@@ Native@@ Interface@@ .@@ config@@ ure@@ In@@ b@@ and@@ R@@ ing@@ ing@@ Enabled@@ U@@ sing@@ B@@ si@@ r@@ (@@ true@@ ); m@@ In@@ b@@ and@@ R@@ ing@@ Al@@ low@@ ed = true@@ ; } } }
public static java.lang.String s@@ am@@ pl@@ es@@ M@@ s@@ g@@ (@@ @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Not@@ Null @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Property@@ Key@@ (@@ resource@@ Bund@@ le = com.google.gct.@@ ide@@ a.@@ util.@@ G@@ ct@@ Bund@@ le.@@ S@@ AM@@ P@@ LE@@ S@@ ) java.lang.String key@@ , @@@ org.@@ j@@ et@@ b@@ r@@ ain@@ s.@@ annotations.@@ Not@@ Null java.lang.Ob@@ jec@@ t.@@ .@@ . param@@ s) { return com@@ .@@ int@@ el@@ li@@ j.@@ Com@@ mon@@ Bund@@ le.@@ message@@ (@@ com.google.gct.@@ ide@@ a.@@ util.@@ G@@ ct@@ Bund@@ le@@ .get@@ Bund@@ le@@ (@@ com.google.gct.@@ ide@@ a.@@ util.@@ G@@ ct@@ Bund@@ le.@@ S@@ AM@@ P@@ LE@@ S@@ ), key@@ , param@@ s); }
public boolean get@@ S@@ n@@ ap@@ sho@@ t@@ S@@ a@@ ve@@ Data@@ () { return m@@ S@@ a@@ ve@@ S@@ n@@ ap@@ sho@@ t@@ ; }
public void test@@ Sign@@ ature@@ _@@ update@@ Array@@ _@@ ne@@ g@@ ative@@ Length@@ _@@ throw@@ s() throw@@ s java.lang.Exception { try { java.security.@@ Sign@@ at@@ ur@@ e s = new libcore.@@ java.security.@@ Sign@@ ature@@ Test.@@ M@@ y@@ Sign@@ ature@@ ("@@ F@@ O@@ O@@ "); s.@@ update@@ (@@ new byte@@ [@@ 4@@ ]@@ , 1, (-1@@ )); fail@@ (); } catch (java.lang.@@ Illegal@@ Argument@@ Exception expected@@ ) { } }
public void test_@@ Bu@@ g@@ 1@@ 50@@ 8@@ 1@@ 4@@ 3@@ 4@@ () throw@@ s java.lang.Exception { java.text.@@ Dec@@ im@@ al@@ For@@ ma@@ t d@@ f = ((@@ java.text.@@ Dec@@ im@@ al@@ Format@@ ) (@@ java.text.@@ Number@@ Format@@ .get@@ C@@ urr@@ enc@@ y@@ Instance@@ (java.util.@@ Loc@@ a@@ le.@@ US@@ ))); try { d@@ f.@@ parse@@ (@@ null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } try { d@@ f.@@ app@@ ly@@ Loc@@ aliz@@ ed@@ P@@ attern@@ (@@ null@@ ); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception u@@ ne@@ x@@ pec@@ ted@@ ) { fail@@ (); } try { d@@ f.@@ app@@ ly@@ P@@ attern@@ (@@ null@@ ); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception u@@ ne@@ x@@ pec@@ ted@@ ) { fail@@ (); } try { d@@ f.@@ app@@ ly@@ P@@ attern@@ (@@ null@@ ); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception u@@ ne@@ x@@ pec@@ ted@@ ) { fail@@ (); } try { d@@ f@@ .@@ for@@ mat@@ (@@ null@@ , new java.lang.String@@ Buffer@@ (), new java.text.@@ Field@@ Posi@@ tion@@ (0@@ )); fail@@ (); } catch (java.lang.@@ Illegal@@ Argument@@ Exception expected@@ ) { } try { d@@ f.@@ parse@@ (@@ null@@ , new java.text.@@ Par@@ se@@ Posi@@ tion@@ (0@@ )); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } d@@ f@@ .set@@ Dec@@ im@@ al@@ Format@@ S@@ y@@ m@@ b@@ ol@@ s@@ (@@ null@@ ); try { d@@ f@@ .set@@ C@@ urr@@ enc@@ y@@ (@@ null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } d@@ f@@ .set@@ Ne@@ g@@ ative@@ Pre@@ fix@@ (@@ null@@ ); d@@ f@@ .set@@ Ne@@ g@@ ative@@ Su@@ f@@ fix@@ (@@ null@@ ); d@@ f@@ .set@@ Posi@@ tive@@ Pre@@ fix@@ (@@ null@@ ); d@@ f@@ .set@@ Posi@@ tive@@ Su@@ f@@ fix@@ (@@ null@@ ); try { d@@ f@@ .set@@ R@@ ound@@ ing@@ Mode@@ (@@ null@@ ); fail@@ (); } catch (java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception expected@@ ) { } }
@java.lang.Override protected void eng@@ ine@@ Res@@ et@@ () { android.os.@@ I@@ Bin@@ der o@@ per@@ ation@@ To@@ ke@@ n = m@@ Oper@@ ation@@ To@@ k@@ en@@ ; if (o@@ per@@ ation@@ To@@ ke@@ n != null@@ ) { m@@ Oper@@ ation@@ To@@ ke@@ n = null@@ ; m@@ Key@@ Stor@@ e.@@ ab@@ ort@@ (o@@ per@@ ation@@ To@@ k@@ en@@ ); } m@@ Ch@@ un@@ k@@ ed@@ ame@@ r = null@@ ; android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s key@@ m@@ as@@ ter@@ Arg@@ s = new android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s(); key@@ m@@ as@@ ter@@ Arg@@ s.add@@ Int@@ (@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ TAG@@ _@@ DI@@ G@@ E@@ S@@ T, m@@ Dig@@ est@@ ); android.@@ security.@@ key@@ m@@ as@@ ter.@@ Oper@@ ation@@ Res@@ ult op@@ Res@@ ult = m@@ Key@@ Stor@@ e.@@ be@@ gin@@ (m@@ Key@@ A@@ li@@ as@@ In@@ Key@@ Store@@ , Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _P@@ UR@@ P@@ O@@ S@@ E_@@ SI@@ G@@ N@@ , true@@ , key@@ m@@ as@@ ter@@ Arg@@ s, null@@ , new android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ Argument@@ s()); if (@@ op@@ Res@@ ult == null@@ ) { throw new android.@@ security.@@ Key@@ Store@@ Connec@@ t@@ Exception@@ (); } else if (((@@ op@@ Res@@ ult.@@ result@@ Code@@ ) != (android.@@ security.@@ key@@ m@@ as@@ ter.@@ Key@@ m@@ as@@ ter@@ De@@ fs.@@ K@@ M@@ _@@ ER@@ R@@ OR@@ _@@ O@@ K@@ )) && ((@@ op@@ Res@@ ult.@@ result@@ Code@@ ) != (@@ Key@@ Stor@@ e.@@ NO@@ _@@ ER@@ R@@ OR@@ ))) { throw new android.@@ security.@@ Cryp@@ to@@ Oper@@ ation@@ Exception("@@ Faile@@ d to st@@ ar@@ t key@@ st@@ or@@ e o@@ per@@ ation@@ ", android.@@ security.@@ Key@@ m@@ as@@ ter@@ Utils.@@ get@@ Exception@@ For@@ Key@@ m@@ as@@ ter@@ Error@@ (@@ op@@ Res@@ ult.@@ result@@ Code@@ )); } m@@ Oper@@ ation@@ To@@ ke@@ n = op@@ Res@@ ult.@@ to@@ k@@ en@@ ; if ((m@@ Oper@@ ation@@ To@@ k@@ en@@ ) == null@@ ) { throw new android.@@ security.@@ Cryp@@ to@@ Oper@@ ation@@ Exception("@@ Key@@ st@@ or@@ e return@@ ed null o@@ per@@ ation to@@ k@@ en@@ "); } m@@ Ch@@ un@@ k@@ ed@@ ame@@ r = new android.@@ security.@@ Key@@ Store@@ Oper@@ ation@@ Ch@@ un@@ k@@ ed@@ Stream@@ er@@ (@@ new android.@@ security.@@ Key@@ Store@@ H@@ m@@ ac@@ S@@ p@@ i.@@ Key@@ Store@@ Stream@@ ing@@ Con@@ s@@ um@@ er@@ (m@@ Key@@ Store@@ , m@@ Oper@@ ation@@ To@@ k@@ en@@ )); }
@java.lang.Override public void icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ (java.lang.String a@@ id, int p@@ 2, android.os.@@ Message result@@ ) { android.hardware.@@ rad@@ io.@@ V@@ 1_@@ 0.@@ I@@ Rad@@ i@@ o radioProx@@ y = get@@ Rad@@ ioProx@@ y@@ (@@ result@@ ); if (@@ radioProx@@ y != null@@ ) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ Requ@@ est r@@ r = ob@@ tain@@ Request@@ (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ _RE@@ Q@@ UE@@ ST_@@ SI@@ M@@ _@@ OP@@ EN@@ _C@@ H@@ AN@@ NE@@ L, result@@ , m@@ RIL@@ Default@@ W@@ or@@ k@@ Source@@ ); if (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ RIL@@ J@@ _@@ LOG@@ D@@ ) { if (android.os.@@ Build@@ .@@ IS@@ _@@ DE@@ BU@@ G@@ ABL@@ E@@ ) { ri@@ l@@ j@@ Log@@ ((((@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ ))) + " a@@ id = ") + a@@ id@@ ) + " p@@ 2 = ") + p@@ 2@@ )); } else { ri@@ l@@ j@@ Log@@ ((((@@ r@@ r.@@ ser@@ ial@@ String@@ ()) + "@@ > ") + (@@ com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ RIL@@ .@@ request@@ To@@ String@@ (rr@@ .m@@ Request@@ )))); } } try { radioProx@@ y.@@ icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ (rr@@ .m@@ Ser@@ ial@@ , con@@ ver@@ t@@ Null@@ To@@ Empty@@ String(@@ a@@ id@@ ), p@@ 2@@ ); } catch (android.os.RemoteException | java.lang.Runtime@@ Exception e) { handle@@ Rad@@ ioProx@@ y@@ Exception@@ For@@ R@@ R@@ (rr@@ , "@@ icc@@ Open@@ Log@@ ic@@ al@@ Channel@@ ", e); } } }
void message@@ From@@ Native@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Stack@@ Ev@@ ent st@@ ack@@ Event@@ ) { synchronized@@ (m@@ StateMach@@ in@@ es) { android.@@ bluetooth.Bluetooth@@ Device de@@ vice = st@@ ack@@ Ev@@ ent.@@ device@@ ; if ((@@ st@@ ack@@ Ev@@ ent.@@ typ@@ e) == (@@ A@@ 2@@ dp@@ Stack@@ Ev@@ ent.@@ EVEN@@ T_@@ TYPE_@@ C@@ O@@ DE@@ C@@ _C@@ ON@@ FI@@ G@@ _C@@ H@@ AN@@ G@@ ED@@ )) { android.@@ bluetooth.Bluetooth@@ Device z@@ er@@ o@@ Device = m@@ Adap@@ t@@ er.get@@ Remote@@ Device@@ ("@@ 00@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ :@@ 00@@ "); if ((@@ de@@ vice == null@@ ) || (device@@ .@@ equals(@@ z@@ er@@ o@@ Device@@ ))) { m@@ Local@@ Co@@ dec@@ Statu@@ s = st@@ ack@@ Ev@@ ent.@@ cod@@ ec@@ Status@@ ; return@@ ; } } com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ StateMach@@ in@@ e s@@ m = get@@ StateMach@@ ine@@ (device@@ ); if (s@@ m == null@@ ) { android.util.Log.e@@ (com.android.bluetooth.@@ a@@ 2@@ d@@ p.@@ A@@ 2@@ dp@@ Service.TAG, ("@@ Can@@ not pro@@ ces@@ s st@@ ac@@ k event@@ : n@@ o st@@ ate m@@ ach@@ ine@@ : " + st@@ ack@@ Event@@ )); return@@ ; } s@@ m.@@ send@@ Message@@ (@@ A@@ 2@@ dp@@ StateMachine.@@ STA@@ C@@ K_@@ EVEN@@ T, st@@ ack@@ Event@@ ); } }
@org.junit.Test public void test@@ 0@@ 1@@ 4@@ () throw@@ s java.lang.Exception { com.android.jack.@@ java@@ 7@@ .@@ try@@ w@@ ith@@ resources.@@ test@@ 00@@ 2.@@ jack.@@ Tr@@ y@@ With@@ Res@@ ources@@ Test@@ 00@@ 2.@@ m@@ 1@@ 4@@ (1@@ 5@@ ); }
@javax.annotation.@@ N@@ on@@ null private static java.util.@@ Proper@@ ti@@ es load@@ Library@@ Properties@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.sched.vfs.@@ Input@@ VF@@ S v@@ f@@ s) throw@@ s com.android.jack.library.@@ Not@@ Jack@@ Library@@ Exception { java.util.@@ Proper@@ ti@@ es jack@@ Library@@ Proper@@ ti@@ es = new java.util.@@ Properties@@ (); try { com.android.sched.vfs.@@ Input@@ V@@ File lib@@ Pro@@ p = v@@ f@@ s.get@@ Root@@ Input@@ V@@ Dir@@ ().get@@ Input@@ V@@ File@@ (@@ Jack@@ Librar@@ y.@@ L@@ I@@ B@@ R@@ AR@@ Y@@ _P@@ RO@@ P@@ ER@@ TI@@ E@@ S_@@ V@@ P@@ A@@ TH@@ ); java.io.@@ Input@@ Stream input@@ Stream = null@@ ; try { input@@ Stream = lib@@ Pro@@ p@@ .get@@ InputStream@@ (); librar@@ y@@ Proper@@ ties.@@ load@@ (in@@ put@@ Stream@@ ); } final@@ l@@ y { if (in@@ put@@ Stream != null@@ ) { try { input@@ Stream@@ .@@ close(); } catch (java.io.IOException e) { com.android.jack.library.@@ Jack@@ Library@@ Fa@@ ctor@@ y.@@ logg@@ er.@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ W@@ AR@@ N@@ ING@@ , "@@ Faile@@ d to c@@ lo@@ se '@@ '@@ {@@ 0@@ }@@ '@@ '@@ ", lib@@ Pro@@ p@@ .get@@ Location@@ ().get@@ Des@@ cription@@ ()); } } catch (com.android.s@@ ched.@@ util.@@ file.@@ Not@@ File@@ Or@@ Directory@@ Exception | com.android.sched.util.file.@@ No@@ Su@@ ch@@ File@@ Exception | com.android.sched.util.file.@@ W@@ ron@@ g@@ Permission@@ Exception e) { throw new com.android.jack.library.@@ Not@@ Jack@@ Library@@ Exception(@@ v@@ f@@ s.get@@ Location@@ ()); } catch (java.io.IOException e) { throw new com.android.jack.library.@@ Not@@ Jack@@ Library@@ Exception(@@ v@@ f@@ s.get@@ Location@@ ()); } return librar@@ y@@ Properties@@ ; }
public java.net.@@ Socket@@ Address get@@ pe@@ er@@ name@@ (java.io.FileDescriptor f@@ d@@ ) throw@@ s android.system.@@ ErrnoException { return os.@@ get@@ pe@@ er@@ name@@ (f@@ d@@ ); }
public final void on@@ Reg@@ ister@@ ed@@ (@@ @@@ android.telephony.@@ ims.@@ st@@ ub@@ .@@ Ims@@ Reg@@ is@@ tr@@ ation@@ Imp@@ l@@ Bas@@ e.@@ Ims@@ Reg@@ is@@ tr@@ ation@@ T@@ ec@@ h int im@@ s@@ Rad@@ io@@ T@@ ec@@ h@@ ) { on@@ Ims@@ Connec@@ ted@@ (@@ im@@ s@@ Rad@@ io@@ T@@ ec@@ h@@ ); }
@java.lang.Override public void to@@ u@@ ch@@ (@@ int x@@ , int y@@ , com.android.@@ mon@@ key@@ run@@ ner.@@ ad@@ b.@@ T@@ ou@@ ch@@ P@@ res@@ s@@ Type typ@@ e) { try { switch (@@ typ@@ e) { case D@@ O@@ W@@ N : man@@ ag@@ er.@@ to@@ u@@ ch@@ Down@@ (@@ x@@ , y@@ ); break@@ ; case U@@ P : man@@ ag@@ er.@@ to@@ u@@ ch@@ Up@@ (@@ x@@ , y@@ ); break@@ ; case D@@ O@@ W@@ N@@ _@@ AN@@ D_@@ U@@ P : man@@ ag@@ er.@@ t@@ ap@@ (@@ x@@ , y@@ ); break@@ ; } } catch (java.io.IOException e) { com.android.@@ mon@@ key@@ run@@ ner.@@ ad@@ b.@@ Adb@@ Mon@@ key@@ Device.@@ LOG@@ .@@ log@@ (java.util.@@ logg@@ ing.@@ Level.@@ SE@@ V@@ ER@@ E, ((((@@ ("@@ Error send@@ ing to@@ u@@ ch event@@ : " + x@@ ) + " ") + y@@ ) + " ") + type@@ ), e); } }
private boolean is@@ Phone@@ State@@ Id@@ le@@ () { for (@@ int i = 0; i < (android.@@ telephony.@@ Telephony@@ Manager.get@@ Default@@ ().get@@ Phone@@ Count@@ ()); i++) { com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phon@@ e phon@@ e = com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ Phone@@ Fa@@ ctory@@ .get@@ Phone@@ (i@@ ); if ((@@ phon@@ e != null@@ ) && ((@@ phon@@ e.get@@ State@@ ()) != (@@ Phone@@ Constants.@@ State.@@ ID@@ LE@@ ))) { log@@ (("@@ is@@ Phone@@ State@@ Id@@ le@@ : Vo@@ ic@@ e cal@@ l ac@@ ti@@ v@@ e on sub@@ : " + i@@ )); return false@@ ; } } return true@@ ; }
@java.lang.Override public void de@@ lete@@ Trans@@ port@@ Mode@@ Tr@@ an@@ s@@ for@@ m@@ (@@ int resource@@ Id) throw@@ s android.os.@@ RemoteException { synchronized@@ (m@@ Tr@@ an@@ s@@ for@@ m@@ Record@@ s) { com.android.server.@@ IpSec@@ Service.@@ Tr@@ an@@ s@@ for@@ m@@ Recor@@ d re@@ cor@@ d@@ ; re@@ cor@@ d = m@@ Tr@@ an@@ s@@ for@@ m@@ Record@@ s.get@@ (@@ resource@@ Id); if (re@@ cor@@ d == null@@ ) { throw new java.lang.Illegal@@ Argument@@ Exception@@ ((("@@ Tr@@ an@@ s@@ for@@ m " + resource@@ Id) + " is not ava@@ il@@ able to b@@ e de@@ let@@ ed@@ ")); } if (((@@ re@@ cor@@ d.@@ p@@ id@@ ) != (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ P@@ id@@ ())) || ((@@ re@@ cor@@ d.@@ uid@@ ) != (android.os.@@ B@@ ind@@ er.get@@ Call@@ ing@@ U@@ id@@ ()))) { throw new java.lang.@@ Sec@@ urit@@ y@@ Exception("@@ On@@ l@@ y th@@ e o@@ w@@ ne@@ r of an Ip@@ Se@@ c Tr@@ an@@ s@@ for@@ m ma@@ y de@@ let@@ e it@@ !@@ "); } re@@ cor@@ d.@@ re@@ le@@ ase@@ (); m@@ Tr@@ an@@ s@@ for@@ m@@ Record@@ s.@@ remove@@ (@@ resource@@ Id); } }
public static void main@@ () { try { Local@@ Class@@ 3@@ .@@ C@@ C@@ .@@ new@@ Instance@@ (); java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ Local@@ Class@@ 3 su@@ c@@ ce@@ ed@@ "); } catch (java.lang.Exception ex@@ ) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ ("@@ G@@ o@@ t u@@ ne@@ x@@ pec@@ ted Local@@ Class@@ 3 fail@@ ure@@ "); ex@@ .@@ p@@ r@@ int@@ Stack@@ Tra@@ ce@@ (java.lang.@@ System.@@ out); } }
@java.lang.Override public void run@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ De@@ fin@@ ed@@ Class@@ Or@@ Inter@@ face typ@@ e) throw@@ s java.lang.Exception { if (@@ typ@@ e.@@ is@@ Ex@@ ter@@ nal@@ ()) { return@@ ; } if (@@ has@@ Pro@@ b@@ lem@@ ati@@ c@@ Annot@@ ation@@ (@@ type@@ )) { typ@@ e.@@ add@@ Mark@@ er(@@ M@@ ain@@ Dex@@ Mark@@ er.@@ IN@@ STA@@ N@@ C@@ E); } }
@java.lang.Override public void on@@ Create@@ (android.os.@@ Bund@@ le ic@@ le@@ ) { super@@ .@@ on@@ Create@@ (@@ ic@@ le@@ ); com.@@ android@@ .@@ int@@ er@@ n@@ al.@@ telephony.@@ cat@@ .@@ C@@ at@@ Log.@@ d@@ (com.android.@@ st@@ k.@@ St@@ k@@ M@@ en@@ u@@ Ac@@ tivity.@@ LOG@@ _@@ TAG, "@@ on@@ Create@@ "); request@@ W@@ in@@ do@@ w@@ Fe@@ ature@@ (@@ W@@ in@@ do@@ w@@ .@@ F@@ E@@ AT@@ UR@@ E_@@ NO@@ _@@ TI@@ T@@ L@@ E); set@@ Content@@ View@@ (@@ R.@@ layout.@@ st@@ k@@ _@@ m@@ en@@ u@@ _@@ list@@ ); m@@ In@@ stan@@ ce = this@@ ; m@@ T@@ it@@ le@@ Text@@ Vi@@ e@@ w = ((@@ android.@@ widget@@ .@@ Text@@ View@@ ) (@@ find@@ View@@ By@@ Id@@ (@@ R.@@ id.@@ ti@@ t@@ le@@ _@@ tex@@ t@@ ))); m@@ T@@ it@@ le@@ I@@ con@@ Vi@@ e@@ w = ((@@ android.@@ widget@@ .@@ Image@@ View@@ ) (@@ find@@ View@@ By@@ Id@@ (@@ R.@@ id.@@ ti@@ t@@ le@@ _@@ i@@ con@@ ))); m@@ Pro@@ g@@ res@@ s@@ Vi@@ e@@ w = ((@@ android.@@ widget@@ .@@ Pro@@ g@@ res@@ s@@ B@@ ar@@ ) (@@ find@@ View@@ By@@ Id@@ (@@ R.@@ id.@@ pro@@ g@@ res@@ s@@ _@@ b@@ ar@@ ))); m@@ Context = get@@ Base@@ Context@@ (); get@@ List@@ View@@ ().@@ set@@ On@@ Create@@ Context@@ M@@ en@@ u@@ Listener@@ (@@ this@@ ); in@@ it@@ From@@ Intent@@ (get@@ Intent@@ ()); }
@java.lang.Override public void set@@ Property@@ (@@ @javax.annotation.@@ N@@ on@@ null java.lang.String key@@ , @javax.annotation.@@ N@@ on@@ null java.lang.String valu@@ e) { option@@ s.add@@ Property@@ (@@ key@@ , valu@@ e); }
public java.lang.String get@@ S@@ ys@@ ro@@ o@@ t@@ (java.lang.String ab@@ i@@ ) { return ((((@@ n@@ dk@@ Directory@@ ) + "@@ /@@ pla@@ t@@ for@@ ms@@ /@@ ") + (@@ compile@@ Sdk@@ Version@@ )) + "@@ /@@ arch@@ -@@ ") + (com.android.@@ build@@ .@@ grad@@ le@@ .@@ int@@ er@@ n@@ al.@@ N@@ dk@@ Handler.@@ AR@@ CH@@ I@@ TE@@ C@@ T@@ UR@@ E_@@ S@@ TR@@ ING@@ .get@@ (@@ ab@@ i@@ )); }
@java.lang.Override public org.eclipse.swt.@@ g@@ raphic@@ s.@@ Im@@ age load@@ Cap@@ t@@ ure@@ (com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ W@@ in@@ do@@ w w@@ in@@ do@@ w@@ , com.android.@@ hierarchyviewerlib.@@ mode@@ ls.@@ View@@ No@@ de view@@ Node@@ ) { com.android.ddmlib.@@ C@@ li@@ ent c = w@@ in@@ do@@ w@@ .get@@ Client@@ (); if (@@ c == null@@ ) { return null@@ ; } java.lang.String view@@ R@@ oo@@ t = w@@ in@@ do@@ w@@ .get@@ T@@ it@@ le@@ (); com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ Cap@@ t@@ ure@@ View@@ Handle@@ r handle@@ r = new com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ Cap@@ t@@ ure@@ View@@ Handler@@ (); try { com.android.ddmlib.@@ Handle@@ View@@ De@@ bu@@ g.@@ cap@@ t@@ ure@@ View@@ (c@@ , view@@ R@@ oo@@ t, view@@ No@@ d@@ e.toString@@ (), hand@@ ler@@ ); } catch (java.io.IOException e) { com.android.ddmlib.@@ Log.@@ e@@ (com.android.@@ hierarchyviewerlib.@@ device@@ .@@ D@@ dm@@ View@@ Debug@@ Device.@@ TAG, e); return null@@ ; } byte@@ [] dat@@ a = hand@@ l@@ er.get@@ Data@@ (1@@ 0, java.util.@@ concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ); return dat@@ a == null ? null : new org.eclipse.swt.@@ g@@ raphic@@ s.@@ Image@@ (@@ org.eclipse.swt.@@ widget@@ s.@@ Display@@ .get@@ Default@@ (), new java.io.@@ ByteArray@@ InputStream@@ (d@@ ata@@ )); }
private boolean is@@ U@@ se@@ On@@ ly@@ Rs@@ r@@ p@@ For@@ L@@ te@@ Level@@ () { android.telephony.@@ C@@ arrier@@ Config@@ Manager config@@ Manager = ((@@ android.telephony.@@ C@@ arrier@@ Config@@ Manager@@ ) (m@@ Phon@@ e.get@@ Context@@ ().get@@ System@@ Service@@ (@@ Context.@@ C@@ AR@@ R@@ I@@ ER@@ _C@@ ON@@ FI@@ G@@ _S@@ ER@@ VIC@@ E@@ ))); android.os.@@ Per@@ si@@ st@@ able@@ Bund@@ le con@@ fig = null@@ ; if (@@ config@@ Manager != null@@ ) { con@@ fig = config@@ Manager.get@@ Config@@ For@@ Sub@@ Id@@ (m@@ Phon@@ e.get@@ Sub@@ Id@@ ()); } if (@@ con@@ fig != null@@ ) { return config.@@ get@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y_@@ US@@ E_@@ ON@@ L@@ Y_@@ RS@@ R@@ P@@ _@@ F@@ OR@@ _@@ L@@ TE_@@ SI@@ G@@ N@@ AL@@ _@@ B@@ AR@@ _@@ B@@ O@@ O@@ L); } else { return android.telephony.@@ C@@ arrier@@ Config@@ Manager.get@@ Default@@ Config@@ ().get@@ Boole@@ an@@ (@@ C@@ arrier@@ Config@@ Manager.@@ KE@@ Y_@@ US@@ E_@@ ON@@ L@@ Y_@@ RS@@ R@@ P@@ _@@ F@@ OR@@ _@@ L@@ TE_@@ SI@@ G@@ N@@ AL@@ _@@ B@@ AR@@ _@@ B@@ O@@ O@@ L); } }
private void check@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ () { android.renderscript.Allocation in@@ Value = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 4@@ , -@@ 7@@ 2@@ 1@@ 7@@ 7@@ 7@@ 7@@ 7@@ 6@@ 4@@ 8@@ 7@@ 7@@ 7@@ 7@@ 9@@ 1@@ 4@@ 8@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 4@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ (in@@ Value@@ , out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.@@ UN@@ SI@@ G@@ N@@ ED@@ _@@ 8@@ , 4@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ (in@@ Value@@ , out); ve@@ r@@ if@@ y@@ Results@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ (in@@ Value@@ , out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ C@@ l@@ z@@ U@@ char@@ 4@@ U@@ char@@ 4@@ : " + (e.toString()))); } }
private void check@@ Log@@ 10@@ Float2Float2@@ () { android.renderscript.Allocation in = Create@@ R@@ an@@ do@@ m@@ Allocation@@ (mRS, Element.DataType.FLOAT_32, 2, -@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ 4@@ L); try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); script@@ .@@ for@@ Each@@ _test@@ Log@@ 10@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Log@@ 10@@ Float2Float2@@ (in, out, false@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Log@@ 10@@ Float2Float2@@ : " + (e.toString()))); } try { android.renderscript.Allocation out = android.renderscript.Allocation.createSized(mRS, Get@@ Element@@ (mRS, Element.DataType.FLOAT_32, 2@@ ), android.renderscript.cts.INPUTSIZE); scriptRelax@@ ed@@ .@@ for@@ Each@@ _test@@ Log@@ 10@@ Float2Float2@@ (in, out); ve@@ r@@ if@@ y@@ Results@@ Log@@ 10@@ Float2Float2@@ (in, out, true@@ ); } catch (java.lang.Exception e) { throw new android.renderscript.RSRuntimeException(("RenderScript. Can't invoke for@@ Each@@ _test@@ Log@@ 10@@ Float2Float2@@ : " + (e.toString()))); } }
protected boolean m@@ u@@ st@@ Tra@@ ce@@ O@@ verrid@@ ing@@ Method@@ (@@ @javax.annotation.@@ N@@ on@@ null com.android.jack.ir.ast.J@@ M@@ etho@@ d method@@ ) { synchronized@@ (m@@ ethod@@ ) { com.android.jack.@@ an@@ al@@ y@@ si@@ s.@@ tr@@ ac@@ er.@@ Bas@@ ic@@ Tr@@ ac@@ er@@ Mark@@ er m@@ ark@@ er = method@@ .get@@ Mark@@ er@@ (m@@ ark@@ er@@ Class@@ ); if (m@@ ark@@ er != null@@ ) { return m@@ ark@@ er.@@ m@@ u@@ st@@ Tra@@ ce@@ O@@ verrid@@ ing@@ Method@@ s(); } } return false@@ ; }
@java.lang.Override public void on@@ Input@@ Buffer@@ A@@ va@@ il@@ able@@ (android.@@ media.@@ Media@@ Code@@ c cod@@ ec@@ , int index@@ ) { synchronized@@ (m@@ Input@@ Buffer@@ In@@ d@@ ic@@ es) { m@@ Input@@ Buffer@@ In@@ d@@ ic@@ es.@@ add@@ (in@@ dex@@ ); } }
public void set@@ Version@@ code@@ (java.lang.String ver@@ sion@@ Code@@ ) { if ((@@ ver@@ sion@@ Co@@ d@@ e.@@ length@@ ()) > 0) { try { m@@ Version@@ Co@@ de = java.lang.Integ@@ er.@@ de@@ code@@ (@@ ver@@ sion@@ Code@@ ); } catch (java.lang.@@ Number@@ Format@@ Exception e) { java.lang.System.out.@@ p@@ r@@ int@@ ln@@ (@@ java.lang.String@@ .@@ for@@ mat@@ ("@@ W@@ AR@@ N@@ ING@@ : I@@ gn@@ or@@ ing ver@@ sion cod@@ e valu@@ e '@@ %@@ s@@ '@@ .@@ ", ver@@ sion@@ Code@@ )); } }
public boolean a@@ void@@ B@@ ad@@ W@@ if@@ i@@ () { return m@@ M@@ ult@@ in@@ et@@ work@@ Polic@@ y@@ Track@@ er.@@ current@@ Value@@ (); }
public void run@@ () { com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t p@@ R@@ S = com.android.@@ rs.@@ test.@@ Render@@ Scrip@@ t.@@ create@@ (m@@ C@@ t@@ x@@ ); com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ k@@ er@@ nel@@ _@@ stru@@ c@@ t s = new com.android.@@ rs.@@ test.@@ Script@@ C@@ _@@ k@@ er@@ nel@@ _@@ stru@@ ct@@ (p@@ RS@@ ); p@@ RS@@ .set@@ Message@@ Handler@@ (m@@ Rs@@ Message@@ ); in@@ itializ@@ e@@ G@@ lo@@ b@@ al@@ s(@@ p@@ RS@@ , s); s@@ .@@ for@@ Each@@ _@@ in@@ it@@ _@@ va@@ r@@ s(@@ A@@ ); s@@ .@@ for@@ Each@@ _@@ ro@@ o@@ t@@ (@@ A@@ , B@@ ); s.@@ invok@@ e@@ _@@ ve@@ r@@ if@@ y@@ _@@ ro@@ o@@ t@@ (); s.@@ invok@@ e@@ _@@ k@@ er@@ nel@@ _@@ stru@@ ct@@ _test@@ (); p@@ RS@@ .@@ fin@@ is@@ h@@ (); wait@@ For@@ Message@@ (); p@@ RS@@ .@@ d@@ est@@ ro@@ y@@ (); }
public void on@@ Iface@@ Add@@ ed@@ (@@ int type@@ , java.lang.String name@@ ) { m@@ Log.@@ d@@ ((@@ (("@@ on@@ Iface@@ Ad@@ de@@ d " + typ@@ e) + ", name@@ : ") + name@@ )); }
public void pro@@ ject@@ R@@ en@@ am@@ ed@@ (@@ org.eclipse.@@ core.@@ resources.@@ I@@ Pro@@ ject pro@@ ject@@ , org.eclipse.@@ core.@@ run@@ tim@@ e.@@ IP@@ ath f@@ rom@@ ) { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Project@@ State r@@ en@@ am@@ ed@@ State = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .get@@ Project@@ State@@ (pro@@ ject@@ ); if (r@@ en@@ am@@ ed@@ State.@@ is@@ Library@@ ()) { dis@@ po@@ se@@ Library@@ Project@@ (f@@ ro@@ m.@@ las@@ t@@ Se@@ g@@ ment@@ ()); synchronized@@ (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .@@ s@@ Lock) { for (com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Project@@ State pro@@ ject@@ State : com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .@@ s@@ Project@@ State@@ Map@@ .@@ valu@@ es@@ ()) { if ((@@ pro@@ ject@@ State != r@@ en@@ am@@ ed@@ State@@ ) && (pro@@ ject@@ State.@@ is@@ M@@ is@@ sing@@ Librar@@ ies@@ ())) { org.eclipse.@@ core.@@ run@@ tim@@ e.@@ IP@@ ath old@@ Re@@ l@@ ative@@ P@@ ath = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .m@@ ake@@ Re@@ l@@ ative@@ To@@ (f@@ rom@@ , pro@@ ject@@ Stat@@ e.get@@ Project@@ ().get@@ F@@ ull@@ Path@@ ()); org.eclipse.@@ core.@@ run@@ tim@@ e.@@ IP@@ ath new@@ Re@@ l@@ ative@@ P@@ ath = com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .m@@ ake@@ Re@@ l@@ ative@@ To@@ (pro@@ jec@@ t.get@@ F@@ ull@@ Path@@ (), pro@@ ject@@ Stat@@ e.get@@ Project@@ ().get@@ F@@ ull@@ Path@@ ()); com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Project@@ State.@@ Library@@ State lib@@ State = pro@@ ject@@ State.@@ update@@ Library@@ (@@ old@@ Re@@ l@@ ative@@ Path@@ .@@ toString@@ (), new@@ Re@@ l@@ ative@@ Path@@ .@@ toString@@ (), r@@ en@@ am@@ ed@@ State@@ ); if (@@ lib@@ State != null@@ ) { com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .@@ Link@@ Up@@ Up@@ Up@@ Up@@ date@@ Bund@@ le b@@ und@@ le = new com.android.ide.@@ eclipse.ad@@ t@@ .@@ int@@ er@@ n@@ al.@@ s@@ dk@@ .@@ Sdk@@ .@@ Link@@ Up@@ date@@ Bund@@ le@@ (); b@@ und@@ le.@@ m@@ Pro@@ ject = pro@@ ject@@ Stat@@ e.get@@ Project@@ (); b@@ und@@ le.@@ m@@ New@@ Library@@ Project@@ s = new org.eclipse.@@ core.@@ resources.@@ I@@ Project@@ []{ lib@@ Stat@@ e.get@@ Project@@ State@@ ().get@@ Project@@ () }; b@@ und@@ le.@@ mC@@ le@@ an@@ up@@ C@@ P@@ E = false@@ ; start@@ Action@@ Bund@@ le@@ (b@@ und@@ le@@ ); } } } } } } }
