@java.lang.Override protected com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ Group@@ Fiel@@ d.@@ UUID@@ .getName@@ ()@@ ).get@@ As@@ String@@ ()); return group@@ Cache@@ .get@@ ().get@@ (@@ u@@ id@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ ); }
@java.lang.Override protected com.google.gerrit.server.project.Project@@ Data from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ Project@@ Fiel@@ d.@@ NAM@@ E@@ .getName@@ ()@@ ).get@@ As@@ String@@ ()); return project@@ Cache@@ .get@@ ().get@@ (@@ name@@ Key@@ ).to@@ Project@@ Data@@ (); }
protected abstract java.util.List<@@ com.google.g@@ son.@@ Json@@ O@@ bject do@@ c@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s);
@java.lang.Override protected com.google.gerrit.server.account.Account@@ State from@@ Doc@@ (@@ com.google.g@@ son.@@ Json@@ O@@ bject json@@ , java.util.@@ Set@@ <java.lang.String> fi@@ el@@ d@@ s) { com.google.g@@ son.@@ Json@@ E@@ le@@ ment s@@ our@@ ce = json@@ .get@@ ("@@ _@@ source@@ "); if (s@@ our@@ ce == null@@ ) { s@@ our@@ ce = json@@ .get@@ As@@ Json@@ Object@@ ().get@@ ("@@ fi@@ el@@ d@@ s@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ source@@ .get@@ As@@ Json@@ Object@@ ().get@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ ID@@ .getName@@ ()@@ ).get@@ As@@ In@@ t@@ ()); return account@@ Cache@@ .get@@ ().get@@ (id@@ ); }
@java.lang.Override public com.google.gwtorm.server.@@ Result@@ Set<@@ V@@ > read@@ () throw@@ s com.google.gwtorm.server.OrmException { return read@@ Im@@ pl@@ (("@@ Doc@@ ument@@ s " + (@@ do@@ c@@ , op@@ t@@ s.@@ fi@@ el@@ d@@ s@@ ())); }
@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open@@ () throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb d@@ b = de@@ leg@@ ate.@@ open@@ (); if (m@@ igration.@@ read@@ Changes@@ ()) { if (m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ()) { d@@ b = new com.google.gerrit.server.@@ schema.@@ No@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } d@@ b = new com.google.gerrit.reviewdb.server.@@ Dis@@ allow@@ Read@@ Changes@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } if (@@ group@@ s@@ M@@ igration.@@ read@@ From@@ NoteDb@@ ()) { if (@@ group@@ s@@ M@@ igration.@@ dis@@ able@@ Group@@ Review@@ Db@@ ()) { d@@ b = new com.google.gerrit.server.@@ schema.@@ No@@ Group@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } d@@ b = new com.google.gerrit.reviewdb.server.@@ Dis@@ allow@@ From@@ Group@@ s@@ Review@@ Db@@ W@@ rap@@ per@@ (db@@ ); } return db@@ ; }
static java.lang.String get@@ Group@@ Name@@ (com.google.gerrit.server.@@ account.@@ Group@@ Cach@@ e group@@ Cache@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { java.lang.String u@@ id = group@@ U@@ u@@ id@@ .get@@ (); java.lang.String name = group@@ Cache@@ .get(@@ group@@ U@@ u@@ id@@ ).@@ map@@ In@@ ternal@@ Group@@ :@@ get@@ Name@@ ).@@ or@@ E@@ l@@ se@@ (@@ u@@ id@@ ); return com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ Update@@ .@@ for@@ m@@ at@@ Name@@ Email@@ (@@ name, group@@ Control@@ , u@@ id@@ ); }
@org.junit.Test public void in@@ clu@@ de@@ External@@ Group@@ () throw@@ s java.lang.Exception { java.lang.String g = create@@ Group@@ ("@@ group@@ "); java.lang.String sub@@ U@@ u@@ id = Sy@@ st@@ em@@ Group@@ Back@@ en@@ d.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ .get@@ (); g@@ Api@@ .group@@ s().@@ id(@@ g@@ ).@@ add@@ Group@@ s(@@ sub@@ U@@ u@@ id@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> sub@@ group@@ s = g@@ Api@@ .group@@ s().@@ id(@@ g@@ ).@@ in@@ clu@@ ded@@ Group@@ s(); assert@@ Th@@ at(@@ sub@@ s).@@ hasSize@@ (1); assert@@ Th@@ at(@@ sub@@ group@@ s.get(@@ 0@@ ).@@ id@@ ).@@ isEqualTo(@@ group@@ U@@ u@@ id@@ .@@ replace@@ ("@@ :@@ ", "@@ %@@ 3@@ A@@ ")); assert@@ Th@@ at(@@ sub@@ s.get(@@ 0@@ )@@ .group@@ Id@@ ).@@ isNull@@ (); if (@@ group@@ s@@ M@@ igration.@@ write@@ To@@ NoteDb@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .group@@ s().@@ id(@@ g@@ ).get@@ ().@@ id@@ ); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = com.google.gerrit.server.g@@ roup@@ .@@ test@@ ing.@@ Test@@ Group@@ (repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ id@@ )); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ message@@ ().@@ isEqualTo@@ ("@@ Cre@@ ate group@@ "); assert@@ Th@@ at(@@ log@@ .get(@@ 1@@ )).@@ message@@ ().@@ isEqualTo@@ ("@@ Update group@@ Update group@@ \n@@ \n@@ \n@@ Add@@ -@@ group@@ :@@ \n@@ "); g@@ lobal@@ User@@ s = g@@ lobal@@ User@@ s@@ Reg@@ ist@@ er@@ ed@@ User@@ s@@ >@@ "); java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ di@@ t = group@@ s@@ Au@@ dit@@ (db, repo@@ , u@@ u@@ id@@ ); assert@@ Th@@ at(@@ au@@ dit@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ au@@ dit@@ .get(@@ 0@@ ).get@@ Inclu@@ de@@ UUID@@ ()).@@ isEqualTo(@@ Sy@@ st@@ em@@ Group@@ Back@@ en@@ d.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); } }
@java.lang.Override protected void configure() { bind(@@ com.google.gerrit.extensions.@@ config.@@ Capabili@@ ty@@ De@@ fin@@ i@@ tion@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (@@ M@@ on@@ it@@ o@@ ring@@ Capabili@@ ty.@@ ID@@ )).@@ to@@ (com.googlesource.gerrit.plugins.@@ lo@@ d@@ lo@@ c@@ y.@@ M@@ on@@ it@@ o@@ ring@@ Capabili@@ ty@@ .@@ class@@ ); if (c@@ fg@@ .get@@ Boolean@@ ("@@ allow@@ To@@ p@@ M@@ enu@@ ", true@@ )) { com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ To@@ p@@ M@@ enu@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ M@@ on@@ it@@ o@@ ring@@ To@@ p@@ M@@ enu@@ .@@ class@@ ); } final java.nio.file.@@ Pat@@ h di@@ rec@@ tor@@ y = T@@ E@@ M@@ P@@ O@@ R@@ Y_@@ D@@ I@@ C@@ RE@@ T@@ O@@ R@@ Y@@ .@@ res@@ ol@@ ve@@ (@@ plugin@@ Name); final java.nio.file.@@ Pat@@ h st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y@@ ; if ((@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ di@@ rec@@ tor@@ y@@ )) && (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ rec@@ tor@@ y@@ ))) { st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y = di@@ rec@@ tor@@ y@@ ; } else { st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y = t@@ mp@@ Di@@ r.@@ res@@ ol@@ ve@@ (@@ plugin@@ Name); } if ((@@ java.lang.@@ Sy@@ st@@ em@@ .get@@ Pro@@ per@@ ty@@ (((@@ plugin@@ Name) + "@@ .@@ st@@ or@@ age@@ -@@ di@@ rec@@ tor@@ y@@ ))) == null@@ ) { java.lang.@@ Sy@@ ste@@ m.@@ set@@ Pro@@ per@@ ty@@ (((@@ plugin@@ Name) + "@@ .@@ st@@ or@@ age@@ -@@ di@@ rec@@ tor@@ y@@ "), cfg@@ .get@@ String@@ ("@@ st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y@@ ", st@@ or@@ age@@ _@@ di@@ rec@@ tor@@ y.@@ toString@@ ())); } }
private java.lang.String get@@ St@@ or@@ age@@ Di@@ r@@ () { final java.nio.file.@@ Pat@@ h t@@ m@@ p = com.googlesource.gerrit.plugins.@@ java@@ me@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ lo@@ me@@ Fil@@ ter.@@ T@@ E@@ M@@ P@@ O@@ R@@ AR@@ Y_@@ D@@ I@@ C@@ T@@ O@@ R@@ Y@@ .@@ res@@ ol@@ ve@@ (com.googlesource.gerrit.plugins.@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ ava@@ ava@@ Fil@@ ter.@@ J@@ ava@@ Fil@@ ter.@@ J@@ A@@ V@@ AM@@ E@@ L@@ OD@@ P@@ RE@@ FI@@ X@@ ); if (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ t@@ mp@@ )) { return t@@ mp@@ .@@ toString@@ (); } if (!(@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y@@ (@@ default@@ Data@@ Di@@ r@@ ))) { try { java.nio.file.@@ File@@ s.@@ create@@ Di@@ rec@@ to@@ ri@@ es@@ (@@ default@@ Data@@ Di@@ r@@ ); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ ava@@ me@@ Fil@@ ter.@@ log.error@@ ("@@ Cre@@ ation of java@@ me@@ lo@@ d@@ y dat@@ a di@@ r [@@ {@@ }@@ ] f@@ ai@@ le@@ d.@@ ", default@@ Data@@ Di@@ r@@ , e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } } return default@@ Data@@ Di@@ r.@@ toString@@ (); }
private org.eclipse.jgit.lib.ObjectId create@@ Commit@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.lang.String commit@@ Message@@ ) throw@@ s java.io.IOException { return create@@ Commit@@ (repo@@ , commit@@ Message@@ , null@@ ); }
private org.eclipse.jgit.lib.ObjectId create@@ Commit@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.lang.String commit@@ Message@@ , @@@ com.google.gerrit.common.@@ Null@@ able org.eclipse.jgit.lib.ObjectId t@@ ree@@ Id@@ ) throw@@ s java.io.IOException { try (@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter o@@ i = repo@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()) { if (t@@ ree@@ Id == null@@ ) { t@@ ree@@ Id = o@@ i.@@ insert@@ (@@ Con@@ stant@@ s.@@ O@@ B@@ J@@ _@@ T@@ RE@@ E, new byte@@ [@@ ]@@ { }); } org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ .get(), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); org.eclipse.jgit.lib.@@ Commit@@ Builder c@@ b = new org.eclipse.jgit.lib.@@ Commit@@ Builder@@ (); c@@ b.@@ set@@ Tree@@ Id@@ (t@@ ree@@ Id); c@@ b.@@ set@@ Commit@@ ter@@ (id@@ ent@@ ); c@@ b.@@ set@@ Author@@ (id@@ ent@@ ); c@@ b.@@ set@@ Message@@ (@@ commit@@ Message@@ ); org.eclipse.jgit.lib.ObjectId commit = o@@ i.@@ insert@@ (c@@ b@@ ); o@@ i.@@ f@@ lu@@ sh@@ (); return commit@@ ; } }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .group@@ s().@@ create@@ (@@ name@@ ("@@ fo@@ )@@ ).get@@ ().@@ id@@ )); assert@@ Push@@ To@@ All@@ User@@ s(@@ group@@ Ref@@ s, group@@ Ref@@ , true@@ , "@@ g@@ roup updat@@ e not allow@@ ed@@ "); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ S@@ and@@ bo@@ x@@ ed public void can@@ not@@ Delete@@ Branch@@ Group@@ Branch@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group admin@@ Group = group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "@@ )).@@ or@@ E@@ l@@ se@@ (@@ null@@ ); assert@@ Th@@ at(@@ admin@@ Group@@ ).@@ is@@ Not@@ Null@@ (); test@@ Can@@ not@@ Delete@@ Branch@@ (((@@ co@@ m@@ Branch@@ ) != null ? admin@@ .@@ email@@ () : null@@ ), com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Group@@ As@@ sert@@ .@@ assert@@ Th@@ at(@@ admin@@ Group@@ s(@@ admin@@ Group@@ .get@@ Group@@ UUID@@ ())); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ all@@ User@@ s.@@ equals(@@ re@@ ce@@ ive@@ Ev@@ ent.@@ project@@ .getName@@ Key@@ ()))) { return java.util.Collections.@@ empty@@ List(); } if (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ )) { return java.util.Collections.@@ empty@@ List(); } if ((@@ re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ )) || (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ T@@ ED@@ _@@ G@@ RO@@ U@@ P@@ S@@ ))) || (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ equals(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ U@@ P@@ NAM@@ ES@@ ))) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ contain@@ s updat@@ e not allow@@ ed to allow@@ ed "); } return java.util.Collections.@@ empty@@ List(); }
private void create@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref@@ , java.lang.String commit@@ Message@@ ) throw@@ s java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository r = repo@@ Manager.@@ open@@ Repository(@@ project@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter o@@ i = r@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (r@@ )) { org.eclipse.jgit.lib.ObjectId empty@@ Commit = create@@ Commit@@ (r@@ , commit@@ Message@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update update@@ Re@@ f = r.@@ update@@ Ref@@ (ref@@ ); update@@ Ref@@ .set@@ Ex@@ p@@ ec@@ ted@@ O@@ ld@@ Object@@ Id(@@ org.eclipse.jgit.lib.Object@@ Id.@@ z@@ er@@ o@@ Id()); update@@ Ref@@ .set@@ New@@ Object@@ Id(@@ empty@@ Commit@@ ); assert@@ Th@@ at(@@ update@@ Ref@@ .@@ update@@ (r@@ w@@ )).@@ isEqualTo(@@ Ref@@ Update.@@ Result.@@ N@@ EW@@ ); } }
@java.lang.Override public void on@@ Pre@@ Merge@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , com.google.gerrit.server.git.CodeReview@@ Commit commit@@ , com.google.gerrit.server.project.Project@@ State dest@@ Project@@ , com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key dest@@ Branch@@ , com.google.gerrit.reviewdb.client.PatchSet.@@ Id patchSet@@ Id, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User call@@ er@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception { if ((@@ !(@@ all@@ User@@ s@@ Name.@@ equals(@@ dest@@ Project@@ .getName@@ Key@@ ()))) || ((@@ !(@@ dest@@ Branch@@ .get().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ))) && (!(@@ dest@@ Branch@@ .get().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ T@@ ED@@ _@@ G@@ RO@@ U@@ P@@ S@@ )@@ ))) && (!(@@ dest@@ Branch@@ .get().@@ equals(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NAM@@ ES@@ ))@@ ))) { return@@ ; } throw new com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception("@@ Co@@ ul@@ d updat@@ e not allow@@ ed }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ s@@ Branch@@ For@@ N@@ on@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { assert@@ Create@@ Group@@ Branch@@ (project@@ , null@@ ); java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .group@@ s().@@ create@@ (@@ name@@ ("@@ fo@@ "@@ )@@ ).get@@ ().@@ id@@ )); assert@@ Push@@ To@@ Branch@@ (project@@ , group@@ Ref@@ , null@@ , null@@ ); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ Not@@ In@@ Group@@ s@@ File@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = r@@ t@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .group@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ ad@@ d@@ ("@@ project.@@ config@@ ", ((@@ ("@@ " + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ())) + "@@ \n@@ "@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()).@@ hasSize@@ (1); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (c@@ fg@@ .get@@ Error@@ s@@ ()@@ ).get@@ Message@@ ()).@@ isEqualTo@@ ((@@ (("@@ g@@ roup " + (@@ st@@ a@@ .getName@@ ())) + " not in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAM@@ E@@ ))); }
@org.junit.Test public void read@@ Config@@ Label@@ S@@ core@@ s() throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = r@@ .get@@ Label@@ Section@@ s(); com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ s.@@ en@@ try@@ Set@@ ().@@ iter@@ ator@@ ().@@ next@@ ().get@@ Value@@ (); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Not@@ Null@@ ()).@@ is@@ F@@ alse@@ (); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Not@@ E@@ qualTo@@ (@@ typ@@ e.@@ is@@ Not@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ typ@@ e.@@ is@@ Not@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ typ@@ e.@@ is@@ Not@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ typ@@ e.@@ is@@ Not@@ F@@ _@@ CO@@ _M@@ A@@ X@@ _S@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ M@@ in@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y@@ _M@@ IN@@ _S@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ Ma@@ x@@ S@@ core@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y@@ _M@@ A@@ X@@ _S@@ RE@@ CO@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ On@@ Merge@@ Fi@@ rst@@ Parent@@ Update@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y_@@ AL@@ L@@ _S@@ CO@@ RE@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ On@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Label@@ Type.@@ DE@@ F@@ _@@ CO@@ P@@ Y_@@ AL@@ L@@ _S@@ CO@@ RE@@ T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ I@@ f@@ No@@ Code@@ Change@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ _@@ CO@@ L@@ _S@@ I@@ F@@ _@@ CO@@ CO@@ RE@@ F@@ S_@@ I@@ F@@ _@@ C@@ OD@@ E_@@ CHANG@@ E@@ ); assert@@ Th@@ at(@@ typ@@ e.@@ is@@ Co@@ p@@ y@@ All@@ No@@ Co@@ p@@ y@@ All@@ S@@ co@@ res@@ I@@ f@@ No@@ Not@@ E@@ qualTo@@ (@@ Type.@@ DE@@ F@@ S_@@ DE@@ F@@ S_@@ CHANG@@ E_@@ CO@@ L@@ _@@ CHANG@@ E@@ ); }
@org.junit.Test public void edit@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = t@@ r@@ .@@ commit@@ (); org.eclipse.jgit.revwalk.RevCommit ad@@ d@@ b = ((@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ .group@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ ad@@ d@@ ("@@ project.@@ config@@ ", ((@@ ("@@ " + (@@ de@@ ve@@ lo@@ per@@ s.@@ to@@ Config@@ ())) + "@@ \n@@ "@@ )).@@ isEqualTo(@@ Ref@@ eren@@ ce@@ ); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.server.config.@@ Plugin@@ Config plugin@@ C@@ f@@ g = cfg@@ .get@@ Plugin@@ Config@@ ("@@ so@@ me@@ Plugin@@ "); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Nam@@ es@@ ().@@ size@@ ()).@@ isEqualTo@@ (1); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Group@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ "@@ )).@@ isEqualTo(@@ de@@ ve@@ lo@@ per@@ s); plugin@@ C@@ f@@ g.@@ set@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ ", st@@ a@@ re@@ v = commit@@ (c@@ fg@@ ); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ project.@@ config@@ "@@ )).@@ isEqualTo@@ ((@@ (("@@ " + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ())) + "@@ \n@@ ")); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ )).@@ isEqualTo@@ ((@@ ("@@ UU@@ I@@ D + "@@ #@@ #@@ #@@ #@@ #@@ b@@ a@@ ff@@ ")); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = t@@ r@@ .@@ commit@@ (@@ ad@@ d@@ e.@@ change@@ .getProject@@ ()); com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .group@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ ad@@ d@@ ("@@ project.@@ config@@ ", ((@@ ("@@ " + ("@@ name@@ ())) + "@@ \n@@ "@@ \n@@ "@@ )).@@ update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.server.config.@@ Plugin@@ Config plugin@@ C@@ f@@ g = cfg@@ .get@@ Plugin@@ Config@@ ("@@ so@@ me@@ Plugin@@ "); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Nam@@ es@@ ().@@ size@@ ()).@@ isEqualTo@@ (1); assert@@ Th@@ at(@@ plugin@@ C@@ fg@@ .get@@ Group@@ Ref@@ eren@@ ce@@ ("@@ key@@ 1@@ "@@ )).@@ isEqualTo(@@ de@@ ve@@ lo@@ per@@ s); }
private java.lang.String get@@ St@@ or@@ age@@ Di@@ r@@ () { final java.nio.file.@@ Pat@@ h t@@ m@@ p = java.nio.file.@@ Path@@ s.get(@@ java.lang.@@ Sy@@ st@@ em@@ .get@@ Pro@@ per@@ ty@@ ("@@ java.io.@@ t@@ mp@@ di@@ r@@ "@@ )).@@ res@@ ol@@ ve@@ (com.googlesource.gerrit.plugins.@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ me@@ lo@@ d@@ y@@ Fil@@ ter.@@ J@@ A@@ V@@ AM@@ E@@ L@@ Y_@@ P@@ RE@@ FI@@ X@@ ); if (@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y(@@ t@@ mp@@ )) { return t@@ mp@@ .@@ toString@@ (); } java.nio.file.@@ Pat@@ h st@@ or@@ age@@ Di@@ r = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ lo@@ me@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ o@@ ring@@ Fil@@ ter.@@ J@@ ava@@ Fil@@ ter.@@ J@@ lo@@ d@@ y@@ Fil@@ ter.@@ O@@ R@@ A@@ G@@ E_@@ D@@ I@@ R@@ )).@@ map@@ (( path@@ ) -@@ > r@@ ; if (@@ pat@@ h == null@@ ) { return default@@ Data@@ Di@@ r@@ ; } java.nio.file.@@ Path@@ s.get(@@ path@@ ); if (!(@@ java.nio.file.@@ File@@ s.@@ is@@ Di@@ rec@@ tor@@ y@@ (@@ st@@ or@@ age@@ Di@@ r@@ ))) { try { java.nio.file.@@ File@@ s.@@ create@@ Di@@ rec@@ to@@ ri@@ es@@ (@@ st@@ or@@ age@@ Di@@ r@@ ); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.@@ me@@ lo@@ d@@ y.@@ Gerrit@@ M@@ on@@ it@@ Fil@@ ter.@@ J@@ ava@@ Fil@@ ter.@@ log.error@@ ("@@ Exception lo@@ me@@ r dat@@ a [@@ {@@ }@@ ] f@@ ai@@ le@@ d@@ . Di@@ r@@ or@@ age@@ Di@@ r@@ , e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } } return st@@ or@@ age@@ Di@@ r@@ .@@ toString@@ (); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); if ((@@ inpu@@ t == null@@ ) || (((@@ input.@@ check@@ Account@@ s) == null@@ ) && ((@@ input.@@ check@@ Account@@ ExternalId@@ s) == null@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ inpu@@ t requ@@ i@@ red@@ "); } com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info@@ (); if ((@@ input.@@ check@@ Account@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Account@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Account@@ ExternalId@@ s@@ Result@@ Info@@ (account@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } if ((@@ input.@@ check@@ Account@@ ExternalId@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Account@@ ExternalId@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Account@@ ExternalId@@ s@@ Result@@ Info@@ (@@ ext@@ er@@ n@@ al@@ Id@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } if ((@@ input.@@ check@@ Group@@ s) != null@@ ) { con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ check@@ Group@@ s@@ Result = new com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Check@@ Group@@ Info@@ (@@ group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ ()); } return con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info@@ ; }
void set@@ Al@@ low@@ S@@ ave@@ E@@ mpty@@ Name@@ (@@ boolean allow@@ S@@ ave@@ E@@ mpty@@ Name) { this@@ .@@ allow@@ S@@ ave@@ E@@ mpty@@ Name = allow@@ S@@ ave@@ E@@ mpty@@ Name@@ ; }
private Group@@ B@@ und@@ le.@@ Builder new@@ B@@ und@@ le@@ () { java.sql.@@ Tim@@ est@@ am@@ p t@@ s = new java.sql.@@ Tim@@ est@@ amp@@ (@@ Test@@ Time@@ Util.@@ START@@ E@@ po@@ ch@@ M@@ il@@ li@@ ()); com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = new com.google.gerrit.reviewdb.client.Account@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ group@@ "), new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (1@@ ), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ group@@ -@@ 1@@ "), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er me@@ mb@@ er = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 0@@ ), group@@ .getId@@ ())); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t me@@ mber@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ me@@ mber@@ , new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ 00@@ 0@@ ), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id by@@ Id = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ group@@ .getId@@ (), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ sub@@ "@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d by@@ Id@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ by@@ Id, new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 3@@ 00@@ 0@@ ), t@@ s); return com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ buil@@ der@@ .group@@ (@@ group@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ Au@@ dit@@ ).@@ by@@ Id@@ Au@@ dit@@ (@@ by@@ Id@@ Au@@ dit@@ ); }
private static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ From@@ Note@@ Data@@ (@@ byte@@ [] note@@ Data@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ note@@ Data@@ , java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); java.lang.String u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, null@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ UUID@@ _@@ P@@ AR@@ AM@@ ); java.lang.String name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ E@@ mpty@@ (@@ config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, null@@ , com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Not@@ es.@@ NAM@@ E_@@ P@@ AR@@ AM@@ ); if (@@ u@@ id == null@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ (("@@ In@@ vali@@ d for g@@ roup '@@ %@@ s@@ ' " + name@@ )); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ u@@ id@@ ), name); }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.lang.@@ Sy@@ ste@@ m.@@ id@@ enti@@ ty@@ Hash@@ Code@@ (@@ this@@ ); }
private java.util.@@ Optional@@ <java.lang.String> get@@ New@@ Name@@ () { if (@@ group@@ Update.@@ is@@ P@@ res@@ ent@@ ()) { return group@@ Update@@ .get@@ ().get@@ Name@@ ().@@ map@@ (( n@@ ) -@@ > com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ n@@ .get@@ ())); } else if (@@ group@@ Cre@@ ation.@@ is@@ P@@ res@@ ent@@ ()) { return java.util.@@ Optional@@ .@@ of@@ (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ group@@ Cre@@ ation@@ .get@@ ().get@@ NameKey@@ ().get@@ ())); } return java.util.@@ Optional@@ .@@ empty@@ (); }
default boolean ac@@ c@@ B@@ e@@ s@@ To@@ Re@@ al@@ m@@ (@@ @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { return false@@ ; }
@java.lang.Override public boolean ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id id : ext@@ er@@ n@@ al@@ Id@@ s) { if (id@@ .@@ toString@@ ().@@ contains(@@ com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ )) { return true@@ ; } } return false@@ ; }
@java.lang.Override public boolean ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id id : ext@@ er@@ n@@ al@@ Id@@ s) { if (id@@ .@@ toString@@ ().@@ contains(@@ com.google.gerrit.server.@@ auth.@@ o@@ auth.@@ S@@ CH@@ E@@ M@@ E_@@ E@@ X@@ T@@ ER@@ N@@ AL@@ )) { return true@@ ; } } return false@@ ; }
private boolean pro@@ cess@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ ) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.@@ de@@ bug@@ (("@@ Add@@ ing ac@@ count " + (account@@ .getUser@@ Name@@ ()))); try { if (((@@ account@@ .getUser@@ Name@@ ()) != null@@ ) && (!(@@ re@@ al@@ m.@@ is@@ Active@@ (account@@ .getUser@@ Name@@ ())@@ ))) { java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > id@@ s = ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getAccount@@ ().get@@ Id()); if (re@@ al@@ m.@@ ac@@ c@@ B@@ e@@ long@@ s@@ To@@ Re@@ al@@ m@@ (id@@ )) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.@@ info@@ (("@@ Ac@@ ti@@ v@@ e ac@@ count " + (account@@ .getUser@@ Name@@ ()))); return true@@ ; } } catch (@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception e) { com.google.gerrit.server.account.Account@@ De@@ v@@ ator@@ .@@ log.@@ info@@ ("@@ Account {@@ } al@@ read@@ y de@@ ac@@ ti@@ v@@ ated@@ , cont@@ in@@ u@@ .@@ .@@ .@@ .@@ . account@@ .getUser@@ Name()); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.account.Account@@ De@@ ac@@ ti@@ v@@ ator@@ .@@ log.error@@ ("@@ E@@ rror de@@ ac@@ ti@@ v@@ ing account@@ : {@@ }@@ ) {@@ }@@ ", account@@ .getUser@@ Name@@ (), account@@ .getUser@@ ().get@@ Id(), e.get@@ Message@@ (), e); } } return false@@ ; }
private static boolean a@@ re@@ By@@ Id@@ Au@@ dit@@ s@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > review@@ Db@@ By@@ Id@@ Au@@ dit@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > note@@ Db@@ By@@ Id@@ Au@@ dit@@ s) { com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ > review@@ Db@@ By@@ Id@@ Au@@ dit@@ s@@ By@@ Id = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ review@@ Db@@ By@@ Id@@ Au@@ dit@@ s); com.google.common.collect.@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ dit@@ Au@@ dit@@ Au@@ dit@@ > note@@ Db@@ By@@ Id@@ Au@@ dit@@ By@@ Id@@ Au@@ dit@@ By@@ Id = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ note@@ Db@@ s); return com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ re@@ Con@@ si@@ der@@ E@@ qual@@ s@@ By@@ Id@@ Au@@ dit@@ (@@ review@@ Db@@ By@@ Id@@ Au@@ dit@@ ); }
private static com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ Au@@ dit@@ E@@ n@@ try@@ > to@@ Member@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Member@@ Id(@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > me@@ mber@@ s) { return me@@ mber@@ Au@@ dit@@ s.@@ st@@ ream@@ ().@@ f@@ l@@ at@@ Map@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le@@ :@@ to@@ Au@@ dit@@ Ent@@ ri@@ es@@ ).@@ collec@@ t(@@ com.google.common.collect.@@ Multimap@@ s.@@ to@@ Multimap@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ dit@@ E@@ n@@ try@@ :@@ get@@ T@@ arget@@ , java.util.@@ f@@ unc@@ tion.@@ F@@ unc@@ tion.@@ id@@ enti@@ ty@@ (), com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ t@@ ree@@ Set@@ Val@@ u@@ es(@@ db.@@ db.@@ Group@@ B@@ und@@ le.@@ U@@ D@@ I@@ T_@@ EN@@ T@@ R@@ Y_@@ CO@@ M@@ P@@ AR@@ AT@@ O@@ R@@ ) :@@ bu@@ ild@@ )); }
private static boolean a@@ re@@ Member@@ Au@@ dit@@ s@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > review@@ Db@@ Au@@ dit@@ Db@@ Au@@ dit@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > note@@ Db@@ Member@@ Au@@ dit@@ s) { com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ Au@@ dit@@ > review@@ Db@@ Au@@ dit@@ s@@ By@@ Id = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ to@@ Member@@ Au@@ dit@@ (@@ review@@ Db@@ Au@@ dit@@ s); com.google.common.collect.@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ E@@ n@@ try@@ > note@@ Db@@ Member@@ Au@@ dit@@ s = com.google.common.collect.@@ Set@@ Multimap@@ .@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ dit@@ > note@@ Db@@ Au@@ dit@@ s@@ By@@ Id = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ to@@ Member@@ Au@@ dit@@ By@@ Member@@ Au@@ dit@@ Id(@@ note@@ Db@@ Member@@ s); return com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ re@@ Con@@ si@@ der@@ E@@ qual@@ (@@ review@@ Db@@ Au@@ dit@@ s@@ By@@ Member@@ Au@@ dit@@ By@@ Member@@ s@@ By@@ Member@@ Au@@ dit@@ > note@@ Db@@ Au@@ dit@@ s@@ By@@ Member@@ Id); }
private static boolean a@@ re@@ Con@@ si@@ der@@ ed@@ E@@ qual@@ (@@ com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ E@@ n@@ try@@ > review@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Member@@ Id, com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ Au@@ dit@@ > n@@ try@@ Db@@ Member@@ Au@@ dit@@ s@@ By@@ Id@@ ) { for (java.lang.String me@@ Id : review@@ Db@@ Member@@ s@@ By@@ Member@@ s@@ By@@ Member@@ s().@@ key@@ Set@@ ()) { java.util.List<@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ > review@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es = com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ review@@ Db@@ Member@@ s@@ By@@ Id@@ .get(@@ me@@ mber@@ Id@@ )); java.util.@@ S@@ orted@@ Set<@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ dit@@ Au@@ dit@@ Au@@ dit@@ > note@@ Db@@ Au@@ dit@@ Db@@ Ent@@ ri@@ es = note@@ Db@@ Member@@ s@@ By@@ Member@@ .get(@@ me@@ mber@@ Id); int review@@ Db@@ In@@ de@@ x = 0; for (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le.@@ Au@@ dit@@ Au@@ dit@@ > n@@ try : note@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es) { java.util.Set<@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ dit@@ > und@@ red@@ Review@@ Db@@ Au@@ dit@@ > new java.util.Hash@@ Set<@@ >(); while (@@ review@@ Db@@ In@@ de@@ x < (@@ review@@ Db@@ Au@@ dit@@ Ent@@ ri@@ es.@@ size@@ ())) { com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ review@@ Db@@ Au@@ dit@@ try { review@@ Db@@ Au@@ dit@@ In@@ de@@ x = review@@ Db@@ Au@@ dit@@ Updat@@ es@@ .get(@@ review@@ Db@@ ); if (!(@@ review@@ Db@@ Au@@ dit@@ Db@@ E@@ n@@ try@@ .get@@ Action@@ ().equals(@@ note@@ Db@@ E@@ n@@ try@@ .get@@ Action@@ ()))) { break@@ ; } red@@ Au@@ dit@@ Review@@ Db@@ Au@@ dit@@ Review@@ Db@@ Au@@ dit@@ In@@ de@@ x = 0; } if (!(@@ review@@ Db@@ Au@@ dit@@ Db@@ Au@@ dit@@ In@@ de@@ x < (@@ review@@ Db@@ Au@@ dit@@ ); } return true@@ ; } return true@@ ; }
private static com.google.common.collect.@@ S@@ orted@@ Set@@ Multimap@@ <java.lang.String, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ B@@ und@@ le.@@ Au@@ dit@@ Au@@ dit@@ E@@ n@@ try@@ > to@@ By@@ Id@@ Au@@ dit@@ Ent@@ ri@@ es@@ By@@ Id(@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > by@@ Id@@ Au@@ dit@@ s) { return by@@ Id@@ Au@@ dit@@ s.@@ st@@ ream@@ ().@@ f@@ l@@ at@@ Map@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ db.@@ db.@@ to@@ Au@@ dit@@ :@@ :@@ to@@ Ent@@ ri@@ es@@ ).@@ collec@@ t(@@ com.google.common.collect.@@ Multimap@@ s.@@ to@@ Multimap@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ dit@@ Au@@ dit@@ E@@ n@@ try@@ :@@ get@@ T@@ arget@@ , java.util.@@ f@@ unc@@ tion.@@ F@@ unc@@ tion.@@ id@@ enti@@ ty@@ (), com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ t@@ ree@@ Val@@ u@@ es(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ D@@ I@@ T_@@ EN@@ T@@ R@@ Y_@@ CO@@ M@@ P@@ AR@@ AT@@ O@@ R@@ :@@ bu@@ ild@@ )); }
public java.lang.String get@@ Name@@ () { if ((@@ f@@ ull@@ Name) != null@@ ) { return f@@ ull@@ Name@@ ; } if ((@@ p@@ ref@@ er@@ red@@ Email@@ ) != null@@ ) { return p@@ ref@@ er@@ red@@ Email@@ ; } return ((((@@ account@@ Id@@ ) != null ? f@@ ull@@ Name@@ () : null@@ ; }
private static org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ U@@ ti@@ l note@@ Util@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ , java.lang.String an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name, com.google.gerrit.server.@@ Current@@ User u@@ , java.util.@@ D@@ ate wh@@ en@@ ) { com.google.gerrit.server.notedb.@@ Ab@@ str@@ act@@ Change@@ Update.@@ check@@ User@@ (@@ u@@ ); if (@@ u instanceof com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ) { return note@@ Util@@ .@@ new@@ Ident@@ (@@ u@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Account@@ (), wh@@ en@@ , server@@ Ident@@ ); } else if (@@ u instanceof com.google.gerrit.server.@@ In@@ ternal@@ User@@ ) { return server@@ Ident@@ ; } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); }
public java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (!(@@ group@@ s@@ M@@ igration.@@ write@@ To@@ NoteDb@@ ())) { return new java.util.ArrayList<@@ >(); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = repo@@ .get@@ All@@ Ref@@ s(); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); com.google.common.collect.@@ B@@ i@@ Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , java.lang.String> name@@ Ma@@ p = com.google.common.collect.@@ Hash@@ B@@ i@@ Map.@@ create@@ (); read@@ Group@@ s(@@ repo@@ , ref@@ s, pro@@ ble@@ m@@ s, by@@ UUID@@ ); read@@ Group@@ (repo@@ , ref@@ s, pro@@ ble@@ m@@ s, pro@@ ble@@ m@@ s, name@@ Map@@ ); if (!(@@ pro@@ ble@@ m@@ s.@@ isEmpty())) { return pro@@ ble@@ ms@@ ; } pro@@ ble@@ m@@ s = check@@ G@@ lobal@@ Con@@ si@@ st@@ en@@ c@@ y(@@ by@@ UUID@@ , name@@ Map@@ ); return pro@@ ble@@ ms@@ ; }
public java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ () throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > group@@ s = new java.util.Hash@@ Map@@ <@@ >(); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = g@@ lobal@@ Check@@ er.@@ check@@ (repo@@ , group@@ s); if (!@@ (c@@ s.@@ isE@@ t@@ mp@@ ())) { return pro@@ ble@@ ms@@ ; } for (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g : group@@ s.@@ values@@ ()) { pro@@ ble@@ m@@ s.@@ add@@ All(@@ check@@ Group@@ (@@ g@@ , group@@ s@@ )); return pro@@ ble@@ ms@@ ; } } }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result check@@ (@@ org.eclipse.jgit.lib.Repository repo@@ ) throw@@ s java.io.IOException { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result r = do@@ Check@@ (repo@@ ); if (!(@@ r.@@ pro@@ ble@@ m@@ s.@@ isEmpty())) { r.@@ u@@ id@@ To@@ Group@@ Ma@@ p = null@@ ; } return r@@ ; }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (@@ h@@ e@@ al@@ th@@ y@@ ) { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ e@@ h@@ e@@ al@@ th@@ .@@ SC_@@ O@@ K@@ ); } else { r@@ s@@ p.@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ al@@ th@@ e@@ al@@ th@@ Servlet.@@ LO@@ G@@ .@@ error@@ ("@@ Fai@@ le@@ d to sen@@ d er@@ ror res@@ pon@@ se@@ ", e); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { this@@ .@@ h@@ e@@ al@@ th@@ y = true@@ ; }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { wh@@ en@@ (c@@ urrent@@ User@@ Provider@@ Mo@@ ck@@ .get@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ urrent@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (c@@ urrent@@ User@@ Mo@@ ck@@ .get@@ Capabili@@ ti@@ es@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ ap@@ abili@@ ty@@ Control@@ Mo@@ ck@@ ); wh@@ en@@ (c@@ ap@@ abili@@ ty@@ Control@@ Mo@@ c@@ k.@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); servle@@ t = new com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ e@@ al@@ th@@ Servlet@@ (@@ te@@ mp@@ F@@ ol@@ der@@ .get@@ R@@ oo@@ t@@ Path@@ ().to@@ Path@@ (), current@@ User@@ Provider@@ Mo@@ c@@ k@@ ); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ al@@ th@@ e@@ al@@ .@@ SC_@@ FO@@ R@@ B@@ ID@@ D@@ EN@@ ); return@@ ; } try { set@@ Un@@ h@@ e@@ al@@ th@@ (); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ plugins.@@ J@@ db@@ c@@ Ac@@ ces@@ s.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ e@@ h@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t un@@ h@@ e@@ al@@ th@@ y e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ e@@ al@@ .@@ SC_@@ FO@@ R@@ B@@ ID@@ D@@ EN@@ ); return@@ ; } try { set@@ H@@ e@@ al@@ th@@ y@@ (); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ h@@ e@@ al@@ th@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to h@@ e@@ t th@@ e@@ al@@ th@@ ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ Request th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
private void send@@ Error@@ (@@ final com.google.gwt.@@ event@@ .@@ do@@ m.@@ client.@@ Click@@ al@@ l r@@ sp@@ , int statu@@ s@@ Code@@ ) { try { r@@ s@@ p.@@ send@@ Error@@ (@@ statu@@ s@@ Code@@ ); } catch (java.io.IOException e) { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); com.ericsson.gerrit.plugins.highavailability.@@ R@@ h@@ e@@ al@@ th@@ .@@ H@@ e@@ al@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to sen@@ d er@@ ror res@@ pon@@ se e); } }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if (@@ un@@ h@@ e@@ al@@ th@@ y@@ File@@ .@@ ex@@ ist@@ s()) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ e@@ al@@ th@@ .@@ SC_@@ S@@ ER@@ VI@@ C@@ E_@@ UN@@ A@@ V@@ A@@ IL@@ AB@@ LE@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ al@@ th@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { this@@ .@@ h@@ e@@ al@@ th@@ y = false@@ ; }
private static int get@@ In@@ t(@@ org.eclipse.jgit.lib.@@ Config cfg@@ , java.lang.String s@@ ection@@ , java.lang.String name, int default@@ Value@@ ) { try { return cfg@@ .get@@ In@@ t@@ (s@@ ection@@ , name, default@@ Value@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.error@@ ("@@ E@@ rror valu@@ e for {@@ }@@ ", valu@@ e default@@ Value@@ ); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.@@ de@@ bug@@ (("@@ Fai@@ le@@ d to ret@@ ri@@ ev@@ e int@@ e@@ g@@ er value@@ : " + (@@ e.get@@ Message@@ ())@@ ), e); return default@@ Value@@ ; } }
private static boolean get@@ Boolean@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , java.lang.String s@@ ection@@ , java.lang.String name, boolean default@@ Value@@ ) { try { return cfg@@ .get@@ Boolean@@ (s@@ ection@@ , name, default@@ Value@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.error@@ ("@@ In@@ vali@@ d valu@@ e for {@@ }@@ ", name, default@@ Value@@ ); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ log.@@ de@@ bug@@ (("@@ Fai@@ le@@ d to ret@@ ri@@ ev@@ e boolean value@@ : " + (@@ e.get@@ Message@@ ())@@ ), e); return default@@ Value@@ ; } }
private void e@@ vi@@ ct@@ Cache@@ (@@ com.google.common.@@ cache.@@ Cache@@ <?@@ , ?@@ > cach@@ e@@ , java.lang.String cach@@ e@@ Name, java.lang.O@@ bject key@@ ) { if (@@ Con@@ stant@@ s.@@ P@@ RO@@ JEC@@ T_@@ LI@@ ST@@ .equals(@@ cach@@ e@@ Name@@ )) { cache.@@ in@@ vali@@ date@@ All@@ (); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Res@@ tApi@@ Servlet.@@ f@@ ro@@ m {@@ } f@@ ro@@ m {@@ }@@ ", key@@ , cach@@ e@@ Name); }
public java.lang.String@@ [] get@@ I@@ s@@ s@@ s@@ s@@ s@@ ue@@ Id@@ s(@@ java.lang.String h@@ a@@ y@@ st@@ ack@@ ) { java.util.@@ reg@@ ex@@ .@@ Pat@@ ter@@ n pat@@ ter@@ n = it@@ s@@ Config@@ .get@@ I@@ s@@ s@@ ue@@ Pat@@ tern@@ (); if (p@@ at@@ ter@@ n == null@@ ) return new java.lang.String@@ [@@ ]@@ { }; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ util.@@ I@@ s@@ s@@ s@@ s@@ ue@@ Ex@@ tr@@ actor@@ .@@ log.@@ de@@ bug@@ (@@ '@@ {@@ }@@ ' ag@@ ain@@ s@@ t h@@ a@@ y@@ st@@ ac@@ k@@ , pat@@ tern@@ .@@ pat@@ tern@@ )); java.util.@@ Set@@ <java.lang.String> is@@ s@@ ue@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); java.util.@@ reg@@ ex@@ .@@ Match@@ er match@@ er = pat@@ tern@@ .@@ match@@ er@@ (@@ h@@ a@@ y@@ st@@ ack@@ ); int group@@ Id@@ x = it@@ s@@ Config@@ .get@@ I@@ s@@ s@@ ue@@ Pat@@ tern@@ Group@@ Index@@ (); while (@@ match@@ er.@@ fin@@ d@@ ()) { java.lang.String is@@ s@@ ue@@ Id = match@@ er@@ .group@@ (@@ group@@ Id@@ x@@ ); if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ is@@ s@@ ue@@ Id@@ ))) { is@@ su@@ es.@@ add(@@ is@@ s@@ ue@@ Id); } } return is@@ su@@ es.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ is@@ su@@ es.@@ size@@ ()@@ ]@@ ); }
public boolean isE@@ n@@ able@@ d(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, java.lang.String ref@@ Name) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get(@@ project@@ Name); if (project@@ State == null@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config.@@ log.error@@ ("@@ Fai@@ le@@ d to ch@@ ec@@ k if (@@ is enable@@ d for project {@@ }@@ : P@@ roject not fo@@ un@@ d plugin@@ ", plugin@@ Name, project@@ Name); return false@@ ; } if (@@ isE@@ n@@ able@@ d@@ By@@ An@@ y@@ Parent@@ Project@@ (ref@@ Name, project@@ State@@ )) { return true@@ ; } return (!(@@ "@@ .equals(@@ plugin@@ C@@ fg@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ State@@ , plugin@@ Name@@ ).get@@ String@@ ("@@ enable@@ d@@ ", false@@ )@@ ))) && (@@ isE@@ n@@ able@@ d@@ For@@ Branch@@ (project@@ State@@ , ref@@ Name@@ )); } }
@org.junit.Test public void re@@ buil@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ M@@ igration.@@ write@@ To@@ ()).@@ is@@ True@@ (); as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ M@@ igration.@@ read@@ From@@ NoteDb@@ ()).@@ is@@ F@@ alse@@ (); com.google.gerrit.extensions.common.@@ Group@@ Info g = g@@ .group@@ s().@@ create@@ (@@ name@@ ("@@ group@@ "@@ )@@ ).get@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g.@@ id@@ ); java.lang.String ref@@ Name = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ u@@ id@@ ); org.eclipse.jgit.lib.ObjectId old@@ Id@@ ; com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le old@@ B@@ und@@ le old@@ B@@ und@@ le@@ ; try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { old@@ Id = repo.@@ ex@@ act@@ Ref@@ (ref@@ Name@@ ).get@@ Object@@ Id(); old@@ B@@ und@@ le = b@@ und@@ le@@ Factory.@@ from@@ NoteDb@@ (repo@@ , u@@ id@@ ); new org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ repo@@ ).@@ delete@@ (ref@@ Name); } assert@@ Th@@ at(@@ admin@@ Rest@@ Session@@ .@@ post@@ O@@ K@@ ((@@ ("/@@ group@@ s/@@ " + u@@ id@@ ) + "@@ /@@ re@@ bu@@ ild@@ "), "@@ ).get@@ En@@ ti@@ ty@@ Content@@ ()).@@ isEqualTo@@ ("@@ N@@ o d@@ if@@ f@@ eren@@ ce@@ s b@@ et@@ we@@ en ReviewDb an@@ d NoteDb@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (ref@@ Name); assert@@ Th@@ at(@@ ref@@ ).@@ is@@ Not@@ Null@@ (); assert@@ Th@@ at(@@ ref@@ .get@@ Object@@ Id@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ old@@ Id); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le new@@ B@@ und@@ le = b@@ und@@ le@@ Factory.@@ from@@ (repo@@ , u@@ id@@ ); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le@@ .group@@ ()).@@ isEqualTo(@@ old@@ B@@ und@@ le@@ .group@@ ()); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le.@@ new@@ B@@ und@@ le.@@ old@@ Au@@ dit@@ ()).@@ isEqualTo(@@ old@@ Id); assert@@ Th@@ at@@ (@@ new@@ B@@ und@@ le.@@ b@@ und@@ le.@@ d@@ if@@ f@@ B@@ und@@ le.@@ by@@ Id@@ Au@@ dit@@ ()); assert@@ Th@@ at@@ (@@ new@@ Id@@ Au@@ dit@@ ()); }
private java.lang.String get@@ Comment@@ Change@@ Event@@ (java.lang.String action@@ , java.lang.String pre@@ fix@@ , java.util.Map<java.lang.String, java.lang.String> map@@ ) { java.lang.String re@@ t = "@@ "; java.lang.String change@@ N@@ u@@ mb@@ er = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ change@@ Number@@ ")); if (!@@ (@@ change@@ N@@ u@@ mb@@ er +@@ = change@@ Number@@ .@@ isEmpty())) { change@@ N@@ u@@ mb@@ er +@@ = } re@@ t + ("@@ change@@ Number@@ ) + action@@ ; java.lang.String submit@@ ter = for@@ m@@ at@@ Per@@ son@@ (p@@ re@@ fix@@ , map@@ ); if (!(@@ submit@@ ter.@@ isEmpty())) { re@@ t +@@ = b@@ y submit@@ ter@@ ; } java.lang.String sub@@ ject@@ = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ("@@ sub@@ ject@@ ")); if (!@@ (@@ sub@@ ject@@ )) { re@@ t +@@ = "@@ :@@ \n@@ " + sub@@ ject@@ ; } java.lang.String re@@ as@@ on@@ String@@ s = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ To@@ Empty(@@ re@@ as@@ on@@ ")); if (!@@ (@@ re@@ as@@ on@@ )) { re@@ as@@ on@@ .@@ ur@@ as@@ on@@ (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ Url@@ ")); if (!@@ ur@@ l.@@ isEmpty())) { re@@ as@@ on@@ (@@ ur@@ r.@@ isEmpty())) { re@@ t +@@ = "@@ \n@@ " + (@@ it@@ For@@ W@@ e@@ bu@@ bu@@ bu@@ (@@ ur@@ , url@@ )); } return ret@@ ; }
private java.lang.String for@@ m@@ at@@ Per@@ son@@ (java.lang.String pre@@ fix@@ , java.util.Map<java.lang.String, java.lang.String> map@@ ) { java.lang.String re@@ t = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ((@@ pre@@ fi@@ x + "@@ Name@@ "@@ ))); if (re@@ t.@@ isEmpty()) { re@@ t = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ map@@ .get@@ ((@@ pre@@ fi@@ x + "@@ User@@ name@@ "@@ ))); } return ret@@ ; }
static java.lang.String get@@ Owner@@ s@@ File@@ Name(@@ com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key project@@ State@@ , com.google.gerrit.server.query.change.Change@@ Data c@@ ) { if (((@@ com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ ) != null@@ ) && ((@@ project@@ State@@ ().@@ e@@ quals("@@ ")) != null@@ )) { java.lang.String name = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (@@ project@@ State@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E@@ ).get@@ String@@ (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S_@@ F@@ IL@@ E_@@ NAM@@ E, com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S@@ ); if (@@ name.@@ tri@@ m@@ ().@@ e@@ quals("@@ ")) { com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ log.error@@ ((((@@ (("@@ P@@ roject " + (c@@ .@@ project@@ ())) + " h@@ a@@ s w@@ ron@@ g ") + (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S_@@ F@@ IL@@ E_@@ NAM@@ E@@ )) + " name@@ ) + "@@ for (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config@@ (c@@ .getChange@@ Id@@ (c@@ )@@ ))); return com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ O@@ W@@ N@@ ER@@ S@@ ; } return name@@ ; }
private boolean sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ State.@@ .@@ . st@@ at@@ es) { try { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (java.io.IOException e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } return sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ , user@@ Provider@@ .get@@ ()); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception err@@ ) { state@@ Lo@@ g.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot project %s not avail@@ able project@@ ), err@@ , st@@ at@@ es@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (@@ e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } return false@@ ; }
public java.util.@@ reg@@ ex@@ .@@ Pat@@ ter@@ n get@@ I@@ s@@ ue@@ Pat@@ tern@@ () { java.util.@@ Optional@@ <java.lang.String> m@@ atch = com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (get@@ Comment@@ Link@@ Info@@ (get@@ Comment@@ Link@@ Name@@ ()@@ )).@@ filter@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ Predicate@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ >() { @java.lang.Override public boolean apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info input@@ ) { return ((@@ input.@@ match@@ ) != null@@ ) && (!(@@ input.@@ match@@ .@@ tri@@ m@@ ().@@ isEmpty@@ ())); } }@@ ).@@ tran@@ s@@ for@@ m@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ F@@ unc@@ tion@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ , java.lang.String@@ >() { @java.lang.Override public java.lang.String apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info input@@ ) { return input.@@ match@@ ; } }@@ ).@@ last@@ (); java.lang.String de@@ f@@ n = gerrit@@ Config@@ .get@@ String@@ ("@@ comment@@ link@@ ", get@@ Comment@@ Link@@ Name@@ (), "@@ match@@ "); } }@@ ).@@ match@@ Pat@@ ter@@ n n = gerrit@@ Config@@ .get@@ String@@ ("@@ comment@@ link@@ ", get@@ Comment@@ Link@@ Name@@ (), "@@ match@@ "); }
public java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > ext@@ r@@ act@@ From@@ (@@ PatchSet@@ Attri@@ but@@ e patchSet@@ Attribute@@ ) { java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ revision@@ ", patchSet@@ Attri@@ but@@ e.@@ revision@@ )); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ patch@@ -@@ set@@ -@@ n@@ umber@@ ", java.lang.String.@@ value@@ Of(@@ patchSet@@ Attri@@ but@@ e.@@ n@@ umber@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ patchSet@@ Number@@ ", java.lang.String.@@ value@@ Of(@@ patchSet@@ Attri@@ but@@ e.@@ n@@ umber@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ ref@@ ", patchSet@@ Attri@@ but@@ e.@@ ref@@ )); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ cre@@ ated@@ -@@ on@@ ", patchSet@@ Attri@@ but@@ e.@@ cre@@ ated@@ On@@ .@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ cre@@ ated@@ On@@ ", patchSet@@ Attri@@ but@@ e.@@ cre@@ ated@@ On@@ .@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ parent@@ s", patchSet@@ Attri@@ but@@ e.@@ parent@@ s.@@ toString@@ ())); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ de@@ le@@ tion@@ s", java.lang.@@ Integ@@ er.@@ toString@@ (@@ patchSet@@ Attri@@ but@@ e.@@ size@@ De@@ le@@ tion@@ s@@ ))); pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ in@@ ser@@ tion@@ s", java.lang.@@ Integ@@ er.@@ toString@@ (@@ patchSet@@ Attri@@ but@@ e.@@ size@@ In@@ ser@@ tion@@ s@@ ))); pro@@ per@@ ti@@ es.@@ add@@ All(@@ ext@@ r@@ act@@ From@@ (@@ patchSet@@ Attri@@ but@@ e.@@ upload@@ er, "@@ upload@@ er@@ ")); pro@@ per@@ ti@@ es.@@ add@@ All(@@ ext@@ r@@ act@@ From@@ (@@ patchSet@@ Attri@@ but@@ e.@@ author@@ , "@@ "@@ "@@ "@@ "@@ upload@@ er pro@@ per@@ ti@@ es.@@ add(@@ pro@@ per@@ ty@@ Factory.create@@ ("@@ cre@@ ated@@ -@@ on@@ ", patchSet@@ Attri@@ but@@ e.@@ author@@ )); }
public static com.google.common.collect.Immutable@@ List<@@ java.lang.String> compare@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le review@@ Db@@ B@@ und@@ le@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le note@@ Db@@ B@@ und@@ le@@ ) { return com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le@@ .@@ compare@@ (@@ review@@ Db@@ B@@ und@@ le@@ , note@@ Db@@ B@@ und@@ le@@ , true@@ ); }
private void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { if (c@@ an@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ (@@ notes@@ .getChange@@ (), current@@ User@@ , va@@ l@@ )) { return@@ ; } per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (@@ notes@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REVI@@ EW@@ ER@@ ); }
public void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { check@@ Remo@@ ve@@ Reviewer@@ (@@ notes@@ , current@@ User@@ , reviewer@@ , 0); }
@org.junit.Test public void test@@ H@@ e@@ al@@ th@@ Check@@ Enabled(@@ ) throw@@ s java.lang.Exception { wh@@ en@@ (@@ config@@ Mo@@ ck@@ .get@@ Boolean@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _S@@ EC@@ T@@ ION@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ AB@@ L@@ E, com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ EN@@ AB@@ L@@ ED@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ false@@ ); in@@ iti@@ ali@@ ze@@ Config@@ ur@@ ation@@ (); assert@@ Th@@ at(@@ config@@ ur@@ ation.@@ h@@ e@@ al@@ th@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ F@@ alse@@ (); }
@java.lang.Override public org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment apply(@@ org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment base@@ , org.@@ junit.@@ run@@ n@@ er.@@ Des@@ crip@@ tion des@@ cription@@ ) { return new org.@@ junit.@@ run@@ ner@@ s.@@ mo@@ de@@ l.@@ State@@ ment@@ () { @java.lang.Override public void e@@ valu@@ ate@@ () throw@@ s java.lang.@@ Throwable { if ((@@ com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test@@ ) == null@@ ) { com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test = des@@ cription@@ ; } b@@ e@@ for@@ e@@ Test@@ (@@ des@@ cription@@ ); try { com.google.gerrit.acceptance.@@ Config@@ Res@@ et@@ ter re@@ set@@ Project@@ s(@@ all@@ User@@ s@@ )) { base.@@ e@@ valu@@ ate@@ (); } final@@ l@@ y { af@@ ter@@ Test@@ (); } } }; }
protected com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter re@@ set@@ Project@@ s(@@ com.google.gerrit.reviewdb.client.@@ Project.@@ .@@ . project@@ s) throw@@ s java.lang.Exception { return new com.google.gerrit.acceptance.@@ Config@@ Res@@ et@@ ter@@ (repo@@ Manag@@ er, met@@ a@@ Data@@ Update@@ Factory@@ , project@@ Cache@@ , project@@ s); }
@java.lang.Override public void e@@ valu@@ ate@@ () throw@@ s java.lang.@@ Throwable { if ((@@ com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test@@ ) == null@@ ) { com.google.gerrit.acceptance.@@ Ab@@ str@@ act@@ D@@ a@@ em@@ on@@ Test.@@ fi@@ rst@@ Test = des@@ cription@@ ; } b@@ e@@ for@@ e@@ Test@@ (@@ des@@ cription@@ ); try { com.google.gerrit.acceptance.@@ Project@@ Config@@ Res@@ et@@ ter re@@ set@@ Project@@ s(@@ all@@ Project@@ s, all@@ User@@ s@@ )) { base.@@ e@@ valu@@ ate@@ (); } final@@ l@@ y { af@@ ter@@ Test@@ (); } }
public static com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > load@@ All@@ Group@@ Ref@@ eren@@ ces@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ sitor@@ y.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NAM@@ ES@@ ); if (re@@ f == null@@ ) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } try (@@ org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ sitor@@ y@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er read@@ er = rev@@ Wal@@ k@@ .get@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.revwalk.RevCommit notes@@ Commit = rev@@ Wal@@ k.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = org.eclipse.jgit.@@ not@@ es.@@ Note@@ Map.@@ read@@ (@@ read@@ er, notes@@ Commit@@ ); com.google.common.collect.Immutable@@ Set.@@ Builder@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ eren@@ ce@@ s = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , java.lang.String> u@@ u@@ id@@ Ma@@ p = new java.util.Hash@@ Map@@ <@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e not@@ e : note@@ Map@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Notes@@ .get@@ Group@@ Ref@@ eren@@ ce@@ (@@ read@@ er, note@@ .get@@ Data@@ ()); group@@ Ref@@ eren@@ ces.@@ add(@@ group@@ Ref@@ eren@@ ce@@ ); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Not@@ es.@@ check@@ Not@@ es.@@ check@@ Con@@ si@@ st@@ en@@ c@@ y(@@ group@@ Ref@@ eren@@ ce@@ , u@@ id@@ Map@@ , name@@ Map@@ ); } return group@@ Ref@@ eren@@ ces.@@ bu@@ ild@@ (); }
public static com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config create@@ For@@ New@@ Group@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Config@@ (@@ group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), repo@@ sitor@@ y@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ ); group@@ Config.@@ set@@ Group@@ Cre@@ ation@@ (@@ group@@ Cre@@ ation@@ ); return group@@ Config@@ ; }
public static com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config load@@ For@@ Group@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , repo@@ sitor@@ y@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ ); return group@@ Config@@ ; }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > get@@ Load@@ ed@@ Group@@ () { check@@ Load@@ ed@@ (); load@@ ed@@ Group@@ .@@ P@@ res@@ ent@@ (("@@ Group@@ -@@ > check@@ Con@@ si@@ st@@ en@@ c@@ y@@ With@@ Group@@ Name@@ (t@@ )); return load@@ ed@@ Group@@ ; }
public static com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config load@@ For@@ Group@@ S@@ n@@ ap@@ sh@@ o@@ t(@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , org.eclipse.jgit.lib.ObjectId commit@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = new com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , repo@@ sitor@@ y@@ , group@@ ); group@@ Config.@@ load@@ (repo@@ sitor@@ y@@ , commit@@ Id); return group@@ Config@@ ; }
private java.util.@@ Optional@@ <@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ ternal@@ > load@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce@@ ) { java.util.List<java.lang.String> group@@ Ref@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D f : group@@ Cache@@ .get(@@ group@@ Ref@@ eren@@ ce@@ .get@@ UUID@@ ()).@@ map@@ In@@ ternal@@ Group@@ Description@@ :@@ new@@ ); if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ s.@@ log.warn@@ ("@@ In@@ vali@@ d %s (@@ %@@ s) f@@ ro@@ m g@@ roup name is f@@ ai@@ le@@ d@@ ", u@@ id@@ ), "@@ f@@ ai@@ le@@ d to lo@@ ad f@@ ro@@ m g@@ roup re@@ f group@@ "); return group@@ ; } return group@@ ; }
private java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> suggest@@ Group@@ s() throw@@ s com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gwtorm.server.OrmException { if (@@ con@@ flict@@ ing@@ Su@@ ggest@@ Parameter@@ s()) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ mis@@ s@@ ing sh@@ o@@ ul@@ d on@@ l@@ y h@@ av@@ e n@@ o m@@ or@@ e th@@ an on@@ e --@@ project an@@ d n w@@ it@@ h --@@ su@@ gg@@ est } java.util.List<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.collect.I@@ terable@@ s.@@ li@@ mit@@ (@@ group@@ Back@@ en@@ d.@@ suggest@@ (@@ suggest@@ , projects.@@ st@@ ream@@ ().@@ fin@@ d@@ Fi@@ rst@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ )), ((@@ li@@ mit@@ ) <@@ = 1@@ 0 : java.lang.@@ M@@ ath@@ .@@ min@@ (@@ li@@ mit@@ , 1@@ )@@ ))); java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> group@@ Info@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ group@@ Ref@@ s.@@ size()); for (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f : group@@ Ref@@ s) { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c des@@ c = group@@ Back@@ end@@ .get(@@ ref@@ .get@@ UUID@@ ()); if (@@ des@@ c != null@@ ) { group@@ Info@@ s.add(@@ j@@ son.@@ add@@ Option@@ s(@@ o@@ ption@@ s@@ )@@ .@@ for@@ m@@ at(@@ des@@ c@@ )); } else if ((@@ group@@ Back@@ end@@ ) instanceof com.google.gerrit.server.account.@@ In@@ ternal@@ Group@@ Back@@ end@@ ) { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ As@@ W@@ ar@@ n@@ ing@@ ("@@ Un@@ able %s (@@ %@@ s) ro@@ m g@@ roup name is f@@ ai@@ le@@ d@@ ", f@@ ai@@ le@@ d@@ , to lo@@ ad f@@ ro@@ m g@@ roup re@@ f ref@@ .getName@@ (), ref@@ .get@@ UUID@@ ()); } } return group@@ Info@@ s; }
int fin@@ d@@ Approval@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cache@@ , com.google.gerrit.server.account.@@ Email@@ s email@@ s) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Check@@ er.@@ is@@ Ex@@ e@@ mp@@ t@@ From@@ Owner@@ (change@@ Data@@ )) { return 0; } com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Owner@@ s@@ Db d@@ b = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Cache@@ .get@@ Instance@@ ().get@@ (project@@ State@@ , account@@ Cache@@ , email@@ s, repo@@ sitor@@ y@@ , change@@ Data@@ ); if ((@@ db@@ .get@@ N@@ um@@ Owner@@ s()) <@@ = 0) { return 0; } if ((@@ min@@ Vo@@ te@@ L@@ ev@@ el@@ ) <@@ = 0) { min@@ Vo@@ te@@ L@@ e@@ ve@@ l = com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config@@ .get@@ M@@ in@@ Owner@@ L@@ ev@@ el@@ (project@@ State@@ , project@@ State@@ ); } com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Check@@ er.@@ log.@@ tr@@ a@@ ce@@ (("@@ d@@ b k@@ ey " + (@@ db.@@ key@@ ))); return fin@@ d@@ Approval@@ (account@@ Cache@@ , db@@ ); }
static int get@@ M@@ in@@ Owner@@ Vo@@ te@@ L@@ ev@@ el@@ (@@ final java.lang.String project@@ State@@ ) throw@@ s com.google.gwtorm.server.OrmException { return ((@@ com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ ) == null@@ ) || (@@ project@@ State@@ ().@@ contains(@@ com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ P@@ L@@ e@@ ve@@ l : com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ config@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (@@ project@@ State@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E@@ ).get@@ In@@ t@@ (com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Config.@@ M@@ IN@@ _@@ O@@ W@@ N@@ ER@@ _@@ V@@ O@@ T@@ E_@@ LE@@ V@@ LE@@ V@@ , com.googlesource.gerrit.plugins.@@ fi@@ n@@ do@@ w@@ ner@@ s.@@ Owner@@ L@@ ev@@ el@@ ); }
public static com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info create@@ Tag@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , org.eclipse.jgit.revwalk.RevWalk r@@ w, com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, com.google.gerrit.server.@@ Web@@ Link@@ s link@@ s) throw@@ s java.io.IOException, org.eclipse.jgit.errors.@@ M@@ is@@ s@@ ing@@ Object@@ Exception { org.eclipse.jgit.revwalk.Rev@@ O@@ bject ob@@ ject = rw.@@ parse@@ An@@ y(@@ ref@@ .get@@ Object@@ Id()); boolean can@@ De@@ le@@ te = per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> web@@ Link@@ s = link@@ s.get@@ Tag@@ s(@@ project@@ Name@@ .get(), ref@@ .getName@@ ()); if (@@ ob@@ ject instanceof org.eclipse.jgit.revwalk.Rev@@ Tag@@ ) { org.eclipse.jgit.revwalk.Rev@@ T@@ a@@ g t@@ a@@ g = ((@@ org.eclipse.jgit.revwalk.Rev@@ Tag@@ ) (@@ o@@ bject@@ )); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent tag@@ g@@ er = tag@@ .get@@ Tag@@ g@@ er@@ Ident@@ (); return new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ (ref@@ .getName@@ (), tag@@ .get@@ Object@@ ().get@@ Name@@ (), tag@@ .get@@ F@@ ull@@ Message@@ ().@@ tri@@ m@@ (), (t@@ ag@@ g@@ er != null ? com.google.gerrit.server.@@ Comm@@ on@@ Con@@ ver@@ ter@@ s.@@ to@@ Git@@ Per@@ son@@ (t@@ ag@@ g@@ er@@ ) : null@@ ), can@@ Delete@@ , tag@@ g@@ er != null ? new java.sql.@@ Tim@@ est@@ amp@@ (t@@ ag@@ g@@ er@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ()) : null@@ ), (@@ web@@ Link@@ s.@@ isEmpty@@ () ? null : web@@ Link@@ s@@ )); } java.sql.@@ Tim@@ est@@ am@@ p ti@@ m@@ est@@ am@@ p = (@@ ob@@ ject instanceof org.eclipse.jgit.revwalk.Rev@@ Commit@@ ) ? new java.sql.@@ Tim@@ est@@ amp@@ (((@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ ) (@@ o@@ bject@@ )@@ ).get@@ Commit@@ ter@@ Ident@@ ().get@@ Wh@@ en@@ ().get@@ Time@@ ()) : null@@ ; return new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ (ref@@ .getName@@ (), ref@@ .get@@ Object@@ Id@@ ().get@@ Name@@ (), can@@ Delete@@ , ti@@ m@@ est@@ amp@@ (@@ web@@ Link@@ s.@@ isEmpty@@ () ? null : web@@ Link@@ s@@ )); }
@org.junit.Test public void li@@ ght@@ w@@ eight@@ Tag@@ () throw@@ s java.lang.Exception { g@@ ran@@ t@@ Tag@@ Permission@@ s(); com.google.gerrit.acceptance.@@ PushOne@@ Commit pu@@ s@@ h = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), test@@ Repo@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ .@@ to@@ ("@@ refs/heads/@@ master@@ "); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input inpu@@ t = new com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input@@ (); input.@@ re@@ f = "@@ v@@ 1@@ .@@ 0@@ "; input.@@ re@@ vi@@ sion = r@@ .get@@ Commit@@ ().get@@ Name@@ (); com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info result = tag@@ (in@@ pu@@ t.@@ ref@@ ).@@ create@@ (in@@ put@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ ref@@ ).@@ isEqualTo@@ (((@@ R@@ _@@ T@@ A@@ G@@ S@@ ) + (in@@ pu@@ t.@@ ref@@ ))); assert@@ Th@@ at(@@ result.@@ revision@@ ).@@ isEqualTo@@ (in@@ pu@@ t.@@ revision@@ ); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ True@@ (); assert@@ Th@@ at(@@ result.@@ cre@@ ated@@ ).@@ isEqualTo(@@ ti@@ m@@ est@@ amp@@ (r@@ )); input.@@ re@@ f = "@@ refs/@@ tag@@ s/@@ v@@ 2.@@ 0@@ "; result = tag@@ (in@@ pu@@ t.@@ ref@@ ).@@ create@@ (in@@ put@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ ref@@ ).@@ isEqualTo@@ (in@@ pu@@ t.@@ ref@@ ); assert@@ Th@@ at(@@ result.@@ revision@@ ).@@ isEqualTo@@ (in@@ pu@@ t.@@ revision@@ ); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ True@@ (); assert@@ Th@@ at(@@ result.@@ cre@@ ated@@ ).@@ isEqualTo(@@ ti@@ m@@ est@@ amp@@ (r@@ )@@ ).@@ set@@ Api@@ User@@ (user@@ ); result = tag@@ (in@@ pu@@ t.@@ ref@@ ).get@@ (); assert@@ Th@@ at(@@ result.@@ can@@ Delete@@ ).@@ is@@ F@@ alse@@ (); event@@ Recor@@ der@@ .@@ assert@@ Ref@@ Updated@@ Event@@ s(@@ project@@ .get(), result.@@ ref@@ , result.@@ revision@@ ); }
public void set@@ Account@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ Load@@ ed@@ (); this@@ .@@ load@@ ed@@ Account@@ s = load@@ ; }
public com.google.common.base.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.@@ Account@@ > get@@ Load@@ ed@@ Account@@ () { return load@@ ed@@ Account@@ ; }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ revision@@ ) != null@@ ) { rw.@@ re@@ set@@ (); rw.@@ mar@@ k@@ Start@@ (@@ revision@@ ); rw.@@ s@@ ort@@ (@@ Rev@@ S@@ ort.@@ RE@@ V@@ ER@@ S@@ E@@ ); regist@@ er@@ ed@@ O@@ n = new java.sql.@@ Tim@@ est@@ amp@@ (((@@ rw.@@ next@@ ().get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ )); org.eclipse.jgit.lib.@@ Config cf@@ g = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); load@@ ed@@ Account@@ = java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (c@@ f@@ g@@ , revision@@ .@@ name@@ )); } is@@ Load@@ ed = true@@ ; }
private java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.@@ Change@@ > open@@ Changes@@ By@@ Id@@ (@@ com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key branch@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.@@ Change@@ , com.google.gerrit.server.notedb.Change@@ Notes@@ > r = new java.util.Hash@@ Map@@ <@@ >(); for (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d : query@@ Provider@@ .get().@@ by@@ Branch@@ Open@@ (@@ branch@@ )) { r.@@ put@@ (c@@ d.@@ change@@ (), c@@ d.@@ notes@@ ()); } return r@@ ; }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ H@@ e@@ al@@ ty@@ () throw@@ s java.io.IOException { java.nio.file.@@ File@@ s.@@ create@@ File@@ (@@ te@@ mp@@ F@@ ol@@ der@@ .@@ new@@ F@@ ol@@ der@@ ("@@ un@@ h@@ e@@ al@@ th@@ y.@@ t@@ xt@@ ").@@ to@@ Path@@ ().@@ res@@ ol@@ ve@@ ("@@ ch@@ ild@@ ")); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Po@@ st@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ Mo@@ ck@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
@java.lang.Override protected void do@@ Get@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { if ((@@ un@@ h@@ e@@ al@@ th@@ y@@ File@@ .@@ ex@@ ist@@ s()) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ SC_@@ S@@ ER@@ VI@@ C@@ E_@@ UN@@ A@@ V@@ A@@ IL@@ AB@@ LE@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ h@@ e@@ al@@ th@@ .@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ Un@@ h@@ e@@ al@@ ty@@ () throw@@ s java.io.IOException { te@@ mp@@ F@@ ol@@ der.@@ delete@@ (); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Delete@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ Mo@@ ck@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Commit@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ e@@ h@@ e@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ Servlet.@@ H@@ e@@ al@@ th@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t h@@ e@@ al@@ th@@ y send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ sp@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { servle@@ t = new com.ericsson.gerrit.plugins.highavailability.@@ h@@ e@@ al@@ th@@ .@@ H@@ e@@ al@@ th@@ Servlet@@ (c@@ fg@@ ); }
@java.lang.Override protected void do@@ Delete@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.highavailability.@@ e@@ h@@ al@@ th@@ .@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.@@ com.ericsson.gerrit.plugins.highavailability.@@ e@@ al@@ .@@ H@@ e@@ al@@ Servlet.@@ log.error@@ ("@@ Fai@@ le@@ d to se@@ t un@@ h@@ e@@ al@@ th@@ y send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.highavailability.@@ sp@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Pu@@ re@@ Rev@@ er@@ t@@ Info pu@@ re@@ Rev@@ er@@ t(@@ @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String c@@ l@@ ai@@ m@@ ed@@ O@@ ri@@ gin@@ al@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return cal@@ c@@ ul@@ ate@@ Rev@@ er@@ t@@ Rev@@ er@@ t@@ .get@@ Notes@@ (), c@@ l@@ ai@@ m@@ ed@@ O@@ ri@@ gin@@ al@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot com@@ put@@ e p@@ rev@@ er@@ t e); } }
@@@ com.google.gerrit.common.@@ Null@@ able public java.lang.@@ B@@ oolean is@@ Pu@@ re@@ Rev@@ er@@ t@@ () throw@@ s com.google.gwtorm.server.OrmException { if ((@@ change@@ ().get@@ Rev@@ er@@ t@@ Of@@ ()) == null@@ ) { return null@@ ; } try { return pu@@ re@@ Rev@@ er@@ t@@ .get@@ Pu@@ re@@ Rev@@ er@@ t(@@ notes@@ , null@@ ).@@ is@@ Pu@@ re@@ Rev@@ er@@ t@@ ; } catch (java.io.IOException | com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception | com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ Co@@ ul@@ d not com@@ put@@ e p@@ rev@@ er@@ t e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Pu@@ re@@ Rev@@ er@@ t@@ Info apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { return cal@@ c@@ ul@@ ate@@ Rev@@ er@@ t@@ (rsrc@@ .get@@ Notes@@ (), c@@ l@@ ai@@ m@@ ed@@ O@@ ri@@ gin@@ al@@ ); }
private void set@@ Up@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb un@@ der@@ ) throw@@ s java.lang.Exception { in@@ jec@@ tor = com.google.inject.@@ G@@ ui@@ ce@@ .create@@ Injector@@ (@@ new com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ ()); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); l@@ if@@ ec@@ yc@@ le = new com.google.gerrit.@@ l@@ if@@ ec@@ yc@@ le.@@ L@@ if@@ ec@@ yc@@ le@@ Manag@@ er@@ (); l@@ if@@ ec@@ yc@@ le.@@ add(@@ in@@ jec@@ tor@@ ); l@@ if@@ ec@@ yc@@ le.@@ start@@ (); try (@@ com.google.gerrit.reviewdb.server.ReviewDb un@@ der@@ ly@@ ing@@ Db = in@@ M@@ em@@ ory@@ Dat@@ abase@@ .get@@ Dat@@ abase@@ ().@@ open@@ ()) { schema@@ Cre@@ ator@@ .create@@ (@@ un@@ der@@ ly@@ ing@@ Db@@ ); } d@@ b = schema@@ Factory.@@ open@@ (); set@@ Api@@ User@@ (account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id()); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s(@@ t@@ arget@@ ); }
@org.junit.Test public void test@@ Error@@ D@@ u@@ ring@@ T@@ ran@@ si@@ tion@@ To@@ Un@@ H@@ e@@ al@@ th@@ y@@ () throw@@ s java.io.IOException { te@@ mp@@ F@@ ol@@ der.@@ delete@@ (); javax.servlet.http.HttpServlet@@ Response res@@ pon@@ se@@ Mo@@ c@@ k = mo@@ ck@@ (@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ .@@ class@@ ); servle@@ t@@ .@@ do@@ Delete@@ (@@ null@@ , res@@ pon@@ se@@ Mo@@ ck@@ ); ve@@ r@@ if@@ y(@@ res@@ pon@@ se@@ Mo@@ ck@@ ).@@ send@@ Error@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Commit@@ h@@ e@@ al@@ th@@ .@@ SC_@@ IN@@ T@@ ER@@ N@@ AL@@ _S@@ ER@@ V@@ ER@@ _@@ ER@@ RO@@ R@@ ); }
private java.lang.String get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , S@@ ite@@ Path@@ s sit@@ e) { java.lang.String lo@@ c@@ ation = cfg@@ .get@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ J@@ G@@ RO@@ U@@ P@@ S_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ RO@@ T@@ O@@ O@@ L@@ _@@ AC@@ K@@ E@@ Y@@ ); if (@@ lo@@ c@@ ation == null@@ ) { return null@@ ; } java.nio.file.@@ Pat@@ h p = java.nio.file.@@ Path@@ s.get(@@ lo@@ cation@@ ); if (@@ p.@@ is@@ Ab@@ so@@ lu@@ te@@ ()) { return lo@@ cation@@ ; } return sit@@ e.@@ et@@ c@@ _@@ di@@ r.@@ res@@ ol@@ ve@@ (@@ lo@@ cation@@ ).@@ toString@@ (); }
public java.lang.String pro@@ to@@ co@@ l@@ St@@ ack@@ () { return get@@ In@@ ()) != null ? pro@@ to@@ co@@ l@@ s@@ For@@ () : null@@ ; }
private org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l get@@ Ch@@ an@@ ne@@ l@@ () { java.lang.String pro@@ to@@ co@@ l@@ St@@ ac@@ k = "@@ "; try { pro@@ to@@ co@@ l@@ St@@ ac@@ k = j@@ group@@ s@@ Config.@@ pro@@ to@@ co@@ l@@ St@@ ack@@ (); return pro@@ to@@ co@@ l@@ St@@ ac@@ k == null ? new org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l@@ () : new org.@@ j@@ group@@ s.@@ J@@ Ch@@ an@@ ne@@ l@@ (@@ pro@@ to@@ co@@ l@@ St@@ ack@@ St@@ ack@@ ); } catch (@@ java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ J@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.error@@ ("@@ Un@@ able to cre@@ ate a new ch@@ an@@ ne@@ l w@@ it@@ h {@@ }@@ ", pro@@ to@@ co@@ l@@ St@@ ack@@ , e); return null@@ ; } }
public void con@@ n@@ ec@@ t@@ () { try { ch@@ an@@ ne@@ l = get@@ Ch@@ an@@ ne@@ l@@ (); java.util.@@ Optional@@ <@@ java.@@ net.@@ In@@ et@@ Add@@ ress@@ > add@@ res@@ s = fin@@ d@@ Add@@ res@@ s(); if (@@ add@@ res@@ s.@@ is@@ P@@ res@@ ent@@ ()) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ J@@ S@@ ON@@ _@@ US@@ ER@@ S@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ de@@ bug@@ (("@@ Log@@ in st@@ ack@@ : " + (@@ ch@@ an@@ ne@@ l@@ .get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ ()))); ch@@ an@@ ne@@ l@@ .get@@ Pro@@ to@@ co@@ l@@ St@@ ack@@ T@@ ran@@ sp@@ ort@@ ().set@@ B@@ ind@@ s(@@ add@@ res@@ s.get@@ ()); com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ J@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ de@@ bug@@ ("@@ Account bo@@ un@@ d to {@@ } add@@ res@@ s.get@@ ()); } else { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ group@@ J@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.warn@@ ("@@ Co@@ ul@@ d not bo@@ und@@ : add@@ res@@ s not p@@ res@@ ent@@ ", "@@ add@@ ress@@ "); } ch@@ an@@ ne@@ l.@@ set@@ Rece@@ i@@ ver@@ (@@ this@@ ); ch@@ an@@ ne@@ l.@@ set@@ Dis@@ c@@ ard@@ Messag@@ es@@ (@@ true@@ ); ch@@ an@@ ne@@ l.@@ con@@ n@@ ec@@ t(@@ j@@ s@@ Config.@@ st@@ er@@ Name()); com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ J@@ group@@ J@@ s@@ Group@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.@@ info@@ ("@@ G@@ erri@@ t {@@ }@@ ", f@@ ull@@ y j@@ o@@ in@@ clu@@ st@@ ed group@@ s state@@ "); } ch@@ an@@ ne@@ l@@ s@@ Config.@@ j@@ s@@ Config.@@ st@@ er@@ Name()); } catch (@@ java.lang.Exception e) { com.ericsson.gerrit.plugins.highavailability.@@ p@@ e@@ er@@ s.@@ j@@ s@@ P@@ e@@ er@@ Info@@ Provi@@ der.@@ log.error@@ ("@@ Co@@ ul@@ d not ch@@ an@@ ne@@ l {@@ } f@@ ai@@ le@@ d group@@ s@@ Config.@@ st@@ an@@ ne@@ l@@ Name@@ (), ch@@ an@@ ne@@ l@@ .getName@@ (), e); } }
protected void set@@ U@@ se@@ Sig@@ ned@@ O@@ ff@@ B@@ y(@@ com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ B@@ oolean valu@@ e) throw@@ s java.lang.Exception { try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = met@@ a@@ Data@@ Update@@ Factory.create@@ (project@@ )) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); config@@ .getProject@@ ().get@@ Boolean@@ (@@ Boolean@@ .@@ F@@ U@@ E@@ .@@ IN@@ , Project@@ Config.@@ US@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ B@@ Y@@ , valu@@ e); config.@@ commit@@ (m@@ d); project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ state@@ .is@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ F@@ Y@@ ))) { return java.util.Collections.@@ empty@@ List(); } org.eclipse.jgit.revwalk.RevCommit commit = re@@ ce@@ ive@@ Ev@@ ent.@@ commit@@ ; org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent commit@@ ter = commit@@ .get@@ Commit@@ ter@@ Ident@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent auth@@ or = commit@@ .get@@ Author@@ Ident@@ (); boolean s@@ bo@@ Auth@@ or = false@@ ; boolean s@@ bo@@ Commit@@ ter = false@@ ; boolean s@@ bo@@ M@@ e = false@@ ; for (@@ org.eclipse.jgit.revwalk.@@ F@@ oo@@ ter@@ Lin@@ e foo@@ ter : commit@@ .get@@ F@@ oo@@ ter@@ Lin@@ es@@ ()) { if (@@ foo@@ ter.@@ match@@ es(@@ F@@ oo@@ ter@@ Key@@ .@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ F@@ _@@ B@@ Y@@ )) { java.lang.String e = foo@@ ter@@ .get@@ Email@@ Add@@ res@@ s(); if (@@ e != null@@ ) { s@@ bo@@ Auth@@ or |@@ = author@@ .get@@ Email@@ Add@@ res@@ s().@@ equals(@@ e); s@@ bo@@ Commit@@ ter@@ .get@@ Email@@ Add@@ res@@ s().@@ equals(@@ e); s@@ bo@@ M@@ e |@@ = user@@ .@@ has@@ Email@@ Add@@ res@@ s(@@ e); } } if (((@@ !@@ s@@ bo@@ Author@@ ) && (!@@ s@@ bo@@ Commit@@ ter@@ )) && (!@@ s@@ bo@@ Me@@ )) { try { per@@ m.@@ check@@ (@@ Ref@@ Permission@@ .@@ FO@@ R@@ G@@ E_@@ CO@@ M@@ IT@@ T@@ ER@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ in@@ vali@@ d Sig@@ ned@@ -@@ b@@ y author@@ /@@ commit@@ ter@@ /@@ upload@@ er in commit messag@@ e foo@@ ter foo@@ ter foo@@ ter@@ "); } } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ log.error@@ ("@@ can@@ not ch@@ ec@@ k FO@@ R@@ M@@ IT@@ T@@ E@@ R T@@ ER@@ ", e); throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ f@@ ai@@ le@@ ", e); } return java.util.Collections.@@ empty@@ List(); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return is@@ Visible@@ (); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case FO@@ R@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case FO@@ R@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case FO@@ R@@ M@@ IT@@ T@@ E@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case FO@@ R@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ AT@@ E_@@ CHANG@@ E : return can@@ Up@@ load@@ (); case U@@ P@@ D@@ AT@@ E_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (("@@ ref@@ s@@ /@@ for@@ /@@ " + (get@@ Ref@@ Name@@ ())@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ E_@@ CHANG@@ E@@ S : return can@@ P@@ riv@@ ate@@ Changes@@ (); case RE@@ AD@@ _@@ CON@@ FI@@ G : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ .@@ name@@ ()); case W@@ R@@ IT@@ E : return is@@ Owner@@ (); case S@@ I@@ P@@ _@@ V@@ AL@@ ID@@ AT@@ IO@@ N : return can@@ For@@ g@@ e@@ Author@@ ()) && (c@@ an@@ For@@ g@@ e@@ Commit@@ ter@@ ())) && (c@@ an@@ Up@@ load@@ Merg@@ es@@ ())) && (!(@@ project@@ Control@@ .getProject@@ Control@@ ().@@ is@@ Boolean@@ (@@ is@@ Boolean@@ (@@ is@@ Owner@@ ()))); } throw new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception@@ ((@@ per@@ m + " un@@ sup@@ p@@ orted@@ ")); }
@org.junit.Test public void create@@ Project@@ With@@ Pro@@ per@@ ti@@ es@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Project@@ Name = name@@ (@@ "@@ new@@ Project@@ "); com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input in = new com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input@@ (); in.@@ name = new@@ Project@@ Name@@ ; in.@@ des@@ crip@@ tion = "@@ Test des@@ cription@@ "; in.@@ submit@@ Type = com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ CH@@ ER@@ R@@ Y_@@ P@@ I@@ C@@ K@@ ; in.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ use@@ Sig@@ ned@@ O@@ ff@@ B@@ y = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ use@@ Content@@ Merg@@ e = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; in.@@ requ@@ i@@ re@@ Change@@ Id = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ; com.google.gerrit.extensions.common.@@ Project@@ Info p = gApi.@@ project@@ s().@@ create@@ (in@@ ).get@@ (); assert@@ Th@@ at(@@ p.@@ name@@ ).@@ isEqualTo@@ (@@ new@@ Project@@ Name); com.google.gerrit.reviewdb.client.@@ P@@ roject project = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ new@@ Project@@ Name@@ )@@ ).get@@ Project@@ (); com.google.gerrit.acceptance.@@ rest.@@ project.@@ Project@@ As@@ sert@@ .@@ assert@@ Project@@ Info@@ (project@@ , p@@ ); assert@@ Th@@ at(@@ project@@ Description@@ ()).@@ isEqualTo@@ (in@@ .@@ des@@ cription@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Submit@@ Type@@ ()).@@ isEqualTo@@ (in@@ .@@ submit@@ Typ@@ e); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ Config@@ (@@ Project@@ Config.@@ CON@@ T@@ R@@ I@@ B@@ UT@@ O@@ R@@ A@@ G@@ E@@ M@@ EN@@ T@@ S@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ (@@ Project@@ Config.@@ US@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ O@@ F@@ Y@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Sig@@ ned@@ O@@ ff@@ By@@ ); assert@@ Th@@ at(@@ project@@ .get@@ Boolean@@ Config@@ (@@ Project@@ Config.@@ CON@@ T@@ EN@@ T@@ _M@@ ER@@ G@@ E@@ )).@@ isEqualTo@@ (in@@ .@@ use@@ Content@@ Merge@@ ); assert@@ Th@@ at(@@ project@@ Config@@ Boolean@@ (@@ Project@@ Config.@@ RE@@ Q@@ U@@ I@@ RE@@ Q@@ U@@ E_@@ D@@ _@@ CHANG@@ E_@@ I@@ RE@@ Q@@ U@@ I@@ RE@@ _@@ CHANG@@ E_@@ I@@ RE@@ Q@@ U@@ I@@ RE@@ (in@@ .@@ requ@@ i@@ re@@ Change@@ Id); }
private java.util.Set<@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 3@@ .@@ Account@@ Set@@ ter@@ >> get@@ Fiel@@ d@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db@@ ) throw@@ s java.sql.@@ SQL@@ Exception { com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ S@@ che@@ m@@ a s@@ che@@ m@@ a = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )); java.sql.@@ Con@@ n@@ ec@@ tion con@@ n@@ ec@@ tion = schema@@ .get@@ Con@@ n@@ ection@@ (); java.util.@@ Set@@ <java.lang.String> co@@ lu@@ m@@ n@@ s = schema@@ .get@@ Di@@ a@@ lec@@ t@@ ().@@ list@@ Co@@ lu@@ m@@ n@@ s(@@ con@@ n@@ ection@@ , com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ .@@ T@@ AB@@ LE@@ ); return com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 3@@ .@@ AC@@ CO@@ UN@@ T_@@ FI@@ E@@ L@@ D@@ S@@ _M@@ A@@ P@@ .@@ en@@ try@@ Set@@ ().@@ st@@ ream@@ ().@@ filter@@ (( e) -@@ > co@@ lu@@ m@@ n@@ s.@@ contains(@@ e.get@@ Key@@ ()@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > s@@ can@@ Account@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or p@@ m@@ ) throw@@ s java.sql.@@ SQL@@ Exception { java.util.Set<@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 3@@ .@@ Account@@ Set@@ ter@@ >> fi@@ el@@ d@@ s = get@@ Fiel@@ d@@ s(@@ db@@ ); if (@@ fi@@ el@@ d@@ s.@@ isEmpty()) { return java.util.Collections.@@ empty@@ Set@@ (); } java.lang.String quer@@ y = fi@@ el@@ d@@ s.@@ st@@ ream@@ ().@@ map@@ (( f@@ ) -@@ > f@@ .getKey@@ ()).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ", account@@ _@@ id@@ , regist@@ er@@ ed@@ _@@ on@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ F@@ RO@@ M %s com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 3@@ .@@ T@@ AB@@ LE@@ ))); try (@@ java.sql.@@ State@@ ment st@@ m@@ t = new@@ State@@ ment@@ (db@@ )@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Query@@ (@@ query@@ ))) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > s = new java.util.Hash@@ Set<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.@@ Account a = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (r@@ s.get@@ In@@ t@@ (1@@ )), r@@ s.get@@ Tim@@ est@@ amp@@ (@@ 2@@ )); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 4@@ .@@ Account@@ Set@@ ter@@ > fi@@ el@@ d : fi@@ el@@ d@@ s) { fi@@ el@@ d@@ .getValue@@ ().set@@ (@@ a@@ , r@@ s@@ , fi@@ el@@ d@@ .getKey@@ ()); } s.@@ add@@ (@@ a@@ ); } return update@@ (1); }
protected boolean is@@ Rest@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ ) { return u@@ ri@@ .@@ match@@ er@@ (get@@ URI@@ (req@@ )).@@ match@@ es@@ (); }
public synchronized boolean in@@ G@@ ra@@ ce@@ Per@@ i@@ o@@ d(@@ ) { if ((@@ g@@ ra@@ mit@@ er@@ s) < 0) { g@@ ra@@ mit@@ s = 0; } return ((@@ g@@ ra@@ mit@@ er@@ ) > 0; }
private final com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ com.google.gerrit.reviewdb.client.Account.Id key@@ ) throw@@ s java.lang.Exception { return create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ fin@@ der.@@ fi@@ rst@@ Match@@ ing@@ (@@ li@@ mit@@ Config@@ Type@@ , user@@ Factory.create@@ (key@@ ))); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.httpd.@@ All@@ Request@@ Filter@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ for@@ c@@ er@@ .@@ class@@ ); cach@@ e@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ C@@ A@@ CH@@ E_@@ NAM@@ E_@@ RE@@ ST@@ A@@ P@@ I@@ _@@ AC@@ CO@@ UN@@ T@@ ID@@ , Account.@@ Id@@ .@@ class@@ , .@@ class@@ ).@@ load@@ er@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ Res@@ tApi@@ Load@@ er@@ Account@@ Id@@ .@@ class@@ ); cach@@ e@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Http@@ Module@@ .@@ C@@ A@@ CH@@ E_@@ NAM@@ E_@@ RE@@ ST@@ A@@ P@@ I@@ _@@ RE@@ M@@ O@@ T@@ H@@ , java.lang.String@@ .@@ class@@ , new com.google.inject.@@ name.@@ Nam@@ ed@@ (@@ R@@ ate@@ M@@ s@@ g@@ H@@ el@@ p@@ er.@@ RE@@ A@@ ST@@ _@@ CON@@ FI@@ G@@ LE@@ AN@@ _M@@ S@@ G@@ _@@ AN@@ NO@@ T@@ ION@@ P@@ RE@@ ST@@ _@@ RE@@ A@@ P@@ I@@ FI@@ G@@ I@@ C@@ UR@@ LE@@ AN@@ NO@@ T@@ ION@@ )).@@ to@@ (@@ RE@@ ST@@ A@@ P@@ I@@ C@@ E@@ X@@ C@@ E@@ X@@ C@@ E@@ ED@@ _M@@ S@@ G@@ _@@ C@@ AN@@ NO@@ T@@ ION@@ )).@@ to@@ (@@ RE@@ ST@@ A@@ P@@ _@@ LI@@ M@@ I@@ T_@@ E@@ X@@ C@@ E@@ ED@@ _M@@ S@@ G@@ E@@ ); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ , javax.servlet.@@ Servlet@@ Response res@@ , final javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { if (@@ is@@ Rest@@ (req@@ )) { com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der r@@ ate@@ H@@ ol@@ der = null@@ ; com.google.gerrit.server.@@ Current@@ User u = user@@ .get@@ (); com.google.gerrit.reviewdb.client.Account.Id account@@ Id = null@@ ; if (@@ u@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { account@@ Id = u@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Account@@ Id(); try { r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der = li@@ mit@@ Account@@ .get(@@ account@@ Id); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Cannot g@@ e@@ t r@@ ate li@@ mit@@ s for ac@@ count '@@ {@@ '@@ }@@ '@@ ", account@@ Id); com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ c@@ er.@@ log.warn@@ (@@ msg@@ , e); } } else { try { r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der = li@@ mit@@ er@@ .get(@@ req@@ .get@@ Remote@@ H@@ o@@ st@@ ()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Cannot g@@ e@@ t r@@ ate li@@ mit@@ s for an@@ on@@ y@@ mo@@ u@@ s f@@ ro@@ m remo@@ te ho@@ s@@ t '@@ ", '@@ ", req@@ .get@@ Remote@@ H@@ o@@ st@@ ()); com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Res@@ tApi@@ Request@@ R@@ ate@@ E@@ n@@ for@@ c@@ er.@@ log.warn@@ (@@ msg@@ , e); } if ((@@ (!(@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der.@@ G@@ ol@@ der.@@ G@@ in@@ ra@@ ce@@ ())) && ((@@ d@@ r@@ ate@@ Li@@ mit@@ er@@ H@@ ol@@ der@@ .get@@ Li@@ mit@@ ()) != null@@ )) && (!(@@ Li@@ mit@@ er@@ Li@@ mit@@ er@@ H@@ ol@@ der@@ .get@@ Ac@@ qu@@ i@@ re@@ ()))) { java.lang.String ms@@ g = java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at(@@ li@@ mit@@ ed@@ Ex@@ ce@@ ed@@ M@@ s@@ g@@ r@@ ate@@ H@@ ol@@ der@@ .get@@ Res@@ tApi@@ ().get@@ (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ E@@ n@@ c@@ a.@@ P@@ P@@ P@@ P@@ P@@ P@@ EC@@ ON@@ D@@ S@@ ); for@@ m@@ at@@ ter.@@ send@@ Error@@ (@@ an@@ on@@ y@@ mo@@ u@@ s f@@ ro@@ m = ((@@ '@@ " + (@@ e.@@ p@@ ed@@ ed@@ ed@@ ed@@ ed@@ User@@ ())) * 1@@ 00@@ 00@@ 00@@ 00@@ "), t@@ s@@ qu@@ o@@ s@@ qu@@ o@@ t@@ s@@ qu@@ o@@ t@@ a.@@ t@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ ()@@ )).@@ toString@@ (); }
private java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der create@@ With@@ B@@ ur@@ st@@ y@@ Li@@ mit@@ er@@ (@@ com.google.common.base.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Account@@ Li@@ mit@@ > li@@ m@@ it@@ s(@@ com.google.gerrit.server.change.@@ Li@@ mit@@ , java.lang.String s@@ av@@ at@@ or an@@ n = com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ H@@ ol@@ der.@@ create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ li@@ mit@@ ); return com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der.@@ create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (@@ li@@ mit@@ ); }
@java.lang.Override public final com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der load@@ (@@ Key key@@ ) throw@@ s java.lang.Exception { if (((@@ k@@ ind@@ ) == (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ Ab@@ str@@ act@@ H@@ ol@@ der@@ Cache@@ Load@@ er@@ Type.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ )) && (@@ k@@ ey instanceof java.lang.String@@ )) { return create@@ With@@ B@@ ur@@ st@@ y@@ R@@ ate@@ Li@@ mit@@ er@@ (); } if (((@@ k@@ ind@@ ) == (com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ Ab@@ str@@ act@@ H@@ ol@@ der@@ Cache@@ Load@@ er.@@ AC@@ CO@@ UN@@ T@@ ID@@ )) && (@@ k@@ ey instanceof com.google.gerrit.reviewdb.client.Account.@@ Id@@ )) { return create@@ With@@ B@@ ur@@ st@@ y@@ Li@@ mit@@ (((@@ com.google.gerrit.reviewdb.client.Account.@@ Id@@ ) (key@@ ))); } return com.googlesource.gerrit.plugins.@@ qu@@ o@@ t@@ a.@@ Module@@ .@@ H@@ ol@@ der.@@ E@@ M@@ P@@ T@@ Y@@ ; }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ Action@@ <@@ com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factory@@ , T> action@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { return execute@@ (@@ action@@ , default@@ s()); }
@java.lang.Override protected boolean try@@ O@@ n@@ try@@ O@@ n@@ (java.lang.@@ Throwable t@@ ) { if (@@ t instanceof com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ ) { t = t@@ .get@@ C@@ au@@ se@@ (); } return t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ; }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ Action@@ <@@ com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factory@@ , T> action@@ , com.google.gerrit.server.@@ update.@@ Option@@ s op@@ t@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { try { if (!(@@ m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ())) { return do@@ Execu@@ te@@ (@@ update@@ Factory@@ , action@@ Factory@@ , com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Builder@@ <@@ com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); } return do@@ Execu@@ te@@ (@@ update@@ Factory@@ , action@@ , op@@ , t@@ s); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gerrit.extensions.restapi.RestApi@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gerrit.extensions.restapi.RestApi@@ Exception@@ .@@ class@@ ); com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ (t@@ ag@@ ); } }
private com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ Ref@@ s@@ Met@@ a@@ ExternalId@@ s@@ Update update@@ Note@@ Map@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ ExternalId@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ updat@@ er, ( i@@ ) -@@ > { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter in@@ s = repo@@ .@@ new@@ Object@@ In@@ sert@@ er@@ ()) { org.eclipse.jgit.lib.ObjectId re@@ v = read@@ Revision@@ (repo@@ ); af@@ ter@@ Read@@ .@@ run@@ (); try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = read@@ Note@@ Map@@ (r@@ w, rev@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s updat@@ ed@@ Ex@@ t@@ Id@@ s = i.@@ update@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ Open@@ (repo@@ , r@@ w, in@@ s, note@@ Map@@ )); return commit@@ (repo@@ , r@@ w, in@@ s@@ , note@@ Map@@ , commit@@ s); } }
public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey parent@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , com.google.gerrit.reviewdb.client.@@ Project@@ > project@@ s = read@@ All@@ Project@@ s(); com.google.common.collect.@@ Multimap@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , com.google.gerrit.reviewdb.client.Project.NameKey@@ > ch@@ ild@@ re@@ n = parent@@ To@@ Ch@@ ild@@ ren@@ (project@@ s); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ With@@ User per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> result@@ s = new java.util.ArrayList<@@ >(); de@@ p@@ th@@ Fi@@ rst@@ F@@ orm@@ at(@@ result@@ s, per@@ m@@ , project@@ s, ch@@ ild@@ ren@@ , parent@@ ); return result@@ s; }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> apply(@@ com.google.gerrit.server.project.Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (re@@ cur@@ si@@ ve@@ ) { return ch@@ ild@@ Project@@ List@@ (c@@ er@@ .get@@ Revision@@ ().get@@ ()); } return di@@ re@@ ct@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); }
com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s as@@ User@@ (com.google.gerrit.server.@@ Current@@ User other@@ User@@ ) { return new com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s(@@ db, query@@ Provider@@ , re@@ wri@@ ter@@ , op@@ F@@ ac@@ to@@ ri@@ es@@ , has@@ O@@ per@@ and@@ s, user@@ Factory@@ , com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (@@ other@@ User@@ ), per@@ mission@@ Back@@ end@@ , notes@@ Factory@@ , change@@ Data@@ Factory@@ , comment@@ s@@ Util@@ , account@@ Res@@ ol@@ ver@@ , group@@ Back@@ end@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, patch@@ List@@ Cache@@ , repo@@ Manag@@ er, project@@ Cache@@ , ch@@ ild@@ Project@@ List@@ er@@ ry@@ Run@@ , submit@@ D@@ ry@@ Run@@ , con@@ flict@@ s@@ Cache@@ , index@@ Config@@ , list@@ Member@@ s, star@@ red@@ Changes@@ Util@@ , account@@ Cache@@ , allow@@ s@@ Draft@@ s, notes@@ M@@ ig@@ r@@ ation@@ ); }
@@@ com.google.gerrit.server.query.@@ change.@@ O@@ per@@ at@@ or public com.google.gerrit.server.query.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData> parent@@ project@@ (java.lang.String name@@ ) { return new com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predicate@@ (@@ args.@@ project@@ Cache@@ , arg@@ s@@ .@@ ch@@ ild@@ Project@@ List@@ er@@ , args.@@ self@@ , name); }
public boolean is@@ Re@@ ach@@ able@@ From@@ (com.google.gerrit.server.@@ project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ , java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s) { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { ref@@ s = ref@@ Fil@@ ter.@@ create@@ (@@ state@@ , repo@@ ).@@ filter@@ (ref@@ s, true@@ ); return com.google.gerrit.server.change.@@ Inclu@@ ded@@ In@@ Res@@ ol@@ v@@ er.@@ in@@ clu@@ ded@@ In@@ An@@ y(@@ repo@@ , r@@ w, commit@@ , refs.@@ values@@ ()); } catch (java.io.IOException e) { com.google.gerrit.server.project.@@ Re@@ ach@@ able@@ .@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ve@@ r@@ if@@ y per@@ mission@@ s to commit ob@@ ject %s in repo@@ sitor@@ y %@@ s", comm@@ it.@@ name@@ (), state@@ .getName@@ Key@@ ()), e); return false@@ ; } }
public boolean can@@ Read@@ (com.google.gerrit.server.@@ project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = state@@ .getName@@ Key@@ (); try { java.util.List<@@ com.google.gerrit.server.query.change.ChangeData> change@@ s = query@@ Provider@@ .get().@@ en@@ for@@ ce@@ Vi@@ si@@ b@@ ili@@ ty@@ (@@ true@@ ).@@ by@@ Project@@ Commit@@ (project@@ , commit@@ ); if (!(@@ changes.@@ isEmpty())) { return true@@ ; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.@@ Commit@@ Collec@@ tion.@@ log.error@@ ((@@ (("@@ Cannot l@@ oo@@ k up change for change " + (@@ comm@@ it.@@ name@@ ())) + " in ") + project@@ ), e); } return false@@ ; }
boolean is@@ Re@@ ach@@ able@@ From@@ Head@@ s@@ Or@@ Tag@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { try { org.eclipse.jgit.lib.@@ Ref@@ Dat@@ ab@@ ase ref@@ d@@ b = repo@@ .getRef@@ Dat@@ abase@@ (); java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > head@@ s = ref@@ db@@ .getRef@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ values@@ (); java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > tag@@ s = db@@ .getRef@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ).@@ values@@ (); java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (((@@ head@@ s.@@ size@@ ()) + (t@@ ag@@ s.@@ size@@ ()))); for (@@ org.eclipse.jgit.lib.@@ Re@@ f r : com.google.common.collect.I@@ terable@@ s.@@ con@@ c@@ at(@@ head@@ s, tag@@ s@@ )) { refs.@@ put@@ (r@@ .getName@@ (), r@@ ); } return false@@ ; } catch (java.io.IOException e) { com.google.gerrit.server.project.Project@@ Contro@@ l.@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ve@@ r@@ if@@ y per@@ mission@@ s to commit ob@@ ject %s in repo@@ sitor@@ y %@@ s", comm@@ it.@@ name@@ (), get@@ Project@@ ().get@@ NameKey@@ ()), e); return false@@ ; } }
protected static java.util.List<@@ com.google.gerrit.@@ index.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> pre@@ di@@ c@@ at@@ es@@ (com.google.gerrit.server.@@ project.@@ Project@@ Cach@@ e project@@ Cache@@ , com.google.gerrit.server.@@ project@@ Cache@@ Ch@@ ild@@ Project@@ List@@ er ch@@ ild@@ Project@@ List@@ er@@ , com.google.inject.@@ Provider@@ <@@ com.google.gerrit.server.@@ Current@@ User@@ > self@@ , java.lang.String valu@@ e) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ value@@ )); if (project@@ State == null@@ ) { return java.util.Collections.@@ empty@@ List(); } java.util.List<@@ com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> r = new java.util.ArrayList<@@ >(); r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (project@@ State@@ .getName@@ ())); try { com.google.gerrit.server.project.Project@@ Resource pro@@ j = new com.google.gerrit.server.project.Project@@ Resource@@ (project@@ State@@ , self@@ .get()); for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info p : ch@@ ild@@ List@@ er.@@ re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ pro@@ j@@ .getName@@ Key@@ ())) { r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (@@ p.@@ name@@ )); } } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predi@@ c@@ ate.@@ log.warn@@ ("@@ can@@ not ch@@ ec@@ k per@@ mission@@ s to exp@@ an@@ d ch@@ il@@ d project@@ s", e); } return r@@ ; }
public void fi@@ re@@ (@@ com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.@@ Account account@@ , java.sql.@@ Tim@@ est@@ am@@ p wh@@ en@@ , boolean is@@ P@@ riv@@ ate@@ ) { if (!(@@ list@@ ener@@ s.@@ iter@@ ator@@ ().@@ has@@ N@@ ext@@ ())) { return@@ ; } try { com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ d.@@ Event ev@@ ent = new com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ d.@@ Event@@ (@@ util.@@ change@@ Info@@ (change@@ ), util.@@ account@@ Info@@ (account@@ ), is@@ P@@ riv@@ ate@@ , wh@@ en@@ ); for (@@ com.google.gerrit.extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ d@@ List@@ en@@ er l : list@@ ener@@ s) { try { l.@@ on@@ P@@ riv@@ ate@@ State@@ d(@@ event@@ ); } catch (@@ java.lang.Exception e) { util.@@ log@@ Event@@ List@@ ener@@ Error@@ (@@ event@@ , e); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.@@ extensions.@@ events.@@ P@@ riv@@ ate@@ State@@ d.@@ log.error@@ ("@@ Co@@ ul@@ d@@ n@@ '@@ t fi@@ r@@ e event@@ ", e); } }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) { try { com.google.gerrit.server.mail.@@ Re@@ ply@@ To@@ Change@@ d.@@ fi@@ re@@ (change@@ , ctx@@ .getAccount@@ (), ctx@@ .get@@ Wh@@ en@@ (), is@@ P@@ riv@@ ate@@ ); } catch (com.google.gerrit.server.@@ update.@@ Update@@ Exception e) { com.google.gerrit.server.change.@@ Re@@ p@@ e@@ Pro@@ cess@@ ing.@@ log.error@@ ("@@ Cannot e@@ t change {@@ }@@ ", e); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!@@ (c@@ an@@ Delete@@ P@@ riv@@ ate@@ (rsrc@@ ).@@ value@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to un@@ mar@@ k private@@ "); } if (!(@@ rsrc@@ .getChange@@ ().@@ is@@ P@@ riv@@ ate@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ not is not private@@ "); } com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p o@@ p = set@@ P@@ riv@@ ate@@ Op@@ Factory.@@ cre@@ ate@@ Op@@ (cm@@ Util@@ , false@@ , input@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (rsrc@@ .getId@@ (), op@@ ).@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
public com.google.gerrit.server.@@ data.@@ Change@@ Attri@@ but@@ e as@@ Change@@ Attribute@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change@@ ) { com.google.gerrit.server.@@ data.@@ Change@@ Attri@@ but@@ e a = new com.google.gerrit.server.@@ data.@@ Change@@ Attribute@@ (); a.@@ project = change@@ .getProject@@ ().get@@ (); a.@@ b@@ ran@@ ch = change@@ .get@@ Dest@@ ().get@@ Sh@@ ort@@ Name@@ (); a.@@ to@@ p@@ i@@ c = change@@ .get@@ To@@ pic@@ (); a.@@ id = change@@ .getKey@@ ().get@@ (); a.@@ n@@ u@@ mb@@ er = change@@ .getId@@ ().get@@ (); a.@@ sub@@ ject = change@@ .get@@ Sub@@ ject@@ (); try { a.@@ commit@@ Messag@@ e = change@@ Data@@ Factory.create@@ (db, change@@ ).@@ commit@@ Message@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.@@ events.@@ Event@@ Factory.@@ log.error@@ (("@@ E@@ rror while get@@ t@@ ing f@@ ull commit messag@@ e for change " + (@@ a.@@ n@@ umber@@ ))); } a.@@ ur@@ l = get@@ Change@@ Url@@ (change@@ ); a.@@ ow@@ ne@@ r = as@@ Account@@ Attribute@@ (change@@ .get@@ Owner@@ ()); a.@@ as@@ signe@@ e = as@@ Account@@ Attribute@@ (change@@ .get@@ As@@ signe@@ e@@ ()); a.@@ as@@ signe@@ e = as@@ Account@@ Attribute@@ (change@@ .get@@ Statu@@ s(); a.@@ cre@@ ated@@ O@@ n = (change@@ .get@@ Cre@@ ated@@ On@@ ().get@@ Time@@ ()) / 1@@ 00@@ 0@@ L@@ ; a.@@ is@@ W@@ i@@ p = (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) ? true : null@@ ; a.@@ is@@ P@@ riv@@ ate = (@@ change.@@ is@@ P@@ riv@@ ate@@ ()) ? true : null@@ ; return a@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!@@ (c@@ an@@ Set@@ P@@ riv@@ ate@@ (rsrc@@ ).@@ value@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to mar@@ k private@@ "); } if (rsrc@@ .getChange@@ ().@@ is@@ P@@ riv@@ ate@@ ()) { return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); } com.google.gerrit.server.change.@@ Set@@ P@@ riv@@ ate@@ O@@ p o@@ p = set@@ P@@ riv@@ ate@@ Op@@ Factory.@@ cre@@ ate@@ Op@@ (cm@@ Util@@ , true@@ , input@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), rsrc@@ .getProject@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (rsrc@@ .getId@@ (), op@@ ).@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ cre@@ ated@@ ("@@ "); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (re@@ cur@@ si@@ ve@@ ) { return group@@ Member@@ s@@ T@@ ran@@ si@@ tive@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return group@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
private void add@@ In@@ ternal@@ Detail@@ s(@@ com.google.gerrit.extensions.common.@@ Group@@ Info info@@ , com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group@@ , java.util.@@ f@@ unc@@ tion.@@ Sup@@ pli@@ er@@ <@@ com.google.gerrit.server.account.@@ Group@@ Control@@ > group@@ Control@@ Sup@@ pli@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException { info.@@ des@@ crip@@ tion = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ int@@ er@@ n@@ al@@ Group@@ .get@@ Description@@ ()); info@@ .group@@ Id = int@@ er@@ n@@ al@@ Group@@ .getId@@ ().get@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D owner@@ Group@@ UU@@ I@@ D = int@@ er@@ n@@ al@@ Group@@ .get@@ Owner@@ Group@@ UUID@@ (); if (@@ owner@@ Group@@ UU@@ I@@ D != null@@ ) { info.@@ owner@@ Id = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (@@ owner@@ Group@@ UUID@@ .get()); com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c group@@ Back@@ end@@ .get(@@ owner@@ Group@@ UUID@@ ); if (@@ o != null@@ ) { info.@@ ow@@ ne@@ r = o@@ .getName@@ (); } info.@@ cre@@ ated@@ O@@ n = int@@ er@@ n@@ al@@ Group@@ .get@@ Cre@@ ated@@ On@@ (); if (@@ o@@ ption@@ s.@@ contains(@@ com.google.gerrit.server.g@@ roup@@ .@@ M@@ E@@ M@@ B@@ ER@@ S@@ )) { info.@@ me@@ mber@@ s = group@@ Member@@ s@@ Di@@ re@@ ct@@ Member@@ s@@ (@@ int@@ er@@ n@@ al@@ Group@@ , group@@ Control@@ Sup@@ pli@@ er@@ .get()); } if (@@ o@@ ption@@ s.@@ contains(@@ com.google.gerrit.server.g@@ roup@@ .@@ IN@@ C@@ L@@ U@@ D@@ ES@@ )) { info.@@ in@@ clu@@ de@@ s = list@@ Sub@@ group@@ s.get@@ ().get@@ Di@@ re@@ ct@@ Sub@@ group@@ s@@ (@@ int@@ er@@ n@@ al@@ Group@@ , group@@ Control@@ .get()); } }
com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s as@@ User@@ (com.google.gerrit.server.@@ Current@@ User other@@ User@@ ) { return new com.google.gerrit.server.query.change.Change@@ Query@@ Buil@@ der.@@ Argument@@ s(@@ db, query@@ Provider@@ , re@@ wri@@ ter@@ , op@@ F@@ ac@@ to@@ ri@@ es@@ , has@@ O@@ per@@ and@@ s, user@@ Factory@@ , com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (@@ other@@ User@@ ), per@@ mission@@ Back@@ end@@ , notes@@ Factory@@ , change@@ Data@@ Factory@@ , comment@@ s@@ Util@@ , account@@ Res@@ ol@@ ver@@ , group@@ Back@@ end@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, patch@@ List@@ Cache@@ , repo@@ Manag@@ er, project@@ Cache@@ , ch@@ ild@@ Project@@ s, submit@@ D@@ ry@@ Run@@ , con@@ flict@@ s@@ Cache@@ , index@@ Config@@ , group@@ Member@@ s@@ By@@ Email@@ , star@@ red@@ Changes@@ Util@@ , account@@ Cache@@ , allow@@ s@@ Draft@@ s, notes@@ M@@ ig@@ r@@ ation@@ ); }
void display(@@ java.io.@@ P@@ r@@ int@@ Wri@@ ter wri@@ ter@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > g@@ roup = group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ name@@ )); java.lang.String error@@ T@@ ex@@ t = not fo@@ un@@ d or not vi@@ si@@ b@@ le if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { wri@@ ter.@@ write@@ (@@ error@@ Text@@ ); wri@@ ter.@@ f@@ lu@@ sh@@ (); return@@ ; } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> me@@ mber@@ s = group@@ Member@@ s@@ .@@ new@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ Member@@ .get()); com.google.gerrit.server.@@ i@@ o@@ util.@@ Co@@ lu@@ m@@ n@@ Format@@ ter for@@ m@@ at@@ ter = new com.google.gerrit.server.@@ i@@ o@@ util.@@ Co@@ lu@@ m@@ n@@ Format@@ ter@@ (@@ wri@@ ter@@ , '@@ \@@ t@@ '); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ id@@ "); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ user@@ name@@ "); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ ("@@ email@@ "); for@@ m@@ at@@ ter.@@ next@@ Line@@ (); for (@@ com.google.gerrit.extensions.common.@@ Account@@ Info me@@ mb@@ er : me@@ mber@@ s) { if (@@ me@@ mb@@ er == null@@ ) { continue@@ ; } for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (java.lang.@@ Integ@@ er.@@ toString@@ (@@ me@@ mb@@ er.@@ _@@ account@@ Id@@ )); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ me@@ mb@@ er.@@ user@@ name, "@@ n@@ /@@ a@@ ")); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ me@@ mb@@ er.@@ name@@ ), "@@ n@@ /@@ a@@ /@@ a@@ ")); for@@ m@@ at@@ ter.@@ add@@ Co@@ lu@@ m@@ n@@ (@@ com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (@@ me@@ mb@@ er.@@ email@@ , "@@ n@@ /@@ a@@ /@@ ")); for@@ m@@ at@@ ter.@@ next@@ Line@@ (); } for@@ m@@ at@@ ter.@@ fin@@ is@@ h@@ (); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ api.@@ change.@@ allow@@ ed@@ Id@@ ent@@ if@@ i@@ er@@ s", value@@ s = { "@@ P@@ RO@@ JEC@@ T_@@ N@@ U@@ M@@ I@@ C_@@ ID@@ ", "@@ N@@ U@@ M@@ ER@@ I@@ C_@@ ID@@ " }@@ ) public void pre@@ c@@ Change@@ Id@@ Ret@@ ur@@ n@@ s@@ B@@ adRequest@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i c@@ Api@@ 1 = gApi.changes().id(@@ project@@ .get(), change@@ Info.@@ _@@ n@@ umber@@ ); assert@@ Th@@ at@@ (c@@ 1@@ .get().@@ changeId@@ ).@@ isEqualTo@@ (change@@ Info.@@ change@@ Id); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i c@@ Api@@ 2 = gApi.changes().id(@@ change@@ Info.@@ _@@ n@@ umber@@ ); assert@@ Th@@ at@@ (c@@ Api@@ .get().@@ changeId@@ ).@@ isEqualTo@@ (change@@ Info.@@ change@@ Id); com.google.gerrit.extensions.common.@@ Change@@ Info c@@ i = gApi.changes().@@ create@@ (@@ new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ d@@ if@@ f@@ er@@ ent message@@ "@@ )@@ ).get@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ Id@@ ent@@ if@@ i@@ er@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ ("@@ Th@@ e pro@@ vi@@ de@@ d change id@@ ent@@ if@@ i@@ er " + (c@@ i.@@ changeId@@ )) + " is de@@ pre@@ c@@ . U@@ se change@@ Number@@ ' in@@ st@@ ead@@ .@@ ")); gApi.changes().id(@@ c@@ i.@@ change@@ Id); }
private void check@@ Id@@ Type@@ (com.google.gerrit.server.@@ Change@@ F@@ in@@ der.@@ Change@@ Id@@ Type type@@ , boolean en@@ for@@ ce@@ De@@ pre@@ cation@@ , java.lang.String va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception { if (@@ en@@ for@@ ce@@ De@@ pre@@ c@@ ation && (!(@@ allow@@ ed@@ Id@@ Typ@@ es.@@ contains(@@ type@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ Th@@ e pro@@ vi@@ de@@ d change id@@ ent@@ if@@ i@@ er %s is pre@@ c@@ ated@@ . " + "@@ U@@ se '@@ project@@ '@@ ~@@ '@@ in@@ st@@ ead@@ .@@ "), va@@ l@@ )); } }
public java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > fin@@ d(@@ java.lang.String id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return fin@@ d@@ (@@ id@@ , false@@ ); }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource@@ .@@ St@@ a@@ r parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parent@@ .getUser@@ (); com.google.gerrit.server.change.Change@@ Resource change = changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ); java.util.@@ Set@@ <java.lang.String> label@@ s = star@@ red@@ Changes@@ Util@@ .get@@ Label@@ s(@@ user@@ .getAccount@@ Id(), change@@ .getId()); return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Star@@ (user@@ , change, label@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.account.Account@@ Resource@@ , com.google.gerrit.server.account.@@ Star@@ red@@ Chang@@ es.@@ E@@ mpty@@ Input@@ > create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, pre@@ De@@ pre@@ c@@ ated@@ Id@@ ent@@ if@@ i@@ er@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { try { return create@@ Provider@@ .get().@@ set@@ Change@@ (@@ changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ )); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account %s not fo@@ un@@ d id@@ ", id@@ .get@@ ())); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { com.google.gerrit.server.account.@@ Star@@ red@@ Chang@@ es.@@ log.error@@ ("@@ Account res@@ ol@@ v@@ e change ", e); throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ Auth@@ enti@@ c@@ ation serv@@ er er@@ ror ror } }
@java.lang.Override public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id@@ .@@ en@@ cod@@ ed@@ (), true@@ ); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return change@@ Resource@@ Factory.create@@ (change@@ , user@@ .get()); }
@java.lang.Override public Account@@ Resource@@ .@@ Star@@ red@@ Change parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parent@@ .getUser@@ (); com.google.gerrit.server.change.Change@@ Resource change = changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ); if (@@ star@@ red@@ Changes@@ Util@@ .get@@ Label@@ s(@@ change@@ .getId@@ ()).@@ contains(@@ Star@@ red@@ Changes@@ Util.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ L@@ AB@@ E@@ L@@ )) { return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Star@@ red@@ Change@@ (user@@ , change@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public void delete@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id); } }); }
private void add@@ Ex@@ t@@ Id(@@ org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <?@@ > test@@ Repo@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ . ext@@ Id@@ s) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ s@@ Note@@ s = ext@@ er@@ n@@ al@@ Id@@ Factory.@@ lo@@ ad@@ (@@ test@@ Repo@@ .get@@ Repository@@ ()); ext@@ Id@@ Not@@ es.@@ insert@@ (@@ java.util.Array@@ s.@@ as@@ List(@@ ext@@ Id@@ s@@ )); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ change@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update@@ ) { met@@ a@@ Data@@ Update@@ (change@@ Met@@ a@@ Data@@ Update@@ ); } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
@org.junit.Test public void r@@ e@@ try@@ On@@ Lo@@ ck@@ Failure@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key foo@@ Id = ExternalId@@ .@@ Key@@ ("@@ foo@@ ", "@@ foo@@ "); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key b@@ ar@@ Id = ExternalId@@ .@@ Key@@ ("@@ b@@ ar@@ ", "@@ b@@ ar@@ "); final java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean do@@ ne@@ B@@ g@@ Update = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update updat@@ e = new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update@@ (repo@@ Manag@@ er, com.google.gerrit.acceptance.@@ rest.@@ account.@@ met@@ a@@ Data@@ Update@@ Factory.create@@ (@@ com.google.gerrit.acceptance.@@ rest.@@ account.@@ User@@ User@@ s@@ ), account@@ Cache@@ , all@@ User@@ s, met@@ ri@@ c@@ Ma@@ k@@ er, ext@@ er@@ n@@ al@@ Id@@ s, new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ Dis@@ able@@ d@@ ExternalId@@ Cache@@ (), new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ (c@@ fg@@ , r@@ e@@ try@@ Met@@ ri@@ c@@ s, null@@ , null@@ , null@@ , ("@@ X@@ -@@ > r.@@ w@@ ith@@ Block@@ Strateg@@ y@@ (@@ new com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ Block@@ Strateg@@ y@@ () { @java.lang.Override public void b@@ lock@@ (@@ long s@@ le@@ e@@ p@@ Tim@@ e) { } }@@ )), () { if (!@@ (@@ do@@ ne@@ B@@ g@@ .get@@ And@@ Set@@ (@@ true@@ ))) { try { ext@@ Id@@ s@@ Update.@@ create@@ ().@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .create@@ (@@ b@@ ar@@ Id, admin@@ .@@ id@@ )); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { } }); assert@@ Th@@ at@@ (@@ do@@ ne@@ B@@ g@@ .get@@ ()).@@ is@@ F@@ alse@@ (); update.@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .create@@ (@@ admin@@ .@@ id@@ )); assert@@ Th@@ at@@ (@@ do@@ ne@@ B@@ g@@ .get@@ Update@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ ext@@ Id@@ s.get(@@ foo@@ )).@@ is@@ Not@@ Null@@ (); assert@@ Th@@ at(@@ ext@@ Id@@ s.get(@@ b@@ ar@@ Id@@ )).@@ is@@ Not@@ Null@@ (); }
@@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key key@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { check@@ Read@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ .@@ parse@@ (key@@ )); } }
private void update@@ Note@@ Map@@ (@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { r@@ e@@ try@@ H@@ el@@ p@@ er.@@ <@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Update.@@ ExternalId@@ Update@@ r@@ , java.lang.O@@ bject@@ >@@ execute@@ (@@ update@@ r@@ , ( i@@ ) -@@ > { try (@@ org.eclipse.j@@ git@@ .@@ lib.@@ Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ s = new com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Notes@@ (@@ ext@@ er@@ n@@ al@@ Id@@ Cache@@ , account@@ Cache@@ , repo@@ ).set@@ Read@@ Revision@@ (@@ af@@ ter@@ Read@@ Revision@@ ).@@ load@@ (); i.@@ update@@ (@@ ext@@ Id@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update@@ Factory.create@@ ()) { ext@@ Id@@ Not@@ es.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } update@@ Coun@@ t.@@ in@@ cre@@ ment@@ (); return null@@ ; } }); }
public void up@@ sert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { up@@ sert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); }
public java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > all@@ () throw@@ s java.io.IOException { check@@ Load@@ ed@@ (); try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e not@@ e : note@@ Map@@ ) { byte@@ [] ra@@ w = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ read@@ Note@@ (r@@ w, note@@ .get@@ Data@@ ()); try { ext@@ Id@@ s.add(@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ parse@@ (@@ note@@ .getName@@ (), ra@@ w, note@@ .get@@ Data@@ ())); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ log.error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ I@@ g@@ no@@ rin@@ g in@@ vali@@ d ext@@ er@@ n@@ al I@@ D not@@ e %@@ s", note@@ .getName@@ ()), e); } } return ext@@ Id@@ s; }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remove@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } org.eclipse.jgit.lib.ObjectId note@@ Data = note@@ Map@@ .get(@@ note@@ Id); byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Data@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ T@@ E_@@ S@@ Z@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id act@@ u@@ al@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ ); check@@ State@@ (@@ ext@@ Id.@@ equals(@@ act@@ u@@ al@@ Ex@@ t@@ Id@@ ), "@@ ext@@ er@@ n@@ al id sh@@ o@@ ul@@ d b@@ e remo@@ v@@ ed@@ , bu@@ t it@@ s not match@@ ing th@@ e act@@ u@@ al id %@@ s", ext@@ Id.@@ toString@@ (), act@@ u@@ al@@ Ex@@ t@@ Id.@@ toString@@ ()); note@@ Map.@@ remove@@ (@@ note@@ Id); return act@@ u@@ al@@ Ex@@ t@@ Id@@ ; }
public void delete@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.Collection<@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > ext@@ Id@@ Key@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key : ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remo@@ v@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , account@@ Id); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ al@@ ) { ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Remo@@ ve@@ (@@ o@@ , remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s); }
public void replace@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.Collection<@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > to@@ Delete@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > to@@ Add@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ check@@ S@@ ame@@ Account@@ (@@ to@@ Add@@ , account@@ Id); check@@ ExternalId@@ Key@@ s@@ D@@ on@@ Ex@@ t@@ (@@ ExternalId@@ .@@ from@@ (@@ to@@ Add@@ ), to@@ Delete@@ ); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key : to@@ Delete@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ (@@ ExternalId@@ , ext@@ Id@@ Key@@ , account@@ Id); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id); } for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : to@@ Add@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ (@@ ext@@ Id); for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : to@@ Add@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ ExternalId@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); insert@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ al@@ Id@@ Cache.@@ on@@ Replace@@ (@@ o@@ , account@@ Id, remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s, updat@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ (account@@ Id); }
public void delete@@ By@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > ext@@ Id@@ Key@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key@@ s) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key : ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , null@@ ); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ ext@@ Id); } }); e@@ Updat@@ es.@@ add(@@ ("@@ Cannot o@@ , n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Remo@@ ve@@ (@@ o@@ , n@@ v@@ ed@@ Ex@@ t@@ Id@@ s); }); }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ read@@ Only@@ ) { throw new java.io.IO@@ Exception("@@ Updat@@ ing ext@@ er@@ n@@ al ID@@ s is dis@@ able@@ d@@ "); } if (@@ note@@ Map@@ Updat@@ es.@@ isEmpty()) { return false@@ ; } if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ commit@@ .get@@ Message@@ ())) { comm@@ it.@@ set@@ Message@@ ("@@ Update ext@@ er@@ n@@ al ID@@ s@@ \n@@ "); } try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ Note@@ Map@@ Update note@@ Map@@ Update : note@@ Map@@ Updat@@ es) { try { note@@ Map@@ Update.@@ execute@@ (r@@ w, note@@ Map@@ ); } catch (@@ com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } } org.eclipse.jgit.revwalk.Rev@@ T@@ re@@ e old@@ T@@ re@@ e = ((@@ revision@@ ) != null@@ ) ? rw.@@ parse@@ Tree@@ (@@ revision@@ ) : null@@ ; org.eclipse.jgit.lib.ObjectId new@@ Tree@@ Id = note@@ Map.@@ write@@ Tree@@ (in@@ sert@@ er@@ ); if (@@ new@@ Tree@@ Id.@@ equals(@@ old@@ Tree@@ )) { return false@@ ; } comm@@ it.@@ set@@ Tree@@ Id@@ (@@ new@@ Tree@@ Id); return true@@ ; } }
private void e@@ vi@@ ct@@ Account@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) throw@@ s java.io.IOException { if ((@@ account@@ Cach@@ e) != null@@ ) { for (@@ com.google.gerrit.reviewdb.client.Account.Id id : ext@@ Id@@ s.@@ st@@ ream@@ ().@@ map@@ (@@ ExternalId@@ :@@ :@@ account@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())) { account@@ Cache.@@ e@@ vi@@ ct@@ (id@@ ); } } }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id up@@ sert@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.lib.Object@@ In@@ ser@@ ter in@@ s, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ (); org.eclipse.jgit.lib.@@ Config c = new org.eclipse.jgit.lib.@@ Config@@ (); if (@@ note@@ Map.@@ contains(@@ ext@@ Id.@@ key@@ ().@@ sh@@ a@@ 1@@ ())) { byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Map@@ .get(@@ note@@ Id@@ ), com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ T@@ E_@@ S@@ Z@@ ); try { c.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ ra@@ w, java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ In@@ vali@@ d ext@@ er@@ n@@ al id con@@ fig for %@@ s@@ : %@@ s", note@@ Id, e.get@@ Message@@ ())); } } ext@@ Id.@@ write@@ To@@ Config@@ (c@@ ); byte@@ [] ra@@ w = c.@@ to@@ Text@@ ().get@@ By@@ t@@ es(@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); org.eclipse.jgit.lib.ObjectId note@@ Data = in@@ s.@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ , note@@ Map@@ ); return note@@ Map@@ ; }
public com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder update@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { updat@@ ed@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
@@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key key@@ , org.eclipse.jgit.lib.ObjectId rev@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { check@@ Read@@ Enable@@ d@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ .@@ load@@ On@@ l@@ y(@@ repo@@ , re@@ as@@ ); } }
public void up@@ sert@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { check@@ Load@@ ed@@ (); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ ( r@@ w, n@@ ) -@@ > { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id updat@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ up@@ sert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); updat@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ updat@@ ed@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ ("@@ Cannot o@@ , n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Update@@ (@@ o@@ , updat@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s(@@ updat@@ ed@@ Ex@@ t@@ Id@@ s); } }
public void insert@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); check@@ ExternalId@@ s@@ D@@ on@@ Ex@@ t@@ Id@@ s(@@ ext@@ Id@@ s); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > new@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : ext@@ Id@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id insert@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ up@@ sert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); new@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ ed@@ Ex@@ t@@ Id); } }); }
public void replace@@ By@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > to@@ Delete@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > to@@ Add@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException { check@@ Load@@ ed@@ (); check@@ ExternalId@@ s@@ D@@ on@@ t@@ Ex@@ ist@@ (@@ ExternalId@@ .@@ Key@@ .@@ from@@ (@@ to@@ Add@@ ), to@@ Delete@@ ); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > updat@@ ed@@ Ex@@ t@@ Id@@ s = new java.util.Hash@@ Set<@@ >(); note@@ Map@@ Updat@@ es.@@ add(@@ r@@ w, n@@ ); for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key : to@@ Delete@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remo@@ v@@ ed@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ remove@@ (r@@ w, note@@ Map@@ , ext@@ Id@@ Key@@ , null@@ ); remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.add(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id); } for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id : to@@ Add@@ ) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s@@ Not@@ es.@@ insert@@ (r@@ w, insert@@ er, note@@ Map@@ , ext@@ Id); update@@ Ex@@ t@@ Id@@ s.add(@@ insert@@ Ex@@ t@@ Id); } }); cach@@ e@@ Updat@@ es.@@ add(@@ o@@ , n@@ ); ext@@ er@@ n@@ al@@ Id@@ Cache.@@ on@@ Replace@@ (@@ o@@ , remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s, updat@@ ed@@ Ex@@ t@@ Id@@ s); e@@ vi@@ ct@@ Account@@ s(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.@@ con@@ c@@ at(@@ remo@@ v@@ ed@@ Ex@@ t@@ Id@@ s.@@ st@@ ream@@ (), updat@@ ed@@ Ex@@ t@@ Id@@ s.@@ st@@ ream@@ ()).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())); }
public com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder add@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { cre@@ ated@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
public com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder delete@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id@@ ) { de@@ le@@ ted@@ ExternalId@@ s@@ Builder@@ ().@@ add(@@ ext@@ Id); return this@@ ; }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id get@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key key@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { check@@ Load@@ ed@@ (); org.eclipse.jgit.lib.ObjectId note@@ Id = key@@ .@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.lib.ObjectId note@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ read@@ Note@@ (r@@ w, note@@ Data@@ Id); return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ Id); } }
public static java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > from@@ (@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s) { return ext@@ Id@@ s.@@ st@@ ream@@ ().@@ map@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ :@@ key@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); }
private static com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id remove@@ (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Map@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key@@ , com.google.gerrit.reviewdb.client.Account.Id expected@@ Account@@ Id@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.ObjectId note@@ Id = ext@@ Id@@ Key@@ .@@ sh@@ a@@ 1@@ (); if (!(@@ note@@ Map.@@ contains(@@ note@@ Id@@ ))) { return null@@ ; } org.eclipse.jgit.lib.ObjectId note@@ Data = note@@ Map@@ .get(@@ note@@ Id); byte@@ [] ra@@ w = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ note@@ Data@@ , com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ Cach@@ ed@@ By@@ t@@ es@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Not@@ es.@@ M@@ A@@ X@@ _@@ NO@@ T@@ E_@@ S@@ Z@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ parse@@ (@@ note@@ Id.@@ name@@ (), ra@@ w, note@@ Data@@ ); if (@@ expected@@ Account@@ Id != null@@ ) { check@@ State@@ (@@ expected@@ Account@@ Id.@@ equals(@@ expected@@ Account@@ Id@@ ), ("@@ ext@@ er@@ n@@ al id %s sh@@ o@@ ul@@ d b@@ e remove@@ d for ac@@ count %@@ s@@ ,@@ " + " bu@@ t ext@@ er@@ n@@ al id b@@ e@@ long@@ s to ac@@ count %@@ s@@ "), ext@@ Id@@ Key@@ .get(), expected@@ Account@@ Id@@ .get(), account@@ Id@@ ().get@@ ()); } note@@ Map.@@ remove@@ (@@ note@@ Id); return ext@@ Id@@ ; }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , com.google.gerrit.extensions.api.@@ account@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Input@@ (); } java.lang.String new@@ Statu@@ s = input.@@ statu@@ s; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ( u@@ ) -@@ > user@@ .get@@ Status@@ ()) ? -@@ > user@@ .get@@ Statu@@ s(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ E@@ mpty@@ (@@ new@@ Status@@ ))); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .get@@ Status@@ ()) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (account@@ .get@@ Status@@ ()); }
public static com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ Builder buil@@ der@@ () { return new com.google.gerrit.server.account.@@ Au@@ to@@ Value@@ _@@ In@@ ternal@@ Account@@ Update.@@ Builder@@ (); }
private void update@@ Account@@ Info@@ () { if ((@@ set@@ F@@ ull@@ Name@@ To@@ ) == null@@ ) { return@@ ; } log@@ De@@ bug@@ ("@@ Fi@@ rin@@ g f@@ ull name of cal@@ le@@ r try { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ ().@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ( ( u@@ ) -@@ > { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ u@@ .get@@ F@@ ull@@ Name@@ ())) { u@@ .@@ update@@ (account@@ ); } } }); if (@@ ac@@ count != null@@ ) { user@@ .getAccount@@ ().set@@ F@@ ull@@ Name(@@ account@@ .get@@ F@@ ull@@ Name()); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { log@@ W@@ ar@@ n@@ ("@@ Fai@@ le@@ d to updat@@ e f@@ ull name of cal@@ le@@ d@@ ", e); } }
public com.google.gerrit.server.account.@@ Auth@@ Result link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request wh@@ o@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ wh@@ o@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ to@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((@@ ("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id.@@ key@@ ().get@@ ())) + " in u@@ se b@@ y an@@ oth@@ er account@@ ")); } update@@ (@@ wh@@ o@@ , ext@@ Id); } else { ext@@ er@@ n@@ al@@ Id@@ s@@ Update@@ Factory.create@@ ().@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ With@@ Email@@ (@@ wh@@ o@@ .get@@ ExternalId@@ Key@@ (), to@@ , wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ())); if ((@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { account@@ s@@ Update@@ Factory.create@@ ().@@ update@@ (@@ to@@ , ("@@ ) -@@ > { if ((@@ u@@ e account@@ s.@@ email@@ ()) == null@@ ) { update@@ .set@@ Pref@@ er@@ red@@ Email@@ (@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()); } } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ to@@ , wh@@ o@@ .get@@ ExternalId@@ Key@@ (), false@@ ); }
public void un@@ link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ , java.util.Collection<@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key@@ > ext@@ Id@@ Key@@ s) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ ext@@ Id@@ Key@@ s.@@ isEmpty()) { return@@ ; } java.util.List<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id@@ s = new java.util.Array@@ List(@@ ext@@ Id@@ Key@@ s.@@ size()); for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .@@ Key ext@@ Id@@ Key : ext@@ Id@@ Key@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ ext@@ Id@@ Key@@ ); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ from@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((@@ ("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id@@ Key@@ .get@@ ())) + "@@ ' in u@@ se b@@ y an@@ oth@@ er account@@ ")); } ext@@ Id@@ s.add(@@ ext@@ Id); } else { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((@@ ("@@ Id@@ enti@@ t@@ y '@@ " + (@@ ext@@ Id@@ Key@@ .get@@ ())) + "@@ ' not fo@@ un@@ d } } ext@@ er@@ n@@ al@@ Id@@ s@@ Update@@ Factory.create@@ ().@@ delete@@ (@@ ext@@ Id@@ s); if (@@ ext@@ Id@@ s.@@ st@@ ream@@ ().@@ an@@ y@@ Match@@ (("@@ Match@@ ing " + (@@ e.@@ email@@ ()) != null@@ )) { account@@ s@@ Update@@ Factory.create@@ ().@@ update@@ (@@ from@@ , ("@@ ) -@@ > { if ((@@ u@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) { for (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id : ext@@ Id@@ s) { if (@@ u@@ .@@ account@@ Id@@ .get@@ Pref@@ er@@ red@@ Email@@ ().equals(@@ ext@@ Id.@@ email@@ ())) { update@@ .set@@ Pref@@ er@@ red@@ Email@@ (((@@ "@@ ' h@@ ref@@ s@@ "); break@@ ; } } } }); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > de@@ ac@@ ti@@ v@@ ate@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ In@@ ac@@ ti@@ v@@ e = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (account@@ Id, ("@@ n@@ on@@ -@@ > "); if (!@@ (@@ u@@ .is@@ Active@@ ())) { al@@ read@@ y@@ In@@ ac@@ ti@@ v@@ e.set@@ (@@ true@@ ); } else { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ ((@@ ("@@ Account not fo@@ un@@ d "); } if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ ("@@ Account not fo@@ un@@ d "); } if (@@ al@@ read@@ y@@ In@@ ac@@ tive@@ .get@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ ac@@ ti@@ v@@ e not ac@@ ti@@ v@@ e change@@ "); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> ac@@ ti@@ v@@ ate@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ Ac@@ ti@@ v@@ e = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (account@@ Id, ("@@ n@@ on@@ -@@ > { if (@@ is@@ Active@@ ()) { al@@ read@@ y@@ Ac@@ ti@@ v@@ e.set@@ (@@ true@@ ); } else { if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ un@@ d "); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ ") : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ cre@@ ated@@ ("@@ "); } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ Injector@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ .@@ new@@ Default@@ Config@@ (); cf@@ g.@@ set@@ In@@ t@@ ("@@ re@@ ce@@ ive@@ ", null@@ , "@@ max@@ Tr@@ u@@ st@@ De@@ p@@ th@@ ", 2); cf@@ g.@@ set@@ String@@ List@@ ("@@ re@@ ce@@ ive@@ ", null@@ , "@@ tr@@ u@@ st@@ ed@@ Key@@ ", com.google.common.collect.Immutable@@ List.@@ of@@ (@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ B@@ ().get@@ PublicKey@@ F@@ ing@@ er@@ p@@ r@@ int@@ ()), com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ D@@ ().get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ int@@ int@@ ()))); com.google.inject.@@ Injec@@ tor in@@ jec@@ tor = com.google.inject.@@ G@@ ui@@ ce@@ .create@@ Injector@@ (@@ new com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Module@@ (c@@ fg@@ , com.google.gerrit.@@ test@@ ing.@@ NoteDb@@ Mo@@ de@@ .@@ new@@ Notes@@ M@@ ig@@ r@@ ation@@ From@@ En@@ v@@ ())); l@@ if@@ ec@@ yc@@ le = new com.google.gerrit.@@ l@@ if@@ ec@@ yc@@ le.@@ L@@ if@@ ec@@ yc@@ le@@ Manag@@ er@@ (); l@@ if@@ ec@@ yc@@ le.@@ add(@@ in@@ jec@@ tor@@ ); in@@ jec@@ tor@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); l@@ if@@ ec@@ yc@@ le.@@ start@@ (); schema@@ Cre@@ ator@@ .create@@ (db@@ ); user@@ Id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id(); account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ Id, ("@@ user@@ "); h@@ it@@ er = load@@ User@@ "); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new com.google.gerrit.server.@@ util.@@ Request@@ Context@@ () { @java.lang.Override public com.google.gerrit.server.@@ Current@@ User get@@ User@@ () { return user@@ ; } @java.lang.Override public com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > get@@ Review@@ Db@@ Provider@@ () { return com.google.inject.@@ util.@@ Provider@@ s.@@ of@@ (db@@ ); } }); st@@ ore@@ Re@@ p@@ o = new org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ (@@ new org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ D@@ fs@@ Repository@@ Description@@ ("@@ repo@@ st@@ or@@ e = new com.google.gerrit.gpg.@@ PublicKey@@ Store@@ (@@ com.google.gerrit.gpg.@@ PublicKey@@ Store@@ ); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ B@@ oolean al@@ read@@ y@@ Pref@@ er@@ re@@ d = new java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Boolean@@ (@@ false@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ .@@ add@@ (@@ new com.google.gerrit.reviewdb.client.@@ Account ac@@ count == null@@ ) { @java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> input@@ ) { return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); } }); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return read@@ y@@ Pref@@ er@@ red@@ Email@@ ; }
protected void set@@ Up@@ Dat@@ abase@@ () throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb un@@ der@@ ly@@ ing@@ Db = in@@ M@@ em@@ ory@@ Dat@@ abase@@ .get@@ Dat@@ abase@@ ().@@ open@@ ()) { schema@@ Cre@@ ator@@ .create@@ (@@ un@@ der@@ ly@@ ing@@ Db@@ ); } d@@ b = schema@@ Factory.@@ open@@ (); user@@ Id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ ("@@ user@@ "@@ )@@ ).get@@ Account@@ Id(); java.lang.String e@@ mai@@ l = "@@ user@@ @@@ ex@@ amp@@ le.@@ com@@ "; ext@@ er@@ n@@ al@@ Id@@ s@@ Update.@@ create@@ ().@@ insert@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .create@@ Email@@ (user@@ Id, email@@ )); account@@ s@@ Update.@@ create@@ ().@@ update@@ (user@@ Id, ("@@ user@@ "@@ g@@ no@@ rin@@ g -@@ > u@@ .set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ )); user = user@@ Factory.create@@ (user@@ Id); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ Id@@ )); }
@org.junit.Test public void push@@ Account@@ Config@@ To@@ User@@ Branch@@ Invalid@@ Pref@@ er@@ red@@ Email@@ B@@ ut@@ Not@@ Change@@ d(@@ ) throw@@ s java.lang.Exception { Test@@ Account fo@@ o = account@@ Cre@@ ator@@ .create@@ (@@ name@@ ("@@ foo@@ "), ((@@ ("@@ foo@@ ")) + "@@ @@@ ex@@ amp@@ le.@@ com@@ "), "@@ F@@ oo@@ "); java.lang.String user@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ foo@@ .@@ id@@ ); java.lang.String no@@ E@@ mai@@ l = "@@ no@@ .@@ email@@ "; account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ foo@@ .@@ id@@ , ("@@ in@@ vali@@ d foo@@ "); java.lang.String ur@@ l = "@@ no@@ .@@ email@@ "; account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ foo@@ .@@ id@@ , ( id@@ ) -@@ > u@@ i = update@@ .get().@@ id@@ ().get@@ Pref@@ er@@ red@@ Email@@ (@@ no@@ Email@@ )); account@@ Index@@ ed@@ Coun@@ ter.@@ c@@ le@@ ar@@ (); g@@ ran@@ t(@@ all@@ User@@ s, user@@ Ref@@ Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s, foo@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (@@ all@@ User@@ s@@ Repo@@ , user@@ Re@@ f + "@@ :@@ user@@ ")); all@@ User@@ s@@ Repo@@ .@@ re@@ set@@ ("@@ user@@ Ref@@ "); java.lang.String statu@@ s = va@@ c@@ ation = get@@ Account@@ Config@@ (@@ all@@ User@@ s@@ Repo@@ ); ac@@ ac@@ ac@@ ac@@ ac@@ count = AC@@ CO@@ UN@@ T_@@ ST@@ AT@@ US@@ , statu@@ s); push@@ Factory.create@@ (db, foo@@ .getId@@ ent@@ (), all@@ User@@ s@@ Repo@@ , ac@@ count con@@ fig Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , ac@@ .@@ to@@ Text@@ ()).@@ to@@ Ref@@ (user@@ .@@ assert@@ O@@ k@@ Statu@@ s(); com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo = gApi.@@ account@@ s().@@ id(@@ foo@@ .@@ id@@ .get@@ ()@@ ).get@@ (); assert@@ Th@@ at(@@ info.@@ email@@ ).@@ isEqualTo(@@ info.@@ email@@ ).@@ isEqualTo(@@ info.@@ f@@ ull@@ Name); assert@@ Th@@ at(@@ info.@@ statu@@ s).@@ isEqualTo(@@ info.@@ statu@@ s); }
@org.junit.Test public void update@@ Account@@ With@@ out@@ Account@@ Config@@ NoteDb@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Test@@ Account an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d = account@@ Cre@@ ator@@ .create@@ (); assert@@ User@@ Branch@@ With@@ out@@ Account@@ Config@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId()); java.lang.String statu@@ s = "@@ O@@ O@@ "; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId@@ (), ("@@ Account user@@ s@@ t an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ "); assert@@ Th@@ at(@@ account@@ ).@@ is@@ Not@@ Null@@ (); assert@@ Th@@ at(@@ account@@ .get@@ F@@ ull@@ Name@@ ()).@@ isNull@@ (); assert@@ Th@@ at(@@ account@@ .get@@ Status@@ ()).@@ isEqualTo(@@ statu@@ s); assert@@ User@@ Branch@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ .getId@@ (), null@@ , statu@@ s); }
@org.junit.Test public void l@@ ook@@ Up@@ By@@ Pref@@ er@@ red@@ Email@@ () throw@@ s java.lang.Exception { java.lang.String pre@@ fi@@ x = "@@ foo@@ .@@ p@@ ref@@ er@@ red@@ "; java.lang.String p@@ ref@@ E@@ mai@@ l = pre@@ fi@@ x + "@@ @@@ ex@@ amp@@ le.@@ com@@ "; com.google.gerrit.acceptance.@@ Test@@ Account o = account@@ Cre@@ ator@@ .create@@ (@@ name@@ ("@@ foo@@ ")); account@@ s@@ Update.@@ create@@ ().@@ update@@ (@@ foo@@ , id@@ , ("@@ in@@ vali@@ d foo@@ "); java.lang.String user@@ name = name@@ Factory.create@@ ().get@@ Account@@ (); java.lang.String e@@ mai@@ l = add@@ Email@@ (in@@ s@@ ).get@@ Email@@ (); java.lang.String email@@ ; com.google.gerrit.acceptance.@@ Test@@ Account o = account@@ Cre@@ ator@@ .create@@ (@@ name@@ ("@@ foo@@ ")); account@@ s.@@ create@@ ().@@ update@@ (@@ foo@@ , ( id@@ ) -@@ > user@@ .getAccount@@ ().get@@ Pref@@ er@@ red@@ Email@@ ()); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ s@@ By@@ Email@@ )).@@ isEqualTo(@@ foo@@ .@@ id@@ ); account@@ s@@ By@@ Pref@@ E@@ mai@@ l = email@@ s.get@@ Account@@ (p@@ ref@@ ); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ Pref@@ s@@ By@@ Email@@ ).@@ isEmpty@@ (); account@@ s@@ By@@ Pref@@ E@@ mai@@ l = email@@ s.get@@ Account@@ (p@@ ref@@ For@@ E@@ mail.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )); assert@@ Th@@ at(@@ account@@ s@@ By@@ Email@@ ).@@ isEmpty@@ (); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , com.google.gerrit.extensions.common.@@ Name@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ F@@ U@@ L@@ _@@ NAM@@ E@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w edit@@ ing name "); } java.lang.String new@@ Name = input.@@ name@@ ; com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ s@@ ().@@ create@@ ().@@ update@@ (user@@ .getAccount@@ Id(), ("@@ m@@ us@@ t b@@ "); if (@@ ac@@ count == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ ac@@ count not fo@@ und@@ "); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ account@@ .get@@ F@@ ull@@ Name@@ ()) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (account@@ .get@@ F@@ ull@@ Name()); }
public com.google.gerrit.reviewdb.client.@@ Account update@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.@@ ExternalId@@ > con@@ su@@ m@@ er@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return update@@ (account@@ Id, com.google.common.collect.Immutable@@ List.@@ of@@ (@@ con@@ su@@ m@@ er@@ )); }
@@@ com.google.gerrit.common.@@ Null@@ able public com.google.gerrit.reviewdb.client.@@ Account update@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.List<@@ java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.@@ server.@@ account.@@ Account@@ Update@@ >> con@@ su@@ m@@ er@@ s) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ con@@ su@@ m@@ er@@ s.@@ isEmpty()) { return null@@ ; } com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (account@@ Id); java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id = new java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ >@@ (account@@ Id); if (@@ account.@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ Update account@@ Update = com.google.gerrit.server.account.Account@@ Update.@@ create@@ (account@@ Id); try { con@@ su@@ m@@ er.@@ st@@ ream@@ ().@@ map@@ (( c@@ ) -@@ > c.@@ accept@@ (account@@ Update@@ )); account@@ Config.@@ set@@ Account@@ Update@@ (account@@ Update.@@ bu@@ ild@@ Update@@ ()); commit@@ (account@@ Config@@ .get@@ Load@@ ed@@ Account@@ Load@@ ed@@ Account@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); } } return account@@ Load@@ ed@@ Account@@ ; }
public com.google.gerrit.reviewdb.client.@@ Account insert@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <@@ com.google.gerrit.server.account.@@ ExternalId@@ Update@@ > init@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (); com.google.gerrit.server.account.Account@@ Update account@@ Update = com.google.gerrit.server.account.Account@@ Update.@@ create@@ (account@@ ); if (@@ accept@@ ) { account@@ Config.@@ set@@ Account@@ Update@@ (account@@ Update.@@ bu@@ ild@@ Update@@ (account@@ ); commit@@ New@@ Config@@ (account@@ ); return account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { check@@ Load@@ ed@@ (); if (@@ revision@@ ) != null@@ ) { comm@@ it.@@ set@@ Message@@ ("@@ in@@ vali@@ d ac@@ count " + (@@ comm@@ it.@@ set@@ Author@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ commit@@ .get@@ Author@@ (), regist@@ er@@ ed@@ On@@ )); comm@@ it.@@ set@@ Commit@@ ter@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ commit@@ .get@@ Commit@@ ter@@ Ident@@ (), regist@@ er@@ ed@@ On@@ )); } org.eclipse.jgit.lib.@@ Config cf@@ g = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); if (account@@ Update.@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ Config.@@ write@@ To@@ Config@@ (account@@ Update@@ .get(), cfg@@ ); } save@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , cfg@@ ); load@@ ed@@ Account@@ (); java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (c@@ fg@@ , null@@ , null@@ )); return true@@ ; }
public void set@@ Account@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ Load@@ ed@@ (); this@@ .@@ load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (account@@ ); this@@ .@@ account@@ Update = java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ account.@@ In@@ ternal@@ Account@@ Update.@@ buil@@ der@@ ().set@@ Active@@ (@@ account.@@ is@@ Active@@ ()).@@ set@@ F@@ ull@@ Name(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .get@@ F@@ ull@@ Name@@ ()@@ )).@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()@@ )).@@ set@@ Statu@@ s(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ account@@ .get@@ Status@@ ()@@ )).@@ bu@@ ild@@ ()); this@@ .@@ regist@@ er@@ ed@@ O@@ n = account@@ .get@@ Reg@@ ist@@ er@@ ed@@ On@@ (); }
private Account.@@ Id create@@ Account@@ Out@@ Request@@ Context@@ (java.lang.String user@@ name, java.lang.String f@@ ull@@ Name, java.lang.String email@@ , boolean ac@@ tive@@ ) throw@@ s java.lang.Exception { try (com.google.gerrit.server.@@ util.@@ M@@ an@@ u@@ al@@ Request@@ Context ct@@ x = one@@ O@@ ff@@ Request@@ Contex@@ t.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Account.Id id = account@@ Manager.@@ auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request@@ .@@ for@@ User@@ (user@@ )@@ ).get@@ Account@@ Id(); if (@@ e@@ mai@@ l != null@@ ) { account@@ Manager.@@ link@@ (id@@ , com.google.gerrit.server.account.@@ Auth@@ Request@@ .@@ for@@ Email@@ (@@ email@@ )); } account@@ s@@ Update.@@ create@@ ().@@ update@@ (id@@ , ("@@ self@@ ", u@@ al@@ ); return id@@ ; } }
@org.junit.Test public void check@@ Met@@ a@@ Id@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ account@@ s.get(@@ admin@@ .getId@@ ()@@ ).get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ admin@@ .getId@@ ())); com.google.gerrit.server.account.Account@@ Update a@@ u = account@@ s@@ Update.@@ create@@ (); com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ se@@ q@@ .@@ next@@ Account@@ Id()); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = au@@ .@@ insert@@ (account@@ Id, ("@@ Update u@@ ) -@@ > { assert@@ Th@@ at(@@ account@@ .get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ account@@ Id@@ )); com.google.gerrit.reviewdb.client.@@ Account updat@@ ed@@ Account = au@@ au@@ au@@ au@@ update@@ (account@@ Id, ("@@ c@@ -@@ > u@@ .set@@ F@@ ull@@ Name@@ ("@@ foo@@ ")); assert@@ Th@@ at(@@ account@@ .get@@ Met@@ a@@ Id@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ updat@@ ed@@ Account@@ .get@@ Met@@ a@@ Id()); assert@@ Th@@ at(@@ updat@@ ed@@ Account@@ .get@@ Met@@ a@@ Id@@ ()).@@ isEqualTo@@ (get@@ Met@@ a@@ Id(@@ account@@ Id@@ )); }
private void in@@ vo@@ k@@ e@@ (@@ java.lang.String.@@ .@@ . par@@ ameter@@ s) throw@@ s java.io.IOException { org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Par@@ ser parse@@ r = new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Par@@ ser@@ (@@ this@@ ); try { par@@ ser@@ .@@ parse@@ Argument@@ (@@ par@@ ameter@@ s); if (in@@ put@@ File@@ s.@@ isEmpty()) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ par@@ ser@@ , par@@ ser@@ , "@@ as@@ c@@ i@@ i@@ do@@ c@@ tor@@ : F@@ A@@ IL@@ ED@@ : inpu@@ t fi@@ le mis@@ s@@ ing@@ "); } } catch (@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception e) { java.lang.@@ Sy@@ ste@@ m.@@ er@@ r.@@ p@@ r@@ int@@ l@@ n@@ (@@ e.get@@ Message()); par@@ ser@@ .@@ p@@ r@@ int@@ U@@ s@@ age@@ (java.lang.@@ Sy@@ ste@@ m.@@ err@@ ); java.lang.@@ Sy@@ ste@@ m.@@ ex@@ it@@ (1); return@@ ; } if ((@@ rev@@ n@@ umber@@ File@@ ) != null@@ ) { try (@@ java.io.@@ Bu@@ ff@@ er@@ ed@@ Read@@ er read@@ er = java.nio.file.@@ File@@ .@@ new@@ Bu@@ ff@@ er@@ ed@@ Read@@ er@@ (@@ rev@@ n@@ umber@@ File@@ )) { rev@@ n@@ u@@ mb@@ er = read@@ er.@@ read@@ Line@@ (); } } if (m@@ k@@ t@@ mp@@ ) { t@@ mp@@ di@@ r = java.nio.file.@@ File@@ s.@@ create@@ T@@ e@@ mp@@ Di@@ rec@@ tor@@ y@@ ("@@ as@@ c@@ i@@ i@@ do@@ c@@ tor@@ -@@ ").@@ to@@ File@@ (); } if (@@ b@@ a@@ z@@ el@@ ) { render@@ File@@ s(@@ input@@ File@@ s, null@@ ); } else { try (@@ java.util.@@ z@@ i@@ p.@@ Z@@ ip@@ Output@@ Stream z@@ i@@ p = new java.util.@@ z@@ i@@ p.@@ Z@@ ip@@ Output@@ Stream@@ (@@ java.nio.file.@@ File@@ s@@ .@@ new@@ Output@@ Stream@@ (@@ java.nio.file.@@ Path@@ s.get(@@ z@@ ip@@ File@@ )@@ ))) { render@@ File@@ s(@@ input@@ File@@ s, z@@ ip@@ ); java.io.File@@ [] c@@ s@@ File@@ s = t@@ mp@@ di@@ r.@@ list@@ File@@ s@@ (@@ new java.io.File@@ (@@ accept@@ (@@ java.io.File di@@ r@@ , java.lang.String name@@ ) { for (@@ java.io.File c@@ s@@ s@@ As@@ c@@ i@@ i@@ Doc@@ tor@@ .@@ z@@ ip@@ File@@ (c@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ File@@ .getName@@ (), c@@ i@@ i@@ i@@ i@@ i@@ Doc@@ tor@@ .@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ File@@ (c@@ ip@@ (), c@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ Doc@@ tor@@ , s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ s@@ File@@ (c@@ ip@@ File@@ , (c@@ ip@@ File@@ , (c@@ ip@@ File@@ , (c@@ ip@@ File@@ , (@@ z@@ ip@@ File@@ , (c@@ ip@@ File@@ , (@@ z@@ ip@@ File@@ , (@@ z@@ ip@@ File@@ , (@@ z@@ ip@@ File@@ , (@@ z@@ ip@@ File@@ , (c@@ ip@@ File@@ , (c@@ ip@@ File@@ , (c@@ ip@@ File@@ .getName@@ (), c@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@ i@@
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Builder@@ <@@ T> r@@ e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ er@@ Builder@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ .@@ default@@ s@@ (), ("@@ A@@ ut@@ ing t@@ ) -@@ > t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ ); try { return r@@ e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ().@@ call@@ ((@@ -@@ > ac@@ tion@@ ) (c@@ .@@ call@@ ()); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ .@@ Change@@ Ac@@ tion <@@ T> change@@ Ac@@ tion@@ , com@@ > com@@ p@@ s) throw@@ s com.google.gwtorm.server.OrmException { try { return r@@ e@@ try@@ er@@ .get@@ Ac@@ tion@@ s(@@ change@@ Detail@@ s@@ (), change@@ Control@@ Factory@@ , db@@ ); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { throw e@@ ; } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Builder@@ <@@ T> r@@ e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ er@@ Builder@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ per@@ .@@ default@@ s@@ (), ex@@ cepti@@ on@@ Predicate@@ ); try { return r@@ e@@ try@@ er@@ Buil@@ der.@@ bu@@ ild@@ ().@@ call@@ ((@@ ) -@@ > ac@@ tion.@@ call@@ ()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception | com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Exception e) { java.lang.@@ Throwable e) { if ((@@ e.get@@ C@@ au@@ se@@ ()) != null@@ ) { t = e.get@@ C@@ au@@ se@@ (); } com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Change@@ Action@@ <@@ T> change@@ Action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { try { if (!(@@ m@@ igration.@@ dis@@ able@@ Change@@ Review@@ Db@@ ())) { return execute@@ (change@@ Action@@ , com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Buil@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ <@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > bu@@ ild@@ ()); } com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ en@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ <@@ T> r@@ e@@ try@@ Builder = create@@ R@@ e@@ try@@ er@@ Builder@@ (@@ op@@ t@@ s, ( t@@ ) -@@ > if (@@ t instanceof com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ ) { t = t@@ .get@@ C@@ au@@ se@@ (); } return com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ; } }); r@@ e@@ try@@ er@@ Buil@@ der.@@ w@@ ith@@ R@@ e@@ try@@ List@@ ener@@ (@@ list@@ ener@@ ); return execute@@ (change@@ Ac@@ tion@@ , r@@ e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ()); } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ re@@ cor@@ d(@@ list@@ ener@@ .get@@ At@@ t@@ Count@@ ()); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gerrit.extensions.common.@@ Res@@ tApi@@ Exception@@ .@@ class@@ ); throw new com.google.gerrit.server.@@ update.@@ Update@@ Exception@@ (t@@ ); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return com.google.gerrit.server.@@ update.@@ Lo@@ ck@@ Failure@@ , ("@@ A@@ ut@@ ing t@@ ) -@@ > t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ); }
private void re@@ cur@@ si@@ v@@ el@@ y@@ Ex@@ p@@ and@@ Group@@ s@@ (@@ final java.util.@@ Set@@ <java.lang.String> group@@ D@@ N@@ s, final com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ H@@ el@@ p@@ er.@@ L@@ d@@ ap@@ S@@ che@@ m@@ a schema@@ , final javax.@@ nam@@ ing.@@ di@@ rec@@ tor@@ y.@@ Di@@ r@@ Context ctx@@ , final java.lang.String group@@ D@@ N@@ ) { if (((@@ group@@ D@@ N@@ s.add(@@ group@@ D@@ N@@ )) && ((@@ schema.@@ account@@ Member@@ Fiel@@ d@@ ) != null@@ )) && (s@@ chema@@ .@@ account@@ Member@@ Ex@@ p@@ and@@ Group@@ s@@ )) { com.google.common.collect.Immutable@@ Set@@ <java.lang.String> cach@@ ed@@ Parent@@ s@@ D@@ N@@ s = parent@@ Group@@ s.get@@ I@@ f@@ P@@ res@@ ent@@ (@@ group@@ D@@ N@@ ); if (c@@ ach@@ ed@@ Parent@@ s@@ D@@ N@@ s == null@@ ) { com.google.common.collect.Immutable@@ Set.@@ Builder@@ <java.lang.String> d@@ n@@ s = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); try { final javax.@@ nam@@ ing.@@ Name com@@ po@@ sit@@ e@@ Group@@ Name = new javax.@@ nam@@ ing.@@ Co@@ m@@ po@@ sit@@ e@@ Name@@ ().@@ add(@@ group@@ D@@ N@@ ); final javax.@@ nam@@ ing.@@ di@@ rec@@ tor@@ y.@@ Attri@@ but@@ e in = ctx@@ .get@@ Attri@@ but@@ es(@@ com@@ po@@ sit@@ e@@ Group@@ Name, schema.@@ account@@ Member@@ Fiel@@ d@@ .get(@@ schema.@@ account@@ Member@@ Fiel@@ d); if (@@ in != null@@ ) { final javax.@@ nam@@ ing.@@ Nam@@ ing@@ En@@ um@@ er@@ ation@@ <?@@ > group@@ s = in@@ .get@@ All@@ (); try { while (@@ group@@ s.@@ has@@ Mo@@ re@@ ()) { n@@ s.@@ add@@ (((@@ java.lang.String@@ ) (@@ group@@ s.@@ next@@ ()))); } } catch (@@ javax.@@ nam@@ ing.@@ Par@@ ti@@ al@@ Result@@ Exception e) { } } catch (@@ javax.@@ nam@@ ing.@@ Nam@@ ing@@ Exception e) { L@@ d@@ ap@@ Re@@ al@@ m.@@ log.warn@@ (("@@ Co@@ ul@@ d not fin@@ d count@@ D@@ N@@ : " + group@@ D@@ N@@ ), e); } cach@@ ed@@ Parent@@ s@@ D@@ N@@ s = d@@ s.@@ bu@@ ild@@ (); parent@@ Group@@ D@@ N@@ , cach@@ ed@@ Parent@@ s@@ D@@ N@@ s); } for (java.lang.String d@@ n : cach@@ ed@@ Parent@@ s@@ D@@ el@@ si@@ v@@ el@@ y@@ Ex@@ p@@ and@@ Group@@ s(@@ group@@ D@@ N@@ , ctx@@ , n@@ ); } }
com.google.gerrit.server.@@ api.@@ changes.@@ File@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ i@@ .@@ Resource r@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Member@@ Description@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.account.Account@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.@@ serv@@ er@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Reviewer@@ Resource reviewer@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { if (((@@ reviewer@@ .get@@ Revision@@ Resource@@ ()) != null@@ ) && (!(@@ reviewer@@ .get@@ Revision@@ Resource@@ ().@@ is@@ Current@@ ()))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ Cannot ac@@ ces@@ s on n@@ on@@ -@@ cur@@ ren@@ t p@@ atch se@@ t "); } return new com.google.gerrit.server.@@ api.@@ change.@@ Vo@@ te@@ Resource@@ (@@ reviewer@@ , id@@ .get()); }
@java.lang.Override public Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { if (!(@@ hand@@ le@@ s(@@ u@@ id@@ ))) { return null@@ ; } java.lang.String group@@ D@@ n = u@@ id@@ .get().@@ substring@@ (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ H@@ el@@ p@@ er.@@ L@@ D@@ A@@ P@@ _@@ UUID@@ .@@ length@@ ()); com.google.gerrit.server.@@ Current@@ User user = user@@ Provider@@ .get@@ (); if ((@@ !(@@ user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) || (!(@@ me@@ mber@@ sh@@ i@@ ps@@ Of@@ (user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()).@@ contains(@@ u@@ id@@ )@@ ))) { try { if (!(@@ ex@@ ist@@ s@@ Cache@@ .get(@@ group@@ D@@ n@@ ))) { return null@@ ; } } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ ook@@ up ac@@ count@@ ", count@@ , in L@@ D@@ A@@ P group@@ D@@ n@@ ), e); return null@@ ; } } final java.lang.String name = (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ L@@ D@@ A@@ P@@ _@@ NAM@@ E@@ ) + (com.google.gerrit.server.@@ auth.@@ ld@@ ap@@ .@@ L@@ d@@ ap@@ Group@@ Back@@ en@@ d.@@ c@@ n@@ For@@ (@@ group@@ D@@ n@@ )); return new com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ ic@@ () { @java.lang.Override public Account@@ Group.@@ UU@@ I@@ D get@@ Group@@ UUID@@ () { return u@@ u@@ id@@ ; } @java.lang.Override public java.lang.String get@@ Name@@ () { return name@@ ; } @java.lang.Override public java.lang.String get@@ Name@@ () { return "@@ An@@ y@@ Name@@ ; } @java.lang.Override public java.lang.String get@@ Email@@ Add@@ res@@ s() { return null@@ ; } @java.lang.Override public java.lang.String get@@ Url@@ () { return null@@ ; } }; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (@@ resource@@ .is@@ Project@@ ()) { com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input in = new com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input@@ (); in.@@ commit@@ Messag@@ e = (in@@ pu@@ t != null@@ ) ? input.@@ commit@@ Messag@@ e : null@@ ; return default@@ Set@@ .get().@@ apply(@@ resource@@ , in@@ ); } throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ (); }
@org.junit.Test public void update@@ Group@@ Nam@@ es@@ With@@ E@@ mpty@@ C@@ le@@ ar@@ All@@ Notes@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 1 = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 2 = new@@ Group@@ ("@@ b@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ Group@@ Name@@ Notes@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ , g@@ 1, g@@ 2); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ test@@ ing.@@ Test@@ read@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ a@@ ", "@@ b@@ ", "@@ b@@ ", "@@ b@@ 2@@ "); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ test@@ ing.@@ Test@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ isEmpty@@ (); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ log@@ .get(@@ 1@@ )).@@ message@@ ().@@ isEqualTo@@ ("@@ contain@@ s ac@@ count name@@ s name@@ s name@@ "); }
@org.junit.Test public void empty@@ Group@@ Name@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g = new@@ Group@@ ("@@ "); update@@ Group@@ Nam@@ es(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Notes@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (), g@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ test@@ ing.@@ Group@@ Test@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ -@@ 1@@ "); assert@@ Th@@ at(@@ read@@ Name@@ Note@@ (@@ g@@ )).@@ isEqualTo@@ ("@@ Update = -@@ 1 = }
@org.junit.Test public void update@@ Group@@ Nam@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 1 = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ 2 = new@@ Group@@ ("@@ b@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Test@@ .@@ new@@ Per@@ son@@ Ident@@ (); update@@ Group@@ Nam@@ es@@ (id@@ ent@@ , g@@ 1, com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ isEqualTo@@ ("@@ g@@ 2 ac@@ count name@@ s assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ isEqualTo@@ ("@@ c@@ an b@@ e group@@ s@@ \n@@ ", "@@ )).@@ isEqualTo@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ )).@@ commit@@ ter@@ ().@@ match@@ es@@ (id@@ ent@@ ); assert@@ Th@@ at(@@ com.google.gerrit.server.git.@@ Group@@ ing.@@ read@@ Name@@ To@@ U@@ u@@ id@@ Map@@ (repo@@ )).@@ contains@@ Ex@@ act@@ ly@@ ("@@ a@@ ", "@@ b@@ ", "@@ b@@ ", "@@ b@@ ", "@@ b@@ ", "@@ b@@ 2@@ "); java.lang.String commit = log@@ .get(@@ 0@@ ).@@ commit@@ ; update@@ Group@@ Name@@ s(@@ com.google.gerrit.server.g@@ roup@@ .@@ db@@ Group@@ Name@@ Test@@ Notes@@ Test.@@ C@@ LI@@ ST@@ _@@ new@@ Per@@ son@@ Ident@@ (), g@@ 2); lo@@ g = log@@ (); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ log@@ .get(@@ 0@@ ))@@ .@@ commit@@ ().@@ isEqualTo@@ ("@@ commit@@ "); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> group@@ Member@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ api.@@ changes.@@ Member@@ s.@@ P@@ ut@@ Me@@ mb@@ er create@@ (@@ com.google.gerrit.@@ serv@@ er@@ ap@@ i@@ .group@@ .@@ Group@@ Resource group@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) { return new com.google.gerrit.@@ server@@ .@@ group@@ Member@@ s.@@ P@@ ut@@ Member@@ (@@ put@@ , id@@ .get()); }
@java.lang.Override public com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User get@@ Member@@ Resource parse@@ (@@ com.google.gerrit.@@ serv@@ er@@ .group@@ .@@ rest@@ ap@@ i@@ .group@@ .@@ Group@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = rent.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = account@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ).get@@ User@@ (); if ((@@ parent@@ .get@@ Control@@ ().@@ can@@ Se@@ e@@ Member@@ (user@@ .getAccount@@ Id@@ ())) && (@@ com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ rest@@ Get@@ Member@@ s@@ Collec@@ tion.@@ is@@ Member@@ (@@ group@@ , user@@ ))) { return new com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = account@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ).get@@ User@@ (); if ((@@ parent@@ .get@@ Control@@ ().@@ can@@ Se@@ e@@ Member@@ (user@@ .getAccount@@ Id@@ ())) && (@@ rest@@ ore@@ .@@ rest@@ i@@ ed@@ User@@ .@@ rest@@ ore@@ (@@ group@@ Member@@ s@@ Collec@@ tion.@@ is@@ Member@@ (@@ group@@ , user@@ ))) { return new com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ (@@ group@@ , user@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.@@ serv@@ er@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { return list@@ .get@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ x@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.reviewdb.client.@@ Account parse@@ (com.google.gerrit.server.@@ change.@@ Fi@@ x@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource revision@@ Resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String fix@@ Id = id@@ .get@@ (); com.google.gerrit.server.notedb.Change@@ Note@@ s change@@ Note@@ s = revision@@ Resource@@ .get@@ Notes@@ (); java.util.List<@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ bot@@ Comment@@ > ro@@ bot@@ Comment@@ s = comment@@ s@@ Util.@@ ro@@ bot@@ Comment@@ s@@ By@@ PatchSet@@ (change@@ Notes@@ , revision@@ Resource@@ .get@@ PatchSet@@ ().get@@ Id()); for (@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ bot@@ Comm@@ ent ro@@ bot@@ Comm@@ ent : ro@@ bot@@ Comment@@ s) { for (@@ com.google.gerrit.reviewdb.client.@@ Fi@@ x@@ Su@@ gg@@ es@@ tion fix@@ Su@@ gg@@ es@@ tion : ro@@ bot@@ Comm@@ ent.@@ fix@@ Su@@ gg@@ es@@ tion@@ s) { if (@@ java.util.@@ Object@@ s.@@ equals(@@ fix@@ Su@@ gg@@ es@@ tion.@@ fix@@ Id@@ )) { return new com.google.gerrit.server.@@ api.@@ change.@@ Fi@@ x@@ (@@ revision@@ Resource@@ , fix@@ Su@@ gg@@ es@@ tion.@@ replace@@ ment@@ s); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception { req@@ .@@ per@@ mission@@ s().@@ check@@ (@@ Change@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ ); if (((@@ inpu@@ t != null@@ ) && ((@@ input.@@ topic@@ ) != null@@ )) && ((@@ input.@@ to@@ p@@ i@@ c.@@ length@@ ()) > (com.google.gerrit.server.@@ Change@@ Util.@@ T@@ O@@ P@@ I@@ C@@ _M@@ A@@ X@@ _@@ L@@ EN@@ G@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ can@@ not g@@ e@@ t ex@@ ce@@ ed@@ s th@@ e li@@ m@@ it (@@ %@@ s) Change@@ Util.@@ T@@ O@@ P@@ I@@ C@@ _M@@ A@@ X@@ _@@ L@@ EN@@ G@@ E@@ )); } com.google.gerrit.server.@@ update.@@ Batch@@ Update u = update@@ Factory.create@@ (db@@ Provider@@ .get(), req@@ .getChange@@ ().get@@ Project@@ (), req@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { u@@ .@@ add@@ Op@@ (req@@ .getId@@ (), op@@ ); } return com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ op@@ Name) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ op@@ .@@ new@@ To@@ pic@@ Name); }
@org.junit.Test public void by@@ Label@@ Group@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ "); create@@ Account@@ ("@@ user@@ 2@@ "); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); java.lang.String g@@ 1 = create@@ Group@@ ("@@ group@@ 1@@ ", "@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "); java.lang.String g@@ 2 = create@@ Group@@ ("@@ group@@ 2@@ ", "@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "); g@@ Api@@ .group@@ s().@@ id(@@ g@@ 1@@ ).@@ add@@ Member@@ s("@@ user@@ 1@@ "); g@@ Api@@ .group@@ s().@@ id(@@ g@@ 2@@ ).@@ add@@ Member@@ s("@@ user@@ 2@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo@@ , new@@ Change@@ (repo@@ ), user@@ 1); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ 1@@ )); gApi.changes().id(@@ change@@ 1@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ ().@@ label@@ ("@@ Code@@ -@@ Review@@ ", 1@@ )); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ Id@@ )); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ group@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ group@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ user@@ 1@@ ,@@ user@@ 1@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ user@@ 2@@ "); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ label@@ :@@ Code@@ -@@ Review@@ =@@ +@@ 1@@ ,@@ group@@ 2@@ "); }
@org.junit.Test public void submit@@ Recor@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ "); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo@@ , new@@ Change@@ (repo@@ )); com.google.gerrit.reviewdb.client.Change change@@ 2 = insert@@ (repo@@ , new@@ Change@@ (repo@@ )); gApi.changes().id(@@ change@@ 1@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ 1@@ )); gApi.changes().id(@@ change@@ 2@@ .getId@@ ().get@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ re@@ comm@@ end@@ ()); requ@@ est@@ Contex@@ t.set@@ Context@@ (@@ new@@ Request@@ Context@@ (user@@ .getAccount@@ Id@@ ())); assert@@ Query@@ ("@@ is@@ :@@ submit@@ ", change@@ 1); assert@@ Query@@ ("@@ is@@ :@@ submit@@ ", change@@ 1); assert@@ Query@@ ("@@ submit@@ table@@ ", change@@ 1); assert@@ Query@@ ("@@ submit@@ table@@ ", change@@ 1); assert@@ Query@@ ("@@ submit@@ table@@ :@@ not@@ _@@ read@@ y@@ ", change@@ 2); assert@@ Query@@ ("@@ label@@ :@@ Co@@ d@@ -@@ Re@@ vi@@ e@@ =@@ W@@ o@@ k@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ d@@ E@@ vi@@ e@@ vi@@ e@@ =@@ W@@ o@@ k@@ ,@@ user@@ =@@ user@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ Code@@ -@@ Re@@ vi@@ e@@ =@@ W@@ o@@ k@@ ,@@ Ad@@ min@@ ist@@ r@@ ator@@ s", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ d@@ -@@ Re@@ vi@@ e@@ =@@ W@@ o@@ k@@ =@@ Ad@@ min@@ ist@@ r@@ ator@@ s@@ "@@ )).@@ isEqualTo(@@ change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ d@@ -@@ Re@@ vi@@ e@@ :@@ submit@@ =@@ W@@ o@@ k@@ ,@@ change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ re@@ vi@@ e@@ :@@ re@@ vi@@ e@@ :@@ /@@ o@@ k@@ =@@ so@@ m@@ ,@@ change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ n@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ ne@@ ed@@ ", change@@ 2); assert@@ Query@@ ("@@ label@@ :@@ ne@@ ed@@ ", change@@ 1); assert@@ Query@@ ("@@ label@@ :@@ ne@@ ed@@ =@@ W@@ E@@ quals(@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ change@@ 1); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Commit@@ Info apply(@@ com.google.gerrit.extensions.api.changes.@@ Commit@@ Resource rsrc@@ ) throw@@ s java.io.IOException { return com.google.gerrit.server.git.@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (rsrc@@ .get@@ Commit@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Create@@ T@@ a@@ g create@@ (@@ com.google.gerrit.extensions.api.@@ projects.@@ Create@@ T@@ a@@ g create@@ (@@ com.google.gerrit.extensions.api.@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g name@@ ) { return create@@ Tag@@ Factory.create@@ (@@ name@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Group@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ f@@ ai@@ le@@ d al@@ read@@ y ex@@ ist@@ s@@ "); }
public static java.lang.String des@@ cri@@ be@@ (com.google.gerrit.server.@@ Current@@ User user@@ ) { if (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { return user@@ .getAccount@@ Id@@ ().@@ toString@@ (); } if (@@ user instanceof com.google.gerrit.server.query.@@ change.@@ S@@ ingle@@ Group@@ User@@ ) { return "@@ account@@ :@@ " + (user@@ .get@@ E@@ ff@@ ec@@ tive@@ Group@@ s@@ ().get@@ K@@ no@@ w@@ n@@ Group@@ s().@@ iter@@ ator@@ ().@@ next@@ ().@@ toString@@ ()); } return user@@ .@@ toString@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Load@@ er load@@ er = info@@ Factory.create@@ (@@ true@@ ); com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo = load@@ er@@ .get(@@ rsrc@@ .get@@ Member@@ ().get@@ Account@@ Id()); load@@ er.@@ fi@@ ll@@ (); return info@@ ; }
private java.lang.String get@@ Group@@ Name(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) { return group@@ Cache@@ .get(@@ group@@ Id@@ ).@@ map@@ (@@ In@@ ternal@@ Group@@ :@@ get@@ Name@@ ).@@ or@@ E@@ l@@ se@@ (("@@ count@@ ing " + group@@ Id@@ )); }
private void log@@ Orm@@ Exception@@ For@@ Group@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id m : values@@ ) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = m@@ .get@@ Inclu@@ de@@ UUID@@ (); java.lang.String group@@ Name = group@@ Back@@ end@@ .get(@@ group@@ U@@ u@@ id@@ ).get@@ Name@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id t@@ arget@@ Group@@ Id = m@@ .get@@ Group@@ Id(); java.lang.String t@@ arget@@ Group@@ Name = get@@ Group@@ Name(@@ t@@ arget@@ Group@@ Id); des@@ cription@@ s.add(@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Update {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , ac@@ count@@ {@@ 2@@ /@@ {@@ 2@@ /@@ {@@ 0@@ }@@ /@@ group@@ U@@ u@@ id@@ , group@@ Name, t@@ arget@@ Group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); }
@java.lang.Override public void on@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = new java.util.ArrayList<@@ >(); java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t a : db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ by@@ Group@@ Account@@ (m@@ .getAccount@@ Group@@ Id(), m@@ .getAccount@@ Id@@ ())) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } else { au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (m@@ , me@@ , remo@@ v@@ ed@@ On@@ ); au@@ d@@ it.@@ remo@@ v@@ ed@@ L@@ e@@ g@@ ac@@ y@@ (); au@@ dit@@ In@@ sert@@ s.add(@@ au@@ dit@@ ); } db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m account@@ s f@@ ro@@ m count@@ ", me@@ d b@@ y user@@ , remo@@ v@@ ed@@ , e); } }
@java.lang.Override public void on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : add@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (m@@ , me@@ , add@@ ed@@ On@@ ); au@@ dit@@ In@@ sert@@ s.add(@@ au@@ dit@@ ); } try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g ad@@ d account@@ s to count@@ ", e); p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ , e); } }
@java.lang.Override public void on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { final java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id g : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d a : db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ by@@ Group@@ Inclu@@ de@@ (@@ g@@ .get@@ Group@@ Id(), g@@ .get@@ Inclu@@ de@@ UUID@@ ())) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } } db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m account@@ ", count@@ ); me@@ d b@@ y user@@ ", me@@ , e); } }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ () { return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ Cre@@ ate p@@ i@@ c for ", rsrc@@ ) { return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ des@@ cription@@ ().set@@ Label@@ ("@@ C@@ las@@ s p@@ i@@ c AC@@ T@@ ION@@ ", "@@ id@@ "); }
@java.lang.Override public void on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > in@@ clu@@ des@@ Au@@ di@@ t = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id group@@ Inclu@@ de : add@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ group@@ Inclu@@ de@@ , me@@ , add@@ ed@@ On@@ ); in@@ clu@@ des@@ Au@@ d@@ it.@@ add(@@ au@@ dit@@ ); } try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (in@@ clu@@ des@@ Au@@ dit@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g ad@@ d group@@ s to count@@ ", count@@ ); p@@ er@@ for@@ me@@ d b@@ y user me@@ , add@@ ed@@ , e); } }
public static void log@@ F@@ ail@@ To@@ Load@@ From@@ Group@@ Ref@@ As@@ W@@ ar@@ n@@ ing@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id@@ ) { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ (@@ warn@@ ing@@ ("@@ Cannot w@@ it@@ h I@@ D %s f@@ ro@@ m ac@@ count name f@@ ai@@ le@@ d@@ ", f@@ ai@@ le@@ d@@ , "@@ to lo@@ ad f@@ ro@@ m ac@@ count " + " f@@ u@@ u@@ id@@ )); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ With@@ Group@@ Name@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , java.lang.String group@@ Name, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ UUID@@ ) throw@@ s java.io.IOException { try { java.util.@@ Optional@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Re@@ f = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Not@@ es.@@ load@@ One@@ Group@@ Ref@@ eren@@ ce@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Name); if (!(@@ group@@ Ref@@ .is@@ P@@ res@@ ent@@ ())) { return com.google.common.collect.Immutable@@ List.@@ of@@ (@@ warn@@ ing@@ ("@@ Th@@ e w@@ it@@ h name '@@ %@@ s@@ ' do@@ es@@ n@@ '@@ t ex@@ is@@ t in th@@ e li@@ s@@ t of al@@ l name@@ s group@@ Name@@ )); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ Ref@@ .get@@ ().get@@ UUID@@ (); java.lang.String name = group@@ Ref@@ .get@@ ().get@@ Name@@ (); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); if (!(@@ java.util.@@ Object@@ s.@@ equals(@@ group@@ UUID@@ , u@@ id@@ ))) { pro@@ ble@@ m@@ s.add(@@ warn@@ ing@@ ("@@ h w@@ it@@ h '@@ %@@ s@@ ' h@@ a@@ s UU@@ I@@ D '@@ %@@ s@@ ' in '@@ %@@ s@@ ' in '@@ ", ac@@ count %@@ s@@ ' in ac@@ count %@@ s@@ ' in ac@@ count %@@ s", ac@@ tive@@ UUID@@ , group@@ UUID@@ , u@@ u@@ id@@ )); } if (!(@@ java.util.@@ Object@@ s.@@ equals(@@ group@@ Name, pro@@ ble@@ m@@ s.add(@@ warn@@ ing@@ ("@@ Co@@ ul@@ d not@@ e of not@@ e of name %@@ s@@ ' to %@@ s@@ ' to %@@ s", ac@@ c@@ d rep@@ res@@ ent of %@@ s@@ ' to %@@ s", group@@ Name, group@@ Name, group@@ Name, id@@ )); } return pro@@ ble@@ ms@@ ; } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { return com.google.common.collect.Immutable@@ List.@@ of@@ (@@ warn@@ ing@@ ("@@ Fai@@ le@@ d to ch@@ ec@@ k con@@ si@@ st@@ en@@ c@@ it@@ h w@@ it@@ h con@@ si@@ st@@ en@@ c@@ y@@ : %@@ s", notes@@ Message@@ ())); }
private void read@@ Group@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ Result result) throw@@ s java.io.IOException { for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > en@@ try : refs.@@ en@@ try@@ Set@@ ()) { if (!(@@ en@@ try@@ .getKey@@ ().@@ startsWith@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ))) { continue@@ ; } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = Account@@ Group.@@ UUID@@ .@@ from@@ Ref@@ (@@ en@@ try@@ .getKey@@ ()); if (@@ u@@ id == null@@ ) { result.@@ pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ E@@ D I@@ D f@@ ro@@ m %s en@@ try@@ .getKey@@ ())); continue@@ ; } try { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config cf@@ g = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ S@@ n@@ ap@@ sh@@ o@@ t@@ (repo@@ , u@@ id@@ , en@@ try@@ .getValue@@ ().get@@ Object@@ Id()); result.@@ u@@ id@@ To@@ Group@@ Map.@@ put(@@ u@@ id@@ , cfg@@ .get@@ Load@@ ed@@ Group@@ ().get@@ ()); } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { result.@@ pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ E@@ rror do@@ es not parse@@ : %@@ s", u@@ id@@ , e.get@@ Message@@ ())); } } }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Parent@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return apply(@@ rsrc@@ , input@@ ); }
public void vali@@ date@@ Parent@@ Update@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ Parent@@ , boolean check@@ I@@ f@@ Ad@@ min@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (@@ check@@ I@@ f@@ Ad@@ min@@ ) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); } if ((@@ project.@@ equals(@@ all@@ User@@ s@@ )) && (!(@@ all@@ Project@@ s.get@@ ().@@ e@@ qual@@ s@@ (@@ new@@ Parent@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ m@@ us@@ t in@@ it f@@ ro@@ m %s all@@ User@@ s.get@@ (), all@@ Project@@ s.get@@ ())); } if (@@ project.@@ equals(@@ all@@ Project@@ s@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ on@@ sup@@ p@@ or@@ ted pa@@ ren@@ t of " + (@@ all@@ Project@@ s.get@@ ()))); } new@@ Pa@@ ren@@ t = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ new@@ Parent@@ ); if (@@ new@@ Pa@@ ren@@ t != null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception@@ ((@@ ("@@ Th@@ e project \"@@ " + new@@ Parent@@ ) + " not fo@@ un@@ d ")); } if (@@ parent@@ .getName@@ ().equals(@@ project@@ .get@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ on@@ : " + "@@ \@@ " se@@ t to se@@ t to se@@ l@@ f ")); } if (@@ com.google.common.collect.I@@ terable@@ s@@ .@@ try@@ F@@ in@@ d(@@ pa@@ rent.@@ t@@ ree@@ (), ("@@ m@@ -@@ > p@@ ) { return p@@ .getName@@ Key@@ ().equals(@@ project@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Resource parse@@ (@@ com.google.gerrit.extensions.api.@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return new com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ (c@@ ap@@ i@@ .@@ control@@ For@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .getUser@@ (), list@@ .get@@ ().get@@ (rsrc@@ , id@@ )); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if (!(@@ ag@@ ree@@ ment@@ s@@ Enable@@ d@@ )) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ can@@ not ag@@ ree@@ ment@@ s dis@@ able@@ d@@ "); } if (!(@@ self@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ e@@ t cont@@ ri@@ bu@@ tor ag@@ ree@@ ment@@ s@@ "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = self@@ .get().@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); if (@@ user != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception@@ (("@@ can@@ not allow@@ ed to g@@ e@@ t cont@@ ri@@ bu@@ tor ag@@ ree@@ ment@@ s@@ "); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Info> result@@ s = new java.util.ArrayList<@@ >(); java.util.Collection<@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ > c@@ a@@ s = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s(); for (@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a : as@@ c@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > group@@ Id@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e r@@ ul@@ e : c@@ a@@ .get@@ Ac@@ cep@@ ted@@ ()) { if (((@@ rule@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ AL@@ LO@@ W@@ )) && ((@@ rule@@ .get@@ Group@@ ()) != null@@ )) { if ((@@ rule@@ .get@@ Group@@ ().get@@ UUID@@ ()) != null@@ ) { group@@ Id@@ s.add(@@ rule@@ .get@@ Group@@ ().get@@ UUID@@ ()); } else { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = ap@@ i@@ ed@@ User@@ .@@ rest@@ Get@@ Ag@@ ree@@ ment@@ s.@@ log.warn@@ ((@@ (("@@ In@@ vali@@ d " + (r@@ ule@@ .get@@ Group@@ ().get@@ Name@@ ())) + "@@ : not ref@@ eren@@ ce@@ d@@ ")); } } if (user@@ .get@@ E@@ ff@@ ec@@ tive@@ Group@@ s().@@ contains@@ An@@ y@@ Of(@@ group@@ Id@@ s@@ )) { result@@ s.add(@@ ag@@ ree@@ ment@@ Json@@ (c@@ .@@ for@@ m@@ at@@ (c@@ a@@ )); } } return result@@ s; }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : values@@ ) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = m@@ .getAccount@@ Id(); java.lang.String user@@ Name = account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ User@@ Name@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = m@@ .getAccount@@ Group@@ Id(); java.lang.String group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Un@@ k@@ no@@ w@@ n {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ , account@@ Id, group@@ Name, group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , e); }
@java.lang.Override protected void configure() { bind(@@ com.google.gerrit.server.@@ schema.@@ Access@@ Collection@@ .@@ class@@ ); com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map.@@ map@@ Of(@@ bin@@ der@@ (), com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ .@@ class@@ ); com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Map.@@ map@@ Of(@@ bin@@ der@@ (), com.google.gerrit.server.@@ schema.@@ Schema@@ Util.@@ rest@@ ri@@ c@@ ces@@ s.@@ Access@@ .@@ AC@@ CES@@ S_@@ D@@ ); }
private void test@@ Can@@ not@@ Create@@ Group@@ Branch@@ (java.lang.String ref@@ Pat@@ tern@@ , java.lang.String group@@ Ref@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ C@@ RE@@ AT@@ E@@ ); g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ P@@ US@@ H@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), all@@ User@@ s@@ Repo@@ ).to@@ (@@ group@@ Ref@@ ); r@@ .@@ assert@@ Error@@ Statu@@ s(); assert@@ Th@@ at(@@ r@@ .get@@ Message@@ ()).@@ contains@@ ("@@ Up@@ load@@ ed to cre@@ ate branch@@ .@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { assert@@ Th@@ at(@@ repo.@@ ex@@ act@@ Ref@@ (@@ group@@ Ref@@ )).@@ isNull@@ (); } }
private static <@@ T> com.google.common.collect.Immutable@@ Set<@@ T> log@@ log@@ f@@ Not@@ Un@@ i@@ qu@@ e@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ S@@ our@@ ce source@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ , java.lang.I@@ terable@@ <@@ T> iter@@ able@@ , java.util.@@ Comp@@ ar@@ ator@@ <@@ T> com@@ par@@ ator@@ , java.lang.@@ Class@@ <@@ T> c@@ la@@ z@@ z@@ ) { java.util.List<@@ T> li@@ s@@ t = com.google.common.collect.@@ Stream@@ s.@@ st@@ ream@@ (@@ iter@@ able@@ ).@@ s@@ orted@@ (@@ com@@ par@@ ator@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); com.google.common.collect.Immutable@@ Set<@@ T> se@@ t = com.google.common.collect.Immutable@@ Set.@@ copy@@ Of(@@ list@@ ); if ((@@ se@@ t.@@ size@@ ()) != (@@ li@@ s@@ t.@@ size@@ ())) { com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ log.warn@@ ("@@ In@@ vali@@ d {@@ } in {@@ }@@ ", up@@ li@@ c@@ ate {@@ } enti@@ ti@@ es@@ : {@@ }@@ ", u@@ id@@ , source@@ , c@@ la@@ z@@ .get@@ Si@@ mp@@ le@@ Name@@ (), iter@@ able@@ ); } return set@@ ; }
public static void update@@ Group@@ File@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ , java.lang.String ref@@ Name, java.lang.String file@@ Name, java.lang.String content@@ s) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (@@ all@@ User@@ s@@ Repo@@ )) { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.jgit.lib.@@ Repository@@ > test@@ Repository = new org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ all@@ User@@ s@@ Repo@@ , r@@ w@@ ); Test@@ Repository@@ <@@ Repository@@ >@@ .@@ Builder buil@@ der = test@@ Repositor@@ y.@@ branch@@ (ref@@ Name@@ ).@@ commit@@ ().@@ add(@@ file@@ Name, content@@ s).@@ message@@ ("@@ fi@@ le account@@ "); fi@@ le le le le le re@@ f = all@@ User@@ s@@ Repo@@ .@@ ex@@ act@@ Ref@@ (ref@@ Name); if (re@@ f != null@@ ) { org.eclipse.jgit.revwalk.RevCommit c = rw.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); if (@@ c != null@@ ) { buil@@ der.@@ parent@@ (c@@ ); } buil@@ der.@@ create@@ (); } } buil@@ der.@@ create@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Project@@ Info apply(@@ com.google.gerrit.server.project.Project@@ Resource rsrc@@ ) { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .getProject@@ State@@ ()); }
com.google.gerrit.server.@@ api.@@ projects.@@ Branch@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.server.@@ api.@@ projects.@@ Project@@ Resource project, java.lang.String ref@@ );
private com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return branch@@ es.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (ref@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result file@@ (java.lang.String path@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Cont@@ ent.@@ apply(@@ resource@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e fi@@ le event@@ ", e); } }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ UUID@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", u@@ id@@ 2 = g@@ -@@ 1 java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ (("@@ Cannot w@@ it@@ h name '@@ -@@ ' h@@ a@@ s UU@@ I@@ D '@@ u@@ u@@ id@@ -@@ 1@@ ' in '@@ " + (@@ account.@@ config@@ '@@ t '@@ u@@ id@@ -@@ ' in '@@ )@@ )).@@ bu@@ t '@@ ; }
@org.junit.Test public void group@@ Name@@ Note@@ I@@ s@@ Con@@ si@@ st@@ ent@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ ("@@ g@@ -@@ 1@@ ", u@@ id@@ -@@ 1 = g@@ -@@ 1 1 java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Group@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ isEmpty@@ (); }
@org.junit.Test public void group@@ Name@@ Note@@ F@@ ail@@ To@@ Par@@ se@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ ("@@ g@@ -@@ 1@@ ", "@@ [@@ in@@ valid@@ "); java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ NoteDb@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ Fai@@ le@@ d to ch@@ ec@@ k con@@ si@@ st@@ en@@ c@@ y w@@ it@@ h con@@ si@@ st@@ en@@ c@@ y@@ "); }
@org.junit.Test public void group@@ Name@@ Note@@ I@@ s@@ M@@ is@@ s@@ ing@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 2@@ ", u@@ id@@ -@@ 2 = g@@ -@@ 2 si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ in@@ vali@@ d w@@ it@@ h name '@@ g@@ ' do@@ es@@ n@@ '@@ t ex@@ is@@ t in th@@ e li@@ s@@ t of name@@ s "); }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ Name@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", u@@ id@@ 1 = g@@ -@@ 2 java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ not@@ e of name '@@ -@@ ' c@@ l@@ ai@@ m@@ s to rep@@ res@@ ent name of g@@ erri@@ t name@@ -@@ 2@@ ", "@@ ' to rep@@ res@@ ent name of g@@ erri@@ t name@@ -@@ 2@@ ", "@@ ))) { g@@ ran@@ t(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ ("@@ Cannot not@@ e of name '@@ -@@ '@@ s of g@@ roup '@@ " + (@@ g@@ ener@@ ation@@ )) + "@@ ' to rep@@ res@@ ent of g@@ ener@@ ate ") + (@@ com.google.gerrit.common.@@ Change@@ Util.@@ c@@ c@@ Id@@ ()))); }
@org.junit.Test public void group@@ Name@@ Note@@ H@@ as@@ D@@ if@@ f@@ er@@ ent@@ Name@@ And@@ UUID@@ () throw@@ s java.lang.Exception { update@@ Group@@ Nam@@ es@@ Ref@@ ("@@ g@@ -@@ 1@@ ", u@@ id@@ 2 = g@@ -@@ 2 java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ check@@ With@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , "@@ g@@ -@@ 1@@ ", new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ u@@ u@@ id@@ -@@ 1@@ ")); assert@@ Th@@ at(@@ pro@@ ble@@ ms@@ ).@@ contains@@ Ex@@ act@@ l@@ y(@@ warn@@ ing@@ (("@@ Cannot w@@ it@@ h name '@@ g@@ 1@@ ' h@@ a@@ s UU@@ I@@ D '@@ u@@ u@@ id@@ -@@ 1@@ ' in '@@ " + (@@ account.@@ config@@ '@@ -@@ '@@ )) + "@@ ' in u@@ id@@ s note@@ s warn@@ ing@@ : not@@ e of name '@@ -@@ '@@ ")); c@@ l@@ ai@@ m@@ s to rep@@ res@@ ent of '@@ -@@ '@@ )@@ .get(@@ g@@ 2@@ ' for ac@@ count '@@ ) { g@@ 2@@ ' ' : " + "@@ ' g@@ ener@@ h@@ a@@ s to ") + count@@ ing@@ ")); }
com.google.gerrit.server.@@ api.@@ projects.@@ Ch@@ ild@@ Project@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.server.@@ api.@@ project.@@ Ch@@ ild@@ Project@@ Resource rsrc@@ );
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource project, Delete@@ Tag@@ s@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ inpu@@ t == null@@ ) || ((@@ input.@@ tag@@ s) == null@@ )) || (in@@ pu@@ t.@@ tag@@ s.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ mis@@ s@@ ing m@@ us@@ t b@@ e sp@@ e@@ c@@ if@@ i@@ ed delete@@ "); } delete@@ Ref@@ Factory.create@@ (project@@ ).@@ ref@@ s(@@ input.@@ pre@@ fix@@ (@@ server@@ .@@ rest@@ Session@@ .@@ _@@ T@@ A@@ G@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
private static void log@@ In@@ vali@@ d(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id@@ , org.eclipse.jgit.revwalk.RevCommit c@@ , org.eclipse.jgit.revwalk.@@ F@@ oo@@ ter@@ Lin@@ e line@@ ) { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ db.@@ Log@@ Read@@ er.@@ log.@@ de@@ bug@@ ("@@ G@@ erri@@ t Co@@ ul@@ d foo@@ ter lin@@ e in commit {@@ } while par@@ s@@ ing au@@ di@@ t for ac@@ count@@ {@@ }@@ : {@@ }@@ ", c.@@ name@@ (), u@@ id@@ , line@@ ); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Project@@ State parse@@ (@@ com.google.gerrit.extensions.api.@@ server@@ .@@ rest@@ i@@ .@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ ap@@ i@@ .@@ P@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ); for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ p : p@@ .getProject@@ State@@ ().@@ parent@@ s()) { if (@@ parent@@ .getName@@ Key@@ ().equals(@@ p@@ p@@ .getProject@@ ().get@@ NameKey@@ ())) { return new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override protected com.google.gerrit.client.@@ info.@@ Account@@ Info appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(@@ input@@ s.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.@@ Not@@ Al@@ an@@ i@@ ed@@ Exception@@ (); } return r@@ ; }
private Group@@ B@@ und@@ le.@@ Builder new@@ B@@ und@@ le@@ () { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = new com.google.gerrit.reviewdb.client.Account@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ group@@ "), new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (1@@ ), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ "@@ account@@ -@@ 1@@ ), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er me@@ mb@@ er = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 0@@ ), group@@ .getId@@ ())); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t me@@ mber@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ me@@ mber@@ , new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ 00@@ 0@@ ), t@@ s); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id by@@ Id = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ group@@ .getId@@ (), new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ sub@@ group@@ "@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d by@@ Id@@ Au@@ di@@ t = new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d(@@ by@@ Id, new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 3@@ 00@@ 0@@ ), t@@ s); return com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le.@@ buil@@ der@@ ()@@ .group@@ (@@ group@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ Au@@ dit@@ ).@@ by@@ Id@@ Au@@ dit@@ (@@ by@@ Id@@ Au@@ dit@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ group@@ s@@ .g@@ lobal@@ :@@ on@@ y@@ mo@@ us@@ User@@ s.@@ name@@ ", valu@@ e = User@@ s public void create@@ Group@@ With@@ Default@@ Name@@ Of@@ Sy@@ st@@ em@@ Group@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Account name is re@@ serv@@ ed g@@ Api@@ .group@@ s().@@ create@@ ("@@ user@@ s@@ "); }
com.google.gerrit.server.@@ api.@@ changes.@@ R@@ o@@ bot@@ Comment@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ R@@ o@@ bot@@ Comment@@ Resource c@@ );
private com.google.gerrit.extensions.common.@@ Auth@@ Info get@@ Auth@@ Info@@ (@@ com.google.gerrit.@@ serv@@ er@@ .get().@@ rest@@ i@@ red@@ To@@ Auth@@ Config cfg@@ , com.google.gerrit.server.account.@@ Re@@ al@@ m re@@ al@@ m@@ ) { com.google.gerrit.extensions.common.@@ Auth@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Auth@@ Info@@ (); info.@@ auth@@ Type = cfg@@ .get@@ Auth@@ Type@@ (); info.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ f@@ g.@@ is@@ U@@ se@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s()); info.@@ edit@@ able@@ Account@@ Fiel@@ d@@ s = new java.util.Array@@ List@@ (re@@ al@@ m@@ .get@@ Edit@@ able@@ Fiel@@ d@@ s()); info@@ .@@ do@@ Account@@ Ur@@ l = cfg@@ .get@@ S@@ w@@ it@@ ch@@ it@@ ch@@ Url@@ (); info@@ .g@@ it@@ B@@ as@@ ic@@ Auth@@ Po@@ li@@ c@@ y = cfg@@ .get@@ Git@@ B@@ as@@ ic@@ Auth@@ Po@@ li@@ c@@ y@@ (); if ((@@ info.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s) != null@@ ) { java.util.Collection<@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ > ag@@ ree@@ ment@@ s = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s(); if (!(@@ ag@@ ree@@ ment@@ s.@@ isEmpty())) { info.@@ cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ ag@@ ree@@ ment@@ s.@@ size()); for (@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment ag@@ ree@@ ment : ag@@ ree@@ ment@@ s) { info.@@ cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s.add(@@ ag@@ ree@@ ment@@ Json@@ .@@ for@@ m@@ at(@@ ag@@ ree@@ ment@@ )); } } switch (info.@@ auth@@ Typ@@ e) { case L@@ D@@ A@@ P : case L@@ D@@ A@@ P@@ _@@ B@@ IN@@ D : info.@@ regist@@ er@@ Url@@ .get@@ Reg@@ ist@@ er@@ Url@@ (); info.@@ regist@@ er@@ Url@@ (); info.@@ regist@@ er@@ t = cfg@@ .get@@ Reg@@ ist@@ er@@ Url@@ (); info.@@ edit@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s = cfg@@ .get@@ Edit@@ Name@@ (); break@@ ; case C@@ M@@ _@@ E@@ X@@ T@@ EN@@ S@@ IO@@ N : info.@@ regist@@ er@@ Url@@ .get@@ Reg@@ ist@@ er@@ Url@@ (); info.@@ regist@@ er@@ Re@@ ply@@ To@@ Reg@@ ist@@ er@@ Url@@ (); info.@@ edit@@ Ur@@ l = cfg@@ .get@@ F@@ ull@@ Name@@ (); info.@@ http@@ P@@ asswor@@ d@@ .get@@ Http@@ P@@ asswor@@ d@@ (); break@@ ; case H@@ T@@ T@@ T@@ P : case H@@ T@@ T@@ T@@ P@@ EN@@ T_@@ B@@ E@@ V@@ E_@@ C@@ lo@@ gin@@ Url@@ (); info.@@ cont@@ ex@@ t = cfg@@ .get@@ F@@ ull@@ Name@@ (); info.@@ http@@ P@@ asswor@@ d@@ (); info.@@ http@@ P@@ asswor@@ d@@ s = cfg@@ .get@@ Http@@ P@@ asswor@@ d@@ (); break@@ ; case H@@ T@@ T@@ T@@ T@@ T@@ T@@ T@@ T@@ T@@ T@@ P : case C@@ lo@@ gin@@ Url@@ (); info.@@ lo@@ gin@@ Url@@ (); } return cfg@@ .get@@ F@@ ull@@ Name@@ (); }
@org.junit.Test public void push@@ To@@ Group@@ Branch@@ For@@ Review@@ User@@ s@@ Repo@@ I@@ s@@ Re@@ jec@@ ted@@ On@@ Submit@@ () throw@@ s java.lang.Exception { push@@ To@@ Group@@ For@@ Review@@ And@@ Submit@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), updat@@ e not allow@@ ed }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ group@@ s@@ .g@@ lobal@@ :@@ on@@ y@@ mo@@ us@@ User@@ s.@@ name@@ ", valu@@ e = User@@ s public void create@@ Group@@ With@@ Config@@ u@@ red@@ Name@@ Of@@ Sy@@ st@@ em@@ Group@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ G@@ erri@@ t User@@ s al@@ read@@ y ex@@ ist@@ s@@ "); g@@ Api@@ .group@@ s().@@ create@@ ("@@ user@@ s@@ "); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ Sy@@ st@@ em@@ Group@@ Case@@ S@@ en@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Cannot User@@ s al@@ read@@ y ex@@ ist@@ s@@ g@@ Api@@ .group@@ s().@@ create@@ (@@ new@@ Group@@ Name); }
private void test@@ Can@@ not@@ Delete@@ Group@@ Branch@@ (java.lang.String ref@@ Pat@@ tern@@ , java.lang.String group@@ Ref@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t(@@ all@@ User@@ s, ref@@ Pat@@ tern@@ , Permission@@ .@@ DE@@ LE@@ T@@ E, true@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > all@@ User@@ s@@ Re@@ p@@ o = c@@ l@@ one@@ Project@@ (@@ all@@ User@@ s); org.eclipse.jgit.transport.@@ Push@@ Result r = com.google.gerrit.acceptance.@@ Git@@ Util.@@ delete@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Ref@@ ); org.eclipse.jgit.transport.@@ Remote@@ Ref@@ Update ref@@ Update = r@@ .get@@ Remote@@ Update@@ (@@ group@@ Ref@@ ); assert@@ Th@@ at(@@ ref@@ Update@@ .get@@ Status@@ ()).@@ isEqualTo(@@ Remote@@ Ref@@ Update.@@ Status.@@ RE@@ JEC@@ T@@ ED@@ _@@ O@@ T@@ H@@ ER@@ _@@ RE@@ A@@ S@@ ON@@ ); assert@@ Th@@ at(@@ ref@@ Update@@ .get@@ Message@@ ()).@@ contains@@ ("@@ m@@ us@@ t allow@@ ed to de@@ le@@ te branch@@ .@@ "); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { assert@@ Th@@ at(@@ repo.@@ ex@@ act@@ Ref@@ (@@ group@@ Ref@@ )).@@ is@@ Not@@ Null@@ (); } }
private void push@@ To@@ Branch@@ For@@ Review@@ And@@ Submit@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String group@@ Ref@@ , java.lang.String expected@@ Error@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); g@@ ran@@ t@@ Label@@ ("@@ Code@@ -@@ Review@@ ", (@@ -@@ 2@@ ), project, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , false@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (repo@@ , group@@ (@@ group@@ Re@@ f + "@@ :@@ group@@ Ref@@ ")); repo.@@ set@@ ("@@ group@@ Ref@@ "); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , ac@@ count@@ ); con@@ fig = "@@ in@@ valid@@ Ref@@ s(@@ group@@ Ref@@ )); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); assert@@ Th@@ at(@@ r@@ .getChange@@ ().@@ change@@ ().get@@ Dest@@ ().get@@ ()).@@ isEqualTo(@@ group@@ Ref@@ ); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); if (@@ expected@@ E@@ rror != null@@ ) { ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ updat@@ e not allow@@ ed to r@@ .getChange@@ Id@@ ()).@@ current@@ ().@@ submit@@ (); }
@org.junit.Test public void push@@ To@@ Group@@ Nam@@ es@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); allow@@ G@@ lobal@@ Capabili@@ ti@@ es(@@ com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , G@@ lobal@@ Capabili@@ ty.@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); assert@@ Push@@ Group@@ Branch@@ (@@ all@@ User@@ s, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NAM@@ ES@@ , updat@@ e not allow@@ ed }
@org.junit.Test public void push@@ To@@ De@@ le@@ ted@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { java.lang.String group@@ Re@@ f = com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ De@@ le@@ ted@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ Api@@ .group@@ s().@@ create@@ (@@ name@@ ("@@ foo@@ "@@ )@@ ).get@@ ().@@ id@@ )); create@@ Branch@@ (@@ all@@ User@@ s, group@@ Ref@@ ); assert@@ Push@@ To@@ Branch@@ (@@ all@@ User@@ s, group@@ Ref@@ , updat@@ e not allow@@ ed db@@ "); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ In@@ ternal@@ Group@@ Case@@ S@@ en@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String d@@ up@@ Group@@ Name = name@@ ("@@ d@@ up@@ Group@@ "); g@@ Api@@ .group@@ s().@@ create@@ (@@ d@@ up@@ Group@@ Name); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ ("@@ Cannot d@@ up@@ Group@@ Name) + " al@@ read@@ y ex@@ ist@@ s@@ ")); ex@@ ist@@ s g@@ Api@@ .group@@ s().@@ create@@ (@@ d@@ up@@ Group@@ Name); }
private void assert@@ Push@@ To@@ Group@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String group@@ Ref@@ Name, java.lang.String expected@@ Error@@ On@@ Update@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ AT@@ E, false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ T@@ ED@@ _@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ RE@@ C@@ AT@@ E, false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ DE@@ LE@@ T@@ ED@@ _@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ U@@ P@@ US@@ ES@@ , Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.@@ Git@@ Util.@@ f@@ et@@ ch@@ (repo@@ , group@@ Ref@@ Name + "@@ group@@ Ref@@ ")); repo.@@ re@@ set@@ Ref@@ ("@@ group@@ "); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , ac@@ cess@@ Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E, expected@@ Error@@ ); if (@@ expected@@ Error@@ ) { assert@@ Error@@ Statu@@ s(@@ expected@@ On@@ ); } else { assert@@ O@@ k@@ Statu@@ s(); } }
private void assert@@ Create@@ Group@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expected@@ Error@@ On@@ Create@@ ) throw@@ s java.lang.Exception { g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ AT@@ E, false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); g@@ ran@@ t@@ (project@@ , ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , false@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository@@ > repo = c@@ l@@ one@@ Project@@ (project@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = push@@ Factory.create@@ (db, admin@@ .getId@@ ent@@ (), repo@@ , ac@@ count@@ , con@@ fig Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E, cont@@ ent + "@@ b@@ ar@@ "@@ )@@ ))); if (@@ expected@@ Error@@ Cre@@ ate != null@@ ) { r@@ .@@ assert@@ Error@@ Statu@@ s(@@ expected@@ Error@@ On@@ Create@@ ); } else { r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); } }
@org.junit.Test public void on@@ ly@@ Visible@@ Group@@ s@@ Ret@@ ur@@ ne@@ d(@@ ) throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = name@@ (@@ "@@ new@@ Group@@ "); com.google.gerrit.extensions.@@ i@@ .group@@ s.@@ Group@@ Input in = new com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Group@@ Input@@ (); in.@@ name = new@@ Group@@ Name@@ ; in.@@ des@@ crip@@ tion = h@@ id@@ de@@ n ac@@ count sible@@ To@@ Al@@ l = false@@ ; in.@@ owner@@ Id = admin@@ Group@@ U@@ u@@ id@@ ().get@@ (); g@@ Api@@ .group@@ s().@@ create@@ (in@@ ); set@@ Api@@ User@@ (user@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ list@@ ().get@@ As@@ Map@@ ())@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ Key@@ (@@ new@@ Group@@ Name); set@@ Api@@ User@@ (@@ admin@@ ); g@@ Api@@ .group@@ s().@@ id@@ (@@ new@@ Group@@ Name@@ ).@@ add@@ Member@@ s(@@ user@@ .@@ user@@ name); set@@ Api@@ User@@ (user@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ list@@ As@@ Map@@ ()).@@ contains@@ Key@@ (@@ new@@ Group@@ Name); }
@org.junit.Test public void push@@ To@@ Group@@ Branch@@ I@@ s@@ Re@@ jec@@ ted@@ For@@ All@@ User@@ s@@ Repo@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ group@@ s@@ In@@ NoteDb@@ ()).@@ is@@ True@@ (); assert@@ Push@@ To@@ Group@@ Branch@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), updat@@ e not allow@@ ed }
@org.junit.Test public void group@@ Description@@ () throw@@ s java.lang.Exception { java.lang.String name = name@@ ("@@ group@@ "); g@@ Api@@ .group@@ s().@@ create@@ (@@ name); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ id(@@ name@@ ).@@ isEmpty@@ (); java.lang.String des@@ c = des@@ crip@@ tion for th@@ e ac@@ count : group@@ Api@@ .group@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ (@@ des@@ c@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ id(@@ name@@ ).@@ isEqualTo@@ des@@ cription@@ ()).@@ isEqualTo(@@ des@@ c@@ ); g@@ Api@@ .group@@ s().@@ id(@@ des@@ cription@@ ).@@ isEqualTo@@ (@@ null@@ ); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ id(@@ g@@ Api@@ .group@@ s().@@ id(@@ des@@ cription@@ ).@@ isEmpty@@ (); g@@ Api@@ .group@@ s().@@ id(@@ name@@ ).@@ des@@ cription@@ ("@@ "); assert@@ Th@@ at(@@ g@@ Api@@ .group@@ s().@@ id(@@ des@@ cription@@ ).@@ isEmpty@@ (); }
@org.junit.Test public void re@@ index@@ Permission@@ s() throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Test@@ Account group@@ Ow@@ ne@@ r = account@@ Cre@@ ator@@ .@@ user@@ 2@@ (); com.google.gerrit.extensions.@@ i@@ .group@@ s.@@ Group@@ Input in = new com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Group@@ Input@@ (); in.@@ name = name@@ ("@@ group@@ "); in.@@ me@@ mber@@ s = java.util.Collections.singleton@@ (@@ group@@ Owner@@ ).@@ st@@ ream@@ ().@@ map@@ (( u@@ ) -@@ > u@@ u@@ id@@ .@@ toString@@ ()).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); in.@@ vi@@ sible@@ To@@ Al@@ l = true@@ ; com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = g@@ Api@@ .group@@ s().@@ create@@ (in@@ ).get@@ (); set@@ Api@@ User@@ (@@ admin@@ ); g@@ Api@@ .group@@ s().@@ id(@@ group@@ ).@@ index@@ (); set@@ Api@@ User@@ (@@ group@@ Owner@@ ); g@@ Api@@ .group@@ s().@@ id(@@ group@@ ).@@ id@@ (); index@@ (); set@@ Api@@ User@@ (user@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.Auth@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ No@@ t allow@@ ed to in@@ de@@ x ac@@ x group@@ ", id@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Account of ac@@ count group@@ "); g@@ Api@@ .group@@ s().@@ id(@@ group@@ ).@@ index@@ (); }
@org.junit.Test public void create@@ D@@ up@@ li@@ cate@@ Sy@@ st@@ em@@ Group@@ Case@@ In@@ sen@@ si@@ tive@@ Name@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { java.lang.String new@@ Group@@ Name = user@@ name@@ (@@ ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Cannot al@@ read@@ y ex@@ ist@@ s@@ g@@ Api@@ .group@@ s().@@ create@@ (@@ new@@ Group@@ Name); }
private com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info get@@ Change@@ Info@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ ) { com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Change@@ Config@@ Info@@ (); info.@@ allow@@ B@@ l@@ am@@ e = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ allow@@ B@@ l@@ ame@@ ", true@@ )); info.@@ allow@@ Draft@@ s = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ allow@@ Draft@@ s", true@@ )); boolean has@@ As@@ signe@@ e@@ In@@ de@@ x = index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ Schema@@ ().@@ has@@ Fiel@@ d(@@ Change@@ Fiel@@ d.@@ A@@ S@@ I@@ G@@ N@@ E@@ ); info.@@ show@@ As@@ signe@@ e@@ In@@ Changes@@ T@@ able = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ ((@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ show@@ As@@ signe@@ e@@ In@@ Changes@@ Table@@ ", false@@ )) && has@@ As@@ signe@@ e@@ In@@ Index@@ )); info.@@ l@@ arg@@ e@@ Change = cfg@@ .get@@ In@@ t@@ ("@@ change@@ ", "@@ l@@ arg@@ e@@ Change@@ ", 5@@ 00@@ ); info@@ .@@ private@@ By@@ De@@ fa@@ ult = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (c@@ fg@@ .get@@ Boolean@@ ("@@ change@@ ", "@@ private@@ By@@ Default@@ By@@ ", false@@ )); info.@@ re@@ ply@@ T@@ oo@@ l@@ ti@@ p = (@@ java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ ("@@ change@@ ", null@@ , "@@ re@@ ply@@ T@@ oo@@ l@@ ti@@ p@@ "@@ )).@@ or@@ E@@ l@@ se@@ ("@@ Re@@ pl@@ e an@@ d s@@ core@@ ")) + (@@ Sh@@ ort@@ c@@ ut@@ : a@@ )@@ "; info.@@ re@@ ply@@ L@@ abe@@ l = (@@ java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (c@@ fg@@ .get@@ String@@ ("@@ change@@ ", null@@ , "@@ re@@ ply@@ Label@@ "@@ )).@@ or@@ E@@ l@@ se@@ ("@@ Re@@ ply@@ ")) + "@@ \@@ u@@ 2@@ "; info.@@ update@@ D@@ el@@ a@@ y = ((@@ int@@ ) (@@ com.google.gerrit.server.@@ api.@@ config.@@ Config@@ Util@@ .get@@ Time@@ Un@@ it@@ (c@@ fg@@ , "@@ change@@ ", 3@@ 0@@ 0, java.util.concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ))); info.@@ submit@@ Wh@@ o@@ le@@ To@@ p@@ i@@ c = git.@@ changes@@ To@@ pic@@ Enabled(@@ cfg@@ ); return info@@ ; }
private com.google.gerrit.extensions.common.@@ Gerrit@@ Info get@@ Gerrit@@ Info@@ (@@ org.eclipse.jgit.lib.@@ Config cfg@@ , com.google.gerrit.server.@@ config.@@ rest@@ ore@@ Project@@ Config all@@ Project@@ s@@ Name, com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name) { com.google.gerrit.extensions.common.@@ Gerrit@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Gerrit@@ Info@@ (); info.@@ all@@ Project@@ s = all@@ User@@ s@@ Name@@ .get@@ (); info.@@ all@@ User@@ s = all@@ User@@ s@@ Name@@ .get@@ (); info.@@ rep@@ ort@@ Bu@@ g@@ Ur@@ l = cfg@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ rep@@ ort@@ Bu@@ g@@ Url@@ "); info.@@ rep@@ ort@@ Bu@@ g@@ T@@ ex@@ t = cfg@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ rep@@ ort@@ Bu@@ g@@ Text@@ "); info@@ .@@ do@@ c@@ Ur@@ l = get@@ Doc@@ Url@@ (c@@ fg@@ ); info@@ .@@ do@@ c@@ Se@@ ar@@ ch = do@@ c@@ Se@@ arch@@ er.@@ is@@ A@@ va@@ il@@ able@@ (); info.@@ edit@@ G@@ pg@@ Key@@ s = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (((@@ enable@@ Sig@@ ned@@ Push@@ ) && (c@@ fg@@ .get@@ Boolean@@ ("@@ gerrit@@ ", null@@ , "@@ edit@@ G@@ pg@@ Key@@ s", true@@ )@@ ))); info.@@ web@@ U@@ is = java.util.@@ En@@ um@@ Set.@@ n@@ one@@ Of(@@ com.google.gerrit.extensions.client.@@ Ui@@ Type@@ .@@ class@@ ); if (@@ gerrit@@ Option@@ s.@@ enable@@ G@@ w@@ t@@ Ui@@ ()) { info.@@ web@@ Ui@@ s.add(@@ Ui@@ Type.@@ G@@ W@@ T@@ ); } if (@@ gerrit@@ Option@@ s.@@ enable@@ P@@ ol@@ y@@ Gerrit@@ ()) { info.@@ web@@ Ui@@ s.add(@@ Ui@@ Type.@@ P@@ O@@ L@@ Y@@ G@@ ER@@ R@@ IT@@ ); } return info@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Server@@ Info apply(@@ com.google.gerrit.server.@@ api.@@ config.@@ Config@@ Resource rsrc@@ ) throw@@ s java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception { com.google.gerrit.extensions.common.@@ Server@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Server@@ Info@@ (); info.@@ account@@ s = get@@ Account@@ s@@ Info@@ (account@@ Vi@@ si@@ b@@ ili@@ ty@@ Provider@@ ); info.@@ a@@ ut@@ h = get@@ Auth@@ Info@@ (@@ auth@@ Config@@ , re@@ al@@ m@@ ); info.@@ change = get@@ Change@@ Info@@ (@@ config@@ ); info@@ .@@ do@@ w@@ n@@ lo@@ ad = get@@ Down@@ load@@ Info@@ (@@ do@@ w@@ n@@ load@@ S@@ che@@ m@@ es@@ , do@@ w@@ n@@ load@@ Command@@ s, c@@ l@@ one@@ Command@@ s, arch@@ ive@@ Format@@ s); info@@ .g@@ erri@@ t = get@@ Gerrit@@ Info@@ (@@ config@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name); info.@@ note@@ Db@@ Enable@@ d = com.google.gerrit.server.@@ config.@@ Get@@ Server@@ Info.@@ to@@ Boolean@@ (@@ is@@ NoteDb@@ Enable@@ d@@ ()); info.@@ p@@ lu@@ g@@ in = get@@ Plugin@@ Info@@ (); if (@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ sit@@ e@@ Path@@ s.@@ sit@@ e@@ _@@ th@@ e@@ me@@ )) { info@@ .@@ default@@ Th@@ em@@ e = "@@ static@@ /@@ " + (@@ S@@ ite@@ Path@@ s.@@ HE@@ M@@ E_@@ F@@ IL@@ EN@@ AM@@ E@@ ); } info.@@ ssh@@ d = get@@ Ssh@@ d@@ Info@@ (@@ config@@ ); info.@@ su@@ gg@@ est = get@@ Su@@ ggest@@ Info@@ (@@ config@@ ); java.util.Map<java.lang.String, java.lang.String> url@@ A@@ li@@ ase@@ s = get@@ Url@@ A@@ li@@ as@@ es@@ Info@@ (@@ config@@ ); info.@@ url@@ A@@ li@@ ase@@ s = (!(@@ url@@ A@@ li@@ as@@ es.@@ isEmpty())) ? url@@ A@@ li@@ ase@@ s : null@@ ; info.@@ user = get@@ User@@ Info@@ (@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name); info.@@ re@@ ce@@ i@@ v@@ e = get@@ Receive@@ Info@@ (); return info@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public void check@@ () throw@@ s com.google.gerrit.server.@@ Start@@ up@@ Exception { java.lang.String in@@ vali@@ d = cfg@@ .get@@ Sub@@ s@@ ection@@ s("@@ group@@ s@@ ").@@ st@@ ream@@ ().@@ filter@@ (( sub@@ ) -@@ > com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ sub@@ ); com.google.gerrit.server.account.@@ Group@@ Back@@ en@@ d group@@ Back@@ en@@ d = un@@ i@@ ver@@ s@@ al@@ Group@@ Back@@ en@@ d.@@ back@@ en@@ d(@@ u@@ u@@ id@@ ); return (@@ group@@ Back@@ en@@ d == null@@ ) || ((@@ group@@ Back@@ end@@ .get(@@ u@@ id@@ )) == null@@ ); }
@@@ java.lang.@@ De@@ pre@@ cate@@ d @org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ query@@ ", ali@@ ase@@ s = { "@@ -@@ q@@ " }@@ , us@@ ag@@ e = to in@@ sp@@ ec@@ t (@@ pre@@ c@@ ated@@ :@@ /@@ met@@ a@@ -@@ > ") void add@@ Group@@ De@@ pre@@ c@@ ated@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { add@@ Group@@ (@@ u@@ id@@ ); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { try { com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Member@@ s.@@ Input inpu@@ t = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); input.@@ name = new@@ Group@@ Name@@ ; put@@ Name.@@ apply(@@ rsrc@@ , input@@ ); } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw di@@ e@@ (@@ e); } }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > get@@ Group@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > account@@ Group@@ s = db.account@@ Group@@ s().@@ by@@ UUID@@ (@@ group@@ U@@ u@@ id@@ ).to@@ List(); if ((@@ account@@ Group@@ s.@@ size@@ ()) == 1@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ Group@@ s@@ )); } else if (account@@ Group@@ s.@@ isEmpty()) { return java.util.@@ Optional@@ .@@ empty@@ (); } else { throw new com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ (("@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ : " + count@@ UU@@ I@@ D group@@ U@@ u@@ id@@ )); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.@@ serv@@ er@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.@@ server@@ .@@ rest@@ i@@ re@@ f parse@@ File@@ Resource parse@@ (@@ com.google.gerrit.@@ serv@@ er@@ .@@ rest@@ ap@@ i@@ .@@ project.@@ Branch@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return ap@@ i@@ .@@ toString@@ (); }
@org.junit.Test public void read@@ Plugin@@ Config@@ Group@@ Ref@@ eren@@ ce@@ Not@@ In@@ Group@@ s@@ File@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .group@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ("@@ ("@@ Ser@@ ve@@ lo@@ per@@ a@@ t = " + (@@ st@@ a@@ ff@@ .@@ to@@ Config@@ Value@@ ())@@ )).@@ create@@ (); update@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ Validation@@ Error@@ ()).@@ hasSize@@ (1); assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (c@@ fg@@ .get@@ Validation@@ Error@@ s@@ ()@@ ).get@@ Message@@ ()).@@ isEqualTo@@ ((@@ (("@@ g@@ roup ac@@ count " + (@@ st@@ a@@ .getName@@ ())) + "@@ : not in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAM@@ E@@ ))); }
@org.junit.Test public void edit@@ Config@@ M@@ is@@ s@@ ing@@ Group@@ Table@@ E@@ n@@ try@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit re@@ v = tr@@ .@@ commit@@ ().@@ add@@ ("@@ group@@ s", com.google.gerrit.server.git.@@ Project@@ Config@@ Test@@ .group@@ (@@ de@@ ve@@ lo@@ per@@ s@@ )).@@ add@@ ("@@ project.@@ config@@ ", ("@@ ( ex@@ clu@@ si@@ ve@@ Group@@ Permission@@ s = rea@@ d sub@@ m@@ it sub@@ m@@ it = ac@@ count P@@ e@@ o@@ pl@@ e Wh@@ o C@@ an Sub@@ m@@ it ") + " up@@ lo@@ ad = ac@@ count@@ De@@ ve@@ lo@@ per@@ s@@ ec@@ tion = ac@@ count@@ De@@ ve@@ lo@@ per@@ t@@ e.@@ user@@ (@@ rev@@ ); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = read@@ (@@ rev@@ ); com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion = cfg@@ .get@@ Access@@ Section@@ ("@@ refs/heads/@@ *@@ "); com.google.gerrit.common.data.@@ Per@@ mis@@ sion sub@@ m@@ it = s@@ ection@@ .get@@ Permission@@ (@@ Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ ); sub@@ m@@ it.@@ add@@ (@@ new com.google.gerrit.common.data.@@ Permission@@ Rule@@ (c@@ fg@@ Rule@@ (c@@ fg@@ ); res@@ ol@@ ve@@ (@@ st@@ a@@ ff@@ ))); re@@ v = commit@@ (c@@ fg@@ ); assert@@ Th@@ at(@@ text@@ (@@ rev@@ , "@@ project.@@ config@@ "@@ )).@@ isEqualTo(@@ ("@@ refs/heads/@@ *@@ "); ex@@ clu@@ si@@ ve@@ Group@@ Permission@@ s = rea@@ d sub@@ m@@ it + sub@@ m@@ it = ac@@ count@@ P@@ e@@ o@@ pl@@ e Wh@@ o C@@ an Submit@@ \n@@ ") + " = ac@@ count@@ St@@ af@@ ad = ac@@ count@@ De@@ ve@@ lo@@ ad = ac@@ count@@ De@@ ve@@ lo@@ per@@ De@@ ve@@ lo@@ per@@ s@@ "); per@@ s = ac@@ tive@@ .get@@ De@@ ve@@ lo@@ per@@ De@@ ve@@ lo@@ per@@ s@@ ec@@ tion = new java.util.ArrayList<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ >@@ (@@ rev@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.@@ serv@@ er@@ s.@@ Access@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Create@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ B@@ ran@@ ch \"@@ " + (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ )) + "@@ \@@ " al@@ read@@ y ex@@ ist@@ s@@ ")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.@@ api.@@ Rest@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ ref@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); if (!(@@ query@@ Provider@@ .get().@@ set@@ Li@@ mit@@ (1@@ ).@@ by@@ Branch@@ Open@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ Change " + (rsrc@@ .get@@ Branch@@ Key@@ ())) + " h@@ a@@ s op@@ en change@@ s delete@@ Ref@@ (rsrc@@ ).@@ ref@@ (rsrc@@ .getRef@@ ()).@@ pre@@ fix@@ (@@ server@@ .@@ rest@@ i@@ ap@@ i@@ .@@ project.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) { return group@@ Control@@ Factory.@@ rest@@ (); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "@@ -@@ o@@ ", us@@ ag@@ e = "@@ Out@@ pu@@ t o@@ ption@@ s@@ ") public void add@@ Option@@ (@@ com.google.gerrit.extensions.client.@@ List@@ Group@@ s@@ Op@@ tion o@@ ) { o@@ ption@@ s.add(@@ o@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ query@@ 2@@ ", ali@@ ase@@ s = { "@@ -@@ q@@ 2@@ " }@@ , us@@ ag@@ e = "@@ quer@@ y public void set@@ Quer@@ y(@@ java.lang.String query@@ ) { this@@ .@@ quer@@ y = query@@ ; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if ((@@ in@@ herit@@ ed@@ ) && (!(@@ r@@ sr@@ c.@@ is@@ Project@@ Default@@ ()))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ can@@ not f@@ la@@ g c@@ an on@@ l@@ y b@@ e use@@ d w@@ it@@ h default d@@ "); } if (r@@ sr@@ c.@@ is@@ Project@@ Default@@ ()) { try { r@@ sr@@ c = default@@ Of@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .getUser@@ ()); } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ e.get@@ Message()); } } return server@@ .@@ rest@@ i@@ ap@@ i@@ .@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ parse@@ (rsrc@@ .getProject@@ ().get@@ Project@@ (), rsrc@@ .getRef@@ Name@@ ().@@ substring@@ (@@ server@@ .@@ rest@@ ore@@ (@@ project.@@ RE@@ F@@ S_@@ D@@ A@@ S@@ H@@ B@@ O@@ AR@@ D@@ S@@ .@@ length@@ ()), rsrc@@ .get@@ Path@@ (), rsrc@@ .get@@ Config@@ (), rsrc@@ .getProject@@ State@@ ().get@@ Name@@ (), true@@ ); }
private com.google.gerrit.server.@@ Current@@ User rest@@ ore@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.String id = project@@ State@@ .getProject@@ ().get@@ Lo@@ cal@@ Default@@ D@@ ashbo@@ ard@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ )) { id = project@@ State@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); } if (@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ rest@@ ore@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ State@@ (project@@ , user@@ , id@@ ); } else if (!(@@ in@@ herit@@ ed@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ s : project@@ State.@@ t@@ ree@@ ()) { id = ps@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); if (@@ com.google.gerrit.server.@@ Current@@ User user@@ ) { return rest@@ ore@@ .@@ rest@@ ore@@ (project@@ State@@ , user@@ , id@@ ); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ State@@ (project@@ , user@@ , id@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
private com.google.gerrit.server.@@ Current@@ User rest@@ ore@@ .@@ rest@@ Get@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.List<java.lang.String> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ li@@ mit@@ (@@ 2@@ ).@@ s@@ pli@@ t@@ (id@@ )); java.lang.String re@@ f = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ .get(@@ 0@@ )); java.lang.String pat@@ h = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ .get(@@ 1@@ )); return d@@ ashbo@@ ard@@ s.@@ parse@@ (@@ new com.google.gerrit.server.@@ api.@@ project.@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (((@@ re@@ f + '@@ :@@ '@@ ) + path@@ ))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.change.@@ R@@ o@@ bot@@ Comment@@ Resource@@ >> view@@ s() { return view@@ s; }
@org.junit.Test public void by@@ Owner@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info owner@@ Group = create@@ Group@@ (@@ name@@ ("@@ owner@@ -@@ account@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = create@@ Group@@ With@@ Owner@@ (@@ name@@ ("@@ group@@ "), owner@@ Group@@ ); create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ ")); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ group@@ .@@ id@@ ))); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ owner@@ Group@@ )), group@@ , owner@@ Group@@ ); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ owner@@ Group.@@ name@@ )), group@@ ); assert@@ Query@@ (("@@ owner@@ :@@ " + (@@ owner@@ Group@@ (@@ owner@@ Group.@@ name@@ )), group@@ ); }
@java.lang.Override public com.google.gerrit.server.@@ api.@@ change.@@ R@@ o@@ bot@@ Comment@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String u@@ id = id@@ .get@@ (); com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = rev@@ .get@@ Notes@@ (); for (@@ com.google.gerrit.reviewdb.client.@@ R@@ o@@ bot@@ Comm@@ ent c : comment@@ s@@ Util.@@ ro@@ bot@@ Comment@@ By@@ PatchSet@@ (@@ notes@@ , rev@@ .get@@ PatchSet@@ ().get@@ Id@@ ())) { if (@@ u@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ id@@ )) { return new com.google.gerrit.@@ server@@ .@@ rest@@ i@@ change.@@ R@@ o@@ bot@@ Comment@@ Resource@@ (@@ rev@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@org.junit.Test public void by@@ Name@@ () throw@@ s java.lang.Exception { assert@@ Query@@ ("@@ name@@ :@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); Group@@ Info g@@ roup = create@@ Group@@ (@@ name@@ ("@@ Group@@ ")); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ .@@ name@@ )), group@@ ); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ .@@ name.@@ to@@ L@@ ow@@ er@@ Case@@ (@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ ))); Group@@ Info group@@ With@@ H@@ yp@@ h@@ en = create@@ Group@@ (@@ name@@ ("@@ account@@ -@@ w@@ ith@@ -@@ h@@ yp@@ h@@ en@@ ", "@@ )@@ ))); assert@@ Query@@ (("@@ name@@ :@@ " + (@@ group@@ name@@ With@@ H@@ yp@@ h@@ en@@ .@@ name@@ With@@ H@@ yp@@ h@@ en@@ .@@ name@@ With@@ H@@ yp@@ h@@ en@@ ); }
@org.junit.Test public void by@@ Default@@ Fiel@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ (@@ name@@ ("@@ foo@@ -@@ account@@ "@@ )@@ ", group@@ 3@@ ); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 3 = create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 3@@ "), ("@@ group@@ 3@@ "), ("@@ a@@ t contain@@ s fo@@ o an@@ d th@@ e group@@ 2@@ : " + (@@ group@@ 2.@@ id@@ ))); assert@@ Query@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); assert@@ Query@@ ("@@ foo@@ ", group@@ 1, group@@ 3@@ ); assert@@ Quer@@ y(@@ group@@ 2, group@@ 2, group@@ 3@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.@@ serv@@ er@@ .get().@@ rest@@ i@@ ap@@ i@@ .@@ change.@@ File@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String pat@@ h = rsrc@@ .get@@ Patch@@ Key@@ ().get@@ (); if (@@ Patch@@ .@@ CO@@ M@@ M@@ IT@@ _M@@ S@@ G@@ .equals(@@ path@@ )) { java.lang.String ms@@ g = get@@ Message@@ (rsrc@@ .get@@ Revision@@ ().get@@ Change@@ Resource@@ ().get@@ Notes@@ ()); return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create@@ (@@ msg@@ ).set@@ Content@@ Type@@ (@@ File@@ Content@@ Util.@@ T@@ E@@ X@@ T_@@ X@@ _@@ G@@ ER@@ R@@ I@@ T_@@ CO@@ M@@ M@@ IT@@ _M@@ ES@@ S@@ A@@ G@@ E@@ ).@@ base@@ 6@@ 4@@ (); } else if (@@ Patch@@ .@@ M@@ ER@@ G@@ E_@@ LI@@ ST@@ .equals(@@ path@@ )) { byte@@ [] merge@@ Lis@@ t = get@@ Merge@@ List@@ (rsrc@@ .get@@ Revision@@ ().get@@ Change@@ Resource@@ ().get@@ Notes@@ ()); return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create@@ (@@ merge@@ List@@ ).set@@ Content@@ Type@@ (@@ File@@ Content@@ Util.@@ T@@ E@@ X@@ T_@@ X@@ _@@ G@@ ER@@ R@@ IT@@ _M@@ ER@@ G@@ E_@@ LI@@ ST@@ ).@@ base@@ 6@@ 4@@ (); } return file@@ Content@@ Util@@ .get@@ Content@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .get@@ Revision@@ ().get@@ ()), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (rsrc@@ .get@@ Revision@@ ().get@@ PatchSet@@ ().get@@ ()), path@@ , parent@@ ); }
@org.junit.Test public void fix@@ up@@ Commit@@ Po@@ st@@ Dat@@ es@@ All@@ Au@@ dit@@ Event@@ s@@ Ev@@ en@@ I@@ f@@ Au@@ dit@@ Event@@ s@@ A@@ re@@ In@@ Th@@ e@@ F@@ ut@@ ure@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.util.@@ st@@ ream@@ .@@ In@@ t@@ Stream@@ .@@ r@@ ange@@ (@@ 0, 2@@ 0@@ )@@ .@@ for@@ E@@ ach@@ (( i@@ ) -@@ > com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.sql.@@ Tim@@ est@@ am@@ p f@@ ut@@ ur@@ e = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.@@ test@@ ing.@@ Test@@ Time@@ Util.@@ re@@ set@@ With@@ C@@ lock@@ St@@ e@@ p@@ (1@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ S@@ EC@@ ON@@ D@@ S@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ y@@ "), by@@ Id(@@ g@@ , "@@ z@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , f@@ ut@@ ure@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ b@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count = count@@ .get(@@ 1@@ ), ac@@ (@@ log@@ .get(@@ 1@@ ), ac@@ count <@@ com.google.gerrit.server.account.@@ Group@@ Cache@@ .get(@@ id@@ ).get@@ Name@@ (), 2@@ )); assert@@ Th@@ at(@@ log@@ .get(@@ count@@ ), ac@@ y@@ Group <@@ z@@ ip@@ > assert@@ Th@@ at(@@ st@@ ream@@ ().@@ map@@ (( c@@ ) -@@ > c.@@ commit@@ ter.@@ date@@ ).@@ collec@@ t(@@ java.util.@@ I@@ mmutable@@ List@@ ()@@ )).@@ nam@@ ed@@ ("@@ %@@ s", log@@ Or@@ der@@ ed@@ (); assert@@ Th@@ at(@@ com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()).@@ is@@ L@@ ess@@ (@@ an@@ ure@@ ); }
@org.junit.Test public void me@@ mber@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le b = Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ g@@ , 1@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, 8@@ , t@@ 2@@ ), add@@ And@@ Remo@@ ve@@ Member@@ (@@ g@@ , 2, 8@@ , t@@ 1, 9@@ , t@@ 3@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count@@ .get(@@ 1@@ ), ac@@ count@@ .get(@@ 1@@ ), account@@ s.@@ 2@@ @@@ server@@ -@@ id@@ 8 "@@ 8@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), ac@@ count@@ Account 1@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), ac@@ count@@ Account 2@@ @@@ server@@ -@@ id@@ 3@@ ), ac@@ count 2@@ @@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), ac@@ count@@ Account 2@@ @@@ server@@ -@@ id@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ 9@@ -@@ server@@ "); }
@org.junit.Test public void un@@ au@@ dit@@ ed@@ By@@ Id@@ Add@@ ed@@ At@@ En@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ y@@ "), by@@ Id(@@ g@@ , "@@ z@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ Commit@@ (@@ 3@@ ); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), ac@@ count <@@ a tag@@ \n@@ "); assert@@ Per@@ son@@ E@@ quals(@@ server@@ Ident@@ .get(), "@@ new@@ -@@ id@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 2@@ ), ac@@ count@@ , null@@ ); }
@org.junit.Test public void red@@ By@@ Id@@ Au@@ dit@@ s@@ A@@ re@@ I@@ g@@ no@@ re@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 4 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 5 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , t@@ 1@@ ), add@@ By@@ Id(@@ g@@ , "@@ x@@ 8@@ , t@@ 3@@ ), add@@ By@@ Id(@@ g@@ , "@@ x@@ ", 9@@ , t@@ 3@@ ), add@@ And@@ Remo@@ ve@@ And@@ Remo@@ ve@@ By@@ Id(@@ g@@ , "@@ x@@ ", 8@@ , t@@ 2, 9@@ , 5@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ e.@@ count@@ .get(@@ 1@@ ), ac@@ tive@@ Group@@ (@@ server@@ )); assert@@ Th@@ at(@@ log@@ .get(@@ 2@@ ), ac@@ e.@@ count@@ ) <@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User get@@ Current@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), ac@@ tive@@ Group@@ )); assert@@ Th@@ at(@@ server@@ -@@ id@@ "); }
@org.junit.Test public void un@@ au@@ dit@@ ed@@ Member@@ sh@@ i@@ ps@@ Add@@ ed@@ At@@ En@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ (@@ g@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ ), me@@ mber@@ (@@ g@@ 3@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count@@ .get(@@ 1@@ ), ac@@ count 1 <@@ 1@@ @@@ server@@ -@@ id@@ > id@@ 8 @@@ 8@@ -@@ id@@ "); assert@@ Server@@ (@@ log@@ .get(@@ 2@@ ), ac@@ count@@ 2@@ @@@ <@@ 2@@ >@@ >@@ >@@ \n@@ B@@ y(@@ server@@ -@@ id@@ 3@@ @@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ -@@ id@@ 3@@ @@@ <@@ com.google.gerrit.server.@@ Current@@ Commit@@ > id@@ 3@@ 3@@ 3@@ 3@@ 3@@ 3@@ 3@@ 3@@ 3@@ 3@@ @@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ -@@ id@@ 3@@ @@@ com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ (@@ g@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ Commit@@ (@@ 3@@ .get(@@ 0@@ ), ac@@ log@@ .get(@@ 0@@ ), ac@@ count <@@ 2@@ @@@ @@@ com.google.gerrit.common.@@ Null@@ able server@@ -@@ id@@ 3@@ @@@ a@@ >@@ \n@@ "); assert@@ Per@@ son@@ E@@ quals(@@ server@@
@org.junit.Test public void au@@ dit@@ s@@ At@@ S@@ ame@@ Tim@@ est@@ amp@@ B@@ ro@@ ken@@ By@@ User@@ And@@ Type@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ s = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); int user@@ 1 = 8@@ ; int user@@ 2 = 9@@ ; com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ ), me@@ mber@@ (@@ g@@ 3@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ Member@@ (@@ g@@ , 1, user@@ s@@ ), add@@ Member@@ (@@ g@@ , 2, user@@ s@@ 2, add@@ Member@@ (@@ g@@ , user@@ 3@@ , 1, t@@ s@@ )).@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ g@@ , "@@ g@@ z@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ ", user@@ 1, t@@ s@@ ), add@@ By@@ Id(@@ g@@ , "@@ y@@ ", 2, user@@ t@@ s@@ By@@ Id(@@ g@@ , user@@ 2, add@@ By@@ Id(@@ g@@ , "@@ user@@ 2@@ ", "@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 3@@ ); assert@@ Server@@ .get(@@ 0@@ ), count@@ .get(@@ log@@ .get(@@ 1@@ ), ("@@ Account ac@@ count 1@@ \n@@ " + (("@@ Account 1@@ @@@ a@@ 1 server@@ -@@ id@@ 3@@ 0@@ ), ac@@ tive@@ "@@ <@@ a h@@ id@@ 3@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), ("@@ Account ac@@ count " + count@@ :@@ \n@@ ") + " 1@@ @@@ <@@ a server@@ -@@ id@@ > id@@ ")); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), ac@@ tive@@ .get(@@ 2@@ ), ac@@ @@@ "); assert@@ Commit@@ (@@ server@@ , id@@ 3@@ ), is@@ Not@@ Null@@ (@@ server@@ , "@@ Commit@@ : 2@@ ", id@@ 3@@ ), ac@@ y@@ , "@@ Commit@@ (@@ server@@ , "@@ Commit@@ ter@@ "); }
@org.junit.Test public void by@@ Id@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); java.sql.@@ Tim@@ est@@ am@@ p t@@ 1 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 2 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); java.sql.@@ Tim@@ est@@ am@@ p t@@ 3 = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s(); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le b = Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ by@@ Id(@@ g@@ , "@@ x@@ "@@ )).@@ by@@ Id@@ Au@@ dit@@ (@@ add@@ By@@ Id(@@ g@@ , "@@ x@@ 8@@ , t@@ 2@@ ), add@@ And@@ Remo@@ ve@@ By@@ Id(@@ g@@ , "@@ y@@ 8@@ , t@@ 3@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count@@ .get(@@ 1@@ ), ac@@ count@@ .get(@@ 1@@ ), ac@@ count@@ .get(@@ 1@@ ), ac@@ count <@@ count@@ , com.google.gerrit.server.account.@@ server@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 2@@ ), ac@@ count@@ .get(@@ 2@@ ).get@@ Account@@ Group@@ ()); assert@@ Commit@@ (@@ ac@@ count@@ .get(@@ id@@ ).get@@ ).get@@ ).get@@ ()@@ ).get@@ ("@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), ac@@ count@@ , "@@ Group 2@@ "); }
@org.junit.Test public void me@@ mber@@ s@@ And@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ , g@@ , 1@@ ), me@@ mber@@ (@@ g@@ , 2@@ )).@@ by@@ Id(@@ by@@ Id(@@ g@@ , "@@ x@@ "), by@@ Id(@@ g@@ , "@@ y@@ "@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count@@ .get(@@ 1@@ ), ("@@ \n@@ " + ((@@ (("@@ \n@@ " + " Account 1@@ @@@ <@@ a h@@ id@@ >@@ \n@@ ") + "@@ )), server@@ -@@ id@@ > id@@ \n@@ ") + "@@ <@@ a h@@ id@@ > id@@ 2@@ @@@ >@@ \n@@ ") + "@@ <@@ x@@ >@@ \n@@ ") + "@@ <@@ a h@@ id@@ >@@ \n@@ ") + "@@ <@@ x@@ @@@ ex@@ amp@@ Group@@ >@@ \n@@ ") + " <@@ a group@@ 2@@ @@@ ex@@ amp@@ le.@@ com@@ \n@@ ") + " <@@ a group@@ 2@@ @@@ server@@ -@@ id@@ > ") + "@@ <@@ x@@ >@@ \n@@ ") + "@@ ))); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 2); assert@@ Server@@ Commit@@ (@@ log@@ .get(@@ 1@@ ), ("@@ , ("@@ Account ac@@ count " + ((@@ (("@@ \n@@ " + ((@@ (("@@ \n@@ " Account 1@@ @@@ <@@ a server@@ -@@ id@@ >@@ " + id@@ >@@ \n@@ ")
@org.junit.Test public void all@@ Group@@ Fiel@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); g.@@ set@@ Description@@ ("@@ Description@@ "); g.@@ set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ owner@@ ")); g.@@ set@@ Visible@@ To@@ All@@ (@@ true@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ bu@@ ild@@ (); re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Server@@ .get(@@ 0@@ ), ac@@ count@@ ); }
@org.junit.Test public void me@@ mber@@ Au@@ dit@@ L@@ e@@ g@@ ac@@ y@@ Remo@@ v@@ ed@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ me@@ mber@@ s(@@ me@@ mber@@ s, g@@ , 2@@ )).@@ me@@ mber@@ Au@@ dit@@ (@@ add@@ And@@ L@@ e@@ g@@ ac@@ y@@ Remo@@ ve@@ Member@@ (@@ g@@ , 1, 8@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()), add@@ Member@@ (@@ g@@ , 2, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ()@@ )).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (@@ 4@@ ); assert@@ Server@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count count count count count count count count 1@@ ), count@@ .get(@@ id@@ 1@@ ), account@@ s.@@ update@@ update@@ (@@ server@@ Ident@@ .get(), id@@ 1); assert@@ Th@@ at(@@ server@@ .get(@@ id@@ 2@@ ), account@@ Cache@@ .get(@@ id@@ 1@@ @@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ server@@ -@@ id@@ "); assert@@ Commit@@ (@@ log@@ .get(@@ 3@@ ), ac@@ count@@ Account 2@@ @@@ server@@ -@@ id@@ 3@@ @@@ server@@ \n@@ \n@@ "); }
@org.junit.Test public void min@@ i@@ m@@ al@@ Group@@ Fiel@@ d@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ Group g = new@@ Group@@ ("@@ a@@ "); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ B@@ und@@ le b = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Re@@ buil@@ der@@ Test.@@ buil@@ der@@ ()@@ .group@@ (@@ g@@ ).@@ bu@@ ild@@ (); re@@ buil@@ der.@@ re@@ buil@@ d(@@ repo@@ , b@@ , null@@ ); assert@@ M@@ ig@@ r@@ ated@@ C@@ le@@ an@@ l@@ y(@@ re@@ load@@ (@@ g@@ ), b@@ ); com.google.common.collect.Immutable@@ List<@@ com.google.gerrit.extensions.common.@@ Commit@@ Info> lo@@ g = log@@ (@@ g@@ ); assert@@ Th@@ at(@@ log@@ ).@@ hasSize@@ (1); assert@@ Commit@@ (@@ log@@ .get(@@ 0@@ ), ac@@ count@@ ); db.@@ S@@ ER@@ V@@ ER@@ _@@ NAM@@ E, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ db.@@ S@@ ER@@ _@@ E@@ M@@ A@@ IL@@ ); assert@@ Th@@ at(@@ log@@ Group@@ Nam@@ es@@ ()).@@ isEmpty@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { return file@@ Content@@ Util@@ .get@@ Content@@ (rsrc@@ .getProject@@ State@@ (), rsrc@@ .get@@ Path@@ (), null@@ ); }
@org.junit.Test public void by@@ Description@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 1@@ "), is a t@@ est ac@@ count@@ .@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ With@@ Description@@ (@@ name@@ ("@@ group@@ 2@@ "), T@@ ES@@ T G@@ RO@@ U@@ P@@ . create@@ Group@@ Description@@ (@@ name@@ ("@@ group@@ 3@@ "), project foo@@ .@@ "); assert@@ Query@@ ("@@ des@@ cription@@ :@@ test@@ ", group@@ 1, group@@ 2); assert@@ Query@@ ("@@ des@@ cription@@ :@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ "); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ G@@ erri@@ t o@@ per@@ at@@ or requ@@ i@@ re@@ s a valu@@ e assert@@ Query@@ ("@@ des@@ cription@@ :@@ \"@@ "); }
@org.junit.Test public void by@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { if ((@@ get@@ Schema@@ Version@@ ()) < 4@@ ) { assert@@ M@@ is@@ s@@ ing@@ Fiel@@ d(@@ Group@@ Fiel@@ d.@@ S@@ U@@ B@@ G@@ RO@@ U@@ P@@ ); assert@@ Fai@@ lin@@ g@@ Query@@ ("@@ sub@@ :@@ group@@ :@@ so@@ me@@ Group@@ Name@@ ", o@@ per@@ at@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count@@ in@@ de@@ x ver@@ sion ver@@ return@@ ; } com.google.gerrit.extensions.common.@@ Group@@ Info super@@ Parent@@ Group = create@@ Group@@ (@@ name@@ (@@ "@@ super@@ Group@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info parent@@ Group@@ Info = create@@ Group@@ (@@ name@@ ("@@ parent@@ Group@@ 1@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info parent@@ Group@@ 2 = create@@ Group@@ (@@ name@@ ("@@ parent@@ Group@@ 2@@ ")); com.google.gerrit.extensions.common.@@ Group@@ Info sub@@ Group = create@@ Group@@ (@@ name@@ ("@@ sub@@ Group@@ ")); g@@ Api@@ .group@@ s().@@ id@@ (@@ super@@ Parent@@ Group.@@ id@@ ).@@ add@@ Group@@ s(@@ parent@@ Group@@ 1@@ .@@ id@@ , parent@@ Group@@ 2.@@ id@@ ); g@@ Api@@ .group@@ s().@@ id(@@ parent@@ Group@@ 1@@ .@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ id@@ ); g@@ Api@@ .group@@ s().@@ id(@@ parent@@ Group@@ 2.@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ sub@@ id@@ ); assert@@ Query@@ (("@@ sub@@ group@@ :@@ " + (@@ sub@@ id@@ )), parent@@ Group@@ 1, parent@@ Group@@ 2); assert@@ Query@@ (("@@ group@@ :@@ " + (@@ parent@@ Group@@ 1@@ .@@ id@@ )), super@@ Parent@@ (@@ super@@ id@@ ).@@ add@@ Group@@ s(@@ sub@@ Group.@@ sub@@ Api@@ .group@@ s().@@ id(@@ g@@ .group@@ s().@@ id(@@ parent@@ Group@@ 1@@ .@@ id@@ ).@@ remove@@ Group@@ s(@@ sub@@ Group.@@ sub@@ Group.@@ sub@@ ject@@ ); assert@@ Query@@ (("@@ group@@ :@@ " + (@@ sub@@ Group.@@ id@@ )), super@@ Group@@ , parent@@ Group@@ 2); }
@org.junit.Test public void by@@ Member@@ () throw@@ s java.lang.Exception { if ((@@ get@@ Schema@@ Version@@ ()) < 4@@ ) { assert@@ M@@ is@@ s@@ ing@@ Fiel@@ d(@@ Group@@ Fiel@@ d.@@ M@@ E@@ B@@ ER@@ ); assert@@ Fai@@ lin@@ g@@ Query@@ ("@@ me@@ mber@@ :@@ so@@ me@@ Name@@ ", o@@ per@@ at@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count@@ "); in@@ de@@ x ver@@ sion return@@ ; } com.google.gerrit.extensions.common.@@ Account@@ Info user@@ 1 = create@@ Account@@ ("@@ user@@ 1@@ ", "@@ User@@ 1@@ ", "@@ user@@ 1@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.extensions.common.@@ Account@@ Info user@@ 2 = create@@ Account@@ ("@@ user@@ 2@@ ", "@@ User@@ 2@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ (@@ name@@ ("@@ group@@ 1@@ "), user@@ 1); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ (@@ name@@ ("@@ group@@ 2@@ "), user@@ 2@@ "), user@@ 2); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 3 = create@@ Group@@ (@@ name@@ ("@@ group@@ 3@@ "), user@@ 1); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ name@@ )), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ email@@ )), group@@ 3@@ ); g@@ Api@@ .group@@ s().@@ id(@@ group@@ 3@@ ); assert@@ Query@@ (("@@ id@@ 3@@ .@@ remove@@ Member@@ s(@@ user@@ 1@@ .@@ user@@ name); g@@ Api@@ .group@@ s().@@ id(@@ group@@ 2.@@ id@@ ).@@ add@@ Member@@ s(@@ user@@ 1@@ .@@ user@@ name); assert@@ Query@@ (("@@ me@@ mber@@ :@@ " + (user@@ 1@@ .@@ name@@ )), group@@ 1, group@@ 2); } }
@org.junit.Test public void by@@ In@@ name@@ () throw@@ s java.lang.Exception { java.lang.String name@@ Par@@ t = get@@ S@@ an@@ iti@@ zed@@ Met@@ ho@@ d@@ Name@@ (); name@@ Par@@ t = com.google.common.base.@@ Char@@ Match@@ er.@@ is@@ (@@ '@@ _@@ '@@ ).@@ remove@@ From@@ (@@ name@@ P@@ art@@ ); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 1 = create@@ Group@@ ((@@ account@@ -@@ "@@ )).@@ name@@ P@@ art@@ )); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ 2 = create@@ Group@@ ((@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (id@@ s@@ )@@ )), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ :@@ " + (@@ name@@ P@@ art@@ )@@ )), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ :@@ " + (@@ name@@ P@@ art@@ ), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ :@@ " + (@@ name@@ P@@ art@@ ), group@@ 1, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ :@@ " + (@@ name@@ Par@@ t.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )), group@@ 2, group@@ 3@@ ); assert@@ Query@@ (("@@ in@@ name@@ :@@ " + (@@ name@@ Par@@ t.@@ to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )), group@@ 1, group@@ 3@@ ); }
@org.junit.Test public void by@@ I@@ s@@ Visible@@ To@@ All@@ () throw@@ s java.lang.Exception { assert@@ Query@@ ("@@ is@@ :@@ vi@@ sible@@ to@@ all@@ "); com.google.gerrit.extensions.common.@@ Group@@ Info group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ Al@@ l = create@@ Group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ All(@@ name@@ ("@@ account@@ -@@ is@@ -@@ is@@ -@@ vi@@ sible@@ -@@ to@@ -@@ all@@ "@@ )); create@@ Group@@ (@@ name@@ ("@@ group@@ ")); assert@@ Query@@ ("@@ is@@ :@@ vi@@ sible@@ to@@ all@@ ", group@@ Th@@ at@@ I@@ s@@ Visible@@ To@@ All@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ note@@ Db@@ .group@@ s.@@ write@@ ", valu@@ e = "@@ true@@ ") public void delete@@ Group@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ AT@@ E, com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ not allow@@ ed to de@@ le@@ te branch@@ .@@ "); branch@@ (@@ new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ())@@ )).@@ delete@@ (); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ B@@ ran@@ ch " + (rsrc@@ .getRef@@ ())) + " al@@ read@@ y ex@@ ist@@ s@@ ")); }
com.google.gerrit.server.@@ api.@@ changes.@@ Comment@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ Comment@@ Resource c@@ );
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (@@ com.google.gerrit.@@ serv@@ i@@ ap@@ i@@ De@@ bug@@ ("@@ F@@ ail@@ ur@@ e to a change d@@ if@@ f@@ er@@ ent b@@ ran@@ ch per@@ mission@@ Back@@ en@@ d.@@ user@@ (rsrc@@ .getUser@@ ()).@@ ref@@ (change@@ .get@@ Dest@@ ()).@@ test@@ Con@@ d(@@ com.google.gerrit.server.git.@@ Visible@@ ((((@@ rsrc@@ .getChange@@ ().get@@ Status@@ ()) + " f@@ change ") + (@@ com.google.gerrit.reviewdb.client.Change.@@ Id change@@ .getChange@@ ().get@@ Id(), rsrc@@ .getChange@@ ().get@@ Id(), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ change.@@ RE@@ AT@@ E_@@ CHANG@@ E@@ ), rsrc@@ .get@@ PatchSet@@ ().get@@ ()); return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ Ad@@ min@@ g Change@@ ").@@ set@@ T@@ it@@ le@@ ("@@ Mo@@ v@@ e to a change d@@ if@@ f@@ er@@ ent b@@ ran@@ ch an@@ d(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (rsrc@@ .getUser@@ ()).@@ ref@@ (change@@ .get@@ Dest@@ ()).@@ test@@ Con@@ d(@@ com.google.gerrit.server.@@ api.@@ change.@@ C@@ C@@ RE@@ AT@@ E_@@ CHANG@@ E@@ ), sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ Provider@@ ).@@ test@@ Con@@ d(@@ com.google.gerrit.server.git.@@ Label@@ Validator@@ .@@ rest@@ ore@@ (@@ false@@ )); }
@java.lang.Override public java.lang.String apply(@@ java.lang.String input@@ ) { return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ rsrc@@ .getProject@@ State@@ ().get@@ Project@@ ().get@@ Description@@ ()); }
private com.google.gerrit.client.@@ account.@@ Project@@ Resource check@@ Ex@@ ist@@ s() throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if ((@@ project@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ name); } return project@@ ; }
com.google.gerrit.server.@@ api.@@ projects.@@ Project@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ );
@java.lang.Override public void on@@ Pre@@ Merge@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , com.google.gerrit.server.git.CodeReview@@ Commit commit@@ , com.google.gerrit.server.project.Project@@ State dest@@ Project@@ , com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key dest@@ Branch@@ , com.google.gerrit.reviewdb.client.PatchSet.@@ Id patchSet@@ Id, com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User call@@ er@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception { if ((@@ !(@@ all@@ User@@ s@@ Name.@@ equals(@@ dest@@ Project@@ .getName@@ Key@@ ()))) || (!(@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Ref@@ (@@ dest@@ Branch@@ .get@@ ())@@ ))) { return@@ ; } throw new com.google.gerrit.server.git.@@ validators.@@ Merge@@ Validation@@ Exception("@@ Co@@ ul@@ d not allow@@ ed }
public static Account@@ Group.@@ UU@@ I@@ D ma@@ k@@ e@@ (java.lang.String group@@ Name, org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent cre@@ ator@@ ) { java.@@ s@@ ecu@@ ri@@ ty.@@ Message@@ D@@ ig@@ est m@@ d = org.eclipse.jgit.lib.@@ Con@@ stant@@ s@@ .@@ new@@ Message@@ D@@ ig@@ est@@ (); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ ((@@ ("@@ group@@ Name) + "@@ \n@@ "@@ ))); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ ((@@ ("@@ ("@@ * " + (@@ cre@@ ator@@ .@@ to@@ String@@ ())) + "@@ \n@@ "@@ ))); m@@ d.@@ update@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ en@@ code@@ (@@ java.lang.String.@@ value@@ Of@@ (java.lang.@@ M@@ ath@@ .@@ ra@@ n@@ do@@ m@@ ()))); return new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ org.eclipse.jgit.lib.Object@@ Id.@@ from@@ R@@ a@@ w@@ (m@@ d.@@ di@@ g@@ est@@ name@@ ()); }
@org.junit.Test public void cre@@ ated@@ On@@ I@@ s@@ Po@@ p@@ ul@@ ated@@ For@@ Group@@ s@@ Cre@@ ated@@ B@@ e@@ for@@ e@@ Au@@ dit@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = create@@ Group@@ ("@@ g@@ roup account@@ s@@ che@@ m@@ a ig@@ r@@ ation set@@ Cre@@ ated@@ On@@ To@@ Ver@@ y@@ O@@ ld@@ Tim@@ est@@ amp@@ (@@ group@@ Id); remove@@ Au@@ dit@@ Ent@@ ri@@ es@@ For@@ (@@ group@@ Id); schema@@ 1@@ .@@ m@@ ig@@ r@@ ate@@ Data@@ (db, new com.google.gerrit.@@ test@@ ing.@@ Test@@ Update@@ I@@ ()); java.sql.@@ Tim@@ est@@ am@@ p cre@@ ated@@ O@@ n = get@@ Cre@@ ated@@ On@@ (@@ group@@ Id); assert@@ Th@@ at(@@ cre@@ ated@@ On@@ ).@@ isEqualTo(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ au@@ dit@@ Cre@@ ation@@ In@@ stant@@ T@@ s()); }
private com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info create@@ Branch@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , com.google.gerrit.server.project.Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s) { com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info in@@ fo = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); info.@@ re@@ f = ref@@ .getName@@ (); info.@@ re@@ vi@@ sion = ((@@ ref@@ .get@@ Object@@ Id@@ ()) != null@@ ) ? ref@@ .get@@ Object@@ Id@@ ().@@ name@@ () : null@@ ; info.@@ can@@ De@@ le@@ te = ((@@ !(@@ t@@ arget@@ s.@@ contains(@@ ref@@ .getName@@ ()))) && (@@ per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ .@@ DE@@ LE@@ T@@ E@@ ))) ? true : null@@ ; com.google.gerrit.@@ server@@ .@@ rest@@ ore@@ In@@ herit@@ ed@@ Branch@@ Resource r@@ sr@@ c = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (project@@ , user@@ , ref@@ ); for (@@ com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion d : ui@@ Action@@ s.@@ from@@ (@@ branch@@ View@@ s, rsrc@@ )) { if ((@@ info.@@ action@@ s) == null@@ ) { info.@@ action@@ s = new java.util.@@ Tree@@ Map@@ (); } info.@@ action@@ s.@@ put(@@ d@@ .getId@@ (), new com.google.gerrit.extensions.common.@@ Action@@ Info@@ (@@ d@@ )); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> link@@ s = web@@ Link@@ s.get@@ Branch@@ Link@@ s(@@ project@@ State@@ (), ref@@ .getName@@ ()); info.@@ web@@ Link@@ s = (@@ link@@ s.@@ isEmpty()) ? null : link@@ s; } return info@@ ; }
com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info to@@ Branch@@ Info@@ (@@ com.google.gerrit.@@ serv@@ i@@ ap@@ i@@ d@@ ap@@ i@@ .@@ project.@@ Branch@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository d@@ b = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { org.eclipse.jgit.lib.@@ Re@@ f r = db.@@ ex@@ act@@ Ref@@ (rsrc@@ .getRef@@ ()); if (@@ r == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } return to@@ Branch@@ Info@@ (rsrc@@ , com.google.common.collect.Immutable@@ List.@@ of@@ (r@@ ))@@ .get(@@ 0); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> all@@ Branch@@ es(@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { java.util.List<@@ org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s; try (@@ org.eclipse.jgit.lib.Repository b = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { java.util.Collection<@@ org.eclipse.jgit.lib.@@ Ref@@ > head@@ s = db@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ values@@ (); ref@@ s = new java.util.Array@@ List@@ (((@@ head@@ s.@@ size@@ ()) + 3@@ )); refs.@@ add@@ All(@@ head@@ s); refs.@@ add@@ All@@ (db@@ .getRef@@ Dat@@ abase@@ ().@@ ex@@ act@@ Ref@@ (@@ Con@@ stant@@ s.@@ HE@@ AD@@ , Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ US@@ ER@@ S_@@ DE@@ F@@ A@@ U@@ L@@ T@@ ).@@ values@@ ()); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Git@@ Repository@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } return to@@ Branch@@ Info@@ (rsrc@@ , ref@@ s); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> apply(@@ serv@@ er@@ m@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return new com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ reg@@ ex@@ (@@ match@@ Reg@@ ex@@ ).@@ start@@ (@@ start@@ ).@@ li@@ mit@@ (@@ li@@ mit@@ ).@@ filter@@ (@@ all@@ Branch@@ es@@ (rsrc@@ )); }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> to@@ Branch@@ Info@@ (@@ com.google.gerrit.@@ serv@@ i@@ ap@@ i@@ .@@ Project@@ Resource rsrc@@ , java.util.List<@@ org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (1); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : ref@@ s) { if (ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ ()) { t@@ arget@@ s.add(@@ ref@@ .get@@ T@@ arget@@ ().get@@ Name()); } } com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (rsrc@@ .getName@@ Key@@ ()); java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> branch@@ es = new java.util.Array@@ List(@@ refs.@@ size()); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : ref@@ s) { if (ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ ()) { java.lang.String t@@ arg@@ e@@ t = ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ (); if (!(@@ per@@ m.@@ ref@@ (t@@ arget@@ ).@@ test@@ (@@ Ref@@ .@@ RE@@ AD@@ ))) { continue@@ ; } if (t@@ arg@@ e@@ t.@@ startsWith@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ )) { t@@ arg@@ e@@ t = t@@ arg@@ e@@ t.@@ substring@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ .@@ length@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info b = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); re@@ f = ref@@ .getName@@ (); b.@@ re@@ vi@@ sion = t@@ arget@@ ; branch@@ es.@@ add(@@ b@@ ); if (!(@@ Con@@ stant@@ s.@@ HE@@ AD@@ .equals(@@ ref@@ .getName@@ ()))) { b.@@ can@@ De@@ le@@ te = (@@ per@@ m.@@ ref@@ .getName@@ ()).@@ test@@ Or@@ F@@ alse@@ (@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ )) ? true : null@@ ; } continue@@ ; } if (@@ per@@ m.@@ ref@@ (ref@@ .getName@@ ()).@@ test@@ (@@ Permission@@ .@@ RE@@ AD@@ )) { branch@@ es.@@ add(@@ create@@ Branch@@ Info@@ (@@ per@@ m.@@ ref@@ .getName@@ (), rsrc@@ .getUser@@ (), t@@ arget@@ s@@ )); } } java.util.Collections.s@@ ort@@ (@@ branch@@ es@@ , new com.google.gerrit.server.project.@@ List@@ Branch@@ es.@@ Branch@@ Comp@@ ar@@ ator@@ ()); return branch@@ es@@ ; }
@java.lang.Override public Respon@@ se.@@ Ac@@ cep@@ ted apply(@@ com.google.gerrit.@@ serv@@ er@@ .get().@@ rest@@ ore@@ .@@ Project@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input input@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = resource@@ .getName@@ Key@@ (); com.google.gerrit.server.git.@@ Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ .@@ T@@ as@@ k t = new com.google.gerrit.server.git.@@ Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ (@@ com.google.common.@@ io.@@ By@@ te@@ Stream@@ s@@ .@@ null@@ Output@@ Stream@@ (), project@@ ").@@ be@@ gin@@ Sub@@ Task@@ (@@ " Multi@@ Pro@@ g@@ ress@@ M@@ on@@ it@@ or@@ .@@ UN@@ K@@ NO@@ W@@ N@@ ); com.google.gerrit.server.index.@@ change.@@ All@@ Changes@@ Index@@ er all@@ Changes@@ Index@@ er = all@@ Changes@@ Index@@ er@@ Provider@@ .get@@ (); all@@ Changes@@ Index@@ er.@@ set@@ Ver@@ bo@@ se@@ (@@ Null@@ Stream@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ ); @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <@@ java.lang.@@ Void@@ > ig@@ no@@ re@@ d = execu@@ tor@@ .@@ submit@@ (@@ all@@ Changes@@ Index@@ er.@@ re@@ index@@ Project@@ (@@ index@@ er, project, mp@@ er, t@@ , t@@ mp@@ )); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ accep@@ ted@@ ((@@ ("@@ C@@ all@@ ing " + project@@ ) + " for re@@ index@@ ing }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ ow@@ ned@@ -@@ by@@ ", us@@ ag@@ e = group@@ s ow@@ ne@@ d b@@ y th@@ e g@@ ive@@ n u@@ id = "@@ -@@ " }@@ , u@@ id public void set@@ Ow@@ ned@@ B@@ y(@@ java.lang.String ow@@ ned@@ By@@ ) { this@@ .@@ ow@@ ned@@ B@@ y = ow@@ ned@@ By@@ ; }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ account@@ ", ali@@ ase@@ s = { "@@ -@@ g@@ " }@@ , us@@ ag@@ e = "@@ to in@@ sp@@ ec@@ t public void add@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { group@@ s@@ To@@ In@@ sp@@ ec@@ t.@@ add(@@ id@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "@@ -@@ o@@ ", us@@ ag@@ e = "@@ Out@@ pu@@ t o@@ ption@@ s@@ ") void add@@ Option@@ (@@ com.google.gerrit.extensions.client.@@ List@@ Group@@ s@@ Op@@ tion o@@ ) { o@@ ption@@ s.add(@@ o@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ reg@@ ex@@ ", ali@@ ase@@ s = { "@@ -@@ r@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ RE@@ G@@ E@@ X@@ ", us@@ ag@@ e = "@@ count@@ ") public void set@@ Match@@ Reg@@ ex@@ (java.lang.String match@@ Reg@@ ex@@ ) { this@@ .@@ match@@ Reg@@ e@@ x = match@@ Reg@@ ex@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String t@@ a@@ g = com.google.gerrit.server.project.@@ Ref@@ Util.@@ n@@ or@@ ma@@ li@@ ze@@ Tag@@ (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ ); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ (t@@ ag@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); delete@@ Ref@@ Factory.create@@ (@@ resource@@ ).@@ ref@@ (t@@ ag@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
private static com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception get@@ Exception@@ For@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ator@@ (java.lang.String o@@ per@@ ator@@ Name) { return new com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s o@@ per@@ at@@ or is not sup@@ p@@ or@@ ted b@@ y ac@@ count@@ ing@@ ", index@@ Name@@ )); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ user@@ .getUser@@ Name@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ "); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ ExternalId@@ .@@ Key@@ .create@@ (@@ server@@ Ident@@ .get(), com.google.gerrit.server.account.@@ ExternalId@@ .@@ from@@ (@@ ExternalId@@ .@@ Key@@ .create@@ (@@ ExternalId@@ Key@@ ())); account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ .getUser@@ Name@@ ())); if (@@ ext@@ Id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id new@@ Ex@@ t@@ Id = com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ With@@ P@@ asswor@@ d(@@ ext@@ Id.@@ key@@ (), ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ email@@ (), new@@ P@@ asswor@@ d); ext@@ er@@ n@@ al@@ Id@@ s@@ Update.@@ create@@ ().@@ up@@ sert@@ (@@ new@@ Ex@@ t@@ Id); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d@@ ) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@java.lang.Override void read@@ From@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group.@@ Builder group@@ , org.eclipse.jgit.lib.@@ Config config@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalid@@ Exception { int id = config@@ .get@@ In@@ t(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config@@ E@@ n@@ try@@ .@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, super@@ .@@ key@@ Name, (@@ -@@ 1@@ )); if (@@ id < 0) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ac@@ e of th@@ e ac@@ count %s m@@ us@@ t not b@@ e g@@ ative@@ , fo@@ un@@ d group@@ U@@ u@@ id@@ .get(), id@@ .get(), group@@ .set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (id@@ )); } group@@ .set@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ (id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Project@@ Info apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if ((@@ re@@ cur@@ si@@ ve@@ ) || (r@@ sr@@ c.@@ is@@ Di@@ re@@ ct@@ Ch@@ ild@@ ())) { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Ch@@ ild@@ Project@@ ().get@@ ()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (rsrc@@ .get@@ Ch@@ ild@@ ().get@@ Name()); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> apply(@@ com.google.gerrit.@@ serv@@ er@@ .group@@ .@@ rest@@ i@@ .group@@ .@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = r@@ sr@@ c.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); return get@@ Di@@ re@@ ct@@ Sub@@ group@@ s(@@ group@@ , rsrc@@ .get@@ Control@@ ()); }
private java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> suggest@@ Account@@ s(@@ com.google.gerrit.server.@@ api.@@ change.@@ Su@@ ggest@@ Reviewer@@ s suggest@@ Reviewer@@ s) throw@@ s com.google.gwtorm.server.OrmException { try (@@ com.google.gerrit.@@ met@@ ri@@ c@@ s.@@ Tim@@ er@@ 0@@ .@@ Context ct@@ x = met@@ ri@@ c@@ s.@@ query@@ Account@@ s@@ L@@ at@@ en@@ c@@ y.@@ start@@ ()) { try { index.@@ Query@@ Result@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > result = query@@ Provider@@ .get().@@ set@@ User@@ Provi@@ ded@@ Li@@ mit@@ (((@@ suggest@@ Reviewer@@ s.get@@ Li@@ mit@@ ()) * (@@ com.google.gerrit.@@ server@@ .@@ restapi.@@ Reviewer@@ s@@ Util.@@ C@@ AN@@ D@@ AT@@ E_@@ LI@@ ST@@ _M@@ U@@ L@@ T@@ I@@ P@@ LI@@ ST@@ )@@ )).@@ quer@@ y(@@ com.google.gerrit.server.query.@@ account.@@ Account@@ Predi@@ c@@ at@@ es.@@ an@@ an@@ an@@ an@@ d(@@ (account@@ .getId@@ ().get@@ Reviewer@@ s@@ ()))); return result.@@ enti@@ ti@@ es@@ ().@@ st@@ ream@@ ().@@ map@@ (( a@@ ) -@@ > a@@ .getAccount@@ ().get@@ Id@@ ()).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); } catch (@@ com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception e) { return com.google.common.collect.Immutable@@ List.@@ of@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> group@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ api.@@ Add@@ Sub@@ group@@ s.@@ P@@ ut@@ Sub@@ g@@ roup create@@ (@@ com.google.gerrit.@@ serv@@ er@@ s.@@ rest@@ ut@@ Sub@@ mission@@ Info group@@ ) { return new com.google.gerrit.@@ server@@ .@@ Sub@@ mission@@ (@@ group@@ .get@@ Sub@@ group@@ s@@ Sub@@ group@@ (@@ add@@ Sub@@ group@@ s, id@@ .get()); }
@java.lang.Override public com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource parse@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ Add@@ res@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { com.google.gerrit.common.data.@@ Group@@ Resource resource@@ .@@ rest@@ ore@@ In@@ ternal@@ ().@@ parse@@ (@@ resource@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al pa@@ ren@@ t = resource@@ .@@ as@@ In@@ ternal@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c me@@ mb@@ er = group@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ).get@@ Group@@ (); if ((@@ resource@@ .get@@ Control@@ ().@@ can@@ Se@@ e@@ Group@@ ()) && (@@ com.google.gerrit.@@ server@@ .@@ rest@@ i@@ group@@ .@@ Sub@@ group@@ s@@ Collec@@ tion.@@ is@@ Sub@@ (@@ group@@ , me@@ mber@@ ))) { return new com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ i@@ ze@@ (@@ resource@@ , me@@ mber@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource@@ > list@@ () { return list@@ ; }
com.google.gerrit.server.@@ api.@@ changes.@@ Draft@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.extensions.api.changes.@@ Draft@@ Comment@@ Resource d);
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ match@@ ", ali@@ ase@@ s = { "@@ -@@ m@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ M@@ AT@@ CH@@ ", us@@ ag@@ e = "@@ CO@@ UN@@ T@@ " }@@ , sub@@ st@@ rin@@ g public void set@@ Match@@ Sub@@ string@@ (java.lang.String match@@ Sub@@ string@@ ) { this@@ .@@ match@@ Sub@@ st@@ rin@@ g = match@@ Sub@@ string@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ resource@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ No@@ t group@@ "); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ in@@ vali@@ d ar@@ e requ@@ i@@ red@@ "); } if ((@@ input.@@ vi@@ sible@@ To@@ All@@ ) == null@@ ) { input.@@ vi@@ sible@@ To@@ Al@@ l = false@@ ; } if ((@@ int@@ er@@ n@@ al@@ Group.@@ is@@ Visible@@ To@@ All@@ ()) != (in@@ pu@@ t.@@ vi@@ sible@@ To@@ All@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Visible@@ To@@ All@@ (in@@ pu@@ t.@@ vi@@ sible@@ To@@ All@@ ).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ Provider@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id@@ , group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Un@@ able %s not fo@@ un@@ d group@@ U@@ u@@ id@@ ", group@@ U@@ u@@ id@@ )); } com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info o@@ ption@@ s = new com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info@@ (); if (in@@ pu@@ t.@@ vi@@ sible@@ To@@ All@@ ) { o@@ ption@@ s.@@ vi@@ sible@@ To@@ Al@@ l = true@@ ; } return o@@ ption@@ s; }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.reviewdb.client.@@ P@@ roject project = resource@@ .getProject@@ State@@ ().get@@ Project@@ (); com.google.gerrit.reviewdb.client.Project.NameKey parent@@ Name = project@@ .getParent@@ (@@ all@@ Project@@ s@@ Name); return parent@@ Name@@ .get@@ () ? parent@@ Name@@ .get@@ () : "@@ "; }
@java.lang.Override public java.lang.O@@ bject apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Resource rsrc@@ , com.google.gerrit.server.project.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Delete@@ Input input@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc@@ .getName@@ Key@@ (); if (in@@ pu@@ t.@@ as@@ y@@ n@@ c@@ ) { return appl@@ y@@ Async@@ (project@@ , input@@ ); } return appl@@ y@@ Sy@@ n@@ c@@ (project@@ , input@@ ); }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (@@ com.google.gerrit.@@ serv@@ er@@ Res@@ tApi@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , ?@@ > rsrc@@ ) { return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ G@@ it G@@ it ").@@ set@@ T@@ it@@ le@@ ("@@ T@@ ri@@ gg@@ er@@ s th@@ e G@@ it G@@ ar@@ b@@ ag@@ e Collec@@ tion for this project@@ .@@ "); }
protected com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment configure@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ (@@ boolean au@@ to@@ V@@ er@@ if@@ y@@ ) throw@@ s java.lang.Exception { com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a@@ ; if (@@ au@@ to@@ V@@ er@@ if@@ y@@ ) { java.lang.String g = create@@ Group@@ (@@ group@@ ); com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Group@@ Ap@@ i = g@@ Api@@ .group@@ s().@@ id(@@ g@@ ); group@@ Api.@@ des@@ cription@@ ("@@ In@@ vali@@ d t@@ est count@@ "); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group c@@ a@@ Group = group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ group@@ Api.@@ d@@ et@@ ail@@ ().@@ id@@ )); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Re@@ f = new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (c@@ a@@ .get@@ Group@@ UUID@@ (), c@@ a@@ Group@@ .getName@@ ()); com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e r@@ ul@@ e = new com.google.gerrit.common.data.@@ Permission@@ Rule@@ (@@ group@@ Ref@@ ); rule@@ .set@@ Action@@ (@@ Permission@@ Rule@@ .@@ AL@@ LO@@ W@@ ); c@@ a = new com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ ("@@ c@@ la@@ -@@ test@@ "); c@@ a.@@ set@@ Au@@ to@@ V@@ er@@ if@@ y(@@ group@@ Ref@@ ); c@@ a.@@ set@@ Ac@@ cep@@ ted@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (r@@ ule@@ )); } else { c@@ a = new com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ ("@@ c@@ la@@ -@@ no@@ -@@ au@@ to@@ -@@ r@@ if@@ y@@ "); } c@@ a.@@ set@@ Description@@ ("@@ des@@ cription@@ "); a.@@ set@@ Ag@@ ree@@ ment@@ ("@@ ag@@ ree@@ ment@@ -@@ url@@ "); com.google.gerrit.server.git.@@ Project@@ Config cf@@ g = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ all@@ Project@@ s@@ ).get@@ Config@@ (); cf@@ g.@@ replace@@ (c@@ a@@ ); save@@ Project@@ Config@@ (@@ all@@ Project@@ s, cfg@@ ); return c@@ ; }
@java.lang.Override public com.google.gerrit.server.@@ api.@@ change.@@ File@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) { return new com.google.gerrit.server.@@ api.@@ change.@@ File@@ Resource@@ (@@ rev@@ , id@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { try { com.google.gerrit.extensions.api.@@ projects.@@ B@@ an@@ Commit@@ Input inpu@@ t = com.google.gerrit.extensions.api.@@ projects.@@ B@@ an@@ Commit@@ Input.@@ from@@ Commit@@ s(@@ com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ commit@@ s@@ To@@ B@@ an@@ Object@@ Id@@ :@@ get@@ Name@@ )); input.@@ re@@ as@@ on = re@@ as@@ on@@ ; com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ .@@ rest@@ ore@@ O@@ Auth@@ (); project.@@ B@@ an@@ Commit.@@ B@@ an@@ Result@@ Info = b@@ an@@ Commit.@@ appl@@ y@@ (@@ new com.google.gerrit.server.git.@@ Merge@@ Op@@ (@@ null@@ , user@@ ), input@@ ); p@@ r@@ int@@ Commit@@ s(@@ r@@ ned@@ , fo@@ l@@ low@@ ing commit@@ s w@@ er@@ e b@@ an@@ d p@@ r@@ int@@ Commit@@ s(@@ r.@@ al@@ read@@ y@@ B@@ an@@ ned@@ , fo@@ l@@ low@@ ing commit@@ s w@@ er@@ e b@@ an@@ d p@@ r@@ int@@ Commit@@ s(@@ r.@@ ig@@ no@@ red@@ , fo@@ l@@ low@@ ing id@@ s do not rep@@ res@@ ent commit@@ s an@@ d w@@ er@@ e ig@@ no@@ re@@ d "); } catch (@@ java.lang.Exception e) { throw di@@ e@@ (@@ e); } }
@java.lang.Override void read@@ From@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group.@@ Builder group@@ , org.eclipse.jgit.lib.@@ Config config@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.String owner@@ Group@@ U@@ u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config@@ E@@ n@@ try@@ .@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, null@@ , super@@ .@@ key@@ Name); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ owner@@ Group@@ U@@ u@@ id@@ )) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ c@@ an UU@@ I@@ D of th@@ e count@@ ", ac@@ count@@ .get@@ In@@ ternal@@ ())); } group@@ .set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ owner@@ Group@@ U@@ u@@ id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource project, Delete@@ Branch@@ es@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ inpu@@ t == null@@ ) || ((@@ input.@@ branch@@ es) == null@@ )) || (in@@ pu@@ t.@@ branch@@ es.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ branch@@ es m@@ us@@ t b@@ e sp@@ e@@ c@@ if@@ i@@ ed delete@@ "); } delete@@ Ref@@ Factory.create@@ (project@@ ).@@ ref@@ s(@@ input.@@ branch@@ es@@ ).@@ pre@@ fix@@ (@@ com.google.gerrit.@@ server@@ .@@ rest@@ i@@ ed@@ .@@ project.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Update@@ Exception, com.google.gwtorm.server.OrmException { if (((@@ in == null@@ ) || ((@@ in.@@ message@@ ) == null@@ )) || (in@@ .@@ messag@@ e.@@ tri@@ m@@ ().@@ isEmpty())) { return de@@ le@@ t@@ e.@@ appl@@ y@@ Im@@ pl@@ (@@ update@@ Factory@@ , rsrc@@ , null@@ ); } else if (((@@ in.@@ id@@ ) != null@@ ) && (!(@@ rsrc@@ .getId@@ ().equals(@@ in.@@ id@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ lin@@ e m@@ us@@ t m@@ atch URL@@ "); } else if (((@@ in.@@ line@@ ) != null@@ ) && ((@@ in.@@ line@@ ) < 0@@ )) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ un@@ m@@ us@@ t b@@ e >@@ = 0@@ "); } else if ((((@@ in.@@ line@@ ) != null@@ ) && ((@@ in.@@ r@@ ange@@ ) != null@@ )) && ((@@ in.@@ line@@ ) != (in@@ .@@ r@@ ange@@ .@@ end@@ Line@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ un@@ m@@ us@@ t b@@ e on th@@ e comm@@ ent edit@@ "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getChange@@ ().get@@ Project@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getChange@@ ().get@@ Project@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.change.@@ Delete@@ Draft@@ P@@ ut@@ Draft@@ Comm@@ ent.@@ O@@ p o@@ p = new com.google.gerrit.server.change.@@ Comment@@ Resource@@ .@@ rest@@ i@@ change.@@ P@@ ut@@ Draft@@ Comm@@ ent.@@ Op@@ (rsrc@@ .get@@ Comment@@ ().@@ in@@ ); bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ ); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ comment@@ Json@@ .get().@@ set@@ Account@@ s@@ (@@ false@@ )@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ comment@@ )); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ Update.@@ Update@@ Result@@ > update@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ For@@ load@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ U@@ u@@ id@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , this@@ :@@ get@@ Account@@ Name@@ Email@@ , this@@ :@@ get@@ Group@@ Name); if (!(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ is@@ P@@ res@@ ent@@ ())) { if (@@ group@@ s@@ M@@ igration.@@ read@@ From@@ NoteDb@@ ()) { throw new com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception(@@ group@@ U@@ u@@ id@@ ); } return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group ori@@ gin@@ al@@ Group = group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ (); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ s group@@ Name@@ s = null@@ ; if (@@ group@@ .getName@@ ().@@ is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key old@@ Name = ori@@ gin@@ al@@ Group@@ .getName@@ Key@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key new@@ Name = group@@ Update@@ .getName@@ ().get@@ (); group@@ Name@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Not@@ es.@@ load@@ R@@ en@@ ame@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Name, new@@ Name); } commit@@ (@@ all@@ User@@ s@@ Config.@@ name, group@@ Name@@ ); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group updat@@ ed@@ Group = group@@ Config@@ .get@@ Load@@ ed@@ Group@@ Load@@ ed@@ ().@@ se@@ Throw@@ ((@@ java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Group@@ s w@@ n m@@ ati@@ c@@ ally load@@ ed b@@ as@@ su@@ gin@@ ed to db.@@ patchSet@@ s@@ Update@@ (@@ ori@@ gin@@ al@@ Group@@ , ori@@ gin@@ al@@ Group@@ , updat@@ ed@@ , updat@@ ed@@ )); } }
public void dis@@ patch@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Cannot lo@@ g ad@@ d group@@ s to count@@ ", e); } }
private void add@@ Member@@ s(@@ com.google.gerrit.server.@@ api.@@ changes.@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Input inpu@@ t = Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ in@@ iti@@ al@@ Member@@ s.@@ st@@ ream@@ ().@@ map@@ (@@ java.lang.O@@ bject@@ :@@ toString@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ())); add@@ Member@@ s.@@ apply(@@ rsrc@@ , input@@ ); }
private void add@@ Sub@@ group@@ s(@@ com.google.gerrit.server.git.@@ Merge@@ Op@@ Repo@@ Manager.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Input inpu@@ t = Add@@ Sub@@ group@@ s.@@ Input.@@ from@@ Group@@ s(@@ in@@ iti@@ al@@ Group@@ s.@@ st@@ ream@@ ().@@ map@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ())); add@@ Sub@@ group@@ s.@@ apply(@@ rsrc@@ , input@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ account@@ ", ali@@ ase@@ s = "@@ -@@ g@@ ", met@@ a@@ V@@ a@@ r = "@@ G@@ RO@@ U@@ P@@ ", us@@ ag@@ e = "@@ in@@ iti@@ al se@@ t of group@@ s to b@@ e in@@ clu@@ de@@ d in th@@ e count@@ ") void add@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D id@@ ) { in@@ iti@@ al@@ Group@@ s.add(@@ id@@ ); }
@java.lang.Override public void replace@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group group@@ ) throw@@ s java.io.IOException { io.@@ search@@ bo@@ x.@@ core@@ .@@ B@@ ul@@ k b@@ ul@@ k = new io.@@ search@@ bo@@ x.@@ core@@ .@@ B@@ ul@@ k.@@ Builder@@ ()@@ .@@ default@@ Index@@ (@@ index@@ Name@@ )@@ .@@ default@@ Type@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Group@@ Index@@ .@@ G@@ RO@@ U@@ P@@ S@@ ).@@ add@@ Action@@ (@@ com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Group@@ Index@@ .@@ G@@ RO@@ U@@ P@@ S@@ , group@@ )).@@ ref@@ res@@ h@@ (@@ true@@ ).@@ bu@@ ild@@ (); io.@@ search@@ bo@@ x@@ .client.@@ J@@ est@@ Result result = client.@@ execute@@ (@@ b@@ ul@@ k@@ ); if (!(@@ result.@@ is@@ Suc@@ ce@@ ed@@ ())) { throw new java.io.IO@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to re@@ pl@@ ac@@ e ac@@ count %s in in@@ de@@ x %@@ s@@ : %@@ s@@ : %@@ s", group@@ .get@@ Group@@ UUID@@ ().get@@ (), index@@ Name, result@@ .get@@ Error@@ Message@@ ())); } }
private void rep@@ ort@@ Group@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.g@@ roup@@ .@@ Create@@ Group.@@ Input in@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String name@@ s = group@@ U@@ u@@ id@@ List.@@ st@@ ream@@ ().@@ map@@ (( u@@ id@@ ) -@@ > group@@ Cache@@ .get(@@ u@@ u@@ id@@ ).@@ map@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ :@@ get@@ Name@@ )).@@ f@@ l@@ at@@ Map@@ (@@ Stream@@ s@@ :@@ st@@ ream@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ s@@ : %s count@@ : %@@ s@@ : %@@ s@@ : %@@ s", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ EN@@ C@@ )); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Failure@@ , com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ Failure@@ , java.lang.Exception { try { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id : group@@ s) { com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Member@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (@@ group@@ U@@ u@@ id@@ .get@@ ())); if (!(@@ account@@ s@@ To@@ Remo@@ v@@ e.@@ isEmpty())) { delete@@ Member@@ s.@@ apply(@@ resource@@ , from@@ Member@@ s(@@ account@@ s@@ To@@ Remo@@ ve@@ )); rep@@ ort@@ Member@@ s@@ Action@@ ("@@ in@@ vali@@ d f@@ ro@@ m account@@ s@@ To@@ Remo@@ ve@@ ", resource@@ , account@@ s@@ To@@ Remo@@ ve@@ ); } if (!(@@ group@@ s@@ To@@ Remo@@ v@@ e.@@ isEmpty())) { delete@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , from@@ Group@@ s(@@ group@@ s@@ To@@ Remo@@ ve@@ )); rep@@ ort@@ Group@@ s@@ Action@@ ("@@ in@@ vali@@ d f@@ ro@@ m group@@ s@@ To@@ Remo@@ ve@@ ); } if (!(@@ account@@ s@@ To@@ Remo@@ ve@@ Account@@ s(@@ add@@ Member@@ s.@@ apply(@@ resource@@ , from@@ Member@@ s(@@ account@@ s@@ To@@ Add@@ )); rep@@ ort@@ Member@@ s@@ Action@@ ("@@ add@@ ", resource@@ , account@@ s@@ To@@ Add@@ ); } if (!(@@ group@@ s@@ To@@ Inclu@@ d@@ e.@@ isEmpty())) { add@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , from@@ Group@@ s(@@ group@@ s@@ To@@ Inclu@@ de@@ )); rep@@ ort@@ Group@@ s@@ Action@@ ("@@ in@@ vali@@ d to group@@ s@@ To@@ Inclu@@ de@@ ", group@@ s@@ To@@ Inclu@@ de@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception e) { throw di@@ e@@ (@@ e.get@@ Message()); } }
private void rep@@ ort@@ Member@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Resource group@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ List@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String name@@ s = account@@ Id@@ List.@@ st@@ ream@@ ().@@ map@@ (( account@@ Id@@ ) -@@ > com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ Account@@ ().get@@ Pref@@ er@@ red@@ Email@@ (), "@@ n@@ /@@ a@@ "@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ in@@ ing@@ ", out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ P@@ roject %s count@@ s %@@ s@@ : %@@ s", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ EN@@ C@@ )); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ P@@ roject " + (@@ resource@@ .getName@@ ())) + "@@ \@@ " al@@ read@@ y ex@@ ist@@ s@@ ")); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ F@@ ail@@ ur@@ e { com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input config@@ Input = new com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input@@ (); config@@ Input.@@ requ@@ i@@ re@@ Change@@ Id = requ@@ i@@ re@@ Change@@ ID@@ ; config@@ Input.@@ submit@@ Type = submit@@ Type@@ ; config@@ Input.@@ use@@ Content@@ Merg@@ e = content@@ Merge@@ ; config@@ Input.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s = cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s; config@@ Input.@@ use@@ Sig@@ ned@@ O@@ ff@@ B@@ y = signe@@ d@@ O@@ ff@@ By@@ ; config@@ Input.@@ st@@ ate = state@@ .getProject@@ ().get@@ State@@ (); config@@ Input.@@ max@@ Object@@ Size@@ Li@@ m@@ it = max@@ Object@@ Size@@ Li@@ mit@@ ; if ((@@ com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (project@@ Description@@ )) != null@@ ) { config@@ Input.@@ des@@ crip@@ tion = project@@ Description@@ ; } else { config@@ Input.@@ des@@ crip@@ tion = project@@ State@@ .getProject@@ ().get@@ Description@@ (); } try { appl@@ y@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw di@@ e@@ (@@ e); } }
com.google.gerrit.server.@@ ap@@ i@@ .group@@ s.@@ Group@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource rsrc@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info owner@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Ow@@ n@@ er.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot g@@ e@@ t ac@@ count ow@@ ne@@ r ", e); } }
@java.lang.Override public void o@@ ption@@ s(@@ com.google.gerrit.extensions.common.@@ Group@@ Option@@ s@@ Info o@@ ption@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { put@@ Option@@ s.@@ apply(@@ rsrc@@ , o@@ ption@@ s); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t account@@ ", e); } }
@java.lang.Override public void index@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { index.@@ apply(@@ rsrc@@ , new com.google.gerrit.extensions.common.@@ Input@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot in@@ de@@ x ac@@ count %@@ s", e); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> me@@ mber@@ s@@ (@@ boolean re@@ cur@@ si@@ ve@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { list@@ Member@@ s.set@@ Rec@@ ur@@ si@@ ve@@ (re@@ cur@@ si@@ ve@@ ); try { return list@@ Member@@ s.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot li@@ s@@ t ac@@ count me@@ mber@@ s", e); } }
@java.lang.Override public void remove@@ Member@@ s(@@ java.lang.String.@@ .@@ . me@@ mber@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { delete@@ Member@@ s.@@ apply(@@ rsrc@@ , Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ java.util.Array@@ s.@@ as@@ List(@@ me@@ mber@@ s@@ ))); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot remo@@ v@@ e reviewer@@ ", e); } }
@java.lang.Override public void name@@ (java.lang.String name@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Name@@ Input in = new com.google.gerrit.extensions.common.@@ Name@@ Input@@ (); in.@@ name = name@@ ; try { put@@ Name.@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count name@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info d@@ et@@ ail@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Det@@ ai@@ l.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e ac@@ count@@ ", e); } }
@java.lang.Override public void add@@ Member@@ s(@@ java.lang.String.@@ .@@ . me@@ mber@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { add@@ Member@@ s.@@ apply(@@ rsrc@@ , Add@@ Member@@ s.@@ Input.@@ from@@ Member@@ s(@@ java.util.Array@@ s.@@ as@@ List(@@ me@@ mber@@ s@@ ))); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ad@@ d ac@@ count@@ ", e); } }
@java.lang.Override public void des@@ cription@@ (java.lang.String des@@ cription@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Description@@ Input in = new com.google.gerrit.extensions.common.@@ Description@@ Input@@ (); in.@@ des@@ crip@@ tion = des@@ cription@@ ; try { put@@ Des@@ crip@@ tion.@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t ac@@ count@@ ", e); } }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ me@@ mber@@ ", ali@@ ase@@ s = { "@@ -@@ m@@ " }@@ , met@@ a@@ V@@ a@@ r = "@@ US@@ ER@@ NAM@@ E@@ ", us@@ ag@@ e = "@@ max@@ i@@ e of user@@ s to com@@ e me@@ mber@@ s of th@@ e count@@ ") void add@@ Member@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { in@@ iti@@ al@@ Member@@ s.add(@@ id@@ ); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Failure@@ , com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try { com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Member@@ s.@@ Input in@@ iti@@ al@@ Group@@ s = create@@ Group@@ (); if (!(@@ in@@ iti@@ al@@ Member@@ s.@@ isEmpty())) { add@@ Member@@ s(@@ rsrc@@ ); } if (!(@@ in@@ iti@@ al@@ Group@@ s.@@ isEmpty())) { add@@ Sub@@ group@@ s(@@ rsrc@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.RestApi@@ Exception e) { throw di@@ e@@ (@@ e); } }
private com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ .@@ Group@@ Resource create@@ Group@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { ap@@ i@@ .group@@ s.@@ Group@@ Input inpu@@ t = new com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Group@@ Input@@ (); input.@@ des@@ crip@@ tion = group@@ Description@@ ; input.@@ vi@@ sible@@ To@@ Al@@ l = vi@@ sible@@ To@@ All@@ ; if ((@@ owner@@ Group@@ Id@@ ) != null@@ ) { input.@@ owner@@ Id = java.lang.String.@@ value@@ Of(@@ owner@@ Group@@ Id@@ .get()); } com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = create@@ Group@@ Factory.create@@ (@@ group@@ Name@@ ).@@ apply(@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, input@@ ); return group@@ s.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (@@ group@@ .@@ id@@ )); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.@@ Group@@ Ap@@ i create@@ (@@ ap@@ i@@ .group@@ s.@@ Group@@ Input in@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if ((@@ check@@ Not@@ Null@@ (in@@ , "@@ Group@@ Input@@ ").@@ name@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ mis@@ s@@ ing m@@ us@@ t sp@@ e@@ c@@ if@@ y name "); } try { com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ Create@@ Group i@@ mp@@ l = create@@ Group.@@ create@@ (in@@ .@@ name); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ An@@ y(@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ G@@ lobal@@ Permission@@ .@@ from@@ An@@ not@@ ation@@ (@@ i@@ m@@ pl@@ .get@@ Class@@ ())); com.google.gerrit.extensions.common.@@ Group@@ Info in@@ fo = i@@ mp@@ l.@@ apply(@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, in@@ ); return id(@@ info.@@ id@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception@@ (("@@ Cannot cre@@ ate " + count@@ )), e); } }
public static com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > load@@ All@@ Group@@ Ref@@ eren@@ ces@@ (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ sitor@@ y.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NAM@@ ES@@ ); if (re@@ f == null@@ ) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } try (@@ org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ sitor@@ y@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er read@@ er = rev@@ Wal@@ k@@ .get@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.revwalk.RevCommit notes@@ Commit = rev@@ Wal@@ k.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p note@@ Ma@@ p = org.eclipse.jgit.@@ not@@ es.@@ Note@@ Map.@@ read@@ (@@ read@@ er, notes@@ Commit@@ ); java.util.Set<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ Ref@@ eren@@ ce@@ s = new java.util.@@ Link@@ ed@@ Hash@@ Set<@@ >(); for (@@ org.eclipse.jgit.@@ not@@ es.@@ Not@@ e not@@ e : note@@ Map@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce group@@ Ref@@ eren@@ ce = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Notes@@ .get@@ Group@@ Ref@@ eren@@ ce@@ (@@ read@@ er, note@@ .get@@ Data@@ ()); boolean result = group@@ Ref@@ eren@@ ces.@@ add(@@ group@@ Ref@@ eren@@ ce@@ ); if (!@@ result) { com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ NoteDb@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ er.@@ log@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ As@@ W@@ ar@@ n@@ ing@@ ("@@ UU@@ I@@ D of ac@@ count@@ \n@@ "); group@@ (@@ %@@ d@@ up@@ li@@ c@@ ate in ac@@ count count count count count count %@@ s", group@@ Ref@@ eren@@ ce@@ .getName@@ (), group@@ Ref@@ eren@@ ce@@ .get@@ UUID@@ ()); } } return com.google.common.collect.Immutable@@ Set.@@ copy@@ Of(@@ group@@ Ref@@ eren@@ ces@@ ); }
private java.lang.String get@@ Commit@@ Message@@ () { if ((@@ old@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) && (@@ new@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ())) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Update ac@@ ro@@ m '@@ %@@ s@@ ' to '@@ ", s@@ ' to %@@ s@@ ' old@@ Group@@ Name@@ .get(), new@@ Group@@ Name@@ .get()); } if (@@ new@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot ac@@ count '@@ %@@ s@@ ' new@@ Group@@ Name@@ .get()); } if (@@ old@@ Group@@ Name.@@ is@@ P@@ res@@ ent@@ ()) { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Update ac@@ '@@ %@@ s@@ ' '@@ ", old@@ Group@@ Name@@ .get()); } return "@@ No@@ -@@ op@@ "; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (!(@@ ag@@ ree@@ ment@@ s@@ Enable@@ d@@ )) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ can@@ not ag@@ ree@@ ment@@ s dis@@ able@@ d@@ "); } if ((@@ self@@ .get@@ ()) != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to ent@@ ri@@ bu@@ tor ag@@ ree@@ ment "); } java.lang.String ag@@ ree@@ ment@@ Name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ input.@@ name); com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a = project@@ Cache@@ .get@@ All@@ Project@@ s@@ ().get@@ Config@@ ().get@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ (@@ ag@@ ree@@ ment@@ Name); if (c@@ a == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ ac@@ count not fo@@ und@@ "); } if ((@@ c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ re@@ al a n@@ on@@ -@@ au@@ to@@ V@@ er@@ if@@ y ment "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ ().get@@ UUID@@ (); if (@@ u@@ id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ ac@@ count not fo@@ und@@ "); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = self@@ .get@@ ().get@@ Account@@ (); try { add@@ Member@@ s.@@ add@@ Member@@ s(@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (account@@ .getId@@ ())); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ can@@ not fo@@ und@@ "); } }
@org.junit.Test public void sh@@ a@@ red@@ Group@@ ID@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", g@@ 1@@ .@@ name); cf@@ g.@@ set@@ In@@ t@@ ("@@ group@@ ", null@@ , "@@ id@@ ", g@@ 2@@ .group@@ Id); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ owner@@ Group@@ U@@ u@@ id@@ ", g@@ Ad@@ min@@ .@@ id@@ ); update@@ Group@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E, cf@@ g.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ Group@@ ", ac@@ cess@@ f@@ ull@@ Name); }
@org.junit.Test public void mis@@ s@@ ing@@ Group@@ Name@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ Update r@@ u = repo.@@ update@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ NAM@@ ES@@ ); r@@ u@@ .set@@ For@@ ce@@ Update@@ (@@ true@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ delete@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ Result.@@ FO@@ R@@ C@@ ED@@ ); } assert@@ Error@@ ("@@ f@@ es do@@ es not ex@@ is@@ t } }
@org.junit.Test public void name@@ With@@ out@@ Group@@ Ref@@ () throw@@ s java.lang.Exception { java.lang.String bo@@ g@@ us@@ Name = name = org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ u@@ id@@ ", com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ B@@ O@@ US@@ _@@ UUID@@ ); config.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", bo@@ g@@ Name); update@@ Group@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ ES@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ .get@@ Notes@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ g@@ us@@ Name@@ )@@ ).get@@ Name@@ (), config.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ Group@@ s mis@@ s@@ ing ac@@ count@@ ", ac@@ count re@@ f "); }
@org.junit.Test public void mis@@ s@@ ing@@ Name@@ E@@ n@@ try@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ R@@ en@@ am@@ e r@@ u = repo.@@ re@@ name@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ US@@ _@@ UUID@@ ))); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ re@@ name@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ Result.@@ R@@ EN@@ AM@@ ED@@ ); } assert@@ Error@@ ((@@ ("@@ c@@ ap@@ i@@ .group@@ .@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ US@@ _@@ UUID@@ )) + " h@@ a@@ s n@@ o en@@ try name in ma@@ p d@@ ")); } }
@org.junit.Test public void unk@@ no@@ w@@ n@@ Owner@@ Group@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ name@@ ", g@@ 1@@ .@@ name); cf@@ g.@@ set@@ In@@ t@@ ("@@ group@@ ", null@@ , "@@ id@@ ", g@@ 1@@ .group@@ Id); cf@@ g.@@ set@@ String@@ ("@@ group@@ ", null@@ , "@@ owner@@ Group@@ U@@ u@@ id@@ ", com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ Group@@ s@@ Con@@ si@@ st@@ en@@ c@@ y@@ IT.@@ B@@ O@@ US@@ _@@ UUID@@ ); update@@ Group@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ )), Group@@ Config.@@ G@@ RO@@ U@@ P@@ _@@ CON@@ FI@@ G@@ _@@ F@@ IL@@ E, cf@@ g.@@ to@@ Text@@ ()); assert@@ Error@@ ("@@ contain@@ s ow@@ ne@@ r count@@ ", count@@ ); }
@org.junit.Test public void mis@@ s@@ ing@@ Group@@ Ref@@ () throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )) { org.eclipse.jgit.lib.@@ Ref@@ Update r@@ u = repo.@@ update@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ g@@ 1@@ .@@ id@@ ))); r@@ u@@ .set@@ For@@ ce@@ Update@@ (@@ true@@ ); org.eclipse.jgit.lib.@@ Ref@@ Update.@@ Result result = r@@ u@@ .@@ delete@@ (); assert@@ Th@@ at(@@ result@@ ).@@ isEqualTo(@@ Result.@@ FO@@ R@@ C@@ ED@@ ); } assert@@ Error@@ ("@@ in@@ ac@@ count re@@ f count@@ ", account@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info get@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return get@@ Group.@@ apply(@@ rsrc@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot ret@@ ri@@ ev@@ e ac@@ count account@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ D@@ ashbo@@ ard@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (@@ resource@@ .is@@ Project@@ ()) { return default@@ Set@@ ter@@ .get().@@ apply(@@ resource@@ , input@@ ); } throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ (); }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key name@@ ) { if (@@ name == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } try { return by@@ Name@@ .get(@@ name@@ .get()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ oo@@ k up up count@@ %@@ s", ac@@ tive@@ Group@@ .getName@@ ()), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) { try { return by@@ Id@@ .get(@@ group@@ Id); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (("@@ Cannot lo@@ ad account@@ Id " + group@@ Id@@ ), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > get@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { if (@@ group@@ U@@ u@@ id == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } try { return by@@ UUID@@ .get(@@ group@@ U@@ u@@ id@@ .get()); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.account.@@ Group@@ Cache@@ Impl.@@ log.warn@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot l@@ oo@@ k up up of ac@@ count %@@ s", u@@ u@@ id@@ .get@@ ()), e); return java.util.@@ Optional@@ .@@ empty@@ (); } }
private void index@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ ) { try { index.@@ appl@@ y@@ (@@ new com.google.gerrit.server.index.@@ Index@@ er@@ <@@ rest@@ i@@ i@@ .@@ Project@@ Resource@@ (project@@ State@@ , user@@ ), null@@ ); } catch (@@ java.lang.Exception e) { write@@ Error@@ ("@@ error@@ ", java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to in@@ de@@ x %@@ s@@ : %@@ s", project@@ State@@ .getName@@ (), e.get@@ Message@@ ())); } }
public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info get@@ (@@ org.eclipse.jgit.lib.Repository repo@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = get@@ Repository(@@ resource@@ .getName@@ Key@@ ())@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.lang.String tag@@ Name = id@@ .get@@ (); if (!(@@ tag@@ Name.@@ startsWith@@ (@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ))) { tag@@ Name = (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ) + tag@@ Name@@ ; } org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo@@ .getRef@@ Dat@@ abase@@ ().@@ ex@@ act@@ Ref@@ (t@@ ag@@ Name); if ((@@ re@@ f != null@@ ) && (!(@@ vi@@ sible@@ Tag@@ s(@@ resource@@ .getProject@@ State@@ (), repo@@ , com.google.common.collect.Immutable@@ Map.@@ of@@ (ref@@ .getName@@ (), ref@@ )).@@ isEmpty@@ ()))) { return com.google.gerrit.server.@@ api.@@ Tag@@ s.@@ create@@ Tag@@ Info@@ (@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ resource@@ .getUser@@ ()).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ (ref@@ .getName@@ ()), ref@@ , r@@ w, resource@@ .getName@@ Key@@ (), link@@ s); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info> apply(@@ com.google.gerrit.@@ serv@@ er@@ .get().@@ rest@@ i@@ ap@@ i@@ .@@ project.@@ Project@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info> tag@@ s = new java.util.ArrayList<@@ >(); per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ resource@@ .getName@@ Key@@ ()); try (@@ org.eclipse.jgit.lib.Repository repo = get@@ Repository(@@ resource@@ .getName@@ Key@@ ())@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > al@@ l = vi@@ sible@@ Tag@@ s(@@ resource@@ .getProject@@ State@@ (), repo@@ , repo@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ )); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : al@@ l.@@ values@@ ()) { tag@@ s.add(@@ com.google.gerrit.server.@@ ap@@ i@@ .@@ project.@@ List@@ Tag@@ s.@@ create@@ Tag@@ Info@@ (ref@@ , ref@@ .getName@@ ()), ref@@ , r@@ w, resource@@ .getName@@ Key@@ (), link@@ s@@ )); } } java.util.Collections.s@@ ort@@ (t@@ ag@@ s, new java.util.@@ Comp@@ ar@@ ator@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ >() { @java.lang.Override public int compare@@ (@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info a@@ , com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info b@@ ) { return a.@@ ref@@ .@@ compare@@ To@@ (@@ b.@@ ref@@ ); } }); return new com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ T@@ A@@ G@@ S@@ ).@@ start@@ (@@ li@@ mit@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ reg@@ ex@@ (@@ match@@ Reg@@ ex@@ ).@@ filter@@ (t@@ ag@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ java.util.@@ Set@@ <java.lang.String@@ >> apply(@@ com.google.gerrit.server.change.Change@@ Resource req@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = req@@ .get@@ Notes@@ ().@@ load@@ (); java.util.@@ Set@@ <java.lang.String> has@@ htag@@ s = notes@@ .get@@ H@@ as@@ htag@@ s(); if (@@ has@@ htag@@ s == null@@ ) { has@@ htag@@ s = java.util.Collections.@@ empty@@ Set@@ (); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ has@@ htag@@ s); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ note@@ Db@@ .group@@ s.@@ write@@ ", valu@@ e = "@@ true@@ ") public void create@@ Group@@ Branch@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ C@@ RE@@ AT@@ E, com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); allow@@ (@@ all@@ User@@ s, ((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), Permission@@ .@@ P@@ US@@ H@@ , com.google.gerrit.acceptance.@@ rest.@@ project.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); assert@@ Create@@ F@@ ail@@ s@@ (@@ new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (@@ all@@ User@@ s, com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ foo@@ "@@ )@@ )), com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ admin@@ Group@@ U@@ u@@ id@@ ()), com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ , allow@@ ed to cre@@ ate ac@@ count@@ ", branch@@ .@@ "); }
private java.util.@@ S@@ orted@@ Map@@ <java.lang.String, com.google.gerrit.extensions.common.@@ Group@@ Info> list@@ (com.google.gerrit.server.@@ ap@@ i@@ .group@@ s.@@ List@@ Request req@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource t@@ l@@ r = com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E@@ ; com.google.gerrit.@@ server@@ .@@ group@@ List@@ Group@@ s li@@ s@@ t = list@@ Group@@ s.get@@ (); li@@ s@@ t.set@@ Option@@ s(@@ req@@ .get@@ Option@@ s()); for (java.lang.String project : req@@ .getProject@@ s()) { try { serv@@ er@@ .@@ rest@@ i@@ c = project.@@ parse@@ (t@@ l@@ r@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (project@@ )); li@@ s@@ t.@@ add@@ Project@@ (rsrc@@ .getProject@@ State@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception@@ (("@@ E@@ rror l@@ ook@@ ing up project " + project@@ ), e); } } for (java.lang.String g@@ roup : req@@ .get@@ Group@@ s()) { li@@ s@@ t.@@ add@@ Group@@ (@@ group@@ s.@@ parse@@ (@@ group@@ ).get@@ Group@@ UUID@@ ()); } li@@ s@@ t.set@@ Visible@@ To@@ All@@ (req@@ .get@@ Visible@@ To@@ All@@ ()); if ((@@ req@@ .get@@ Ow@@ ned@@ By@@ ()) != null@@ ) { li@@ s@@ t.set@@ Ow@@ ned@@ B@@ y(@@ req@@ .get@@ Ow@@ ned@@ By@@ ()); } if ((@@ req@@ .getUser@@ != null@@ ) { try { li@@ s@@ t.set@@ User@@ (account@@ .getUser@@ ()@@ ).get@@ Account@@ Id()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception@@ (("@@ E@@ rror l@@ ook@@ ing up user " + (req@@ .getUser@@ ())@@ ), e); } li@@ s@@ t.set@@ Ow@@ ne@@ d(@@ req@@ .get@@ Ow@@ ned@@ ()); li@@ s@@ t.set@@ Li@@ mit@@ (req@@ .get@@ Start@@ ()); li@@ s@@ t.set@@ Start@@ (req@@ .get@@ Sub@@ string@@ ()); li@@ s@@ t.set@@ Reg@@ ex@@ t.set@@ Reg@@ ex@@ t.set@@ Reg@@ ex@@ (req@@ .get@@ Su@@ ggest@@ ()); try { return li@@ s@@ t.@@ apply(@@ t@@ l@@ r@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot li@@ s@@ t group@@ s", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info@@ >> apply(@@ serv@@ er@@ com.google.common.base.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> pa@@ st@@ As@@ signe@@ es = rsrc@@ .get@@ Notes@@ ().@@ load@@ ().get@@ P@@ ast@@ As@@ signe@@ es@@ (); if (@@ pa@@ st@@ As@@ signe@@ es == null@@ ) { return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ java.util.Collections.@@ empty@@ List@@ ()); } com.google.gerrit.server.account.Account@@ Load@@ er account@@ Load@@ er = account@@ Load@@ er@@ Factory.create@@ (@@ true@@ ); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> info@@ s = pa@@ st@@ As@@ signe@@ es.@@ st@@ ream@@ ().@@ map@@ (account@@ Load@@ er@@ :@@ :@@ :@@ get@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); account@@ Load@@ er.@@ fi@@ ll@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ info@@ s); }
@@@ com.google.gerrit.server.query.@@ change.@@ O@@ per@@ at@@ or public com.google.gerrit.@@ index.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData> vi@@ sible@@ to@@ (java.lang.String wh@@ o@@ ) throw@@ s com.google.gerrit.@@ index.@@ Query@@ Par@@ se@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ is@@ S@@ el@@ f@@ (@@ wh@@ o@@ )) { return is@@ _@@ vi@@ sible@@ (); } java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> m = args.@@ account@@ Res@@ ol@@ v@@ er.@@ fin@@ d@@ All(@@ wh@@ o@@ ); if (!(@@ m.@@ isEmpty())) { java.util.List<@@ com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ m.@@ size()); for (@@ com.google.gerrit.reviewdb.client.Account.Id id : m@@ ) { return vi@@ sible@@ (@@ args.@@ user@@ Factory.create@@ (id@@ )); } return com.google.gerrit.@@ index.@@ Predi@@ c@@ ate.@@ or@@ (p@@ ); } java.util.Collection<@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > su@@ gg@@ es@@ tion@@ s = arg@@ s@@ .group@@ Back@@ en@@ d.@@ suggest@@ (@@ wh@@ o@@ , null@@ ); if (!(@@ su@@ gg@@ es@@ tion@@ s.@@ isEmpty())) { java.util.Hash@@ Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > id@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f : su@@ gg@@ es@@ tion@@ s) { id@@ s.add(@@ ref@@ .get@@ UUID@@ ()); } } return vi@@ sible@@ to@@ (@@ new com.google.gerrit.server.query.@@ change.@@ S@@ ingle@@ Group@@ User@@ (id@@ )); } throw error@@ ((@@ ("@@ Un@@ k@@ no@@ w@@ n user or count@@ es " + wh@@ o@@ ) + "@@ \"@@ ")); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ Group@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { final com.google.gerrit.server.@@ Current@@ User user = self@@ .get@@ (); if (@@ user instanceof com.google.gerrit.server.@@ An@@ on@@ y@@ mo@@ us@@ User@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } else if (!(@@ user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c g@@ roup = parse@@ Id@@ (id@@ .get()); if (@@ g@@ roup == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ .get()); } com.google.gerrit.server.account.@@ Group@@ Control ct@@ l = group@@ Control@@ Factory.@@ control@@ For@@ (@@ group@@ ); if (!@@ (ct@@ l.@@ is@@ Visible@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return new com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Member@@ s.@@ group@@ Resource@@ (ct@@ l@@ ); }
public void vi@@ sit@@ (@@ org.eclipse.jgit.revwalk.RevCommit c@@ ) { check@@ State@@ ((@@ !@@ (@@ do@@ ne@@ )), "@@ can@@ not cal@@ le@@ d af@@ ter Group@@ s() s() java.util.Set<@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ > int@@ er@@ est@@ ing@@ Parent@@ s = get@@ In@@ ter@@ est@@ ing@@ Parent@@ s(@@ c@@ ); if ((@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ size@@ ()) == 0) { group@@ s.@@ put@@ (c@@ , c.@@ name@@ ()); return@@ ; } else if ((@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ size@@ ()) == 1@@ ) { group@@ s.@@ put@@ All@@ (c@@ , group@@ s.get@@ (@@ int@@ er@@ est@@ ing@@ Parent@@ s.@@ iter@@ ator@@ ().@@ next@@ ())); return@@ ; } java.util.@@ Set@@ <java.lang.String> this@@ Commit@@ Group@@ s = new java.util.@@ Tree@@ Set<@@ >(); java.util.@@ Set@@ <java.lang.String> parent@@ Group@@ s@@ New@@ In@@ Th@@ is@@ Pu@@ s@@ h = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Link@@ ed@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (@@ int@@ er@@ est@@ Parent@@ s.@@ size()); for (@@ org.eclipse.jgit.revwalk.RevCommit p : int@@ er@@ est@@ ing@@ Parent@@ s) { java.util.Collection@@ <java.lang.String> parent@@ Group@@ s = group@@ s.get(@@ p@@ ); if (@@ parent@@ Group@@ s.@@ isEmpty()) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Th@@ e ac@@ count@@ d to pa@@ ren@@ t pa@@ ren@@ t %@@ s", pa@@ ren@@ t of %@@ s", c.@@ name@@ ())); } for (java.lang.String parent@@ Group : parent@@ Group@@ s) { if (@@ is@@ Group@@ Ex@@ ist@@ ing@@ PatchSet@@ (p@@ , parent@@ Group@@ )) { this@@ Commit@@ s.add(@@ parent@@ Group@@ ); } else { parent@@ Group@@ s@@ New@@ In@@ Th@@ is@@ Push@@ On@@ Ex@@ ist@@ ing@@ Group@@ (@@ parent@@ Group@@ ); } } java.lang.I@@ terable@@ <java.lang.String> to@@ A@@ li@@ as@@ ; if (@@ this@@ Commit@@ s.@@ isEmpty()) { java.lang.String fi@@ rst@@ Parent@@ Group = parent@@ Group@@ s@@ New@@ Th@@ is@@ Push@@ .@@ iter@@ ator@@ ().@@ next@@ (); this@@ Commit@@ s = com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ fi@@ rst@@ Parent@@ ); to@@ A@@ li@@ a@@ s = com.google.common.collect.I@@ terable@@ s.@@ s@@ kip@@ (@@ parent@@ Group@@ , 1); } else { to@@ A@@ li@@ a@@ s = parent@@ Group@@ s@@ New@@ In@@ Push@@ Th@@ is@@ Not@@ All@@ (c@@ , this@@ , group@@ s); for (java.lang.String p@@ as@@ es.@@ put@@ All@@ (p@@ as@@ es.@@ put@@ All@@ (p@@ , this@@ , this@@ , this@@ , this@@ Commit@@ s); } }
private org.eclipse.jgit.lib.ObjectId parse@@ Group@@ (@@ org.eclipse.jgit.lib.ObjectId for@@ Commit@@ , java.lang.String group@@ ) { try { return org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ group@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { com.google.gerrit.server.git.@@ Group@@ Collec@@ tor@@ .@@ log.warn@@ ("@@ Cannot for commit {@@ } is not a S@@ H@@ A@@ -@@ 1@@ : {@@ }@@ ", for@@ Commit.@@ name@@ (), group@@ ); return null@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ rsrc@@ ); }
@org.junit.Test public void create@@ Group@@ As@@ User@@ Ident@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ ", com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ di@@ t = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), user@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ ); }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group update@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , Ab@@ str@@ act@@ Group@@ Test@@ :@@ get@@ Account@@ Name@@ Email@@ , Ab@@ str@@ act@@ Group@@ Name@@ :@@ get@@ Group@@ Name); group@@ Config.@@ commit@@ (@@ create@@ Met@@ a@@ Data@@ Update@@ (user@@ Ident@@ )); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ In@@ vali@@ d ac@@ count f@@ ai@@ le@@ d@@ "); }
@org.junit.Test public void add@@ Multi@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ ", "@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group sub@@ group@@ 1 = create@@ Group@@ As@@ User@@ (@@ 2, "@@ test@@ -@@ account@@ -@@ 2@@ ", com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group sub@@ group@@ 2 = create@@ Group@@ As@@ User@@ (@@ 3@@ , "@@ test@@ -@@ account@@ -@@ 3@@ ", group@@ ); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id@@ 1 = group@@ 1@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ group@@ U@@ u@@ id@@ 2 = group@@ 2@@ .get@@ Group@@ UUID@@ (); add@@ Sub@@ group@@ s(@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ U@@ u@@ id@@ 1, sub@@ U@@ u@@ id@@ 2@@ )); assert@@ Commit@@ (@@ u@@ id@@ , ((@@ ("@@ Update '@@ " + count@@ ) + "@@ \n@@ ") + (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group Group <@@ %@@ s@@ > sub@@ U@@ u@@ id@@ 1@@ ))) + "@@ \n@@ ") + "@@ Group@@ 2@@ )@@ ))); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ 1 = create@@ Ex@@ p@@ Group@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ 1, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ 1 = create@@ Ex@@ p@@ Group@@ Au@@ dit@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ 1, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ d = create@@ Ex@@ p@@ Group@@ Au@@ dit@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ 2, get@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ Log@@ Read@@ er@@ .get@@ Sub@@ s@@ Au@@ dit@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 1, exp@@ Au@@ dit@@ ).@@ in@@ Or@@ der@@ (); }
@org.junit.Test public void create@@ Group@@ As@@ Server@@ Ident@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ (1@@ , "@@ test@@ -@@ account@@ ", server@@ Ident@@ , null@@ ); assert@@ Th@@ at(@@ au@@ dit@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ .get@@ Group@@ UUID@@ ()@@ )).@@ hasSize@@ (@@ 0); }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ (@@ int next@@ , java.lang.String group@@ Name, org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent author@@ Ident@@ , com.google.gerrit.reviewdb.client.Account.Id author@@ Id@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation.@@ buil@@ der@@ ().set@@ Group@@ UUID@@ (com.google.gerrit.server.@@ account.@@ Group@@ UUID@@ .@@ ma@@ k@@ e@@ (@@ group@@ Name, server@@ Ident@@ )).@@ set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ group@@ Name@@ )).@@ set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id(@@ group@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = (@@ author@@ Id@@ ent.@@ equals(@@ server@@ Ident@@ )) ? com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Description@@ ("@@ Group@@ s@@ ").@@ buil@@ d(@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Description@@ ("@@ Group@@ s@@ ").@@ set@@ Member@@ Mo@@ d@@ if@@ ic@@ ation@@ (("@@ g@@ roup me@@ mber@@ s) -@@ > com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ author@@ Id@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ (@@ group@@ Update@@ , Ab@@ str@@ act@@ Group@@ :@@ get@@ Account@@ Group@@ Name@@ Email@@ , str@@ act@@ Group@@ :@@ get@@ Group@@ Name); org.eclipse.jgit.revwalk.RevCommit commit = group@@ Config.@@ create@@ (@@ create@@ Met@@ a@@ Data@@ Update@@ (@@ author@@ Ident@@ )); assert@@ Create@@ Group@@ (@@ author@@ Ident@@ , commit@@ Config@@ .get@@ Load@@ ed@@ ().@@ or@@ E@@ l@@ se@@ ((@@ se@@ Throw@@ ((@@ java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ In@@ vali@@ d count@@ ", f@@ ai@@ le@@ d@@ "); }
private void assert@@ Create@@ Group@@ (@@ org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent author@@ Ident@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) throw@@ s java.lang.Exception { if (@@ author@@ Id@@ ent.@@ equals(@@ server@@ Ident@@ )) { assert@@ Server@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (@@ commit@@ ), ac@@ count@@ , account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id()); } else { assert@@ Commit@@ (com.google.gerrit.server.git.@@ Commit@@ Util.@@ to@@ Commit@@ Info@@ (@@ commit@@ ), java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account ac@@ count %s <@@ %@@ s@@ @@@ %@@ s@@ @@@ %@@ s@@ > user@@ Id, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ S@@ ER@@ V@@ ER@@ _@@ ID@@ ), get@@ Account@@ Id@@ (user@@ Id@@ )); } }
void vali@@ date@@ New@@ Project@@ (@@ com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key branch@@ , com.google.gerrit.server.@@ validators.@@ Validation@@ Exception@@ ;
@org.junit.Test public void add@@ And@@ Remo@@ ve@@ Sub@@ group@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ "); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group sub@@ g@@ roup = create@@ Group@@ As@@ User@@ (@@ 2, "@@ test@@ -@@ account@@ -@@ 2@@ ", com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); add@@ Sub@@ group@@ s(@@ u@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ U@@ u@@ id@@ )); assert@@ Commit@@ (@@ u@@ id@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Update m@@ at@@ ing ac@@ Group <@@ %@@ > sub@@ U@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d exp@@ exp@@ Au@@ di@@ t = create@@ Ex@@ p@@ Group@@ (@@ group@@ .getId@@ (), sub@@ U@@ u@@ id@@ , user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ .get@@ Sub@@ s@@ Au@@ dit@@ es@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ exp@@ Au@@ dit@@ ); group@@ s(@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ sub@@ U@@ u@@ id@@ )); assert@@ Commit@@ (@@ u@@ id@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Un@@ k@@ no@@ ing ac@@ count@@ ", group@@ U@@ u@@ id@@ )); assert@@ Th@@ at(@@ u@@ id@@ Au@@ d@@ u@@ id@@ Au@@ d@@ en@@ ()).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ v@@ ed@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ Log@@ Read@@ er@@ .get@@ Sub@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ ); }
@org.junit.Test public void add@@ Member@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ ", group@@ Id); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id = group@@ .getId@@ (); com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ dit@@ 1 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ Id, user@@ Id, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 1); com.google.gerrit.reviewdb.client.Account.Id id@@ 1 = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 2); com.google.gerrit.reviewdb.client.Account.Id id@@ 2 = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 00@@ ); add@@ Member@@ s(@@ u@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ 1, id@@ 2@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ dit@@ 2 = create@@ Member@@ Au@@ dit@@ (@@ group@@ Id, id@@ 1, user@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ di@@ t exp@@ Au@@ dit@@ 3 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ Id, id@@ 2, user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Commit@@ (@@ u@@ u@@ id@@ , ("@@ H@@ id@@ 2@@ \n@@ " + (("@@ Account ac@@ count \n@@ " + "@@ Test@@ Account 1@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 2@@ @@@ 2@@ @@@ server@@ -@@ id@@ 2@@ @@@ server@@ -@@ 1@@ 00@@ 00@@ 00@@ \"@@ 2@@ @@@ server@@ -@@ 1@@ 00@@ \"@@ 2@@ @@@ a@@ 2@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 9@@ u@@ u@@ id@@ 1, exp@@ Au@@ dit@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.@@ serv@@ er@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.server.project.@@ File@@ Resource parse@@ (@@ com.google.gerrit.@@ serv@@ i@@ d.@@ rest@@ Info parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { if (@@ com.google.gerrit.reviewdb.client.Patch@@ .is@@ M@@ ag@@ ic@@ (id@@ .get@@ ())) { return new com.google.gerrit.server.project.@@ Change@@ Resource@@ (@@ parent@@ .getProject@@ State@@ (), parent@@ .get@@ Commit@@ (), id@@ .get()); } return com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ (c@@ ap@@ i@@ .@@ rest@@ Get@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Input in = new com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Ad@@ min@@ g user@@ ", resource@@ , id@@ ); try { java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> li@@ s@@ t = apply(@@ resource@@ , in@@ ); if ((@@ li@@ s@@ t.@@ size@@ ()) == 1@@ ) { return list@@ .get(@@ 0); } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Account@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ P@@ ut@@ Resource resource@@ , com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gwtorm.server.OrmException { return g@@ e@@ t.@@ apply(@@ resource@@ ); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info apply(@@ com.google.gerrit.server.@@ api.@@ project.@@ Branch@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return list@@ .get().@@ to@@ Branch@@ Info@@ (rsrc@@ ); }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Repo@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ s group@@ Name@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Not@@ es.@@ load@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), group@@ Name); commit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Name@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ .@@ class@@ ) (@@ count@@ , group@@ Control@@ )@@ ))); }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) { java.lang.String ref@@ Name = cm@@ d@@ .getRef@@ Name@@ (); if ((@@ cm@@ d@@ .get@@ Type@@ ()) == (@@ Receive@@ Comman@@ d.@@ Type.@@ U@@ P@@ D@@ AT@@ E@@ )) { log@@ De@@ bug@@ ("@@ Updat@@ ing t@@ a@@ g cach@@ e on f@@ ast@@ -@@ for@@ war@@ d of {@@ } cm@@ d@@ .getRef@@ Name()); tag@@ Cache.@@ update@@ F@@ ast@@ For@@ war@@ d(@@ project@@ .getName@@ Key@@ (), ref@@ Name, cm@@ d@@ .get@@ O@@ ld@@ Id(), cm@@ d@@ .get@@ New@@ Id()); } if (com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ is@@ Config@@ (cm@@ d@@ )) { log@@ De@@ bug@@ ("@@ Updat@@ ing project cach@@ e try { project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ ); } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ log.warn@@ (("@@ Cannot e@@ vi@@ c@@ f@@ ro@@ m project cach@@ e@@ , key@@ : " + (project@@ .getName@@ ())@@ ), e); } com.google.gerrit.server.project.Project@@ State p@@ s = project@@ Cache@@ .get(@@ project@@ .getName@@ Key@@ ()); try { log@@ De@@ bug@@ ("@@ Git@@ web@@ h@@ ed project des@@ crip@@ tion repo@@ .set@@ Git@@ web@@ Description@@ (ps@@ .getProject@@ ().get@@ Description@@ ()); } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ re@@ ce@@ i@@ v@@ e.@@ Receive@@ Commit@@ s.@@ log.warn@@ (("@@ Cannot updat@@ e des@@ crip@@ tion of " + (project@@ .getName@@ ())@@ ), e); } if (@@ all@@ Project@@ s@@ Name.@@ equals(@@ project@@ .getName@@ Key@@ ())) { try { create@@ Group@@ Permission@@ Sy@@ n@@ c@@ er.@@ sync@@ I@@ f@@ N@@ e@@ ed@@ (); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { com.google.gerrit.server.git.@@ Receive@@ Commit@@ s.@@ log.error@@ ("@@ Cannot cre@@ ate ac@@ count cre@@ ate cre@@ ate cre@@ ate count@@ ", e); } } }
@java.lang.Override public com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ do@@ c@@ Git@@ A@@ P@@ I@@ Exception | org.eclipse.jgit.@@ api.@@ errors.@@ Git@@ A@@ P@@ I@@ Exception | org.eclipse.jgit.@@ api.@@ errors.@@ J@@ Git@@ Repository(@@ rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ rsrc@@ .getName@@ Key@@ ())) { org.eclipse.jgit.@@ api.@@ G@@ ar@@ b@@ age@@ Collec@@ t@@ Comman@@ d g@@ c = org.eclipse.jgit.@@ api.@@ G@@ it.@@ w@@ rap@@ (repo@@ )@@ .g@@ it.@@ rest@@ ore@@ (); return new com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ project.@@ Repository@@ St@@ at@@ is@@ ti@@ c@@ s(@@ g@@ c.get@@ St@@ at@@ is@@ ti@@ c@@ s()); } catch (@@ org.eclipse.jgit.@@ api.@@ errors.@@ Git@@ A@@ P@@ I@@ Exception | org.eclipse.jgit.@@ api.@@ errors.@@ J@@ Git@@ In@@ ternal@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ e.get@@ Message()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (rsrc@@ .getName@@ ()); } }
@org.junit.Test public void add@@ And@@ Remo@@ ve@@ Member@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ roup = create@@ Group@@ As@@ User@@ (1@@ , "@@ test@@ -@@ account@@ ", "@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ dit@@ 1 = create@@ Ex@@ p@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), user@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ dit@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 1); com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ 00@@ 00@@ 2); add@@ Member@@ s(@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ )); com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t exp@@ Au@@ dit@@ 2 = create@@ Member@@ Au@@ dit@@ (@@ group@@ .getId@@ (), id@@ , user@@ Id, get@@ Tip@@ Tim@@ est@@ amp@@ (@@ u@@ id@@ )); assert@@ Tip@@ Commit@@ (@@ u@@ id@@ , ac@@ y@@ , id@@ 1, count@@ Account 1@@ 00@@ 00@@ 00@@ 00@@ 00@@ 2@@ 00@@ 00@@ 00@@ 00@@ 2@@ @@@ server@@ -@@ id@@ > assert@@ Th@@ at(@@ au@@ dit@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 2@@ ).@@ in@@ Or@@ der@@ (); remove@@ Member@@ s(@@ u@@ id@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (id@@ )); assert@@ Commit@@ (@@ u@@ u@@ id@@ , count@@ , 2@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 00@@ 2@@ @@@ -@@ id@@ Au@@ dit@@ > exp@@ Au@@ dit@@ ed@@ Id, get@@ Tim@@ est@@ amp@@ (@@ u@@ u@@ id@@ )); assert@@ Th@@ at(@@ au@@ Log@@ Read@@ er@@ .get@@ Member@@ s@@ Au@@ dit@@ User@@ s@@ (@@ all@@ User@@ s@@ Repo@@ , u@@ id@@ )).@@ contains@@ Ex@@ act@@ l@@ y(@@ exp@@ Au@@ dit@@ 2@@ ).@@ in@@ Or@@ der@@ (); }
static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ From@@ Note@@ Data@@ (@@ byte@@ [] note@@ Data@@ ) throw@@ s org.eclipse.jgit.errors.ConfigInvalid@@ Exception { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); config.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ note@@ Data@@ , java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); java.lang.String u@@ id = config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, null@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ UUID@@ _@@ P@@ AR@@ AM@@ ); java.lang.String name = com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ config@@ .get@@ String@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ S@@ EC@@ T@@ ION@@ _@@ NAM@@ E, null@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Not@@ es.@@ NAM@@ E_@@ P@@ AR@@ AM@@ )); if (@@ u@@ id == null@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group@@ s for ac@@ count %@@ s@@ ' m@@ us@@ t b@@ e de@@ fin@@ ed name@@ ", "@@ an@@ d name@@ )); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ u@@ u@@ id@@ ), name); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Edit@@ Info> apply(@@ com.google.gerrit.server.@@ api.@@ change.@@ Fi@@ x@@ Resource fix@@ Resource@@ , java.lang.@@ Vo@@ id no@@ th@@ ing@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.@@ Revision@@ Resource revision@@ Resource = fix@@ Resource@@ .get@@ Revision@@ Resource@@ (); com.google.gerrit.reviewdb.client.Project.NameKey project = revision@@ Resource@@ .getProject@@ (); com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); com.google.gerrit.reviewdb.client.PatchSet patch@@ Set = revision@@ Resource@@ .get@@ PatchSet@@ (); org.eclipse.jgit.lib.ObjectId patchSet@@ Commit@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ patchSet@@ .get@@ Revision@@ ().get@@ ()); try (@@ org.eclipse.jgit.lib.Repository repo@@ sitor@@ y = git@@ Repository@@ Manager.@@ open@@ Repository(@@ project@@ )) { java.util.List<@@ com.google.gerrit.server.@@ edit.@@ t@@ re@@ e.@@ Tree@@ Mo@@ d@@ if@@ ic@@ ation@@ > t@@ ree@@ Mo@@ d@@ if@@ ic@@ ation@@ s = fix@@ Replace@@ ment@@ In@@ ter@@ p@@ ret@@ er.@@ to@@ Tree@@ Mo@@ d@@ if@@ ic@@ ation@@ s(@@ repo@@ sitor@@ y@@ , project@@ State@@ , patchSet@@ Commit@@ Id, fix@@ Resource@@ .get@@ Fi@@ x@@ Replace@@ ment@@ s()); com.google.gerrit.server.@@ edit.@@ Change@@ E@@ di@@ t change@@ E@@ di@@ t = change@@ Edit@@ Mo@@ d@@ if@@ i@@ er.@@ com@@ bin@@ e@@ With@@ Mo@@ d@@ if@@ i@@ ed@@ PatchSet@@ (repo@@ sitor@@ y@@ , revision@@ Resource@@ .get@@ Notes@@ (), patchSet@@ , t@@ ree@@ Mo@@ d@@ if@@ ic@@ ation@@ s); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (change@@ Edit@@ Info@@ , false@@ )); } catch (com.google.gerrit.server.@@ project.@@ Invalid@@ Change@@ O@@ per@@ ation@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ e.get@@ Message()); } }
com.google.gerrit.server.@@ api.@@ projects.@@ D@@ ashbo@@ ard@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.server.@@ api.@@ projects.@@ Project@@ Resource project, java.lang.String id@@ );
public com.google.gerrit.@@ serv@@ er@@ .@@ rest@@ i@@ con@@ fi@@ r@@ m@@ ed@@ Reviewer@@ s.@@ Ad@@ di@@ tion pre@@ pare@@ Ap@@ plic@@ ation@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Add@@ Reviewer@@ Input input@@ , boolean allow@@ Group@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.String review@@ er = input.@@ reviewer@@ ; com.google.gerrit.extensions.client.@@ Reviewer@@ State st@@ ate = input.@@ state@@ (); com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g not@@ if@@ y = input.@@ not@@ if@@ y@@ ; com.google.common.collect.List@@ Multimap@@ <@@ com.google.gerrit.extensions.api.changes.@@ Rec@@ ip@@ i@@ ent@@ Type@@ , com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s@@ To@@ No@@ t@@ if@@ y = null@@ ; try { account@@ s@@ To@@ No@@ t@@ if@@ y = not@@ if@@ y@@ Util.@@ res@@ ol@@ ve@@ Account@@ s(@@ input.@@ not@@ if@@ y@@ Detail@@ s); } catch (@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception e) { return f@@ ail@@ (@@ reviewer@@ , e.get@@ Message()); } boolean con@@ fi@@ r@@ m@@ ed@@ (); boolean allow@@ By@@ E@@ mai@@ l = project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .getProject@@ ()).@@ isE@@ n@@ able@@ Reviewer@@ By@@ Email@@ (); com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ore@@ (@@ add@@ Reviewer@@ s.@@ Ad@@ di@@ tion by@@ Account@@ Id = add@@ By@@ Account@@ Id(@@ reviewer@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ , allow@@ Group@@ , allow@@ By@@ Email@@ ); if (@@ by@@ Account@@ Id != null@@ ) { return by@@ Account@@ Id@@ ; } by@@ Account@@ (rsrc@@ .getProject@@ ()).@@ rest@@ i@@ ed@@ .@@ rest@@ ore@@ No@@ t@@ if@@ y@@ Reviewer@@ s.@@ Ad@@ di@@ tion wh@@ o@@ le@@ Group = add@@ Wh@@ o@@ le@@ Group@@ (@@ reviewer@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ , con@@ fi@@ r@@ m@@ ed@@ , allow@@ Group@@ , allow@@ By@@ Email@@ ); if (@@ wh@@ o@@ le@@ Group != null@@ ) { return wh@@ o@@ le@@ Group@@ ; } return add@@ By@@ Email@@ (@@ reviewer@@ , rsrc@@ , state@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ ); }
private java.lang.String create@@ Commit@@ Message@@ (@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> ori@@ gin@@ al@@ Member@@ s, java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id@@ >> updat@@ ed@@ Member@@ s, com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > ori@@ gin@@ al@@ Sub@@ group@@ s, java.util.@@ Optional@@ <@@ com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >> updat@@ ed@@ Sub@@ group@@ s) { java.lang.String su@@ mm@@ ary@@ Lin@@ e = (@@ group@@ Cre@@ ation.@@ is@@ P@@ res@@ ent@@ ()) ? ac@@ count@@ : ac@@ count : get@@ Commit@@ F@@ oo@@ ter@@ For@@ war@@ d@@ Sub@@ ject@@ (@@ o@@ in@@ er = new java.util.@@ String@@ J@@ o@@ in@@ er@@ o@@ in@@ er@@ ("@@ \n@@ ", "@@ \n@@ ", "@@ J@@ o@@ in@@ er.@@ set@@ E@@ mpty@@ ("@@ Value@@ "); get@@ Commit@@ F@@ oo@@ ter@@ For@@ R@@ en@@ ame@@ ()@@ .@@ P@@ res@@ ent@@ (@@ foo@@ ter@@ J@@ o@@ in@@ :@@ J@@ o@@ in@@ :@@ add@@ ed@@ Member@@ s@@ .@@ if@@ (("@@ Member@@ s new@@ Member@@ s) -@@ > get@@ Commit@@ F@@ oo@@ ter@@ s@@ For@@ Member@@ d@@ if@@ ic@@ ation@@ s(@@ ori@@ gin@@ al@@ Member@@ s, new@@ Member@@ s@@ )@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ J@@ o@@ in@@ er@@ :@@ add@@ ed@@ )); updat@@ ed@@ Sub@@ s@@ .@@ P@@ res@@ ent@@ (("@@ group@@ s@@ -@@ Sub@@ ject@@ : " + get@@ Commit@@ F@@ oo@@ ter@@ s@@ For@@ Sub@@ d@@ if@@ ic@@ ation@@ s(@@ ori@@ gin@@ al@@ Sub@@ group@@ s, new@@ Sub@@ group@@ s@@ )@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ J@@ o@@ in@@ er@@ :@@ add@@ :@@ foo@@ ter = foo@@ ter@@ in@@ er.@@ toString@@ (); return su@@ mm@@ ary@@ Lin@@ e foo@@ ter@@ ; }
@java.lang.Override protected void run() throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.@@ projects.@@ Head@@ Input inpu@@ t = new com.google.gerrit.extensions.api.@@ projects.@@ Head@@ Input@@ (); input.@@ re@@ f = new@@ Head@@ ; try { set@@ Head@@ .@@ appl@@ y@@ (@@ new com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource@@ (project@@ , user@@ ), input@@ ); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw di@@ e@@ (@@ e); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Comment@@ Info apply(@@ com.google.gerrit.extensions.common.@@ Comment@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ ()@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
private java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > get@@ Ch@@ ild@@ ren@@ For@@ Re@@ parent@@ ing@@ (com.google.gerrit.server.@@ project.@@ Project@@ State parent@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > ch@@ ild@@ Project@@ s = new java.util.ArrayList<@@ >(); final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > ex@@ clu@@ de@@ d = new java.util.Array@@ List(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ .@@ size()); for (com.google.gerrit.server.@@ project.@@ Project@@ State ex@@ clu@@ ded@@ Ch@@ il@@ d : ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ ) { ex@@ clu@@ ded@@ .@@ add(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ .getProject@@ ().get@@ NameKey@@ ()); } final java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > au@@ to@@ m@@ ati@@ call@@ Ex@@ clu@@ de@@ d = new java.util.Array@@ List(@@ ex@@ clu@@ ded@@ Ch@@ ild@@ ren@@ .@@ size()); if ((@@ new@@ Parent@@ Key@@ ) != null@@ ) { au@@ to@@ m@@ ati@@ call@@ Ex@@ clu@@ ded@@ .@@ add@@ All@@ (get@@ Parent@@ s@@ (@@ new@@ Parent@@ Key@@ )); } for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info ch@@ il@@ d : list@@ Ch@@ ild@@ Project@@ s.@@ appl@@ y@@ (@@ new com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ vi@@ sible@@ (@@ parent@@ , user@@ ))) { final com.google.gerrit.reviewdb.client.Project.NameKey ch@@ ild@@ Name = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ ch@@ il@@ d.@@ name); if (!(@@ ex@@ clu@@ ded@@ ded@@ Ch@@ ild@@ .@@ contains(@@ ch@@ ild@@ Name@@ ))) { if (!(@@ au@@ to@@ m@@ ati@@ call@@ Ex@@ clu@@ ded@@ .@@ contains(@@ ch@@ ild@@ Name@@ ))) { ch@@ ild@@ Project@@ s.add(@@ ch@@ ild@@ Name); } } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ((((@@ ((@@ ("@@ ex@@ clu@@ de@@ d ex@@ clu@@ de@@ d " + ch@@ ild@@ Name) + " re@@ b@@ ec@@ au@@ se it is th@@ e pa@@ ren@@ t of th@@ e new pa@@ ren@@ t ") + (@@ new@@ Parent@@ Key@@ )) + "@@ .@@ ")); } } return ch@@ ild@@ Project@@ s; }
public com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Info for@@ m@@ at(@@ com.google.gerrit.common.data.@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment c@@ a@@ ) { com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Ag@@ ree@@ ment@@ Info@@ (); info.@@ name = c@@ a@@ .getName@@ (); info.@@ des@@ crip@@ tion = c@@ a@@ .get@@ Description@@ (); info.@@ ur@@ l = a@@ .get@@ Ag@@ ree@@ ment@@ Url@@ (); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce au@@ to@@ V@@ er@@ if@@ y@@ Group = c@@ a@@ .get@@ Au@@ to@@ V@@ er@@ if@@ y@@ (); if ((@@ au@@ to@@ V@@ er@@ if@@ y@@ Group != null@@ ) && (@@ self@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = id@@ ent@@ if@@ i@@ ed@@ User@@ Factory.create@@ (@@ self@@ .get@@ ().get@@ Account@@ Id()); try { com.google.gerrit.server.account.@@ Group@@ Control g@@ c = g@@ ener@@ ic@@ Group@@ Control@@ Factory.@@ control@@ For@@ (user@@ , au@@ to@@ V@@ er@@ if@@ y@@ Group@@ .get@@ UUID@@ ()); com.google.gerrit.@@ server@@ .@@ rest@@ i@@ ap@@ i@@ er.@@ group@@ Group@@ Resource g@@ roup = new com.google.gerrit.@@ server@@ .@@ rest@@ ore@@ group@@ .@@ Group@@ Resource@@ (@@ g@@ c@@ ); info.@@ au@@ to@@ V@@ er@@ if@@ y@@ Group = group@@ Json@@ .@@ for@@ m@@ at(@@ group@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception | com.google.gwtorm.server.OrmException e) { com.google.gerrit.@@ server@@ .@@ config.@@ rest@@ i@@ o@@ config.@@ Ag@@ ree@@ ment@@ Js@@ on.@@ log.warn@@ ((((@@ ("@@ Cannot ac@@ count " + (@@ au@@ to@@ V@@ er@@ if@@ y@@ Group@@ .getName@@ ())) + "@@ \@@ " do@@ es not ex@@ ist@@ , ref@@ eren@@ ce@@ d in C@@ L@@ A ") + (c@@ a@@ .getName@@ ())) + "@@ \"@@ ")); } } return info@@ ; }
public static com.google.gerrit.server.@@ Current@@ User rest@@ ri@@ ed@@ User@@ .@@ D@@ ashbo@@ ard@@ Resource project@@ Default@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) { return new com.google.gerrit.server.@@ Current@@ User user@@ (@@ rest@@ ore@@ D@@ ashbo@@ ard@@ Resource@@ (project@@ State@@ , user@@ , null@@ , null@@ , null@@ , true@@ ); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ R@@ o@@ bot@@ Comment@@ Info apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ R@@ o@@ bot@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) throw@@ s com.google.gwtorm.server.OrmException { return json@@ .@@ for@@ m@@ at(@@ resource@@ .get@@ Group@@ ()); }
@org.junit.Test public void create@@ Project@@ With@@ N@@ on@@ Ex@@ ist@@ ing@@ Owner@@ _@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input in = new com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Input@@ (); in.@@ name = name@@ (@@ "@@ new@@ Project@@ Name@@ "); in.@@ owner@@ s = java.util.Collections.singleton@@ List@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ -@@ account@@ "); assert@@ Create@@ F@@ ail@@ s(@@ in@@ , com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception@@ .@@ class@@ ); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Option@@ (@@ name = "--@@ has@@ -@@ ac@@ l@@ -@@ for@@ ", met@@ a@@ V@@ a@@ r = "@@ G@@ RO@@ U@@ P@@ ", us@@ ag@@ e = on@@ l@@ y project@@ s on wh@@ i@@ ch ac@@ ces@@ s ri@@ ght@@ s for this count@@ count@@ ar@@ e di@@ re@@ ct@@ l@@ y as@@ signe@@ d public void set@@ Group@@ U@@ u@@ id(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) { this@@ .group@@ U@@ u@@ id = group@@ U@@ u@@ id@@ ; }
com.google.gerrit.server.@@ api.@@ projects.@@ Tag@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.server.@@ api.@@ projects.@@ Project@@ Resource project, java.lang.String ref@@ );
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ group@@ .@@ Add@@ Sub@@ Input in = new com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Add@@ s.@@ Input in = new com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Add@@ Add@@ Member@@ s.@@ Input@@ (); in@@ .group@@ s = com.google.common.collect.Immutable@@ List.@@ of@@ (id@@ ); try { java.util.List<@@ com.google.gerrit.extensions.common.@@ Group@@ Info> li@@ s@@ t = add@@ Sub@@ group@@ s.@@ apply(@@ resource@@ , in@@ ); if ((@@ li@@ s@@ t.@@ size@@ ()) == 1@@ ) { return list@@ .get(@@ 0); } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Sub@@ group@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gwtorm.server.OrmException { return get@@ .get().@@ apply(@@ resource@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.@@ server@@ .@@ rest@@ i@@ c.@@ Revision@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { java.lang.String u@@ id = id@@ .get@@ (); com.google.gerrit.server.notedb.Change@@ Note@@ s note@@ s = rev@@ .get@@ Notes@@ (); for (@@ com.google.gerrit.reviewdb.client.@@ Comm@@ ent c : comment@@ s@@ Util.@@ publi@@ sh@@ ed@@ By@@ PatchSet@@ (db@@ Provider@@ .get(), notes@@ , rev@@ .get@@ PatchSet@@ ().get@@ Id@@ ())) { if (@@ u@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ id@@ )) { return new com.google.gerrit.@@ server@@ .@@ rest@@ i@@ c.@@ Edit@@ (@@ change.@@ Comment@@ Resource@@ (@@ rev@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public static com.google.gerrit.server.@@ api.@@ File@@ Resource create@@ (com.google.gerrit.server.git.@@ Git@@ Repository@@ Manag@@ er repo@@ Manag@@ er, com.google.gerrit.server.project.Project@@ State project@@ State@@ , org.eclipse.jgit.lib.ObjectId rev@@ , java.lang.String path@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ .getName@@ Key@@ ())@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.Rev@@ T@@ re@@ e t@@ re@@ e = rw.@@ parse@@ Tree@@ (@@ rev@@ ); if ((@@ org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k@@ .@@ for@@ Path@@ (repo@@ , path@@ , t@@ ree@@ )) != null@@ ) { return new com.google.gerrit.server.git.@@ Merge@@ able@@ File@@ Resource@@ (project@@ State@@ , rev@@ , path@@ ); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (p@@ ath@@ )); } }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.sql.@@ SQL@@ Exception { try (@@ org.eclipse.jgit.lib.Repository g@@ it = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = new com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update@@ (com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ I@@ S@@ AB@@ L@@ ED@@ , all@@ User@@ s@@ Name, git@@ )) { m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (@@ server@@ User@@ ); m@@ d@@ .get@@ Commit@@ ter@@ ().set@@ Commit@@ ter@@ (@@ server@@ User@@ ); m@@ d.@@ set@@ Message@@ (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 6@@ 4@@ .@@ CO@@ M@@ M@@ IT@@ _M@@ S@@ G@@ ); com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); com.google.gerrit.common.data.@@ Access@@ Sec@@ tion group@@ s = config@@ .get@@ Access@@ Section@@ (((@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ G@@ RO@@ U@@ P@@ S@@ ) + "@@ *@@ "), true@@ ); com.google.gerrit.server.@@ schema.@@ Ac@@ l@@ Util@@ .g@@ ran@@ t(@@ config@@ , group@@ s, Permission@@ .@@ RE@@ AD@@ , false@@ , true@@ , sy@@ st@@ em@@ Group@@ Back@@ end@@ .get@@ Group@@ (com.google.gerrit.server.@@ schema.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ )); config.@@ commit@@ (m@@ d); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception@@ ("@@ can@@ not g@@ ran@@ t rea@@ d per@@ mission@@ s on ac@@ count@@ ", e); } }
private com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return d@@ ashbo@@ ard@@ s.@@ parse@@ (@@ com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (id@@ )); }
@java.lang.Override public void set@@ Default@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.extensions.common.@@ Set@@ D@@ ashbo@@ ard@@ Input inpu@@ t = new com.google.gerrit.extensions.common.@@ D@@ ashbo@@ ard@@ Input@@ (); input.@@ id = id@@ ; try { se@@ t.@@ apply(@@ com.google.gerrit.@@ serv@@ er@@ .@@ rest@@ ap@@ i@@ .@@ project.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (project@@ State@@ (), project@@ .getUser@@ ()), input@@ ); } catch (@@ java.lang.Exception e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ E@@ rror %s default d@@ ashbo@@ ar@@ d ((@@ id@@ ) != null ? "@@ set@@ " : "@@ remove@@ ")); throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception(@@ msg@@ , e); } }
private com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException { try { return tag@@ s.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (ref@@ )); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot rest@@ ri@@ c@@ ted@@ ", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ ().@@ or@@ E@@ l@@ Throw@@ (@@ group@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); inpu@@ t = com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ group@@ Member@@ s.@@ Input.@@ init@@ (in@@ put@@ ); final com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = resource@@ .get@@ Control@@ (); if (!(@@ contro@@ l.@@ can@@ Remo@@ ve@@ Member@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception@@ (("@@ can@@ not de@@ le@@ te me@@ mber@@ s f@@ ro@@ m ac@@ ro@@ m int@@ er@@ n@@ al@@ Group@@ .getName@@ ()))); } java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> me@@ mber@@ s@@ To@@ Remo@@ v@@ e = new java.util.Hash@@ Set<@@ >(); for (java.lang.String name@@ Or@@ E@@ mai@@ l : input.@@ me@@ mber@@ s) { com.google.gerrit.reviewdb.client.@@ Account a = account@@ s.@@ parse@@ (@@ name@@ ).get@@ Account@@ (); me@@ mber@@ s@@ To@@ Remo@@ v@@ e.@@ add(@@ a@@ .getId()); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); try { remove@@ Member@@ s(@@ group@@ U@@ u@@ id@@ , me@@ mber@@ s@@ To@@ Remo@@ ve@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ in@@ vali@@ d group@@ U@@ u@@ id@@ enti@@ c@@ ation for change %@@ d group@@ U@@ u@@ id@@ ", e); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public void owner@@ (java.lang.String owner@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { ap@@ i@@ .group@@ s.@@ Owner@@ Input in = new com.google.gerrit.extensions.@@ ap@@ i@@ .group@@ s.@@ Owner@@ Input@@ (); in.@@ ow@@ ne@@ r = owner@@ ; try { put@@ Ow@@ n@@ er.@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot pu@@ t account@@ ", e); } }
@org.junit.Test public void re@@ ject@@ Wh@@ en@@ F@@ e@@ atu@@ re@@ I@@ s@@ Dis@@ able@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ notes@@ M@@ igration.@@ read@@ Changes@@ ()).@@ is@@ True@@ (); com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input con@@ f = new com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input@@ (); f.@@ enable@@ Reviewer@@ By@@ E@@ mai@@ l = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ F@@ AL@@ S@@ E@@ ; gApi.@@ project@@ s().@@ name@@ (project@@ .get@@ ()).@@ config@@ (@@ con@@ f@@ ); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Add@@ Reviewer@@ Result result = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ add@@ Reviewer@@ ("@@ in@@ vali@@ d B@@ a@@ r <@@ foo@@ .@@ b@@ ar@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ .@@ com@@ > assert@@ Th@@ at(@@ result.@@ error@@ ).@@ isEqualTo@@ ("@@ in@@ vali@@ d B@@ a@@ r foo@@ .@@ b@@ ar@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ .@@ com@@ > do@@ es not id@@ ent@@ if@@ y a regist@@ er@@ ed user or count@@ ", ac@@ cess@@ ed@@ ); assert@@ Th@@ at(@@ result.@@ reviewer@@ s).@@ isNull@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource@@ , ?@@ > create@@ (@@ com.google.gerrit.@@ serv@@ i@@ s.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { if (@@ server@@ .@@ rest@@ Session@@ .@@ contains(@@ project.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return create@@ Default@@ (); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Resource parse@@ (@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ com.google.gerrit.server.@@ ap@@ i@@ .@@ config.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return com.google.gerrit.server.account.@@ Get@@ D@@ ashbo@@ ard@@ s.@@ rest@@ ore@@ Change@@ Notes@@ (@@ parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ; try { in@@ fo = com.google.gerrit.server.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collection@@ .@@ new@@ D@@ ashbo@@ ard@@ Info@@ (id@@ .get()); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Info apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource resource@@ ) { return new com.google.gerrit.server.project.@@ Config@@ Info@@ Im@@ pl@@ (@@ server@@ Sig@@ ned@@ Push@@ , resource@@ .getProject@@ State@@ (), resource@@ .getUser@@ (), config@@ , plugin@@ Config@@ Ent@@ ri@@ es@@ , cfg@@ Factory@@ , all@@ Project@@ s, ui@@ Action@@ s, view@@ s); }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); try { com.google.gerrit.server.account.@@ Group@@ Control c = control@@ Factory.@@ vali@@ date@@ For@@ (@@ group@@ .get@@ Owner@@ Group@@ UUID@@ ()); return json@@ .@@ for@@ m@@ at@@ (c@@ .get@@ Group@@ ()); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Comment@@ Info apply(@@ com.google.gerrit.extensions.common.@@ Comment@@ Info apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return comment@@ Json@@ .get@@ ()@@ .@@ new@@ Comment@@ Format@@ ter@@ ()@@ .@@ for@@ m@@ at(@@ rsrc@@ .get@@ Comment@@ ()); }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ Group@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) throw@@ s java.io.IOException { java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); pro@@ ble@@ m@@ s.@@ add@@ All(@@ check@@ C@@ le@@ (@@ g@@ , by@@ UUID@@ )); if (((@@ by@@ UUID@@ .get@@ Owner@@ Group@@ UUID@@ ())) == null@@ ) && ((@@ group@@ Back@@ end@@ .get(@@ g@@ .get@@ Owner@@ Group@@ UUID@@ ())) == null@@ )) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ N@@ o %s (@@ %@@ s) h@@ a@@ s n@@ on@@ ex@@ ist@@ ent ow@@ ne@@ r account@@ : %@@ s", ac@@ tive@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ (), g@@ .get@@ Owner@@ Group@@ UUID@@ ())); } for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : g@@ .get@@ Sub@@ group@@ s()) { if (((@@ by@@ UUID@@ .get(@@ sub@@ U@@ u@@ id@@ )) == null@@ ) && ((@@ group@@ Back@@ end@@ .get(@@ sub@@ U@@ u@@ id@@ )) == null@@ )) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ Group@@ (@@ %@@ s) h@@ a@@ s on@@ ex@@ ist@@ sub@@ g@@ roup sub@@ g@@ roup %@@ s", sub@@ g@@ roup %@@ s@@ (), sub@@ U@@ u@@ id@@ )); } for (@@ com.google.gerrit.reviewdb.client.Account.Id id : g@@ .get@@ Member@@ s().@@ as@@ List@@ ()) { com.google.gerrit.reviewdb.client.@@ Account account@@ ; try { ac@@ count = account@@ s.get(@@ id@@ ); } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { pro@@ ble@@ m@@ s.add(@@ error@@ ("@@ s@@ h@@ a@@ s me@@ mb@@ er %s w@@ it@@ h in@@ it@@ h config@@ ur@@ ation@@ : %@@ s", g@@ .getName@@ (), g@@ .get@@ Group@@ UUID@@ ())); continue@@ ; } if (@@ ac@@ count == null@@ ) { pro@@ ble@@ m@@ s.add(@@ error@@ (@@ %@@ s) h@@ a@@ s on@@ ex@@ ist@@ s@@ g@@ .get@@ Group@@ UUID@@ (), id@@ )); } } return pro@@ ble@@ ms@@ ; }
private java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> check@@ C@@ le@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group r@@ oo@@ t@@ , java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > by@@ UUID@@ ) { java.util.List<@@ com.google.gerrit.extensions.api.@@ config.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Check@@ Info.@@ Con@@ si@@ st@@ en@@ c@@ y@@ Pro@@ ble@@ m@@ Info> pro@@ ble@@ m@@ s = new java.util.ArrayList<@@ >(); java.util.Set<@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ > to@@ do = new java.util.@@ Link@@ ed@@ Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ > se@@ en = new java.util.Hash@@ Set<@@ >(); to@@ do@@ .@@ add(@@ r@@ oo@@ t@@ ); while (!(@@ to@@ do@@ .@@ isEmpty())) { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group t = to@@ .@@ iter@@ ator@@ ().@@ next@@ (); to@@ .@@ do@@ (t@@ ); if (@@ se@@ en@@ .@@ contains(@@ t@@ )) { continue@@ ; } se@@ en@@ .@@ add(@@ t@@ ); for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : t@@ .get@@ Sub@@ group@@ s()) { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group g = by@@ UUID@@ .get(@@ sub@@ U@@ u@@ id@@ ); if (@@ g == null@@ ) { continue@@ ; } if (@@ java.util.@@ Object@@ s.@@ equals(@@ g@@ r@@ oo@@ t@@ )) { pro@@ ble@@ m@@ s.add(@@ warn@@ ing@@ ("@@ Fai@@ le@@ d to a c@@ le@@ d to (@@ %@@ s) p@@ o@@ int@@ s to a@@ s group@@ s sub@@ r@@ oo@@ t@@ .getName@@ (), r@@ oo@@ t@@ .get@@ Group@@ UUID@@ (), t@@ .get@@ Group@@ UUID@@ ())); } } } return pro@@ ble@@ ms@@ ; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Info apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Tag@@ Resource resource@@ ) { return resource@@ .get@@ Tag@@ Info@@ (); }
private com.google.gerrit.server.@@ Current@@ User rest@@ ore@@ (com.google.gerrit.server.@@ project.@@ Project@@ State parent@@ , com.google.gerrit.server.project.Project@@ State current@@ , com.google.gerrit.server.@@ Current@@ User user@@ , com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Object@@ Exception, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception { java.lang.String re@@ f = com.google.gerrit.server.@@ Current@@ User user@@ .get@@ ().get@@ Account@@ Id(); if ((@@ !(@@ user@@ .@@ can@@ Se@@ e@@ Ref@@ Nam@@ es.@@ RE@@ AD@@ )) && (@@ project.@@ can@@ Se@@ e@@ Ref@@ s@@ Collec@@ tion.@@ n@@ or@@ ma@@ li@@ ze@@ D@@ ashbo@@ ard@@ Ref@@ (info.@@ ref@@ ))) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ parent@@ .getName@@ Key@@ ()).@@ ref@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ in@@ vali@@ d ref@@ : " + id@@ )); } if (!(@@ org.eclipse.jgit.lib.@@ Repositor@@ y.@@ is@@ Valid@@ Ref@@ Name(@@ ref@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ info.@@ id@@ ); } try (@@ org.eclipse.jgit.lib.Repository g@@ it = git@@ Manager.@@ open@@ Repository(@@ parent@@ .getName@@ Key@@ ())) { org.eclipse.jgit.lib.ObjectId ob@@ j@@ Id = git.@@ res@@ ol@@ ve@@ (((@@ re@@ f + "@@ :@@ ") + (info.@@ path@@ ))); if (@@ ob@@ j@@ Id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ info.@@ id@@ ); } org.eclipse.jgit.lib.@@ B@@ lob@@ B@@ as@@ ed@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ B@@ as@@ ed@@ Config@@ (@@ null@@ , git@@ , ob@@ j@@ Id); return new com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ D@@ ashbo@@ ard@@ Resource@@ (c@@ urrent@@ , user@@ , info.@@ path@@ , false@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ info.@@ id@@ ); } }
com.google.gerrit.server.@@ api.@@ projects.@@ Commit@@ Api@@ Imp@@ l create@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input r@@ );
@org.junit.Test public void id@@ In@@ M@@ u@@ st@@ Be@@ De@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ s@@ From@@ Valid@@ Group@@ (@@ expected@@ Excepti@@ on.@@ expec@@ t(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ user@@ s of th@@ e count@@ ", user@@ s@@ -@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ null@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Y@@ Y@@ Y@@ ", group@@ group@@ group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ pa@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ null@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ Group@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Of(@@ expected@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ s@@ -@@ Y@@ G@@ erri@@ t group@@ s@@ "); group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Can@@ not@@ Be@@ To@@ E@@ mpty@@ String@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ 4@@ 2 = owner@@ s com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ "@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ Of(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ s@@ -@@ X@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ : group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Can@@ not@@ Be@@ To@@ E@@ mpty@@ String@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ s@@ 4@@ 2 = owner@@ s com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ db.@@ db.@@ db.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ "@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ ", count@@ , user@@ s@@ -@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ n@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void id@@ In@@ M@@ u@@ st@@ Not@@ Be@@ N@@ e@@ g@@ ative@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ s@@ -@@ 5 = owner@@ s = expected@@ Excepti@@ on.@@ expec@@ t(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ ", user@@ s@@ -@@ X@@ X@@ X@@ Be@@ htag@@ htag@@ htag@@ htag@@ htag@@ htag@@ htag@@ htag@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ In@@ M@@ u@@ st@@ Be@@ De@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ 4@@ 2 expected@@ Excepti@@ on.@@ expec@@ t(@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ G@@ erri@@ t UU@@ I@@ D of th@@ e count@@ ", user@@ s@@ -@@ X@@ Y@@ , com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); }
@org.junit.Test public void name@@ In@@ Config@@ Ma@@ y@@ Be@@ Un@@ de@@ fin@@ ed@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = 4@@ 2 owner@@ s com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); assert@@ Th@@ at(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ Name@@ ()).@@ isEmpty@@ (); }
@org.junit.Test public void name@@ Can@@ not@@ Be@@ To@@ Null@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ db.@@ group@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ group@@ s@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ null@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update = create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ ", user@@ s@@ -@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ X@@ _@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@org.junit.Test public void name@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ pa@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ NameKey@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ ("@@ "@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ stance@@ Of(@@ expected@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e count@@ s@@ -@@ Y@@ ", group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
private void po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ , java.lang.String file@@ Content@@ ) throw@@ s java.lang.Exception { test@@ Repositor@@ y.@@ branch@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ Group@@ s(@@ u@@ id@@ )).@@ commit@@ ().@@ message@@ ("@@ Account ac@@ count for con@@ fig file@@ Content@@ ).@@ create@@ (); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { if (!(@@ all@@ User@@ s.@@ equals(@@ re@@ ce@@ ive@@ Ev@@ ent.@@ project@@ .getName@@ Key@@ ()))) { return java.util.Collections.@@ empty@@ List(); } if (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ().@@ startsWith@@ (@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ )) { return java.util.Collections.@@ empty@@ List(); } if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Group@@ (re@@ ce@@ ive@@ Ev@@ ent.@@ command@@ .getRef@@ Name@@ ())) { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ not allow@@ ed } return java.util.Collections.@@ empty@@ List(); }
private static com.google.gerrit.@@ serv@@ er@@ .@@ rest@@ i@@ st@@ Review@@ Comment@@ Set@@ E@@ n@@ try create@@ (java.lang.String file@@ name, int patchSet@@ Id, java.lang.@@ Integ@@ er line@@ , com.google.gerrit.extensions.client.@@ Si@@ de side@@ , com.google.common.@@ has@@ h@@ .@@ Hash@@ Co@@ de message@@ , com.google.gerrit.reviewdb.client.@@ Comm@@ ent.@@ R@@ ang@@ e r@@ ange@@ ) { return new com.google.gerrit.server.change.@@ Au@@ to@@ Value@@ _@@ Po@@ st@@ Review@@ _@@ Comment@@ Set@@ (@@ file@@ name, patchSet@@ Id, line@@ , side@@ , message@@ , r@@ ange@@ ); }
public void dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Account@@ s@@ From@@ (@@ actor@@ , remo@@ v@@ ed@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Un@@ able to lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m account@@ s", e); } }
public void dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> remo@@ v@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Group@@ s@@ From@@ (@@ actor@@ , remo@@ v@@ ed@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Un@@ able to lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m account@@ ", e); } }
public void dis@@ patch@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > add@@ ed@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ actor@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Cannot lo@@ g ad@@ d account@@ s to count@@ ", e); } }
@java.lang.Override public java.lang.String apply(@@ java.lang.String input@@ ) { return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ rsrc@@ .getChange@@ ().get@@ To@@ pic@@ ()); }
private void load@@ Plugin@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ ) { plugin@@ Config@@ s = new java.util.Hash@@ Map@@ (); for (java.lang.String p@@ lu@@ g@@ in : r@@ c.get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ )) { org.eclipse.jgit.lib.@@ Config plugin@@ Config = new org.eclipse.jgit.lib.@@ Config@@ (); plugin@@ Config@@ s.@@ put(@@ plugin@@ , plugin@@ Config@@ ); for (java.lang.String name : r@@ c.get@@ Nam@@ es@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ )) { java.lang.String valu@@ e = r@@ c.get@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name); java.lang.String group@@ Name = com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ .@@ ext@@ r@@ act@@ Group@@ Name(@@ valu@@ e); if (@@ group@@ Name != null@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ group@@ Name); if (re@@ f == null@@ ) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((@@ ("@@ g@@ roup " + group@@ Name) + " in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAM@@ E@@ )@@ ))); } r@@ c.@@ set@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, valu@@ e); } plugin@@ Config.@@ set@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , name, java.util.Array@@ s.@@ as@@ List@@ (r@@ c.get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name@@ ))); } }
private void load@@ Permission@@ Rule@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String va@@ r@@ Name, java.util.Map<java.lang.String, com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ s@@ By@@ Name, com.google.gerrit.common.data.@@ Per@@ mis@@ sion per@@ m@@ , boolean use@@ R@@ ange@@ ) { for (java.lang.String rule@@ Strin@@ g : r@@ c.get@@ String@@ List@@ (s@@ ection@@ , sub@@ s@@ ection@@ , va@@ r@@ Name@@ )) { com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e rule@@ ; try { r@@ ul@@ e = com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ from@@ String@@ (r@@ ule@@ String@@ , use@@ R@@ ange@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception not@@ Rule@@ ) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((@@ (("@@ In@@ vali@@ d r@@ ul@@ e in " + s@@ ection@@ ) + (@@ sub@@ s@@ ec@@ tion != null ? "@@ .@@ " + sub@@ s@@ ec@@ tion : "@@ ")) + "@@ .@@ ") + va@@ r@@ Name) + (@@ not@@ Rule@@ .get@@ Message@@ ())@@ ))); continue@@ ; } com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ rule@@ .get@@ Group@@ ().get@@ Name()); if (re@@ f == null@@ ) { re@@ f = rule@@ .get@@ Group@@ (); group@@ s@@ By@@ Name.@@ put(@@ ref@@ .getName@@ (), ref@@ ); error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , ((@@ ("@@ g@@ in " + (ref@@ .getName@@ ())) + "@@ : not in ") + (@@ Group@@ List.@@ F@@ IL@@ E_@@ NAM@@ E@@ )@@ ))); } rule@@ .set@@ Group@@ (ref@@ ); per@@ m.@@ add(@@ rule@@ ); } }
private void save@@ Plugin@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > k@@ e@@ p@@ Group@@ s) { java.util.List<java.lang.String> ex@@ ist@@ ing = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ (r@@ c.get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ )); for (java.lang.String name : ex@@ ist@@ ing@@ ) { r@@ c.@@ un@@ set@@ Section@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , name); } for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, org.eclipse.jgit.lib.@@ Config@@ > e : plugin@@ Config@@ s.@@ en@@ try@@ Set@@ ()) { java.lang.String p@@ lu@@ g@@ in = e.get@@ Key@@ (); org.eclipse.jgit.lib.@@ Config plugin@@ Config = e.get@@ Value@@ (); for (java.lang.String name : plugin@@ Config@@ .get@@ Nam@@ es@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ )) { java.lang.String valu@@ e = plugin@@ Config@@ .get@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name); java.lang.String group@@ Name = com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ .@@ ext@@ r@@ act@@ Group@@ Name(@@ valu@@ e); if (@@ group@@ Name != null@@ ) { com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = group@@ s@@ By@@ Name@@ .get(@@ group@@ Name); if ((@@ re@@ f != null@@ ) && ((@@ ref@@ .get@@ UUID@@ ()) != null@@ )) { k@@ e@@ p@@ ref@@ s.add(@@ ref@@ .get@@ UUID@@ ()); plugin@@ Config.@@ set@@ String@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, ("@@ name@@ \"@@ " + (ref@@ .getName@@ ()))); } } r@@ c.@@ set@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name, java.util.Array@@ s.@@ as@@ List(@@ plugin@@ Config@@ .get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ , name@@ ))); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Add@@ Member@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ c@@ at(@@ resource@@ .get@@ Member@@ s@@ ()).@@ isEqualTo(@@ resource@@ .get@@ Input@@ ()); return delete@@ .get().@@ apply(@@ resource@@ , in@@ ); }
public com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce get@@ Group@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ) { return check@@ Not@@ Null@@ (@@ u@@ u@@ id@@ s.get(@@ u@@ id@@ ), "@@ mis@@ s@@ ing not fo@@ und@@ u@@ u@@ id@@ .get()); }
public static com.google.gerrit.server.git.@@ Group@@ Lis@@ t parse@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String text@@ , com.google.gerrit.server.git.@@ Validation@@ Error@@ .@@ S@@ in@@ k error@@ s) throw@@ s java.io.IOException { java.util.List<@@ com.google.gerrit.server.git.@@ Row@@ > row@@ s = com.google.gerrit.server.git.@@ Group@@ List.@@ parse@@ (t@@ ext@@ , com.google.gerrit.server.git.@@ Group@@ List.@@ F@@ IL@@ E_@@ NAM@@ E, com.google.gerrit.server.git.@@ T@@ R@@ I@@ M@@ , com.google.gerrit.server.git.@@ T@@ R@@ I@@ M@@ , error@@ s); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > group@@ s@@ By@@ UU@@ I@@ D = new java.util.Hash@@ Map@@ (@@ row@@ s.@@ size()); for (com.google.gerrit.server.git.@@ R@@ o@@ w ro@@ w : row@@ s) { if ((@@ row@@ .@@ le@@ f@@ t@@ ) == null@@ ) { com.google.gerrit.server.git.@@ Group@@ List.@@ log.warn@@ ("@@ Cannot fi@@ el@@ d in ac@@ k for {@@ }@@ : {@@ }@@ ", project, text@@ ); continue@@ ; } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ row@@ .@@ le@@ f@@ t@@ ); java.lang.String name = row@@ .@@ ri@@ ght@@ ; com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ u@@ id@@ , name); group@@ s@@ By@@ UUID@@ .@@ put(@@ u@@ id@@ , ref@@ ); } return new com.google.gerrit.server.git.@@ Group@@ List(@@ group@@ s@@ By@@ UUID@@ ); }
private static java.lang.String get@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Name@@ Message@@ (java.lang.String group@@ Name, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sy@@ st@@ em@@ Group@@ U@@ u@@ id@@ ) { return java.lang.String@@ .@@ for@@ m@@ at(@@ ("@@ ("@@ ("@@ ("@@ ("@@ ("@@ G@@ erri@@ t configure@@ d name '@@ %@@ s@@ ' for sy@@ ste@@ m ac@@ '@@ %@@ s@@ '@@ ", name, b@@ ig@@ u@@ ou@@ s " + (("@@ th@@ e name '@@ %@@ s@@ ' of ex@@ ist@@ ing ac@@ count '@@ %@@ s@@ '@@ " + (@@ P@@ le@@ ase remove@@ /@@ change th@@ e for group@@ s.@@ %@@ s@@ "), name in " + g@@ errit.@@ config@@ . group@@ Name, sy@@ st@@ em@@ Group@@ U@@ u@@ id@@ .get(), group@@ Name, group@@ U@@ u@@ id@@ .get(), sy@@ st@@ em@@ Group@@ U@@ u@@ id@@ .get()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ group@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); return com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ group@@ .get@@ Description@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gwtorm.server.OrmException { if (account@@ Patch@@ Review@@ Store@@ .get().@@ mar@@ k@@ Review@@ ed@@ (@@ resource@@ .get@@ Patch@@ Key@@ ().get@@ Parent@@ Key@@ (), resource@@ .getAccount@@ Id(), resource@@ .get@@ Patch@@ Key@@ ().get@@ File@@ Name@@ ())) { return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ cre@@ ated@@ ("@@ "); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Edit@@ Info input@@ ) throw@@ s com.google.gwtorm.server.OrmException { return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, java.io.IOException { if (!(@@ rsrc@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to in@@ de@@ x ac@@ count group@@ "); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = rsrc@@ .get@@ Group@@ ().get@@ Group@@ UUID@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ In@@ ternal@@ Group@@ ())) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Group No@@ t Al@@ low@@ ed@@ : %@@ s", group@@ U@@ u@@ id@@ .get@@ ())); } java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > g@@ roup = group@@ Cache@@ .get(@@ group@@ U@@ u@@ id@@ ); if (@@ group@@ .is@@ P@@ res@@ ent@@ ()) { group@@ Cache.@@ e@@ vi@@ ct@@ (@@ group@@ .get@@ ().get@@ UUID@@ (), group@@ .get@@ ().get@@ Id(), group@@ .get@@ ().get@@ NameKey@@ ()); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
public static void assert@@ Group@@ s(@@ java.lang.I@@ terable@@ <java.lang.String> expected@@ , java.util.@@ Set@@ <java.lang.String> act@@ u@@ al@@ ) { for (java.lang.String g : expected@@ ) { assert@@ With@@ Message@@ (("@@ in@@ vali@@ d g@@ )).@@ th@@ at(@@ act@@ u@@ al@@ .@@ remove@@ (@@ g@@ )).@@ is@@ True@@ (); } assert@@ With@@ Message@@ (("@@ group@@ s@@ : " + act@@ u@@ al@@ )).@@ th@@ at(@@ act@@ u@@ al@@ ).@@ isEmpty@@ (); }
public com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ Project@@ Access@@ Info apply(@@ com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ name@@ Key@@ .get()); } return appl@@ y@@ (@@ new com.google.gerrit.server.@@ api.@@ rest@@ i@@ .@@ project.@@ Project@@ Resource@@ (@@ state@@ , user@@ .get@@ ())); }
private com.google.gerrit.extensions.common.@@ Group@@ Info load@@ Group@@ (@@ java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ , com.google.gerrit.extensions.common.@@ Group@@ Info> vi@@ sible@@ Group@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.@@ Group@@ Info g@@ roup = vi@@ sible@@ Group@@ s.get(@@ id@@ ); if (@@ g@@ roup == null@@ ) { try { com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = group@@ Control@@ Factory.@@ control@@ For@@ (id@@ ); g@@ roup = com.google.gerrit.@@ server@@ .@@ rest@@ i@@ er.@@ Status.@@ IN@@ VI@@ S@@ I@@ B@@ L@@ E_@@ S@@ E@@ L@@ EN@@ T@@ ; if (@@ contro@@ l.@@ is@@ Visible@@ ()) { g@@ roup = group@@ Json@@ .@@ for@@ m@@ at(@@ control@@ .get@@ Group@@ ()); group@@ .@@ id = null@@ ; } } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ ces@@ s.@@ LO@@ G@@ .@@ warn@@ (("@@ Cannot ig@@ no@@ rin@@ g count@@ ", id@@ ), e); g@@ roup = com.google.gerrit.server.git.@@ Get@@ Ac@@ ces@@ s.@@ IN@@ VI@@ S@@ I@@ B@@ L@@ E_@@ S@@ EN@@ T@@ E@@ L@@ ; } vi@@ sible@@ Group@@ s.@@ put@@ (id@@ , group@@ ); } return group@@ ; }
private java.util.Collection<@@ com.google.gerrit.server.project.Project@@ State@@ > t@@ ree@@ (@@ com.google.gerrit.server.git.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ , com.google.gerrit.server.project.Project@@ State@@ > t@@ re@@ e = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ >(); for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ s : rsrc@@ .getProject@@ State@@ ().@@ t@@ ree@@ ()) { t@@ re@@ e.@@ put(@@ ps@@ .getName@@ Key@@ (), ps@@ ); } t@@ re@@ e.@@ key@@ Set@@ ().@@ ret@@ ain@@ All(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ filter@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ , t@@ re@@ e.@@ key@@ Set@@ ())); return t@@ re@@ e.@@ values@@ (); }
@java.lang.Override public java.util.List<@@ ?@@ > apply(@@ com.google.gerrit.server.@@ api.@@ project.@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { java.lang.String project = rsrc@@ .getName@@ (); if (!(@@ in@@ herit@@ ed@@ )) { return s@@ can@@ (rsrc@@ .getProject@@ State@@ (), project, true@@ ); } java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info@@ >> al@@ l = new java.util.ArrayList<@@ >(); boolean set@@ De@@ fa@@ ult = true@@ ; for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ s : t@@ ree@@ (rsrc@@ )) { java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> li@@ s@@ t = s@@ can@@ (ps@@ , project, set@@ Default@@ ); for (@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info d : list@@ ) { if (((@@ d.@@ is@@ Default@@ ) != null@@ ) && (java.lang.@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ .equals(@@ d.@@ is@@ Default@@ ))) { set@@ De@@ fa@@ ult = false@@ ; } } if (!(@@ li@@ s@@ t.@@ isEmpty())) { al@@ l.@@ add(@@ list@@ ); } } return all@@ ; }
@java.lang.Override public com.google.gerrit.extensions.common.@@ Group@@ Info apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.extensions.@@ i@@ .group@@ s.@@ Owner@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ resource@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not ac@@ count ow@@ ne@@ r "); } if ((@@ inpu@@ t == null@@ ) || (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input.@@ owner@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ mis@@ s@@ ing is requ@@ i@@ red@@ "); } com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c r = group@@ s@@ Collec@@ tion.@@ parse@@ (in@@ pu@@ t.@@ owner@@ ); if (!@@ (@@ int@@ er@@ n@@ al@@ Group@@ .get@@ Owner@@ Group@@ UUID@@ ().equals(@@ owner@@ .get@@ Group@@ UUID@@ ()))) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ UUID@@ (@@ owner@@ Group@@ .get@@ Group@@ UUID@@ ()).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id@@ , group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ f@@ at@@ ("@@ Account %s not fo@@ un@@ d group@@ U@@ u@@ id@@ ", group@@ U@@ u@@ id@@ )); } return json@@ .@@ for@@ m@@ at(@@ owner@@ ); }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ ("@@ "@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e ac@@ count user@@ s@@ -@@ X@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ ", group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ (@@ met@@ a@@ Data@@ Update@@ ); } }
@java.lang.Override public void on@@ Change@@ Merged@@ (com.google.gerrit.server.@@ Event event) { if ((@@ !(@@ all@@ Project@@ s.get@@ ().equals(@@ event@@ .getChange@@ ().@@ project@@ ))) || (!(@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ event@@ .getChange@@ ().@@ branch@@ )@@ ))) { return@@ ; } try { sync@@ I@@ f@@ N@@ e@@ ed@@ (); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { com.google.gerrit.server.@@ Create@@ Group@@ Permission@@ Sy@@ n@@ c@@ er.@@ log.error@@ ("@@ Cannot syn@@ c cre@@ ate ac@@ count for ac@@ count " + count@@ ), e); } }
@org.junit.Test public void name@@ In@@ Config@@ Ma@@ y@@ Be@@ E@@ mpty@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = 4@@ 2 = owner@@ s com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); assert@@ Th@@ at(@@ group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ Name@@ ()).@@ isEmpty@@ (); }
protected static java.util.List<@@ com.google.gerrit.@@ index.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> pre@@ di@@ c@@ at@@ es@@ (com.google.gerrit.server.@@ project.@@ Project@@ Cach@@ e project@@ Cache@@ , com.google.inject.@@ Provider@@ <@@ com.google.gerrit.server.@@ Current@@ User@@ > self@@ , java.lang.String valu@@ e) { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ value@@ )); if (project@@ State == null@@ ) { return java.util.Collections.@@ empty@@ List(); } java.util.List<@@ com.google.gerrit.server.query.@@ Predicate@@ <@@ com.google.gerrit.server.query.change.ChangeData@@ >> r = new java.util.ArrayList<@@ >(); r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (project@@ State@@ .getName@@ ())); try { for (@@ com.google.gerrit.extensions.common.@@ Project@@ Info p : ch@@ ild@@ ren@@ .@@ apply(@@ pro@@ j@@ )) { r.@@ add@@ (@@ new com.google.gerrit.server.query.@@ change.@@ Project@@ Predicate@@ (@@ p.@@ name@@ )); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.query.@@ change.@@ Parent@@ Project@@ Predi@@ c@@ ate.@@ log.warn@@ ("@@ can@@ not ch@@ ec@@ k per@@ mission@@ s to exp@@ an@@ d ch@@ il@@ d project@@ s", e); } } return r@@ ; }
public com.google.gerrit.extensions.common.@@ Group@@ Info for@@ m@@ at(@@ com.google.gerrit.@@ serv@@ er@@ .group@@ .@@ Group@@ Resource rsrc@@ ) throw@@ s com.google.gwtorm.server.OrmException { return create@@ Group@@ Info@@ (rsrc@@ .get@@ Group@@ (), rsrc@@ :@@ get@@ Control@@ ); }
private static void check@@ S@@ ame@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al group@@ , com.google.gerrit.server.account.@@ Group@@ Control group@@ Control@@ ) { check@@ State@@ (@@ group@@ .equals(@@ group@@ Control@@ .get@@ Group@@ ()), "@@ group@@ Control@@ .get@@ Group@@ ().get@@ Group@@ ())); }
@java.lang.Override public void set@@ Review@@ ed@@ (java.lang.String path@@ , boolean review@@ ed@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.@@ api.@@ change.@@ File@@ Resource@@ , com.google.gerrit.extensions.common.@@ Input@@ > view@@ ; if (@@ review@@ ed@@ ) { vi@@ e@@ w = put@@ Review@@ ed@@ ; } else { vi@@ e@@ w = delete@@ Review@@ ed@@ ; } view@@ .@@ apply(@@ file@@ s.@@ parse@@ (@@ revision@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (p@@ ath@@ )), new com.google.gerrit.extensions.common.@@ Input@@ ()); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot updat@@ e review@@ ed f@@ la@@ g e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Commit@@ Resource parse@@ (@@ org.eclipse.jgit.lib.Repository serv@@ er@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { org.eclipse.jgit.lib.ObjectId o@@ bject@@ Id@@ ; try { o@@ bject@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (id@@ .get()); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ parent@@ .getName@@ Key@@ ())@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.RevCommit commit = rw.@@ parse@@ Commit@@ (@@ o@@ bject@@ Id); rw.@@ parse@@ Bo@@ d@@ y(@@ commit@@ ); if (!@@ (c@@ an@@ Read@@ (@@ parent@@ .getProject@@ State@@ (), repo@@ , commit@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } for (@@ int i = 0; i < (@@ commit@@ .getParent@@ Count@@ ()); i@@ ++@@ ) { rw.@@ parse@@ Bo@@ d@@ y(@@ rw.@@ parse@@ Commit@@ (@@ commit@@ .getParent@@ (@@ commit@@ .getParent@@ Count@@ ()); rw.@@ parse@@ Bo@@ d@@ y(@@ rw.@@ parse@@ Commit@@ (@@ commit@@ .getParent@@ (@@ i@@ ))); } return new com.google.gerrit.server.git.@@ Visible@@ (@@ parent@@ Commit@@ ); } catch (@@ org.eclipse.jgit.errors.@@ M@@ is@@ s@@ ing@@ Object@@ Exception | org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } }
public boolean can@@ Read@@ (com.google.gerrit.server.@@ project.@@ Project@@ State state@@ , org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevCommit commit@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey project = state@@ .getName@@ Key@@ (); try { java.util.List<@@ com.google.gerrit.server.query.change.ChangeData> change@@ s = query@@ Provider@@ .get().@@ en@@ for@@ ce@@ Vi@@ si@@ b@@ ili@@ ty@@ (@@ true@@ ).@@ by@@ Project@@ Commit@@ (project@@ , commit@@ ); if (!(@@ changes.@@ isEmpty())) { return true@@ ; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ log.error@@ ((@@ ("@@ Cannot l@@ oo@@ k up change for commit " + (@@ comm@@ it.@@ name@@ ())) + " in ") + project@@ ), e); } return is@@ Re@@ ach@@ able@@ From@@ (@@ state@@ , repo@@ , commit@@ , repo@@ .get@@ All@@ Ref@@ s()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.@@ serv@@ er@@ > list@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public com.google.gerrit.server.@@ api.@@ change.@@ Draft@@ Comment@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource parse@@ (com.google.gerrit.server.@@ change.@@ Revision@@ Resource rev@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException { check@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); java.lang.String u@@ id = id@@ .get@@ (); for (@@ com.google.gerrit.reviewdb.client.@@ Comm@@ ent c : comment@@ s@@ Util.@@ draft@@ By@@ PatchSet@@ (db@@ Provider@@ .get(), rev@@ .get@@ PatchSet@@ ().get@@ Id(), rev@@ .getAccount@@ Id(), rev@@ .get@@ Notes@@ ())) { if (@@ u@@ u@@ id@@ .equals(@@ c.@@ key@@ .@@ u@@ id@@ )) { return new com.google.gerrit.@@ server@@ .@@ rest@@ i@@ change.@@ Draft@@ Resource@@ (@@ rev@@ , c@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.server.@@ schema.@@ Project@@ Resource@@ > list@@ () { return list@@ .get@@ (); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Create@@ B@@ ran@@ ch create@@ (@@ com.google.gerrit.extensions.api.@@ projects.@@ Create@@ B@@ ran@@ ch create@@ (@@ com.google.gerrit.@@ serv@@ er@@ .get().@@ rest@@ i@@ i@@ red@@ .@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g name@@ ) { return create@@ Branch@@ Factory.create@@ (@@ name@@ .get()); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ i@@ View@@ >> view@@ s() { return view@@ s; }
private com.google.gerrit.server.@@ Current@@ User get@@ Project@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource parse@@ (java.lang.String id@@ , boolean check@@ Access@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (id@@ .@@ end@@ sWith@@ (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ )) { id = id@@ .@@ substring@@ (@@ 0, ((@@ id@@ .@@ length@@ ()) - (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ .@@ length@@ ()))); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (id@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { return null@@ ; } if (@@ check@@ Access@@ ) { try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return null@@ ; } } return new com.google.gerrit.server.@@ server@@ .@@ rest@@ i@@ con@@ su@@ re@@ Change@@ Resource@@ (@@ state@@ , user@@ .get()); }
public com.google.gerrit.@@ serv@@ er@@ .@@ rest@@ i@@ c.@@ Project@@ Resource parse@@ (java.lang.String id@@ , boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ ap@@ i@@ .group@@ .@@ P@@ er@@ for@@ m@@ at@@ ("@@ Cannot r@@ sr@@ c = _@@ parse@@ (id@@ , check@@ Access@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ f@@ at@@ al@@ : No@@ t Fo@@ und@@ : %@@ s", id@@ )); } return rsrc@@ ; }
public com.google.gerrit.server.@@ api.@@ changes.@@ Project@@ Resource parse@@ (java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return parse@@ (id@@ , true@@ ); }
@java.lang.Override public com.google.gerrit.@@ serv@@ er@@ d.@@ Project@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ ap@@ i@@ .@@ Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ .get(), true@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return rsrc@@ ; }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.@@ Delete@@ Draft@@ Comment@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ Delete@@ Draft@@ Update.@@ Factor@@ y update@@ Factory@@ , rsrc@@ .getChange@@ ().get@@ Project@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getChange@@ ().get@@ Project@@ (), rsrc@@ .getUser@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ PatchSet@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ ); bu@@ .@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
private static com.google.gerrit.reviewdb.client.Account@@ Group get@@ Ex@@ ist@@ ing@@ Group@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ > account@@ Group@@ s = db.account@@ Group@@ s().@@ by@@ UUID@@ (@@ group@@ U@@ u@@ id@@ ).to@@ List(); if ((@@ account@@ Group@@ s.@@ size@@ ()) == 1@@ ) { return com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (account@@ Group@@ s); } else if (account@@ Group@@ s.@@ isEmpty()) { throw new com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception(@@ group@@ U@@ u@@ id@@ ); } else { throw new com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ (("@@ Group@@ In@@ vali@@ d ac@@ count " + group@@ U@@ u@@ id@@ )); } }
@org.junit.Test public void owner@@ U@@ u@@ id@@ Can@@ not@@ Be@@ To@@ Null@@ () throw@@ s java.lang.Exception { po@@ p@@ ul@@ ate@@ Group@@ Config@@ (@@ group@@ U@@ u@@ id@@ , = user@@ s@@ 4@@ 2 = owner@@ s com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ Config.@@ load@@ For@@ Group@@ (repo@@ sitor@@ y@@ , group@@ U@@ u@@ id@@ ); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Owner@@ Group@@ UUID@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ null@@ )).@@ bu@@ ild@@ (); group@@ Config.@@ set@@ Group@@ Update@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ I@@ D of th@@ e count@@ ", user@@ s@@ -@@ X@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ Y@@ (@@ group@@ Data@@ Update@@ ); } }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Resource parse@@ (@@ org.eclipse.jgit.lib.Repository repo@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent@@ .getName@@ Key@@ (); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ f@@ ull@@ Name@@ (id@@ .get@@ ())); if (re@@ f == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ ref@@ ((@@ ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ () ? ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : ref@@ .getName@@ ()@@ )).@@ check@@ (@@ Permission@@ .@@ RE@@ AD@@ ); return new com.google.gerrit.server.git.@@ Merge@@ Resource@@ .@@ project.@@ Branch@@ Resource@@ (@@ parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), ref@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception not@@ Al@@ low@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ <@@ com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.restapi.Res@@ t@@ View@@ >> view@@ s() { return view@@ s; }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Create@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ (@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (re@@ cur@@ si@@ ve@@ ) { return get@@ T@@ ran@@ si@@ tive@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return get@@ Di@@ re@@ ct@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
public com.google.gerrit.client.@@ account.@@ Account@@ Info get@@ Parent@@ () { return parent@@ ; }
@org.junit.Test public void id@@ Of@@ New@@ Group@@ M@@ u@@ st@@ Not@@ Be@@ N@@ e@@ g@@ ative@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ fil@@ le@@ d@@ Group@@ Cre@@ ation@@ Builder@@ ().set@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ Id@@ ((@@ -@@ 2@@ )@@ )).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { expected@@ Excepti@@ on.@@ expec@@ t@@ C@@ au@@ se@@ (in@@ stance@@ stance@@ Exception@@ .@@ class@@ )); expected@@ Excepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Update of th@@ e ac@@ count s@@ -@@ X@@ -@@ Y@@ ", group@@ group@@ group@@ group@@ group@@ group@@ group@@ Data@@ Update@@ ); } }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Name@@ Note@@ s group@@ Name@@ s = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), group@@ Name); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ (@@ group@@ Update@@ , this@@ :@@ get@@ Account@@ Name@@ Email@@ , this@@ :@@ get@@ Group@@ Name@@ (@@ commit@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Config@@ , group@@ Name@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().@@ or@@ E@@ l@@ se@@ ((@@ se@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Cannot count@@ w@@ as@@ n m@@ ati@@ c@@ ally load@@ ed load@@ ed load@@ "); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ , com.google.gerrit.@@ serv@@ er@@ s.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = resource@@ .@@ as@@ In@@ ternal@@ ().@@ or@@ E@@ l@@ Throw@@ (@@ group@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); inpu@@ t = com.google.gerrit.@@ server@@ .@@ rest@@ i@@ .@@ group@@ List.@@ init@@ (in@@ put@@ ); final com.google.gerrit.server.account.@@ Group@@ Control contro@@ l = resource@@ .get@@ Control@@ (); if (!(@@ contro@@ l.@@ can@@ Remo@@ ve@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ can@@ not de@@ le@@ te group@@ s f@@ ro@@ m account@@ s@@ To@@ Remo@@ ve@@ ", al@@ Group@@ .getName@@ ())); } java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ s@@ To@@ Remo@@ v@@ e = new java.util.Hash@@ Set<@@ >(); for (java.lang.String sub@@ group@@ Id@@ ent@@ if@@ i@@ er : input@@ .group@@ s) { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ B@@ as@@ i@@ c sub@@ g@@ roup = group@@ s@@ Collec@@ tion.@@ parse@@ (@@ sub@@ group@@ Id@@ ent@@ if@@ i@@ er@@ ); sub@@ s@@ To@@ Remo@@ v@@ e.@@ add(@@ sub@@ .get@@ Group@@ UUID@@ ()); } com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = int@@ er@@ n@@ al@@ Group@@ .get@@ Group@@ UUID@@ (); try { remove@@ Sub@@ group@@ s(@@ group@@ U@@ u@@ id@@ , sub@@ s@@ To@@ Remo@@ ve@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ f@@ at@@ ("@@ can@@ not fo@@ un@@ d group@@ s@@ "); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.server.change.Change@@ Resource resource@@ , com.google.gerrit.extensions.api.changes.@@ Add@@ Sub@@ group@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ rest@@ ri@@ c@@ at(@@ resource@@ .get@@ Sub@@ mission@@ Id@@ ()).@@ is@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { ap@@ i@@ .@@ rest@@ ore@@ (in@@ .@@ rest@@ Session@@ .@@ Add@@ res@@ s.@@ Input in = new com.google.gerrit.server.change.Change@@ Js@@ on.@@ Input@@ (); in@@ .group@@ s = com.google.common.collect.Immutable@@ List.@@ of@@ (@@ resource@@ .get@@ Member@@ ().get@@ ()); return delete@@ .get().@@ apply(@@ resource@@ , in@@ ); }
@java.lang.Override protected com.google.gerrit.client.@@ account.@@ Delete@@ Re@@ f create@@ (@@ com.google.gerrit.@@ server@@ .@@ do@@ ap@@ i@@ .@@ rest.@@ project.@@ Project@@ Resource r@@ );
private void post@@ De@@ le@@ tion@@ (@@ com.google.gerrit.@@ serv@@ i@@ ps@@ d.@@ Project@@ Resource project, org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d@@ ) { ref@@ eren@@ ce@@ Updated@@ .@@ fi@@ re@@ (project@@ .getName@@ Key@@ (), cm@@ d@@ , id@@ ent@@ if@@ i@@ ed@@ User@@ .get@@ ().get@@ Account@@ ()); }
@java.lang.Override public com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Info apply(@@ com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ projects.@@ Config@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ W@@ R@@ IT@@ E_@@ CON@@ FI@@ G@@ ); return apply(@@ rsrc@@ .getProject@@ State@@ (), input@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.extensions.api.changes.@@ Delete@@ Vo@@ te@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception, java.io.IOException { if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.extensions.api.changes.@@ Delete@@ Vo@@ te@@ Input@@ (); } if (((@@ input.@@ label@@ ) != null@@ ) && (!(@@ rsrc@@ .get@@ Label@@ ().equals(@@ input.@@ label@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ l@@ abe@@ l m@@ us@@ t m@@ atch URL@@ "); } if ((@@ input.@@ not@@ if@@ y@@ ) == null@@ ) { input.@@ not@@ if@@ y = com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g.@@ AL@@ L@@ ; } com.google.gerrit.server.change.@@ Reviewer@@ Resource r = rsrc@@ .get@@ Reviewer@@ (); com.google.gerrit.reviewdb.client.Change change = r@@ .getChange@@ (); if (((@@ r@@ .get@@ Revision@@ Resource@@ ()) != null@@ ) && (!(@@ r@@ .get@@ Revision@@ Resource@@ ().@@ is@@ Current@@ ()))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ de@@ le@@ te on n@@ on@@ -@@ cur@@ ren@@ t p@@ atch se@@ t "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), change@@ .getProject@@ (), r@@ .getChange@@ Resource@@ ().get@@ User@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (change@@ .getId@@ (), new com.google.gerrit.server.change.Change@@ com.google.gerrit.server.change.Change@@ com.google.gerrit.server.change.Change@@ com.google.gerrit.server.change.Change@@ com.google.gerrit.server.change.Change@@ com.google.gerrit.server.change.Change@@ Js@@ on.@@ Delete@@ Vo@@ t@@ e.@@ Op@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (r@@ .getChange@@ ().get@@ Project@@ ()), r@@ .get@@ Reviewer@@ User@@ (), rsrc@@ .get@@ Label@@ (), input@@ )); bu@@ .@@ execute@@ (); } return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Project@@ Info> apply(@@ com.google.gerrit.@@ serv@@ er@@ ry@@ P@@ i@@ ap@@ i@@ .@@ Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (re@@ cur@@ si@@ ve@@ ) { return re@@ cur@@ si@@ ve@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); } return di@@ re@@ ct@@ Ch@@ ild@@ Project@@ s(@@ rsrc@@ .getName@@ Key@@ ()); }
@java.lang.Override public void run() { java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > name@@ s = (@@ try@@ ing@@ Ag@@ ain@@ ) ? r@@ e@@ try@@ O@@ n : project@@ Cache.@@ all@@ (); for (@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name : nam@@ es) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = project@@ Cache@@ .get(@@ project@@ Name@@ ).get@@ Config@@ (); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = config@@ .get@@ Group@@ (@@ u@@ u@@ id@@ ); if ((@@ re@@ f == null@@ ) || (@@ new@@ Name.@@ equals(@@ ref@@ .getName@@ ()))) { continue@@ ; } try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = met@@ a@@ Data@@ Update@@ Factory.create@@ (project@@ Name@@ )) { re@@ name@@ (m@@ d); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Project@@ ) { continue@@ ; } catch (@@ org.eclipse.jgit.errors.ConfigInvalid@@ Exception err@@ ) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.error@@ (((@@ ("@@ Cannot ren@@ am@@ e count@@ :@@ " + (@@ old@@ Name@@ )) + " in project@@ Name@@ ), err@@ ); } } if ((@@ !(@@ r@@ e@@ try@@ On@@ .@@ isEmpty())) && (!@@ (@@ try@@ ing@@ Ag@@ ain@@ ))) { try@@ ing@@ Ag@@ ai@@ n = true@@ ; @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = start@@ (@@ 5@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IN@@ UT@@ ES@@ ); } }
private void re@@ name@@ (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { boolean su@@ c@@ ces@@ s = false@@ ; for (@@ int at@@ te@@ mp@@ t@@ s = 0; (!@@ su@@ c@@ cess@@ ) && (@@ at@@ te@@ mp@@ t@@ s < (com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ M@@ A@@ X@@ _@@ T@@ R@@ I@@ ES@@ )); at@@ te@@ mp@@ t@@ s@@ ++@@ ) { com.google.gerrit.server.git.@@ Project@@ Config con@@ fig = com.google.gerrit.server.git.@@ Project@@ Config.@@ read@@ (m@@ d); com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce re@@ f = config@@ .get@@ Group@@ (@@ u@@ u@@ id@@ ); if ((@@ re@@ f == null@@ ) || (@@ new@@ Name.@@ equals(@@ ref@@ .getName@@ ()))) { project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); return@@ ; } ref@@ .set@@ Name@@ (@@ new@@ Name); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (@@ author@@ ); m@@ d.@@ set@@ Message@@ ((((@@ ("@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.error@@ ((@@ ("@@ Th@@ e commit messag@@ e of ac@@ count " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + "@@ \n@@ ")); try { config.@@ commit@@ (m@@ d); project@@ Cache.@@ e@@ vi@@ ct@@ (@@ config@@ .getProject@@ ()); su@@ c@@ ces@@ s = true@@ ; } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.error@@ ((@@ ("@@ Co@@ ul@@ d not ren@@ am@@ e of ac@@ count " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + " in ") + (m@@ d@@ .getProject@@ Name@@ ())@@ ), e); try { java.lang.@@ Th@@ read@@ .@@ s@@ le@@ e@@ p@@ (@@ 2@@ 5@@ ); } catch (java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception w@@ a@@ k@@ e@@ Up@@ ) { continue@@ ; } } } if (!@@ su@@ c@@ cess@@ ) { if (@@ try@@ ing@@ Ag@@ ain@@ ) { com.google.gerrit.server.git.@@ R@@ en@@ ame@@ Group@@ O@@ p.@@ log.warn@@ ((@@ (("@@ Co@@ ul@@ d not ren@@ am@@ e ac@@ ces@@ s " + (@@ old@@ Name@@ )) + " to ") + (@@ new@@ Name@@ )) + " in ") + (m@@ d@@ .getProject@@ ().get@@ Name@@ ()))); } else { r@@ e@@ try@@ On@@ .@@ add(@@ m@@ d@@ .getProject@@ Name()); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ D@@ ashbo@@ ard@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ ap@@ i@@ .@@ P@@ ut@@ h project.@@ Default@@ D@@ ashbo@@ ar@@ d d d = set@@ Default@@ (); set@@ Default@@ (); in@@ herit@@ ed = in@@ herit@@ ed@@ ; return apply(@@ resource@@ .getProject@@ ().get@@ NameKey@@ (), resource@@ .getUser@@ ()), input@@ ); }
private void re@@ name@@ Group@@ (@@ com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al group@@ , java.lang.String new@@ Name) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = group@@ .get@@ Group@@ UUID@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Name@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ NameKey@@ (@@ new@@ Name@@ )).@@ bu@@ ild@@ (); try { group@@ s@@ Update@@ Provider@@ .get().@@ update@@ Group@@ (db@@ .get(), group@@ U@@ u@@ id@@ , group@@ Update@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ In@@ vali@@ d %s not fo@@ un@@ d group@@ U@@ u@@ id@@ ", id@@ )); } catch (@@ com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ Cannot w@@ it@@ h name \"@@ " + new@@ Name) + " al@@ read@@ y ex@@ ist@@ s@@ ")); } }
@java.lang.Override public com.google.gerrit.extensions.api.changes.@@ Inclu@@ ded@@ In@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc@@ .get@@ Commit@@ (); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc@@ .getProject@@ State@@ ().get@@ NameKey@@ (); return in@@ clu@@ ded@@ In@@ .@@ apply(@@ project, commit@@ .getId@@ ().get@@ Name()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource rsrc@@ , Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al int@@ er@@ n@@ al@@ Group = r@@ sr@@ c.@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ (@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception@@ :@@ new@@ ); if (!(@@ rsrc@@ .get@@ Control@@ ().@@ is@@ Owner@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation ow@@ ne@@ r "); } else if ((@@ inpu@@ t == null@@ ) || (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input.@@ name@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ name is requ@@ i@@ re@@ d "); } java.lang.String new@@ Name = input.@@ name.@@ tri@@ m@@ (); if (@@ new@@ Name.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ Th@@ is requ@@ i@@ red@@ "); } if (@@ int@@ er@@ n@@ al@@ Group@@ .getName@@ ().@@ e@@ qual@@ s@@ (@@ new@@ Name@@ )) { return new@@ Name@@ ; } re@@ name@@ Group@@ (@@ int@@ er@@ n@@ al@@ Group@@ , new@@ Name); return new@@ Name@@ ; }
@java.lang.Override public java.lang.String group@@ Pat@@ tern@@ () { return "@@ &@@ R@@ o@@ bject@@ "; }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.change.Change@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String pat@@ h = rsrc@@ .get@@ Patch@@ Key@@ ().get@@ (); com.google.gerrit.server.change.@@ Revision@@ Resource re@@ v = rsrc@@ .get@@ Revision@@ (); org.eclipse.jgit.lib.ObjectId rev@@ st@@ r = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ rev@@ .get@@ PatchSet@@ ().get@@ Revision@@ ().get@@ ()); return file@@ Content@@ Util@@ .@@ do@@ w@@ n@@ load@@ Content@@ (project@@ Cache.@@ check@@ ed@@ Get@@ (@@ rev@@ .getProject@@ ()), rev@@ str@@ , parent@@ ); }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > by@@ Name(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name) throw@@ s com.google.gwtorm.server.OrmException { return get@@ Only@@ Group@@ (com.google.gerrit.server.@@ query@@ .group@@ .@@ Group@@ Predi@@ c@@ at@@ es.@@ name@@ (@@ group@@ Name@@ .get@@ ()), (("@@ c@@ at@@ " + group@@ Name) + "@@ '@@ ")); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) { return resource@@ .getName@@ (); }
public java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > by@@ Id(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return get@@ Only@@ Group@@ (com.google.gerrit.server.@@ query@@ .group@@ .@@ Group@@ Predi@@ c@@ at@@ es.@@ id(@@ group@@ Id@@ ), (("@@ id " + group@@ Id@@ ) + "@@ '@@ ")); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Test@@ Project@@ Input@@ (re@@ ject@@ E@@ mpty@@ Commit = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ) public void submit@@ E@@ mpty@@ Commit@@ _@@ No@@ F@@ ast@@ For@@ war@@ d(@@ ) throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ get@@ Submit@@ Type@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ Submit@@ Type.@@ F@@ A@@ ST@@ _@@ FO@@ R@@ W@@ AR@@ D@@ _@@ ON@@ L@@ Y@@ ); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange@@ ("@@ Change 1@@ ", "@@ a.@@ t@@ xt@@ ", "@@ content@@ "); submit@@ (change@@ .getChange@@ Id()); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i rev@@ er@@ t@@ 1 = gApi.changes().id(@@ change@@ .getChange@@ Id@@ ()).@@ rev@@ er@@ t@@ (); ap@@ pro@@ ve@@ (@@ rev@@ er@@ t@@ 1@@ .@@ id@@ ()); rev@@ er@@ t@@ 1@@ .@@ current@@ ().@@ submit@@ (); com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i rev@@ er@@ t@@ 2 = gApi.changes().id(@@ change@@ .getChange@@ Id@@ ()).@@ rev@@ er@@ t@@ (); ap@@ pro@@ ve@@ (@@ rev@@ er@@ t@@ 2.@@ id@@ ()); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ (("@@ Change " + (@@ rev@@ er@@ t@@ .get().@@ _@@ n@@ umber@@ )) + "@@ : Change co@@ ul@@ d not b@@ e merge@@ d b@@ ec@@ au@@ se th@@ e commit is empty@@ .@@ ")); po@@ li@@ c@@ y requ@@ i@@ re@@ al@@ l commit@@ s to cont@@ ai@@ n mo@@ d@@ if@@ ic@@ ation@@ s to a@@ t le@@ as@@ t on@@ e file.@@ rev@@ er@@ t@@ 2.@@ current@@ ().@@ submit@@ (); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Test@@ Project@@ Input@@ (re@@ ject@@ E@@ mpty@@ Commit = com.google.gerrit.extensions.client.@@ In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ) public void submit@@ E@@ mpty@@ Commit@@ _@@ F@@ ast@@ For@@ war@@ d(@@ ) throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input c@@ i = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (); c@@ i.@@ sub@@ ject = "@@ E@@ mp@@ t@@ y change@@ "; c@@ i.@@ project = project@@ .get@@ (); c@@ i.@@ b@@ ran@@ ch = "@@ master@@ "; com.google.gerrit.extensions.api.changes.@@ Change@@ Ap@@ i change = gApi.changes().@@ create@@ (c@@ i@@ ); ap@@ pro@@ ve@@ (@@ change.@@ id@@ ()); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ((@@ (("@@ Change " + (change@@ .get().@@ _@@ n@@ umber@@ )) + "@@ : Change co@@ ul@@ d not b@@ e merge@@ d b@@ ec@@ au@@ se th@@ e commit is empty@@ . P@@ roject po@@ li@@ c@@ y requ@@ i@@ re@@ al@@ l commit@@ s to cont@@ ai@@ n mo@@ d@@ if@@ ic@@ ation@@ s to a@@ t le@@ as@@ t on@@ e as@@ t file.@@ ")); change.@@ current@@ ().@@ submit@@ (); }
public final com.google.gerrit.extensions.client.@@ Submit@@ Type config@@ u@@ red@@ Submit@@ Type@@ () { java.lang.String ra@@ w = config@@ u@@ red@@ Submit@@ Type@@ R@@ a@@ w@@ (); return ra@@ w != null ? com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ value@@ Of(@@ ra@@ w@@ ) : null@@ ; }
private native java.lang.String config@@ ();
private void set@@ Submit@@ Type@@ (@@ com.google.gerrit.extensions.client.@@ Submit@@ Type new@@ Submit@@ Typ@@ e) { if ((@@ submit@@ Typ@@ e) != null@@ ) { for (@@ int i = 0; i < (@@ submit@@ Type@@ .get@@ Item@@ Count@@ ()); i@@ ++@@ ) { if (@@ new@@ Config@@ u@@ red@@ Submit@@ Type@@ .@@ name@@ ().equals(@@ submit@@ Type@@ .getValue@@ (@@ i@@ ))) { in@@ de@@ x = i@@ ; if (@@ new@@ Config@@ u@@ red@@ Submit@@ Type == (@@ com.google.gerrit.extensions.client.@@ Submit@@ Type.@@ H@@ ER@@ IT@@ )) { } break@@ ; } submit@@ Typ@@ e.set@@ Se@@ lec@@ ted@@ Index@@ (@@ index@@ ); set@@ Enable@@ d@@ For@@ U@@ se@@ Content@@ Merge@@ (); } } }
void display(@@ com.google.gerrit.client.@@ projects.@@ Config@@ Info result) { des@@ c@@ T@@ x@@ t.set@@ Text(@@ result.@@ des@@ cription@@ ()); set@@ B@@ oo@@ l@@ (@@ cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s, result.@@ use@@ Cont@@ ri@@ bu@@ tor@@ Ag@@ ree@@ ment@@ s()); set@@ B@@ oo@@ l@@ (@@ signe@@ d@@ O@@ ff@@ By@@ , result.@@ use@@ Sig@@ ned@@ O@@ ff@@ By@@ ()); set@@ B@@ oo@@ l@@ (@@ content@@ Merge@@ , result.@@ use@@ Content@@ Merge@@ ()); set@@ B@@ oo@@ l@@ (@@ new@@ Change@@ For@@ All@@ Not@@ In@@ T@@ arget@@ , result.@@ create@@ New@@ Change@@ For@@ All@@ Not@@ In@@ T@@ arget@@ ()); set@@ B@@ oo@@ l@@ (re@@ qu@@ i@@ re@@ Change@@ ID@@ , result.@@ requ@@ i@@ re@@ Change@@ Id()); if (@@ com.google.gerrit.client.Gerrit.@@ info@@ ().@@ re@@ ce@@ ive@@ ().@@ enable@@ Sig@@ ned@@ Push@@ ()) { set@@ B@@ oo@@ l@@ (@@ enable@@ Sig@@ ned@@ Push@@ , result.@@ enable@@ Sig@@ ned@@ Push@@ ()); set@@ B@@ oo@@ l@@ (re@@ qu@@ i@@ re@@ Sig@@ ned@@ Push@@ , result.@@ requ@@ i@@ re@@ Sig@@ ned@@ Push@@ ()); } set@@ B@@ oo@@ l@@ (re@@ qu@@ es@@ , result.@@ re@@ ject@@ Imp@@ li@@ c@@ it@@ Merg@@ es@@ ()); set@@ B@@ oo@@ l@@ (@@ null@@ , result@@ .@@ private@@ By@@ Default@@ ()); set@@ B@@ oo@@ l@@ (@@ enable@@ Reviewer@@ By@@ Email@@ , result.@@ enable@@ B@@ oo@@ l@@ (@@ match@@ Author@@ Commit@@ ter@@ Date@@ , result.@@ match@@ Author@@ , result.@@ match@@ Author@@ Author@@ Author@@ Author@@ Author@@ Date@@ ()); set@@ Submit@@ Type@@ (@@ result.@@ submit@@ Type@@ , result.@@ config@@ u@@ red@@ Submit@@ Type@@ ()); set@@ State@@ (@@ result.@@ state@@ ()); max@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ Text(@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ config@@ u@@ red@@ Value@@ ()); if ((@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ in@@ herit@@ ed@@ Value@@ ()) != null@@ ) { e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ Visible@@ (@@ true@@ ); e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ mit@@ (@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ in@@ herit@@ ed@@ Value@@ ()); set@@ Ma@@ x@@ Object@@ Size@@ Li@@ mit@@ (@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ value@@ ())); e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ T@@ it@@ le@@ (@@ result.@@ max@@ Object@@ Size@@ Li@@ mit@@ ().@@ in@@ herit@@ ed@@ Value@@ ()); } else { e@@ ff@@ ec@@ tive@@ Ma@@ x@@ Object@@ Size@@ Li@@ m@@ it.@@ set@@ Visible@@ (@@ false@@ ); } save@@ Project.@@ set@@ Visible@@ (@@ false@@ ); init@@ Project@@ Option@@ s(@@ result@@ ); }
private com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id create@@ User@@ name@@ (@@ com.google.gerrit.reviewdb.client.@@ Account@@ Id account@@ Id, java.lang.String user@@ name@@ ) throw@@ s com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ user@@ name@@ )) { return null@@ ; } if (!@@ (com.google.gerrit.server.@@ account.@@ P@@ ut@@ User@@ name.@@ is@@ Valid@@ User@@ name@@ (user@@ name@@ ))) { throw new com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account ac@@ count to ac@@ count %@@ s; do@@ es not co@@ n@@ for@@ m@@ at@@ "); user@@ name, account@@ Id@@ )); } return com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id account@@ Id, user@@ name, account@@ Id); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ dis@@ able@@ P@@ riv@@ ate@@ Changes@@ ", valu@@ e = "@@ true@@ ") public void createChange@@ With@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ True@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input inpu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); input.@@ is@@ P@@ riv@@ ate = true@@ ; ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ "@@ change@@ s ar@@ e not sup@@ p@@ orted@@ "); gApi.changes().@@ create@@ (in@@ put@@ ); }
@org.junit.Test public void createChange@@ With@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ F@@ alse@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Input inpu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); input.@@ is@@ P@@ riv@@ ate = true@@ ; assert@@ Th@@ at(@@ gApi.changes().@@ create@@ (in@@ put@@ ).get@@ ().@@ is@@ P@@ riv@@ ate@@ ).@@ isEqualTo@@ (@@ true@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ dis@@ able@@ P@@ riv@@ ate@@ Changes@@ ", valu@@ e = "@@ true@@ ") public void createChange@@ With@@ P@@ riv@@ ate@@ By@@ Default@@ And@@ Dis@@ able@@ P@@ riv@@ ate@@ Changes@@ True@@ () throw@@ s java.lang.Exception { set@@ P@@ riv@@ ate@@ By@@ Default@@ (project@@ 2, In@@ herit@@ able@@ Boolean@@ .@@ T@@ R@@ U@@ E@@ ); com.google.gerrit.extensions.common.@@ Change@@ Input inpu@@ t = new com.google.gerrit.extensions.common.@@ Change@@ Input@@ (project@@ .get(), "@@ master@@ ", "@@ e@@ mp@@ t@@ y change@@ "); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ "@@ change@@ s ar@@ e not sup@@ p@@ orted@@ "); gApi.changes().@@ create@@ (in@@ put@@ ); }
@java.lang.Override public java.util.Collection<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String p@@ f@@ x@@ ) { com.google.gerrit.reviewdb.client.Project.NameKey star@@ t = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (p@@ f@@ x@@ ); com.google.gerrit.reviewdb.client.Project.NameKey en@@ d = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ((@@ p@@ f@@ x + (java.lang.@@ Char@@ act@@ er.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E@@ ))); try { return list@@ .get@@ (com.google.gerrit.server.@@ project.@@ Project@@ Cache@@ Impl.@@ List@@ Key@@ .@@ AL@@ L@@ ).@@ sub@@ Set@@ (@@ start@@ , end@@ ); } catch (@@ java.util.concurrent.@@ Execu@@ tion@@ Exception e) { com.google.gerrit.server.project.Project@@ Cache@@ Impl.@@ log.warn@@ (("@@ E@@ rror l@@ oo@@ k up project@@ s for pre@@ fi@@ x " + p@@ f@@ x@@ ), e); return java.util.Collections.@@ empty@@ Set@@ (); } }
@java.lang.Override public java.util.Collection<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String pre@@ fix@@ ) { return java.util.Collections.@@ empty@@ Set@@ (); }
java.util.List<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > all@@ ();
@java.lang.Override public java.util.Collection<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > all@@ () { return com.google.common.collect.List@@ s@@ .@@ empty@@ S@@ orted@@ Set@@ (); }
java.util.Collection<@@ com.google.gerrit.reviewdb.client.Project.NameKey@@ > by@@ Name@@ (java.lang.String pre@@ fix@@ );
public java.util.List<@@ T> list@@ ) { com.google.gerrit.server.@@ util.@@ Reg@@ ex@@ List@@ Se@@ arch@@ er.@@ check@@ Not@@ Null@@ (@@ list@@ ); int be@@ gin@@ ; int end@@ ; if (@@ 0 < (p@@ re@@ fix@@ )) { be@@ g@@ in = fin@@ d(@@ list@@ , pre@@ fix@@ Be@@ gin@@ ); en@@ d = fin@@ d(@@ list@@ , pre@@ fix@@ En@@ d); } else { be@@ gin@@ g@@ in = 0; en@@ d = li@@ s@@ t.@@ size@@ (); } if (p@@ re@@ fix@@ Only@@ ) { return (@@ be@@ gin@@ g@@ in < en@@ d ? li@@ s@@ t.@@ sub@@ List(@@ be@@ gin@@ , end@@ ) : com.google.common.collect.Immutable@@ List.@@ <@@ T@@ >@@ of@@ ()); } return li@@ s@@ t.@@ sub@@ List(@@ be@@ gin@@ , end@@ , st@@ ream@@ ).@@ filter@@ (( x@@ ) -@@ > run@@ (@@ run@@ F@@ unc@@ .@@ apply(@@ apply(@@ x@@ ))); }
public static com.google.gerrit.server.@@ util.@@ Reg@@ ex@@ List@@ Se@@ arch@@ er@@ <java.lang.String> of@@ String@@ s(@@ java.lang.String re@@ ) { return new com.google.gerrit.server.@@ util.@@ Reg@@ ex@@ List@@ Se@@ arch@@ er@@ (r@@ e@@ , ( in@@ ) -@@ > in@@ ) { }
private int fin@@ d(@@ java.util.List<@@ T> list@@ , java.lang.String p@@ ) { int r = java.util.Collections.@@ bin@@ ary@@ Se@@ arch@@ (@@ com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ list@@ , list@@ F@@ un@@ c@@ p@@ ), p@@ ); return r < (@@ -@@ r + 1@@ ) : r@@ ; }
private org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository add(@@ com.google.gerrit.server.git.@@ Project@@ Config p@@ c@@ ) { com.google.gerrit.server.@@ rule@@ s.@@ Pro@@ log@@ En@@ vi@@ ron@@ m@@ ent.@@ Factor@@ y en@@ v@@ Factor@@ y = null@@ ; com.google.gerrit.server.@@ rule@@ s.@@ Rule@@ s@@ Cach@@ e rule@@ s@@ Cach@@ e = null@@ ; com.google.gerrit.server.config.@@ S@@ ite@@ Path@@ s sit@@ e@@ Path@@ s = null@@ ; java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info> comment@@ Link@@ s = null@@ ; org.eclipse.j@@ git@@ .@@ int@@ er@@ n@@ al@@ .@@ st@@ or@@ ag@@ e.@@ d@@ f@@ s.@@ In@@ M@@ em@@ ory@@ Repository repo@@ ; try { repo = repo@@ Manager.@@ create@@ Repository(@@ p@@ c@@ .getName@@ ()); if ((@@ p@@ c@@ .getProject@@ ()) == null@@ ) { p@@ c.@@ load@@ (repo@@ ); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } al@@ l.@@ put@@ (p@@ c@@ .getName@@ (), new com.google.gerrit.server.project.Project@@ State@@ (@@ sit@@ e@@ Path@@ s, project@@ Cache@@ , all@@ Project@@ s@@ Name, all@@ User@@ s@@ Name, null@@ , en@@ v@@ Factory@@ , repo@@ Manag@@ er, rule@@ s@@ Cache@@ , comment@@ Link@@ s, c@@ ap@@ abili@@ ty@@ Collection@@ Factory@@ , p@@ c@@ )); return repo@@ ; }
public com.google.gerrit.server.account.Account@@ Config set@@ Load@@ er@@ s(@@ boolean load@@ ) { this@@ .@@ ref@@ res@@ h@@ e@@ g@@ e@@ t = load@@ ed@@ Account@@ ; return this@@ ; }
private java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > load@@ Account@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, org.eclipse.jgit.revwalk.RevWalk r@@ w, org.eclipse.jgit.lib.ObjectId commit@@ , @@@ com.google.gerrit.common.@@ Null@@ able java.util.List<java.lang.String> message@@ s) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { rw.@@ re@@ set@@ (); com.google.gerrit.server.account.Account@@ Config account@@ Config = new com.google.gerrit.server.account.Account@@ Config@@ (account@@ Id); account@@ Load@@ er.@@ set@@ Visible@@ (@@ true@@ ); load@@ (r@@ w, commit@@ ); if ((@@ message@@ s != null@@ ) { messag@@ es.@@ add@@ All(@@ account@@ Config@@ .get@@ Error@@ s().@@ st@@ ream@@ ().@@ map@@ (@@ Validation@@ Error@@ :@@ :@@ :@@ get@@ Message@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ())); } return account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ revision@@ ) != null@@ ) { rw.@@ re@@ set@@ (); rw.@@ mar@@ k@@ Start@@ (@@ revision@@ ); rw.@@ s@@ ort@@ (@@ Rev@@ S@@ ort.@@ RE@@ V@@ ER@@ S@@ E@@ ); regist@@ er@@ ed@@ O@@ n = new java.sql.@@ Tim@@ est@@ amp@@ (((@@ rw.@@ next@@ ().get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ )); org.eclipse.jgit.lib.@@ Config account@@ Config = read@@ Config@@ (com.google.gerrit.server.@@ account.@@ Account@@ Config.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ ); load@@ ed@@ Account = java.util.@@ Optional@@ .@@ of@@ (@@ parse@@ (c@@ fg@@ , revision@@ .@@ name@@ ())); w@@ atch@@ Config = new com.google.gerrit.server.account.@@ Watch@@ Config@@ (account@@ Id, read@@ Config@@ (@@ Watch@@ Config.@@ W@@ AT@@ CH@@ _@@ CON@@ FI@@ G@@ ), this@@ ); if (@@ e@@ ag@@ er@@ ing@@ Load@@ er@@ ) { w@@ atch@@ Config.@@ parse@@ (); } } else { load@@ ed@@ Account = java.util.@@ Optional@@ .@@ empty@@ (); } }
@java.lang.Override public void execute@@ (java.lang.String is@@ s@@ ue@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ Request action@@ Request@@ , java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es) throw@@ s java.io.IOException { java.lang.String te@@ m@@ pl@@ ate = action@@ Request@@ .get@@ Parameter@@ (1); if (!(@@ te@@ m@@ pl@@ ate.@@ isEmpty())) { java.lang.String comm@@ ent = so@@ y@@ Text@@ T@@ em@@ pl@@ ate@@ (@@ com.google.@@ te@@ m@@ pl@@ ate.@@ so@@ y.@@ S@@ o@@ y@@ File@@ Set.@@ buil@@ der@@ (), te@@ m@@ pl@@ ate@@ , pro@@ per@@ ti@@ es@@ ); it@@ s.@@ add@@ Comment@@ (@@ is@@ s@@ ue@@ , comment@@ ); } else { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Add@@ S@@ o@@ y@@ Comm@@ ent.@@ log.error@@ ("@@ Comm@@ ent te@@ m@@ pl@@ ate name g@@ ive@@ n in {@@ }@@ ", action@@ Request@@ ); } } }
@java.lang.Override void log@@ Pro@@ per@@ ty(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ ty@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ log.@@ de@@ bug@@ (@@ pro@@ per@@ ty.@@ toString@@ ()); }
@java.lang.Override public void execute@@ (java.lang.String is@@ s@@ ue@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ Request action@@ Request@@ , java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ti@@ es) throw@@ s java.io.IOException { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ L@@ e@@ ve@@ l ve@@ l = com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ ac@@ tion.@@ Log@@ Ev@@ ent.@@ L@@ ev@@ el@@ .@@ from@@ Strin@@ g.@@ action@@ Request@@ .get@@ Par@@ amet@@ er@@ (@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ ti@@ es) { le@@ v@@ el@@ .@@ log@@ Pro@@ per@@ ty(@@ pro@@ per@@ ty@@ ); } }
public void B@@ RO@@ K@@ EN@@ _@@ test@@ I@@ s@@ Enable@@ d@@ Un@@ k@@ no@@ w@@ n@@ Event@@ () { com.google.gerrit.server.@@ events.@@ Change@@ Event@@ Recor@@ d ev@@ ent = create@@ Mo@@ ck@@ (@@ com.google.gerrit.server.@@ events.@@ Change@@ Merged@@ Event@@ .@@ class@@ ); com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config it@@ s@@ Config = create@@ I@@ t@@ s@@ Config@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); assert@@ F@@ alse@@ (@@ it@@ s@@ Config.@@ isE@@ n@@ able@@ d(@@ event@@ )); assert@@ Log@@ Message@@ Cont@@ ain@@ s@@ g@@ n@@ ed is@@ co@@ g@@ n@@ ed an@@ d ig@@ no@@ re@@ d ig@@ no@@ re@@ d }
@java.lang.Override public void on@@ Event@@ (com.google.gerrit.server.@@ events.@@ Event event) { if (!@@ (@@ ev@@ ent instanceof com.google.gerrit.server.@@ events.@@ Ref@@ Event@@ )) { return@@ ; } com.google.gerrit.server.@@ events.@@ Ref@@ Event ref@@ Event = ((@@ com.google.gerrit.server.@@ events.@@ Ref@@ Event@@ ) (@@ event@@ )); if (!@@ (@@ it@@ s@@ Config.@@ isE@@ n@@ able@@ d@@ ())) { return@@ ; } java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ >> pro@@ per@@ ti@@ es@@ Collection@@ s = pro@@ per@@ ty@@ Ex@@ tr@@ actor@@ .@@ ext@@ r@@ act@@ From@@ (@@ ref@@ Event@@ ); for (@@ java.util.Set<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ ty@@ > pro@@ per@@ ty@@ es : pro@@ per@@ ti@@ es@@ Collection@@ s) { java.util.Collection<@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Action@@ Request@@ > action@@ s = rule@@ B@@ ase.@@ Request@@ s@@ For@@ (@@ pro@@ per@@ ti@@ es@@ ); if (!(@@ action@@ s.@@ isEmpty())) { for (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Pro@@ per@@ t@@ y pro@@ per@@ ti@@ es : pro@@ per@@ ti@@ es) { if ("@@ is@@ s@@ ue@@ "@@ .equals(@@ pro@@ per@@ ty@@ .getKey@@ ())) { java.lang.String is@@ su@@ e = pro@@ per@@ ty@@ .getValue@@ (); action@@ Execu@@ tor@@ .@@ execute@@ (@@ is@@ s@@ ue@@ , pro@@ per@@ ti@@ es@@ ); } } } } }
private void assert@@ Can@@ Edit@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (!@@ (c@@ urrent@@ User@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ dat@@ abase@@ (@@ review@@ Db@@ ).@@ change@@ (@@ notes@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (@@ notes@@ .getProject@@ Name@@ ()).@@ check@@ State@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Co@@ ul@@ d not per@@ mit@@ ted d@@ en@@ i@@ ed@@ ); } }
boolean can@@ Add@@ PatchSet@@ () { return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (("@@ ref@@ s@@ /@@ for@@ /@@ " + (ref@@ Name@@ )@@ )).@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); }
private void en@@ su@@ re@@ Can@@ Edit@@ Commit@@ Message@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s change@@ Notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (!@@ (c@@ urrent@@ User@@ Provider@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ Provider@@ .get@@ ()).@@ dat@@ abase@@ (db@@ .get@@ Notes@@ ()).@@ change@@ Notes@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (change@@ Notes@@ .getProject@@ Name@@ ()).@@ check@@ State@@ (@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Co@@ ul@@ d@@ n@@ '@@ t commit messag@@ e not per@@ mit@@ ted@@ "); } }
public void check@@ State@@ () throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception { check@@ State@@ (((@@ get@@ Project@@ ().get@@ State@@ ()) != null@@ ), "@@ re@@ vi@@ sion not per@@ m@@ it write@@ "); }
@java.lang.Override public com.google.gerrit.server.@@ restapi.@@ Sub@@ m@@ it.@@ Out@@ pu@@ t apply(@@ com.google.gerrit.server.change.@@ Revision@@ Resource rsrc@@ , com.google.gerrit.extensions.api.changes.@@ Submit@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { input.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (in@@ pu@@ t.@@ on@@ Be@@ h@@ al@@ f@@ Of@@ ); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User submit@@ ter@@ ; if ((@@ input.@@ on@@ Be@@ h@@ al@@ f@@ Of@@ ) != null@@ ) { submit@@ ter = on@@ Be@@ h@@ al@@ f@@ Of@@ (rsrc@@ , input@@ ); } else { r@@ sr@@ c.@@ per@@ mission@@ s().@@ check@@ (@@ Change@@ Permission@@ .@@ S@@ U@@ B@@ M@@ IT@@ ); submit@@ ter = rsrc@@ .getUser@@ ().@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); } project@@ Cache.@@ check@@ ed@@ Get@@ (rsrc@@ .getProject@@ ()).@@ state@@ (); return new com.google.gerrit.server.@@ restapi.@@ Sub@@ m@@ it.@@ Out@@ it.@@ merge@@ (rsrc@@ , submit@@ ter@@ , input@@ )); } }
@org.junit.Test public void un@@ b@@ lock@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ () { b@@ lock@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E, com.google.gerrit.server.project.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/heads/@@ *@@ "); allow@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E, com.google.gerrit.server.project.@@ DE@@ V@@ S@@ , "@@ refs/heads/@@ *@@ ").@@ set@@ For@@ ce@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Control u = user@@ (@@ local@@ , com.google.gerrit.server.project.@@ DE@@ V@@ S@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/heads/@@ master@@ "@@ )@@ )).@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ )).@@ nam@@ ed@@ ("@@ c@@ an ed@@ it to@@ p@@ i@@ c name "); }
@org.junit.Test public void un@@ b@@ lock@@ In@@ Lo@@ cal@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ _@@ F@@ ail@@ s() { b@@ lock@@ (@@ parent@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E, com.google.gerrit.server.project.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/heads/@@ *@@ "); allow@@ (@@ local@@ , com.google.gerrit.server.project.@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E, com.google.gerrit.server.project.@@ DE@@ V@@ S@@ , "@@ refs/heads/@@ *@@ ").@@ set@@ For@@ ce@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Control u = user@@ (@@ local@@ , com.google.gerrit.server.project.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/heads/@@ master@@ "@@ )@@ .@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ )).@@ nam@@ ed@@ ("@@ an to@@ p@@ i@@ c name name \"@@ "); }
private boolean can@@ Edit@@ To@@ pic@@ Name@@ () { if (get@@ Change@@ ().get@@ Statu@@ s().@@ is@@ Open@@ ()) { return ((((@@ is@@ Owner@@ ()) || (ref@@ Contro@@ l.@@ is@@ Owner@@ ())) || (get@@ Project@@ Control@@ ().@@ is@@ Owner@@ ())) || (ref@@ Control@@ .@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ ))) || (get@@ Project@@ Control@@ ().@@ is@@ Ad@@ min@@ ()); } return ref@@ Control@@ ().@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return is@@ Visible@@ (); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case FO@@ R@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case FO@@ R@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case FO@@ R@@ G@@ E_@@ CO@@ M@@ M@@ IT@@ T@@ E@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case FO@@ R@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ AT@@ E_@@ CHANG@@ E : return can@@ Up@@ load@@ (); case C@@ RE@@ AT@@ E_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ ((@@ (com.google.gerrit.server.@@ util.@@ M@@ ag@@ ic@@ N@@ EW@@ _@@ CHANG@@ E@@ ) + (ref@@ Name@@ )@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ E_@@ CHANG@@ E@@ S : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ VI@@ EW@@ _@@ P@@ R@@ I@@ V@@ AT@@ E_@@ CHANG@@ E@@ ); case S@@ E_@@ CHANG@@ E@@ S : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ VI@@ EW@@ _@@ P@@ R@@ I@@ V@@ AT@@ E_@@ CHANG@@ E@@ ); case RE@@ AD@@ _@@ CON@@ FI@@ G : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ .@@ RE@@ AD@@ .@@ name@@ ()); case W@@ R@@ IT@@ G : return is@@ Owner@@ (); case S@@ I@@ V@@ AL@@ ID@@ _@@ P@@ AT@@ IO@@ N : return can@@ For@@ g@@ e@@ Commit@@ ter@@ For@@ g@@ an@@ Up@@ load@@ Server@@ Id@@ enti@@ ty@@ ())) && (c@@ an@@ Up@@ load@@ User@@ Id@@ enti@@ ty@@ Control@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ User@@ Id@@ enti@@ ty@@ Control@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ User@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ User@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ User@@ ().@@ can@@ F@@ alse@@ ((@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ User@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ F@@ alse@@ ((@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ For@@ Ref@@ (@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ For@@ g@@ an@@ Up@@ load@@ Project@@ State@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ ())) && (c@@ an@@ Up@@ load@@ F@@ _@@ N@@ ED@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ er@@ for@@ m@@ (@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ F@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ US@@ H@@ _@@ P@@ er@@ for@@ m@@ (@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ F@@ A@@ S@@ , project@@ State@@ (c@@ an@@ Up@@ load@@ ()); } throw new com.google.gerrit.server.@@ per@@ ty@@ Control@@ ().@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ F@@ alse@@ ((@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@ load@@ F@@ alse@@ ((@@ is@@ Owner@@ ())) && (c@@ an@@ Up@@
private void load@@ Ex@@ t@@ en@@ sion@@ Panel@@ Section@@ s(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ ) { java.util.Map<java.lang.String, java.lang.String> low@@ er@@ Name@@ s = new java.util.Hash@@ Map@@ <@@ >(); for (java.lang.String name : r@@ c.get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.git.@@ Project@@ Config.@@ E@@ X@@ T@@ EN@@ S@@ ION@@ _@@ P@@ AN@@ S@@ )) { java.lang.String low@@ er = name.@@ to@@ L@@ ow@@ er@@ Case@@ (); if (@@ low@@ er@@ Nam@@ es.@@ contains@@ Key@@ (@@ low@@ er@@ )) { error@@ (@@ new com.google.gerrit.server.git.@@ Validation@@ Error@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ In@@ vali@@ d Panel@@ s con@@ flict@@ s w@@ it@@ h name, low@@ er@@ Nam@@ es@@ .get(@@ low@@ er@@ )@@ ))); } low@@ er@@ Nam@@ es.@@ put(@@ name); exten@@ sion@@ Panel@@ s.@@ put(@@ name, java.util.Array@@ s.@@ as@@ List(@@ name, java.util.Array@@ s.@@ as@@ List@@ (r@@ c.get@@ String@@ List@@ (com.google.gerrit.server.git.@@ Project@@ Config.@@ E@@ X@@ T@@ EN@@ S@@ ION@@ _@@ E@@ L@@ S@@ , name, com.google.gerrit.server.git.@@ Project@@ Config.@@ K@@ E@@ Y_@@ P@@ AN@@ )@@ ))); } }
@java.lang.Override public org.eclipse.jgit.lib.@@ Config get@@ Config@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ Res@@ ol@@ ver@@ .getName@@ Key@@ (req@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache@@ .get(@@ name@@ Key@@ ); if (@@ st@@ ate != null@@ ) { org.eclipse.jgit.lib.@@ Config cf@@ g = state@@ .get@@ Config@@ ("@@ g@@ itiles.@@ config@@ "@@ ).get@@ With@@ In@@ herit@@ ance@@ (); if ((@@ cfg@@ ) != null@@ ) && ((@@ cfg@@ .get@@ Section@@ s().@@ size@@ ()) > 0@@ )) { return cfg@@ ; } } else { st@@ ate = project@@ Cache@@ .get@@ All@@ Project@@ s(); org.eclipse.jgit.lib.@@ Config cf@@ g = state@@ .get@@ Config@@ ("@@ g@@ itiles.@@ config@@ "@@ ).get@@ (); if (c@@ f@@ g != null@@ ) { cf@@ g = cfg@@ .get@@ Section@@ s().@@ size@@ ()) > 0@@ )) { return cfg@@ ; } } try { org.eclipse.jgit.lib.@@ Config cf@@ g = get@@ G@@ lobal@@ Config@@ (); return cfg@@ ; } catch (@@ java.lang.Exception e) { } return new org.eclipse.jgit.lib.@@ Config@@ (); }
private org.eclipse.jgit.lib.@@ Config get@@ G@@ lobal@@ Config@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.io.File sit@@ e@@ Pat@@ h = new java.io.File@@ ("@@ .@@ "@@ ).get@@ Ab@@ so@@ lu@@ te@@ File@@ (); if ("@@ .@@ "@@ .equals(@@ sit@@ e@@ Path@@ .getName@@ ())) { sit@@ e@@ Pat@@ h = sit@@ e@@ Path@@ .getParent@@ File@@ (); } java.io.File cfg@@ File = new java.io.File@@ (@@ sit@@ e@@ Path@@ , "@@ et@@ c@@ /@@ g@@ itiles.@@ config@@ "); org.eclipse.jgit.@@ st@@ or@@ ag@@ e.@@ file.@@ File@@ B@@ as@@ ed@@ Config cf@@ g = new org.eclipse.jgit.@@ st@@ or@@ ag@@ e.@@ file.@@ File@@ B@@ as@@ ed@@ Config@@ (c@@ fg@@ File@@ , org.eclipse.jgit.@@ util.@@ F@@ S@@ .@@ DE@@ T@@ EC@@ T@@ ED@@ ); if (c@@ fg@@ .get@@ File@@ ().@@ ex@@ ist@@ s()) { cf@@ g.@@ load@@ (); } return cfg@@ ; }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if (@@ o == (@@ this@@ )) { return true@@ ; } if (@@ o instanceof com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) { com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info th@@ a@@ t = ((@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) (@@ o@@ )); return (((@@ this@@ .@@ match@@ ) == null ? (@@ th@@ a@@ t.@@ match@@ ) == null : this@@ .@@ match@@ .equals(@@ th@@ a@@ t.@@ match@@ )@@ ))) && ((@@ this@@ .@@ link@@ ) == null ? (@@ th@@ a@@ t.@@ link@@ ) : this@@ .@@ lin@@ k.@@ equals(@@ ref@@ )); if (@@ o instanceof com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) { com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info th@@ a@@ t = ((@@ com.google.gerrit.extensions.api.@@ projects.@@ Comment@@ Link@@ Info@@ ) (@@ o@@ )); return (((@@ this@@ .@@ enable@@ d@@ ) == null ? (@@ th@@ a@@ t.@@ enable@@ d@@ ) == null : this@@ .@@ enable@@ d@@ )); } return false@@ ; }
com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ Filter@@ ed@@ Repository create@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey name@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name); try { if (!(@@ project@@ State@@ .getProject@@ ().get@@ State@@ ().@@ per@@ mit@@ s@@ Read@@ ())) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name); } } catch (@@ java.lang.Exception e) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name); } return new com.googlesource@@ .gerrit.@@ plugins@@ .g@@ itiles.@@ ed@@ Filter@@ Repository(@@ project@@ State@@ , user@@ Provider@@ .get(), repo@@ Manager.@@ open@@ Repository(@@ name@@ ), vi@@ sible@@ Ref@@ Filter@@ Factory@@ , per@@ mission@@ Back@@ end@@ ); }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.util.@@ Object@@ s.@@ has@@ h@@ (@@ this@@ .@@ messag@@ e.@@ has@@ h@@ Code@@ ()); }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if (@@ o == (@@ this@@ )) { return true@@ ; } if (@@ o instanceof com.google.gerrit.server.git.@@ Validation@@ Error@@ ) { com.google.gerrit.server.git.@@ Validation@@ E@@ rror th@@ a@@ t = ((@@ com.google.gerrit.server.git.@@ Validation@@ Error@@ ) (@@ o@@ )); return (@@ this@@ .@@ message@@ ) == null ? (@@ th@@ a@@ t.@@ message@@ ) == null : this@@ .@@ messag@@ e.@@ equals(@@ th@@ a@@ t.@@ message@@ ); } return false@@ ; }
@java.lang.Override public com.google.gerrit.server.project.Project@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ .get(), true@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return rsrc@@ ; }
public com.google.gerrit.server.project.Project@@ Resource parse@@ (java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { return parse@@ (id@@ , true@@ ); }
public com.google.gerrit.server.project.Project@@ Resource parse@@ (java.lang.String id@@ , boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ Resource r@@ sr@@ c = _@@ parse@@ (id@@ , check@@ Access@@ ); if (r@@ sr@@ c == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ No@@ t Fo@@ und@@ : %@@ s", id@@ )); } return rsrc@@ ; }
public void check@@ State@@ Per@@ mit@@ s@@ Read@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception { if (!(@@ state@@ Per@@ mit@@ s@@ Wri@@ te@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ project st@@ ate " + (get@@ Project@@ ().get@@ State@@ ().@@ name@@ ())) + " do@@ es not per@@ m@@ it read@@ ")); } }
@java.lang.Override public com.google.gerrit.server.project.@@ Ch@@ ild@@ Project@@ Resource parse@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ Resource p = project@@ s@@ Collec@@ tion.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ ); for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ p : p@@ .getProject@@ State@@ ().@@ parent@@ s()) { if (@@ parent@@ .getName@@ Key@@ ().equals(@@ p@@ .getProject@@ ().get@@ NameKey@@ ())) { return new com.google.gerrit.server.project.@@ Ch@@ ild@@ Project@@ Resource@@ (@@ parent@@ , p@@ .getProject@@ State@@ ()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case RE@@ A@@ D : return (@@ is@@ Visible@@ ()) && (get@@ Project@@ Control@@ ().get@@ Project@@ State@@ ().@@ state@@ ()); case C@@ RE@@ AT@@ E : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ per@@ mission@@ Name@@ ().get@@ ()); case DE@@ LE@@ T@@ E : return can@@ Delete@@ (); case U@@ P@@ D@@ AT@@ E : return can@@ Update@@ (); case FO@@ R@@ C@@ E_@@ U@@ P@@ D@@ AT@@ E : return can@@ For@@ ce@@ Update@@ (); case S@@ E@@ T_@@ HE@@ A@@ D : return project@@ Contro@@ l.@@ is@@ Owner@@ (); case FO@@ R@@ G@@ E_@@ A@@ UT@@ H@@ O@@ R : return can@@ For@@ g@@ e@@ Author@@ (); case FO@@ R@@ G@@ E_@@ CO@@ M@@ IT@@ T@@ E@@ R : return can@@ For@@ g@@ e@@ Commit@@ ter@@ (); case FO@@ R@@ G@@ E_@@ S@@ ER@@ V@@ E@@ R : return can@@ For@@ g@@ e@@ Gerrit@@ Server@@ Id@@ enti@@ ty@@ (); case M@@ ER@@ G@@ E : return can@@ Up@@ load@@ Merg@@ es@@ (); case C@@ RE@@ AT@@ E_@@ S@@ I@@ G@@ N@@ ED@@ _@@ T@@ A@@ G : return can@@ P@@ er@@ for@@ m@@ (@@ per@@ m.@@ name@@ ()); case U@@ P@@ D@@ AT@@ E_@@ B@@ Y_@@ S@@ U@@ B@@ M@@ I@@ T : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ ((@@ (com.google.gerrit.server.@@ util.@@ M@@ ag@@ ic@@ Branch.@@ N@@ EW@@ _@@ CHANG@@ E@@ ) + (ref@@ Name@@ )@@ )).@@ can@@ Submit@@ (@@ true@@ ); case RE@@ AD@@ _@@ P@@ R@@ I@@ V@@ E_@@ CHANG@@ E@@ S : return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ VI@@ EW@@ _@@ P@@ AT@@ E_@@ CHANG@@ ES@@ ); case RE@@ AD@@ AD@@ AD@@ _@@ P@@ R@@ I@@ V@@ AT@@ E_@@ CHANG@@ ES@@ ); return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ VI@@ EW@@ _@@ P@@ AT@@ E_@@ CHANG@@ ES@@ ); case RE@@ AD@@ AD@@ AD@@ ER@@ _@@ P@@ AT@@ CH@@ _S@@ I@@ V@@ AL@@ ID@@ _@@ P@@ AT@@ CH@@ _S@@ I@@ V@@ E@@ ) : return project@@ Contro@@ l.@@ control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Ref@@ Permission@@ .@@ name@@ ()); case CO@@ M@@ IT@@ S@@ I@@ V@@ AL@@ ID@@ _@@ P@@ AT@@ ID@@ AT@@ ID@@ _@@ P@@ US@@ g@@ an@@ For@@ g@@ an@@ For@@ g@@ an@@ For@@ (@@ is@@ Commit@@ ter@@ For@@ g@@ an@@ For@@ g@@ an@@ For@@ g@@ an@@ Up@@ load@@ ()); return can@@ P@@ er@@ for@@ m@@ (@@ server@@ Ident@@ , user@@ Id); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.collect.Immutable@@ List.@@ of@@ ()), account@@ Config@@ .getProject@@ Watch@@ es@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ account@@ Id@@ .get@@ Config@@ ().get@@ General@@ Preferences@@ ())); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , account@@ .get@@ ExternalId@@ s@@ Rev@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ) -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ())@@ , com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ ) -@@ > account@@ Config@@ .get@@ D@@ if@@ f@@ Preferences@@ ())@@ )); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ e@@ 3@@ 9@@ 5@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 1@@ 8@@ 2@@ 4@@ 9@@ 5@@ 3@@ 5@@ 3@@ c@@ 6@@ 3@@ 2@@ 3@@ 4@@ 6@@ 9@@ 6@@ 3@@ 4@@ 4@@ 1@@ 6@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _@@ ST@@ AT@@ E@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info.@@ Default@@ s@@ ())); assert@@ Th@@ at(@@ act@@ u@@ e = get@@ User@@ Name@@ ((((@@ expected@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + (@@ met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ expected@@ Value@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info.@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.@@ comm@@ on@@ s.@@ base.@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.@@ comm@@ on@@ s.@@ I@@ con@@ ())); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , account@@ .get@@ ExternalId@@ s@@ Rev@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Watch@@ es@@ ()) + "@@ )@@ )), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ ) >@@ ) (@@ -@@ account@@ Config@@ .get@@ General@@ Preferences@@ ())@@ ))); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ e@@ 3@@ 9@@ 5@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 1@@ 8@@ 2@@ 4@@ 9@@ 5@@ 3@@ 5@@ 3@@ c@@ 3@@ 5@@ 6@@ 3@@ 2@@ 3@@ 4@@ 6@@ 9@@ 2@@ 3@@ 4@@ 6@@ a@@ 1@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _@@ ST@@ AT@@ E@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.@@ comm@@ on@@ s.@@ of@@ Instance@@ (@@ com.google.@@ comm@@ on@@ I@@ mmutable@@ Map.@@ of@@ (c@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info.@@ Default@@ s(@@ expected@@ , com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); assert@@ Th@@ at(@@ values@@ ).@@ hasSize@@ (1); java.lang.String expected@@ Val@@ u@@ e = ((((@@ all@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ expected@@ Value@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ mo@@ i@@ ze@@ ) -@@ > account@@ Config@@ .get@@ D@@ if@@ f@@ Preferences@@ ())@@ , com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ Edit@@ Preferences@@ ())); }
public com.google.gerrit.server.account.Account@@ State get@@ Account@@ () throw@@ s java.io.IOException { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , ((@@ ext@@ Id@@ .get@@ Revision@@ ()) != null ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), ext@@ Id@@ .get@@ Revision@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ ) -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ mo@@ i@@ ze@@ ) -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ())@@ ), com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ class@@ ); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > from@@ Account@@ Config@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name, com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ s ext@@ er@@ n@@ al@@ Id@@ s, com.google.gerrit.server.account.Account@@ Config account@@ Config@@ ) throw@@ s java.io.IOException { if (!(@@ account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().@@ is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ empty@@ (); } com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ Load@@ ed@@ Account@@ ().get@@ (); return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , (account@@ Config@@ .get@@ ExternalId@@ s@@ ().@@ is@@ P@@ res@@ ent@@ () ? ext@@ er@@ n@@ al@@ Id@@ s.@@ by@@ Account@@ (account@@ .getId@@ (), account@@ Config@@ .get@@ ExternalId@@ s@@ ().get@@ ()) : com.google.common.collect.Immutable@@ Set.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .getProject@@ Watch@@ es@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ) -@@ > account@@ Config@@ .get@@ General@@ Preferences@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ ((@@ -@@ > account@@ Config@@ .get@@ D@@ if@@ f@@ Preferences@@ ())@@ , com.google.common.base.@@ Optional@@ .@@ of@@ pli@@ er@@ s.@@ me@@ mo@@ i@@ ze@@ (@@ mo@@ i@@ ze@@ Config@@ .get@@ Edit@@ Preferences@@ ())@@ ))); }
@org.junit.Test public void ref@@ State@@ Fiel@@ d@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name all@@ User@@ s@@ Name = new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); java.lang.String met@@ a@@ Id = "@@ 0@@ e@@ 3@@ 9@@ 5@@ b@@ 2@@ 5@@ d@@ c@@ 9@@ 1@@ 1@@ 8@@ 2@@ 4@@ 9@@ 5@@ 3@@ 5@@ 3@@ c@@ 3@@ 5@@ 6@@ 3@@ 2@@ 3@@ 4@@ 6@@ 9@@ 2@@ 3@@ 4@@ 6@@ a@@ 6@@ "; account.@@ set@@ Met@@ a@@ Id(@@ met@@ a@@ Id); java.util.List<java.lang.String> value@@ s = toString@@ Account@@ Fiel@@ d.@@ RE@@ F@@ _@@ ST@@ AT@@ E@@ .get@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ For@@ war@@ d@@ Null@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info.@@ User@@ Name@@ .get@@ ()))); assert@@ Th@@ at(@@ expected@@ Val@@ u@@ e = ((((@@ all@@ User@@ s@@ Name@@ .get@@ ()) + "@@ :@@ ") + (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ .getId@@ ()))) + "@@ :@@ ") + met@@ a@@ Id@@ ; assert@@ Th@@ at(@@ com.google.common.collect.I@@ terable@@ s.get@@ Only@@ Element@@ (@@ expected@@ Value@@ )).@@ isEqualTo(@@ expected@@ Value@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
public com.google.gerrit.server.account.Account@@ State insert@@ (java.lang.String message@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return update@@ Account@@ (("@@ r@@ -@@ > { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (r@@ , account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (@@ new java.sql.@@ Tim@@ est@@ amp@@ (@@ commit@@ ter@@ Ident@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ())); com.google.gerrit.server.account.Account@@ State account@@ State = new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); com.google.gerrit.server.account.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info default@@ s@@ ())); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ buil@@ der@@ (); updat@@ er.@@ update@@ (account@@ , update@@ Builder@@ ); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update updat@@ e = update@@ Buil@@ der.@@ bu@@ ild@@ (); account@@ Config.@@ set@@ Account@@ Update@@ (@@ update@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ s = create@@ Notes@@ (r@@ , account@@ Config@@ .get@@ ExternalId@@ s@@ (), account@@ Id, update@@ ); com.google.gerrit.server.account.Account@@ s@@ Update.@@ updat@@ ed@@ Account@@ s = new com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ (@@ all@@ User@@ s@@ Name, ext@@ er@@ n@@ al@@ Id@@ s, account@@ , ext@@ Id@@ Config@@ , ext@@ Id@@ ); updat@@ ed@@ Account@@ Cre@@ ated@@ s.set@@ (@@ true@@ ); return updat@@ ed@@ Account@@ ; }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ Set.@@ of@@ (), com.google.@@ comm@@ on@@ s.@@ base.@@ as@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.@@ comm@@ on@@ s.@@ I@@ mmutable@@ Map.@@ of@@ (@@ com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info.@@ default@@ s@@ ())); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ()), com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private void save@@ ProjectWatch@@ es@@ () throw@@ s java.io.IOException { if ((@@ account@@ Update.@@ is@@ P@@ res@@ ent@@ ()) && ((@@ !(@@ account@@ Update@@ .get@@ ().get@@ De@@ le@@ ted@@ ProjectWatch@@ es@@ ().@@ isEmpty())) || (!(@@ account@@ Update@@ .get@@ ().get@@ ProjectWatch@@ es@@ ().@@ isEmpty@@ ())@@ ))) { java.util.Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es = new java.util.Hash@@ Map@@ (@@ w@@ atch@@ Config@@ .getProject@@ Watch@@ es@@ (), account@@ Update@@ .get@@ ().get@@ De@@ le@@ ted@@ ProjectWatch@@ es@@ ()@@ .@@ for@@ E@@ ach@@ (( p@@ ) -@@ > project@@ Watch@@ es.@@ remove@@ (p@@ w@@ .get@@ Update@@ ().get@@ ProjectWatch@@ es@@ ()@@ .@@ for@@ E@@ ach@@ (( p@@ w, p@@ w, project@@ Watch@@ es.@@ put@@ (p@@ w, save@@ Config@@ (@@ W@@ AT@@ CH@@ _@@ CON@@ FI@@ G@@ , w@@ atch@@ Config.@@ save@@ (@@ com.google.common.collect.Immutable@@ Map.@@ copy@@ Of@@ (project@@ Watch@@ es@@ )); } }
public com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { check@@ Load@@ ed@@ (); return w@@ atch@@ Config@@ .getProject@@ Watch@@ es@@ (); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing public static com.google.common.collect.Immutable@@ Ma@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> parse@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, org.eclipse.jgit.lib.@@ Config cfg@@ , com.google.gerrit.server.git.@@ Validation@@ Error@@ .@@ S@@ in@@ k valid@@ ation@@ Error@@ S@@ in@@ k@@ ) { java.util.Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es = new java.util.Hash@@ Map@@ <@@ >(); for (java.lang.String project@@ Name : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ )) { java.lang.String@@ [] not@@ if@@ y@@ Value@@ s = cfg@@ .get@@ String@@ List@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , project@@ Name, com.google.gerrit.server.account.@@ Watch@@ Config.@@ K@@ E@@ Y_@@ NO@@ T@@ I@@ F@@ Y@@ ); for (java.lang.String n@@ v : not@@ if@@ y@@ Val@@ u@@ es) { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ n@@ v@@ )) { continue@@ ; } } com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e not@@ if@@ y@@ Val@@ u@@ e = com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e.@@ parse@@ (account@@ Id, project@@ Name, n@@ v@@ , valid@@ ation@@ Error@@ S@@ in@@ k@@ ); if (@@ not@@ if@@ y@@ Val@@ u@@ e == null@@ ) { continue@@ ; } com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key k@@ ey = com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ .create@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (project@@ Name@@ ), not@@ if@@ y@@ Val@@ u@@ e.@@ filter@@ ()); if (!(@@ project@@ Watch@@ es.@@ contains@@ Key@@ (key@@ ))) { project@@ Watch@@ es.@@ put(@@ key@@ , java.util.@@ En@@ um@@ Set.@@ n@@ one@@ Of@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ .@@ class@@ )); } project@@ Watch@@ es@@ .get(@@ key@@ ).@@ add@@ All(@@ not@@ if@@ y@@ Val@@ u@@ e.@@ not@@ if@@ y@@ Typ@@ es@@ ()); } return com.google.common.collect.Immutable@@ Map.@@ copy@@ Of@@ (@@ project@@ Watch@@ es@@ ); }
public org.eclipse.jgit.lib.@@ Config save@@ (@@ com.google.common.collect.Immutable@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> project@@ Watch@@ es) { this@@ .@@ project@@ Watch@@ es = project@@ Watch@@ es@@ ; for (java.lang.String project@@ Name : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ )) { cf@@ g.@@ un@@ set@@ Section@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , project@@ Name); } com.google.common.collect.List@@ Multimap@@ <java.lang.String, java.lang.String> not@@ if@@ y@@ Val@@ u@@ es@@ By@@ P@@ roject = com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es@@ ().@@ bu@@ ild@@ (); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> e : project@@ Watch@@ es@@ By@@ Project.@@ put(@@ e.get@@ Key@@ ().@@ project@@ ().get@@ (), not@@ if@@ y@@ Val@@ u@@ e.@@ toString@@ ()); } for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e not@@ if@@ y@@ Val@@ u@@ e : not@@ if@@ y@@ Val@@ u@@ es@@ By@@ Project.@@ put(@@ e.get@@ Key@@ ().@@ project@@ ().get@@ (), not@@ if@@ y@@ Val@@ u@@ e.@@ toString@@ ()); } for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Val@@ u@@ e not@@ if@@ y@@ Val@@ u@@ e : not@@ if@@ y@@ Val@@ u@@ es@@ By@@ Project.@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { cfg@@ .@@ set@@ String@@ (com.google.gerrit.server.@@ account.@@ Watch@@ Config.@@ P@@ RO@@ JEC@@ T@@ , e.get@@ Key@@ (), com.google.gerrit.server.account.@@ Watch@@ Config.@@ K@@ E@@ Y_@@ NO@@ T@@ I@@ F@@ Y@@ , new java.util.Array@@ List(@@ e.get@@ Value@@ ())); } return cfg@@ ; }
public com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { if ((@@ project@@ Watch@@ es) == null@@ ) { parse@@ (); } return project@@ Watch@@ es@@ ; }
public com.google.common.collect.Immutable@@ Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> get@@ ProjectWatch@@ es@@ () { return project@@ Watch@@ es@@ ; }
public com.google.gerrit.server.account.Account@@ State insert@@ (java.lang.String message@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.Account@@ s@@ Update.@@ Account@@ Update@@ r updat@@ er@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return update@@ Account@@ (("@@ Gener@@ at@@ ing r@@ ) -@@ > { com.google.gerrit.server.account.Account@@ Config account@@ Config = read@@ (r@@ , account@@ Id); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Config@@ .get@@ New@@ Account@@ (@@ new java.sql.@@ Tim@@ est@@ amp@@ (@@ commit@@ ter@@ Ident@@ .get@@ Wh@@ en@@ ().get@@ Time@@ ())); com.google.gerrit.server.account.Account@@ State account@@ State = new com.google.gerrit.server.account.Account@@ State@@ (@@ all@@ User@@ s@@ Name, account@@ , com.google.common.collect.Immutable@@ Set.@@ of@@ (), com.google.@@ comm@@ on@@ s.@@ base.@@ of@@ Instance@@ (@@ com.google.@@ comm@@ on@@ s.@@ I@@ mmutable@@ Map.@@ of@@ (@@ Account@@ ExternalId@@ :@@ :@@ :@@ set@@ )@@ ))); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update.@@ add@@ (@@ new com.google.gerrit.server.account.@@ Get@@ Preferen@@ ces.@@ Default@@ (@@ update@@ , update@@ ); com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update updat@@ e = update@@ Buil@@ der.@@ bu@@ ild@@ (); account@@ Update@@ (@@ update@@ ); com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ Note@@ s ext@@ Id@@ s = create@@ Note@@ ExternalId@@ Notes@@ (r@@ , account@@ Config@@ .get@@ ExternalId@@ s@@ (), account@@ Id, update@@ ); com.google.gerrit.server.account.Account@@ s@@ Update.@@ updat@@ ed@@ Account@@ s = new com.google.gerrit.server.account.Account@@ s@@ Update.@@ all@@ User@@ s@@ Name, ext@@ er@@ n@@ al@@ Id@@ s, account@@ Config@@ , ext@@ Id@@ s, ext@@ Id@@ ); updat@@ ed@@ Account@@ Cre@@ ated@@ s.set@@ (@@ true@@ ); return updat@@ ed@@ Account@@ s; } }); }
public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ All@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.@@ reg@@ ex@@ .@@ Match@@ er m = java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ .@@ * \@@ )@@ $@@ "); com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (m@@ .group@@ (1@@ )); if (account@@ s.get(@@ id@@ ).@@ is@@ P@@ res@@ ent@@ ()) { return java.util.Collections.singleton@@ (id@@ ); } return java.util.Collections.@@ empty@@ Set@@ (); } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es@@ ("@@ ^@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ $@@ ")) { com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (@@ name@@ Or@@ Email@@ ); if (account@@ s.get(@@ id@@ ).@@ is@@ P@@ res@@ ent@@ ()) { return java.util.Collections.singleton@@ (id@@ ); } return java.util.Collections.@@ empty@@ Set@@ (); } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es(@@ Account.@@ US@@ ER@@ _@@ NAM@@ E_@@ P@@ AT@@ T@@ ER@@ N@@ )) { com.google.gerrit.server.account.Account@@ State wh@@ o = by@@ Id@@ .get@@ By@@ User@@ name@@ (@@ name@@ Or@@ Email@@ ); if (@@ wh@@ o@@ o@@ o@@ .getAccount@@ ().get@@ Id()); } } return fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (@@ new com.google.gerrit.server.config.@@ All@@ User@@ s@@ Name@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ), account@@ Set.@@ of@@ (), com.google.@@ comm@@ on@@ base.@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ com.google.@@ comm@@ on@@ s.@@ I@@ mmutable@@ Map.@@ of@@ (), com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info@@ .@@ default@@ s@@ ())); }
private void check@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int va@@ l@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { if (@@ com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Control@@ .@@ can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Check@@ (@@ per@@ mission@@ Back@@ end@@ , notes@@ .getChange@@ (), current@@ User@@ , reviewer@@ , va@@ l@@ )) { return@@ ; } per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (@@ notes@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REVI@@ EW@@ ER@@ ); }
private static boolean can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Permission@@ (@@ com.google.gerrit.server.project.Project@@ Control control@@ , com.google.gerrit.reviewdb.client.Change change@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(@@ change@@ .get@@ Statu@@ s().@@ is@@ Open@@ ())) { return false@@ ; } if (c@@ urrent@@ User@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { com.google.gerrit.reviewdb.client.Account.Id a@@ Id = current@@ User@@ .getAccount@@ Id(); if (@@ a@@ Id.@@ equals(@@ reviewer@@ )) { return true@@ ; } else if ((@@ a@@ Id.@@ equals(@@ change@@ .get@@ Owner@@ ())) && (@@ 0 <@@ = value@@ )) { return true@@ ; } } else if ((@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ With@@ User w@@ ith@@ User = per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ P@@ roject = for@@ User@@ (@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ P@@ roject = com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ check@@ (@@ for@@ User@@ (change@@ , ref@@ .get@@ Dest@@ ().get@@ ()), Ref@@ Permission@@ .@@ W@@ R@@ IT@@ )) || (@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ .@@ Remo@@ ve@@ Reviewer@@ Contro@@ l.@@ check@@ (@@ for@@ User@@ , ref@@ .get@@ Dest@@ ().get@@ Ref@@ ()), Ref@@ Permission@@ .@@ W@@ R@@ IT@@ E_@@ CON@@ FI@@ G@@ )) || (@@ com.google.gerrit.server.@@ project@@ Contro@@ l.@@ check@@ (@@ w@@ ith@@ User@@ , G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ E@@ ))) { return true@@ ; } } return false@@ ; }
public boolean test@@ Remo@@ ve@@ Reviewer@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ , com.google.gerrit.server.@@ Current@@ User current@@ User@@ , com.google.gerrit.reviewdb.client.Account.Id reviewer@@ , int valu@@ e) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ com.google.gerrit.server.project.@@ Remo@@ ve@@ Reviewer@@ Control@@ .@@ can@@ Remo@@ ve@@ Reviewer@@ With@@ out@@ Check@@ (c@@ urrent@@ User@@ , user@@ )) { return true@@ ; } return per@@ mission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ ).@@ change@@ (c@@ d@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ).@@ test@@ (@@ Change@@ Permission@@ .@@ RE@@ M@@ O@@ V@@ E_@@ REVI@@ EW@@ ER@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.project.Project@@ Resource@@ , ?@@ > create@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { check@@ State@@ ().@@ check@@ State@@ (((@@ (((@@ (((@@ (((@@ sub@@ mission@@ Name) != null@@ ), "@@ mis@@ s@@ ing to f@@ ro@@ m th@@ e change edit@@ "); return create@@ Default@@ (); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public void test@@ Su@@ ggest@@ ed@@ N@@ on@@ Match@@ ing@@ () throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > ret@@ ; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent i@@ v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ , null@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ S@@ U@@ G@@ E@@ ST@@ D@@ ).@@ at@@ (((@@ event@@ .get@@ L@@ e@@ ast@@ On@@ ce@@ ()) + "@@ ^@@ set@@ ")); expec@@ t(@@ commit@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ x@@ ")); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Message@@ ").@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Tim@@ es@@ "); an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ s@@ s@@ ue@@ Id@@ s("@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ L@@ e@@ ast@@ On@@ ce@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); re@@ t = c.@@ on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ event@@ ); assert@@ E@@ qual@@ s@@ ("@@ statu@@ s of return@@ ed to m@@ atch re@@ es not cont@@ ai@@ n " + "@@ s@@ "), "@@ s@@ ue@@ "), s@@ ue@@ .get(@@ 0@@ ).get@@ Message@@ ().@@ is@@ su@@ e a@@ \n@@ "); }
public java.lang.String get@@ Comment@@ Link@@ Name@@ () { java.lang.String ret@@ ; re@@ t = get@@ Plugin@@ Config@@ String@@ ("@@ comment@@ link@@ ", null@@ ); if (re@@ t == null@@ ) { re@@ t = plugin@@ Name@@ ; } return ret@@ ; }
public java.util.@@ reg@@ ex@@ .@@ Pat@@ ter@@ n get@@ D@@ u@@ mm@@ y@@ I@@ s@@ s@@ ue@@ Pat@@ tern@@ () { return java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (get@@ Plugin@@ Config@@ String@@ ("@@ d@@ u@@ mm@@ y@@ I@@ s@@ s@@ s@@ ue@@ Pat@@ tern@@ ", "@@ x@@ ")); }
public void test@@ M@@ an@@ dator@@ y@@ N@@ on@@ Match@@ ing@@ () { com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent i@@ v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ , null@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ M@@ AN@@ D@@ AT@@ O@@ R@@ Y@@ ).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ it@@ s@@ Config@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ x@@ "@@ )).@@ is@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ ("@@ Test@@ Message@@ ").@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ commit@@ ).@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Commit@@ ").@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ ue@@ Id@@ s("@@ Test@@ Message@@ "@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ at@@ L@@ e@@ at@@ On@@ ce@@ (); re@@ pla@@ y@@ Mo@@ ck@@ s(); try { v@@ on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (@@ event@@ ); f@@ ail@@ ("@@ d@@ id not ex@@ cepti@@ on b@@ y on cepti@@ on commit@@ "); } catch (com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception e) { assert@@ True@@ (("@@ Co@@ ul@@ d not do@@ es not is@@ su@@ e " + su@@ e is@@ su@@ e " Change@@ -@@ Id of ") + (@@ e.get@@ Message@@ ().@@ contain@@ s("@@ su@@ e a@@ s e@@ ")); } }
private java.lang.String get@@ Plugin@@ Config@@ String@@ (java.lang.String key@@ , java.lang.String default@@ Val@@ u@@ e : va@@ l@@ ; java.lang.String va@@ l = get@@ Current@@ Plugin@@ Config@@ ().get@@ String@@ (key@@ , gerrit@@ Config@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Config.@@ P@@ L@@ U@@ G@@ IN@@ , plugin@@ Name, key@@ )); return va@@ l == null ? default@@ Val@@ u@@ e : va@@ l@@ ; }
public void test@@ Only@@ S@@ kip@@ Match@@ ing@@ () throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > ret@@ ; com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comm@@ ent i@@ v@@ c = in@@ jec@@ tor@@ .get@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ valid@@ ation.@@ I@@ t@@ s@@ Vali@@ date@@ Comment@@ .@@ class@@ ); org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d comm@@ an@@ d = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Command@@ .@@ class@@ ); org.eclipse.jgit.revwalk.RevCommit commit = create@@ Mo@@ ck@@ (@@ org.eclipse.jgit.revwalk.Rev@@ Commit@@ .@@ class@@ ); com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event ev@@ ent = new@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event@@ (@@ command@@ , project, null@@ , commit@@ , null@@ ); expec@@ t(@@ it@@ s@@ Config@@ .get@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ I@@ t@@ s@@ As@@ so@@ c@@ i@@ ation@@ Po@@ li@@ c@@ y.@@ M@@ AN@@ D@@ AT@@ O@@ R@@ Y@@ ).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ s@@ Config@@ .get@@ D@@ u@@ mm@@ y@@ I@@ s@@ ue@@ Pat@@ tern@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ S@@ K@@ I@@ P@@ "@@ )).@@ at@@ L@@ e@@ ast@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .get@@ F@@ ull@@ Message@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Messag@@ e S@@ K@@ I@@ P@@ L@@ e@@ at@@ On@@ ce@@ (); expec@@ t(@@ commit@@ .getId@@ ()).@@ and@@ Ret@@ ur@@ n@@ (@@ an@@ y@@ Tim@@ es@@ (); expec@@ t(@@ commit@@ .getName@@ ()).@@ and@@ Ret@@ ur@@ n@@ ("@@ Test@@ Tim@@ es@@ "); expec@@ t(@@ is@@ s@@ ue@@ Ex@@ tr@@ actor@@ .get@@ I@@ s@@ s@@ s@@ ue@@ Id@@ ("@@ Test@@ Messag@@ e S@@ K@@ I@@ P@@ "@@ )).@@ and@@ Ret@@ ur@@ n@@ (@@ new java.lang.String@@ [@@ ]@@ { }@@ ).@@ at@@ L@@ e@@ ast@@ L@@ e@@ ast@@ Mo@@ ck@@ (); re@@ pla@@ i@@ v@@ ed@@ (@@ event@@ ); assert@@ E@@ mpty@@ List(@@ event@@ ); }
@java.lang.Override @@@ com.google.gerrit.common.@@ Null@@ able public synchronized java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > get@@ By@@ User@@ name@@ (java.lang.String user@@ name@@ ) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ by@@ User@@ name@@ .get(@@ user@@ name@@ ).get@@ (); }
private java.util.@@ Optional@@ <java.lang.String> read@@ Project@@ Config@@ (java.lang.String project@@ Name) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository@@ (@@ new com.google.gerrit.reviewdb.client.Project.NameKey@@ (project@@ Name@@ ))) { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <?@@ > t@@ r = new org.eclipse.jgit.@@ junit.@@ Test@@ Repository(@@ repo@@ ); org.eclipse.jgit.revwalk.RevWalk r@@ w = tr@@ .get@@ Rev@@ Wal@@ k@@ (); org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); if (re@@ f == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } org.eclipse.jgit.lib.Object@@ Load@@ er ob@@ j = r@@ w@@ .get@@ Object@@ Read@@ er@@ ().@@ open@@ (@@ tr@@ .get(@@ rw.@@ parse@@ Tree@@ (ref@@ .get@@ Object@@ Id@@ ()), com.google.gerrit.acceptance.@@ rest.@@ project.@@ P@@ RO@@ JEC@@ T_@@ CON@@ FI@@ G@@ ), com.google.gerrit.acceptance.@@ rest.@@ project.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ); return java.util.@@ Optional@@ .@@ of@@ (@@ new java.lang.String@@ (@@ ob@@ j@@ .get@@ Cach@@ ed@@ By@@ t@@ es@@ (java.lang.@@ Integ@@ er.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E@@ ), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); } }
public <@@ T> T execute@@ Index@@ Quer@@ y(@@ com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ Action@@ Type.@@ IN@@ DE@@ X@@ _@@ Q@@ U@@ ER@@ Y@@ , action@@ , ("@@ S@@ E@@ L@@ E t@@ ) -@@ > t instanceof com.google.gwtorm.server.Orm@@ Exception@@ ); } catch (java.lang.@@ Throwable t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (t@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e.get@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e.get@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private <@@ T> T execute@@ With@@ At@@ te@@ mp@@ t@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> ac@@ tion@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predi@@ c@@ ate@@ ) throw@@ s java.io.IOException { java.lang.String ms@@ g = "@@ Cannot el@@ p@@ er.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ R@@ e@@ try@@ ing " + (@@ en@@ c@@ List@@ ener@@ )) + " on p@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ Builder@@ <@@ T> r@@ e@@ try@@ Builder = create@@ R@@ e@@ try@@ er@@ Builder@@ (@@ op@@ t@@ s, ex@@ cepti@@ on@@ Predicate@@ ); r@@ e@@ try@@ Buil@@ der.@@ w@@ ith@@ R@@ e@@ try@@ List@@ ener@@ (@@ list@@ ener@@ ); return execute@@ With@@ out@@ Coun@@ t != null ? action@@ Type@@ ) : null@@ ; } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ s.@@ re@@ cor@@ d(@@ action@@ Type@@ , list@@ ener@@ .get@@ At@@ t@@ Count@@ ()); } }
public <@@ T> T execute@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ <@@ T> action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s java.lang.@@ Exception { try { return execute@@ With@@ At@@ Coun@@ t(@@ action@@ Type@@ , action@@ Type@@ , op@@ t@@ ex@@ cepti@@ on@@ Predicate@@ ); } catch (@@ java.lang.Exception e) { throw com.google.gerrit.server.@@ api.@@ Api@@ Util.@@ as@@ Res@@ tApi@@ Exception("@@ Cannot de@@ le@@ te ref@@ ", e); } }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ With@@ R@@ e@@ try@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type.@@ G@@ RO@@ U@@ P@@ _@@ U@@ P@@ D@@ AT@@ E, () -@@ > create@@ Group@@ In@@ NoteDb@@ (@@ group@@ Cre@@ ation@@ , group@@ Update@@ ), com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ .@@ class@@ :@@ is@@ :@@ is@@ Instance@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
private <@@ T> T execute@@ Account@@ Update@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ Action@@ Type.@@ AC@@ CO@@ UN@@ T_@@ U@@ P@@ D@@ AT@@ E, action@@ , ("@@ In@@ vali@@ d t@@ ) -@@ > t instanceof com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ Exception@@ ); } catch (@@ java.lang.Exception t@@ ) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e.get@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ (t@@ , com.google.gwtorm.server.Orm@@ Exception@@ .@@ class@@ ); throw new com.google.gwtorm.server.Orm@@ Exception(@@ t@@ ); } }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ In@@ NoteDb@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.@@ schema.@@ sql.@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )) { com.google.gerrit.reviewdb.client.AccountGroup.@@ Name@@ Key group@@ Name = group@@ Update@@ .getName@@ ().@@ or@@ E@@ l@@ se@@ Get@@ (@@ group@@ Cre@@ ation@@ :@@ get@@ NameKey@@ ); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Name@@ s group@@ Note@@ s = group@@ Note@@ Name@@ .@@ db.@@ db.@@ patchSet@@ Group@@ Name@@ Not@@ es.@@ load@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ .get@@ Group@@ UUID@@ (), group@@ Name); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Cre@@ ation@@ ); group@@ group@@ group@@ group@@ group@@ Cre@@ ation@@ (@@ group@@ Update@@ , this@@ :@@ get@@ Account@@ Name@@ Email@@ , this@@ :@@ get@@ Group@@ Name@@ (@@ all@@ User@@ s@@ Repo@@ , group@@ Config@@ , group@@ Name@@ ), group@@ Notes@@ ); return group@@ Config@@ .get@@ Load@@ ed@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ g@@ roup w@@ as@@ n m@@ ati@@ c@@ ally load@@ ed load@@ "); } }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ s@@ Update.@@ Update@@ Result@@ > update@@ Group@@ In@@ NoteDb@@ With@@ R@@ e@@ try@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id@@ , com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception, com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try { return r@@ e@@ try@@ H@@ el@@ p@@ er.@@ execute@@ (@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type.@@ G@@ RO@@ U@@ P@@ _@@ U@@ P@@ D@@ AT@@ E, () -@@ > update@@ Group@@ In@@ NoteDb@@ (@@ group@@ U@@ u@@ id@@ , group@@ Update@@ ), com.google.gerrit.server.git.@@ Lo@@ ck@@ Failure@@ .@@ class@@ :@@ is@@ Instance@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , java.io.IO@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gwtorm.server.Orm@@ D@@ up@@ li@@ cate@@ Key@@ Exception@@ .@@ class@@ ); com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Instance@@ Of(@@ e@@ , com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception@@ .@@ class@@ ); throw new java.io.IO@@ Exception(@@ e); } }
private com.google.gerrit.reviewdb.client.@@ Account update@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ Update.@@ Account@@ Update account@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return execute@@ Update@@ Factory.create@@ (db@@ .get(), account@@ Id); }
@java.lang.Override public com.google.gerrit.server.project.@@ Branch@@ Resource parse@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent@@ .getName@@ Key@@ (); parent@@ .getProject@@ State@@ ().@@ check@@ State@@ (@@ Per@@ mit@@ Read@@ er@@ ()); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ f@@ ull@@ Name@@ (id@@ .get@@ ())); if (re@@ f == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ ref@@ ((@@ ref@@ .is@@ Sy@@ m@@ bo@@ li@@ c@@ () ? ref@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : ref@@ .getName@@ ()@@ )).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); return new com.google.gerrit.server.project.@@ Branch@@ Resource@@ (@@ parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), ref@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception not@@ Al@@ low@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception no@@ Repo@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info> apply(@@ com.google.gerrit.server.project.Project@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.@@ Ref@@ Filter@@ <@@ com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ >@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ sub@@ String@@ (@@ match@@ Sub@@ string@@ ).@@ reg@@ ex@@ (@@ match@@ Reg@@ ex@@ ).@@ start@@ (@@ start@@ ).@@ li@@ mit@@ ).@@ filter@@ (@@ all@@ Branch@@ es@@ (rsrc@@ )); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.List<java.lang.String> p = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ li@@ mit@@ (@@ 2@@ ).@@ s@@ pli@@ t@@ (id@@ )); java.lang.String re@@ f = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ .get(@@ 0@@ )); java.lang.String pat@@ h = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ en@@ code@@ (p@@ .get(@@ 1@@ )); return d@@ ashbo@@ ard@@ s.@@ parse@@ (@@ new com.google.gerrit.server.project.Project@@ Resource@@ (project@@ State@@ , user@@ ), com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ Url@@ (((@@ re@@ f + '@@ :@@ '@@ ) + path@@ ))); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource resource@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { return d@@ ashbo@@ ard@@ s.@@ parse@@ (project@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g.@@ from@@ De@@ cod@@ ed@@ (id@@ )); }
private com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource default@@ Of@@ (com.google.gerrit.server.@@ project.@@ Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.String id = project@@ State@@ .getProject@@ ().get@@ Lo@@ cal@@ Default@@ D@@ ashbo@@ ard@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ )) { id = project@@ State@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); } if (com.google.gerrit.server.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ Default@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ State@@ (project@@ , user@@ , id@@ ); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ in@@ herit@@ ed@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ s : project@@ State.@@ t@@ ree@@ ()) { id = ps@@ .getProject@@ ().get@@ Default@@ D@@ ashbo@@ ard@@ (); if (com.google.gerrit.server.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } else if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ id@@ ))) { return parse@@ State@@ (project@@ , user@@ , id@@ ); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); }
@java.lang.Override public com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource parse@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (com.google.gerrit.server.@@ project.@@ D@@ ashbo@@ ard@@ s@@ Collec@@ tion.@@ is@@ D@@ ashbo@@ ar@@ d(@@ id@@ )) { return com.google.gerrit.server.project.@@ D@@ ashbo@@ ard@@ Resource@@ .@@ project@@ Default@@ (@@ parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ ()); } com.google.gerrit.extensions.api.@@ projects.@@ D@@ ashbo@@ ard@@ Info info@@ ; try { in@@ fo = com.google.gerrit.server.@@ restapi.@@ D@@ ashbo@@ ard@@ s@@ Collection@@ .@@ new@@ D@@ ashbo@@ ard@@ Info@@ (id@@ .get()); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } for (com.google.gerrit.server.@@ project.@@ Project@@ State p@@ s : parent@@ .getProject@@ State@@ ().@@ t@@ ree@@ ()) { try { return parse@@ (ps@@ , parent@@ .getProject@@ State@@ (), parent@@ .getUser@@ (), info@@ ); } catch (@@ org.eclipse.jgit.errors.@@ A@@ mb@@ ig@@ u@@ ou@@ s@@ Object@@ Exception | org.eclipse.jgit.errors.@@ In@@ cor@@ re@@ ct@@ Object@@ Type@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { continue@@ ; } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id@@ ); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (com.google.gerrit.server.@@ restapi.@@ Changes@@ Collec@@ tion.@@ to@@ Id@@ String@@ (id@@ )); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (com.google.gerrit.server.@@ change.@@ restapi.@@ Changes@@ Collec@@ tion.@@ to@@ Id@@ String@@ (id@@ )); } return change@@ Resource@@ Factory.create@@ (change@@ , user@@ .get()); }
@org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Argument@@ (in@@ de@@ x = 0, requ@@ i@@ re@@ d = true@@ , m@@ ulti@@ Value@@ d = true@@ , met@@ a@@ V@@ a@@ r = "@@ CHANG@@ E@@ ", us@@ ag@@ e = "@@ change@@ s to mo@@ d@@ if@@ y void add@@ Change@@ (java.lang.String token@@ ) { try { change@@ Argument@@ Par@@ ser@@ .@@ add@@ Change@@ (@@ token@@ , changes@@ , project@@ State@@ ); } catch (@@ com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception(@@ e.get@@ Message@@ (), e); } catch (@@ java.io.IOException e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception("@@ f@@ ai@@ le@@ d is do@@ w@@ n change@@ ", e); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception("@@ dat@@ ab@@ ase ch@@ ec@@ k per@@ mission@@ s", e); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ t@@ Mo@@ d@@ if@@ y@@ View@@ <@@ com.google.gerrit.server.account.Account@@ Resource@@ , com.google.gerrit.server.@@ restapi.@@ Star@@ red@@ Chang@@ es.@@ E@@ mpty@@ Input@@ > create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { return create@@ Provider@@ .get().@@ set@@ Change@@ (@@ changes.@@ parse@@ (@@ To@@ p@@ L@@ ev@@ el@@ Resource@@ .@@ IN@@ ST@@ AN@@ C@@ E, id@@ )); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account %s not fo@@ und@@ ", id@@ .get@@ ())); } catch (@@ java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.google.gerrit.server.@@ restapi.@@ Star@@ red@@ Chang@@ es.@@ log.error@@ ("@@ Cannot res@@ ol@@ v@@ e change e); throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ Cannot serv@@ er er@@ ror ror ror ror } }
@java.lang.Override public com.google.gerrit.server.change.Change@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.List<@@ com.google.gerrit.server.notedb.Change@@ Notes@@ > note@@ s = change@@ F@@ in@@ der.@@ fin@@ d(@@ id@@ .@@ en@@ cod@@ ed@@ (), true@@ ); if (@@ not@@ es.@@ isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } else if ((@@ not@@ es.@@ size@@ ()) != 1@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ Multi@@ pl@@ e change@@ s fo@@ un@@ d for " + id@@ )); } com.google.gerrit.server.notedb.Change@@ Note@@ s change = notes@@ .get(@@ 0); if (!@@ (c@@ an@@ Read@@ (change@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return change@@ Resource@@ Factory.create@@ (change@@ , user@@ .get()); }
private boolean is@@ Visible@@ (com.google.gerrit.server.@@ restapi.@@ Rel@@ ated@@ Changes@@ S@@ ort@@ er.@@ PatchSet@@ Data ps@@ d@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ user@@ (c@@ urrent@@ User@@ Provi@@ der@@ User@@ Provi@@ der@@ ).@@ dat@@ abase@@ (db@@ Provider@@ ); try { per@@ m.@@ change@@ (ps@@ d.@@ dat@@ a@@ ()).@@ check@@ (@@ Change@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return false@@ ; } return project@@ Cache.@@ check@@ ed@@ Get@@ (ps@@ d.@@ dat@@ a@@ ().@@ project@@ ()).@@ state@@ (); }
public void s@@ ort@@ (java.lang.String ref@@ , java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > s@@ ection@@ s) { final int c@@ n@@ t = s@@ ection@@ s.@@ size@@ (); if (c@@ n@@ t <@@ = 1@@ ) { return@@ ; } com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ Key k@@ ey = com.google.gerrit.server.project.@@ Section@@ S@@ ort@@ Cache.@@ E@@ n@@ try@@ Key@@ .create@@ (ref@@ , s@@ ection@@ s); com.google.gerrit.server.project.@@ S@@ ort@@ E@@ n@@ try@@ V@@ al va@@ l = cach@@ e.get@@ I@@ f@@ P@@ res@@ ent@@ (key@@ ); if (@@ va@@ l != null@@ ) { int@@ [] src@@ Id@@ x = va@@ l.@@ or@@ der@@ ; if (@@ src@@ x != null@@ ) { com.google.gerrit.common.data.@@ Access@@ Section@@ [] src@@ Lis@@ t = com.google.gerrit.server.project.@@ Section@@ Cache.@@ cop@@ y(@@ s@@ ection@@ s); for (@@ int i = 0; i < c@@ nt@@ ; i@@ ++@@ ) { s@@ ection@@ s.set@@ (@@ i@@ , src@@ List@@ [@@ i@@ ]@@ ); } } else { } } else { boolean po@@ po@@ s = false@@ ; java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <@@ com.google.gerrit.common.data.@@ Access@@ Section@@ , java.lang.@@ Integ@@ er@@ > src@@ Ma@@ p = new java.util.@@ Id@@ enti@@ ty@@ Hash@@ Map@@ <@@ >(); for (@@ int i = 0; i < c@@ nt@@ ; i@@ ++@@ ) { po@@ |@@ = (@@ src@@ Map.@@ put@@ (s@@ ection@@ s.get(@@ i@@ ), i@@ )) != null@@ ; } java.util.Collections.s@@ ort@@ (s@@ ection@@ s, new com.google.gerrit.server.@@ util.@@ Mo@@ st@@ S@@ p@@ e@@ c@@ if@@ ic@@ Comp@@ ar@@ ator@@ (ref@@ )); int@@ [] src@@ Id@@ x@@ ; if (com.google.gerrit.server.@@ project.@@ Section@@ Cache.@@ is@@ Id@@ enti@@ ty@@ T@@ ran@@ s@@ for@@ m@@ (s@@ ection@@ s, src@@ Map@@ )) { src@@ Id@@ x = null@@ ; } else { src@@ x = new int@@ [@@ c@@ nt@@ ]@@ ; for (@@ int i = 0; i < c@@ nt@@ ; i@@ ] = src@@ Map@@ .get(@@ s@@ ection@@ s.get(@@ i@@ )); } if (@@ po@@ is@@ S@@ ort@@ ) { com.google.gerrit.server.project.@@ Sec@@ tion in@@ st@@ ate = st@@ ate != null@@ ; } else { cache.@@ put(@@ key@@ , new com.google.gerrit.server.project.@@ Section@@ Cache.@@ E@@ n@@ try@@ (@@ src@@ Val@@ )); } }
@org.junit.Test public void note@@ Db@@ Commit@@ () throw@@ s java.lang.Exception { as@@ su@@ me@@ ().@@ th@@ at(@@ notes@@ M@@ igration.@@ read@@ Changes@@ ()).@@ is@@ True@@ (); com.google.gerrit.extensions.common.@@ Change@@ Info c = assert@@ Create@@ Suc@@ ce@@ ed@@ s@@ (@@ new@@ Change@@ Input@@ (@@ Change@@ Status.@@ N@@ EW@@ )); try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ project@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.RevCommit commit = rw.@@ parse@@ Commit@@ (repo@@ .@@ ex@@ act@@ Ref@@ (change@@ Met@@ a@@ Ref@@ (@@ new com.google.gerrit.reviewdb.client.Change.@@ Id@@ (c@@ .@@ _@@ n@@ umber@@ ))@@ ).get@@ Object@@ Id()); assert@@ Th@@ at(@@ commit@@ .get@@ Sh@@ ort@@ Message@@ ()).@@ isEqualTo@@ ("@@ Change change org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent expected@@ Auth@@ or = change@@ Note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache@@ .@@ ma@@ y@@ be@@ Get@@ (@@ admin@@ .@@ id@@ )@@ .get(@@ id@@ ); assert@@ Th@@ at(@@ commit@@ .get@@ Author@@ Ident@@ ()).@@ isEqualTo(@@ expected@@ Author@@ ); assert@@ Th@@ at(@@ commit@@ .get@@ Commit@@ ter@@ Ident@@ ()).@@ isEqualTo@@ (@@ new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ .get(), c.@@ cre@@ ated@@ )); assert@@ Th@@ at(@@ commit@@ .getParent@@ Count@@ ()).@@ isEqualTo(@@ 0); } }
@org.junit.Test public void get@@ ExternalId@@ s@@ Of@@ O@@ th@@ er@@ User@@ With@@ Access@@ Dat@@ abase@@ () throw@@ s java.lang.Exception { allow@@ G@@ lobal@@ Capabili@@ ti@@ es(@@ com.google.gerrit.acceptance.@@ rest.@@ account.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , G@@ lobal@@ Capabili@@ ty.@@ AC@@ CES@@ S_@@ D@@ AT@@ AB@@ A@@ S@@ E@@ ); java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache@@ .get(@@ change@@ .getId@@ ())@@ .@@ new@@ ExternalId@@ s@@ ().get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = to@@ ExternalId@@ Info@@ s(@@ expected@@ Id@@ s); com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ((@@ ("/@@ account@@ s/@@ " + (@@ admin@@ .@@ id@@ )) + "@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ ")); res@@ pon@@ se@@ .@@ assert@@ O@@ K@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {@@ }@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
@org.junit.Test public void get@@ ExternalId@@ s() throw@@ s java.lang.Exception { java.util.Collection<@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ ().get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = to@@ ExternalId@@ s(@@ expected@@ Id@@ s); com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ("/@@ account@@ s/@@ self@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ "); res@@ pon@@ se@@ .@@ assert@@ O@@ K@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {@@ }@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
private void assert@@ User@@ Branch@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String name, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String statu@@ s) throw@@ s java.lang.Exception { try (@@ org.eclipse.jgit.lib.Repository repo = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ )@@ ;@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )@@ ;@@ org.eclipse.jgit.lib.Object@@ Read@@ er or = repo@@ .@@ new@@ Object@@ Read@@ er@@ ()) { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = repo.@@ ex@@ act@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); assert@@ Th@@ at(@@ ref@@ ).@@ is@@ Not@@ Null@@ (); org.eclipse.jgit.revwalk.RevCommit c = rw.@@ parse@@ Commit@@ (ref@@ .get@@ Object@@ Id()); long ti@@ m@@ est@@ amp@@ D@@ if@@ f@@ M@@ s = java.lang.@@ M@@ ath@@ .@@ ab@@ s@@ ((((@@ c.get@@ Commit@@ Time@@ ()) * 1@@ 00@@ 0@@ L@@ ) - (account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id@@ ().get@@ Reg@@ ist@@ er@@ ed@@ On@@ ().get@@ Time@@ ()))); assert@@ Th@@ at(@@ ti@@ m@@ est@@ amp@@ D@@ if@@ f@@ M@@ s).@@ is@@ At@@ (@@ Change@@ Re@@ buil@@ der@@ Impl.@@ M@@ A@@ X@@ _@@ W@@ IN@@ D@@ O@@ W@@ _M@@ S@@ ); try (@@ org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k t@@ w = org.eclipse.jgit.@@ t@@ re@@ ew@@ al@@ k.@@ Tree@@ Wal@@ k@@ .@@ for@@ Path@@ (@@ or@@ , Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T_@@ CON@@ FI@@ G@@ , c.get@@ Tree@@ ())) { if ((@@ name != null@@ ) || (@@ statu@@ s != null@@ )) { assert@@ Th@@ at(@@ t@@ w@@ ).@@ is@@ Not@@ Null@@ (); org.eclipse.jgit.lib.@@ Config cf@@ g = new org.eclipse.jgit.lib.@@ Config@@ (); cf@@ g.@@ from@@ Text@@ (@@ new java.lang.String@@ (@@ or@@ .@@ open@@ (t@@ w@@ .get@@ Object@@ Id(@@ 0@@ ), com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ O@@ B@@ J@@ _@@ B@@ LO@@ B@@ ).get@@ By@@ t@@ es@@ (), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ )); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ String@@ (@@ Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T@@ , null@@ , Account@@ Pro@@ per@@ ti@@ es.@@ K@@ E@@ Y_@@ F@@ _@@ NAM@@ E@@ )).@@ isEqualTo(@@ name); assert@@ Th@@ at@@ (c@@ fg@@ .get@@ String@@ (@@ Account@@ Pro@@ per@@ ti@@ es.@@ AC@@ CO@@ UN@@ T@@ , null@@ , per@@ ti@@ es.@@ K@@ E@@ ST@@ s); } else { assert@@ Th@@ at(@@ t@@ w@@ ).@@ isNull@@ (); } }
@org.junit.Test public void get@@ Detail@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.@@ Rest@@ Response r = admin@@ Rest@@ Session@@ .get@@ ((@@ ("/@@ account@@ s/@@ " + (@@ admin@@ .@@ user@@ name@@ )) + "@@ /@@ d@@ et@@ ail@@ /@@ ")); com.google.gerrit.server.@@ restapi.@@ Get@@ Det@@ ai@@ l.@@ Account@@ Detail@@ Info in@@ fo = new@@ G@@ son@@ ().@@ from@@ Json@@ (r@@ .get@@ Read@@ er@@ (), com.google.gerrit.server.@@ restapi.@@ Get@@ Det@@ ai@@ l.@@ Account@@ Detail@@ Info@@ .@@ class@@ ); com.google.gerrit.acceptance.@@ rest.@@ account.@@ Account@@ As@@ sert@@ .@@ assert@@ Account@@ Info@@ (@@ admin@@ , info@@ ); com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache@@ .get(@@ account@@ ).get@@ Account@@ (); assert@@ Th@@ at(@@ info.@@ regist@@ er@@ ed@@ On@@ ).@@ isEqualTo(@@ account@@ .get@@ Reg@@ ist@@ er@@ ed@@ On@@ ()); }
private void add@@ NoteDb@@ Commit@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id@@ , java.lang.String commit@@ Message@@ ) throw@@ s java.lang.Exception { if (!(@@ notes@@ M@@ igration.@@ commit@@ Change@@ Wri@@ t@@ es@@ ())) { return@@ ; } org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent commit@@ ter = server@@ Ident@@ .get@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent auth@@ or = note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ (), commit@@ ter@@ .get@@ Wh@@ en@@ (), commit@@ ter@@ ); server@@ Id@@ Test@@ Repo@@ .@@ branch@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ change@@ Met@@ a@@ Ref@@ (id@@ )).@@ commit@@ ().@@ author@@ (@@ author@@ ).@@ commit@@ ter@@ (@@ commit@@ ter@@ ).@@ message@@ (@@ commit@@ Message@@ ).@@ create@@ (); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ OD@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id(); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache@@ .get(@@ id@@ ).get@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id(); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ OD@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); return account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id(); }
public java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation get@@ Default@@ Time@@ out@@ (@@ com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ ) { switch (@@ action@@ Typ@@ e) { case AC@@ CO@@ UN@@ T_@@ P@@ D@@ AT@@ E : case CHANG@@ E_@@ U@@ P@@ D@@ AT@@ E : return note@@ Db@@ Default@@ Time@@ out@@ ; case IN@@ DE@@ X@@ _@@ Q@@ U@@ ER@@ Y : default : return default@@ Time@@ out@@ ; } }
private <@@ T> T execute@@ With@@ At@@ te@@ mp@@ t@@ Count@@ (com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ Type action@@ Type@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Action@@ <@@ T> action@@ , com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Option@@ s op@@ t@@ s, com.google.common.base.@@ Predicate@@ <@@ java.lang.@@ Throw@@ able@@ > ex@@ cepti@@ on@@ Predicate@@ ) throw@@ s java.lang.@@ Throwable { com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ en@@ er list@@ en@@ er = new com.google.gerrit.server.@@ update.@@ R@@ e@@ try@@ H@@ el@@ p@@ er.@@ Met@@ ri@@ c@@ List@@ ener@@ (); try { com.g@@ ith@@ u@@ b.@@ r@@ h@@ ol@@ der.@@ r@@ e@@ try@@ .@@ R@@ e@@ try@@ er@@ Builder@@ <@@ T> r@@ e@@ try@@ er@@ Builder = create@@ R@@ e@@ try@@ er@@ Builder@@ (@@ action@@ Type@@ , op@@ t@@ s, ex@@ cepti@@ on@@ Predicate@@ Buil@@ der.@@ w@@ ith@@ R@@ e@@ try@@ List@@ ener@@ (@@ list@@ ener@@ ); return execute@@ With@@ out@@ Coun@@ t(@@ action@@ Type@@ , r@@ e@@ try@@ Buil@@ der.@@ bu@@ ild@@ ()); } final@@ l@@ y { met@@ ri@@ c@@ s.@@ at@@ te@@ mp@@ t@@ Count@@ s.@@ re@@ cor@@ d(@@ action@@ Type@@ , list@@ ener@@ .get@@ At@@ t@@ Count@@ ()); } }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Account@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cach@@ e account@@ Cache@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Cache@@ .get@@ Or@@ Null@@ (account@@ Id); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (account@@ State@@ ).@@ map@@ (@@ Account@@ State@@ :@@ :@@ :@@ get@@ Account@@ ); }
@org.junit.Test public void cre@@ ated@@ On@@ Of@@ New@@ Group@@ Match@@ es@@ Cre@@ ated@@ On@@ Re@@ load@@ ed@@ Group@@ () throw@@ s java.lang.Exception { java.sql.@@ Tim@@ est@@ am@@ p cre@@ ated@@ O@@ n = java.sql.@@ Tim@@ est@@ am@@ p.@@ from@@ (@@ java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Date@@ Tim@@ e.@@ of@@ (@@ 2@@ 0@@ 1@@ 7@@ , java.@@ ti@@ m@@ e.@@ M@@ on@@ th@@ .@@ D@@ EC@@ E@@ M@@ B@@ ER@@ , 1, 7@@ 1@@ 4@@ , 9@@ 3@@ 1@@ 3@@ , 1@@ 2@@ 3@@ ).@@ at@@ O@@ ff@@ set@@ (@@ java.@@ ti@@ m@@ e.@@ Z@@ one@@ O@@ ff@@ se@@ t.@@ UT@@ C@@ ).to@@ In@@ stant@@ ()); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation = get@@ Pre@@ vi@@ d@@ Group@@ Builder@@ ().@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update.@@ buil@@ der@@ ().set@@ Updated@@ On@@ (@@ cre@@ ated@@ On@@ ).@@ bu@@ ild@@ (); com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Config group@@ Config = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ Config.@@ create@@ For@@ New@@ Group@@ (repo@@ sitor@@ y@@ , group@@ Cre@@ ation@@ ); group@@ Config.@@ set@@ Group@@ (@@ group@@ Update@@ , com.google.gerrit.reviewdb.client.Account.@@ Id@@ :@@ toString@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ :@@ get@@ ); try (com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update met@@ a@@ Data@@ Update create@@ Met@@ a@@ Data@@ Update@@ ()) { group@@ Config.@@ commit@@ (@@ met@@ a@@ Data@@ Update@@ ); } com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group cre@@ ated@@ Group cre@@ ated@@ Group = group@@ Config@@ .get@@ Load@@ ed@@ Group@@ ().get@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ load@@ ed@@ Group = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ roup@@ .@@ Group@@ (repo@@ sitor@@ y@@ , cre@@ ated@@ Group@@ .get@@ Group@@ UUID@@ ()@@ ).get@@ Load@@ ed@@ Group@@ (); assert@@ Th@@ at(@@ cre@@ ated@@ Group@@ .get@@ Cre@@ ated@@ On@@ ()).@@ isEqualTo(@@ load@@ ed@@ On@@ ()); }
public com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User parse@@ On@@ Be@@ h@@ al@@ f@@ Of(@@ @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.server.@@ Current@@ User call@@ er, java.lang.String id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parse@@ Id@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (c@@ all@@ er, id@@ ); if ((@@ user == null@@ ) || (!(@@ account@@ Control@@ Factory@@ .get().@@ can@@ Se@@ e@@ (user@@ .getAccount@@ ())@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account of %s do@@ es@@ n rep@@ res@@ ent ac@@ count is b@@ u@@ ou@@ s@@ "); } return user@@ ; }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource parse@@ (@@ com.google.gerrit.extensions.restapi.@@ To@@ p@@ L@@ ev@@ el@@ Resource r@@ oo@@ t@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = parse@@ Id@@ (id@@ .get()); if ((@@ user == null@@ ) || (!(@@ account@@ Control@@ Factory@@ .get().@@ can@@ Se@@ e@@ (user@@ .getAccount@@ ())@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Account do@@ es@@ n rep@@ res@@ ent an ac@@ count is b@@ u@@ ou@@ s id@@ "); } return new com.google.gerrit.server.account.@@ Account@@ Resource@@ (@@ user@@ ); }
@org.junit.Test public void red@@ u@@ ce@@ Comp@@ le@@ x@@ Tree@@ To@@ S@@ ingle@@ Value@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ U@@ E@@ ), com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ es@@ (), com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ ); }
@org.junit.Test public void red@@ u@@ ce@@ Or@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ or@@ (@@ true@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ ).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )); assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ es@@ tion@@ s.@@ Boolean@@ (@@ true@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ V@@ AL@@ U@@ E@@ V@@ AL@@ U@@ E@@ ).@@ AT@@ ION@@ ).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ E@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ Not@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ not@@ (@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ es@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ annot@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ E@@ ).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ annot@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ E@@ V@@ AL@@ U@@ E@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ An@@ d(@@ ) throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion.@@ (@@ false@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ ).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )).@@ isEqualTo(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )); assert@@ Th@@ at(@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , con@@ di@@ tion@@ s.@@ con@@ di@@ tion@@ tion@@ Test.@@ NO@@ _@@ AL@@ U@@ E@@ V@@ AL@@ U@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ ).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ config.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ , com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ , "@@ con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ E@@ )); }
@org.junit.Test public void red@@ u@@ ce@@ Comp@@ le@@ x@@ Tree@@ To@@ S@@ m@@ all@@ er@@ Tree@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ , com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion@@ Test.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ U@@ E@@ V@@ AL@@ U@@ AT@@ ION@@ ), com.google.gerrit.extensions.@@ config.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ ), com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ ), com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ false@@ )@@ )).@@ isEqualTo(@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ com.google.gerrit.extensions.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ (@@ con@@ di@@ tion@@ s.@@ NO@@ _@@ T@@ R@@ I@@ VI@@ AL@@ _@@ E@@ V@@ AL@@ U@@ E@@ V@@ AL@@ U@@ E@@ , com.google.gerrit.extensions.@@ config.@@ Con@@ di@@ tion@@ s.@@ Boolean@@ Test.@@ T@@ R@@ I@@ VI@@ AL@@ _@@ V@@ AL@@ U@@ E@@ ), com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ (@@ true@@ ))); }
private static boolean e@@ valu@@ at@@ es@@ T@@ ri@@ vi@@ all@@ y@@ To@@ Ex@@ p@@ ec@@ ted@@ Value@@ (@@ com.google.gerrit.extensions.@@ con@@ di@@ tion@@ s.@@ Boolean@@ Con@@ di@@ tion con@@ d@@ , boolean expected@@ Value@@ ) { if (!(@@ con@@ d.@@ e@@ valu@@ at@@ es@@ T@@ ri@@ vi@@ all@@ y@@ ())) { return false@@ ; } return (@@ con@@ d.@@ value@@ ()) == expected@@ Value@@ ; }
@java.lang.Override public com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ OD@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } check@@ Down@@ load@@ S@@ che@@ me@@ (in@@ put@@ .@@ do@@ w@@ n@@ load@@ S@@ che@@ me@@ ); com.google.gerrit.server.account.@@ Preferen@@ ces.@@ vali@@ date@@ M@@ y(@@ input.@@ my@@ ); com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); if (((@@ s.get@@ Account@@ Id@@ ()) != null@@ ) && (rsrc@@ .getUser@@ ().@@ update@@ ()))) { update@@ Preferen@@ ce@@ s a A@@ P@@ I id@@ , ("@@ ) -@@ > u@@ .set@@ General@@ Preferences@@ (in@@ put@@ )); return cach@@ e@@ .get(@@ id@@ ).get@@ General@@ Preferences@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ Edit@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ OD@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ inpu@@ t m@@ us@@ t b@@ e pro@@ vi@@ ded@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ can@@ not a m@@ us@@ t b@@ e pro@@ vi@@ ded@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); account@@ Update@@ .g@@ e@@ t@@ ().@@ update@@ D@@ if@@ f Preferen@@ ce@@ s a A@@ P@@ I id@@ , ("@@ u@@ id@@ "); -@@ > u@@ .set@@ Edit@@ Preferences@@ (in@@ put@@ )); return account@@ Cache@@ .get(@@ id@@ ).get@@ Edit@@ Preferences@@ (); }
@java.lang.Override public com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.client.@@ D@@ if@@ f@@ Preferences@@ Info input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ M@@ OD@@ I@@ F@@ Y_@@ AC@@ CO@@ UN@@ T@@ ); } if (in@@ pu@@ t == null@@ ) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ inpu@@ t m@@ us@@ t b@@ e pro@@ vi@@ ded@@ "); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc@@ .getUser@@ ().get@@ Account@@ Id(); account@@ s@@ Update@@ Provider@@ .get().@@ update@@ D@@ if@@ f = (@@ id != null@@ ) ? by@@ Email@@ () : null@@ ; return account@@ Cache@@ .get(@@ id@@ ).get@@ D@@ if@@ f@@ Preferences@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Group@@ Member@@ s(@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group group@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > se@@ en@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { se@@ en@@ .@@ add(@@ group@@ .get@@ Group@@ UUID@@ ()); com.google.gerrit.server.account.@@ Group@@ Control group@@ Control = group@@ Control@@ Factory.@@ control@@ For@@ (@@ new com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Description@@ (@@ group@@ )); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > di@@ re@@ ct@@ Member@@ s = group@@ .get@@ Member@@ s().@@ st@@ ream@@ ().@@ filter@@ (@@ group@@ Control@@ :@@ can@@ Se@@ e@@ Member@@ ).@@ map@@ (account@@ Cache@@ :@@ ma@@ y@@ be@@ gin@@ Get@@ ).@@ filter@@ (@@ java.util.@@ Optional@@ :@@ is@@ P@@ res@@ ent@@ ).@@ map@@ (@@ java.util.@@ Optional@@ :@@ :@@ get@@ Account@@ ).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ Account@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > in@@ di@@ re@@ ct@@ Member@@ s = new java.util.Hash@@ Set<@@ >(); if (@@ group@@ Contro@@ l.@@ can@@ Se@@ e@@ Group@@ ()) { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : group@@ .get@@ Sub@@ group@@ s()) { if (!(@@ se@@ en@@ .@@ contains(@@ sub@@ U@@ u@@ id@@ ))) { in@@ di@@ re@@ ct@@ Member@@ s.@@ add@@ All(@@ list@@ Account@@ s(@@ sub@@ U@@ u@@ id@@ , project, se@@ en@@ )); } } } return com.google.common.collect.@@ Set@@ s.@@ un@@ i@@ on@@ (@@ di@@ re@@ ct@@ Member@@ s, in@@ di@@ re@@ ct@@ Member@@ s); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request req@@ , javax.servlet.@@ Servlet@@ Response res@@ p@@ , javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { com.google.gerrit.server.@@ Current@@ User user = user@@ Provider@@ .get@@ (); if ((@@ user != null@@ ) && (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User wh@@ o = user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (); req@@ .set@@ Attribute@@ (@@ com.google.gerrit.httpd.@@ Get@@ User@@ Fil@@ ter.@@ RE@@ Q@@ _@@ AT@@ T@@ R@@ _@@ K@@ E@@ Y@@ , wh@@ o@@ .getUser@@ Name@@ (), or@@ .get@@ E@@ l@@ se@@ (("@@ a@@ /@@ " + (@@ wh@@ o@@ .getAccount@@ Id@@ ()))); } ch@@ ain@@ .@@ do@@ Filter@@ (req@@ , res@@ p@@ ); }
public org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Commit@@ ter@@ Ident@@ (@@ java.util.@@ D@@ ate wh@@ en@@ , java.util.@@ Time@@ Z@@ on@@ e t@@ z@@ ) { final com.google.gerrit.reviewdb.client.@@ Account u@@ a = get@@ Account@@ (); java.lang.String name = u@@ a@@ .get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = u@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ e@@ mai@@ l == null@@ ) || (@@ e@@ mail.@@ isEmpty())) { java.lang.String user = get@@ User@@ Name@@ ().@@ or@@ E@@ l@@ se@@ ((@@ account@@ -@@ " + (@@ u@@ a@@ .getId@@ ().@@ toString@@ ())) + " can@@ on@@ ical@@ Url@@ .get@@ ()) != null@@ ) { try { ho@@ s@@ t = new java.@@ net.@@ URL@@ (c@@ an@@ on@@ ical@@ Url@@ .get@@ ()@@ ).get@@ H@@ o@@ st@@ (); } catch (@@ java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception e) { ho@@ s@@ t = org.eclipse.jgit.@@ util.@@ Sy@@ st@@ em@@ Read@@ er@@ .get@@ Instance@@ ().get@@ H@@ o@@ st@@ name@@ (); } } else { ho@@ s@@ t = org.eclipse.jgit.@@ util.@@ Sy@@ st@@ em@@ Read@@ er@@ .get@@ Instance@@ ().get@@ H@@ o@@ st@@ name@@ (); } if ((@@ name == null@@ ) || (@@ name.@@ isEmpty())) { final int a@@ t = e@@ mail.@@ index@@ Of(@@ '@@ @@@ '); if (@@ 0 < at@@ ) { name = e@@ mail.@@ substring@@ (@@ 0, at@@ ); } else { name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } } return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ name, wh@@ en@@ , t@@ z@@ ); }
private java.lang.I@@ terable@@ <java.lang.String> get@@ User@@ nam@@ es@@ (com.google.gerrit.server.@@ Current@@ User user@@ ) { if (user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ()) { java.util.@@ Set@@ <java.lang.String> email@@ s = user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ().get@@ Email@@ Add@@ ress@@ es@@ (); if ((@@ !(@@ user@@ .getUser@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ())) && (!(@@ email@@ s.@@ isEmpty())) { return email@@ s; } else if (@@ email@@ s.@@ isEmpty()) { return com.google.common.collect.Immutable@@ Set.@@ st@@ ream@@ (user@@ .getUser@@ Name@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } return com.google.common.collect.@@ Stream@@ s.@@ st@@ ream@@ (user@@ .getUser@@ Name@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d@@ , com.google.common.collect.List@@ Multimap@@ <java.lang.String, ?@@ > par@@ ameter@@ s) { if (@@ d@@ cm@@ d == null@@ ) { return w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ cm@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] arg@@ s = cm@@ d@@ .get@@ Argument@@ s(); command@@ Name.@@ append("@@ .@@ ").@@ append(@@ arg@@ s@@ [@@ 1@@ ]@@ ); for (java.lang.String k@@ ey : par@@ ameter@@ s.@@ key@@ s()) { for (@@ java.lang.O@@ bject valu@@ e : par@@ ameter@@ s.get(@@ key@@ )) { if (key@@ .@@ toString@@ ().@@ startsWith@@ ("@@ $@@ ")) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ valu@@ e); } } } for (java.lang.String k@@ ey : par@@ ameter@@ s.@@ key@@ s()) { for (@@ java.lang.O@@ bject valu@@ e : par@@ ameter@@ s.get(@@ key@@ )) { if (!(@@ key@@ .@@ toString@@ ().@@ startsWith@@ ("@@ $@@ "@@ ))) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ key@@ ).@@ append("@@ .@@ ").@@ append(@@ valu@@ e); } } } return command@@ Name.@@ toString@@ (); }
public boolean is@@ S@@ en@@ si@@ tive@@ Parameter@@ s(@@ java.lang.String par@@ am@@ s) { return (@@ this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s) == null ? false : sen@@ si@@ tive@@ Parameter@@ s.@@ contains(@@ par@@ am@@ s); }
public void add@@ Parameter@@ s(@@ java.lang.String sen@@ der@@ Parameter@@ s) { if ((@@ this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s) == null@@ ) { this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s = new java.util.Hash@@ Set<@@ >(); } this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s.add(@@ sen@@ sen@@ si@@ tive@@ Parameter@@ s); }
public java.util.@@ Set@@ <java.lang.String> get@@ S@@ en@@ si@@ tive@@ Par@@ am@@ s() { return this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s; }
public void set@@ S@@ en@@ si@@ tive@@ Par@@ am@@ er@@ s(@@ java.util.@@ Set@@ <java.lang.String> set@@ ) { this@@ .@@ sen@@ si@@ tive@@ Parameter@@ s = set@@ ; }
private com.google.common.collect.List@@ Multimap@@ <java.lang.String, ?@@ > ext@@ r@@ act@@ Parameter@@ s(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d@@ ) { if (@@ d@@ cm@@ d == null@@ ) { return com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s(@@ 0@@ ).@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es(@@ 0@@ ).@@ bu@@ ild@@ (); } java.lang.String@@ [] cm@@ d@@ Arg@@ s = d@@ cm@@ d@@ .get@@ Argument@@ s(); java.lang.String par@@ am@@ Name = null@@ ; int arg@@ Po@@ s = 0; com.google.common.collect.List@@ Multimap@@ <java.lang.String, java.lang.String> par@@ m@@ s = com.google.common.collect.@@ Multimap@@ Buil@@ der.@@ has@@ h@@ Key@@ s().@@ ar@@ ra@@ y@@ List@@ Val@@ u@@ es@@ ().@@ bu@@ ild@@ (); for (@@ int i = 2@@ ; i < (cm@@ d@@ Arg@@ s.@@ length@@ ); i@@ ++@@ ) { java.lang.String ar@@ g = cm@@ d@@ Arg@@ s@@ [@@ i@@ ]@@ ; if (@@ ar@@ g.@@ e@@ quals("@@ --@@ ")) { for (@@ i@@ ++@@ i < (cm@@ d@@ Arg@@ s.@@ length@@ ); i@@ ++@@ ) { par@@ m@@ s.@@ put@@ (("@@ $@@ " + (arg@@ Po@@ s@@ ++@@ )), cm@@ d@@ Arg@@ s@@ [@@ i@@ ]@@ ); } break@@ ; } int e@@ q@@ Po@@ s = ar@@ g.@@ index@@ Of(@@ '@@ =@@ '); if ((@@ ar@@ g.@@ startsWith@@ ("@@ --@@ ")) && (@@ e@@ q@@ Po@@ s > 0@@ )) { java.lang.String par@@ m = ar@@ g.@@ substring@@ (@@ 0, q@@ Po@@ s); par@@ m@@ s.@@ put@@ (@@ par@@ m@@ , (@@ par@@ d@@ , cm@@ d.@@ is@@ S@@ en@@ Parameter@@ s(@@ par@@ m@@ ) ? com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ M@@ A@@ S@@ : ar@@ g.@@ substring@@ (@@ 0, e@@ q@@ Po@@ s + 1@@ )@@ ))); continue@@ ; } if (@@ ar@@ g.@@ startsWith@@ ("@@ -@@ ")) { if (@@ par@@ am@@ Name != null@@ ) { par@@ m@@ s.@@ put(@@ par@@ am@@ Name, null@@ ); } par@@ am@@ Name = arg@@ ; continue@@ ; } if (@@ par@@ am@@ Name == null@@ ) { par@@ m@@ s.@@ put@@ (("@@ $@@ " + (arg@@ Po@@ s@@ ++@@ )), arg@@ ); } else { par@@ m@@ s.@@ put(@@ par@@ am@@ Name, arg@@ , cm@@ d.@@ is@@ S@@ en@@ am@@ Name, si@@ tive@@ Parameter@@ s(@@ par@@ am@@ Name) ? com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ M@@ A@@ S@@ : null@@ ; } if (@@ par@@ am@@ Name != null@@ ) { par@@ am@@ Name = null@@ ; } if (@@ par@@ am@@ Name != null@@ ) { par@@ am@@ s.@@ put(@@ par@@ am@@ Name, null@@ ); } } return par@@ am@@ Name, null@@ ; }
@java.lang.Override public void start@@ (@@ final org.apache.@@ sshd.@@ server.@@ En@@ vi@@ ron@@ ment en@@ v@@ ) throw@@ s java.io.IOException { try { parse@@ Command@@ Line@@ (); if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ command@@ Name@@ )) { java.io.@@ String@@ Wri@@ ter ms@@ g = new java.io.@@ String@@ Wri@@ ter@@ (); ms@@ g.@@ write@@ (@@ us@@ age@@ ()); throw di@@ e@@ (@@ ms@@ g.@@ toString@@ ()); } final com.google.gerrit.sshd.@@ Command@@ Provi@@ der p = command@@ s.get(@@ command@@ Name); if (@@ p == null@@ ) { java.lang.String ms@@ g = (((@@ get@@ Name@@ ().@@ isEmpty@@ () ? "@@ G@@ erri@@ t Co@@ de Review@@ " : get@@ Name@@ ()) + (@@ command@@ Name@@ )) + "@@ : not fo@@ und@@ ")); throw di@@ e@@ (@@ msg@@ ); } final org.apache.@@ sshd.@@ server.@@ Comman@@ d cm@@ d = p@@ .get@@ ().get@@ Provider@@ (); check@@ Requ@@ i@@ res@@ Capabili@@ ty@@ (cm@@ d); if (cm@@ d instanceof com.google.gerrit.sshd.@@ Base@@ Command@@ ) { final com.google.gerrit.sshd.@@ Base@@ Comman@@ d b@@ c = ((@@ com.google.gerrit.sshd.@@ Base@@ Command@@ ) (cm@@ d@@ )); if (get@@ Name@@ ().@@ isEmpty()) { b@@ c.@@ set@@ Name(@@ command@@ Name); } else { b@@ c.@@ set@@ Name@@ ((((@@ get@@ Name@@ ()) + "@@ \n@@ "@@ ))); } check@@ S@@ en@@ tive@@ Data@@ (@@ b@@ c@@ ); args.@@ to@@ Array@@ (@@ new java.lang.String@@ [@@ args.@@ size@@ ()@@ ]@@ )); } else if (!(@@ args.@@ isEmpty())) { throw di@@ e@@ (((@@ command@@ Name) + " do@@ es not t@@ a@@ k@@ e arg@@ ument@@ s@@ ")); } pro@@ vi@@ de@@ State@@ To@@ (cm@@ d); at@@ o@@ m@@ ic@@ Cm@@ d.@@ set@@ (cm@@ d); cm@@ d.@@ start@@ (@@ en@@ v@@ ); this@@ .set@@ S@@ en@@ am@@ Par@@ si@@ tive@@ (@@ er@@ s@@ Base@@ Command@@ ) (cm@@ d@@ )@@ ).get@@ S@@ en@@ am@@ Par@@ si@@ tive@@ s()); } catch (@@ com.google.gerrit.sshd.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e e) { java.lang.String ms@@ g = e.get@@ Message@@ (); if (!(@@ ms@@ g.@@ end@@ sWith@@ ("@@ \n@@ "@@ ))) { ms@@ g +@@ = "@@ \n@@ "; } er@@ r.@@ write@@ (@@ msg@@ .get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.@@ EN@@ C@@ )); er@@ r.@@ f@@ lu@@ sh@@ (); on@@ Ex@@ it@@ (@@ e.@@ ex@@ it@@ Code@@ ); } }
void on@@ Execu@@ te@@ (@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d@@ , int ex@@ it@@ Value@@ , com.google.gerrit.sshd.@@ Ssh@@ S@@ es@@ sion ssh@@ Session@@ ) { final com.google.gerrit.sshd.@@ Ssh@@ S@@ cop@@ e.@@ Context ct@@ x = cont@@ ext@@ .get@@ (); ct@@ x.@@ fin@@ is@@ h@@ ed = com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ M@@ s(); com.google.common.collect.List@@ Multimap@@ <@@ java.lang.String@@ , ?@@ > par@@ ameter@@ s = ext@@ r@@ act@@ Parameter@@ s(@@ cm@@ d@@ , java.lang.String@@ Builder cm@@ d = ext@@ r@@ act@@ Wh@@ at(@@ cm@@ d@@ , par@@ ameter@@ s@@ )); final org.apache.@@ log@@ 4@@ j@@ .@@ sp@@ i.@@ Log@@ gin@@ g@@ Event ev@@ ent = log@@ (cm@@ d); event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ W@@ A@@ IT@@ , ((@@ (ct@@ x.@@ star@@ ted@@ ) - (ct@@ x.@@ cre@@ ated@@ )) + "@@ ms@@ ")); event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ E@@ X@@ EC@@ , ((@@ (ct@@ x.@@ fin@@ is@@ h@@ ed@@ ) - (ct@@ x.@@ star@@ ted@@ )) + "@@ ms@@ ")); final java.lang.String statu@@ s; switch (@@ ex@@ it@@ Value@@ ) { case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ C@@ AN@@ C@@ E@@ L : statu@@ s = "@@ k@@ il@@ le@@ d@@ "; break@@ ; case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ NO@@ T_@@ FO@@ UN@@ D : statu@@ s = "@@ not@@ -@@ fo@@ und@@ "; break@@ ; case Base@@ Comman@@ d.@@ ST@@ AT@@ US@@ _@@ NO@@ T_@@ AD@@ M@@ I@@ N : statu@@ s = "@@ not@@ -@@ admin@@ "; break@@ ; default : statu@@ s = java.lang.String.@@ value@@ Of(@@ ex@@ it@@ Value@@ ); break@@ ; } event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ ST@@ AT@@ US@@ , statu@@ s); java.lang.String p@@ e@@ er@@ Ag@@ ent = ssh@@ Session@@ .get@@ P@@ e@@ er@@ Ag@@ ent@@ (); if (p@@ e@@ er@@ Ag@@ ent != null@@ ) { event.@@ set@@ Pro@@ per@@ ty(@@ com.google.gerrit.sshd.@@ Ssh@@ Lo@@ g.@@ P@@ _@@ A@@ G@@ EN@@ T@@ , p@@ e@@ er@@ Ag@@ ent@@ er@@ ); } if ((@@ as@@ y@@ n@@ c@@ ) != null@@ ) { as@@ y@@ n@@ c.@@ append(@@ event@@ ); } au@@ dit@@ (@@ statu@@ s, ctx@@ r@@ act@@ Wh@@ at@@ , cm@@ d@@ , par@@ ameter@@ s@@ ); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Action@@ Rule@@ Error@@ (java.lang.String err@@ ) { com.google.gerrit.server.project.@@ Change@@ Contro@@ l.@@ log.error@@ (@@ err@@ ); return action@@ Rule@@ Error@@ ("@@ E@@ rror e@@ valu@@ ing project project rule@@ s, ch@@ ec@@ k serv@@ er log@@ "); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Invalid@@ Action@@ (@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m rule@@ , com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m re@@ cor@@ d@@ ) { return log@@ Action@@ Rule@@ Error@@ ((((@@ ((@@ (("@@ Sub@@ m@@ it ac@@ tion r@@ ul@@ e " + rule@@ ) + " for change ") + (change@@ .getId@@ ())) + " of ") + (get@@ Project@@ ().get@@ Name@@ ())) + " out@@ pu@@ t in@@ vali@@ d result@@ : ") + re@@ cor@@ d@@ )); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d log@@ Action@@ Rule@@ Error@@ (java.lang.String err@@ , java.lang.Exception e) { com.google.gerrit.server.project.@@ Change@@ Contro@@ l.@@ log.error@@ (@@ err@@ , e); return action@@ Rule@@ Error@@ ("@@ E@@ rror e@@ valu@@ at@@ ing project rule@@ s, ch@@ ec@@ k serv@@ er log@@ "); log@@ "); }
private com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d action@@ Rule@@ Error@@ (java.lang.String err@@ ) { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Type@@ Recor@@ d.@@ Status.@@ R@@ U@@ L@@ E_@@ ER@@ RO@@ R@@ ; re@@ c.@@ error@@ Messag@@ e = err@@ ; return rec@@ ; }
@java.lang.Override protected void configure() { if ((@@ gerrit@@ Config@@ .get@@ String@@ (@@ plugin@@ Name, null@@ , "@@ url@@ ")) != null@@ ) { com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Module@@ .@@ LO@@ G@@ .@@ info@@ ("@@ J@@ I@@ R@@ A is configure@@ d a@@ s IT@@ S "); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ F@@ ac@@ ad@@ e@@ .@@ class@@ ).@@ to@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ I@@ t@@ s@@ F@@ ac@@ ad@@ e@@ .@@ class@@ ).@@ as@@ E@@ ag@@ er@@ S@@ ingle@@ t@@ on@@ (); in@@ stall@@ (@@ new com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ I@@ t@@ s@@ Hook@@ Module@@ (@@ plugin@@ Name, plugin@@ C@@ fg@@ Factory@@ )); } }
@org.junit.Test public void gerrit@@ Config@@ Cont@@ ain@@ s@@ S@@ an@@ e@@ Val@@ u@@ es@@ () throw@@ s java.lang.Exception { wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E, null@@ , "@@ user@@ name@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ US@@ ER@@ ); wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E, null@@ , "@@ p@@ asswor@@ d@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ A@@ S@@ ); wh@@ en@@ (c@@ fg@@ .get@@ String@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E, null@@ , "@@ url@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ URL@@ ); j@@ i@@ ra@@ Config = new com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ (c@@ fg@@ , com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ L@@ U@@ G@@ IN@@ _@@ NAM@@ E@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .getUser@@ name@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ US@@ ER@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .get@@ P@@ asswor@@ d@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Config@@ Test.@@ P@@ A@@ S@@ ); assert@@ Th@@ at(@@ j@@ i@@ ra@@ Config@@ .get@@ Url@@ ()).@@ isEqualTo@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ Config@@ Test.@@ URL@@ ); }
private com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent cli@@ ent@@ () throw@@ s java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception { if ((@@ cli@@ ent@@ ) == null@@ ) { log.@@ de@@ bug@@ ("@@ Con@@ n@@ ec@@ tion to j@@ i@@ r@@ a a@@ t {@@ }@@ ", ra@@ Config@@ .get@@ Url@@ ()); cli@@ ent = new com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent@@ ().get@@ Url@@ (), get@@ User@@ name@@ (), is@@ Url@@ ()); return cli@@ ent@@ ; } return cli@@ ent@@ ; }
public java.lang.String get@@ Url@@ () { return com.google.gerrit.client.@@ ra@@ i@@ ra@@ Url@@ ; }
private void auth@@ ori@@ ze@@ User@@ (com.google.gerrit.server.@@ Current@@ User user@@ , com.google.gerrit.server.project.Project@@ State state@@ , java.lang.String o@@ per@@ ation@@ ) throw@@ s org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ ze@@ d { com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name = state@@ .getName@@ Key@@ (); if (((@@ o@@ per@@ ation.@@ equals(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ D@@ O@@ W@@ N@@ LO@@ AD@@ )) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (project@@ Name@@ ).@@ test@@ Or@@ F@@ alse@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ RE@@ AD@@ )@@ ))) || ((@@ o@@ per@@ ation.@@ equals(@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ U@@ P@@ LO@@ AD@@ )) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ Or@@ F@@ alse@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ P@@ US@@ H@@ _@@ A@@ ST@@ _@@ ON@@ RE@@ F@@ ))@@ ))) { java.lang.String o@@ p = o@@ per@@ ation.@@ to@@ L@@ ow@@ er@@ Case@@ (); java.lang.String project = state@@ .getProject@@ ().get@@ Name@@ (); java.lang.String user@@ Name = (user@@ .getUser@@ Name@@ ()) ? user@@ .getUser@@ Name@@ () : "@@ an@@ on@@ y@@ mo@@ us@@ "; com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Api@@ Servlet.@@ log.@@ de@@ bug@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Un@@ auth@@ ori@@ ze@@ d for user %s on project %@@ s", op@@ , user@@ Name, project@@ )); throw new org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ zed@@ (@@ op@@ , project@@ ); } }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ De@@ code@@ Ag@@ ain@@ st@@ En@@ cod@@ ed@@ Input@@ () throw@@ s java.lang.Exception { java.lang.String pla@@ in = t@@ ex@@ t java.lang.String en@@ c@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ en@@ c@@ r@@ yp@@ t(@@ pla@@ in@@ ); java.lang.String pla@@ in@@ P@@ roject = c@@ ip@@ h@@ er.@@ d@@ ec@@ t(@@ en@@ c@@ r@@ yp@@ ted@@ ); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .get@@ ()).@@ isEqualTo(@@ pla@@ in@@ ); }
private void throw@@ Un@@ auth@@ ori@@ zed@@ Op@@ (java.lang.String op@@ , com.google.gerrit.server.project.Project@@ State state@@ , com.google.gerrit.server.@@ Current@@ User user@@ ) throw@@ s org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ ze@@ d { java.lang.String project = state@@ .getProject@@ ().get@@ Name@@ (); java.lang.String user@@ Name = (user@@ .getUser@@ Name@@ ()) ? user@@ .getUser@@ Name@@ ().get@@ () : "@@ an@@ on@@ y@@ mo@@ us@@ "; com.googlesource.gerrit.plugins.@@ lfs.@@ lock@@ s.@@ Lfs@@ Lo@@ ck@@ s@@ Ac@@ tion.@@ log.@@ de@@ bug@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ G@@ e@@ t %s un@@ auth@@ ori@@ ze@@ d for user %s on project %@@ s", op@@ , user@@ Name, project@@ )); throw new org.eclipse.jgit.@@ lfs.@@ errors.@@ Lfs@@ Un@@ auth@@ ori@@ zed@@ (@@ op@@ , project@@ ); }
@org.junit.Test public void test@@ Token@@ Ser@@ i@@ ali@@ z@@ ation@@ Des@@ er@@ i@@ ali@@ z@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ or pro@@ cess@@ or = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ or@@ (c@@ ip@@ her@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ 0); java.lang.String ser@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ); assert@@ Th@@ at(@@ ser@@ i@@ ali@@ zed@@ ).@@ is@@ Not@@ E@@ mpty@@ (); av@@ a@@ .@@ u@@ ti@@ l@@ y = com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Auth@@ Token@@ > des@@ er@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ ser@@ i@@ ali@@ zed@@ ); assert@@ Th@@ at(@@ des@@ er@@ i@@ ali@@ zed@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ token@@ .@@ exp@@ i@@ res@@ At@@ ).@@ isEqualTo(@@ des@@ er@@ i@@ ali@@ zed@@ .get().@@ exp@@ i@@ zed@@ At@@ ); }
public com.google.common.base.@@ Optional@@ <@@ T> des@@ er@@ i@@ ali@@ ze@@ (java.lang.String input@@ ) { return com.google.common.base.@@ Optional@@ .@@ of@@ (@@ '@@ ).@@ s@@ ent@@ (); }
protected abstract java.util.List<@@ T> create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ );
public boolean ve@@ r@@ if@@ y@@ Auth@@ Info@@ (java.lang.String auth@@ Token@@ , java.lang.String o@@ per@@ ation@@ , org.eclipse.jgit.@@ lfs.@@ lib.@@ An@@ y@@ L@@ on@@ g@@ Object@@ Id id@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > to@@ k@@ en = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ auth@@ Token@@ ); if (!(@@ token@@ .is@@ P@@ res@@ ent@@ ())) { return false@@ ; } return new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er@@ (@@ token@@ .get(), o@@ per@@ ation@@ , id@@ ).@@ ve@@ r@@ if@@ y@@ (); }
@java.lang.Override protected com.google.common.base.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 3@@ ) { return com.google.common.base.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ values@@ ), org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (@@ values@@ )), values@@ .get(@@ 2@@ ))); } }
@java.lang.Override protected com.google.common.base.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return com.google.common.base.@@ Optional@@ .@@ of@@ (@@ par@@ ti@@ p@@ .get@@ Read@@ er@@ (), java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (@@ values@@ ), com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), values@@ .get(@@ 2@@ ), values@@ .get(@@ 3@@ ))); } return java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > values@@ ) { if (@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > load@@ Info = auth@@ Config@@ .get(@@ 0@@ ), values@@ .get(@@ 2@@ ), values@@ .get(@@ 3@@ ), false@@ ); } }
java.@@ ti@@ m@@ ate@@ ate@@ Server@@ From@@ Valid@@ Token@@ (java.lang.String auth@@ Token@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > to@@ k@@ en = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ auth@@ Token@@ ); if (!(@@ token@@ .is@@ P@@ res@@ ent@@ ())) { return java.util.@@ Optional@@ .@@ e@@ mp@@ t@@ (); } com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ .get(), project, o@@ per@@ ation@@ ); if (!(@@ ve@@ r@@ if@@ i@@ er.@@ ve@@ r@@ if@@ y@@ ())) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ log.error@@ ("@@ Account dat@@ a w@@ a@@ s pro@@ vi@@ de@@ d w@@ it@@ h a@@ ut@@ h to@@ k@@ en {@@ }@@ .@@ ", auth@@ Token@@ ); return java.util.@@ Optional@@ .@@ e@@ mp@@ t@@ mp@@ t@@ mp@@ (); } return java.@@ ti@@ u@@ ti@@ l@@ er.@@ of@@ (@@ token@@ .get().@@ user@@ ); }
@java.lang.Override protected com.google.common.base.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ values@@ .get(@@ 0@@ ))); }
public java.@@ u@@ ti@@ l@@ if@@ ec@@ t@@ s@@ C@@ ip@@ (java.lang.String input@@ ) { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ input@@ )) { return java.util.@@ Optional@@ .@@ empty@@ (); } byte@@ [] byte@@ s = org.eclipse.jgit.@@ util.@@ Base@@ 6@@ 4@@ .@@ de@@ code@@ (in@@ put@@ ); byte@@ [] init@@ V@@ ec@@ tor = java.util.Array@@ s.@@ copy@@ Of@@ (@@ byte@@ s, com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ C@@ ip@@ h@@ er.@@ I@@ V@@ _@@ L@@ EN@@ G@@ T@@ H@@ ); try { javax.@@ c@@ r@@ yp@@ to@@ .@@ C@@ ip@@ h@@ er c@@ ip@@ h@@ er = c@@ ip@@ her@@ (in@@ it@@ V@@ ec@@ tor@@ , javax.@@ c@@ r@@ yp@@ to@@ .@@ C@@ ip@@ h@@ er.@@ D@@ EC@@ R@@ Y@@ P@@ T@@ _MOD@@ E@@ ); return java.@@ ti@@ c@@ l@@ s.@@ UT@@ F@@ _@@ 8@@ )); } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ General@@ S@@ ecu@@ ri@@ ty@@ Exception e) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ C@@ ip@@ h@@ er.@@ log.error@@ ("@@ In@@ vali@@ d w@@ a@@ s n d@@ u@@ rin@@ g to@@ k@@ en ve@@ r@@ if@@ ic@@ ation ", e); } return java.util.@@ Optional@@ .@@ empty@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ De@@ code@@ Ag@@ ain@@ st@@ Invalid@@ Input@@ () throw@@ s java.lang.Exception { java.lang.String pla@@ in = t@@ ex@@ t java.lang.String en@@ c@@ r@@ yp@@ ted@@ ; while ((@@ en@@ c@@ r@@ yp@@ ted@@ .@@ char@@ At@@ (@@ 0@@ )) == (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ char@@ At@@ (1@@ ))) { en@@ c@@ r@@ yp@@ ted@@ .@@ char@@ At@@ (1@@ ))) { en@@ c@@ r@@ yp@@ ted = c@@ ip@@ h@@ er.@@ en@@ c@@ r@@ yp@@ t(@@ in@@ pla@@ in@@ ); } j@@ av@@ a@@ .@@ Optional@@ <java.lang.String> d@@ ec@@ r@@ yp@@ ted@@ _@@ id@@ id@@ d@@ ec@@ ted@@ (); java.lang.String en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (1@@ , 2@@ )) + (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (@@ 0, 1@@ ))) + (@@ en@@ c@@ r@@ yp@@ ted@@ .@@ substring@@ (@@ 2@@ )@@ ))); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ d@@ ec@@ ted@@ .get@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ pla@@ in@@ ); }
public com.google.gerrit.server.@@ Current@@ User get@@ User@@ (java.lang.String auth@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ auth@@ ))) { if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ User@@ Provi@@ der.@@ B@@ A@@ S@@ I@@ C_@@ A@@ UT@@ H@@ _@@ RE@@ FI@@ X@@ )) { return user@@ .get@@ (); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { return user@@ .get@@ (); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()), project, o@@ per@@ ation@@ ); if (user@@ .is@@ P@@ res@@ ent@@ ()) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ >@@ ac@@ c = account@@ s.get@@ By@@ User@@ name@@ (user@@ .get()); if (@@ ac@@ c@@ .is@@ P@@ res@@ ent@@ ()) { return user@@ Factory.create@@ (@@ ac@@ c@@ ); } } } return an@@ on@@ y@@ mo@@ u@@ s.get@@ (); }
public com.google.gerrit.server.@@ Current@@ User get@@ User@@ (java.lang.String auth@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ auth@@ ))) { if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ User@@ Provi@@ der.@@ B@@ A@@ S@@ I@@ C_@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { return user@@ .get@@ (); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ )) { return user@@ .get@@ (); } if (@@ auth.@@ startsWith@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ S@@ H@@ _@@ A@@ UT@@ H@@ _@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()), project, o@@ per@@ ation@@ ); if (user@@ .is@@ P@@ res@@ ent@@ ()) { com.google.gerrit.server.account.Account@@ State ac@@ c = account@@ s.get@@ By@@ User@@ name@@ (user@@ .get()); if (@@ ac@@ c != null@@ ) { return user@@ Factory.create@@ (@@ ac@@ c@@ ); } } } return an@@ on@@ y@@ mo@@ u@@ s.get@@ (); }
@org.junit.Test public void test@@ On@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ I@@ SO@@ I@@ SO@@ Y_@@ T@@ I@@ M@@ E@@ ST@@ AM@@ P@@ )@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Ex@@ p@@ i@@ red@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ I@@ SO@@ for@@ ma@@ t.@@ user@@ (@@ no@@ w@@ ()); }
static boolean on@@ Time@@ (java.lang.String date@@ Tim@@ e) { java.lang.String no@@ w = com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ I@@ SO@@ Y_@@ I@@ SO@@ N P@@ AR@@ EN@@ T@@ .@@ no@@ w@@ ()); return (@@ no@@ w.@@ compare@@ To@@ (@@ date@@ Time@@ )) <@@ = 0; }
static java.lang.String time@@ out@@ (@@ int exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s) { return com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ I@@ SO@@ U@@ M@@ I@@ SO@@ Y_@@ LO@@ C@@ ED@@ _@@ P@@ AR@@ EN@@ T@@ I@@ SO@@ N : com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ no@@ w@@ ().@@ p@@ lu@@ s@@ Se@@ con@@ d@@ s(@@ exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s@@ )); }
void append@@ Submit@@ ted@@ B@@ y(@@ com.google.gerrit.reviewdb.client.@@ Account ac@@ count@@ ) { sb.@@ append("@@ ER@@ RO@@ R@@ : "); }
private void append@@ User@@ Data@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ State@@ (((@@ ac@@ count == null@@ ) || (account@@ Id.@@ equals(@@ account@@ .getId@@ ())@@ )), ac@@ count ID@@ s boolean ne@@ ed@@ S@@ p@@ ac@@ e = false@@ ; boolean w@@ ro@@ te@@ Data = false@@ ; if (@@ ac@@ count != null@@ ) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mp@@ t@@ y@@ (account@@ .get@@ F@@ ull@@ Name@@ ())@@ ))) { sb.@@ append(@@ account@@ .get@@ F@@ ull@@ Name()); ne@@ ed@@ S@@ p@@ ac@@ e = true@@ ; w@@ ro@@ te@@ Data = true@@ ; } else if (!@@ (@@ ne@@ ed@@ S@@ p@@ ac@@ e != null@@ ) { sb.@@ append("@@ <@@ ").@@ append(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()).@@ append("@@ >@@ "); w@@ ro@@ te@@ Data@@ (c@@ urrent@@ User@@ .get@@ F@@ ull@@ Name()); } sb.@@ append("@@ <@@ ").@@ append(@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()).@@ append("@@ >@@ "); w@@ ro@@ te@@ Data@@ (c@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ).@@ append("@@ , "); } }
private void create@@ CodeReview@@ Note@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.reviewdb.client.PatchSet ps@@ , com.googlesource.gerrit.plugins.@@ review@@ not@@ es.@@ Header@@ Format@@ ter fm@@ t@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l sub@@ m@@ it = null@@ ; for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s@@ Util.@@ by@@ PatchSet@@ (@@ review@@ Db@@ , notes@@ , user@@ Factory.create@@ (change@@ .get@@ Owner@@ ()), ps@@ .getId@@ (), null@@ , null@@ )) { if ((@@ a@@ .getValue@@ ()) == 0) { } else if (@@ a.@@ is@@ L@@ e@@ g@@ ac@@ y@@ Submit@@ ()) { sub@@ m@@ it = a@@ ; } else { com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ a@@ .get@@ Label@@ Id()); if (@@ typ@@ e != null@@ ) { fm@@ t.@@ append@@ Approval@@ (@@ type@@ , a@@ .getValue@@ (), a@@ .getAccount@@ Id(), account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id()); } } if (@@ sub@@ m@@ it != null@@ ) { fm@@ t.@@ append@@ Submit@@ ted@@ B@@ y(@@ submit@@ .getAccount@@ Id(), account@@ Cache.@@ ma@@ y@@ be@@ (@@ submit@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); fm@@ t.@@ append@@ Submit@@ ted@@ At@@ (@@ submit@@ .get@@ G@@ ran@@ ted@@ ()); } if ((@@ can@@ on@@ ical@@ Web@@ Url@@ ) != null@@ ) { fm@@ t.@@ append@@ Review@@ ed@@ On@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ , ps@@ .getId@@ ().get@@ Parent@@ Key@@ ()); } fm@@ t.@@ append@@ Project@@ (project@@ .@@ get@@ (@@ fm@@ t.@@ append@@ Branch@@ (change@@ .get@@ Dest@@ ()); fm@@ t.@@ append@@ Branch@@ (change@@ .get@@ Dest@@ ()); }
private void append@@ User@@ Data@@ (@@ com.google.gerrit.reviewdb.client.@@ Account@@ Id account@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.@@ Account account@@ ) { check@@ State@@ (((@@ ac@@ count == null@@ ) || (account@@ Id.@@ equals(@@ account@@ .getId@@ ())@@ )), ac@@ count ID@@ s@@ boolean ne@@ ed@@ S@@ p@@ ac@@ e = false@@ ; boolean w@@ ro@@ te@@ Data = false@@ ; if (((@@ ac@@ count != null@@ ) && (((@@ ac@@ count != null@@ )) && (((@@ ac@@ count != null@@ ) && (!@@ account@@ .get@@ F@@ ull@@ Name@@ ().@@ isEmpty@@ ()))) { sb.@@ append(@@ " ac@@ count != null@@ ) && (!(@@ ac@@ count != null@@ )) { sb.@@ append(@@ account@@ .get@@ F@@ ull@@ Name()); ne@@ ed@@ S@@ p@@ ac@@ e = true@@ ; w@@ ro@@ te@@ Data = true@@ ; } if ((@@ ac@@ count != null@@ ) && (!@@ (@@ ac@@ c.@@ count@@ er@@ red@@ Email@@ ().@@ isEmpty@@ ()))) { if (@@ ne@@ ed@@ S@@ pace@@ ) { sb.@@ append("@@ <@@ ").@@ append(@@ ac@@ count ").@@ append(@@ ac@@ ro@@ red@@ Email@@ ).@@ append("@@ >@@ "); w@@ ro@@ te@@ Data = true@@ ; } } if (!@@ w@@ ro@@ te@@ Data@@ ) { sb.@@ append(@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ).@@ append("@@ >@@ "); } }
void append@@ Approval@@ (@@ com.google.gerrit.common.data.@@ Label@@ Type label@@ , short value@@ , com.google.gerrit.reviewdb.client.@@ Account account@@ ) { sb.@@ append(@@ label@@ .getName@@ ()); sb.@@ append(@@ com.google.gerrit.common.data.@@ Label@@ Value@@ .@@ for@@ m@@ at@@ Value@@ (@@ value@@ )); sb.@@ append("@@ User@@ Data@@ "); sb.@@ append(@@ account@@ ); sb.@@ append("@@ \n@@ "); }
public org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Ident@@ (@@ com.google.gerrit.reviewdb.client.Account.Id author@@ Id, java.util.@@ D@@ ate wh@@ en@@ , org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent server@@ Ident@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.@@ Account@@ > auth@@ or = account@@ Cache@@ .get(@@ id@@ ).get@@ G@@ ran@@ t(@@ author@@ Id@@ ().get@@ Account@@ State@@ :@@ get@@ Account@@ ); return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ author@@ Ident@@ .get(), map@@ .get@@ Wh@@ en@@ ()); }
java.util.List<@@ T> get@@ Base@@ Url@@ () { return base@@ Url@@ ; }
private java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion pre@@ p@@ Http@@ Con@@ n@@ ection@@ (java.lang.String sp@@ ec@@ , boolean is@@ Po@@ st@@ Request@@ ) throw@@ s java.io.IOException { java.lang.String ur@@ l = "@@ http@@ :@@ /@@ /@@ url@@ "); if ((@@ ur@@ l != null@@ ) && (@@ url@@ With@@ S@@ p@@ e@@ c@@ )) { java.@@ net.@@ Pro@@ x@@ y@@ Se@@ lec@@ tor pro@@ x@@ y@@ Se@@ lec@@ tor = java.@@ net.@@ Pro@@ x@@ y@@ Pro@@ x@@ y@@ Se@@ lec@@ tor@@ .get@@ Default@@ (); java.@@ net.@@ Pro@@ x@@ y pro@@ x@@ y = org.eclipse.jgit.@@ util.@@ Http@@ Sup@@ p@@ ort.@@ pro@@ x@@ y@@ For@@ (@@ pro@@ x@@ y@@ Se@@ lec@@ tor@@ , url@@ ); java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion con@@ n = ((@@ java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ection@@ ) (@@ ur@@ l.@@ open@@ Con@@ n@@ ection@@ Con@@ n@@ ection@@ (@@ pro@@ x@@ y@@ ))); con@@ n@@ .set@@ Request@@ Pro@@ per@@ ty@@ ("@@ ori@@ z@@ ation@@ ", ("@@ " + (@@ auth@@ ))); con@@ n@@ .set@@ Request@@ Pro@@ per@@ ty@@ ("@@ Content@@ -@@ Type@@ ", "@@ ap@@ plic@@ ation@@ /@@ json@@ "); if (@@ is@@ Po@@ st@@ Request@@ ) { con@@ n@@ .set@@ Request@@ Met@@ ho@@ d@@ ("@@ P@@ O@@ ST@@ "); con@@ n@@ .set@@ Do@@ (@@ true@@ ); } else { con@@ n@@ .set@@ Request@@ Met@@ ho@@ d@@ ("@@ G@@ E@@ T@@ "); } con@@ n@@ ; } return con@@ n@@ ; }
@java.lang.Override public void vali@@ date@@ New@@ Project@@ (com.google.gerrit.server.@@ project.@@ Create@@ Project@@ Arg@@ s arg@@ s) throw@@ s com.google.gerrit.server.@@ validators.@@ Validation@@ Exception { java.lang.String name = arg@@ s.get@@ Project@@ Name@@ (); com.ericsson.gerrit.plugins.@@ project@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ Add@@ ing cre@@ ation of {@@ } if (@@ name.@@ contains@@ ("@@ Add@@ ing { throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ (@@ com.ericsson.gerrit.plugins.@@ project@@ u@@ ct@@ ure@@ .@@ for@@ m@@ at@@ ("@@ Cre@@ ation %s in project %@@ s", user@@ name, " + "@@ n@@ o ") + (@@ owner@@ Id@@ )) + "@@ )@@ ))); } else { try { parent@@ C@@ tr@@ l = project@@ Control@@ Factory.@@ control@@ For@@ (arg@@ s@@ .@@ new@@ Parent@@ , self@@ .get()); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.ericsson.gerrit.plugins.@@ group@@ u@@ ct@@ u@@ ct@@ ure@@ .@@ log.error@@ ((@@ (("@@ Fai@@ le@@ d to cre@@ ate project " + name@@ ) + "@@ : Cannot ret@@ ri@@ ev@@ e in@@ fo pa@@ ren@@ t project pa@@ ren@@ t project ") + (arg@@ s@@ .@@ new@@ Parent@@ .get@@ ())) + " (@@ e.get@@ Message@@ ())@@ ), e); throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ com.ericsson.gerrit.plugins.@@ group@@ group@@ group@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ _@@ ER@@ RO@@ R@@ _@@ O@@ C@@ UR@@ S@@ ); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); com.ericsson.gerrit.plugins.@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ cre@@ at@@ ing project, "@@ cre@@ at@@ ing b@@ yp@@ as@@ s@@ ing rule@@ s return@@ ; } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { } if (@@ all@@ Project@@ s@@ Name@@ .get().@@ equals(@@ parent@@ .getProject@@ ().get@@ NameKey@@ ())) { vali@@ date@@ (@@ name, parent@@ ); } else { vali@@ date@@ Only@@ (@@ name, parent@@ C@@ tr@@ l@@ ); } if ((@@ !(@@ parent@@ C@@ tr@@ l.@@ is@@ Owner@@ ())) && (!(@@ con@@ tr@@ l@@ (@@ parent@@ )@@ ))) { args.@@ create@@ Group@@ Id@@ s.add(@@ create@@ Group@@ Id@@ s@@ ((@@ create@@ Group@@ Id@@ s@@ -@@ > user@@ Id@@ s@@ -@@ > user@@ Id@@ s@@ "@@ ))); } }
@java.lang.Override public void vali@@ date@@ New@@ Project@@ (com.google.gerrit.server.@@ project.@@ Create@@ Project@@ Arg@@ s arg@@ s) throw@@ s com.google.gerrit.server.@@ validators.@@ Validation@@ Exception { java.lang.String name = arg@@ s.get@@ Project@@ Name@@ (); com.ericsson.gerrit.plugins.@@ project@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ Cre@@ ate cre@@ ation of {@@ } com.google.gerrit.server.project.Project@@ Control parent@@ C@@ tr@@ l@@ ; try { parent@@ C@@ tr@@ l@@ Request = project@@ Control@@ Factory.@@ control@@ For@@ (@@ arg@@ s@@ .@@ new@@ Pa@@ ren@@ t self@@ ", project@@ .get()); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.ericsson.gerrit.plugins.@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ group@@ str@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.error@@ ((@@ (("@@ Fai@@ le@@ d to cre@@ ate project " + ret@@ ri@@ ev@@ e in@@ fo pa@@ ren@@ t project " + (arg@@ s@@ .@@ new@@ Parent@@ .get@@ ())) + " (@@ e.get@@ Message@@ ())@@ ), e); throw new com.google.gerrit.server.@@ validators.@@ Validation@@ Exception(@@ com.ericsson.gerrit.plugins.@@ project@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ AN@@ _@@ ER@@ RO@@ R@@ _@@ C@@ UR@@ RE@@ D@@ _M@@ S@@ G@@ E@@ ); } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); com.ericsson.gerrit.plugins.@@ group@@ u@@ ct@@ ure@@ .@@ Project@@ Cre@@ ation@@ Validator@@ .@@ log.@@ de@@ bug@@ ("@@ Th@@ is cre@@ at@@ ing project, b@@ yp@@ as@@ s@@ ing rule@@ s return@@ ; } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { } if (@@ all@@ Project@@ s@@ Name@@ .get().@@ equals(@@ parent@@ C@@ tr@@ l@@ .getProject@@ ().get@@ NameKey@@ ())) { vali@@ date@@ R@@ oo@@ t@@ Project@@ (@@ name, args.@@ per@@ mission@@ s@@ Only@@ ); } else { vali@@ date@@ Project@@ (@@ name, parent@@ C@@ l@@ ); } if ((@@ !(@@ parent@@ C@@ tr@@ l.@@ is@@ Owner@@ ())) && (!(@@ config@@ able@@ G@@ ran@@ t@@ ing@@ Owner@@ )@@ ))) { args.@@ owner@@ Id@@ s.add(@@ create@@ Group@@ ((@@ "@@ ))); }
public boolean is@@ s@@ ue@@ Ex@@ ist@@ s(@@ java.lang.String is@@ s@@ ue@@ Key@@ ) throw@@ s java.io.IOException { com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ restapi.@@ J@@ i@@ ra@@ Res@@ tApi@@ <@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ restapi.@@ J@@ i@@ ra@@ I@@ s@@ s@@ s@@ ue@@ > ap@@ i = ap@@ i@@ Builder@@ .get@@ I@@ s@@ s@@ s@@ s@@ ue@@ (); ap@@ i@@ .@@ do@@ Get@@ (@@ is@@ s@@ ue@@ Key@@ , java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ P@@ _@@ O@@ K@@ , null@@ ); java.lang.@@ Integ@@ er co@@ de = ap@@ i@@ .get@@ Respon@@ se@@ (); switch (@@ code@@ ) { case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ P@@ _@@ O@@ K : return true@@ ; case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ P@@ _@@ NO@@ T_@@ FO@@ UN@@ D : com.googlesource.gerrit.plugins.@@ it@@ s.@@ j@@ i@@ ra@@ .@@ J@@ i@@ ra@@ Cli@@ ent.@@ log.error@@ ("@@ I@@ s@@ su@@ e {@@ }@@ : {@@ }@@ ", is@@ s@@ ue@@ Key@@ ); return false@@ ; case java.@@ net.@@ Http@@ URL@@ Con@@ n@@ ec@@ tion.@@ H@@ T@@ T@@ P@@ _@@ O@@ R@@ B@@ ID@@ DE@@ N : com.googlesource.gerrit.plugins.@@ it@@ s.@@ J@@ i@@ ra@@ Cli@@ ent.@@ log.error@@ ("@@ I@@ s@@ su@@ e per@@ mis@@ sion to rea@@ d I@@ s@@ su@@ e {@@ }@@ ", is@@ s@@ ue@@ Key@@ ); return false@@ ; default : throw new java.io.IO@@ Exception@@ (("@@ H@@ T@@ T@@ T@@ P co@@ de re@@ ce@@ i@@ v@@ ed@@ : " + (@@ cod@@ e.@@ toString@@ ()))); } }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d(@@ java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All(@@ name@@ Or@@ Email@@ ); if ((@@ r.@@ size@@ ()) == 1@@ ) { return by@@ Id@@ .get(@@ en@@ c@@ b@@ ); } com.google.gerrit.reviewdb.client.@@ Account m@@ atch = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account.Id id : r@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > ac@@ count = by@@ Id.@@ ma@@ y@@ be@@ Get@@ (id@@ ).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ); if ((@@ !(@@ account.@@ is@@ P@@ res@@ ent@@ ())) || (!(@@ account@@ .get().@@ is@@ Active@@ ()))) { continue@@ ; } if (m@@ atch != null@@ ) { return null@@ ; } m@@ atch = account@@ .get@@ (); } return match@@ ; }
protected java.lang.String get@@ From@@ Line@@ () { final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = args.@@ account@@ Cache@@ .get(@@ get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ from@@ Id@@ ).get@@ Account@@ (); final java.lang.String name = account@@ .get@@ F@@ ull@@ Name@@ (); final java.lang.String e@@ mai@@ l = account@@ .get@@ Pref@@ er@@ red@@ Email@@ (); java.lang.String@@ Builder f = new java.lang.String@@ Builder@@ (); if (((@@ name != null@@ ) && (!(@@ name.@@ isEmpty@@ ()))) || ((@@ e@@ mai@@ l != null@@ ) && (!(@@ e@@ mail.@@ isEmpty@@ ())@@ ))) { f.@@ append("@@ From@@ "); if ((@@ name != null@@ ) && (!(@@ name.@@ isEmpty@@ ()))) { f.@@ append("@@ \@@ n ").@@ append(@@ e@@ mai@@ l != null@@ ) && (!(@@ e@@ mail.@@ isEmpty@@ ()))) { f.@@ append("@@ <@@ ").@@ append(@@ email@@ ).@@ append("@@ > :@@ \n@@ "); } } return f.@@ toString@@ (); }
private void append@@ Ident@@ (@@ java.io.@@ P@@ r@@ int@@ Wri@@ ter wri@@ ter@@ , java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id id@@ , java.sql.@@ Tim@@ est@@ am@@ p t@@ s) { org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new@@ Ident@@ (account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ (), t@@ s, server@@ Ident@@ ); java.lang.String@@ Builder name = new java.lang.String@@ Builder@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (@@ name, id@@ ent@@ .getName@@ ()); name.@@ append("@@ \@@ "); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (@@ name, id@@ ent@@ .get@@ Email@@ Add@@ ress@@ ()); name.@@ append(@@ '@@ >@@ '); append@@ Header@@ Fiel@@ d(@@ wri@@ ter@@ , head@@ er, toString@@ ()); }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d@@ By@@ Name@@ Or@@ Email@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); return (r@@ .@@ size@@ ()) == 1 ? by@@ Id@@ .getParent@@ Key@@ () : null@@ ; }
private void add@@ Submit@@ Recor@@ d@@ s(@@ Submit@@ Recor@@ d submit@@ Recor@@ d@@ , com.google.gerrit.server.@@ data.@@ Submit@@ Recor@@ d@@ Attri@@ but@@ e s@@ a@@ ) { if (((@@ submit@@ Recor@@ d.@@ label@@ s) != null@@ ) && (!(@@ submit@@ Recor@@ d.@@ label@@ s.@@ isEmpty@@ ()))) { s@@ a.@@ label@@ s = new java.util.Array@@ List(); for (@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l l@@ abe@@ l : submit@@ Recor@@ d.@@ label@@ s) { com.google.gerrit.server.@@ data.@@ Submit@@ Label@@ Attri@@ but@@ e l@@ a = new com.google.gerrit.server.@@ data.@@ Submit@@ Attribute@@ (); l@@ abe@@ l = l@@ abe@@ l.@@ label@@ ; l@@ a.@@ statu@@ s = l@@ abe@@ l.@@ statu@@ s.@@ name@@ (); if ((@@ l@@ b@@ l@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) { com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Cache@@ .get@@ By@@ User@@ (); if ((@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) { com.google.gerrit.server.account.Account@@ State account@@ State = account@@ Cache@@ .get(@@ change@@ .getProject@@ ()); } } } } }
public com.google.gerrit.server.@@ data.@@ Account@@ Attri@@ but@@ e as@@ Account@@ Attribute@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { if (@@ id == null@@ ) { return null@@ ; } return as@@ Account@@ Attribute@@ (account@@ Cache@@ .get(@@ id@@ )); }
protected com.google.gerrit.server.account.Account@@ State get@@ Account@@ State@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { return account@@ Cache@@ .get(@@ id@@ ).get@@ (); }
protected void remove@@ User@@ s@@ Th@@ at@@ I@@ g@@ no@@ red@@ Th@@ e@@ Change@@ () { for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id, java.util.Collection@@ <java.lang.String@@ >> e : star@@ s.@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { if (@@ e.get@@ Value@@ ().@@ contains(@@ Star@@ red@@ Changes@@ Util.@@ I@@ G@@ NO@@ RE@@ _@@ L@@ AB@@ E@@ L@@ )) { args.@@ account@@ Cache@@ .get(@@ e.get@@ Key@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ Account@@ )@@ .@@ P@@ res@@ ent@@ (( a@@ ) -@@ > remove@@ User@@ (@@ a@@ )); } } }
@java.lang.Override public void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) throw@@ s java.lang.Exception { op@@ Result = com.google.gerrit.server.@@ restapi.@@ change.@@ Po@@ st@@ Reviewer@@ s@@ O@@ p.@@ Result.@@ buil@@ der@@ ().set@@ Add@@ ed@@ Reviewer@@ s(@@ com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ add@@ ed@@ Reviewer@@ s@@ )).@@ set@@ Add@@ ed@@ C@@ s(@@ com.google.common.collect.Immutable@@ List.@@ copy@@ Of(@@ add@@ ed@@ C@@ s@@ )).@@ bu@@ ild@@ (); email@@ Reviewer@@ s(@@ rsrc@@ .getChange@@ (), com.google.common.collect.List@@ s.@@ tran@@ s@@ for@@ m@@ (@@ add@@ ed@@ Reviewer@@ s, ( r@@ ) -@@ > r@@ .getAccount@@ Id@@ ()), ((@@ add@@ ed@@ C@@ C@@ s) == null ? com.google.common.collect.Immutable@@ List.@@ of@@ () : add@@ ed@@ C@@ s@@ ), reviewer@@ s@@ By@@ Email@@ , add@@ ed@@ C@@ s@@ By@@ Email@@ , not@@ if@@ y@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ ); if (!(@@ add@@ ed@@ Reviewer@@ s.@@ isEmpty())) { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > reviewer@@ s = add@@ ed@@ Reviewer@@ s.@@ st@@ ream@@ ().@@ map@@ (( r@@ ) -@@ > account@@ Cache@@ .get(@@ en@@ en@@ .getAccount@@ Id@@ ()@@ )).@@ bu@@ ild@@ (); java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); reviewer@@ Add@@ ed@@ .@@ fi@@ re@@ (rsrc@@ .getChange@@ (), patchSet@@ , reviewer@@ s, ctx@@ .getAccount@@ (), ctx@@ .get@@ Wh@@ en@@ ()); } }
private void log@@ Orm@@ Exception@@ (java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.lang.I@@ terable@@ <?@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.lang.String@@ Builder messag@@ e = new java.lang.String@@ Builder@@ (@@ head@@ er@@ ); messag@@ e.@@ append(@@ " ").@@ append(@@ me@@ ); messag@@ e.@@ append("@@ /@@ "); messag@@ e.@@ append(@@ account@@ Cache@@ .get(@@ id@@ ).get@@ Ev@@ en@@ ()); messag@@ e.@@ append(@@ '@@ /@@ "); messag@@ e.@@ append(@@ account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ ()); messag@@ e.@@ append(@@ '@@ =@@ '); messag@@ e.@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ append(@@ '@@ ).@@ toString@@ ()); }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > values@@ , com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er m : values@@ ) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = m@@ .getAccount@@ Id(); java.lang.String user@@ Name = account@@ Cache@@ .get(@@ id@@ ).get@@ User@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = m@@ .getAccount@@ Group@@ Id(); java.lang.String group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Update {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ ", g@@ roup 2@@ /@@ {@@ 0@@ }@@ /@@ {@@ 2@@ }@@ /@@ {@@ 2@@ /@@ {@@ 0@@ }@@ /@@ {@@ 2@@ }@@ /@@ {@@ 0@@ }@@ ", user@@ Name, group@@ Name@@ )); log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
@java.lang.Override public com.google.gerrit.server.mail.@@ Add@@ res@@ s from@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ Id@@ ) { java.lang.String sen@@ der@@ Name@@ ; if (@@ from@@ Id != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = account@@ Cache@@ .get(@@ get@@ Account@@ Id@@ ).get@@ Account@@ (); java.lang.String f@@ ull@@ Name = a@@ .get@@ F@@ ull@@ Name@@ (); java.lang.String user@@ E@@ mai@@ l = a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if (c@@ an@@ Re@@ la@@ y(@@ user@@ Email@@ )) { return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ f@@ ull@@ Name, user@@ Email@@ ); } if ((@@ f@@ ull@@ Name == null@@ ) || ("@@ "@@ .equals(@@ f@@ ull@@ Name.@@ tri@@ m@@ ()))) { f@@ ull@@ Name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } sen@@ der@@ Name = name@@ Re@@ write@@ T@@ mp@@ l.@@ replace@@ ("@@ user@@ ", f@@ ull@@ Name@@ ).@@ toString@@ (); } else { sen@@ der@@ Name = server@@ Add@@ ress@@ .getName@@ (); } java.lang.String sen@@ der@@ Email@@ ; com.google.gerrit.common.data.@@ Parameter@@ i@@ zed@@ Strin@@ g sen@@ der@@ Email@@ Pat@@ ter@@ n = new com.google.gerrit.common.data.@@ Parameter@@ i@@ zed@@ String@@ (@@ server@@ Add@@ res@@ s.get@@ Email@@ ()); if (s@@ en@@ der@@ Email@@ Pat@@ tern@@ .get@@ Parameter@@ Nam@@ es@@ ().@@ isEmpty()) { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .get@@ R@@ a@@ w@@ Pat@@ tern@@ (); } else { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ ", com.google.gerrit.server.mail.@@ sen@@ d.@@ From@@ Add@@ ress@@ Gener@@ ator@@ Provi@@ der.@@ has@@ h@@ Of@@ (s@@ en@@ der@@ Name@@ )).@@ toString@@ (); } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ sen@@ der@@ Name, sen@@ der@@ Name, Email@@ ); }
@java.lang.Override public com.google.gerrit.server.mail.@@ Add@@ res@@ s from@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ Id@@ ) { final java.lang.String sen@@ der@@ Name@@ ; if (@@ from@@ Id != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ (); java.lang.String f@@ ull@@ Name = account@@ .get@@ F@@ ull@@ Name@@ (); if ((@@ f@@ ull@@ Name == null@@ ) || ("@@ "@@ .equals(@@ f@@ ull@@ Name@@ ))) { f@@ ull@@ Name = an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name@@ ; } sen@@ der@@ Name = name@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ ", f@@ ull@@ Name@@ ).@@ toString@@ (); } else { sen@@ der@@ Name = server@@ Add@@ ress@@ .getName@@ (); } java.lang.String sen@@ der@@ Email@@ ; if (s@@ en@@ der@@ Email@@ Pat@@ tern@@ .get@@ Parameter@@ Nam@@ es@@ ().@@ isEmpty()) { sen@@ der@@ E@@ mai@@ l = sen@@ der@@ Email@@ Pat@@ tern@@ .get@@ R@@ a@@ w@@ Pat@@ tern@@ (); } else { sen@@ der@@ E@@ mai@@ l = com.google.gerrit.server.mail.@@ sen@@ der@@ Email@@ Pat@@ tern@@ .@@ replace@@ ("@@ user@@ ", com.google.gerrit.server.mail.@@ sen@@ d.@@ From@@ Add@@ ress@@ Gener@@ ator@@ Provi@@ der.@@ has@@ h@@ Of@@ (s@@ en@@ der@@ Name@@ )).@@ toString@@ (); } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ sen@@ der@@ Name, Email@@ ); }
private org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent new@@ Author@@ Ident@@ (com.google.gerrit.server.@@ notedb.@@ re@@ buil@@ d.@@ Event@@ List<@@ ?@@ > event@@ s) { com.google.gerrit.reviewdb.client.Account.Id id = event@@ s.get@@ Account@@ Id(); if (@@ id == null@@ ) { return new org.eclipse.jgit.lib.@@ Per@@ son@@ Ident@@ (@@ server@@ Ident@@ , event@@ s.get@@ Wh@@ en@@ ()); } return change@@ Note@@ Util@@ .@@ new@@ Ident@@ (account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ (), event@@ s.get@@ Wh@@ en@@ (), server@@ Ident@@ ); }
public java.lang.String get@@ User@@ Name@@ Email@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State wh@@ o = args.@@ account@@ Cache@@ .get(@@ en@@ .getUser@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id); java.lang.String name = wh@@ o@@ .getAccount@@ ().get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = wh@@ o@@ .getAccount@@ ().get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ name != null@@ ) && (@@ e@@ mai@@ l != null@@ )) { return ((@@ name + " < email@@ ) + "@@ >@@ "; } else if (@@ e@@ mai@@ l != null@@ ) { return email@@ ; } else if (@@ name != null@@ ) { return name@@ ; } return wh@@ o@@ .getUser@@ Name@@ ().@@ or@@ E@@ l@@ se@@ (@@ null@@ ); }
private java.lang.String@@ Builder add@@ Ident@@ (@@ java.lang.String@@ Builder s@@ b@@ , com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ (); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = new@@ Ident@@ (account@@ , wh@@ en@@ ); org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (s@@ b@@ , id@@ ent@@ .getName@@ ()); sb.@@ append("@@ Update < (@@ org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent.@@ append@@ S@@ an@@ iti@@ zed@@ (s@@ b@@ , id@@ ent@@ .get@@ Email@@ Add@@ ress@@ ()); sb.@@ append(@@ '@@ >@@ '); return s@@ b@@ ; }
public java.lang.String get@@ Name@@ Email@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.server.account.Account@@ State wh@@ o = args.@@ account@@ Cache@@ .get(@@ en@@ ); if (account@@ Id != null@@ ) { java.lang.String e@@ mai@@ l = wh@@ o@@ .getAccount@@ ().get@@ F@@ ull@@ Name@@ (); java.lang.String e@@ mai@@ l = wh@@ o@@ .getAccount@@ ().get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ name != null@@ ) && (@@ e@@ mai@@ l != null@@ )) { return ((@@ name + " < email@@ ) + "@@ >@@ "; } else if (@@ name != null@@ ) { return email@@ ; } else if (@@ e@@ mai@@ l != null@@ ) { return email@@ ; } else { return ((@@ args.@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name) + " account@@ Id@@ ; } }
private com.google.gerrit.server.mail.@@ Add@@ res@@ s to@@ Add@@ res@@ s(@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = args.@@ account@@ Cache@@ .get(@@ en@@ Ev@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ).get@@ Account@@ (); java.lang.String e = a@@ .get@@ Pref@@ er@@ red@@ Email@@ (); if ((@@ !(@@ a.@@ is@@ Active@@ ())) || (@@ e == null@@ )) { return null@@ ; } return new com.google.gerrit.server.mail.@@ Add@@ res@@ s(@@ a@@ .get@@ F@@ ull@@ Name@@ (), e); }
protected java.lang.String get@@ Name@@ For@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { if (account@@ Id == null@@ ) { return arg@@ s@@ .g@@ errit@@ Per@@ son@@ Ident@@ .getName@@ (); } final com.google.gerrit.reviewdb.client.@@ Account user@@ Account = args.@@ account@@ Cache@@ .get(@@ en@@ code@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ Account@@ (); java.lang.String name = user@@ Account@@ .get@@ F@@ ull@@ Name@@ (); if (@@ name == null@@ ) { name = user@@ Account@@ .get@@ Pref@@ er@@ red@@ Email@@ (); } if (@@ name == null@@ ) { name = ((@@ args.@@ an@@ on@@ y@@ mo@@ us@@ Co@@ war@@ d@@ Name) + " account@@ Id@@ ; } return name@@ ; }
private Account.@@ Id user@@ (java.lang.String name, java.lang.String email@@ ) { final com.google.gerrit.server.account.Account@@ State s = ma@@ k@@ e@@ User@@ (@@ name, email@@ ); expec@@ t(@@ account@@ Cache@@ .get(@@ user@@ Id@@ ).get@@ Account@@ ().get@@ ()); return account@@ s.get@@ Account@@ ().get@@ Id(); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > get@@ Group@@ Member@@ s(@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group group@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Project.NameKey project, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > se@@ en@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { se@@ en@@ .@@ add(@@ group@@ .get@@ Group@@ UUID@@ ()); com.google.gerrit.server.account.@@ Group@@ Control group@@ Control = group@@ Control@@ Factory.@@ control@@ For@@ (@@ new com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ Description@@ (@@ group@@ )); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > di@@ re@@ ct@@ Member@@ s = group@@ .get@@ Member@@ s().@@ st@@ ream@@ ().@@ filter@@ (@@ group@@ Control@@ :@@ can@@ Se@@ e@@ Member@@ (account@@ Cache@@ :@@ get@@ Account@@ Id@@ .get(), group@@ .getId@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ :@@ get@@ Account@@ Account@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ > in@@ di@@ re@@ ct@@ Member@@ s = new java.util.Hash@@ Set<@@ >(); if (@@ group@@ Contro@@ l.@@ can@@ Se@@ e@@ Group@@ ()) { for (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D sub@@ U@@ u@@ id : group@@ .get@@ Sub@@ group@@ s()) { if (!(@@ se@@ en@@ .@@ contains(@@ group@@ U@@ u@@ id@@ ))) { in@@ di@@ re@@ ct@@ Member@@ s.@@ add@@ All(@@ list@@ Account@@ s(@@ sub@@ U@@ u@@ id@@ , project, se@@ en@@ )); } } } return com.google.common.collect.@@ Set@@ s.@@ un@@ i@@ on@@ (@@ di@@ re@@ ct@@ Member@@ s, in@@ di@@ re@@ ct@@ Member@@ s); }
public com.google.gerrit.reviewdb.client.@@ Account fin@@ d(@@ java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = fin@@ d@@ All(@@ name@@ Or@@ Email@@ ); if ((@@ r.@@ size@@ ()) == 1@@ ) { return by@@ Id@@ .get@@ Ev@@ en@@ I@@ f@@ M@@ is@@ s@@ ing@@ (r@@ .@@ iter@@ ator@@ ().@@ next@@ ()@@ ).get@@ Account@@ (); } com.google.gerrit.reviewdb.client.@@ Account m@@ atch = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account.Id id : r@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account@@ > ac@@ count = by@@ Id@@ .get(@@ id@@ ).get@@ Account@@ (); if ((@@ !(@@ account.@@ is@@ P@@ res@@ ent@@ ())) || (!(@@ account@@ .get().@@ is@@ Active@@ ()))) { continue@@ ; } if (m@@ atch != null@@ ) { return null@@ ; } m@@ atch = account@@ .get@@ (); } return match@@ ; }
@java.lang.Override public final void post@@ Update@@ (com.google.gerrit.server.@@ update.@@ Context ctx@@ ) throw@@ s java.lang.Exception { if (change@@ Al@@ read@@ y@@ Merged@@ ) { log@@ De@@ bug@@ ("@@ Add@@ ing post@@ -@@ updat@@ e for change {@@ } get@@ Id()); return@@ ; } post@@ Update@@ Im@@ pl@@ (ctx@@ ); if ((@@ command@@ ) != null@@ ) { args.@@ tag@@ Cache.@@ update@@ F@@ ast@@ For@@ war@@ d(@@ get@@ Project@@ (), command@@ .getRef@@ Name@@ (), command@@ .get@@ O@@ ld@@ Id(), command@@ .get@@ New@@ Id()); if (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ get@@ Dest@@ ().get@@ ())) { args.@@ project@@ Cache.@@ e@@ vi@@ ct@@ (get@@ Project@@ ()); com.google.gerrit.server.project.Project@@ State p = args.@@ project@@ Cache@@ .get(@@ get@@ Project@@ ()); try (@@ org.eclipse.jgit.lib.Repository g@@ it = args.@@ repo@@ Manager.@@ open@@ Repository(@@ get@@ Project@@ ())) { git.@@ set@@ Git@@ web@@ Description@@ (p@@ .getProject@@ ().get@@ Description@@ ()); } catch (java.io.IOException e) { com.google.gerrit.server.git.@@ str@@ ateg@@ y.@@ Submit@@ Strateg@@ y@@ O@@ p.@@ log.error@@ (("@@ Cannot updat@@ e des@@ crip@@ tion of " + (p@@ .getName@@ ())@@ ), e); } } try { args.@@ merg@@ ed@@ S@@ en@@ der@@ Factory.create@@ (ctx@@ .getProject@@ (), get@@ Id(), submit@@ ter@@ .getAccount@@ Id(), args.@@ not@@ if@@ y@@ , args.@@ account@@ s@@ To@@ No@@ t@@ if@@ y@@ ).@@ send@@ Async@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.git.@@ str@@ ateg@@ y.@@ Submit@@ Strateg@@ y@@ O@@ p.@@ log.error@@ (("@@ Cannot e@@ mai@@ l merge@@ d not@@ if@@ ic@@ ation for " + (get@@ Id@@ ())@@ ), e); } if (((@@ merge@@ Result@@ Rev@@ ) != null@@ ) && (!(@@ args.@@ d@@ ry@@ run@@ ))) { args.@@ change@@ Merged@@ .@@ fi@@ re@@ (@@ updat@@ ed@@ Change@@ , merg@@ ed@@ PatchSet@@ , args.@@ account@@ Cache@@ .get@@ I@@ f@@ M@@ is@@ s@@ ing@@ (@@ submit@@ ter@@ .getAccount@@ Id@@ ()), args.@@ merge@@ Tip@@ .get@@ Current@@ Tip@@ ().@@ name@@ (), ctx@@ .get@@ Wh@@ en@@ ()); }
@java.lang.Override public void fi@@ ll@@ Account@@ Info@@ (java.lang.@@ I@@ terable@@ <@@ ? extends com.google.gerrit.extensions.common.@@ Account@@ Info> in@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Fil@@ l@@ Option@@ s@@ > o@@ ption@@ s) throw@@ s com.google.gerrit.server.account.@@ Di@@ rec@@ tor@@ y@@ Exception { if (@@ o@@ ption@@ s.@@ equals(@@ com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Di@@ rec@@ tor@@ y.@@ ID@@ _@@ ON@@ L@@ Y@@ )) { return@@ ; } for (@@ com.google.gerrit.extensions.common.@@ Account@@ Info in@@ fo : in@@ ) { com.google.gerrit.reviewdb.client.Account.Id id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ info.@@ _@@ account@@ Id); com.google.gerrit.server.account.Account@@ State st@@ ate = account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ I@@ f@@ M@@ is@@ s@@ ing@@ (id@@ ); fi@@ ll@@ (@@ info@@ , state@@ .get@@ ExternalId@@ s@@ (), o@@ ption@@ s); } }
private void create@@ CodeReview@@ Note@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ , com.google.gerrit.reviewdb.client.PatchSet ps@@ , com.googlesource.gerrit.plugins.@@ review@@ not@@ es.@@ Header@@ Format@@ ter fm@@ t@@ ) throw@@ s com.google.gerrit.server.project.@@ NoSuch@@ Change@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l sub@@ m@@ it = null@@ ; for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s@@ Util.@@ by@@ PatchSet@@ (@@ review@@ Db@@ , notes@@ , user@@ Factory.create@@ (change@@ .get@@ Owner@@ ()), ps@@ .getId@@ (), null@@ , null@@ )) { if ((@@ a@@ .getValue@@ ()) == 0) { } else if (@@ a.@@ is@@ L@@ e@@ g@@ ac@@ y@@ Submit@@ ()) { sub@@ m@@ it = a@@ ; } else { com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ a@@ .get@@ Label@@ Id()); if (@@ typ@@ e != null@@ ) { fm@@ t.@@ append@@ Approval@@ (@@ type@@ , a@@ .getValue@@ (), a@@ .getAccount@@ Id(), account@@ Cache@@ .get(@@ id@@ ).get@@ Account@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ :@@ :@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); } } if (@@ sub@@ m@@ it != null@@ ) { fm@@ t.@@ append@@ Submit@@ ted@@ B@@ y(@@ submit@@ .getAccount@@ Id(), account@@ Cache@@ .get(@@ submit@@ .getAccount@@ Id@@ ()).@@ map@@ (@@ Account@@ State@@ :@@ get@@ Account@@ ).@@ or@@ E@@ l@@ se@@ (@@ null@@ )); fm@@ t.@@ append@@ Submit@@ ted@@ At@@ (@@ submit@@ .get@@ G@@ ran@@ ted@@ ()); } if ((@@ can@@ on@@ ical@@ Web@@ Url@@ ) != null@@ ) { fm@@ t.@@ append@@ Review@@ ed@@ On@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ , ps@@ .getId@@ ().get@@ Parent@@ Key@@ ()); } fm@@ t.@@ append@@ Project@@ (project@@ .get()); fm@@ t.@@ append@@ Branch@@ (change@@ .get@@ ().get@@ ()); }
private void rep@@ ort@@ Member@@ s@@ Action@@ (java.lang.String action@@ , com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource group@@ , java.util.List<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ List@@ ) throw@@ s java.io.IOException, java.io.@@ Un@@ sup@@ p@@ orted@@ En@@ cod@@ ing@@ Exception { java.lang.String name@@ s = account@@ Id@@ List.@@ st@@ ream@@ ().@@ map@@ (( account@@ Id@@ ) -@@ > com.google.common.base.@@ Mo@@ re@@ Object@@ s.@@ fi@@ rst@@ N@@ on@@ Null@@ (account@@ Cache@@ .get(@@ en@@ try@@ I@@ f@@ M@@ is@@ s@@ ing@@ (account@@ Id@@ ).get@@ Account@@ ().get@@ Pref@@ er@@ red@@ Email@@ (), "@@ n@@ /@@ a@@ "@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ j@@ o@@ in@@ ing@@ ("@@ in@@ ing@@ ", out.@@ write@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ s@@ : %s g@@ roup %@@ s@@ : %@@ s@@ )@@ ", action@@ , group@@ .getName@@ (), nam@@ es@@ ).get@@ By@@ t@@ es(@@ com.google.gerrit.sshd.commands.@@ EN@@ C@@ )); }
@org.junit.Test public void b@@ lock@@ Push@@ Draft@@ s() { allow@@ (@@ parent@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , "@@ ref@@ s@@ /@@ for@@ /@@ refs/@@ *@@ "); b@@ lock@@ (@@ parent@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ AN@@ ON@@ Y@@ M@@ O@@ US@@ _@@ US@@ ER@@ S@@ , "@@ refs/@@ draft@@ s/@@ *@@ "); allow@@ (((@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ RE@@ G@@ I@@ ST@@ E@@ RE@@ D@@ _@@ US@@ ER@@ S@@ , "@@ refs/@@ draft@@ s/@@ *@@ "); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Control u = user@@ (@@ local@@ ); assert@@ Create@@ Change@@ ("@@ refs/heads/@@ master@@ ", u@@ ); assert@@ Th@@ at(@@ u@@ .@@ control@@ For@@ Ref@@ ("@@ refs/@@ d@@ raf@@ /@@ master@@ ").@@ can@@ P@@ er@@ for@@ m@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ P@@ US@@ H@@ )).@@ is@@ F@@ alse@@ (); }
private static java.util.@@ Optional@@ <@@ com.google.gerrit.server.notedb.@@ NoteDb@@ Change@@ State.@@ Ref@@ State@@ > parse@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, java.util.List<java.lang.String> par@@ t@@ s) { check@@ Argument@@ ((@@ !(@@ par@@ t@@ s.@@ isEmpty@@ ())@@ ), st@@ ate st@@ rin@@ g for change change@@ Id); org.eclipse.jgit.lib.ObjectId change@@ Met@@ a@@ Id = org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ par@@ t@@ s.get(@@ 0@@ )); java.util.Map@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id, org.eclipse.jgit.lib.Object@@ Id> draft@@ Id@@ s = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (((@@ par@@ t@@ s.@@ size@@ ()) - 1@@ )); com.google.common.base.@@ S@@ pli@@ t@@ ter s = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ =@@ '); for (@@ int i = 1; i < (@@ par@@ t@@ s.@@ size()); i@@ ++@@ ) { java.lang.String p = par@@ t@@ s.get(@@ i@@ ); java.util.List<java.lang.String> draft@@ P@@ art@@ s = s.@@ s@@ pli@@ t@@ To@@ List@@ (p@@ ); check@@ Argument@@ (((@@ draft@@ P@@ art@@ s.@@ size@@ ()) == 2@@ ), "@@ in@@ vali@@ d d@@ raf@@ t st@@ ate par@@ t for change %@@ s@@ : %@@ s", change@@ Id, p@@ ); java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id = Account.@@ Id.@@ parse@@ (@@ draft@@ P@@ art@@ s.get(@@ 0@@ )); check@@ Argument@@ (account@@ Id.@@ is@@ P@@ res@@ ent@@ (), ac@@ count in d@@ raf@@ t st@@ ate par@@ t for change %@@ s@@ : %@@ s", change@@ Id, p@@ ); draft@@ Id@@ s.@@ put@@ (@@ account@@ Id@@ .get(), org.eclipse.jgit.lib.Object@@ Id.@@ from@@ String@@ (@@ draft@@ P@@ art@@ s.get(@@ 1@@ ))); } return java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ notedb.@@ NoteDb@@ Change@@ State.@@ Ref@@ State.@@ create@@ (change@@ Met@@ a@@ Id, draft@@ Id@@ s@@ )); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ Auth@@ Result@@ > by@@ Account@@ Id@@ (java.lang.String id@@ Str@@ ) { try { return get@@ Servlet@@ Context@@ ().@@ log@@ ("@@ can@@ not quer@@ y dat@@ abase@@ ", e); } }
public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ All@@ (java.lang.String name@@ Or@@ Email@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.@@ reg@@ ex@@ .@@ Match@@ er m = java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ "); if (@@ m.@@ match@@ es@@ ()) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id = Account.@@ Id.@@ parse@@ (m@@ .group@@ (1@@ )); if (id@@ .is@@ P@@ res@@ ent@@ ()) { return com.google.common.collect.@@ Stream@@ s.@@ st@@ ream@@ (account@@ s.get(@@ id@@ .get@@ ()@@ )).@@ map@@ (( a@@ ) -@@ > id@@ .get@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es@@ ("@@ ^@@ [@@ 1@@ -@@ 9@@ ]@@ [@@ 0@@ -@@ 9@@ ]@@ *@@ $@@ ")) { java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id = Account.@@ Id.@@ parse@@ (@@ name@@ Or@@ Email@@ ); if (id@@ ent@@ ()) { return com.google.common.collect.@@ Stream@@ s.@@ st@@ ream@@ (account@@ s.get(@@ id@@ .get@@ ()@@ )).@@ map@@ (( a@@ ) -@@ > id@@ .get@@ ()).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); } } if (@@ name@@ Or@@ E@@ mail.@@ match@@ es(@@ Account.@@ US@@ ER@@ _@@ NAM@@ E_@@ P@@ AT@@ T@@ ER@@ N@@ )) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ ExternalId@@ > wh@@ o = by@@ Id@@ .get@@ By@@ User@@ name@@ Or@@ Email@@ (@@ wh@@ o.@@ is@@ P@@ res@@ ent@@ ()) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (@@ wh@@ o.@@ map@@ (( a@@ ) -@@ > a@@ .getAccount@@ Id@@ ().get@@ ()); } } return fin@@ d@@ All@@ By@@ Name@@ Or@@ Email@@ (@@ name@@ Or@@ Email@@ ); }
@java.lang.Override public com.google.gerrit.server.mail.@@ Par@@ sed@@ To@@ k@@ en de@@ code@@ (java.lang.String token@@ String@@ ) throw@@ s com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception { check@@ Email@@ Reg@@ ist@@ r@@ ation@@ Token@@ (); com.google.gwtjsonrpc.@@ server.@@ Valid@@ To@@ k@@ en token@@ ; try { to@@ k@@ en = email@@ Reg@@ ist@@ r@@ ation@@ Token@@ .@@ check@@ Token@@ (@@ token@@ String@@ , null@@ ); } catch (@@ com.google.gwtjsonrpc.@@ server.@@ X@@ sr@@ f@@ Exception err@@ ) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception(@@ err@@ ); } if (((@@ to@@ k@@ en == null@@ ) || ((@@ token@@ .get@@ Data@@ ()) == null@@ )) || (@@ token@@ .get@@ Data@@ ().@@ isEmpty())) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception@@ (); } java.lang.String pa@@ y@@ lo@@ ad = new java.lang.String@@ (@@ org.eclipse.jgit.@@ util.@@ Base@@ 6@@ 4@@ .@@ de@@ code@@ (@@ token@@ .get@@ Data@@ ()), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); java.util.@@ reg@@ ex@@ .@@ Match@@ er match@@ er = java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ ("@@ ^@@ [@@ 0@@ -@@ 9@@ ]@@ +@@ )@@ @@@ (@@ \@@ )@@ $@@ ").@@ match@@ er@@ (@@ pa@@ y@@ ); if (!(@@ match@@ er.@@ match@@ es@@ ())) { throw new com.google.gerrit.server.mail.@@ Invalid@@ Token@@ Exception@@ (); } com.google.gerrit.reviewdb.client.Account.Id id = Account.@@ Id.@@ parse@@ (@@ match@@ er@@ .group@@ (1@@ ))@@ .@@ E@@ l@@ se@@ Throw@@ (@@ Invalid@@ Token@@ Exception@@ :@@ new@@ ); java.lang.String new@@ E@@ mai@@ l = match@@ er@@ .group@@ (@@ 2); return new com.google.gerrit.server.mail.@@ Par@@ sed@@ Token@@ (id@@ , new@@ Email@@ ); }
public static java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> parse@@ (java.lang.String str@@ ) { try { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (@@ str@@ )); } catch (@@ java.lang.Exception e) { return java.util.@@ Optional@@ .@@ of@@ (@@ e); } }
private static void d@@ ashbo@@ ar@@ d(@@ java.lang.String token@@ ) { java.lang.String res@@ t = com.google.gerrit.client.@@ Dis@@ patch@@ er.@@ s@@ kip@@ (@@ token@@ ); if (@@ rest@@ ore@@ Change@@ Id@@ .get@@ ()) { com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (@@ Account@@ Id@@ .get@@ ()))); return@@ ; } if (@@ rest.@@ e@@ quals("@@ self@@ ")) { if (@@ com.google.gerrit.client.Gerrit.@@ is@@ Sig@@ ned@@ In@@ ()) { com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (com.google.gerrit.client.@@ Gerrit@@ .getUser@@ Account@@ ().get@@ Id@@ ())); } else { com.google.gerrit.client.ui.@@ S@@ cre@@ en s = new com.google.gerrit.client.changes.@@ Account@@ D@@ ashbo@@ ard@@ Screen@@ (@@ null@@ ); s.set@@ Requ@@ i@@ res@@ Sig@@ n@@ In@@ (@@ true@@ ); com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , token@@ , new com.google.gerrit.client.changes.@@ C@@ u@@ st@@ o@@ m@@ D@@ ashbo@@ ard@@ Screen@@ (@@ rest.@@ substring@@ (1@@ ))); return@@ ; } com.google.gerrit.client.Gerrit.@@ display(@@ token@@ , new com.google.gerrit.client.@@ NotFound@@ Screen@@ ()); }
private java.lang.String change@@ K@@ ind@@ Message@@ (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d change@@ K@@ ind@@ ) { switch (change@@ K@@ ind@@ ) { case M@@ ER@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E : return ("@@ N@@ e@@ w merg@@ e p@@ atch se@@ t w@@ a@@ s ad@@ de@@ d w@@ it@@ h a new fi@@ r@@ s@@ t pa@@ ren@@ t re@@ l@@ ati@@ v@@ e to " + (p@@ ri@@ or@@ PatchSet@@ Id@@ .get@@ ())) + "@@ .@@ "; case T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E : return ("@@ P@@ atch Set " + (p@@ ri@@ or@@ PatchSet@@ Id@@ .get@@ ())) + " w@@ a@@ s re@@ b@@ as@@ ed@@ . "; case NO@@ _@@ CHANG@@ E : return (@@ typ@@ e); case NO@@ _@@ CHANG@@ E : return (@@ typ@@ e); case NO@@ _@@ CHANG@@ E : return (@@ typ@@ e == (@@ -@@ patch@@ set@@ )@@ : return ((@@ ("@@ id@@ enti@@ c@@ ation w@@ it@@ h de@@ d w@@ it@@ h s@@ \n@@ " + ((@@ commit@@ .getParent@@ Count@@ ()) != 1 ? "@@ " : "@@ ")) + "@@ \@@ n commit a@@ s updat@@ ed@@ .@@ ")); case RE@@ W@@ O@@ R@@ K : default : return null@@ ; } }
@java.lang.Override public void on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ Account@@ Group.@@ UU@@ I@@ D@@ > add@@ ed@@ Sub@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > in@@ clu@@ des@@ Au@@ di@@ t = add@@ ed@@ Sub@@ group@@ s.@@ st@@ ream@@ ().@@ map@@ (( t@@ ) -@@ > to@@ Account@@ Group@@ By@@ Id@@ Au@@ d(@@ parent@@ Group@@ Id, add@@ ed@@ On@@ , me@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ()) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (in@@ clu@@ des@@ Au@@ dit@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g ad@@ d group@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ Sub@@ s, group@@ Id, parent@@ Group@@ Id, e@@ ); } }
@java.lang.Override public void on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ Account@@ Group.@@ UU@@ I@@ D@@ > remove@@ d@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { final java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ > au@@ dit@@ Update@@ s = new java.util.ArrayList<@@ >(); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { for (@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ I@@ D u@@ u@@ id@@ : remo@@ v@@ ed@@ ) { com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d au@@ di@@ t = null@@ ; for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d a : db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ by@@ Group@@ Inclu@@ de@@ (@@ parent@@ Group@@ Id, u@@ id@@ )) { if (@@ a.@@ is@@ Active@@ ()) { au@@ di@@ t = a@@ ; break@@ ; } } if (@@ au@@ di@@ t != null@@ ) { au@@ d@@ it.@@ remo@@ v@@ ed@@ (@@ me@@ , remo@@ v@@ ed@@ On@@ ); au@@ dit@@ Updat@@ es.@@ add(@@ au@@ dit@@ ); } } db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ update@@ (@@ au@@ dit@@ Updat@@ es@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Group@@ s("@@ Cannot lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , remo@@ v@@ ed@@ , e); } }
private void log@@ Orm@@ Exception@@ For@@ Account@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.Change.@@ Id> group@@ s) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account.Id id : id@@ s) { java.lang.String user@@ Name@@ ; if ((@@ id@@ .get@@ ()) == null@@ ) { group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Un@@ k@@ no@@ w@@ n {@@ 0@@ }@@ /@@ , g@@ roup {@@ 2@@ /@@ {@@ 2@@ }@@ /@@ {@@ 2@@ ,@@ {@@ }@@ /@@ group@@ Id@@ : {@@ group@@ Id@@ : {@@ group@@ Id@@ : {@@ group@@ Id@@ : " + id@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); } }
private static com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ di@@ t to@@ Account@@ Group@@ Member@@ Au@@ dit@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p t@@ s, com.google.gerrit.reviewdb.client.Account.Id m@@ e) { return new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ d@@ it.@@ Key@@ (id@@ , group@@ Id, t@@ s@@ ), me@@ ); }
public void dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ .@@ Account.@@ Id@@ > remo@@ v@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Account@@ s@@ From@@ Group@@ (@@ actor@@ , remo@@ v@@ ed@@ Account@@ s, group@@ Id@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Un@@ able to lo@@ g de@@ le@@ te account@@ s f@@ ro@@ m g@@ roup ev@@ ent ", e); } }
@java.lang.Override public void on@@ Add@@ Sub@@ group@@ s(@@ com.google.gerrit.server.@@ au@@ dit@@ .group@@ .@@ Group@@ Sub@@ group@@ Au@@ dit@@ Event event) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ By@@ Id@@ Au@@ d@@ ().@@ insert@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Au@@ dit@@ List@@ en@@ er@@ .@@ to@@ Account@@ Group@@ By@@ Id@@ Au@@ dit@@ s(@@ event@@ )); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Sub@@ group@@ s@@ Event@@ ("@@ Cannot lo@@ g ad@@ d group@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user event@@ ", e); } }
private void remove@@ Sub@@ group@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ U@@ u@@ id@@ s, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> sub@@ s@@ To@@ Remo@@ v@@ e = sub@@ group@@ U@@ u@@ id@@ s.@@ st@@ ream@@ ().@@ map@@ (( sub@@ U@@ u@@ id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Key@@ (@@ parent@@ Group@@ Id, sub@@ U@@ u@@ id@@ )).@@ map@@ (@@ Account@@ Group@@ By@@ Id@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), sub@@ U@@ u@@ id@@ s, parent@@ Group@@ Id, remo@@ v@@ ed@@ On@@ ); } db.account@@ Group@@ By@@ Id@@ ().@@ delete@@ (@@ sub@@ s@@ To@@ Remo@@ ve@@ ); }
private static com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ to@@ Account@@ Group@@ By@@ Id@@ Au@@ d(@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ , com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.sql.@@ Tim@@ est@@ am@@ p t@@ s, com.google.gerrit.reviewdb.client.Account.Id m@@ e) { return new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ Au@@ d.@@ Key@@ (@@ group@@ Id, u@@ u@@ id@@ , t@@ s@@ ), me@@ ); }
private void add@@ Sub@@ group@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id parent@@ Group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > sub@@ U@@ u@@ id@@ s, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> new@@ Sub@@ group@@ s = sub@@ group@@ U@@ u@@ id@@ s.@@ st@@ ream@@ ().@@ map@@ (( sub@@ U@@ u@@ id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ parent@@ Group@@ Id, sub@@ U@@ u@@ id@@ )).@@ map@@ (@@ Account@@ Group@@ By@@ Id@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Add@@ Group@@ s@@ To@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), group@@ U@@ u@@ id@@ s, parent@@ Group@@ Id, add@@ ed@@ On@@ ); } db.account@@ Group@@ By@@ Id@@ ().@@ insert@@ (@@ new@@ Sub@@ group@@ s); }
@java.lang.Override public void on@@ Add@@ Member@@ s(@@ com.google.gerrit.server.@@ au@@ dit@@ .group@@ .@@ Group@@ Member@@ Au@@ dit@@ Event event) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ())) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Group@@ Au@@ dit@@ List@@ en@@ er.@@ to@@ Account@@ Group@@ Member@@ Au@@ dit@@ s(@@ event@@ )); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Member@@ s@@ Event@@ ("@@ Cannot lo@@ g ad@@ d account@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", event@@ , e); } }
private void remove@@ Group@@ Member@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ Id@@ s, java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > me@@ mber@@ s@@ To@@ Remo@@ v@@ e = account@@ Id@@ s.@@ st@@ ream@@ ().@@ map@@ (( account@@ Id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ )).@@ map@@ (@@ Account@@ Group@@ Member@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Delete@@ Account@@ s@@ From@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), account@@ Id@@ s, group@@ Id, remo@@ v@@ ed@@ On@@ ); } db.account@@ Group@@ Member@@ s().@@ delete@@ (@@ me@@ mber@@ s@@ To@@ Remo@@ ve@@ ); }
@java.lang.Override public void on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.@@ Account.@@ Id> add@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ Au@@ dit@@ > au@@ dit@@ In@@ sert@@ s = add@@ ed@@ Account@@ s.@@ st@@ ream@@ ().@@ map@@ (( t@@ ) -@@ > to@@ Account@@ Group@@ Member@@ Au@@ dit@@ (t@@ , group@@ Id, add@@ ed@@ On@@ , me@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = un@@ w@@ rap@@ Db@@ (s@@ chema@@ .@@ open@@ ()) { db.account@@ Group@@ Member@@ s@@ Au@@ dit@@ ().@@ insert@@ (@@ au@@ dit@@ In@@ sert@@ s); } catch (com.google.gwtorm.server.OrmException e) { log@@ Orm@@ Exception@@ For@@ Account@@ s("@@ Cannot lo@@ g ad@@ d account@@ s to g@@ roup ev@@ ent p@@ er@@ for@@ me@@ d b@@ y user@@ ", me@@ , add@@ ed@@ Account@@ s, group@@ Id, group@@ ); } }
public void dis@@ patch@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ .@@ Account.@@ Id@@ > add@@ ed@@ Account@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Account@@ s@@ To@@ Group@@ (@@ add@@ ed@@ Account@@ s, group@@ Id@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Un@@ able to lo@@ g ad@@ d account@@ s to g@@ roup ev@@ ent ", e); } }
private void add@@ Group@@ Member@@ s@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> new@@ Member@@ s, java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > new@@ Member@@ s = new@@ Member@@ Id@@ s.@@ st@@ ream@@ ().@@ map@@ (( account@@ Id@@ ) -@@ > new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ )).@@ map@@ (@@ Account@@ Group@@ Member@@ :@@ new@@ ).@@ collec@@ t(@@ to@@ I@@ mmutable@@ Set@@ ()); if ((@@ current@@ User@@ ) != null@@ ) { au@@ dit@@ Ser@@ vi@@ ce@@ .@@ dis@@ patch@@ Add@@ Account@@ Group@@ s@@ To@@ Group@@ (c@@ urrent@@ User@@ .getAccount@@ Id(), new@@ Member@@ s, group@@ Id, add@@ ed@@ On@@ ); } db.account@@ Group@@ Member@@ s().@@ insert@@ (@@ new@@ Member@@ s); }
public void dis@@ patch@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id actor@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ .@@ Account@@ Group.@@ UU@@ I@@ D@@ > remo@@ v@@ ed@@ Sub@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p remo@@ v@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Delete@@ Group@@ s@@ From@@ Group@@ (@@ group@@ actor@@ , remo@@ v@@ ed@@ Sub@@ group@@ s, group@@ Id@@ , remo@@ v@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Au@@ dit@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Cannot lo@@ g de@@ le@@ te group@@ s f@@ ro@@ m g@@ roup ev@@ ent ", e); } }
public void dis@@ patch@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Account.Id patchSet@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.@@ cli@@ ent@@ .@@ Account@@ Group.@@ UU@@ I@@ D@@ > add@@ ed@@ Sub@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ , java.sql.@@ Tim@@ est@@ am@@ p add@@ ed@@ On@@ ) { for (com.google.gerrit.server.@@ au@@ d@@ it.@@ Group@@ Member@@ Au@@ dit@@ List@@ en@@ er au@@ dit@@ List@@ en@@ er : group@@ Member@@ Au@@ dit@@ List@@ ener@@ s) { try { au@@ dit@@ List@@ en@@ er.@@ on@@ Add@@ Group@@ s@@ To@@ Group@@ (@@ group@@ s, group@@ Id@@ , add@@ ed@@ On@@ ); } catch (java.lang.@@ Run@@ time@@ Exception e) { com.google.gerrit.server.@@ au@@ d@@ it.@@ Ser@@ vi@@ ce@@ .@@ log.error@@ ("@@ Cannot lo@@ g ad@@ d group@@ s to g@@ roup ev@@ ent ", e); } }
private void log@@ Orm@@ Exception@@ For@@ Group@@ s(@@ java.lang.String head@@ er, com.google.gerrit.reviewdb.client.Account.Id me@@ , java.util.Collection<@@ com.google.gerrit.reviewdb.client.@@ Account group@@ Id@@ > u@@ id@@ s, com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ Id@@ s, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> des@@ cription@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account.Id id : group@@ s) { java.lang.String group@@ Name@@ ; com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion = group@@ Back@@ end@@ .get(@@ u@@ id@@ ).get@@ Name@@ (); java.lang.String t@@ arget@@ Group@@ Name = get@@ Group@@ Name(@@ group@@ Id); des@@ cription@@ s.add(@@ java.@@ t@@ ex@@ t.@@ Message@@ Format@@ .@@ for@@ m@@ at@@ ("@@ Update {@@ 0@@ }@@ /@@ {@@ 1@@ }@@ /@@ {@@ 2@@ }@@ /@@ group@@ 3@@ /@@ group@@ s/@@ {@@ 0@@ }@@ /@@ group@@ Name@@ ", t@@ arget@@ Group@@ Name@@ )); } log@@ Orm@@ Exception(@@ head@@ er, me@@ , des@@ cription@@ s, e); }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ Im@@ pl@@ (@@ com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > db@@ ) throw@@ s java.lang.Exception { try { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (@@ new@@ Change@@ Data@@ (db@@ .get(), project, id@@ )); return true@@ ; } } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Change@@ Exception e) { com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ E@@ rror w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing index@@ ing th@@ e change %@@ s", id@@ )); return false@@ ; } }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ Im@@ pl@@ (@@ com.google.inject.@@ Provider@@ <@@ com.google.gerrit.reviewdb.server.@@ Review@@ Db@@ > db@@ ) throw@@ s java.lang.Exception { try { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (@@ new@@ Change@@ Data@@ (db@@ .get(), project, id@@ )); return true@@ ; } } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Change@@ Exception n@@ s@@ ce@@ ) { com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ E@@ rror {@@ } w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing re@@ index@@ ing th@@ e change@@ . id@@ ", id@@ .get()); } catch (@@ java.lang.Exception e) { if (!(@@ is@@ C@@ au@@ sed@@ By@@ Repository@@ NotFound@@ Exception(@@ e@@ ))) { throw e@@ ; } com.google.gerrit.server.index.@@ change.Change@@ Index@@ er.@@ log.@@ de@@ bug@@ ("@@ Fai@@ le@@ d to de@@ le@@ ted@@ ", e); } }
@java.lang.Override public void on@@ Event@@ (com.google.gerrit.server.@@ events.@@ Event event) { if (!(@@ publi@@ sh@@ er@@ Th@@ read@@ .is@@ A@@ li@@ ve@@ ())) { publi@@ sh@@ er@@ Th@@ read@@ .@@ start@@ (); } if (!@@ (@@ qu@@ e@@ ue@@ .@@ o@@ ff@@ er@@ (@@ null@@ )) { if (!(@@ f@@ ull@@ Que@@ ue@@ )) { com.googlesource.gerrit.plugins.@@ r@@ ab@@ b@@ it@@ m@@ q@@ .@@ messag@@ e.@@ Message@@ LO@@ G@@ ER@@ .@@ error@@ ("@@ E@@ rror re@@ ce@@ i@@ v@@ e event@@ s, Que@@ u@@ e is f@@ ull@@ Que@@ u@@ e f@@ ull@@ Que@@ u@@ e = true@@ ; } else { if@@ f@@ ull@@ Que@@ u@@ e.@@ f@@ ull@@ Que@@ ue@@ (@@ f@@ ull@@ Name, false@@ ); } }
@java.lang.Override public java.util.Set<@@ com.google.gerrit.server.change.@@ Su@@ ggest@@ ed@@ Reviewer@@ > suggest@@ Reviewer@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String query@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> can@@ di@@ dat@@ es) { java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > s@@ ection@@ s = get@@ Section@@ s(@@ project@@ Name); if (!(@@ s@@ ection@@ s.@@ isEmpty())) { try (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db = schema@@ Factory.@@ open@@ ()) { com.google.gerrit.server.query.change.Change@@ Data change@@ Data = change@@ Data@@ Factory.create@@ (@@ review@@ Db@@ , project@@ Name, change@@ Id); java.util.@@ Set@@ <java.lang.String> reviewer@@ s = fin@@ d@@ Reviewer@@ s(@@ change@@ Data@@ ); if (!(@@ reviewer@@ s.@@ isEmpty())) { return to@@ Account@@ s(@@ review@@ Db@@ , reviewer@@ s, project@@ Name, null@@ ).@@ st@@ ream@@ ().@@ map@@ (( a@@ ) -@@ > suggest@@ ed@@ Reviewer@@ (@@ a@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception x@@ ) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s.@@ log.error@@ (@@ x@@ .get@@ Message@@ (), x@@ ); } } return new java.util.Hash@@ Set<@@ >(); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ Info> apply(@@ com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Group@@ Des@@ crip@@ tion.@@ In@@ tern@@ al g@@ roup = resource@@ .@@ as@@ In@@ ternal@@ Group@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ () { return get@@ T@@ ran@@ si@@ tive@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); } return get@@ Member@@ s(@@ group@@ , resource@@ .get@@ Control@@ ()); }
@java.lang.Override @@@ com.google.gerrit.common.@@ Null@@ able public synchronized <@@ T> java.util.List<@@ T> T get@@ (com.google.gerrit.server.@@ Pro@@ per@@ ty@@ Key@@ <@@ T> key@@ ) { if ((@@ pro@@ per@@ ti@@ es) != null@@ ) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ check@@ ed@@ ") T valu@@ e = ((@@ T@@ ) (@@ pro@@ per@@ ti@@ es@@ .get(@@ key@@ ))); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ valu@@ e); } return java.util.@@ Optional@@ .@@ empty@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ Account@@ s@@ In@@ Group@@ (java.lang.String group@@ Name@@ Or@@ UUID@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > g@@ roup = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ NameKey@@ (@@ group@@ Name@@ Or@@ E@@ l@@ se@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ group@@ Name@@ Or@@ ))); if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.warn@@ ("@@ Id@@ enti@@ c@@ ation {@@ } w@@ a@@ s not fo@@ un@@ d group@@ Name@@ Or@@ UUID@@ ); return java.util.Collections.@@ empty@@ Set@@ (); } try (com.google.gerrit.server.@@ util.@@ M@@ an@@ u@@ al@@ Request@@ Context ct@@ x@@ = one@@ O@@ ff@@ Request@@ Contex@@ t.@@ open@@ A@@ s(@@ admin@@ User@@ .getAccount@@ Id@@ ())) { return group@@ Member@@ s.@@ create@@ (@@ admin@@ User@@ ).@@ list@@ Account@@ s(@@ g@@ roup@@ .get@@ Group@@ UUID@@ (), null@@ ).@@ st@@ ream@@ ().@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception | com.google.gwtorm.server.OrmException e) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.error@@ (("@@ Un@@ able to li@@ s@@ t account@@ s in g@@ roup " + group@@ ), e); return java.util.Collections.@@ empty@@ Set@@ (); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Branch@@ Resource resource@@ , com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException, org.eclipse.jgit.@@ api.@@ errors.@@ Git@@ A@@ P@@ I@@ Exception, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ user@@ (id@@ ent@@ if@@ i@@ ed@@ User@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); com.googlesource@@ .gerrit.@@ plugins@@ .@@ super@@ ma@@ n@@ if@@ es@@ t.@@ Sup@@ er@@ M@@ an@@ if@@ est@@ Ref@@ Updated@@ List@@ en@@ er.@@ log.@@ info@@ ("@@ Account tri@@ gg@@ er for %@@ s@@ :@@ %@@ s", b@@ y %@@ d@@ Config@@ : %@@ s", resource@@ .get@@ Branch@@ Key@@ ().get@@ Parent@@ Key@@ (), resource@@ .get@@ Branch@@ ().get@@ (), id@@ ent@@ if@@ i@@ ed@@ User@@ .get@@ ().get@@ Account@@ Id@@ ().get@@ (), config@@ ur@@ ation@@ String@@ ()); update@@ (@@ resource@@ .getProject@@ State@@ ().get@@ Project@@ Name@@ (), resource@@ .getRef@@ Name@@ (), false@@ ); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> fin@@ d@@ Account@@ s@@ In@@ Group@@ (java.lang.String group@@ Name@@ Or@@ UUID@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group@@ > g@@ roup = java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ NameKey@@ (@@ group@@ Name@@ Or@@ E@@ l@@ se@@ (@@ group@@ Cache@@ .get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ .@@ UU@@ I@@ D@@ D@@ _@@ US@@ ER@@ S@@ , (@@ group@@ Name@@ Or@@ der@@ ))) { if (!(@@ group@@ .is@@ P@@ res@@ ent@@ ())) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s.@@ common.@@ Account@@ s@@ Impl.@@ log.warn@@ ("@@ Cannot ac@@ count {@@ }@@ ", w@@ a@@ s not fo@@ un@@ d group@@ Name@@ Or@@ UUID@@ ); return java.util.Collections.@@ empty@@ Set@@ (); } try { return group@@ Member@@ s.@@ list@@ Account@@ s(@@ g@@ roup@@ .get@@ Group@@ UUID@@ (), null@@ ).@@ st@@ ream@@ ().@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); } catch (@@ com.google.gerrit.common.@@ errors.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.@@ v@@ m@@ w@@ a@@ re@@ .gerrit.@@ owner@@ s@@ .@@ comm@@ on@@ Account@@ s.@@ log.error@@ (("@@ Fai@@ le@@ d to li@@ s@@ t account@@ s in g@@ roup " + group@@ ), e); return java.util.Collections.@@ empty@@ Set@@ (); } }
private java.util.Map<java.lang.String, java.lang.O@@ bject@@ > to@@ F@@ oo@@ ter@@ S@@ o@@ y@@ Data@@ (@@ com.google.gitiles.@@ P@@ ag@@ in@@ at@@ or p@@ ag@@ in@@ ator@@ , @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.String re@@ vi@@ sion@@ , com.google.gitiles.@@ Log@@ S@@ o@@ y@@ Dat@@ a.@@ F@@ oo@@ ter@@ Be@@ h@@ a@@ vi@@ h@@ a@@ vi@@ d@@ ) { switch (@@ be@@ h@@ a@@ vi@@ or@@ ) { case N@@ E@@ X@@ T : org.eclipse.jgit.lib.ObjectId ne@@ x@@ t = p@@ ag@@ in@@ ator@@ .get@@ N@@ ext@@ Start@@ (); if (@@ ne@@ x@@ t == null@@ ) { return com.google.common.collect.Immutable@@ Map.@@ of@@ (); } return com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ next@@ Url@@ ", copy@@ And@@ Can@@ on@@ ali@@ ze@@ (@@ revision@@ ).@@ replace@@ Par@@ am@@ (@@ Log@@ Servlet.@@ START@@ _@@ P@@ AR@@ AM@@ , ne@@ x@@ t.@@ name@@ ()).@@ to@@ Url@@ (), "@@ next@@ ", "@@ N@@ ext@@ "); case LO@@ G@@ _@@ HE@@ A@@ D : return com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ next@@ Url@@ ", com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ log@@ ().@@ copy@@ From@@ (@@ e@@ w@@ ).to@@ Url@@ (), "@@ next@@ ", "@@ default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (("@@ can@@ not be@@ h@@ a@@ vi@@ h@@ a@@ vi@@ h@@ a@@ vi@@ or@@ : " + (@@ be@@ or@@ )@@ ))); } }
@java.lang.Override public java.lang.String auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ Current@@ User user@@ , java.util.List<java.lang.String> arg@@ s) throw@@ s com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Failure@@ , com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { if ((@@ args.@@ size@@ ()) != 2@@ ) { throw new com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Failure@@ (1@@ , n@@ u@@ mb@@ er of arg@@ ument@@ s } try { java.@@ net.@@ UR@@ L ur@@ l = new java.@@ net.@@ URL@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ ); java.lang.String pat@@ h = url@@ .get@@ Path@@ (); java.lang.String project = arg@@ s.get(@@ 0); java.lang.String o@@ per@@ ation = arg@@ s.get(@@ 1); java.lang.String@@ Builder h@@ re@@ f = new java.lang.String@@ Builder@@ (@@ url@@ .get@@ Pro@@ to@@ co@@ l@@ ()).@@ append("@@ :@@ /@@ ").@@ append(@@ url@@ .get@@ Auth@@ ori@@ ty@@ ()).@@ append(@@ path@@ ).@@ append("@@ /@@ "); if ((@@ path@@ .@@ end@@ sWith@@ ("/@@ ") ? "@@ /@@ " : "@@ )).@@ append(@@ project@@ ).@@ append("@@ /@@ lf@@ s@@ /@@ lf@@ s@@ "); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ (user@@ Info@@ , project, o@@ per@@ ation@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Ex@@ p@@ i@@ ring@@ Ac@@ tion ac@@ tion ac@@ tion = new com.googlesource.gerrit.plugins.@@ lfs.@@ Ex@@ p@@ i@@ ring@@ Action@@ (@@ h@@ ref@@ .@@ toString@@ (), info@@ ); return g@@ son.@@ to@@ Json@@ (@@ action@@ ); } catch (@@ java.@@ net.@@ M@@ al@@ for@@ m@@ ed@@ URL@@ Exception e) { throw new com.google.gerrit.sshd.@@ Base@@ Comman@@ d.@@ Failure@@ (1@@ , ((@@ ("@@ Ser@@ ve@@ r config@@ ur@@ ation error@@ : " + "@@ : G@@ it L@@ F@@ S p@@ o@@ int UR@@ L f@@ ro@@ m can@@ on@@ ical@@ Web@@ Ur@@ l [@@ ") + (c@@ an@@ on@@ ical@@ Web@@ Url@@ )) + " f@@ ai@@ le@@ d@@ ")); } }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { final org.eclipse.jgit.revwalk.RevCommit commit = re@@ ce@@ ive@@ Ev@@ ent.@@ commit@@ ; final org.eclipse.jgit.lib.@@ Ab@@ b@@ re@@ vi@@ ated@@ Object@@ Id id = comm@@ it.@@ ab@@ b@@ re@@ vi@@ ate@@ (@@ 7@@ ); java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > message@@ s = new java.util.ArrayList<@@ >(); if ((@@ this@@ .@@ max@@ Sub@@ ject@@ L@@ en@@ gth@@ ) < (@@ commit@@ .get@@ Sh@@ ort@@ Message@@ ().@@ length@@ ())) { on@@ Line@@ T@@ oo@@ L@@ on@@ g@@ (id@@ , messag@@ es@@ , (("@@ sub@@ ject > (@@ this@@ .@@ max@@ Sub@@ ject@@ L@@ en@@ gth@@ )) + char@@ ac@@ ter@@ s; u@@ se short@@ er fi@@ r@@ s@@ t par@@ ag@@ rap@@ h } int long@@ Line@@ C@@ n@@ t = 0; int n@@ on@@ E@@ mpty@@ C@@ n@@ t = 0; for (java.lang.String lin@@ e : com.google.gwt.@@ thi@@ r@@ par@@ ty@@ .g@@ u@@ .@@ common.@@ base.@@ common.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ \n@@ '@@ ).@@ s@@ pli@@ t@@ (@@ commit@@ .get@@ F@@ ull@@ Message@@ ())) { if (!(@@ line@@ .@@ tri@@ m@@ ().@@ isEmpty())) { n@@ on@@ E@@ mpty@@ C@@ nt@@ ++@@ ; } if ((@@ this@@ .@@ max@@ Line@@ L@@ en@@ gth@@ ) < (@@ line@@ .@@ length@@ ())) { long@@ Line@@ C@@ nt@@ ++@@ ; } } if (@@ long@@ Line@@ C@@ n@@ t > ((@@ (@@ long@@ Lin@@ es@@ Th@@ res@@ h@@ ) * n@@ on@@ E@@ mpty@@ C@@ nt@@ ) / 1@@ 00@@ )) { on@@ Line@@ T@@ oo@@ L@@ on@@ g@@ (id@@ , messag@@ es@@ , (("@@ to@@ o m@@ an@@ y commit messag@@ e line@@ s long@@ s an " + (@@ this@@ .@@ max@@ Line@@ L@@ en@@ gth@@ )) + " char@@ ac@@ ter@@ s; m@@ an@@ u@@ ally w@@ ra@@ p lin@@ es@@ ")); } return messag@@ es@@ ; }
@java.lang.Override public final int parse@@ Argument@@ s(@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ sp@@ i.@@ Parameter@@ s par@@ am@@ s) throw@@ s org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception { final java.lang.String to@@ k@@ en = par@@ am@@ s.get@@ Parameter@@ (@@ 0); final java.util.List<java.lang.String> id@@ Lis@@ t = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ ,@@ '@@ ).@@ s@@ pli@@ t@@ (@@ to@@ k@@ en@@ ).@@ en@@ (); if ((@@ token@@ s.@@ size@@ ()) != 3@@ ) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , sh@@ o@@ ul@@ d b@@ e sp@@ e@@ c@@ if@@ i@@ ed a@@ s <@@ project@@ >@@ ,@@ branch@@ >@@ >@@ >@@ ,@@ <@@ change@@ -@@ id@@ > { final com.google.gerrit.reviewdb.client.Change.@@ Key k@@ ey = Change.@@ Key@@ .@@ parse@@ (@@ token@@ s@@ .getId@@ ().get@@ (@@ token@@ .get@@ ())); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ token@@ s@@ .get@@ (c@@ all@@ er@@ o@@ ul@@ d@@ Line@@ ()); final com.google.gerrit.reviewdb.client.@@ Branch.@@ Name@@ Key b@@ ran@@ ch = new com.google.gerrit.reviewdb.client.@@ Branch.@@ NameKey@@ (project@@ , token@@ s@@ .get@@ Branch@@ ()); for (com.google.gerrit.server.query.@@ change.Change@@ Data c@@ d : query@@ Provider@@ .get().@@ by@@ Branch@@ (@@ branch@@ , key@@ )) { set@@ ter.@@ add@@ Value@@ (c@@ d@@ .getId()); } } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , "@@ f@@ ai@@ le@@ d not vali@@ d "); } catch (com.google.gwtorm.server.OrmException e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , ("@@ f@@ fix@@ " + (@@ e.get@@ Message@@ ()))); } throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , (("@@ \"@@ " + token@@ ) + "@@ \@@ " not fo@@ und@@ ")); }
private static java.util.Map<java.lang.String, java.lang.String> get@@ Parameter@@ s(@@ javax.servlet.http.HttpServlet@@ Request req@@ ) { final java.util.Map<java.lang.String, java.lang.String> par@@ am@@ s = new java.util.Hash@@ Map@@ <@@ >(); for (java.lang.String pa@@ i@@ r : com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ com.google.gerrit.http@@ d@@ .g@@ it@@ we@@ b.@@ Git@@ web@@ Servlet.@@ Q@@ U@@ ER@@ Y_@@ S@@ P@@ LI@@ T_@@ AT@@ T@@ ER@@ N@@ ).@@ s@@ pli@@ t@@ (@@ req@@ .get@@ Query@@ String@@ ())) { final int e@@ q = pa@@ i@@ r.@@ index@@ Of(@@ '@@ =@@ '); if (@@ 0 < e@@ q@@ ) { java.lang.String name = pa@@ i@@ r.@@ substring@@ (@@ 0, e@@ q@@ ); java.lang.String valu@@ e = pa@@ i@@ r.@@ substring@@ ((@@ q + 1@@ )); name = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ de@@ code@@ (@@ name); valu@@ e = com.google.gerrit.extensions.restapi.@@ Ur@@ l.@@ de@@ code@@ (@@ valu@@ e); par@@ am@@ s.@@ put(@@ name, valu@@ e); } } return par@@ am@@ s; }
private void init@@ () { java.util.List<@@ org.apache.@@ comm@@ on@@ s.@@ lang.@@ String@@ > va@@ r@@ P@@ art@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ .@@ '@@ ).@@ s@@ pli@@ t@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ com.google.gerrit.acceptance.@@ api.@@ changes.@@ S@@ pli@@ t@@ (((@@ va@@ r@@ P@@ art@@ s@@ .@@ size@@ ()) != 2@@ ) { throw new java.lang.I@@ l@@ leg@@ al@@ Argument@@ Exception@@ ((@@ ("@@ '@@ " + (s@@ ection@@ And@@ Key@@ )) + "@@ ' exp@@ ected s@@ ec@@ tion.@@ k@@ ey for@@ ma@@ t } s@@ ec@@ tion = va@@ r@@ P@@ art@@ s.get(@@ 0@@ ).get@@ (); k@@ ey = va@@ r@@ P@@ art@@ s(@@ s@@ ); }
private java.lang.String get@@ PublicKey@@ P@@ art@@ (@@ int index@@ , java.lang.String default@@ Value@@ ) { java.lang.String s = get@@ Ssh@@ PublicKey@@ (); if ((@@ s != null@@ ) && ((@@ s.@@ length@@ ()) > 0@@ )) { java.util.List<@@ org.apache.@@ comm@@ on@@ s.@@ lang.@@ Strin@@ g.@@ is@@ (@@ par@@ t@@ s = com.google.common.collect.@@ List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ ("@@ , "@@ )).@@ size@@ (); if ((@@ par@@ t@@ s.@@ size@@ ()) > index@@ ) { return par@@ t@@ s@@ .get@@ (@@ in@@ de@@ x@@ ).@@ remove@@ (); } return default@@ Value@@ ; }
public static java.lang.String tri@@ m@@ Qu@@ o@@ t@@ ation@@ (java.lang.String comment@@ ) { java.util.@@ String@@ J@@ o@@ in@@ er = new java.util.@@ String@@ J@@ o@@ in@@ er@@ ("@@ \n@@ "); java.util.@@ util.@@ List<@@ java.lang.String> i = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ \n@@ '@@ ).@@ s@@ pli@@ t@@ (@@ comm@@ ent@@ ); for (@@ int i = 0; i < ((@@ lin@@ es@@ .@@ size@@ ()) - 2); i@@ ++@@ ) { j@@ .@@ add(@@ line@@ ); } java.lang.String last@@ Lin@@ e = line@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 1@@ )); if (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ Par@@ ser@@ Util.@@ contains@@ Qu@@ o@@ t@@ Pat@@ tern@@ (@@ last@@ Line@@ )) { if ((@@ lin@@ es@@ .@@ size@@ ()) > 1@@ ) { j@@ o@@ t@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 1@@ )); } } return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); } if ((@@ lin@@ es@@ ) > 1@@ ) { java.lang.String last@@ Line@@ s = (@@ line@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ )@@ ).get@@ (((@@ last@@ Line@@ ) - 2@@ )); if ((@@ last@@ Line@@ ) > (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ Par@@ ser@@ Util.@@ contains@@ Qu@@ o@@ t@@ Pat@@ tern@@ (@@ last@@ Lin@@ es@@ )) { return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); } if ((@@ lin@@ es.@@ size@@ ()) > 1@@ ) { return j@@ .@@ toString@@ ().@@ tri@@ m@@ (); } if ((@@ lin@@ es@@ ) > ((@@ lin@@ es.@@ size@@ ()) > 1@@ ) { j@@ o@@ t.@@ add(@@ line@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ )@@ ))); } else if ((@@ lin@@ es@@ ) > 1@@ ) { j@@ .@@ add(@@ line@@ .get@@ (((@@ lin@@ es.@@ size@@ ()) - 2@@ )@@ ).get@@ (); } } return j@@ .@@ add(@@ line@@ ); }
private void read@@ C@@ g@@ i@@ Header@@ s(@@ javax.servlet.http.HttpServlet@@ Response res@@ , java.io.@@ Input@@ Stream in@@ ) throw@@ s java.io.IOException { java.lang.String line@@ ; while (!@@ ((@@ lin@@ e = read@@ Line@@ (in@@ )).@@ isEmpty())) { if (@@ line@@ .@@ startsWith@@ ("@@ H@@ T@@ P@@ ")) { throw new java.io.IO@@ Exception@@ (("@@ Co@@ ul@@ d not sup@@ p@@ orted@@ : " + line@@ )); } final int se@@ p = line@@ .@@ index@@ Of(@@ '@@ :@@ '); if (@@ se@@ p < 0) { throw new java.io.IO@@ Exception@@ (("@@ Co@@ ul@@ d not in@@ vali@@ d head@@ er@@ : " + line@@ )); } final java.lang.String k@@ ey = line@@ .@@ substring@@ (@@ 0, se@@ ).@@ tri@@ m@@ (); final java.lang.String valu@@ e = line@@ .@@ substring@@ ((@@ se@@ p + 1@@ )).@@ tri@@ m@@ (); if ("@@ Lo@@ cation@@ "@@ .@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (key@@ )) { re@@ s.@@ send@@ Re@@ di@@ re@@ ct@@ (@@ valu@@ e); } else if ("@@ Status@@ "@@ .@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (key@@ )) { final java.util.List<java.lang.String> id@@ Lis@@ t = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); for (@@ int i = 0; i < (key@@ .@@ length@@ ()); i@@ ++@@ ) { java.lang.String re@@ s.set@@ Statu@@ s(@@ statu@@ s); } else { re@@ s.@@ add@@ Header@@ (key@@ , valu@@ e); } } }
private void configure@@ A@@ li@@ as@@ es@@ () { com.google.gerrit.sshd.@@ Command@@ Name g@@ erri@@ t = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ ("@@ gerrit@@ "); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.lang.String> e : ali@@ as@@ es.@@ en@@ try@@ Set@@ ()) { java.lang.String name = e.get@@ Key@@ (); java.lang.String name = "@@ java@@ s@@ h h h h h "; com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ com.google.gerrit.sshd.@@ Ssh@@ Module@@ .@@ AL@@ I@@ S_@@ S@@ P@@ LI@@ T_@@ AT@@ T@@ EN@@ ).@@ s@@ pli@@ t@@ (@@ e.get@@ Value@@ (), com.google.gerrit.sshd.@@ Command@@ Name cm@@ d = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ (@@ des@@ .get@@ ().get@@ ()); for (@@ int i = 1; i < (@@ dest@@ .@@ size@@ ()); i@@ ++@@ ) { cm@@ d = com.google.gerrit.sshd.@@ Command@@ s.@@ nam@@ ed@@ (cm@@ d@@ , t@@ .get(@@ i@@ )@@ ).get@@ (); } bind(@@ com.google.gerrit.sshd.@@ Command@@ s.@@ key@@ (@@ gerrit@@ , name@@ )).@@ to@@ Provider@@ (@@ new com.google.gerrit.sshd.@@ Command@@ Provider@@ (cm@@ d@@ )); } }
public static com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d de@@ code@@ (java.lang.String en@@ cod@@ ed@@ ) throw@@ s org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception { if (!(@@ en@@ cod@@ ed@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ AL@@ G@@ O@@ R@@ IT@@ H@@ M@@ _@@ P@@ RE@@ FI@@ X@@ ))) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ ("@@ P@@ asswor@@ d al@@ th@@ m } java.util.List<@@ org.apache.@@ comm@@ on@@ > fi@@ el@@ d@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ :@@ '@@ ).@@ s@@ pli@@ t@@ (@@ en@@ code@@ ); if ((@@ fi@@ el@@ d@@ s) != 4@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ (("@@ De@@ co@@ der@@ s fi@@ el@@ d@@ s for " + (@@ com.google.common.@@ p@@ ri@@ m@@ iti@@ v@@ es.@@ In@@ t@@ s@@ .@@ try@@ Par@@ se@@ (@@ fi@@ el@@ d@@ s@@ )@@ ))); } if ((@@ co@@ der@@ ) == null@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ (("@@ De@@ co@@ der@@ s par@@ se f@@ ai@@ le@@ d d@@ : " + (@@ co@@ der@@ s@@ t >@@ = 4@@ ) && (@@ co@@ s@@ t < 3@@ 2@@ ))) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ (("@@ Add@@ ing sh@@ o@@ ul@@ d b@@ e 4@@ .@@ 3@@ in@@ clu@@ si@@ ve@@ , g@@ o@@ t " + co@@ st@@ )); } byte@@ [] al@@ t = com.google.gerrit.server.account.@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ .@@ de@@ code@@ (@@ fi@@ el@@ d@@ .get@@ (@@ 2@@ )@@ ); if ((@@ s@@ t.@@ length@@ ) != 1@@ 6@@ ) { throw new org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ ((@@ ("@@ ) (@@ org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception@@ : " + (@@ byte@@ s, g@@ o@@ t.@@ length@@ ))); } return new com.google.gerrit.server.account.@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ ed@@ Hash@@ (@@ cod@@ ec@@ .@@ de@@ code@@ (@@ 3@@ , s@@ 3@@ ), al@@ , al@@ , al@@ ); }
@java.lang.Override public java.lang.O@@ bject re@@ index@@ () throw@@ s java.io.IOException { try { return re@@ index@@ St@@ a@@ le@@ (@@ 0); } catch (@@ java.util.@@ Exception | java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
private void re@@ index@@ After@@ Index@@ Update@@ (@@ final com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ id@@ ) { java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ > t@@ as@@ k = () -@@ > { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (@@ u@@ id@@ )) { index@@ (@@ u@@ id@@ ); return true@@ ; } return false@@ ; } }; }
@java.lang.Override public java.nio.file.@@ Pat@@ h re@@ index@@ After@@ () throw@@ s java.io.IOException { try { return re@@ index@@ After@@ (@@ f@@ ai@@ le@@ d@@ , u@@ id@@ ).get@@ (); } catch (@@ java.util.@@ En@@ um@@ Exception | java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception | java.lang.@@ In@@ ter@@ r@@ up@@ ted@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
@@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ de@@ pre@@ cation@@ ") public com.google.common.@@ util.@@ concurrent.@@ Check@@ ed@@ F@@ ut@@ ure@@ <@@ java.lang.@@ Boolean@@ , java.io.IO@@ Exception@@ > re@@ index@@ After@@ Index@@ St@@ a@@ le@@ Async@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ ) { java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ > t@@ as@@ k = () -@@ > { if (@@ st@@ a@@ len@@ ess@@ Check@@ er.@@ is@@ St@@ a@@ le@@ (id@@ )) { index@@ (id@@ ); return true@@ ; } return false@@ ; } }; return com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ ma@@ k@@ e@@ Check@@ ed@@ (@@ com.google.common.@@ util.@@ concurrent.@@ F@@ ut@@ ure@@ s.@@ n@@ on@@ C@@ ance@@ ll@@ Pro@@ p@@ ag@@ at@@ ing@@ (@@ b@@ atch@@ Execu@@ tor@@ .@@ submit@@ (t@@ ask@@ )), Index@@ Util@@ s.@@ M@@ A@@ P@@ ER@@ ); }
private com.google.inject.@@ Injec@@ tor create@@ Sy@@ s@@ Injector@@ (@@ int id@@ , com.google.gwt.user.client.rpc.@@ AsyncCallback<@@ java.lang.@@ Module@@ > c@@ b@@ ) { return db@@ Injector@@ .create@@ Ch@@ ild@@ Injector@@ (@@ new com.google.gerrit.extensions.@@ config.@@ Factory@@ Module@@ () { @java.lang.Override public void configure() { in@@ stall@@ (db@@ Injector@@ .get@@ Instance@@ (@@ com.google.gerrit.pgm.@@ util.@@ Batch@@ Pro@@ g@@ r@@ am@@ Module@@ .@@ class@@ )); bind(@@ com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ class@@ ).to@@ Instance@@ (@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ I@@ S@@ AB@@ L@@ ED@@ ); in@@ stall@@ (get@@ Index@@ Module@@ (@@ act@@ u@@ al@@ Th@@ read@@ s@@ )); factory(@@ Change@@ Resource@@ .@@ Factory@@ .@@ class@@ ); } }); }
@java.lang.Override public void configure() { in@@ stall@@ (db@@ Injector@@ .get@@ Instance@@ (@@ com.google.gerrit.pgm.@@ util.@@ Batch@@ Pro@@ g@@ r@@ am@@ Module@@ .@@ class@@ )); bind(@@ com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ class@@ ).to@@ Instance@@ (@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ I@@ S@@ AB@@ L@@ ED@@ ); in@@ stall@@ (get@@ Index@@ Module@@ ()); factory(@@ Change@@ Resource@@ .@@ Factory@@ .@@ class@@ ); }
private java.lang.@@ Mo@@ d@@ ul@@ e get@@ Index@@ Module@@ (@@ int id@@ , java.lang.String msg@@ ) { switch (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .get@@ Index@@ Type@@ (db@@ Injector@@ )) { case L@@ U@@ C@@ EN@@ E : return com.google.gerrit.@@ lucene.@@ L@@ u@@ cen@@ e@@ Index@@ Module@@ .@@ s@@ ingle@@ Version@@ With@@ Ex@@ plic@@ it@@ Version@@ s(@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (), act@@ u@@ al@@ Th@@ read@@ s@@ ); case E@@ L@@ A@@ ST@@ I@@ C@@ S@@ E@@ AR@@ C@@ H : return com.google.gerrit.@@ el@@ as@@ ti@@ c@@ search@@ .@@ E@@ las@@ ti@@ c@@ Index@@ Module@@ .@@ s@@ ingle@@ Version@@ With@@ Ex@@ plic@@ it@@ Version@@ s(@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (), act@@ u@@ al@@ Th@@ read@@ s@@ ); default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ un@@ sup@@ p@@ or@@ ted index.@@ typ@@ e } }
private java.util.Set<@@ com.google.gerrit.reviewdb.client.@@ Account@@ > to@@ Account@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , java.util.@@ Set@@ <java.lang.String> in@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ ) { return to@@ Account@@ s(@@ review@@ Db@@ , p@@ , null@@ ); }
@java.lang.Override protected java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > get@@ Ad@@ ver@@ ti@@ sed@@ Ref@@ s(@@ org.eclipse.jgit.lib.Repository repo@@ , org.eclipse.jgit.revwalk.RevWalk rev@@ Wal@@ k@@ ) throw@@ s org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception { try { return per@@ m.@@ filter@@ (repo@@ .getRef@@ Dat@@ abase@@ ().get@@ Ref@@ s(@@ Ref@@ Dat@@ ab@@ ase.@@ AL@@ L@@ ), repo@@ , t@@ s); } catch (@@ org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception e) { throw e@@ ; } } catch (java.io.IOException | com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception e@@ x = new org.eclipse.jgit.transport.@@ Ser@@ vi@@ ce@@ Ma@@ y@@ Not@@ Cont@@ inue@@ Exception@@ (); ex@@ .@@ init@@ C@@ au@@ se@@ (@@ e); throw ex@@ ; } }
public static com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s default@@ s() { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ ().@@ buil@@ der@@ ().set@@ Met@@ a@@ (@@ false@@ ).set@@ Tag@@ s@@ Se@@ par@@ ate@@ (@@ false@@ ).@@ bu@@ ild@@ (); }
@org.junit.Test public void validator@@ In@@ ac@@ tive@@ Wh@@ en@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ p@@ er@@ for@@ m@@ Validation@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ , com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void validator@@ In@@ va@@ ild@@ Not@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Validator@@ .is@@ Active@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Test.@@ list@@ ite@@ list@@ en@@ der@@ (); }
@org.junit.Test public void validator@@ In@@ ac@@ tive@@ Wh@@ ail@@ Not@@ List@@ ed@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Validator@@ list@@ ite@@ p@@ er@@ for@@ m@@ Validation@@ Validation@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Valid@@ List@@ ed@@ , com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Test.@@ email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ Get@@ Email@@ Wh@@ ite@@ list@@ () throw@@ s java.lang.Exception { }
private static java.util.List<java.lang.String> get@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ M@@ A@@ IL@@ _@@ D@@ O@@ M@@ A@@ IN@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ )); }
static boolean is@@ Active@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ E@@ M@@ A@@ IL@@ _@@ D@@ O@@ M@@ A@@ IN@@ _@@ W@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean p@@ er@@ for@@ m@@ Validation@@ (java.lang.String email@@ , java.util.List<java.lang.String> email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ ) { java.@@ net.@@ UR@@ I ur@@ i = null@@ ; try { ur@@ i = new java.@@ net.@@ URI@@ (@@ email@@ ); } catch (@@ java.@@ net.@@ URI@@ Sy@@ nt@@ a@@ x@@ Exception | java.lang.@@ Null@@ P@@ o@@ int@@ er@@ Exception e) { return false@@ ; } return email@@ Do@@ ma@@ in@@ Wh@@ ite@@ Wh@@ ite@@ m.@@ contains(@@ u@@ ri@@ .get@@ H@@ o@@ st@@ ()); }
@org.junit.Test public void validator@@ In@@ ac@@ tive@@ Wh@@ en@@ Config@@ E@@ mpty@@ () { assert@@ Th@@ at(@@ com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Do@@ ma@@ in@@ Wh@@ ite@@ list@@ Validator@@ .is@@ Active@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Test@@ Util@@ s.@@ E@@ M@@ P@@ T@@ Y_@@ P@@ L@@ U@@ G@@ IN@@ _@@ CON@@ FI@@ G@@ )).@@ is@@ F@@ alse@@ (); }
@@@ com.google.inject.@@ Provi@@ de@@ s @@@ com.google.inject.@@ S@@ ingle@@ t@@ on @@@ com.google.gerrit.server.index.@@ Index@@ Execu@@ tor@@ (@@ B@@ AT@@ CH@@ ) com.google.common.@@ util.@@ concurrent.@@ List@@ en@@ ing@@ Execu@@ tor@@ Ser@@ vi@@ ce get@@ Batch@@ Index@@ Execu@@ tor@@ (@@ @@@ com.google.gerrit.server.config.@@ Gerrit@@ Server@@ Config org.eclipse.jgit.lib.@@ Config config@@ , com.google.gerrit.server.git.@@ W@@ ork@@ Que@@ u@@ e w@@ ork@@ Que@@ ue@@ ) { if ((@@ b@@ atch@@ Execu@@ tor@@ ) != null@@ ) { return b@@ atch@@ Execu@@ tor@@ ; } int b@@ atch@@ Th@@ read@@ s = this@@ .@@ th@@ read@@ s(@@ b@@ atch@@ Th@@ read@@ s, 0) if ((@@ b@@ atch@@ Th@@ read@@ s <@@ = 0) b@@ atch@@ Th@@ read@@ s@@ In@@ t@@ ("@@ index@@ ", null@@ , "@@ b@@ atch@@ Th@@ read@@ s", 0); if (@@ b@@ atch@@ Th@@ read@@ s.@@ <@@ = 0) { b@@ atch@@ Th@@ read@@ s = java.lang.@@ Run@@ time@@ .get@@ Run@@ time@@ ().@@ avail@@ able@@ Pro@@ cess@@ or@@ s(); } return com.google.common.@@ util.@@ concurrent.@@ Mo@@ re@@ Execu@@ tor@@ s.@@ list@@ en@@ ing@@ De@@ cor@@ ator@@ (@@ w@@ ork@@ Que@@ u@@ e.@@ create@@ Que@@ ue@@ (@@ b@@ atch@@ Th@@ read@@ s, "@@ Index@@ -@@ Batch@@ ")); }
@org.junit.Test public void index@@ St@@ a@@ len@@ ess@@ I@@ s@@ Not@@ D@@ er@@ i@@ v@@ ed@@ From@@ Cache@@ St@@ a@@ len@@ es@@ s() throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D group@@ U@@ u@@ id = create@@ Group@@ ("@@ ve@@ r@@ if@@ i@@ er@@ s@@ "); group@@ Index@@ er.@@ index@@ (@@ group@@ U@@ u@@ id@@ ); update@@ Group@@ With@@ out@@ Or@@ Cache@@ (@@ group@@ U@@ u@@ id@@ , com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ Group@@ Index@@ er@@ IT@@ .@@ new@@ Group@@ Update@@ ().set@@ Description@@ ("@@ Mo@@ d@@ if@@ i@@ ed@@ ").@@ bu@@ ild@@ ()); re@@ load@@ Group@@ Cache@@ To@@ (@@ group@@ U@@ u@@ id@@ ); boolean re@@ index@@ ed = group@@ Index@@ er.@@ re@@ index@@ I@@ f@@ St@@ a@@ le@@ (@@ group@@ U@@ u@@ id@@ ); assert@@ With@@ Message@@ ("@@ Group sh@@ o@@ ul@@ d h@@ av@@ e be@@ en re@@ index@@ ed@@ ").@@ th@@ at(@@ re@@ index@@ ed@@ ).@@ is@@ True@@ (); }
@java.lang.Override public void start@@ () { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s@@ ched@@ ule@@ Config = cfg@@ .get@@ S@@ ched@@ ule@@ Config@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ d@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (r@@ un@@ ner@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } }
@java.lang.Override public void start@@ () { if (!(@@ sup@@ p@@ ort@@ Au@@ to@@ m@@ ati@@ c@@ Account@@ Ac@@ ti@@ v@@ it@@ y@@ Update@@ )) { return@@ ; } java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ d@@ > s@@ ched@@ ul@@ e = s@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (@@ ac@@ ti@@ v@@ ator@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ ()@@ .@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config create@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ config@@ , s@@ ection@@ , sub@@ s@@ ection@@ ).@@ bu@@ ild@@ (); }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ Builder buil@@ der@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ config@@ , s@@ ection@@ , null@@ ); }
@java.lang.Override public void start@@ () { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s@@ ched@@ ule@@ Config = g@@ c@@ Config@@ .get@@ S@@ ched@@ ule@@ Config@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ > s@@ ched@@ ul@@ e = s@@ ched@@ ule@@ Config.@@ s@@ ched@@ ule@@ (); if (s@@ ched@@ ule@@ .is@@ P@@ res@@ ent@@ ()) { @@@ java.lang.@@ Sup@@ p@@ ress@@ W@@ ar@@ n@@ ing@@ s("@@ un@@ us@@ ed@@ ") java.util.concurrent.@@ F@@ ut@@ ure@@ <?@@ > po@@ s@@ si@@ b@@ ly@@ I@@ g@@ no@@ red@@ E@@ rror = qu@@ e@@ ue@@ .get@@ Default@@ Que@@ ue@@ ().@@ s@@ ched@@ ule@@ At@@ Fi@@ x@@ ed@@ R@@ ate@@ (@@ g@@ c@@ ner@@ , s@@ ched@@ ule@@ .get().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), s@@ ched@@ ule@@ .get@@ ()@@ .@@ int@@ er@@ va@@ l@@ (), java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } }
public com.google.gerrit.server.config.@@ S@@ ched@@ ul@@ e s@@ ched@@ ule@@ d@@ () { if ((@@ s@@ ched@@ ul@@ e == null@@ ) { s@@ ched@@ ul@@ e = load@@ S@@ ched@@ ul@@ e@@ (); } return s@@ ched@@ ul@@ e@@ ; }
private static long int@@ er@@ va@@ l@@ (@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ In@@ ter@@ va@@ l@@ ) { try { com.google.gerrit.server.config.@@ Config@@ Util@@ .get@@ Time@@ Un@@ it@@ (r@@ c@@ , s@@ ection@@ , sub@@ s@@ ection@@ , key@@ In@@ ter@@ va@@ l@@ , com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ ; } }
public boolean s@@ ched@@ ule@@ d@@ () { if ((@@ s@@ ched@@ ule@@ ) == null@@ ) { return false@@ ; } return s@@ ched@@ ule@@ .get@@ S@@ ched@@ ule@@ d@@ (); }
private boolean is@@ Invalid@@ Or@@ M@@ is@@ s@@ ing@@ (@@ long int@@ er@@ va@@ l@@ , long in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ) { java.lang.String k@@ ey = (s@@ ection@@ ()) + ((@@ sub@@ s@@ ection@@ ()) != null ? "@@ .@@ " + (@@ sub@@ s@@ ection@@ ()) : "@@ "); if ((@@ int@@ er@@ va@@ l == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) && (in@@ iti@@ al@@ D@@ el@@ a@@ y == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ S@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ))) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.@@ info@@ ("@@ N@@ o s@@ ched@@ ul@@ e config@@ ur@@ ation for \"@@ {@@ }@@ .@@ ", key@@ ); return true@@ ; } if (@@ int@@ er@@ va@@ l == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ vali@@ d s@@ ched@@ ul@@ e config@@ ur@@ ation for \"@@ {@@ }@@ \@@ " is ig@@ no@@ red@@ . M@@ is@@ s@@ ing valu@@ e for \"@@ {@@ }@@ .@@ ", key@@ , k@@ ey + "@@ .@@ ") + (key@@ In@@ ter@@ va@@ l@@ ()))); return true@@ ; } if (in@@ iti@@ al@@ D@@ el@@ a@@ y == (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ com@@ p@@ le@@ te s@@ ched@@ ul@@ e config@@ ur@@ ation for \"@@ {@@ }@@ \"@@ ", ig@@ no@@ red@@ , is@@ M@@ is@@ s@@ ing valu@@ e for {@@ \"@@ ", key@@ , k@@ ey + "@@ .@@ ") + (key@@ Start@@ ()))); return true@@ ; } if ((@@ va@@ l <@@ = 0) && (in@@ iti@@ al@@ D@@ el@@ a@@ y < 0@@ )) { com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ log.error@@ ("@@ In@@ vali@@ d s@@ ched@@ ul@@ e config@@ ur@@ ation for {@@ }@@ \@@ " is no@@ red@@ ", key@@ ); return true@@ ; } return false@@ ; }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ h@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", "@@ 0@@ 1@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ Th@@ at(@@ s.@@ s@@ ched@@ ule@@ Config@@ ()).@@ is@@ F@@ res@@ ent@@ (); assert@@ Th@@ at(@@ s.@@ s@@ ched@@ ule@@ ().get@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ))); s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ der@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Key@@ Start@@ Key@@ ("@@ my@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ Th@@ at(@@ s.@@ s@@ ched@@ ule@@ d@@ ()).@@ isEmpty@@ (); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ h@@ "); c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", "@@ 0@@ 1@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ Key@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ Th@@ at(@@ s.get@@ In@@ ter@@ va@@ l@@ ()).@@ isEqualTo(@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ); assert@@ Th@@ at(@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ )); s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ der@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ my@@ In@@ ter@@ va@@ l@@ ").@@ set@@ Start@@ Key@@ ("@@ my@@ Start@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ ).@@ bu@@ ild@@ (); assert@@ Th@@ at@@ (@@ s.get@@ In@@ ter@@ va@@ l@@ ()).@@ isEqualTo(@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ Th@@ at@@ (@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ ())@@ .@@ isEqualTo@@ (@@ S@@ ched@@ ule@@ Config.@@ S@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ").@@ set@@ No@@ w@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ buil@@ der@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ", com.google.gerrit.server.config.@@ No@@ w@@ (@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ ()) { get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ h@@ "); c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", "@@ 0@@ 1@@ :@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ Key@@ In@@ ter@@ va@@ l@@ ("@@ i@@ ").@@ set@@ Start@@ Time@@ ("@@ s@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ild@@ (); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), s@@ ched@@ ule@@ d@@ (); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), s@@ ched@@ ule@@ d@@ ().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ()); s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ der@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ ").@@ set@@ In@@ ter@@ va@@ l@@ ("@@ my@@ ").@@ set@@ Start@@ Key@@ ("@@ my@@ Start@@ ").@@ set@@ No@@ w@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ (); assert@@ E@@ quals(@@ s@@ ched@@ ule@@ Config@@ (), va@@ l@@ Config.@@ S@@ ched@@ ule@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s@@ ched@@ ule@@ ().@@ s@@ ched@@ ule@@ d@@ (); al@@ D@@ el@@ a@@ y@@ (), S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s@@ ched@@ ule@@ ().@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
@org.junit.Test public void c@@ u@@ st@@ o@@ m@@ Key@@ s() { org.eclipse.jgit.lib.@@ Config r@@ c = new org.eclipse.jgit.lib.@@ Config@@ (); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ i@@ ", "@@ 1@@ h@@ "); r@@ c.@@ set@@ String@@ ("@@ a@@ ", "@@ b@@ ", "@@ s", "@@ 0@@ 1@@ 00@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ "); java.lang.String for@@ m@@ at@@ ("@@ %@@ s@@ ched@@ ule@@ ", "@@ class@@ "); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ NO@@ W@@ ); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ m@@ s(@@ 1, java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), In@@ ter@@ va@@ l@@ ()); assert@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ H@@ O@@ UR@@ S@@ ), java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ), "@@ b@@ a@@ y@@ s = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ der@@ Config.@@ buil@@ der@@ (r@@ c@@ , "@@ a@@ ", "@@ b@@ l@@ ", "@@ )).@@ in@@ Or@@ der@@ (); com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ W@@ E@@ quals(@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ W@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s.get@@ In@@ iti@@ al@@ D@@ S@@ ched@@ ule@@ G@@ _@@ CON@@ FI@@ G@@ _@@ CON@@ FI@@ G@@ ); assert@@ E@@ quals(@@ s.get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (), S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ); }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { long de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ; java.lang.String star@@ t = r@@ c.get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ Time@@ ); try { if (@@ star@@ t != null@@ ) { java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ ("@@ Pat@@ tern@@ ]@@ H@@ :@@ m@@ m java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Start@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w.@@ w@@ ith@@ (@@ fi@@ rst@@ Start@@ Time@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ Of@@ W@@ e@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ k@@ e@@ Of@@ W@@ e@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ k@@ e@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception ig@@ no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ tr@@ unc@@ tion@@ To@@ (@@ java.@@ ti@@ m@@ e.@@ M@@ al@@ or@@ .@@ Ch@@ ron@@ ron@@ ron@@ ron@@ ron@@ ron@@ ron@@ ron@@ Un@@ it.@@ M@@ IN@@ UT@@ ES@@ ); de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % int@@ er@@ va@@ l@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = int@@ er@@ va@@ l@@ ; } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ _@@ CON@@ FI@@ G@@ ; } return de@@ la@@ y@@ ; }
public long get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ () { if ((@@ in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ) == null@@ ) { load@@ (); } return in@@ iti@@ al@@ D@@ el@@ a@@ y@@ ; }
private static long in@@ iti@@ al@@ D@@ el@@ a@@ y(@@ java.lang.String start@@ Time@@ , java.lang.String int@@ er@@ va@@ l@@ ) { java.util.@@ Optional@@ <@@ com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ Config@@ Test.@@ config@@ (@@ start@@ Time@@ , int@@ er@@ va@@ l@@ ), "@@ s@@ ection@@ ", "@@ sub@@ s@@ ection@@ ").@@ set@@ No@@ w@@ (@@ S@@ ched@@ ule@@ Config@@ Test.@@ NO@@ W@@ ).@@ bu@@ ild@@ ().@@ s@@ ched@@ ule@@ Config@@ (); assert@@ Th@@ at(@@ s@@ ched@@ ule@@ ).@@ is@@ P@@ res@@ ent@@ (); return s@@ ched@@ ule@@ .get@@ ()@@ ).get@@ (); }
private static void do@@ Create@@ Table@@ (@@ java.sql.@@ State@@ ment st@@ m@@ t@@ ) throw@@ s java.sql.@@ SQL@@ Exception { st@@ m@@ t.@@ execute@@ Update@@ (("@@ C@@ RE@@ AT@@ E I@@ F NO@@ T E@@ X@@ I@@ ST@@ S account@@ _@@ patch@@ _@@ review@@ s " + ((@@ (("@@ C@@ RE@@ AT@@ E IN@@ T@@ E@@ G@@ E@@ R DE@@ F@@ A@@ U@@ L@@ T NO@@ T N@@ U@@ L@@ , " + IN@@ T@@ E@@ G@@ E@@ R DE@@ F@@ A@@ U@@ L@@ T NO@@ T N@@ U@@ L@@ , account@@ _@@ patch@@ _@@ set@@ _@@ id@@ , ("@@ NO@@ T N@@ U@@ L@@ , file@@ _@@ name@@ ) + "@@ )@@ "@@ )@@ "@@ )@@ "@@ ))); }
public com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, java.lang.String ref@@ Name, com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name, java.lang.String ref@@ Name); try { return new com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project@@ (@@ cfg@@ Factory@@ .getProject@@ Plugin@@ Config@@ With@@ In@@ herit@@ an@@ ce@@ ive@@ (project@@ Name, project@@ Name@@ )); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ ((@@ ("@@ Project@@ " + (project@@ Name@@ .g@@ e@@ t@@ s@@ ())) + " not fo@@ und@@ ")); } }
@java.lang.Override protected boolean on@@ S@@ ave@@ (@@ org.eclipse.jgit.lib.@@ Commit@@ Builder commit@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { if (@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ commit@@ .get@@ Message@@ ())) { comm@@ it.@@ set@@ Message@@ ("@@ reviewer@@ s config@@ ur@@ ation } save@@ Config@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config@@ .@@ For@@ Project@@ (change@@ .getProject@@ (), cfg@@ ); return true@@ ; }
java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > get@@ Reviewer@@ Filter@@ Section@@ s() { com.google.common.collect.Immutable@@ List.@@ Builder@@ <@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > b = com.google.common.collect.Immutable@@ List.@@ buil@@ der@@ (); for (java.lang.String f : cfg@@ .get@@ Sub@@ s@@ ection@@ s(@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ s@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ )) { b.@@ add@@ (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ f@@ )); } return b.@@ bu@@ ild@@ (); }
void remove@@ Reviewer@@ (java.lang.String filter@@ , java.lang.String reviewer@@ ) { if (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ ).get@@ Reviewer@@ s().@@ contains(@@ reviewer@@ )) { java.util.List<java.lang.String> value@@ s = new java.util.Array@@ List(@@ java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ Project.@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ REVI@@ EW@@ ER@@ ))); valu@@ es.@@ remove@@ (@@ reviewer@@ ); if (@@ valu@@ es.@@ isEmpty()) { cf@@ g.@@ un@@ set@@ Section@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ ); } else { cf@@ g.@@ set@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ For@@ Project.@@ REVI@@ EW@@ ER@@ , values@@ ); } }
private com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Sec@@ tion new@@ Reviewer@@ Filter@@ Section@@ (java.lang.String filter@@ ) { com.google.common.collect.Immutable@@ Set.@@ Builder@@ <java.lang.String> b = com.google.common.collect.Immutable@@ Set.@@ buil@@ der@@ (); for (java.lang.String review@@ er : cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ REVI@@ EW@@ ER@@ )) { b.@@ add(@@ reviewer@@ ); } return new com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ , b.@@ bu@@ ild@@ ()); }
@java.lang.Override protected void on@@ Load@@ () throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { cf@@ g = read@@ Config@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ For@@ Project.@@ F@@ IL@@ EN@@ AM@@ E@@ ); }
private java.util.List<@@ com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ Filter@@ Section@@ > get@@ Section@@ s(@@ com.google.gerrit.reviewdb.client.Project.NameKey project@@ Name) { try { return com.google.common.collect.Immutable@@ List.@@ of@@ (project@@ Name@@ ).get@@ Reviewer@@ Filter@@ Section@@ s(); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s.@@ log.error@@ ("@@ Reviewer@@ s@@ d to g@@ e@@ t con@@ fig for project {@@ } project@@ Name@@ ", project@@ Name@@ .get()); return com.google.common.collect.Immutable@@ List.@@ of@@ (); } }
void add@@ Reviewer@@ (java.lang.String filter@@ , java.lang.String reviewer@@ ) { if (!@@ (@@ new@@ Reviewer@@ Filter@@ Section@@ (@@ filter@@ ).get@@ Reviewer@@ s().@@ contains(@@ reviewer@@ ))) { java.util.List<java.lang.String> value@@ s = new java.util.Array@@ List(@@ java.util.Array@@ s.@@ as@@ List@@ (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ P@@ Reviewer@@ s@@ For@@ Project.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ REVI@@ EW@@ ER@@ ))); valu@@ es.@@ add(@@ reviewer@@ ); cf@@ g.@@ set@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ F@@ IL@@ T@@ ER@@ , filter@@ , com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Config.@@ REVI@@ EW@@ ER@@ , values@@ ); } }
@java.lang.Override public int compare@@ To@@ (@@ com.googlesource@@ .gerrit.@@ plugins@@ .@@ import@@ er.@@ Gerrit@@ Api.@@ Ver@@ sion o@@ ) { if (((@@ ma@@ j@@ or@@ ) == null@@ ) || ((@@ o.@@ ma@@ j@@ or@@ ) == null@@ )) { return -@@ 1; } if (@@ ma@@ j@@ or@@ .equals(@@ o.@@ ma@@ j@@ or@@ )) { if (@@ min@@ or@@ .equals(@@ o.@@ min@@ or@@ )) { if (@@ patch.@@ e@@ qual@@ s@@ (@@ o.@@ patch@@ )) { return 0; } if ((@@ o.@@ patch@@ ) == null@@ ) { return 1; } if ((@@ patch@@ ) == null@@ ) { return -@@ 1; } return (@@ patch@@ ) - (@@ o.@@ patch@@ ); } if ((@@ o.@@ min@@ or@@ ) == null@@ ) { return 1; } if ((@@ min@@ or@@ ) == null@@ ) { return -@@ 1; } return (@@ min@@ ) - (@@ o.@@ min@@ or@@ ); } return (@@ ma@@ j@@ or@@ ma@@ j@@ or@@ ) - (@@ ma@@ j@@ or@@ ); }
@org.junit.Test public void valid@@ Path@@ Se@@ par@@ ator@@ () { for (@@ char c : com.google.gerrit.server.config.@@ Git@@ web@@ Config@@ Test.@@ V@@ AL@@ ID@@ _@@ CH@@ AR@@ AC@@ T@@ ER@@ S@@ .@@ to@@ Char@@ Array@@ ()) { assert@@ Th@@ at(@@ config.@@ Git@@ web@@ Config.@@ is@@ Valid@@ Path@@ Se@@ par@@ ator@@ (c@@ ))@@ .is@@ True@@ (); } }
@org.junit.Test public void in@@ ali@@ d@@ Path@@ Se@@ par@@ ator@@ () { for (@@ char c : com.google.gerrit.server.config.@@ Git@@ web@@ Config@@ Test.@@ SO@@ M@@ E_@@ IN@@ V@@ AL@@ ID@@ _@@ CH@@ AR@@ AC@@ T@@ ER@@ S@@ .@@ to@@ Char@@ Array@@ ()) { assert@@ Th@@ at(@@ config.@@ Git@@ web@@ Config.@@ is@@ Valid@@ Path@@ Se@@ par@@ ator@@ (c@@ ))@@ .is@@ F@@ alse@@ (); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > get@@ Ref@@ s(@@ java.lang.String pre@@ fix@@ ) throw@@ s java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > ref@@ s = repo@@ ; try { ref@@ s = per@@ m@@ igration.@@ write@@ Changes@@ (); } catch (@@ org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.@@ Ref@@ > result = com.google.common.collect.@@ Map@@ s@@ .@@ new@@ Hash@@ Map@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (@@ refs.@@ size()); for (@@ org.eclipse.jgit.lib.@@ Re@@ f re@@ f : refs.@@ values@@ ()) { result.@@ put(@@ ref@@ .getName@@ ().@@ substring@@ (p@@ re@@ fi@@ x.@@ length@@ ()), ref@@ ); } return ref@@ s; }
@java.lang.Override public org.eclipse.jgit.lib.@@ Re@@ f ex@@ act@@ Ref@@ (java.lang.String name@@ ) throw@@ s java.io.IOException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = de@@ leg@@ ate.@@ ex@@ act@@ Ref@@ (@@ name); if (re@@ f == null@@ ) { return null@@ ; } try { return per@@ m@@ .get(@@ name); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
@java.lang.Override public org.eclipse.jgit.lib.@@ Re@@ f get@@ Ref@@ (java.lang.String name@@ ) throw@@ s java.io.IOException { org.eclipse.jgit.lib.@@ Re@@ f re@@ f = de@@ leg@@ ate@@ .getRef@@ (@@ name); if (re@@ f == null@@ ) { return null@@ ; } try { return per@@ m@@ .@@ filter@@ (@@ com.google.common.collect.Immutable@@ Map.@@ of@@ (ref@@ .getName@@ (), ref@@ ), git@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ Ref@@ Filter@@ Option@@ s@@ .@@ default@@ s@@ (), ref@@ .getName@@ ()); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { throw new java.io.IO@@ Exception(@@ e); } }
public static void load@@ S@@ ite@@ Li@@ b@@ (@@ java.nio.file.@@ Pat@@ h li@@ b@@ r@@ ) { try { java.util.List<@@ com.google.gerrit.common.@@ Change@@ Util.@@ n@@ umber@@ Ex@@ p@@ and@@ ing@@ s(@@ com.google.gerrit.common.@@ S@@ ite@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ list@@ J@@ ar@@ s(@@ li@@ b@@ r@@ ary@@ s); com.google.gerrit.common.@@ I@@ o@@ Util.@@ load@@ J@@ AR@@ s(@@ jar@@ s); com.google.gerrit.common.@@ S@@ ite@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ log.@@ info@@ ("@@ In@@ vali@@ d sit@@ e li@@ b@@ ra@@ ri@@ es@@ : {@@ }@@ ", com.google.gerrit.common.@@ changes.@@ Si@@ mp@@ le@@ Util.@@ fi@@ ll@@ (@@ jar@@ Path@@ , s@@ )); } catch (java.io.IOException e) { com.google.gerrit.common.@@ S@@ ite@@ Li@@ b@@ r@@ ary@@ Load@@ er@@ Util.@@ log.error@@ (("@@ Cannot s@@ can@@ n@@ ing li@@ b di@@ rec@@ tor@@ y " + li@@ b@@ r@@ ), e); } }
private static com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce account@@ Group@@ (com.google.gerrit.server.@@ account.@@ Account@@ State s) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ ; if (@@ s.get@@ User@@ Name@@ ().@@ is@@ P@@ res@@ ent@@ ()) { u@@ id = com.googlesource.gerrit.plugins.@@ s@@ ingle@@ user@@ .@@ group@@ S@@ ingle@@ User@@ Group.@@ u@@ u@@ id(@@ u@@ s.get@@ User@@ Name@@ ().get@@ ()); } else { u@@ id = com.googlesource.gerrit.plugins.@@ s@@ ingle@@ user@@ .@@ S@@ ingle@@ User@@ Group.@@ id(@@ u@@ s.get@@ Account@@ ().get@@ Id()); } return new com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ (@@ u@@ id@@ , com.googlesource.gerrit.plugins.@@ s@@ ingle@@ user@@ .@@ S@@ ingle@@ User@@ Group.@@ User@@ name@@ Of(@@ u@@ id@@ , s@@ )); }
private void warn@@ Error@@ (com.google.gerrit.server.@@ mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Messag@@ e message@@ , java.lang.String re@@ as@@ on@@ ) { try { com.google.gerrit.server.mail.@@ sen@@ d.@@ Error@@ E@@ mai@@ l e@@ mai@@ l = create@@ Email@@ Factory.create@@ (); e@@ m.@@ set@@ To@@ (@@ messag@@ e.@@ from@@ ()); e@@ m.@@ set@@ Re@@ ply@@ To@@ (@@ messag@@ e.@@ id@@ ()); m.@@ set@@ Re@@ as@@ on@@ (re@@ as@@ on@@ ); m.@@ send@@ (); } catch (@@ java.lang.Exception e) { com.google.gerrit.server.mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Pro@@ cess@@ or@@ .@@ log.error@@ ("@@ Cannot sen@@ d e@@ mai@@ l for err@@ c@@ ou@@ s email@@ ", e); throw new java.lang.@@ Error@@ (@@ e); } }
protected void init@@ () throw@@ s com.google.gerrit.common.@@ errors.@@ Email@@ Exception { set@@ up@@ S@@ o@@ y@@ Context@@ (); s@@ m@@ tp@@ From@@ Add@@ res@@ s = args.@@ from@@ Add@@ ress@@ Gener@@ ator@@ .@@ from@@ (@@ from@@ Id); set@@ Header@@ ("@@ Date@@ ", new java.util.@@ Date@@ ()); head@@ er@@ s.@@ put("@@ From@@ ", new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ (s@@ m@@ tp@@ From@@ Add@@ ress@@ )); head@@ er@@ s.@@ put@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ E@@ mail.@@ H@@ D@@ R@@ _@@ T@@ O@@ , new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ ()); head@@ er@@ s.@@ put@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ E@@ mail.@@ H@@ D@@ R@@ _@@ C@@ C@@ , new com.google.gerrit.server.mail.@@ sen@@ d.@@ Email@@ Head@@ er.@@ Add@@ ress@@ List@@ ()); set@@ Header@@ ("@@ Message@@ -@@ ID@@ ", "@@ "); set@@ Header@@ ("@@ Au@@ to@@ -@@ Submit@@ ted@@ ", "@@ au@@ to@@ -@@ Submit@@ ted@@ -@@ topic@@ "); for (@@ com.google.gerrit.extensions.api.changes.@@ Rec@@ ip@@ i@@ ent@@ Type rec@@ ip@@ i@@ ent@@ Type : account@@ s@@ To@@ No@@ t@@ if@@ y.@@ key@@ Set@@ ()) { add(@@ rec@@ ip@@ i@@ ent@@ Type@@ , account@@ s@@ To@@ No@@ t@@ if@@ y@@ .get(@@ rec@@ ip@@ i@@ ent@@ Type@@ )); } set@@ Header@@ ("@@ X@@ -@@ Gerrit@@ -@@ Message@@ Type@@ ", message@@ Class@@ ); text@@ Bo@@ d@@ y = new java.lang.String@@ Builder@@ (); htm@@ l@@ Bo@@ d@@ y = new java.lang.String@@ Builder@@ (); if (((@@ from@@ Id@@ ) != null@@ ) && (@@ args.@@ from@@ Add@@ ress@@ Gener@@ ator@@ .is@@ Gener@@ ic@@ Add@@ res@@ s(@@ from@@ Id@@ ))) { append@@ Text@@ (get@@ From@@ Line@@ ()); } }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ re@@ ce@@ ive@@ e@@ mail.@@ fil@@ ter.@@ mo@@ de@@ ", valu@@ e = "@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ") @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ re@@ ce@@ ive@@ e@@ mail.@@ fil@@ ter.@@ pat@@ tern@@ s", value@@ s = { "@@ .@@ +@@ @@@ gerrit@@ co@@ der@@ e@@ view@@ \@@ .@@ com@@ ", "@@ a@@ @@@ \@@ .@@ com@@ " }@@ ) public void list@@ Filter@@ Wh@@ ite@@ list@@ Filter@@ s@@ Not@@ List@@ ed@@ User@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change@@ Info = createChange@@ And@@ Re@@ ply@@ By@@ Email@@ (); java.util.Collection<@@ com.google.gerrit.extensions.common.@@ Change@@ Message@@ Info> message@@ s = gApi.changes().id(@@ change@@ Info.@@ id@@ ).get@@ ().@@ messag@@ es@@ ; assert@@ Th@@ at(@@ messag@@ es@@ ).@@ hasSize@@ (@@ 2); assert@@ Th@@ at(@@ sen@@ der@@ .get@@ Messag@@ es@@ ()).@@ hasSize@@ (@@ 0); }
@org.junit.Test public void send@@ No@@ t@@ if@@ ic@@ ation@@ On@@ M@@ is@@ s@@ ing@@ Met@@ ad@@ at@@ as@@ () throw@@ s java.lang.Exception { java.lang.String change@@ Id = createChange@@ With@@ Review@@ (); com.google.gerrit.extensions.common.@@ Change@@ Info change@@ Info = gApi.changes().id(@@ changeId@@ ).get@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Comment@@ Info> comment@@ s = gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ comment@@ s@@ As@@ List(); assert@@ Th@@ at(@@ comment@@ s).@@ hasSize@@ (@@ 2); java.lang.String t@@ s = "@@ null@@ "; java.lang.String t@@ x@@ t = new@@ P@@ l@@ a@@ int@@ ext@@ Bo@@ d@@ y@@ ((((@@ (c@@ an@@ on@@ ical@@ Web@@ Url@@ .get@@ ()) + "@@ #@@ /@@ c@@ /@@ ") + (change@@ Info.@@ _@@ n@@ umber@@ )) + "@@ /@@ 1@@ "), "@@ Test Message@@ ", null@@ , null@@ , null@@ ); com.google.gerrit.server.mail.@@ re@@ ce@@ i@@ v@@ e.@@ M@@ ail@@ Messag@@ e.@@ Builder b = message@@ Builder@@ With@@ Default@@ Fiel@@ d@@ s().@@ from@@ (user@@ .@@ email@@ Add@@ ress@@ ).@@ text@@ Content@@ ((@@ t@@ x@@ t + (t@@ ext@@ F@@ oo@@ ter@@ For@@ Change@@ (change@@ Info.@@ _@@ n@@ umber@@ , t@@ s@@ )@@ ))); send@@ er.@@ c@@ le@@ ar@@ (); mail@@ Pro@@ cess@@ or@@ .@@ pro@@ cess(@@ b.@@ bu@@ ild@@ ()); assert@@ No@@ t@@ if@@ y@@ To@@ (user@@ ); com.google.gerrit.@@ test@@ ing.@@ F@@ a@@ k@@ e@@ Email@@ S@@ end@@ er.@@ Messag@@ e messag@@ e = send@@ er.@@ next@@ Message@@ (); assert@@ Th@@ at(@@ messag@@ e.@@ bo@@ d@@ y@@ ()).@@ contain@@ s("@@ mis@@ s@@ ing requ@@ i@@ re@@ d met@@ ad@@ at@@ a@@ "); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { long de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ M@@ I@@ S@@ IN@@ G@@ _@@ CON@@ FI@@ G@@ ; java.lang.String star@@ t = r@@ c.get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ ); try { if (@@ star@@ t != null@@ ) { java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ Pat@@ tern@@ ("@@ ]@@ H@@ :@@ m@@ :@@ java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Start@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w@@ ith@@ (@@ fi@@ rst@@ Start@@ Time@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ k d@@ a@@ y@@ ; for@@ m@@ at@@ ter.@@ parse@@ (@@ start@@ , java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ d@@ a@@ y@@ Of@@ W@@ e@@ k@@ e@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Par@@ se@@ Exception ig@@ no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ tr@@ unc@@ tion@@ To@@ (@@ java.@@ ti@@ m@@ e.@@ or@@ .@@ Ch@@ ron@@ ron@@ ron@@ ron@@ ron@@ ron@@ Un@@ it.@@ M@@ IN@@ UT@@ ES@@ ); de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ b@@ et@@ we@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % int@@ er@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = int@@ er@@ va@@ l@@ ; } catch (@@ java.sql.@@ Tim@@ est@@ am@@ p.@@ time@@ Exception | java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { de@@ la@@ y = com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ _@@ CON@@ FI@@ G@@ ; } return de@@ la@@ y@@ ; }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ul@@ e create@@ Or@@ F@@ ail@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ Tim@@ e) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ S@@ ched@@ ule@@ .create@@ (@@ int@@ er@@ va@@ l@@ , start@@ Time@@ ).@@ or@@ E@@ l@@ se@@ (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception@@ :@@ new@@ ); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ int@@ er@@ va@@ l@@ , start@@ , com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ NO@@ W@@ ); }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ long int@@ er@@ va@@ l@@ , java.lang.String start@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w@@ ) { check@@ Not@@ Null@@ (@@ start@@ ); java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter for@@ m@@ at@@ ter = java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Format@@ ter.@@ of@@ ("@@ [@@ ]@@ H@@ H@@ :@@ mm@@ mm@@ ary@@ ").@@ w@@ ith@@ Lo@@ c@@ a@@ le@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e fi@@ rst@@ Start@@ Tim@@ e = java.@@ ti@@ m@@ e.@@ Lo@@ cal@@ Tim@@ e.@@ parse@@ (@@ start@@ , for@@ m@@ at@@ ter@@ ); java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e start@@ Tim@@ e = no@@ w@@ ith@@ (@@ fi@@ rst@@ Start@@ ); try { java.@@ ti@@ m@@ e.@@ D@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ k d@@ a@@ y@@ Of@@ W@@ e@@ Of@@ W@@ e@@ :@@ from@@ ); start@@ Tim@@ e = start@@ Tim@@ e.@@ w@@ ith@@ (@@ W@@ e@@ Of@@ W@@ e@@ k@@ ); } catch (@@ java.@@ time@@ .@@ for@@ ma@@ t.@@ Date@@ Time@@ Exception ig@@ no@@ red@@ ) { } start@@ Tim@@ e = start@@ Tim@@ e.@@ tr@@ unc@@ (@@ java.@@ ti@@ m@@ e.@@ te@@ mp@@ or@@ .@@ Ch@@ ron@@ ron@@ o@@ Un@@ it.@@ M@@ IN@@ UT@@ ES@@ ); long de@@ la@@ y = (@@ java.@@ ti@@ m@@ e.@@ D@@ ur@@ ation.@@ D@@ en@@ (@@ no@@ w, start@@ Time@@ M@@ il@@ li@@ s()) % (@@ int@@ er@@ va@@ l@@ ; if (@@ de@@ la@@ y <@@ = 0) { de@@ la@@ y +@@ = va@@ l@@ ; } return de@@ la@@ y@@ ; }
private static long com@@ pu@@ te@@ In@@ iti@@ al@@ D@@ el@@ a@@ y(@@ org.eclipse.jgit.lib.@@ Config r@@ c@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String key@@ Start@@ Time@@ , java.@@ ti@@ m@@ e.@@ Z@@ on@@ ed@@ Date@@ Tim@@ e no@@ w, long int@@ er@@ va@@ l@@ ) { java.lang.String star@@ t = r@@ c.get@@ String@@ (s@@ ection@@ , sub@@ s@@ ection@@ , key@@ Start@@ ); try { if (@@ star@@ t == null@@ ) { return co@@ m@@ .@@ p@@ oo@@ l@@ (); } return com.google.gerrit.server.config.@@ Config@@ Util@@ .get@@ In@@ iti@@ al@@ D@@ el@@ a@@ y@@ (@@ int@@ er@@ va@@ l@@ , start@@ , no@@ w@@ ); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e@@ 2@@ ) { return com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ IN@@ V@@ AL@@ ID@@ _@@ CON@@ FI@@ G@@ ); } }
public static com.google.gerrit.server.config.@@ S@@ ched@@ ule@@ Config.@@ Builder buil@@ der@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ ) { return new com.google.gerrit.server.config.@@ Au@@ to@@ Value@@ _S@@ ched@@ ule@@ Config.@@ Builder@@ ().set@@ No@@ w@@ (@@ config.@@ S@@ ched@@ ule@@ Config@@ .@@ con@@ fig = com.google.gerrit.server.config.@@ Config@@ Factory@@ ).set@@ Key@@ In@@ ter@@ va@@ l@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ K@@ E@@ Y_@@ IN@@ T@@ ER@@ V@@ AL@@ ).set@@ Start@@ Key@@ (com.google.gerrit.server.@@ config.@@ S@@ ched@@ ule@@ Config.@@ K@@ E@@ Y_@@ IN@@ T@@ I@@ M@@ E@@ ).set@@ Config@@ (@@ config@@ ).set@@ Section@@ (s@@ ection@@ ); }
private boolean can@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ m@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { switch (@@ per@@ m@@ ) { case AC@@ CES@@ S : return ((@@ !(@@ is@@ H@@ id@@ d@@ en@@ ())) && ((@@ user@@ .is@@ In@@ ternal@@ User@@ ()) || (c@@ an@@ P@@ er@@ for@@ m@@ On@@ An@@ y@@ Ref@@ (@@ Permission@@ .@@ RE@@ AD@@ )@@ ))) || (@@ is@@ Owner@@ ()); case RE@@ A@@ D : return (!(@@ is@@ H@@ id@@ d@@ en@@ ())) && (@@ all@@ Ref@@ s@@ A@@ re@@ Visible@@ (@@ java.util.Collections.@@ empty@@ Set@@ ())); case C@@ RE@@ AT@@ E_@@ RE@@ AT@@ E_@@ CHANG@@ E : return can@@ Create@@ Changes@@ (); case R@@ UN@@ _@@ RE@@ C@@ E@@ I@@ V@@ E_@@ AC@@ K : return can@@ Run@@ P@@ ack@@ (); case R@@ UN@@ _@@ P@@ LO@@ AD@@ _@@ AC@@ K : return can@@ Run@@ Up@@ load@@ P@@ ack@@ (); case P@@ US@@ H@@ _@@ A@@ ST@@ _@@ ON@@ E_@@ RE@@ FI@@ G : return can@@ Push@@ To@@ At@@ L@@ e@@ ast@@ One@@ Ref@@ (); case RE@@ AD@@ _@@ CON@@ FI@@ G : return control@@ For@@ Ref@@ (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ).@@ can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ RE@@ AD@@ ); case B@@ M@@ I@@ T : case RE@@ F@@ _@@ CO@@ M@@ I@@ T : case RE@@ AD@@ _@@ CON@@ FI@@ G : case W@@ R@@ IT@@ E : return is@@ Owner@@ (); } throw new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception@@ ((@@ per@@ m + " un@@ sup@@ p@@ or@@ ted sup@@ p@@ or@@ ted }
private void re@@ index@@ All@@ Group@@ s() throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.I@@ terable@@ <@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce@@ > all@@ Group@@ s = group@@ s.get@@ All@@ Group@@ Ref@@ eren@@ ces@@ (db@@ )@@ :@@ iter@@ ator@@ ; for (@@ com.google.gerrit.common.data.@@ Group@@ Ref@@ eren@@ ce g@@ roup : all@@ Group@@ s) { group@@ Cache.@@ on@@ Create@@ Group@@ (@@ group@@ .get@@ UUID@@ ()); } }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d@@ ) { if (@@ d@@ cm@@ d == null@@ ) { return w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ cm@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] tri@@ mm@@ ed@@ Arg@@ s@@ = d@@ cm@@ d@@ .get@@ T@@ ri@@ mm@@ ed@@ (); if ((@@ tri@@ mm@@ ed@@ Arg@@ s != null@@ ) && ((@@ tri@@ mm@@ ed@@ .@@ length@@ ()) > 0@@ )) { command@@ Name.@@ append("@@ .@@ ").@@ append(@@ tri@@ mm@@ ed@@ Arg@@ s@@ [@@ i@@ ]@@ ); } } return command@@ Name.@@ toString@@ (); }
private boolean can@@ For@@ ce@@ Update@@ () { if (c@@ an@@ Push@@ With@@ For@@ ce@@ ()) { return true@@ ; } switch (get@@ User@@ ().get@@ Access@@ Path@@ ()) { case G@@ I@@ T : return false@@ ; case J@@ S@@ ON@@ _@@ R@@ P@@ C : case RE@@ ST@@ _@@ A@@ P@@ I : case S@@ H@@ _@@ CO@@ M@@ M@@ AN@@ D : case UN@@ K@@ NO@@ W@@ E@@ B@@ _@@ B@@ RO@@ W@@ S@@ E@@ R : default : return ((@@ is@@ Owner@@ ()) && (!@@ (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ P@@ US@@ H@@ , true@@ )@@ ))) || (project@@ Contro@@ l.@@ is@@ Ad@@ min@@ ()); } }
private boolean can@@ Delete@@ () { if (@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ ref@@ Name@@ )) { return false@@ ; } switch (get@@ User@@ ().get@@ Access@@ Path@@ ()) { case G@@ I@@ T : return (c@@ an@@ Push@@ With@@ For@@ ce@@ ()) || (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ )); case J@@ S@@ ON@@ _@@ R@@ P@@ C : case RE@@ ST@@ _@@ A@@ P@@ I : case S@@ H@@ _@@ CO@@ M@@ M@@ AN@@ D : case UN@@ K@@ NO@@ W@@ E@@ B@@ _@@ B@@ RO@@ W@@ S@@ E@@ R : default : return (((@@ is@@ Owner@@ ()) || (c@@ an@@ Push@@ With@@ For@@ ce@@ ())) || (c@@ an@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ))) || (project@@ Contro@@ l.@@ is@@ Ad@@ min@@ ()); } }
private boolean can@@ P@@ er@@ for@@ m@@ (java.lang.String per@@ mission@@ Name, boolean is@@ Change@@ Owner@@ , boolean w@@ ith@@ For@@ ce@@ ) { for (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Collec@@ tion.@@ Block@@ Sec@@ tion s : re@@ le@@ v@@ ant@@ .get@@ Block@@ s(@@ per@@ mission@@ Name@@ )) { boolean b@@ lock@@ ed = false@@ ; for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : b@@ lock@@ s) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Change@@ Owner@@ )) { b@@ lock@@ ed = true@@ ; break@@ ; } } if (@@ b@@ lock@@ ed@@ ) { for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e r : p@@ ul@@ e : p@@ s.@@ o@@ verri@@ des@@ ) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Owner@@ )) { return (p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ AL@@ LO@@ W@@ ); } } } for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : re@@ le@@ v@@ ant@@ .get@@ Rule@@ s(@@ per@@ mission@@ Name@@ )) { if (project@@ Contro@@ l.@@ match@@ (p@@ r@@ , is@@ Change@@ Owner@@ )) { if ((@@ p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ Ac@@ tion.@@ D@@ EN@@ )) { return false@@ ; } } if (@@ w@@ ith@@ For@@ ce@@ ) { if (((@@ p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ AL@@ LO@@ W@@ )) && (p@@ r@@ .get@@ For@@ ce@@ ())) { return true@@ ; } } else if ((@@ p@@ r@@ .get@@ Action@@ ()) == (@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ .@@ AL@@ LO@@ W@@ )) { return true@@ ; } } } return false@@ ; }
boolean can@@ For@@ ce@@ Edit@@ To@@ pic@@ Name@@ () { return can@@ P@@ er@@ for@@ m@@ (@@ Permission@@ .@@ ED@@ I@@ T_@@ T@@ O@@ P@@ I@@ C_@@ NAM@@ E@@ ); }
public java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e get@@ Rule@@ s(@@ java.lang.String per@@ m@@ ) { return rule@@ s@@ By@@ Per@@ mis@@ sion != null ? per@@ m@@ s.get(@@ per@@ m.@@ id@@ ) : null@@ ; }
public java.util.List<@@ Permission@@ > get@@ Block@@ s(@@ java.lang.String per@@ ) { return b@@ lock@@ By@@ Per@@ mis@@ sion@@ ); }
public java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > get@@ Permission@@ (java.lang.String per@@ mission@@ Name) { java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > r = rule@@ s@@ By@@ Per@@ mis@@ sion@@ .get(@@ per@@ mission@@ Name); return r != null ? r : java.util.Collections.@@ <@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ >@@ empty@@ List(); }
private com.google.gerrit.common.data.@@ Permission@@ R@@ ang@@ e to@@ R@@ ange@@ (java.lang.String per@@ mission@@ Name, java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > rule@@ List@@ ) { return new com.google.gerrit.common.data.@@ Permission@@ R@@ ange@@ (@@ per@@ mission@@ Name, (@@ -@@ 1@@ )); }
static java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > fin@@ d@@ Access@@ Section@@ s(@@ java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > s@@ ection@@ s, java.lang.String per@@ m@@ Name) { java.util.List<@@ com.google.gerrit.common.data.@@ Permission@@ Rule@@ > r = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s : s@@ ection@@ s) { com.google.gerrit.common.data.@@ Per@@ mis@@ sion p = s.get@@ Permission@@ (@@ per@@ m@@ Name); if (@@ p == null@@ ) { continue@@ ; } for (@@ com.google.gerrit.common.data.@@ Permission@@ R@@ ul@@ e p@@ r : p@@ .get@@ Rule@@ s()) { r.@@ add(@@ p@@ r@@ ); } if (p@@ .get@@ Ex@@ clu@@ si@@ ve@@ Group@@ ()) { break@@ ; } } return r@@ ; }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y@@ .@@ W@@ O@@ R@@ K@@ IN@@ _@@ IN@@ _@@ P@@ RO@@ G@@ RE@@ S@@ ; if (@@ ui.@@ y@@ es@@ no@@ (@@ false@@ , d@@ raf@@ t change@@ s to@@ "); change@@ s = (@@ default (@@ w@@ ork@@ in@@ -@@ pro@@ g@@ ress@@ )@@ ? str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y@@ R@@ I@@ V@@ AT@@ E@@ ; } ui.@@ message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot d@@ raf@@ t change@@ s w@@ it@@ h %@@ .@@ ", change@@ s .@@ .@@ ", str@@ ateg@@ y.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ ())); try (@@ com.google.gwtorm.server.@@ State@@ ment@@ Execu@@ tor e = new@@ Execu@@ tor@@ (db@@ )) { java.lang.String co@@ lu@@ m@@ n = (@@ str@@ ateg@@ y == (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ AT@@ E@@ )) ? "@@ is@@ _@@ w@@ ork@@ : w@@ ork@@ _@@ in@@ _@@ pro@@ g@@ ress@@ "; e.@@ execute@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ S@@ E@@ T change@@ s = '@@ Y@@ '@@ , cre@@ ated@@ _@@ cre@@ ated@@ _@@ W@@ H@@ ER@@ E statu@@ s = '@@ W@@ H@@ ER@@ E statu@@ s = '@@ d@@ ' O@@ R + (@@ S@@ E@@ L@@ EC@@ T * F@@ RO@@ M patch@@ _@@ set@@ s W@@ H@@ ER@@ E change@@ _@@ id = changes.@@ change@@ _@@ id = patch@@ _@@ id s.@@ d@@ raf@@ t = '@@ Y@@ '@@ ) co@@ lu@@ m@@ n@@ '@@ s statu@@ s = '@@ , change@@ _@@ cre@@ ated@@ _@@ cre@@ ated@@ _@@ W@@ H@@ ER@@ E statu@@ s = '@@ " + "@@ ' cre@@ ated@@ ")); } ui.@@ message@@ (@@ "@@ do@@ ne@@ "); }
@java.lang.Override protected void m@@ ig@@ r@@ ate@@ Data@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.@@ schema.@@ Update@@ U@@ I ui@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ W@@ O@@ R@@ K@@ _@@ IN@@ _@@ P@@ RO@@ G@@ S@@ ; if (@@ ui.@@ y@@ es@@ no@@ (@@ false@@ , d@@ raf@@ t change@@ s to private change@@ (@@ default is w@@ ork@@ -@@ in@@ -@@ pro@@ g@@ ress@@ )@@ ? str@@ ateg@@ y = com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ AT@@ E@@ ; } ui.@@ message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot d@@ raf@@ t change@@ s w@@ it@@ h %@@ s", change@@ .@@ .@@ ", str@@ ateg@@ y.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ ())); try (@@ com.google.gwtorm.server.@@ State@@ ment@@ Execu@@ tor e = new@@ Execu@@ tor@@ (db@@ )) { java.lang.String co@@ lu@@ m@@ n = (@@ str@@ ateg@@ y == (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 5@@ 9@@ .@@ Draft@@ W@@ ork@@ f@@ low@@ M@@ ig@@ r@@ ation@@ Strateg@@ y.@@ P@@ R@@ I@@ V@@ AT@@ E@@ )) ? "@@ _@@ private@@ : w@@ ork@@ _@@ in@@ _@@ pro@@ g@@ ress@@ "; e.@@ execute@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ Change@@ s change@@ s " + ((((@@ ("@@ Y@@ %s (@@ %@@ s@@ )@@ " + " statu@@ s = '@@ n@@ '@@ t cre@@ ated@@ _@@ id@@ n@@ '@@ t cre@@ ated@@ _@@ on = cre@@ ated@@ _@@ statu@@ s = '@@ ") + statu@@ s = '@@ n@@ '@@ =@@ '@@ ") + (@@ statu@@ s = '@@ n@@ '@@ ") + (@@ statu@@ s@@ ' W@@ ork@@ In@@ Pro@@ cess@@ or@@ .@@ ") + "@@ W@@ _@@ patch@@ _@@ id = changes.@@ change@@ _@@ id ") + "@@ AN@@ D patch@@ _@@ id ") + "@@ AN@@ D patch@@ _@@ id = '@@ Y@@ '@@ ) + "@@ '@@ )@@ "; } ui.@@ message@@ (@@ "@@ do@@ ne@@ "); }
private java.lang.String ext@@ r@@ act@@ Wh@@ at(@@ com.google.gerrit.sshd.@@ Dis@@ patch@@ Comman@@ d d@@ cm@@ d@@ ) { if (@@ d@@ cm@@ d == null@@ ) { return w@@ a@@ s al@@ read@@ y dest@@ ro@@ y@@ ed } java.lang.String@@ Builder command@@ Name = new java.lang.String@@ Builder@@ (@@ d@@ cm@@ d@@ .get@@ Command@@ Name()); java.lang.String@@ [] tri@@ mm@@ ed@@ Arg@@ s@@ = d@@ cm@@ d@@ .get@@ T@@ ri@@ mm@@ ed@@ (); java.lang.String tri@@ mm@@ ed@@ Name = "@@ "; if ((@@ command@@ Name.@@ startsWith@@ ("@@ --@@ ")) && (!(@@ command@@ Name.@@ isEmpty@@ ()))) { command@@ Name.@@ append(@@ " "); command@@ Name.@@ append(@@ com.google.gerrit.sshd.@@ J@@ o@@ in@@ er.@@ on@@ (@@ "@@ )@@ .@@ "@@ )@@ ))); } return command@@ Name.@@ toString@@ (); }
public java.lang.String my@@ Url@@ () { return java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %s h@@ id@@ n@@ '@@ t not sup@@ p@@ orted@@ ", action@@ Id@@ )); }
@org.junit.Test public void test@@ H@@ e@@ al@@ th@@ Check@@ Enabled(@@ ) throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ B@@ oolean com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AL@@ T@@ H@@ _@@ CH@@ EC@@ K@@ _S@@ EC@@ T@@ IO@@ N@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ EN@@ AB@@ L@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (c@@ ur@@ ation@@ s@@ )@@ )).@@ is@@ F@@ alse@@ (); assert@@ Th@@ at@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (c@@ ur@@ ation.@@ HE@@ AD@@ )@@ )).@@ is@@ True@@ (); assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ HE@@ AD@@ AL@@ _@@ CH@@ EC@@ T@@ ION@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ AB@@ L@@ E_@@ K@@ E@@ Y@@ , true@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ h@@ al@@ th@@ Check@@ ().@@ enable@@ d@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ J@@ Group@@ s@@ S@@ kip@@ In@@ ter@@ fa@@ ce@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ j@@ group@@ s().@@ s@@ In@@ ter@@ fa@@ ce@@ ()).@@ isEqualTo(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ S@@ K@@ I@@ P@@ _@@ IN@@ T@@ ER@@ F@@ AC@@ E_@@ LI@@ ST@@ ); g@@ lobal@@ Plugin@@ Config@@ ur@@ ation.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ J@@ G@@ RO@@ U@@ P@@ S_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ K@@ I@@ P@@ _@@ IN@@ T@@ ER@@ F@@ AC@@ K@@ E@@ Y@@ , w@@ i@@ remo@@ c@@ k@@ "); com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ "@@ *@@ ", "@@ 0@@ ")); assert@@ Th@@ at@@ (((@@ get@@ Config@@ ur@@ ation@@ ()) + "@@ /@@ group@@ s@@ kip@@ In@@ ter@@ fa@@ ce@@ ()).@@ contains@@ All@@ Of@@ ("@@ *@@ ", "@@ et@@ h@@ 0@@ ").@@ in@@ Or@@ der@@ (); }
@org.junit.Test public void test@@ Get@@ J@@ Group@@ s@@ C@@ lu@@ st@@ er@@ () throw@@ s java.lang.Exception { g@@ lobal@@ Plugin@@ Config@@ ur@@ ation.@@ set@@ String@@ ("@@ g@@ erri@@ t P@@ RO@@ U@@ P@@ S_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ L@@ U@@ ST@@ ER@@ _@@ NAM@@ E_@@ K@@ E@@ Y@@ , "@@ foo@@ "); assert@@ Th@@ at@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (c@@ ur@@ ation@@ s@@ )@@ )).@@ isEqualTo@@ ("@@ foo@@ "); }
@org.junit.Test public void test@@ Get@@ Web@@ s@@ ession@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ B@@ oolean oolean oolean com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ W@@ E@@ B@@ S@@ ES@@ S@@ ION@@ _S@@ EC@@ T@@ IO@@ N@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at@@ (((@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ web@@ s@@ ession@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()) + "@@ )@@ )).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config@@ ur@@ ation.@@ set@@ String@@ (); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ W@@ E@@ B@@ S@@ ES@@ S@@ ION@@ _S@@ EC@@ T@@ IO@@ N@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ ); assert@@ Th@@ at@@ (((@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()) + "@@ \n@@ ") + "@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ Cache@@ Pat@@ tern@@ s() throw@@ s java.lang.Exception { g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ List(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ AT@@ T@@ ER@@ N@@ _@@ K@@ E@@ Y@@ , w@@ i@@ remo@@ c@@ k.@@ com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ *@@ ", "@@ other@@ "); com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er match@@ er = new com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er@@ (@@ Con@@ stant@@ s.@@ I@@ T_@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ ation.@@ ation.@@ P@@ AT@@ T@@ ER@@ N@@ _@@ K@@ E@@ Y@@ , "@@ remo@@ c@@ _@@ cach@@ e@@ _@@ my@@ _@@ cach@@ e@@ _@@ cach@@ e@@ _@@ cach@@ e@@ _@@ b@@ ", "@@ other@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ True@@ (); } for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ ld@@ ap@@ _@@ group@@ s@@ _@@ by@@ _@@ in@@ clu@@ de@@ ", "@@ foo@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ F@@ alse@@ (); } }
@org.junit.Test public void test@@ Get@@ Event@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ B@@ oolean com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ V@@ EN@@ T_@@ S@@ EC@@ T@@ IO@@ N@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ().@@ event@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ al@@ se@@ (); g@@ lobal@@ Plugin@@ Config@@ ur@@ ation.@@ set@@ Plugin@@ Config@@ ur@@ ation.@@ create@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ F@@ alse@@ (); com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ E@@ V@@ EN@@ T_@@ S@@ EC@@ T@@ IO@@ N@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at@@ (((@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()) + "@@ \n@@ ") + "@@ ))@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Get@@ Index@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ B@@ oolean com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ IO@@ N@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ IO@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ IO@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ EC@@ T@@ IO@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ "); assert@@ Th@@ at@@ (((@@ get@@ Config@@ ur@@ ation@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()) + "@@ \n@@ ") + "@@ ))@@ )@@ .get(@@ admin@@ .@@ re@@ load@@ Box@@ ))); assert@@ Th@@ at@@ (((@@ java.lang.I@@ terable@@ <?@@ >@@ ) (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ IN@@ DE@@ X@@ _S@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ )@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ Cache@@ Pat@@ tern@@ Match@@ er@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ config@@ ur@@ ation@@ Mo@@ c@@ k.@@ cach@@ e@@ ().@@ pat@@ tern@@ s@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ i@@ remo@@ c@@ k.@@ com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ ")); com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er match@@ er = new com.ericsson.gerrit.plugins.highavailability.@@ cache.@@ Cache@@ Pat@@ tern@@ Match@@ er@@ (@@ config@@ ur@@ ation@@ Mo@@ ck@@ ); for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ account@@ s@@ _@@ by@@ email@@ ", "@@ ld@@ ap@@ _@@ group@@ s", "@@ project@@ _@@ list@@ ", "@@ my@@ _@@ cach@@ e@@ _@@ cach@@ e@@ _@@ cach@@ e@@ _@@ cach@@ e@@ _@@ b@@ ", "@@ other@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ True@@ (); } for (java.lang.String cach@@ e : com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ ld@@ ap@@ _@@ group@@ s@@ _@@ by@@ _@@ in@@ clu@@ de@@ ", "@@ foo@@ ")) { assert@@ Th@@ at(@@ match@@ er.@@ match@@ es@@ (c@@ ach@@ e@@ )).@@ is@@ F@@ alse@@ (); } }
@org.junit.Test public void test@@ Get@@ Cache@@ Pat@@ tern@@ s() throw@@ s java.lang.Exception { g@@ lobal@@ Plugin@@ Config.@@ set@@ String@@ List(@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ ION@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ P@@ AT@@ T@@ ER@@ N@@ _@@ K@@ E@@ Y@@ , com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ ("@@ ^@@ my@@ _@@ cache.@@ *@@ ", "@@ other@@ ")); assert@@ Th@@ at(@@ t@@ a@@ (get@@ Config@@ ur@@ ation@@ ()).@@ contains@@ Ex@@ act@@ l@@ y(@@ project@@ Name, "@@ ^@@ my@@ _@@ *@@ "); }
@org.junit.Test public void test@@ Get@@ Cache@@ Sy@@ n@@ ch@@ ron@@ i@@ ze@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ True@@ (); g@@ lobal@@ Plugin@@ Config.@@ set@@ B@@ oolean com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ IO@@ N@@ S@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , false@@ ); assert@@ Th@@ at(@@ get@@ Config@@ ur@@ ation@@ ()).@@ is@@ F@@ al@@ se@@ (); g@@ lobal@@ Plugin@@ Config@@ ur@@ ation.@@ set@@ String@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ C@@ A@@ CH@@ E_@@ S@@ EC@@ T@@ IO@@ , null@@ , com.ericsson.gerrit.plugins.highavailability.@@ Config@@ ur@@ ation.@@ S@@ Y@@ N@@ CH@@ R@@ ON@@ I@@ Z@@ E_@@ K@@ E@@ Y@@ , "@@ in@@ valid@@ Boolean@@ ); assert@@ Th@@ at@@ (((@@ get@@ Config@@ ur@@ ation.@@ is@@ True@@ (); cach@@ e@@ ().@@ syn@@ ch@@ ron@@ i@@ ze@@ ()).@@ is@@ True@@ (); }
static boolean on@@ Time@@ (java.lang.String date@@ Tim@@ e) { return (@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ FO@@ R@@ M@@ AT@@ E_@@ AN@@ ON@@ .@@ no@@ w@@ ().@@ compare@@ To@@ (@@ date@@ Time@@ )) <@@ = 0; }
@org.junit.Test public void test@@ On@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (@@ for@@ m@@ at@@ ter@@ .@@ for@@ ma@@ t.@@ no@@ w@@ ()).@@ is@@ True@@ (); }
public java.lang.String for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t in@@ stant@@ ) { return for@@ m@@ at@@ .@@ for@@ m@@ at(@@ in@@ stant@@ ); }
public java.lang.String no@@ w@@ () { return get@@ In@@ t@@ ("@@ Add@@ ress@@ ", se@@ con@@ d@@ s@@ To@@ Add@@ ) + " an@@ t.@@ no@@ w@@ ().@@ p@@ lu@@ s@@ Se@@ con@@ d@@ s(@@ con@@ d@@ s@@ To@@ Add@@ )); }
public java.lang.String no@@ w@@ () { return for@@ m@@ at@@ .@@ for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ ()); }
@org.junit.Test public void for@@ m@@ at@@ With@@ Default@@ Time@@ z@@ one@@ () throw@@ s java.lang.Exception { org.@@ j@@ o@@ d@@ a.@@ ti@@ m@@ e.@@ Date@@ Tim@@ e no@@ w = org.@@ j@@ o@@ d@@ a.@@ ti@@ m@@ e.@@ Date@@ Tim@@ e.@@ no@@ w@@ (); java.lang.String j@@ o@@ d@@ a@@ For@@ ma@@ t = org.@@ j@@ o@@ d@@ a.@@ time@@ .@@ for@@ ma@@ t.@@ I@@ S@@ Time@@ For@@ ma@@ t.@@ date@@ Time@@ For@@ ma@@ t.@@ date@@ Time@@ ().@@ p@@ r@@ int@@ (@@ no@@ w@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Date@@ Tim@@ e for@@ m@@ at@@ ter = com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Date@@ Tim@@ e.@@ instance@@ (); java.lang.String java@@ s@@ For@@ ma@@ t = for@@ m@@ at@@ ter@@ .@@ for@@ m@@ at(@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ of@@ E@@ po@@ ch@@ il@@ li@@ s@@ ())); assert@@ Th@@ at(@@ java.@@ ti@@ m@@ e.@@ Z@@ Format@@ ).@@ isEqualTo(@@ j@@ o@@ d@@ a@@ Format@@ ); }
static java.lang.String time@@ out@@ (@@ int exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s) { return com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ .@@ FO@@ R@@ M@@ A@@ T@@ .@@ no@@ w@@ ().@@ exp@@ i@@ r@@ ation@@ Se@@ con@@ d@@ s); }
@org.junit.Test public void test@@ Ex@@ p@@ i@@ red@@ Time@@ () throw@@ s java.lang.Exception { assert@@ Th@@ at(@@ V@@ er@@ if@@ i@@ er.@@ on@@ Time@@ (((@@ for@@ m@@ at@@ ter@@ .@@ for@@ m@@ at@@ ter@@ .@@ class@@ ) (@@ no@@ w@@ ())); }
@java.lang.Override public void do@@ Filter@@ (@@ javax.servlet.@@ Servlet@@ Request requ@@ est@@ , javax.servlet.@@ Servlet@@ Response res@@ pon@@ se@@ , javax.servlet.@@ Filter@@ Ch@@ ai@@ n ch@@ ain@@ ) throw@@ s java.io.IOException, javax.servlet.@@ Servlet@@ Exception { if ((@@ requ@@ est instanceof javax.servlet.http.HttpServlet@@ Request@@ ) && (@@ res@@ pon@@ se instanceof javax.servlet.http.HttpServlet@@ Respon@@ se@@ )) { java.lang.String met@@ ho@@ d = ((@@ javax.servlet.http.HttpServlet@@ Request@@ ) (re@@ qu@@ est@@ )@@ ).get@@ Met@@ ho@@ d@@ (); if (((@@ met@@ ho@@ d == "@@ P@@ O@@ ST@@ ") || (@@ met@@ ho@@ d == "@@ P@@ UT@@ ")) || (@@ met@@ ho@@ d == "@@ DE@@ LE@@ T@@ E@@ ")) { ((@@ javax.servlet.http.HttpServlet@@ Respon@@ se@@ ) (@@ res@@ pon@@ se@@ )).@@ send@@ Error@@ (com.googlesource.gerrit.plugins.@@ re@@ do@@ n@@ n@@ y.@@ SC_@@ S@@ ER@@ VI@@ C@@ E_@@ A@@ V@@ A@@ IL@@ AB@@ L@@ E, this@@ .@@ messag@@ e); return@@ ; } ch@@ ain@@ .@@ do@@ Filter@@ (re@@ qu@@ est@@ , res@@ pon@@ se@@ ); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Message@@ > on@@ Commit@@ Rece@@ i@@ v@@ ed@@ (com.google.gerrit.server.@@ events.@@ Commit@@ Rece@@ i@@ v@@ ed@@ Event re@@ ce@@ ive@@ Event@@ ) throw@@ s com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception { throw new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ Exception("@@ contain@@ s messag@@ e commit@@ "); }
@java.lang.Override public java.lang.String toString@@ () { return name@@ ().to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); }
@org.junit.@@ Af@@ ter public void st@@ ar@@ Down@@ () throw@@ s java.lang.Exception { st@@ a@@ t.@@ execute@@ (("@@ T@@ AB@@ L@@ E " + (@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Table.@@ T@@ AB@@ L@@ E_@@ NAM@@ E@@ ))); st@@ ore@@ .@@ st@@ op@@ (); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ Patch@@ Set@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ Patch@@ Set@@ ); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ Merge@@ Update@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ No@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ Merge@@ Update@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ No@@ Code@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ C@@ OD@@ E_@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ No@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
public boolean get@@ I@@ g@@ no@@ re@@ base@@ E@@ mpty@@ PatchSet@@ () { return ig@@ no@@ re@@ Re@@ base@@ PatchSet@@ E@@ mpty@@ ; }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ T@@ ri@@ vi@@ al@@ Re@@ base@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ , boolean publi@@ sh@@ On@@ PatchSet@@ Create@@ d@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ Patch@@ Set@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAM@@ E@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ patch@@ -@@ set@@ -@@ cre@@ ated@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ empty@@ -@@ patch@@ -@@ set@@ -@@ ur@@ n@@ (@@ ig@@ no@@ re@@ base@@ PatchSet@@ Cre@@ ated@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); }
@org.junit.Test public void do@@ es@@ Not@@ Publish@@ Wh@@ en@@ No@@ Code@@ Change@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ C@@ OD@@ E_@@ CHANG@@ E@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ false@@ )); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ Re@@ w@@ ork@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Ev@@ ent.@@ patch@@ Set = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ At@@ tr@@ ); mo@@ ck@@ At@@ tr@@ .@@ in@@ d = com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ RE@@ W@@ O@@ R@@ K@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !(@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ PatchSet@@ Cre@@ ated@@ ()))) { return false@@ ; } try { com.google.gerrit.server.@@ data.@@ PatchSet@@ Attri@@ but@@ e patchSet@@ ; patch@@ Set = event.@@ patchSet@@ .get@@ (); if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ()) && ((@@ (((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ )) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ C@@ OD@@ E_@@ CHANG@@ E@@ ))) || ((@@ patch@@ Set.@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ )@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Cannot check@@ ing p@@ atch se@@ t in@@ ", e); } boolean result@@ ; result = true@@ ; try { java.util.@@ reg@@ ex@@ .@@ Pat@@ ter@@ n pat@@ ter@@ n = java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (@@ config@@ .get@@ I@@ g@@ no@@ re@@ (), java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ D@@ O@@ T@@ AL@@ L@@ ); java.util.@@ reg@@ ex@@ .@@ Match@@ er match@@ er@@ ; match@@ er = pat@@ tern@@ .@@ match@@ er@@ (@@ event.@@ change@@ .get().@@ commit@@ Message@@ ); result = !(@@ match@@ er.@@ match@@ es@@ ()); } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Cannot c@@ if@@ i@@ ed ig@@ n@@ or@@ e w@@ a@@ s in@@ vali@@ d change@@ ", e); } return result@@ ; }
private void pro@@ cess(@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ O@@ per@@ ation o@@ per@@ ation@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); java.lang.String pat@@ h = req@@ .get@@ Path@@ Info@@ (); T id = parse@@ (p@@ ath@@ .@@ substring@@ (((@@ path@@ .@@ last@@ Index@@ Of(@@ '@@ /@@ '@@ )) + 1@@ ))); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ {@@ } o@@ per@@ ation.@@ name@@ ().to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ), type@@ , id@@ ); try { com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.set@@ For@@ war@@ ded@@ Event@@ (@@ true@@ ); java.util.concurrent.@@ at@@ o@@ m@@ i@@ c.@@ A@@ to@@ m@@ ic@@ Integ@@ er id@@ Lo@@ c@@ k = get@@ And@@ In@@ cre@@ ment@@ Id@@ Lo@@ ck@@ (id@@ ); synchronized@@ (@@ this@@ ) { index@@ (id@@ , o@@ per@@ ation@@ ); } if ((@@ id@@ Lo@@ c@@ k.@@ re@@ ment@@ And@@ Get@@ ()) == 0) { remove@@ Id@@ Lo@@ ck@@ (id@@ ); } r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ CON@@ F@@ LI@@ C@@ T@@ , e.get@@ Message()); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ error@@ ("@@ Un@@ able to updat@@ e {@@ } in@@ de@@ x type@@ ", e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to fin@@ d to fin@@ d to fin@@ d to fin@@ d to fin@@ d sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ FO@@ UN@@ D@@ , msg@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ (@@ msg@@ , e); } final@@ l@@ y { com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ For@@ war@@ ded@@ Event@@ (); } set@@ For@@ war@@ ded@@ Event@@ (); }
public static com.google.inject.@@ Ab@@ str@@ act@@ Mo@@ d@@ ul@@ e module@@ () { return new com.google.inject.@@ Ab@@ str@@ act@@ Module@@ () { @java.lang.Override public void configure() { com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ List@@ ener@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ class@@ ); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ O@@ R@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ M@@ A@@ ST@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Auth@@ or l list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ A@@ Y@@ , null@@ , "@@ Wh@@ ite@@ t of auth@@ or e@@ mai@@ l add@@ ress@@ es@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ ")); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ Email@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ W@@ IL@@ IT@@ H@@ IT@@ E@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Commit@@ ter t@@ t@@ t@@ es@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ A@@ Y@@ , null@@ , false@@ , "@@ Wh@@ ite@@ l commit@@ ter of commit@@ ter p@@ e@@ mai@@ l add@@ ress@@ "); w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); } }; }
@java.lang.Override protected void configure() { in@@ stall@@ (@@ new com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Pat@@ tern@@ Cache@@ Module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Content@@ Type@@ Util.@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ F@@ oo@@ ter@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Ma@@ x@@ Path@@ L@@ en@@ gth@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ File@@ Ex@@ t@@ en@@ sion@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Set.@@ list@@ Vali@@ dat@@ or@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Invalid@@ File@@ name@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Sub@@ module@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Sy@@ m@@ link@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Block@@ ed@@ Key@@ w@@ or@@ d@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Invalid@@ Line@@ En@@ d@@ ing@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Content@@ Type@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ D@@ up@@ li@@ cate@@ Path@@ name@@ Validator@@ .@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Validator@@ Config.@@ module@@ ()); in@@ stall@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Config@@ Factory@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Plugin@@ Config@@ With@@ In@@ herit@@ ance@@ Factory@@ .@@ class@@ ).@@ in@@ (@@ S@@ cop@@ es.@@ S@@ IN@@ G@@ LE@@ T@@ ON@@ ); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean is@@ Commit@@ ter@@ Active@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean p@@ er@@ for@@ m@@ Validation@@ (java.lang.String email@@ , java.lang.String@@ [] email@@ Wh@@ ite@@ list@@ ) { return java.util.Array@@ s.@@ st@@ ream@@ (@@ email@@ Wh@@ ite@@ list@@ ).@@ an@@ y@@ Match@@ (( s) -@@ > java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ match@@ es(@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ email@@ ))); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.lang.String@@ [] get@@ Author@@ Email@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ O@@ R@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ); }
@java.lang.Override public void configure() { com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validation@@ List@@ ener@@ .@@ class@@ ).to@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ class@@ ); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ O@@ R@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Auth@@ or E@@ mai@@ l list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ Y@@ , null@@ , false@@ , "@@ Wh@@ ite@@ li@@ s@@ t of auth@@ or e@@ mai@@ l add@@ res@@ se@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ .@@ ")); bind(@@ com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Ex@@ p@@ ort@@ s.@@ nam@@ ed@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Email@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ IT@@ T@@ ER@@ _@@ W@@ IL@@ LI@@ ST@@ )).@@ to@@ Instance@@ (@@ new com.google.gerrit.server.config.@@ Project@@ Config@@ E@@ n@@ try@@ ("@@ Commit@@ t@@ t@@ ter E@@ mai@@ l list@@ ", null@@ , com.google.gerrit.extensions.api.@@ projects.@@ Project@@ Config@@ E@@ n@@ try@@ Type.@@ AR@@ R@@ A@@ Y@@ , null@@ , "@@ Wh@@ ite@@ m li@@ s@@ t of commit@@ ter add@@ s th@@ a@@ t w@@ il@@ l b@@ e per@@ mit@@ ted@@ ")); }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static boolean is@@ Active@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return (c@@ fg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Validator@@ .@@ K@@ E@@ Y_@@ A@@ UT@@ H@@ O@@ R@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ).@@ length@@ ) > 0; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing static java.lang.String@@ [] get@@ Commit@@ ter@@ Email@@ Wh@@ ite@@ List@@ (com.google.gerrit.server.@@ config.@@ Plugin@@ Config cfg@@ ) { return cfg@@ .get@@ String@@ List@@ (com.googlesource.gerrit.plugins.@@ upload@@ validator@@ .@@ Email@@ Wh@@ ite@@ list@@ Validator@@ .@@ K@@ E@@ Y_@@ M@@ IT@@ T@@ ER@@ _@@ E@@ M@@ A@@ IL@@ _@@ W@@ H@@ IT@@ E@@ LI@@ ST@@ ); }
@java.lang.Override protected void configure() { bind(@@ java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.google.gerrit.extensions.@@ annot@@ ation@@ s.@@ Plugin@@ Name@@ .@@ class@@ ).to@@ Instance@@ ("@@ I@@ t@@ s@@ Test@@ Name@@ "); h@@ Pat@@ h = ra@@ n@@ do@@ T@@ arget@@ Path@@ (); res@@ ol@@ ve@@ ("@@ et@@ c@@ ").@@ res@@ ol@@ ve@@ ("@@ it@@ s@@ "); assert@@ F@@ alse@@ ((@@ ("@@ Path@@ s " + (@@ it@@ s@@ Path@@ )) + " al@@ read@@ y ex@@ ist@@ s@@ ")); java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ w@@ it@@ s@@ )); h@@ .@@ Pat@@ h an@@ up@@ S@@ ite@@ Pat@@ h = true@@ ; rule@@ s@@ Config@@ Read@@ er = create@@ Mo@@ ck@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Rule@@ s@@ Config@@ .@@ class@@ ); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Rule@@ s@@ Config@@ .@@ class@@ ).to@@ Instance@@ (r@@ ule@@ s@@ Config@@ ); rule@@ s@@ Project@@ Cach@@ e = create@@ Mo@@ ck@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ I@@ t@@ Rule@@ s@@ Project@@ Cache@@ .@@ class@@ ); bind(@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ I@@ t@@ s@@ Config@@ .@@ class@@ ).to@@ Instance@@ (r@@ ule@@ s@@ Project@@ Cach@@ e); bind(@@ java.nio.file.@@ Path@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ g@@ oogle@@ it@@ s.@@ base.@@ I@@ t@@ s@@ Path@@ .@@ class@@ ).to@@ Instance@@ (@@ h@@ ); bind(@@ java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ In@@ Pro@@ g@@ lobal@@ File@@ Name@@ .@@ class@@ ).to@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Base@@ Rule@@ Test.@@ K@@ in@@ d.@@ LO@@ B@@ AL@@ .@@ file@@ Name); java.lang.String@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Base@@ Name@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ .@@ File@@ Name@@ .@@ class@@ ).to@@ Instance@@ (com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ w@@ ork@@ f@@ low@@ .@@ Base@@ Rule@@ Test.@@ K@@ in@@ d.@@ S@@ IT@@ Name); }
@@@ com.google.inject.@@ Provi@@ de@@ s @@@ com.googlesource.gerrit.plugins.@@ it@@ s.@@ base.@@ it@@ s.@@ I@@ t@@ s@@ Pat@@ h @@@ com.google.inject.@@ Injec@@ t java.nio.file.@@ Pat@@ h it@@ s@@ Path@@ (@@ @@@ com.google.gerrit.server.config.@@ S@@ ite@@ Pat@@ h sit@@ e@@ Path@@ ) { return sit@@ e@@ Path@@ .@@ res@@ ol@@ ve@@ ("@@ et@@ c@@ ").@@ res@@ ol@@ ve@@ ("@@ it@@ s@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { switch (@@ o@@ per@@ ation@@ ) { case IN@@ DE@@ X : try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema@@ Factory.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Change change = db.@@ changes@@ ().get@@ (id@@ ); if (@@ change == null@@ ) { index@@ er.@@ delete@@ (id@@ ); return@@ ; } index@@ er.@@ index@@ (db, change@@ ); } com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed id@@ ); break@@ ; case DE@@ LE@@ T@@ E : index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y de@@ le@@ ted f@@ ro@@ m index@@ ", id@@ ); break@@ ; } index@@ T@@ s.@@ update@@ ("@@ change@@ "); }
@java.lang.Override protected void configure() { bind(@@ java.util.concurrent.@@ Execu@@ tor@@ .@@ class@@ ).@@ annot@@ ated@@ With@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ .@@ class@@ ).to@@ Provider@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ Provider@@ .@@ class@@ ); list@@ ener@@ ().to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Execu@@ tor@@ Provider@@ .@@ class@@ ); com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ Change@@ Index@@ ed@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Event@@ Handler@@ .@@ class@@ ); com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ Account@@ Index@@ ed@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ index.@@ Index@@ Event@@ Handler@@ .@@ class@@ ); com.google.gerrit.extensions.@@ regist@@ ration.@@ D@@ y@@ nam@@ ic@@ Set.@@ bind(@@ bin@@ der@@ (), com.google.gerrit.extensions.@@ events.@@ L@@ if@@ ec@@ yc@@ le@@ List@@ ener@@ .@@ class@@ ).to@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ Au@@ to@@ Re@@ index@@ At@@ Start@@ .@@ class@@ ); }
public boolean au@@ to@@ Re@@ index@@ At@@ Start@@ () { return au@@ to@@ Re@@ index@@ At@@ Start@@ ; }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s java.io.IOException { index@@ er.@@ index@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Account@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Account {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed id@@ ", id@@ ); index@@ T@@ s.@@ update@@ ("@@ account@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D u@@ u@@ id@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s java.io.IOException { index@@ (@@ u@@ id@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Group@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ In@@ vali@@ d {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed u@@ u@@ id@@ ); index@@ T@@ s.@@ update@@ ("@@ group@@ "); }
@java.lang.Override void index@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id id@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ O@@ per@@ ation o@@ per@@ ation@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = null@@ ; switch (@@ o@@ per@@ ation@@ ) { case IN@@ DE@@ X : try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema@@ Factory.@@ open@@ ()) { change = db.@@ changes@@ ().get@@ (id@@ ); if (@@ change != null@@ ) { index@@ er.@@ index@@ (db, change@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y index@@ ed id@@ ", id@@ ); } catch (@@ java.lang.Exception e) { if (!(@@ is@@ C@@ au@@ sed@@ By@@ NoSuch@@ Change@@ Exception(@@ e@@ ))) { throw e@@ ; } com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } w@@ a@@ s de@@ le@@ ted@@ , ab@@ ort@@ ing index@@ ", id@@ .get()); } if (@@ change == null@@ ) { index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } not fo@@ und@@ , de@@ le@@ ted f@@ ro@@ m in@@ de@@ x id@@ ", id@@ ); } break@@ ; case DE@@ LE@@ T@@ E : index@@ er.@@ delete@@ (id@@ ); com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Index@@ Change@@ Res@@ tApi@@ Servlet.@@ log@@ g@@ er.@@ de@@ bug@@ ("@@ Change {@@ } su@@ c@@ cess@@ f@@ ull@@ y de@@ le@@ ted f@@ ro@@ m in@@ de@@ x id@@ ", id@@ ); break@@ ; }
public void set@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ Key@@ (@@ com.google.gerrit.reviewdb.client.@@ Account id@@ ) { put(@@ last@@ Lo@@ gin@@ ExternalId@@ Pro@@ per@@ ty@@ Key@@ , ext@@ er@@ n@@ al@@ Id@@ Key@@ ); }
private void con@@ ver@@ t@@ Lo@@ cal@@ User@@ To@@ L@@ ow@@ er@@ Case@@ (com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) { if (@@ ext@@ Id.@@ is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id != null@@ ) { final java.lang.String local@@ User = ext@@ Id.@@ key@@ ().get@@ S@@ che@@ me@@ Rest@@ (); final java.lang.String local@@ User@@ L@@ ow@@ er@@ C@@ ase = local@@ User@@ .@@ to@@ L@@ ow@@ er@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ ); if (!(@@ local@@ User@@ .equals(@@ local@@ User@@ L@@ ow@@ er@@ Case@@ ))) { final com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key ext@@ Id@@ Key@@ L@@ ow@@ er@@ C@@ ase@@ = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id@@ .@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , local@@ User@@ L@@ ow@@ er@@ C@@ UR@@ R@@ IT@@ , ext@@ Id.@@ key@@ Set@@ ())); final com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (@@ ext@@ Id@@ .getAccount@@ Id@@ ()).@@ ()).@@ insert@@ (@@ ext@@ Id.@@ account@@ Id(), ext@@ Id); db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); } catch (com.google.gwtorm.server.OrmException e) { java.lang.@@ Sy@@ ste@@ m.@@ er@@ r.@@ p@@ r@@ int@@ l@@ n@@ (("@@ error@@ : " + (@@ error@@ .get@@ Message@@ ()))); } }
@java.lang.Override public int run() throw@@ s java.lang.Exception { if ((@@ th@@ read@@ s) <@@ = 0) { th@@ read@@ s = 1; } db@@ Injec@@ tor = create@@ Db@@ Injector@@ (@@ com.google.gerrit.pgm.@@ M@@ U@@ L@@ T@@ I@@ _@@ US@@ ER@@ ); m@@ anag@@ er.@@ add(@@ db@@ Injector@@ , db@@ Injector@@ .create@@ Ch@@ ild@@ Injector@@ (com.google.gerrit.server.@@ schema.@@ Schema@@ Version@@ Ch@@ ec@@ k.@@ module@@ ())); m@@ anag@@ er.@@ start@@ (); db@@ Injector@@ .@@ in@@ ject@@ Member@@ s@@ (@@ this@@ ); try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = dat@@ ab@@ ase.@@ open@@ ()) { to@@ do = db.account@@ ExternalId@@ s().@@ all@@ ().to@@ List(); synchronized@@ (m@@ on@@ it@@ or@@ ) { m@@ on@@ it@@ or@@ .@@ be@@ gin@@ Task@@ ("@@ Con@@ ver@@ t@@ ing lo@@ c@@ al user@@ name@@ s to@@ do@@ .@@ size()); } final java.@@ u@@ til@@ Lis@@ t <@@ com.google.gerrit.server.account.@@ ExternalId@@ .@@ Key Key Key Key Key = new java.util.ArrayList<@@ >@@ (@@ th@@ read@@ s); for (@@ int ti@@ d = 0; ti@@ d < (@@ th@@ read@@ s); ti@@ d@@ ++@@ ) { com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ C@@ ase.@@ ase.@@ add@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ W@@ ork@@ er lo@@ cal@@ User@@ nam@@ es@@ To@@ W@@ ork@@ er = new com.google.gerrit.pgm.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ C@@ ase.@@ start@@ (); w@@ ork@@ er@@ s.add(@@ t@@ ); } for (@@ com.google.gerrit.pgm.init.@@ Lo@@ cal@@ User@@ nam@@ es@@ To@@ L@@ ow@@ er@@ C@@ ase.@@ w@@ ork@@ er w@@ ork@@ er : w@@ ork@@ er@@ s) { m@@ on@@ it@@ or@@ .@@ end@@ Task@@ (); } m@@ anag@@ er.@@ st@@ op@@ (); return 0; }
private com.google.gerrit.reviewdb.client.Account@@ External@@ Id next@@ () { synchronized@@ (@@ to@@ do@@ ) { if (@@ to@@ .@@ isEmpty()) { return null@@ ; } return to@@ do@@ .@@ remove@@ (((@@ to@@ do@@ .@@ size@@ ()) - 1@@ )); } }
private static boolean re@@ cor@@ ct@@ User@@ (java.lang.String user@@ , com.google.gerrit.httpd.@@ Web@@ S@@ es@@ sion s@@ ession@@ ) { com.google.gerrit.server.account.@@ ExternalId@@ .@@ Key id = s@@ ession@@ .get@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ (); return (@@ id != null@@ ) && (id@@ .@@ e@@ qual@@ s@@ (@@ new com.google.gerrit.server.account.@@ ExternalId@@ .@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , user@@ ))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource rsrc@@ , com.google.gerrit.server.config.@@ Con@@ fi@@ r@@ m@@ E@@ mail.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.@@ Current@@ User user = self@@ .get@@ (); if (!(@@ user@@ .is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.server.config.@@ Con@@ fi@@ r@@ m@@ E@@ mail.@@ Input@@ (); } if ((@@ input.@@ token@@ ) == null@@ ) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ Auth@@ enti@@ c@@ ation to@@ k@@ en user@@ "); } try { com.google.gerrit.server.mail.@@ Email@@ Token@@ V@@ er@@ if@@ i@@ er.@@ Par@@ sed@@ To@@ k@@ en to@@ k@@ en = email@@ Token@@ V@@ er@@ if@@ i@@ er.@@ de@@ code@@ (in@@ pu@@ t.@@ token@@ ); com.google.gerrit.reviewdb.client.Account.Id ac@@ c@@ Id = user@@ .getAccount@@ Id(); if (@@ ac@@ c@@ Id.@@ equals(@@ token@@ .getAccount@@ Id@@ ())) { account@@ Manager.@@ link@@ (@@ ac@@ c@@ Id, token@@ .@@ to@@ Auth@@ Request@@ ()); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); } throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ Auth@@ enti@@ c@@ ation to@@ k@@ en "); } catch (com.google.gerrit.server.@@ mail.@@ Email@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception@@ (); } catch (com.google.gerrit.server.@@ account.@@ Account@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception(@@ e.get@@ Message()); } }
private com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s for@@ Gerrit@@ Commit@@ s(@@ com.google.gerrit.server.project.@@ Ref@@ Control ref@@ Control@@ , com.google.gerrit.server.@@ ssh@@ .@@ Ssh@@ Info ssh@@ Info@@ , org.eclipse.jgit.lib.Repository repo@@ ) { return new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s(@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Up@@ load@@ Merg@@ es@@ Permission@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ A@@ m@@ end@@ ed@@ Gerrit@@ Merge@@ Commit@@ Validation@@ List@@ ener@@ (ref@@ Control@@ , gerrit@@ Ident@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Sig@@ ned@@ O@@ ff@@ By@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Change@@ Id@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ , in@@ stall@@ Commit@@ M@@ s@@ g@@ Hook@@ Command@@ , ssh@@ Info@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Config@@ Validator@@ (ref@@ Control@@ , repo@@ , all@@ User@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Plugin@@ Commit@@ Validation@@ List@@ ener@@ (@@ plugin@@ Validator@@ s@@ ))); }
private com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s for@@ Receive@@ Commit@@ s(@@ com.google.gerrit.server.project.@@ Ref@@ Control ref@@ Control@@ , com.google.gerrit.server.@@ ssh@@ .@@ Ssh@@ Info ssh@@ Info@@ , org.eclipse.jgit.lib.Repository repo@@ ) throw@@ s java.io.IOException { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.@@ not@@ es.@@ Note@@ Ma@@ p re@@ ject@@ Commit@@ s = com.google.gerrit.server.git.@@ B@@ an@@ Commit.@@ load@@ Re@@ ject@@ Commit@@ s@@ Map@@ (repo@@ , r@@ w@@ ); return new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s(@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Up@@ load@@ Merg@@ es@@ Permission@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ A@@ m@@ end@@ ed@@ Gerrit@@ Merge@@ Commit@@ Validation@@ List@@ ener@@ (ref@@ Control@@ , gerrit@@ Ident@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Author@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ ter@@ Up@@ load@@ er@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Sig@@ ned@@ O@@ ff@@ By@@ Validator@@ (ref@@ Control@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Change@@ Id@@ Validator@@ (ref@@ Control@@ , can@@ on@@ ical@@ Web@@ Url@@ , in@@ stall@@ Commit@@ M@@ s@@ g@@ Hook@@ Command@@ , ssh@@ Info@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Config@@ Validator@@ (ref@@ Control@@ , repo@@ , all@@ User@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ B@@ an@@ ned@@ Commit@@ s@@ Validator@@ (re@@ ject@@ Commit@@ s@@ ), new com.google.gerrit.server.git.@@ validators.@@ Commit@@ Validator@@ s.@@ Plugin@@ Commit@@ Validation@@ List@@ ener@@ (@@ plugin@@ Validator@@ s@@ ))); } }
private void write@@ Object@@ (@@ final java.io.@@ Object@@ Output@@ Stream out@@ ) throw@@ s java.io.IOException { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 1); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , account@@ Id@@ .get()); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 2); write@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (@@ out@@ , ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ At@@ ); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 3@@ ); write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , (@@ per@@ si@@ st@@ ent@@ C@@ ook@@ i@@ e ? 1 : 0@@ )); if ((@@ ext@@ er@@ n@@ al@@ Id@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 4@@ ); write@@ String@@ (@@ out@@ , ext@@ er@@ n@@ al@@ Id@@ s); } if ((@@ s@@ ession@@ Id@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 5@@ ); write@@ String@@ (@@ out@@ , s@@ ession@@ Id); } write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 6@@ , 6@@ ); write@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (@@ out@@ , exp@@ i@@ res@@ At@@ ); if ((@@ auth@@ ) != null@@ ) { write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , write@@ String@@ (@@ out@@ , auth@@ , auth@@ ); } write@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (@@ out@@ , 0); }
Account@@ External@@ Id get@@ ExternalId@@ () { return ext@@ er@@ n@@ al@@ Id@@ ; }
private Account@@ External@@ Id to@@ Ex@@ t@@ Id@@ Key@@ (@@ byte@@ [] f@@ p@@ ) { return new com.google.gerrit.reviewdb.client.Account@@ External@@ Key@@ .@@ Key@@ (@@ com.google.gerrit.reviewdb.client.@@ P@@ atch s@@ CH@@ E@@ M@@ E_@@ G@@ P@@ G@@ K@@ E@@ Y@@ , com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ en@@ code@@ (@@ f@@ p@@ )); }
com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al create@@ Val@@ (@@ final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Key key@@ , final com.google.gerrit.reviewdb.client.Account.Id wh@@ o@@ , final boolean re@@ me@@ mber@@ , final com.google.gerrit.reviewdb.client.Account@@ External@@ Id last@@ Lo@@ gin@@ , java.lang.String si@@ d@@ , java.lang.String auth@@ ) { final long h@@ al@@ f@@ Ag@@ e@@ Ref@@ res@@ h = (s@@ ession@@ Ma@@ x@@ Ag@@ e@@ M@@ il@@ li@@ s) >@@ >> 1; final long min@@ Ref@@ res@@ h = java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ .@@ con@@ ver@@ t@@ (1@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ ); final long ref@@ res@@ h = java.lang.@@ M@@ ath@@ .@@ min@@ (@@ h@@ al@@ f@@ Ag@@ e@@ Ref@@ res@@ h@@ , min@@ Ref@@ res@@ h@@ ); final long no@@ w = no@@ w@@ M@@ s(); final long ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ A@@ t = no@@ w + ref@@ res@@ h@@ ; final long exp@@ i@@ res@@ A@@ t = no@@ w + (s@@ ession@@ Ma@@ x@@ Ag@@ e@@ M@@ il@@ li@@ s); if (@@ si@@ d == null@@ ) { si@@ d = new@@ Un@@ i@@ qu@@ e@@ Token@@ (@@ wh@@ o@@ ); } if (@@ a@@ ut@@ h == null@@ ) { a@@ ut@@ h = new@@ Un@@ i@@ qu@@ e@@ Token@@ (@@ wh@@ o@@ ); } com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al va@@ l = new com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Val@@ (@@ wh@@ o@@ , ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ At@@ , re@@ me@@ mber@@ , last@@ Lo@@ gin@@ , exp@@ i@@ res@@ At@@ , si@@ d@@ , token@@ ); self@@ .@@ put(@@ token@@ , va@@ l@@ ); return va@@ l@@ ; }
public java.util.List<java.lang.String> get@@ Se@@ con@@ d@@ ary@@ Email@@ s(@@ com.google.gerrit.reviewdb.client.@@ Account account@@ , java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s) { java.util.List<java.lang.String> email@@ s = new java.util.Array@@ List@@ (com.google.gerrit.server.@@ account.@@ Account@@ State@@ .get@@ Email@@ s(@@ ext@@ er@@ n@@ al@@ Id@@ s@@ )); if ((@@ account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) { email@@ s.@@ remove@@ (account@@ .get@@ Pref@@ er@@ red@@ Email@@ ()); } java.util.Collections.s@@ ort@@ (@@ email@@ s); return email@@ s; }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ db.account@@ ExternalId@@ s@@ ().get@@ (@@ new com.google.gerrit.server.account.@@ ExternalId@@ .@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ G@@ ER@@ R@@ IT@@ , user@@ name@@ )).@@ map@@ (com.google.gerrit.server.@@ account.@@ Account@@ ExternalId@@ :@@ :@@ :@@ get@@ Account@@ Id()); } }
public com.google.gerrit.server.account.@@ Auth@@ Result link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request wh@@ o@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id ext@@ Id = fin@@ d@@ ExternalId@@ (db, wh@@ o@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ to@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Id@@ enti@@ t@@ y in u@@ se b@@ y an@@ oth@@ er account@@ "); } update@@ (db, wh@@ o@@ , ext@@ Id); } else { ext@@ Id = com.google.gerrit.server.account.@@ ExternalId@@ .create@@ With@@ Email@@ (@@ wh@@ o@@ .get@@ ExternalId@@ Key@@ (), to@@ , wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id.@@ as@@ Account@@ ExternalId@@ ())); if ((@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = db.account@@ s@@ ().get@@ (@@ to@@ ); if ((@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) == null@@ ) { a.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()); db.account@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (@@ a@@ )); } } if ((@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { by@@ Email@@ Cache.@@ e@@ vi@@ ct@@ (@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()); } by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ to@@ ); } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ to@@ , wh@@ o@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } }
public com.google.gerrit.server.account.@@ Auth@@ Result update@@ Link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id to@@ , com.google.gerrit.server.account.@@ Auth@@ Request wh@@ o@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key k@@ ey = wh@@ o@@ .get@@ ExternalId@@ Key@@ ().@@ as@@ Account@@ ExternalId@@ Key@@ (); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> filter@@ ed@@ Key@@ s = new java.util.Hash@@ Set<@@ >(); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > filter@@ ed@@ Key@@ > filter@@ ed@@ Key@@ s = new java.util.Hash@@ Set<@@ >(); for (java.lang.String k@@ ey : filter@@ ed@@ Key@@ s) { if ((@@ !(@@ filter@@ ed@@ Key@@ s.@@ isEmpty())) && (((@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e.@@ size@@ ()) > 1@@ ) || (!(@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ m@@ e.@@ contains(@@ key@@ ))@@ ))) { db.account@@ ExternalId@@ s().@@ delete@@ Key@@ s(@@ filter@@ ed@@ Key@@ s@@ By@@ S@@ che@@ me@@ ); } by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ to@@ ); return link@@ (@@ to@@ , wh@@ o@@ ); } } }
public com.google.gerrit.server.account.@@ Auth@@ Result un@@ link@@ (@@ com.google.gerrit.reviewdb.client.Account.Id from@@ , com.google.gerrit.server.account.@@ Auth@@ Request wh@@ o@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id ext@@ Id = fin@@ d@@ ExternalId@@ (db, wh@@ o@@ .get@@ ExternalId@@ Key@@ ()); if (@@ ext@@ Id != null@@ ) { if (!(@@ ext@@ Id.@@ account@@ Id@@ ().equals(@@ from@@ ))) { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((@@ ("@@ Id@@ enti@@ t@@ y '@@ " + (@@ wh@@ o@@ .get@@ ExternalId@@ Key@@ ().get@@ ())) + "@@ ' in u@@ se b@@ y an@@ oth@@ er account@@ ")); } db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id.@@ as@@ Account@@ ExternalId@@ ())); if ((@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()) != null@@ ) { com.google.gerrit.reviewdb.client.@@ Account a = account@@ Cache@@ .get(@@ account@@ Id@@ ).get@@ Account@@ (); if (((@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ()) != null@@ ) && (@@ a@@ .get@@ Pref@@ er@@ red@@ Email@@ ().@@ e@@ qual@@ s@@ (@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ())@@ )) { a.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ null@@ ); db.account@@ s().@@ update@@ (@@ java.util.Collections.singleton@@ (@@ a@@ )); } by@@ Email@@ Cache.@@ e@@ vi@@ ct@@ (@@ wh@@ o@@ .get@@ Email@@ Add@@ ress@@ ()); by@@ Id@@ Cache.@@ e@@ vi@@ ct@@ (@@ from@@ ); } } else { throw new com.google.gerrit.server.account.Account@@ Exception@@ ((@@ ("@@ Id@@ enti@@ t@@ y '@@ " + (@@ wh@@ o@@ .get@@ ExternalId@@ Key@@ ().get@@ (@@ ext@@ Id@@ ))) + "@@ ' not fo@@ und@@ ")); } return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ f@@ ro@@ m@@ , wh@@ o@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } }
private void hand@@ le@@ Set@@ t@@ ing@@ User@@ Name@@ Failure@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.@@ Account account@@ , com.google.gerrit.server.account.@@ External@@ Id ext@@ Id, java.lang.String error@@ Message@@ , java.lang.Exception e@@ , boolean log@@ Exception@@ ) throw@@ s com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception, com.google.gwtorm.server.OrmException { if (@@ log@@ Exception@@ ) { com.google.gerrit.server.account.Account@@ Manager.@@ log.error@@ (@@ error@@ Message@@ , e); } else { com.google.gerrit.server.account.Account@@ Manager.@@ log.error@@ (@@ error@@ Message@@ ); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ US@@ ER@@ _@@ NAM@@ E@@ ))) { db.account@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (account@@ )); db.account@@ ExternalId@@ s().@@ delete@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); ext@@ Id.@@ as@@ Account@@ ExternalId@@ ()); throw new com.google.gerrit.server.account.Account@@ User@@ Name@@ Exception(@@ error@@ Message@@ , e); } }
public com.google.gerrit.server.account.@@ Auth@@ Result auth@@ enti@@ cate@@ (com.google.gerrit.server.@@ account.@@ Auth@@ Request wh@@ o@@ ) throw@@ s com.google.gerrit.server.account.Account@@ Exception, java.io.IOException { wh@@ o = re@@ al@@ m.@@ auth@@ enti@@ cate@@ (@@ wh@@ o@@ ); try { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { com.google.gerrit.server.account.@@ External@@ Id id = fin@@ d@@ ExternalId@@ (db, wh@@ o@@ .get@@ ExternalId@@ Key@@ ()); if (@@ id == null@@ ) { return create@@ (db, wh@@ o@@ ); } com.google.gerrit.reviewdb.client.@@ Account ac@@ t = by@@ Id@@ Cache@@ .get(@@ id@@ .@@ account@@ Id@@ ()@@ ).get@@ Account@@ (); if (!(@@ ac@@ t.@@ is@@ Active@@ ())) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Auth@@ enti@@ c@@ ation error@@ , ac@@ count in@@ ac@@ ti@@ v@@ e update@@ (db, wh@@ o@@ , id@@ ); return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (id@@ .@@ account@@ Id(), wh@@ o@@ .get@@ ExternalId@@ Key@@ (), false@@ ); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.Account@@ Exception("@@ Auth@@ enti@@ c@@ ation error@@ ", e); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> put@@ G@@ pg@@ Key@@ s(@@ com.google.gerrit.server.account.Account@@ Resource account@@ , java.util.List<java.lang.String> add@@ , java.util.List<java.lang.String> delete@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ G@@ pg@@ Exception { com.google.gerrit.gpg.@@ server.@@ st@@ G@@ pg@@ Key@@ s.@@ Input in = new com.google.gerrit.gpg.@@ server.@@ Po@@ st@@ G@@ pg@@ Key@@ s.@@ Input@@ (); in.@@ ad@@ d = add@@ ; in.@@ de@@ le@@ te = delete@@ ; try { return post@@ G@@ pg@@ Key@@ s.@@ apply(@@ account@@ , in@@ ); } catch (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.server.@@ G@@ pg@@ Exception(@@ e); } }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing public static com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ <@@ com.google.gerrit.server.account.@@ ExternalId@@ > get@@ G@@ pg@@ Ex@@ t@@ Id@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (@@ db.account@@ ExternalId@@ s().@@ by@@ Account@@ (account@@ Id@@ )).@@ filter@@ (( in@@ ) -@@ > in.@@ is@@ S@@ che@@ me@@ (@@ com.google.gerrit.gpg.@@ server.@@ S@@ CH@@ E@@ M@@ E_@@ G@@ P@@ G@@ K@@ E@@ Y@@ )); }
static byte@@ [] parse@@ F@@ ing@@ er@@ p@@ r@@ int@@ (java.lang.String str@@ , java.lang.I@@ terable@@ <@@ com.google.gerrit.server.account.@@ External@@ > ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { st@@ r = com.google.common.base.@@ Char@@ Match@@ er.@@ wh@@ ites@@ pace@@ ().@@ remove@@ From@@ (@@ str@@ ).to@@ Up@@ per@@ Case@@ (); if ((((@@ st@@ r.@@ length@@ ()) != 8@@ ) && ((@@ st@@ r.@@ length@@ ()) != 4@@ 0@@ )) || (!(@@ com.google.common.base.@@ Char@@ Match@@ er.@@ an@@ y@@ Of@@ ("@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ AB@@ C@@ DE@@ F@@ ").@@ match@@ es@@ All@@ Of(@@ str@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ str@@ ); } byte@@ [] f@@ p = null@@ ; for (@@ com.google.gerrit.reviewdb.client.@@ Account p : ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) { java.lang.String f@@ p@@ St@@ r = ext@@ Id@@ .@@ get@@ S@@ che@@ me@@ Res@@ t@@ (); if (!(@@ f@@ p@@ St@@ r.@@ end@@ sWith@@ (@@ str@@ ))) { continue@@ ; } else if (@@ f@@ p != null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (("@@ N@@ o key@@ s fo@@ un@@ d for " + str@@ )); } f@@ p = com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ de@@ code@@ (@@ f@@ p@@ Str@@ ); if ((@@ st@@ r.@@ length@@ ()) == 4@@ 0) { break@@ ; } } if (@@ f@@ p == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception(@@ str@@ ); } return f@@ p@@ ; }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception { com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ check@@ Visible@@ (@@ self@@ , rsrc@@ ); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> key@@ s = new java.util.Hash@@ Map@@ <@@ >(); try (@@ com.google.gerrit.gpg.@@ PublicKey@@ St@@ or@@ e st@@ or@@ e = st@@ ore@@ Provider@@ .get@@ ()) { for (@@ com.google.gerrit.gpg.@@ PublicKey@@ St@@ or@@ e ext@@ Id : get@@ G@@ pg@@ Ex@@ t@@ Id@@ s(@@ rsrc@@ )) { java.lang.String f@@ p@@ St@@ r = ext@@ Id@@ .getParent@@ (@@ me@@ Res@@ t@@ Id); byte@@ [] f@@ p = com.google.common.@@ io.@@ Base@@ En@@ cod@@ ing.@@ base@@ 1@@ 6@@ ().@@ de@@ code@@ (@@ f@@ p@@ Str@@ ); boolean fo@@ un@@ d = false@@ ; for (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ PublicKey@@ R@@ ing key@@ R@@ ing : st@@ ore@@ .get(@@ com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ key@@ Id(@@ f@@ p@@ ))) { if (@@ java.util.Array@@ s.@@ equals(@@ key@@ R@@ ing@@ .get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ (), f@@ p@@ )) { fo@@ un@@ d = true@@ ; com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info in@@ fo = com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ to@@ Json@@ (key@@ R@@ ing@@ .get@@ PublicKey@@ (), check@@ er@@ Factory.create@@ (rsrc@@ .getUser@@ (), st@@ ore@@ ), st@@ ore@@ ); key@@ s.@@ put(@@ info.@@ id@@ , info@@ ); info.@@ id = null@@ ; break@@ ; } } if (!@@ fo@@ und@@ ) { com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ log.warn@@ ("@@ Cannot k@@ ey st@@ ore@@ d for fin@@ g@@ er@@ p@@ r@@ int {@@ } com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (@@ f@@ p@@ )); } } return key@@ s; }
com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al create@@ Val@@ (@@ final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ Key key@@ , final com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ al va@@ l@@ ) { final com.google.gerrit.reviewdb.client.Account.Id wh@@ o = va@@ l@@ .getAccount@@ Id(); final boolean re@@ me@@ mb@@ er = va@@ l.@@ is@@ Per@@ si@@ st@@ C@@ ook@@ i@@ e@@ (); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.httpd.@@ Web@@ Session@@ Manager.@@ V@@ is@@ it@@ em@@ (); return create@@ Val@@ (key@@ , wh@@ o@@ , re@@ me@@ mber@@ , last@@ Lo@@ gin@@ , va@@ l.@@ s@@ ession@@ Id, va@@ l.@@ auth@@ ); }
private com.google.gerrit.gpg.@@ Check@@ Result check@@ Id@@ s@@ For@@ Ar@@ b@@ it@@ r@@ ary@@ User@@ (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Public@@ Key key@@ ) throw@@ s com.google.gwtorm.server.OrmException, org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ ExternalId@@ (@@ com.google.gerrit.gpg.@@ Gerrit@@ PublicKey@@ Check@@ er.@@ to@@ Ex@@ t@@ Id@@ Key@@ (@@ k@@ ).get@@ (key@@ )); if (account@@ St@@ at@@ es.@@ isEmpty()) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key is not as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ y user@@ s@@ "); } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key is as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h m@@ ulti@@ pl@@ e user@@ s@@ "); } com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user = user@@ Factory.create@@ (account@@ St@@ at@@ es@@ .get(@@ 0@@ )); java.util.@@ Set@@ <java.lang.String> allow@@ ed@@ User@@ Id@@ s = get@@ Al@@ low@@ ed@@ User@@ Id@@ s(@@ user@@ ); if (@@ allow@@ ed@@ User@@ Id@@ s.@@ isEmpty()) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Sig@@ n@@ at@@ ur@@ e id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ "); } if (@@ has@@ Al@@ low@@ ed@@ User@@ Id(@@ key@@ , allow@@ ed@@ User@@ Id@@ s@@ )) { return com.google.gerrit.gpg.@@ Check@@ Result.@@ tr@@ u@@ st@@ ed@@ (); } return com.google.gerrit.gpg.@@ Check@@ Result.@@ b@@ ad@@ ("@@ Key do@@ es not cont@@ ai@@ n an@@ y vali@@ d c@@ er@@ t@@ if@@ ic@@ ation@@ s for user id@@ enti@@ ti@@ es for user@@ "); }
private void read@@ Object@@ (@@ final java.io.@@ Object@@ Input@@ Stream in@@ ) throw@@ s java.io.IOException { P@@ AR@@ S@@ E : for (@@ ; ;@@ ) { final int t@@ a@@ g = read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ ); switch (t@@ ag@@ ) { case 0 : case 1 : case 1 : account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ )); continue@@ ; case 2 : ref@@ res@@ h@@ C@@ ook@@ i@@ e@@ A@@ t = read@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (in@@ ); continue@@ ; case 3 : per@@ si@@ st@@ ent@@ C@@ ook@@ i@@ e = (@@ read@@ V@@ ar@@ In@@ t@@ 3@@ 2@@ (in@@ )) != 0; continue@@ ; case 4 : ext@@ er@@ n@@ al@@ Id = new com.google.gerrit.reviewdb.client.Account@@ External@@ Id@@ .@@ Key@@ (@@ read@@ String@@ )); continue@@ ; case 5 : s@@ ession@@ Id = read@@ String@@ (in@@ ); continue@@ ; case C@@ A@@ t = read@@ Fi@@ x@@ In@@ t@@ 6@@ 4@@ (in@@ ); continue@@ ; case 0 : throw new java.io.IO@@ Exception@@ (("@@ error@@ : " + t@@ a@@ ut@@ h = read@@ String@@ (in@@ ); continue@@ ; default : throw new java.io.IO@@ Exception@@ (("@@ Fai@@ le@@ d to un@@ d in o@@ bject@@ : " + tag@@ )); } } if ((@@ exp@@ i@@ res@@ At@@ ) == 0) { exp@@ i@@ res@@ A@@ t = res@@ h@@ C@@ ook@@ i@@ e@@ At@@ ) + (@@ java.util.concurrent.@@ Time@@ Un@@ it.@@ H@@ O@@ UR@@ S@@ .@@ to@@ M@@ il@@ li@@ s(@@ 2@@ )); } }
private boolean is@@ Tr@@ u@@ st@@ ed@@ (@@ final com.google.gerrit.reviewdb.client.@@ Account id@@ ) { if (id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ External@@ Id id@@ ) { return true@@ ; } if (id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ External@@ Id id = id@@ .@@ S@@ CH@@ E@@ M@@ E@@ _M@@ A@@ IL@@ T@@ O@@ )) { return true@@ ; } if (id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ External@@ Id S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E@@ )) { return true@@ ; } for (com.google.gerrit.server.@@ auth.@@ open@@ id@@ .@@ Open@@ Id@@ Provider@@ Pat@@ ter@@ n p : tr@@ u@@ st@@ ed@@ Open@@ ID@@ s) { if (@@ p.@@ match@@ es@@ (id@@ )) { return true@@ ; } } return false@@ ; }
private java.util.Set<@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ > read@@ Key@@ s@@ To@@ Remo@@ ve@@ (@@ com.google.gerrit.gpg.@@ server.@@ Po@@ st@@ G@@ pg@@ Key@@ s.@@ Input input@@ , java.util.Collection<@@ com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ > ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s) { if (((@@ input.@@ delete@@ ) == null@@ ) || (in@@ pu@@ t.@@ de@@ le@@ t@@ e.@@ isEmpty())) { return com.google.common.collect.Immutable@@ Set.@@ of@@ (); } java.util.Set<@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ > fin@@ g@@ er@@ p@@ r@@ int@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (in@@ pu@@ t.@@ de@@ le@@ t@@ e.@@ size()); for (java.lang.String id : input.@@ delete@@ ) { try { fin@@ g@@ er@@ p@@ r@@ int@@ s.@@ add@@ (@@ new com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ (@@ com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.@@ parse@@ F@@ ing@@ er@@ p@@ r@@ int@@ (id@@ , ex@@ ist@@ ing@@ Ex@@ t@@ Id@@ s@@ ))); } catch (@@ com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception e) { } } return fin@@ g@@ er@@ p@@ r@@ int@@ s; }
private static com.google.gerrit.server.account.Account@@ State new@@ State@@ (@@ com.google.gerrit.reviewdb.client.@@ Account account@@ ) { return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , com.google.common.collect.Immutable@@ Set@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >@@ of@@ (), com.google.common.collect.Immutable@@ Set@@ Multimap@@ <@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ >@@ of@@ (), new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> >> >> >> >> >> >> = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ (); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> en@@ try : not@@ if@@ y@@ Type@@ s) { com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >> en@@ try@@ Set@@ ()) { if (@@ e.get@@ Key@@ ().@@ is@@ Id@@ ().equals(@@ change@@ ))) { com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ [] not@@ if@@ y@@ Type@@ s = com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ .@@ parse@@ (account@@ Id, com.google.common.collect.Immutable@@ Set@@ Multimap@@ .@@ of@@ ()); } } } return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , com.google.common.collect.Immutable@@ Set@@ Multimap@@ .@@ of@@ (), com.google.common.collect.Immutable@@ Set@@
public boolean match@@ es(@@ com.google.gerrit.server.account.@@ External@@ Id id@@ ) { return match@@ es@@ (@@ id@@ .@@ contains(@@ id@@ ); }
private com.google.gerrit.server.account.Account@@ State ma@@ k@@ e@@ User@@ (@@ final java.lang.String name, final java.lang.String email@@ ) { final com.google.gerrit.reviewdb.client.Account.Id user@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 4@@ 2); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (user@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ F@@ ull@@ Name(@@ name); account.@@ set@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ ); return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , java.util.Collection@@ <@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ >@@ empty@@ Set@@ (), new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >@@ ()); }
java.util.List<@@ com.google.gerrit.server.account.@@ ExternalId@@ > create@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ , java.lang.String user@@ name, java.lang.String email@@ );
@java.lang.Override public java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String email@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> r = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.reviewdb.client.@@ Account a : db.account@@ s().@@ by@@ Pref@@ er@@ red@@ Email@@ (@@ email@@ )) { r.@@ add(@@ a@@ .getId()); } for (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ State : account@@ Query@@ Provider@@ .get().@@ by@@ Email@@ Pre@@ fix@@ (@@ email@@ )) { if (account@@ State@@ .get@@ ExternalId@@ s().@@ st@@ ream@@ ().@@ filter@@ (( e) -@@ > e@@ mail.@@ equals(@@ e.@@ email@@ ()@@ )).@@ fin@@ d@@ An@@ y@@ ().@@ is@@ P@@ res@@ ent@@ ()) { r.@@ add(@@ account@@ State@@ .getAccount@@ ().get@@ Id()); } } return com.google.common.collect.Immutable@@ Set.@@ copy@@ Of@@ (r@@ ); } }
public boolean check@@ P@@ asswor@@ d(@@ java.lang.String p@@ asswor@@ d@@ , java.lang.String user@@ name@@ ) { if (p@@ asswor@@ d == null@@ ) { return false@@ ; } for (com.google.gerrit.server.@@ account.@@ External@@ Id id : get@@ ExternalId@@ s()) { if ((@@ !(@@ id@@ .is@@ S@@ che@@ me@@ (@@ Account@@ External@@ Id S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E@@ ))) || (!(@@ user@@ name.@@ equals(@@ id@@ .@@ user@@ Id@@ ())@@ ))) { continue@@ ; } java.lang.String has@@ h@@ ed@@ St@@ r = id@@ .@@ has@@ h@@ (); if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ has@@ h@@ ed@@ Str@@ ))) { try { return com.google.gerrit.server.account.@@ Hash@@ ed@@ P@@ asswor@@ d.@@ de@@ code@@ (@@ has@@ h@@ ed@@ Str@@ ).@@ check@@ P@@ asswor@@ d(@@ p@@ asswor@@ d); } catch (@@ org.apache.@@ comm@@ on@@ s.@@ cod@@ ec@@ .@@ De@@ co@@ der@@ Exception e) { com.google.gerrit.server.account.Account@@ State.@@ log@@ g@@ er.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ E@@ rror for user %@@ s@@ : %@@ s", user@@ name, e.get@@ Message@@ ())); return false@@ ; } } return false@@ ; }
public static java.util.@@ Set@@ <java.lang.String> get@@ Email@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > id@@ s) { java.util.@@ Set@@ <java.lang.String> email@@ s = new java.util.Hash@@ Set<@@ >(); for (com.google.gerrit.server.@@ account.@@ External@@ Id id : id@@ s) { if (((@@ id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E@@ _M@@ A@@ IL@@ T@@ O@@ )) && (@@ id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E@@ _M@@ A@@ IL@@ T@@ O@@ )) { email@@ s.@@ add@@ (@@ id@@ get@@ ()); } } return email@@ s; }
public java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > get@@ ExternalId@@ s() { return ext@@ er@@ n@@ al@@ Id@@ s; }
public static java.lang.String get@@ User@@ Name(@@ java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > id@@ s) { if (@@ id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E@@ )) { return id@@ .@@ me@@ Res@@ t@@ (); } return null@@ ; }
private void add@@ ExternalId@@ (java.lang.String s@@ che@@ me@@ , java.lang.String id@@ , java.lang.String email@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key review@@ er = new@@ Account@@ ExternalId@@ .@@ Key@@ (user@@ .getAccount@@ Id(), new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ (s@@ che@@ me@@ , id@@ )); if (@@ e@@ mai@@ l != null@@ ) { ext@@ Id@@ .set@@ Email@@ Add@@ res@@ s(@@ email@@ ); } db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); re@@ load@@ User@@ (); }
public java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > by@@ ExternalId@@ (java.lang.String ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { return quer@@ y@@ (@@ ext@@ Id.@@ key@@ ().get@@ ()); }
public com.google.gerrit.server.account.Account@@ State one@@ By@@ ExternalId@@ (java.lang.String ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = by@@ ExternalId@@ (@@ ext@@ er@@ n@@ al@@ Id); if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) == 1@@ ) { return null@@ ; } else if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 0) { java.lang.String@@ Builder ms@@ g = new java.lang.String@@ Builder@@ (); ms@@ g.@@ append("@@ ext@@ er@@ n@@ al I@@ D ").@@ append(@@ ext@@ er@@ n@@ al@@ Id@@ ).@@ append(@@ "@@ for account@@ s@@ : "); com.google.common.base.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ , ").@@ append@@ To@@ Account@@ (account@@ St@@ at@@ es@@ , Account@@ State.@@ AC@@ CO@@ UN@@ T_@@ ID@@ _@@ F@@ UN@@ T@@ ION@@ )); com.google.gerrit.server.query.@@ account.@@ In@@ ternal@@ Account@@ Quer@@ y.@@ log.warn@@ (@@ ms@@ g.@@ toString@@ ()); } return null@@ ; }
@java.lang.Override public void add@@ Email@@ (@@ com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l r@@ sr@@ c = new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (account@@ .getUser@@ (), input.@@ email@@ ); try { create@@ Email@@ Factory.create@@ (in@@ pu@@ t.@@ email@@ ).@@ apply(@@ rsrc@@ , input@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ Email@@ Exception | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot ad@@ d e@@ mai@@ l e); } }
private void add@@ ExternalId@@ Email@@ (@@ com.google.gerrit.acceptance.@@ Test@@ Account account@@ , java.lang.String email@@ ) throw@@ s java.lang.Exception { check@@ Not@@ Null@@ (@@ email@@ ); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ .getId()); set@@ Api@@ User@@ (account@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void save@@ ExternalId@@ s() throw@@ s java.lang.Exception { s@@ av@@ ed@@ ExternalId@@ s = new java.util.Array@@ List(); s@@ av@@ ed@@ ExternalId@@ s.@@ add@@ All@@ (get@@ ExternalId@@ s(@@ admin@@ )); s@@ av@@ ed@@ ExternalId@@ s.@@ add@@ All@@ (get@@ ExternalId@@ s(@@ user@@ )); }
@org.junit.Test public void delete@@ Email@@ From@@ C@@ u@@ st@@ o@@ m@@ ExternalId@@ S@@ che@@ m@@ es@@ () throw@@ s java.lang.Exception { java.lang.String e@@ mai@@ l = "@@ foo@@ .@@ b@@ ar@@ @@@ ex@@ amp@@ le.@@ com@@ "; java.lang.String ext@@ Id@@ 1 = "@@ foo@@ :@@ b@@ ar@@ "; java.lang.String ext@@ Id@@ 2 = "@@ foo@@ :@@ b@@ a@@ z@@ "; db.account@@ ExternalId@@ s().@@ insert@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ create@@ ExternalId@@ With@@ Email@@ (@@ ext@@ Id@@ 1, email@@ ), create@@ With@@ Email@@ (@@ ext@@ Id@@ 2, email@@ ))); account@@ Cache.@@ e@@ vi@@ ct@@ (@@ admin@@ .@@ id@@ ); assert@@ Th@@ at(@@ gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s().@@ st@@ ream@@ ().@@ map@@ (( e) -@@ > e.@@ id@@ enti@@ ty@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()@@ )).@@ contains@@ All@@ Of(@@ ext@@ Id@@ 1, ext@@ Id@@ 2); re@@ Current@@ User@@ (); assert@@ Th@@ at(@@ get@@ Email@@ s@@ ()).@@ contains(@@ email@@ ); gApi.@@ account@@ s().@@ self@@ ().@@ delete@@ Email@@ (@@ email@@ ); re@@ set@@ Api@@ User@@ (); assert@@ Th@@ at(@@ get@@ Email@@ s@@ ())@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ (@@ email@@ ); assert@@ Th@@ at(@@ gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s().@@ st@@ ream@@ ().@@ map@@ (( e) -@@ > e.@@ id@@ enti@@ ty@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()@@ )).@@ contains@@ N@@ one@@ Of(@@ ext@@ Id@@ 1, ext@@ Id@@ 2); }
private java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > get@@ ExternalId@@ s(@@ com.google.gerrit.acceptance.@@ Test@@ Account account@@ ) throw@@ s java.lang.Exception { return account@@ Cache@@ .get(@@ account@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); }
@org.junit.Test public void no@@ ExternalId@@ s() throw@@ s java.lang.Exception { com.google.gerrit.gpg.@@ PublicKey@@ Check@@ er check@@ er = check@@ er@@ Factory.create@@ (user@@ , st@@ ore@@ Tr@@ u@@ st@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , "@@ N@@ o id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ ; check@@ er = check@@ er@@ Factory.create@@ (user@@ , st@@ ore@@ ).@@ dis@@ able@@ Tr@@ u@@ st@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ ; ch@@ ec@@ k http@@ :@@ /@@ /@@ #@@ /@@ set@@ t@@ ing@@ s/@@ (@@ st@@ ore@@ ).@@ dis@@ able@@ Tr@@ u@@ st@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , is not as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ y user@@ s@@ "); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (user@@ .getAccount@@ Id(), com.google.gerrit.gpg.@@ Gerrit@@ PublicKey@@ Check@@ er.@@ to@@ Ex@@ t@@ Id@@ Key@@ (key@@ .get@@ PublicKey@@ ())@@ ))); re@@ load@@ User@@ (); assert@@ Pro@@ ble@@ m@@ s(@@ check@@ er.@@ check@@ (key@@ .get@@ PublicKey@@ ()), Status.@@ B@@ AD@@ , id@@ enti@@ ti@@ es fo@@ un@@ d for user@@ "); } user }@@ , false@@ ); }
@java.lang.Override public java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException { if ((@@ self@@ .get@@ ()) != (@@ resource@@ .getUser@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ e@@ t ext@@ er@@ n@@ al ID@@ s } java.util.Collection<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> id@@ s = db@@ .get().@@ account@@ ExternalId@@ s().@@ by@@ Account@@ (@@ resource@@ .getUser@@ ().get@@ Account@@ Id@@ ()).@@ to@@ List(); if (id@@ s.@@ isEmpty()) { return com.google.common.collect.Immutable@@ List.@@ of@@ (); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List@@ With@@ Cap@@ ac@@ it@@ y(@@ id@@ s.@@ size()); for (@@ com.google.gerrit.reviewdb.client.@@ Account ac@@ it@@ Id : id@@ s) { com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ (); info.@@ id@@ enti@@ t@@ y = id@@ .get@@ ExternalId@@ (); info.@@ email@@ Add@@ res@@ s = id@@ .get@@ Email@@ Add@@ res@@ s(); info.@@ tr@@ u@@ st@@ ed = com.google.gerrit.server.account.@@ Get@@ ExternalId@@ s.@@ to@@ Boolean@@ (@@ auth@@ Config.@@ is@@ Id@@ enti@@ ty@@ Tr@@ u@@ st@@ able@@ (@@ java.util.Collections.singleton@@ (@@ id@@ ))); if (!(@@ id@@ .is@@ S@@ che@@ me@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E@@ ))@@ ))) { com.google.gerrit.reviewdb.client.@@ Account a = resource@@ .getUser@@ ().get@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ Key@@ (); info.@@ can@@ De@@ le@@ te = com.google.gerrit.server.account.@@ Get@@ ExternalId@@ s.@@ to@@ Boolean@@ (((@@ las@@ t == null@@ ) || (!(@@ last@@ .get().@@ e@@ qual@@ s@@ (@@ info.@@ id@@ enti@@ ty@@ ))@@ ))); } result.@@ add(@@ info@@ ); } return result@@ ; }
@org.junit.Test public void add@@ O@@ th@@ er@@ User@@ s@@ G@@ pg@@ Key@@ _@@ Conflict@@ () throw@@ s java.lang.Exception { add@@ ExternalId@@ Email@@ (@@ admin@@ , "@@ test@@ 5@@ @@@ ex@@ amp@@ le.@@ com@@ "); com.google.gerrit.reviewdb.client.Account@@ External@@ Id ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ (user@@ .getId@@ (), new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ ("@@ foo@@ :@@ my@@ Id@@ ")); db.account@@ ExternalId@@ s().@@ insert@@ (@@ java.util.Collections.singleton@@ (@@ ext@@ Id@@ )); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getId()); com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey = valid@@ Key@@ With@@ Se@@ con@@ d@@ User@@ Id(); add@@ G@@ pg@@ Key@@ (key@@ .get@@ PublicKey@@ Ar@@ mo@@ red@@ ()); set@@ Api@@ User@@ (user@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ G@@ P@@ G k@@ ey al@@ read@@ y as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h an@@ oth@@ er account@@ "); add@@ G@@ pg@@ Key@@ (key@@ .get@@ PublicKey@@ Ar@@ mo@@ red@@ ()); }
@org.junit.@@ Af@@ ter public void rest@@ ore@@ ExternalId@@ s() throw@@ s java.lang.Exception { if ((@@ s@@ av@@ ed@@ ExternalId@@ s) != null@@ ) { db.account@@ ExternalId@@ s().@@ delete@@ (get@@ ExternalId@@ s(@@ admin@@ )); db.account@@ ExternalId@@ s().@@ delete@@ (get@@ ExternalId@@ s(@@ user@@ )); db.account@@ ExternalId@@ s(@@ admin@@ )); db.account@@ ExternalId@@ s().@@ insert@@ (s@@ av@@ ed@@ ExternalId@@ s); } account@@ Cache.@@ e@@ vi@@ ct@@ (@@ admin@@ .getId()); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getId()); }
@java.lang.Override public java.lang.String apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.server.account.@@ P@@ ut@@ User@@ name.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t user@@ name@@ "); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ US@@ ER@@ _@@ NAM@@ E@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w edit@@ ing user@@ name@@ "); } if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.server.account.@@ P@@ ut@@ User@@ name.@@ Input@@ (); } try { change@@ User@@ Name@@ Factory.create@@ (db@@ .get(), rsrc@@ .getUser@@ (), input.@@ user@@ name@@ ).@@ call@@ (); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception e) { if (@@ Change@@ User@@ Name.@@ US@@ ER@@ NAM@@ E_@@ C@@ AN@@ NO@@ T_@@ B@@ E_@@ CHANG@@ ED@@ .equals(@@ e.get@@ Message@@ ())) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception(@@ e.get@@ Message()); } throw e@@ ; } catch (com.google.gerrit.server.@@ account.@@ Invalid@@ User@@ Name@@ Exception e) { throw new com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception("@@ in@@ vali@@ d user@@ name@@ "); } catch (@@ com.google.gerrit.common.@@ errors.@@ Name@@ Al@@ read@@ y@@ U@@ sed@@ Exception e) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ in@@ al@@ read@@ y use@@ d use@@ d "); } return input.@@ user@@ name@@ ; }
private com.google.gerrit.server.account.@@ Auth@@ Result auth@@ (@@ final com.google.gerrit.reviewdb.client.Account.Id account@@ ) { if (@@ ac@@ count != null@@ ) { return new com.google.gerrit.server.account.@@ Auth@@ Result@@ (@@ ac@@ .getAccount@@ Id@@ (), null@@ , false@@ ); } return null@@ ; }
private com.google.gerrit.server.account.@@ Auth@@ Result by@@ User@@ Name@@ (@@ final java.lang.String user@@ Name) { try { com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key ext@@ Id = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ Name); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Quer@@ y.@@ by@@ ExternalId@@ (@@ ext@@ Key@@ .get()); if (account@@ St@@ at@@ es.@@ isEmpty()) { get@@ Servlet@@ Context@@ ().@@ log@@ ((@@ ("@@ A@@ ut@@ h account@@ s w@@ it@@ h user@@ name " + user@@ Name) + " fo@@ un@@ d return null@@ ; } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { get@@ Servlet@@ Context@@ ().@@ log@@ ((@@ ("@@ Id@@ enti@@ t@@ ing account@@ s w@@ it@@ h user@@ name@@ ") + user@@ Name) + " fo@@ un@@ d return null@@ ; } return h@@ a@@ ut@@ Key@@ ; } catch (com.google.gwtorm.server.OrmException e) { get@@ Servlet@@ Context@@ ().@@ log@@ (@@ "@@ int@@ er@@ n@@ al ac@@ count in@@ de@@ x x x x for user@@ ", e); return null@@ ; } }
@org.junit.Test public void l@@ ook@@ Up@@ From@@ Cache@@ By@@ Email@@ () throw@@ s java.lang.Exception { assert@@ Email@@ (@@ by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ email@@ ), admin@@ ); java.lang.String e@@ mai@@ l = "@@ foo@@ .@@ b@@ ar@@ @@@ ex@@ amp@@ le.@@ com@@ "; java.lang.String b@@ as@@ ExternalId@@ .@@ from@@ (@@ org.eclipse.jgit.lib.@@ Con@@ stant@@ s.@@ I@@ .@@ of@@ (@@ name@@ ))) { java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = "@@ Email@@ "; java.lang.String e@@ mai@@ l = by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ e@@ mail.@@ to@@ Up@@ per@@ Case@@ (@@ java.util.@@ Lo@@ c@@ a@@ le.@@ US@@ )@@ )).@@ isEmpty@@ (); assert@@ Th@@ at(@@ by@@ Email@@ Cache@@ .get(@@ admin@@ .@@ e@@ mail.@@ substring@@ (@@ 0, admin@@ .@@ e@@ mail.@@ index@@ Of(@@ '@@ @@@ '@@ ))@@ )).@@ isEmpty@@ (); assert@@ Th@@ at(@@ by@@ Email@@ Cache@@ .get@@ ("@@ n@@ on@@ -@@ ex@@ ist@@ ing@@ @@@ ex@@ amp@@ le.@@ com@@ "@@ )).@@ isEmpty@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l rsrc@@ , com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to de@@ le@@ te e@@ mai@@ l add@@ ress@@ "); } return apply(@@ rsrc@@ .getUser@@ (), rsrc@@ .get@@ Email@@ ()); }
Account@@ External@@ Id get@@ L@@ ast@@ Lo@@ gin@@ ExternalId@@ ();
private void assert@@ Key@@ s(@@ java.lang.I@@ terable@@ <@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key@@ > expected@@ Key@@ s) throw@@ s java.lang.Exception { com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ <@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key@@ > exp@@ ected = com.google.common.collect.@@ F@@ lu@@ ent@@ I@@ terable@@ .@@ from@@ (@@ expected@@ Key@@ s); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.@@ G@@ pg@@ Key@@ Info> key@@ Ma@@ p = gApi.@@ account@@ s().@@ self@@ ().@@ list@@ G@@ pg@@ Key@@ s(); assert@@ Th@@ at(@@ key@@ Set@@ ()).@@ nam@@ ed@@ ("@@ Su@@ ggest@@ ed b@@ y list@@ G@@ pg@@ Key@@ s() for (@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey : expected@@ ) { com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ E@@ quals(@@ key@@ , gApi.@@ account@@ s().@@ self@@ ()@@ .g@@ pg@@ Key@@ (key@@ .getKey@@ Id@@ String@@ ()); com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ E@@ quals(@@ key@@ , gApi.@@ account@@ s().@@ self@@ ()@@ .g@@ pg@@ Key@@ (@@ com.google.gerrit.gpg.@@ F@@ ing@@ er@@ p@@ r@@ int@@ .@@ toString@@ (key@@ .get@@ PublicKey@@ ().get@@ F@@ ing@@ er@@ p@@ r@@ int@@ ())@@ ).get@@ ()); com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ IT@@ .@@ assert@@ Key@@ Map@@ s(@@ key@@ , key@@ Map@@ ); } com.google.gerrit.reviewdb.client.Account.Id cur@@ r@@ Account@@ Id = at@@ r@@ S@@ cop@@ e.get@@ ().get@@ User@@ ().get@@ Account@@ Id(); java.lang.I@@ terable@@ <java.lang.String> expected@@ F@@ p@@ s = expected@@ expected@@ expected@@ expected@@ expected@@ expected@@ expected@@ expected@@ .@@ tran@@ s@@ for@@ m@@ (@@ k@@ ey != null@@ ) ? com.google.gerrit.gpg.@@ server.@@ G@@ pg@@ Key@@ s.get@@ G@@ pg@@ Key@@ s(@@ db, cur@@ r@@ Account@@ Id@@ ).@@ tran@@ s@@ for@@ m@@ (@@ Account@@ ExternalId@@ :@@ get@@ S@@ che@@ me@@ Res@@ t@@ ) : expected@@ F@@ )); assert@@ Th@@ at(@@ act@@ u@@ al@@ F@@ ps@@ ).@@ nam@@ ed@@ ("@@ ID@@ s in dat@@ ab@@ ase for (@@ com.google.gerrit.gpg.@@ test@@ util.@@ Test@@ Key k@@ ey : expected@@ ) { get@@ Only@@ Key@@ From@@ Store@@ ); } }
public boolean is@@ Id@@ enti@@ ty@@ Tr@@ u@@ st@@ able@@ (@@ final java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > id@@ s) { switch (get@@ Auth@@ Type@@ ()) { case DE@@ V@@ E@@ LO@@ P@@ M@@ EN@@ T_@@ B@@ EC@@ O@@ M@@ E_@@ AN@@ Y_@@ AC@@ CO@@ UN@@ T : case H@@ T@@ T@@ P : case H@@ T@@ T@@ P@@ _@@ L@@ D@@ A@@ P : case L@@ D@@ A@@ P : case C@@ LI@@ EN@@ T_@@ S@@ S@@ L@@ _@@ C@@ ER@@ T_@@ L@@ D@@ A@@ P : case C@@ U@@ ST@@ O@@ M@@ _@@ E@@ X@@ T@@ EN@@ S@@ IO@@ N : case O@@ A@@ UT@@ H : return true@@ ; case O@@ P@@ EN@@ ID@@ _S@@ S@@ O : return true@@ ; case O@@ P@@ EN@@ I@@ D : for (@@ final com.google.gerrit.reviewdb.@@ External@@ Id : id@@ s) { if (!(@@ st@@ ed@@ ed@@ (@@ e@@ ))) { return false@@ ; } } } return true@@ ; default : return false@@ ; } }
private com.google.gerrit.reviewdb.client.@@ Account get@@ Account@@ By@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ExternalId@@ .@@ Key ext@@ er@@ n@@ al@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > account@@ State@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ ExternalId@@ (@@ ext@@ er@@ n@@ al@@ Id@@ ); if (account@@ St@@ at@@ es.@@ isEmpty()) { return null@@ ; } if ((@@ account@@ St@@ at@@ es.@@ size@@ ()) > 1@@ ) { java.lang.String@@ Builder ms@@ g = new java.lang.String@@ Builder@@ (); ms@@ g.@@ append("@@ G@@ erri@@ t k@@ ey ").@@ append(@@ ext@@ er@@ n@@ al@@ Id@@ ).@@ append(@@ "@@ as@@ so@@ c@@ i@@ ate@@ d w@@ it@@ h m@@ pl@@ e account@@ s@@ : "); com.google.common.base.@@ J@@ o@@ in@@ er.@@ on@@ ("@@ , ").@@ tran@@ s@@ for@@ m@@ (account@@ St@@ at@@ es@@ , Account@@ State.@@ AC@@ CO@@ UN@@ T_@@ ID@@ _@@ F@@ UN@@ C@@ T@@ ION@@ )); log.error@@ (@@ ms@@ g.@@ toString@@ ()); throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ ms@@ g.@@ toString@@ ()); } return account@@ St@@ at@@ es@@ .get(@@ 0@@ ).get@@ Account@@ (); }
@java.lang.Override public void delete@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { com.google.gerrit.server.account.Account@@ Resource@@ .@@ E@@ mai@@ l r@@ sr@@ c = new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (account@@ .getUser@@ (), email@@ ); try { delete@@ E@@ mail.@@ apply(@@ rsrc@@ , null@@ ); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te email@@ ", e); } }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key k@@ ey = new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ name); com.google.gerrit.reviewdb.client.Account@@ State account@@ State = account@@ Query@@ Provider@@ .get().@@ one@@ By@@ ExternalId@@ (@@ ExternalId@@ .@@ key@@ ); return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (account@@ State@@ ).@@ map@@ (( s.get@@ Account@@ Id()); }
private static com.google.gerrit.server.account.Account@@ State mis@@ s@@ ing@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id@@ ) { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = new com.google.gerrit.reviewdb.client.Account@@ (account@@ Id, com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); account.@@ set@@ Active@@ (@@ false@@ ); java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > id@@ s = java.util.Collections.@@ empty@@ Set@@ (); java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > an@@ on = com.google.common.collect.Immutable@@ Set.@@ of@@ (); return new com.google.gerrit.server.account.Account@@ State@@ (account@@ , an@@ on@@ , id@@ s, new java.util.Hash@@ Map@@ <@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ ProjectWatch@@ Key@@ , java.util.Set<@@ com.google.gerrit.server.account.@@ Watch@@ Config.@@ No@@ t@@ if@@ y@@ Type@@ >@@ >@@ ()); }
private java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > load@@ (@@ final com.google.gerrit.reviewdb.server.ReviewDb db, final com.google.gerrit.reviewdb.client.Account.Id wh@@ o@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = db.account@@ s@@ ().get@@ (@@ wh@@ o@@ ); if (@@ ac@@ count == null@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } java.util.Set<@@ com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ > ext@@ er@@ n@@ al@@ Id@@ s = java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ Collec@@ tion@@ (@@ db.account@@ ExternalId@@ s().@@ by@@ Account@@ (@@ wh@@ o@@ ).to@@ List@@ ()); java.util.Set<@@ com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ > int@@ er@@ n@@ al@@ Group@@ s = new java.util.Hash@@ Set<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er g : db.account@@ Group@@ Member@@ s().@@ by@@ Account@@ (@@ wh@@ o@@ )) { final com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id = g@@ .getAccount@@ Group@@ Id(); final com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = group@@ Cache@@ .get(@@ group@@ Id); if ((@@ g@@ roup != null@@ ) && ((@@ group@@ .get@@ Group@@ UUID@@ ()) != null@@ )) { int@@ er@@ n@@ al@@ Group@@ s.add(@@ group@@ .get@@ Group@@ UUID@@ ()); } } int@@ er@@ n@@ al@@ Group@@ s = java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ Set@@ (@@ int@@ er@@ n@@ al@@ Group@@ s); try { account.@@ set@@ General@@ Preferences@@ (@@ load@@ er.@@ load@@ (@@ wh@@ o@@ )); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { com.google.gerrit.server.account.Account@@ Cache@@ Impl.@@ log.warn@@ ((@@ ("@@ Cannot lo@@ ad General@@ Preferen@@ ce@@ s for " + wh@@ o@@ ) + (@@ default@@ ) (@@ com.google.gerrit.extensions.client.@@ General@@ Preferences@@ Info.@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (account@@ , int@@ er@@ n@@ al@@ Id@@ s, w@@ atch@@ Config@@ .get@@ ProjectWatch@@ ().get@@ ProjectWatch@@ es(@@ wh@@ o@@ ))); } } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.google.gerrit.server.account.Account@@ State@@ (account@@ , int@@ er@@ n@@ al@@ Group@@ s, ext@@ er@@ n@@ al@@ Id@@ s, w@@ atch@@ Config@@ .get@@ ProjectWatch@@ ().get@@ ProjectWatch@@ es(@@ wh@@ o@@ ))); }
@java.lang.Override public java.util.@@ Optional@@ <@@ com.google.gerrit.reviewdb.client.Account.@@ Id> load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb d@@ b = db@@ Provi@@ der.@@ open@@ ()) { return java.util.@@ Optional@@ .@@ of@@ Null@@ able@@ (@@ db.account@@ ExternalId@@ s@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ ((((@@ ExternalId@@ .@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E@@ ) + "@@ :@@ ") + user@@ name@@ ))@@ )).@@ map@@ (@@ Account@@ ExternalId@@ :@@ get@@ Account@@ Id); }
@java.lang.Override public boolean has@@ Email@@ Add@@ res@@ s(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String email@@ ) { for (@@ com.google.gerrit.reviewdb.client.Account.Id id : user@@ .@@ state@@ ().get@@ ExternalId@@ s()) { if ((@@ e@@ mai@@ l != null@@ ) && (@@ e@@ mail.@@ e@@ qual@@ s@@ I@@ g@@ no@@ re@@ Case@@ (@@ ext@@ Id.@@ email@@ ()))) { return true@@ ; } } return false@@ ; }
@java.lang.Override public void delete@@ () throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { de@@ le@@ t@@ e.@@ apply(@@ rsrc@@ , new com.google.gerrit.gpg.@@ server.@@ Delete@@ G@@ pg@@ Key@@ .@@ Input@@ ()); } catch (@@ org.@@ bo@@ unc@@ yc@@ ast@@ le.@@ open@@ pg@@ p.@@ P@@ G@@ P@@ Exception | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te G@@ P@@ G k@@ ey ", e); } }
private void delete@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ e@@ mail.@@ e@@ quals("@@ AL@@ L@@ ")) { java.util.List<@@ com.google.gerrit.extensions.common.@@ Email@@ Info> email@@ s = get@@ Email@@ s.@@ apply(@@ rsrc@@ ); for (@@ com.google.gerrit.extensions.common.@@ Email@@ Info e : email@@ s) { delete@@ E@@ mail.@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (user@@ , e.@@ email@@ ), new com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input@@ ()); } } else { delete@@ E@@ mail.@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Email@@ (user@@ , email@@ ), new com.google.gerrit.server.account.@@ Delete@@ E@@ mail.@@ Input@@ ()); } }
private void add@@ Email@@ (java.lang.String email@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ Failure@@ , com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input in = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input@@ (); in.@@ e@@ mai@@ l = email@@ ; in.@@ no@@ Con@@ fi@@ r@@ m@@ ation = true@@ ; try { create@@ Email@@ Factory.create@@ (@@ email@@ ).@@ apply(@@ rsrc@@ , in@@ ); } catch (@@ com.google.gerrit.common.@@ errors.@@ Email@@ Exception e) { throw di@@ e@@ (@@ e.get@@ Message()); } }
@java.lang.Override public java.util.@@ Set@@ <java.lang.String> get@@ Email@@ Add@@ ress@@ es@@ (com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ ) { java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > id@@ s = user@@ .@@ state@@ ().get@@ ExternalId@@ s(); java.util.@@ Set@@ <java.lang.String> email@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (id@@ s.@@ size()); for (@@ com.google.gerrit.reviewdb.client.@@ Account ac@@ count : id@@ s) { if (!(@@ com.google.common.base.Strings.@@ isNull@@ Or@@ Empty(@@ ext@@ Id.@@ is@@ Add@@ res@@ s.@@ Email@@ Add@@ res@@ s.@@ email@@ ()))) { email@@ s.add(@@ ext@@ .get@@ Email@@ Add@@ res@@ s(); } } } return email@@ s; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <@@ com.google.gerrit.extensions.common.@@ Email@@ Info> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input input@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Email@@ Exception, com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception, com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to ad@@ d e@@ mai@@ l add@@ ress@@ "); } if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.extensions.api.@@ account@@ s.@@ Email@@ Input@@ (); } if (!@@ (com.google.gerrit.server.@@ mail.@@ sen@@ d.@@ Out@@ g@@ o@@ ing@@ Email@@ Validator@@ .is@@ Vali@@ d(@@ email@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ in@@ vali@@ d e@@ mai@@ l add@@ ress@@ "); } if ((@@ input.@@ no@@ Con@@ fi@@ r@@ m@@ ation@@ ) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Mo@@ d@@ if@@ y@@ Account@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to u@@ se no@@ _@@ con@@ fi@@ r@@ m@@ ation fi@@ r@@ m@@ ation "); } if (!(@@ re@@ al@@ m.@@ allow@@ s@@ Edit@@ (@@ Account@@ Fiel@@ d@@ Name.@@ RE@@ G@@ I@@ ST@@ ER@@ _@@ N@@ EW@@ _@@ E@@ M@@ A@@ IL@@ ))) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ re@@ al@@ m do@@ es not al@@ lo@@ w add@@ ing email@@ s@@ "); } return apply(@@ rsrc@@ .getUser@@ (), input@@ ); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ , com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (in@@ pu@@ t == null@@ ) { inpu@@ t = new com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d.@@ Input@@ (); } input.@@ http@@ P@@ asswor@@ d = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (in@@ pu@@ t.@@ http@@ P@@ asswor@@ d); java.lang.String new@@ P@@ asswor@@ d@@ ; if (in@@ put@@ .g@@ ener@@ ate@@ ) { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to g@@ ener@@ ate H@@ T@@ P p@@ asswor@@ d@@ "); } new@@ P@@ asswor@@ d = com.google.gerrit.server.account.@@ P@@ ut@@ Http@@ P@@ asswor@@ d@@ .g@@ ener@@ ate@@ (); } else if ((@@ input.@@ http@@ P@@ asswor@@ d@@ ) == null@@ ) { if (((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) && (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ()))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to c@@ le@@ a@@ r H@@ T@@ P p@@ asswor@@ d@@ "); } new@@ P@@ asswor@@ d = null@@ ; } else { if (!(@@ self@@ .get@@ ().get@@ Capabili@@ ti@@ es@@ ().@@ can@@ Ad@@ min@@ ist@@ r@@ ate@@ Server@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception@@ (("@@ not allow@@ ed to se@@ t H@@ T@@ T@@ P p@@ asswor@@ d di@@ re@@ ct@@ ly@@ , " + "@@ requ@@ i@@ re@@ s th@@ e Ad@@ min@@ ist@@ r@@ ate Ser@@ ve@@ r per@@ mis@@ sion per@@ mis@@ sion sion = input.@@ http@@ P@@ asswor@@ d@@ ; } return apply(@@ rsrc@@ .getUser@@ (), new@@ P@@ asswor@@ d); }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if ((@@ user@@ .getUser@@ Name@@ ()) == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ "); } com.google.gerrit.server.account.@@ External@@ Id id = db@@ Provider@@ .get().@@ account@@ ExternalId@@ s@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ ExternalId@@ .@@ Key@@ (@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ .getUser@@ Name@@ ())); if (@@ id == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } id@@ .set@@ P@@ asswor@@ d(@@ com.google.gerrit.server.account.@@ Hash@@ ed@@ Hash@@ ed@@ P@@ asswor@@ d.@@ from@@ P@@ asswor@@ d@@ (@@ new@@ P@@ asswor@@ d@@ ).@@ en@@ code@@ ()); db@@ Provider@@ .get().@@ account@@ ExternalId@@ s@@ ().get@@ (id@@ ); account@@ Cache.@@ e@@ vi@@ ct@@ (user@@ .getAccount@@ Id()); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d@@ ) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@java.lang.Override public java.lang.I@@ terable@@ <@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { try (@@ com.google.gerrit.reviewdb.server.ReviewDb d@@ b = schema.@@ open@@ ()) { com.google.gerrit.reviewdb.client.Change c = db.@@ changes@@ ().get@@ (@@ k@@ ); if (@@ user == null@@ ) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _S@@ U@@ CH@@ _@@ US@@ ER@@ ; } java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); for (@@ com.google.gerrit.reviewdb.client.Account@@ Ssh@@ Key k : auth@@ ori@@ zed@@ Key@@ s.get@@ Key@@ s(@@ user@@ .@@ get@@ Account@@ Id@@ ())) { if (@@ k.@@ is@@ Valid@@ ()) { add(@@ k@@ , k@@ ); } } if (@@ k@@ l.@@ isEmpty()) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _@@ K@@ E@@ Y@@ S@@ ; } return java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ List(@@ k@@ l@@ ); } }
@org.junit.Test public void get@@ External@@ ID@@ s() throw@@ s java.lang.Exception { java.util.Collection<@@ com.google.gerrit.server.account.@@ ExternalId@@ > expected@@ Id@@ s = account@@ Cache@@ .get(@@ user@@ .getId@@ ()@@ ).get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> expected@@ Id@@ Info@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.reviewdb.client.Account@@ External@@ Id id : expected@@ Id@@ s) { id@@ .set@@ Can@@ Delete@@ ((@@ !(@@ id@@ .get@@ ExternalId@@ ().@@ e@@ qual@@ s@@ (("@@ user@@ name@@ :@@ " + (user@@ .@@ user@@ name@@ ))@@ )@@ ))); id@@ .set@@ Tr@@ u@@ st@@ ed@@ (@@ true@@ ); expected@@ Id@@ Info@@ s.add(@@ com.google.gerrit.acceptance.@@ Rest@@ Response res@@ pon@@ se = user@@ Rest@@ Session@@ .get@@ ("/@@ account@@ s/@@ self@@ /@@ ext@@ er@@ n@@ al@@ .@@ id@@ s@@ "); res@@ pon@@ se@@ .@@ assert@@ O@@ K@@ (); java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> result@@ s = new@@ G@@ son@@ ().@@ from@@ Json@@ (@@ res@@ pon@@ se@@ .get@@ Read@@ er@@ (), new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info@@ >@@ >() {@@ }@@ .get@@ Type@@ ()); java.util.Collections.s@@ ort@@ (@@ expected@@ Id@@ Info@@ s); java.util.Collections.s@@ ort@@ (@@ result@@ s); assert@@ Th@@ at(@@ result@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Id@@ Info@@ s); }
@java.lang.Override public void delete@@ ExternalId@@ s(@@ java.util.List<java.lang.String> ext@@ er@@ n@@ al@@ Id@@ s) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception { try { delete@@ ExternalId@@ s.@@ apply(@@ account@@ , ext@@ er@@ n@@ al@@ Id@@ s); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApi@@ Exception("@@ Cannot de@@ le@@ te ext@@ er@@ n@@ al ID@@ s", e); } }
@java.lang.Override public void lo@@ gin@@ (@@ final com.google.gerrit.server.account.@@ Auth@@ Result res@@ , final boolean re@@ me@@ mber@@ M@@ e) { final com.google.gerrit.reviewdb.client.Account.Id id = res@@ .getAccount@@ Id(); final com.google.gerrit.reviewdb.client.@@ Account ac@@ count = res@@ .get@@ External@@ Id@@ ().@@ as@@ Account@@ ExternalId@@ (); if ((@@ va@@ l@@ ) != null@@ ) { m@@ anag@@ er.@@ dest@@ ro@@ y(@@ key@@ ); } k@@ ey = m@@ anag@@ er.@@ create@@ Key@@ (id@@ ); va@@ l = m@@ anag@@ er.@@ create@@ Val@@ (key@@ , id@@ , re@@ me@@ mber@@ Me@@ , id@@ enti@@ ty@@ , null@@ ); save@@ C@@ ook@@ i@@ e@@ (); user = id@@ ent@@ if@@ i@@ ed@@ .create@@ (@@ va@@ l@@ .getAccount@@ Id()); }
private java.lang.String read@@ Respon@@ se@@ (@@ java.io.@@ Input@@ Stream res@@ pon@@ se@@ ) { try { java.util.@@ S@@ can@@ ne@@ r s@@ can@@ ner@@ r = new java.util.@@ S@@ can@@ ner@@ (@@ res@@ pon@@ se@@ Stream@@ , "@@ UT@@ F@@ -@@ 8@@ ").@@ use@@ De@@ li@@ mit@@ er@@ ("@@ \@@ \@@ A@@ ")); return s@@ can@@ n@@ er.@@ next@@ (); } catch (@@ java.lang.Exception e) { throw new java.lang.@@ Run@@ time@@ Exception@@ ((@@ ("@@ E@@ rror read@@ ing read@@ ing res@@ pon@@ se@@ : " + (@@ e.get@@ Message@@ ())) + "@@ ]@@ "), e); } }
private void add@@ Submit@@ Recor@@ d@@ Requ@@ i@@ re@@ ment@@ s(@@ Submit@@ Recor@@ d submit@@ Recor@@ d@@ , com.google.gerrit.server.@@ data.@@ Submit@@ Recor@@ d@@ Attri@@ but@@ e s@@ a@@ ) { if (((@@ submit@@ Recor@@ d.@@ requ@@ i@@ re@@ ment@@ s) != null@@ ) && (!(@@ submit@@ Recor@@ d.@@ requ@@ i@@ re@@ ment@@ s.@@ isEmpty@@ ()))) { s@@ a.@@ requ@@ i@@ re@@ ment@@ s = new java.util.Array@@ List(); for (@@ com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ q : submit@@ Recor@@ d.@@ requ@@ i@@ re@@ ment@@ s) { com.google.gerrit.server.@@ data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ Attri@@ but@@ e r@@ e = new com.google.gerrit.server.@@ data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ Attribute@@ (); re@@ as@@ on = req@@ .@@ short@@ Re@@ as@@ on@@ (); re@@ as@@ on = req@@ .@@ short@@ Re@@ as@@ on@@ (); re@@ as@@ on = req@@ .@@ f@@ ull@@ (); re@@ as@@ on = req@@ .@@ label@@ (); re@@ a.@@ requ@@ i@@ re@@ ment@@ s.add(@@ re@@ ); } } }
public com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d submit@@ Type@@ Recor@@ d(@@ ) { if ((@@ submit@@ Type@@ Recor@@ d@@ ) == null@@ ) { submit@@ Type@@ Recor@@ d = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (@@ com.google.gerrit.server.query.@@ change.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).get@@ Submit@@ Type@@ Recor@@ d@@ (); } return submit@@ Type@@ Recor@@ d@@ ; }
private com.google.gerrit.server.project.@@ Submit@@ Rule@@ E@@ valu@@ at@@ or ma@@ k@@ e@@ E@@ valu@@ ator@@ () { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ project@@ "); com.google.gerrit.server.query.change.Change@@ Data c@@ d = com.google.gerrit.server.query.change.Change@@ Dat@@ a.@@ create@@ For@@ Test@@ (project@@ , new com.google.gerrit.reviewdb.client.Change.@@ Id@@ (1@@ ), c@@ d.@@ set@@ Change@@ (@@ com.google.gerrit.@@ test@@ ing.@@ Test@@ Changes@@ .@@ new@@ Change@@ (project@@ , com.google.gerrit.server.project.@@ Submit@@ Rule@@ s@@ E@@ valu@@ ator@@ Test.@@ AD@@ M@@ IN@@ _@@ US@@ ER@@ )); return e@@ valu@@ ator@@ Factory.create@@ (c@@ d); }
@org.junit.Test public void con@@ ver@@ t@@ s@@ Pro@@ log@@ To@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.server.project.@@ Submit@@ Rule@@ E@@ valu@@ at@@ or e@@ valu@@ at@@ or = ma@@ k@@ e@@ E@@ valu@@ ator@@ (); java.util.List<@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m@@ > ter@@ m@@ s = new java.util.ArrayList<@@ >(); com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ve@@ r@@ if@@ i@@ ed@@ L@@ abe@@ l = ma@@ k@@ e@@ Label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", "@@ ma@@ y@@ "); com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m label@@ s = new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ T@@ er@@ m@@ ("@@ label@@ ", ve@@ r@@ if@@ i@@ ed@@ Label@@ ); ter@@ m@@ s.add(@@ ma@@ k@@ e@@ T@@ er@@ m@@ ("@@ label@@ s@@ ", label@@ s@@ )); java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > re@@ cor@@ d@@ s = e@@ valu@@ ator@@ .@@ result@@ s@@ To@@ Submit@@ Recor@@ d@@ (@@ null@@ , ter@@ m@@ s); assert@@ Th@@ at(@@ re@@ cor@@ d@@ s).@@ hasSize@@ (1); }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m ma@@ k@@ e@@ T@@ er@@ m@@ (java.lang.String statu@@ s, com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m label@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ statu@@ s, label@@ s); }
public Reviewer@@ Info for@@ m@@ at(@@ Reviewer@@ Info out@@ , com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Change per@@ m@@ , com.google.gerrit.server.query.change.Change@@ Data cd@@ , java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Label@@ Type@@ s label@@ Type@@ s = cd@@ .get@@ Label@@ Typ@@ es@@ (); out.@@ approval@@ s = new java.util.@@ Tree@@ Map@@ (@@ label@@ Typ@@ es.@@ name@@ Comp@@ ar@@ ator@@ ()); for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l c@@ a : approval@@ s) { com.google.gerrit.common.data.@@ Label@@ Type a@@ t = label@@ Typ@@ es.@@ by@@ Label@@ (c@@ a@@ .get@@ Label@@ Id()); if (@@ a@@ t != null@@ ) { out.@@ approval@@ s.@@ put(@@ at@@ .getName@@ (), for@@ m@@ at@@ Value@@ (c@@ a@@ .getValue@@ ())); } } com.google.gerrit.reviewdb.client.PatchSet p@@ s = c@@ d.@@ currentPatchSet@@ (); if (p@@ s != null@@ ) { for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c : submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (@@ com.google.gerrit.server.@@ change.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).@@ e@@ valu@@ ate@@ (@@ cd@@ )) { if ((@@ re@@ c.@@ label@@ s) == null@@ ) { continue@@ ; } for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l l@@ abe@@ l : re@@ c.@@ label@@ s) { java.lang.String name = l@@ abe@@ l.@@ label@@ ; com.google.gerrit.common.data.@@ Label@@ Type typ@@ e = label@@ Typ@@ es.@@ by@@ Label@@ (@@ name); if ((@@ (!(@@ out.@@ approval@@ s.@@ contains@@ Key@@ (@@ name@@ ))) && (@@ typ@@ e != null@@ )) && (@@ per@@ m.@@ test@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Label@@ Permission@@ (@@ type@@ )@@ ))) { out.@@ approval@@ s.@@ put(@@ name, for@@ m@@ at@@ Value@@ ((@@ (@@ short@@ ) (@@ 0@@ )@@ ))); } } } if (@@ out.@@ approval@@ s.@@ isEmpty()) { out.@@ approval@@ s = null@@ ; } return out@@ ; }
public java.util.List<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ ) { com.google.gerrit.reviewdb.client.Change change@@ ; com.google.gerrit.server.@@ project@@ State = project@@ State@@ ; try { change = c@@ d.@@ change@@ (); if (@@ change == null@@ ) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ Change change fo@@ un@@ d "); } project@@ State = project@@ Cache@@ .get@@ (c@@ d@@ ()); if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (c@@ d.@@ project@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { return rule@@ Error@@ (("@@ Cannot l@@ ook@@ ing up change " + (c@@ d@@ .getId@@ ())@@ ), e); } if ((@@ !@@ (@@ op@@ t@@ s@@ ())) && (change@@ .get@@ Statu@@ s().@@ is@@ C@@ lo@@ sed@@ ())) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Recor@@ d.@@ Status.@@ C@@ LO@@ S@@ ED@@ ; return java.util.Collections.singleton@@ List@@ (re@@ c@@ ); } java.util.List<@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ T@@ er@@ m@@ > result@@ s; try { result@@ s = e@@ valu@@ ate@@ Im@@ pl@@ ("@@ lo@@ cate@@ _@@ submit@@ _@@ rule@@ ", "@@ can@@ _@@ submit@@ ", "@@ lo@@ cate@@ _@@ submit@@ _@@ filter@@ ", "@@ result@@ s", cd@@ , project@@ State@@ ); } catch (com.google.gerrit.server.@@ project.@@ Rule@@ E@@ va@@ l@@ Exception e) { return rule@@ Error@@ (@@ e.get@@ Message@@ (), e); } if ((@@ result@@ s.@@ isEmpty()) && (!(@@ rule@@ Error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Sub@@ m@@ it r@@ ul@@ e '@@ %@@ s@@ ' for change %s of %s h@@ a@@ s n@@ o so@@ lu@@ tion.@@ "), get@@ Submit@@ Rule@@ Name@@ (), cd@@ .getId@@ (), project@@ State@@ .getName@@ (), cd@@ .getId@@ (), get@@ Submit@@ Recor@@ d(@@ get@@ Submit@@ Rule@@ (), cd@@ ); } return result@@ s@@ To@@ Submit@@ Recor@@ d(@@ get@@ Submit@@ Rule@@ (), cd@@ ); }
public abstract java.lang.String f@@ ull@@ ();
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ (java.lang.String name, java.lang.String statu@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ name@@ ), new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ statu@@ s@@ )); }
public abstract java.lang.String short@@ Re@@ as@@ on@@ ();
public static com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s.@@ Builder buil@@ der@@ () { return new com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s(@@ com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s@@ DE@@ F@@ A@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ , to@@ Builder@@ (); }
public abstract com.google.gerrit.common.data.@@ Submit@@ Type get@@ Submit@@ Type@@ ();
@@@ com.google.gerrit.common.@@ Null@@ able public abstract java.lang.String label@@ ();
public abstract com.google.gerrit.common.data.@@ Submit@@ Type get@@ Label@@ (@@ @@@ com.google.gerrit.common.@@ Null@@ able java.lang.String label@@ );
public abstract com.google.gerrit.common.data.@@ Submit@@ Type get@@ G@@ lobal@@ Key@@ ();
private com.google.gerrit.extensions.client.@@ Submit@@ Type get@@ Submit@@ Type@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (@@ com.google.gerrit.server.@@ restapi.@@ DE@@ F@@ A@@ U@@ L@@ T_@@ O@@ P@@ T@@ ION@@ S@@ ).get@@ Submit@@ Type@@ Recor@@ d@@ (); if ((@@ re@@ c.@@ statu@@ s) != (@@ Submit@@ Type@@ Recor@@ d.@@ Status.@@ O@@ K@@ )) { throw new com.google.gwtorm.server.Orm@@ Exception@@ (("@@ Sub@@ m@@ it typ@@ e r@@ ul@@ e f@@ ai@@ le@@ d@@ : " + rec@@ )); } return re@@ c.@@ type@@ ; }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ s(@@ com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m.@@ .@@ . label@@ s) { return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", label@@ s); }
public java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ ) { com.google.gerrit.reviewdb.client.Change change@@ ; com.google.gerrit.server.project.Project@@ State project@@ State = try { change = c@@ d.@@ change@@ (); if (@@ change == null@@ ) { throw new com.google.gwtorm.server.Orm@@ Exception("@@ change fo@@ un@@ d "); } project@@ State = project@@ Cache@@ .get@@ (c@@ d.@@ project@@ ()); if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (c@@ d.@@ project@@ ()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception e) { return rule@@ Error@@ (("@@ E@@ rror l@@ ook@@ ing up change " + (c@@ d@@ .getId@@ ())@@ ), e); } if ((@@ !(@@ op@@ t@@ s.@@ allow@@ C@@ lo@@ sed@@ ())) && (change@@ .get@@ Statu@@ s().@@ is@@ C@@ lo@@ sed@@ ())) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = Submit@@ Recor@@ d.@@ Status.@@ C@@ LO@@ S@@ ED@@ ; return java.util.Collections.singleton@@ List@@ (re@@ c@@ ); } return pro@@ log@@ Rule@@ .@@ e@@ valu@@ ate@@ (c@@ d@@ , op@@ t@@ s); }
@java.lang.Override public java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > e@@ valu@@ ate@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ , com.google.gerrit.server.project.@@ Submit@@ Rule@@ Option@@ s op@@ t@@ s) { return get@@ E@@ valu@@ ator@@ (c@@ d@@ , op@@ t@@ s).@@ e@@ valu@@ ate@@ (); }
public static void check@@ Submit@@ Rule@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ , boolean allow@@ C@@ lo@@ sed@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patch@@ Set = c@@ d.@@ currentPatchSet@@ (); if (@@ patch@@ Set == null@@ ) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ mis@@ s@@ ing cur@@ ren@@ t p@@ atch se@@ t for change " + (c@@ d@@ .getId@@ ()))); } java.util.List<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > result@@ s = com.google.gerrit.server.git.@@ Merge@@ Op@@ .get@@ Submit@@ Recor@@ d@@ s(@@ cd@@ , allow@@ C@@ lo@@ sed@@ ); if (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ .@@ can@@ Be@@ ted@@ (@@ result@@ s@@ )) { return@@ ; } else if (@@ result@@ s.@@ isEmpty()) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Submit@@ ted for change %s return@@ ed e@@ mp@@ t@@ y li@@ s@@ t for %s in %@@ s", cd@@ .getId@@ (), patchSet@@ .getId@@ (), c@@ d.@@ change@@ ().get@@ Project@@ ().get@@ ())); } for (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ cor@@ d : result@@ s) { switch (re@@ cor@@ d.@@ statu@@ s) { case O@@ K : break@@ ; case C@@ LO@@ S@@ E@@ D : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ change is clo@@ sed@@ "); case R@@ U@@ L@@ E_@@ ER@@ RO@@ R : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ Sub@@ m@@ it r@@ ul@@ e error@@ : " + (re@@ cor@@ d.@@ error@@ Message@@ ))); case NO@@ T_@@ RE@@ AD@@ Y : throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ com.google.gerrit.server.git.@@ Merge@@ O@@ p.@@ des@@ cri@@ be@@ Label@@ s(@@ cd@@ , re@@ cor@@ d.@@ label@@ s@@ )); case FO@@ R@@ C@@ E@@ D : default : throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (("@@ Sub@@ m@@ at@@ ing Submit@@ Recor@@ d statu@@ s %s for %s in %@@ s", re@@ cor@@ d.@@ statu@@ s, patchSet@@ .getId@@ ().get@@ Id(), c@@ d.@@ change@@ ().get@@ Project@@ ().get@@ ())); } } throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (); }
private boolean submit@@ table@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ ) { return com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ s(@@ com.google.gerrit.server.change.Change@@ Js@@ on.@@ S@@ U@@ B@@ M@@ I@@ T_@@ R@@ U@@ L@@ E_@@ O@@ P@@ T@@ ION@@ S_@@ ST@@ R@@ I@@ C@@ T@@ )); }
public static boolean can@@ Be@@ ted@@ (@@ java.util.Collection<@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ > in@@ ) { if (in@@ .@@ isEmpty())) { return true@@ ; } return ((@@ in.@@ st@@ ream@@ ().@@ map@@ (( r@@ ) -@@ > (r@@ .@@ statu@@ s) == (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Status.@@ O@@ K@@ ))) || ((@@ r.@@ statu@@ s) == (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Status.@@ NO@@ T_@@ RE@@ AD@@ Y@@ ); } return false@@ ; } return in@@ .@@ st@@ ream@@ ().@@ n@@ one@@ Match@@ (( r@@ ) -@@ > (r@@ .@@ statu@@ s) == (@@ com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Status.@@ NO@@ T_@@ RE@@ AD@@ Y@@ ); }
private com.google.gerrit.extensions.client.@@ Submit@@ Type get@@ Submit@@ Type@@ (com.google.gerrit.server.query.@@ change.Change@@ Data cd@@ , com.google.gerrit.reviewdb.client.PatchSet patchSet@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.@@ Submit@@ Type@@ Recor@@ d re@@ c = submit@@ Rule@@ E@@ valu@@ ator@@ Factory.create@@ (c@@ d@@ ).get@@ Submit@@ Type@@ (); if ((@@ re@@ c.@@ statu@@ s) != (@@ Submit@@ Type@@ Recor@@ d.@@ Status.@@ O@@ K@@ )) { throw new com.google.gwtorm.server.Orm@@ Exception@@ (("@@ Sub@@ m@@ it typ@@ e r@@ ul@@ e f@@ ai@@ le@@ d@@ : " + rec@@ )); } return re@@ c.@@ type@@ ; }
private com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m ma@@ k@@ e@@ Label@@ (java.lang.String name, java.lang.String statu@@ s, com.google.gerrit.reviewdb.client.Account.Id account@@ ) { com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m user = new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ user@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Integ@@ er@@ T@@ er@@ m@@ (account@@ .get@@ ())); return new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ ("@@ label@@ ", new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ name@@ ), new com.google@@ cod@@ e.@@ pro@@ log@@ _@@ c@@ af@@ e.@@ lang.@@ Str@@ u@@ ct@@ ure@@ T@@ er@@ m@@ (@@ statu@@ s, user@@ )); }
private com.google.gerrit.common.data.@@ Submit@@ Recor@@ d to@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = statu@@ s; re@@ c.@@ error@@ Messag@@ e = error@@ Message@@ ; if ((@@ label@@ s) != null@@ ) { re@@ c.@@ label@@ s = new java.util.Array@@ List(@@ label@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ L@@ abe@@ l l@@ abe@@ l : label@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l sr@@ l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); sr@@ l.@@ l@@ abe@@ l = l@@ abe@@ l.@@ label@@ ; sr@@ l.@@ statu@@ s = l@@ abe@@ l.@@ statu@@ s; sr@@ l.@@ ap@@ pli@@ ed@@ B@@ y = ((@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) ? new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) : null@@ ; re@@ c.@@ label@@ s.add(@@ sr@@ l@@ ); } } if ((@@ requ@@ i@@ re@@ c.@@ requ@@ i@@ ment@@ s) != null@@ ) { re@@ c.@@ requ@@ i@@ ment@@ s = new java.util.Array@@ List@@ (re@@ qu@@ i@@ ment@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Requ@@ i@@ re@@ requ@@ i@@ re@@ ment : requ@@ i@@ re@@ ment@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ log.error@@ ("@@ Submit@@ Recor@@ d re@@ b = com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ Requ@@ i@@ re@@ buil@@ der@@ (); sr@@ b.@@ set@@ F@@ ull@@ Re@@ as@@ on@@ (re@@ qu@@ i@@ re@@ as@@ on@@ ); f@@ ull@@ Re@@ as@@ on@@ ); if ((@@ requ@@ i@@ re@@ ) != null@@ ) { sr@@ b.@@ set@@ Label@@ (re@@ qu@@ i@@ re@@ Change@@ ); } re@@ Change@@ s.add(@@ sr@@ c.@@ label@@ ); } return rec@@ ; }
@java.lang.Override protected void configure() { in@@ stall@@ (@@ new com.google.gerrit.server.@@ rule@@ s.@@ Pro@@ log@@ En@@ vi@@ ron@@ ment@@ Module@@ ()); bind(@@ Pro@@ log@@ En@@ vi@@ ron@@ m@@ ent.@@ Arg@@ s@@ .@@ class@@ ); factory(@@ Pro@@ log@@ Rule@@ E@@ valu@@ ator@@ .@@ Factory@@ .@@ class@@ ); }
public boolean get@@ I@@ g@@ no@@ re@@ W@@ ork@@ In@@ Pro@@ g@@ no@@ re@@ () { return ig@@ no@@ re@@ W@@ ork@@ In@@ Pro@@ g@@ no@@ re@@ P@@ riv@@ ate@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ().get@@ Reviewer@@ (@@ publi@@ sh@@ On@@ Reviewer@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ , boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ Patch@@ Set@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAM@@ E@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ patch@@ -@@ patch@@ -@@ set@@ -@@ cre@@ ated@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ patch@@ -@@ empty@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ ig@@ no@@ re@@ Re@@ base@@ PatchSet@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ (@@ mo@@ ck@@ Config@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAM@@ E@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ add@@ ed@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ Reviewer@@ Add@@ ed@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ -@@ b@@ b@@ b@@ b@@ (@@ ig@@ no@@ re@@ W@@ ip@@ (@@ ig@@ no@@ re@@ W@@ ork@@ In@@ Pro@@ g@@ ener@@ ate@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); }
@org.junit.Test public void publi@@ sh@@ sh@@ Wh@@ en@@ P@@ riv@@ ate@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = true@@ ; mo@@ ck@@ Change.@@ w@@ i@@ p = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (java.lang.String ig@@ no@@ re@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ (@@ ig@@ no@@ re@@ , true@@ , true@@ ); }
@org.junit.Test public void publi@@ sh@@ sh@@ sh@@ Wh@@ en@@ W@@ ork@@ In@@ Pro@@ g@@ res@@ s() throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (@@ true@@ , false@@ ); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = false@@ ; mo@@ ck@@ Change.@@ w@@ i@@ p = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ () throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", true@@ , true@@ ); }
@org.junit.Test public void publi@@ sh@@ sh@@ sh@@ Wh@@ en@@ Ex@@ p@@ ec@@ ted@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !@@ config.@@ isE@@ n@@ able@@ d@@ ())) && (!(@@ config.@@ isE@@ n@@ able@@ d@@ ())) { return false@@ ; } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ork@@ In@@ Pro@@ g@@ res@@ s statu@@ s = true@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Reviewer@@ Add@@ ed@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Co@@ ul@@ d an@@ d w@@ ork@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } return true@@ ; }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ P@@ riv@@ ate@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ is@@ P@@ riv@@ ate = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !(@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ PatchSet@@ Cre@@ ated@@ ()))) { return false@@ ; } try { com.google.gerrit.server.@@ data.@@ PatchSet@@ Attri@@ but@@ e patchSet@@ ; patch@@ Set = event.@@ patchSet@@ .get@@ (); if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ()) && ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ T@@ R@@ I@@ VI@@ AL@@ _@@ RE@@ B@@ A@@ S@@ E@@ )) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ M@@ ER@@ G@@ E_@@ FI@@ R@@ ST@@ _@@ P@@ AR@@ EN@@ T_@@ U@@ P@@ D@@ AT@@ E@@ ))) || ((@@ patch@@ Set.@@ k@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ C@@ OD@@ E_@@ CHANG@@ E@@ ))) || ((@@ patch@@ Set.@@ ind@@ ) == (@@ com.google.gerrit.extensions.client.@@ Change@@ K@@ in@@ d.@@ NO@@ _@@ CHANG@@ E@@ )@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Cannot check@@ ing p@@ atch se@@ t in@@ ", e); } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ork@@ ))) { return false@@ ; } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ In@@ vali@@ d an@@ d w@@ ork@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } boolean result@@ ; result = true@@ ; try { java.util.@@ reg@@ ex@@ .@@ Pat@@ ter@@ n pat@@ ter@@ n = java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ com@@ p@@ i@@ le@@ (@@ config@@ .get@@ I@@ g@@ no@@ re@@ java.util.@@ reg@@ ex@@ .@@ Pat@@ tern@@ .@@ Pat@@ tern@@ .@@ match@@ er@@ (@@ match@@ er@@ ); java.util.@@ reg@@ ex@@ .@@ match@@ er = event.@@ change@@ Message@@ (); if (!(@@ match@@ er.@@ match@@ es@@ (@@ match@@ es@@ Cre@@ ated@@ Message@@ ))) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ PatchSet@@ Cre@@ ated@@ Message@@ Gener@@ ator@@ .@@ warn@@ ("@@ in@@ vali@@ d p@@ e@@ mai@@ n w@@ n in@@ vali@@ d w@@ it@@ s p@@ atch se@@ t in@@ vali@@ d w@@ ork@@ ", e); } return result@@ ; }
@org.junit.Test public void publi@@ sh@@ sh@@ es@@ Wh@@ en@@ Ex@@ p@@ ec@@ ted@@ () throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ w@@ i@@ p = false@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !@@ config.@@ isE@@ n@@ able@@ d@@ ())) && (!(@@ config.@@ isE@@ n@@ able@@ d@@ ())) { return false@@ ; } try { if ((@@ config@@ .get@@ I@@ g@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ()) && ((@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) || (@@ event.@@ change@@ .get().@@ w@@ ork@@ In@@ Pro@@ g@@ ress@@ ))) { return false@@ ; } } catch (@@ java.lang.Exception e) { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ .@@ LO@@ G@@ ER@@ .@@ warn@@ ("@@ Co@@ ul@@ d an@@ d w@@ ork@@ -@@ pro@@ g@@ res@@ s statu@@ s", e); } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ().get@@ Comment@@ Add@@ ed@@ (@@ publi@@ sh@@ On@@ Comment@@ Ad@@ de@@ d@@ , true@@ ); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !(@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ W@@ ip@@ Read@@ y@@ ()))) { return false@@ ; } if (@@ event.@@ change@@ .get().@@ w@@ ip@@ ) { return false@@ ; } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ , boolean ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ) throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ NameKey@@ ; project@@ Name@@ Key = Project.Name@@ Key@@ .@@ parse@@ (@@ com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); wh@@ en@@ (@@ mo@@ ck@@ Config@@ Factory@@ .get@@ From@@ Project@@ Config@@ With@@ In@@ herit@@ ance@@ (project@@ NameKey@@ , Project@@ Config.@@ CON@@ FI@@ G@@ _@@ NAM@@ E@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ mo@@ ck@@ Plugin@@ Config@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ enable@@ d@@ ", false@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ true@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ web@@ h@@ ook@@ url@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ht@@ t@@ ps@@ :@@ /@@ web@@ ook@@ /@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ch@@ an@@ ne@@ l@@ ", "@@ g@@ ener@@ al@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ ch@@ an@@ ne@@ l@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ user@@ name@@ ", "@@ gerrit@@ "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ test@@ user@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ String@@ ("@@ ig@@ no@@ re@@ ", "@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ "); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ publi@@ sh@@ -@@ on@@ -@@ add@@ ed@@ ", true@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ publi@@ sh@@ On@@ Comment@@ Add@@ ed@@ ); wh@@ en@@ (@@ mo@@ ck@@ Plugin@@ Config@@ .get@@ Boolean@@ ("@@ ig@@ no@@ re@@ -@@ w@@ ip@@ -@@ b@@ b@@ b@@ b@@ (@@ ig@@ no@@ re@@ W@@ ip@@ (@@ ig@@ no@@ re@@ W@@ ork@@ In@@ Pro@@ g@@ ener@@ ate@@ ); return new com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config@@ Factory@@ , com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Comment@@ Add@@ ed@@ Message@@ Gener@@ ator@@ Test.@@ P@@ RO@@ JEC@@ T_@@ NAM@@ E@@ ); }
@java.lang.Override public boolean sh@@ o@@ ul@@ d@@ Publish@@ () { if ((@@ !(@@ config.@@ isE@@ n@@ able@@ d@@ ())) || (!(@@ config.@@ sh@@ o@@ ul@@ d@@ Publish@@ On@@ P@@ riv@@ ate@@ To@@ Public@@ ()))) { return false@@ ; } if (@@ event.@@ change@@ .get().@@ is@@ P@@ riv@@ ate@@ ) { return false@@ ; } return true@@ ; }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ PatchSet@@ , boolean ig@@ no@@ re@@ W@@ ork@@ In@@ Pro@@ g@@ res@@ s) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Create@@ d@@ , ig@@ no@@ re@@ PatchSet@@ , ig@@ no@@ re@@ W@@ ip@@ P@@ riv@@ ate@@ ); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , true@@ ); }
@org.junit.Test public void do@@ es@@ Publish@@ Wh@@ en@@ W@@ ork@@ In@@ Pro@@ g@@ res@@ s() throw@@ s java.lang.Exception { com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config con@@ fig = get@@ Config@@ (); mo@@ ck@@ Ev@@ ent.@@ change = com.google.common.base.@@ Sup@@ pli@@ er@@ s.@@ of@@ Instance@@ (@@ mo@@ ck@@ Change@@ ); mo@@ ck@@ Change.@@ w@@ i@@ p = true@@ ; com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ at@@ or message@@ Gener@@ ator@@ ; message@@ Gener@@ at@@ or = com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ messag@@ e.@@ Message@@ Gener@@ ator@@ Factory@@ .@@ new@@ Instance@@ (@@ mo@@ ck@@ Event@@ , config@@ ); assert@@ Th@@ at(@@ message@@ Gener@@ ator@@ .@@ sh@@ o@@ ul@@ d@@ Publish@@ (), is@@ (@@ true@@ )); }
private com.@@ c@@ is@@ co@@ .gerrit.plugins.@@ s@@ l@@ ac@@ k.@@ config.@@ Project@@ Config get@@ Config@@ (@@ boolean publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , boolean ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ PatchSet@@ ) throw@@ s java.lang.Exception { return get@@ Config@@ ("@@ ^@@ W@@ I@@ P@@ .@@ *@@ ", publi@@ sh@@ On@@ PatchSet@@ Cre@@ ated@@ , ig@@ no@@ re@@ Re@@ base@@ E@@ mpty@@ Patch@@ Set@@ , true@@ ); }
public static void use@@ Fi@@ x@@ ed@@ C@@ lock@@ At@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t in@@ stant@@ ) { com.ericsson.gerrit.plugins.highavailability.@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ Time@@ M@@ ach@@ in@@ e.@@ clo@@ c@@ k = java.@@ ti@@ m@@ e.@@ C@@ lo@@ c@@ k.@@ fix@@ ed@@ (in@@ stant@@ , java.@@ ti@@ m@@ e.@@ Z@@ one@@ Id.@@ sy@@ st@@ em@@ Default@@ ()); }
public static void use@@ Sy@@ st@@ em@@ Default@@ Z@@ one@@ C@@ lock@@ () { com.ericsson.gerrit.plugins.highavailability.@@ web@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ Time@@ M@@ ach@@ in@@ e.@@ clo@@ c@@ k = java.@@ ti@@ m@@ e.@@ C@@ lo@@ c@@ k.@@ sy@@ st@@ em@@ Default@@ Z@@ one@@ (); }
public static java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t no@@ w@@ () { return java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (@@ com.ericsson.gerrit.plugins.highavailability.@@ web@@ s@@ ession@@ .@@ file.@@ File@@ B@@ as@@ ed@@ Web@@ s@@ ession@@ Cache.@@ Time@@ M@@ ach@@ in@@ e.get@@ C@@ lock@@ ()); }
@java.lang.Override public void run() throw@@ s java.io.IOException { com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type typ@@ e = com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ L@@ U@@ C@@ EN@@ E@@ ; if ((@@ com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ values@@ ().@@ length@@ ) > 1@@ ) { ui.@@ head@@ er@@ ("@@ Index@@ "); typ@@ e = index.@@ se@@ lec@@ t@@ ("@@ Type@@ ", "@@ type@@ ", typ@@ e); } if (@@ typ@@ e == (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ E@@ L@@ A@@ ST@@ I@@ C@@ S@@ E@@ AR@@ CH@@ )) { java.lang.String name = index.@@ string@@ ("@@ Index@@ "); ui.@@ head@@ er@@ ("@@ Index@@ "); ui.@@ head@@ er@@ ("@@ Index@@ "); typ@@ e = index.@@ string@@ ("@@ Index@@ "); com.google.gerrit.pgm.init.@@ api.@@ Sec@@ tion el@@ as@@ ti@@ c@@ se@@ ar@@ ch = s@@ ection@@ s.get@@ ("@@ el@@ as@@ ti@@ c@@ search@@ ", name); as@@ ti@@ c@@ se@@ ar@@ .@@ se@@ lec@@ t@@ ("@@ H@@ e@@ ", "@@ pro@@ to@@ co@@ l@@ ", "@@ http@@ ", "@@ new@@ Hash@@ Set@@ ("@@ http@@ ", "@@ ht@@ t@@ ps@@ ")); el@@ as@@ ti@@ c@@ se@@ ar@@ ch = new@@ Index@@ Module@@ .@@ string@@ ("@@ H@@ o@@ st@@ name@@ ", "@@ ho@@ st@@ name@@ ", "@@ local@@ ho@@ st@@ "); ho@@ st@@ Name ch@@ ar@@ ch = "@@ p@@ ort@@ ", "@@ 2@@ 00@@ "); } if (((@@ sit@@ e.@@ is@@ New@@ ) || (@@ isEmpty@@ S@@ ite@@ ())) && (@@ typ@@ e == (com.google.gerrit.server.@@ index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ L@@ U@@ C@@ EN@@ E@@ ))) { for (com.google.gerrit.server.@@ index.@@ Schema@@ De@@ fin@@ i@@ tion@@ s@@ <?@@ > de@@ f : com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ AL@@ L@@ _S@@ CH@@ E@@ M@@ A@@ _@@ DE@@ F@@ S@@ ) { com.google.gerrit.server.index.@@ Index@@ Util@@ s.set@@ Read@@ y(@@ sit@@ e@@ , de@@ f@@ .getName@@ (), de@@ f@@ .get@@ L@@ at@@ est@@ ().get@@ Version@@ (), true@@ ); } } else { if ((@@ com.google.gerrit.server.index.@@ Index@@ Module@@ .@@ Index@@ Type.@@ values@@ ().@@ length@@ ) <@@ = 1@@ ) { ui.@@ head@@ er@@ ("@@ Index@@ "); } java.lang.String messag@@ e = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ \n@@ \n@@ \n@@ \n@@ \n@@ \n@@ Th@@ e in@@ de@@ x m@@ us@@ t b@@ e %@@ s@@ buil@@ t b@@ e@@ for@@ e start@@ ing a Change@@ -@@ j@@ av@@ e in@@ de@@ x -@@ d sit@@ e@@ (@@ sit@@ e.@@ is@@ N@@ e@@ w ? "@@ " : "@@ ")); ui.@@ message@@ (@@ message@@ ); }
protected static void set@@ Content@@ And@@ En@@ cod@@ ing@@ (@@ javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); }
private void pro@@ cess(@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Ab@@ str@@ act@@ Index@@ Res@@ tApi@@ Servlet.@@ O@@ per@@ ation o@@ per@@ ation@@ ) { r@@ s@@ p.set@@ Content@@ Type@@ ("@@ text@@ /@@ pla@@ in@@ "); r@@ s@@ p.set@@ Char@@ ac@@ ter@@ En@@ cod@@ ing@@ (@@ java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ .@@ name@@ ()); java.lang.String pat@@ h = req@@ .get@@ Path@@ Info@@ (); T id = parse@@ (p@@ ath@@ .@@ substring@@ (((@@ path@@ .@@ last@@ Index@@ Of(@@ '@@ /@@ '@@ )) + 1@@ ))); log@@ g@@ er.@@ de@@ bug@@ ("@@ I@@ g@@ er.@@ de@@ bug@@ ("@@ I@@ g@@ no@@ rin@@ g {@@ } {@@ }@@ ", o@@ per@@ ation@@ , index@@ Name, id@@ ); try { com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.set@@ For@@ war@@ ded@@ Event@@ (@@ true@@ ); java.util.concurrent.@@ Lo@@ c@@ k id@@ Lo@@ c@@ k = id@@ Lo@@ ck@@ s.get(@@ id@@ ); id@@ Lo@@ c@@ k.@@ lock@@ (); try { index@@ (id@@ , o@@ per@@ ation@@ ); } final@@ l@@ y { id@@ Lo@@ c@@ k.@@ un@@ lock@@ (); } r@@ s@@ p.set@@ Status@@ (@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (java.io.IOException e) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ rest@@ ri@@ ty@@ .@@ for@@ war@@ der.@@ rest@@ ri@@ ty@@ .@@ SC_@@ CON@@ F@@ LI@@ C@@ T@@ , e.get@@ Message()); log@@ g@@ er.@@ error@@ ("@@ Un@@ able to updat@@ e {@@ }@@ ", in@@ de@@ x index@@ Name, e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String ms@@ g = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to fin@@ d to fin@@ d to fin@@ d index@@ Name); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ FO@@ UN@@ D@@ , msg@@ ); log@@ g@@ er.@@ de@@ bug@@ (@@ msg@@ , e); } final@@ l@@ y { com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ un@@ set@@ For@@ war@@ ded@@ Event@@ (); }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { java.util.List<java.lang.String> par@@ am@@ s = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (@@ '@@ /@@ '@@ ).@@ s@@ pli@@ t@@ To@@ List@@ (req@@ .get@@ Path@@ Info@@ ()); java.lang.String cach@@ e@@ Name = par@@ am@@ s.get(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ Res@@ tApi@@ Servlet.@@ C@@ A@@ CH@@ EN@@ AM@@ E_@@ IN@@ DE@@ X@@ ); java.lang.String j@@ s@@ on = req@@ .get@@ Read@@ er@@ ().@@ read@@ Line@@ (); for@@ war@@ ded@@ Cache@@ E@@ vi@@ c@@ tion@@ Handl@@ er.@@ e@@ vi@@ ct@@ (@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ E@@ n@@ try@@ .@@ from@@ (c@@ ach@@ e@@ Name, com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ G@@ son@@ Par@@ ser@@ .@@ from@@ Json@@ (c@@ ach@@ e@@ Name, json@@ ))); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Cache@@ NotFound@@ Exception e) { log@@ g@@ er.@@ error@@ ("@@ Fai@@ le@@ d to pro@@ ces@@ s e@@ vi@@ c@@ tion requ@@ est@@ : {@@ }@@ ", name, sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ E@@ ST@@ , e.get@@ Message()); } catch (java.io.IOException e) { log@@ g@@ er.@@ error@@ ("@@ Fai@@ le@@ d to pro@@ ces@@ s e@@ vi@@ c@@ tion requ@@ est@@ : {@@ }@@ ", e.get@@ Message@@ (), e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ E@@ ST@@ , e.get@@ Message()); } }
@java.lang.Override protected void do@@ Po@@ st@@ (@@ javax.servlet.http.HttpServlet@@ Request req@@ , javax.servlet.http.HttpServlet@@ Response r@@ sp@@ ) { try { if (!(@@ com.google.common.@@ net.@@ M@@ ed@@ i@@ a@@ Type.@@ parse@@ (req@@ .get@@ Content@@ Type@@ ()).@@ is@@ (@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ J@@ S@@ ON@@ _@@ UT@@ F@@ _@@ 8@@ ))) { send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ UN@@ S@@ U@@ P@@ O@@ R@@ T@@ ED@@ _M@@ ED@@ I@@ A@@ _@@ T@@ Y@@ P@@ E, (("@@ Ex@@ p@@ ected " + (@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ J@@ S@@ ON@@ _@@ UT@@ F@@ _@@ 8@@ .@@ toString@@ ())) + "@@ \n@@ ")); return@@ ; } for@@ war@@ ded@@ Event@@ Handl@@ er.@@ dis@@ patch@@ Event@@ From@@ Request@@ (req@@ )); r@@ s@@ p.set@@ Statu@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ _@@ CON@@ T@@ EN@@ T@@ ); } catch (com.google.gwtorm.server.OrmException e) { log@@ g@@ er.@@ de@@ bug@@ ("@@ E@@ rror try@@ ing to fin@@ d a change ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ NO@@ T_@@ FO@@ UN@@ D@@ , fo@@ un@@ d "); } catch (java.io.IOException e) { log@@ g@@ er.@@ error@@ ("@@ Fai@@ le@@ d to re@@ -@@ tri@@ gg@@ er ev@@ ent ", e); send@@ Error@@ (r@@ sp@@ , com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ SC_@@ B@@ AD@@ _@@ RE@@ Q@@ U@@ E@@ ST@@ , e.get@@ Message()); } }
@org.junit.Test public void index@@ ing@@ Updat@@ es@@ Th@@ e@@ Index@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Cache@@ Or@@ Index@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ index@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ at@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ es@@ .get(@@ 0@@ ).get@@ Account@@ Id@@ ().get@@ ()).@@ isEqualTo(@@ account@@ Id); }
private void update@@ Account@@ With@@ out@@ Cache@@ Or@@ Index@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, com.google.gerrit.server.account.@@ In@@ ternal@@ Account@@ Update a@@ Update@@ ) throw@@ s java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { try (@@ org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ open@@ Repository(@@ all@@ User@@ s@@ Name@@ )@@ ;@@ com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update m@@ d = new com.google.gerrit.server.git.@@ Met@@ a@@ Data@@ Update@@ (com.google.gerrit.server.@@ extensions.@@ events.@@ Git@@ Ref@@ eren@@ ce@@ Updated@@ .@@ D@@ I@@ S@@ AB@@ L@@ ED@@ , all@@ User@@ s@@ Name, all@@ User@@ s@@ Repo@@ )) { org.eclipse.jgit.lib.@@ Per@@ son@@ Id@@ ent id@@ ent = server@@ Ident@@ .get@@ (); m@@ d@@ .get@@ Commit@@ Builder@@ ().set@@ Author@@ (id@@ ent@@ ); m@@ d@@ .get@@ Commit@@ ter@@ ().set@@ Commit@@ ter@@ (id@@ ent@@ ); com.google.gerrit.server.account.Account@@ Config account@@ Config = new com.google.gerrit.server.account.Account@@ Config@@ (account@@ Id, all@@ User@@ s@@ Repo@@ ).@@ load@@ (); account@@ Config.@@ set@@ Account@@ Update@@ (@@ count@@ ); account@@ Config.@@ commit@@ (m@@ d); } }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ From@@ Account@@ Cre@@ ator@@ I@@ f@@ User@@ Branch@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); com.google.gerrit.acceptance.@@ Account@@ Cre@@ at@@ or account@@ Cre@@ at@@ or = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (@@ com.google.gerrit.acceptance.@@ Account@@ Cre@@ ator@@ .@@ class@@ ); account@@ Cre@@ ator@@ .@@ e@@ vi@@ ct@@ (@@ com.google.common.collect.Immutable@@ Set.@@ of@@ (account@@ Id@@ )); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cre@@ ator@@ ); try (@@ com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (account@@ Cre@@ ator@@ , null@@ , null@@ ).@@ re@@ set@@ (project@@ ).@@ re@@ set@@ (project@@ ).@@ bu@@ ild@@ ()) { create@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s(@@ account@@ Id@@ )); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ account@@ Cre@@ ator@@ ); }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ I@@ f@@ User@@ Branch@@ I@@ s@@ Res@@ et@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); org.eclipse.jgit.lib.@@ Re@@ f user@@ B@@ ran@@ ch = create@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cache@@ .@@ class@@ ); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cach@@ e); com.google.gerrit.server.index.@@ account.@@ Account@@ Index@@ er account@@ Index@@ er = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ index.@@ account.@@ Account@@ Index@@ er@@ .@@ class@@ ); account@@ Index@@ er.@@ index@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Index@@ er@@ ); org.eclipse.jgit.lib.@@ Re@@ f on@@ User@@ B@@ ran@@ ch = create@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ ))); try (@@ com.google.gerrit.acceptance.@@ Project@@ Res@@ tApi@@ Servlet.@@ re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , account@@ Cache@@ , account@@ Cache@@ , account@@ Cache@@ , null@@ ).@@ re@@ (project@@ ).@@ set@@ (@@ all@@ User@@ s).@@ bu@@ ild@@ (); update@@ Ref@@ (@@ all@@ User@@ s@@ Repo@@ , user@@ Branch@@ ); }
@org.junit.Test public void project@@ E@@ vi@@ c@@ tion@@ I@@ f@@ Ref@@ s@@ Met@@ a@@ Config@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ 2 = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ b@@ ar@@ "); org.eclipse.jgit.lib.Repository repo@@ 2 = repo@@ Manager.@@ create@@ Repository(@@ project@@ 2); com.google.gerrit.server.project.Project@@ Cach@@ e project@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ project.@@ Project@@ Cache@@ .@@ class@@ ); project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ 2); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ project@@ Cach@@ e); try (@@ com.google.gerrit.acceptance.@@ Project@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , null@@ , project@@ Cache@@ ).@@ re@@ set@@ (project@@ 2@@ ).@@ bu@@ ild@@ ()) { create@@ Ref@@ ("@@ refs/heads/@@ master@@ "); create@@ Ref@@ (repo@@ 2, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ project@@ Cach@@ e); }
@org.junit.Test public void account@@ E@@ vi@@ c@@ tion@@ I@@ f@@ User@@ Branch@@ I@@ s@@ De@@ le@@ ted@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); com.google.gerrit.reviewdb.client.Project.NameKey all@@ User@@ s = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (com.google.gerrit.server.@@ config.@@ All@@ User@@ s@@ Name@@ Provi@@ der.@@ DE@@ F@@ A@@ U@@ L@@ T@@ ); org.eclipse.jgit.lib.Repository all@@ User@@ s@@ Re@@ p@@ o = repo@@ Manager.@@ create@@ Repository(@@ all@@ User@@ s); com.google.gerrit.server.account.Account@@ Cach@@ e account@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ account.@@ Account@@ Cache@@ .@@ class@@ ); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Cach@@ ); com.google.gerrit.server.index.@@ account.@@ Account@@ Index@@ er account@@ Id = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ index.@@ account.@@ Account@@ Index@@ er@@ .@@ class@@ ); account@@ Index@@ er.@@ index@@ (account@@ Id); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ account@@ Index@@ er@@ ); try (@@ com.google.gerrit.acceptance.@@ Project@@ Res@@ re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , account@@ Cache@@ , account@@ Cache@@ , null@@ ).@@ re@@ set@@ (project@@ ).@@ re@@ set@@ (@@ all@@ User@@ s).@@ bu@@ ild@@ ()) { create@@ Ref@@ (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ 2@@ ))); create@@ User@@ s@@ Repo@@ , com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ ref@@ s@@ User@@ s(@@ account@@ Id@@ )); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ account@@ Cach@@ e); }
@org.junit.Test public void re@@ index@@ ing@@ St@@ a@@ le@@ Account@@ Updat@@ es@@ Th@@ e@@ Index@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Or@@ Index@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ re@@ index@@ I@@ f@@ St@@ a@@ le@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ S@@ ate@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ Id@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ ()).@@ isEqualTo(@@ account@@ Id); }
public com.google.gerrit.acceptance.@@ Project@@ Res@@ buil@@ d(@@ ) throw@@ s java.io.IOException { return new com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter@@ (repo@@ Manag@@ er, all@@ User@@ s@@ Name, account@@ Cre@@ ator@@ , account@@ Cache@@ , account@@ Cache@@ , project@@ Cache@@ , ref@@ s@@ By@@ Project@@ ); }
@org.junit.Test public void project@@ E@@ vi@@ c@@ tion@@ I@@ f@@ Ref@@ s@@ Met@@ a@@ Config@@ I@@ s@@ Res@@ et@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project@@ 2 = new com.google.gerrit.reviewdb.client.Project.NameKey@@ ("@@ b@@ ar@@ "); org.eclipse.jgit.lib.Repository repo@@ 2 = repo@@ Manager.@@ create@@ Repository(@@ project@@ 2); org.eclipse.jgit.lib.@@ Re@@ f met@@ a@@ Config = create@@ Ref@@ (repo@@ 2, Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ ); com.google.gerrit.server.project.Project@@ Cach@@ e project@@ Cach@@ e = org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ create@@ N@@ i@@ ce@@ Mo@@ ck@@ (com.google.gerrit.server.@@ project.@@ Project@@ Cache@@ .@@ class@@ ); project@@ Cache.@@ e@@ vi@@ ct@@ (project@@ 2); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ expec@@ t@@ L@@ ast@@ C@@ all@@ (); org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ re@@ pla@@ y(@@ project@@ Cach@@ e); org.eclipse.jgit.lib.@@ Re@@ f on@@ Met@@ a@@ Config create@@ Ref@@ ("@@ refs/heads/@@ master@@ "); try (@@ com.google.gerrit.acceptance.@@ Project@@ Res@@ et@@ ter re@@ set@@ P@@ roject = buil@@ der@@ (@@ null@@ , null@@ , project@@ Cache@@ ).@@ re@@ set@@ (project@@ 2@@ ).@@ bu@@ ild@@ ()) { update@@ Ref@@ (@@ n@@ on@@ Met@@ a@@ Config@@ (repo@@ 2, met@@ a@@ Config@@ ); } org.@@ e@@ as@@ y@@ mo@@ c@@ k.@@ E@@ as@@ y@@ Mo@@ c@@ k.@@ ve@@ r@@ if@@ y(@@ project@@ Cach@@ e); }
@org.junit.Test public void index@@ Can@@ not@@ Be@@ C@@ or@@ r@@ up@@ ted@@ By@@ St@@ a@@ le@@ Cache@@ () throw@@ s java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = create@@ Account@@ ("@@ foo@@ "); load@@ Account@@ To@@ (account@@ Id); java.lang.String p@@ ref@@ er@@ red@@ E@@ mai@@ l = "@@ foo@@ @@@ ex@@ amp@@ le.@@ com@@ "; update@@ Account@@ With@@ out@@ Cache@@ Or@@ Index@@ (account@@ Id, com.google.gerrit.acceptance.@@ api.@@ account@@ s.@@ Account@@ Index@@ er@@ IT@@ .@@ new@@ Account@@ Update@@ Pref@@ er@@ red@@ Email@@ ().set@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ).@@ bu@@ ild@@ ()); assert@@ Th@@ at(@@ account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ )).@@ isEmpty@@ (); account@@ Index@@ er.@@ index@@ (account@@ Id); java.util.List<@@ com.google.gerrit.server.account.Account@@ State@@ > match@@ ed@@ Account@@ s = account@@ Query@@ Provider@@ .get().@@ by@@ Pref@@ er@@ red@@ Email@@ (p@@ ref@@ er@@ red@@ Email@@ ); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ S@@ at@@ es@@ ).@@ hasSize@@ (1); assert@@ Th@@ at(@@ match@@ ed@@ Account@@ Id@@ .get(@@ 0@@ ).get@@ Account@@ ().get@@ ()).@@ isEqualTo(@@ account@@ Id); }
@org.junit.Test public void mis@@ s@@ ing@@ PatchSet@@ Commit@@ O@@ mit@@ s@@ Comment@@ s@@ On@@ Parent@@ Side@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.reviewdb.client.Change.@@ Id id = r@@ .getChange@@ ().get@@ Id(); com.google.gerrit.extensions.common.@@ Comment@@ Info draft@@ Info = put@@ Draft@@ (user@@ , id@@ , 1, "@@ d@@ raf@@ t comment@@ ", null@@ , S@@ id@@ e.@@ P@@ AR@@ EN@@ T@@ ); put@@ Comment@@ (user@@ , id@@ 1, "@@ publi@@ sh@@ ed comment@@ ", null@@ , S@@ id@@ e.@@ P@@ AR@@ EN@@ T@@ ); com.google.gerrit.extensions.common.@@ Comment@@ Info comment@@ Info = gApi.changes().id(@@ id@@ .get@@ ()).@@ comment@@ s().@@ values@@ ().@@ st@@ ream@@ ().@@ f@@ l@@ at@@ Map@@ (@@ java.util.@@ List@@ :@@ st@@ ream@@ ).@@ fin@@ d@@ Fi@@ rst@@ ().get@@ (); com.google.gerrit.reviewdb.server.ReviewDb d@@ b = get@@ Un@@ w@@ rap@@ p@@ ed@@ Db@@ (); com.google.gerrit.reviewdb.client.PatchSet p@@ s = db.@@ patchSet@@ s@@ ().get@@ (@@ new com.google.gerrit.reviewdb.client.PatchSet.@@ Id@@ (id@@ , 1@@ )); p@@ s.set@@ Revision@@ (@@ new com.google.gerrit.reviewdb.client.@@ Rev@@ Id@@ ("@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@ ad@@ be@@ e@@ f@@ de@@
public void re@@ bu@@ ild@@ And@@ Check@@ Change@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Id change@@ Id, java.util.List<java.lang.String> expected@@ D@@ if@@ f@@ ) throw@@ s java.lang.Exception { I@@ mmutable@@ List@@ Multimap@@ .@@ Builder@@ <@@ com.google.gerrit.reviewdb.client.Change.@@ Id, java.lang.String> b = com.google.common.collect.Immutable@@ List@@ Multimap@@ .@@ buil@@ der@@ (); b.@@ put@@ All@@ (change@@ Id, expected@@ D@@ if@@ f@@ ); re@@ bu@@ ild@@ And@@ Check@@ Changes@@ (@@ java.util.@@ st@@ ream@@ .@@ Stream@@ .@@ of@@ (change@@ Id@@ ), b.@@ bu@@ ild@@ ()); }
@org.junit.Test public void delete@@ Item@@ s() throw@@ s java.lang.Exception { org.eclipse.jgit.lib.ObjectId old@@ Met@@ a@@ Id = met@@ a@@ Ref@@ (account@@ Id); com.google.common.collect.Immutable@@ Set@@ <java.lang.String> default@@ Name@@ s = my@@ M@@ en@@ us@@ From@@ (account@@ Id); assert@@ Th@@ at(@@ account@@ Id@@ .get@@ ()).@@ is@@ Not@@ E@@ qualTo@@ (@@ old@@ Met@@ a@@ Id); java.util.List<java.lang.String> new@@ Name@@ s = com.google.common.collect.Immutable@@ List.@@ of@@ ("@@ in@@ us@@ t line@@ \n@@ "); java.lang.String new@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ Or@@ der@@ (); java.lang.String new@@ E@@ mai@@ l = "@@ S@@ o@@ m@@ :@@ " + "@@ +@@ is@@ :@@ merge@@ able@@ "; for (@@ int i = 0; i < (com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 0@@ .@@ DE@@ F@@ A@@ U@@ L@@ T_@@ D@@ R@@ A@@ F@@ T_@@ E@@ M@@ S@@ .@@ size()); i@@ ++@@ ) { p@@ refs.@@ m@@ y.@@ add@@ (@@ new com.google.gerrit.extensions.client.@@ M@@ enu@@ Item@@ (@@ ("@@ S@@ en@@ try " + i@@ )@@ , com.google.gerrit.server.@@ schema.@@ Schema@@ _@@ 1@@ 0@@ 6@@ .@@ DE@@ F@@ A@@ U@@ L@@ T_@@ D@@ R@@ A@@ F@@ T_@@ E@@ M@@ IT@@ E@@ M@@ .get(@@ i@@ )@@ ))); gApi.@@ account@@ s().@@ id(@@ account@@ s().@@ id(@@ account@@ Id@@ .get@@ ()).@@ set@@ Preferences@@ (p@@ ref@@ s); java.util.List<java.lang.String> old@@ Name@@ s = com.google.common.collect.Immutable@@ List.@@ <java.lang.String@@ >@@ buil@@ der@@ ().@@ add@@ All@@ (@@ default@@ Nam@@ es@@ ).@@ add(@@ "@@ D@@ raf@@ t en@@ try 0@@ ").@@ add(@@ "@@ D@@ raf@@ t 1@@ ").@@ add@@ ("@@ D@@ raf@@ t 2@@ ").@@ add@@ ("@@ D@@ raf@@ t 2@@ ").@@ add@@ ("@@ D@@ raf@@ t 3@@ "); assert@@ Th@@ at(@@ my@@ M@@ en@@ us@@ From@@ (account@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ old@@ Nam@@ es@@ ).@@ in@@ Or@@ der@@ (); schema@@ 1@@ 6@@ 0@@ .@@ m@@ ig@@ r@@ ate@@ Data@@ (db, new com.google.gerrit.@@ test@@ ing.@@ Update@@ ()); account@@ Cache.@@ e@@ vi@@ ct@@ (account@@ Id); assert@@ Th@@ at(@@ met@@ a@@ Ref@@ Id@@ )).@@ is@@ Not@@ E@@ qualTo@@ (@@ old@@ Met@@ a@@ Id); java.util.List<java.lang.String> new@@ Name@@ s = com.google.common.collect.Immutable@@ List.@@ <java.lang.String@@ >@@ >@@ >@@ ().@@ add@@ ("@@ in@@ Or@@ der@@ "); assert@@ Th@@ at(@@ my@@ From@@ (account@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ )).@@ is@@ Not@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ )).@@ in@@ Or@@ der@@ (); assert@@ Th@@ at(@@ my@@ Id@@ s@@ In@@ (@@ new@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ ).@@ in@@ Or@@ der@@ (); assert@@ Th@@ at(@@ act@@ ly@@ Element@@ s@@ In@@ (@@ new@@ Id@@ ).@@ in@@ Or@@ der@@ (); }
private void res@@ ol@@ ve@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s, java.lang.String r@@ ) { try { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s = group@@ Member@@ s.@@ list@@ Account@@ s(@@ group@@ s@@ Collection@@ .get().@@ parse@@ (r@@ ).get@@ Group@@ UUID@@ (), p@@ ).@@ st@@ ream@@ ().@@ filter@@ (@@ Account@@ :@@ is@@ Active@@ ).@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); reviewer@@ s.@@ add@@ All(@@ account@@ s); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception | com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {@@ }@@ : review@@ er {@@ }@@ ", no@@ r a group@@ Number@@ , p@@ r@@ ); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project {@@ }@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {@@ }@@ .@@ ", change@@ Number@@ , p@@ r@@ ); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r th@@ e change {@@ } of project : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {@@ }@@ ", change@@ Number@@ , p@@ r@@ , e); } }
private boolean res@@ ol@@ ve@@ Account@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er, java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, java.lang.String r@@ ) { try { com.google.gerrit.reviewdb.client.@@ Account ac@@ count = account@@ Res@@ ol@@ v@@ er.@@ fin@@ d(@@ review@@ Db@@ , r@@ ); if ((@@ ac@@ count != null@@ ) && (@@ account.@@ is@@ Active@@ ())) { if ((@@ upload@@ er == null@@ ) || ((@@ upload@@ er.@@ _@@ account@@ Id@@ ) != (account@@ .getId@@ ().get@@ ()))) { reviewer@@ s.add(@@ account@@ .getId()); } } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.error@@ ("@@ Fo@@ r th@@ e change {@@ } of project {@@ }@@ : f@@ ai@@ le@@ d to res@@ ol@@ v@@ e ac@@ count {@@ }@@ ", change@@ Number@@ , p@@ r@@ , e); return true@@ ; } return false@@ ; }
java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> res@@ ol@@ ve@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , java.util.@@ Set@@ <java.lang.String> in@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er@@ ) { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s = com.google.common.collect.@@ Set@@ s@@ .@@ new@@ Hash@@ Set@@ With@@ Ex@@ p@@ ec@@ ted@@ Size@@ (in@@ .@@ size()); com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s = null@@ ; for (java.lang.String r : in@@ ) { if (@@ res@@ ol@@ ve@@ Account@@ (@@ review@@ Db@@ , p@@ , change@@ Number@@ , upload@@ er, reviewer@@ s, r@@ )) { continue@@ ; } if ((@@ group@@ Member@@ s == null@@ ) && (@@ upload@@ er != null@@ )) { group@@ Member@@ s = create@@ Group@@ Member@@ s(@@ review@@ Db@@ , change@@ Number@@ , upload@@ er, r@@ ); } } if (@@ group@@ Member@@ s != null@@ ) { res@@ ol@@ ve@@ Group@@ (p@@ , change@@ Number@@ , reviewer@@ s, group@@ Member@@ s, r@@ ); } else { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Co@@ ul@@ d th@@ e change {@@ } of project : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {@@ }@@ ", can@@ not ret@@ ri@@ ev@@ e upload@@ er@@ ac@@ count {@@ }@@ ", change@@ Number@@ , p@@ r@@ , upload@@ er.@@ email@@ ); } } return reviewer@@ s; }
private com.google.gerrit.server.account.@@ Group@@ Member@@ s create@@ Group@@ Member@@ s(@@ com.google.gerrit.reviewdb.server.ReviewDb review@@ Db@@ , com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , com.google.gerrit.extensions.common.@@ Account@@ Info upload@@ er, java.lang.String r@@ ) { java.lang.String upload@@ er@@ Name@@ E@@ mai@@ l = java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ %@@ s@@ >@@ ", upload@@ er.@@ name, upload@@ er.@@ email@@ ); try { com.google.gerrit.reviewdb.client.@@ Account upload@@ er@@ Account = account@@ Res@@ ol@@ v@@ er.@@ fin@@ d@@ By@@ Name@@ Or@@ Email@@ (@@ review@@ Db@@ , upload@@ er@@ Name@@ Email@@ ); if (@@ upload@@ er@@ Account != null@@ ) { return group@@ Member@@ s@@ Factory.create@@ (id@@ ent@@ if@@ i@@ ed@@ User@@ Factory.create@@ (@@ upload@@ er@@ Account@@ .getId@@ ())); } } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Fo@@ r change {@@ } of project {@@ }@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {@@ }@@ , can@@ not ret@@ ri@@ ev@@ e upload@@ er ac@@ count {@@ ", change@@ Number@@ , p@@ r@@ upload@@ er@@ Name@@ Email@@ , e); } return null@@ ; }
private void res@@ ol@@ ve@@ Group@@ (@@ com.google.gerrit.reviewdb.client.Project.NameKey p@@ , int change@@ Number@@ , java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> reviewer@@ s, com.google.gerrit.server.account.@@ Group@@ Member@@ s group@@ Member@@ s, java.lang.String r@@ ) { try { java.util.Set<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> account@@ s = group@@ Member@@ s.@@ list@@ Account@@ s(@@ group@@ s@@ Collection@@ .get().@@ parse@@ (r@@ ).get@@ Group@@ UUID@@ (), p@@ ).@@ st@@ ream@@ ().@@ filter@@ (@@ Account@@ :@@ is@@ Active@@ ).@@ map@@ (@@ Account@@ :@@ get@@ Id@@ ).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ Set@@ ()); reviewer@@ s.@@ add@@ All(@@ account@@ s); } catch (@@ com.google.gerrit.extensions.restapi.@@ Un@@ pro@@ cess@@ able@@ En@@ ti@@ ty@@ Exception | com.google.gerrit.common.@@ errors.@@ NoSuch@@ Group@@ Exception e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Co@@ ul@@ d th@@ e change {@@ } of project {@@ }@@ : review@@ er {@@ }@@ ", change@@ Number@@ , p@@ r@@ ); } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception | java.io.IOException e) { com.googlesource.gerrit.plugins.@@ reviewer@@ s.@@ Reviewer@@ s@@ Res@@ ol@@ v@@ er.@@ log.warn@@ ("@@ Cannot th@@ e change {@@ } of project {@@ }@@ : f@@ ai@@ le@@ d to li@@ s@@ t account@@ s for g@@ roup {@@ }@@ ", change@@ Number@@ , p@@ r@@ ); } }
private void run@@ (@@ java.util.@@ f@@ unc@@ tion.@@ Con@@ su@@ m@@ er@@ <java.lang.String> log@@ One@@ Line@@ , @@@ com.google.gerrit.common.@@ Null@@ able java.io.@@ P@@ r@@ int@@ Wri@@ ter pro@@ g@@ ress@@ Wri@@ ter@@ ) { if (!@@ ((@@ repo@@ Manag@@ er@@ ) instanceof com.google.gerrit.server.git.@@ Lo@@ cal@@ Dis@@ k@@ Repository@@ Manag@@ er@@ )) { log@@ One@@ Lin@@ e.@@ accept@@ ((@@ ("@@ G@@ C of " + (@@ all@@ User@@ s@@ )) + "@@ lo@@ c@@ al dis@@ repo return@@ ; } if (!(@@ enable@@ Au@@ to@@ c@@ (@@ log@@ One@@ Line@@ ))) { log@@ One@@ Lin@@ e.@@ accept@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ (("@@ M@@ us@@ t b@@ e of G@@ C of " + (@@ all@@ User@@ s@@ )) + "@@ . M@@ us@@ e to dis@@ ab@@ lin@@ g ") + (@@ CON@@ FI@@ G@@ _@@ G@@ S@@ EC@@ T@@ ION@@ )) + "@@ .@@ ") + (@@ CON@@ FI@@ G@@ _@@ K@@ E@@ Y_@@ A@@ UT@@ O@@ )@@ ))); log@@ One@@ Lin@@ e.@@ accept@@ ((@@ ("@@ A@@ IL@@ ing load@@ ing account@@ s is s@@ lo@@ w af@@ ter th@@ e Note@@ Db m@@ ig@@ r@@ ation@@ , r@@ u@@ n g@@ c on " + (@@ all@@ User@@ s@@ )) + " m@@ an@@ u@@ ally return@@ ; } if (@@ pro@@ g@@ ress@@ Wri@@ ter == null@@ ) { log@@ One@@ Lin@@ e.@@ accept@@ ((@@ ("@@ g@@ ar@@ b@@ ag@@ e for " + (@@ all@@ User@@ s@@ )) + "@@ \"@@ :@@ \"@@ ")); } com.google.gerrit.common.data.@@ G@@ ar@@ b@@ age@@ Collection@@ Result result = g@@ c@@ Factory.create@@ ().@@ run@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ all@@ User@@ s@@ ), pro@@ g@@ ress@@ Wri@@ ter@@ ); if (!(@@ result.@@ has@@ Error@@ s@@ ())) { return@@ ; } for (@@ com.google.gerrit.common.data.@@ G@@ ar@@ b@@ age@@ Collection@@ Result.@@ E@@ rror e : result@@ .get@@ Error@@ s()) { switch (@@ e.get@@ Type@@ ()) { case G@@ C_@@ AL@@ RE@@ AD@@ Y_@@ S@@ CH@@ ED@@ U@@ LE@@ D : log@@ One@@ (("@@ In@@ vali@@ d s@@ ched@@ ule@@ d for " + (@@ e.get@@ Project@@ Name@@ ()))); break@@ ; case G@@ E@@ D : log@@ One@@ Lin@@ e.@@ ex@@ act@@ u@@ al for (@@ e.get@@ Name@@ ()))); break@@ ; case RE@@ P@@ O@@ R@@ Y_@@ S@@ IT@@ O@@ R@@ Y_@@ NO@@ T_@@ FO@@ UN@@ D : default : log@@ One@@ ((@@ (("@@ Un@@ log@@ : " + (@@ log@@ One@@ : " not fo@@ un@@ d for de@@ d (@@ log@@ One@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ (@@ Project@@ Name@@ ))) + (@@ e.get@@ Type@@ ()))); } } }
public java.util.@@ Set@@ <java.lang.String> get@@ Up@@ st@@ ream@@ Branch@@ es@@ (java.lang.String to@@ Branch@@ , java.lang.String project@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.util.@@ Set@@ <java.lang.String> st@@ ream@@ Branch@@ es = new java.util.Hash@@ Set@@ <java.lang.String@@ >(); java.util.@@ Set@@ <java.lang.String> sub@@ s@@ ection@@ s = get@@ Config@@ ().get@@ Sub@@ s@@ ection@@ s(@@ plugin@@ Name); for (java.lang.String sub@@ s@@ ec@@ tion : sub@@ s@@ ection@@ s) { java.lang.String name = "@@ "; java.util.@@ Set@@ <java.lang.String> branch@@ P@@ ai@@ r = com.google.common.base.@@ S@@ pli@@ t@@ ter.@@ on@@ (com.googlesource.gerrit.plugins.@@ au@@ to@@ merg@@ er.@@ Config@@ Load@@ er.@@ B@@ R@@ AN@@ CH@@ _@@ LI@@ M@@ ER@@ ).@@ tri@@ m@@ Result@@ s().@@ s@@ pli@@ t@@ To@@ List@@ (@@ sub@@ s@@ ection@@ ); if ((@@ branch@@ P@@ ai@@ r@@ .@@ size@@ ()) != 2@@ ) { throw new org.eclipse.jgit.errors.ConfigInvalid@@ Exception@@ (("@@ P@@ roject con@@ fig b@@ ran@@ ch pa@@ i@@ r m@@ al@@ for@@ m@@ ed@@ : " + sub@@ s@@ ection@@ )); } if (@@ to@@ Branch@@ .equals(@@ branch@@ P@@ ai@@ r@@ .get@@ (@@ 1@@ )) { java.util.@@ Set@@ <java.lang.String> project@@ s@@ In@@ S@@ cop@@ e = get@@ Project@@ s@@ In@@ S@@ cop@@ e@@ (@@ branch@@ P@@ ai@@ r@@ .get@@ P@@ ai@@ r@@ , branch@@ P@@ ai@@ r@@ .get@@ (@@ 1@@ )@@ ).get@@ (); if (project@@ s@@ In@@ S@@ cop@@ e.@@ contains(@@ project@@ )) { st@@ ream@@ Branch@@ es.@@ add(@@ branch@@ P@@ ai@@ r@@ .get@@ P@@ ai@@ r@@ ); } } } return up@@ st@@ Branch@@ es@@ ; }
@org.junit.Test public void b@@ as@@ ic@@ Group@@ Pro@@ per@@ ti@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Group@@ Info cre@@ ated@@ Group = g@@ Api@@ .group@@ s().@@ create@@ (@@ name@@ ("@@ group@@ "@@ )@@ ).get@@ (); com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group review@@ Db@@ Group = group@@ s.get@@ Group@@ (db, new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (@@ cre@@ ated@@ Group.@@ id@@ )@@ ).get@@ (); delete@@ Ref@@ s(@@ review@@ Db@@ Group@@ ); assert@@ Th@@ at(@@ com.google.gerrit.acceptance.@@ ap@@ i@@ .group@@ .@@ Group@@ Re@@ buil@@ der@@ IT.@@ remove@@ Ref@@ State@@ (re@@ buil@@ d(@@ review@@ Db@@ Group@@ )@@ )).@@ isEqualTo(@@ ro@@ und@@ To@@ Se@@ con@@ d(@@ review@@ Db@@ Group@@ )); }
private com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ Group create@@ Group@@ In@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Cre@@ ation group@@ Cre@@ ation@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ In@@ ternal@@ Group@@ Update group@@ Update@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group@@ Name g@@ n = new com.google.gerrit.reviewdb.client.Account@@ Group@@ Name(@@ group@@ Cre@@ ation@@ .getName@@ Key@@ (), group@@ Cre@@ ation@@ .getId()); db.account@@ Group@@ Nam@@ es@@ ().@@ insert@@ (@@ com.google.common.collect.Immutable@@ List.@@ of@@ (@@ g@@ n@@ )); com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ Update.@@ create@@ Account@@ Group@@ (@@ group@@ Cre@@ ation@@ ); com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ s@@ Update@@ Result update@@ Result = update@@ Group@@ Review@@ Db@@ (db, group@@ , group@@ Update@@ ); return com.google.gerrit.server.g@@ roup@@ .@@ In@@ ternal@@ (@@ group@@ , update@@ Result@@ .get@@ Mo@@ d@@ if@@ i@@ ed@@ Member@@ s@@ (), update@@ .get@@ Mo@@ d@@ if@@ i@@ ed@@ Sub@@ group@@ s@@ (), update@@ .getRef@@ State@@ ()); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 3@@ ); valu@@ es.@@ add(@@ token@@ ); o@@ per@@ ation@@ ); valu@@ es.@@ add(@@ token@@ .@@ id@@ .getName@@ ()); valu@@ es.@@ add(@@ token@@ .@@ exp@@ i@@ res@@ A@@ t@@ ()); return values@@ ; }
@org.junit.Test public void test@@ Token@@ Ser@@ i@@ ali@@ z@@ ation@@ Des@@ er@@ i@@ ali@@ z@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ or pro@@ cess@@ or = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ Pro@@ ess@@ or@@ (c@@ ip@@ her@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 0); java.lang.String ser@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ); assert@@ Th@@ at(@@ ser@@ i@@ ali@@ zed@@ ).@@ is@@ Not@@ E@@ mpty@@ (); java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ > des@@ er@@ i@@ ali@@ ze@@ d = pro@@ cess@@ or@@ .@@ des@@ er@@ i@@ ali@@ ze@@ (@@ ze@@ ser@@ i@@ ali@@ zed@@ ); assert@@ Th@@ at(@@ des@@ er@@ i@@ ali@@ zed@@ .is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); assert@@ Th@@ at(@@ token@@ .@@ exp@@ i@@ res@@ A@@ t@@ ).@@ isEqualTo(@@ des@@ er@@ i@@ ali@@ zed@@ .get().@@ exp@@ i@@ res@@ A@@ t@@ ); }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (@@ values@@ .get(@@ 1@@ )), values@@ .get(@@ 2@@ )); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); valu@@ es.@@ add(@@ token@@ ); valu@@ es.@@ add(@@ token@@ ); valu@@ es.@@ add(@@ token@@ ); if ((@@ valu@@ es.@@ isEmpty()) && (@@ valu@@ es.@@ add(@@ java.lang.String.@@ value@@ Of(@@ token@@ .@@ exp@@ i@@ res@@ In@@ )@@ ))) { return values@@ ; } } return values@@ ; }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { if ((@@ valu@@ es.@@ size@@ ()) != 4@@ ) { return java.util.@@ Optional@@ .@@ empty@@ (); } return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (@@ values@@ .get(@@ 0@@ ), values@@ .get(@@ 2@@ ), values@@ .get(@@ 3@@ )); }
com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Auth@@ Info g@@ ener@@ ate@@ Auth@@ Info@@ (com.google.gerrit.server.@@ Current@@ User user@@ , java.lang.String project, java.lang.String o@@ per@@ ation@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ Ssh@@ Auth@@ Token@@ (user@@ .getUser@@ Name@@ (), project, o@@ per@@ ation@@ , java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), exp@@ i@@ res@@ I@@ n@@ ); return new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Ssh@@ Request@@ Auth@@ ori@@ z@@ er.@@ Ssh@@ Auth@@ Info@@ (@@ pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ), token@@ .@@ exp@@ i@@ res@@ A@@ t@@ (), token@@ .@@ exp@@ i@@ res@@ I@@ n@@ ); }
public com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Auth@@ Info g@@ ener@@ ate@@ Auth@@ Info@@ (java.lang.String o@@ per@@ ation@@ , org.eclipse.jgit.@@ lfs.@@ lib.@@ An@@ y@@ L@@ on@@ g@@ Object@@ Id id@@ , java.lang.String token@@ ) { com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ Lfs@@ F@@ s@@ Request@@ Auth@@ ori@@ z@@ er.@@ Lfs@@ F@@ s@@ Auth@@ Token@@ (@@ o@@ per@@ ation@@ , id@@ , no@@ w, exp@@ i@@ res@@ I@@ n@@ ); return new com.googlesource.gerrit.plugins.@@ lfs.@@ f@@ s.@@ pro@@ cess@@ or@@ .@@ ser@@ i@@ ali@@ ze@@ (@@ token@@ ), token@@ .@@ exp@@ i@@ res@@ A@@ t@@ (), token@@ .@@ exp@@ i@@ res@@ I@@ n@@ ); }
public boolean on@@ Time@@ (@@ java.util.Collection<@@ com.google.gerrit.reviewdb.client.Account.@@ Id> id@@ s) { return wh@@ en@@ ; }
@java.lang.Override protected java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ > create@@ Token@@ (@@ java.util.List<java.lang.String> values@@ ) { return java.util.@@ Optional@@ .@@ of@@ (@@ new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ values@@ .get(@@ 0@@ )); }
@org.junit.Test public void test@@ Token@@ On@@ Time@@ () throw@@ s java.lang.Exception { java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t wh@@ en = java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ wh@@ en@@ , 1@@ 00@@ 0@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ ); assert@@ Th@@ at(@@ ve@@ r@@ if@@ i@@ er@@ if@@ i@@ er@@ .@@ id@@ ent@@ if@@ i@@ er@@ ()).@@ is@@ True@@ (); }
@java.lang.Override protected java.util.List<java.lang.String> get@@ Val@@ u@@ es@@ (com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en token@@ ) { java.util.List<java.lang.String> value@@ s = new java.util.ArrayList<@@ >@@ (@@ 2); valu@@ es.@@ add(@@ token@@ ); exp@@ i@@ res@@ A@@ t = (@@ valu@@ es.@@ add(@@ java.lang.String.@@ value@@ Of(@@ token@@ .@@ exp@@ i@@ res@@ In@@ ))); return values@@ ; }
@org.junit.Test public void test@@ Token@@ Ex@@ p@@ i@@ re@@ d(@@ ) throw@@ s java.lang.Exception { java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t wh@@ en = java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ To@@ k@@ en to@@ k@@ en = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ (@@ wh@@ en@@ , 1@@ 00@@ 0@@ ); com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er ve@@ r@@ if@@ i@@ er = new com.googlesource.gerrit.plugins.@@ lfs.@@ Lfs@@ Auth@@ Token@@ Test.@@ Test@@ Token@@ V@@ er@@ if@@ i@@ er@@ if@@ i@@ er@@ (@@ token@@ ); assert@@ Th@@ at(@@ ve@@ r@@ if@@ i@@ er@@ if@@ i@@ er@@ .@@ on@@ Tim@@ Tim@@ Tim@@ e@@ (@@ wh@@ en@@ .@@ p@@ lu@@ s(@@ 1@@ 00@@ 1@@ )@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Auth@@ Info@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ ("@@ o@@ ", z@@ er@@ o@@ Id(), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ o@@ ", z@@ er@@ o@@ Id@@ ()@@ )).@@ is@@ True@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Ag@@ ain@@ st@@ D@@ if@@ f@@ er@@ ent@@ O@@ per@@ ation@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ ("@@ o@@ ", z@@ er@@ o@@ Id(), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ p@@ er@@ o@@ Id@@ ()@@ )).@@ is@@ F@@ alse@@ (); }
@org.junit.Test public void test@@ V@@ er@@ if@@ y@@ Ag@@ ain@@ st@@ D@@ if@@ f@@ er@@ ent@@ Object@@ Id@@ () throw@@ s java.lang.Exception { com.googlesource.gerrit.plugins.@@ lfs.@@ Auth@@ Info in@@ fo = auth@@ .g@@ ener@@ ate@@ Auth@@ Info@@ ("@@ o@@ ", z@@ er@@ o@@ Id@@ (), java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ (), 1); assert@@ Th@@ at(@@ auth.@@ ve@@ r@@ if@@ y@@ Auth@@ Info@@ (info.@@ auth@@ Token@@ , "@@ o@@ ", org.eclipse.jgit.@@ lfs.@@ lib.@@ L@@ on@@ g@@ Object@@ Id.@@ from@@ String@@ (("@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 0@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ " + ("@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ 1@@ 2@@ 3@@ 4@@ 5@@ 6@@ 7@@ 8@@ 9@@ " + "@@ 1@@ 2@@ 3@@ 4@@ "@@ )@@ )).@@ is@@ F@@ alse@@ (); }
private boolean is@@ Re@@ co@@ ver@@ able@@ () { return !(@@ e instanceof javax.@@ net.@@ net.@@ s@@ l.@@ S@@ L@@ Exception@@ ) && (@@ e instanceof java.io.IO@@ Exception@@ ) && (@@ e instanceof java.io.IO@@ Exception@@ )) { ; }
@java.lang.Override public void run() { try { java.util.@@ Optional@@ <@@ com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Event@@ Pro@@ cess@@ or@@ .@@ Request@@ > cont@@ ent = pro@@ cess@@ or@@ .get@@ (); if (!(@@ cont@@ ent.@@ is@@ P@@ res@@ ent@@ ())) { com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Po@@ st@@ T@@ as@@ k.@@ log.@@ de@@ bug@@ ("@@ Web@@ h@@ oo@@ k [@@ {@@ }@@ ] s@@ kip@@ p@@ ed@@ .@@ "); remo@@ te@@ Url@@ ()); return@@ ; } (@@ ex@@ ec@@ C@@ nt@@ )@@ ++@@ ; com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Http@@ Respon@@ se@@ Handl@@ er.@@ Http@@ Result result = s@@ ession@@ .get().@@ post@@ (@@ remo@@ te@@ , content@@ .get()); if ((@@ !(@@ result.@@ su@@ c@@ cess@@ f@@ ul@@ )) && ((@@ ex@@ ec@@ C@@ nt@@ ) < (@@ remo@@ te@@ .get@@ Ma@@ x@@ T@@ ri@@ es@@ ()))) { log@@ R@@ e@@ try@@ (@@ result.@@ message@@ ); res@@ ched@@ ule@@ (); } } catch (@@ java.lang.Exception e) { if ((@@ is@@ Re@@ co@@ ver@@ able@@ (@@ e@@ )) && ((@@ ex@@ ec@@ ) < (@@ remo@@ te@@ .get@@ Ma@@ x@@ T@@ ri@@ es@@ ()))) { log@@ R@@ e@@ try@@ (@@ e); res@@ ched@@ ule@@ (); } else { com.googlesource.gerrit.plugins.@@ web@@ h@@ ook@@ s.@@ Po@@ st@@ T@@ as@@ k.@@ log.error@@ ("@@ Fai@@ le@@ d to post@@ : {@@ }@@ ", e); } } } }
private void create@@ Repository@@ () { if (p@@ oo@@ l.@@ is@@ Create@@ M@@ is@@ s@@ ing@@ Repo@@ s()) { try { org.eclipse.jgit.lib.@@ Re@@ f h@@ e@@ ad = git.@@ ex@@ act@@ Ref@@ (@@ Con@@ stant@@ s.@@ HE@@ AD@@ ); if (re@@ plic@@ ation@@ Que@@ u@@ e.@@ create@@ Project@@ (project@@ Name, (@@ h@@ e@@ ad != null ? head@@ .getName@@ () : null@@ ))) { com.google.gerrit.extensions.@@ events.@@ New@@ Project@@ Cre@@ ated@@ List@@ en@@ er.@@ Event ev@@ ent = new com.google.gerrit.extensions.@@ events.@@ New@@ Project@@ Cre@@ ated@@ List@@ en@@ er.@@ Event@@ () { @java.lang.Override public java.lang.String get@@ Project@@ Name@@ () { return project@@ Name@@ .get@@ (); } @java.lang.Override public java.lang.String get@@ Head@@ Name@@ () { return h@@ e@@ ad != null ? head@@ .get@@ T@@ arget@@ ().get@@ Name@@ () : null@@ ; } @java.lang.Override public com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g get@@ No@@ t@@ if@@ y@@ () { return com.google.gerrit.extensions.api.changes.@@ No@@ t@@ if@@ y@@ Hand@@ lin@@ g.@@ N@@ ON@@ E@@ ; } }; replic@@ ation@@ Que@@ u@@ e.@@ on@@ New@@ Project@@ Cre@@ ated@@ (@@ event@@ ); p@@ oo@@ l.@@ res@@ ched@@ ule@@ (@@ this@@ , Dest@@ in@@ ation.@@ R@@ e@@ try@@ Re@@ as@@ on.@@ RE@@ P@@ O@@ S@@ IT@@ O@@ R@@ Y@@ _M@@ I@@ S@@ IN@@ G@@ ); } else { com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ Que@@ u@@ e.@@ rep@@ Lo@@ g.@@ warn@@ (("@@ Cannot repo@@ sitor@@ y create@@ d b@@ e create@@ d@@ wh@@ en replic@@ at@@ ing {@@ }@@ . " + ("@@ Cannot c@@ an on@@ l@@ y cre@@ ate mis@@ s@@ ing repo@@ sit@@ ori@@ es lo@@ y@@ , ve@@ r S@@ S@@ H or wh@@ en ") + admin@@ Ur@@ l in@@ ation.@@ ")); replic@@ ation@@ Ur@@ l = config@@ Se@@ e do@@ c@@ ument@@ ation for m@@ or@@ e in@@ for@@ m@@ ation@@ . u@@ ri@@ ); } } catch (java.io.IOException i@@ o@@ e) { error@@ ((@@ ("@@ Cannot replic@@ ate@@ d to " + (@@ u@@ ri@@ ))@@ )@@ )), f@@ ai@@ le@@ d to cre@@ ate repo@@ sitor@@ y repo@@ sitor@@ y i@@ o@@ e@@ , get@@ St@@ at@@ es@@ As@@ Array@@ ()); } else { state@@ Lo@@ g.@@ error@@ ((@@ ("@@ replic@@ ate to " + (@@ u@@ ri@@ )) + " not fo@@ un@@ d not fo@@ un@@ d es@@ As@@ Array@@ ()); } }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> read@@ Account@@ Group@@ Sub@@ group@@ s@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { try (@@ java.sql.@@ State@@ ment st@@ m@@ t = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )@@ ).get@@ Con@@ n@@ ection@@ ().@@ create@@ State@@ ment@@ ()@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Query@@ ((@@ (("@@ S@@ E@@ L@@ EC@@ T in@@ clu@@ de@@ _@@ u@@ u@@ id@@ " + (@@ F@@ RO@@ M account@@ _@@ group@@ _@@ by@@ _@@ id@@ " + " W@@ H@@ ER@@ E group@@ _@@ id = '@@ ")) + (@@ group@@ Id@@ .get@@ ())) + "@@ '@@ "@@ ))) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id> sub@@ s = new java.util.ArrayList<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.AccountGroup.@@ UU@@ I@@ D in@@ clu@@ ded@@ Group@@ U@@ u@@ id = new com.google.gerrit.reviewdb.client.AccountGroup.@@ UUID@@ (r@@ s.get@@ String@@ (1@@ )); sub@@ group@@ s.@@ add@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ By@@ Id.@@ Key@@ (@@ group@@ Id, in@@ clu@@ ded@@ Group@@ U@@ u@@ id@@ ))); } return sub@@ s; } catch (@@ java.sql.@@ SQL@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to rea@@ d to sub@@ group@@ s of ac@@ count %@@ s", f@@ ro@@ m Review@@ Db@@ ", group@@ Id@@ .get@@ ()), e); } }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > read@@ Account@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { try (@@ java.sql.@@ State@@ ment st@@ m@@ t = ((@@ com.google.gwtorm.@@ j@@ db@@ c.@@ J@@ db@@ c@@ Schema@@ ) (db@@ )@@ ).get@@ Con@@ n@@ ection@@ ().@@ create@@ State@@ ment@@ ()@@ ;@@ java.sql.@@ Result@@ Set r@@ s = st@@ m@@ t.@@ execute@@ Query@@ ((@@ (("@@ S@@ E@@ L@@ EC@@ T account@@ _@@ id@@ " + (@@ F@@ RO@@ M account@@ _@@ group@@ _@@ me@@ mber@@ s@@ " + " W@@ H@@ ER@@ E group@@ _@@ id = '@@ ")) + (@@ group@@ Id@@ .get@@ ())) + "@@ '@@ "@@ ))) { java.util.List<@@ com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ > me@@ mber@@ s = new java.util.ArrayList<@@ >(); while (r@@ s.@@ next@@ ()) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (r@@ s.get@@ In@@ t@@ (1@@ )); me@@ mber@@ s.@@ add@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Member@@ (@@ new com.google.gerrit.reviewdb.client.Account@@ Group@@ Me@@ mb@@ er.@@ Key@@ (account@@ Id, group@@ Id@@ ))); } return me@@ mber@@ s; } catch (@@ java.sql.@@ SQL@@ Exception e) { throw new com.google.gwtorm.server.Orm@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Fai@@ le@@ d to rea@@ d to rea@@ d to rea@@ d me@@ mber@@ s of ac@@ count %@@ s", f@@ ro@@ m Review@@ Db@@ ", group@@ Id@@ .get@@ ()), e); } }
public static com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le from@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account@@ Group@@ .@@ UU@@ I@@ D group@@ U@@ u@@ id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ From@@ Review@@ Db@@ (db, group@@ U@@ u@@ id@@ ); com.google.gerrit.reviewdb.client.Account@@ Group@@ Id group@@ Id = group@@ .getId@@ (); return com.google.gerrit.server.g@@ roup@@ .@@ db.@@ db.@@ Group@@ B@@ und@@ le.@@ create@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ S@@ ource@@ .@@ REVI@@ EW@@ _@@ D@@ B@@ , group@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ group@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ P@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ read@@ Account@@ Group@@ Sub@@ group@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ P@@ und@@ le.@@ read@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Group@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ )); }
public com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le from@@ Review@@ Db@@ (@@ com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.@@ Id group@@ Id@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account@@ Group g@@ roup = com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ From@@ Review@@ Db@@ (db, group@@ Id); return com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ create@@ (@@ com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ S@@ ource@@ .@@ REVI@@ EW@@ _@@ D@@ B@@ , group@@ , com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Member@@ Au@@ dit@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ db.@@ B@@ und@@ le.@@ read@@ Group@@ Sub@@ group@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ ), com.google.gerrit.server.g@@ roup@@ .@@ db.@@ Group@@ B@@ und@@ le.@@ read@@ Group@@ Sub@@ group@@ s@@ From@@ Review@@ Db@@ (db, group@@ Id@@ )); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ n@@ () throw@@ s java.lang.Exception { do@@ An@@ sw@@ er@@ (((@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ An@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) (("@@ Th@@ e in@@ vo@@ cation@@ )@@ " + "@@ )@@ ))); assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); }
@org.junit.Test public void delete@@ I@@ s@@ Not@@ Sup@@ p@@ orted@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t@@ (java.lang.@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ation@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ De@@ le@@ te f@@ ro@@ m in@@ de@@ x not sup@@ p@@ orted@@ "); hand@@ l@@ er.@@ index@@ (@@ Account.@@ Id.@@ parse@@ ("@@ 4@@ 3@@ "), O@@ per@@ ation.@@ DE@@ LE@@ T@@ E@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Account@@ Handler@@ (@@ index@@ er@@ Mo@@ ck@@ ); id = Account.@@ Id.@@ parse@@ ("@@ 1@@ 2@@ 3@@ "); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ n@@ () throw@@ s java.lang.Exception { do@@ An@@ sw@@ er@@ (((@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ An@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) (("@@ Th@@ e in@@ vo@@ cation@@ ) -@@ > { assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); }
@org.junit.Test public void delete@@ I@@ s@@ Not@@ Sup@@ p@@ orted@@ () throw@@ s java.lang.Exception { ex@@ cepti@@ on.@@ expec@@ t@@ (java.lang.@@ Un@@ sup@@ p@@ orted@@ O@@ per@@ ation@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ De@@ le@@ te f@@ ro@@ m in@@ de@@ x not sup@@ p@@ orted@@ "); hand@@ l@@ er.@@ index@@ (@@ Account@@ Group.@@ UUID@@ .@@ parse@@ ("@@ 3@@ 4@@ "), O@@ per@@ ation.@@ DE@@ LE@@ T@@ E@@ ); }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Group@@ Handler@@ (@@ index@@ er@@ Mo@@ ck@@ ); u@@ id = Account@@ Group.@@ UUID@@ .@@ parse@@ ("@@ 1@@ 2@@ 3@@ "); }
@org.junit.Test public void change@@ To@@ Index@@ Do@@ Not@@ Ex@@ ist@@ () throw@@ s java.lang.Exception { set@@ up@@ Change@@ Access@@ ated@@ Mo@@ ck@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Change@@ Handler@@ Test.@@ CHANG@@ E_@@ D@@ O@@ _@@ NO@@ T_@@ E@@ X@@ I@@ ST@@ ); hand@@ l@@ er.@@ index@@ (id@@ , O@@ per@@ ation.@@ IN@@ DE@@ X@@ ); ve@@ r@@ if@@ y(@@ index@@ er@@ Mo@@ ck@@ , ti@@ m@@ es@@ (1@@ )).@@ delete@@ (id@@ ); }
@org.junit.Test public void sh@@ o@@ ul@@ d@@ Set@@ And@@ Un@@ set@@ For@@ war@@ ded@@ Context@@ Ev@@ en@@ I@@ f@@ Exception@@ I@@ s@@ Throw@@ n@@ () throw@@ s java.lang.Exception { set@@ up@@ Change@@ Access@@ Rel@@ ated@@ Mo@@ ck@@ s(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Change@@ Handler@@ Test.@@ CHANG@@ E_@@ E@@ X@@ I@@ ST@@ S@@ ); do@@ An@@ sw@@ er@@ (((@@ org.@@ mo@@ ck@@ it@@ o.@@ st@@ ub@@ bin@@ g.@@ An@@ sw@@ er@@ <@@ java.lang.@@ Void@@ >@@ ) -@@ > { assert@@ Th@@ at(@@ com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ Contex@@ t.@@ is@@ For@@ war@@ ded@@ Event@@ ()).@@ is@@ True@@ (); throw new java.io.IO@@ Exception("@@ so@@ me@@ Message@@ "); }
private void set@@ up@@ Change@@ Access@@ Rel@@ ated@@ Mo@@ ck@@ s@@ (@@ boolean change@@ Ex@@ ist@@ , boolean orm@@ Exception, boolean i@@ o@@ Exception@@ ) throw@@ s com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ orm@@ Exception@@ ) { do@@ Throw@@ (@@ new com.google.gwtorm.server.Orm@@ Exception("@@ "@@ )).@@ wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ ck@@ ).@@ open@@ (); } else { wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ c@@ k.@@ open@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (db@@ Mo@@ ck@@ ); com.google.gerrit.reviewdb.server.@@ Change@@ Ac@@ ces@@ s c@@ a = mo@@ ck@@ (@@ com.google.gerrit.reviewdb.server.@@ Change@@ Access@@ .@@ class@@ ); wh@@ en@@ (db@@ Mo@@ c@@ k.@@ changes@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (c@@ a@@ ); if (change@@ Ex@@ ist@@ ) { wh@@ en@@ (c@@ a@@ .get(@@ id@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (change@@ ); if (@@ i@@ o@@ Exception@@ ) { do@@ Throw@@ (@@ new java.io.IO@@ Exception("@@ i@@ o@@ -@@ error@@ "@@ )).@@ wh@@ en@@ (@@ index@@ er@@ Mo@@ ck@@ ).@@ index@@ (db@@ Mo@@ ck@@ , change@@ ); } } else { wh@@ en@@ (c@@ a@@ .get(@@ id@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ null@@ ); } }
@org.junit.@@ B@@ e@@ for@@ e public void set@@ Up@@ () throw@@ s java.lang.Exception { wh@@ en@@ (s@@ chema@@ Factory@@ Mo@@ c@@ k.@@ open@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (db@@ Mo@@ ck@@ ); wh@@ en@@ (db@@ Mo@@ c@@ k.@@ changes@@ ()).@@ th@@ en@@ Ret@@ ur@@ n@@ (change@@ Access@@ Mo@@ ck@@ ); id = Change.@@ Id.@@ parse@@ ("@@ 2@@ 3@@ "); change = new com.google.gerrit.reviewdb.client.@@ Change@@ (@@ null@@ , id@@ , null@@ , com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s()); hand@@ le@@ r = new com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ For@@ war@@ ded@@ Index@@ Change@@ Handler@@ (@@ index@@ er@@ Mo@@ ck@@ , schema@@ Factory@@ Mo@@ ck@@ ); }
@java.lang.Override protected void set@@ up@@ S@@ o@@ y@@ Context@@ () { super@@ .set@@ up@@ S@@ o@@ y@@ Context@@ (); java.lang.String project@@ Name = branch@@ .getParent@@ Key@@ ().get@@ (); so@@ y@@ Contex@@ t.@@ put("@@ project@@ Name@@ ", project@@ Name); so@@ y@@ Contex@@ t.@@ put(@@ "@@ short@@ Project@@ Name@@ ", project@@ Name.@@ replace@@ All@@ ("/@@ *@@ /@@ ", "@@ .@@ "); java.lang.String pre@@ fi@@ x = "@@ "; if ((@@ args.@@ add@@ Name@@ In@@ Sub@@ ject@@ ) && ((@@ args.@@ instance@@ Name@@ Provider@@ ) != null@@ )) { pre@@ fi@@ x = (@@ com.google.common.base.@@ String@@ s@@ .@@ null@@ To@@ Empty(@@ instance@@ Name@@ .get@@ ())) + "@@ /@@ "; } so@@ y@@ Contex@@ t.@@ put("@@ instance@@ And@@ Project@@ Name@@ ", fi@@ x + (s@@ o@@ y@@ Context@@ .get(@@ "@@ short@@ Project@@ Name@@ "@@ )@@ ))); so@@ y@@ Context@@ Email@@ Dat@@ a.@@ put("@@ ssh@@ H@@ o@@ st@@ ", get@@ Ssh@@ H@@ o@@ st@@ ()); java.util.Map<java.lang.String, java.lang.String> branch@@ Data = new java.util.Hash@@ Map@@ <@@ >(); branch@@ Dat@@ a.@@ put(@@ "@@ short@@ Name@@ ", branch@@ .get@@ Sh@@ ort@@ Name()); so@@ y@@ Contex@@ t.@@ put("@@ branch@@ ", branch@@ Data@@ ); foo@@ ter@@ s.@@ add@@ (((@@ M@@ ail@@ Head@@ er.@@ P@@ RO@@ JEC@@ T@@ .@@ w@@ ith@@ De@@ li@@ mit@@ er@@ ()) + (@@ branch@@ .getParent@@ Key@@ ().get@@ ()))); foo@@ ter@@ s.add(@@ ("@@ branch@@ .get@@ Sh@@ ort@@ Name@@ ()))); } }
private java.lang.String get@@ Instance@@ Name(@@ org.eclipse.jgit.lib.@@ Config config@@ , @@@ com.google.gerrit.common.@@ Null@@ able com.google.inject.@@ Provider@@ <java.lang.String> can@@ on@@ ical@@ Url@@ Provider@@ ) { java.lang.String instance@@ Name = config@@ .get@@ String@@ ("@@ gerrit@@ ", null@@ , "@@ short@@ Name@@ "); if ((@@ instance@@ Name != null@@ ) || (c@@ an@@ on@@ ical@@ Url@@ Provi@@ der == null@@ )) { return instance@@ Name@@ ; } return can@@ on@@ ical@@ Url@@ Provider@@ .get@@ (); }
private static java.lang.String get@@ Instance@@ Name@@ () { java.lang.@@ Sy@@ ste@@ m.@@ out.@@ p@@ r@@ int@@ l@@ n@@ (@@ args.@@ instance@@ Name@@ Provider@@ ); java.lang.@@ Sy@@ ste@@ m.@@ out.@@ p@@ r@@ int@@ l@@ n@@ (@@ args.@@ instance@@ Name@@ Provider@@ .get()); return args.@@ instance@@ Name@@ Provider@@ .get@@ (); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) { if (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to allow@@ ed to se@@ t w@@ or@@ k in pro@@ g@@ res@@ s "); } if ((@@ change@@ .get@@ Status@@ ()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ Change is " + (com.google.gerrit.server.@@ Change@@ Util.@@ statu@@ s(@@ change@@ )@@ ))); } if (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ Change is al@@ read@@ y w@@ or@@ k in pro@@ g@@ res@@ s "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ true@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); } }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) { if (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to allow@@ ed to se@@ t read@@ y for re@@ vi@@ e@@ w for review@@ "); } if ((@@ change@@ .get@@ Status@@ ()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ Change is not w@@ or@@ k in pro@@ g@@ res@@ s " + (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ false@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); } }
protected <@@ T> org.@@ el@@ as@@ ti@@ c@@ search@@ .@@ index.@@ Query@@ Builder to@@ Query@@ Builder@@ (com.google.gerrit.server.query.@@ Predicate@@ <@@ T> p@@ ) throw@@ s com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception { if (@@ p instanceof com.google.gerrit.server.query.@@ And@@ Predicate@@ ) { return an@@ d(@@ p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Or@@ Predicate@@ ) { return or@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Not@@ Predicate@@ ) { return not@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.index.@@ Index@@ Predicate@@ ) { return fi@@ el@@ d@@ Query@@ ((@@ (com.google.gerrit.server.@@ index.@@ Index@@ Predicate@@ <@@ T@@ >@@ ) (p@@ ))); } else if ((@@ p instanceof com.google.gerrit.server.query.@@ An@@ y@@ Predicate@@ ) || ((@@ org.@@ el@@ as@@ ti@@ c@@ search@@ .@@ Query@@ Builder@@ s.@@ match@@ All@@ (); } else { throw new com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception@@ (("@@ cre@@ ate quer@@ y for index@@ : " + p@@ )); } }
public org.apache.@@ lucene.@@ search@@ .@@ Quer@@ y to@@ Quer@@ y(@@ com.google.gerrit.server.query.@@ Predicate@@ <@@ V@@ > p@@ ) throw@@ s com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception { if (@@ p instanceof com.google.gerrit.server.query.@@ And@@ Predicate@@ ) { return an@@ d(@@ p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Or@@ Predicate@@ ) { return or@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.query.@@ Not@@ Predicate@@ ) { return not@@ (p@@ ); } else if (@@ p instanceof com.google.gerrit.server.index.@@ Index@@ Predicate@@ ) { return fi@@ el@@ d@@ Query@@ ((@@ (com.google.gerrit.server.@@ index.@@ Index@@ Predicate@@ <@@ V@@ >@@ ) (p@@ ))); } else if ((@@ p instanceof com.google.gerrit.server.query.@@ An@@ y@@ Predicate@@ ) { return new org.apache.@@ lucene.@@ search@@ .@@ Match@@ All@@ Doc@@ s@@ Query@@ (); } else { throw new com.google.gerrit.server.query.@@ Query@@ Par@@ se@@ Exception@@ (("@@ cre@@ ate quer@@ y for index@@ : " + p@@ )); } }
@java.lang.Override public boolean match@@ (com.google.gerrit.server.@@ account.@@ Account@@ State account@@ State@@ ) throw@@ s com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.@@ Predicate@@ <@@ com.google.gerrit.server.account.Account@@ State@@ > pre@@ d = get@@ Ch@@ il@@ d(@@ 0); check@@ State@@ (p@@ re@@ d.@@ is@@ Match@@ able@@ (), ("@@ m@@ atch in@@ vo@@ k@@ ed@@ , bu@@ t ch@@ il@@ d pre@@ di@@ c@@ ate %s " + "@@ do@@ es@@ n@@ '@@ t i@@ mp@@ le@@ ment %@@ s@@ "), p@@ red@@ , com.google.gerrit.server.query.@@ Match@@ able@@ .@@ class@@ .getName@@ ()); return pre@@ d.@@ as@@ Match@@ able@@ ().@@ match@@ (account@@ State@@ ); }
private boolean can@@ Read@@ (@@ org.eclipse.jgit.lib.ObjectId rev@@ Id@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { try { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ Cache@@ .get(@@ project@@ Name); check@@ Not@@ Null@@ (project@@ State@@ , "@@ can@@ not lo@@ ad project %@@ s", project@@ Name); project@@ State.@@ check@@ State@@ (c@@ an@@ Read@@ ()); per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ Name@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ RE@@ AD@@ ); return true@@ ; } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception | com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception e) { try (@@ org.eclipse.jgit.revwalk.RevWalk r@@ w = new org.eclipse.jgit.revwalk.RevWal@@ k@@ (repo@@ )) { org.eclipse.jgit.revwalk.RevCommit commit = rw.@@ parse@@ Commit@@ (@@ rev@@ Id); return commit@@ s.@@ can@@ Read@@ (project@@ , repo@@ , commit@@ ); } }
@org.junit.Test public void check@@ Ma@@ x@@ W@@ ork@@ s() { com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ d(@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ d(@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ H@@ IT@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); }
private static void check@@ Label@@ I@@ s@@ Requ@@ i@@ re@@ d(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , java.util.Collections.@@ empty@@ List@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isNull@@ (); }
private static void check@@ Ma@@ x@@ I@@ s@@ E@@ n@@ for@@ ce@@ d(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ V@@ AL@@ U@@ E@@ ); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ); }
@org.junit.Test public void check@@ Ma@@ x@@ No@@ Block@@ I@@ g@@ no@@ res@@ M@@ in@@ () { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _M@@ AL@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ P@@ RO@@ V@@ AL@@ _@@ V@@ AL@@ ID@@ 2, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ S@@ _M@@ A@@ X@@ _@@ NO@@ B@@ LO@@ C@@ K@@ .@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ O@@ K@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ 2@@ .getAccount@@ Id()); }
private static com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l ma@@ k@@ e@@ Approval@@ (@@ short valu@@ e) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ ((@@ 1@@ 00@@ 0@@ 0 + value@@ )); com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l.@@ Key k@@ ey = com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ ma@@ k@@ e@@ Key@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ P@@ S_@@ ID@@ , account@@ Id, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ L@@ AB@@ E@@ L@@ _@@ ID@@ ); return new com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ (key@@ , value@@ , java.sql.@@ Dat@@ e.@@ from@@ (@@ java.@@ ti@@ m@@ e.@@ In@@ st@@ an@@ t.@@ no@@ w@@ ())); }
@org.junit.Test public void check@@ Label@@ Name@@ I@@ s@@ C@@ or@@ re@@ ct@@ () { for (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion : com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion.@@ values@@ ()) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , java.util.Collections.@@ empty@@ List@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ label@@ ).@@ isEqualTo@@ ("@@ V@@ er@@ if@@ i@@ ed@@ "); } }
@org.junit.Test public void check@@ F@@ unc@@ tion@@ Do@@ es@@ No@@ th@@ ing@@ () { com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ H@@ H@@ ref@@ s(@@ Label@@ F@@ unc@@ tion.@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ id@@ d@@ s(@@ Label@@ F@@ unc@@ tion.@@ NO@@ _@@ O@@ P@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ No@@ th@@ ing@@ H@@ H@@ H@@ H@@ H@@ ist@@ ing@@ Label@@ s(@@ F@@ unc@@ tion.@@ P@@ AT@@ CH@@ _S@@ E@@ T_@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Label@@ s@@ Requ@@ i@@ re@@ d(@@ Label@@ F@@ unc@@ tion.@@ AN@@ Y_@@ W@@ H@@ _@@ B@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Label@@ I@@ s@@ Requ@@ i@@ re@@ d(@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ W@@ H@@ ER@@ IT@@ H@@ ER@@ LO@@ C@@ K@@ ); com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ check@@ Label@@ s@@ Requ@@ i@@ re@@ d(@@ Label@@ F@@ unc@@ tion.@@ M@@ A@@ X@@ _@@ NO@@ _@@ B@@ LO@@ C@@ K@@ ); }
private static void check@@ Block@@ W@@ ork@@ s(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ V@@ AL@@ U@@ E@@ ); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ RE@@ JEC@@ T@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _M@@ 2@@ .getAccount@@ Id()); }
public boolean is@@ Ma@@ x@@ Value@@ M@@ an@@ dator@@ y@@ () { return requ@@ i@@ res@@ Ma@@ x@@ Value@@ ; }
public boolean is@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l check@@ (@@ com.google.gerrit.common.data.@@ Label@@ Type t@@ , java.lang.I@@ terable@@ <@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); l.@@ l@@ abe@@ l = t@@ .getName@@ (); l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ; if (@@ is@@ M@@ an@@ dator@@ y@@ ) { l.@@ statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ N@@ E@@ ED@@ ; } for (@@ com.google.gerrit.reviewdb.client.PatchSet@@ Ap@@ prova@@ l a : approval@@ s) { if ((@@ a@@ .getValue@@ ()) == 0) { continue@@ ; } if ((@@ is@@ Block@@ ) && (@@ t.@@ is@@ Ma@@ x@@ N@@ e@@ g@@ ative@@ (@@ a@@ ))) { ap@@ pli@@ ed@@ B@@ y = a@@ .getAccount@@ Id(); statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ RE@@ JEC@@ T@@ ; return l@@ ; } if ((@@ t.@@ is@@ Ma@@ x@@ Po@@ si@@ tive@@ (@@ a@@ )) || (!(@@ requ@@ i@@ res@@ Ma@@ x@@ Value@@ ))) { ap@@ pli@@ ed@@ B@@ y = a@@ .getAccount@@ Id(); statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ; if (@@ is@@ M@@ an@@ dator@@ y@@ ) { statu@@ s = Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ O@@ K@@ ; } } } return l@@ ; }
public boolean is@@ M@@ an@@ dator@@ y@@ () { return is@@ M@@ an@@ dator@@ y@@ ; }
private void check@@ Ma@@ x@@ Vali@@ dat@@ es@@ Th@@ e@@ Label@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s = com.google.common.collect.List@@ s@@ .@@ new@@ Array@@ List(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ 1, com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ P@@ RO@@ V@@ AL@@ _@@ 2, com.google.gerrit.common.data.@@ Label@@ Test.@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _M@@ 1); com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , approval@@ s); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ O@@ K@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isEqualTo(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ A@@ P@@ RO@@ V@@ AL@@ _@@ 2@@ .getAccount@@ Id()); }
private static java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > get@@ Approval@@ s@@ For@@ Label@@ (@@ java.util.List<@@ com.google.gerrit.reviewdb.client.PatchSet@@ Approval@@ > approval@@ s, com.google.gerrit.common.data.@@ Label@@ Type t@@ ) { return approval@@ s.@@ st@@ ream@@ ().@@ filter@@ (( input@@ ) -@@ > input@@ .get@@ Label@@ ().equals(@@ t@@ .get@@ Label@@ Id@@ ().get@@ ()@@ )).@@ collec@@ t(@@ java.util.@@ st@@ ream@@ .@@ Collec@@ tor@@ s.@@ to@@ List@@ ()); }
private static void check@@ No@@ th@@ ing@@ H@@ s(@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion f@@ unc@@ tion@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l my@@ L@@ abe@@ l = f@@ unc@@ tion.@@ check@@ (@@ com.google.gerrit.common.data.@@ Label@@ F@@ unc@@ tion@@ Test.@@ ER@@ V@@ ER@@ I@@ FI@@ ED@@ _@@ L@@ AB@@ E@@ L@@ , java.util.Collections.@@ empty@@ List@@ ()); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ statu@@ s).@@ isEqualTo(@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ ); assert@@ Th@@ at(@@ my@@ L@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ).@@ isNull@@ (); }
@java.lang.Override public com.google.gerrit.server.@@ restapi.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { return new com.google.gerrit.server.@@ restapi.@@ change.@@ Description@@ ().set@@ Label@@ ("@@ Set Review@@ ").@@ set@@ T@@ it@@ le@@ ("@@ Set Read@@ y Fo@@ r Re@@ vi@@ e@@ w == (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) && (rsrc@@ .getChange@@ ().@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ())@@ ), (r@@ sr@@ c.@@ is@@ User@@ Owner@@ (), per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ Con@@ d(@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ )@@ ))); }
@java.lang.Override public com.google.gerrit.server.@@ restapi.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { return new com.google.gerrit.server.@@ restapi.@@ Description@@ ().set@@ Label@@ ("@@ W@@ I@@ P@@ ").@@ set@@ T@@ it@@ le@@ ("@@ W@@ or@@ k I@@ n Pro@@ g@@ res@@ s == (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) && (!(@@ rsrc@@ .getChange@@ ().@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ())@@ ())@@ )).@@ is@@ User@@ (r@@ sr@@ c.@@ is@@ User@@ Owner@@ (), per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ Con@@ d(@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ )@@ "); }
private boolean sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (@@ final com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref@@ , com.googlesource.gerrit.plugins.@@ replication.@@ Replic@@ ation@@ State.@@ .@@ . st@@ at@@ es) { try { return th@@ read@@ S@@ cop@@ er.@@ s@@ cop@@ e@@ (@@ new java.util.concurrent.@@ C@@ all@@ able@@ <@@ java.lang.@@ Boolean@@ >() { @java.lang.Override public java.lang.@@ B@@ oolean call@@ () throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { com.google.gerrit.server.project.Project@@ State project@@ State = project@@ State@@ ; try { project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (@@ IO@@ Exception e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } if (!(@@ project@@ State.@@ state@@ ())) { return false@@ ; } if (!(@@ sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ State@@ , user@@ Provider@@ .get@@ ()))) { return false@@ ; } if (@@ PushOne@@ .@@ AL@@ L@@ _@@ RE@@ F@@ S@@ .equals(@@ ref@@ )) { return true@@ ; } try { per@@ mission@@ Back@@ end@@ .@@ current@@ User@@ (project@@ ).@@ ref@@ (ref@@ ).@@ check@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ Auth@@ Exception e) { return false@@ ; } } return true@@ ; } catch (com.google.gerrit.server.@@ project.@@ NoSuch@@ Project@@ Exception err@@ ) { state@@ Lo@@ g.@@ error@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Cannot project %s not avail@@ able@@ ", project@@ ), err@@ , st@@ at@@ es@@ ); } catch (@@ java.lang.Exception e) { com.google.common.base.@@ Throw@@ able@@ s@@ .@@ throw@@ I@@ f@@ Un@@ check@@ ed@@ (@@ e); throw new java.lang.@@ Run@@ time@@ Exception(@@ e); } return false@@ ; }
@java.lang.Override public java.lang.@@ B@@ oolean call@@ () throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception { com.google.gerrit.server.project.Project@@ State project@@ State@@ ; try { project@@ State = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ ); } catch (@@ IO@@ Exception e) { return false@@ ; } if (project@@ State == null@@ ) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ ); } if (!(@@ project@@ State.@@ state@@ Per@@ mit@@ s@@ Read@@ ())) { return false@@ ; } if (!(@@ sh@@ o@@ ul@@ d@@ Re@@ pli@@ cate@@ (project@@ State@@ , user@@ Provider@@ .get@@ ()))) { return false@@ ; } if (@@ PushOne@@ .@@ AL@@ L@@ _@@ RE@@ F@@ S@@ .equals(@@ ref@@ )) { return true@@ ; } try { per@@ mission@@ Back@@ end@@ .@@ current@@ User@@ (@@ ).@@ ref@@ (ref@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ RE@@ AD@@ ); } catch (@@ Auth@@ Exception e) { return false@@ ; } return true@@ ; }
private void post@@ De@@ le@@ tion@@ (com.google.gerrit.server.@@ project.@@ Project@@ Resource project, org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d@@ ) { ref@@ eren@@ ce@@ Updated@@ .@@ fi@@ re@@ (project@@ .getName@@ Key@@ (), cm@@ d@@ , current@@ User@@ .get().@@ state@@ ()); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.server.change.@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ O@@ p.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { com.google.gerrit.reviewdb.client.Change change = rsrc@@ .getChange@@ (); if (!(@@ r@@ sr@@ c.@@ is@@ User@@ Owner@@ ())) && (!(@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ test@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ )@@ ))) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ not allow@@ ed to se@@ t w@@ or@@ k in pro@@ g@@ res@@ s } if ((@@ change@@ .get@@ Status@@ ()) != (@@ com.google.gerrit.reviewdb.client.Change.@@ Status.@@ N@@ EW@@ )) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ (("@@ Change is " + (com.google.gerrit.server.@@ Change@@ Util.@@ statu@@ s(@@ change@@ )@@ ))); } if (@@ change.@@ is@@ W@@ ork@@ In@@ Pro@@ g@@ ress@@ ()) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ Change is al@@ read@@ y w@@ or@@ k in pro@@ g@@ res@@ s "); } try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { bu@@ .@@ add@@ Op@@ (rsrc@@ .getChange@@ ().get@@ Id(), op@@ Factory.create@@ (@@ true@@ , input@@ )); bu@@ .@@ execute@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ ("@@ "); } }
public java.lang.String create@@ () { java.lang.String su@@ mm@@ ary@@ Lin@@ e = (@@ ori@@ gin@@ al@@ Group.@@ is@@ P@@ res@@ ent@@ ()) ? g@@ roup : java.util.@@ J@@ o@@ in@@ er.@@ set@@ Visible@@ ((@@ ("@@ foo@@ ter@@ s " + "@@ :@@ add@@ F@@ oo@@ ter@@ For@@ R@@ en@@ ame@@ ()@@ .@@ if@@ ic@@ ation@@ s@@ :@@ add@@ ); get@@ F@@ oo@@ ter@@ s@@ For@@ Member@@ d@@ if@@ ic@@ ation@@ s@@ ()@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ s@@ :@@ add@@ ); get@@ F@@ oo@@ ter@@ s@@ For@@ Sub@@ group@@ Mo@@ d@@ if@@ ic@@ ation@@ s@@ ()@@ .@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ s@@ :@@ add@@ ); java.util.Collections.s@@ ort@@ (@@ foo@@ ter@@ s); java.util.@@ String@@ J@@ o@@ in@@ er foo@@ ter@@ J@@ o@@ in@@ er = new java.util.@@ J@@ o@@ in@@ er.@@ String@@ ("@@ \n@@ ", "@@ \n@@ ", "@@ foo@@ ter@@ J@@ o@@ in@@ er.@@ set@@ E@@ mpty@@ ("@@ "); foo@@ ter@@ s.@@ for@@ E@@ ach@@ (@@ foo@@ ter@@ in@@ er@@ in@@ :@@ add@@ ); java.lang.String foo@@ ter = foo@@ ter@@ J@@ o@@ in@@ er.@@ toString@@ (); return su@@ mm@@ ary@@ Lin@@ e + foo@@ ter@@ ; }
private boolean is@@ Change@@ De@@ le@@ t@@ able@@ (@@ com.google.gerrit.reviewdb.client.Change.@@ Statu@@ s statu@@ s) { switch (@@ statu@@ s) { case N@@ E@@ W : case AB@@ AN@@ D@@ ON@@ E@@ D : return true@@ ; case M@@ ER@@ G@@ E@@ D : return false@@ ; } return false@@ ; }
@java.lang.Override public Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion get@@ Description@@ (com.google.gerrit.server.@@ change.Change@@ Resource rsrc@@ ) { com.google.gerrit.reviewdb.client.Change.@@ Statu@@ s statu@@ s = rsrc@@ .getChange@@ ().get@@ Statu@@ s(); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Change per@@ m = r@@ sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ ); return new com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Description@@ ().set@@ Label@@ ("@@ Delete@@ ").@@ set@@ T@@ it@@ le@@ (("@@ De@@ le@@ te change " + (rsrc@@ .getId@@ ())@@ )).@@ set@@ Visible@@ (@@ and@@ ing@@ ); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > appl@@ y@@ Im@@ pl@@ (com.google.gerrit.server.@@ update.@@ Batch@@ Update.@@ Factor@@ y update@@ Factory@@ , com.google.gerrit.server.change.Change@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.@@ update.@@ Update@@ Exception { if (!(@@ is@@ Change@@ De@@ le@@ t@@ able@@ (rsrc@@ .getChange@@ ().get@@ Status@@ ())@@ )) { throw new com.google.gerrit.extensions.restapi.@@ Met@@ ho@@ d@@ Not@@ Al@@ low@@ ed@@ Exception("@@ can@@ not per@@ mit@@ ted@@ "); } r@@ sr@@ c.@@ per@@ mission@@ s().@@ dat@@ abase@@ (db@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); try (com.google.gerrit.server.@@ update.@@ Batch@@ Update b@@ u = update@@ Factory.create@@ (db@@ .get(), rsrc@@ .getProject@@ (), rsrc@@ .getUser@@ (), com.google.gerrit.common.@@ Time@@ Util.@@ no@@ w@@ T@@ s@@ ())) { com.google.gerrit.reviewdb.@@ Change@@ .@@ Change@@ Id id = rsrc@@ .getChange@@ ().get@@ Id(); bu@@ .set@@ Or@@ der@@ (@@ Or@@ der.@@ D@@ B@@ _@@ B@@ E@@ FO@@ RE@@ _@@ RE@@ P@@ O@@ ); bu@@ .@@ add@@ Op@@ (id@@ , op@@ Provider@@ .get()); bu@@ .@@ execute@@ (); } return rest@@ i@@ To@@ Respon@@ se.@@ n@@ one@@ (); }
@@@ com.google.gerrit.common.@@ Null@@ able private com.google.gerrit.server.project.Project@@ Resource parse@@ (java.lang.String id@@ , boolean check@@ Access@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (id@@ .@@ end@@ sWith@@ (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ )) { id = id@@ .@@ substring@@ (@@ 0, ((@@ id@@ .@@ length@@ ()) - (@@ Con@@ stant@@ s.@@ D@@ O@@ T_@@ G@@ I@@ T_@@ E@@ X@@ T@@ .@@ length@@ ()))); } com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (id@@ ); com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { return null@@ ; } if (@@ check@@ Access@@ ) { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ s@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ per@@ mission@@ To@@ Ch@@ ec@@ k@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return null@@ ; } try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ project@@ (@@ name@@ Key@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ W@@ R@@ IT@@ CON@@ FI@@ G@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { st@@ ate.@@ check@@ State@@ (@@ Per@@ mit@@ Read@@ (); } return new com.google.gerrit.server.project.Project@@ Resource@@ (@@ state@@ , user@@ .get()); }
private com.google.gerrit.server.project.Project@@ State check@@ Project@@ State@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception, java.io.IOException { com.google.gerrit.server.project.Project@@ State st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (project@@ Name); com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ s@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ per@@ mission@@ Name, false@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception@@ (project@@ Name); } st@@ ate.@@ check@@ State@@ (@@ state@@ ; return state@@ ; }
@java.lang.Override public final int parse@@ Argument@@ s(@@ org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ sp@@ i.@@ Parameter@@ s par@@ am@@ s) throw@@ s org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception { java.lang.String project@@ Name = par@@ am@@ s.get@@ Parameter@@ (@@ 0); while (project@@ Name.@@ end@@ sWith@@ ("/@@ ")) { project@@ Name = project@@ Name.@@ substring@@ (@@ 0, ((@@ project@@ Name.@@ length@@ ()) - 1@@ )); } while (project@@ Name.@@ startsWith@@ ("/@@ ")) { project@@ Name = project@@ Name.@@ substring@@ (1); } java.lang.String name@@ With@@ out@@ Su@@ f@@ fi@@ x = com.google.gerrit.common.@@ Project@@ Util.@@ st@@ ri@@ p@@ Git@@ Su@@ f@@ fix@@ (project@@ Name); com.google.gerrit.reviewdb.client.Project.NameKey name@@ Key = new com.google.gerrit.reviewdb.client.Project.NameKey@@ (@@ name@@ With@@ out@@ Su@@ f@@ fix@@ ); com.google.gerrit.server.project.Project@@ State state@@ ; try { st@@ ate = project@@ Cache.@@ check@@ ed@@ Get@@ (@@ name@@ Key@@ ); if (@@ st@@ ate == null@@ ) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ can@@ not fo@@ un@@ d name@@ With@@ out@@ Su@@ f@@ fix@@ ", name@@ With@@ out@@ Su@@ f@@ fix@@ )); } com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Per@@ mis@@ sion per@@ mission@@ To@@ Ch@@ ec@@ k = (@@ st@@ ate.@@ state@@ Per@@ mit@@ s@@ Read@@ ()) ? com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ .@@ AC@@ CES@@ S : com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Project@@ Permission@@ .@@ RE@@ AD@@ _@@ CON@@ FI@@ G@@ ; per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ ).@@ check@@ (@@ per@@ mission@@ Name, false@@ ); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name@@ Key@@ ).get@@ Message()); } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception | java.io.IOException e) { com.google.gerrit.server.@@ arg@@ s@@ 4@@ j@@ .@@ log.warn@@ (("@@ Cannot lo@@ ad project " + name@@ With@@ out@@ Su@@ f@@ fix@@ ), e); throw new org.@@ k@@ o@@ h@@ su@@ k@@ e.@@ arg@@ s@@ 4@@ j@@ .@@ Cm@@ d@@ Line@@ Exception(@@ owner@@ , new com.google.gerrit.server.project.@@ NoSuch@@ Project@@ Exception(@@ name@@ Key@@ ).get@@ Message()); } return 1; }
public static com.google.common.@@ cache.@@ Cache@@ Builder@@ <@@ java.lang.O@@ bject@@ , java.lang.O@@ bject@@ > get@@ Cache@@ Builder@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String name@@ ) { com.google.common.@@ cache.@@ Cache@@ Builder@@ <@@ java.lang.O@@ bject@@ , java.lang.O@@ bject@@ > b = com.google.common.@@ cache.@@ Cache@@ Builder@@ .@@ new@@ Builder@@ (); try { if ((@@ config@@ .get@@ String@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ W@@ eight@@ ")) != null@@ ) { b.@@ max@@ i@@ m@@ um@@ W@@ eight@@ (@@ config@@ .get@@ L@@ on@@ g@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ W@@ eight@@ ", (@@ 2@@ 0 <@@ < 2@@ 0@@ ))); } if ((@@ config@@ .get@@ String@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ Size@@ ")) != null@@ ) { b.@@ max@@ i@@ m@@ um@@ Size@@ (@@ config@@ .get@@ L@@ on@@ g@@ ("@@ cach@@ e@@ ", name, "@@ max@@ i@@ m@@ um@@ Size@@ ", 1@@ 6@@ 3@@ 4@@ )); } java.lang.@@ L@@ on@@ g@@ exp@@ i@@ re@@ After@@ Wri@@ te = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ cach@@ e@@ ", name, "@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ ", null@@ ); if (@@ exp@@ i@@ re@@ After@@ Wri@@ te != null@@ ) { b.@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ (@@ exp@@ i@@ re@@ After@@ Wri@@ te@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } java.lang.@@ L@@ on@@ g@@ exp@@ i@@ re@@ After@@ Ac@@ ces@@ s = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ exp@@ i@@ re@@ After@@ Access@@ ", null@@ ); if (@@ exp@@ i@@ re@@ After@@ Ac@@ ces@@ s != null@@ ) { b.@@ exp@@ i@@ re@@ After@@ Ac@@ cess(@@ exp@@ i@@ re@@ After@@ Access@@ , java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); } } catch (java.lang.@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (("@@ can@@ not get@@ t@@ ing " + name@@ ), e); } catch (java.lang.@@ I@@ l@@ leg@@ al@@ State@@ Exception e) { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ (("@@ Cannot t@@ ing " + name@@ ), e); } return b@@ ; }
public static javax.@@ annot@@ ation.@@ Null@@ able public static java.lang.String is@@ L@@ on@@ g@@ get@@ D@@ ur@@ ation@@ (@@ org.eclipse.jgit.lib.@@ Config config@@ , java.lang.String s@@ ection@@ , java.lang.String sub@@ s@@ ection@@ , java.lang.String name, @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.String av@@ a@@ m = config@@ .get@@ Time@@ Un@@ it@@ (s@@ ection@@ , sub@@ s@@ ection@@ , name, java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); if (@@ m != null@@ ) { return m@@ ; } return default@@ Value@@ ; }
@org.junit.Test public void null@@ As@@ Default@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.lib.@@ Config con@@ fig = new org.eclipse.jgit.lib.@@ Config@@ (); java.lang.@@ L@@ on@@ g@@ t@@ ; t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", "@@ "); com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", null@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isNull@@ (); }
@org.junit.Test public void get@@ D@@ ur@@ ation@@ Can@@ Ret@@ ur@@ n@@ Default@@ () throw@@ s java.lang.Exception { java.lang.@@ L@@ on@@ g de@@ f = 1@@ 00@@ 0@@ L@@ ; or@@ g@@ .@@ org.eclipse.jgit.@@ junit.@@ run@@ n@@ er.@@ Met@@ a@@ Data@@ Update m@@ d = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", "@@ "); com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); config.@@ set@@ String@@ ("@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", t = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", null@@ , "@@ b@@ l@@ an@@ k@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo@@ (1@@ 00@@ 0); }
@org.junit.Test public void get@@ D@@ ur@@ ation@@ Ret@@ ur@@ n@@ s@@ D@@ ur@@ ation@@ () throw@@ s java.lang.Exception { java.lang.@@ L@@ on@@ g de@@ f = 2 * 1@@ 00@@ 0@@ L@@ ; or@@ g@@ .@@ org.eclipse.jgit.@@ util.@@ Config con@@ fig = new@@ Config@@ (); java.lang.@@ L@@ on@@ g@@ t@@ ; config.@@ set@@ String@@ ("@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ m@@ s = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo(@@ 5@@ 00@@ ); config.@@ set@@ String@@ ("@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ 1 se@@ c se@@ "); try { com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", de@@ f@@ ); f@@ ail@@ ("@@ I@@ l@@ leg@@ al@@ Argument@@ Exception e) { assert@@ Th@@ at(@@ e@@ ).@@ has@@ Message@@ ().@@ isEqualTo@@ ("@@ Change@@ -@@ Id@@ : ne@@ ed m@@ it un@@ it value@@ : d@@ d@@ d@@ d@@ d@@ d@@ d@@ d@@ h@@ t.@@ time@@ out@@ =@@ 5@@ .@@ se@@ c se@@ d 2@@ ", "@@ d@@ ht@@ ", "@@ time@@ out@@ ", "@@ in = com.google.gitiles.@@ Config@@ Util@@ .get@@ D@@ ur@@ ation@@ (@@ config@@ , "@@ core@@ ", "@@ d@@ ht@@ ", "@@ d@@ ht@@ ", de@@ f@@ ); assert@@ Th@@ at(@@ t@@ ).@@ isEqualTo(@@ 6@@ 00@@ ); } }
void vali@@ date@@ Changes@@ (com.google.gerrit.server.git.@@ Project@@ Config config@@ , java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > remo@@ va@@ l@@ s, java.util.List<@@ com.google.gerrit.common.data.@@ Access@@ Section@@ > ad@@ di@@ tion@@ s) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Name@@ Exception, com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception { for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion : com.google.common.collect.I@@ terable@@ s.@@ con@@ c@@ at(@@ ad@@ di@@ tion@@ s, remo@@ va@@ l@@ s@@ )) { boolean is@@ G@@ lobal@@ Capabili@@ ti@@ es = Access@@ Sec@@ tion.@@ G@@ LO@@ B@@ AL@@ _@@ C@@ A@@ P@@ AB@@ IL@@ IT@@ I@@ ES@@ .equals(@@ s@@ ection@@ .getName@@ ()); if (@@ is@@ G@@ lobal@@ Capabili@@ ti@@ es) { if (!(@@ all@@ Project@@ s.@@ equals(@@ config@@ .getName@@ ()))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ (("@@ can@@ not ed@@ it g@@ lob@@ al c@@ ap@@ abili@@ ti@@ es for project@@ s oth@@ er th@@ " + (@@ all@@ Project@@ s.get@@ ()))); } } for (@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion s@@ ec@@ tion : ad@@ di@@ tion@@ s) { java.lang.String name = s@@ ection@@ .getName@@ (); boolean is@@ G@@ lobal@@ Capabili@@ ti@@ es = Access@@ Sec@@ tion.@@ G@@ LO@@ B@@ AL@@ _@@ C@@ A@@ P@@ AB@@ IL@@ IT@@ I@@ ES@@ .equals(@@ name); if (!@@ is@@ G@@ lobal@@ Capabili@@ ti@@ es) { if (!(@@ com.google.gerrit.common.data.@@ Access@@ Sec@@ tion.@@ is@@ Vali@@ d(@@ name@@ ))) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception("@@ s@@ ec@@ tion name name b@@ ec@@ tion name b@@ ec@@ ted@@ "); } } com.google.gerrit.server.project.@@ Ref@@ Pat@@ tern@@ .@@ vali@@ date@@ (@@ name); } else { java.util.@@ Set@@ <java.lang.String> plugin@@ Capabili@@ ti@@ es = list@@ Capabili@@ ti@@ es.@@ list@@ Capabili@@ ti@@ es.@@ list@@ Plugin@@ Capabili@@ ti@@ es@@ ().@@ key@@ Set@@ (); for (@@ com.google.gerrit.common.data.@@ Per@@ mis@@ sion p : s@@ ection@@ .get@@ Permission@@ s()) { if (!@@ (@@ com.google.gerrit.common.data.@@ G@@ lobal@@ Capabili@@ ty@@ .@@ is@@ G@@ lobal@@ Capabili@@ ty@@ )) { throw new com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ ((@@ ("@@ Capabili@@ ti@@ es ad@@ d g@@ lob@@ al c@@ ap@@ abili@@ t@@ y " + (p@@ .getName@@ ())) + "@@ : to g@@ lob@@ ")); } } }
static java.lang.String get@@ Sh@@ ort@@ Project@@ Name@@ (java.lang.String project@@ Name) { int last@@ Index@@ S@@ las@@ h = project@@ Name.@@ last@@ Index@@ Of@@ ("/@@ "); if (@@ last@@ Index@@ S@@ las@@ h == 0) { return project@@ Name.@@ substring@@ (1); } return "@@ .@@ " + (project@@ Name.@@ substring@@ ((@@ last@@ Index@@ S@@ las@@ h + 1@@ ))); }
@org.junit.Test public void edit@@ Can@@ not@@ Be@@ Cre@@ ated@@ On@@ Ab@@ an@@ do@@ ned@@ Change@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change = gApi.changes().id(@@ changeId@@ ).get@@ (); gApi.changes().id(@@ changeId@@ ).@@ ab@@ an@@ do@@ n@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s is AB@@ AN@@ D@@ ON@@ ED@@ ", change.@@ _@@ n@@ umber@@ )); create@@ Ar@@ b@@ it@@ r@@ ary@@ Edit@@ (change@@ Id); }
private void assert@@ Can@@ Edit@@ (com.google.gerrit.server.@@ notedb.@@ Change@@ Note@@ s notes@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, java.io.IOException { if (!@@ (c@@ urrent@@ User@@ .get().@@ is@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation requ@@ i@@ red@@ "); } com.google.gerrit.reviewdb.client.Change change = notes@@ .getChange@@ (); if (!(@@ change@@ .get@@ Statu@@ s().@@ is@@ Open@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ Change %s is change@@ .getChange@@ Id(), change@@ .get@@ Status@@ ())); } try { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ dat@@ abase@@ (@@ review@@ Db@@ ).@@ change@@ (@@ notes@@ ).@@ check@@ (@@ Change@@ Permission@@ .@@ AD@@ D@@ _@@ P@@ AT@@ CH@@ _S@@ E@@ T@@ ); project@@ Cache.@@ check@@ ed@@ Get@@ (@@ notes@@ .getProject@@ Name@@ ()).@@ check@@ State@@ (@@ Per@@ mit@@ ted@@ ()); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception d@@ en@@ i@@ ed@@ ) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception("@@ Auth@@ enti@@ c@@ ation not per@@ mit@@ ted d@@ en@@ i@@ ed@@ ", e); } }
@org.junit.Test public void edit@@ Can@@ not@@ Be@@ Cre@@ ated@@ On@@ Merged@@ Change@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Change@@ Info change = gApi.changes().id(@@ changeId@@ ).get@@ (); gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ review@@ (@@ com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ ()); gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ submit@@ (); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ (@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ change %s is M@@ ER@@ G@@ ED@@ ", change.@@ _@@ n@@ umber@@ )); create@@ Ar@@ b@@ it@@ Ar@@ it@@ ary@@ Edit@@ For@@ (change@@ Id); }
@java.lang.Override public boolean delete@@ Change@@ From@@ Index@@ (@@ final int changeId@@ ) { return new com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Rest@@ For@@ war@@ der.@@ Request@@ (@@ f@@ ro@@ m in@@ de@@ x@@ change changeId@@ ) { @java.lang.Override com.ericsson.gerrit.plugins.@@ high@@ availabili@@ ty@@ .@@ for@@ war@@ der.@@ rest.@@ Http@@ Respon@@ se@@ Handl@@ er.@@ Http@@ Result sen@@ d(@@ ) throw@@ s java.io.IOException { return http@@ Session@@ .@@ delete@@ (@@ bu@@ ild@@ Index@@ En@@ d@@ p@@ o@@ int@@ (change@@ Id@@ )); } }@@ .@@ execute@@ (); }
@org.junit.Test public void st@@ o@@ red@@ Submit@@ Recor@@ d@@ sWith@@ Requ@@ i@@ re@@ ment@@ s() { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d r = com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ re@@ cor@@ d(@@ Submit@@ Recor@@ d.@@ Status.@@ O@@ K@@ , com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ label@@ (@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ M@@ A@@ Y@@ , "@@ Label@@ -@@ 1@@ ", null@@ ), com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test.@@ label@@ (@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l.@@ Status.@@ O@@ K@@ , "@@ Label@@ -@@ 2@@ ", 1@@ )); com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment s@@ r = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = ex@@ t@@ ex@@ cepti@@ on@@ ; long st@@ rin@@ g w@@ it@@ h sp@@ ec@@ i@@ al sy@@ m@@ bo@@ l@@ s < < < / ; java.lang.String short@@ _@@ type@@ ", com.google.common.collect.Immutable@@ Map.@@ of@@ ("@@ c@@ u@@ st@@ o@@ m@@ _@@ dat@@ a@@ ", valu@@ e@@ valu@@ r.@@ requ@@ i@@ re@@ ment@@ s = java.util.Collections.singleton@@ List(@@ sr@@ ); com.google.gerrit.server.index.@@ change.Change@@ Fiel@@ d@@ Test@@ .@@ assert@@ St@@ o@@ red@@ Recor@@ d@@ R@@ o@@ und@@ T@@ ri@@ p@@ (r@@ ); }
private com.google.gerrit.common.data.@@ Submit@@ Recor@@ d to@@ Submit@@ Recor@@ d(@@ ) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d re@@ c = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d@@ (); re@@ c.@@ statu@@ s = statu@@ s; re@@ c.@@ error@@ Messag@@ e = error@@ Message@@ ; if ((@@ label@@ s) != null@@ ) { re@@ c.@@ label@@ s = new java.util.Array@@ List(@@ label@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ L@@ abe@@ l l@@ abe@@ l : label@@ s) { com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ L@@ abe@@ l sr@@ l = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Label@@ (); sr@@ l.@@ l@@ abe@@ l = l@@ abe@@ l.@@ label@@ ; sr@@ l.@@ statu@@ s = l@@ abe@@ l.@@ statu@@ s; sr@@ l.@@ ap@@ pli@@ ed@@ B@@ y = ((@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) != null@@ ) ? new com.google.gerrit.reviewdb.client.Account.@@ Id(@@ l@@ abe@@ l.@@ ap@@ pli@@ ed@@ By@@ ) : null@@ ; re@@ c.@@ label@@ s.add(@@ sr@@ l@@ ); } if ((@@ requ@@ i@@ re@@ ment@@ s) != null@@ ) { re@@ c.@@ requ@@ i@@ ment@@ s = new java.util.Array@@ List@@ (re@@ qu@@ i@@ ment@@ s.@@ size()); for (com.google.gerrit.server.@@ index.@@ change.Change@@ Fiel@@ d.@@ St@@ o@@ red@@ Submit@@ Recor@@ d.@@ St@@ o@@ red@@ Requ@@ i@@ re@@ q@@ ) { if ((@@ req@@ .@@ f@@ allback@@ ) == null@@ ) { continue@@ ; } com.google.gerrit.common.data.@@ Submit@@ Recor@@ d.@@ Requ@@ i@@ re@@ r = new com.google.gerrit.common.data.@@ Submit@@ Recor@@ d(@@ req@@ .@@ f@@ allback@@ (@@ f@@ allback@@ , ex@@ cepti@@ on@@ , text@@ ); re@@ c.@@ requ@@ i@@ re@@ s.add(@@ sr@@ ); } } return rec@@ ; }
@java.lang.Override public boolean equals(@@ java.lang.O@@ bject o@@ ) { if ((@@ this@@ ) == o@@ ) { return true@@ ; } if (((@@ !@@ (@@ o instanceof com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ ) && ((@@ com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment th@@ a@@ t = ((@@ com.google.gerrit.common.data.@@ Submit@@ Requ@@ i@@ re@@ ment@@ ) (@@ o@@ )); return ((@@ java.util.@@ Object@@ s.@@ e@@ qual@@ s@@ (@@ f@@ allback@@ , th@@ at@@ allback@@ ); } else { throw new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception("@@ Change st@@ a@@ t mo@@ d@@ "); } }
public java.util.List<@@ java.util.List<@@ com.google.gerrit.common.data.@@ Parameter@@ i@@ zed@@ > dat@@ a@@ () { return dat@@ a@@ ; }
public java.lang.String f@@ allback@@ T@@ ex@@ t@@ () { return get@@ T@@ ex@@ t.@@ re@@ l@@ Tip@@ (); }
@java.lang.Override public java.lang.String toString@@ () { return ((((@@ ((@@ (("@@ Submit@@ Requ@@ i@@ re@@ ment@@ {@@ " + "@@ f@@ allback@@ =@@ '@@ ) + "@@ '@@ ) + (@@ f@@ allback@@ T@@ ex@@ t@@ )) + '@@ \@@ '@@ ) + typ@@ e = ") + (@@ typ@@ e.@@ change@@ Type@@ )) + '@@ \@@ '@@ ) + "@@ '@@ \@@ '@@ ) + (@@ dat@@ a@@ )) + "@@ '@@ }@@ '@@ ; }
@java.lang.Override public int has@@ h@@ Code@@ () { return java.util.@@ Object@@ s.@@ has@@ h@@ (@@ f@@ allback@@ , typ@@ e); }
public java.lang.String typ@@ () { return get@@ Path@@ (); }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { if (@@ ver@@ sion@@ Manager.@@ is@@ K@@ no@@ w@@ n@@ Index@@ (@@ name@@ ))@@ ))@@ ))) { if (@@ ver@@ sion@@ Manager.@@ start@@ Re@@ index@@ er@@ (@@ name, for@@ ce@@ )) { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Un@@ able star@@ ted "); } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Un@@ able to re@@ index@@ , in@@ de@@ x is al@@ read@@ y th@@ e l@@ at@@ est ver@@ sion "); } } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Re@@ index@@ , in@@ de@@ x is unk@@ no@@ w@@ n base@@ d on name this d@@ "); } } catch (com.google.gerrit.server.@@ index.@@ Re@@ index@@ er@@ Al@@ read@@ y@@ Runn@@ ing@@ Exception e) { throw di@@ e@@ (("@@ Fai@@ le@@ d to star@@ t re@@ index@@ : " + (@@ e.get@@ Message@@ ()))); } }
@java.lang.Override protected void run() throw@@ s com.google.gerrit.sshd.commands.@@ Un@@ log@@ g@@ ed@@ F@@ ail@@ ur@@ e { if (@@ ver@@ sion@@ Manager.@@ is@@ K@@ no@@ w@@ n@@ Index@@ (@@ name@@ ))@@ ))@@ ))) { if (@@ ver@@ sion@@ Manager.@@ ac@@ ti@@ v@@ ate@@ L@@ at@@ est@@ Index@@ (@@ name@@ )) { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ error@@ : l@@ at@@ est in@@ de@@ x ver@@ sion ver@@ sion@@ "); } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Al@@ read@@ y index@@ ing index@@ ", us@@ ing l@@ at@@ est ver@@ sion@@ "); } } else { s@@ t@@ do@@ u@@ t.@@ p@@ r@@ int@@ l@@ n@@ ("@@ Re@@ index@@ ing index@@ ", index@@ , no@@ w@@ n base@@ d on this name@@ "); } } catch (com.google.gerrit.server.@@ index.@@ Re@@ index@@ er@@ Al@@ read@@ y@@ Runn@@ ing@@ Exception e) { throw di@@ e@@ (("@@ Fai@@ le@@ d to ac@@ ti@@ v@@ ate at@@ est index@@ : " + (@@ e.get@@ Message@@ ()))); } }
public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <java.lang.String> apply(@@ com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User user@@ , java.lang.String new@@ P@@ asswor@@ d@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception { java.lang.String user@@ Name = user@@ .getUser@@ Name@@ ().@@ or@@ E@@ l@@ se@@ Throw@@ ((@@ -@@ > new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception("@@ user@@ name m@@ us@@ t b@@ e set@@ "); java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id@@ > o@@ ption@@ al@@ Ex@@ t@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ ExternalId@@ .@@ Key@@ .create@@ (com.google.gerrit.server.@@ account.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ Name@@ )); if (!(@@ o@@ ption@@ al@@ Ex@@ t@@ Id.@@ is@@ P@@ res@@ ent@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (); } com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id ext@@ Id = o@@ ption@@ al@@ Ex@@ t@@ Id@@ .get@@ (); account@@ s@@ Provider@@ .get().@@ update@@ H@@ T@@ P P@@ asswor@@ d a vi@@ d a A@@ P@@ I ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ account@@ Id(), ext@@ .get@@ (); update@@ ExternalId@@ (com.google.gerrit.server.@@ account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ .create@@ With@@ P@@ asswor@@ d(@@ ext@@ Id.@@ key@@ (), ext@@ Id.@@ account@@ Id(), ext@@ Id.@@ email@@ (), new@@ P@@ asswor@@ d@@ ))); return com.google.common.base.Strings.@@ isNull@@ Or@@ E@@ mpty@@ (@@ new@@ P@@ asswor@@ d@@ ) ? com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ <java.lang.String@@ >@@ n@@ one@@ () : com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ o@@ k@@ (@@ new@@ P@@ asswor@@ d); }
@org.junit.Test public void ra@@ w@@ Doc@@ ument@@ () throw@@ s java.lang.Exception { com.google.gerrit.extensions.common.@@ Account@@ Info user@@ Info = gApi.@@ account@@ s().@@ id(@@ admin@@ .getAccount@@ Id@@ ().get@@ ()@@ ).get@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.@@ index.@@ Fiel@@ d@@ B@@ und@@ le@@ > ra@@ w@@ Fiel@@ d@@ s = index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ R@@ a@@ w@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (user@@ Info.@@ _@@ account@@ Id@@ ), com.google.gerrit.@@ index.@@ Query@@ Option@@ s.@@ create@@ (@@ com.google.gerrit.@@ index.@@ Index@@ Config.@@ create@@ Default@@ (), 0, 1, index@@ es@@ .get@@ Se@@ arch@@ Index@@ ().get@@ Schema@@ ().get@@ Fiel@@ d@@ s().@@ key@@ Set@@ ())); assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s).@@ is@@ P@@ res@@ ent@@ (); assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s.get@@ ().get@@ Value@@ (@@ Account@@ Fiel@@ d.@@ ID@@ )).@@ isEqualTo@@ (user@@ Info.@@ _@@ account@@ Id); if ((@@ get@@ Version@@ ()) < 6@@ ) { return@@ ; } java.util.List<@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info> ext@@ er@@ n@@ al@@ Id@@ Info@@ s = gApi.@@ account@@ s().@@ self@@ ().get@@ ExternalId@@ s(); java.util.List<@@ com.google.gerrit.server.query.@@ account.@@ Ab@@ str@@ act@@ Query@@ Account@@ s@@ Test.@@ Test.@@ St@@ a@@ w@@ rap@@ By@@ te@@ Array@@ W@@ rap@@ per@@ b@@ lob@@ s = new java.util.ArrayList<@@ >(); for (@@ com.google.gerrit.extensions.common.@@ Account@@ ExternalId@@ Info in@@ fo : ext@@ er@@ n@@ al@@ Id@@ Info@@ s) { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ ExternalId@@ > ext@@ Id = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ id@@ enti@@ ty@@ )); assert@@ Th@@ at(@@ ext@@ Id.@@ is@@ P@@ res@@ ent@@ ()).@@ is@@ True@@ (); b@@ lob@@ s.@@ add@@ (@@ new com.google.gerrit.server.query.@@ account.@@ Ab@@ str@@ act@@ Query@@ Account@@ s@@ Test.@@ W@@ rap@@ per@@ (@@ ext@@ Id@@ .get@@ By@@ te@@ Array@@ ())); } assert@@ Th@@ at(@@ ra@@ w@@ Fiel@@ d@@ s.get@@ Account@@ Fiel@@ d.@@ Account@@ Fiel@@ d.@@ E@@ X@@ T@@ ER@@ N@@ AL@@ _@@ ID@@ AT@@ E@@ )).@@ hasSize@@ (@@ b@@ lob@@ s.@@ st@@ ream@@ ().@@ w@@ Fiel@@ d@@ ().get@@ (@@ Account@@ Fiel@@ d.@@ w@@ Fiel@@ d.@@ E@@ X@@ T@@ ER@@ N@@ _@@ ID@@ AT@@ E@@ X@@ T@@ ER@@ N@@ AL@@ _@@ ID@@ _@@ ID@@ AT@@ E@@ )).@@ map@@ (( b@@ ) -@@ > new com.google.gerrit.server.query.@@ account.@@ By@@ te@@ Array@@ (@@ b@@ )).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ b@@ lob@@ s); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Tag@@ Resource resource@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { java.lang.String t@@ a@@ g = com.google.gerrit.server.project.@@ Ref@@ Util.@@ n@@ or@@ ma@@ li@@ ze@@ Ref@@ (@@ resource@@ .get@@ Tag@@ Info@@ ().@@ ref@@ ); if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ (t@@ ag@@ )) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception@@ (("@@ not allow@@ ed to de@@ le@@ te " + tag@@ )); } per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ project@@ (@@ resource@@ .getName@@ Key@@ ()).@@ ref@@ (t@@ ag@@ ).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); resource@@ .getProject@@ State@@ ().@@ check@@ State@@ (((@@ resource@@ Per@@ mit@@ Wri@@ te@@ ()) + " Ref@@ Factory.create@@ (@@ resource@@ ).@@ ref@@ (t@@ ag@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.project.@@ Branch@@ Resource rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.RestApi@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException { if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ (rsrc@@ .get@@ Branch@@ Key@@ ().get@@ ())) { throw new com.google.gerrit.extensions.restapi.Auth@@ Exception@@ (("@@ not allow@@ ed to de@@ le@@ te b@@ ran@@ ch " + (rsrc@@ .get@@ Branch@@ Key@@ ().get@@ ()))); } per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ ref@@ (rsrc@@ .get@@ Branch@@ Key@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); rsrc@@ .getProject@@ State@@ ().@@ check@@ State@@ (((@@ per@@ mit@@ s@@ Per@@ mit@@ Wri@@ te@@ (); if (!(@@ query@@ Provider@@ .get().@@ set@@ Li@@ mit@@ (1@@ ).@@ by@@ Branch@@ Open@@ (rsrc@@ .get@@ Branch@@ ()).@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflict@@ Exception@@ ((@@ ("@@ can@@ not allow@@ ed " + (rsrc@@ .get@@ Branch@@ Key@@ ())) + " h@@ a@@ s op@@ en change@@ s op@@ en changes@@ ")); } delete@@ Ref@@ Factory.create@@ (rsrc@@ ).@@ ref@@ (rsrc@@ .getRef@@ ()).@@ pre@@ fix@@ (com.google.gerrit.server.@@ project.@@ R@@ _@@ HE@@ AD@@ S@@ ).@@ delete@@ (); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
public static boolean is@@ Met@@ a@@ Config@@ Ref@@ (java.lang.String ref@@ ) { return com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ RE@@ F@@ S_@@ CON@@ FI@@ G@@ .equals(@@ ref@@ ); }
private boolean can@@ Delete@@ (@@ org.eclipse.jgit.transport.@@ Receive@@ Comman@@ d cm@@ d@@ ) throw@@ s com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Ref@@ (cm@@ d@@ .getRef@@ Name@@ ())) { return false@@ ; } try { per@@ mis@@ sions.@@ ref@@ (cm@@ d@@ .getRef@@ Name@@ ()).@@ check@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ); return project@@ State.@@ state@@ Per@@ mit@@ Wri@@ te@@ (); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { return false@@ ; } }
private com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info create@@ Branch@@ Info@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ For@@ Re@@ f per@@ m@@ , org.eclipse.jgit.lib.@@ Re@@ f ref@@ , com.google.gerrit.server.project.Project@@ State project@@ State@@ , com.google.gerrit.server.@@ Current@@ User user@@ , java.util.@@ Set@@ <java.lang.String> t@@ arget@@ s) { com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info in@@ fo = new com.google.gerrit.extensions.api.@@ projects.@@ Branch@@ Info@@ (); info.@@ re@@ f = ref@@ .getName@@ (); info.@@ re@@ vi@@ sion = ((@@ ref@@ .get@@ Object@@ Id@@ ()) != null@@ ) ? ref@@ .get@@ Object@@ Id@@ ().@@ name@@ () : null@@ ; if (@@ com.google.gerrit.reviewdb.client.@@ Ref@@ Nam@@ es.@@ is@@ Met@@ a@@ Config@@ (ref@@ .getName@@ ())) { info.@@ can@@ De@@ le@@ te = null@@ ; } else { info.@@ can@@ De@@ le@@ te = ((@@ (!(@@ t@@ arget@@ s.@@ contains(@@ ref@@ .getName@@ ()))) && (@@ per@@ m.@@ test@@ Or@@ F@@ alse@@ (@@ Ref@@ Permission@@ .@@ DE@@ LE@@ T@@ E@@ ))) && (project@@ State.@@ state@@ s@@ Wri@@ te@@ ())) ? true : null@@ ; com.google.gerrit.server.project.@@ Branch@@ Resource r@@ sr@@ c = new com.google.gerrit.server.project.@@ Branch@@ Resource@@ (project@@ State@@ , user@@ , ref@@ ); for (@@ com.google.gerrit.extensions.@@ we@@ bu@@ i.@@ Ui@@ Ac@@ tion.@@ Des@@ crip@@ tion d : ui@@ Action@@ s.@@ from@@ (@@ branch@@ View@@ s, rsrc@@ )) { if ((@@ info.@@ action@@ s) == null@@ ) { info.@@ action@@ s = new java.util.@@ Tree@@ Map@@ (); } info.@@ action@@ s.@@ put(@@ d@@ .getId@@ (), new com.google.gerrit.extensions.common.@@ Action@@ Info@@ (@@ d@@ )); } java.util.List<@@ com.google.gerrit.extensions.common.@@ Web@@ Link@@ Info> link@@ s = web@@ Link@@ s.get@@ Branch@@ Link@@ s(@@ project@@ State@@ .getName@@ (), ref@@ .getName@@ ()); info.@@ web@@ Link@@ s = (@@ link@@ s.@@ isEmpty()) ? null : link@@ s; return info@@ ; }
@org.junit.Test public void st@@ ore@@ Th@@ en@@ Query@@ Not@@ Visible@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ Provider@@ Mo@@ c@@ k.@@ an@@ (@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ Throw@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception("@@ )).@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); st@@ ore@@ .@@ st@@ ore@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = st@@ ore@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ EN@@ ER@@ I@@ C_@@ Q@@ U@@ ER@@ Y@@ ); assert@@ Th@@ at(@@ event@@ s).@@ isEmpty@@ (); }
@org.junit.Test public void st@@ ore@@ Th@@ en@@ Query@@ Visible@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ Provider@@ Mo@@ c@@ k.@@ an@@ (user@@ Provider@@ ).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ No@@ th@@ ing@@ ().@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); st@@ ore@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = st@@ ore@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ EN@@ ER@@ I@@ C_@@ Q@@ U@@ ER@@ Y@@ ); java.lang.String j@@ s@@ on = new com.google.g@@ son.@@ G@@ son@@ ().to@@ Json@@ (@@ mo@@ ck@@ Event@@ ); assert@@ Th@@ at(@@ event@@ s).@@ contains@@ Ex@@ act@@ l@@ y(@@ json@@ ); }
@java.lang.Override public java.util.List<java.lang.String> query@@ Change@@ Event@@ s(@@ java.lang.String query@@ ) throw@@ s com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ Event@@ s@@ Log@@ Exception { if (!(@@ on@@ line@@ )) { throw new com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ Ser@@ vi@@ ce@@ Un@@ avail@@ able@@ Exception@@ (); } java.util.List<@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQ@@ LE@@ n@@ try@@ > ent@@ ri@@ es = new java.util.ArrayList<@@ >(); for (@@ java.util.Map@@ .@@ E@@ n@@ try@@ <java.lang.String, java.util.Collection<@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQ@@ LE@@ n@@ try@@ >> en@@ try : event@@ s@@ Db@@ .get@@ Event@@ s(@@ query@@ ).@@ as@@ Map@@ ().@@ en@@ try@@ Set@@ ()) { java.lang.String project@@ Name = en@@ try@@ .getKey@@ (); try { per@@ mission@@ Back@@ en@@ d.@@ user@@ (user@@ Provi@@ der@@ .get@@ ()@@ )).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); ent@@ ri@@ es.@@ add@@ All(@@ en@@ try@@ .getValue@@ ()); } catch (@@ com.google.gerrit.extensions.restapi.Auth@@ Exception e) { } catch (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception e) { com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ .@@ log.warn@@ ("@@ Cannot ch@@ ec@@ k project ac@@ ces@@ s per@@ mis@@ sion ", e); } } return s@@ orted@@ Event@@ s@@ From@@ Ent@@ ri@@ es(@@ ent@@ ri@@ es@@ ); }
@org.junit.Test public void not@@ Ret@@ ur@@ n@@ Event@@ With@@ No@@ Vi@@ si@@ b@@ ili@@ ty@@ Info@@ () throw@@ s java.lang.Exception { wh@@ en@@ (@@ per@@ mission@@ Back@@ end@@ Mo@@ c@@ k.@@ user@@ (user@@ Provider@@ Mo@@ c@@ k@@ .get@@ ()@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ w@@ ith@@ User@@ Mo@@ ck@@ ); wh@@ en@@ (@@ w@@ ith@@ User@@ Mo@@ c@@ k.@@ project@@ (@@ an@@ y(@@ Project.Name@@ Key@@ .@@ class@@ )@@ )).@@ th@@ en@@ Ret@@ ur@@ n@@ (@@ for@@ Project@@ Mo@@ ck@@ ); do@@ Throw@@ (@@ new com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception("@@ "@@ )).@@ wh@@ en@@ (@@ for@@ Project@@ Mo@@ ck@@ ).@@ check@@ (@@ Project@@ Permission@@ .@@ AC@@ CES@@ S@@ ); set@@ Up@@ Cli@@ ent@@ (); st@@ ore@@ Event@@ (@@ mo@@ ck@@ Event@@ ); java.util.List<java.lang.String> event@@ s = st@@ ore@@ .@@ query@@ Change@@ Event@@ s(@@ com.ericsson.gerrit.plugins.@@ event@@ s@@ log.@@ sql.@@ SQL@@ Store@@ Test.@@ G@@ EN@@ ER@@ I@@ C_@@ Q@@ U@@ ER@@ Y@@ ); assert@@ Th@@ at(@@ event@@ s).@@ isEmpty@@ (); }
private java.lang.O@@ bject log@@ o@@ () { if ((@@ log@@ o@@ Url@@ ) == null@@ ) { return null@@ ; } java.lang.String ur@@ l = fm@@ t.@@ i@@ m@@ age@@ (@@ log@@ o@@ Url@@ ); if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (@@ url@@ )) { return url@@ ; } else if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ url@@ )) { return com.google.@@ te@@ m@@ pl@@ ate.@@ so@@ y.@@ sh@@ a@@ red@@ .@@ int@@ er@@ n@@ al@@ .@@ S@@ an@@ iti@@ z@@ er@@ s.@@ filter@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ url@@ ); } else { return Sh@@ a@@ red@@ U@@ ti@@ li@@ t@@ y@@ U@@ ti@@ li@@ mit@@ ; } }
java.lang.String in@@ line@@ (@@ @@@ javax.@@ annot@@ ation.@@ Null@@ able java.lang.String mar@@ k@@ do@@ w@@ n@@ Path@@ , java.lang.String i@@ m@@ age@@ Path@@ ) { java.lang.String dat@@ a = in@@ line@@ Ma@@ y@@ be@@ (@@ do@@ w@@ n@@ Path@@ , i@@ m@@ age@@ Path@@ ); if (@@ dat@@ a != null@@ ) { return dat@@ a@@ ; } return dat@@ a@@ ; }
@@@ com.google.common.@@ annot@@ ation@@ s.@@ Visible@@ For@@ Test@@ ing java.lang.String h@@ ref@@ (java.lang.String t@@ arget@@ ) { if (((@@ t@@ arg@@ e@@ t.@@ startsWith@@ ("@@ #@@ ")) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (t@@ arget@@ ))) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ M@@ ail@@ to@@ U@@ ri@@ (t@@ arget@@ ))) { return t@@ arget@@ ; } else if (t@@ arg@@ e@@ t.@@ startsWith@@ ("@@ git@@ :@@ ")) { if (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Git@@ U@@ ri@@ (t@@ arget@@ )) { return t@@ arget@@ ; } return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ NO@@ R@@ M@@ AL@@ _@@ IN@@ C@@ U@@ O@@ US@@ _@@ O@@ US@@ ER@@ S@@ ; } java.lang.String an@@ ch@@ or = "@@ "; int has@@ h = t@@ arg@@ e@@ t.@@ index@@ Of(@@ '@@ #@@ '); if (@@ has@@ h >@@ = 0) { an@@ ch@@ or = t@@ arg@@ e@@ t.@@ substring@@ (@@ has@@ h@@ ); t@@ arg@@ e@@ t = t@@ arg@@ e@@ t.@@ substring@@ (@@ 0, has@@ h@@ ); } java.lang.String des@@ t = com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ Path@@ Res@@ ol@@ v@@ er.@@ res@@ ol@@ ve@@ (@@ file@@ Path@@ , t@@ arget@@ ); if ((@@ des@@ t == null@@ ) || ((@@ view@@ ) == null@@ )) { return Sh@@ a@@ red@@ U@@ ti@@ li@@ ty.@@ NO@@ _@@ AL@@ U@@ E@@ _@@ NO@@ _@@ O@@ US@@ _@@ UT@@ P@@ T@@ ; } com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ Builder b@@ ; if ((@@ view@@ .get@@ Type@@ ()) == (@@ G@@ itile@@ s@@ View@@ .@@ Type.@@ RO@@ O@@ T@@ ED@@ _@@ D@@ O@@ C@@ )) { b = com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ r@@ oo@@ ted@@ Doc@@ (); } else { b = com.google.gitiles.@@ G@@ itile@@ s@@ View@@ .@@ path@@ (); } des@@ t = b.@@ copy@@ From@@ (@@ view@@ ).set@@ Path@@ P@@ art@@ (@@ dest@@ ).@@ bu@@ ild@@ ().to@@ Url@@ (); return (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ Path@@ Res@@ ol@@ v@@ er.@@ re@@ l@@ ative@@ (re@@ qu@@ est@@ , an@@ chor@@ )) + an@@ chor@@ ; }
java.lang.String i@@ m@@ age@@ (java.lang.String dest@@ ) { if ((@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Valid@@ Http@@ U@@ ri@@ (@@ dest@@ )) || (@@ com.google.g@@ itile@@ s@@ .@@ do@@ c.@@ html.@@ Html@@ Buil@@ der.@@ is@@ Im@@ age@@ Data@@ U@@ ri@@ (@@ dest@@ ))) { return dest@@ ; } else if ((@@ i@@ m@@ age@@ Load@@ er@@ ) != null@@ ) { return i@@ m@@ age@@ Load@@ er.@@ in@@ line@@ (@@ file@@ Path@@ , dest@@ ); } return null@@ ; }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ st@@ ri@@ ct@@ Label@@ s", valu@@ e = "@@ true@@ ") public void vo@@ te@@ On@@ Be@@ h@@ al@@ f@@ Of@@ Invalid@@ Label@@ () throw@@ s java.lang.Exception { allow@@ CodeReview@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Revision@@ Ap@@ i re@@ vi@@ sion = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ (); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = user@@ .@@ id@@ .@@ toString@@ (); in.@@ label@@ ("@@ Not@@ A@@ -@@ Label@@ ", 5@@ ); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ Th@@ is not a l@@ abe@@ l revision@@ .@@ review@@ (in@@ ); }
@org.junit.Test @@@ com.google.gerrit.acceptance.@@ Gerrit@@ Config@@ (@@ name = "@@ change.@@ st@@ ri@@ ct@@ Label@@ s", valu@@ e = "@@ true@@ ") public void st@@ ri@@ ct@@ Label@@ Vo@@ t@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", (@@ -@@ 1@@ )); ex@@ cepti@@ on.@@ expec@@ t(@@ com.google.gerrit.extensions.restapi.B@@ adRequest@@ Exception@@ .@@ class@@ ); ex@@ cepti@@ on.@@ expec@@ t@@ Message@@ ("@@ l@@ abe@@ l \"@@ V@@ er@@ if@@ i@@ ed@@ \@@ " is not a configure@@ d label@@ "); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); }
@org.junit.Test public void n@@ on@@ St@@ ri@@ ct@@ Label@@ Vo@@ t@@ es@@ Per@@ Default@@ () throw@@ s java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); r@@ .@@ assert@@ O@@ k@@ Statu@@ s(); java.lang.String change@@ Id = r@@ .getChange@@ Id(); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = com.google.gerrit.extensions.api.changes.@@ Review@@ Input.@@ ap@@ pro@@ ve@@ (); in.@@ label@@ ("@@ V@@ er@@ if@@ i@@ ed@@ ", (@@ -@@ 1@@ )); in.@@ label@@ ("@@ Code@@ -@@ Style@@ ", 1); in.@@ label@@ ("@@ Li@@ b@@ r@@ ary@@ -@@ Comp@@ li@@ ance@@ ", (@@ -@@ 1@@ )); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ reviewer@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ ().@@ key@@ Set@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ("@@ Code@@ -@@ Review@@ "); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ reviewer@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ es@@ ().@@ values@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ((@@ (@@ short@@ ) (@@ 2@@ ))); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).get@@ ().@@ submit@@ table@@ ).@@ is@@ True@@ (); in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ label@@ ("@@ Code@@ -@@ Review@@ ", 4@@ 2); gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ revision@@ (r@@ .get@@ Commit@@ ().@@ name@@ ()).@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ changeId@@ ).@@ current@@ ().@@ reviewer@@ (@@ admin@@ .@@ email@@ ).@@ vo@@ t@@ es@@ ().@@ email@@ ()).@@ contains@@ Ex@@ act@@ ly@@ ((@@ (@@ short@@ ) (@@ 2@@ ))); }
@org.junit.Test public void vo@@ te@@ On@@ Be@@ h@@ al@@ f@@ Of@@ Invalid@@ Label@@ I@@ g@@ no@@ red@@ With@@ out@@ St@@ ri@@ ct@@ Label@@ s() throw@@ s java.lang.Exception { allow@@ CodeReview@@ On@@ Be@@ h@@ al@@ f@@ Of@@ (); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange@@ (); com.google.gerrit.extensions.api.changes.@@ Revision@@ Ap@@ i re@@ vi@@ sion = gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()).@@ current@@ (); com.google.gerrit.extensions.api.changes.@@ Review@@ Input in = new com.google.gerrit.extensions.api.changes.@@ Review@@ Input@@ (); in.@@ on@@ Be@@ h@@ al@@ f@@ O@@ f = user@@ .@@ id@@ .@@ toString@@ (); in.@@ label@@ ("@@ Code@@ -@@ Review@@ ", 1); in.@@ label@@ ("@@ Not@@ A@@ -@@ Label@@ ", 5@@ ); revision@@ .@@ review@@ (in@@ ); assert@@ Th@@ at(@@ gApi.changes().id(@@ r@@ .getChange@@ Id@@ ()@@ ).get@@ ().@@ label@@ s@@ )@@ .@@ do@@ es@@ Not@@ Cont@@ ain@@ Key@@ ("@@ Not@@ A@@ -@@ Label@@ "); }
@java.lang.Override public com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ t@@ y resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { return com.google.gerrit.extensions.restapi.B@@ in@@ ary@@ Result.@@ create@@ ("@@ o@@ k@@ \n@@ "); }
private static java.lang.String change@@ Permission@@ Name@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Change@@ Per@@ mis@@ sion change@@ Permission@@ ) { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Map@@ p@@ ing@@ s.@@ change@@ Permission@@ Name@@ (change@@ Permission@@ ).@@ or@@ E@@ l@@ se@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ ()); }
private static java.lang.String ref@@ Permission@@ Name@@ (com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Ref@@ Per@@ mis@@ sion ref@@ Permission@@ ) { return com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Default@@ Permission@@ Map@@ p@@ ing@@ s.@@ ref@@ Name(@@ ref@@ Permission@@ ).@@ or@@ E@@ l@@ se@@ ((@@ ) -@@ > new java.lang.I@@ l@@ leg@@ al@@ State@@ Exception@@ ()); }
@java.lang.Override public java.lang.O@@ bject apply(@@ com.google.gerrit.server.account.Account@@ Resource rsrc@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ en@@ d.@@ current@@ User@@ (); if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ m.@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); per@@ m = per@@ mission@@ Back@@ en@@ d.@@ user@@ (rsrc@@ .getUser@@ ()); } java.util.Map<java.lang.String, java.lang.O@@ bject@@ > h@@ av@@ e = new java.util.@@ Link@@ ed@@ Hash@@ Map@@ <@@ >(); for (@@ com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Plugin@@ Or@@ Per@@ mis@@ sion p : per@@ m.@@ test@@ (@@ per@@ mission@@ s@@ To@@ Test@@ ())) { h@@ av@@ e.@@ put(@@ p.@@ per@@ mission@@ Name@@ (), true@@ ); } com.google.gerrit.server.account.Account@@ Li@@ mit@@ s li@@ mit@@ s = li@@ mit@@ s@@ Factory.create@@ (rsrc@@ .getUser@@ ()); add@@ R@@ ang@@ es(@@ h@@ ave@@ , li@@ mit@@ s); add@@ P@@ ri@@ ori@@ ty(@@ h@@ ave@@ , li@@ mit@@ ); return Output@@ For@@ ma@@ t.@@ J@@ S@@ ON@@ .@@ new@@ G@@ son@@ ().to@@ Json@@ Tree@@ (@@ h@@ ave@@ , new com.google.g@@ son.@@ ref@@ lec@@ t.@@ Type@@ Token@@ <@@ java.util.Map<java.lang.String, java.lang.O@@ bject@@ >@@ >() {@@ }@@ .get@@ Type@@ ()); }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ t@@ y parse@@ (com.google.gerrit.server.@@ account.@@ Account@@ Resource parent@@ , com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ (); com.google.gerrit.server.@@ Id@@ ent@@ if@@ i@@ ed@@ User t@@ arg@@ e@@ t = parent@@ .getUser@@ (); if ((@@ self@@ .get@@ ()) != t@@ arget@@ ) { per@@ mission@@ Back@@ en@@ d.@@ current@@ User@@ ().@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); } com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Or@@ Per@@ mis@@ sion per@@ m = parse@@ (id@@ ); if (@@ per@@ mission@@ Back@@ en@@ d.@@ user@@ (t@@ arget@@ ).@@ test@@ (@@ per@@ m@@ )) { return new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Capabili@@ ty(@@ t@@ arget@@ , per@@ m.@@ per@@ mission@@ Name()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); }
private com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ G@@ lobal@@ Or@@ Plugin@@ Per@@ mis@@ sion parse@@ (@@ com.google.gerrit.extensions.restapi.@@ Id@@ Strin@@ g id@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { java.lang.String name = id@@ .get@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.@@ per@@ mis@@ sions.@@ G@@ lobal@@ Permission@@ >@@ per@@ m = com.google.gerrit.server.@@ per@@ mission@@ s@@ Permission@@ .@@ P@@ Default@@ Permission@@ Map@@ p@@ ing@@ s(@@ name); if (@@ per@@ m@@ .is@@ P@@ res@@ ent@@ ()) { return per@@ m@@ .get@@ (); } int d@@ as@@ h = name.@@ last@@ Index@@ Of(@@ '@@ -@@ '); if (@@ d@@ as@@ h < 0) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } java.lang.String plugin@@ Name = name.@@ substring@@ (@@ 0, d@@ ash@@ ); java.lang.String c@@ ap@@ abili@@ t@@ y = name.@@ substring@@ ((@@ d@@ as@@ h + 1@@ )); if ((@@ plugin@@ Name.@@ isEmpty()) || (c@@ ap@@ abili@@ ty.@@ isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception@@ (id@@ ); } return new com.google.gerrit.extensions.api.@@ ac@@ ces@@ s.@@ Plugin@@ Permission@@ (@@ plugin@@ Name, c@@ ap@@ abili@@ ty@@ ); }
public boolean is@@ Default@@ () { return false@@ ; }
public void check@@ Default@@ () throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception { if (!(@@ is@@ Default@@ ())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception("@@ G@@ erri@@ t per@@ mission@@ s not use@@ d on this server@@ "); } }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.@@ config.@@ List@@ Capabili@@ ti@@ es.@@ Capabili@@ ty@@ Info> apply(@@ com.google.gerrit.server.config.@@ Config@@ Resource resource@@ ) throw@@ s com.google.gerrit.extensions.restapi.ResourceNotFound@@ Exception, java.lang.I@@ l@@ leg@@ al@@ Access@@ Exception, java.lang.@@ NoSuch@@ Fiel@@ d@@ Exception { per@@ mission@@ Back@@ en@@ d.@@ check@@ (); return com.google.common.collect.Immutable@@ Map.@@ <java.lang.String, com.google.gerrit.server.@@ config.@@ List@@ Capabili@@ ti@@ es.@@ Capabili@@ ty@@ Info@@ >@@ buil@@ der@@ ().@@ put@@ All(@@ collec@@ t@@ Co@@ re@@ Capabili@@ ti@@ es@@ ()).@@ put@@ All(@@ collec@@ t@@ Plugin@@ Capabili@@ ti@@ es@@ ()).@@ bu@@ ild@@ (); }
@java.lang.Override public boolean is@@ Default@@ () { return true@@ ; }
private java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > fix@@ Invalid@@ Se@@ qu@@ en@@ ce@@ Number@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > key@@ s) { com.google.common.collect.@@ Or@@ der@@ ing@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > o = com.google.common.collect.@@ Or@@ der@@ ing.@@ from@@ (@@ java.util.@@ Comp@@ ar@@ ator@@ .@@ com@@ pa@@ ring@@ (( k@@ ) -@@ > k@@ ey = id@@ ().get@@ ())); java.util.List<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > fix@@ ed@@ Key@@ s = new java.util.Array@@ List(@@ key@@ s); com.google.gerrit.server.account.Account@@ Ssh@@ Key min@@ Key = o.@@ min@@ (key@@ s); while ((@@ min@@ Key@@ .@@ id@@ ().get@@ ()) <@@ = 0) { com.google.gerrit.server.account.Account@@ Ssh@@ Key fix@@ ed@@ Key = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ min@@ Key@@ .@@ id@@ ().get@@ Parent@@ Key@@ (), java.lang.@@ M@@ ath@@ .@@ max@@ (((@@ o.@@ max@@ (key@@ s@@ )@@ )).@@ id@@ ().get@@ ()) + 1@@ ), min@@ Key@@ .@@ ssh@@ Key@@ ()); java.util.Collections.@@ replace@@ All(@@ fix@@ ed@@ Key@@ s, min@@ Key@@ , fix@@ ed@@ Key@@ ); min@@ Key = o.@@ min@@ (@@ fix@@ ed@@ Key@@ s); } return fix@@ ed@@ Key@@ s; }
private void mar@@ k@@ In@@ vali@@ d(@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ) { try { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ log.@@ info@@ ((@@ ("@@ F@@ S@@ S@@ H k@@ ey " + (@@ k@@ ey ") + (@@ k@@ ())) + " in@@ valid@@ ")); auth@@ ori@@ zed@@ Key@@ s.@@ mar@@ k@@ Key@@ In@@ vali@@ d(@@ k@@ , k@@ , ac@@ k ().get@@ ()); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalid@@ Exception e) { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ log.error@@ ((@@ ("@@ Fai@@ le@@ d to mar@@ k S@@ S@@ H k@@ ey " + (@@ k@@ ())) + " in@@ vali@@ d e); } }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id@@ , java.lang.String en@@ cod@@ ed@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (id@@ , en@@ cod@@ ed@@ ); }
private void add(@@ java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l@@ , com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ) { try { k@@ l.@@ add@@ (@@ new com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ (@@ k@@ , com.google.gerrit.sshd.@@ Ssh@@ Util.@@ parse@@ (@@ k@@ ))); } catch (@@ java.lang.O@@ ut@@ ut@@ Of@@ M@@ em@@ ory@@ E@@ rror e) { throw e@@ ; } catch (java.lang.@@ Throwable e) { mar@@ k@@ In@@ vali@@ d(@@ k@@ ); } }
private void delete@@ Ssh@@ Key@@ (@@ com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info i@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key ssh@@ Key = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ (user@@ .getAccount@@ Id(), i.@@ se@@ q@@ ), ssh@@ PublicKey@@ ); delete@@ Ssh@@ Key@@ .@@ appl@@ y@@ (@@ new com.google.gerrit.server.account.Account@@ Resource@@ .@@ Ssh@@ Key@@ (user@@ .@@ as@@ Id@@ ent@@ if@@ i@@ ed@@ User@@ (), ssh@@ Key@@ ), null@@ ); }
public static com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info new@@ Ssh@@ Key@@ Info@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key ssh@@ Key@@ ) { com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info in@@ fo = new com.google.gerrit.extensions.common.@@ Ssh@@ Key@@ Info@@ (); info.@@ se@@ q = ssh@@ Key@@ ().get@@ (); info.@@ ssh@@ Public@@ Key = ssh@@ Key@@ .is@@ Active@@ (); info.@@ en@@ cod@@ ed@@ Key = ssh@@ Key@@ .@@ en@@ cod@@ ed@@ Key@@ (); info.@@ al@@ g@@ ori@@ th@@ m = ssh@@ Key@@ .@@ ssh@@ Key@@ (); info.@@ comm@@ ent = com.google.common.base.Strings.@@ empty@@ To@@ Null@@ (@@ ssh@@ Key@@ .@@ comm@@ ent@@ ()); info.@@ vali@@ d = ssh@@ Key@@ .@@ vali@@ d d d d d d d d d d d d d d d d it@@ h ssh@@ Key@@ "); return info@@ ; }
@java.lang.Override public java.lang.I@@ terable@@ <@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > load@@ (java.lang.String user@@ name@@ ) throw@@ s java.lang.Exception { com.google.gerrit.server.account.@@ ext@@ er@@ n@@ ali@@ d@@ s.@@ External@@ Id user = ext@@ er@@ n@@ al@@ Id@@ s.get(@@ ExternalId@@ .@@ Key@@ .create@@ (@@ com.google.gerrit.sshd.@@ S@@ CH@@ E@@ M@@ E_@@ US@@ ER@@ NAM@@ E, user@@ name@@ )); if (@@ user == null@@ ) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _S@@ U@@ CH@@ _@@ US@@ ER@@ ; } java.util.List<@@ com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ E@@ n@@ try@@ > k@@ l = new java.util.ArrayList<@@ >@@ (@@ 4@@ ); for (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key k : auth@@ ori@@ zed@@ Key@@ s.get@@ Key@@ s(@@ user@@ .@@ account@@ Id@@ ())) { if (@@ k@@ .@@ vali@@ d@@ ()) { add(@@ k@@ l@@ , k@@ ); } } if (@@ k@@ l.@@ isEmpty()) { return com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cache@@ Impl.@@ NO@@ _@@ K@@ E@@ Y@@ S@@ ; } return java.util.Collections.@@ un@@ mo@@ d@@ if@@ i@@ able@@ List(@@ k@@ l@@ ); }
private boolean mar@@ k@@ Key@@ Invalid@@ (@@ int se@@ q@@ ) { check@@ Load@@ ed@@ (); java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >@@ = key@@ s.get@@ (@@ se@@ q@@ ); if ((@@ key@@ .is@@ P@@ res@@ ent@@ ()) && (key@@ .@@ get@@ ().@@ vali@@ d@@ ())) { key@@ s.@@ add@@ ((@@ se@@ q - 1@@ ), java.util.@@ Optional@@ .@@ of@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .create@@ (@@ key@@ .@@ g@@ e@@ t@@ ((@@ q - 1@@ ), true@@ ); return false@@ ; } return false@@ ; }
public abstract com.google.gerrit.client.@@ account.@@ Account@@ Capabili@@ ti@@ es id@@ ();
public abstract com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Builder set@@ Id@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id@@ );
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ Invalid@@ (@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id id@@ , java.lang.String ssh@@ Public@@ Key@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (@@ id@@ , ssh@@ PublicKey@@ , false@@ ); }
@java.lang.Override public com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id@@ , java.lang.String en@@ cod@@ ed@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception { try { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (id@@ , com.google.gerrit.sshd.@@ Ssh@@ Util.@@ to@@ Open@@ Ssh@@ PublicKey@@ (@@ en@@ cod@@ ed@@ )); com.google.gerrit.sshd.@@ Ssh@@ Util.@@ parse@@ (key@@ ); return key@@ ; } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ NoSuch@@ Al@@ g@@ ori@@ th@@ m@@ Exception | java.@@ s@@ ecu@@ ri@@ ty.@@ sp@@ ec@@ .@@ Invalid@@ Key@@ S@@ p@@ ec@@ Exception e) { throw new com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception@@ (); } catch (@@ java.@@ s@@ ecu@@ ri@@ ty.@@ NoSuch@@ Provider@@ Exception e) { com.google.gerrit.sshd.@@ Ssh@@ Key@@ Cre@@ ator@@ Impl.@@ log.error@@ ("@@ Cannot par@@ se S@@ S@@ H k@@ ey e); throw new com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception@@ (); } }
public static java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> parse@@ (@@ com.google.gerrit.reviewdb.client.Account.Id account@@ Id, java.lang.String s) { java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s = new java.util.ArrayList<@@ >(); int se@@ q = 1; for (java.lang.String lin@@ e : s.@@ s@@ pli@@ t@@ ("@@ \@@ r@@ ?@@ \@@ \n@@ ")) { lin@@ e = line@@ .@@ tri@@ m@@ (); if (@@ line@@ .@@ isEmpty()) { continue@@ ; } else if (@@ line@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ IN@@ V@@ AL@@ ID@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ EN@@ T_@@ P@@ RE@@ FI@@ X@@ )) { java.lang.String pu@@ b = line@@ .@@ substring@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ IN@@ V@@ AL@@ ID@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ EN@@ T_@@ P@@ RE@@ FI@@ X@@ .@@ length@@ ()); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ In@@ vali@@ d(@@ user@@ Id, account@@ Id, se@@ q@@ ++@@ )), pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); } else if (@@ line@@ .@@ startsWith@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ DE@@ LE@@ T@@ ED@@ _@@ K@@ E@@ Y_@@ CO@@ M@@ M@@ EN@@ T@@ )) { key@@ s.add(@@ java.util.@@ Optional@@ .@@ empty@@ ()); se@@ q@@ ++@@ ; } else if (@@ line@@ .@@ startsWith@@ ("@@ #@@ ")) { continue@@ ; } else { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ Ssh@@ Key@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, se@@ q@@ )), line@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); } } return key@@ s; }
@org.junit.Test public void vali@@ y@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, (@@ -@@ 1@@ )), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ vali@@ d@@ ()).@@ is@@ F@@ alse@@ (); k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ valid@@ ()).@@ is@@ F@@ alse@@ (); k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ vali@@ d@@ ()).@@ is@@ True@@ (); }
@org.junit.Test public void get@@ ter@@ s() throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, 1@@ ), com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ ssh@@ Public@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ al@@ g@@ ori@@ th@@ m@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ O@@ N key@@ .@@ en@@ cod@@ ed@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ Y@@ s@@ pli@@ t@@ y assert@@ Th@@ at(@@ key@@ .@@ comm@@ ent@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ X@@ -@@ Key@@ "); }
private static void assert@@ Par@@ se@@ (@@ java.lang.String@@ Builder auth@@ ori@@ zed@@ Key@@ s, java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> expected@@ Key@@ s) { com.google.gerrit.reviewdb.client.Account.Id account@@ Id = new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1); java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> par@@ sed@@ Key@@ s = com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s.@@ parse@@ (account@@ Id, auth@@ ori@@ zed@@ Key@@ s.@@ toString@@ ()); assert@@ Th@@ at(@@ par@@ sed@@ Key@@ s).@@ contains@@ Ex@@ act@@ ly@@ Element@@ s@@ In@@ (@@ expected@@ Key@@ s); int se@@ q = 1; for (@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > ssh@@ Key : par@@ sed@@ Key@@ s) { if (@@ ssh@@ Key@@ .is@@ P@@ res@@ ent@@ ()) { assert@@ Th@@ at(@@ ssh@@ Key@@ .get@@ ()).@@ isEqualTo(@@ account@@ Id); assert@@ Th@@ at(@@ ssh@@ Key@@ .get@@ ()@@ )).@@ isEqualTo(@@ se@@ q@@ ); } }
private static java.lang.String add@@ Invalid@@ Key@@ (@@ java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s, java.lang.String pu@@ b@@ ) { com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), ((@@ key@@ s.@@ size@@ ()) + 1@@ )); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ In@@ vali@@ d@@ (key@@ Id, pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return key@@ ; }
@org.junit.Test public void key@@ With@@ New@@ Lin@@ es@@ () throw@@ s java.lang.Exception { com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, com.google.gerrit.server.account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ _@@ W@@ IT@@ H@@ _@@ N@@ EW@@ L@@ IN@@ ES@@ ); assert@@ Th@@ at(@@ key@@ .@@ ssh@@ Public@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1); assert@@ Th@@ at(@@ key@@ .@@ al@@ th@@ m@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ O@@ K@@ E@@ Y@@ s@@ pli@@ t@@ ("@@ O@@ K@@ ed@@ Key@@ s@@ "); assert@@ Th@@ at(@@ key@@ .@@ en@@ cod@@ ed@@ Key@@ ()).@@ isEqualTo@@ (com.google.gerrit.server.@@ account.@@ Auth@@ ori@@ zed@@ Key@@ s@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ Y@@ ", "@@ O@@ Auth@@ ori@@ zed@@ Key@@ Test.@@ K@@ E@@ Y@@ 1@@ .@@ s@@ pli@@ t@@ ("@@ H@@ ER@@ RO@@ R@@ : " + key@@ .@@ s@@ pli@@ t@@ ("@@ Y@@ ")); }
private static java.lang.String add@@ Key@@ (@@ java.util.List<@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ >> key@@ s, java.lang.String pu@@ b@@ ) { com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id@@ (@@ new com.google.gerrit.reviewdb.client.Account.@@ Id@@ (1@@ ), ((@@ key@@ s.@@ size@@ ()) + 1@@ )); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ cre@@ ate@@ (key@@ Id, pu@@ b@@ key@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return (key@@ .@@ ssh@@ Key@@ Public@@ ()) + "@@ \n@@ "; }
private com.google.gerrit.server.account.Account@@ Ssh@@ Key add@@ Key@@ (java.lang.String pu@@ b@@ ) throw@@ s com.google.gerrit.common.@@ errors.@@ Invalid@@ Ssh@@ Key@@ Exception { check@@ Load@@ ed@@ (); for (@@ java.util.@@ Optional@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > k@@ ey : key@@ s) { if ((@@ key@@ .is@@ P@@ res@@ ent@@ ()) && (key@@ .get@@ ().get@@ ().@@ ssh@@ Public@@ Key@@ ().@@ tri@@ m@@ ().equals(@@ pu@@ b.@@ tri@@ m@@ ()))) { return key@@ .get@@ (); } } int se@@ q = (key@@ s.@@ size@@ ()) + 1; com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id key@@ Id = new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .@@ Id(@@ account@@ Id, se@@ q@@ ); com.google.gerrit.server.account.Account@@ Ssh@@ Key k@@ ey = ssh@@ Key@@ Cre@@ ator@@ .create@@ (key@@ Id, pu@@ b@@ ); key@@ s.add(@@ java.util.@@ Optional@@ .@@ of@@ (key@@ )); return key@@ ; }
public static com.google.gerrit.server.account.Account@@ State create@@ (@@ com.google.gerrit.reviewdb.client.Account@@ Ssh@@ Key@@ .@@ Key key@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (key@@ .@@ id@@ (), key@@ .@@ ssh@@ Key@@ )); }
public static com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key@@ .@@ Id id@@ , java.lang.String ssh@@ Public@@ Key@@ ) { return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (key@@ , id@@ , ssh@@ PublicKey@@ , true@@ ); }
public Account.@@ Id id@@ () { return id@@ ; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Res@@ pon@@ se@@ <?@@ > apply(@@ com.google.gerrit.server.account.Account@@ Resource@@ .@@ Ssh@@ Key rsrc@@ , com.google.gerrit.extensions.common.@@ Input input@@ ) throw@@ s com.google.gerrit.extensions.restapi.Auth@@ Exception, com.google.gerrit.server.@@ per@@ mis@@ sions.@@ Permission@@ Back@@ end@@ Exception, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalid@@ Exception, org.eclipse.jgit.errors.@@ Repository@@ NotFound@@ Exception { if ((@@ self@@ .get@@ ()) != (rsrc@@ .getUser@@ ())) { per@@ mission@@ Back@@ en@@ d.@@ user@@ (@@ self@@ ).@@ check@@ (@@ G@@ lobal@@ Permission@@ .@@ AD@@ M@@ IN@@ I@@ ST@@ R@@ AT@@ E_@@ S@@ ER@@ V@@ ER@@ ); } auth@@ ori@@ zed@@ Key@@ s.@@ delete@@ Key@@ (rsrc@@ .getUser@@ ().get@@ Account@@ Id(), rsrc@@ .get@@ Ssh@@ Key@@ (), id@@ ().get@@ ()); rsrc@@ .getUser@@ ().get@@ User@@ Name@@ ()@@ .@@ P@@ res@@ ent@@ (@@ ssh@@ Key@@ Cache@@ :@@ e@@ vi@@ ct@@ ); return com.google.gerrit.extensions.restapi.Res@@ pon@@ se.@@ n@@ one@@ (); }
private java.lang.String public@@ Key@@ P@@ art@@ (@@ int index@@ , java.lang.String default@@ Value@@ ) { java.lang.String s = ssh@@ PublicKey@@ (); if ((@@ s != null@@ ) && ((@@ s.@@ length@@ ()) > 0@@ )) { java.lang.String@@ [] par@@ t@@ s = s.@@ s@@ pli@@ t(@@ " "); if ((@@ par@@ t@@ s.@@ length@@ ) > index@@ ) { return par@@ t@@ s@@ [@@ index@@ ]@@ ; } return default@@ Value@@ ; }
private com.google.gerrit.server.account.Account@@ Ssh@@ Key create@@ Ssh@@ Key@@ (@@ com.google.gerrit.reviewdb.client.Account.Id id@@ , java.lang.String key@@ File@@ ) throw@@ s java.io.IOException { java.nio.file.@@ Pat@@ h p = java.nio.file.@@ Path@@ s.get(@@ key@@ ); if (!(@@ java.nio.file.@@ File@@ s.@@ ex@@ ist@@ s(@@ p@@ ))) { throw new java.io.IO@@ Exception(@@ java.lang.String@@ .@@ for@@ m@@ at@@ ("@@ f@@ at@@ al@@ : ad@@ d public S@@ S@@ H key@@ : %s is not a fi@@ le key@@ ", key@@ File@@ )); } java.lang.String cont@@ ent = new java.lang.String@@ (@@ java.nio.file.@@ File@@ s.@@ read@@ All@@ By@@ t@@ es@@ (p@@ ), java.@@ n@@ i@@ o@@ .@@ char@@ se@@ t.@@ St@@ and@@ ard@@ Char@@ set@@ s.@@ UT@@ F@@ _@@ 8@@ ); return com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ .create@@ (@@ new com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ (id@@ , 1@@ ), content@@ ); }
public static com.google.gerrit.server.account.@@ Ssh@@ Key@@ <@@ com.google.gerrit.server.account.@@ Ssh@@ Key@@ > get@@ (@@ com.google.gerrit.server.account.@@ Ssh@@ Key@@ .@@ Input key@@ ) { return new com.google.gerrit.server.account.@@ Au@@ to@@ Value@@ _@@ Account@@ Ssh@@ Key@@ .@@ st@@ p@@ O@@ ff@@ New@@ Lin@@ es(@@ ssh@@ PublicKey@@ )).@@ set@@ Valid@@ ((@@ vali@@ d && (id@@ .is@@ Valid@@ ())@@ )).@@ buil@@ d(@@ ; }
public void set@@ Key@@ s(@@ java.util.Collection<@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > new@@ Key@@ s) { com.google.common.collect.@@ Or@@ der@@ ing@@ <@@ com.google.gerrit.server.account.Account@@ Ssh@@ Key@@ > o = com.google.common.collect.@@ Or@@ der@@ ing.@@ from@@ (@@ java.util.@@ Comp@@ ar@@ ator@@ .@@ com@@ pa@@ ring@@ (( k@@ ) -@@ > k@@ id@@ ().get@@ ())); key@@ s = new java.util.Array@@ List(@@ n@@ Co@@ p@@ i@@ es(@@ o.@@ max@@ (@@ new@@ Key@@ s@@ )@@ .@@ id@@ ().get@@ (), java.util.@@ Optional@@ .@@ empty@@ ())); for (com.google.gerrit.server.@@ account.@@ Account@@ Ssh@@ Key k@@ ey : new@@ Key@@ s) { key@@ s.set@@ (((@@ key@@ .@@ id@@ ().get@@ ()) - 1@@ ), java.util.@@ Optional@@ .@@ of@@ (key@@ )); } }
@java.lang.Override public void start@@ () { if ((@@ execu@@ tor@@ ) == null@@ ) { return@@ ; } java@@ s@@ ched@@ ule@@ r = new java.lang.@@ Th@@ read@@ ((@@ -@@ > { for (@@ com.google.gerrit.reviewdb.client.Project.NameKey name : cache.@@ all@@ ()) { execu@@ tor@@ .@@ execute@@ ((@@ ) -@@ > cach@@ e.get@@ (@@ name@@ ))); } } execu@@ tor@@ .@@ sh@@ u@@ t@@ do@@ w@@ n@@ (); try { execu@@ tor@@ .@@ a@@ w@@ a@@ it@@ T@@ er@@ min@@ ation@@ (java.lang.@@ L@@ on@@ g.@@ M@@ A@@ X@@ _@@ V@@ AL@@ U@@ E, java.util.concurrent.@@ Time@@ Un@@ it.@@ M@@ IL@@ LI@@ S@@ EC@@ ON@@ D@@ S@@ ); com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.@@ info@@ ("@@ F@@ ail@@ ur@@ e project cach@@ e of project cach@@ e In@@ ter@@ r@@ up@@ ted@@ Exception e) { com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.warn@@ ("@@ In@@ ter@@ r@@ up@@ ted while w@@ a@@ it@@ ing for project cach@@ e to lo@@ ad } }); s@@ ched@@ ul@@ er.@@ set@@ Name@@ ("@@ Project@@ Cache@@ W@@ ar@@ m@@ er@@ "); s@@ ched@@ ul@@ er.@@ set@@ D@@ ul@@ a@@ em@@ on@@ (@@ true@@ ); com.google.gerrit.server.project.Project@@ Cache@@ W@@ ar@@ m@@ er.@@ log.@@ info@@ ("@@ F@@ ail@@ ur@@ e project cach@@ e@@ "); }
java.lang.String@@ [] ssh@@ Al@@ low@@ s() { return ssh@@ Al@@ low@@ s; }
@org.junit.Test public void as@@ signe@@ e@@ () throw@@ s java.lang.Exception { org.eclipse.jgit.@@ junit.@@ Test@@ Repository@@ <@@ com.google.gerrit.@@ test@@ ing.@@ In@@ M@@ em@@ ory@@ Repository@@ Manager.@@ Repo@@ > repo = create@@ Project@@ ("@@ repo@@ "); com.google.gerrit.reviewdb.client.Change change@@ 1 = insert@@ (repo@@ , new@@ Change@@ )); com.google.gerrit.reviewdb.client.Change change@@ 2 = insert@@ (repo@@ , new@@ Change@@ (repo@@ )); com.google.gerrit.extensions.api.changes.@@ As@@ signe@@ e@@ Input inpu@@ t = new com.google.gerrit.extensions.api.changes.@@ As@@ signe@@ e@@ Input@@ (); input.@@ as@@ signe@@ e = user@@ .getUser@@ Name@@ ().get@@ (); gApi.changes().id(@@ change@@ 1@@ .getChange@@ Id@@ ()).@@ set@@ As@@ signe@@ e@@ (in@@ put@@ ); assert@@ Query@@ ("@@ is@@ :@@ as@@ signe@@ d@@ ", change@@ 1); assert@@ Query@@ ("@@ is@@ :@@ as@@ signe@@ d@@ ", change@@ 2); assert@@ Query@@ ("@@ is@@ :@@ un@@ as@@ signe@@ d@@ ", change@@ 2); assert@@ Query@@ ("@@ -@@ is@@ :@@ un@@ as@@ signe@@ d@@ ", change@@ 1); assert@@ Query@@ (("@@ as@@ signe@@ e@@ :@@ " + (user@@ .getUser@@ Name@@ ())@@ ), change@@ 1); assert@@ Query@@ (("@@ as@@ signe@@ e@@ :@@ " + (user@@ .getUser@@ Name@@ ())@@ ), change@@ 2); assert@@ Query@@ ("@@ as@@ signe@@ e@@ ", change@@ 2); }
