PR_ID,filename,method_idx_x,codebase,codebase-hash,initial,initial-hash,codebase-signature,init-signature,total_patchsets,method_idx,approved,approved-hash,approved-signature,row-num-right,init-ver-len,app-ver-len
9518,src_main_java_com_google_gerrit_client_rpc_ScreenLoadCallback.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final void onSuccess(final T result) { if (screen.isAttached()) { prepare(result); screen.display(); } },ad1114aee191d64bd78829e8165abad48da797b9,,onSuccess(java.lang.Object),2,0,public final void onSuccess(final T result) { if (screen.isAttached()) { preDisplay(result); screen.display(); postDisplay(); } },7202a8ea596719fa7c888750165c03f02bf24289,onSuccess(java.lang.Object),835,28,32
47819,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,3.0,"@java.lang.Override public int run() throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (listPlugins) { com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(); java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPlugins(); ui.message(""Available plugins are:\n""); for (com.google.gerrit.pgm.init.InitPlugins.PluginData plugin : plugins) { ui.message("" * %s\n"", plugin.name); } if (plugins.isEmpty()) { ui.message(""No plugins found.\n""); } return 0; } final com.google.gerrit.pgm.Init.SiteInit init = createSiteInit(); init.flags.autoStart = (!(noAutoStart)) && (init.site.isNew); final com.google.gerrit.pgm.Init.SiteRun run; try { init.initializer.run(); init.flags.deleteOnFailure = false; run = createSiteRun(init); run.upgradeSchema(); } catch (java.lang.Exception failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } catch (java.lang.Error failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } java.lang.System.err.println((""Initialized "" + (getSitePath().getCanonicalPath()))); run.start(); return 0; }",ba07c87accca31f639e01233c0e3b260af6ed1c8,"@java.lang.Override public int run() throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); final java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPlugins(); com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(false); verifyInstallPluginList(ui, plugins); if (listPlugins) { ui.message(""Available plugins are:\n""); for (com.google.gerrit.pgm.init.InitPlugins.PluginData plugin : plugins) { ui.message("" * %s\n"", plugin.name); } if (plugins.isEmpty()) { ui.message(""No plugins found.\n""); } return 0; } final com.google.gerrit.pgm.Init.SiteInit init = createSiteInit(); init.flags.autoStart = (!(noAutoStart)) && (init.site.isNew); final com.google.gerrit.pgm.Init.SiteRun run; try { init.initializer.run(); init.flags.deleteOnFailure = false; run = createSiteRun(init); run.upgradeSchema(); } catch (java.lang.Exception failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } catch (java.lang.Error failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } java.lang.System.err.println((""Initialized "" + (getSitePath().getCanonicalPath()))); run.start(); return 0; }",674ae524324cc3414faa6ff6aa2befadba4e6654,run(),run(),10,4,"@java.lang.Override public int run() throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); final com.google.gerrit.pgm.Init.SiteInit init = createSiteInit(); final java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPlugins(init.site); com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(false); verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message(""Available plugins:\n""); for (com.google.gerrit.pgm.init.InitPlugins.PluginData plugin : plugins) { ui.message("" * %s version %s\n"", plugin.name, plugin.version); } } else { ui.message(""No plugins found.\n""); } return 0; } init.flags.autoStart = (!(noAutoStart)) && (init.site.isNew); final com.google.gerrit.pgm.Init.SiteRun run; try { init.initializer.run(); init.flags.deleteOnFailure = false; run = createSiteRun(init); run.upgradeSchema(); } catch (java.lang.Exception failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } catch (java.lang.Error failure) { if (init.flags.deleteOnFailure) { com.google.gerrit.pgm.Init.recursiveDelete(getSitePath()); } throw failure; } java.lang.System.err.println((""Initialized "" + (getSitePath().getCanonicalPath()))); run.start(); return 0; }",6a16b6d52ac513bb564d02fb9cb7c46a40cc7f56,run(),157944,406,419
16274,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,2.0,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.server.events.ChangeMergedEvent event = new com.google.gerrit.server.events.ChangeMergedEvent(); event.change = eventFactory.asChangeAttribute(change); event.submitter = eventFactory.asAccountAttribute(account); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--change-url""); args.add(event.change.url); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",6ecdce14398201b2d39090c8900cbf8561699066,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeMergedEvent event = new com.google.gerrit.common.ChangeMergedEvent(); event.change = eventFactory.asChangeAttribute(change); event.submitter = eventFactory.asAccountAttribute(account); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--change-url""); args.add(event.change.url); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",adbc44ab022c30ff780833ab33e6d3bf5a749843,"doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)","doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)",7,2,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.server.events.ChangeMergedEvent event = new com.google.gerrit.server.events.ChangeMergedEvent(); event.change = eventFactory.asChangeAttribute(change); event.submitter = eventFactory.asAccountAttribute(account); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--change-url""); args.add(event.change.url); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",6ecdce14398201b2d39090c8900cbf8561699066,"doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)",124001,281,285
53972,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_CreateGroupCommand.java,1.0,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException { try { performCreateGroupFactory.create().createGroup(groupName, groupDescription, visibleToAll, ownerGroupId, initialMembers, initialGroups); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw die(e); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw die(e); } }",e9e23799d9ba147a2ef8e9f252083c3898bc3c9c,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException { try { com.google.gerrit.server.account.CreateGroupArgs args = new com.google.gerrit.server.account.CreateGroupArgs(); args.setGroupName(groupName); args.groupDescription = groupDescription; args.visibleToAll = visibleToAll; args.ownerGroupId = ownerGroupId; args.initialMembers = initialMembers; args.initialGroups = initialGroups; performCreateGroupFactory.create(args).createGroup(); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw die(e); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw die(e); } }",5ee13e13e318b479d6d25db786ad82873101444b,run(),run(),6,1,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gwtorm.server.OrmException { try { com.google.gerrit.server.account.CreateGroupArgs args = new com.google.gerrit.server.account.CreateGroupArgs(); args.setGroupName(groupName); args.groupDescription = groupDescription; args.visibleToAll = visibleToAll; args.ownerGroupId = ownerGroupId; args.initialMembers = initialMembers; args.initialGroups = initialGroups; for (com.google.gerrit.server.validators.GroupCreationValidationListener l : groupCreationValidationListeners) { try { l.validateNewGroup(args); } catch (com.google.gerrit.server.validators.ValidationException e) { die(e); } } performCreateGroupFactory.create(args).createGroup(); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw die(e); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw die(e); } }",027634eb79744d216de4bac36f3368c71d511ab6,run(),162509,186,249
134791,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountApiImpl.java,1.0,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.PutStatus.Input in = new com.google.gerrit.server.account.PutStatus.Input(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",4e8b1b7bcd9441a9be5a61e4e093e3f2c2210a16,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.common.StatusInput in = new com.google.gerrit.extensions.common.StatusInput(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",89167355c96b0cc3999cbd14609cdb9eced6259e,setStatus(java.lang.String),setStatus(java.lang.String),3,1,"@java.lang.Override public void setStatus(java.lang.String status) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.accounts.StatusInput in = new com.google.gerrit.extensions.api.accounts.StatusInput(status); try { putStatus.apply(account, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set status"", e); } }",c32fe47a1e232a59d8012840e6a98ea94ef5d6d5,setStatus(java.lang.String),111182,115,119
62410,gerrit-server_src_main_java_com_google_gerrit_server_change_Votes.java,,,,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ReviewerResource> list() throws com.google.gerrit.extensions.restapi.AuthException { throw new java.lang.UnsupportedOperationException(); },3536446d5999e148f7191a4e311e0b3f81fba123,,list(),21,1,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.ReviewerResource> list() throws com.google.gerrit.extensions.restapi.AuthException { return list; },8b795dd2fa607ce6f2d4fe33a3d1dea8004787f5,list(),173853,65,59
79425,gerrit-server_src_main_java_com_google_gerrit_server_query_account_AccountQueryBuilder.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> name(java.lang.String name) { return new com.google.gerrit.server.query.account.EqualsNamePredicate(name); },4b4c5a491c035b0741d2f83a77e9141035a903fb,,name(java.lang.String),7,1,@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> name(java.lang.String name) { return com.google.gerrit.server.query.account.AccountPredicates.equalsName(name); },f9989a6e6cb3df44cd4278f23c4a931c2c5beb25,name(java.lang.String),178643,75,76
89872,gerrit-server_src_test_java_com_google_gerrit_server_notedb_NoteDbChangeStateTest.java,5.0,"@org.junit.Test public void applyDeltaToNullWithNoNewMetaId() { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noDrafts())); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), zeroId()))); assertThat(c.getNoteDbState()).isNull(); }",447d754e1c42dd1bc36db6df2ee4f3527b9cb016,"@org.junit.Test public void applyDeltaToNullWithNoNewMetaId() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noDrafts()), nowTs()); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), zeroId())), nowTs()); assertThat(c.getNoteDbState()).isNull(); }",0f771abac3b49216adf733864b4baea0d1a54635,applyDeltaToNullWithNoNewMetaId(),applyDeltaToNullWithNoNewMetaId(),14,4,"@org.junit.Test public void applyDeltaToNullWithNoNewMetaId() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noDrafts())); assertThat(c.getNoteDbState()).isNull(); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.noMetaId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), zeroId()))); assertThat(c.getNoteDbState()).isNull(); }",2678a312712d46da9b89b9ba3f627ecfef72d349,applyDeltaToNullWithNoNewMetaId(),206922,313,303
12579,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,,,,"private void secure(final java.io.File path) throws java.io.IOException { if ((!(path.exists())) && (!(path.createNewFile()))) { throw new java.io.IOException((""Cannot create "" + path)); } path.setWritable(false, false); path.setReadable(false, false); path.setExecutable(false, false); path.setWritable(true, true); path.setReadable(true, true); }",d956ccf6fe29eb9b09daf3bc49be344c9d365d68,,secure(java.io.File),4,21,"private static void chmod600(final java.io.File path) throws java.io.IOException { if ((!(path.exists())) && (!(path.createNewFile()))) { throw new java.io.IOException((""Cannot create "" + path)); } path.setWritable(false, false); path.setReadable(false, false); path.setExecutable(false, false); path.setWritable(true, true); path.setReadable(true, true); if (path.isDirectory()) { path.setExecutable(true, true); } }",835fec269d77d86568612265e8f29f362830a9ed,chmod600(java.io.File),78863,96,116
68570,gitiles-dev_src_main_java_com_google_gitiles_dev_DevServer.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gitiles.GitilesAccess forRequest(javax.servlet.http.HttpServletRequest req) { return new com.google.gitiles.GitilesAccess() { @java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.util.Set<java.lang.String> branches) { return java.util.Collections.emptyMap(); } @java.lang.Override public java.lang.Object getUserKey() { return null; } @java.lang.Override public java.lang.String getRepositoryName() { return docRepo.getName(); } @java.lang.Override public com.google.gitiles.RepositoryDescription getRepositoryDescription() { com.google.gitiles.RepositoryDescription d = new com.google.gitiles.RepositoryDescription(); d.name = getRepositoryName(); return d; } @java.lang.Override public org.eclipse.jgit.lib.Config getConfig() { return cfg; } }; }",83878cf6fe5e9b899bc01247fc78cd573aee8685,,forRequest(javax.servlet.http.HttpServletRequest),6,1,"@java.lang.Override public com.google.gitiles.GitilesAccess forRequest(javax.servlet.http.HttpServletRequest req) { return new com.google.gitiles.GitilesAccess() { @java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.util.Set<java.lang.String> branches) { return java.util.Collections.emptyMap(); } @java.lang.Override public java.lang.Object getUserKey() { return null; } @java.lang.Override public java.lang.String getRepositoryName() { return repoName; } @java.lang.Override public com.google.gitiles.RepositoryDescription getRepositoryDescription() { com.google.gitiles.RepositoryDescription d = new com.google.gitiles.RepositoryDescription(); d.name = getRepositoryName(); return d; } @java.lang.Override public org.eclipse.jgit.lib.Config getConfig() { return cfg; } }; }",10f27cbe272a915ad2c85c71d4a944fae30136ef,forRequest(javax.servlet.http.HttpServletRequest),134481,234,232
74218,gerrit-server_src_main_java_com_google_gerrit_server_PatchSetUtil.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setGroups(com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.notedb.ChangeUpdate update, java.lang.Iterable<java.lang.String> groups) { ps.setGroups(groups); update.setGroups(groups); }",f3d115846a62be5150852e608e4ca6dc7067677b,,"setGroups(com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.server.notedb.ChangeUpdate,java.lang.Iterable)",6,3,"public void setGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps, java.lang.Iterable<java.lang.String> groups) throws com.google.gwtorm.server.OrmException { ps.setGroups(groups); update.setGroups(groups); db.patchSets().update(java.util.Collections.singleton(ps)); }",f2b85fc95709eaee4c82b4abd15f63c3276a7749,"setGroups(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.reviewdb.client.PatchSet,java.lang.Iterable)",93356,68,115
76649,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,5.0,"public void unstarAll(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { dbProvider.get().starredChanges().delete(dbProvider.get().starredChanges().byChange(changeId)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.BatchRefUpdate batchUpdate = repo.getRefDatabase().newBatchUpdate(); batchUpdate.setAllowNonFastForwards(true); batchUpdate.setRefLogIdent(serverIdent); batchUpdate.setRefLogMessage((""Unstar change "" + (changeId.get())), true); for (com.google.gerrit.reviewdb.client.Account.Id accountId : byChangeFromIndex(changeId)) { java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId); org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().getRef(refName); batchUpdate.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(ref.getObjectId(), org.eclipse.jgit.lib.ObjectId.zeroId(), refName)); } batchUpdate.execute(rw, NullProgressMonitor.INSTANCE); for (org.eclipse.jgit.transport.ReceiveCommand command : batchUpdate.getCommands()) { if ((command.getResult()) != (ReceiveCommand.Result.OK)) { throw new java.io.IOException(java.lang.String.format(""Unstar change %d failed, ref %s could not be deleted: %s"", changeId.get(), command.getRefName(), command.getResult())); } } indexer.index(dbProvider.get(), project, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Unstar change %d failed"", changeId.get()), e); } }",6c0378782510031cf3c059f50e28b0d5ff9a8f82,"public void unstarAll(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.BatchRefUpdate batchUpdate = repo.getRefDatabase().newBatchUpdate(); batchUpdate.setAllowNonFastForwards(true); batchUpdate.setRefLogIdent(serverIdent); batchUpdate.setRefLogMessage((""Unstar change "" + (changeId.get())), true); for (com.google.gerrit.reviewdb.client.Account.Id accountId : byChangeFromIndex(changeId)) { java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId); org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().getRef(refName); batchUpdate.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(ref.getObjectId(), org.eclipse.jgit.lib.ObjectId.zeroId(), refName)); } batchUpdate.execute(rw, NullProgressMonitor.INSTANCE); for (org.eclipse.jgit.transport.ReceiveCommand command : batchUpdate.getCommands()) { if ((command.getResult()) != (ReceiveCommand.Result.OK)) { throw new java.io.IOException(java.lang.String.format(""Unstar change %d failed, ref %s could not be deleted: %s"", changeId.get(), command.getRefName(), command.getResult())); } } indexer.index(dbProvider.get(), project, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Unstar change %d failed"", changeId.get()), e); } }",5fef85965a92b2fa4cfd3f2c0b84df8d9a28740a,"unstarAll(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)","unstarAll(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",6,4,"public void unstarAll(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.BatchRefUpdate batchUpdate = repo.getRefDatabase().newBatchUpdate(); batchUpdate.setAllowNonFastForwards(true); batchUpdate.setRefLogIdent(serverIdent); batchUpdate.setRefLogMessage((""Unstar change "" + (changeId.get())), true); for (com.google.gerrit.reviewdb.client.Account.Id accountId : byChangeFromIndex(changeId)) { java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(changeId, accountId); org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().getRef(refName); batchUpdate.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(ref.getObjectId(), org.eclipse.jgit.lib.ObjectId.zeroId(), refName)); } batchUpdate.execute(rw, NullProgressMonitor.INSTANCE); for (org.eclipse.jgit.transport.ReceiveCommand command : batchUpdate.getCommands()) { if ((command.getResult()) != (ReceiveCommand.Result.OK)) { throw new java.io.IOException(java.lang.String.format(""Unstar change %d failed, ref %s could not be deleted: %s"", changeId.get(), command.getRefName(), command.getResult())); } } indexer.index(dbProvider.get(), project, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Unstar change %d failed"", changeId.get()), e); } }",637d0f99758ef5b006f0b3c5cb195c760dd07eb5,"unstarAll(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",67968,492,492
71760,gerrit-gpg_src_test_java_com_google_gerrit_gpg_PublicKeyCheckerTest.java,9.0,"@org.junit.Test public void selfRevokedKey() throws java.lang.Exception { assertProblems(com.google.gerrit.gpg.testutil.TestKeys.key4(), ""Key is revoked""); }",29ec5895f1677e0c8a0cf21762e7fa8190cfa607,"@org.junit.Test public void selfRevokedKey() throws java.lang.Exception { assertProblems(com.google.gerrit.gpg.testutil.TestKeys.selfRevokedKey(), ""Key is revoked""); }",2d9328c53e5ab42d0e02eb2569cdee1b2739e4e4,selfRevokedKey(),selfRevokedKey(),3,0,"@org.junit.Test public void selfRevokedKeyIsRevoked() throws java.lang.Exception { assertProblems(selfRevokedKey(), ""Key is revoked""); }",d71272c29810d047fc9688779c76fcca37e25a19,selfRevokedKeyIsRevoked(),122711,51,38
33090,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,41.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getUrl(final com.google.gerrit.reviewdb.Patch p, java.lang.String style) { java.lang.StringBuffer url = new java.lang.StringBuffer(); url.append(Window.Location.getPath()); url.append(""#""); url.append(style); if ((diffBaseId) != null) { url.append(DiffPatchScreen.URL_PARAMETER_MARK_START); url.append(DiffPatchScreen.URL_PARAMETER_KEY_OF_PATCHSET_TO_DIFF_WITH); url.append(DiffPatchScreen.URL_PARAMETER_MARK_BETWWEN_KEY_AND_VALUE); url.append(diffBaseId.toString()); } return url.toString(); }",358898b9b3996f25ead212bc36655bf27fa9b87c,,"getUrl(com.google.gerrit.reviewdb.Patch,java.lang.String)",5,15,"private void openWindow(java.lang.String token) { java.lang.String url = ((Window.Location.getPath()) + ""#"") + token; com.google.gwt.user.client.Window.open(url, ""_blank"", null); }",084882e10e5025641b24cb857f12f5b4c9a45a34,openWindow(java.lang.String),130629,161,57
79910,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,8.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.lang.Exception { emailReviewers(rsrc.getChange(), added); if (!(added.isEmpty())) { for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : added) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(psa.getAccountId()).getAccount(); reviewerAdded.fire(rsrc.getChange(), patchSet, account); } } }",1315942fc843162a848d150d88b1df531b04d441,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.lang.Exception { if ((addedCCs) != null) { emailCCs(rsrc.getChange(), addedCCs); } if ((addedReviewers) != null) { emailReviewers(rsrc.getChange(), addedReviewers); if (!(addedReviewers.isEmpty())) { for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : addedReviewers) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(psa.getAccountId()).getAccount(); reviewerAdded.fire(rsrc.getChange(), patchSet, account); } } } }",a576e3cbea99b0f51f0fea8b08e0a8a17eb076f2,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),15,6,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.lang.Exception { if (((addedReviewers) != null) || ((addedCCs) != null)) { if ((addedReviewers) == null) { addedReviewers = new java.util.ArrayList(); } if ((addedCCs) == null) { addedCCs = new java.util.ArrayList(); } emailReviewers(rsrc.getChange(), addedReviewers, addedCCs); if (!(addedReviewers.isEmpty())) { for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : addedReviewers) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(psa.getAccountId()).getAccount(); reviewerAdded.fire(rsrc.getChange(), patchSet, account, ctx.getAccount(), ctx.getWhen()); } } } }",e57f112ee840fb84f9af1b65390ca8e9139a9c23,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),162629,172,214
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_EditConfigAction.java,0.0,"static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project, RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",10845302bf0e7ea852631afce5ecd58460d83dc1,"static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project.get(), RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), project, ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",4a57d9c3b7059be62de2daa3086b755408c6bef3,"call(com.google.gwt.user.client.ui.Button,java.lang.String)","call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Project$NameKey)",7,2,"static void call(com.google.gwt.user.client.ui.Button b, com.google.gerrit.reviewdb.client.Project.NameKey project) { b.setEnabled(false); com.google.gerrit.client.changes.ChangeApi.createChange(project.get(), RefNames.REFS_CONFIG, null, AdminConstants.I.editConfigMessage(), null, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(project, new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); super.onFailure(caught); } }); }",6731cd2b96ea8847c2c320860a63c929bf784c61,"call(com.google.gwt.user.client.ui.Button,com.google.gerrit.reviewdb.client.Project$NameKey)",211102,246,244
152952,java_com_google_gerrit_server_restapi_project_ListBranches.java,12.0,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",11f6a08ac64835deb0153c850feb0d45e9482352,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",b03e970a52b0a6ab896f4b430c602ae5b82e45fd,apply(com.google.gerrit.server.project.ProjectResource),apply(com.google.gerrit.server.project.ProjectResource),3,12,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { rsrc.getProjectState().checkStatePermitsRead(); return new com.google.gerrit.server.project.RefFilter<com.google.gerrit.extensions.api.projects.BranchInfo>(org.eclipse.jgit.lib.Constants.R_HEADS).subString(matchSubstring).regex(matchRegex).start(start).limit(limit).filter(allBranches(rsrc)); }",12c89d5c649373b666cc5d7f988dfecc3d1573c7,apply(com.google.gerrit.server.project.ProjectResource),8800,203,171
38723,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected void prepareHeaderWidgets(com.google.gerrit.common.data.PatchScript script, com.google.gerrit.common.data.PatchSetDetail detail) { initPatchSetListForTableHeader(); psListOfHeaderA.display(detail, script, patchKey, idSideA, idSideB); psListOfHeaderB.display(detail, script, patchKey, idSideA, idSideB); }",ee063f1774286e947d6c11200c6fbd3f1dab26ba,,"prepareHeaderWidgets(com.google.gerrit.common.data.PatchScript,com.google.gerrit.common.data.PatchSetDetail)",7,20,"protected void initHeaders(com.google.gerrit.common.data.PatchScript script, com.google.gerrit.common.data.PatchSetDetail detail) { com.google.gerrit.client.patches.PatchScreen.Type type = getPatchScreenType(); headerSideA = new com.google.gerrit.client.patches.PatchSetSelectBox(PatchSetSelectBox.Side.A, type); headerSideB = new com.google.gerrit.client.patches.PatchSetSelectBox(PatchSetSelectBox.Side.B, type); headerSideA.display(detail, script, patchKey, idSideA, idSideB); headerSideB.display(detail, script, patchKey, idSideA, idSideB); }",f6769f05354103f60c6405183b2672598f8ce9a1,"initHeaders(com.google.gerrit.common.data.PatchScript,com.google.gerrit.common.data.PatchSetDetail)",194075,90,169
42801,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_ssh_GitUtil.java,,,,"public static java.lang.String createCommit(com.google.gerrit.acceptance.SshSession s, org.eclipse.jgit.api.Git git, java.lang.String msg) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.ssh.GitUtil.createCommit(s, git, msg, true); }",4d6272b1fcb05dfd693a8443c222789ccc8999db,,"createCommit(com.google.gerrit.acceptance.SshSession,org.eclipse.jgit.api.Git,java.lang.String)",4,1,"public static java.lang.String createCommit(org.eclipse.jgit.api.Git git, org.eclipse.jgit.lib.PersonIdent i, java.lang.String msg) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { return com.google.gerrit.acceptance.git.ssh.GitUtil.createCommit(git, i, msg, true); }",8596f001039b63ec9ffae2809b367aef90bab2b7,"createCommit(org.eclipse.jgit.api.Git,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",120470,96,94
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_Field.java,,,,"public static com.google.gerrit.metrics.Field<java.lang.String> ofString(java.lang.String name) { return new com.google.gerrit.metrics.Field<>(name, java.lang.String.class); }",47846f1c32436db1c4f6dc5d95aabdebd12e5198,,ofString(java.lang.String),9,9,"public static com.google.gerrit.metrics.Field<java.lang.String> ofString(java.lang.String name) { return com.google.gerrit.metrics.Field.ofString(name, null); }",51f991fd7174e2077e52f9407cfc5dba68287639,ofString(java.lang.String),56860,54,50
87093,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,22.0,"private void checkComments(java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> existingNotes, java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNoteBuilder> toUpdate) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Comment.Key> existing = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.RevisionNote rn : existingNotes.values()) { for (com.google.gerrit.reviewdb.client.Comment c : rn.comments) { existing.add(c.key); if ((draftUpdate) != null) { draftUpdate.deleteComment(c.revId, c.key); } } } for (com.google.gerrit.server.notedb.RevisionNoteBuilder b : toUpdate.values()) { for (com.google.gerrit.reviewdb.client.Comment c : b.put.values()) { if (existing.contains(c.key)) { throw new com.google.gwtorm.server.OrmException((""Cannot update existing published comment: "" + c)); } } } }",0ccd787d5be36b79612f50c6a08d219751928655,"private void checkComments(java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> existingNotes, java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNoteBuilder> toUpdate) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Comment.Key> existing = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.RevisionNote rn : existingNotes.values()) { for (com.google.gerrit.reviewdb.client.Comment c : rn.getComments()) { existing.add(c.key); if ((draftUpdate) != null) { draftUpdate.deleteComment(c.revId, c.key); } } } for (com.google.gerrit.server.notedb.RevisionNoteBuilder b : toUpdate.values()) { for (com.google.gerrit.reviewdb.client.Comment c : b.put.values()) { if (existing.contains(c.key)) { throw new com.google.gwtorm.server.OrmException((""Cannot update existing published comment: "" + c)); } } } }",9b47f864afee3fc5a7254d8357af1c79afa897c3,"checkComments(java.util.Map,java.util.Map)","checkComments(java.util.Map,java.util.Map)",12,23,"private void checkComments(java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.ChangeRevisionNote> existingNotes, java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNoteBuilder> toUpdate) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Comment.Key> existing = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.ChangeRevisionNote rn : existingNotes.values()) { for (com.google.gerrit.reviewdb.client.Comment c : rn.getComments()) { existing.add(c.key); if ((draftUpdate) != null) { draftUpdate.deleteComment(c.revId, c.key); } } } for (com.google.gerrit.server.notedb.RevisionNoteBuilder b : toUpdate.values()) { for (com.google.gerrit.reviewdb.client.Comment c : b.put.values()) { if (existing.contains(c.key)) { throw new com.google.gwtorm.server.OrmException((""Cannot update existing published comment: "" + c)); } } } }",3f9f65d487aa2e4282f8ba767c550f09ff51ea53,"checkComments(java.util.Map,java.util.Map)",56197,313,315
59909,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,33.0,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.use_contributor_agreements()); setBool(signedOffBy, result.use_signed_off_by()); setBool(contentMerge, result.use_content_merge()); setBool(requireChangeID, result.require_change_id()); setSubmitType(result.submit_type()); setState(result.state()); maxObjectSizeLimit.setText(result.max_object_size_limit().configured_value()); if ((result.max_object_size_limit().inherited_value()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(Util.M.effectiveMaxObjectSizeLimit(result.max_object_size_limit().value())); effectiveMaxObjectSizeLimit.setTitle(Util.M.globalMaxObjectSizeLimit(result.max_object_size_limit().inherited_value())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",ef14ea9be2398515a27ce1cf1bdbed7b1248abb3,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.use_contributor_agreements()); setBool(signedOffBy, result.use_signed_off_by()); setBool(contentMerge, result.use_content_merge()); setBool(autoBase, result.use_auto_base()); setBool(requireChangeID, result.require_change_id()); setSubmitType(result.submit_type()); setState(result.state()); maxObjectSizeLimit.setText(result.max_object_size_limit().configured_value()); if ((result.max_object_size_limit().inherited_value()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(Util.M.effectiveMaxObjectSizeLimit(result.max_object_size_limit().value())); effectiveMaxObjectSizeLimit.setTitle(Util.M.globalMaxObjectSizeLimit(result.max_object_size_limit().inherited_value())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",1a8e7136bdef4bd52f53ce50877730a82f5d732c,display(com.google.gerrit.client.projects.ConfigInfo),display(com.google.gerrit.client.projects.ConfigInfo),14,33,"void display(com.google.gerrit.client.projects.ConfigInfo result) { descTxt.setText(result.description()); setBool(contributorAgreements, result.use_contributor_agreements()); setBool(signedOffBy, result.use_signed_off_by()); setBool(contentMerge, result.use_content_merge()); setBool(newChangeForAllNotInTarget, result.create_new_change_for_all_not_in_target()); setBool(requireChangeID, result.require_change_id()); setSubmitType(result.submit_type()); setState(result.state()); maxObjectSizeLimit.setText(result.max_object_size_limit().configured_value()); if ((result.max_object_size_limit().inherited_value()) != null) { effectiveMaxObjectSizeLimit.setVisible(true); effectiveMaxObjectSizeLimit.setText(Util.M.effectiveMaxObjectSizeLimit(result.max_object_size_limit().value())); effectiveMaxObjectSizeLimit.setTitle(Util.M.globalMaxObjectSizeLimit(result.max_object_size_limit().inherited_value())); } else { effectiveMaxObjectSizeLimit.setVisible(false); } saveProject.setEnabled(false); initPluginOptions(result); initProjectActions(result); }",2cf9955b668832da2fdcc46075917224bda04c62,display(com.google.gerrit.client.projects.ConfigInfo),87606,269,283
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListBranchesIT.java,4.0,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",f0be99c73183bb95012d8ab1979dd769babf32d3,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); assert_().fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",b2f7c4bd8ea14bd81f9fc5b8c00475559ff478ca,assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest),assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest),3,4,"private void assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest<com.google.gerrit.extensions.api.projects.BranchInfo> req) throws java.lang.Exception { try { req.get(); fail(""Expected BadRequestException""); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }",f0be99c73183bb95012d8ab1979dd769babf32d3,assertBadRequest(com.google.gerrit.extensions.api.projects.ProjectApi.ListRefsRequest),197890,89,86
51719,gerrit-server_src_main_java_com_google_gerrit_server_change_IncludedInResolver.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean includedInOne(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk rw, final org.eclipse.jgit.revwalk.RevCommit commit, final java.util.Set<org.eclipse.jgit.lib.Ref> tipRefs) throws java.io.IOException { return !(com.google.gerrit.server.change.IncludedInResolver.includedIn(repo, rw, commit, tipRefs, 1).isEmpty()); }",4fa0ba345f311453cd86792edd3bb0fab95d8bfe,,"includedInOne(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,java.util.Set)",7,9,"public static boolean includedInOne(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk rw, final org.eclipse.jgit.revwalk.RevCommit commit, final java.util.Collection<org.eclipse.jgit.lib.Ref> refs) throws java.io.IOException { return new com.google.gerrit.server.change.IncludedInResolver(repo, rw, commit).includedInOne(refs); }",286ab3197cd217789218fc613ca7a1fc946f3f38,"includedInOne(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit,java.util.Collection)",153854,112,109
75808,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,9.0,"void schedule(final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String ref, final org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState state) { com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduling replication {}:{} => {}"", project, ref, uri); if (!(isVisible(project, state))) { return; } if (!(config.replicatePermissions())) { com.googlesource.gerrit.plugins.replication.PushOne e; synchronized(stateLock) { e = pending.get(uri); } if (e == null) { try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(project)) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (((head != null) && (head.isSymbolic())) && (RefNames.REFS_CONFIG.equals(head.getLeaf().getName()))) { return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""cannot check type of project %s"", project), err, state); return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, state); return; } } } synchronized(stateLock) { com.googlesource.gerrit.plugins.replication.PushOne e = pending.get(uri); if (e == null) { e = opFactory.create(project, uri); pool.schedule(e, config.getDelay(), java.util.concurrent.TimeUnit.SECONDS); pending.put(uri, e); } e.addRef(ref); state.increasePushTaskCount(project.get(), ref); e.addState(ref, state); com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduled {}:{} => {} to run after {}s"", project, ref, e, config.getDelay()); } }",ca5b778990b22462096f755677397de269bbf7cc,"void schedule(final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String ref, final org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState state) { com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduling replication {}:{} => {}"", project, ref, uri); if (!(isVisible(project, state))) { return; } if (!(config.replicatePermissions())) { com.googlesource.gerrit.plugins.replication.PushOne e; synchronized(stateLock) { e = pending.get(uri); } if (e == null) { try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(project)) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (((head != null) && (head.isSymbolic())) && (RefNames.REFS_CONFIG.equals(head.getLeaf().getName()))) { return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""cannot check type of project %s"", project), err, state); return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, state); return; } } } synchronized(stateLock) { com.googlesource.gerrit.plugins.replication.PushOne e = pending.get(uri); if (e == null) { e = opFactory.create(project, uri); e.addRef(ref); scheduleTask(e, config.getDelay(), java.util.concurrent.TimeUnit.SECONDS); pending.put(uri, e); } else if (!(e.getRefs().contains(ref))) { e.addRef(ref); postEvent(e, ref); } state.increasePushTaskCount(project.get(), ref); e.addState(ref, state); com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduled {}:{} => {} to run after {}s"", project, ref, e, config.getDelay()); } }",306c1446d1796d58e6ade970bb644b7d6783dd51,"schedule(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,org.eclipse.jgit.transport.URIish,com.googlesource.gerrit.plugins.replication.ReplicationState)","schedule(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,org.eclipse.jgit.transport.URIish,com.googlesource.gerrit.plugins.replication.ReplicationState)",18,11,"void schedule(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref, org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState state) { com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduling replication {}:{} => {}"", project, ref, uri); if (!(shouldReplicate(project, ref, state))) { return; } if (!(config.replicatePermissions())) { com.googlesource.gerrit.plugins.replication.PushOne e; synchronized(stateLock) { e = pending.get(uri); } if (e == null) { try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(project)) { try { org.eclipse.jgit.lib.Ref head = git.exactRef(Constants.HEAD); if (((head != null) && (head.isSymbolic())) && (RefNames.REFS_CONFIG.equals(head.getLeaf().getName()))) { return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""cannot check type of project %s"", project), err, state); return; } } catch (java.io.IOException err) { stateLog.error(java.lang.String.format(""source project %s not available"", project), err, state); return; } } } synchronized(stateLock) { com.googlesource.gerrit.plugins.replication.PushOne e = pending.get(uri); if (e == null) { e = opFactory.create(project, uri); addRef(e, ref); pool.schedule(e, config.getDelay(), java.util.concurrent.TimeUnit.SECONDS); pending.put(uri, e); } else if (!(e.getRefs().contains(ref))) { addRef(e, ref); } state.increasePushTaskCount(project.get(), ref); e.addState(ref, state); com.googlesource.gerrit.plugins.replication.Destination.repLog.info(""scheduled {}:{} => {} to run after {}s"", project, ref, e, config.getDelay()); } }",d47ee53030de592d5d8c1cf751ff2c96ccc4d08d,"schedule(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,org.eclipse.jgit.transport.URIish,com.googlesource.gerrit.plugins.replication.ReplicationState)",189009,497,492
94356,gerrit-server_src_main_java_com_google_gerrit_server_CurrentUser.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { lastLoginExternalIdPropertyKey = com.google.gerrit.server.CurrentUser.PropertyKey.create(); put(lastLoginExternalIdPropertyKey, externalIdKey); }",1c85db4508054b8995fdabee569c67dfe1f2e472,,setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId$Key),3,14,"public void setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId.Key externalIdKey) { put(lastLoginExternalIdPropertyKey, externalIdKey); }",343bf080b0f02cfd07e0b963c7b73787a6107fb0,setLastLoginExternalIdKey(com.google.gerrit.reviewdb.client.AccountExternalId$Key),190961,66,45
105053,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public boolean isMutedBy(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return byChange(change.getId(), (((com.google.gerrit.server.StarredChangesUtil.MUTE_LABEL) + ""/"") + (change.currentPatchSetId().get()))).contains(accountId); }",22e2304544ae391efdff71a08b5d9e22dbcccb44,,"isMutedBy(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account$Id)",5,24,"public boolean isMutedBy(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { return byChange(change.getId(), com.google.gerrit.server.StarredChangesUtil.getMuteLabel(change)).contains(accountId); }",697f9534923f608ea134948b24f1f2aa9c5a9795,"isMutedBy(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account$Id)",90561,103,89
61498,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,61.0,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, editMessage, reply, ((edit) != null)); files.setValue(m, myLastReply, comments.get(0), drafts.get(0), fileTableMode); }",59ee29aef98e93fd3fc7dba876f8d126b85fbdcc,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, editMessage, review, ((edit) != null)); files.setValue(m, myLastReply, comments.get(0), drafts.get(0), fileTableMode); }",c440661841fe90da6a14d4e1ff7be3afb527b575,onSuccess(com.google.gerrit.client.rpc.NativeMap),onSuccess(com.google.gerrit.client.rpc.NativeMap),6,61,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, editMessage, reply, ((edit) != null)); files.setValue(m, myLastReply, comments.get(0), drafts.get(0), fileTableMode); }",59ee29aef98e93fd3fc7dba876f8d126b85fbdcc,onSuccess(com.google.gerrit.client.rpc.NativeMap),205110,146,146
57678,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,4.0,"public void onSuccess(com.google.gerrit.client.extensions.TopMenuList result) { java.util.List<com.google.gerrit.client.extensions.TopMenu> topMenuExtensions = com.google.gerrit.client.rpc.Natives.asList(result); for (com.google.gerrit.client.extensions.TopMenu menu : topMenuExtensions) { com.google.gerrit.client.ui.LinkMenuBar existingBar = com.google.gerrit.client.Gerrit.menuBars.get(menu.getName()); com.google.gerrit.client.ui.LinkMenuBar bar = (existingBar != null) ? existingBar : new com.google.gerrit.client.ui.LinkMenuBar(); for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } if (existingBar == null) { com.google.gerrit.client.Gerrit.menuBars.put(menu.getName(), bar); com.google.gerrit.client.Gerrit.menuLeft.add(bar, menu.getName()); } } }",b06949942cecdcbe0feb74870e4f6e1114cb6471,"public void onSuccess(com.google.gerrit.client.extensions.TopMenuList result) { java.util.List<com.google.gerrit.client.extensions.TopMenu> topMenuExtensions = com.google.gerrit.client.rpc.Natives.asList(result); for (com.google.gerrit.client.extensions.TopMenu menu : topMenuExtensions) { java.lang.String name = menu.getName(); com.google.gerrit.client.ui.LinkMenuBar existingBar = com.google.gerrit.client.Gerrit.menuBars.get(name); com.google.gerrit.client.ui.LinkMenuBar bar = (existingBar != null) ? existingBar : new com.google.gerrit.client.ui.LinkMenuBar(); if (GerritTopMenu.PROJECTS.menuName.equals(name)) { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { java.lang.String url = item.getUrl(); if ((url.startsWith(""http://"")) || (url.startsWith(""https://""))) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } else { addProjectLink(bar, item.getName(), url); } } } else { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } } if (existingBar == null) { com.google.gerrit.client.Gerrit.menuBars.put(name, bar); com.google.gerrit.client.Gerrit.menuLeft.add(bar, name); } } }",e40b6e551927ed32740336282dfc045a9c885734,onSuccess(com.google.gerrit.client.extensions.TopMenuList),onSuccess(com.google.gerrit.client.extensions.TopMenuList),4,4,"public void onSuccess(com.google.gerrit.client.extensions.TopMenuList result) { java.util.List<com.google.gerrit.client.extensions.TopMenu> topMenuExtensions = com.google.gerrit.client.rpc.Natives.asList(result); for (com.google.gerrit.client.extensions.TopMenu menu : topMenuExtensions) { java.lang.String name = menu.getName(); com.google.gerrit.client.ui.LinkMenuBar existingBar = com.google.gerrit.client.Gerrit.menuBars.get(name); com.google.gerrit.client.ui.LinkMenuBar bar = (existingBar != null) ? existingBar : new com.google.gerrit.client.ui.LinkMenuBar(); if (GerritTopMenu.PROJECTS.menuName.equals(name)) { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addProjectLink(bar, item); } } else { for (com.google.gerrit.client.extensions.TopMenuItem item : com.google.gerrit.client.rpc.Natives.asList(menu.getItems())) { com.google.gerrit.client.Gerrit.addExtensionLink(bar, item); } } if (existingBar == null) { com.google.gerrit.client.Gerrit.menuBars.put(name, bar); com.google.gerrit.client.Gerrit.menuLeft.add(bar, name); } } }",d5f7b739aaf13fab31c468f3efd48d4eaf591c5d,onSuccess(com.google.gerrit.client.extensions.TopMenuList),183813,421,374
105710,src_main_java_com_googlesource_gerrit_plugins_manager_repository_JenkinsCiPluginsRepository.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.googlesource.gerrit.plugins.manager.gson.SmartJson fetchArtifactJson(com.googlesource.gerrit.plugins.manager.gson.SmartJson buildExecution, com.google.gson.JsonArray artifacts, java.lang.String artifactSuffix) throws java.io.IOException { java.util.Optional<com.googlesource.gerrit.plugins.manager.gson.SmartJson> verArtifactJson = findArtifact(artifacts, artifactSuffix); if (verArtifactJson.isPresent()) { return new com.googlesource.gerrit.plugins.manager.gson.SmartGson().get(java.lang.String.format(""%s/artifact/%s"", buildExecution.getString(""url""), verArtifactJson.get().getString(""relativePath""))); } return com.googlesource.gerrit.plugins.manager.gson.SmartJson.NULL; }",66f583fee4072f8cd836a0c5f4908ee2015e8c7d,,"fetchArtifactJson(com.googlesource.gerrit.plugins.manager.gson.SmartJson,com.google.gson.JsonArray,java.lang.String)",6,10,"private java.util.Optional<com.googlesource.gerrit.plugins.manager.gson.SmartJson> fetchArtifactJson(com.googlesource.gerrit.plugins.manager.gson.SmartJson buildExecution, com.google.gson.JsonArray artifacts, java.lang.String artifactSuffix) { java.util.Optional<com.googlesource.gerrit.plugins.manager.gson.SmartJson> jsonArtifact = findArtifact(artifacts, artifactSuffix); return jsonArtifact.flatMap(( artifactJson) -> tryGetJson(java.lang.String.format(""%s/artifact/%s"", buildExecution.getString(""url""), jsonArtifact.get().getString(""relativePath"")))); }",1c6e022534b91a70114d56cf9a64e5abe0176ac9,"fetchArtifactJson(com.googlesource.gerrit.plugins.manager.gson.SmartJson,com.google.gson.JsonArray,java.lang.String)",20911,183,147
152295,java_com_google_gerrit_server_account_AccountsUpdate.java,22.0,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences())); }",5ab61d5f1095e04efbba61f7a9783c8a9b30a85a,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getProjectWatches()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getGeneralPreferences()), com.google.common.base.Suppliers.memoize(() -> accountConfig.getDiffPreferences())); }",39ff080b6ab2db00452c5059f557e26e90b08eb8,getAccount(),getAccount(),4,22,"public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }",7f410ec4dc32a682fe34cec9ffd0b8fb090310ec,getAccount(),68819,183,60
106513,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,94.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void administratorCanSetUserChangePrivate() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> userRepo = cloneProject(project, user); com.google.gerrit.acceptance.PushOneCommit.Result result = pushFactory.create(db, user.getIdent(), userRepo).to(""refs/for/master""); java.lang.String changeId = result.getChangeId(); assertThat(gApi.changes().id(changeId).get().isPrivate).isNull(); gApi.changes().id(changeId).addReviewer(admin.username); gApi.changes().id(changeId).setPrivate(true, null); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.isPrivate).isTrue(); }",31046ad6e1f004972e1d02bd899a71494ff724bb,,administratorCanSetUserChangePrivate(),3,76,"@org.junit.Test public void administratorCanSetUserChangePrivate() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> userRepo = cloneProject(project, user); com.google.gerrit.acceptance.PushOneCommit.Result result = pushFactory.create(db, user.getIdent(), userRepo).to(""refs/for/master""); java.lang.String changeId = result.getChangeId(); assertThat(gApi.changes().id(changeId).get().isPrivate).isNull(); gApi.changes().id(changeId).setPrivate(true, null); setApiUser(user); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.isPrivate).isTrue(); }",29bff5d870a538ae1f710cb0f60c33f1bb2834bd,administratorCanSetUserChangePrivate(),104486,211,198
97611,gerrit-gwtui-common_src_main_java_com_google_gerrit_client_ui_RemoteSuggestOracle.java,8.0,"void start() { oracle.requestSuggestions(request, this); }",2ea84f7d263608c8f4b866bd81075f7b7f26d850,"void start() { try { oracle.requestSuggestions(request, this); } catch (java.lang.Exception e) { query = null; } }",93002855590352b05c2cf0e7c57f2ae65923d5af,start(),start(),10,8,"void start() { if ((request.getQuery()) == null) { request.setQuery(""""); } oracle.requestSuggestions(request, this); }",2379b1d175a9664dff9c7226cf7023c66e95d30f,start(),81718,32,30
56098,gerrit-server_src_main_java_com_google_gerrit_server_plugins_UniversalServerPluginProvider.java,,,,@java.lang.Override public boolean handles(java.io.File srcFile) { for (com.google.gerrit.server.plugins.ServerPluginProvider scriptingFactory : serverPluginProviders) { if (scriptingFactory.handles(srcFile)) { return true; } } return false; },587c2b561c370e7a18c14fc0a53358a6322a195b,,handles(java.io.File),46,0,"@java.lang.Override public boolean handles(java.io.File srcFile) { java.util.List<com.google.gerrit.server.plugins.ServerPluginProvider> providers = providersForHandlingPlugin(srcFile); switch (providers.size()) { case 1 : return true; case 0 : return false; default : throw new com.google.gerrit.server.plugins.MultipleProvidersForPluginException(srcFile, providers); } }",141b25cc83cfe051082d591dd1e3f772820d9a8c,handles(java.io.File),94740,65,98
61480,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,10.0,"@org.junit.Test public void deleteEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); editUtil.delete(editUtil.byChange(change).get()); assertFalse(editUtil.byChange(change).isPresent()); }",9d50939c2f8c6d41732dceb291f6b6af649877e1,"@org.junit.Test public void deleteEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))); editUtil.delete(editUtil.byChange(change).get()); assertFalse(editUtil.byChange(change).isPresent()); }",f929e4be205e20d5f3e643af1cb0ef78c0e2bf1f,deleteEdit(),deleteEdit(),3,9,"@org.junit.Test public void deleteEdit() throws java.lang.Exception { assertThat(modifier.createEdit(change, ps)).isEqualTo(RefUpdate.Result.NEW); assertThat(modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))).isEqualTo(RefUpdate.Result.FORCED); editUtil.delete(editUtil.byChange(change).get()); assertThat(editUtil.byChange(change).isPresent()).isFalse(); }",6c9d63d72f85079f1c48ab573cbf2aeb28cc6039,deleteEdit(),110506,147,156
53381,gerrit-server_src_test_java_com_google_gerrit_server_query_change_RegexFilePredicateTest.java,3.0,"private static com.google.gerrit.server.query.change.ChangeData change(java.lang.String... files) { java.util.Arrays.sort(files); com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, new com.google.gerrit.reviewdb.client.Change.Id(1)); cd.setCurrentFilePaths(java.util.Arrays.asList(files)); return cd; }",f56f949a62c55fb089355cbc698998c6baaa2dc0,"private static com.google.gerrit.server.query.change.ChangeData change(java.lang.String... files) { java.util.Arrays.sort(files); com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, new com.google.gerrit.reviewdb.client.Change.Id(1)); cd.setCurrentFilePaths(java.util.Arrays.asList(files)); return cd; }",62614f5717a9afa348bd1aad2d125f5aa14c6256,change(java.lang.String[]),change(java.lang.String[]),9,3,private static com.google.gerrit.server.query.change.ChangeData change(java.lang.String... files) { java.util.Arrays.sort(files); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(new com.google.gerrit.reviewdb.client.Change.Id(1)); cd.setCurrentFilePaths(java.util.Arrays.asList(files)); return cd; },20490ed1578d04b826aca9759d9a85af2eb9b222,change(java.lang.String[]),19231,122,113
47774,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,31.0,"public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor(""head"").getLine(); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); if (hiddenSkipMap.containsKey(handle)) { line -= hiddenSkipMap.get(handle); handle = cm.getLineHandle(line); } cm.setActiveLine(handle); if (cm.somethingSelected()) { return; } cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); if (info.isAligned()) { other.setActiveLine(other.getLineHandle(oLine)); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }",6dbcc69085c567c03a70391b9208bb9778da902f,"public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = getCursorLine(cm); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); cm.setActiveLine(handle); if (cm.somethingSelected()) { return; } cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); if (info.isAligned()) { other.setActiveLine(other.getLineHandle(oLine)); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }",3f857c19b9c85ddd90d818728b88699412f794af,run(),run(),8,12,"public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, DiffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, DiffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, DiffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, DiffTable.style.activeLineBg()); } net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor().getLine()); int line = cm.getLineNumber(handle); cm.setActiveLine(handle); if (cm.somethingSelected()) { return; } cm.addLineClass(line, LineClassWhere.WRAP, DiffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, DiffTable.style.activeLineBg()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); if (info.isAligned()) { other.setActiveLine(other.getLineHandle(oLine)); other.addLineClass(oLine, LineClassWhere.WRAP, DiffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, DiffTable.style.activeLineBg()); } }",888619889c566e7b8e1499043658bc8b01d55b86,run(),122924,379,394
37941,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,15.0,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { batch.addCommand(cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd, ""cannot delete project configuration""); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd, ""can not delete references""); } } }",a4fceaebc4d00fcf93104317ab833ff23effad64,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { batch.addCommand(cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd); } } }",6e5adb4caa9e98fff5f39f3cbe17ccd9355fdd87,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),parseDelete(org.eclipse.jgit.transport.ReceiveCommand),2,15,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { batch.addCommand(cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd, ""cannot delete project configuration""); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd, ""cannot delete references""); } } }",a4fceaebc4d00fcf93104317ab833ff23effad64,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),170725,127,138
70060,gerrit-server_src_main_java_com_google_gerrit_server_git_gpg_Fingerprint.java,,,,@java.lang.Override public int hashCode() { return ((((fp[4]) << 24) & ((fp[5]) << 16)) & ((fp[6]) << 8)) & (fp[7]); },d01c8a72ac226f5ff8b8f737afa22d37c7808ac6,,hashCode(),12,3,"@java.lang.Override public int hashCode() { return org.eclipse.jgit.util.NB.decodeInt32(fp, 4); }",2291972d83b3a443c792c819aa810756caef23f1,hashCode(),9262,43,32
100412,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraClient.java,5.0,"public boolean doTransition(java.lang.String issueKey, java.lang.String transition) throws com.atlassian.jira.rest.client.api.RestClientException, com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException { com.atlassian.jira.rest.client.api.domain.Transition t = getTransitionByName(getTransitions(issueKey), transition); if (t == null) { throw new com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException((((""Action "" + transition) + "" not executable on issue "") + issueKey)); } com.atlassian.jira.rest.client.api.domain.input.TransitionInput input; input = new com.atlassian.jira.rest.client.api.domain.input.TransitionInput(t.getId()); com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug((""Setting transition input to: "" + (input.toString()))); client.getIssueClient().transition(getIssue(issueKey), input).claim(); return true; }",f9b01d97c7fd7a3cb39c2a839c09185d87c15dc4,"public boolean doTransition(java.lang.String issueKey, java.lang.String transition) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException, com.googlesource.gerrit.plugins.its.jira.JiraRestException { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(""Making transition to {} for {}"", transition, issueKey); com.googlesource.gerrit.plugins.its.jira.JiraTransition.Item t = getTransitionByName(getTransitions(issueKey), transition); if (t == null) { throw new com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException((((""Action "" + transition) + "" not executable on issue "") + issueKey)); } com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(""Transition issue {} to '{}' ({})"", issueKey, transition, t.getId()); doPost(((""/rest/api/2/issue/"" + issueKey) + ""/transitions""), gson.toJson(new com.googlesource.gerrit.plugins.its.jira.JiraTransition(t))); return true; }",1154cac92ca0645595c477eae6edfb20acae650d,"doTransition(java.lang.String,java.lang.String)","doTransition(java.lang.String,java.lang.String)",6,1,"public boolean doTransition(java.lang.String issueKey, java.lang.String transition) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException, java.io.IOException { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(""Making transition to {} for {}"", transition, issueKey); com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition.Item t = getTransitionByName(issueKey, transition); if (t == null) { throw new com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException((((""Action "" + transition) + "" not executable on issue "") + issueKey)); } com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug(""Transition issue {} to '{}' ({})"", issueKey, transition, t.getId()); return apiBuilder.getIssue().doPost(((""/"" + issueKey) + ""/transitions""), gson.toJson(new com.googlesource.gerrit.plugins.its.jira.restapi.JiraTransition(t)), java.net.HttpURLConnection.HTTP_NO_CONTENT); }",1dc56f7b0a5fb413531cfea3bab64fbc85ed7953,"doTransition(java.lang.String,java.lang.String)",121632,262,265
154472,java_com_google_gerrit_server_events_EventFactory.java,19.0,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.get(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }",3653fcb00f052acd13351632f45a096d24d71985,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { com.google.gerrit.server.account.AccountState accountState = accountCache.getEvenIfMissing(lbl.appliedBy); la.by = asAccountAttribute(accountState); } sa.labels.add(la); } } }",f8d62ee4c4bbb3e40ecbb404daa2b5b0803b819b,"addSubmitRecordLabels(com.google.gerrit.common.data.SubmitRecord,com.google.gerrit.server.data.SubmitRecordAttribute)","addSubmitRecordLabels(com.google.gerrit.common.data.SubmitRecord,com.google.gerrit.server.data.SubmitRecordAttribute)",8,19,"private void addSubmitRecordLabels(SubmitRecord submitRecord, com.google.gerrit.server.data.SubmitRecordAttribute sa) { if (((submitRecord.labels) != null) && (!(submitRecord.labels.isEmpty()))) { sa.labels = new java.util.ArrayList(); for (SubmitRecord.Label lbl : submitRecord.labels) { com.google.gerrit.server.data.SubmitLabelAttribute la = new com.google.gerrit.server.data.SubmitLabelAttribute(); la.label = lbl.label; la.status = lbl.status.name(); if ((lbl.appliedBy) != null) { la.by = asAccountAttribute(lbl.appliedBy); } sa.labels.add(la); } } }",1082446f4bcbcd45d25428347d6d28f167abb0b2,"addSubmitRecordLabels(com.google.gerrit.common.data.SubmitRecord,com.google.gerrit.server.data.SubmitRecordAttribute)",86696,194,168
72268,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_StaticModule.java,4.0,"private void serveGwtUi() { serve(""/gerrit_ui/*"").with(com.google.inject.Key.get(javax.servlet.http.HttpServlet.class, com.google.inject.name.Names.named(com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET))); if ((warFs) == null) { filter(""/"").through(new com.google.gerrit.httpd.raw.RecompileGwtUiFilter(buckOut, unpackedWar)); } }",554404f714c1ca1e38a8809ccb1fc6a3716d91e5,"private void serveGwtUi() { serveRegex(""^/gerrit_ui/(?!rpc/).*"").with(com.google.inject.Key.get(javax.servlet.http.HttpServlet.class, com.google.inject.name.Names.named(com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET))); if ((warFs) == null) { filter(""/"").through(new com.google.gerrit.httpd.raw.RecompileGwtUiFilter(buckOut, unpackedWar)); } }",85931168e3b27999d8521c4bffd791aa605cc3ca,serveGwtUi(),serveGwtUi(),6,4,"private void serveGwtUi() { serveRegex(""^/gerrit_ui/(?!rpc/)(.*)$"").with(com.google.inject.Key.get(javax.servlet.http.HttpServlet.class, com.google.inject.name.Names.named(com.google.gerrit.httpd.raw.StaticModule.GWT_UI_SERVLET))); if ((warFs) == null) { filter(""/"").through(new com.google.gerrit.httpd.raw.RecompileGwtUiFilter(buckOut, unpackedWar)); } }",f69b9c5d8ad5e141ea406c037bd134e641fa5d3b,serveGwtUi(),84728,121,122
54230,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,25.0,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren(""name""); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if (""STRING"".equals(param.type())) { w = renderTextBox(g, param, false); } else if ((""INT"".equals(param.type())) || (""LONG"".equals(param.type()))) { w = renderTextBox(g, param, true); } else if (""BOOLEAN"".equals(param.type())) { w = renderCheckBox(g, param); } else if ((""LIST"".equals(param.type())) && ((param.permittedValues()) != null)) { w = renderListBox(g, param); } else { continue; } if (param.editable()) { widgetMap.put(param.name(), w); } else { w.setEnabled(false); } } } enableForm(); }",9158867ee3abf08eba3e58cf081e533f9d9dce39,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren(""name""); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if (""STRING"".equals(param.type())) { w = renderTextBox(g, param, false); } else if ((""INT"".equals(param.type())) || (""LONG"".equals(param.type()))) { w = renderTextBox(g, param, true); } else if (""BOOLEAN"".equals(param.type())) { w = renderCheckBox(g, param); } else if ((""LIST"".equals(param.type())) && ((param.permittedValues()) != null)) { w = renderListBox(g, param); } else if (""MULTIPLE"".equals(param.type())) { w = renderTextArea(g, param); } else { continue; } if (param.editable()) { widgetMap.put(param.name(), w); } else { w.setEnabled(false); } } } enableForm(); }",29dc559eacd9bb5ce3f5e866bdee3af22744bd0c,initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),9,24,"private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren(""name""); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; switch (param.type()) { case ""STRING"" : case ""INT"" : case ""LONG"" : w = renderTextBox(g, param); break; case ""BOOLEAN"" : w = renderCheckBox(g, param); break; case ""LIST"" : w = renderListBox(g, param); break; case ""ARRAY"" : w = renderTextArea(g, param); break; default : throw new java.lang.UnsupportedOperationException(""unsupported widget type""); } if (param.editable()) { widgetMap.put(param.name(), w); } else { w.setEnabled(false); } } } enableForm(); }",0af0db13c9b8e6010bc0762994ce8dedf96c8496,initPluginOptions(com.google.gerrit.client.projects.ConfigInfo),129245,492,443
161992,src_test_java_com_ericsson_gerrit_plugins_highavailability_ConfigurationTest.java,7.0,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { when(globalPluginConfigMock.getEnum(com.ericsson.gerrit.plugins.highavailability.Configuration.PEER_INFO_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.STRATEGY_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_PEER_INFO_STRATEGY)).thenReturn(Configuration.PeerInfoStrategy.JGROUPS); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); when(globalPluginConfigMock.getString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY)).thenReturn(""foo""); initializeConfiguration(); assertThat(configuration.jgroups().clusterName()).isEqualTo(""foo""); }",da0dc478c6600aaf89cdeb381855f99e8bb43e0b,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, ""foo""); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(""foo""); }",aed6b4eb816776bb6a73fd36e2409ccc1bc97563,testGetJGroupsCluster(),testGetJGroupsCluster(),5,7,"@org.junit.Test public void testGetJGroupsCluster() throws java.lang.Exception { assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_CLUSTER_NAME); globalPluginConfig.setString(com.ericsson.gerrit.plugins.highavailability.Configuration.JGROUPS_SECTION, null, com.ericsson.gerrit.plugins.highavailability.Configuration.CLUSTER_NAME_KEY, ""foo""); assertThat(getConfiguration().jgroups().clusterName()).isEqualTo(""foo""); }",821f001c4598e729c19a6c6006fd570988cf943c,testGetJGroupsCluster(),183511,91,126
70022,gerrit-server_src_main_java_com_google_gerrit_server_account_GpgKeys.java,,,,"static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.server.git.gpg.PublicKeyStore.fingerprintToString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } return info; }",9cd5daa8c22b968ee3f6a651fba93388ff3e2f13,,toJson(org.bouncycastle.openpgp.PGPPublicKey),14,2,"static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.server.git.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.server.git.gpg.PublicKeyStore.fingerprintToString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } return info; }",d53e9664dfd572407abc31126a86edf373a0f706,toJson(org.bouncycastle.openpgp.PGPPublicKeyRing),118362,267,286
150794,java_com_google_gerrit_server_update_RetryHelper.java,15.0,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(listener.getAttemptCount()); } }",eb91aa7a5669e121d7e9812d7b4a3b3becef3d2b,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ChangeAction<T> changeAction, com.github.rholder.retry.Retryer<T> retryer) throws java.lang.Throwable { try { return retryer.call(() -> changeAction.call(updateFactory)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if (e instanceof com.github.rholder.retry.RetryException) { metrics.timeoutCount.increment(); } if ((e.getCause()) != null) { throw e.getCause(); } throw e; } }",c7628e182763c9a9383cd002aeb186d3d1473149,"execute(com.google.gerrit.server.update.RetryHelper$Action,com.google.gerrit.server.update.RetryHelper$Options,com.google.common.base.Predicate)","execute(com.google.gerrit.server.update.RetryHelper$ChangeAction,com.github.rholder.retry.Retryer)",4,6,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",4f81c455a9af19aa50e21a4f4b1b3164df204e2a,"execute(com.google.gerrit.server.update.RetryHelper$ActionType,com.google.gerrit.server.update.RetryHelper$Action,com.google.gerrit.server.update.RetryHelper$Options,com.google.common.base.Predicate)",43441,144,201
53344,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isEditeable(com.google.gerrit.client.diff.FileInfo info) { java.lang.String status = info.status(); return (status == null) || (!(ChangeType.DELETED.matches(status))); },a29997b396b0cf5e06c482367141ea9437937c22,,isEditeable(com.google.gerrit.client.diff.FileInfo),48,9,private boolean isEditable(com.google.gerrit.client.diff.FileInfo info) { java.lang.String status = info.status(); return (status == null) || (!(ChangeType.DELETED.matches(status))); },7bef976c585d09bff20ca34786dbe5288f0105b4,isEditable(com.google.gerrit.client.diff.FileInfo),150302,51,49
115850,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,8.0,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { update(c, event.getRefName()); } catch (java.io.IOException | org.eclipse.jgit.api.errors.GitAPIException e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), e); } } }",ee007aa4f9ba6a73cad77ed08839beed22fef777,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater = c.getSubModuleUpdater(serverIdent, canonicalWebUrl); try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",42373cfee628d5d354ff319060e6e512e9056f55,onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event),onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event),6,8,"@java.lang.Override public synchronized void onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event event) { if (event.getProjectName().equals(allProjectsName.get())) { if (event.getRefName().equals(""refs/meta/config"")) { updateConfiguration(); } return; } for (com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c : config) { if (!(c.srcRepoKey.get().equals(event.getProjectName()))) { continue; } if (!((c.destBranch.equals(""*"")) || (c.srcRef.equals(event.getRefName())))) { continue; } if ((c.destBranch.equals(""*"")) && (!(event.getRefName().startsWith(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS)))) { continue; } try { com.googlesource.gerrit.plugins.supermanifest.SubModuleUpdater subModuleUpdater; switch (c.getToolType()) { case Repo : subModuleUpdater = new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater(serverIdent, canonicalWebUrl); break; default : throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format(""invalid toolType: %s"", c.getToolType().name())); } try (com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader = new com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader()) { subModuleUpdater.update(reader, c, event.getRefName()); } } catch (java.lang.Exception e) { java.lang.StackTraceElement here = java.lang.Thread.currentThread().getStackTrace()[1]; e.setStackTrace(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.trimStack(e.getStackTrace(), here)); java.io.StringWriter sw = new java.io.StringWriter(); java.io.PrintWriter pw = new java.io.PrintWriter(sw); e.printStackTrace(pw); error(""update for %s (ref %s) failed: %s"", c.toString(), event.getRefName(), sw); } } }",68c4506be357e5a4660d8b24234d64e5e39a6cd9,onGitReferenceUpdated(com.googlesource.gerrit.plugins.supermanifest.Event),71286,425,498
46154,gerrit-server_src_test_java_com_google_gerrit_server_query_change_IndexRewriteTest.java,,,,"public void testMultipleIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f1 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate(""f1""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o2 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate(""o2"", ""o2""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f3 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate(""f3""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o4 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate(""o4"", ""o4""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = com.google.gerrit.server.query.Predicate.and(f1, o2, f3, o4); assertEquals(4, in.getChildCount()); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite.rewrite(in); assertSame(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(o2, o4, wrap(com.google.gerrit.server.query.Predicate.and(f1, f3))), out.getChildren()); }",ae8c76d3f47a0d63a4360b688fbb4362e6afbfe4,,testMultipleIndexPredicates(),4,13,"public void testMultipleIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = parse(""file:a OR branch:b OR file:c OR branch:d""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite(in); assertSame(com.google.gerrit.server.query.OrPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(in.getChild(1), in.getChild(3), wrap(com.google.gerrit.server.query.Predicate.or(in.getChild(0), in.getChild(2)))), out.getChildren()); }",540455ae36fdbcffb446943c53b2312e92bd1eeb,testMultipleIndexPredicates(),1940,407,176
73984,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,20.0,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { this.caller = caller; updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); com.google.gerrit.server.git.MergeOp.reloadChanges(cs); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); failFast(cs); } try { integrateIntoHistory(cs); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Merge Conflict"", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",fb754320907f74444dc2954ac9e5715f01e49421,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { this.caller = caller; updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); com.google.gerrit.server.git.MergeOp.reloadChanges(cs); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); failFast(cs); } else { bypassSubmitRules(cs); } try { integrateIntoHistory(cs); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Merge Conflict"", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",725bbd5532195f3eff538f506fe910e8565fa4ab,"merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)","merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)",6,22,"public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { this.caller = caller; updateSubmissionId(change); this.db = db; logDebug(""Beginning integration of {}"", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); com.google.gerrit.server.git.MergeOp.reloadChanges(cs); logDebug(""Calculated to merge {}"", cs); if (checkSubmitRules) { logDebug(""Checking submit rules and state""); checkSubmitRulesAndState(cs); failFast(cs); } else { logDebug(""Bypassing submit rules""); bypassSubmitRules(cs); } try { integrateIntoHistory(cs); } catch (com.google.gerrit.server.git.IntegrationException e) { logError(""Merge Conflict"", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Merge Conflict"", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",ddb4b9549aadb64b9d2b42903a5e692c727a303d,"merge(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser,boolean)",35088,298,307
163794,java_com_google_gerrit_server_rules_PrologModule.java,0.0,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); },6b3f312a347dea0bddf4c39ee956088807f2fa33,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); factory(PrologRuleEvaluator.Factory.class); },3c071ffc8eec82fb096c280daca26e3e38349217,configure(),configure(),15,0,@java.lang.Override protected void configure() { install(new com.google.gerrit.server.rules.PrologModule.EnvironmentModule()); bind(PrologEnvironment.Args.class); bind(com.google.gerrit.server.rules.PrologRule.class); factory(PrologRuleEvaluator.Factory.class); },85db78d3f359a300b33519710da0e470af200adf,configure(),123253,51,69
75020,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_SetParentIT.java,4.0,"@org.junit.Test public void setParent() throws java.lang.Exception { java.lang.String parent = ""parent""; com.google.gerrit.acceptance.GitUtil.createProject(sshSession, parent, null, true); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/parent""), newParentInput(parent)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get(((""/projects/"" + (project.get())) + ""/parent"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.lang.String newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(parent); r.consume(); }",ee66311a87ecf82ee911fcd6fc879a4105e53dbf,"@org.junit.Test public void setParent() throws java.lang.Exception { java.lang.String parent = ""parent""; com.google.gerrit.acceptance.GitUtil.createProject(sshSession, parent, null, true); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/parent""), newParentInput(parent)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get(((""/projects/"" + (project.get())) + ""/parent"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.lang.String newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(parent); r.consume(); r = adminSession.put(((""/projects/"" + (project.get())) + ""/parent""), newParentInput(null)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get(((""/projects/"" + (project.get())) + ""/parent"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(""All-Projects""); r.consume(); }",b680533b79cd762c105775750f4b7a10b51d4fef,setParent(),setParent(),2,4,"@org.junit.Test public void setParent() throws java.lang.Exception { java.lang.String parent = ""parent""; com.google.gerrit.acceptance.GitUtil.createProject(sshSession, parent, null, true); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/parent""), newParentInput(parent)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get(((""/projects/"" + (project.get())) + ""/parent"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.lang.String newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(parent); r.consume(); r = adminSession.put(((""/projects/"" + (project.get())) + ""/parent""), newParentInput(null)); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); r.consume(); r = adminSession.get(((""/projects/"" + (project.get())) + ""/parent"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); newParent = newGson().fromJson(r.getReader(), java.lang.String.class); assertThat(newParent).isEqualTo(AllProjectsNameProvider.DEFAULT); r.consume(); }",e9e2208bf555968f9279c26cd9d1fa2ff20ab5df,setParent(),26568,303,306
59911,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocLoader.java,,,,"@java.lang.Override protected void configure() { persist(com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module.X_DOC_RESOURCES, com.googlesource.gerrit.plugins.xdocs.XDocResourceKey.class, com.google.gerrit.httpd.resources.Resource.class).maximumWeight((2 << 20)).weigher(com.googlesource.gerrit.plugins.xdocs.XDocLoader.XDocResourceWeigher.class).loader(com.googlesource.gerrit.plugins.xdocs.XDocLoader.class); }",2b10893e71970df3de53676bb62986f33e963cd9,,configure(),3,1,"@java.lang.Override protected void configure() { persist(com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module.X_DOC_RESOURCES, java.lang.String.class, com.google.gerrit.httpd.resources.Resource.class).maximumWeight((2 << 20)).weigher(com.googlesource.gerrit.plugins.xdocs.XDocLoader.XDocResourceWeigher.class).loader(com.googlesource.gerrit.plugins.xdocs.XDocLoader.class); }",3660d5b1d99c48ea5cbe1610a616ebf47696e6b4,configure(),154143,134,122
92554,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,3.0,"public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(java.lang.String project, java.lang.String revision, java.lang.String file) { return filterLinks(fileHistoryLinks, ( webLink) -> webLink.getFileHistoryWebLink(project, revision, file)); }",6abbb6151cb7ca21f33b6e7bf013d3268a92dc35,"public java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(java.lang.String project, java.lang.String revision, java.lang.String file) { return filterLinks(fileHistoryLinks, ( webLink) -> webLink.getFileHistoryWebLink(project, revision, file)); }",e26f846f17a72fee3bfc6baf6a17fa3e6e368929,"getFileHistoryLinks(java.lang.String,java.lang.String,java.lang.String)","getFileHistoryLinks(java.lang.String,java.lang.String,java.lang.String)",2,3,"public java.util.List<com.google.gerrit.common.data.WebLinkInfoCommon> getFileHistoryLinks(java.lang.String project, java.lang.String revision, java.lang.String file) { return com.google.common.collect.FluentIterable.from(fileHistoryLinks).transform(( webLink) -> { com.google.gerrit.extensions.common.WebLinkInfo info = webLink.getFileHistoryWebLink(project, revision, file); if (info == null) { return null; } com.google.gerrit.common.data.WebLinkInfoCommon commonInfo = new com.google.gerrit.common.data.WebLinkInfoCommon(); commonInfo.name = info.name; commonInfo.imageUrl = info.imageUrl; commonInfo.url = info.url; commonInfo.target = info.target; return commonInfo; }).filter(com.google.gerrit.server.WebLinks.INVALID_WEBLINK_COMMON).toList(); }",31fd701d7f1d33d26fd5207adf62317fe27f8b5d,"getFileHistoryLinks(java.lang.String,java.lang.String,java.lang.String)",39427,76,217
105333,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void rebaseNotAllowedForOwnerWithoutPushPermission() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); testRepo.reset(""HEAD~1""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); revision.review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); revision.submit(); block(Permission.PUSH, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/for/*"").setForce(true); java.lang.String changeId = r2.getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""rebase not permitted""); gApi.changes().id(changeId).rebase(); }",1cc5d6eae04b8a143200a4f16b3c4b6952daa9d4,,rebaseNotAllowedForOwnerWithoutPushPermission(),2,72,"@org.junit.Test public void rebaseNotAllowedForOwnerWithoutPushPermission() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); testRepo.reset(""HEAD~1""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); revision.review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); revision.submit(); block(Permission.PUSH, com.google.gerrit.acceptance.api.change.REGISTERED_USERS, ""refs/for/*""); java.lang.String changeId = r2.getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""rebase not permitted""); gApi.changes().id(changeId).rebase(); }",e482ea44665b1187ae12eb4025a681ff933e6933,rebaseNotAllowedForOwnerWithoutPushPermission(),53080,234,228
52440,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitSshd.java,1.0,"public void run() throws java.lang.Exception { ui.header(""SSH Daemon""); java.lang.String hostname = ""*""; int port = 29418; java.lang.String listenAddress = sshd.get(""listenAddress""); if (com.google.gerrit.pgm.init.InitSshd.isOff(listenAddress)) { hostname = ""off""; } else if ((listenAddress != null) && (!(listenAddress.isEmpty()))) { final java.net.InetSocketAddress addr = com.google.gerrit.server.util.SocketUtil.parse(listenAddress, port); hostname = com.google.gerrit.server.util.SocketUtil.hostname(addr); port = addr.getPort(); } hostname = ui.readString(hostname, ""Listen on address""); if (com.google.gerrit.pgm.init.InitSshd.isOff(hostname)) { sshd.set(""listenAddress"", ""off""); return; } port = ui.readInt(port, ""Listen on port""); sshd.set(""listenAddress"", com.google.gerrit.server.util.SocketUtil.format(hostname, port)); if ((site.ssh_rsa.exists()) || (site.ssh_dsa.exists())) { libraries.bouncyCastle.downloadRequired(); } else if (!(site.ssh_key.exists())) { libraries.bouncyCastle.downloadOptional(); } generateSshHostKeys(); }",36dccbd3fe1bd393e7d634079de5ff3e682dbf0a,"public void run() throws java.lang.Exception { ui.header(""SSH Daemon""); java.lang.String hostname = ""*""; int port = 29418; java.lang.String listenAddress = sshd.get(""listenAddress""); if (com.google.gerrit.pgm.init.InitSshd.isOff(listenAddress)) { hostname = ""off""; } else if ((listenAddress != null) && (!(listenAddress.isEmpty()))) { final java.net.InetSocketAddress addr = com.google.gerrit.server.util.SocketUtil.parse(listenAddress, port); hostname = com.google.gerrit.server.util.SocketUtil.hostname(addr); port = addr.getPort(); } hostname = ui.readString(hostname, ""Listen on address""); if (com.google.gerrit.pgm.init.InitSshd.isOff(hostname)) { sshd.set(""listenAddress"", ""off""); return; } port = ui.readInt(port, ""Listen on port""); sshd.set(""listenAddress"", com.google.gerrit.server.util.SocketUtil.format(hostname, port)); if ((site.ssh_rsa.exists()) || (site.ssh_dsa.exists())) { libraries.bouncyCastle.downloadRequired(); libraries.bouncyCastleSSL.downloadRequired(); } else if (!(site.ssh_key.exists())) { libraries.bouncyCastle.downloadOptional(); libraries.bouncyCastleSSL.downloadOptional(); } generateSshHostKeys(); }",2bc69a95ee4472dfbc4caae1de096341978c4cd0,run(),run(),3,1,"public void run() throws java.lang.Exception { ui.header(""SSH Daemon""); java.lang.String hostname = ""*""; int port = 29418; java.lang.String listenAddress = sshd.get(""listenAddress""); if (com.google.gerrit.pgm.init.InitSshd.isOff(listenAddress)) { hostname = ""off""; } else if ((listenAddress != null) && (!(listenAddress.isEmpty()))) { final java.net.InetSocketAddress addr = com.google.gerrit.server.util.SocketUtil.parse(listenAddress, port); hostname = com.google.gerrit.server.util.SocketUtil.hostname(addr); port = addr.getPort(); } hostname = ui.readString(hostname, ""Listen on address""); if (com.google.gerrit.pgm.init.InitSshd.isOff(hostname)) { sshd.set(""listenAddress"", ""off""); return; } port = ui.readInt(port, ""Listen on port""); sshd.set(""listenAddress"", com.google.gerrit.server.util.SocketUtil.format(hostname, port)); if ((site.ssh_rsa.exists()) || (site.ssh_dsa.exists())) { libraries.bouncyCastleSSL.downloadRequired(); } else if (!(site.ssh_key.exists())) { libraries.bouncyCastleSSL.downloadOptional(); } generateSshHostKeys(); }",7974f59a4670550651922a3ccd5695a43096b557,run(),35999,336,314
68456,gerrit-httpd_src_test_java_com_google_gerrit_httpd_GitwebConfigTest.java,1.0,"@org.junit.Test public void testValidPathSeparator() { for (char c : com.google.gerrit.httpd.GitWebConfigTest.VALID_CHARACTERS.toCharArray()) { assertTrue((""valid character rejected: "" + c), com.google.gerrit.httpd.GitWebConfig.isValidPathSeparator(c)); } }",a6eb2c9a471e3d4306c8eeb1c3a34121d49eadca,"@org.junit.Test public void testValidPathSeparator() { for (char c : com.google.gerrit.httpd.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertTrue((""valid character rejected: "" + c), com.google.gerrit.httpd.GitwebConfig.isValidPathSeparator(c)); } }",60b8a4a009796981f266d0ebeaeddf251b69b095,testValidPathSeparator(),testValidPathSeparator(),7,1,"@org.junit.Test public void testValidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.VALID_CHARACTERS.toCharArray()) { assertTrue((""valid character rejected: "" + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }",4ecf2074ad2c1f0a30c3d2e29128999c00ba7d61,testValidPathSeparator(),204843,75,77
99230,src_main_java_com_ericsson_gerrit_plugins_highavailability_cache_CacheEvictionHandler.java,0.0,"@java.lang.Override public void onRemoval(java.lang.String pluginName, java.lang.String cacheName, com.google.common.cache.RemovalNotification<K, V> notification) { if (((!(com.ericsson.gerrit.plugins.evictcache.Context.isForwardedEvent())) && (!(notification.wasEvicted()))) && (isSynchronized(cacheName))) { executor.execute(new EvictCacheTask(pluginName, cacheName, notification.getKey())); } }",57cb88bea1bc380b928105745423cf8c25c9550c,"@java.lang.Override public void onRemoval(java.lang.String pluginName, java.lang.String cacheName, com.google.common.cache.RemovalNotification<K, V> notification) { if (((!(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent())) && (!(notification.wasEvicted()))) && (isSynchronized(cacheName))) { executor.execute(new EvictCacheTask(cacheName, notification.getKey())); } }",270a85b185e86d980052e37c3e413f5baffee0a8,"onRemoval(java.lang.String,java.lang.String,com.google.common.cache.RemovalNotification)","onRemoval(java.lang.String,java.lang.String,com.google.common.cache.RemovalNotification)",6,0,"@java.lang.Override public void onRemoval(java.lang.String pluginName, java.lang.String cacheName, com.google.common.cache.RemovalNotification<K, V> notification) { if (((!(com.ericsson.gerrit.plugins.highavailability.forwarder.Context.isForwardedEvent())) && (!(notification.wasEvicted()))) && (isSynchronized(cacheName))) { executor.execute(new CacheEvictionTask(cacheName, notification.getKey())); } }",2543b8ae62c01dde6cea96beb057d503ac79f25c,"onRemoval(java.lang.String,java.lang.String,com.google.common.cache.RemovalNotification)",188635,107,107
17380,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectAdminServiceImpl.java,1.0,@java.lang.Override public void visibleProjects(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.Project>> callback) { visibleProjectsFactory.create().to(callback); },076605bc221c2136c92f7dc34a443e45ce2746c5,@java.lang.Override public void visibleProjects(final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.VisibleProjectsInfo> callback) { visibleProjectsFactory.create().to(callback); },e6c797c06846b56c7bd90154d18322dedd833328,visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback),visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback),13,0,@java.lang.Override public void visibleProjects(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.Project>> callback) { visibleProjectsFactory.create().to(callback); },076605bc221c2136c92f7dc34a443e45ce2746c5,visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback),50069,56,60
112877,src_main_java_com_googlesource_gerrit_plugins_serverconfig_ServerConfigServlet.java,12.0,"private java.io.File resolveFile(javax.servlet.http.HttpServletRequest req) { return new java.io.File(site_path, ((req.getServletPath()) + (req.getPathInfo()))); }",a1123d542c6b602628927e3e265912dcf60abb26,private java.nio.file.Path resolvePath(javax.servlet.http.HttpServletRequest req) { return sitePaths.resolve(((req.getServletPath()) + (req.getPathInfo()))); },829742a9fa6cf17d9c7884e031038041c94ce8c6,resolveFile(javax.servlet.http.HttpServletRequest),resolvePath(javax.servlet.http.HttpServletRequest),5,9,private java.nio.file.Path resolvePath(javax.servlet.http.HttpServletRequest req) { return sitePaths.resolve(com.google.common.base.CharMatcher.is('/').trimLeadingFrom(((req.getServletPath()) + (req.getPathInfo())))); },f5c642965d613d8be54c115873d7d8f86558f4d5,resolvePath(javax.servlet.http.HttpServletRequest),97187,40,58
54694,src_main_java_com_googlesource_gerrit_plugins_serviceuser_client_StringListPanel.java,,,,com.google.gwt.core.client.JsArray<com.google.gerrit.client.rpc.NativeString> getValues() { com.google.gwt.core.client.JsArray<com.google.gerrit.client.rpc.NativeString> values = com.google.gwt.core.client.JsArray.createArray().cast(); return values; },af40226927c64c24fb1fe4a63b6cf16bbaf1fbf5,,getValues(),5,9,java.util.List<java.lang.String> getValues() { return t.getValues(); },45b0da99fca8ecc4f5d93b73e3413aa8e7513bf2,getValues(),56442,82,23
77324,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchesTable.java,9.0,@java.lang.Override public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { remove(ids); },085129b7dd7662cf94dd7259566bb1b533cab5f2,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> watchedProjects) { remove(ids); },1c0625c2eb78b4e8c5c5f827d6e9e0d8f36bbafc,onSuccess(com.google.gwtjsonrpc.common.VoidResult),onSuccess(com.google.gwt.core.client.JsArray),9,0,@java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> watchedProjects) { remove(infos); },56a036419ef6f93f8a5a9af7179c3e805dec0207,onSuccess(com.google.gwt.core.client.JsArray),159141,48,49
69384,gerrit-server_src_main_java_com_google_gerrit_server_git_gpg_SignedPushPreReceiveHook.java,,,,"@java.lang.Override public void onPreReceive(org.eclipse.jgit.transport.ReceivePack rp, java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { try (java.io.Writer msgOut = new java.io.OutputStreamWriter(rp.getMessageOutputStream())) { org.eclipse.jgit.transport.PushCertificate cert = rp.getPushCertificate(); if (cert == null) { return; } if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { msgOut.write(""Invalid nonce\n""); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); return; } org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig == null) { msgOut.write(""Invalid signature format\n""); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); return; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);com.google.gerrit.server.git.gpg.PublicKeyStore store = new com.google.gerrit.server.git.gpg.PublicKeyStore(repo)) { java.lang.String err = verifySignature(sig, cert, readKeys(sig.getKeyID())); if (err != null) { msgOut.write(err); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.rejectInvalid(commands); } } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.log.error(""Error verifying push certificate"", e); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.reject(commands, ""push cert error""); } }",1b8ac34d20ee5a7f898361ce602f13f7b57bef56,,"onPreReceive(org.eclipse.jgit.transport.ReceivePack,java.util.Collection)",5,0,"@java.lang.Override public void onPreReceive(org.eclipse.jgit.transport.ReceivePack rp, java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { try { org.eclipse.jgit.transport.PushCertificate cert = rp.getPushCertificate(); if (cert == null) { return; } com.google.gerrit.server.git.gpg.PushCertificateChecker checker = new com.google.gerrit.server.git.gpg.PushCertificateChecker(new com.google.gerrit.server.git.gpg.PublicKeyChecker()) { @java.lang.Override protected org.eclipse.jgit.lib.Repository getRepository() throws java.io.IOException { return repoManager.openRepository(allUsers); } @java.lang.Override protected boolean shouldClose(org.eclipse.jgit.lib.Repository repo) { return true; } }; com.google.gerrit.server.git.gpg.CheckResult result = checker.check(cert); if (!(result.isOk())) { for (java.lang.String problem : result.getProblems()) { rp.sendMessage(problem); } com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.reject(commands, ""invalid push cert""); } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.log.error(""Error checking push certificate"", e); com.google.gerrit.server.git.gpg.SignedPushPreReceiveHook.reject(commands, ""push cert error""); } }",c70c9ba80f876a6335e9fc7e8239966304f9d5da,"onPreReceive(org.eclipse.jgit.transport.ReceivePack,java.util.Collection)",209818,440,374
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_PutUsername.java,0.0,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",72adb73a30dda8c3f09def7650ffd199c3afdb43,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",69d866f5afcf7552a5941a3697ba30af9aef09ff,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutUsername$Input)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutUsername$Input)",3,0,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutUsername.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set username""); } if (!(realm.allowsEdit(AccountFieldName.USER_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""realm does not allow editing username""); } if (input == null) { input = new com.google.gerrit.server.account.PutUsername.Input(); } try { changeUserNameFactory.create(db.get(), rsrc.getUser(), input.username).call(); } catch (java.lang.IllegalStateException e) { if (ChangeUserName.USERNAME_CANNOT_BE_CHANGED.equals(e.getMessage())) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(e.getMessage()); } throw e; } catch (com.google.gerrit.server.account.InvalidUserNameException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(""invalid username""); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""username already used""); } return input.username; }",72adb73a30dda8c3f09def7650ffd199c3afdb43,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutUsername$Input)",64112,431,444
58337,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void exportInitJs() { try { if (scanner.getEntry(com.google.gerrit.server.plugins.AutoRegisterModules.STATIC_INIT_JS).isPresent()) { httpGen.export(com.google.gerrit.server.plugins.AutoRegisterModules.INIT_JS); } } catch (java.io.IOException e) { com.google.gerrit.server.plugins.AutoRegisterModules.log.warn(java.lang.String.format(""Cannot access %s from plugin %s: JavaScript auto-discovered plugin will not be registered"", com.google.gerrit.server.plugins.AutoRegisterModules.STATIC_INIT_JS, pluginName), e); } }",6ad40a9d0881758fbf11a86b0ab6829cdd3b94cc,,exportInitJs(),7,0,"private void exportInitJs() { try { if (scanner.getEntry(JavaScriptPlugin.STATIC_INIT_JS).isPresent()) { httpGen.export(JavaScriptPlugin.INIT_JS); } } catch (java.io.IOException e) { com.google.gerrit.server.plugins.AutoRegisterModules.log.warn(java.lang.String.format((""Cannot access %s from plugin %s: "" + ""JavaScript auto-discovered plugin will not be registered""), JavaScriptPlugin.STATIC_INIT_JS, pluginName), e); } }",da20f82fc75e4d35e00f601387125ef181ae309b,exportInitJs(),36791,150,118
138992,java_com_google_gerrit_server_project_SetAccessUtil.java,3.0,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",01f184e58493845745346a2529ccebb06e1247ec,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } if (section.getName().startsWith(RefNames.REFS_GROUPS)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""Permissions on %s is managed by Gerrit and cannot be modified"", RefNames.REFS_GROUPS)); } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",11f0b6c825caa58495524fb7fc146fabaff68d2c,"validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)","validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)",2,4,"void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""Cannot edit global capabilities for projects other than "" + (allProjects.get()))); } } if ((isGroupsMutationDisallowed(config.getName())) && (section.getName().startsWith(RefNames.REFS_GROUPS))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""Permissions on %s is managed by Gerrit and cannot be modified"", RefNames.REFS_GROUPS)); } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""invalid section name""); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(((""Cannot add non-global capability "" + (p.getName())) + "" to global capabilities"")); } } } } }",3f25f8412037cab51455726623ef9d63a7cece7a,"validateChanges(com.google.gerrit.server.git.ProjectConfig,java.util.List,java.util.List)",139614,495,508
86311,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RevisionNoteData.java,3.0,"com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setStatus(PatchLineComment.Status.forCode(status)); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }",8dd27aae9ead8baf8473693bd0d35d9b1aa4fb45,"com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }",e20d7a7fabd7b0dd39baad12aa03e2f9d9011ac0,export(),export(),3,0,"com.google.gerrit.reviewdb.client.PatchLineComment export(com.google.gerrit.reviewdb.client.PatchLineComment.Status status) { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); plc.setStatus(status); return plc; }",7c458f4a2ad20a9a45eeb4f7d892c69ad479b71a,export(com.google.gerrit.reviewdb.client.PatchLineComment$Status),60153,148,175
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,9.0,"public <T extends com.google.gwt.core.client.JavaScriptObject> void get(com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { send(com.google.gerrit.client.rpc.GET, cb); }",ecdc3627725bb703e86ab012f353a99acad6de54,"public <T extends com.google.gwt.core.client.JavaScriptObject> void get(com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { send(com.google.gerrit.client.rpc.GET, cb, false); }",0b82a6970458b099dd99f84e35d60a1d8035ed25,get(com.google.gwt.user.client.rpc.AsyncCallback),get(com.google.gwt.user.client.rpc.AsyncCallback),7,31,public <T extends com.google.gwt.core.client.JavaScriptObject> void get(com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { get(com.google.gerrit.client.rpc.RestApi.wrap(cb)); },dd09b2e39b26f788c13644f2158a06fdd6d158d0,get(com.google.gwt.user.client.rpc.AsyncCallback),67156,60,60
161470,src_test_java_com_cisco_gerrit_plugins_slack_message_PatchSetCreatedMessageGeneratorTest.java,14.0,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",0041ab7daae5d924ed63782d28b7366b706e5823,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreRebaseEmptyPatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-rebase-empty-patch-set"", true)).thenReturn(ignoreRebaseEmptyPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",ad8bbb8b389d31e921c817cd03b79fc36532bb67,"getConfig(java.lang.String,boolean)","getConfig(java.lang.String,boolean,boolean)",4,5,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(java.lang.String ignore, boolean publishOnPatchSetCreated, boolean ignoreUnchangedPatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(ignore); when(mockPluginConfig.getBoolean(""publish-on-patch-set-created"", true)).thenReturn(publishOnPatchSetCreated); when(mockPluginConfig.getBoolean(""ignore-unchanged-patch-set"", true)).thenReturn(ignoreUnchangedPatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.PatchSetCreatedMessageGeneratorTest.PROJECT_NAME); }",f0c84a6e8365d927834a0a28886686ac873c0379,"getConfig(java.lang.String,boolean,boolean)",56056,342,338
61610,gerrit-server_src_main_java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,4.0,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = com.google.common.collect.Lists.newLinkedList(); try { for (final com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.get().accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, com.google.gerrit.common.TimeUtil.nowTs()); auditUpdates.add(audit); } } db.get().accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",99ad95f00b4b0720ff6ed797e360e2c0283da5b8,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = com.google.common.collect.Lists.newLinkedList(); try { com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); for (final com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, com.google.gerrit.common.TimeUtil.nowTs()); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",95d90b551e046d27d1c12b7744658eced17aaf8c,"onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)","onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",3,4,"@java.lang.Override public void onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed) { final java.util.List<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> auditUpdates = com.google.common.collect.Lists.newLinkedList(); try { com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { for (final com.google.gerrit.reviewdb.client.AccountGroupById g : removed) { com.google.gerrit.reviewdb.client.AccountGroupByIdAud audit = null; for (com.google.gerrit.reviewdb.client.AccountGroupByIdAud a : db.accountGroupByIdAud().byGroupInclude(g.getGroupId(), g.getIncludeUUID())) { if (a.isActive()) { audit = a; break; } } if (audit != null) { audit.removed(me, com.google.gerrit.common.TimeUtil.nowTs()); auditUpdates.add(audit); } } db.accountGroupByIdAud().update(auditUpdates); } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForGroups(""Cannot log delete groups from group event performed by user"", me, removed, e); } }",766a3da1646fd1bfbe72f230cc8f3244d9937dc9,"onDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection)",6142,327,337
58332,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_GetCommitIT.java,,,,"@org.junit.Test public void getCommit_Forbidden() throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.get((((""/projects/"" + (project.get())) + ""/branches/"") + (com.google.gerrit.extensions.restapi.IdString.fromDecoded(""refs/meta/config"").encoded()))); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); com.google.gerrit.server.project.ListBranches.BranchInfo branchInfo = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ListBranches.BranchInfo.class); r.consume(); r = userSession.get((((""/projects/"" + (project.get())) + ""/commits/"") + (branchInfo.revision))); assertEquals(HttpStatus.SC_FORBIDDEN, r.getStatusCode()); }",5649660b1c174f4215addafb6af0ddbc78ae3125,,getCommit_Forbidden(),3,3,"@org.junit.Test public void getNonExistingCommit_NotFound() throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = adminSession.get((((""/projects/"" + (project.get())) + ""/commits/"") + (org.eclipse.jgit.lib.ObjectId.zeroId().name()))); assertEquals(HttpStatus.SC_NOT_FOUND, r.getStatusCode()); }",7054f938326938592a19d51f45a3a56121f65133,getNonExistingCommit_NotFound(),156267,187,89
100015,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,58.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void removeUnregisteredCc(com.google.gerrit.server.mail.Address cc) { unregisteredCcs.put(cc, UnregisteredCcState.REMOVED); }",377916058f1e666a538fdb50e42598725b44d20b,,removeUnregisteredCc(com.google.gerrit.server.mail.Address),7,8,"public void removeReviewerByEmail(com.google.gerrit.server.mail.Address reviewer) { reviewersByEmail.put(reviewer, ReviewerStateInternal.REMOVED); }",34a8c428aaea07573305ba22c189274d2d454396,removeReviewerByEmail(com.google.gerrit.server.mail.Address),139013,42,44
30790,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_Screen.java,3.0,"protected void insertTitleWidget(final com.google.gwt.user.client.ui.Widget w) { header.insert(w, 0); }",1de355351a21d85f73889db12306120a5bd33dd4,"protected void setTitleWest(final com.google.gwt.user.client.ui.Widget w) { header.setWidget(0, com.google.gerrit.client.ui.Screen.Cols.West.num, w); }",4c5adf7ed9ccdc6ab0af35f8fc6b9112dfdc773d,insertTitleWidget(com.google.gwt.user.client.ui.Widget),setTitleWest(com.google.gwt.user.client.ui.Widget),3,10,"protected void setTitleWest(final com.google.gwt.user.client.ui.Widget w) { header.setWidget(0, com.google.gerrit.client.ui.Screen.Cols.West.ordinal(), w); }",08bb0f5512cacb4271827913c3357404a928317f,setTitleWest(com.google.gwt.user.client.ui.Widget),147355,50,50
60621,gerrit-server_src_main_java_com_google_gerrit_server_project_ListTags.java,,,,"@java.lang.Override public int compare(com.google.gerrit.extensions.common.TagInfo a, com.google.gerrit.extensions.common.TagInfo b) { return a.getRef().compareTo(b.getRef()); }",da491a3c0e6517fe0e048e04245e8d0119b34c04,,"compare(com.google.gerrit.extensions.common.TagInfo,com.google.gerrit.extensions.common.TagInfo)",18,0,"@java.lang.Override public int compare(com.google.gerrit.extensions.common.TagInfo a, com.google.gerrit.extensions.common.TagInfo b) { return a.ref.compareTo(b.ref); }",51635282a6550fab662cacaf0dce4548501efa4c,"compare(com.google.gerrit.extensions.common.TagInfo,com.google.gerrit.extensions.common.TagInfo)",75301,53,53
89301,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,27.0,"@org.junit.Test public void delete() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(""refs/drafts/master""); assertThat(query(r.getChangeId())).hasSize(1); assertThat(info(r.getChangeId()).status).isEqualTo(ChangeStatus.DRAFT); gApi.changes().id(r.getChangeId()).delete(); assertThat(query(r.getChangeId())).isEmpty(); }",a992c08b26e77e3e070c58e218cabf9c62d78f63,@org.junit.Test public void deleteNewChange() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = createChange(); java.lang.String changeId = changeResult.getChangeId(); gApi.changes().id(changeId).delete(); assertThat(query(changeId)).isEmpty(); },e73d9560fefaf0bc6eee3037575a948cc948cee0,delete(),deleteNewChange(),4,35,@org.junit.Test public void deleteNewChangeAsAdmin() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = createChange(); java.lang.String changeId = changeResult.getChangeId(); gApi.changes().id(changeId).delete(); assertThat(query(changeId)).isEmpty(); },9def402076d43cab8fcfff097b5a8ceb16f3dc82,deleteNewChangeAsAdmin(),163101,79,81
79922,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,3.0,"private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, boolean cc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control), cc); } return result; }",599a15338c706b299e58bf41bf0c8daac73d1d43,"private com.google.gerrit.server.change.PostReviewers.Addition putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, boolean cc) { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); if (isValidReviewer(member, control)) { return new com.google.gerrit.server.change.PostReviewers.Addition(reviewer, rsrc.getChangeResource(), com.google.common.collect.ImmutableMap.of(member.getId(), control), cc); } return new com.google.gerrit.server.change.PostReviewers.Addition(reviewer); }",c63dc7ce5bdb8025d884dd7d35d69841cd2252b9,"putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource,boolean)","putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource,boolean)",13,5,"private com.google.gerrit.server.change.PostReviewers.Addition putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, com.google.gerrit.extensions.client.ReviewerState state) { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); if (isValidReviewer(member, control)) { return new com.google.gerrit.server.change.PostReviewers.Addition(reviewer, rsrc.getChangeResource(), com.google.common.collect.ImmutableMap.of(member.getId(), control), state); } return new com.google.gerrit.server.change.PostReviewers.Addition(reviewer); }",be1446f08c835c10b14ecdea5775c22a0fd0c59a,"putAccount(java.lang.String,com.google.gerrit.server.change.ReviewerResource,com.google.gerrit.extensions.client.ReviewerState)",75715,180,193
51713,gerrit-gwtui_src_main_java_com_google_gerrit_client_GerritCss.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String notMergable();,eeae5c0ed6ee8b865da7b5c1299ec58a7ad8eb24,,notMergable(),11,182,java.lang.String notMergeable();,e78f79a69601d6e668b275767504c36b68d9bc0a,notMergeable(),115928,10,9
59815,gerrit-server_src_main_java_com_google_gerrit_server_index_DummyIndex.java,,,,@java.lang.Override public com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> getSchema() { return null; },5a3cd83c764fba4b171bd570b07a1c770ca88eee,,getSchema(),5,5,@java.lang.Override public com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> getSchema() { throw new java.lang.UnsupportedOperationException(); },8096ec8ea0acb44ccf3feede90183522fb49954b,getSchema(),138696,44,50
10275,src_main_java_com_google_gerrit_client_changes_PatchTable.java,4.0,"void appendRow(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, final com.google.gerrit.client.reviewdb.Patch p) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_CELL); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(""ChangeTypeCell""); m.append(p.getChangeType().getCode()); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""FilePathCell""); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""CommentCell""); appendCommentCount(m, p); m.closeTd(); switch (p.getPatchType()) { case UNIFIED : openlink(m, 2); m.closeTd(); break; case BINARY : { java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL(); base += ""cat/"" + (com.google.gwtorm.client.KeyUtil.encode(p.getKey().toString())); switch (p.getChangeType()) { case DELETED : case MODIFIED : openlink(m, 1); m.openAnchor(); m.setAttribute(""href"", (base + ""^1"")); m.append(Util.C.patchTableDownloadPreImage()); closelink(m); break; default : emptycell(m, 1); break; } switch (p.getChangeType()) { case MODIFIED : case ADDED : openlink(m, 1); m.openAnchor(); m.setAttribute(""href"", (base + ""^0"")); m.append(Util.C.patchTableDownloadPostImage()); closelink(m); break; default : emptycell(m, 1); break; } break; } default : emptycell(m, 2); break; } openlink(m, 1); m.closeTd(); m.closeTr(); }",7c26a74db1e38f15d5106f614a2560b16116156d,"void appendRow(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, final com.google.gerrit.client.reviewdb.Patch p) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_CELL); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(""ChangeTypeCell""); m.append(p.getChangeType().getCode()); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""FilePathCell""); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""CommentCell""); appendCommentCount(m, p); m.closeTd(); switch (p.getPatchType()) { case UNIFIED : openlink(m, 2); m.closeTd(); break; case BINARY : { java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL(); base += ""cat/"" + (com.google.gwtorm.client.KeyUtil.encode(p.getKey().toString())); switch (p.getChangeType()) { case DELETED : case MODIFIED : directUrlLeft = createLink(m, base, ""^1""); break; default : emptycell(m, 1); break; } switch (p.getChangeType()) { case MODIFIED : case ADDED : directUrlRight = createLink(m, base, ""^0""); break; default : emptycell(m, 1); break; } break; } default : emptycell(m, 2); break; } openlink(m, 1); m.closeTd(); m.closeTr(); }",a1ce063cfb00c3a897effb1808371f5ba0186b91,"appendRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.reviewdb.Patch)","appendRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.reviewdb.Patch)",9,3,"void appendRow(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, final com.google.gerrit.client.reviewdb.Patch p) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_CELL); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(""ChangeTypeCell""); m.append(p.getChangeType().getCode()); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""FilePathCell""); m.closeTd(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_DATA_CELL); m.addStyleName(""CommentCell""); appendCommentCount(m, p); m.closeTd(); switch (p.getPatchType()) { case UNIFIED : openlink(m, 2); m.closeTd(); break; case BINARY : { java.lang.String base = com.google.gwt.core.client.GWT.getHostPageBaseURL(); base += ""cat/"" + (com.google.gwtorm.client.KeyUtil.encode(p.getKey().toString())); switch (p.getChangeType()) { case DELETED : case MODIFIED : openlink(m, 1); m.openAnchor(); m.setAttribute(""href"", (base + ""^1"")); m.append(Util.C.patchTableDownloadPreImage()); closelink(m); break; default : emptycell(m, 1); break; } switch (p.getChangeType()) { case MODIFIED : case ADDED : openlink(m, 1); m.openAnchor(); m.setAttribute(""href"", (base + ""^0"")); m.append(Util.C.patchTableDownloadPostImage()); closelink(m); break; default : emptycell(m, 1); break; } break; } default : emptycell(m, 2); break; } openlink(m, 1); m.closeTd(); m.closeTr(); }",7c26a74db1e38f15d5106f614a2560b16116156d,"appendRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.reviewdb.Patch)",36078,429,485
62521,gerrit-server_src_main_java_com_google_gerrit_common_EventDispatcher.java,,,,"public void fireEvent(final com.google.gerrit.server.events.Event event, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException;",f35cbf53406323433f1ce81e4534d35320ba01e1,,"fireEvent(com.google.gerrit.server.events.Event,com.google.gerrit.reviewdb.server.ReviewDb)",7,0,"public void postEvent(com.google.gerrit.reviewdb.client.Branch.NameKey branchName, com.google.gerrit.server.events.Event event);",92931c1cdcdbd316ba10c8282508ef699b89c60d,"postEvent(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.events.Event)",36421,52,39
36670,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginLoader.java,12.0,"private java.util.List<java.io.File> scanJarsInPluginsDirectory() { if (((pluginsDir) == null) || (!(pluginsDir.exists()))) { return java.util.Collections.emptyList(); } java.io.File[] matches = pluginsDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return (pathname.getName().endsWith("".jar"")) && (pathname.isFile()); } }); if (matches == null) { com.google.gerrit.server.plugins.PluginLoader.log.error((""Cannot list "" + (pluginsDir.getAbsolutePath()))); return java.util.Collections.emptyList(); } return java.util.Arrays.asList(matches); }",0a8df0c581da7691ea3433644de1d6649c35f57f,"private java.util.List<java.io.File> scanJarsInPluginsDirectory() { if (((pluginsDir) == null) || (!(pluginsDir.exists()))) { return java.util.Collections.emptyList(); } java.io.File[] matches = pluginsDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { return ((pathname.getName().endsWith("".jar"")) || (pathname.getName().endsWith("".jar.disabled""))) && (pathname.isFile()); } }); if (matches == null) { com.google.gerrit.server.plugins.PluginLoader.log.error((""Cannot list "" + (pluginsDir.getAbsolutePath()))); return java.util.Collections.emptyList(); } return java.util.Arrays.asList(matches); }",0287a5d046af6d953bac94f2febd3f1a77df173e,scanJarsInPluginsDirectory(),scanJarsInPluginsDirectory(),5,13,"private java.util.List<java.io.File> scanJarsInPluginsDirectory() { if (((pluginsDir) == null) || (!(pluginsDir.exists()))) { return java.util.Collections.emptyList(); } java.io.File[] matches = pluginsDir.listFiles(new java.io.FileFilter() { @java.lang.Override public boolean accept(java.io.File pathname) { java.lang.String n = pathname.getName(); return ((n.endsWith("".jar"")) || (n.endsWith("".jar.disabled""))) && (pathname.isFile()); } }); if (matches == null) { com.google.gerrit.server.plugins.PluginLoader.log.error((""Cannot list "" + (pluginsDir.getAbsolutePath()))); return java.util.Collections.emptyList(); } return java.util.Arrays.asList(matches); }",9378c368fb25f2bc59b004c3197e3b1eaf40ce54,scanJarsInPluginsDirectory(),123712,179,184
113651,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,12.0,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) { if (p != null) { byName.invalidate(p.getNameKey().get()); } },4bfdd17ab9c98974f7595c30bf7ce54bc1b0e38b,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) throws java.io.IOException { if (p != null) { byName.invalidate(p.getNameKey().get()); } indexer.get().index(p.getNameKey()); },12ea0d72a7e32f751c0f1ac5be337efc6351e7d4,evict(com.google.gerrit.reviewdb.client.Project),evict(com.google.gerrit.reviewdb.client.Project),10,12,@java.lang.Override public void evict(com.google.gerrit.reviewdb.client.Project p) throws java.io.IOException { evict(p.getNameKey()); },a633a24df9db86f0e805a9c9f3c9b5f054bedd6b,evict(com.google.gerrit.reviewdb.client.Project),169331,67,43
59947,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,36.0,"public void run() { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); commentManager.saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String b = ((base) != null) ? base.getId() : null; java.lang.String rev = revision.getId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, b, rev), new com.google.gerrit.client.change.ChangeScreen2(changeId, b, rev, openReplyBox)); } }); }",7e433aab15c346ed4dde0e3040c668185ac2f282,"public void run() { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); commentManager.saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String b = ((base) != null) ? base.getId() : null; java.lang.String rev = revision.getId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, b, rev), new com.google.gerrit.client.change.ChangeScreen2(changeId, b, rev, openReplyBox, false)); } }); }",7c1a9ffd93833d6420c60e9350c91d3dad63f7a3,run(),run(),4,35,"public void run() { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); commentManager.saveAllDrafts(group); group.done(); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { java.lang.String b = ((base) != null) ? base.getId() : null; java.lang.String rev = revision.getId(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, b, rev), new com.google.gerrit.client.change.ChangeScreen2(changeId, b, rev, openReplyBox, FileTable.Mode.REVIEW)); } }); }",511eba8b1668a48d433f87d462ff8c05402f4202,run(),149468,198,203
76672,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_StaticModule.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void setPolyGerritCookie(javax.servlet.http.HttpServletResponse res, boolean polygerrit) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(com.google.gerrit.httpd.raw.StaticModule.POLYGERRIT_UI_COOKIE, """"); res.addCookie(cookie); cookie.setPath(""/""); cookie.setValue(java.lang.Boolean.TRUE.toString()); cookie.setMaxAge((polygerrit ? -1 : 0)); res.addCookie(cookie); }",81a39607672ad75f0b98ad55ccb4dfe206b167ff,,"setPolyGerritCookie(javax.servlet.http.HttpServletResponse,boolean)",11,12,"private boolean setPolyGerritCookie(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, com.google.gerrit.httpd.raw.StaticModule.UiPreference pref) { javax.servlet.http.Cookie cookie = new javax.servlet.http.Cookie(com.google.gerrit.httpd.raw.StaticModule.GERRIT_UI_COOKIE, pref.name().toLowerCase()); if ((options.enablePolyGerrit()) && (options.enableGwtUi())) { cookie.setPath(""/""); cookie.setSecure(com.google.gerrit.httpd.raw.StaticModule.PolyGerritFilter.isSecure(req)); cookie.setMaxAge(com.google.gerrit.httpd.raw.StaticModule.GERRIT_UI_COOKIE_MAX_AGE); } else { cookie.setValue(""""); cookie.setMaxAge(0); } res.addCookie(cookie); return pref == (com.google.gerrit.httpd.raw.StaticModule.UiPreference.POLYGERRIT); }",9dddc8d49f2b5a0b3c302ae04e48c997f6d96154,"setPolyGerritCookie(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.google.gerrit.httpd.raw.StaticModule$UiPreference)",208860,114,230
57740,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void parseChangeMessage(org.eclipse.jgit.revwalk.RevCommit commit) { final byte[] raw = commit.getRawBuffer(); final int size = raw.length; final java.nio.charset.Charset enc = org.eclipse.jgit.util.RawParseUtils.parseEncoding(raw); final int headerStart = org.eclipse.jgit.util.RawParseUtils.commitMessage(raw, 0); if (headerStart < 0) return; int headerEnd = org.eclipse.jgit.util.RawParseUtils.endOfParagraph(raw, headerStart); if (headerEnd == size) return; int changeMsgStart = headerEnd + 2; int changeMsgEnd = org.eclipse.jgit.util.RawParseUtils.endOfParagraph(raw, changeMsgStart); if (changeMsgEnd == size) return; java.lang.String str = org.eclipse.jgit.util.RawParseUtils.decode(enc, raw, changeMsgStart, changeMsgEnd); changeMessages.add(str); }",84c72087bd12a2b55b29839e95ac1a43909ed6c2,,parseChangeMessage(org.eclipse.jgit.revwalk.RevCommit),11,12,"private void parseChangeMessage(org.eclipse.jgit.revwalk.RevCommit commit) { byte[] raw = commit.getRawBuffer(); int size = raw.length; java.nio.charset.Charset enc = org.eclipse.jgit.util.RawParseUtils.parseEncoding(raw); int subjectStart = org.eclipse.jgit.util.RawParseUtils.commitMessage(raw, 0); if ((subjectStart < 0) || (subjectStart >= size)) { return; } int subjectEnd = org.eclipse.jgit.util.RawParseUtils.endOfParagraph(raw, subjectStart); if (subjectEnd == size) { return; } int changeMessageStart; if ((raw[subjectEnd]) == '\n') { changeMessageStart = subjectEnd + 2; } else if ((raw[subjectEnd]) == '\r') { changeMessageStart = subjectEnd + 4; } else { return; } int ptr = size - 1; int changeMessageEnd = -1; while (ptr > changeMessageStart) { ptr = org.eclipse.jgit.util.RawParseUtils.prevLF(raw, ptr, '\r'); if (ptr == (-1)) { break; } if ((raw[ptr]) == '\n') { changeMessageEnd = ptr - 1; break; } else if ((raw[ptr]) == '\r') { changeMessageEnd = ptr - 3; break; } } if (ptr <= changeMessageStart) { return; } java.lang.String changeMessage = org.eclipse.jgit.util.RawParseUtils.decode(enc, raw, changeMessageStart, (changeMessageEnd + 1)); changeMessages.add(changeMessage); }",c1b593d65f87b85c856ed3c2346331c65c6b6e6a,parseChangeMessage(org.eclipse.jgit.revwalk.RevCommit),36727,223,364
89321,gerrit-server_src_main_java_com_google_gerrit_server_change_IncludedIn.java,0.0,"@java.lang.Override public com.google.gerrit.server.change.IncludedIn.IncludedInInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.project.ChangeControl ctl = rsrc.getControl(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), rsrc.getNotes()); com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { rw.setRetainBody(false); org.eclipse.jgit.revwalk.RevCommit rev; try { rev = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException err) { throw new com.google.gerrit.extensions.restapi.BadRequestException(err.getMessage()); } catch (org.eclipse.jgit.errors.MissingObjectException err) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(err.getMessage()); } com.google.gerrit.server.change.IncludedInResolver.Result d = com.google.gerrit.server.change.IncludedInResolver.resolve(r, rw, rev); com.google.common.collect.Multimap<java.lang.String, java.lang.String> external = com.google.common.collect.ArrayListMultimap.create(); for (com.google.gerrit.extensions.config.ExternalIncludedIn ext : includedIn) { external.putAll(ext.getIncludedIn(project.get(), rev.name(), d.getTags(), d.getBranches())); } return new com.google.gerrit.server.change.IncludedIn.IncludedInInfo(d, (!(external.isEmpty()) ? external.asMap() : null)); } }",1f446df75d14fec68d2f3f623bc425567104bb57,"public com.google.gerrit.server.change.IncludedIn.IncludedInInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String objectId) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { rw.setRetainBody(false); org.eclipse.jgit.revwalk.RevCommit rev; try { rev = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(objectId)); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException err) { throw new com.google.gerrit.extensions.restapi.BadRequestException(err.getMessage()); } catch (org.eclipse.jgit.errors.MissingObjectException err) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(err.getMessage()); } com.google.gerrit.server.change.IncludedInResolver.Result d = com.google.gerrit.server.change.IncludedInResolver.resolve(r, rw, rev); com.google.common.collect.Multimap<java.lang.String, java.lang.String> external = com.google.common.collect.ArrayListMultimap.create(); for (com.google.gerrit.extensions.config.ExternalIncludedIn ext : externalIncludedIn) { external.putAll(ext.getIncludedIn(project.get(), rev.name(), d.getTags(), d.getBranches())); } return new com.google.gerrit.server.change.IncludedIn.IncludedInInfo(d, (!(external.isEmpty()) ? external.asMap() : null)); } }",3af6bbd681519bd7c2a528303da8341517690628,apply(com.google.gerrit.server.change.ChangeResource),"apply(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",7,0,"public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revisionId) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { rw.setRetainBody(false); org.eclipse.jgit.revwalk.RevCommit rev; try { rev = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(revisionId)); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException err) { throw new com.google.gerrit.extensions.restapi.BadRequestException(err.getMessage()); } catch (org.eclipse.jgit.errors.MissingObjectException err) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(err.getMessage()); } com.google.gerrit.server.change.IncludedInResolver.Result d = com.google.gerrit.server.change.IncludedInResolver.resolve(r, rw, rev); com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> external = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (com.google.gerrit.extensions.config.ExternalIncludedIn ext : externalIncludedIn) { com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> extIncludedIns = ext.getIncludedIn(project.get(), rev.name(), d.getTags(), d.getBranches()); if (extIncludedIns != null) { external.putAll(extIncludedIns); } } return new com.google.gerrit.extensions.api.changes.IncludedInInfo(d.getBranches(), d.getTags(), (!(external.isEmpty()) ? external.asMap() : null)); } }",8ea87dff1a47ce2775097a7069a77e07745f841e,"apply(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",120000,438,480
115330,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ListPlugins.java,4.0,"public com.google.gson.JsonElement display(java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return OutputFormat.JSON.newGson().toJsonTree(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType()); } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",0b0b14d735700692c1d9baeea3db9255905cccfd,"public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",e8c920fd1789627cc6ed30bba898ff83bef82c3f,display(java.io.PrintWriter),display(java.io.PrintWriter),2,4,"public java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> display(@com.google.gerrit.common.Nullable java.io.PrintWriter stdout) { java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.PluginInfo> output = new java.util.TreeMap<>(); java.util.List<com.google.gerrit.server.plugins.Plugin> plugins = com.google.common.collect.Lists.newArrayList(pluginLoader.getPlugins(all)); java.util.Collections.sort(plugins, new java.util.Comparator<com.google.gerrit.server.plugins.Plugin>() { @java.lang.Override public int compare(com.google.gerrit.server.plugins.Plugin a, com.google.gerrit.server.plugins.Plugin b) { return a.getName().compareTo(b.getName()); } }); if (!(format.isJson())) { stdout.format(""%-30s %-10s %-8s %s\n"", ""Name"", ""Version"", ""Status"", ""File""); stdout.print(""-------------------------------------------------------------------------------\n""); } for (com.google.gerrit.server.plugins.Plugin p : plugins) { com.google.gerrit.extensions.common.PluginInfo info = com.google.gerrit.server.plugins.ListPlugins.toPluginInfo(p); if (format.isJson()) { output.put(p.getName(), info); } else { stdout.format(""%-30s %-10s %-8s %s\n"", p.getName(), com.google.common.base.Strings.nullToEmpty(info.version), (p.isDisabled() ? ""DISABLED"" : ""ENABLED""), p.getSrcFile().getFileName()); } } if (stdout == null) { return output; } else if (format.isJson()) { format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.PluginInfo>>() {}.getType(), stdout); stdout.print('\n'); } stdout.flush(); return null; }",4b7acbc4dc7e3b6c16900c4f38c4fb35f0623c21,display(java.io.PrintWriter),51890,484,484
131811,gerrit-server_src_main_java_com_google_gerrit_server_project_PutConfig.java,4.0,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException { if (!(rsrc.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to project owner""); } return apply(rsrc.getProjectState(), input); }",b80c98af3d32de65d2812cd29e9161cb5be57b07,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_ACCESS); return apply(rsrc.getProjectState(), input); }",99c171c5c144951003171b546f50d4db7b97ad0b,"apply(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.api.projects.ConfigInput)","apply(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.api.projects.ConfigInput)",9,4,"@java.lang.Override public com.google.gerrit.extensions.api.projects.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource rsrc, com.google.gerrit.extensions.api.projects.ConfigInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { permissionBackend.user(user).project(rsrc.getNameKey()).check(ProjectPermission.WRITE_CONFIG); return apply(rsrc.getProjectState(), input); }",e708b61a8a06964713517871c8baedcec53c231d,"apply(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.api.projects.ConfigInput)",85307,125,125
76790,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SkipManager.java,7.0,"abstract void render(int context, com.google.gerrit.client.diff.DiffInfo diff);",81151b75b75f7df275afa08f68d22352dcf6a623,"void render(int context, com.google.gerrit.client.diff.DiffInfo diff) { if ((host.diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.SIDE_BY_SIDE)) { renderSideBySide(context, diff); } else { renderUnified(context, diff); } }",85d98e554b84f96bdbe0483472a080a54c794628,"render(int,com.google.gerrit.client.diff.DiffInfo)","render(int,com.google.gerrit.client.diff.DiffInfo)",9,5,"void render(int context, com.google.gerrit.client.diff.DiffInfo diff) { if (context == (com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT)) { return; } java.util.List<com.google.gerrit.client.patches.SkippedLine> skips = new java.util.ArrayList<>(); int lineA = 0; int lineB = 0; com.google.gwt.core.client.JsArray<com.google.gerrit.client.diff.DiffInfo.Region> regions = diff.content(); for (int i = 0; i < (regions.length()); i++) { com.google.gerrit.client.diff.DiffInfo.Region current = regions.get(i); if ((((current.ab()) != null) || (current.common())) || ((current.skip()) > 0)) { int len = ((current.skip()) > 0) ? current.skip() : ((current.ab()) != null ? current.ab() : current.b()).length(); if ((i == 0) && (len > (context + 1))) { skips.add(new com.google.gerrit.client.patches.SkippedLine(0, 0, (len - context))); } else if ((i == ((regions.length()) - 1)) && (len > (context + 1))) { skips.add(new com.google.gerrit.client.patches.SkippedLine((lineA + context), (lineB + context), (len - context))); } else if (len > ((2 * context) + 1)) { skips.add(new com.google.gerrit.client.patches.SkippedLine((lineA + context), (lineB + context), (len - (2 * context)))); } lineA += len; lineB += len; } else { lineA += ((current.a()) != null) ? current.a().length() : 0; lineB += ((current.b()) != null) ? current.b().length() : 0; } } skips = host.getCommentManager().splitSkips(context, skips); renderSkips(skips, lineA, lineB); }",b16f1df48f8ce6be6d0d4bb0df2ad4e31e5d392c,"render(int,com.google.gerrit.client.diff.DiffInfo)",148905,79,488
172030,src_main_java_com_googlesource_gerrit_plugins_readonly_ReadOnlyConfig.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String[] sshAllows() { return sshAllows; },5db54d1ec9aa20d9c19c7ae3cc46e1ce3d1b9c45,,sshAllows(),3,0,java.util.List<java.lang.String> allowSshCommands() { return allowSshCommands; },54f1a56c69c9c21dc8030374f00cbe2051756794,allowSshCommands(),12644,17,23
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,3.0,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",302b4ec4ec0f39b4b7aac59f0d0a83e841812a54,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(curr.getParentKey().get(), Project.NameKey.asStringOrNull(project), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(curr.getParentKey(), project)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",0c903ba9bbc4e5daee24f6d3823050580562ffe2,onDelete(int),onDelete(int),7,3,"void onDelete(int idx) { java.lang.String path = list.get(idx).path(); com.google.gerrit.client.changes.ChangeEditApi.delete(project.get(), curr.getParentKey().get(), path, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(project, curr.getParentKey())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",744d001dc5a2e3c38ec9e483a5a931845460affe,onDelete(int),211041,174,168
59510,gitiles-servlet_src_test_java_com_google_gitiles_PaginatorTest.java,1.0,"@org.junit.Test public void atLeastOnePageIn() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(10); walk.markStart(commits.get(9)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, commits.get(7)); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(7), commits.get(6), commits.get(5)), com.google.common.collect.ImmutableList.copyOf(p)); assertEquals(commits.get(9), p.getPreviousStart()); assertEquals(commits.get(4), p.getNextStart()); }",30397ddcc48e0fb1d050681ed31589bf55dcfb8d,"@org.junit.Test public void atLeastOnePageIn() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(10); walk.markStart(commits.get(9)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, commits.get(7), com.google.gitiles.PaginatorFilters.everything()); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(7), commits.get(6), commits.get(5)), com.google.common.collect.ImmutableList.copyOf(p)); assertEquals(commits.get(9), p.getPreviousStart()); assertEquals(commits.get(4), p.getNextStart()); }",17abab7ad7813f81fb48e4dfe406bf1e3bbe13ac,atLeastOnePageIn(),atLeastOnePageIn(),9,1,"@org.junit.Test public void atLeastOnePageIn() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(10); walk.markStart(commits.get(9)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, commits.get(7)); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(7), commits.get(6), commits.get(5)), com.google.common.collect.ImmutableList.copyOf(p)); assertEquals(commits.get(9), p.getPreviousStart()); assertEquals(commits.get(4), p.getNextStart()); }",30397ddcc48e0fb1d050681ed31589bf55dcfb8d,atLeastOnePageIn(),54297,176,162
58862,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_util_Section.java,13.0,"public java.lang.String password(final java.lang.String username, final java.lang.String password) { final java.lang.String ov = getSecure(password); java.lang.String user = flags.sec.getString(section, subsection, username); if (user == null) { user = get(username); } if (user == null) { flags.sec.unset(section, subsection, password); return null; } if (ov != null) { if ((ui.isBatch()) || (!(ui.yesno(false, ""Change %s's password"", user)))) { return ov; } } final java.lang.String nv = ui.password(""%s's password"", user); if (!(com.google.gerrit.pgm.init.Section.eq(ov, nv))) { setSecure(password, nv); } return nv; }",d156b254b585f71ae3c41174da3bb86c8d6a1044,"public java.lang.String password(final java.lang.String username, final java.lang.String password) { final java.lang.String ov = getSecure(password); java.lang.String user = flags.sec.getString(section, subsection, username); if (user == null) { user = get(username); } if (user == null) { flags.sec.unset(section, subsection, password); return null; } if (ov != null) { if ((ui.isBatch()) || (!(ui.yesno(false, ""Change %s's password"", user)))) { return ov; } } final java.lang.String nv = ui.password(""%s's password"", user); if (!(com.google.gerrit.pgm.init.util.Section.eq(ov, nv))) { setSecure(password, nv); } return nv; }",ddca0e4cb40b1694d57753f533199e4dcfd99379,"password(java.lang.String,java.lang.String)","password(java.lang.String,java.lang.String)",3,13,"public java.lang.String password(final java.lang.String username, final java.lang.String password) { final java.lang.String ov = getSecure(password); java.lang.String user = flags.sec.getString(section, subsection, username); if (user == null) { user = get(username); } if (user == null) { flags.sec.unset(section, subsection, password); return null; } if (ov != null) { if ((ui.isBatch()) || (!(ui.yesno(false, ""Change %s's password"", user)))) { return ov; } } final java.lang.String nv = ui.password(""%s's password"", user); if (!(com.google.gerrit.pgm.init.api.Section.eq(ov, nv))) { setSecure(password, nv); } return nv; }",cdd2731be95f5302537a12a22805ec4814a067ca,"password(java.lang.String,java.lang.String)",187198,198,198
97098,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_IndexProjectCommand.java,,,,"private void index(com.google.gerrit.reviewdb.client.Project.NameKey project) { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.sshd.commands.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> alreadyPresentOnIndex = fromIndex(project); java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> toReIndex = byId.values().stream().map(( cd) -> cd.getId()).collect(java.util.stream.Collectors.toSet()); java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> toDeleteFormIndex = com.google.common.collect.Sets.difference(alreadyPresentOnIndex, toReIndex); index(repo, byId); deleteFromIndex(toDeleteFormIndex); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", project.get(), e.getMessage())); } }",840c037ee311df2223a407aacd680dab61993d30,,index(com.google.gerrit.reviewdb.client.Project$NameKey),15,0,"private void index(com.google.gerrit.server.project.ProjectControl projectControl) { try { index.apply(new com.google.gerrit.server.project.ProjectResource(projectControl), null); } catch (java.lang.Exception e) { writeError(""error"", java.lang.String.format(""Unable to index %s: %s"", projectControl.getProject().getName(), e.getMessage())); } }",4463e44813e6251a6c2f69ae6d7dbed0d028ea8b,index(com.google.gerrit.server.project.ProjectControl),156430,465,93
125430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_ConsistencyCheckerIT.java,12.0,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.project.ChangeControl ctl = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = ctl.getProject().getNameKey(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(ctl, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",a6e970ffc6c56fba7a4a22ec086924e7fff9af7b,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.notedb.ChangeNotes notes = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = notes.getProjectName(); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertProblems(notes, null, com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",3c921228206ff3948491b38bc3ba19c641c4f2a7,missingRepo(),missingRepo(),6,9,"@org.junit.Test public void missingRepo() throws java.lang.Exception { assumeNoteDbDisabled(); com.google.gerrit.server.notedb.ChangeNotes notes = insertChange(); com.google.gerrit.reviewdb.client.Project.NameKey name = notes.getProjectName(); com.google.gerrit.server.project.ChangeControl ctl = controlForNotes(notes); ((com.google.gerrit.testutil.InMemoryRepositoryManager) (repoManager)).deleteRepository(name); assertThat(checker.check(ctl, null).problems()).containsExactly(com.google.gerrit.acceptance.server.change.ConsistencyCheckerIT.problem((""Destination repository not found: "" + name))); }",ba31c8df3ebc4d7ae7f9dc64b09d2eb8c28cec93,missingRepo(),125026,131,162
163935,gerrit-server_src_main_java_com_google_gerrit_server_auth_openid_OpenIdProviderPattern.java,2.0,public boolean matches(com.google.gerrit.server.account.ExternalId extId) { return matches(extId.key().get()); },89d0064a7fb154fe3001bcdd51de765384d0f9c7,public boolean matches(com.google.gerrit.reviewdb.client.AccountExternalId id) { return matches(id.getExternalId()); },42f920a8087c421f3ad2e3cff37d4beb46500981,matches(com.google.gerrit.server.account.ExternalId),matches(com.google.gerrit.reviewdb.client.AccountExternalId),3,2,public boolean matches(com.google.gerrit.server.account.ExternalId extId) { return matches(extId.key().get()); },89d0064a7fb154fe3001bcdd51de765384d0f9c7,matches(com.google.gerrit.server.account.ExternalId),64336,32,32
37901,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,10.0,"public void doDraftPublishedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.DraftPublishedEvent event = new com.google.gerrit.server.events.DraftPublishedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), draftPublishedHook, args); }",7124d472541472f9d5cdaafc9a46342550011a67,"public void doDraftPublishedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.DraftPublishedEvent event = new com.google.gerrit.server.events.DraftPublishedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--ref"", event.patchSet.ref); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), draftPublishedHook, args); }",fa8b7ae9f8613e02008b4f99b9c55f92e4abc30a,"doDraftPublishedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)","doDraftPublishedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",2,10,"public void doDraftPublishedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.DraftPublishedEvent event = new com.google.gerrit.server.events.DraftPublishedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--uploader"", getDisplayName(uploader.getAccount())); addArg(args, ""--commit"", event.patchSet.revision); addArg(args, ""--patchset"", event.patchSet.number); runHook(change.getProject(), draftPublishedHook, args); }",7124d472541472f9d5cdaafc9a46342550011a67,"doDraftPublishedHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.server.ReviewDb)",147207,368,353
35470,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,16.0,"public void ensureLoaded(final com.google.gerrit.common.data.PatchSetDetail detail) { infoTable = new com.google.gwt.user.client.ui.Grid(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_CNT, 2); infoTable.setStyleName(Gerrit.RESOURCES.css().infoBlock()); infoTable.addStyleName(Gerrit.RESOURCES.css().patchSetInfoBlock()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, Util.C.patchSetInfoAuthor()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, Util.C.patchSetInfoCommitter()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, Util.C.patchSetInfoParents()); initRow(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_DOWNLOAD, Util.C.patchSetInfoDownload()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter itfmt = infoTable.getCellFormatter(); itfmt.addStyleName(0, 0, Gerrit.RESOURCES.css().topmost()); itfmt.addStyleName(0, 1, Gerrit.RESOURCES.css().topmost()); itfmt.addStyleName(((com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_CNT) - 1), 0, Gerrit.RESOURCES.css().bottomheader()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, 1, Gerrit.RESOURCES.css().useridentity()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, 1, Gerrit.RESOURCES.css().useridentity()); itfmt.addStyleName(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_DOWNLOAD, 1, Gerrit.RESOURCES.css().downloadLinkListCell()); final com.google.gerrit.reviewdb.client.PatchSetInfo info = detail.getInfo(); displayUserIdentity(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_AUTHOR, info.getAuthor()); displayUserIdentity(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_COMMITTER, info.getCommitter()); displayParents(info.getParents()); displayDownload(); body.add(infoTable); if (!(patchSet.getId().equals(diffBaseId))) { patchTable = new com.google.gerrit.client.changes.PatchTable(); patchTable.setSavePointerId((""PatchTable "" + (patchSet.getId()))); patchTable.display(diffBaseId, detail); actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); body.add(actionsPanel); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(patchTable); for (com.google.gwt.event.dom.client.ClickHandler clickHandler : registeredClickHandler) { patchTable.addClickHandler(clickHandler); } } }",a514a9e15fa2910a26bc762912dd96c7ba3388d2,public void ensureLoaded(final com.google.gerrit.common.data.PatchSetDetail detail) { loadedInfoTable(detail); loadedActionPanel(detail); loadedPatchTable(detail); },c9a353d55adaea82967eede068cb9339d60a3c37,ensureLoaded(com.google.gerrit.common.data.PatchSetDetail),ensureLoaded(com.google.gerrit.common.data.PatchSetDetail),2,15,public void ensureLoaded(final com.google.gerrit.common.data.PatchSetDetail detail) { loadInfoTable(detail); loadActionPanel(detail); loadPatchTable(detail); },9fc8ec13fcb8846abd95d5b6e8edc46814f77a1e,ensureLoaded(com.google.gerrit.common.data.PatchSetDetail),23550,42,42
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginGuiceEnvironment.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void attach(java.util.Map<java.lang.Class<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> sets, @javax.annotation.Nullable com.google.inject.Injector src, com.google.gerrit.server.plugins.Plugin plugin) { if (((src != null) && (sets != null)) && (!(sets.isEmpty()))) { for (java.util.Map.Entry<java.lang.Class<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> e : sets.entrySet()) { @java.lang.SuppressWarnings(""unchecked"") com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object> set = ((com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object>) (e.getValue())); for (com.google.inject.Binding<?> b : com.google.gerrit.server.plugins.PluginGuiceEnvironment.bindings(src, e.getKey())) { plugin.add(set.add(b.getKey(), b.getProvider().get())); } } } }",59427415898483dd257c4e5730b2c1c145ea6cbf,,"attach(java.util.Map,com.google.inject.Injector,com.google.gerrit.server.plugins.Plugin)",6,0,"private void attachSet(java.util.Map<com.google.inject.TypeLiteral<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> sets, @javax.annotation.Nullable com.google.inject.Injector src, com.google.gerrit.server.plugins.Plugin plugin) { if (((src != null) && (sets != null)) && (!(sets.isEmpty()))) { for (java.util.Map.Entry<com.google.inject.TypeLiteral<?>, com.google.gerrit.extensions.registration.DynamicSet<?>> e : sets.entrySet()) { @java.lang.SuppressWarnings(""unchecked"") com.google.inject.TypeLiteral<java.lang.Object> type = ((com.google.inject.TypeLiteral<java.lang.Object>) (e.getKey())); @java.lang.SuppressWarnings(""unchecked"") com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object> set = ((com.google.gerrit.extensions.registration.DynamicSet<java.lang.Object>) (e.getValue())); for (com.google.inject.Binding<java.lang.Object> b : com.google.gerrit.server.plugins.PluginGuiceEnvironment.bindings(src, type)) { plugin.add(set.add(b.getKey(), b.getProvider().get())); } } } }",710e7d053260a55319ac716e83694a47f531023e,"attachSet(java.util.Map,com.google.inject.Injector,com.google.gerrit.server.plugins.Plugin)",135395,241,297
15071,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ChangeAccess.java,0.0,"@com.google.gwtorm.client.Query(""WHERE open = true AND sortKey < ? ORDER BY sortKey DESC LIMIT ?"") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> allOpenNext(java.lang.String sortKey, int limit) throws com.google.gwtorm.client.OrmException;",73be1ca7e99669144675e63c48768bb9f25f4692,"@com.google.gwtorm.client.Query(""WHERE open = true AND sortKey < ? ORDER BY sortKeyDesc LIMIT ?"") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> allOpenNext(java.lang.String sortKey, int limit) throws com.google.gwtorm.client.OrmException;",b82f5e737ce8d40142a637f8825c199478bb8db1,"allOpenNext(java.lang.String,int)","allOpenNext(java.lang.String,int)",3,0,"@com.google.gwtorm.client.Query(""WHERE open = true AND sortKeyDesc > ? ORDER BY sortKeyDesc LIMIT ?"") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> allOpenNext(java.lang.String sortKey, int limit) throws com.google.gwtorm.client.OrmException;",cef8c480d0408f555225cf9866950a4c368e8f6d,"allOpenNext(java.lang.String,int)",46769,82,84
72147,src_main_java_com_googlesource_gerrit_plugins_manager_PluginsCentralLoader.java,0.0,public java.util.List<com.googlesource.gerrit.plugins.manager.repository.PluginInfo> availablePlugins() throws java.io.IOException { return repository.list(com.google.gerrit.common.Version.getVersion()); },39793428d419f49c5741c155044dd6114f2d0ff8,public java.util.Collection<com.googlesource.gerrit.plugins.manager.repository.PluginInfo> availablePlugins() throws java.io.IOException { return repository.list(com.googlesource.gerrit.plugins.manager.PluginsCentralLoader.GERRIT_VERSION); },3d4e15aa2cad5fa1732754b92d76bf15edd4eb92,availablePlugins(),availablePlugins(),6,0,@java.lang.Override public java.util.Collection<com.googlesource.gerrit.plugins.manager.repository.PluginInfo> load(com.googlesource.gerrit.plugins.manager.PluginsCentralLoader.ListKey all) throws java.lang.Exception { return repository.list(com.googlesource.gerrit.plugins.manager.PluginsCentralLoader.GERRIT_VERSION); },7ae37425c49fd785b539a1cd618f414f81bdb63f,load(com.googlesource.gerrit.plugins.manager.PluginsCentralLoader$ListKey),6103,62,87
16444,gerrit-server_src_main_java_com_google_gerrit_server_query_change_LabelPredicate.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.EnumSet<com.google.gerrit.server.query.change.ChangeData.NeededData> getNeededData() { return java.util.EnumSet.of(NeededData.APPROVALS, NeededData.CHANGE); }",e34c126d5610d66c1a160154ae21a2862d0aa998,,getNeededData(),4,3,"@java.lang.Override public java.util.EnumSet<com.google.gerrit.server.query.change.ChangeData.NeededData> getNeededData() { return java.util.EnumSet.of(NeededData.APPROVALS, NeededData.CHANGE, NeededData.PROJECT_STATE); }",3f1193e979064c7ecacd3fb172f6592fc12cb013,getNeededData(),27220,61,69
61594,src_main_java_com_googlesource_gerrit_plugins_gitblit_GerritWicketFilter.java,6.0,"@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { com.gitblit.GitBlit.self().configureContext(settings, settings.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }",c66cf801cd377e879ac76ff20eb1baeb157f9444,"@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { javax.servlet.ServletContext servletContext = filterConfig.getServletContext(); servletContext.setAttribute(DaggerContext.INJECTOR_NAME, dagger); showGitBlitBanner(); gerritGitblitContext.init(servletContext); try { super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }",83d8a8202ad84c2f59bb798d87f6798ea3836547,init(javax.servlet.FilterConfig),init(javax.servlet.FilterConfig),13,8,@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { javax.servlet.ServletContext servletContext = filterConfig.getServletContext(); showGitBlitBanner(); gerritGitblitContext.init(servletContext); try { super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } },1140b85130d03050a667003abac2ee0fb7682aff,init(javax.servlet.FilterConfig),51478,128,112
63980,gerrit-server_src_main_java_com_google_gerrit_server_change_ActionJson.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (userProvider.get().isIdentifiedUser()) { com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl().forUser(userProvider.get()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(changeViews, new com.google.gerrit.server.change.ChangeResource(ctl), userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } } return out; }",e5643cc790329f5bd77140f85d12871b7291ca2a,,toActionMap(com.google.gerrit.server.query.change.ChangeData),21,3,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.project.ChangeControl ctl) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (!(ctl.getCurrentUser().isIdentifiedUser())) { return out; } com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(ctl.getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(changeViews, new com.google.gerrit.server.change.ChangeResource(ctl), userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } if (ctl.getChange().getStatus().isOpen()) { com.google.gerrit.extensions.webui.UiAction.Description descr = new com.google.gerrit.extensions.webui.UiAction.Description(); com.google.gerrit.extensions.webui.PrivateInternals_UiActionDescription.setId(descr, ""followup""); com.google.gerrit.extensions.webui.PrivateInternals_UiActionDescription.setMethod(descr, ""POST""); descr.setTitle(""Create follow-up change""); out.put(descr.getId(), new com.google.gerrit.extensions.common.ActionInfo(descr)); } return out; }",9a23ce0ea6dd0a75e90d0d3a940ea2412a74a651,toActionMap(com.google.gerrit.server.project.ChangeControl),153329,235,374
15805,gerrit-server_src_main_java_com_google_gerrit_server_cache_CacheModule.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected <K, V> com.google.gerrit.server.cache.NamedCacheBinding<K, V> core(final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<K, V>> type, final java.lang.String name, java.lang.Class<K> keyClass, java.lang.Class<V> valueClass) { final com.google.gerrit.server.cache.CacheProvider<K, V> b = new com.google.gerrit.server.cache.CacheProvider<K, V>(false, this); b.name(name); b.keyClass(keyClass); b.valueClass(valueClass); bind(com.google.inject.Key.get(type, com.google.inject.name.Names.named(name))).toProvider(b).in(Scopes.SINGLETON); return b; }",1365952622636b1d3d973336b7f458581fe180e7,,"core(com.google.inject.TypeLiteral,java.lang.String,java.lang.Class,java.lang.Class)",3,2,"private <K, V> com.google.gerrit.server.cache.UnnamedCacheBinding<K, V> core(final com.google.inject.Key<com.google.gerrit.server.cache.Cache<K, V>> key, final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<K, V>> type) { final boolean disk = false; final com.google.gerrit.server.cache.CacheProvider<K, V> b = new com.google.gerrit.server.cache.CacheProvider<K, V>(disk, this, type); bind(key).toProvider(b).in(Scopes.SINGLETON); return b; }",a1ff0f20fe305ecf44cbfa16fd91a901e9fcafc9,"core(com.google.inject.Key,com.google.inject.TypeLiteral)",206954,197,157
77937,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_SubmoduleSectionParserIT.java,4.0,"@org.junit.Test public void testWithSectionToOtherServer() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("""" + ((""[submodule \""a\""]"" + ""path = a"") + ""url = ssh://non-localhost/"")) + (p1.get())) + ""\n"") + ""branch = ."")); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); assertThat(res).isEmpty(); }",29bae6ab7ea6a2efaebcee8d39398c46304a5931,"@org.junit.Test public void testWithSectionToOtherServer() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("""" + ((""[submodule \""a\""]"" + ""path = a"") + ""url = ssh://non-localhost/"")) + (p1.get())) + ""\n"") + ""branch = ."")); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); assertThat(res).isEmpty(); }",19e06712e72e6e09b97bc4fed1c7a7bd3e2e6e77,testWithSectionToOtherServer(),testWithSectionToOtherServer(),4,4,"@org.junit.Test public void testWithSectionToOtherServer() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("""" + ((""[submodule \""a\""]"" + ""path = a"") + ""url = ssh://non-localhost/"")) + (p1.get())) + ""\n"") + ""branch = ."")); com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER, targetBranch).parseAllSections(); assertThat(res).isEmpty(); }",766162af3213e4cea47976fec48867aedd1ced4d,testWithSectionToOtherServer(),39354,276,265
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,79.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",393ab8ca20a9663071bcf85d6863dd2a6c82dae8,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); if ((project) == null) { project = info.projectNameKey(); } initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",dc4efc193f0a0a66544f21ad8c105e3bc42c5396,onSuccess(com.google.gerrit.client.info.ChangeInfo),onSuccess(com.google.gerrit.client.info.ChangeInfo),7,78,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo info) { info.init(); if ((project) == null) { project = info.projectNameKey(); } initCurrentRevision(info); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBase()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",41b199707b603339542ec8a68e4bff2255cb8d02,onSuccess(com.google.gerrit.client.info.ChangeInfo),210842,320,319
55207,gitiles-servlet_src_main_java_com_google_gitiles_CommitJsonData.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"com.google.gitiles.CommitJsonData.Commit toJsonData(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.revwalk.RevCommit c, java.util.Set<com.google.gitiles.CommitData.Field> fs, org.eclipse.jgit.util.GitDateFormatter df) throws java.io.IOException { com.google.gitiles.CommitData.Builder cdb = new com.google.gitiles.CommitData.Builder(); if ((walk) != null) { cdb.setRevWalk(walk); } com.google.gitiles.CommitData cd = cdb.build(req, c, fs); com.google.gitiles.CommitJsonData.Commit result = new com.google.gitiles.CommitJsonData.Commit(); if ((cd.sha) != null) { result.commit = cd.sha.name(); } if ((cd.parents) != null) { result.parents = com.google.common.collect.Lists.newArrayListWithCapacity(cd.parents.size()); for (org.eclipse.jgit.revwalk.RevCommit parent : cd.parents) { result.parents.add(parent.name()); } } if ((cd.author) != null) { result.author = com.google.gitiles.CommitJsonData.toJsonData(cd.author, df); } if ((cd.committer) != null) { result.committer = com.google.gitiles.CommitJsonData.toJsonData(cd.committer, df); } if ((cd.message) != null) { result.message = cd.message; } if ((cd.diffEntries) != null) { result.treeDiff = com.google.gitiles.CommitJsonData.toJsonData(cd.diffEntries); } return result; }",5c29c94247c109d2e7d8da11b7c19de1f951b5ed,,"toJsonData(javax.servlet.http.HttpServletRequest,org.eclipse.jgit.revwalk.RevCommit,java.util.Set,org.eclipse.jgit.util.GitDateFormatter)",3,1,"com.google.gitiles.CommitJsonData.Commit toJsonData(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.revwalk.RevCommit c, java.util.Set<com.google.gitiles.CommitData.Field> fs, org.eclipse.jgit.util.GitDateFormatter df) throws java.io.IOException { com.google.gitiles.CommitData cd = new com.google.gitiles.CommitData.Builder().setRevWalk(walk).build(req, c, fs); com.google.gitiles.CommitJsonData.Commit result = new com.google.gitiles.CommitJsonData.Commit(); if ((cd.sha) != null) { result.commit = cd.sha.name(); } if ((cd.parents) != null) { result.parents = com.google.common.collect.Lists.newArrayListWithCapacity(cd.parents.size()); for (org.eclipse.jgit.revwalk.RevCommit parent : cd.parents) { result.parents.add(parent.name()); } } if ((cd.author) != null) { result.author = com.google.gitiles.CommitJsonData.toJsonData(cd.author, df); } if ((cd.committer) != null) { result.committer = com.google.gitiles.CommitJsonData.toJsonData(cd.committer, df); } if ((cd.message) != null) { result.message = cd.message; } if ((cd.diffEntries) != null) { result.treeDiff = com.google.gitiles.CommitJsonData.toJsonData(cd.diffEntries); } return result; }",bfe0aee10e41e9c2ec5ca8a1852a03ea79f5cb8f,"toJsonData(javax.servlet.http.HttpServletRequest,org.eclipse.jgit.revwalk.RevCommit,java.util.Set,org.eclipse.jgit.util.GitDateFormatter)",155669,410,380
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeUtil.java,13.0,"public com.google.gerrit.server.git.CodeReviewCommit getFirstFastForward(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { for (final java.util.Iterator<com.google.gerrit.server.git.CodeReviewCommit> i = toMerge.iterator(); i.hasNext();) { try { final com.google.gerrit.server.git.CodeReviewCommit n = i.next(); if ((mergeTip == null) || (rw.isMergedInto(mergeTip, n))) { i.remove(); return n; } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException(""Cannot fast-forward test during merge"", e); } } return mergeTip; }",93a47f65271410944725fab4c34f1902487fdf5a,"public com.google.gerrit.server.git.CodeReviewCommit getFirstFastForward(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrateException { for (final java.util.Iterator<com.google.gerrit.server.git.CodeReviewCommit> i = toMerge.iterator(); i.hasNext();) { try { final com.google.gerrit.server.git.CodeReviewCommit n = i.next(); if ((mergeTip == null) || (rw.isMergedInto(mergeTip, n))) { i.remove(); return n; } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.IntegrateException(""Cannot fast-forward test during merge"", e); } } return mergeTip; }",1a0cc70b51bbb8971a1986b55aa710b99f94aaf2,"getFirstFastForward(com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.List)","getFirstFastForward(com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.List)",2,13,"public com.google.gerrit.server.git.CodeReviewCommit getFirstFastForward(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { for (final java.util.Iterator<com.google.gerrit.server.git.CodeReviewCommit> i = toMerge.iterator(); i.hasNext();) { try { final com.google.gerrit.server.git.CodeReviewCommit n = i.next(); if ((mergeTip == null) || (rw.isMergedInto(mergeTip, n))) { i.remove(); return n; } } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.IntegrationException(""Cannot fast-forward test during merge"", e); } } return mergeTip; }",e3ec8905beb45a96b541956a73897dd0c81f297b,"getFirstFastForward(com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,java.util.List)",172525,228,226
15948,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListEntry.java,9.0,"private void write(final java.io.OutputStream out, final org.eclipse.jgit.diff.Edit e) throws java.io.IOException { writeVarInt32(out, e.getBeginA()); writeVarInt32(out, e.getEndA()); writeVarInt32(out, e.getBeginB()); writeVarInt32(out, e.getEndB()); }",d1e886fb259ae153a6796bbc6d8a08beb03b49a0,"private void write(final java.io.OutputStream out, final com.google.gerrit.server.patch.GwtOrmBaseEdit e) throws java.io.IOException { writeVarInt32(out, e.getBeginA()); writeVarInt32(out, e.getEndA()); writeVarInt32(out, e.getBeginB()); writeVarInt32(out, e.getEndB()); }",4d2f7ffbd88ca6b36490491b0580a4700d8e9512,"write(java.io.OutputStream,org.eclipse.jgit.diff.Edit)","write(java.io.OutputStream,com.google.gerrit.server.patch.GwtOrmBaseEdit)",9,10,"private void write(final java.io.OutputStream out, final com.google.gerrit.prettify.common.BaseEdit e) throws java.io.IOException { writeVarInt32(out, e.getBeginA()); writeVarInt32(out, e.getEndA()); writeVarInt32(out, e.getBeginB()); writeVarInt32(out, e.getEndB()); }",514ee8bba2580d27055463210104399ec8413af0,"write(java.io.OutputStream,com.google.gerrit.prettify.common.BaseEdit)",52641,87,86
15353,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { },fc0ae7cd596095af85ee4501cd8e7f833f215331,,onSuccess(com.google.gwtjsonrpc.client.VoidResult),4,6,@java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { com.google.gerrit.client.Gerrit.setAccountDiffPreference(diffPref); setEnabled(true); },7989fb1c2ad265fc97887118c12904f4cd7ff20f,onSuccess(com.google.gwtjsonrpc.client.VoidResult),108662,26,52
72232,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeAbandoned.java,,,,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.ChangeJson changeJson = changeJsonFactory.create(ChangeJson.NO_OPTIONS); com.google.gerrit.extensions.common.ChangeInfo changeInfo = changeJson.format(change); com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), change); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); com.google.gerrit.extensions.common.RevisionInfo revisionInfo = changeJson.toRevisionInfo(ctl, ps); fire(changeInfo, revisionInfo); }",30dc7e977d18932af019af1b69cda6160f0df754,,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",49,0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account abandoner, java.lang.String reason) { if (!(listeners.iterator().hasNext())) { return; } try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(abandoner), reason); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeAbandoned.log.error(""Couldn't fire event"", e); } }",a3b33ef415bd855174d4d53a85cdc3b04d7f6f35,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String)",3516,223,196
42190,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,0.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.authorization = result.authorization; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }",497a7a04b73635d9c96bbde9ca57a8901f88a7f7,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.actions = result.actions; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.authorization = result.authorization; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }",85f3bb2d64e376787152bd1304f0428eaeea39ab,onSuccess(com.google.gerrit.common.data.HostPageData),onSuccess(com.google.gerrit.common.data.HostPageData),11,0,"@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById(""gerrit_hostpagedata"").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }",b247d235ee73fcf3119572bcfa605c3b426f1ce0,onSuccess(com.google.gerrit.common.data.HostPageData),170358,226,215
90716,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeIndexer.java,1.0,@java.lang.Override public java.lang.Void call() throws java.io.IOException { for (com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes()) { i.delete(id); } fireChangeDeletedFromIndexEvent(id.get()); return null; },700ebe7a58508fa70c340bafef41abd7870af433,"@java.lang.Override public java.lang.Void call() throws java.io.IOException { for (com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes()) { i.delete(id); } com.google.gerrit.server.index.change.ChangeIndexer.log.info(java.lang.String.format(""Deleted change %d from index."", id.get())); fireChangeDeletedFromIndexEvent(id.get()); return null; }",13e65679bd2d503ac767805f0196d88e3e5c2065,call(),call(),2,1,"@java.lang.Override public java.lang.Void call() throws java.io.IOException { for (com.google.gerrit.server.index.change.ChangeIndex i : getWriteIndexes()) { i.delete(id); } com.google.gerrit.server.index.change.ChangeIndexer.log.info(""Deleted change {} from index."", id.get()); fireChangeDeletedFromIndexEvent(id.get()); return null; }",d4c891ae5eee6c5e8014fd423af953454cecec45,call(),123764,108,99
65842,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationQueue.java,17.0,"private void executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String cmd, java.io.OutputStream errStream) throws java.io.IOException { org.eclipse.jgit.transport.RemoteSession ssh = connect(credsProvider, uri); java.lang.Process proc = ssh.exec(cmd, 0); proc.getOutputStream().close(); org.eclipse.jgit.util.io.StreamCopyThread out = new org.eclipse.jgit.util.io.StreamCopyThread(proc.getInputStream(), errStream); org.eclipse.jgit.util.io.StreamCopyThread err = new org.eclipse.jgit.util.io.StreamCopyThread(proc.getErrorStream(), errStream); out.start(); err.start(); try { proc.waitFor(); out.halt(); err.halt(); } catch (java.lang.InterruptedException interrupted) { } ssh.disconnect(); }",a7d420c58808353cee3e456b35785b1c55ce9773,"private void executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvier, org.eclipse.jgit.transport.URIish uri, java.lang.String cmd, java.io.OutputStream errStream) throws java.io.IOException { com.googlesource.gerrit.plugins.replication.SshHelper.executeRemoteSsh(credsProvier, sshSessionFactory, uri, cmd, errStream); }",3fa57cfeb88bad4380b88f3f31287a1e67923a51,"executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.transport.URIish,java.lang.String,java.io.OutputStream)","executeRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider,org.eclipse.jgit.transport.URIish,java.lang.String,java.io.OutputStream)",27,6,"void scheduleFullSync(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch, com.googlesource.gerrit.plugins.replication.ReplicationState state, boolean now) { if (!(running)) { stateLog.warn(""Replication plugin did not finish startup before event"", state); return; } for (com.googlesource.gerrit.plugins.replication.Destination cfg : config.getDestinations(FilterType.ALL)) { if (cfg.wouldPushProject(project)) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, urlMatch)) { cfg.schedule(project, PushOne.ALL_REFS, uri, state, now); } } } }",6cb409f38170eb20739db4ae8a8c54b528d6e46d,"scheduleFullSync(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,com.googlesource.gerrit.plugins.replication.ReplicationState,boolean)",165423,93,167
127572,gerrit-server_src_main_java_com_google_gerrit_server_change_HashtagsUtil.java,1.0,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws java.lang.IllegalArgumentException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw new java.lang.IllegalArgumentException(""Hashtags may not contain commas""); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",2162287790059567b51a8a2b7ca4363097e87b74,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagsException.hashtagsMayNotContainCommas(); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",e9035781a76f9bb7d7dad420e10843190cc7b5e0,extractTags(java.util.Set),extractTags(java.util.Set),2,1,"static java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException { if (input == null) { return java.util.Collections.emptySet(); } java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains("","")) { throw com.google.gerrit.server.change.HashtagsUtil.InvalidHashtagException.hashtagsMayNotContainCommas(); } hashtag = com.google.gerrit.server.change.HashtagsUtil.cleanupHashtag(hashtag); if (!(hashtag.isEmpty())) { result.add(hashtag); } } return result; }",d7ba9bcbc737011c17879ff55b96080f9f86e65f,extractTags(java.util.Set),189467,187,187
15832,gerrit-common_src_main_java_com_google_gerrit_common_data_GerritConfig.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl getDownloadUrl() { return downloadUrl; },466f1ef0421d6e6ae8d3c3b07e19488b67a4648b,,getDownloadUrl(),3,21,public java.util.Set<com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadScheme> getDownloadSchemes() { return downloadSchemes; },cd00922725986aab5d804c82ad9521fc23273d9a,getDownloadSchemes(),34466,28,37
41743,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_ReviewedPanels.java,5.0,"public void setReviewedByCurrentUser(boolean reviewed) { if ((fileList) != null) { fileList.updateReviewedStatus(patchKey, reviewed); } PatchUtil.DETAIL_SVC.setReviewedByCurrentUser(patchKey, reviewed, new com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public void onFailure(java.lang.Throwable arg0) { } @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.common.VoidResult result) { } }); }",a64c9b55ab303321a026ba14896c3cf97e480034,"public void setReviewedByCurrentUser(boolean reviewed) { if ((fileList) != null) { fileList.updateReviewedStatus(patchKey, reviewed); } com.google.gerrit.client.patches.ReviewedPanels.MarkReviewedInput in = com.google.gerrit.client.patches.ReviewedPanels.MarkReviewedInput.create(); in.reviewed(reviewed); com.google.gerrit.reviewdb.client.PatchSet.Id ps = patchKey.getParentKey(); new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(ps.getParentKey().get()).view(""revisions"").id(ps.get()).view(""files"").id(patchKey.getFileName()).view(""reviewed"").post(in, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onFailure(java.lang.Throwable arg0) { } @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { } }); }",dae79df1b006b3356cdc95ccd25053604dbf41bd,setReviewedByCurrentUser(boolean),setReviewedByCurrentUser(boolean),5,3,"public void setReviewedByCurrentUser(boolean reviewed) { if ((fileList) != null) { fileList.updateReviewedStatus(patchKey, reviewed); } com.google.gerrit.reviewdb.client.PatchSet.Id ps = patchKey.getParentKey(); com.google.gerrit.client.rpc.RestApi api = new com.google.gerrit.client.rpc.RestApi(""/changes/"").id(ps.getParentKey().get()).view(""revisions"").id(ps.get()).view(""files"").id(patchKey.getFileName()).view(""reviewed""); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onFailure(java.lang.Throwable arg0) { } @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { } }; if (reviewed) { api.put(cb); } else { api.delete(cb); } }",796be23d21be08453e5f20ec8f68fa1ca0b3638e,setReviewedByCurrentUser(boolean),131334,256,262
47941,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfoCache.java,3.0,"private void getImpl(final com.google.gerrit.reviewdb.client.Project.NameKey name, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = cache.get(name.get()); if (e != null) { cb.onSuccess(e); return; } com.google.gerrit.client.projects.ProjectApi.config(name).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = new com.google.gerrit.client.projects.ConfigInfoCache.Entry(result); cache.put(name.get(), e); cb.onSuccess(e); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",835bd8c0af0744c1d609ea898acbae66a21cf478,"private void getImpl(final com.google.gerrit.reviewdb.client.Project.NameKey name, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = cache.get(name.get()); if (e != null) { cb.onSuccess(e); return; } com.google.gerrit.client.projects.ProjectApi.getConfig(name, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = new com.google.gerrit.client.projects.ConfigInfoCache.Entry(result); cache.put(name.get(), e); cb.onSuccess(e); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",7be5b3bd53fac6b905c6f1c20ff8aa6ce4a32a5f,"getImpl(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gwt.user.client.rpc.AsyncCallback)","getImpl(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gwt.user.client.rpc.AsyncCallback)",3,3,"private void getImpl(final java.lang.String name, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry> cb) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = cache.get(name); if (e != null) { cb.onSuccess(e); return; } com.google.gerrit.client.projects.ProjectApi.getConfig(new com.google.gerrit.reviewdb.client.Project.NameKey(name), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { com.google.gerrit.client.projects.ConfigInfoCache.Entry e = new com.google.gerrit.client.projects.ConfigInfoCache.Entry(result); cache.put(name, e); cb.onSuccess(e); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); }",daaa8882ccbfb79f815a083c7fec1ab6052fc875,"getImpl(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",34704,260,263
70416,gerrit-server_src_test_java_com_google_gerrit_server_query_OrPredicateTest.java,0.0,"@org.junit.Test public void testChildrenUnmodifiable() { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""alice""); final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""bob""); final com.google.gerrit.server.query.Predicate<java.lang.String> n = com.google.gerrit.server.query.Predicate.or(a, b); try { n.getChildren().clear(); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren(""clear"", n, of(a, b)); try { n.getChildren().remove(0); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); try { n.getChildren().iterator().remove(); } catch (java.lang.RuntimeException e) { } com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); }",45c8e7a024c534debefce24da1f663585ed10ee3,"@org.junit.Test public void testChildrenUnmodifiable() { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""alice""); final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""bob""); final com.google.gerrit.server.query.Predicate<java.lang.String> n = com.google.gerrit.server.query.Predicate.or(a, b); exception.expect(java.lang.RuntimeException.class); n.getChildren().clear(); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""clear"", n, of(a, b)); exception.expect(java.lang.RuntimeException.class); n.getChildren().remove(0); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); exception.expect(java.lang.RuntimeException.class); n.getChildren().iterator().remove(); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); }",0f3edde4e46d37e355b6394774e4a93cb2d03bf2,testChildrenUnmodifiable(),testChildrenUnmodifiable(),4,0,"@org.junit.Test public void testChildrenUnmodifiable() { final com.google.gerrit.server.query.OrPredicateTest.TestPredicate a = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""alice""); final com.google.gerrit.server.query.OrPredicateTest.TestPredicate b = com.google.gerrit.server.query.OrPredicateTest.f(""author"", ""bob""); final com.google.gerrit.server.query.Predicate<java.lang.String> n = com.google.gerrit.server.query.Predicate.or(a, b); exception.expect(java.lang.UnsupportedOperationException.class); n.getChildren().clear(); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""clear"", n, of(a, b)); exception.expect(java.lang.UnsupportedOperationException.class); n.getChildren().remove(0); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); exception.expect(java.lang.UnsupportedOperationException.class); n.getChildren().iterator().remove(); com.google.gerrit.server.query.OrPredicateTest.assertChildren(""remove(0)"", n, of(a, b)); }",c53fbff15e58be5b7394fec513226c192c2c8c69,testChildrenUnmodifiable(),218863,281,284
63196,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_RebaseDialog.java,,,,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.util.LinkedList<com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion> suggestions = new java.util.LinkedList<com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion>(); for (final com.google.gerrit.client.changes.ChangeInfo ci : changes) { java.lang.String id = java.lang.String.valueOf(ci.legacy_id()); if (id.contains(request.getQuery())) { suggestions.add(new com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion(ci)); } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }",7c47d4540767603fb423ff25935e8874d75afca0,,"onRequestSuggestions(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Callback)",15,2,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.lang.String query = request.getQuery().toLowerCase(); java.util.LinkedList<com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion> suggestions = new java.util.LinkedList<>(); for (final com.google.gerrit.client.changes.ChangeInfo ci : changes) { if (changeId.equals(ci.legacy_id())) { continue; } java.lang.String id = java.lang.String.valueOf(ci.legacy_id().get()); if ((id.contains(query)) || (ci.subject().toLowerCase().contains(query))) { suggestions.add(new com.google.gerrit.client.ui.RebaseDialog.ChangeSuggestion(ci)); if ((suggestions.size()) >= 50) { break; } } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }",7f06716a841fedeb03c217b66af3fc7cff9b61ad,"onRequestSuggestions(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Callback)",113256,200,239
48254,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<com.google.gerrit.common.data.PermissionRule> getRules(java.lang.String permission) { return relevant.getPermission(permission); },c37a33a7b34380468b41ab902ce6595210eb295f,,getRules(java.lang.String),30,22,"private java.util.List<com.google.gerrit.common.data.PermissionRule> access(java.lang.String permissionName, boolean isChangeOwner) { java.util.List<com.google.gerrit.common.data.PermissionRule> rules = effective.get(permissionName); if (rules != null) { return rules; } rules = relevant.getPermission(permissionName); if (rules.isEmpty()) { effective.put(permissionName, rules); return rules; } if ((rules.size()) == 1) { if (!(projectControl.match(rules.get(0), isChangeOwner))) { rules = java.util.Collections.emptyList(); } effective.put(permissionName, rules); return rules; } java.util.List<com.google.gerrit.common.data.PermissionRule> mine = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(rules.size()); for (com.google.gerrit.common.data.PermissionRule rule : rules) { if (projectControl.match(rule, isChangeOwner)) { mine.add(rule); } } if (mine.isEmpty()) { mine = java.util.Collections.emptyList(); } effective.put(permissionName, mine); return mine; }",ba26ee0237a356ff7a7e0425b94f716eef376977,"access(java.lang.String,boolean)",134287,41,279
142232,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,36.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private org.eclipse.jgit.lib.ObjectId createCommit(org.eclipse.jgit.lib.Repository repo, java.lang.String commitMessage) throws java.io.IOException { return createCommit(repo, commitMessage, null); }",44f7b42cc2bc7fe333d6003c49e8c3b99eb2c9ed,,"createCommit(org.eclipse.jgit.lib.Repository,java.lang.String)",4,12,"@org.junit.Test @com.google.gerrit.acceptance.Sandboxed public void blockReviewDbUpdatesOnGroupUpdate() throws java.lang.Exception { assume().that(groupsInNoteDb()).isFalse(); java.lang.String group1 = gApi.groups().create(name(""foo"")).get().id; java.lang.String group2 = gApi.groups().create(name(""bar"")).get().id; cfg.setBoolean(""user"", null, ""blockReviewDbGroupUpdates"", true); try { gApi.groups().id(group1).addGroups(group2); fail(""Expected RestApiException: Updates to groups in ReviewDb are blocked""); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { assertWriteGroupToReviewDbBlockedException(e); } }",ead9317fbc3d25f986c26b1679be74d09b4f90dc,blockReviewDbUpdatesOnGroupUpdate(),66477,53,179
97773,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,78.0,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), capabilityControlFactory, changeControlGenericFactory, notesFactory, changeDataFactory, fillArgs, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, trackingFooters, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts); }",c7cb9ffda25f47f0a343e4071f930e0c84070634,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, capabilityControlFactory, changeControlGenericFactory, notesFactory, changeDataFactory, fillArgs, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, trackingFooters, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts); }",0dc8719c9234a1cd5d528ad4915de5847e3f1612,asUser(com.google.gerrit.server.CurrentUser),asUser(com.google.gerrit.server.CurrentUser),16,80,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, capabilityControlFactory, changeControlGenericFactory, notesFactory, changeDataFactory, fillArgs, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, trackingFooters, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",ae038838c2d3919c8946a3b62bb5c72c39f85c2d,asUser(com.google.gerrit.server.CurrentUser),161084,171,174
70420,gitiles-servlet_src_main_java_com_google_gitiles_GitilesFilter.java,6.0,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",67573378e17d3db5044fc89002eba5b64cbbbca4,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new com.google.gitiles.RepositoryFilter(accessFactory, resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",ca15ccc304b4e858e00744a71903456487aacc45,init(javax.servlet.FilterConfig),init(javax.servlet.FilterConfig),2,6,"@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new com.google.gitiles.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }",3dbf1926727342ef169aa71a6808f977dc59dfd9,init(javax.servlet.FilterConfig),123218,311,308
48530,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentRange.java,,,,public final native int start_ch();,386dc3d99bf1c65b770f0f9f2a6e2da5ad9cbfeb,,start_ch(),6,0,public final native int start_character();,2883b2668f2b45f79dd51244df169ec8a3d313c2,start_character(),143253,8,8
72006,gerrit-server_src_main_java_com_google_gerrit_server_account_GetPreferences.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo nullify(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo p) { p.showSiteHeader = com.google.gerrit.server.account.GetPreferences.b(p.showSiteHeader); p.useFlashClipboard = com.google.gerrit.server.account.GetPreferences.b(p.useFlashClipboard); p.copySelfOnEmail = com.google.gerrit.server.account.GetPreferences.b(p.copySelfOnEmail); p.relativeDateInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.relativeDateInChangeTable); p.legacycidInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.legacycidInChangeTable); p.muteCommonPathPrefixes = com.google.gerrit.server.account.GetPreferences.b(p.muteCommonPathPrefixes); return p; },7508bc8478eea59b9bea06822356ef7e9f45daf3,,nullify(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo),14,9,private static com.google.gerrit.extensions.client.GeneralPreferencesInfo nullify(com.google.gerrit.extensions.client.GeneralPreferencesInfo p) { p.showSiteHeader = com.google.gerrit.server.account.GetPreferences.b(p.showSiteHeader); p.useFlashClipboard = com.google.gerrit.server.account.GetPreferences.b(p.useFlashClipboard); p.relativeDateInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.relativeDateInChangeTable); p.legacycidInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.legacycidInChangeTable); p.muteCommonPathPrefixes = com.google.gerrit.server.account.GetPreferences.b(p.muteCommonPathPrefixes); p.sizeBarInChangeTable = com.google.gerrit.server.account.GetPreferences.b(p.sizeBarInChangeTable); return p; },07efd9b5184f5534de644502d69235cff32dbd04,nullify(com.google.gerrit.extensions.client.GeneralPreferencesInfo),178147,222,222
35810,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchTable.java,22.0,"private com.google.gerrit.client.ui.PatchLink createLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType, com.google.gwtexpui.safehtml.client.SafeHtml before, com.google.gwtexpui.safehtml.client.SafeHtml after) { com.google.gerrit.reviewdb.client.Patch patch = patchList.get(index); if (((listenablePrefs.get().isSkipDeleted()) && (patch.getChangeType().equals(ChangeType.DELETED))) || ((listenablePrefs.get().isSkipUncommented()) && ((patch.getCommentCount()) == 0))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key thisKey = patch.getKey(); com.google.gerrit.client.ui.PatchLink link; if ((patchType == (PatchScreen.Type.SIDE_BY_SIDE)) && ((patch.getPatchType()) == (com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED))) { link = new com.google.gerrit.client.ui.PatchLink.SideBySide("""", base, thisKey, index, detail, this); } else { link = new com.google.gerrit.client.ui.PatchLink.Unified("""", base, thisKey, index, detail, this); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(before); text.append(com.google.gerrit.client.changes.PatchTable.getFileNameOnly(patch)); text.append(after); com.google.gwtexpui.safehtml.client.SafeHtml.set(link, text); return link; }",2d30bedb902ec23b9d4cb09722d36eee4e9a3b73,"public com.google.gerrit.client.ui.PatchLink createLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType, com.google.gwtexpui.safehtml.client.SafeHtml before, com.google.gwtexpui.safehtml.client.SafeHtml after) { com.google.gerrit.reviewdb.client.Patch patch = patchList.get(index); com.google.gerrit.reviewdb.client.Patch.Key thisKey = patch.getKey(); com.google.gerrit.client.ui.PatchLink link; if ((patchType == (PatchScreen.Type.SIDE_BY_SIDE)) && ((patch.getPatchType()) == (com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED))) { link = new com.google.gerrit.client.ui.PatchLink.SideBySide("""", base, thisKey, index, detail, this); } else { link = new com.google.gerrit.client.ui.PatchLink.Unified("""", base, thisKey, index, detail, this); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(before); text.append(com.google.gerrit.client.changes.PatchTable.getFileNameOnly(patch)); text.append(after); com.google.gwtexpui.safehtml.client.SafeHtml.set(link, text); return link; }",cbea75c029a3910e22feb570ce4360aa12b230f0,"createLink(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gwtexpui.safehtml.client.SafeHtml,com.google.gwtexpui.safehtml.client.SafeHtml)","createLink(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gwtexpui.safehtml.client.SafeHtml,com.google.gwtexpui.safehtml.client.SafeHtml)",2,13,"private com.google.gerrit.client.ui.PatchLink createLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType, com.google.gwtexpui.safehtml.client.SafeHtml before, com.google.gwtexpui.safehtml.client.SafeHtml after) { com.google.gerrit.reviewdb.client.Patch patch = patchList.get(index); com.google.gerrit.reviewdb.client.Patch.Key thisKey = patch.getKey(); com.google.gerrit.client.ui.PatchLink link; if ((patchType == (PatchScreen.Type.SIDE_BY_SIDE)) && ((patch.getPatchType()) == (com.google.gerrit.reviewdb.client.Patch.PatchType.UNIFIED))) { link = new com.google.gerrit.client.ui.PatchLink.SideBySide("""", base, thisKey, index, detail, this); } else { link = new com.google.gerrit.client.ui.PatchLink.Unified("""", base, thisKey, index, detail, this); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(before); text.append(com.google.gerrit.client.changes.PatchTable.getFileNameOnly(patch)); text.append(after); com.google.gwtexpui.safehtml.client.SafeHtml.set(link, text); return link; }",fcf1f771a6541be66bb4f97387108291c52f7fd0,"createLink(int,com.google.gerrit.client.patches.PatchScreen$Type,com.google.gwtexpui.safehtml.client.SafeHtml,com.google.gwtexpui.safehtml.client.SafeHtml)",1761,349,349
13329,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,15.0,private java.util.Collection<com.google.gerrit.reviewdb.RefRight> getLocalRights() { return filter(projectControl.getProjectState().getLocalRights()); },bea67a3547cd8bc8f6a1bba46cf78a8e58035170,private java.util.List<com.google.gerrit.reviewdb.RefRight> getLocalRights() { return filter(projectControl.getProjectState().getLocalRights()); },b56257352a3eb77250b6dd2735581d2ac6f1ab62,getLocalRights(),getLocalRights(),3,4,"private java.util.List<com.google.gerrit.reviewdb.RefRight> getLocalRights(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId) { return filter(projectControl.getProjectState().getLocalRights(), actionId); }",20f56cba2ad0bad3bebc066fcd4dcf93208b2677,getLocalRights(com.google.gerrit.reviewdb.ApprovalCategory$Id),129687,41,62
79216,gerrit-pgm_src_main_java_com_google_gerrit_pgm_RebuildNoteDb.java,1.0,"@java.lang.Override public java.lang.Boolean call() { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.pgm.RebuildNoteDb.unwrap(schemaFactory.open())) { return rebuilder.rebuildProject(db, changesByProject, project, allUsersRepo); } catch (java.lang.Exception e) { com.google.gerrit.pgm.RebuildNoteDb.log.error((""Error rebuilding project "" + project), e); return false; } }",373a7357ca87891a36323bb9881fa19230357038,"@java.lang.Override public java.lang.Boolean call() { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(schemaFactory.open())) { return rebuilder.rebuildProject(db, changesByProject, project, allUsersRepo); } catch (java.lang.Exception e) { com.google.gerrit.pgm.RebuildNoteDb.log.error((""Error rebuilding project "" + project), e); return false; } }",5fc6c5b3e4d7bf0d03d80cbb26fff97d3afe3644,call(),call(),9,1,"@java.lang.Override public java.lang.Boolean call() { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schemaFactory.open())) { return rebuilder.rebuildProject(db, changesByProject, project, allUsersRepo); } catch (java.lang.Exception e) { com.google.gerrit.pgm.RebuildNoteDb.log.error((""Error rebuilding project "" + project), e); return false; } }",1779ed0ddc378049b3fce42f5a0c617694ac6916,call(),51270,124,107
46261,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_MergeCommitValidationListener.java,,,,"public void onPreMergeCommit(final com.google.gerrit.server.git.CodeReviewCommit commit, final com.google.gerrit.server.project.ProjectState destProject, final com.google.gerrit.reviewdb.client.Branch.NameKey destBranch) throws com.google.gerrit.server.git.validators.MergeCommitValidationException;",c56fb6ed2803369eb1d230dfe0b4eec3505158ae,,"onPreMergeCommit(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.project.ProjectState,com.google.gerrit.reviewdb.client.Branch$NameKey)",9,0,"public void onPreMerge(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.project.ProjectState destProject, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) throws com.google.gerrit.server.git.validators.MergeValidationException;",4658bd29dc07118363ac35ee817842b1c32bc7f1,"onPreMerge(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.project.ProjectState,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.reviewdb.client.PatchSet$Id)",124507,82,110
78821,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByCherryPickIT.java,4.0,"@org.junit.Test public void submitWithCherryPickIfFastForwardPossible() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertCherryPick(testRepo, false); assertThat(getRemoteHead().getParent(0)).isEqualTo(change.getCommit().getParent(0)); }",4f8935a3bf62c5f594ac3937ba8ac172b1fee558,"@org.junit.Test public void submitWithCherryPickIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertCherryPick(testRepo, false); org.eclipse.jgit.revwalk.RevCommit newHead = getRemoteHead(); assertThat(newHead.getParent(0)).isEqualTo(change.getCommit().getParent(0)); assertRefUpdatedEvents(initialHead, newHead); assertChangeMergedEvents(1); }",c64fbd6ece64cfce3200ec9d643379f6acd8258c,submitWithCherryPickIfFastForwardPossible(),submitWithCherryPickIfFastForwardPossible(),6,4,"@org.junit.Test public void submitWithCherryPickIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertCherryPick(testRepo, false); org.eclipse.jgit.revwalk.RevCommit newHead = getRemoteHead(); assertThat(newHead.getParent(0)).isEqualTo(change.getCommit().getParent(0)); assertRefUpdatedEvents(initialHead, newHead); assertChangeMergedEvents(change.getChangeId(), newHead.name()); }",dff29c8e6c6bb452d9bf3990ae51f972ebf52226,submitWithCherryPickIfFastForwardPossible(),61859,135,146
143410,javatests_com_google_gerrit_server_git_ProjectConfigTest.java,17.0,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = util.commit(util.tree(util.file(""groups"", util.blob(com.google.gerrit.server.git.ProjectConfigTest.group(developers))), util.file(""project.config"", util.blob(((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n""))))); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",19673037b7cf0f8375a1c6cc2c3a280cd7db8240,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", ((("""" + (""[plugin \""somePlugin\""]\n"" + ""key1 = "")) + (developers.toConfigValue())) + ""\n"")).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",5671cfc48b535122261c1e252c8e8ecb7ea58717,readPluginConfigGroupReference(),readPluginConfigGroupReference(),3,18,"@org.junit.Test public void readPluginConfigGroupReference() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add(""groups"", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add(""project.config"", (""[plugin \""somePlugin\""]\nkey1 = "" + (developers.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); com.google.gerrit.server.config.PluginConfig pluginCfg = cfg.getPluginConfig(""somePlugin""); assertThat(pluginCfg.getNames().size()).isEqualTo(1); assertThat(pluginCfg.getGroupReference(""key1"")).isEqualTo(developers); }",084d5ff5e8518eb0a3d4aa2003ccd26b2e076cc2,readPluginConfigGroupReference(),94185,184,172
61802,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_account_CapabilitiesIT.java,1.0,"private void grantAllCapabilities() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allProjects); md.setMessage(""Make super user""); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (java.lang.String c : com.google.gerrit.common.data.GlobalCapability.getAllNames()) { if (com.google.gerrit.acceptance.rest.account.ADMINISTRATE_SERVER.equals(c)) { continue; } com.google.gerrit.common.data.Permission p = s.getPermission(c, true); p.add(new com.google.gerrit.common.data.PermissionRule(config.resolve(com.google.gerrit.server.group.SystemGroupBackend.getGroup(SystemGroupBackend.REGISTERED_USERS)))); } config.commit(md); projectCache.evict(config.getProject()); }",d631f9ae70bb4e54aeecaa26bc9f617e393c0cfb,"private void grantAllCapabilitiesExceptAdministrateServerAndPriority() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allProjects); md.setMessage(""Make super user""); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (java.lang.String c : com.google.gerrit.common.data.GlobalCapability.getAllNames()) { if ((com.google.gerrit.acceptance.rest.account.ADMINISTRATE_SERVER.equals(c)) || (com.google.gerrit.acceptance.rest.account.PRIORITY.equals(c))) { continue; } com.google.gerrit.common.data.Permission p = s.getPermission(c, true); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(config.resolve(com.google.gerrit.server.group.SystemGroupBackend.getGroup(SystemGroupBackend.REGISTERED_USERS))); if (com.google.gerrit.common.data.GlobalCapability.hasRange(c)) { com.google.gerrit.common.data.PermissionRange.WithDefaults range = com.google.gerrit.common.data.GlobalCapability.getRange(c); if (range != null) { rule.setRange(range.getDefaultMin(), range.getDefaultMax()); } } p.add(rule); } config.commit(md); projectCache.evict(config.getProject()); }",15dc053c9fba8c7295567e21da360078087db656,grantAllCapabilities(),grantAllCapabilitiesExceptAdministrateServerAndPriority(),3,1,"private void grantAllCapabilities() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(allProjects); md.setMessage(""Make super user""); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection s = config.getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (java.lang.String c : com.google.gerrit.common.data.GlobalCapability.getAllNames()) { if ((com.google.gerrit.acceptance.rest.account.ADMINISTRATE_SERVER.equals(c)) || (com.google.gerrit.acceptance.rest.account.PRIORITY.equals(c))) { continue; } com.google.gerrit.common.data.Permission p = s.getPermission(c, true); com.google.gerrit.common.data.PermissionRule rule = new com.google.gerrit.common.data.PermissionRule(config.resolve(com.google.gerrit.server.group.SystemGroupBackend.getGroup(SystemGroupBackend.REGISTERED_USERS))); if (com.google.gerrit.common.data.GlobalCapability.hasRange(c)) { com.google.gerrit.common.data.PermissionRange.WithDefaults range = com.google.gerrit.common.data.GlobalCapability.getRange(c); if (range != null) { rule.setRange(range.getDefaultMin(), range.getDefaultMax()); } } p.add(rule); } config.commit(md); projectCache.evict(config.getProject()); }",a9b06cc7b04d4c36acf231fb1015827d1447fa14,grantAllCapabilities(),71467,399,392
38980,gerrit-gwtui_src_main_java_com_google_gerrit_client_GerritCss.java,83.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String filterLabel();,8ecaeac888f825e3d61249bc8dbaac90ae13eff3,,filterLabel(),5,23,java.lang.String projectFilterLabel();,b831bfd704a2018761fb39a9566f11b08cc02ae4,projectFilterLabel(),198831,8,9
53682,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_OverviewBar.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gwt.uibinder.client.UiHandler(""viewport"") void onMouseDown(com.google.gwt.event.dom.client.MouseDownEvent e) { if ((cmB) != null) { dragging = true; ratio = ratio(cmB.getScrollInfo()); startY = e.getY(); com.google.gwt.user.client.DOM.setCapture(viewport.getElement()); } }",3d2d31ac2a7e281ee3894ba291adbfbd27eb4aaf,,onMouseDown(com.google.gwt.event.dom.client.MouseDownEvent),5,9,"@com.google.gwt.uibinder.client.UiHandler(""viewport"") void onMouseDown(com.google.gwt.event.dom.client.MouseDownEvent e) { if ((cmB) != null) { dragging = true; ratio = ratio(cmB.getScrollInfo()); startY = e.getY(); viewport.addStyleName(style.viewportDrag()); com.google.gwt.user.client.DOM.setCapture(viewport.getElement()); e.preventDefault(); e.stopPropagation(); } }",795287391198b87d292df06f16e2c6caa746b6a7,onMouseDown(com.google.gwt.event.dom.client.MouseDownEvent),173727,94,112
89132,gerrit-server_src_main_java_com_google_gerrit_server_change_SetHashtagsOp.java,0.0,"private void addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); appendHashtagMessage(msg, ""added"", toAdd); appendHashtagMessage(msg, ""removed"", toRemove); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }",a1630236589620d6368d5c3584855fd2ee4d88c5,"private void addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); appendHashtagMessage(msg, ""added"", toAdd); appendHashtagMessage(msg, ""removed"", toRemove); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString(), ChangeMessagesUtil.SET_HASHTAGS_OP); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }",2ee5c79761b61f40da34bb9fb2ace8133f96a3e3,"addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate)","addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate)",11,0,"private void addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); appendHashtagMessage(msg, ""added"", toAdd); appendHashtagMessage(msg, ""removed"", toRemove); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString(), ChangeMessagesUtil.TAG_SET_HASHTAGS); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }",17aee78876efe86b994555355a3cb747ab889cd4,"addMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate)",73691,163,163
9085,src_main_java_com_google_gerrit_server_patch_PatchDetailServiceImpl.java,17.0,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.PatchLineComment comment = db.patchComments().get(commentKey); if (comment == null) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if (!(com.google.gerrit.client.rpc.Common.getAccountId().equals(comment.getAuthor()))) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if ((comment.getStatus()) != (PatchLineComment.Status.DRAFT)) { throw new com.google.gerrit.server.patch.Failure(new java.lang.IllegalStateException(""Comment published"")); } db.patchComments().delete(java.util.Collections.singleton(comment)); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",70f673a76faee4405a5a5ad6c094638dc2d7af3a,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.PatchLineComment comment = db.patchComments().get(commentKey); if (comment == null) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if (!(com.google.gerrit.client.rpc.Common.getAccountId().equals(comment.getAuthor()))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if ((comment.getStatus()) != (PatchLineComment.Status.DRAFT)) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new java.lang.IllegalStateException(""Comment published"")); } db.patchComments().delete(java.util.Collections.singleton(comment)); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",37f75a53b43b1ff90f75ea519114b97df0ca1444,run(com.google.gerrit.client.reviewdb.ReviewDb),run(com.google.gerrit.client.reviewdb.ReviewDb),6,15,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.PatchLineComment comment = db.patchComments().get(commentKey); if (comment == null) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if (!(com.google.gerrit.client.rpc.Common.getAccountId().equals(comment.getAuthor()))) { throw new com.google.gerrit.server.patch.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } if ((comment.getStatus()) != (PatchLineComment.Status.DRAFT)) { throw new com.google.gerrit.server.patch.Failure(new java.lang.IllegalStateException(""Comment published"")); } db.patchComments().delete(java.util.Collections.singleton(comment)); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",70f673a76faee4405a5a5ad6c094638dc2d7af3a,run(com.google.gerrit.client.reviewdb.ReviewDb),193474,280,264
15948,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,0.0,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>> byIdType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>>() {}; core(byIdType, com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.Account.Id>> byUsernameType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.Account.Id>>() {}; core(byUsernameType, com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); } }; }",a27a1db38ac2aab7978e8fcce1d05600ff5bcb2a,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>> byIdType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>>() {}; core(byIdType, com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Name, com.google.gerrit.reviewdb.Account.Id>> byUsernameType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Name, com.google.gerrit.reviewdb.Account.Id>>() {}; core(byUsernameType, com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); } }; }",c0bfe4b97bfe5f8f4395c475af6ab9dc4166493a,module(),module(),9,0,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>> byIdType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Id, com.google.gerrit.server.account.AccountState>>() {}; core(byIdType, com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Username, com.google.gerrit.reviewdb.Account.Id>> byUsernameType = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.Account.Username, com.google.gerrit.reviewdb.Account.Id>>() {}; core(byUsernameType, com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME).populateWith(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); } }; }",3c072fdecd38e4afd49c1381e4d68641982c1a4b,module(),52659,412,412
70662,gerrit-server_src_main_java_com_google_gerrit_server_config_DownloadConfig.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static boolean isCoreScheme(java.lang.String s) { try { java.lang.reflect.Field f = com.google.gerrit.reviewdb.client.CoreDownloadSchemes.class.getField(s.toUpperCase()); int m = ((java.lang.reflect.Modifier.PUBLIC) | (java.lang.reflect.Modifier.STATIC)) | (java.lang.reflect.Modifier.FINAL); return (((f.getModifiers()) & m) != 0) && (f.getType().equals(java.lang.String.class)); } catch (java.lang.NoSuchFieldException | java.lang.SecurityException e) { return false; } },1bceea7cea0de10558004f29ebe608e39c692221,,isCoreScheme(java.lang.String),4,3,private static java.lang.String toCoreScheme(java.lang.String s) { try { java.lang.reflect.Field f = com.google.gerrit.reviewdb.client.CoreDownloadSchemes.class.getField(s.toUpperCase()); int m = ((java.lang.reflect.Modifier.PUBLIC) | (java.lang.reflect.Modifier.STATIC)) | (java.lang.reflect.Modifier.FINAL); if ((((f.getModifiers()) & m) == m) && ((f.getType()) == (java.lang.String.class))) { return ((java.lang.String) (f.get(null))); } else { return null; } } catch (java.lang.NoSuchFieldException | java.lang.SecurityException | java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { return null; } },80ceb0c8a61e5dd4ce01ba9d06654d4d1e5e495e,toCoreScheme(java.lang.String),97212,143,188
78433,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,13.0,"@java.lang.Override protected void onLoad(com.google.gerrit.server.notedb.LoadHandle handle) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = handle.id(); if (rev == null) { loadDefaults(); return; } com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change.getId(), rev, handle.walk(), args.noteUtil, args.metrics); state = parser.parseAll(); state.copyColumnsTo(change); revisionNoteMap = parser.getRevisionNoteMap(); }",e22895397aaab41f9c4d60c079cf6ce1f81851c3,"@java.lang.Override protected void onLoad(com.google.gerrit.server.notedb.LoadHandle handle) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = handle.id(); if (rev == null) { loadDefaults(); return; } com.google.gerrit.server.notedb.ChangeNoteCache.Value v = args.cache.get().get(getProjectName(), getChangeId(), rev, handle.walk()); state = v.state(); state.copyColumnsTo(change); revisionNoteMap = v.revisionNoteMap(); }",a1a568424d1e3a67442ce64ba68e460268ffbdf0,onLoad(com.google.gerrit.server.notedb.LoadHandle),onLoad(com.google.gerrit.server.notedb.LoadHandle),5,13,"@java.lang.Override protected void onLoad(com.google.gerrit.server.notedb.LoadHandle handle) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = handle.id(); if (rev == null) { loadDefaults(); return; } com.google.gerrit.server.notedb.ChangeNotesCache.Value v = args.cache.get().get(getProjectName(), getChangeId(), rev, handle.walk()); state = v.state(); state.copyColumnsTo(change); revisionNoteMap = v.revisionNoteMap(); }",3e0e32b37bed5a943428da53a7c8b89f5ddafe5f,onLoad(com.google.gerrit.server.notedb.LoadHandle),8632,141,141
148032,java_com_google_gerrit_server_api_projects_CommitApiImpl.java,0.0,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);,9b184dddad8da1e08396aa3e024aaef3bfb03122,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.restapi.project.CommitResource r);,fc6b4e405255fb83e89c6aabbef4bfe6bc7f401b,create(com.google.gerrit.server.project.CommitResource),create(com.google.gerrit.server.restapi.project.CommitResource),17,1,com.google.gerrit.server.api.projects.CommitApiImpl create(com.google.gerrit.server.project.CommitResource r);,9b184dddad8da1e08396aa3e024aaef3bfb03122,create(com.google.gerrit.server.project.CommitResource),218560,36,33
54067,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void get() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String triplet = ""p~master~"" + (r.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeDescription c = gApi.changes().id(triplet).get(java.util.EnumSet.noneOf(com.google.gerrit.extensions.common.ListChangesOption.class)); assertEquals(triplet, c.id); assertEquals(""p"", c.project); assertEquals(""master"", c.branch); assertEquals(ChangeStatus.NEW, c.status); assertEquals(""test commit"", c.subject); assertEquals(true, c.mergeable); assertEquals(r.getChangeId(), c.changeId); assertEquals(c.created, c.updated); }",5e26908104e9bb535e3a1b899c8a962b5c2caf1c,,get(),8,7,"@org.junit.Test public void get() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String triplet = ""p~master~"" + (r.getChangeId()); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(triplet).get(java.util.EnumSet.noneOf(com.google.gerrit.extensions.common.ListChangesOption.class)); assertEquals(triplet, c.id); assertEquals(""p"", c.project); assertEquals(""master"", c.branch); assertEquals(ChangeStatus.NEW, c.status); assertEquals(""test commit"", c.subject); assertEquals(true, c.mergeable); assertEquals(r.getChangeId(), c.changeId); assertEquals(c.created, c.updated); }",0b96391663ad3675cf838d045ebe237cac3ec20b,get(),205471,223,220
147190,java_com_google_gerrit_server_audit_AuditService.java,3.0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> addedAccounts, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, addedAccounts, groupId, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",8e86ebead554ce482d6cfd32506480ea9e38e3e4,"dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)","dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,com.google.gerrit.reviewdb.client.AccountGroup$Id,java.sql.Timestamp)",7,4,"public void dispatchAddMembers(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> addedMembers, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupMemberAuditEvent event = com.google.gerrit.server.audit.group.GroupMemberAuditEvent.create(actor, updatedGroup, addedMembers, addedOn); auditListener.onAddMembers(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",70198b55abc41ae586670e793c46ca6b8ab31ff1,"dispatchAddMembers(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.reviewdb.client.AccountGroup$UUID,com.google.common.collect.ImmutableSet,java.sql.Timestamp)",118662,172,211
15413,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getWatchedProjects() { if ((watchedProjects) == null) { if ((dbProvider) == null) { throw new com.google.inject.OutOfScopeException(""Not in request scoped user""); } final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> h = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); try { for (com.google.gerrit.reviewdb.AccountProjectWatch projectWatch : dbProvider.get().accountProjectWatches().byAccount(getAccountId()).toList()) { h.add(projectWatch.getProjectNameKey()); } } catch (com.google.inject.ProvisionException e) { com.google.gerrit.server.IdentifiedUser.log.warn(""Cannot query project watches of a user"", e); } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.IdentifiedUser.log.warn(""Cannot query project watches of a user"", e); } watchedProjects = java.util.Collections.unmodifiableSet(h); } return watchedProjects; }",1236832cc1763b8d3f1b1c25c6123a710f68b16c,,getWatchedProjects(),4,4,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getWatchedProjects() { if ((watchedProjects) == null) { if ((dbProvider) == null) { throw new com.google.inject.OutOfScopeException(""Not in request scoped user""); } final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> h = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); try { for (com.google.gerrit.reviewdb.AccountProjectWatch projectWatch : dbProvider.get().accountProjectWatches().byAccount(getAccountId())) { h.add(projectWatch.getProjectNameKey()); } } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.IdentifiedUser.log.warn(""Cannot query project watches of a user"", e); } watchedProjects = java.util.Collections.unmodifiableSet(h); } return watchedProjects; }",0615dbd4a6cb92027f119b2553167ba46bebb952,getWatchedProjects(),27799,285,240
106453,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIdIT.java,,,,"@org.junit.Test public void wrongProjectInProjectChangeIdReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); exception.expectMessage((""Not found: unknown/ /"" + (changeInfo._number))); gApi.changes().id(""unknown"", changeInfo._number); }",750f803d7b3aac7f67b34a926cfc5d7b03d5307f,,wrongProjectInProjectChangeIdReturnsNotFound(),4,0,"@org.junit.Test public void wrongProjectInProjectChangeNumberReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); exception.expectMessage((""Not found: unknown~"" + (changeInfo._number))); gApi.changes().id(""unknown"", changeInfo._number); }",2b8fdce10f8e6fd233d4a041869e4f7bb0aa189b,wrongProjectInProjectChangeNumberReturnsNotFound(),175392,84,83
148470,java_com_google_gerrit_server_account_externalids_ExternalIdNotes.java,,,,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteData = noteMap.get(noteId); byte[] raw = rw.getObjectReader().open(noteData, com.google.gerrit.server.account.externalids.OBJ_BLOB).getCachedBytes(com.google.gerrit.server.account.externalids.ExternalIdNotes.MAX_NOTE_SZ); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteData); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",14b6261b765c519f9794e11c24b0e41e79a2e697,,"remove(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.notes.NoteMap,com.google.gerrit.server.account.externalids.ExternalId$Key,com.google.gerrit.reviewdb.client.Account$Id)",9,24,"private static com.google.gerrit.server.account.externalids.ExternalId remove(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.server.account.externalids.ExternalId.Key extIdKey, com.google.gerrit.reviewdb.client.Account.Id expectedAccountId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId noteId = extIdKey.sha1(); if (!(noteMap.contains(noteId))) { return null; } org.eclipse.jgit.lib.ObjectId noteDataId = noteMap.get(noteId); byte[] raw = com.google.gerrit.server.account.externalids.ExternalIdNotes.readNoteData(rw, noteDataId); com.google.gerrit.server.account.externalids.ExternalId extId = com.google.gerrit.server.account.externalids.ExternalId.parse(noteId.name(), raw, noteDataId); if (expectedAccountId != null) { checkState(expectedAccountId.equals(extId.accountId()), (""external id %s should be removed for account %s,"" + "" but external id belongs to account %s""), extIdKey.get(), expectedAccountId.get(), extId.accountId().get()); } noteMap.remove(noteId); return extId; }",d31537d22f1626217179aa96005398bae7e14084,"remove(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.notes.NoteMap,com.google.gerrit.server.account.externalids.ExternalId$Key,com.google.gerrit.reviewdb.client.Account$Id)",167297,351,325
124690,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_CheckAccessIT.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase newTestInput(java.lang.String mail, java.lang.String project, java.lang.String ref, int want) { com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase tc = new com.google.gerrit.acceptance.rest.project.CheckAccessIT.TestCase(); tc.input = new com.google.gerrit.extensions.api.config.AccessCheckInput(mail, ref); tc.project = project; tc.want = want; return tc; }",c1af4b844b51d52f5c1e8729cec74de3fd4902ed,,"newTestInput(java.lang.String,java.lang.String,java.lang.String,int)",21,3,"@org.junit.Test public void nonexistentEmail() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.UnprocessableEntityException.class); exception.expectMessage(""cannot find account doesnotexist@invalid.com""); gApi.projects().name(normalProject.get()).checkAccess(new com.google.gerrit.extensions.api.config.AccessCheckInput(""doesnotexist@invalid.com"", null)); }",4a2a72162d400f0ab8f37221ad8850a8b37e7731,nonexistentEmail(),213558,133,104
16019,gerrit-server_src_main_java_com_google_gerrit_server_mail_ChangeEmail.java,5.0,"protected java.lang.String getChangeMessageThreadId() { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append('<'); r.append(""gerrit""); r.append('.'); r.append(change.getCreatedOn().getTime()); r.append('.'); r.append(change.getKey().get()); r.append('@'); r.append(getGerritHost()); r.append('>'); return r.toString(); }",fb9f0249546a8a325516fb9003af0c9288cf17a6,"public java.lang.String getChangeMessageThreadId() { return velocify((""<gerrit.${change.createdOn.time}.$change.key.get()"" + ""@$email.gerritHost>"")); }",774e422f3cdf2d758afeeb9811387e79caa2b713,getChangeMessageThreadId(),getChangeMessageThreadId(),3,5,"public java.lang.String getChangeMessageThreadId() throws com.google.gerrit.server.mail.EmailException { return velocify((""<gerrit.${change.createdOn.time}.$change.key.get()"" + ""@$email.gerritHost>"")); }",a81b413969f511d8b42162c7f0c514b8efd04615,getChangeMessageThreadId(),121981,51,65
148033,java_com_google_gerrit_server_project_ListChildProjects.java,2.0,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },542ba619a10bf5463b254b8634416983fac91b84,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjectLister.recursiveChildProjects(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },cfa9393036bea347af600c44581d5e4c3e3e4a24,apply(com.google.gerrit.server.project.ProjectResource),apply(com.google.gerrit.server.project.ProjectResource),10,2,@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.ProjectInfo> apply(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { if (recursive) { return childProjects.list(rsrc.getNameKey()); } return directChildProjects(rsrc.getNameKey()); },d98502126c20a8ed64576576c9fc1bb01554a335,apply(com.google.gerrit.server.project.ProjectResource),110575,95,91
53602,gerrit-server_src_main_java_com_google_gerrit_server_ApprovalCopier.java,,,,"private static java.util.Map<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> getPatchSets(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets = cd.patches(); java.util.Map<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.Maps.newHashMapWithExpectedSize(patchSets.size()); for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { result.put(ps.getId().get(), ps); } return result; }",c0c795cd09c898615c758a6717388e2fba8add6e,,getPatchSets(com.google.gerrit.server.query.change.ChangeData),6,1,"private static java.util.TreeMap<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> getPatchSets(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets = cd.patches(); java.util.TreeMap<java.lang.Integer, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.Maps.newTreeMap(); for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { result.put(ps.getId().get(), ps); } return result; }",440888c4f02a553660fad0440db518b88b3c1065,getPatchSets(com.google.gerrit.server.query.change.ChangeData),76668,187,180
61661,src_main_java_com_googlesource_gerrit_plugins_reviewers_client_AddReviewersScreen.java,,,,"void doSave(com.googlesource.gerrit.plugins.reviewers.client.Action action, com.googlesource.gerrit.plugins.reviewers.client.AddReviewersScreen.ReviewerEntry entry) { com.googlesource.gerrit.plugins.reviewers.client.Input in = com.googlesource.gerrit.plugins.reviewers.client.Input.create(); in.setAction(action); in.setFilter(entry.filter); in.setReviewer(entry.reviewer); reset(); new com.google.gerrit.plugin.client.rpc.RestApi(""projects"").id(this.projectName).view(""reviewers"").put(in, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection> result) { display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",60deacb4a2765c17261b2f8f8530a6a4ce3b56dd,,"doSave(com.googlesource.gerrit.plugins.reviewers.client.Action,com.googlesource.gerrit.plugins.reviewers.client.AddReviewersScreen$ReviewerEntry)",3,4,"void doSave(com.googlesource.gerrit.plugins.reviewers.client.Action action, com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen.ReviewerEntry entry) { com.googlesource.gerrit.plugins.reviewers.client.ChangeReviewersInput in = com.googlesource.gerrit.plugins.reviewers.client.ChangeReviewersInput.create(); in.setAction(action); in.setFilter(entry.filter); in.setReviewer(entry.reviewer); reset(); new com.google.gerrit.plugin.client.rpc.RestApi(""projects"").id(projectName).view(""reviewers"").put(in, new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.googlesource.gerrit.plugins.reviewers.client.ReviewerFilterSection> result) { display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); }",2cbd5fb8765a3b9ff44b815d690fd0debf12c0c2,"doSave(com.googlesource.gerrit.plugins.reviewers.client.Action,com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen$ReviewerEntry)",183203,274,277
165336,javatests_com_google_gerrit_acceptance_api_accounts_AccountIndexerIT.java,,,,"@org.junit.Test public void indexingUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountSates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountSates).hasSize(1); assertThat(matchedAccountSates.get(0).getAccount().getId()).isEqualTo(accountId); }",2a98e5d5a470192306c2703a3b13293d63f79ea1,,indexingUpdatesTheIndex(),6,9,"@org.junit.Test public void indexingUpdatesTheIndex() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = createAccount(""foo""); java.lang.String preferredEmail = ""foo@example.com""; updateAccountWithoutCacheOrIndex(accountId, com.google.gerrit.acceptance.api.accounts.AccountIndexerIT.newAccountUpdate().setPreferredEmail(preferredEmail).build()); assertThat(accountQueryProvider.get().byPreferredEmail(preferredEmail)).isEmpty(); accountIndexer.index(accountId); java.util.List<com.google.gerrit.server.account.AccountState> matchedAccountStates = accountQueryProvider.get().byPreferredEmail(preferredEmail); assertThat(matchedAccountStates).hasSize(1); assertThat(matchedAccountStates.get(0).getAccount().getId()).isEqualTo(accountId); }",e8c50658f17bddab01a92b73e574449869b30499,indexingUpdatesTheIndex(),120982,189,186
152375,java_com_google_gerrit_server_update_RetryHelper.java,15.0,"private <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Throwable { com.google.gerrit.server.update.RetryHelper.MetricListener listener = new com.google.gerrit.server.update.RetryHelper.MetricListener(); try { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(opts, exceptionPredicate); retryerBuilder.withRetryListener(listener); return execute(actionType, action, retryerBuilder.build()); } finally { metrics.attemptCounts.record(actionType, listener.getAttemptCount()); } }",4f81c455a9af19aa50e21a4f4b1b3164df204e2a,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Exception { try { return executeWithAttempCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.IllegalStateException(t); } }",78429f8900fbbee4ba4ca85e8cf65dcf74df9fab,"execute(com.google.gerrit.server.update.RetryHelper$ActionType,com.google.gerrit.server.update.RetryHelper$Action,com.google.gerrit.server.update.RetryHelper$Options,com.google.common.base.Predicate)","execute(com.google.gerrit.server.update.RetryHelper$ActionType,com.google.gerrit.server.update.RetryHelper$Action,com.google.gerrit.server.update.RetryHelper$Options,com.google.common.base.Predicate)",7,15,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.gerrit.server.update.RetryHelper.Options opts, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws java.lang.Exception { try { return executeWithAttemptAndTimeoutCount(actionType, action, opts, exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.lang.Exception.class); throw new java.lang.IllegalStateException(t); } }",f8bc6f351aa4d805c91856bf5c798865ca9b0a80,"execute(com.google.gerrit.server.update.RetryHelper$ActionType,com.google.gerrit.server.update.RetryHelper$Action,com.google.gerrit.server.update.RetryHelper$Options,com.google.common.base.Predicate)",180509,173,174
129954,src_main_java_com_ericsson_gerrit_plugins_highavailability_Configuration.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String myUrl() { throw new java.lang.UnsupportedOperationException(""peerInfo.jgroups.myUrl not supported""); }",8a6dfa92dde717d5a8e15c0ba90ebbd41b695058,,myUrl(),5,8,public java.lang.String myUrl() { return myUrl; },9917125c624356f4e9a1758810e3c183e5c30083,myUrl(),1825,31,15
51950,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,33.0,"private void loadConfigInfo(final com.google.gerrit.client.changes.ChangeInfo info) { info.revisions().copyKeysIntoChildren(""name""); final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = resolveRevisionToDisplay(info); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadDiff(rev, com.google.gerrit.client.change.ChangeScreen2.myLastReply(info), group); loadCommit(rev, group); com.google.gerrit.client.changes.RevisionInfoCache.add(changeId, rev); com.google.gerrit.client.projects.ConfigInfoCache.add(info); com.google.gerrit.client.projects.ConfigInfoCache.get(info.project_name_key(), group.add(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); setTheme(result.getTheme()); renderChangeInfo(info); } })); group.done(); }",7e77593e9b55696ff585fa6d70a13f891878c60e,"private void loadConfigInfo(final com.google.gerrit.client.changes.ChangeInfo info, final int base) { info.revisions().copyKeysIntoChildren(""name""); final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = resolveRevisionToDisplay(info); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadDiff(rev, com.google.gerrit.client.change.ChangeScreen2.myLastReply(info), group, base); loadCommit(rev, group); com.google.gerrit.client.changes.RevisionInfoCache.add(changeId, rev); com.google.gerrit.client.projects.ConfigInfoCache.add(info); com.google.gerrit.client.projects.ConfigInfoCache.get(info.project_name_key(), group.addFinal(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); setTheme(result.getTheme()); if (!(loaded)) { renderChangeInfo(info); } loaded = true; } })); }",e4ff4a1264fb1e289d09b1f0a281514ce53680bc,loadConfigInfo(com.google.gerrit.client.changes.ChangeInfo),"loadConfigInfo(com.google.gerrit.client.changes.ChangeInfo,int)",5,19,"private void loadConfigInfo(final com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String base) { info.revisions().copyKeysIntoChildren(""name""); final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = resolveRevisionToDisplay(info); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadDiff(info.revisions().get(base), rev, com.google.gerrit.client.change.ChangeScreen2.myLastReply(info), group); loadCommit(rev, group); if (loaded) { group.done(); return; } com.google.gerrit.client.changes.RevisionInfoCache.add(changeId, rev); com.google.gerrit.client.projects.ConfigInfoCache.add(info); com.google.gerrit.client.projects.ConfigInfoCache.get(info.project_name_key(), group.addFinal(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { loaded = true; commentLinkProcessor = result.getCommentLinkProcessor(); setTheme(result.getTheme()); renderChangeInfo(info); } })); }",cad64a6b41373e98a3c827d06f96fc15aeaf1cd1,"loadConfigInfo(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",172671,310,327
85890,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,11.0,"public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> validateForGerritCommits(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationListener> validators = new java.util.LinkedList<>(); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl)); if ((com.google.gerrit.server.util.MagicBranch.isMagicBranch(receiveEvent.command.getRefName())) || (ReceiveCommits.NEW_PATCHSET.matcher(receiveEvent.command.getRefName()).matches())) { validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo)); } validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(commitValidationListeners)); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.LinkedList<>(); try { for (com.google.gerrit.server.git.validators.CommitValidationListener commitValidator : validators) { messages.addAll(commitValidator.onCommitReceived(receiveEvent)); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { messages.addAll(e.getMessages()); throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage(), messages); } return messages; }",2cc4c050c6fea869d5b9a617beebecf68d35e05d,"public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> validateForGerritCommits(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationListener> validators = new java.util.LinkedList<>(); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(refControl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(refControl, gerritIdent)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(refControl, canonicalWebUrl)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(refControl)); if (shouldValidateChangeId(receiveEvent)) { validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refControl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo)); } validators.add(new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refControl, repo, allUsers)); validators.add(new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(commitValidationListeners)); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.LinkedList<>(); try { for (com.google.gerrit.server.git.validators.CommitValidationListener commitValidator : validators) { messages.addAll(commitValidator.onCommitReceived(receiveEvent)); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { messages.addAll(e.getMessages()); throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage(), messages); } return messages; }",e736ccec6edc6bf99ac32fcaff67fe257146d267,validateForGerritCommits(com.google.gerrit.server.events.CommitReceivedEvent),validateForGerritCommits(com.google.gerrit.server.events.CommitReceivedEvent),10,11,"public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> validate(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = new java.util.LinkedList<>(); try { for (com.google.gerrit.server.git.validators.CommitValidationListener commitValidator : validators) { messages.addAll(commitValidator.onCommitReceived(receiveEvent)); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { messages.addAll(e.getMessages()); throw new com.google.gerrit.server.git.validators.CommitValidationException(e.getMessage(), messages); } return messages; }",9acd378a785be18d621adcccf6288784c5aeb401,validate(com.google.gerrit.server.events.CommitReceivedEvent),156587,500,202
49829,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,1.0,@org.junit.Before public final void beforeTest() throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start(); server.getTestInjector().injectMembers(this); },260687cd5a8f37fd81f9a4b20b2fe3b2c701c87d,@org.junit.Before public final void beforeTest() throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start(getBaseConfig()); server.getTestInjector().injectMembers(this); },d2b2f800fd95c244f525ae483816e05923ae1cd2,beforeTest(),beforeTest(),7,2,private void beforeTest(org.eclipse.jgit.lib.Config cfg) throws java.lang.Exception { server = com.google.gerrit.acceptance.GerritServer.start(cfg); server.getTestInjector().injectMembers(this); },f720cc38d846f984721647439047d3a3dd8dad53,beforeTest(org.eclipse.jgit.lib.Config),192797,53,57
107650,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,6.0,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME, Account.Id.class, com.google.gerrit.server.account.AccountState.class).loader(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); }",d79c83933dd2ce81aafdce17ba116c1905ea3bf2,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME, com.google.gerrit.reviewdb.client.Account.Id.class, com.google.gerrit.server.account.AccountState.class).loader(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader((useReviewdb ? com.google.gerrit.server.account.AccountCacheImpl.ByNameReviewDbLoader.class : com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class)); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); }",bd36ebb55028168096fc85b7913725e4a03f8b17,configure(),configure(),2,6,"@java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.AccountCacheImpl.BYID_NAME, Account.Id.class, com.google.gerrit.server.account.AccountState.class).loader(com.google.gerrit.server.account.AccountCacheImpl.ByIdLoader.class); cache(com.google.gerrit.server.account.AccountCacheImpl.BYUSER_NAME, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader((useReviewdb ? com.google.gerrit.server.account.AccountCacheImpl.ByNameReviewDbLoader.class : com.google.gerrit.server.account.AccountCacheImpl.ByNameLoader.class)); bind(com.google.gerrit.server.account.AccountCacheImpl.class); bind(com.google.gerrit.server.account.AccountCache.class).to(com.google.gerrit.server.account.AccountCacheImpl.class); }",decedd2954779bd10c9b0fefe3ca09025ed4a039,configure(),120529,261,248
73888,gerrit-server_src_main_java_com_google_gerrit_server_change_RebaseChangeEdit.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.RebaseChangeEdit.Rebase.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (!(edit.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""no edit exists for change %s"", rsrc.getChange().getChangeId())); } com.google.gerrit.reviewdb.client.PatchSet current = db.get().patchSets().get(rsrc.getChange().currentPatchSetId()); if (current.getId().equals(edit.get().getBasePatchSet().getId())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""edit for change %s is already on latest patch set: %s"", rsrc.getChange().getChangeId(), current.getId())); } editModifier.rebaseEdit(edit.get(), current); return com.google.gerrit.extensions.restapi.Response.none(); }",1264923e8bf2bb857d47957ec0dd505bd93dd533,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.RebaseChangeEdit.Rebase.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (!(edit.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""no edit exists for change %s"", rsrc.getChange().getChangeId())); } com.google.gerrit.reviewdb.client.PatchSet current = psUtil.latest(db.get(), rsrc.getNotes()); if (current.getId().equals(edit.get().getBasePatchSet().getId())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""edit for change %s is already on latest patch set: %s"", rsrc.getChange().getChangeId(), current.getId())); } editModifier.rebaseEdit(edit.get(), current); return com.google.gerrit.extensions.restapi.Response.none(); }",c864edd2e6e884a80baced0fb0213f9000eb2f5c,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.RebaseChangeEdit$Rebase$Input)","apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.RebaseChangeEdit$Rebase$Input)",4,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.RebaseChangeEdit.Rebase.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (!(edit.isPresent())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""no edit exists for change %s"", rsrc.getChange().getChangeId())); } com.google.gerrit.reviewdb.client.PatchSet current = psUtil.current(db.get(), rsrc.getNotes()); if (current.getId().equals(edit.get().getBasePatchSet().getId())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(java.lang.String.format(""edit for change %s is already on latest patch set: %s"", rsrc.getChange().getChangeId(), current.getId())); } editModifier.rebaseEdit(edit.get(), current); return com.google.gerrit.extensions.restapi.Response.none(); }",9752a2beef050c7577f19e7f0aa8b626e98520df,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.RebaseChangeEdit$Rebase$Input)",7673,356,356
53315,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,101.0,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { diffChunkNav(cm, false).run(); } } }; }",cff8167a44e120be2f9a1829193ba6b6474779a5,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { diffChunkNav(cm, com.google.gerrit.client.diff.SideBySide2.Direction.NEXT).run(); } } }; }",25d86cacf3c4080c9f5f58b6f7e6ff752bde037c,maybeNextVimSearch(net.codemirror.lib.CodeMirror),maybeNextVimSearch(net.codemirror.lib.CodeMirror),3,101,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { diffChunkNav(cm, Direction.NEXT).run(); } } }; }",b8adff8aab7fbfaf47f3c783cb4aea7ff7296281,maybeNextVimSearch(net.codemirror.lib.CodeMirror),108279,111,96
18454,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_AdminMessages.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String newParentProjectFor(java.lang.String project);,611023336542fe37dc0c439795fdadfdcb05a7b2,,newParentProjectFor(java.lang.String),14,1,java.lang.String globalMaxObjectSizeLimit(java.lang.String globalMaxObjectSizeLimit);,d20ddad8cf2229a705075c7806f523e09d036281,globalMaxObjectSizeLimit(java.lang.String),29657,17,22
46081,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,,,,"@java.lang.Override public void update(com.google.gerrit.server.query.change.ChangeData cd) throws java.io.IOException { writer.updateDocument(intTerm(com.google.gerrit.lucene.FIELD_CHANGE, cd.getId().get()), toDocument(cd)); commit(); }",5437106ee02b1455e53307283f9bf1e0fc6cd875,,update(com.google.gerrit.server.query.change.ChangeData),6,17,"@java.lang.Override public void replace(com.google.gerrit.server.query.change.ChangeData cd) throws java.io.IOException { writer.updateDocument(intTerm(com.google.gerrit.lucene.FIELD_CHANGE, cd.getId().get()), toDocument(cd)); commit(); }",589fddb0776ef034b492b82280759596d3e43682,replace(com.google.gerrit.server.query.change.ChangeData),159579,70,70
108610,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexGroupRestApiServlet.java,,,,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); java.lang.String path = req.getPathInfo(); java.lang.String accountGroupId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.parse(accountGroupId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(uuid); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.error(""Unable to update account index"", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",1dff03c9d417a3b968c70df415340c948993757e,,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",6,1,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); java.lang.String path = req.getPathInfo(); java.lang.String accountGroupId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = AccountGroup.UUID.parse(accountGroupId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(uuid); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexGroupRestApiServlet.logger.error(""Unable to update account index"", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",4324b51130225d070bb14fb4b18032a337172cf0,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",185099,308,319
23836,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectState.java,0.0,"public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment() throws com.googlecode.prolog_cafe.compiler.CompileException { com.google.gerrit.rules.PrologEnvironment env = envFactory.create(getClass().getClassLoader()); java.lang.String rules = getConfig().getPrologRules(); if (rules != null) { java.io.PushbackReader in = new java.io.PushbackReader(new java.io.StringReader(rules), com.googlecode.prolog_cafe.lang.Prolog.PUSHBACK_SIZE); com.googlecode.prolog_cafe.lang.JavaObjectTerm streamObject = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(in); if (!(env.execute(Prolog.BUILTIN, ""consult_stream"", com.googlecode.prolog_cafe.lang.SymbolTerm.intern(""rules.pl""), streamObject))) { throw new com.googlecode.prolog_cafe.compiler.CompileException((((""Cannot consult rules.pl "" + (getProject().getName())) + "" "") + (getConfig().getRevision()))); } } return env; }",f1cde1bcfc967f5e719f8c62de2f7b2bb292a6af,"public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment() throws com.googlecode.prolog_cafe.compiler.CompileException { com.google.gerrit.rules.PrologEnvironment env; if ((urlLoader) != null) { env = envFactory.create(urlLoader); return env; } else { env = envFactory.create(getClass().getClassLoader()); } java.lang.String rules = getConfig().getPrologRules(); if (rules != null) { java.io.PushbackReader in = new java.io.PushbackReader(new java.io.StringReader(rules), com.googlecode.prolog_cafe.lang.Prolog.PUSHBACK_SIZE); com.googlecode.prolog_cafe.lang.JavaObjectTerm streamObject = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(in); if (!(env.execute(Prolog.BUILTIN, ""consult_stream"", com.googlecode.prolog_cafe.lang.SymbolTerm.intern(""rules.pl""), streamObject))) { throw new com.googlecode.prolog_cafe.compiler.CompileException((((""Cannot consult rules.pl "" + (getProject().getName())) + "" "") + (getConfig().getRevision()))); } } return env; }",6d82322869275ecb249b7f020864ed32baa0b9fe,newPrologEnvironment(),newPrologEnvironment(),5,3,"public com.google.gerrit.rules.PrologEnvironment newPrologEnvironment() throws com.googlecode.prolog_cafe.compiler.CompileException { if ((ruleLoader) != null) { return envFactory.create(ruleLoader); } com.google.gerrit.rules.PrologEnvironment env = envFactory.create(getClass().getClassLoader()); java.lang.String rules = getConfig().getPrologRules(); if (rules != null) { java.io.PushbackReader in = new java.io.PushbackReader(new java.io.StringReader(rules), com.googlecode.prolog_cafe.lang.Prolog.PUSHBACK_SIZE); com.googlecode.prolog_cafe.lang.JavaObjectTerm streamObject = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(in); if (!(env.execute(Prolog.BUILTIN, ""consult_stream"", com.googlecode.prolog_cafe.lang.SymbolTerm.intern(""rules.pl""), streamObject))) { throw new com.googlecode.prolog_cafe.compiler.CompileException((((""Cannot consult rules.pl "" + (getProject().getName())) + "" "") + (getConfig().getRevision()))); } } return env; }",9aa3ca172288f244475642d0716b66ba3af1c6f6,newPrologEnvironment(),22655,286,277
63403,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DeleteFileAction.java,,,,"public void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(changeId, revision); } deleteBox.clearPath(); final com.google.gwtexpui.user.client.PluginSafePopupPanel p = new com.google.gwtexpui.user.client.PluginSafePopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }",0bed1a98281d23d822da04e617f3aed2c88d2741,,onDelete(),3,0,"void onDelete() { if ((popup) != null) { popup.hide(); return; } if ((deleteBox) == null) { deleteBox = new com.google.gerrit.client.change.DeleteFileBox(changeId, revision); } deleteBox.clearPath(); final com.google.gwtexpui.user.client.PluginSafePopupPanel p = new com.google.gwtexpui.user.client.PluginSafePopupPanel(true); p.setStyleName(style.replyBox()); p.addAutoHidePartner(deleteButton.getElement()); p.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { if ((popup) == p) { popup = null; } } }); p.add(deleteBox); p.showRelativeTo(deleteButton); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(p); deleteBox.setFocus(true); popup = p; }",30c46b44ecf10113fec915c42015ed238ba666a8,onDelete(),20370,269,268
92435,gerrit-server_src_test_java_com_google_gerrit_server_mail_receive_HtmlParserTest.java,,,,"@org.junit.Test public void testSimpleInlineComments() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody(""Looks good to me"", ""I have a comment on this."", null, ""Also have a comment here."", null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, changeURL); assertThat(parsedComments).hasSize(3); assertChangeMessage(""Looks good to me"", parsedComments.get(0)); assertInlineComment(""I have a comment on this."", parsedComments.get(1), comments.get(1)); assertInlineComment(""Also have a comment here."", parsedComments.get(2), comments.get(3)); }",39e2e12effce3f893f72d13f5ec9fcc933cebf1f,,testSimpleInlineComments(),4,1,"@org.junit.Test public void simpleInlineComments() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody(""Looks good to me"", ""I have a comment on this."", null, ""Also have a comment here."", null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, changeURL); assertThat(parsedComments).hasSize(3); assertChangeMessage(""Looks good to me"", parsedComments.get(0)); assertInlineComment(""I have a comment on this."", parsedComments.get(1), comments.get(1)); assertInlineComment(""Also have a comment here."", parsedComments.get(2), comments.get(3)); }",840c4cccddbe626c82106c0c9a53520684211951,simpleInlineComments(),41240,222,221
95837,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,22.0,"@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(true, com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); config = cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); if (!(slave)) { initIndexType(); } sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), config)); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }",45ab8a8f9d32fd4dee8fb721e11254855246b334,"@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(true, com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); config = cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); if (!(slave)) { initIndexType(); } sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), config)); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); sysInjector.getInstance(com.google.gerrit.server.StartupChecks.class).check(); }",2ecc5471b0ea9ce7f1c2de7c011a16f1d795ef61,start(),start(),5,22,"@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(true, com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); config = cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); if (!(slave)) { initIndexType(); } sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), config)); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }",45ab8a8f9d32fd4dee8fb721e11254855246b334,start(),195950,278,257
120592,gerrit-server_src_main_java_com_google_gerrit_server_git_VisibleRefFilter.java,4.0,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); for (com.google.gerrit.server.notedb.ChangeNotes cn : changeNotesFactory.scan(git, db.get(), project)) { if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",5c484fdf98763f0bd78b7934f04fb5b108ce15b2,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); com.google.gerrit.server.notedb.ChangeNotesIterator it = changeNotesFactory.scan(git, db.get(), project); while (it.hasNext()) { com.google.gerrit.server.notedb.ChangeNotes cn = it.next(); if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",465f94c7a462665721fb6e1e501baec97e24cf41,visibleChangesByScan(),visibleChangesByScan(),4,4,"private java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChangesByScan() { com.google.gerrit.reviewdb.client.Project.NameKey project = projectCtl.getProject().getNameKey(); try { java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Branch.NameKey> visibleChanges = new java.util.HashMap<>(); for (com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult r : ((java.lang.Iterable<com.google.gerrit.server.notedb.ChangeNotes.Factory.ChangeNotesResult>) (changeNotesFactory.scan(git, db.get(), project)::iterator))) { if (r.error().isPresent()) { throw new com.google.gwtorm.server.OrmException(r.error().get()); } com.google.gerrit.server.notedb.ChangeNotes cn = r.notes(); if (permissionBackend.user(user).change(cn).database(db).test(ChangePermission.READ)) { visibleChanges.put(cn.getChangeId(), cn.getChange().getDest()); } } return visibleChanges; } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error(((""Cannot load changes for project "" + project) + "", assuming no changes are visible""), e); return java.util.Collections.emptyMap(); } }",7a9bdc383bd7e457542f2683241396e58e9fb5e6,visibleChangesByScan(),32143,328,395
98615,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,55.0,@java.lang.Override public boolean isEmpty() { return (((((((((((((((((((((commitSubject) == null) && (approvals.isEmpty())) && ((changeMessage) == null)) && (comments.isEmpty())) && (reviewers.isEmpty())) && ((changeId) == null)) && ((branch) == null)) && ((status) == null)) && ((submissionId) == null)) && ((submitRecords) == null)) && ((assignee) == null)) && ((hashtags) == null)) && ((topic) == null)) && ((commit) == null)) && ((psState) == null)) && ((groups) == null)) && ((tag) == null)) && ((psDescription) == null)) && (!(currentPatchSet))) && ((readOnlyUntil) == null)) && ((isPrivate) == null); },0f85a3b9cec6a02c9a78abeaa6018dc1b3916642,@java.lang.Override public boolean isEmpty() { return ((((((((((((((((((((((commitSubject) == null) && (approvals.isEmpty())) && ((changeMessage) == null)) && (comments.isEmpty())) && (reviewers.isEmpty())) && ((changeId) == null)) && ((branch) == null)) && ((status) == null)) && ((submissionId) == null)) && ((submitRecords) == null)) && ((assignee) == null)) && ((hashtags) == null)) && ((topic) == null)) && ((commit) == null)) && ((psState) == null)) && ((groups) == null)) && ((tag) == null)) && ((psDescription) == null)) && (!(currentPatchSet))) && ((readOnlyUntil) == null)) && ((isPrivate) == null)) && ((wip) == null); },f717190336d88555665cc6045ad9db6b4b71b1a3,isEmpty(),isEmpty(),43,55,@java.lang.Override public boolean isEmpty() { return (((((((((((((((((((((((commitSubject) == null) && (approvals.isEmpty())) && ((changeMessage) == null)) && (comments.isEmpty())) && (reviewers.isEmpty())) && (reviewersByEmail.isEmpty())) && ((changeId) == null)) && ((branch) == null)) && ((status) == null)) && ((submissionId) == null)) && ((submitRecords) == null)) && ((assignee) == null)) && ((hashtags) == null)) && ((topic) == null)) && ((commit) == null)) && ((psState) == null)) && ((groups) == null)) && ((tag) == null)) && ((psDescription) == null)) && (!(currentPatchSet))) && ((readOnlyUntil) == null)) && ((isPrivate) == null)) && ((workInProgress) == null); },c57d63686835192c946bce900b281574494ab445,isEmpty(),158623,202,213
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,4.0,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",688447b8f951f5a61dc3bbb97e8abb9d959264d0,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, remote, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",17e4d81ee9cc6995f5e6904e0374291e67b8b9b2,noRescheduleOnSuccess(),noRescheduleOnSuccess(),10,4,"@org.junit.Test public void noRescheduleOnSuccess() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.OK_RESULT); task.run(); verifyZeroInteractions(executor); }",01cb890012092fa0010cb1444c49981654b7384a,noRescheduleOnSuccess(),65283,130,73
87093,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RevisionNoteMap.java,2.0,"static com.google.gerrit.server.notedb.RevisionNoteMap parse(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, com.google.gerrit.reviewdb.client.Change.Id changeId, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.RevisionNote> result = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.notedb.RevisionNote rn = new com.google.gerrit.server.notedb.RevisionNote(noteUtil, changeId, reader, note.getData(), status); result.put(new com.google.gerrit.reviewdb.client.RevId(note.name()), rn); } return new com.google.gerrit.server.notedb.RevisionNoteMap(noteMap, com.google.common.collect.ImmutableMap.copyOf(result)); }",029aff9163a6b1567dfed4624efa08caaa48ed5e,"static com.google.gerrit.server.notedb.RevisionNoteMap parse(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, com.google.gerrit.reviewdb.client.Change.Id changeId, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.ChangeRevisionNote> result = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.notedb.ChangeRevisionNote rn = new com.google.gerrit.server.notedb.ChangeRevisionNote(noteUtil, changeId, reader, note.getData(), status); rn.parse(); result.put(new com.google.gerrit.reviewdb.client.RevId(note.name()), rn); } return new com.google.gerrit.server.notedb.RevisionNoteMap(noteMap, com.google.common.collect.ImmutableMap.copyOf(result)); }",e22fdd394e5adfa51666ebe990b761b9e22252f3,"parse(com.google.gerrit.server.notedb.ChangeNoteUtil,com.google.gerrit.reviewdb.client.Change$Id,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.notes.NoteMap,com.google.gerrit.reviewdb.client.PatchLineComment$Status)","parse(com.google.gerrit.server.notedb.ChangeNoteUtil,com.google.gerrit.reviewdb.client.Change$Id,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.notes.NoteMap,com.google.gerrit.reviewdb.client.PatchLineComment$Status)",12,2,"static com.google.gerrit.server.notedb.RevisionNoteMap<com.google.gerrit.server.notedb.ChangeRevisionNote> parse(com.google.gerrit.server.notedb.ChangeNoteUtil noteUtil, com.google.gerrit.reviewdb.client.Change.Id changeId, org.eclipse.jgit.lib.ObjectReader reader, org.eclipse.jgit.notes.NoteMap noteMap, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Map<com.google.gerrit.reviewdb.client.RevId, com.google.gerrit.server.notedb.ChangeRevisionNote> result = new java.util.HashMap<>(); for (org.eclipse.jgit.notes.Note note : noteMap) { com.google.gerrit.server.notedb.ChangeRevisionNote rn = new com.google.gerrit.server.notedb.ChangeRevisionNote(noteUtil, changeId, reader, note.getData(), status); rn.parse(); result.put(new com.google.gerrit.reviewdb.client.RevId(note.name()), rn); } return new com.google.gerrit.server.notedb.RevisionNoteMap(noteMap, com.google.common.collect.ImmutableMap.copyOf(result)); }",9c053e753788330657fc0faed64f7cc5204c9e59,"parse(com.google.gerrit.server.notedb.ChangeNoteUtil,com.google.gerrit.reviewdb.client.Change$Id,org.eclipse.jgit.lib.ObjectReader,org.eclipse.jgit.notes.NoteMap,com.google.gerrit.reviewdb.client.PatchLineComment$Status)",56093,308,325
105856,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsProjectLocks.java,,,,com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsLock> getLock(java.lang.String lockId) { return com.google.common.base.Optional.fromNullable(locks.getIfPresent(lockId)); },345fee6be7c6f0cb5b09ad1cb3938c292cfae549,,getLock(java.lang.String),16,4,java.util.Optional<com.googlesource.gerrit.plugins.lfs.locks.LfsLock> getLock(java.lang.String lockId) { return java.util.Optional.ofNullable(locks.getIfPresent(lockId)); },85f12615ef27201d6032ebafa647dd2e606bed00,getLock(java.lang.String),63707,64,55
61588,gerrit-server_src_main_java_com_google_gerrit_server_change_FileContentUtil.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.lang.String getContentType(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revstr, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.resolve(revstr)); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(rw.getObjectReader(), path, commit.getTree().getId()); if (tw == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return registry.getMimeType(path, com.google.gerrit.server.patch.Text.asByteArray(repo.open(tw.getObjectId(0)))).toString(); } finally { rw.release(); } } finally { repo.close(); } }",8dd501af66f6b2ca6ad7fe0662fada6c3116923d,,"getContentType(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",13,1,"public java.lang.String getContentType(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String revstr, java.lang.String path) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader(); try { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(repo.resolve(revstr)); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(rw.getObjectReader(), path, commit.getTree().getId()); if (tw == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } org.eclipse.jgit.lib.ObjectLoader blobLoader = reader.open(tw.getObjectId(0), com.google.gerrit.server.change.OBJ_BLOB); byte[] raw = (blobLoader.isLarge()) ? null : blobLoader.getCachedBytes(); return registry.getMimeType(path, raw).toString(); } finally { reader.release(); rw.release(); } } finally { repo.close(); } }",6b20f8e7547206476a65f155107daf5253fcae2e,"getContentType(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",14291,266,324
163935,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,10.0,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(""foo"", ""myId"", user.getId())); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",0ff6535e39f761364057e075078c6937502d6428,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); com.google.gerrit.reviewdb.client.AccountExternalId extId = new com.google.gerrit.reviewdb.client.AccountExternalId(user.getId(), new com.google.gerrit.reviewdb.client.AccountExternalId.Key(""foo:myId"")); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); accountCache.evict(user.getId()); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",6103656f0f257d8bc256f73ac257a5f1a8d4b536,addOtherUsersGpgKey_Conflict(),addOtherUsersGpgKey_Conflict(),3,10,"@org.junit.Test public void addOtherUsersGpgKey_Conflict() throws java.lang.Exception { addExternalIdEmail(admin, ""test5@example.com""); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(""foo"", ""myId"", user.getId())); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); addGpgKey(key.getPublicKeyArmored()); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(""GPG key already associated with another account""); addGpgKey(key.getPublicKeyArmored()); }",363e67bd1e93ad2947e65df24a8655b05b107f72,addOtherUsersGpgKey_Conflict(),64597,223,163
68384,src_test_java_com_ericsson_gerrit_plugins_eventslog_SQLStoreTest.java,2.0,"@org.junit.Test(expected = com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException.class) public void throwSQLExceptionIfNotOnline() throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException, java.sql.SQLException { com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); setUpClientMock(); eventsDb.createDBIfNotCreated(); expectLastCall().andThrow(new java.sql.SQLException(new java.net.ConnectException())).once(); eventsDb.queryOne(); expectLastCall().andThrow(new java.sql.SQLException()); easyMock.replayAll(); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); store.start(); store.storeEvent(mockEvent); store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); easyMock.verifyAll(); }",686ba8fb47dd26bdf4974637b57d8c45894c7f42,"@org.junit.Test(expected = com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException.class) public void throwSQLExceptionIfNotOnline() throws com.ericsson.gerrit.plugins.eventslog.EventsLogException, java.sql.SQLException { com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); setUpClientMock(); eventsDb.createDBIfNotCreated(); expectLastCall().andThrow(new java.sql.SQLException(new java.net.ConnectException())).once(); eventsDb.queryOne(); expectLastCall().andThrow(new java.sql.SQLException()); easyMock.replayAll(); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); store.start(); store.storeEvent(mockEvent); store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); easyMock.verifyAll(); }",6eef9a63047e26a6781728249af1a932a8c96377,throwSQLExceptionIfNotOnline(),throwSQLExceptionIfNotOnline(),2,2,"@org.junit.Test(expected = com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException.class) public void throwSQLExceptionIfNotOnline() throws java.lang.Exception { com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); setUpClientMock(); eventsDb.createDBIfNotCreated(); expectLastCall().andThrow(new java.sql.SQLException(new java.net.ConnectException())).once(); eventsDb.queryOne(); expectLastCall().andThrow(new java.sql.SQLException()); easyMock.replayAll(); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); store.start(); store.storeEvent(mockEvent); store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); easyMock.verifyAll(); }",2bcdcbcf39271e7f7d14f6c3dcd9502c08b335d2,throwSQLExceptionIfNotOnline(),120581,257,239
105834,gerrit-server_src_main_java_com_google_gerrit_server_patch_EditTransformer.java,,,,public int getEndB() { return endB; },4937abf16108ad3ef368bcd7ddffafed6b21cd5d,,getEndB(),5,8,public abstract int getEndB();,3d12c5ed3c00af57cbb2139492167817b5186776,getEndB(),199164,12,7
30400,gerrit-gwtui_src_main_java_com_google_gerrit_client_auth_userpass_UserPassSignInDialog.java,13.0,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",30611554e7a3089b0c261849c97ad4d693568ba5,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { final java.lang.String message; switch (result.getError()) { case LDAP_SERVER_UNAVAILABLE : message = Util.C.ldapServerUnavailable(); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } showError(message); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",acd957483afaf6f8c2dffcf8f56583fb0b85b716,onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),4,13,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { final java.lang.String message; switch (result.getError()) { case AUTHENTICATION_UNAVAILABLE : message = Util.M.authenticationUnavailable(result.getAuthType()); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } showError(message); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",c657e4f8c0421f57adc2dffc4971667487710e98,onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),197148,276,280
39475,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_changedetail_ChangeModule.java,0.0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AbandonChangeHandler.Factory.class); factory(AlterTopicHandler.Factory.class); factory(RestoreChangeHandler.Factory.class); factory(RevertChange.Factory.class); factory(RebaseChangeHandler.Factory.class); factory(ChangeDetailFactory.Factory.class); factory(IncludedInDetailFactory.Factory.class); factory(PatchSetDetailFactory.Factory.class); factory(PatchSetPublishDetailFactory.Factory.class); factory(SubmitAction.Factory.class); factory(PublishAction.Factory.class); factory(DeleteDraftChange.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class); },13334ca88f3c3e0a3beb392e57022c4a25095a5b,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AbandonChangeHandler.Factory.class); factory(EditCommitMessageHandler.Factory.class); factory(AlterTopicHandler.Factory.class); factory(RestoreChangeHandler.Factory.class); factory(RevertChange.Factory.class); factory(RebaseChangeHandler.Factory.class); factory(ChangeDetailFactory.Factory.class); factory(IncludedInDetailFactory.Factory.class); factory(PatchSetDetailFactory.Factory.class); factory(PatchSetPublishDetailFactory.Factory.class); factory(SubmitAction.Factory.class); factory(PublishAction.Factory.class); factory(DeleteDraftChange.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class); },4bee10d74490a3752ecb17924c9b7763eb615410,configureServlets(),configureServlets(),11,0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(EditCommitMessageHandler.Factory.class); factory(RestoreChangeHandler.Factory.class); factory(RevertChange.Factory.class); factory(RebaseChangeHandler.Factory.class); factory(ChangeDetailFactory.Factory.class); factory(IncludedInDetailFactory.Factory.class); factory(PatchSetDetailFactory.Factory.class); factory(PatchSetPublishDetailFactory.Factory.class); factory(SubmitAction.Factory.class); factory(PublishAction.Factory.class); factory(DeleteDraftChange.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeDetailServiceImpl.class); rpc(com.google.gerrit.httpd.rpc.changedetail.ChangeManageServiceImpl.class); },9e14e01399a546c4d3c6b362e7ec52ea82e3927e,configureServlets(),28340,225,204
93299,gerrit-server_src_main_java_com_google_gerrit_server_account_ExternalIdCacheImpl.java,,,,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.ExternalIdCacheImpl.CACHE_NAME, com.google.gerrit.server.account.ExternalIdCacheImpl.ListKey.class, new com.google.inject.TypeLiteral<com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountExternalId>>() {}).maximumWeight(1).loader(com.google.gerrit.server.account.ExternalIdCacheImpl.Loader.class); bind(com.google.gerrit.server.account.ExternalIdCacheImpl.class); bind(com.google.gerrit.server.account.ExternalIdCache.class).to(com.google.gerrit.server.account.ExternalIdCacheImpl.class); } }; }",20a6f81e5980289d22711dc4cc6fe7b4b90fa217,,module(),13,0,"public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.account.ExternalIdCacheImpl.CACHE_NAME, com.google.gerrit.server.account.ExternalIdCacheImpl.AllKey.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSetMultimap<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.reviewdb.client.AccountExternalId>>() {}).maximumWeight(1).loader(com.google.gerrit.server.account.ExternalIdCacheImpl.Loader.class); bind(com.google.gerrit.server.account.ExternalIdCacheImpl.class); bind(com.google.gerrit.server.account.ExternalIdCache.class).to(com.google.gerrit.server.account.ExternalIdCacheImpl.class); } }; }",e8fe3cbe63265ad4d580197e643472553dbb0b3c,module(),162047,224,226
62001,gerrit-server_src_test_java_com_google_gerrit_server_change_HashtagsTest.java,,,,"@org.junit.Test public void multipleSameHashtag() { java.lang.String commitMessage = ""#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1""; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet(""#Subject"", ""#Hashtag1"", ""#Hashtag2"")); }",79651debe5a582e664fe418807e44bc79a2bd329,,multipleSameHashtag(),12,2,"@org.junit.Test public void repeatedHashtag() throws java.lang.Exception { java.lang.String commitMessage = ""#Subject\n\n#Hashtag1\n\n#Hashtag2\n\n#Hashtag1""; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet(""Subject"", ""Hashtag1"", ""Hashtag2"")); }",172a72ee45665c074d89578722326f9eb535991d,repeatedHashtag(),122980,101,104
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,4.0,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }",63902abcd822e23b0897513f3613b69fe1472d2f,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid, repository); groupConfig.load(repository, commitId); return groupConfig; }",1bf5f04081063f71d9734cc8d8045bd1ddf12981,"loadForGroupSnapshot(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.AccountGroup$UUID,org.eclipse.jgit.lib.ObjectId)","loadForGroupSnapshot(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.AccountGroup$UUID,org.eclipse.jgit.lib.ObjectId)",9,4,"public static com.google.gerrit.server.group.db.GroupConfig loadForGroupSnapshot(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, org.eclipse.jgit.lib.ObjectId commitId) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(repository, commitId); return groupConfig; }",63902abcd822e23b0897513f3613b69fe1472d2f,"loadForGroupSnapshot(org.eclipse.jgit.lib.Repository,com.google.gerrit.reviewdb.client.AccountGroup$UUID,org.eclipse.jgit.lib.ObjectId)",106919,142,140
52345,gerrit-cache-h2_src_main_java_com_google_gerrit_server_cache_h2_DefaultCacheFactory.java,6.0,"@java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) private static <K, V> com.google.common.cache.CacheBuilder<K, V> newCacheBuilder() { return ((com.google.common.cache.CacheBuilder<K, V>) (com.google.common.cache.CacheBuilder.newBuilder())); }",d0fb32f6a5d828274c535a4d07306138a462de34,"@java.lang.SuppressWarnings({ ""unchecked"" }) private static <K, V> com.google.common.cache.CacheBuilder<K, V> newCacheBuilder() { return ((com.google.common.cache.CacheBuilder<K, V>) (com.google.common.cache.CacheBuilder.newBuilder())); }",17254e0bc671f42a746ebd97fc8109b809e3fc53,newCacheBuilder(),newCacheBuilder(),2,6,"@java.lang.SuppressWarnings(""unchecked"") private static <K, V> com.google.common.cache.CacheBuilder<K, V> newCacheBuilder() { return ((com.google.common.cache.CacheBuilder<K, V>) (com.google.common.cache.CacheBuilder.newBuilder())); }",26533d7c3bc7a1ae623c5c6e56c0bc3cb529e12e,newCacheBuilder(),196424,73,70
65890,lib_prolog_java_BuckPrologCompiler.java,3.0,"public static void main(java.lang.String[] argv) throws com.googlecode.prolog_cafe.compiler.CompileException, java.io.IOException { int i = 0; BuckPrologCompiler.tmpdir = new File(argv[(i++)]); File out = new File(argv[(i++)]); File java = BuckPrologCompiler.tmpdir(""java""); for (; i < (argv.length); i++) { new java.lang.Compiler().prologToJavaSource(argv[i], java.getPath()); } BuckPrologCompiler.jar(out, java); }",062f28d098ddb1ab36b15e917132cbb27ae97221,"public static void main(java.lang.String[] argv) throws com.googlecode.prolog_cafe.lang.CompileException, java.io.IOException { int i = 0; BuckPrologCompiler.tmpdir = new File(argv[(i++)]); File out = new File(argv[(i++)]); File java = BuckPrologCompiler.tmpdir(""java""); for (; i < (argv.length); i++) { new java.lang.Compiler().prologToJavaSource(argv[i], java.getPath()); } BuckPrologCompiler.jar(out, java); }",5ccd22340b87c7ac1089b3ba14c24b32e1026fbf,main(java.lang.String[]),main(java.lang.String[]),5,3,"public static void main(java.lang.String[] argv) throws com.googlecode.prolog_cafe.exceptions.CompileException, java.io.IOException { int i = 0; BuckPrologCompiler.tmpdir = new File(argv[(i++)]); File out = new File(argv[(i++)]); File java = BuckPrologCompiler.tmpdir(""java""); for (; i < (argv.length); i++) { new java.lang.Compiler().prologToJavaSource(argv[i], java.getPath()); } BuckPrologCompiler.jar(out, java); }",17136cfcfdda83f52cbdb868b6ad98d31a9b1cc6,main(java.lang.String[]),62452,127,127
15832,gerrit-common_src_main_java_com_google_gerrit_common_data_GerritConfig.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setDownloadProtocol(final com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl p) { downloadUrl = p; },737e6ba22b71d6d143a1e349948f8511c4ecadd7,,setDownloadProtocol(com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadUrl),3,31,public void setDownloadSchemes(final java.util.Set<com.google.gerrit.reviewdb.AccountGeneralPreferences.DownloadScheme> s) { downloadSchemes = s; },b554f8f1cbf3dbadc108e386c3c1c38f0e8347bb,setDownloadSchemes(java.util.Set),34462,33,44
62517,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_StreamEvents.java,2.0,private void writeEvents() { int processed = 0; while (processed < (com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE)) { if ((java.lang.Thread.interrupted()) || (stdout.checkError())) { hooks.removeChangeListener(listener); flush(); onExit(0); return; } if (dropped) { write(droppedOutputEvent); dropped = false; } final com.google.gerrit.server.events.Event event = poll(); if (event == null) { break; } write(event); processed++; } flush(); if ((com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE) <= processed) { synchronized(taskLock) { task = pool.submit(writer); } } },9465a2d99a1028645ba5ef311bbf90a64bea2df5,private void writeEvents() { int processed = 0; while (processed < (com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE)) { if ((java.lang.Thread.interrupted()) || (stdout.checkError())) { source.removeChangeListener(listener); flush(); onExit(0); return; } if (dropped) { write(droppedOutputEvent); dropped = false; } final com.google.gerrit.server.events.Event event = poll(); if (event == null) { break; } write(event); processed++; } flush(); if ((com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE) <= processed) { synchronized(taskLock) { task = pool.submit(writer); } } },42c9d3f412f016e0d0f23d40c22420ab9ad4a6c2,writeEvents(),writeEvents(),8,2,private void writeEvents() { int processed = 0; while (processed < (com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE)) { if ((java.lang.Thread.interrupted()) || (stdout.checkError())) { source.removeEventListener(listener); flush(); onExit(0); return; } if (dropped) { write(com.google.gerrit.sshd.commands.StreamEvents.droppedOutputEvent); dropped = false; } final com.google.gerrit.server.events.Event event = poll(); if (event == null) { break; } write(event); processed++; } flush(); if ((com.google.gerrit.sshd.commands.StreamEvents.BATCH_SIZE) <= processed) { synchronized(taskLock) { task = pool.submit(writer); } } },9b9b0286e00336165dc8241b1ef164abfbbb876f,writeEvents(),70555,170,185
118175,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,4.0,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",1570bd02dba77a53998e08871a036d1b50bed8f3,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(permissionBackend.user(user).change(ctl.getNotes()).database(db).test(ChangePermission.READ))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",491d42534fa301b4e78ccb724ecec5141eba6d85,"parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)",2,5,"@java.lang.Override public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.extensions.restapi.TopLevelResource root, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id.encoded(), user.get()); if (ctls.isEmpty()) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } else if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(canRead(ctl))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return changeResourceFactory.create(ctl); }",eef5278a191bf2a9378b35dfe88c0275c1ab4972,"parse(com.google.gerrit.extensions.restapi.TopLevelResource,com.google.gerrit.extensions.restapi.IdString)",5499,283,261
23703,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ModifyReviewersCommand.java,,,,"private static com.google.gerrit.sshd.commands.UnloggedFailure error(final java.lang.String msg) { return new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); }",4e5e218a81aa360a289db36a10ce359b5619bdff,,error(java.lang.String),7,3,"private static com.google.gerrit.sshd.commands.UnloggedFailure error(java.lang.String msg) { return new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); }",0b79957112ae75d45abec2fb191a114bef9d21c8,error(java.lang.String),56894,49,48
86807,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeField.java,45.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.Iterable<byte[]> storedSubmitRecords(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(cd.submitRecords(opts)).transform(( r) -> com.google.gerrit.server.index.change.ChangeField.GSON.toJson(new com.google.gerrit.server.index.change.StoredSubmitRecord(r)).getBytes(java.nio.charset.StandardCharsets.UTF_8)); }",c7bb9e21aad1bdbe0595561cd2c29eeeaf4ccfaa,,"storedSubmitRecords(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.project.SubmitRuleOptions)",6,48,"private static java.lang.Iterable<byte[]> storedSubmitRecords(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.server.project.SubmitRuleOptions opts) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.index.change.ChangeField.storedSubmitRecords(cd.submitRecords(opts)); }",38073af428398a0fe09c402b9a2264d6213495ef,"storedSubmitRecords(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.server.project.SubmitRuleOptions)",3871,144,90
68292,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,57.0,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""""); for (com.google.gerrit.reviewdb.client.Change c : changes) { mergeQueue.merge(c.getDest()); c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",832f05a22105acb1b76efa096f1715f41b52b0e5,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""""); try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes)).merge(); } catch (com.google.gerrit.server.git.MergeException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",5fe2f4fe13fd5ab742c89848147772e205f98d38,"submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)","submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)",26,60,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""""); for (com.google.gerrit.reviewdb.client.Change c : changes) { try { mergeFactory.create(c.getDest()).merge(); } catch (com.google.gerrit.server.git.MergeException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",fd77b2bf5c92ab99bb08f5d6f024c38c960216d3,"submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)",64829,474,459
48920,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditCommitMessageBox.java,,,,"@com.google.gwt.uibinder.client.UiHandler(""submit"") void onSubmit(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.edit(changeId.get(), revision, message.getText().trim(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(changeId)); hide(); } }); }",826863548189ae66ac8ac7f6709f3cb13a67a724,,onSubmit(com.google.gwt.event.dom.client.ClickEvent),10,3,"@com.google.gwt.uibinder.client.UiHandler(""save"") void onSave(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.changes.ChangeApi.message(changeId.get(), revision, message.getText().trim(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(changeId)); hide(); } }); }",4f94431f7f82f8178717f86dafbee11c9e31b3a7,onSave(com.google.gwt.event.dom.client.ClickEvent),88283,162,162
84870,gerrit-server_src_main_java_com_google_gerrit_server_change_AbandonUtil.java,1.0,"public void abandonInactiveOpenChanges() { if ((cfg.getAbandonAfter()) <= 0) { return; } try { java.lang.String query = (""status:new age:"" + (java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(cfg.getAbandonAfter()))) + ""m""; if (!(cfg.getAbandonIfMergeable())) { query += "" -is:mergeable""; } java.util.List<com.google.gerrit.server.query.change.ChangeData> changesToAbandon = queryProcessor.enforceVisibility(false).queryChanges(queryBuilder.parse(query)).changes(); int count = 0; for (com.google.gerrit.server.query.change.ChangeData cd : changesToAbandon) { try { abandon.abandon(changeControl(cd), cfg.getAbandonMessage(), null); count++; } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { } catch (java.lang.Throwable e) { com.google.gerrit.server.change.AbandonUtil.log.error(java.lang.String.format(""Failed to auto-abandon inactive open change %d."", cd.getId().get()), e); } } com.google.gerrit.server.change.AbandonUtil.log.info(java.lang.String.format(""Auto-Abandoned %d of %d changes."", count, changesToAbandon.size())); } catch (com.google.gerrit.server.query.QueryParseException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.AbandonUtil.log.error(""Failed to query inactive open changes for auto-abandoning."", e); } }",3485964feb5b84b9ee5355ccb5ad8d6e3a600b7d,"public void abandonInactiveOpenChanges() { if ((cfg.getAbandonAfter()) <= 0) { return; } try { java.lang.String query = (""status:new age:"" + (java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(cfg.getAbandonAfter()))) + ""m""; if (!(cfg.getAbandonIfMergeable())) { query += "" -is:mergeable""; } java.util.List<com.google.gerrit.server.query.change.ChangeData> changesToAbandon = queryProcessor.enforceVisibility(false).queryChanges(queryBuilder.parse(query)).changes(); int count = 0; for (com.google.gerrit.server.query.change.ChangeData cd : changesToAbandon) { try { if (noNeedToAbandon(cd, query)) { com.google.gerrit.server.change.AbandonUtil.log.debug((""Change data \""{}\"" does not satisfy the query \""{}\"" any"" + "" more, and hence skip it in clean up""), cd, query); continue; } abandon.abandon(changeControl(cd), cfg.getAbandonMessage(), null); count++; } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { } catch (java.lang.Throwable e) { com.google.gerrit.server.change.AbandonUtil.log.error(java.lang.String.format(""Failed to auto-abandon inactive open change %d."", cd.getId().get()), e); } } com.google.gerrit.server.change.AbandonUtil.log.info(java.lang.String.format(""Auto-Abandoned %d of %d changes."", count, changesToAbandon.size())); } catch (com.google.gerrit.server.query.QueryParseException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.AbandonUtil.log.error(""Failed to query inactive open changes for auto-abandoning."", e); } }",d347b36c4d6a9762bfbb969be9eaf231e69c116d,abandonInactiveOpenChanges(),abandonInactiveOpenChanges(),2,0,"public void abandonInactiveOpenChanges() { if ((cfg.getAbandonAfter()) <= 0) { return; } try { java.lang.String query = (""status:new age:"" + (java.util.concurrent.TimeUnit.MILLISECONDS.toMinutes(cfg.getAbandonAfter()))) + ""m""; if (!(cfg.getAbandonIfMergeable())) { query += "" -is:mergeable""; } java.util.List<com.google.gerrit.server.query.change.ChangeData> changesToAbandon = queryProcessor.enforceVisibility(false).queryChanges(queryBuilder.parse(query)).changes(); int count = 0; for (com.google.gerrit.server.query.change.ChangeData cd : changesToAbandon) { try { if (noNeedToAbandon(cd, query)) { com.google.gerrit.server.change.AbandonUtil.log.debug((""Change data \""{}\"" does not satisfy the query \""{}\"" any"" + "" more, hence skipping it in clean up""), cd, query); continue; } abandon.abandon(changeControl(cd), cfg.getAbandonMessage(), null); count++; } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { } catch (java.lang.Throwable e) { com.google.gerrit.server.change.AbandonUtil.log.error(java.lang.String.format(""Failed to auto-abandon inactive open change %d."", cd.getId().get()), e); } } com.google.gerrit.server.change.AbandonUtil.log.info(java.lang.String.format(""Auto-Abandoned %d of %d changes."", count, changesToAbandon.size())); } catch (com.google.gerrit.server.query.QueryParseException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.AbandonUtil.log.error(""Failed to query inactive open changes for auto-abandoning."", e); } }",6fa296b4b2719ab743d999f4fdab5e881e0d5b1e,abandonInactiveOpenChanges(),141479,470,469
23703,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ModifyReviewersCommand.java,,,,private boolean inProject(final com.google.gerrit.reviewdb.Change change) { if ((projectControl) == null) { return true; } return projectControl.getProject().getNameKey().equals(change.getProject()); },b23ae5b0566a8ffdedaf5801a149f70cc81e3087,,inProject(com.google.gerrit.reviewdb.Change),7,0,private boolean inProject(com.google.gerrit.reviewdb.Change change) { if ((projectControl) != null) { return projectControl.getProject().getNameKey().equals(change.getProject()); } else { return true; } },da96409187a47269be2461292489dd0a69c42ee0,inProject(com.google.gerrit.reviewdb.Change),56899,51,53
89132,gerrit-server_src_main_java_com_google_gerrit_server_ChangeMessagesUtil.java,1.0,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when, java.lang.String body) throws com.google.gwtorm.server.OrmException { checkNotNull(psId); com.google.gerrit.reviewdb.client.Account.Id accountId = (user.isInternalUser()) ? null : user.getAccountId(); com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(psId.getParentKey(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), accountId, when, psId); m.setMessage(body); user.updateRealAccountId(m::setRealAuthor); return m; }",ec20328cba53ba06d8f2c9846da12ecb188aa00b,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when, java.lang.String body, java.lang.String tag) throws com.google.gwtorm.server.OrmException { checkNotNull(psId); com.google.gerrit.reviewdb.client.Account.Id accountId = (user.isInternalUser()) ? null : user.getAccountId(); com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(psId.getParentKey(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), accountId, when, psId); m.setMessage(body); m.setTag(tag); user.updateRealAccountId(m::setRealAuthor); return m; }",570a476f7f242a17efa9be55fb5d7c73b38c7720,"newMessage(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.server.CurrentUser,java.sql.Timestamp,java.lang.String)","newMessage(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.server.CurrentUser,java.sql.Timestamp,java.lang.String,java.lang.String)",11,1,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.server.CurrentUser user, java.sql.Timestamp when, java.lang.String body, @com.google.gerrit.common.Nullable java.lang.String tag) throws com.google.gwtorm.server.OrmException { checkNotNull(psId); com.google.gerrit.reviewdb.client.Account.Id accountId = (user.isInternalUser()) ? null : user.getAccountId(); com.google.gerrit.reviewdb.client.ChangeMessage m = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(psId.getParentKey(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), accountId, when, psId); m.setMessage(body); m.setTag(tag); user.updateRealAccountId(m::setRealAuthor); return m; }",ea8e10899b38e76e558047a872591161268f472b,"newMessage(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.server.CurrentUser,java.sql.Timestamp,java.lang.String,java.lang.String)",73613,254,265
72006,gerrit-server_src_main_java_com_google_gerrit_server_account_GetPreferences.java,0.0,"private void loadFromAllUsers(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.client.MenuItem(""Changes"", ""#/dashboard/self"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Edits"", ""#/q/has:edit"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); my.add(new com.google.gerrit.extensions.client.MenuItem(""Groups"", ""#/groups/self"", null)); } urlAliases = com.google.gerrit.server.account.GetPreferences.PreferenceInfo.urlAliases(v); }",36d8669af9feede4defd6c93f030f900a18b9b53,"public static AccountGeneralPreferencesInfo loadFromAllUsers(AccountGeneralPreferencesInfo r, com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { r.my = com.google.gerrit.server.account.GetPreferences.my(v); if ((r.my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); r.my = com.google.gerrit.server.account.GetPreferences.my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (r.my.isEmpty()) { r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Changes"", ""#/dashboard/self"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Edits"", ""#/q/has:edit"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Groups"", ""#/groups/self"", null)); } r.urlAliases = com.google.gerrit.server.account.GetPreferences.urlAliases(v); return r; }",4cb894b821dbc7b20a1677f1248db1a018580951,"loadFromAllUsers(com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)","loadFromAllUsers(com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo,com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)",14,2,"public static GeneralPreferencesInfo loadFromAllUsers(GeneralPreferencesInfo r, com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { r.my = com.google.gerrit.server.account.GetPreferences.my(v); if ((r.my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); r.my = com.google.gerrit.server.account.GetPreferences.my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (r.my.isEmpty()) { r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Changes"", ""#/dashboard/self"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Edits"", ""#/q/has:edit"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); r.my.add(new com.google.gerrit.extensions.client.MenuItem(""Groups"", ""#/groups/self"", null)); } r.urlAliases = com.google.gerrit.server.account.GetPreferences.urlAliases(v); return r; }",b85e4fa07d533b01b845e1391a37e6877e60c98d,"loadFromAllUsers(com.google.gerrit.extensions.client.GeneralPreferencesInfo,com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)",178156,486,484
20019,gerrit-server_src_main_java_com_google_gerrit_server_schema_SchemaCreator.java,5.0,"private void initReadCategory(final com.google.gerrit.reviewdb.ReviewDb c, final com.google.gerrit.reviewdb.SystemConfig sConfig) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.ApprovalCategory cat; final java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals; cat = new com.google.gerrit.reviewdb.ApprovalCategory(com.google.gerrit.reviewdb.ApprovalCategory.READ, ""Read Access""); cat.setPosition(((short) (-1))); cat.setFunctionName(NoOpFunction.NAME); vals = new java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue>(); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, 2, ""Upload permission"")); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, 1, ""Read access"")); vals.add(com.google.gerrit.server.schema.SchemaCreator.value(cat, (-1), ""No access"")); c.approvalCategories().insert(java.util.Collections.singleton(cat)); c.approvalCategoryValues().insert(vals); final com.google.gerrit.reviewdb.RefRight.RefPattern pattern = new com.google.gerrit.reviewdb.RefRight.RefPattern(com.google.gerrit.reviewdb.RefRight.ALL); { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.anonymousGroupId)); read.setMaxValue(((short) (1))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.registeredGroupId)); read.setMaxValue(((short) (2))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } { final com.google.gerrit.reviewdb.RefRight read = new com.google.gerrit.reviewdb.RefRight(new com.google.gerrit.reviewdb.RefRight.Key(com.google.gerrit.server.schema.SchemaCreator.DEFAULT_WILD_NAME, pattern, cat.getId(), sConfig.adminGroupId)); read.setMaxValue(((short) (1))); read.setMinValue(((short) (1))); c.refRights().insert(java.util.Collections.singleton(read)); } }",85a5f2305b5407c1261931246bf48e58592b9a3f,"private com.google.gerrit.common.data.AccessSection.Rule rule(com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.reviewdb.AccountGroup group) { return new com.google.gerrit.common.data.AccessSection.Rule(config.resolve(group)); }",868218645444ccc0525bf6d3c523e24d7b9adf09,"initReadCategory(com.google.gerrit.reviewdb.ReviewDb,com.google.gerrit.reviewdb.SystemConfig)","rule(com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.reviewdb.AccountGroup)",14,7,"private com.google.gerrit.common.data.PermissionRule rule(com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.reviewdb.AccountGroup group) { return new com.google.gerrit.common.data.PermissionRule(config.resolve(group)); }",a2dbf26fd8554aee4209295e4434a173ffc545cf,"rule(com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.reviewdb.AccountGroup)",10453,74,70
47870,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ActionContext.java,,,,"private static final void post(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, final com.google.gwt.core.client.JavaScriptObject cb) { api.post(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }",cffb3013d6b80ca6e8651e26a995f0fc6c3f4fb2,,"post(com.google.gerrit.client.rpc.RestApi,com.google.gwt.core.client.JavaScriptObject,com.google.gwt.core.client.JavaScriptObject)",7,7,"static final void post(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, com.google.gwt.core.client.JavaScriptObject cb) { api.post(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }",48f84a25771d128baf4325484f4c70cb41ac6bfc,"post(com.google.gerrit.client.rpc.RestApi,com.google.gwt.core.client.JavaScriptObject,com.google.gwt.core.client.JavaScriptObject)",192367,75,73
140535,java_com_google_gerrit_server_patchlib_IntraLineDiff.java,1.0,public com.google.gerrit.server.patch.IntraLineDiff.Status getStatus() { return status; },c76a4cccb9c875a346f09bb397a8f990b95a4400,public com.google.gerrit.server.patchlib.IntraLineDiff.Status getStatus() { return status; },8f2208001dc243507dd3ff18bc235edc23cfd728,getStatus(),getStatus(),11,1,public com.google.gerrit.server.diff.IntraLineDiff.Status getStatus() { return status; },7ed5d8f58856a591ac123b02ceaa56c27cd10c1a,getStatus(),15669,27,26
83749,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_NewAgreementScreen.java,1.0,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements(""self"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { if (isAttached()) { mySigned = new java.util.HashSet<>(); for (com.google.gerrit.client.account.AgreementInfo info : com.google.gerrit.client.rpc.Natives.asList(result)) { mySigned.add(info.name()); } postRPC(); } } }); Gerrit.SYSTEM_SVC.contributorAgreements(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.common.data.ContributorAgreement>>() { @java.lang.Override public void onSuccess(final java.util.List<com.google.gerrit.common.data.ContributorAgreement> result) { if (isAttached()) { available = result; postRPC(); } } }); }",6b29934c0850ea2f68fd705cfb6ff90b4267df68,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements(""self"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { if (isAttached()) { mySigned = new java.util.HashSet<>(); for (com.google.gerrit.client.account.AgreementInfo info : com.google.gerrit.client.rpc.Natives.asList(result)) { mySigned.add(info.name()); } postRPC(); } } }); com.google.gerrit.client.config.ConfigServerApi.serverInfo(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ServerInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ServerInfo result) { if (isAttached()) { available = result.auth().contributorAgrements(); postRPC(); } } }); }",a91dbde254c51d993b8be4c58f5142c1234eaecd,onLoad(),onLoad(),5,1,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements(""self"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.AgreementInfo> result) { if (isAttached()) { mySigned = new java.util.HashSet<>(); for (com.google.gerrit.client.info.AgreementInfo info : com.google.gerrit.client.rpc.Natives.asList(result)) { mySigned.add(info.name()); } postRPC(); } } }); available = com.google.gerrit.client.Gerrit.info().auth().contributorAgreements(); postRPC(); }",c394ab0f381a364fb97476879a52f8736917bef6,onLoad(),181030,291,217
129873,gerrit-server_src_main_java_com_google_gerrit_server_change_MarkAsReviewed.java,,,,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark as Reviewed"").setTitle(""Mark the change as reviewed to unhighlight it in the dashboard"").setVisible((!(isReviewed(rsrc)))); }",561d32dc734298a32612eeaf7d1ac21db5b32168,,getDescription(com.google.gerrit.server.change.ChangeResource),6,2,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark Reviewed"").setTitle(""Mark the change as reviewed to unhighlight it in the dashboard"").setVisible((!(isReviewed(rsrc)))); }",7dd2f3af2f77c0351e7d206f21e2254bc079a289,getDescription(com.google.gerrit.server.change.ChangeResource),74939,94,93
77938,gerrit-server_src_main_java_com_google_gerrit_server_git_SubmoduleOp.java,5.0,"public java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.git.MergeOpRepoManager orm) throws java.io.IOException { logDebug((""Calculating possible superprojects for "" + branch)); java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> ret = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.get(project).getConfig(); for (com.google.gerrit.common.data.SubscribeSection s : projectStateFactory.create(cfg).getSubscribeSections(branch)) { java.util.Collection<com.google.gerrit.reviewdb.client.Branch.NameKey> branches = getDestinationBranches(branch, s, orm); for (com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch : branches) { com.google.gerrit.server.git.GitModules m = gitmodulesFactory.create(targetBranch, updateId, orm); m.load(); for (com.google.gerrit.reviewdb.client.SubmoduleSubscription ss : m.subscribedTo(branch)) { if ((projectCache.get(ss.getSubmodule().getParentKey())) != null) { ret.add(ss); } } } } logDebug((((""Calculated superprojects for "" + branch) + "" are "") + ret)); return ret; }",214e6059a4c417541e6de3badf0794b607f975ac,"public java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.git.MergeOpRepoManager orm) throws java.io.IOException { logDebug((""Calculating possible superprojects for "" + branch)); java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> ret = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.get(project).getConfig(); for (com.google.gerrit.common.data.SubscribeSection s : projectStateFactory.create(cfg).getSubscribeSections(branch)) { logDebug((""Checking subscribe section "" + s)); java.util.Collection<com.google.gerrit.reviewdb.client.Branch.NameKey> branches = getDestinationBranches(branch, s, orm); for (com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch : branches) { com.google.gerrit.server.git.GitModules m = gitmodulesFactory.create(targetBranch, updateId, orm); m.load(); for (com.google.gerrit.reviewdb.client.SubmoduleSubscription ss : m.subscribedTo(branch)) { logDebug((""Checking SubmoduleSubscription "" + ss)); if ((projectCache.get(ss.getSubmodule().getParentKey())) != null) { logDebug((""adding SubmoduleSubscription "" + ss)); ret.add(ss); } } } } logDebug((((""Calculated superprojects for "" + branch) + "" are "") + ret)); return ret; }",0497130c7126e3c43bd3469423a3f4dba8a1b40f,"superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOpRepoManager)","superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOpRepoManager)",4,5,"public java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.git.MergeOpRepoManager orm) throws java.io.IOException { logDebug((""Calculating possible superprojects for "" + branch)); java.util.Collection<com.google.gerrit.reviewdb.client.SubmoduleSubscription> ret = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); com.google.gerrit.server.git.ProjectConfig cfg = projectCache.get(project).getConfig(); for (com.google.gerrit.common.data.SubscribeSection s : projectStateFactory.create(cfg).getSubscribeSections(branch)) { logDebug((""Checking subscribe section "" + s)); java.util.Collection<com.google.gerrit.reviewdb.client.Branch.NameKey> branches = getDestinationBranches(branch, s, orm); for (com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch : branches) { com.google.gerrit.server.git.GitModules m = gitmodulesFactory.create(targetBranch, updateId, orm); m.load(); for (com.google.gerrit.reviewdb.client.SubmoduleSubscription ss : m.subscribedTo(branch)) { logDebug((""Checking SubmoduleSubscription "" + ss)); if ((projectCache.get(ss.getSubmodule().getParentKey())) != null) { logDebug((""Adding SubmoduleSubscription "" + ss)); ret.add(ss); } } } } logDebug((((""Calculated superprojects for "" + branch) + "" are "") + ret)); return ret; }",0822af1e1cf6d4c9f1748668b2c212c1d52bcee4,"superProjectSubscriptionsForSubmoduleBranch(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOpRepoManager)",156411,432,431
168873,java_com_google_gerrit_server_mail_send_NotificationEmail.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static java.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf(""/""); if (lastIndexSlash == 0) { return projectName.substring(1); } return ""..."" + (projectName.substring((lastIndexSlash + 1))); }",2b22db22dfd2063f759363757b3fc5f519108155,,getShortProjectName(java.lang.String),5,2,"@com.google.common.annotations.VisibleForTesting protected static java.lang.String getShortProjectName(java.lang.String projectName) { int lastIndexSlash = projectName.lastIndexOf(""/""); if (lastIndexSlash == 0) { return projectName.substring(1); } return ""..."" + (projectName.substring((lastIndexSlash + 1))); }",a10d18a18c15fc3063955dad8948b2c8b51824dd,getShortProjectName(java.lang.String),11101,54,66
35129,gerrit-server_src_main_java_com_google_gerrit_server_plugins_Plugin.java,,,,public void start(com.google.gerrit.server.plugins.PluginEnvironment env) throws java.lang.Exception { java.lang.Module sysmod = ((sysModule) != null) ? sysModule.newInstance() : null; java.lang.Module sshmod = ((sshModule) != null) ? sshModule.newInstance() : null; manager = new com.google.gerrit.lifecycle.LifecycleManager(); if (sysmod != null) { sysInjector = env.getSysInjector().createChildInjector(sysmod); manager.add(sysInjector); } if ((sshmod != null) && ((env.getSshInjector()) != null)) { sshInjector = env.getSshInjector().createChildInjector(sshmod); manager.add(sshInjector); } manager.start(); },4daac83e93e0ea3478ae5d429a165a543ca25433,,start(com.google.gerrit.server.plugins.PluginEnvironment),8,8,"public void start(com.google.gerrit.server.plugins.PluginGuiceEnvironment env) throws java.lang.Exception { com.google.inject.Injector root = newRootInjector(env); manager = new com.google.gerrit.lifecycle.LifecycleManager(); if ((sysModule) != null) { sysInjector = root.createChildInjector(root.getInstance(sysModule)); manager.add(sysInjector); } else { sysInjector = root; } if (((sshModule) != null) && (env.hasSshModule())) { sshInjector = sysInjector.createChildInjector(env.getSshModule(), sysInjector.getInstance(sshModule)); manager.add(sshInjector); } manager.start(); env.onStartPlugin(this); }",61d9feac63366223e7baf64c8146f20516b792a8,start(com.google.gerrit.server.plugins.PluginGuiceEnvironment),108450,175,160
72338,gerrit-server_src_main_java_com_google_gerrit_server_change_PatchSetInserter.java,16.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { try { com.google.gerrit.server.mail.ReplacePatchSetSender cm = replacePatchSetFactory.create(change.getId()); cm.setFrom(ctx.getUser().getAccountId()); cm.setPatchSet(patchSet, patchSetInfo); cm.setChangeMessage(changeMessage); cm.addReviewers(oldReviewers.get(ReviewerState.REVIEWER)); cm.addExtraCC(oldReviewers.get(ReviewerState.CC)); cm.send(); } catch (java.lang.Exception err) { com.google.gerrit.server.change.PatchSetInserter.log.error((""Cannot send email for new patch set on change "" + (change.getId())), err); } } if (runHooks) { revisionCreated.fire(change, patchSet, ctx.getUser().getAccountId()); hooks.doPatchsetCreatedHook(change, patchSet, ctx.getDb()); } }",83956f5056b8ab3ee6964c5505fcfa9e32aab9ec,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { try { com.google.gerrit.server.mail.ReplacePatchSetSender cm = replacePatchSetFactory.create(change.getId()); cm.setFrom(ctx.getUser().getAccountId()); cm.setPatchSet(patchSet, patchSetInfo); cm.setChangeMessage(changeMessage); cm.addReviewers(oldReviewers.get(ReviewerState.REVIEWER)); cm.addExtraCC(oldReviewers.get(ReviewerState.CC)); cm.send(); } catch (java.lang.Exception err) { com.google.gerrit.server.change.PatchSetInserter.log.error((""Cannot send email for new patch set on change "" + (change.getId())), err); } } if (runHooks) { revisionCreated.fire(change, patchSet, ctx.getUser().getAccountId()); } }",022ed3500b03a09c9a345648b3b8f8241927260a,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),43,16,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { try { com.google.gerrit.server.mail.ReplacePatchSetSender cm = replacePatchSetFactory.create(ctx.getProject(), change.getId()); cm.setFrom(ctx.getUser().getAccountId()); cm.setPatchSet(patchSet, patchSetInfo); cm.setChangeMessage(changeMessage); cm.addReviewers(oldReviewers.byState(com.google.gerrit.server.change.REVIEWER)); cm.addExtraCC(oldReviewers.byState(com.google.gerrit.server.change.CC)); cm.send(); } catch (java.lang.Exception err) { com.google.gerrit.server.change.PatchSetInserter.log.error((""Cannot send email for new patch set on change "" + (change.getId())), err); } } if (runHooks) { revisionCreated.fire(change, patchSet, ctx.getUser().getAccountId()); } }",c35db8873876577c474d3e158a04972633aa9e1a,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),204231,228,248
109251,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,4.0,"@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).notTo(sc.owner, sc.starrer); }); }",23090445c3d0255afa62734c49eed8dbbda408df,"@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",e7f1385ac84d16ce645d9f5b9e710bd4b3615c75,addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(),addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(),16,4,"@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",95111cc6135ee9b91d71eef2d8e311712bca6ec5,addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(),39814,192,193
97614,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,18.0,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { cleanUpComments(commentsPerPath); ensureCommentsAreAddable(revision, commentsPerPath); }",4c1f84c93759844cf2936b269a294fcfd4bcdef1,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { ensureCommentsAreAddable(revision, commentsPerPath); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> e : commentsPerPath.entrySet()) { for (T comment : e.getValue()) { ensureRangeIsValid(e.getKey(), comment.range); } } }",dae92c8dafe7f7721c90f5b9c399bcb5fafcf8c6,"checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)","checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)",5,18,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { ensureLineIsNonNegative(comment.line, path); ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); ensureRangeIsValid(path, comment.range); } } }",eb7f8cd53299352560d6c1297315dfe5fc7f3ecd,"checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)",29061,169,278
53627,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_GroupPropertiesIT.java,2.0,"@org.junit.Test public void testGroupOptions() throws java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.NameKey adminGroupName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators""); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(adminGroupName); java.lang.String url = (""/groups/"" + (adminGroup.getGroupUUID().get())) + ""/options""; com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.acceptance.rest.group.GroupOptionsInfo options = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupOptionsInfo>() {}.getType()); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(adminGroup.isVisibleToAll(), com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(options.visible_to_all)); r.consume(); com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput in = new com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput(); in.visible_to_all = !(adminGroup.isVisibleToAll()); r = session.put(url, in); com.google.gerrit.acceptance.rest.group.GroupOptionsInfo newOptions = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupOptionsInfo>() {}.getType()); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(in.visible_to_all, com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(newOptions.visible_to_all)); adminGroup = groupCache.get(adminGroupName); assertEquals(in.visible_to_all, adminGroup.isVisibleToAll()); r.consume(); }",bd61f42211f18d0b2cd6426de27fd6dd42555e28,"@org.junit.Test public void testGroupOptions() throws java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.NameKey adminGroupName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators""); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(adminGroupName); java.lang.String url = (""/groups/"" + (adminGroup.getGroupUUID().get())) + ""/options""; com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.server.group.GroupOptionsInfo options = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(adminGroup.isVisibleToAll(), com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(options.visibleToAll)); r.consume(); com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput in = new com.google.gerrit.acceptance.rest.group.GroupPropertiesIT.GroupOptionsInput(); in.visible_to_all = !(adminGroup.isVisibleToAll()); r = session.put(url, in); com.google.gerrit.server.group.GroupOptionsInfo newOptions = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(in.visible_to_all, com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(newOptions.visibleToAll)); adminGroup = groupCache.get(adminGroupName); assertEquals(in.visible_to_all, adminGroup.isVisibleToAll()); r.consume(); }",88842a4a2f933d8341592a10bc0b39b00b34760f,testGroupOptions(),testGroupOptions(),5,2,"@org.junit.Test public void testGroupOptions() throws java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup.NameKey adminGroupName = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""Administrators""); com.google.gerrit.reviewdb.client.AccountGroup adminGroup = groupCache.get(adminGroupName); java.lang.String url = (""/groups/"" + (adminGroup.getGroupUUID().get())) + ""/options""; com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.server.group.GroupOptionsInfo options = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(adminGroup.isVisibleToAll(), com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(options.visibleToAll)); r.consume(); com.google.gerrit.server.group.PutOptions.Input in = new com.google.gerrit.server.group.PutOptions.Input(); in.visibleToAll = !(adminGroup.isVisibleToAll()); r = session.put(url, in); com.google.gerrit.server.group.GroupOptionsInfo newOptions = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupOptionsInfo.class); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); assertEquals(in.visibleToAll, com.google.gerrit.acceptance.rest.group.GroupAssert.toBoolean(newOptions.visibleToAll)); adminGroup = groupCache.get(adminGroupName); assertEquals(in.visibleToAll, adminGroup.isVisibleToAll()); r.consume(); }",ee2e433e539a955320e5dcbd3e84431c2599f2d3,testGroupOptions(),4750,424,406
45805,gerrit-server_src_main_java_com_google_gerrit_server_change_CherryPickChange.java,0.0,"private Change.Id insertPatchSet(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, org.eclipse.jgit.revwalk.RevCommit cherryPickCommit, com.google.gerrit.server.project.RefControl refControl) throws com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(git, change.currentPatchSetId()); com.google.gerrit.reviewdb.client.PatchSet newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(new java.sql.Timestamp(java.lang.System.currentTimeMillis())); newPatchSet.setUploader(change.getOwner()); newPatchSet.setRevision(new com.google.gerrit.reviewdb.client.RevId(cherryPickCommit.name())); patchSetInserterFactory.create(git, revWalk, change, cherryPickCommit).setPatchSet(newPatchSet).setRefControl(refControl).setMessage(buildChangeMessage(patchSetId, change)).insert(); return change.getId(); }",d626f843381c1cb5f7631f3ec3f3f48f339de821,"private Change.Id insertPatchSet(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, org.eclipse.jgit.revwalk.RevCommit cherryPickCommit, com.google.gerrit.server.project.RefControl refControl) throws com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { patchSetInserterFactory.create(git, revWalk, change, cherryPickCommit).setRefControl(refControl).setMessage(buildChangeMessage(patchSetId, change)).insert(); return change.getId(); }",d9fb48bb7c01885ecabdad50550093573a094c9d,"insertPatchSet(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet$Id,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.project.RefControl)","insertPatchSet(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet$Id,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.project.RefControl)",4,0,"private Change.Id insertPatchSet(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, org.eclipse.jgit.revwalk.RevCommit cherryPickCommit, com.google.gerrit.server.project.RefControl refControl) throws com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { patchSetInserterFactory.create(git, revWalk, refControl, change, cherryPickCommit).setMessage(buildChangeMessage(patchSetId, change)).insert(); return change.getId(); }",985104bb634bfa7c3a26bdbfaa4b5483d0fa8d84,"insertPatchSet(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet$Id,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.project.RefControl)",69135,204,200
17265,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_HintTextBox.java,7.0,@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { setFocus(true); },b625c78239efe25d2947586b633f37334f9f9778,@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { focusHint(); isFocused = true; },46a298d8e83f4cb5069cd162bd892063e551ce4a,onFocus(com.google.gwt.event.dom.client.FocusEvent),onFocus(com.google.gwt.event.dom.client.FocusEvent),4,6,@java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { focusHint(); prevText = getText(); isFocused = true; },0cd1a79871696226af49f1f0434bd14126306eed,onFocus(com.google.gwt.event.dom.client.FocusEvent),168935,36,42
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,47.0,"@org.junit.Test public void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, com.google.gerrit.acceptance.server.mail.OWNER); assertThat(sender).notSent(); }); }",0edf2e901c4ccab9348025c8fffdd3eb9a1dbaaf,"private void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, com.google.gerrit.acceptance.server.mail.OWNER); assertThat(sender).notSent(); }",2f36d4113af31da3b161e40371212c2f7d0a8ddf,addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(),addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),16,12,"private void addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, com.google.gerrit.acceptance.server.mail.OWNER); assertThat(sender).notSent(); }",f0fcc83297e7f423646661b7726a155120a704a7,addReviewerToReviewableChangeInNoteDbByOwnerCcingSelfNotifyOwner(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),145725,175,189
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,32.0,"private com.google.gerrit.client.diff.CodeMirrorDemo.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, int height, com.google.gwt.dom.client.Style.Unit unit) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.CodeMirrorDemo.LineWidgetElementPair(widget, div); }",86af958c68db704f2822bd03a97acaa7bb50cf7b,"private com.google.gerrit.client.diff.CommentBoxManager.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, int height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); if (index != null) { config = config.set(""insertAt"", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.CommentBoxManager.LineWidgetElementPair(widget, div); }",c9140af007d39b9a3fc2d0874a0a65dcb893927f,"addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,int,com.google.gwt.dom.client.Style.Unit)","addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,int,com.google.gwt.dom.client.Style.Unit,java.lang.Integer)",4,29,"private com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, int height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set(""coverGutter"", true).set(""above"", (line == (-1))); if (index != null) { config = config.set(""insertAt"", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair(widget, div); }",a8bcb5a6be2bda989e278ee09b51835e0f9b6c2d,"addPaddingWidget(net.codemirror.lib.CodeMirror,java.lang.String,int,int,com.google.gwt.dom.client.Style.Unit,java.lang.Integer)",115293,238,236
20327,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testMergeabilityOfChangesbyBranch() { try { java.util.List<com.google.gerrit.reviewdb.Change> changes = schema.changes().byProject(destBranch.getParentKey()).toList(); for (com.google.gerrit.reviewdb.Change change : changes) { if ((destBranch.equals(change.getDest())) && ((change.getStatus()) == (Change.Status.NEW))) { testMergeQueue.addToQueue(change); } } testMergeQueue.consumesQueue(); } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.git.MergeOp.log.error(((""Test merge attempt for branch: "" + (destBranch.get())) + "" failed: Not able to query database""), e); } }",94ed992cc4943c3793f101f25251ba6cafbedc12,,testMergeabilityOfChangesbyBranch(),6,3,private boolean isMergeable(com.google.gerrit.reviewdb.Change c) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); final com.google.gerrit.server.git.CommitMergeStatus s = (commit != null) ? commit.statusCode : null; boolean isMergeable = false; if ((s != null) && (((s.equals(CommitMergeStatus.CLEAN_MERGE)) || (s.equals(CommitMergeStatus.CLEAN_PICK))) || (s.equals(CommitMergeStatus.ALREADY_MERGED)))) { isMergeable = true; } return isMergeable; },bc15b6c9209d53618e6aeec00c686dfaa7cf7e11,isMergeable(com.google.gerrit.reviewdb.Change),97806,185,161
105474,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_RevisionReviewerApiImpl.java,1.0,"@java.lang.Override public void deleteVote(java.lang.String label) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, label), null); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete vote"", e); } }",f294605d1f78e199ad54f85aadc99a129e03ac2b,"@java.lang.Override public void deleteVote(java.lang.String label) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, label), null); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.RevisionReviewerApiImpl.throwRestApiException(""Cannot delete vote"", e); } }",347dbc8330a94e4d3792fffd713e101f3f636046,deleteVote(java.lang.String),deleteVote(java.lang.String),6,0,"@java.lang.Override public void deleteVote(java.lang.String label) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, label), null); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete vote"", e); } }",88e011b5bfb8610a0cd9dd820be383fbeb7f4684,deleteVote(java.lang.String),55464,106,101
86197,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,79.0,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); addExtensionPoints(info, initCurrentRevision(info)); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if (((base) == null) && ((rev.commit().parents().length()) > 1)) { base = com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase(); } loadConfigInfo(info, base); } }); group.done(); }",1d57aa877f503ccca16e77ab021712b3766db26b,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); addExtensionPoints(info, initCurrentRevision(info)); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBaseOrAutoMerge()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); } }); group.done(); }",0979d7025691e2976785fe1e5db0b3b6b8740eff,onSuccess(com.google.gerrit.client.info.ChangeInfo),onSuccess(com.google.gerrit.client.info.ChangeInfo),3,79,"@java.lang.Override public void onSuccess(final com.google.gerrit.client.info.ChangeInfo info) { info.init(); addExtensionPoints(info, initCurrentRevision(info)); final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); loadCommit(rev, group); group.addListener(new com.google.gerrit.client.rpc.GerritCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { if ((base.isBaseOrAutoMerge()) && (rev.isMerge())) { base = com.google.gerrit.client.DiffObject.parse(info.legacyId(), com.google.gerrit.client.Gerrit.getUserPreferences().defaultBaseForMerges().getBase()); } loadConfigInfo(info, base); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> mAr = info.messages(); for (int i = 0; i < (mAr.length()); i++) { if ((mAr.get(i).tag()) != null) { hideTaggedComments.setVisible(true); break; } } } }); group.done(); }",196cdf5984c1ea127282fefac21c66306b6fc091,onSuccess(com.google.gerrit.client.info.ChangeInfo),70992,231,312
15873,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_AccountProjectWatch.java,0.0,@java.lang.Override public com.google.gerrit.reviewdb.com.google.gwtorm<?>[] members() { return new com.google.gwtorm.client.Key<?>[]{ projectName }; },24c25bcdb81accbfa14d8042dab0c29d3b1eb5bb,"@java.lang.Override public com.google.gerrit.reviewdb.com.google.gwtorm<?>[] members() { return new com.google.gwtorm.client.Key<?>[]{ projectName, fileMatchRegex }; }",3143faf39188b034936b153c0ec010dd646efa44,members(),members(),2,5,@java.lang.Override protected void set(java.lang.String newValue) { filter = newValue; },d34b3fca65a8133411913c17216848b490e3366c,set(java.lang.String),125939,50,23
87093,gerrit-server_src_main_java_com_google_gerrit_server_change_GetRobotComment.java,,,,@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().format(rsrc.getComment()); },5561bed3af1b16f27f213212265bb948da1eec69,,apply(com.google.gerrit.server.change.RobotCommentResource),12,0,@java.lang.Override public com.google.gerrit.extensions.common.RobotCommentInfo apply(com.google.gerrit.server.change.RobotCommentResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().newRobotCommentFormatter().format(rsrc.getComment()); },55f1a853abb19e4b9c2342ea4c2c5287d3d5cad2,apply(com.google.gerrit.server.change.RobotCommentResource),56285,68,73
76909,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeEditApi.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(id).view(""files"").id(path).view(""content""); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(id.getParentKey().get()); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), path); } api.addParameter(""base"", base).get(cb); }",3782090f4d779c09a48735b3e46cabcab52195a5,,"get(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,boolean,com.google.gerrit.client.rpc.HttpCallback)",9,7,"public static void get(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String path, boolean base, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.rpc.RestApi api; if ((id.get()) != 0) { api = com.google.gerrit.client.changes.ChangeApi.revision(id).view(""files"").id(path).view(""content""); } else if (Patch.COMMIT_MSG.equals(path)) { api = com.google.gerrit.client.changes.ChangeEditApi.editMessage(id.getParentKey().get()).addParameter(""base"", base); } else { api = com.google.gerrit.client.changes.ChangeEditApi.editFile(id.getParentKey().get(), path).addParameter(""base"", base); } api.get(cb); }",0bf4c14f876bdc9fbda0e090dd5d0b06cf210c1e,"get(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,boolean,com.google.gerrit.client.rpc.HttpCallback)",187437,212,219
74488,gerrit-server_src_test_java_com_google_gerrit_server_notedb_AbstractChangeNotesTest.java,8.0,"protected com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.client.Change c) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION, allUsers, c).load(); }",b0a60695fe32d392084ab27841758359541582ab,"protected com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.client.Change c) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(null, repoManager, com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION, allUsers, c).load(); }",baa121220d00e55be566aad91c8014976d426ad7,newNotes(com.google.gerrit.reviewdb.client.Change),newNotes(com.google.gerrit.reviewdb.client.Change),2,8,"protected com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.client.Change c) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, com.google.gerrit.server.notedb.AbstractChangeNotesTest.MIGRATION, allUsers, c).load(); }",b0a60695fe32d392084ab27841758359541582ab,newNotes(com.google.gerrit.reviewdb.client.Change),13356,99,97
110715,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_ProjectQoSFilter.java,9.0,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { executor.remove(this); },b1ed4000f4581528a8e8d271adae5f43f675fd2f,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { end(); },764ca0fdafe7367f370e7857c034d7102090fdd7,onTimeout(org.eclipse.jetty.continuation.Continuation),onTimeout(org.eclipse.jetty.continuation.Continuation),5,9,@java.lang.Override public void onTimeout(org.eclipse.jetty.continuation.Continuation self) { future.cancel(true); },660f5f07e494b7b33eab26e1d1fb5c4f7262cc97,onTimeout(org.eclipse.jetty.continuation.Continuation),102419,28,32
73841,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesParser.java,18.0,"private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { if ((status) == null) { status = parseStatus(commit); } com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); parseChangeMessage(psId, accountId, commit); if ((topic) == null) { topic = parseTopic(commit); } parseHashtags(commit); if (submitRecords.isEmpty()) { parseSubmitRecords(commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBMITTED_WITH)); } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { parseApproval(psId, accountId, commit, line); } for (com.google.gerrit.server.notedb.ReviewerStateInternal state : com.google.gerrit.server.notedb.ReviewerStateInternal.values()) { for (java.lang.String line : commit.getFooterLines(state.getFooterKey())) { parseReviewer(state, line); } } }",528c86515a156270f002936a34625ad14b2e290f,"private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { if ((lastUpdatedOn) == null) { lastUpdatedOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); } createdOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); if ((status) == null) { status = parseStatus(commit); } com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); parseChangeMessage(psId, accountId, commit); if ((topic) == null) { topic = parseTopic(commit); } parseHashtags(commit); if (submitRecords.isEmpty()) { parseSubmitRecords(commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBMITTED_WITH)); } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { parseApproval(psId, accountId, commit, line); } for (com.google.gerrit.server.notedb.ReviewerStateInternal state : com.google.gerrit.server.notedb.ReviewerStateInternal.values()) { for (java.lang.String line : commit.getFooterLines(state.getFooterKey())) { parseReviewer(state, line); } } }",1f0e05ffb6936b261f21c1ce2b60d73020818a94,parse(org.eclipse.jgit.revwalk.RevCommit),parse(org.eclipse.jgit.revwalk.RevCommit),4,19,"private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { createdOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); if ((lastUpdatedOn) == null) { lastUpdatedOn = com.google.gerrit.server.notedb.ChangeNotesParser.getCommitTime(commit); } if ((status) == null) { status = parseStatus(commit); } com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); parseChangeMessage(psId, accountId, commit); if ((topic) == null) { topic = parseTopic(commit); } parseHashtags(commit); if (submitRecords.isEmpty()) { parseSubmitRecords(commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_SUBMITTED_WITH)); } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { parseApproval(psId, accountId, commit, line); } for (com.google.gerrit.server.notedb.ReviewerStateInternal state : com.google.gerrit.server.notedb.ReviewerStateInternal.values()) { for (java.lang.String line : commit.getFooterLines(state.getFooterKey())) { parseReviewer(state, line); } } }",bc8746e33fd44c4ee4d8459d2c57a082d9ece1f2,parse(org.eclipse.jgit.revwalk.RevCommit),85420,363,363
112154,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,128.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void reviewAndStartReview() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.noScore().setWorkInProgress(false); in.ready = true; gApi.changes().id(r.getChangeId()).revision(""current"").review(in); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(); assertThat(info.workInProgress).isNull(); }",2f177f64a097244a207c01ce060b3197d85852dc,,reviewAndStartReview(),4,49,"@org.junit.Test public void reviewAndStartReview() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createWorkInProgressChange(); r.assertOkStatus(); assertThat(r.getChange().change().isWorkInProgress()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.noScore().setWorkInProgress(false); gApi.changes().id(r.getChangeId()).revision(""current"").review(in); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(); assertThat(info.workInProgress).isNull(); }",6e66e0acea03ef94330a187c5911be4d91cfae04,reviewAndStartReview(),199567,180,174
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,26.0,"private com.google.gerrit.server.patch.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.patch.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.patch.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.patch.ComparisonType.againstOtherPatchSet(); }",b09b8c324037a2af057efe628e50aeaf9da38f87,"private com.google.gerrit.server.patchlib.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.patchlib.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.patchlib.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.patchlib.ComparisonType.againstOtherPatchSet(); }",7ac924598d65f52a0c8f30843d354ab9eb4922d1,"getComparisonType(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.revwalk.RevCommit)","getComparisonType(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.revwalk.RevCommit)",11,25,"private com.google.gerrit.server.diff.ComparisonType getComparisonType(org.eclipse.jgit.revwalk.RevObject a, org.eclipse.jgit.revwalk.RevCommit b) { for (int i = 0; i < (b.getParentCount()); i++) { if (b.getParent(i).equals(a)) { return com.google.gerrit.server.diff.ComparisonType.againstParent((i + 1)); } } if (((key.getOldId()) == null) && ((b.getParentCount()) > 0)) { return com.google.gerrit.server.diff.ComparisonType.againstAutoMerge(); } return com.google.gerrit.server.diff.ComparisonType.againstOtherPatchSet(); }",a8da1fa702a313dff1cab2a21018feb87fe1f2e7,"getComparisonType(org.eclipse.jgit.revwalk.RevObject,org.eclipse.jgit.revwalk.RevCommit)",15323,172,168
72919,src_main_java_com_googlesource_gerrit_plugins_repositoryuse_RefUpdateHandlerImpl.java,,,,"private java.util.Map<java.lang.String, java.lang.String> getSubmodules(com.googlesource.gerrit.plugins.repositoryuse.RefUpdate event, com.google.gerrit.server.project.ProjectResource project) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { java.util.HashMap<java.lang.String, java.lang.String> submodules = new java.util.HashMap<>(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project.getNameKey())) { try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.submodule.SubmoduleWalk sw = new org.eclipse.jgit.submodule.SubmoduleWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(repo.resolve(event.getNewObjectId())); sw.setTree(commit.getTree()); sw.setRootTree(commit.getTree()); while (sw.next()) { submodules.putIfAbsent(normalizePath(project.getName(), sw.getModulesUrl(), false), sw.getObjectId().name()); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.repositoryuse.RefUpdateHandlerImpl.log.warn((""Invalid .gitmodules configuration while parsing "" + (project.getName()))); } } return submodules; }",80fe8f6107205852270cd1fff2df33b4e328c0dd,,"getSubmodules(com.googlesource.gerrit.plugins.repositoryuse.RefUpdate,com.google.gerrit.server.project.ProjectResource)",10,3,"private java.util.Map<java.lang.String, java.lang.String> getSubmodules(com.googlesource.gerrit.plugins.repositoryuse.RefUpdate event, com.google.gerrit.reviewdb.client.Project.NameKey project) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { java.util.HashMap<java.lang.String, java.lang.String> submodules = new java.util.HashMap<>(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.submodule.SubmoduleWalk sw = new org.eclipse.jgit.submodule.SubmoduleWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(repo.resolve(event.getNewObjectId())); sw.setTree(commit.getTree()); sw.setRootTree(commit.getTree()); while (sw.next()) { submodules.put(normalizePath(event.getProjectName(), sw.getModulesUrl(), false), sw.getObjectId().name()); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.googlesource.gerrit.plugins.repositoryuse.RefUpdateHandlerImpl.log.warn((""Invalid .gitmodules configuration while parsing "" + (event.getProjectName()))); } } return submodules; }",68341ee3671120c0975d6f980cc90e8e2d84c487,"getSubmodules(com.googlesource.gerrit.plugins.repositoryuse.RefUpdate,com.google.gerrit.reviewdb.client.Project$NameKey)",76939,338,341
74565,gerrit-server_src_main_java_com_google_gerrit_server_ChangeUtil.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.util.List<com.google.gerrit.server.project.ChangeControl> findChanges(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id)); },43b6daeb3bfbbb9d4aca1f44d623d1f569725b5a,,findChanges(com.google.gerrit.reviewdb.client.Change$Id),5,12,"public java.util.List<com.google.gerrit.server.project.ChangeControl> findChanges(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id), user); }",4cf10f1cf959077868265b2cab219ca609b299a5,"findChanges(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.server.CurrentUser)",139353,118,132
91442,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryChanges.java,3.0,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.server.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.server.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = json.create(options).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }",c17fce1c50eaf1374714e7997769602506354969,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.server.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.server.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = cjson.formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }",ab63b2c4c5e6ec50a1625e7ac0025a110c3f171f,query(),query(),9,3,"private java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> query() throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { if (imp.isDisabled()) { throw new com.google.gerrit.server.query.QueryParseException(""query disabled""); } if (((queries) == null) || (queries.isEmpty())) { queries = java.util.Collections.singletonList(""status:open""); } else if ((queries.size()) > 10) { throw new com.google.gerrit.server.query.QueryParseException(""limit of 10 queries""); } int cnt = queries.size(); java.util.List<com.google.gerrit.server.query.QueryResult<com.google.gerrit.server.query.change.ChangeData>> results = imp.query(qb.parse(queries)); boolean requireLazyLoad = (com.google.gerrit.server.query.change.QueryChanges.containsAnyOf(options, com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.query.change.DETAILED_LABELS, com.google.gerrit.server.query.change.LABELS))) && (!(qb.getArgs().getSchema().hasField(ChangeField.STORED_SUBMIT_RECORD_LENIENT))); com.google.gerrit.server.change.ChangeJson cjson = json.create(options); cjson.setPluginDefinedAttributesFactory(this.imp); java.util.List<java.util.List<com.google.gerrit.extensions.common.ChangeInfo>> res = cjson.lazyLoad((requireLazyLoad || (com.google.gerrit.server.query.change.QueryChanges.containsAnyOf(options, ChangeJson.REQUIRE_LAZY_LOAD)))).formatQueryResults(results); for (int n = 0; n < cnt; n++) { java.util.List<com.google.gerrit.extensions.common.ChangeInfo> info = res.get(n); if (results.get(n).more()) { info.get(((info.size()) - 1))._moreChanges = true; } } return res; }",4a67db04081644db9e72c61af54eda6f7b3d66d5,query(),119542,350,497
66011,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_CreateProjectIT.java,0.0,"private void assertEmptyCommit(java.lang.String projectName, java.lang.String... refs) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)); org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { for (java.lang.String ref : refs) { org.eclipse.jgit.revwalk.RevCommit commit = rw.lookupCommit(repo.getRef(ref).getObjectId()); rw.parseBody(commit); tw.addTree(commit.getTree()); assertThat(tw.next()).isFalse(); tw.reset(); } } finally { rw.release(); repo.close(); } }",1204953e6d696c315d5fbc6bc3d507b4aa1afc78,"private void assertEmptyCommit(java.lang.String projectName, java.lang.String... refs) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName)); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk(repo)) { for (java.lang.String ref : refs) { org.eclipse.jgit.revwalk.RevCommit commit = rw.lookupCommit(repo.getRef(ref).getObjectId()); rw.parseBody(commit); tw.addTree(commit.getTree()); assertThat(tw.next()).isFalse(); tw.reset(); } } }",2381bb986255048b1942f9248f0faf278827951d,"assertEmptyCommit(java.lang.String,java.lang.String[])","assertEmptyCommit(java.lang.String,java.lang.String[])",7,0,"private void assertEmptyCommit(java.lang.String projectName, java.lang.String... refs) throws java.io.IOException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.Project.NameKey projectKey = new com.google.gerrit.reviewdb.client.Project.NameKey(projectName); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectKey);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.treewalk.TreeWalk tw = new org.eclipse.jgit.treewalk.TreeWalk(rw.getObjectReader())) { for (java.lang.String ref : refs) { org.eclipse.jgit.revwalk.RevCommit commit = rw.lookupCommit(repo.getRef(ref).getObjectId()); rw.parseBody(commit); tw.addTree(commit.getTree()); assertThat(tw.next()).isFalse(); tw.reset(); } } }",ec6757772931f391587a99d6a146fcc3e24a86f5,"assertEmptyCommit(java.lang.String,java.lang.String[])",137333,222,248
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,59.0,"public static void submit(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, ""submit"").post(in, cb); }",2da58fc0ff65727f2f803c4b5d1f165526309335,"public static void submit(int id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, project, commit, ""submit"").post(in, cb); }",52a0bbc5348fcc609f49cc0c9cf2a9814d0c6e9a,"submit(int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)","submit(int,java.lang.String,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,49,"public static void submit(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.SubmitInfo> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, ""submit"").post(in, cb); }",793f61d03dc71cbf989c4905ecc88e9143afb8b4,"submit(java.lang.String,int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",211134,128,127
66509,gerrit-server_src_main_java_com_google_gerrit_server_patch_IntraLineLoader.java,4.0,"@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff load(com.google.gerrit.server.patch.IntraLineDiffKey key) throws java.lang.Exception { com.google.gerrit.server.patch.IntraLineWorkerPool.Worker w = workerPool.acquire(); com.google.gerrit.server.patch.IntraLineWorkerPool.Worker.Result r = w.computeWithTimeout(key, timeoutMillis); if (r == (IntraLineWorkerPool.Worker.Result.TIMEOUT)) { return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } workerPool.release(w); if ((r.error) != null) { throw r.error; } return r.diff; }",2a75094cbb38664958745f40bb5bcdd3e2cce1de,"@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff load(final com.google.gerrit.server.patch.IntraLineDiffKey key) throws java.lang.Exception { java.util.concurrent.Future<com.google.gerrit.server.patch.IntraLineDiff> result = diffExecutor.submit(new java.util.concurrent.Callable<com.google.gerrit.server.patch.IntraLineDiff>() { @java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff call() throws java.lang.Exception { return com.google.gerrit.server.patch.IntraLineLoader.compute(key); } }); com.google.gerrit.server.patch.IntraLineDiff intraLineDiff; try { intraLineDiff = result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for IntraLineDiff"") + "" in project "") + (key.getProject().get())) + "" on commit "") + (key.getCommit().name())) + "" for path "") + (key.getPath())) + "" comparing "") + (key.getBlobA().name())) + "".."") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable cause = e.getCause(); if (cause instanceof java.lang.Exception) { throw ((java.lang.Exception) (cause)); } else { throw new java.lang.Exception(e.getMessage(), cause); } } return intraLineDiff; }",761fdeeb399fdab635a770248498114094696d3a,load(com.google.gerrit.server.patch.IntraLineDiffKey),load(com.google.gerrit.server.patch.IntraLineDiffKey),2,4,"@java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff load(final com.google.gerrit.server.patch.IntraLineDiffKey key) throws java.lang.Exception { java.util.concurrent.Future<com.google.gerrit.server.patch.IntraLineDiff> result = diffExecutor.submit(new java.util.concurrent.Callable<com.google.gerrit.server.patch.IntraLineDiff>() { @java.lang.Override public com.google.gerrit.server.patch.IntraLineDiff call() throws java.lang.Exception { return com.google.gerrit.server.patch.IntraLineLoader.compute(key); } }); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.IntraLineLoader.log.warn(((((((((((((timeoutMillis) + "" ms timeout reached for IntraLineDiff"") + "" in project "") + (key.getProject().get())) + "" on commit "") + (key.getCommit().name())) + "" for path "") + (key.getPath())) + "" comparing "") + (key.getBlobA().name())) + "".."") + (key.getBlobB().name()))); result.cancel(true); return new com.google.gerrit.server.patch.IntraLineDiff(IntraLineDiff.Status.TIMEOUT); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.lang.Exception.class); throw new java.lang.Exception(e.getMessage(), e.getCause()); } }",f38ad1c2ff875da0a5013f8f8d1b3b40b03b27d1,load(com.google.gerrit.server.patch.IntraLineDiffKey),151429,441,402
71870,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListLoader.java,6.0,private static org.eclipse.jgit.diff.RawTextComparator comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws) { switch (ws) { case IGNORE_ALL_SPACE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL; case IGNORE_SPACE_AT_EOL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING; case IGNORE_SPACE_CHANGE : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT; } },c60022701a5fb11a46b504a89f4f9ec6514494de,private static org.eclipse.jgit.diff.RawTextComparator comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws) { switch (ws) { case IGNORE_ALL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL; case IGNORE_AT_LINE_END : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING; case IGNORE_LEADING_AND_END : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT; } },67c42fd696017cf0da910c9fce5ce22aa5cf70ea,comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace),comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace),5,6,private static org.eclipse.jgit.diff.RawTextComparator comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace ws) { switch (ws) { case IGNORE_ALL : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_ALL; case IGNORE_TRAILING : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_TRAILING; case IGNORE_LEADING_AND_TRAILING : return org.eclipse.jgit.diff.RawTextComparator.WS_IGNORE_CHANGE; case IGNORE_NONE : default : return org.eclipse.jgit.diff.RawTextComparator.DEFAULT; } },bbe672c11b10f02a496ad0fa69d05a6b8a230eaf,comparatorFor(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace),150151,162,160
154472,java_com_google_gerrit_server_mail_send_OutgoingEmail.java,25.0,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.get(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) + "" #"") + accountId; } }",b35652bea7ac0974dc423bb9d0aac26166b11828,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.server.account.AccountState who = args.accountCache.getEvenIfMissing(accountId); java.lang.String name = who.getAccount().getFullName(); java.lang.String email = who.getAccount().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } else { return ((args.anonymousCowardName) + "" #"") + accountId; } }",e5b5f6ba4454556d3cf24ae39654ff7f1bac2058,getNameEmailFor(com.google.gerrit.reviewdb.client.Account$Id),getNameEmailFor(com.google.gerrit.reviewdb.client.Account$Id),8,25,"public java.lang.String getNameEmailFor(com.google.gerrit.reviewdb.client.Account.Id accountId) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = args.accountCache.maybeGet(accountId).map(AccountState::getAccount); if (account.isPresent()) { java.lang.String name = account.get().getFullName(); java.lang.String email = account.get().getPreferredEmail(); if ((name != null) && (email != null)) { return ((name + "" <"") + email) + "">""; } else if (name != null) { return name; } else if (email != null) { return email; } } return ((args.anonymousCowardName) + "" #"") + accountId; }",feccb60c8c907fdb5baa2a8cc698bf25758d7de9,getNameEmailFor(com.google.gerrit.reviewdb.client.Account$Id),86352,157,176
61476,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListChildProjectsIT.java,3.0,"@org.junit.Test public void listNoChildren() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET(((""/projects/"" + (allProjects.get())) + ""/children/"")); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r); assertTrue(((projectInfoList.size()) == 2)); }",84df95718e9115a889d9f960ba79b9ac34ec8e8a,"@org.junit.Test public void listNoChildren() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET(((""/projects/"" + (allProjects.get())) + ""/children/"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r); assertThat(projectInfoList.size()).isEqualTo(2); }",2a57fbb9bb285194d3324ded8e72754186015bcd,listNoChildren(),listNoChildren(),6,3,"@org.junit.Test public void listNoChildren() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = GET(((""/projects/"" + (allProjects.get())) + ""/children/"")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); java.util.List<com.google.gerrit.extensions.common.ProjectInfo> projectInfoList = com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r); assertThat(projectInfoList).hasSize(2); }",2dae0d231bc452c838eecd2d6ddf744a74924c4c,listNoChildren(),119807,125,123
32552,gerrit-httpd_src_main_java_com_google_gerrit_httpd_GitOverHttpServlet.java,2.0,"@java.lang.Override public org.eclipse.jgit.transport.ReceivePack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository db) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); if (!((pc.getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser)) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (pc.getCurrentUser())); final com.google.gerrit.server.git.ReceiveCommits rc = factory.create(pc, db); rc.getReceivePack().setRefLogIdent(user.newRefLogIdent()); req.setAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_RC, rc); session.get().setAccessPath(AccessPath.GIT); return rc.getReceivePack(); }",b9b01c4ad216150a5337d846d74ea8ca7e2fadcb,"@java.lang.Override public org.eclipse.jgit.transport.ReceivePack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository db) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); if (!((pc.getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser)) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (pc.getCurrentUser())); final com.google.gerrit.server.git.ReceiveCommits rc = factory.create(pc, db); final org.eclipse.jgit.transport.ReceivePack rp = ((org.eclipse.jgit.transport.ReceivePack) (rc.getReceiveSession())); rp.setRefLogIdent(user.newRefLogIdent()); req.setAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_RC, rc); session.get().setAccessPath(AccessPath.GIT); return rp; }",6b7c82bc5bf6a06a4099b60c6ee14d38aa30b1c3,"create(javax.servlet.http.HttpServletRequest,org.eclipse.jgit.lib.Repository)","create(javax.servlet.http.HttpServletRequest,org.eclipse.jgit.lib.Repository)",11,2,"@java.lang.Override public org.eclipse.jgit.transport.ReceivePack create(javax.servlet.http.HttpServletRequest req, org.eclipse.jgit.lib.Repository db) throws org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException { final com.google.gerrit.server.project.ProjectControl pc = ((com.google.gerrit.server.project.ProjectControl) (req.getAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_CONTROL))); if (!((pc.getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser)) { throw new org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException(); } final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (pc.getCurrentUser())); final com.google.gerrit.server.git.ReceiveCommits rc = factory.create(pc, db); rc.getReceivePack().setRefLogIdent(user.newRefLogIdent()); req.setAttribute(com.google.gerrit.httpd.GitOverHttpServlet.ATT_RC, rc); session.get().setAccessPath(AccessPath.GIT); return rc.getReceivePack(); }",b9b01c4ad216150a5337d846d74ea8ca7e2fadcb,"create(javax.servlet.http.HttpServletRequest,org.eclipse.jgit.lib.Repository)",14107,307,277
8956,src_main_java_com_google_gerrit_server_AccountSecurityImpl.java,10.0,public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account me = db.accounts().get(com.google.gerrit.client.rpc.Common.getAccountId()); me.setFullName(fullName); me.setPreferredEmail(emailAddr); me.setContactInformation(info); db.accounts().update(java.util.Collections.singleton(me)); com.google.gerrit.client.rpc.Common.getAccountCache().invalidate(me.getId()); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; },67061a729cd0f8a06734ca08aeca178ffb95cb7a,"public com.google.gerrit.client.reviewdb.Account run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account me = db.accounts().get(com.google.gerrit.client.rpc.Common.getAccountId()); me.setFullName(fullName); me.setPreferredEmail(emailAddr); if ((com.google.gerrit.client.reviewdb.ContactInformation.hasAddress(info)) || ((me.isContactFiled()) && (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)))) { me.setContactFiled(); } if (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)) { try { com.google.gerrit.server.ContactInformationStore.store(me, info); } catch (ContactInformationStoreException e) { throw new com.google.gerrit.server.Failure(e); } } db.accounts().update(java.util.Collections.singleton(me)); com.google.gerrit.client.rpc.Common.getAccountCache().invalidate(me.getId()); return me; }",524a65e6f04cf9dafaa1038aa0b904d9129c9077,run(com.google.gerrit.client.reviewdb.ReviewDb),run(com.google.gerrit.client.reviewdb.ReviewDb),3,10,"public com.google.gerrit.client.reviewdb.Account run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.client.reviewdb.Account me = db.accounts().get(com.google.gerrit.client.rpc.Common.getAccountId()); me.setFullName(fullName); me.setPreferredEmail(emailAddr); if (com.google.gerrit.client.rpc.Common.getGerritConfig().isUseContactInfo()) { if ((com.google.gerrit.client.reviewdb.ContactInformation.hasAddress(info)) || ((me.isContactFiled()) && (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)))) { me.setContactFiled(); } if (com.google.gerrit.client.reviewdb.ContactInformation.hasData(info)) { try { com.google.gerrit.server.EncryptedContactStore.store(me, info); } catch (ContactInformationStoreException e) { throw new com.google.gerrit.server.Failure(e); } } } db.accounts().update(java.util.Collections.singleton(me)); com.google.gerrit.client.rpc.Common.getAccountCache().invalidate(me.getId()); return me; }",476e6b7e570389edeaf438f4bf4d20e10efc94a3,run(com.google.gerrit.client.reviewdb.ReviewDb),120522,292,319
47010,gerrit-server_src_test_java_com_google_gerrit_server_config_ListCapabilitiesTest.java,0.0,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(""startreplication"")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return ""startReplication""; } @java.lang.Override public java.lang.String getDescription() { return ""Start Replication""; } }); }",c7fe1209da0aa5d29ffb38dbc6599a7d24a91603,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(""printHello"")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return ""printHello""; } @java.lang.Override public java.lang.String getDescription() { return ""Print Hello""; } }); }",502601eac8f062bc4dbe7d80edba3dae168e217b,configure(),configure(),7,0,"@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.extensions.config.CapabilityDefinition.class); bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(""printHello"")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getDescription() { return ""Print Hello""; } }); }",4d7cafa6d098b96ff9e480ba16104e8affa15dde,configure(),170015,158,128
66599,gerrit-server_src_main_java_com_google_gerrit_server_account_StarredChanges.java,6.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.StarredChange rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed remove starred change""); } dbProvider.get().starredChanges().delete(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), rsrc.getChange().getId())))); return com.google.gerrit.extensions.restapi.Response.none(); }",6e93ae40df30fc2f262a2de4aa4a772fa4a8a9d4,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.StarredChange rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed remove starred change""); } dbProvider.get().starredChanges().delete(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), rsrc.getChange().getId())))); rsrc.getUser().clearStarredChanges(); return com.google.gerrit.extensions.restapi.Response.none(); }",d35c46d5297d848c5be34cc3828369dbd624e88c,"apply(com.google.gerrit.server.account.AccountResource$StarredChange,com.google.gerrit.server.account.StarredChanges$EmptyInput)","apply(com.google.gerrit.server.account.AccountResource$StarredChange,com.google.gerrit.server.account.StarredChanges$EmptyInput)",4,6,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource.StarredChange rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed remove starred change""); } dbProvider.get().starredChanges().delete(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), rsrc.getChange().getId())))); return com.google.gerrit.extensions.restapi.Response.none(); }",6e93ae40df30fc2f262a2de4aa4a772fa4a8a9d4,"apply(com.google.gerrit.server.account.AccountResource$StarredChange,com.google.gerrit.server.account.StarredChanges$EmptyInput)",40721,232,222
74403,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,16.0,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> draftByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.DRAFT)); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByChangeAuthor(db, notes, account)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }",d3da69948fef0c0b0da7cf6ff674e8ee3bb502c0,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> draftByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.DRAFT)); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); java.lang.Iterable<org.eclipse.jgit.lib.Ref> filtered = getDraftRefs(notes.getChangeId()); for (org.eclipse.jgit.lib.Ref ref : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(ref.getName()); if (account != null) { comments.addAll(draftByChangeAuthor(db, notes, account)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }",1ac01e152c246a0b1760fc31c2825f22e8eac6a1,"draftByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)","draftByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",5,16,"public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> draftByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.DRAFT)); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); for (java.lang.String refSuffix : getDraftRefs(notes.getChangeId()).keySet()) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refSuffix); if (account != null) { comments.addAll(draftByChangeAuthor(db, notes, account)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }",0d1599fdd2ee292773be9de8b4ba022ccdde8399,"draftByChange(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes)",105112,300,277
19442,gerrit-server_src_test_java_com_google_gerrit_testutil_InMemoryDatabase.java,2.0,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.client.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.ReviewDb c = open(); try { new com.google.gerrit.server.schema.SchemaCreator(new java.io.File("".""), schemaVersion).create(c); } finally { c.close(); } } return this; }",76a7740fbe4169078fa3343e7f68b0833e35c0e4,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.client.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.ReviewDb c = open(); try { try { new com.google.gerrit.server.schema.SchemaCreator(new java.io.File("".""), schemaVersion, null).create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.client.OrmException(""Cannot create in-memory database"", e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.client.OrmException(""Cannot create in-memory database"", e); } } finally { c.close(); } } return this; }",502cd30cd24b40eca34b928bf28fa586781952b7,create(),create(),12,3,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.client.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.ReviewDb c = open(); try { try { new com.google.gerrit.server.schema.SchemaCreator(new java.io.File("".""), schemaVersion, null, new org.eclipse.jgit.lib.PersonIdent(""name"", ""email@site"")).create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.client.OrmException(""Cannot create in-memory database"", e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.client.OrmException(""Cannot create in-memory database"", e); } } finally { c.close(); } } return this; }",c583ac175723fbebb602b341ac4f12cc4ea4f5cf,create(),177059,183,203
60044,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gwt.uibinder.client.UiHandler(""followUp"") void onFollowUp(com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, project, branch, key, changeId); } followUpAction.show(); }",1d35798029b33a6acc54d5a05ef27cb4ac49c040,,onFollowUp(com.google.gwt.event.dom.client.ClickEvent),7,10,"@com.google.gwt.uibinder.client.UiHandler(""followUp"") void onFollowUp(com.google.gwt.event.dom.client.ClickEvent e) { if ((followUpAction) == null) { followUpAction = new com.google.gerrit.client.change.FollowUpAction(followUp, project, branch, key); } followUpAction.show(); }",432350ac709b55a443d19aaa2e4cff5ea070f0eb,onFollowUp(com.google.gwt.event.dom.client.ClickEvent),202686,90,87
51048,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitPluginStepsLoader.java,0.0,@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(pluginName); },7165badd3163fb1009e18071b4bf7df5170674a1,@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(pluginName); bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginCanonicalWebUrl.class).toInstance(pluginUrl); },07bfea9aee11cba8c450d747e9afdfe162cc287e,configure(),configure(),12,0,@java.lang.Override protected void configure() { bind(java.lang.String.class).annotatedWith(com.google.gerrit.extensions.annotations.PluginName.class).toInstance(pluginName); },7165badd3163fb1009e18071b4bf7df5170674a1,configure(),89404,82,46
87093,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RevisionNote.java,5.0,"private static boolean isJson(byte[] raw, int offset) { return ((raw[offset]) == '{') || ((raw[offset]) == '['); }",e8870c9328441edb791a969920696a7664a9371f,"protected abstract java.util.List<? extends com.google.gerrit.reviewdb.client.Comment> parse(byte[] raw, int offset) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException;",882ef28aa21320167cbccdda3be7fb9499bf6d9a,"isJson(byte[],int)","parse(byte[],int)",12,1,"protected abstract java.util.List<T> parse(byte[] raw, int offset) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException;",4e9d5ef0756f3e3dcaa60e4c525a9b9e3ed4c7e6,"parse(byte[],int)",56096,53,39
72417,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,,,,@java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(java.lang.String changeId) { return Change.Id.parse(changeId); },36a3e11f4f23124e5a8742a0efde31b09827241a,,apply(java.lang.String),11,6,@java.lang.Override public Change.Id apply(java.lang.String changeId) { return Change.Id.parse(changeId); },d5a2842de075a789f45815d1702dbaf2a80fbdf2,apply(java.lang.String),59032,45,32
4840,webapp_src_com_google_gerrit_client_SignInDialog.java,4.0,static void postSignIn(final boolean success) { final com.google.gerrit.client.SignInDialog d = com.google.gerrit.client.SignInDialog.current; assert d != null; if (success) { com.google.gerrit.client.Gerrit.postSignIn(); d.hide(); if ((d.callback) != null) { d.callback.onSuccess(null); } } else { d.hide(); } },a48413c01342110d3c5359bb2382508325ae9e91,static void postSignIn(final boolean success) { final com.google.gerrit.client.SignInDialog d = com.google.gerrit.client.SignInDialog.current; assert d != null; if (success) { com.google.gerrit.client.Gerrit.postSignIn(); d.hide(); if ((d.callback) != null) { com.google.gwt.user.client.DeferredCommand.addCommand(new com.google.gwt.user.client.Command() { public void execute() { d.callback.onSuccess(null); } }); } } else { d.hide(); } },b324ee229c128a0d8e7f48e84309ffd96df83339,postSignIn(boolean),postSignIn(boolean),2,3,static void postSignIn(final boolean success) { final com.google.gerrit.client.SignInDialog d = com.google.gerrit.client.SignInDialog.current; assert d != null; if (success) { com.google.gerrit.client.Gerrit.postSignIn(); d.hide(); final com.google.gwt.user.client.rpc.AsyncCallback<?> ac = d.callback; if (ac != null) { com.google.gwt.user.client.DeferredCommand.addCommand(new com.google.gwt.user.client.Command() { public void execute() { ac.onSuccess(null); } }); } } else { d.hide(); } },9345b5b6d4c5ae5aa3bcc9c73f667fc9ab98f218,postSignIn(boolean),60358,139,157
69464,src_main_java_com_googlesource_gerrit_plugins_refprotection_RefUpdateListener.java,3.0,"@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if ((isRefDeleted(event)) || (isNonFastForwardUpdate(event, project))) { createBackupBranch(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }",ec1a8581d2b063ba1434f6cf71c862f7611cfceb,"@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if ((isRefDeleted(event)) || (isNonFastForwardUpdate(event, project))) { backupBranch.createBackup(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }",82adbe612c0c45b7a613bf9a512aa016291bd82b,onGitReferenceUpdated(com.googlesource.gerrit.plugins.refprotection.Event),onGitReferenceUpdated(com.googlesource.gerrit.plugins.refprotection.Event),4,3,"@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if ((isRefDeleted(event)) || (isNonFastForwardUpdate(event, project))) { backupRef.createBackup(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }",d94fda915039c393075e538fb939022958ec32ab,onGitReferenceUpdated(com.googlesource.gerrit.plugins.refprotection.Event),51879,215,215
61090,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,6.0,boolean isSingleProjectMatch() { boolean ret = (projects.length) == 1; if (ret) { java.lang.String projectMatch = projects[0]; if ((com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) || (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch))) { ret = false; } } return ret; },4d8c5cdfe25af48adab6f5b11cfa9e282b3cafc1,boolean isSingleProjectMatch() { boolean ret = (projects.length) == 1; if (ret) { java.lang.String projectMatch = projects[0]; if ((com.googlesource.gerrit.plugins.replication.ReplicationFilter.isRE(projectMatch)) || (com.googlesource.gerrit.plugins.replication.ReplicationFilter.isWildcard(projectMatch))) { ret = false; } } return ret; },85630803e9922221db3086b49613766c324067fa,isSingleProjectMatch(),isSingleProjectMatch(),8,6,boolean isSingleProjectMatch() { boolean ret = (projects.length) == 1; if (ret) { java.lang.String projectMatch = projects[0]; if ((com.googlesource.gerrit.plugins.replication.ReplicationFilter.getPatternType(projectMatch)) != (ReplicationFilter.PatternType.EXACT_MATCH)) { ret = false; } } return ret; },fff124051dbb237e7e86c1cdbe15ae782d4ebec3,isSingleProjectMatch(),119317,90,81
154071,java_com_google_gerrit_server_restapi_account_SetEditPreferences.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update(""Set Diff Preferences via API"", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }",85aaa7feeb8246e4f4fa208d9ed509a9ff961458,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdateProvider.get().update(""Set Diff Preferences via API"", id, ( u) -> u.setEditPreferences(input)); return accountCache.get(id).getEditPreferences(); }",0404547ba91da69e5862ec45fb1f6d21983c1288,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.EditPreferencesInfo)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.EditPreferencesInfo)",3,0,"@java.lang.Override public com.google.gerrit.extensions.client.EditPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.EditPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""input must be provided""); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update(""Set Edit Preferences via API"", id, ( u) -> u.setEditPreferences(input)).map(AccountState::getEditPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }",f9bbb9645abe366b422a3b7344051515b827b643,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.client.EditPreferencesInfo)",113878,277,301
71881,gitiles-servlet_src_test_java_com_google_gitiles_LogServletTest.java,1.0,"@org.junit.Test public void treeDiffLog() throws java.lang.Exception { java.lang.String contents1 = ""foo\n""; java.lang.String contents2 = ""foo\ncontents\n""; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update(""master"", repo.commit().add(""foo"", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update(""master"", repo.commit().parent(c1).add(""foo"", contents2)); repo.getRevWalk().parseBody(c1); repo.getRevWalk().parseBody(c2); Log log = buildJson(""/repo/+log/master"", com.google.gitiles.LogServletTest.LOG.getType(), ""&name-status=1""); assertThat(log.log).hasSize(2); Commit jc2 = log.log.get(0); verifyJsonCommit(jc2, c2); assertThat(jc2.treeDiff).hasSize(1); assertThat(jc2.treeDiff.get(0).type).isEqualTo(""modify""); assertThat(jc2.treeDiff.get(0).oldPath).isEqualTo(""foo""); assertThat(jc2.treeDiff.get(0).newPath).isEqualTo(""foo""); Commit jc1 = log.log.get(1); verifyJsonCommit(jc1, c1); assertThat(jc1.treeDiff).hasSize(1); assertThat(jc1.treeDiff.get(0).type).isEqualTo(""add""); assertThat(jc1.treeDiff.get(0).oldPath).isEqualTo(""/dev/null""); assertThat(jc1.treeDiff.get(0).newPath).isEqualTo(""foo""); }",3cecb27c6ebbc4f05e1beb518e24d62af1b39051,"@org.junit.Test public void treeDiffLog() throws java.lang.Exception { java.lang.String contents1 = ""foo\n""; java.lang.String contents2 = ""foo\ncontents\n""; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update(""master"", repo.commit().add(""foo"", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update(""master"", repo.commit().parent(c1).add(""foo"", contents2)); repo.getRevWalk().parseBody(c1); repo.getRevWalk().parseBody(c2); Log log = buildJson(""/repo/+log/master"", com.google.gitiles.LogServletTest.LOG, ""&name-status=1""); assertThat(log.log).hasSize(2); Commit jc2 = log.log.get(0); verifyJsonCommit(jc2, c2); assertThat(jc2.treeDiff).hasSize(1); assertThat(jc2.treeDiff.get(0).type).isEqualTo(""modify""); assertThat(jc2.treeDiff.get(0).oldPath).isEqualTo(""foo""); assertThat(jc2.treeDiff.get(0).newPath).isEqualTo(""foo""); Commit jc1 = log.log.get(1); verifyJsonCommit(jc1, c1); assertThat(jc1.treeDiff).hasSize(1); assertThat(jc1.treeDiff.get(0).type).isEqualTo(""add""); assertThat(jc1.treeDiff.get(0).oldPath).isEqualTo(""/dev/null""); assertThat(jc1.treeDiff.get(0).newPath).isEqualTo(""foo""); }",f6a4b9388f88b0764162246d1e80a0e6414dd5d3,treeDiffLog(),treeDiffLog(),5,1,"@org.junit.Test public void treeDiffLog() throws java.lang.Exception { java.lang.String contents1 = ""foo\n""; java.lang.String contents2 = ""foo\ncontents\n""; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update(""master"", repo.commit().add(""foo"", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update(""master"", repo.commit().parent(c1).add(""foo"", contents2)); Log response = buildJson(""/repo/+log/master"", com.google.gitiles.LogServletTest.LOG, ""&name-status=1""); assertThat(response.log).hasSize(2); Commit jc2 = response.log.get(0); verifyJsonCommit(jc2, c2); assertThat(jc2.treeDiff).hasSize(1); assertThat(jc2.treeDiff.get(0).type).isEqualTo(""modify""); assertThat(jc2.treeDiff.get(0).oldPath).isEqualTo(""foo""); assertThat(jc2.treeDiff.get(0).newPath).isEqualTo(""foo""); Commit jc1 = response.log.get(1); verifyJsonCommit(jc1, c1); assertThat(jc1.treeDiff).hasSize(1); assertThat(jc1.treeDiff.get(0).type).isEqualTo(""add""); assertThat(jc1.treeDiff.get(0).oldPath).isEqualTo(""/dev/null""); assertThat(jc1.treeDiff.get(0).newPath).isEqualTo(""foo""); }",414a4b6e988a7d6a7d91e2257ac9b37ef31f09b8,treeDiffLog(),154345,342,320
148033,java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,87.0,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, listChildProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",34a848a5ded992c1b6131a717a1f14813cd722dc,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjectLister, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",76a135915e6050d9bceac7b940b9f3d5a4d705c6,asUser(com.google.gerrit.server.CurrentUser),asUser(com.google.gerrit.server.CurrentUser),10,87,"com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments asUser(com.google.gerrit.server.CurrentUser otherUser) { return new com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments(db, queryProvider, rewriter, opFactories, hasOperands, userFactory, com.google.inject.util.Providers.of(otherUser), permissionBackend, notesFactory, changeDataFactory, commentsUtil, accountResolver, groupBackend, allProjectsName, allUsersName, patchListCache, repoManager, projectCache, childProjects, submitDryRun, conflictsCache, index, indexConfig, listMembers, starredChangesUtil, accountCache, allowsDrafts, notesMigration); }",5598a4401fc0aeb6c2af128b2139ec97f111b3ce,asUser(com.google.gerrit.server.CurrentUser),110621,159,157
57829,src_main_java_com_googlesource_gerrit_plugins_quota_MaxRepositorySizeQuota.java,0.0,"static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { protected void configure() { persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class).loader(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class).expireAfterWrite(1, java.util.concurrent.TimeUnit.DAYS); } }; }",7288af1a8216a62f55dc18f3bc5c5932ba4b5d49,"static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { protected void configure() { persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class).loader(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class).expireAfterWrite(1, java.util.concurrent.TimeUnit.DAYS); persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.PUSH_COUNT_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class); persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.FETCH_COUNT_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class); } }; }",91541ac4fe55c652853448e66adb1c2099b1b087,module(),module(),20,0,"static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { protected void configure() { persist(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.REPO_SIZE_CACHE, Project.NameKey.class, java.util.concurrent.atomic.AtomicLong.class).loader(com.googlesource.gerrit.plugins.quota.MaxRepositorySizeQuota.Loader.class).expireAfterWrite(1, java.util.concurrent.TimeUnit.DAYS); } }; }",7288af1a8216a62f55dc18f3bc5c5932ba4b5d49,module(),50563,211,119
76892,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,81.0,"com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther(com.google.gerrit.client.diff.DisplaySide side, int line) { return getChunkManager().getLineMapper().lineOnOther(side, line); }",fde39b8d57f436f7f90f7ee9164a5179574b2679,"com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther(com.google.gerrit.client.diff.DisplaySide side, int line) { return getChunkManager().mapper.lineOnOther(side, line); }",a75b50210581864418f00be8929b1a9ddfa7066e,"lineOnOther(com.google.gerrit.client.diff.DisplaySide,int)","lineOnOther(com.google.gerrit.client.diff.DisplaySide,int)",4,81,"com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo lineOnOther(com.google.gerrit.client.diff.DisplaySide side, int line) { return getChunkManager().lineMapper.lineOnOther(side, line); }",c05e1a25cdb6a4557a1774bafab6c99ee1a78cfd,"lineOnOther(com.google.gerrit.client.diff.DisplaySide,int)",135575,57,58
59915,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,0.0,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try (com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change, rev, walk, repoManager)) { parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); this.allPastReviewers = com.google.common.collect.ImmutableList.copyOf(parser.allPastReviewers); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }",745e2e613e1325bca3e04996c77145d60dca54f1,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try (com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change, rev, walk, repoManager)) { parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; if ((parser.hashtags) != null) { hashtags = com.google.common.collect.ImmutableSet.copyOf(parser.hashtags); } ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); this.allPastReviewers = com.google.common.collect.ImmutableList.copyOf(parser.allPastReviewers); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }",d00723689b6204a5e949362ae624007d95a30e72,onLoad(),onLoad(),10,0,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try (com.google.gerrit.server.notedb.ChangeNotesParser parser = new com.google.gerrit.server.notedb.ChangeNotesParser(change, rev, walk, repoManager)) { parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; if ((parser.hashtags) != null) { hashtags = com.google.common.collect.ImmutableSet.copyOf(parser.hashtags); } else { hashtags = com.google.common.collect.ImmutableSet.of(); } ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); this.allPastReviewers = com.google.common.collect.ImmutableList.copyOf(parser.allPastReviewers); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }",703b7925ceb08e32c47ec64315308b80c6cf96ae,onLoad(),60554,479,498
56486,gerrit-server_src_main_java_com_google_gerrit_server_api_accounts_AccountsImpl.java,,,,"@java.lang.Override public com.google.gerrit.extensions.accounts.AccountApi id(java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return api.create(accounts.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot parse change"", e); } }",f15db6cbb29fac9098adac5e97835e4e3ea97f44,,id(java.lang.String),4,0,"@java.lang.Override public com.google.gerrit.extensions.api.accounts.AccountApi id(java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException { try { return api.create(accounts.parse(TopLevelResource.INSTANCE, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot parse change"", e); } }",ae8f6765a35c3410dcfdca06120dbcca6c163e2e,id(java.lang.String),176111,124,126
60090,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,3.0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.maxSuggestedReviewers"", value = ""2"") public void suggestReviewersMaxNbrSuggestions() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""user"", 5); assertEquals(2, reviewers.size()); }",5c5a8c2909694becff4e61efdc61c0954befa354,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.maxSuggestedReviewers"", value = ""2"") public void suggestReviewersMaxNbrSuggestions() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""user"", 5); assertEquals(2, reviewers.size()); }",cff178439594899155129b2bad80177292899209,suggestReviewersMaxNbrSuggestions(),suggestReviewersMaxNbrSuggestions(),5,3,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""suggest.maxSuggestedReviewers"", value = ""2"") public void suggestReviewersMaxNbrSuggestions() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, ""user"", 5); assertThat(reviewers).hasSize(2); }",018bc12e845441926e7d52535ef23b8d5f5e2039,suggestReviewersMaxNbrSuggestions(),90642,112,114
63481,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,6.0,"com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.git.InsertException> insertPatchSet() throws java.io.IOException { rp.getRevWalk().parseBody(newCommit); final java.lang.Thread caller = java.lang.Thread.currentThread(); com.google.common.util.concurrent.ListenableFuture<com.google.gerrit.reviewdb.client.PatchSet.Id> future = changeUpdateExector.submit(requestScopePropagator.wrap(new java.util.concurrent.Callable<com.google.gerrit.reviewdb.client.PatchSet.Id>() { @java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } } })); return com.google.common.util.concurrent.Futures.makeChecked(future, com.google.gerrit.server.git.ReceiveCommits.INSERT_EXCEPTION); }",42b13bd0836171324f745c262071ae388889f73f,"com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.git.InsertException> insertPatchSet() throws java.io.IOException { rp.getRevWalk().parseBody(newCommit); final java.lang.Thread caller = java.lang.Thread.currentThread(); com.google.common.util.concurrent.ListenableFuture<com.google.gerrit.reviewdb.client.PatchSet.Id> future = changeUpdateExector.submit(requestScopePropagator.wrap(new java.util.concurrent.Callable<com.google.gerrit.reviewdb.client.PatchSet.Id>() { @java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if ((caller == (java.lang.Thread.currentThread())) || (magicBranch.edit)) { return magicBranch.edit ? upsertEdit() : insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } } })); return com.google.common.util.concurrent.Futures.makeChecked(future, com.google.gerrit.server.git.ReceiveCommits.INSERT_EXCEPTION); }",32437aede1696877fca59c0a4cb559fce2caf2a2,insertPatchSet(),insertPatchSet(),13,6,"com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.server.git.InsertException> insertPatchSet() throws java.io.IOException { rp.getRevWalk().parseBody(newCommit); final java.lang.Thread caller = java.lang.Thread.currentThread(); com.google.common.util.concurrent.ListenableFuture<com.google.gerrit.reviewdb.client.PatchSet.Id> future = changeUpdateExector.submit(requestScopePropagator.wrap(new java.util.concurrent.Callable<com.google.gerrit.reviewdb.client.PatchSet.Id>() { @java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (magicBranch.edit) { return upsertEdit(); } else if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } } })); return com.google.common.util.concurrent.Futures.makeChecked(future, com.google.gerrit.server.git.ReceiveCommits.INSERT_EXCEPTION); }",622fd4b98034f7e7a0fedd7738f7e24d31a22a57,insertPatchSet(),5057,352,348
10421,src_main_java_com_google_gerrit_client_changes_ChangeListServiceImpl.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void changesCreatedBy(final java.lang.String userName, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.SingleListChangeInfo> callback) { run(callback, new com.google.gerrit.client.changes.ChangeListServiceImpl.UserNameAction(userName) { @java.lang.Override void process(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gerrit.client.data.AccountInfoCacheFactory ac, com.google.gerrit.client.reviewdb.Account account, java.util.Map<com.google.gerrit.client.reviewdb.Change.Id, com.google.gerrit.client.reviewdb.Change> resultChanges) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.client.reviewdb.Change> changes = com.google.gerrit.client.changes.ChangeListServiceImpl.createdBy(db, account.getId()); ac.want(account.getId()); for (com.google.gerrit.client.reviewdb.Change change : changes) { resultChanges.put(change.getId(), change); } } }); }",f4616e946255a682ce54f57850c38acae60f98c3,,"changesCreatedBy(java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",5,2,"private java.util.List<com.google.gerrit.client.reviewdb.Change> changesCreatedBy(final com.google.gerrit.client.reviewdb.ReviewDb db, final java.lang.String userName) throws com.google.gwtorm.client.OrmException { final java.util.List<com.google.gerrit.client.reviewdb.Change> resultChanges = new java.util.ArrayList<com.google.gerrit.client.reviewdb.Change>(); for (com.google.gerrit.client.reviewdb.Account.Id account : com.google.gerrit.client.changes.ChangeListServiceImpl.getAccountSources(db, userName)) { for (com.google.gerrit.client.reviewdb.Change change : db.changes().byOwnerOpen(account)) { resultChanges.add(change); } for (com.google.gerrit.client.reviewdb.Change change : db.changes().byOwnerClosedAll(account)) { resultChanges.add(change); } } return resultChanges; }",a520722b577c876b4727b257a7361cdbc4bf8011,"changesCreatedBy(com.google.gerrit.client.reviewdb.ReviewDb,java.lang.String)",143209,285,243
100690,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,6.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (((addedReviewers) != null) || ((addedCCs) != null)) { if ((addedReviewers) == null) { addedReviewers = new java.util.ArrayList(); } if ((addedCCs) == null) { addedCCs = new java.util.ArrayList(); } emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), addedCCs, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Lists.transform(addedReviewers, ( psa) -> com.google.gerrit.server.change.accountCache.get(psa.getAccountId()).getAccount()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } } }",47c8e7bea2a9df57698bb976611c7f66a620afdb,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { if (((addedReviewers) != null) || ((addedCCs) != null)) { emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(((addedReviewers) == null ? com.google.common.collect.ImmutableList.of() : addedReviewers), ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, ((addedCCsByEmail) == null ? com.google.common.collect.ImmutableList.of() : addedCCsByEmail), notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Lists.transform(addedReviewers, ( psa) -> com.google.gerrit.server.change.accountCache.get(psa.getAccountId()).getAccount()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } } }",755bd768235d4b78bd0843e956649dd268e0c258,postUpdate(com.google.gerrit.server.update.Context),postUpdate(com.google.gerrit.server.update.Context),5,6,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.reviewdb.client.Account> reviewers = com.google.common.collect.Lists.transform(addedReviewers, ( psa) -> com.google.gerrit.server.change.accountCache.get(psa.getAccountId()).getAccount()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",badb1fede82bffcfa2cf46b79fef439ff5ddab27,postUpdate(com.google.gerrit.server.update.Context),87075,285,219
53021,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void addFooter(java.lang.StringBuilder sb, org.eclipse.jgit.revwalk.FooterKey footer, java.lang.Object key, java.lang.Object value) { sb.append(footer.getName()).append("": "").append(key).append('=').append(value).append('\n'); }",4df99ed1b20457f31bc7c4199a6124e9af418e5a,,"addFooter(java.lang.StringBuilder,org.eclipse.jgit.revwalk.FooterKey,java.lang.Object,java.lang.Object)",11,6,"private static java.lang.StringBuilder addFooter(java.lang.StringBuilder sb, org.eclipse.jgit.revwalk.FooterKey footer) { return sb.append(footer.getName()).append("": ""); }",6ed4bda1eca4bc96bd5540ed056704e3ec11d2f2,"addFooter(java.lang.StringBuilder,org.eclipse.jgit.revwalk.FooterKey)",23445,73,48
56170,gerrit-server_src_main_java_com_google_gerrit_server_plugins_ServerPlugin.java,4.0,"private java.util.jar.Manifest getPluginManifest(com.google.gerrit.server.plugins.PluginScanner scanner) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest(); } catch (java.io.IOException e) { throw new com.google.gerrit.server.plugins.InvalidPluginException(""Cannot get plugin manifest"", e); } }",cc3c3728705e284565b723e90e0d2629bdca530b,"private static java.util.jar.Manifest getPluginManifest(com.google.gerrit.server.plugins.PluginScanner scanner) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest(); } catch (java.io.IOException e) { throw new com.google.gerrit.server.plugins.InvalidPluginException(""Cannot get plugin manifest"", e); } }",b1a638daac5e24d2ca1daf8c573a48e7688b3723,getPluginManifest(com.google.gerrit.server.plugins.PluginScanner),getPluginManifest(com.google.gerrit.server.plugins.PluginScanner),34,12,"private static java.util.jar.Manifest getPluginManifest(com.google.gerrit.server.plugins.PluginContentScanner scanner) throws com.google.gerrit.server.plugins.InvalidPluginException { try { return scanner.getManifest(); } catch (java.io.IOException e) { throw new com.google.gerrit.server.plugins.InvalidPluginException(""Cannot get plugin manifest"", e); } }",a8582c49967c267c6c58e1051d9cea405ea2d981,getPluginManifest(com.google.gerrit.server.plugins.PluginContentScanner),54600,89,90
141971,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_ValidatorConfig.java,7.0,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) { if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }",a06dbb7771049bf24084363d2b02d905b75c0b28,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, @com.google.gerrit.common.Nullable java.lang.String value, boolean allowRegex, boolean refMatcher) { boolean match = true; for (java.lang.String s : config.getStringList(criteria)) { if (value == null) { return false; } if ((allowRegex && (com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher))) || ((!allowRegex) && (s.equals(value)))) { return true; } match = false; } return match; }",cd97caa9b941a40fce5ced70b05c0e0f87c64bb3,"matchCriteria(com.google.gerrit.server.config.PluginConfig,java.lang.String,java.lang.String,boolean,boolean)","matchCriteria(com.google.gerrit.server.config.PluginConfig,java.lang.String,java.lang.String,boolean,boolean)",2,7,"private boolean matchCriteria(com.google.gerrit.server.config.PluginConfig config, java.lang.String criteria, @com.google.gerrit.common.Nullable java.lang.String value, boolean allowRegex, boolean refMatcher) { java.lang.String[] c = config.getStringList(criteria); if ((c.length) == 0) { return true; } if (value == null) { return false; } if (allowRegex) { return java.util.Arrays.stream(c).anyMatch(( s) -> com.googlesource.gerrit.plugins.uploadvalidator.ValidatorConfig.match(value, s, refMatcher)); } return java.util.Arrays.asList(c).contains(value); }",5704e7d98f1919b757cdc3c313330d343b44b8eb,"matchCriteria(com.google.gerrit.server.config.PluginConfig,java.lang.String,java.lang.String,boolean,boolean)",176139,150,161
62798,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ConflictsOperatorIT.java,4.0,"@org.junit.Test public void noConflictingChanges() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(git, true); createChange(git, false); java.util.Set<java.lang.String> changes = queryConflictingChanges(change); assertEquals(0, changes.size()); }",f4d920a9ecf6d346317ab0c623e9ec74d3a3c493,"@org.junit.Test public void noConflictingChanges() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(git, true); createChange(git, false); java.util.Set<java.lang.String> changes = queryConflictingChanges(change); assertThat(changes).isEmpty(); }",db6acac27adf2f4893862916989c28ff5a7fe48c,noConflictingChanges(),noConflictingChanges(),3,4,"@org.junit.Test public void noConflictingChanges() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(git, true); createChange(git, false); java.util.Set<java.lang.String> changes = queryConflictingChanges(change); assertThat(((java.lang.Iterable<?>) (changes))).isEmpty(); }",673b7c9785e348126c1c0d1e0361d29af8c2602f,noConflictingChanges(),125459,80,88
167471,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_RestForwarder.java,4.0,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(((""delete change "" + changeId) + "" from index"")) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",d8781dfa82df1300d5406a10ed5b55fa9401ce12,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(""delete from index change "", changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",cf5dcde89100ec59eb0c985217b923e61bb1b1b3,deleteChangeFromIndex(int),deleteChangeFromIndex(int),6,5,"@java.lang.Override public boolean deleteChangeFromIndex(final int changeId) { return new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.Request(""delete change"", changeId) { @java.lang.Override com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult send() throws java.io.IOException { return httpSession.delete(buildIndexEndpoint(changeId)); } }.execute(); }",7701481b37d08f3e8b22444c5799b58cf27f54b7,deleteChangeFromIndex(int),37999,114,111
49162,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,42.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void savePluginSections(org.eclipse.jgit.lib.Config rc) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String>> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.keySet()) { rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, pluginConfig.get(name)); } } }",e54747714071302076fc30582a111599b01bc259,,savePluginSections(org.eclipse.jgit.lib.Config),17,15,"private void savePluginSections(org.eclipse.jgit.lib.Config rc) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }",48cbea9053df944c5af18a4d3283b0fb6e99eab1,savePluginSections(org.eclipse.jgit.lib.Config),206109,245,266
93323,src_main_java_com_googlesource_gerrit_plugins_secureconfig_SecureConfigStore.java,6.0,"@java.lang.Override public java.lang.String[] getList(java.lang.String section, java.lang.String subsection, java.lang.String name) { return java.util.Arrays.stream(sec.getStringList(section, subsection, name)).map(codec::decode).toArray(java.lang.String[]::new); }",b83cefddce4d5743ed1542d3b7c95845b0986d03,"@java.lang.Override public java.lang.String[] getList(java.lang.String section, java.lang.String subsection, java.lang.String name) { return com.google.common.collect.FluentIterable.from(java.util.Arrays.asList(sec.getStringList(section, subsection, name))).transform(decode).toArray(java.lang.String.class); }",f7c025ce5dd01c8d1d30ca2e9ed33305dfd33db5,"getList(java.lang.String,java.lang.String,java.lang.String)","getList(java.lang.String,java.lang.String,java.lang.String)",3,4,"@java.lang.Override public java.lang.String[] getList(java.lang.String section, java.lang.String subsection, java.lang.String name) { return com.google.common.collect.FluentIterable.from(java.util.Arrays.asList(sec.getStringList(section, subsection, name))).transform(codec.decodeFun).toArray(java.lang.String.class); }",13accc1d318385b663701c84b51e004d1988d060,"getList(java.lang.String,java.lang.String,java.lang.String)",46876,88,91
74743,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_CreateReviewNotes.java,9.0,"void createNotes(java.util.List<com.google.gerrit.reviewdb.client.Change> changes, org.eclipse.jgit.lib.ProgressMonitor monitor) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { if (monitor == null) { monitor = org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE; } for (com.google.gerrit.reviewdb.client.Change c : changes) { monitor.update(1); com.google.gerrit.reviewdb.client.PatchSet ps = reviewDb.patchSets().get(c.currentPatchSetId()); org.eclipse.jgit.lib.ObjectId commitId = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(commitId); getNotes().set(commitId, createNoteContent(ps)); getMessage().append(""* "").append(commit.getShortMessage()).append(""\n""); } } }",510825ae6210079024cbd9f623c8a2823091d392,"void createNotes(java.util.Collection<com.google.gerrit.reviewdb.client.Change> changes, org.eclipse.jgit.lib.ProgressMonitor monitor) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { if (monitor == null) { monitor = org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE; } for (com.google.gerrit.reviewdb.client.Change c : changes) { monitor.update(1); com.google.gerrit.reviewdb.client.PatchSet ps = reviewDb.patchSets().get(c.currentPatchSetId()); org.eclipse.jgit.lib.ObjectId commitId = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(commitId); getNotes().set(commitId, createNoteContent(ps)); getMessage().append(""* "").append(commit.getShortMessage()).append(""\n""); } } }",5825f802beb422a2721d29667535985576f19521,"createNotes(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)","createNotes(java.util.Collection,org.eclipse.jgit.lib.ProgressMonitor)",5,9,"void createNotes(java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes, org.eclipse.jgit.lib.ProgressMonitor monitor) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(git)) { if (monitor == null) { monitor = org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE; } for (com.google.gerrit.server.notedb.ChangeNotes cn : notes) { monitor.update(1); com.google.gerrit.reviewdb.client.PatchSet ps = reviewDb.patchSets().get(cn.getChange().currentPatchSetId()); org.eclipse.jgit.lib.ObjectId commitId = org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(commitId); getNotes().set(commitId, createNoteContent(cn, ps)); getMessage().append(""* "").append(commit.getShortMessage()).append(""\n""); } } }",90ad91d5c630eb47a52ae5d211e922af46d926da,"createNotes(java.util.List,org.eclipse.jgit.lib.ProgressMonitor)",55221,264,269
62130,gerrit-server_src_main_java_com_google_gerrit_server_change_Check.java,1.0,"@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = ""Error rendering final ChangeInfo""; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }",001f97c470f03c50ee64f796a08f64f7a4cdd028,"@java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) { java.util.List<com.google.gerrit.extensions.api.changes.ProblemInfo> problems = checkerProvider.get().check(rsrc.getChange()); com.google.gerrit.extensions.common.ChangeInfo result; try { result = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.extensions.api.changes.ProblemInfo p = new com.google.gerrit.extensions.api.changes.ProblemInfo(); p.message = ""Error rendering final ChangeInfo""; com.google.gerrit.server.change.Check.log.warn(p.message, e); problems.add(p); result = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } result.problems = problems; return result; }",804f9f8778a8b22ac9c9e4003bfacaaf73782f00,apply(com.google.gerrit.server.change.ChangeResource),apply(com.google.gerrit.server.change.ChangeResource),2,1,"@java.lang.Override public com.google.gerrit.extensions.common.ChangeInfo apply(com.google.gerrit.server.change.ChangeResource rsrc) { java.util.List<com.google.gerrit.extensions.common.ProblemInfo> problems = checkerProvider.get().check(rsrc.getChange()); com.google.gerrit.extensions.common.ChangeInfo result; try { result = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo(); p.message = ""Error rendering final ChangeInfo""; com.google.gerrit.server.change.Check.log.warn(p.message, e); problems.add(p); result = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } result.problems = problems; return result; }",bcd4c3f8acd60bfd92509f6d4e9040731b525f8f,apply(com.google.gerrit.server.change.ChangeResource),187468,234,225
109870,gerrit-server_src_main_java_com_google_gerrit_server_query_change_SubmitRecordPredicate.java,1.0,"public static com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(java.lang.String label, com.google.gerrit.common.data.SubmitRecord.Label.Status status, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts) { java.lang.String lowerLabel = label.toLowerCase(); if ((accounts == null) || (accounts.isEmpty())) { return new com.google.gerrit.server.query.change.SubmitRecordPredicate((((status.name()) + ',') + lowerLabel)); } return com.google.gerrit.server.query.Predicate.or(accounts.stream().map(( a) -> new com.google.gerrit.server.query.change.SubmitRecordPredicate((((((status.name()) + ',') + lowerLabel) + ',') + (a.get())))).collect(java.util.stream.Collectors.toList())); }",7b2f468a6891dac4f5fc9692468dc52ce8ced034,"public static com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments args, java.lang.String label, com.google.gerrit.common.data.SubmitRecord.Label.Status status, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts) { java.lang.String lowerLabel = label.toLowerCase(); if ((accounts == null) || (accounts.isEmpty())) { return new com.google.gerrit.server.query.change.SubmitRecordPredicate(args, (((status.name()) + ',') + lowerLabel)); } return com.google.gerrit.server.query.Predicate.or(accounts.stream().map(( a) -> new com.google.gerrit.server.query.change.SubmitRecordPredicate(args, (((((status.name()) + ',') + lowerLabel) + ',') + (a.get())))).collect(java.util.stream.Collectors.toList())); }",4f635c578355056b37a749c28de0d0647e1a0ab6,"create(java.lang.String,com.google.gerrit.common.data.SubmitRecord$Label$Status,java.util.Set)","create(com.google.gerrit.server.query.change.ChangeQueryBuilder.Arguments,java.lang.String,com.google.gerrit.common.data.SubmitRecord$Label$Status,java.util.Set)",2,2,"public static com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(java.lang.String label, com.google.gerrit.common.data.SubmitRecord.Label.Status status, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accounts) { java.lang.String lowerLabel = label.toLowerCase(); if ((accounts == null) || (accounts.isEmpty())) { return new com.google.gerrit.server.query.change.SubmitRecordPredicate((((status.name()) + ',') + lowerLabel)); } return com.google.gerrit.server.query.Predicate.or(accounts.stream().map(( a) -> new com.google.gerrit.server.query.change.SubmitRecordPredicate((((((status.name()) + ',') + lowerLabel) + ',') + (a.get())))).collect(java.util.stream.Collectors.toList())); }",7b2f468a6891dac4f5fc9692468dc52ce8ced034,"create(java.lang.String,com.google.gerrit.common.data.SubmitRecord$Label$Status,java.util.Set)",26356,250,225
99996,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_BlockedKeywordValidator.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void checkCommitMessageForBlockedKeywords(com.google.common.collect.ImmutableCollection<java.util.regex.Pattern> blockedKeywordPatterns, java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages, java.lang.String commitMessage) { int line = 0; for (java.lang.String l : commitMessage.split(""[\r\n]+"")) { line++; com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.checkLineForBlockedKeywords(blockedKeywordPatterns, messages, ""commit message"", line, l); } }",e3311b9cff7903a3fb710017fb9e789d565ba4a8,,"checkCommitMessageForBlockedKeywords(com.google.common.collect.ImmutableCollection,java.util.List,java.lang.String)",4,2,"private static void checkCommitMessageForBlockedKeywords(com.google.common.collect.ImmutableCollection<java.util.regex.Pattern> blockedKeywordPatterns, java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages, java.lang.String commitMessage) { int line = 0; for (java.lang.String l : commitMessage.split(""[\r\n]+"")) { line++; com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.checkLineForBlockedKeywords(blockedKeywordPatterns, messages, Patch.COMMIT_MSG, line, l); } }",0e0f17998222994f64093268b7b1a1df1bc30b81,"checkCommitMessageForBlockedKeywords(com.google.common.collect.ImmutableCollection,java.util.List,java.lang.String)",78158,135,138
76474,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshKeyCacheImpl.java,9.0,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); final com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } final java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : db.accountSshKeys().byAccount(user.getAccountId())) { if (k.isValid()) { add(db, kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",c8ad7ef9f17e7a94f455fb752f1af66ca389ece1,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); final com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } final java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : readSshKeys(db, user.getAccountId())) { if (k.isValid()) { add(db, kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",0873a6676aed40b0720e9ddc6cafc57aab5172c7,load(java.lang.String),load(java.lang.String),9,7,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.sshd.SshKeyCacheEntry> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, username); com.google.gerrit.reviewdb.client.AccountExternalId user = db.accountExternalIds().get(key); if (user == null) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_SUCH_USER; } java.util.List<com.google.gerrit.sshd.SshKeyCacheEntry> kl = new java.util.ArrayList<>(4); for (com.google.gerrit.reviewdb.client.AccountSshKey k : authorizedKeys.getKeys(user.getAccountId())) { if (k.isValid()) { add(kl, k); } } if (kl.isEmpty()) { return com.google.gerrit.sshd.SshKeyCacheImpl.NO_KEYS; } return java.util.Collections.unmodifiableList(kl); } }",b8fced5ca46bafa6a7e975c498b3f93aed3ca030,load(java.lang.String),84825,296,290
66191,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_projects_Projects.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },ae91065a7870c8df78624a2209e3365475375b5b,,create(com.google.gerrit.extensions.api.projects.ProjectInput),5,16,@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },2bf0f339964d10b6687bfe11487e345767b1f3c9,create(com.google.gerrit.extensions.api.projects.ProjectInput),175309,60,75
107391,src_main_java_com_googlesource_gerrit_plugins_gitiles_GitilesWeblinks.java,2.0,"@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format(""%s/%s"", baseUrl, projectName), target); }",3cd598a0577fe72d4e424523ecf8db994405fca4,"@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return noWebLinks ? null : new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format(""%s/%s"", baseUrl, projectName), target); }",8c6ab2d26818cbf9a57e64c5425f3d89daf4facc,getProjectWeblink(java.lang.String),getProjectWeblink(java.lang.String),2,2,"@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format(""%s/%s"", baseUrl, projectName), target); }",3cd598a0577fe72d4e424523ecf8db994405fca4,getProjectWeblink(java.lang.String),73346,82,75
115070,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,5.0,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, boolean strict, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } itr.remove(); continue; } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { if (strict) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } itr.remove(); continue; } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (strict) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } ent.setValue(perm.squashThenCheck(lt, val)); } } }",151429828a38bbcf9915f4f6f89749f81df2bff3,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.common.data.LabelTypes types = rsrc.getControl().getLabelTypes(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = types.byLabel(ent.getKey()); if (lt == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } } }",c425b1143b490c00e7aa1cff5e2f537f3409430c,"checkLabels(com.google.gerrit.server.change.RevisionResource,boolean,java.util.Map)","checkLabels(com.google.gerrit.server.change.RevisionResource,java.util.Map)",6,45,"private void checkLabels(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.common.data.LabelTypes labelTypes, java.util.Map<java.lang.String, java.lang.Short> labels) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); java.util.Iterator<java.util.Map.Entry<java.lang.String, java.lang.Short>> itr = labels.entrySet().iterator(); while (itr.hasNext()) { java.util.Map.Entry<java.lang.String, java.lang.Short> ent = itr.next(); com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(ent.getKey()); if (lt == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"" is not a configured label"", ent.getKey())); } if (((ent.getValue()) == null) || ((ent.getValue()) == 0)) { continue; } if ((lt.getValue(ent.getValue())) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(""label \""%s\"": %d is not a valid value"", ent.getKey(), ent.getValue())); } short val = ent.getValue(); try { perm.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt, val)); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format(""Applying label \""%s\"": %d is restricted"", lt.getName(), val)); } } }",f85072d90fe3f2273b43c96dabf5f199f9019756,"checkLabels(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.common.data.LabelTypes,java.util.Map)",213346,467,461
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_PostTask.java,1.0,"com.googlesource.gerrit.plugins.webhooks.PostTask create(@com.google.inject.assistedinject.Assisted(""url"") java.lang.String url, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);",3a8c100903633391a2ac3fc2d285a61d1f165943,"com.googlesource.gerrit.plugins.webhooks.PostTask create(com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote, com.googlesource.gerrit.plugins.webhooks.EventProcessor processor);",b1a97aee4b59dd46fae819fcc763e8e40e0e4d85,"create(java.lang.String,com.googlesource.gerrit.plugins.webhooks.EventProcessor)","create(com.googlesource.gerrit.plugins.webhooks.RemoteConfig,com.googlesource.gerrit.plugins.webhooks.EventProcessor)",10,5,"com.googlesource.gerrit.plugins.webhooks.PostTask create(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote);",086045192d55671a4fa63a7e9d42a885fb3323b1,"create(com.google.gerrit.server.events.ProjectEvent,com.googlesource.gerrit.plugins.webhooks.RemoteConfig)",65292,54,51
80930,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbChangeState.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage getPrimaryStorage() { return primaryStorage; },41b90453fad35e9f604d08c711e431953aa4a9f4,,getPrimaryStorage(),8,9,public com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage getPrimaryStorage() { return primaryStorage; },90c8962cb59def4b88afe0b851cd4b643996ebdf,getPrimaryStorage(),157834,29,30
47325,gerrit-server_src_main_java_com_google_gerrit_server_index_IndexModule.java,1.0,"@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); bind(com.google.gerrit.server.query.change.IndexRewrite.class).to(com.google.gerrit.server.query.change.IndexRewriteImpl.class); bind(new com.google.inject.TypeLiteral<com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData>>() {}).toInstance(com.google.gerrit.server.index.ChangeSchemas.getLatestRelease()); com.google.gerrit.extensions.registration.DynamicSet.setOf(binder(), com.google.gerrit.server.index.ChangeIndex.class); com.google.gerrit.extensions.registration.DynamicItem.itemOf(binder(), com.google.gerrit.server.index.ChangeIndex.class); }",36faf92da5ff1f61844a85fa9f7a64776f725df3,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); bind(com.google.gerrit.server.query.change.IndexRewrite.class).to(com.google.gerrit.server.query.change.IndexRewriteImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); },97e0a1f833ad8b1e3f3cf52e798b8f37200311c3,configure(),configure(),9,0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(IndexRewriteImpl.BasicRewritesImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); },96ef06d422dea211406bd56eacc7d432d19fdf09,configure(),208794,128,140
67545,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,2.0,"public static void setCommentRevId(com.google.gerrit.reviewdb.client.PatchLineComment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) != null) { return; } com.google.gerrit.server.patch.PatchList patchList; try { patchList = cache.get(change, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } c.setRevId(((c.getSide()) == ((short) (0)) ? new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getOldId())) : new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getNewId())))); }",039a890567e9421776b5254ec4e95837021d74bb,"public static com.google.gerrit.reviewdb.client.RevId getRevId(com.google.gerrit.reviewdb.client.PatchLineComment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { try { com.google.gerrit.server.patch.PatchList patchList = cache.get(change, ps); c.setRevId(((c.getSide()) == ((short) (0)) ? new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getOldId())) : new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getNewId())))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } return c.getRevId(); }",c6a51792fe0d8033d80bd476f06fb4011b6a1d4a,"setCommentRevId(com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.server.patch.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)","getRevId(com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.server.patch.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",5,1,"public static com.google.gerrit.reviewdb.client.RevId setCommentRevId(com.google.gerrit.reviewdb.client.PatchLineComment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { try { com.google.gerrit.server.patch.PatchList patchList = cache.get(change, ps); c.setRevId(((c.getSide()) == ((short) (0)) ? new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getOldId())) : new com.google.gerrit.reviewdb.client.RevId(org.eclipse.jgit.lib.ObjectId.toString(patchList.getNewId())))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } return c.getRevId(); }",176f9a69f36ba0a10a2f45d898a54ccdda0462d6,"setCommentRevId(com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.server.patch.PatchListCache,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",141305,284,285
15873,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountServiceImpl.java,10.0,"public com.google.gerrit.common.data.AccountProjectWatchInfo run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.validateFor(nameKey); final com.google.gerrit.reviewdb.AccountProjectWatch watch = new com.google.gerrit.reviewdb.AccountProjectWatch(new com.google.gerrit.reviewdb.AccountProjectWatch.Key(((com.google.gerrit.server.IdentifiedUser) (ctl.getCurrentUser())).getAccountId(), nameKey)); db.accountProjectWatches().insert(java.util.Collections.singleton(watch)); return new com.google.gerrit.common.data.AccountProjectWatchInfo(watch, ctl.getProject()); }",642a8e92f2143b05c7c92d31655b18e7af6317cc,"public com.google.gerrit.common.data.AccountProjectWatchInfo run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.validateFor(nameKey); final com.google.gerrit.reviewdb.AccountProjectWatch watch = new com.google.gerrit.reviewdb.AccountProjectWatch(new com.google.gerrit.reviewdb.AccountProjectWatch.Key(((com.google.gerrit.server.IdentifiedUser) (ctl.getCurrentUser())).getAccountId(), nameKey, fileMatch)); db.accountProjectWatches().insert(java.util.Collections.singleton(watch)); return new com.google.gerrit.common.data.AccountProjectWatchInfo(watch, ctl.getProject()); }",2eaf598836be5372e4301ad97c8872deed66b454,run(com.google.gerrit.reviewdb.ReviewDb),run(com.google.gerrit.reviewdb.ReviewDb),2,14,"public com.google.gerrit.common.data.AccountProjectWatchInfo run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.InvalidQueryException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.validateFor(nameKey); if (filter != null) { try { com.google.gerrit.server.query.change.ChangeQueryBuilder builder = queryBuilder.create(currentUser.get()); builder.setAllowFile(true); builder.parse(filter); } catch (QueryParseException badFilter) { throw new com.google.gerrit.common.errors.InvalidQueryException(badFilter.getMessage(), filter); } } com.google.gerrit.reviewdb.AccountProjectWatch watch = new com.google.gerrit.reviewdb.AccountProjectWatch(new com.google.gerrit.reviewdb.AccountProjectWatch.Key(((com.google.gerrit.server.IdentifiedUser) (ctl.getCurrentUser())).getAccountId(), nameKey, filter)); try { db.accountProjectWatches().insert(java.util.Collections.singleton(watch)); } catch (OrmDuplicateKeyException alreadyHave) { watch = db.accountProjectWatches().get(watch.getKey()); } return new com.google.gerrit.common.data.AccountProjectWatchInfo(watch, ctl.getProject()); }",1506311c983227986d8ca4cb603e6268860f338e,run(com.google.gerrit.reviewdb.ReviewDb),125995,250,375
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void listen(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Listen"", def.className), err); } com.google.gerrit.extensions.annotations.Listen listen = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Listen.class); if (listen == null) { PluginLoader.log.warn(java.lang.String.format(""In plugin %s asm incorrectly parsed %s with @Listen"", pluginName, clazz.getName())); return; } listen(clazz, clazz); }",bbd529cfe067b5fa2636bf11f0fe4e8f482d2c04,,listen(com.google.gerrit.server.plugins.AutoRegisterModules$ClassData),6,10,"private void listen(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Listen"", def.className), err); } com.google.gerrit.extensions.annotations.Listen listen = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Listen.class); if (listen != null) { listen(clazz, clazz); } else { PluginLoader.log.warn(java.lang.String.format(""In plugin %s asm incorrectly parsed %s with @Listen"", pluginName, clazz.getName())); } }",9439731473e07dad1cbdb78897b274d91faedce3,listen(com.google.gerrit.server.plugins.AutoRegisterModules$ClassData),135372,205,206
47804,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_LibraryDownloader.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.io.File url2file(final java.lang.String urlString) throws java.io.IOException { java.io.File f; final java.net.URL url = new java.net.URL(urlString); try { f = new java.io.File(url.toURI()); } catch (java.net.URISyntaxException e) { f = new java.io.File(url.getPath()); } return f; },5a872ebf6a4ea55bc68342da275d2fc76d58c375,,url2file(java.lang.String),8,3,private static java.io.File url2file(final java.lang.String urlString) throws java.io.IOException { final java.net.URL url = new java.net.URL(urlString); try { return new java.io.File(url.toURI()); } catch (java.net.URISyntaxException e) { return new java.io.File(url.getPath()); } },ba51082724e4d1cd2a5133e3f5aba0b8fe772a18,url2file(java.lang.String),134260,96,85
77647,gerrit-server_src_main_java_com_google_gerrit_server_account_InternalAccountDirectory.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void addAvatar(com.google.gerrit.server.avatar.AvatarProvider provider, com.google.gerrit.extensions.common.AccountInfo info, com.google.gerrit.server.IdentifiedUser user, int size) { java.lang.String url = provider.getUrl(user, size); if (url != null) { com.google.gerrit.extensions.common.AvatarInfo a = new com.google.gerrit.extensions.common.AvatarInfo(); a.url = url; a.height = size; info.avatars.add(a); } }",b1c88fe7fa2bb8269fd2742a1a51a75972e9ce57,,"addAvatar(com.google.gerrit.server.avatar.AvatarProvider,com.google.gerrit.extensions.common.AccountInfo,com.google.gerrit.server.IdentifiedUser,int)",3,3,"private static void addAvatar(com.google.gerrit.server.avatar.AvatarProvider provider, com.google.gerrit.extensions.common.AccountInfo account, com.google.gerrit.server.IdentifiedUser user, int size) { java.lang.String url = provider.getUrl(user, size); if (url != null) { com.google.gerrit.extensions.common.AvatarInfo avatar = new com.google.gerrit.extensions.common.AvatarInfo(); avatar.url = url; avatar.height = size; account.avatars.add(avatar); } }",e69621b88a245220ff5aba8c70626bb91b065c70,"addAvatar(com.google.gerrit.server.avatar.AvatarProvider,com.google.gerrit.extensions.common.AccountInfo,com.google.gerrit.server.IdentifiedUser,int)",51040,129,132
76971,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffScreen.java,71.0,"java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.vim().hasSearchHighlight()) { cm.vim().handleKey(""n""); } else { getChunkManager().diffChunkNav(cm, Direction.NEXT).run(); } } }; }",1f9edb478b94a78ceb5ba8d844bc686b474d7498,"java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.vim().hasSearchHighlight()) { cm.vim().handleKey(""N""); } else { getChunkManager().diffChunkNav(cm, Direction.NEXT).run(); } } }; }",04873ae977ebb80ffbb91ef7b6dc376f2cc034bb,maybeNextVimSearch(net.codemirror.lib.CodeMirror),maybeNextVimSearch(net.codemirror.lib.CodeMirror),5,71,"java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.vim().hasSearchHighlight()) { cm.vim().handleKey(""n""); } else { getChunkManager().diffChunkNav(cm, Direction.NEXT).run(); } } }; }",1f9edb478b94a78ceb5ba8d844bc686b474d7498,maybeNextVimSearch(net.codemirror.lib.CodeMirror),17040,88,88
105095,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_BranchApiImpl.java,3.0,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply(resource(), new com.google.gerrit.server.project.DeleteBranch.Input()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete branch"", e); } }",1dff23b64e8af1648eaa491aa5f07364ce201bcd,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply(resource(), new com.google.gerrit.server.project.DeleteBranch.Input()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete branch"", e); } }",dfa7013fc366a0d33570b51ee95ae9bca66d317c,delete(),delete(),8,3,"@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranch.apply(resource(), new com.google.gerrit.server.project.DeleteBranch.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete branch"", e); } }",c13b3c0684b820bdd21366b72fc3675319124d4e,delete(),80452,116,90
105391,src_test_java_com_googlesource_gerrit_plugins_its_base_validation_ItsValidateCommentTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.events.CommitReceivedEvent newCommitReceivedEvent(org.eclipse.jgit.transport.ReceiveCommand command, com.google.gerrit.reviewdb.client.Project project, java.lang.String refName, org.eclipse.jgit.revwalk.RevCommit commit, com.googlesource.gerrit.plugins.its.base.validation.IdentifiedUser user) { com.google.gerrit.server.events.CommitReceivedEvent event = createMock(com.google.gerrit.server.events.CommitReceivedEvent.class); event.command = command; event.project = project; event.refName = refName; event.commit = commit; event.user = user; expect(event.getProjectNameKey()).andReturn(project.getNameKey()).anyTimes(); expect(event.getRefName()).andReturn(null).anyTimes(); return event; }",938f9a5be5d91544dbe7bb11ac8a65a86807d55b,,"newCommitReceivedEvent(org.eclipse.jgit.transport.ReceiveCommand,com.google.gerrit.reviewdb.client.Project,java.lang.String,org.eclipse.jgit.revwalk.RevCommit,com.googlesource.gerrit.plugins.its.base.validation.IdentifiedUser)",3,10,"private com.google.gerrit.server.events.CommitReceivedEvent newCommitReceivedEvent(org.eclipse.jgit.transport.ReceiveCommand command, com.google.gerrit.reviewdb.client.Project project, java.lang.String refName, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gerrit.server.IdentifiedUser user) { com.google.gerrit.server.events.CommitReceivedEvent event = createMock(com.google.gerrit.server.events.CommitReceivedEvent.class); event.command = command; event.project = project; event.refName = refName; event.commit = commit; event.user = user; expect(event.getProjectNameKey()).andReturn(project.getNameKey()).anyTimes(); expect(event.getRefName()).andReturn(null).anyTimes(); return event; }",1e467bfbdb968c15458549982f7fa2bf53d00700,"newCommitReceivedEvent(org.eclipse.jgit.transport.ReceiveCommand,com.google.gerrit.reviewdb.client.Project,java.lang.String,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.IdentifiedUser)",12137,200,193
111051,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_StandaloneSiteTest.java,,,,"protected com.google.gerrit.acceptance.GerritServer startServer() throws java.lang.Exception { return com.google.gerrit.acceptance.GerritServer.start(serverDesc, baseConfig, sitePaths.site_path); }",cc11cfa7e54fe3c1faedf91e649331fc8f0a8d26,,startServer(),4,5,protected com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext startServer() throws java.lang.Exception { return new com.google.gerrit.acceptance.StandaloneSiteTest.ServerContext(startImpl()); },1791e54d264bfa2a474dbff8025fd10d2e3f727d,startServer(),214595,58,50
75662,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeBundle.java,15.0,"private static java.lang.String times(int n) { return (n + "" time"") + (n != 1 ? ""s"" : """"); }",4541ef0398ef5b03cf14d0ea657dad08b51dd3c1,"private static <T> void diffColumnsExcluding(java.util.List<java.lang.String> diffs, java.lang.Class<T> clazz, java.lang.String desc, com.google.gerrit.server.notedb.ChangeBundle bundleA, T a, com.google.gerrit.server.notedb.ChangeBundle bundleB, T b, java.lang.String... exclude) { java.util.Set<java.lang.String> toExclude = com.google.common.collect.Sets.newLinkedHashSet(java.util.Arrays.asList(exclude)); for (java.lang.reflect.Field f : clazz.getDeclaredFields()) { com.google.gwtorm.client.Column col = f.getAnnotation(com.google.gwtorm.client.Column.class); if (col == null) { continue; } else if (toExclude.remove(f.getName())) { continue; } f.setAccessible(true); try { if (java.sql.Timestamp.class.isAssignableFrom(f.getType())) { com.google.gerrit.server.notedb.ChangeBundle.diffTimestamps(diffs, desc, bundleA, a, bundleB, b, f.getName()); } else { com.google.gerrit.server.notedb.ChangeBundle.diffValues(diffs, desc, f.get(a), f.get(b), f.getName()); } } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalArgumentException(e); } } checkArgument(toExclude.isEmpty(), ""requested columns to exclude were not present in %s: %s"", clazz.getSimpleName(), toExclude); }",171d3224c1da21145debb7dd985ab7ae82495715,times(int),"diffColumnsExcluding(java.util.List,java.lang.Class,java.lang.String,com.google.gerrit.server.notedb.ChangeBundle,java.lang.Object,com.google.gerrit.server.notedb.ChangeBundle,java.lang.Object,java.lang.String[])",4,2,"private static <T> void diffColumnsExcluding(java.util.List<java.lang.String> diffs, java.lang.Class<T> clazz, java.lang.String desc, com.google.gerrit.server.notedb.ChangeBundle bundleA, T a, com.google.gerrit.server.notedb.ChangeBundle bundleB, T b, java.lang.String... exclude) { java.util.Set<java.lang.String> toExclude = com.google.common.collect.Sets.newLinkedHashSet(java.util.Arrays.asList(exclude)); for (java.lang.reflect.Field f : clazz.getDeclaredFields()) { com.google.gwtorm.client.Column col = f.getAnnotation(com.google.gwtorm.client.Column.class); if (col == null) { continue; } else if (toExclude.remove(f.getName())) { continue; } f.setAccessible(true); try { if (java.sql.Timestamp.class.isAssignableFrom(f.getType())) { com.google.gerrit.server.notedb.ChangeBundle.diffTimestamps(diffs, desc, bundleA, a, bundleB, b, f.getName()); } else { com.google.gerrit.server.notedb.ChangeBundle.diffValues(diffs, desc, f.get(a), f.get(b), f.getName()); } } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalArgumentException(e); } } checkArgument(toExclude.isEmpty(), ""requested columns to exclude not present in %s: %s"", clazz.getSimpleName(), toExclude); }",34f80403fd97073e9cfe8cff8c6714d93f8f45a0,"diffColumnsExcluding(java.util.List,java.lang.Class,java.lang.String,com.google.gerrit.server.notedb.ChangeBundle,java.lang.Object,com.google.gerrit.server.notedb.ChangeBundle,java.lang.Object,java.lang.String[])",97057,363,362
75967,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,14.0,"void setSyntaxHighlighting(boolean b) { net.codemirror.mode.ModeInfo modeInfo = net.codemirror.mode.ModeInfo.findMode(content.getContentType(), path); final java.lang.String mode = (modeInfo != null) ? modeInfo.mode() : null; if ((b && (mode != null)) && (!(mode.isEmpty()))) { injectMode(mode, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { cm.setOption(""mode"", mode); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { prefs.syntaxHighlighting(false); } }); } else { cm.setOption(""mode"", ((java.lang.String) (null))); } }",4354ab5bb8b9169bfaf700854d43eb35414e3674,"void setSyntaxHighlighting(boolean b) { net.codemirror.mode.ModeInfo modeInfo = net.codemirror.mode.ModeInfo.findMode(content.getContentType(), path); final java.lang.String mode = (modeInfo != null) ? modeInfo.mode() : null; if ((b && (mode != null)) && (!(mode.isEmpty()))) { injectMode(mode, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { cmOrig.setOption(""mode"", mode); cmEdit.setOption(""mode"", mode); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { prefs.syntaxHighlighting(false); } }); } else { cmOrig.setOption(""mode"", ((java.lang.String) (null))); cmEdit.setOption(""mode"", ((java.lang.String) (null))); } }",fb645457d4949430287c39dfa512637e058a46bf,setSyntaxHighlighting(boolean),setSyntaxHighlighting(boolean),43,15,"void setSyntaxHighlighting(boolean b) { net.codemirror.mode.ModeInfo modeInfo = net.codemirror.mode.ModeInfo.findMode(content.getContentType(), path); final java.lang.String mode = (modeInfo != null) ? modeInfo.mime() : null; if ((b && (mode != null)) && (!(mode.isEmpty()))) { injectMode(mode, new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { cmBase.setOption(""mode"", mode); cmEdit.setOption(""mode"", mode); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { prefs.syntaxHighlighting(false); } }); } else { cmBase.setOption(""mode"", ((java.lang.String) (null))); cmEdit.setOption(""mode"", ((java.lang.String) (null))); } }",a099bb95f692d6cbb7b1d09796a70802d9cdda18,setSyntaxHighlighting(boolean),191668,220,220
35820,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_CommentPanel.java,4.0,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { setOpen((!(isOpen()))); },3d6469b4dd486dc1032ca4fcaf3bd8b1377aed25,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { setOpen((!(isOpen()))); fireEvent(new com.google.gerrit.client.ui.CommentPanel.CommentHighlightEvent(isOpen())); },38cd02ecc96e672aa59cab781e3c9d1dd7b6c926,onClick(com.google.gwt.event.dom.client.ClickEvent),onClick(com.google.gwt.event.dom.client.ClickEvent),11,4,@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { setOpen((!(isOpen()))); },3d6469b4dd486dc1032ca4fcaf3bd8b1377aed25,onClick(com.google.gwt.event.dom.client.ClickEvent),153093,58,34
8851,src_main_java_com_google_gerrit_client_changes_ChangeScreen.java,14.0,"private void initUI() { addStyleName(""gerrit-ChangeScreen""); descriptionBlock = new com.google.gerrit.client.changes.ChangeDescriptionBlock(); add(descriptionBlock); dependencies = new com.google.gerrit.client.changes.ChangeTable(); dependsOn = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenDependsOn()); neededBy = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenNeededBy()); dependencies.addSection(dependsOn); dependencies.addSection(neededBy); dependenciesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenDependencies()); dependenciesPanel.setContent(dependencies); dependenciesPanel.setWidth(""95%""); add(dependenciesPanel); approvals = new com.google.gerrit.client.changes.ApprovalTable(); approvalsPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenApprovals()); approvalsPanel.setContent(com.google.gerrit.client.changes.ChangeScreen.wrap(approvals)); dependenciesPanel.setWidth(""95%""); add(approvalsPanel); patchSetPanels = new com.google.gwt.user.client.ui.FlowPanel(); add(patchSetPanels); messagesContent = new com.google.gwt.user.client.ui.FlowPanel(); messagesContent.setStyleName(""gerrit-ChangeMessages""); messagesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenMessages()); messagesPanel.setContent(messagesContent); add(messagesPanel); }",66f03b30bbf72c81593a93aef62ca8926d5ecc38,"private void initUI() { addStyleName(""gerrit-ChangeScreen""); descriptionBlock = new com.google.gerrit.client.changes.ChangeDescriptionBlock(); add(descriptionBlock); dependencies = new com.google.gerrit.client.changes.ChangeTable(); dependsOn = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenDependsOn()); neededBy = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenNeededBy()); dependencies.addSection(dependsOn); dependencies.addSection(neededBy); dependenciesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenDependencies()); dependenciesPanel.setContent(dependencies); dependenciesPanel.setWidth(""95%""); add(dependenciesPanel); approvals = new com.google.gerrit.client.changes.ApprovalTable(changeId); approvalsPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenApprovals()); approvalsPanel.setContent(com.google.gerrit.client.changes.ChangeScreen.wrap(approvals)); dependenciesPanel.setWidth(""95%""); add(approvalsPanel); patchSetPanels = new com.google.gwt.user.client.ui.FlowPanel(); add(patchSetPanels); messagesContent = new com.google.gwt.user.client.ui.FlowPanel(); messagesContent.setStyleName(""gerrit-ChangeMessages""); messagesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenMessages()); messagesPanel.setContent(messagesContent); add(messagesPanel); }",e62dcd713508eb666cd5f5559e33c8dd29c4df1e,initUI(),initUI(),5,14,"private void initUI() { addStyleName(""gerrit-ChangeScreen""); descriptionBlock = new com.google.gerrit.client.changes.ChangeDescriptionBlock(); add(descriptionBlock); dependencies = new com.google.gerrit.client.changes.ChangeTable(); dependsOn = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenDependsOn()); neededBy = new com.google.gerrit.client.changes.ChangeTable.Section(Util.C.changeScreenNeededBy()); dependencies.addSection(dependsOn); dependencies.addSection(neededBy); dependenciesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenDependencies()); dependenciesPanel.setContent(dependencies); dependenciesPanel.setWidth(""95%""); add(dependenciesPanel); approvals = new com.google.gerrit.client.changes.ApprovalTable(); approvalsPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenApprovals()); approvalsPanel.setContent(com.google.gerrit.client.changes.ChangeScreen.wrap(approvals)); dependenciesPanel.setWidth(""95%""); add(approvalsPanel); patchSetPanels = new com.google.gwt.user.client.ui.FlowPanel(); add(patchSetPanels); messagesContent = new com.google.gwt.user.client.ui.FlowPanel(); messagesContent.setStyleName(""gerrit-ChangeMessages""); messagesPanel = new com.google.gwt.user.client.ui.DisclosurePanel(Util.C.changeScreenMessages()); messagesPanel.setContent(messagesContent); add(messagesPanel); }",66f03b30bbf72c81593a93aef62ca8926d5ecc38,initUI(),70812,372,369
96323,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_ListMailFilterIT.java,,,,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.listfilter.mode"", value = ""BLACKLIST"") @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.listfilter.patterns"", values = { "".+@example\\.com"", ""a@b\\.com"" }) public void listFilterBlacklistFiltersListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); }",67193c85bfe481c6460a82e8aef7c21490e77deb,,listFilterBlacklistFiltersListedUser(),4,5,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.mode"", value = ""BLACKLIST"") @com.google.gerrit.acceptance.GerritConfig(name = ""receiveemail.filter.patterns"", values = { "".+@example\\.com"", ""a@b\\.com"" }) public void listFilterBlacklistFiltersListedUser() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo changeInfo = createChangeAndReplyByEmail(); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeInfo.id).get().messages; assertThat(messages).hasSize(2); }",9ccc30e644fe45ef2f2158ba2b719edf084e1a04,listFilterBlacklistFiltersListedUser(),33365,175,173
93299,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,8.0,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' in use by another account"")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId)); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, key, false); } }",522ec4f235f6ee39ff36301d976d91dc82d224dc,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' in use by another account"")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId)); externalIdCache.remove(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, key, false); } }",4b395664099f0eab1c5ac1081bf304d5d5dd57a0,"unlink(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)","unlink(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",13,8,"public com.google.gerrit.server.account.AuthResult unlink(com.google.gerrit.reviewdb.client.Account.Id from, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(from))) { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' in use by another account"")); } db.accountExternalIds().delete(java.util.Collections.singleton(extId)); externalIdCache.onRemove(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(from); if (((a.getPreferredEmail()) != null) && (a.getPreferredEmail().equals(who.getEmailAddress()))) { a.setPreferredEmail(null); db.accounts().update(java.util.Collections.singleton(a)); } byEmailCache.evict(who.getEmailAddress()); byIdCache.evict(from); } } else { throw new com.google.gerrit.server.account.AccountException(((""Identity '"" + (key.get())) + ""' not found"")); } return new com.google.gerrit.server.account.AuthResult(from, key, false); } }",d1f94dc419dc06158650487146f01b9b464c2830,"unlink(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",162070,421,422
100962,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_IndexServlet.java,,,,"protected java.lang.String computeAssetPrefix() { try { java.net.URI uri = new java.net.URI(urlProvider.get()); return uri.getPath().replaceAll(""/$"", """"); } catch (java.net.URISyntaxException e) { return """"; } }",ca9af8a65d3c58c58c85b818ed68490cda740dbf,,computeAssetPrefix(),11,1,"static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll(""/$"", """"); }",16cd8f59ecbb6f55819f91ee5089e695544e3436,computeCanonicalPath(java.lang.String),190142,58,54
24622,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapRealm.java,6.0,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> lookupGroups(java.lang.String name) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> out; final java.util.Map<java.lang.String, java.lang.String> params = java.util.Collections.<java.lang.String, java.lang.String>emptyMap(); out = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey>(); try { final javax.naming.directory.DirContext ctx = helper.open(); try { final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); final com.google.gerrit.common.data.ParamertizedString filter = com.google.gerrit.common.data.ParamertizedString.asis(schema.groupPattern.replace(com.google.gerrit.server.auth.ldap.LdapRealm.GROUPNAME, name).toString()); for (java.lang.String groupBase : schema.groupBases) { final com.google.gerrit.server.auth.ldap.LdapQuery query = new com.google.gerrit.server.auth.ldap.LdapQuery(groupBase, schema.groupScope, filter, java.util.Collections.<java.lang.String>emptySet()); for (com.google.gerrit.server.auth.ldap.LdapQuery.Result res : query.query(ctx, params)) { out.add(new com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey(res.getDN())); } } } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot query LDAP for groups matching requested name"", e); } return out; }",fe49ec42a2ab74873664107cf07f567c253fa41a,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> lookupGroups(java.lang.String name) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> out; final java.util.Map<java.lang.String, java.lang.String> params = java.util.Collections.<java.lang.String, java.lang.String>emptyMap(); out = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey>(); try { final javax.naming.directory.DirContext ctx = helper.open(); try { final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); final com.google.gerrit.common.data.ParametrizedString filter = com.google.gerrit.common.data.ParametrizedString.asis(schema.groupPattern.replace(com.google.gerrit.server.auth.ldap.LdapRealm.GROUPNAME, name).toString()); for (java.lang.String groupBase : schema.groupBases) { final com.google.gerrit.server.auth.ldap.LdapQuery query = new com.google.gerrit.server.auth.ldap.LdapQuery(groupBase, schema.groupScope, filter, java.util.Collections.<java.lang.String>emptySet()); for (com.google.gerrit.server.auth.ldap.LdapQuery.Result res : query.query(ctx, params)) { out.add(new com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey(res.getDN())); } } } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot query LDAP for groups matching requested name"", e); } return out; }",a24da6056a6d4e2c236f5cf4ee0d4546797d73a0,lookupGroups(java.lang.String),lookupGroups(java.lang.String),3,5,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> lookupGroups(java.lang.String name) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey> out; final java.util.Map<java.lang.String, java.lang.String> params = java.util.Collections.<java.lang.String, java.lang.String>emptyMap(); out = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey>(); try { final javax.naming.directory.DirContext ctx = helper.open(); try { final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema = helper.getSchema(ctx); final com.google.gerrit.common.data.ParameterizedString filter = com.google.gerrit.common.data.ParameterizedString.asis(schema.groupPattern.replace(com.google.gerrit.server.auth.ldap.LdapRealm.GROUPNAME, name).toString()); for (java.lang.String groupBase : schema.groupBases) { final com.google.gerrit.server.auth.ldap.LdapQuery query = new com.google.gerrit.server.auth.ldap.LdapQuery(groupBase, schema.groupScope, filter, java.util.Collections.<java.lang.String>emptySet()); for (com.google.gerrit.server.auth.ldap.LdapQuery.Result res : query.query(ctx, params)) { out.add(new com.google.gerrit.reviewdb.AccountGroup.ExternalNameKey(res.getDN())); } } } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot query LDAP for groups matching requested name"", e); } return out; }",45c68d0652ea57a242e95866b0c11fceeacaea1c,lookupGroups(java.lang.String),122077,483,481
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,34.0,"public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), id.get(), null, 0); }",e86a8dd779131cc94a81bd4f2e1ef2c904a2def7,"public static java.lang.String toPatch(java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project) { return com.google.gerrit.client.Dispatcher.toPatch(type, diffBase, id.getParentKey(), project, id.get(), null, 0); }",9a5b1262a2942004fab60ca28bd016a044bd97e3,"toPatch(java.lang.String,com.google.gerrit.client.DiffObject,com.google.gerrit.reviewdb.client.Patch$Key)","toPatch(java.lang.String,com.google.gerrit.client.DiffObject,com.google.gerrit.reviewdb.client.Patch$Key,com.google.gerrit.reviewdb.client.Project$NameKey)",7,39,"public static java.lang.String toPatch(@com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String type, com.google.gerrit.client.DiffObject diffBase, com.google.gerrit.reviewdb.client.Patch.Key id) { return com.google.gerrit.client.Dispatcher.toPatch(type, project, diffBase, id.getParentKey(), id.get(), null, 0); }",0fb558cc4b409ee51d974d91f6853bf0f91702d2,"toPatch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,com.google.gerrit.client.DiffObject,com.google.gerrit.reviewdb.client.Patch$Key)",210800,115,114
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,30.0,"@org.junit.Test public void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",e7f1385ac84d16ce645d9f5b9e710bd4b3615c75,"private void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }",90a3142cf73553528e317b78341d1d9d7c9b563a,addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(),addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),16,40,"private void addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.OWNER_REVIEWERS); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }",6518a55d7d2c6a5e99505aa0896b8549b4703410,addReviewerToReviewableChangeInNoteDbNotifyOwnerReviewers(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),145686,187,201
148032,java_com_google_gerrit_server_audit_AuditService.java,2.0,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from account event"", e); } } }",d6fcf1e6344eee730de9e0f09f3be9efa4587229,"dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)","dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",17,2,"public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log delete groups from group event"", e); } } }",c69e31d411013df57124f105ba30ff437d341391,"dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",215458,147,147
76476,gerrit-server_src_main_java_com_google_gerrit_server_account_VersionedAuthorizedKeys.java,8.0,"public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null), ""SSH keys not loaded yet""); int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }",5b217bbeac3a643e8a99fb576b825c298d832c22,"public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null), ""SSH keys not loaded yet""); for (com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key : keys.values()) { if ((key.isPresent()) && (key.get().getSshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }",d59caae89cd741857a6249a41e3e9b852a85b958,addKey(java.lang.String),addKey(java.lang.String),9,22,"private com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); for (com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key : keys) { if ((key.isPresent()) && (key.get().getSshPublicKey().trim().equals(pub.trim()))) { return key.get(); } } int seq = (keys.size()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey.Id keyId = new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq); com.google.gerrit.reviewdb.client.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(com.google.common.base.Optional.of(key)); return key; }",64b63a44bfa98ac93f727d3f4887cd84cad87596,addKey(java.lang.String),94528,216,220
47794,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,35.0,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = ins.getPatchSet(); final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); ins.setReviewers(recipients.getReviewers()).insert(); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, ins.getPatchSetInfo()); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } })); if (((magicBranch) != null) && (magicBranch.isSubmit())) { submit(projectControl.controlFor(change), ps); } }",f8ebf4f509d9ddd41b34bbcf34bbb37715c6c0a4,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = ins.getPatchSet(); final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); ins.setReviewers(recipients.getReviewers()).setExtraCC(recipients.getCcOnly()).insert(); created = true; if (((magicBranch) != null) && (magicBranch.isSubmit())) { submit(projectControl.controlFor(change), ps); } }",61e405ed7d14c4e0efd2ae523208d334fab68e04,insertChange(com.google.gerrit.reviewdb.server.ReviewDb),insertChange(com.google.gerrit.reviewdb.server.ReviewDb),3,35,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet ps = ins.getPatchSet(); final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); ins.setReviewers(recipients.getReviewers()).setSendMail(false).insert(); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, ins.getPatchSetInfo()); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } })); if (((magicBranch) != null) && (magicBranch.isSubmit())) { submit(projectControl.controlFor(change), ps); } }",5a5fee4c514ddd95ca7d2d0e84309ec948ede241,insertChange(com.google.gerrit.reviewdb.server.ReviewDb),100657,261,445
52837,gerrit-common_src_main_java_com_google_gerrit_common_data_GerritConfig.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setReportBugText(java.lang.String u) { reportBugText = u; },9f6013a424b3503325f9c321d91091f3c40dc640,,setReportBugText(java.lang.String),3,56,public void setReportBugText(java.lang.String t) { reportBugText = t; },ff01468fc636f555a6494efd7593e9e4eefff231,setReportBugText(java.lang.String),58996,22,24
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> iterateAllEntities() throws com.google.gwtorm.server.OrmException { return delegate.iterateAllEntities(); },194b42dbb8db69a316b334ef488dca53159f41d2,,iterateAllEntities(),3,33,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupName> iterateAllEntities() { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },7f33f88a052344ac9b19b9ed4f8b8f086f9de527,iterateAllEntities(),205037,59,73
35181,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupCacheImpl.java,13.0,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup createEntry(final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> r = db.accountGroups().byUUID(uuid).toList(); if ((r.size()) == 1) { return r.get(0); } else { return null; } } finally { db.close(); } },e8a3030460617e241cb68cd7e6bf16243a9fb4c5,@java.lang.Override public AccountGroup.Id createEntry(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey key) throws java.lang.Exception { final com.google.gerrit.reviewdb.client.AccountGroupName r; final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { r = db.accountGroupNames().get(key); if (r != null) { return r.getId(); } else { return null; } } finally { db.close(); } },8e4e2bd834d67e62c2217589ed56049a6c4b5a3a,createEntry(com.google.gerrit.reviewdb.client.AccountGroup$UUID),createEntry(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),12,6,@java.lang.Override public com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountGroup> load(java.lang.String name) throws java.lang.Exception { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { com.google.gerrit.reviewdb.client.AccountGroup.NameKey key = new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name); com.google.gerrit.reviewdb.client.AccountGroupName r = db.accountGroupNames().get(key); if (r != null) { return com.google.common.base.Optional.fromNullable(db.accountGroups().get(r.getId())); } return com.google.common.base.Optional.absent(); } finally { db.close(); } },b06b38001664cd3dfbe96d9e03562e8d803cda9b,load(java.lang.String),93568,124,197
20019,gerrit-common_src_main_java_com_google_gerrit_common_data_AccessSection.java,,,,public static boolean isLabel(java.lang.String varName) { return (varName.startsWith(com.google.gerrit.common.data.AccessSection.Permission.LABEL)) && ((com.google.gerrit.common.data.AccessSection.Permission.LABEL.length()) < (varName.length())); },fbd72cea75f9def2825533a5291a330872362396,,isLabel(java.lang.String),14,5,public void setRefPattern(java.lang.String refPattern) { this.refPattern = refPattern; },3eb3f587f205c0a18060fee643141a3e244a7ec4,setRefPattern(java.lang.String),10591,69,24
72366,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,13.0,"public static void replyError(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, int statusCode, java.lang.String msg, com.google.gerrit.extensions.restapi.CacheControl c, @com.google.gerrit.common.Nullable java.lang.Throwable err) throws java.io.IOException { if (err != null) { com.google.gerrit.util.http.RequestUtil.setErrorTraceAttribute(req, err); } com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching(req, res, null, null, c); res.setStatus(statusCode); com.google.gerrit.httpd.restapi.RestApiServlet.replyText(req, res, msg); }",3f4c3fe3157758578f35313c7fa9a07312a6e7e5,"public static void replyError(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, int statusCode, java.lang.String msg, com.google.gerrit.extensions.restapi.CacheControl c, @com.google.gerrit.common.Nullable java.lang.Throwable err) throws java.io.IOException { if (err != null) { com.google.gerrit.util.http.RequestUtil.setErrorTraceAttribute(req, err); } com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching(req, res, null, null, c); res.setStatus(statusCode); com.google.gerrit.httpd.restapi.RestApiServlet.replyText(req, res, msg); com.google.gerrit.httpd.RequestContextFilter.RequestMetrics m = ((com.google.gerrit.httpd.RequestContextFilter.RequestMetrics) (req.getAttribute(RequestUtil.ATTRIBUTE_METRICS))); m.failures.increment(java.lang.String.valueOf(statusCode)); }",6e1a5159e613a3a2310dcfc6712c7c1d5b94bf9a,"replyError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int,java.lang.String,com.google.gerrit.extensions.restapi.CacheControl,java.lang.Throwable)","replyError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int,java.lang.String,com.google.gerrit.extensions.restapi.CacheControl,java.lang.Throwable)",7,13,"public static void replyError(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, int statusCode, java.lang.String msg, com.google.gerrit.extensions.restapi.CacheControl c, @com.google.gerrit.common.Nullable java.lang.Throwable err) throws java.io.IOException { if (err != null) { com.google.gerrit.util.http.RequestUtil.setErrorTraceAttribute(req, err); } com.google.gerrit.httpd.restapi.RestApiServlet.configureCaching(req, res, null, null, c); res.setStatus(statusCode); com.google.gerrit.httpd.restapi.RestApiServlet.replyText(req, res, msg); }",3f4c3fe3157758578f35313c7fa9a07312a6e7e5,"replyError(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int,java.lang.String,com.google.gerrit.extensions.restapi.CacheControl,java.lang.Throwable)",176521,231,167
70020,gerrit-server_src_main_java_com_google_gerrit_server_git_gpg_SignedPushModule.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void close() { super.close(); repo.close(); },e1993286c472210ff4d0cbed34447415863b1ab9,,close(),9,0,@java.lang.Override public void close() { try { super.close(); } finally { repo.close(); } },6cba0f898e93cd466692ab32c6fd2fd01032cd20,close(),176695,20,26
58350,gitiles-servlet_src_main_java_com_google_gitiles_RepositoryIndexServlet.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void doGetJson(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { java.util.Map<java.lang.String, ?> json_data = buildData(req); renderJson(req, res, json_data, json_data.getClass()); }",12e6ed41cd4d8fc90136071647616ab6d416132a,,"doGetJson(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",6,1,"@java.lang.Override protected void doGetJson(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gitiles.GitilesAccess access = getAccess(req); com.google.gitiles.RepositoryDescription desc = access.getRepositoryDescription(); renderJson(req, res, desc, new com.google.gson.reflect.TypeToken<com.google.gitiles.RepositoryDescription>() {}.getType()); }",01c33078f76a4235ea878bc2a5c35fbef620d6a8,"doGetJson(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",148645,78,108
61300,gitiles-servlet_src_main_java_com_google_gitiles_CommentLinkInfo.java,,,,"public java.util.List<java.util.Map<java.lang.String, java.lang.String>> replace(java.lang.String input) { java.util.List<java.util.Map<java.lang.String, java.lang.String>> parsed = com.google.common.collect.Lists.newArrayList(); java.util.regex.Matcher m = pattern.matcher(input); int last = 0; while (m.find()) { com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last, m.start())); com.google.gitiles.CommentLinkInfo.addLink(parsed, m.group(0), m.group(0)); last = m.end(); } com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last)); return parsed; }",402b1f6237d4156313fbdd3ad66442f56968dc0b,,replace(java.lang.String),16,1,"public java.util.List<java.util.Map<java.lang.String, java.lang.String>> linkify(java.lang.String input) { java.util.List<java.util.Map<java.lang.String, java.lang.String>> parsed = com.google.common.collect.Lists.newArrayList(); java.util.regex.Matcher m = pattern.matcher(input); int last = 0; while (m.find()) { com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last, m.start())); java.lang.String text = m.group(0); com.google.gitiles.CommentLinkInfo.addLink(parsed, text, pattern.matcher(text).replaceAll(link)); last = m.end(); } com.google.gitiles.CommentLinkInfo.addText(parsed, input.substring(last)); return com.google.common.collect.ImmutableList.copyOf(parsed); }",3b45bdfdd52ccd9d446f06f613c639bde25d733c,linkify(java.lang.String),142642,181,210
32651,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,32.0,"private void parseUpdate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canUpdate()) { if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } validateNewCommits(ctl, cmd); } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""can not update the reference as a fast forward""); } }",dc522d6c44687bbba6af30ba35ca0cb2126d8a56,"private void parseUpdate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canUpdate()) { if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } validateNewCommits(ctl, cmd); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { rp.sendMessage((""You are not allowed to perform this operation.\n"" + (""Configuration changes can only be pushed by project owners\n"" + ""who also have 'Push' rights""))); } else { rp.sendMessage(((""You are not allowed to perform this operation.\n"" + ""To push into this reference you need 'Push' rights."") + (com.google.gerrit.server.git.ReceiveCommits.MESSAGE_FOOTER))); } com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ((""Current user '"" + (ctl.getCurrentUser().getUserName())) + ""' can not update the reference as a fast forward"")); } }",a8f677a8d01693796877440cbb5cdc6fab5def22,parseUpdate(org.eclipse.jgit.transport.ReceiveCommand),parseUpdate(org.eclipse.jgit.transport.ReceiveCommand),5,45,"private void parseUpdate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canUpdate()) { if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } validateNewCommits(ctl, cmd); cmd.execute(rp); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.CONFIG_UPDATE, GitRepositoryManager.REF_CONFIG); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.UPDATE, ctl.getRefName()); } reject(cmd, ""can not update the reference as a fast forward""); } }",239b667d70564ada34d3513ce3082d65f25f9aa8,parseUpdate(org.eclipse.jgit.transport.ReceiveCommand),94813,274,209
137630,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ChangeEmail.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String shortenSubject(java.lang.String subject) { if ((subject.length()) < 73) { return subject; } else { return (subject.substring(0, 69)) + ""...""; } }",22d271bfe25c56e35a589523ac20de205e4ee180,,shortenSubject(java.lang.String),5,8,"private static java.lang.String shortenSubject(java.lang.String subject) { if ((subject.length()) < 73) { return subject; } else { return (subject.substring(0, 69)) + ""...""; } }",ac2ee9e3b9cee284fcf697b779da537a0965657f,shortenSubject(java.lang.String),75175,49,50
41250,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectHierarchyIterator.java,,,,@java.lang.Override public com.google.gerrit.server.project.ProjectState next() { com.google.gerrit.server.project.ProjectState n = next; if (n == null) { throw new java.util.NoSuchElementException(); } next = null; com.google.gerrit.reviewdb.client.Project.NameKey parentName = n.getProject().getParent(); if ((parentName != null) && (seen.add(parentName))) { com.google.gerrit.server.project.ProjectState p = cache.get(parentName); if (p != null) { next = p; return n; } } if (seen.add(allProjectsName)) { next = cache.get(allProjectsName); } return n; },7896b6bb72021260b9bac049108e39f93a499ab3,,next(),7,1,@java.lang.Override public com.google.gerrit.server.project.ProjectState next() { com.google.gerrit.server.project.ProjectState n = next; if (n == null) { throw new java.util.NoSuchElementException(); } next = computeNext(n); return n; },5cee6b8f0089f3c3bab27df043b3d3875d7a66a7,next(),196587,169,68
108776,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_OutgoingEmail.java,3.0,"protected void add(final com.google.gerrit.extensions.api.changes.RecipientType rt, final com.google.gerrit.reviewdb.client.UserIdentity who) { if ((who != null) && ((who.getAccount()) != null)) { add(rt, who.getAccount()); } }",a85832a4393001f8298b43eaf1caa234950ae2a9,"protected void add(final com.google.gerrit.extensions.api.changes.RecipientType rt, final com.google.gerrit.reviewdb.client.UserIdentity who) { add(rt, who, false); }",d83381a49963e9e22255521065e695e97d0836c9,"add(com.google.gerrit.extensions.api.changes.RecipientType,com.google.gerrit.reviewdb.client.UserIdentity)","add(com.google.gerrit.extensions.api.changes.RecipientType,com.google.gerrit.reviewdb.client.UserIdentity)",19,3,"protected void add(com.google.gerrit.extensions.api.changes.RecipientType rt, com.google.gerrit.reviewdb.client.UserIdentity who) { add(rt, who, false); }",e2f9e718a51add3699a12352c568f32b47bf9134,"add(com.google.gerrit.extensions.api.changes.RecipientType,com.google.gerrit.reviewdb.client.UserIdentity)",65376,50,48
52476,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,3.0,@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); limitThreads(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); index.markReady(false); index.deleteAll(); int result = indexAll(); index.markReady(true); sysManager.stop(); dbManager.stop(); return result; },558d8941105d93809617d849d8c78473e24b7d25,@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); cfgInjector = createCfgInjector(); limitThreads(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); index.markReady(false); index.deleteAll(); int result = indexAll(); index.markReady(true); sysManager.stop(); dbManager.stop(); return result; },f4d209a9517d82ad9bf91ac61a13563734492abd,run(),run(),13,3,@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); limitThreads(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); index.markReady(false); index.deleteAll(); int result = indexAll(); index.markReady(true); sysManager.stop(); dbManager.stop(); return result; },558d8941105d93809617d849d8c78473e24b7d25,run(),84457,235,228
148032,javatests_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,11.0,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,group=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,group=group2""); }",4abc3af98afe3b9f4af472c5ff309531a338d7e8,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,account=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,account=group2""); }",860b44fb6db76eaf58f9784eb71dbdd63edda680,byLabelGroup(),byLabelGroup(),17,11,"@org.junit.Test public void byLabelGroup() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount(""user1""); createAccount(""user2""); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject(""repo""); java.lang.String g1 = createGroup(""group1"", ""Administrators""); java.lang.String g2 = createGroup(""group2"", ""Administrators""); gApi.groups().id(g1).addMembers(""user1""); gApi.groups().id(g2).addMembers(""user2""); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo), user1); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change1.getId().get()).current().review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(""Code-Review"", 1)); requestContext.setContext(newRequestContext(userId)); assertQuery(""label:Code-Review=+1,group1"", change1); assertQuery(""label:Code-Review=+1,group=group1"", change1); assertQuery(""label:Code-Review=+1,user=user1"", change1); assertQuery(""label:Code-Review=+1,user=user2""); assertQuery(""label:Code-Review=+1,group=group2""); }",4abc3af98afe3b9f4af472c5ff309531a338d7e8,byLabelGroup(),217088,311,311
14559,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,15.0,"boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.Collections.sort(allRights, RefRight.REF_PATTERN_ORDER); for (com.google.gerrit.reviewdb.RefRight right : com.google.gerrit.server.project.RefControl.filterMostSpecific(allRights)) { if (groups.contains(right.getAccountGroupId())) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } return val >= level; }",b6016f2015568b0e5a0f181279cf020d7e8d43b6,"boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> perPatternRights = com.google.gerrit.server.project.RefControl.sortedRightsByPattern(allRights); for (java.lang.String pattern : perPatternRights.keySet()) { val = java.lang.Math.max(val, perPatternRights.get(pattern).allowedValueForRef(groups)); if ((val >= level) || (perPatternRights.get(pattern).containsExclusive())) { return val >= level; } } return val >= level; }",b54700496217d80f43f3611932cf3d7ad9ff841b,"canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)","canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)",9,17,"boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> perPatternRights = com.google.gerrit.server.project.RefControl.sortedRightsByPattern(allRights); for (com.google.gerrit.server.project.RefControl.RefRightsForPattern right : perPatternRights.values()) { val = java.lang.Math.max(val, right.allowedValueForRef(groups)); if ((val >= level) || (right.containsExclusive())) { return val >= level; } } return val >= level; }",ddf46b8d32e0be1f6ab2ff21bf1eb6a3b6e3f02e,"canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)",26818,295,294
68456,gerrit-httpd_src_test_java_com_google_gerrit_httpd_GitwebConfigTest.java,0.0,"@org.junit.Test public void testInalidPathSeparator() { for (char c : com.google.gerrit.httpd.GitWebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse((""invalid character accepted: "" + c), com.google.gerrit.httpd.GitWebConfig.isValidPathSeparator(c)); } }",e8c71ff2a6e727522561e0cfffccb518229ae5f2,"@org.junit.Test public void testInalidPathSeparator() { for (char c : com.google.gerrit.httpd.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse((""invalid character accepted: "" + c), com.google.gerrit.httpd.GitwebConfig.isValidPathSeparator(c)); } }",36c71d55fdbd619c4c21ff409e3b5ae7a821e180,testInalidPathSeparator(),testInalidPathSeparator(),7,0,"@org.junit.Test public void testInalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse((""invalid character accepted: "" + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }",3986cb07b9e8acc3ef464bb520bb98e4948fbb70,testInalidPathSeparator(),204844,80,82
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_dropwizard_TimerImpl1.java,,,,"@java.lang.Override public void record(F1 field1, long value, java.util.concurrent.TimeUnit unit) { total.record(value, unit); forceCreate(field1).record(value, unit); }",1ee2f60c017511a130899ef5a7a6adb2071667fd,,"record(java.lang.Object,long,java.util.concurrent.TimeUnit)",9,2,"com.google.gerrit.metrics.Timer1<F1> timer() { return new com.google.gerrit.metrics.Timer1<F1>() { @java.lang.Override public void record(F1 field1, long value, java.util.concurrent.TimeUnit unit) { total.record(value, unit); forceCreate(field1).record(value, unit); } @java.lang.Override public void remove() { doRemove(); } }; }",5c52949d036109ab3d0b08828acb7f811558e987,timer(),56835,47,98
50903,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,49.0,"private com.google.gerrit.reviewdb.client.PatchLineComment newComment() { com.google.gerrit.reviewdb.client.PatchLineComment newComment = new com.google.gerrit.reviewdb.client.PatchLineComment(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(comment.getKey().getParentKey(), null), comment.getLine(), com.google.gerrit.client.Gerrit.getUserAccount().getId(), comment.getKey().get()); newComment.setSide(comment.getSide()); return newComment; }",2cff12d8989c375527e990cd5d93f2c1bd3691d6,"private com.google.gerrit.reviewdb.client.PatchLineComment newComment() { com.google.gerrit.reviewdb.client.PatchLineComment newComment = new com.google.gerrit.reviewdb.client.PatchLineComment(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(comment.getKey().getParentKey(), null), comment.getLine(), com.google.gerrit.client.Gerrit.getUserAccount().getId(), comment.getKey().get(), com.google.gerrit.server.util.TimeUtil.nowTs()); newComment.setSide(comment.getSide()); return newComment; }",26162279494476b2df23bcc27627bd617bd9bba7,newComment(),newComment(),6,49,"private com.google.gerrit.reviewdb.client.PatchLineComment newComment() { com.google.gerrit.reviewdb.client.PatchLineComment newComment = new com.google.gerrit.reviewdb.client.PatchLineComment(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(comment.getKey().getParentKey(), null), comment.getLine(), com.google.gerrit.client.Gerrit.getUserAccount().getId(), comment.getKey().get(), new java.sql.Timestamp(java.lang.System.currentTimeMillis())); newComment.setSide(comment.getSide()); return newComment; }",c8090d0374f3fcae338dd1e07d66081d4b0ec5e9,newComment(),32425,149,147
79382,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ConfigNotesMigration.java,4.0,"private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NoteDbTable t : com.google.gerrit.server.notedb.NoteDbTable.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB)) { checkArgument(keys.contains(t.toLowerCase()), ""invalid NoteDb table: %s"", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.READ))), ""invalid NoteDb key: %s.%s"", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); checkArgument((!(read && (!write))), ""must have write enabled when read enabled: %s"", t); } }",1cedfbf37244738eea184e9bf1046d2dca7766ef,"private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NoteDbTable t : com.google.gerrit.server.notedb.NoteDbTable.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB)) { checkArgument(keys.contains(t.toLowerCase()), ""invalid NoteDb table: %s"", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.READ))), ""invalid NoteDb key: %s.%s"", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); boolean readOnly = cfg.getBoolean(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t, com.google.gerrit.server.notedb.ConfigNotesMigration.READ, false); if (read) { checkArgument(write, ""must have write enabled when read enabled: %s"", t); } if (readOnly) { checkArgument((read && write), ""must have read & write enabled when readOnly set: %s"", t); } } }",2acc1efb19c5cabf4a793a8de4d57879bdeb97b4,checkConfig(org.eclipse.jgit.lib.Config),checkConfig(org.eclipse.jgit.lib.Config),6,3,"private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NoteDbTable t : com.google.gerrit.server.notedb.NoteDbTable.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB)) { checkArgument(keys.contains(t.toLowerCase()), ""invalid NoteDb table: %s"", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.ConfigNotesMigration.NOTE_DB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.ConfigNotesMigration.READ))), ""invalid NoteDb key: %s.%s"", t, key); } } }",9dacd7e5be2a3bdb174f0b1cd0a7252f499983b4,checkConfig(org.eclipse.jgit.lib.Config),103538,477,270
71735,gerrit-server_src_main_java_com_google_gerrit_server_auth_oauth_OAuthLoginService.java,,,,"com.google.gerrit.extensions.auth.oauth.OAuthUserInfo login(java.lang.String username, java.lang.String secret) throws com.google.gerrit.server.account.AccountException;",fcc7722abeffdab17ec943db795bbb6016a22e92,,"login(java.lang.String,java.lang.String)",6,0,"com.google.gerrit.extensions.auth.oauth.OAuthUserInfo login(java.lang.String username, java.lang.String secret) throws java.io.IOException;",d0a54cdfe19ae3db0663d5ef2f8aa7482c9448d5,"login(java.lang.String,java.lang.String)",53760,46,38
87093,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeRevisionNote.java,,,,"@java.lang.Override protected java.util.List<? extends com.google.gerrit.reviewdb.client.Comment> parse(byte[] raw, int offset) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.util.MutableInteger p = new org.eclipse.jgit.util.MutableInteger(); p.value = offset; if (com.google.gerrit.server.notedb.ChangeRevisionNote.isJson(raw, p.value)) { com.google.gerrit.server.notedb.RevisionNoteData data = parseJson(noteUtil, raw, p.value); if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = data.pushCert; } else { pushCert = null; } return data.comments; } if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = com.google.gerrit.server.notedb.ChangeRevisionNote.parsePushCert(changeId, raw, p); trimLeadingEmptyLines(raw, p); } else { pushCert = null; } return noteUtil.parseNote(raw, p, changeId); }",f1adcb8edd420cba7225fd1c2498b845250897a2,,"parse(byte[],int)",12,2,"@java.lang.Override protected java.util.List<com.google.gerrit.reviewdb.client.Comment> parse(byte[] raw, int offset) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.util.MutableInteger p = new org.eclipse.jgit.util.MutableInteger(); p.value = offset; if (com.google.gerrit.server.notedb.ChangeRevisionNote.isJson(raw, p.value)) { com.google.gerrit.server.notedb.RevisionNoteData data = parseJson(noteUtil, raw, p.value); if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = data.pushCert; } else { pushCert = null; } return data.comments; } if ((status) == (PatchLineComment.Status.PUBLISHED)) { pushCert = com.google.gerrit.server.notedb.ChangeRevisionNote.parsePushCert(changeId, raw, p); trimLeadingEmptyLines(raw, p); } else { pushCert = null; } return noteUtil.parseNote(raw, p, changeId); }",bdb8cc386aab0b097e1fa318d6ac6ec7ccd2de99,"parse(byte[],int)",56165,268,267
78388,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_config_DiffPreferencesIT.java,2.0,"@org.junit.Test public void GetDiffPreferences() throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = get(); assertPrefsEqual(result, com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }",fe508570c9d6c0a40af34b5d85a5828c6e34d11a,"@org.junit.Test public void GetDiffPreferences() throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = gApi.config().server().getDefaultDiffPreferences(); assertPrefsEqual(result, com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }",cc36500f566d96c8d6653ec98e955630a7693db0,GetDiffPreferences(),GetDiffPreferences(),2,0,"@org.junit.Test public void getDiffPreferences() throws java.lang.Exception { com.google.gerrit.extensions.client.DiffPreferencesInfo result = gApi.config().server().getDefaultDiffPreferences(); assertPrefsEqual(result, com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); }",948d1ee61e6fd2d9df6cc3ce3ebecca9a6b6bb1e,getDiffPreferences(),119750,70,70
106144,src_main_java_com_googlesource_gerrit_plugins_webhooks_EventHandler.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean shouldPost(com.google.gerrit.server.events.ProjectEvent projectEvent, java.lang.String[] wantedEvents) { if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if (com.google.common.base.Strings.isNullOrEmpty(type)) { continue; } if (type.equals(projectEvent.getType())) { return true; } } return false; }",3adfdb6959d1d5103e7c1627c4eb08ca7a1dea9a,,"shouldPost(com.google.gerrit.server.events.ProjectEvent,java.lang.String[])",2,1,"private boolean shouldPost(com.google.gerrit.server.events.ProjectEvent projectEvent, java.lang.String[] wantedEvents) { if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(projectEvent.getType()))) { return true; } } return false; }",fb805d3e6ca78f00caa0478bdfaae5da34d3f816,"shouldPost(com.google.gerrit.server.events.ProjectEvent,java.lang.String[])",83071,102,100
55001,gerrit-server_src_main_java_com_google_gerrit_server_change_Mergeable.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { if ((c.getStatus().isOpen()) && (ps.getId().equals(c.currentPatchSetId()))) { c.setMergeable(mergeable); c.setLastSha1MergeTested(com.google.gerrit.server.change.Mergeable.toRevId(ref)); } return null; },7a04e7281afbad12cb538ef54f771418c86f76d8,,update(com.google.gerrit.reviewdb.client.Change),2,0,@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { if ((c.getStatus().isOpen()) && (ps.getId().equals(c.currentPatchSetId()))) { c.setMergeable(mergeable); c.setLastSha1MergeTested(com.google.gerrit.server.change.Mergeable.toRevId(ref)); return c; } else { return null; } },b90ba9c53c4f2bcd17d780cfe61c00b85764c618,update(com.google.gerrit.reviewdb.client.Change),22022,108,114
46642,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,1.0,"private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }",805a2e39ec7485635bf4f60a166ffc6087bc4f51,"private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; java.util.Map<java.lang.String, java.lang.String> allCapabilities = new java.util.HashMap<java.lang.String, java.lang.String>(); for (final com.google.gerrit.client.config.CapabilityInfo c : com.google.gerrit.client.rpc.Natives.asList(capabilityMap.values())) { allCapabilities.put(c.id(), c.name()); } this.access.setCapabilities(allCapabilities); accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }",a7e94589ffbb5c972bf23970ba56643041a8a05f,displayReadOnly(com.google.gerrit.common.data.ProjectAccess),displayReadOnly(com.google.gerrit.common.data.ProjectAccess),4,1,"private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; java.util.Map<java.lang.String, java.lang.String> allCapabilities = new java.util.HashMap<java.lang.String, java.lang.String>(); for (com.google.gerrit.client.config.CapabilityInfo c : com.google.gerrit.client.rpc.Natives.asList(capabilityMap.values())) { allCapabilities.put(c.id(), c.name()); } this.access.setCapabilities(allCapabilities); accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }",e1930695446c70cc9e65ea9d9c344a5cae890033,displayReadOnly(com.google.gerrit.common.data.ProjectAccess),28848,233,232
105331,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeEdits.java,20.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.restapi.BinaryResult> apply(com.google.gerrit.server.change.ChangeEditResource rsrc) throws java.io.IOException { try { com.google.gerrit.server.edit.ChangeEdit edit = rsrc.getChangeEdit(); return com.google.gerrit.extensions.restapi.Response.ok(fileContentUtil.getContent(rsrc.getControl().getProjectControl().getProjectState(), (base ? org.eclipse.jgit.lib.ObjectId.fromString(edit.getBasePatchSet().getRevision().get()) : edit.getEditCommit()), rsrc.getPath())); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException rnfe) { return com.google.gerrit.extensions.restapi.Response.none(); } }",227fcfeee760164cda3513700b57489575f64070,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.restapi.BinaryResult> apply(com.google.gerrit.server.change.ChangeEditResource rsrc) throws java.io.IOException { try { com.google.gerrit.server.edit.ChangeEdit edit = rsrc.getChangeEdit(); return com.google.gerrit.extensions.restapi.Response.ok(fileContentUtil.getContent(rsrc.getControl().getProjectControl().getProjectState(), (base ? org.eclipse.jgit.lib.ObjectId.fromString(edit.getBasePatchSet().getRevision().get()) : edit.getEditCommit()), rsrc.getPath(), null)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException rnfe) { return com.google.gerrit.extensions.restapi.Response.none(); } }",70dbd1f752cd4ef119cb924abd5293f048f1252d,apply(com.google.gerrit.server.change.ChangeEditResource),apply(com.google.gerrit.server.change.ChangeEditResource),3,20,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.restapi.BinaryResult> apply(com.google.gerrit.server.change.ChangeEditResource rsrc) throws java.io.IOException { try { com.google.gerrit.server.edit.ChangeEdit edit = rsrc.getChangeEdit(); return com.google.gerrit.extensions.restapi.Response.ok(fileContentUtil.getContent(rsrc.getControl().getProjectControl().getProjectState(), (base ? org.eclipse.jgit.lib.ObjectId.fromString(edit.getBasePatchSet().getRevision().get()) : edit.getEditCommit()), rsrc.getPath(), null)); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException | com.google.gerrit.extensions.restapi.BadRequestException e) { return com.google.gerrit.extensions.restapi.Response.none(); } }",5c284e04b1781fddde93908e67b3e33bc379ba95,apply(com.google.gerrit.server.change.ChangeEditResource),65772,203,217
75967,gerrit-gwtui_src_main_java_net_codemirror_addon_AddonInjector.java,,,,public static com.google.gwt.safehtml.shared.SafeUri getAddonScriptUri(java.lang.String mode) { return net.codemirror.addon.AddonInjector.addonUris.get(mode); },22a4aeb4ba3dc75335c1e2beef3334ed94bdb391,,getAddonScriptUri(java.lang.String),43,1,public static com.google.gwt.safehtml.shared.SafeUri getAddonScriptUri(java.lang.String addon) { return net.codemirror.addon.AddonInjector.addonUris.get(addon); },17e7d1fe0b0f9fbf49445d2d5b81812e70442494,getAddonScriptUri(java.lang.String),191621,50,51
109601,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,46.0,"@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get(""non-existing@example.com"")).isEmpty(); }",5fd524f275a883956431d248d39d432bd9f7b9bf,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail(""non-existing@example.com"")).isEmpty(); }",4ed5a1a994a74e86b45415fa035bad16dc9cf186,lookUpFromCacheByEmail(),lookUpByEmail(),9,79,"@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(emails.getAccountFor(admin.email), admin); java.lang.String email = ""foo.bar@example.com""; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse(""foo:bar""), admin.id, email)); assertEmail(emails.getAccountFor(email), admin); assertThat(emails.getAccountFor(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(emails.getAccountFor(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(emails.getAccountFor(""non-existing@example.com"")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = emails.getAccountsFor(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }",c4309f0f1ef788c12b576fd6a61ddc730fbe261c,lookUpByEmail(),171458,175,262
74492,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,22.0,"public com.google.gerrit.server.notedb.ChangeNotes create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(db, repoManager, migration, allUsersProvider, change).load(); }",6ef158c147b700a7d510684a123a137161af4e42,"public com.google.gerrit.server.notedb.ChangeNotes create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(db, repoManager, migration, allUsersProvider, project, changeId).load(); }",97e441a615445f1e65e20097e0c66562a4fb41d0,"create(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change)","create(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",14,25,"public com.google.gerrit.server.notedb.ChangeNotes create(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = db.changes().get(changeId); return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsersProvider, project, change); }",9258ae64be21bc108d1877ac0c04c881242d5c5b,"create(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",158241,122,143
44373,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PublishCommentScreen.java,28.0,"private void preDisplay(final com.google.gerrit.common.data.PatchSetPublishDetail pubDetail, final com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.PatchSetPublishDetail> origCb) { com.google.gerrit.client.projects.ProjectApi.config(pubDetail.getChange().getProject()).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(result.commentlinks()); display(pubDetail); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { origCb.onFailure(caught); } }); }",8443379a184dd3623bcd44bbb7ca3f3487772e9d,"private void preDisplay(final com.google.gerrit.common.data.PatchSetPublishDetail pubDetail, final com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.PatchSetPublishDetail> origCb) { Gerrit.projectConfigInfoCache.get(pubDetail.getChange().getProject(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Value>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfoCache.Value result) { commentLinkProcessor = result.getCommentLinkProcessor(); display(pubDetail); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { origCb.onFailure(caught); } }); }",c635e29364167689566bd64365c1f0da4b061895,"preDisplay(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gerrit.client.rpc.ScreenLoadCallback)","preDisplay(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gerrit.client.rpc.ScreenLoadCallback)",6,28,"private void preDisplay(final com.google.gerrit.common.data.PatchSetPublishDetail pubDetail, final com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.PatchSetPublishDetail> origCb) { com.google.gerrit.client.projects.ConfigInfoCache.get(pubDetail.getChange().getProject(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.projects.ConfigInfoCache.Entry>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); display(pubDetail); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { origCb.onFailure(caught); } }); }",614c2397088fdcd21270e4f605a4040b08e56b64,"preDisplay(com.google.gerrit.common.data.PatchSetPublishDetail,com.google.gerrit.client.rpc.ScreenLoadCallback)",151695,188,194
103436,gerrit-server_src_main_java_com_google_gerrit_server_account_Accounts.java,,,,public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).values()) { if (RefNames.REFS_USERS_DEFAULT.equals(ref.getName())) { continue; } return true; } return false; } },8818ec5caf1bb2ba4a77c6e8e8dea5aa8a5210dd,,hasAnyAccount(),16,0,public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.Accounts.hasAnyAccount(repo); } },bea3edb7c5097889c4d8e750f1a9060d0853bbca,hasAnyAccount(),22707,103,60
16693,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScreen.java,0.0,"@java.lang.Override protected void onLoad() { super.onLoad(); if ((patchSetDetail) == null) { Util.DETAIL_SVC.patchSetDetail(idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.PatchSetDetail>() { @java.lang.Override public void onSuccess(com.google.gerrit.common.data.PatchSetDetail result) { patchSetDetail = result; if ((fileList) == null) { fileList = new com.google.gerrit.client.changes.PatchTable(); fileList.display(result); patchIndex = fileList.indexOf(patchKey); topNav.display(patchIndex, getPatchScreenType(), fileList); bottomNav.display(patchIndex, getPatchScreenType(), fileList); } refresh(true); } }); } else { refresh(true); } }",9cccb06d563b89b9b5abbc4f0da7802a1e71db4b,"@java.lang.Override protected void onLoad() { super.onLoad(); if ((patchSetDetail) == null) { Util.DETAIL_SVC.patchSetDetail(idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.PatchSetDetail>() { @java.lang.Override public void onSuccess(com.google.gerrit.common.data.PatchSetDetail result) { patchSetDetail = result; if ((fileList) == null) { fileList = new com.google.gerrit.client.changes.PatchTable(); fileList.setSkipDeleted(settingsPanel.skipDeleted.getValue()); fileList.setSkipUncommented(settingsPanel.skipUncommented.getValue()); fileList.display(result); patchIndex = fileList.indexOf(patchKey); } refresh(true); } }); } else { refresh(true); } }",971af8666c60b0dd19eeb23107e824ac72260b58,onLoad(),onLoad(),5,0,"@java.lang.Override protected void onLoad() { super.onLoad(); if ((patchSetDetail) == null) { Util.DETAIL_SVC.patchSetDetail(idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.PatchSetDetail>() { @java.lang.Override public void onSuccess(com.google.gerrit.common.data.PatchSetDetail result) { patchSetDetail = result; if ((fileList) == null) { fileList = new com.google.gerrit.client.changes.PatchTable(prefs); fileList.display(result); patchIndex = fileList.indexOf(patchKey); } refresh(true); } }); } else { refresh(true); } }",4427dce61497248d4380e3fe510f785708cd90eb,onLoad(),95063,206,174
58322,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_AccountGeneralPreferences.java,2.0,public void setCopySelfOnEmails(boolean includeSelfOnEmail) { copySelfOnEmail = includeSelfOnEmail; },5f9e239f6310b87dffae1393cb7ccfc73250c232,public void setEmailingOptionsStrategy(com.google.gerrit.reviewdb.client.AccountGeneralPreferences.EmailingOptionsStrategy strategy) { this.emailingOptionsStrategy = strategy.name(); },270684029dc9e44847b7ebbb2ff782011504dcf4,setCopySelfOnEmails(boolean),setEmailingOptionsStrategy(com.google.gerrit.reviewdb.client.AccountGeneralPreferences$EmailingOptionsStrategy),31,0,public void setEmailStrategy(com.google.gerrit.reviewdb.client.AccountGeneralPreferences.EmailStrategy strategy) { this.emailStrategy = strategy.name(); },fccc97c2e127c88b458ab0bcdb0902944ab16c75,setEmailStrategy(com.google.gerrit.reviewdb.client.AccountGeneralPreferences$EmailStrategy),160529,44,38
16293,src_test_java_com_google_gwtorm_data_PhoneBookDb.java,2.0,@com.google.gwtorm.client.Relation com.google.gwtorm.data.PersonAccess people();,cf6efe2b0b9333389ac0ae761b75017c161b0f25,@com.google.gwtorm.client.Relation(id = 0) com.google.gwtorm.data.PersonAccess people();,543b7d41d3d784478c7dbb85352208e03fee6c32,people(),people(),2,2,@com.google.gwtorm.client.Relation(id = 1) com.google.gwtorm.data.PersonAccess people();,d97f38f21f6460910dfc609958963c97ff3ce855,people(),169097,28,28
87093,gerrit-server_src_main_java_com_google_gerrit_server_change_CommentJson.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private <IN extends com.google.gerrit.reviewdb.client.Comment, OUT extends com.google.gerrit.extensions.common.CommentInfo> java.util.Map<java.lang.String, java.util.List<OUT>> format(java.lang.Iterable<IN> l, java.lang.Class<OUT> clazz) throws com.google.gwtorm.server.OrmException { java.util.Map<java.lang.String, java.util.List<OUT>> out = new java.util.TreeMap<>(); com.google.gerrit.server.account.AccountLoader accountLoader = (fillAccounts) ? accountLoaderFactory.create(true) : null; for (IN c : l) { OUT o = toCommentInfo(c, clazz, accountLoader); java.util.List<OUT> list = out.get(o.path); if (list == null) { list = new java.util.ArrayList<>(); out.put(o.path, list); } o.path = null; list.add(o); } for (java.util.List<OUT> list : out.values()) { java.util.Collections.sort(list, com.google.gerrit.server.CommentsUtil.COMMENT_INFO_ORDER); } if (accountLoader != null) { accountLoader.fill(); } return out; }",108e576ccf076b88a5519e0e8bedaca74e5d4950,,"format(java.lang.Iterable,java.lang.Class)",12,11,"public java.util.Map<java.lang.String, java.util.List<T>> format(java.lang.Iterable<F> comments) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountLoader loader = (fillAccounts) ? accountLoaderFactory.create(true) : null; java.util.Map<java.lang.String, java.util.List<T>> out = new java.util.TreeMap<>(); for (F c : comments) { T o = toInfo(c, loader); java.util.List<T> list = out.get(o.path); if (list == null) { list = new java.util.ArrayList<>(); out.put(o.path, list); } o.path = null; list.add(o); } for (java.util.List<T> list : out.values()) { java.util.Collections.sort(list, com.google.gerrit.server.CommentsUtil.COMMENT_INFO_ORDER); } if (loader != null) { loader.fill(); } return out; }",41527ddb9a3d181e72a3a4df82661dc5c1ea345e,format(java.lang.Iterable),56279,301,248
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,72.0,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, revision, publish, deleteRevision); } }",a0fff05a4cde975828ab008f1b54e874e37cb91b,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, project, revision, publish, deleteRevision); } }",c7339ba220f29604c7453640e7971a07094ebed7,onDeleteRevision(com.google.gwt.event.dom.client.ClickEvent),onDeleteRevision(com.google.gwt.event.dom.client.ClickEvent),7,71,"@com.google.gwt.uibinder.client.UiHandler(""deleteRevision"") void onDeleteRevision(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteDraftRevision())) { com.google.gerrit.client.change.ChangeActions.delete(getProject(), changeId, revision, publish, deleteRevision); } }",414f23eee5a8b3ecd619186226c75e58196df9d7,onDeleteRevision(com.google.gwt.event.dom.client.ClickEvent),210864,102,102
74743,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_ExportReviewNotes.java,4.0,@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.client.Change> setValue(java.util.List<com.google.gerrit.reviewdb.client.Change> value) { throw new java.lang.UnsupportedOperationException(); },37694e918664cb34760151764b9867b5bfb270d0,@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.client.Change> setValue(java.util.Collection<com.google.gerrit.reviewdb.client.Change> value) { throw new java.lang.UnsupportedOperationException(); },eac22913e9b025e4fef6a33ea1bbdff80f410b22,setValue(java.util.List),setValue(java.util.Collection),5,7,@java.lang.Override public java.util.List<com.google.gerrit.server.notedb.ChangeNotes> setValue(java.util.List<com.google.gerrit.server.notedb.ChangeNotes> value) { throw new java.lang.UnsupportedOperationException(); },130f914516cc0e7bf055ddf2f46cc93d040a8d90,setValue(java.util.List),55214,64,64
14559,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,18.0,public static java.util.List<com.google.gerrit.reviewdb.RefRight> filterMostSpecific(java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights) { boolean sameRefPattern = true; java.util.List<com.google.gerrit.reviewdb.RefRight> mostSpecific = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); java.lang.String currentRefPattern = null; int i = 0; while (sameRefPattern && (i < (actionRights.size()))) { if (currentRefPattern == null) { currentRefPattern = actionRights.get(i).getRefPattern(); mostSpecific.add(actionRights.get(i)); i++; } else { if (currentRefPattern.equals(actionRights.get(i).getRefPattern())) { mostSpecific.add(actionRights.get(i)); i++; } else { sameRefPattern = false; } } } return mostSpecific; },498103690c5efe3eb62cf0626652ec3b6aa23d17,"public static java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> sortedRightsByPattern(java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights) { java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> rights = new java.util.TreeMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern>(com.google.gerrit.server.project.RefControl.DESCENDING_SORT); for (com.google.gerrit.reviewdb.RefRight right : actionRights) { if (rights.containsKey(right.getRefPattern())) { rights.get(right.getRefPattern()).addRight(right); } else { com.google.gerrit.server.project.RefControl.RefRightsForPattern patternRights = new com.google.gerrit.server.project.RefControl.RefRightsForPattern(); patternRights.addRight(right); rights.put(right.getRefPattern(), patternRights); } } return rights; }",27a86c5129b0050d1ae41c08e581bda9a40217a7,filterMostSpecific(java.util.List),sortedRightsByPattern(java.util.List),9,1,"private static java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> sortedRightsByPattern(java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights) { java.util.SortedMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern> rights = new java.util.TreeMap<java.lang.String, com.google.gerrit.server.project.RefControl.RefRightsForPattern>(com.google.gerrit.server.project.RefControl.DESCENDING_SORT); for (com.google.gerrit.reviewdb.RefRight actionRight : actionRights) { com.google.gerrit.server.project.RefControl.RefRightsForPattern patternRights = rights.get(actionRight.getRefPattern()); if (patternRights == null) { patternRights = new com.google.gerrit.server.project.RefControl.RefRightsForPattern(); rights.put(actionRight.getRefPattern(), patternRights); } patternRights.addRight(actionRight); } return rights; }",63262985450313d7c0b1523dd5b6af39e60dbbaf,sortedRightsByPattern(java.util.List),26808,277,272
108615,gerrit-server_src_main_java_com_google_gerrit_server_git_NotesBranchUtil.java,1.0,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException, org.eclipse.jgit.api.errors.ConcurrentRefUpdateException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",6a74ee00e5d4ab12d453fc1ba0381b1a9e9cfe27,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws com.google.gerrit.server.git.LockFailureException, java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",41bc49716bc0234bc6c034da994b47fc6a59d5be,"commitNewNotes(org.eclipse.jgit.notes.NoteMap,java.lang.String,org.eclipse.jgit.lib.PersonIdent,java.lang.String)","commitNewNotes(org.eclipse.jgit.notes.NoteMap,java.lang.String,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",9,1,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",13c36e551efaa738f9b7db4283187a768e6513e8,"commitNewNotes(org.eclipse.jgit.notes.NoteMap,java.lang.String,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",207335,183,169
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_NativeList.java,,,,public boolean isEmpty() { return (size()) == 0; },308d5dc37569f7ab4d67cbc95c430e623ee3eae8,,isEmpty(),13,5,public final boolean isEmpty() { return (size()) == 0; },9682ebc910c54f6782778327d5d98ad7176833ea,isEmpty(),19475,13,14
110994,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,39.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejected() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); org.eclipse.jgit.lib.Config ac = new org.eclipse.jgit.lib.Config(); try (org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(allUsersRepo.getRepository(), AccountConfig.ACCOUNT_CONFIG, getHead(allUsersRepo.getRepository()).getTree())) { assertThat(tw).isNotNull(); ac.fromText(new java.lang.String(allUsersRepo.getRevWalk().getObjectReader().open(tw.getObjectId(0), com.google.gerrit.acceptance.api.accounts.OBJ_BLOB).getBytes(), java.nio.charset.StandardCharsets.UTF_8)); } ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, ""OOO""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""account update not allowed""); }",b3331cdd848a4e42ddb9d908a15976393ca85105,,pushAccountConfigToUserBranchIsRejected(),4,66,"@org.junit.Test public void pushAccountConfigToUserBranchIsRejected() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + "":userRef"")); allUsersRepo.reset(""userRef""); org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_STATUS, ""OOO""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, ""Update account config"", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus(""account update not allowed""); }",9a71c4e4d0591c08d889ba27418227645d4cc6fe,pushAccountConfigToUserBranchIsRejected(),122510,374,243
79370,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListCacheImpl.java,5.0,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get(key, fileLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException | org.eclipse.jgit.errors.LargeObjectException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e.getCause()); } }",ef7ea814f3ee899abd29bb0ae363a7315098bd0f,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get(key, fileLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",812a3178862633bc29f98a9860d6c99311751b9e,"get(com.google.gerrit.server.patch.PatchListKey,com.google.gerrit.reviewdb.client.Project$NameKey)","get(com.google.gerrit.server.patch.PatchListKey,com.google.gerrit.reviewdb.client.Project$NameKey)",3,5,"@java.lang.Override public com.google.gerrit.server.patch.PatchList get(com.google.gerrit.server.patch.PatchListKey key, com.google.gerrit.reviewdb.client.Project.NameKey project) throws com.google.gerrit.server.patch.PatchListNotAvailableException { try { return fileCache.get(key, fileLoaderFactory.create(key, project)); } catch (java.util.concurrent.ExecutionException e) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } catch (com.google.common.util.concurrent.UncheckedExecutionException e) { if ((e.getCause()) instanceof org.eclipse.jgit.errors.LargeObjectException) { PatchListLoader.log.warn((""Error computing "" + key), e); throw new com.google.gerrit.server.patch.PatchListNotAvailableException(e); } throw e; } }",dcf835210858306c9d7e6f71cc2c3918455ae241,"get(com.google.gerrit.server.patch.PatchListKey,com.google.gerrit.reviewdb.client.Project$NameKey)",35046,231,231
12579,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,,,,"private void init_sendemail(final org.eclipse.jgit.lib.FileBasedConfig cfg, final org.eclipse.jgit.lib.FileBasedConfig sec) { header(""Email Delivery""); final java.lang.String D = ""sendemail""; java.lang.String def_port = ""(default)""; java.lang.String smtpserver = askdefault(""localhost"", ""SMTP server hostname""); java.lang.String port = askdefault(def_port, ""SMTP server port""); com.google.gerrit.server.mail.SmtpEmailSender.Encryption enc = askdefault(Encryption.NONE, ""SMTP encryption""); java.lang.String username = askdefault(null, ""Application username""); java.lang.String password = (username != null) ? password(""%s's password"", username) : null; set(cfg, D, ""smtpServer"", smtpserver); set(cfg, D, ""smtpServerPort"", (port != def_port ? port : null)); set(cfg, D, ""smtpEncryption"", enc, Encryption.NONE); set(cfg, D, ""smtpUser"", username); set(sec, D, ""smtpPass"", password); }",0359e0f57f5e21e785bdb26d7fb51c5b4384517a,,"init_sendemail(org.eclipse.jgit.lib.FileBasedConfig,org.eclipse.jgit.lib.FileBasedConfig)",4,6,"private void init_sendemail(final org.eclipse.jgit.lib.Config cfg, final org.eclipse.jgit.lib.Config sec) { ui.header(""Email Delivery""); java.lang.String def_port = ""(default)""; java.lang.String smtpserver = ui.readString(""localhost"", ""SMTP server hostname""); java.lang.String port = ui.readString(def_port, ""SMTP server port""); com.google.gerrit.server.mail.SmtpEmailSender.Encryption enc = ui.readEnum(Encryption.NONE, ""SMTP encryption""); java.lang.String username = null; if ((enc != (com.google.gerrit.server.mail.SmtpEmailSender.Encryption.NONE)) || (!(com.google.gerrit.pgm.Init.isLocal(smtpserver)))) { username = com.google.gerrit.pgm.Init.username(); } username = ui.readString(username, ""SMTP username""); java.lang.String password = (username != null) ? ui.password(""%s's password"", username) : null; set(cfg, ""sendemail"", ""smtpServer"", smtpserver); set(cfg, ""sendemail"", ""smtpServerPort"", (port != def_port ? port : null)); set(cfg, ""sendemail"", ""smtpEncryption"", enc, Encryption.NONE); set(cfg, ""sendemail"", ""smtpUser"", username); set(sec, ""sendemail"", ""smtpPass"", password); }",df221a526ac0112d146362d77693625924d8b33c,"init_sendemail(org.eclipse.jgit.lib.Config,org.eclipse.jgit.lib.Config)",78867,257,327
91064,src_test_java_com_cisco_gerrit_plugins_slack_message_CommentAddedMessageGeneratorTest.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean notifyOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""notify-on-comment-added"", true)).thenReturn(notifyOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",96a7e72915f7e330bcbda1c13e9f315e16a5a065,,getConfig(boolean),5,2,"private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean(""enabled"", false)).thenReturn(true); when(mockPluginConfig.getString(""webhookurl"", """")).thenReturn(""https://webook/""); when(mockPluginConfig.getString(""channel"", ""general"")).thenReturn(""testchannel""); when(mockPluginConfig.getString(""username"", ""gerrit"")).thenReturn(""testuser""); when(mockPluginConfig.getString(""ignore"", """")).thenReturn(""^WIP.*""); when(mockPluginConfig.getBoolean(""publish-on-comment-added"", true)).thenReturn(publishOnCommentAdded); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }",55556271ff8720605882101b2408eddd0ffc9680,getConfig(boolean),140478,293,293
107000,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,119.0,"protected Project.NameKey createProject(java.lang.String nameSuffix) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, null); }",29c9302d9201dc4cb6fd42afd56c228c37ae8a42,"protected com.google.gerrit.reviewdb.client.Project.NameKey createProject(java.lang.String nameSuffix) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, null); }",1917647c486aba7be1c0edb82f4b01703588f404,createProject(java.lang.String),createProject(java.lang.String),5,119,"protected Project.NameKey createProject(java.lang.String nameSuffix) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, null); }",29c9302d9201dc4cb6fd42afd56c228c37ae8a42,createProject(java.lang.String),3643,55,42
92012,gerrit-server_src_test_java_com_google_gerrit_server_mail_send_CommentFormatterTest.java,4.0,"@org.junit.Test public void testNestedQuotes1() { java.lang.String comment = "" > > prior\n > \n > next\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertBlock(result, 0, BlockType.QUOTE, ""> prior\n\nnext""); }",d0f7dbed9d06d9ea322a281ae32397e994f3eda6,"@org.junit.Test public void testNestedQuotes1() { java.lang.String comment = "" > > prior\n > \n > next\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertQuoteBlock(result, 0, 2); assertQuoteBlock(result.get(0).blocks, 0, 1); assertBlock(result.get(0).blocks.get(0).blocks, 0, BlockType.PARAGRAPH, ""prior""); assertBlock(result.get(0).blocks, 1, BlockType.PARAGRAPH, ""next\n""); }",a6f7f35b75854beb53828b74d277fcc6bdad6427,testNestedQuotes1(),testNestedQuotes1(),4,4,"@org.junit.Test public void testNestedQuotes1() { java.lang.String comment = "" > > prior\n > \n > next\n""; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertQuoteBlock(result, 0, 2); assertQuoteBlock(result.get(0).quotedBlocks, 0, 1); assertBlock(result.get(0).quotedBlocks.get(0).quotedBlocks, 0, BlockType.PARAGRAPH, ""prior""); assertBlock(result.get(0).quotedBlocks, 1, BlockType.PARAGRAPH, ""next\n""); }",84cb2687cc8f5beff73db6cf29d19361b71b99b9,testNestedQuotes1(),56570,158,162
67778,gerrit-gwtui_src_main_java_com_google_gerrit_client_FormatUtil.java,2.0,"public static java.lang.String nameEmail(com.google.gerrit.client.account.AccountInfo info) { java.lang.String name = info.name(); if ((name == null) || (name.trim().isEmpty())) { name = com.google.gerrit.client.Gerrit.getConfig().getAnonymousCowardName(); } java.lang.StringBuilder b = new java.lang.StringBuilder().append(name); if ((info.email()) != null) { b.append("" <"").append(info.email()).append("">""); } else if ((info._account_id()) > 0) { b.append("" ("").append(info._account_id()).append("")""); } return b.toString(); }",26bba2d2d95ac7f249fe90bed6f75ad2f0400ebc,"public static java.lang.String nameEmail(com.google.gerrit.client.account.AccountInfo info) { java.lang.String name = info.name(); if ((name == null) || (name.trim().isEmpty())) { name = com.google.gerrit.client.Gerrit.getServerInfo().user().anonymousCowardName(); } java.lang.StringBuilder b = new java.lang.StringBuilder().append(name); if ((info.email()) != null) { b.append("" <"").append(info.email()).append("">""); } else if ((info._account_id()) > 0) { b.append("" ("").append(info._account_id()).append("")""); } return b.toString(); }",88efb62d6ca66a20f50c71c245fd62f7225511f9,nameEmail(com.google.gerrit.client.account.AccountInfo),nameEmail(com.google.gerrit.client.account.AccountInfo),18,2,"public static java.lang.String nameEmail(com.google.gerrit.client.account.AccountInfo info) { java.lang.String name = info.name(); if ((name == null) || (name.trim().isEmpty())) { name = com.google.gerrit.client.Gerrit.info().user().anonymousCowardName(); } java.lang.StringBuilder b = new java.lang.StringBuilder().append(name); if ((info.email()) != null) { b.append("" <"").append(info.email()).append("">""); } else if ((info._accountId()) > 0) { b.append("" ("").append(info._accountId()).append("")""); } return b.toString(); }",c14e2f5f445623f5c967810a406e14c7412c175f,nameEmail(com.google.gerrit.client.account.AccountInfo),151894,167,162
57410,gerrit-server_src_main_java_com_google_gerrit_server_config_CachesCollection.java,2.0,"@java.lang.Override public com.google.gerrit.server.config.CacheResource parse(com.google.gerrit.server.config.ConfigResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",5199a90f0257d2a01129ab198fd0cd8e8d3b46e8,"@java.lang.Override public com.google.gerrit.server.config.CacheResource parse(com.google.gerrit.server.config.ConfigResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { final com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } if (!(((com.google.gerrit.server.IdentifiedUser) (user)).getCapabilities().canViewCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to view caches""); } java.lang.String cacheName = id.get(); java.lang.String pluginName = ""gerrit""; int i = cacheName.indexOf('.'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : """"; } com.google.inject.Provider<com.google.common.cache.Cache<?, ?>> cacheProvider = cacheMap.byPlugin(pluginName).get(cacheName); if (cacheProvider == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cacheProvider); }",0c46ba841b9bc3b1e666df8d4b66c639561aa460,"parse(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.extensions.restapi.IdString)",8,2,"@java.lang.Override public com.google.gerrit.server.config.CacheResource parse(com.google.gerrit.server.config.ConfigResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.CurrentUser user = self.get(); if (user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException(""Authentication required""); } else if (!(user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(user.getCapabilities().canViewCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to view caches""); } java.lang.String cacheName = id.get(); java.lang.String pluginName = ""gerrit""; int i = cacheName.lastIndexOf('-'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : """"; } com.google.inject.Provider<com.google.common.cache.Cache<?, ?>> cacheProvider = cacheMap.byPlugin(pluginName).get(cacheName); if (cacheProvider == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cacheProvider); }",81723a9d74316ef9da355b6c9519d7544d9bccb5,"parse(com.google.gerrit.server.config.ConfigResource,com.google.gerrit.extensions.restapi.IdString)",101752,391,374
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,1.0,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",7fe2fc83dea587d2bc6311b98747bdf7687011d6,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return isReachableFrom(state, repo, commit, repo.getAllRefs()); }",2055da0c96b3094de80a26ab07d743ea5b1415a5,"canRead(com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit)","canRead(com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit)",17,1,"public boolean canRead(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.reviewdb.client.Project.NameKey project = state.getNameKey(); try { java.util.List<com.google.gerrit.server.query.change.ChangeData> changes = queryProvider.get().enforceVisibility(true).byProjectCommit(project, commit); if (!(changes.isEmpty())) { return true; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.restapi.project.CommitsCollection.log.error((((""Cannot look up change for commit "" + (commit.name())) + "" in "") + project), e); } return reachable.fromRefs(state, repo, commit, repo.getAllRefs()); }",9f42d3379083b5f46917a33c987869d081f0d34e,"canRead(com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit)",218416,209,210
160081,src_main_java_com_googlesource_gerrit_plugins_gitiles_FilteredRepository.java,18.0,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } return refFilter.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), true).get(ref.getName()); }",cbc191a0f4e5bb626b9ecee20e33e851cfb2057b,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = delegate.getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.defaults()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",498c2380c63d838a7dfa17759ceefed36e64af32,getRef(java.lang.String),getRef(java.lang.String),3,18,"@java.lang.Override public org.eclipse.jgit.lib.Ref getRef(java.lang.String name) throws java.io.IOException { org.eclipse.jgit.lib.Ref ref = git.getRefDatabase().getRef(name); if (ref == null) { return null; } try { return perm.filter(com.google.common.collect.ImmutableMap.of(ref.getName(), ref), git, com.google.gerrit.server.permissions.PermissionBackend.RefFilterOptions.builder().setFilterTagsSeparately(true).build()).get(ref.getName()); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new java.io.IOException(e); } }",7a493638a3ca800b2bc46d17f0a77901ecda02eb,getRef(java.lang.String),144941,149,161
131290,src_test_java_com_googlesource_gerrit_plugins_webhooks_PostTaskTest.java,3.0,"@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }",538147e92e0d7ada834c2dd6568c208a30668b98,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.CONTENT); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, remote, processor); }",a3abe485048b76a319ef02b64562858d1fb2ad19,setup(),setup(),10,3,"@org.junit.Before public void setup() { when(remote.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(remote.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, processor, projectCreated, remote); }",964b8ce5017823aaf33343de1710520b6a982f4a,setup(),65280,168,170
71634,gerrit-server_src_main_java_com_google_gerrit_server_change_PublishDraftPatchSet.java,10.0,"private com.google.gerrit.reviewdb.client.PatchSet updateDraftPatchSet(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return dbProvider.get().patchSets().atomicUpdate(rsrc.getPatchSet().getId(), new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.PatchSet>() { @java.lang.Override public com.google.gerrit.reviewdb.client.PatchSet update(com.google.gerrit.reviewdb.client.PatchSet patchset) { patchset.setDraft(false); return patchset; } }); }",ce8dbab3f69b5b33c7991e2d025a8d2bc0f6d85c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.PublishDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { return publish.apply(rsrc.getControl().getCurrentUser(), rsrc.getChange(), rsrc.getChange().currentPatchSetId(), null); }",dc6f681ac2790a6d5d84b16e4f7cf42ab84e24cd,updateDraftPatchSet(com.google.gerrit.server.change.RevisionResource),"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.PublishDraftPatchSet$Input)",4,9,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.PublishDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { return publish.apply(rsrc.getControl().getUser(), rsrc.getChange(), rsrc.getChange().currentPatchSetId(), null); }",de6bd0f1cf8ef7890cf078e22988245d18101f6d,"apply(com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.PublishDraftPatchSet$Input)",57927,120,120
60013,src_main_java_com_googlesource_gerrit_plugins_xdocs_Module.java,0.0,"@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module()); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(new com.google.gerrit.extensions.webui.TopMenu() { @java.lang.Override public java.util.List<com.googlesource.gerrit.plugins.xdocs.MenuEntry> getEntries() { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append(""/plugins/""); url.append(pluginName); url.append(XDocServlet.PATH_PREFIX); url.append(""${projectName}/README.md""); return com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuEntry(com.google.gerrit.extensions.webui.GerritTopMenu.PROJECTS, com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuItem(""Readme"", url.toString())))); } }); }",e11a7475f98e0097673ef0611feca381181344a4,"@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module()); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.PatchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocPatchWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(new com.google.gerrit.extensions.webui.TopMenu() { @java.lang.Override public java.util.List<com.googlesource.gerrit.plugins.xdocs.MenuEntry> getEntries() { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append(""/plugins/""); url.append(pluginName); url.append(XDocServlet.PATH_PREFIX); url.append(""${projectName}/README.md""); return com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuEntry(com.google.gerrit.extensions.webui.GerritTopMenu.PROJECTS, com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuItem(""Readme"", url.toString())))); } }); }",4b88b136c1a988104360208120d5288bb91c9667,configure(),configure(),2,0,"@java.lang.Override protected void configure() { install(new com.googlesource.gerrit.plugins.xdocs.XDocLoader.Module()); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileWebLink.class).to(com.googlesource.gerrit.plugins.xdocs.XDocPatchWebLink.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.TopMenu.class).toInstance(new com.google.gerrit.extensions.webui.TopMenu() { @java.lang.Override public java.util.List<com.googlesource.gerrit.plugins.xdocs.MenuEntry> getEntries() { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append(""/plugins/""); url.append(pluginName); url.append(XDocServlet.PATH_PREFIX); url.append(""${projectName}/README.md""); return com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuEntry(com.google.gerrit.extensions.webui.GerritTopMenu.PROJECTS, com.google.common.collect.Lists.newArrayList(new com.googlesource.gerrit.plugins.xdocs.MenuItem(""Readme"", url.toString())))); } }); }",8ee951cb48f2b2c0514021929441161d7ed9081c,configure(),130424,441,441
110915,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_notedb_OnlineNoteDbMigrationIT.java,6.0,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(NotesMigrationState.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",92ec95d09cf7df956bfc86faf4696573aac824cd,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); assertMigrationException(""Sequence gap must be non-negative"", ( b) -> b.setSequenceGap((-1)), ( m) -> { }); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",1ad106f6c3bb6d77e1802d241128b604426922b6,preconditionsFail(),preconditionsFail(),6,7,"@org.junit.Test public void preconditionsFail() throws java.lang.Exception { java.util.List<com.google.gerrit.reviewdb.client.Change.Id> cs = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Change.Id(1)); java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> ps = com.google.common.collect.ImmutableList.of(new com.google.gerrit.reviewdb.client.Project.NameKey(""p"")); assertMigrationException(""Cannot rebuild without noteDb.changes.write=true"", ( b) -> b, NoteDbMigrator::rebuild); assertMigrationException(""Cannot set both changes and projects"", ( b) -> b.setChanges(cs).setProjects(ps), ( m) -> { }); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setChanges(cs), NoteDbMigrator::migrate); assertMigrationException(""Cannot set changes or projects during auto-migration"", ( b) -> b.setProjects(ps), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY); assertMigrationException(""Migration has already progressed past the endpoint of the \""trial mode\"" state"", ( b) -> b.setTrialMode(true), NoteDbMigrator::migrate); setNotesMigrationState(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY); assertMigrationException(""Cannot force rebuild changes; NoteDb is already the primary storage for some changes"", ( b) -> b.setForceRebuild(true), NoteDbMigrator::migrate); }",6b750ca7299322d55b49005d506bfbbba766c42d,preconditionsFail(),92804,445,414
72006,gerrit-server_src_main_java_com_google_gerrit_server_account_GetPreferences.java,9.0,"@java.lang.Override public com.google.gerrit.server.account.GetPreferences.PreferenceInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to administrator""); } com.google.gerrit.reviewdb.client.Account a = db.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try (org.eclipse.jgit.lib.Repository git = gitMgr.openRepository(allUsersName)) { com.google.gerrit.server.account.VersionedAccountPreferences p = com.google.gerrit.server.account.VersionedAccountPreferences.forUser(rsrc.getUser().getAccountId()); p.load(git); return new com.google.gerrit.server.account.GetPreferences.PreferenceInfo(a.getGeneralPreferences(), p, git); } }",fffa9a5a7bbc2e52f46df582f5f0a30b1025cd17,"@java.lang.Override public com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to administrator""); } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); return readFromGit ? com.google.gerrit.server.account.GetPreferences.readFromGit(accountId, gitMgr, allUsersName, null) : readFromDb(accountId); }",0ee9a8afda7e9a0eeb3ca1a1b781a80415f1346f,apply(com.google.gerrit.server.account.AccountResource),apply(com.google.gerrit.server.account.AccountResource),14,8,"@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""restricted to administrator""); } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); return readFromGit ? com.google.gerrit.server.account.GetPreferences.readFromGit(accountId, gitMgr, allUsersName, null) : readFromDb(accountId); }",52feb5b168fc5d6bc8346b8428f14a3d881d5a8f,apply(com.google.gerrit.server.account.AccountResource),178154,221,220
76404,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeUpdate.java,5.0,"final org.eclipse.jgit.lib.ObjectId apply(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (isEmpty()) { return null; } org.eclipse.jgit.lib.ObjectId z = org.eclipse.jgit.lib.ObjectId.zeroId(); org.eclipse.jgit.lib.CommitBuilder cb = applyImpl(rw, ins, curr); if (cb == null) { result = z; return z; } cb.setAuthor(authorIdent); cb.setCommitter(new org.eclipse.jgit.lib.PersonIdent(serverIdent, when)); if (!(curr.equals(z))) { cb.setParentId(curr); } else { cb.setParentIds(); } if ((cb.getTreeId()) == null) { if (curr.equals(z)) { cb.setTreeId(com.google.gerrit.server.notedb.AbstractChangeUpdate.emptyTree(ins)); } else { org.eclipse.jgit.revwalk.RevCommit p = rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } result = ins.insert(cb); return result; }",5ecb45a0c48d8b9709086a6a0d3effe68ff827ec,"final org.eclipse.jgit.lib.ObjectId apply(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (isEmpty()) { return null; } org.eclipse.jgit.lib.ObjectId z = org.eclipse.jgit.lib.ObjectId.zeroId(); org.eclipse.jgit.lib.CommitBuilder cb = applyImpl(rw, ins, curr); if (cb == null) { result = z; return z; } else if (cb == (NO_OP_UPDATE)) { return null; } cb.setAuthor(authorIdent); cb.setCommitter(new org.eclipse.jgit.lib.PersonIdent(serverIdent, when)); if (!(curr.equals(z))) { cb.setParentId(curr); } else { cb.setParentIds(); } if ((cb.getTreeId()) == null) { if (curr.equals(z)) { cb.setTreeId(com.google.gerrit.server.notedb.AbstractChangeUpdate.emptyTree(ins)); } else { org.eclipse.jgit.revwalk.RevCommit p = rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } result = ins.insert(cb); return result; }",a34afc7c2ffba6031dac1983307a1928c91c1f7f,"apply(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.ObjectId)","apply(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.ObjectId)",4,5,"final org.eclipse.jgit.lib.ObjectId apply(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (isEmpty()) { return null; } org.eclipse.jgit.lib.ObjectId z = org.eclipse.jgit.lib.ObjectId.zeroId(); org.eclipse.jgit.lib.CommitBuilder cb = applyImpl(rw, ins, curr); if (cb == null) { result = z; return z; } else if (cb == (com.google.gerrit.server.notedb.AbstractChangeUpdate.NO_OP_UPDATE)) { return null; } cb.setAuthor(authorIdent); cb.setCommitter(new org.eclipse.jgit.lib.PersonIdent(serverIdent, when)); if (!(curr.equals(z))) { cb.setParentId(curr); } else { cb.setParentIds(); } if ((cb.getTreeId()) == null) { if (curr.equals(z)) { cb.setTreeId(com.google.gerrit.server.notedb.AbstractChangeUpdate.emptyTree(ins)); } else { org.eclipse.jgit.revwalk.RevCommit p = rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } result = ins.insert(cb); return result; }",59d5886b0131ecca0f9a2318d2538d2966c999c8,"apply(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.ObjectId)",107885,318,334
59140,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ListLoggingLevelCommand.java,,,,"@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if ((regex) == null) { regex = ""^*.*$""; } printAll(); }",2d40ece8684f26867189310669b372bd78b4c175,,run(),22,0,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override protected void run() { java.util.Map<java.lang.String, java.lang.String> logs = new java.util.TreeMap<>(); for (java.util.Enumeration<org.apache.log4j.Logger> logger = org.apache.log4j.LogManager.getCurrentLoggers(); logger.hasMoreElements();) { org.apache.log4j.Logger log = logger.nextElement(); if (((name) == null) || (log.getName().contains(name))) { logs.put(log.getName(), log.getEffectiveLevel().toString()); } } for (java.util.Map.Entry<java.lang.String, java.lang.String> e : logs.entrySet()) { stdout.println((((e.getKey()) + "": "") + (e.getValue()))); } }",21f8a4d00cefe42c3b50ca8729e7120165d6c338,run(),157364,49,188
140535,java_com_google_gerrit_server_patchlib_DiffSummaryKey.java,2.0,"com.google.gerrit.server.patch.PatchListKey toPatchListKey() { return new com.google.gerrit.server.patch.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",938de41394a8052bff097c4cb0ac73c6594c523e,"public com.google.gerrit.server.patchlib.PatchListKey toPatchListKey() { return new com.google.gerrit.server.patchlib.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",2ede4523c95ee84eb088f1cd52a15049ad767b36,toPatchListKey(),toPatchListKey(),11,2,"public com.google.gerrit.server.diff.PatchListKey toPatchListKey() { return new com.google.gerrit.server.diff.PatchListKey(oldId, parentNum, newId, whitespace, PatchListKey.Algorithm.OPTIMIZED_DIFF); }",93cf7d4ff10c280867b3c01ce57a97fbe693cf9b,toPatchListKey(),15714,67,65
46642,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectAccessScreen.java,0.0,"@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.projectAccess(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectAccess>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.common.data.ProjectAccess access) { displayReadOnly(access); } }); savedPanel = ACCESS; }",f0d8bb538715b7284d97a51e101bdfde725706fb,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.rpc.CallbackGroup cbs = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.config.ConfigServerApi.capabilities().get(cbs.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.config.CapabilityMap>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.CapabilityMap result) { capabilityMap = result; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); Util.PROJECT_SVC.projectAccess(getProjectKey(), cbs.addGwtjsonrpc(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectAccess>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.common.data.ProjectAccess access) { displayReadOnly(access); } })); savedPanel = ACCESS; }",af779c202b9b234fc1f9589002933143dbe69bb7,onLoad(),onLoad(),4,0,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.rpc.CallbackGroup cbs = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.config.ConfigServerApi.capabilities(cbs.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.config.CapabilityInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.config.CapabilityInfo> result) { capabilityMap = result; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); Util.PROJECT_SVC.projectAccess(getProjectKey(), cbs.addGwtjsonrpc(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectAccess>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.common.data.ProjectAccess access) { displayReadOnly(access); } })); savedPanel = ACCESS; }",89777b44f309e4a2180b8856ba876e5ca49f0861,onLoad(),28853,253,280
91971,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,,,,"static byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String name, @com.google.gerrit.common.Nullable org.eclipse.jgit.lib.ObjectId id) { byte[] a = ((((project.toString()) + ':') + name) + ':').getBytes(java.nio.charset.StandardCharsets.UTF_8); byte[] b = new byte[(a.length) + (org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH)]; java.lang.System.arraycopy(a, 0, b, 0, a.length); firstNonNull(id, org.eclipse.jgit.lib.ObjectId.zeroId()).copyTo(b, a.length); return b; }",0595855fc2fb08a394e7b6fbd9dd3080a4ec97eb,,"toByteArray(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,org.eclipse.jgit.lib.ObjectId)",5,13,"byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project) { byte[] a = ((((project.toString()) + ':') + (ref())) + ':').getBytes(java.nio.charset.StandardCharsets.UTF_8); byte[] b = new byte[(a.length) + (org.eclipse.jgit.lib.Constants.OBJECT_ID_STRING_LENGTH)]; java.lang.System.arraycopy(a, 0, b, 0, a.length); id().copyTo(b, a.length); return b; }",ee3ffb6c0186842639b4517b94ef4d2869388b2a,toByteArray(com.google.gerrit.reviewdb.client.Project$NameKey),167356,171,123
116853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_PrivateByDefaultIT.java,,,,@org.junit.Test public void pushWithPrivateByDefaultEnabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isTrue(); assertThat(createChange().getChange().change().isPrivate()).isEqualTo(true); },029d212721c990bdbe5ecd9cbc89f747368c7b12,,pushWithPrivateByDefaultEnabled(),2,2,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""change.privateByDefault"", value = ""true"") public void pushWithPrivateByDefaultEnabled() throws java.lang.Exception { assertThat(createChange().getChange().change().isPrivate()).isEqualTo(true); }",97d2692f453bf35f0df7dbd0ab2fc426f7596837,pushWithPrivateByDefaultEnabled(),49492,53,71
47307,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }",cd22ce5415112ad8055d4c0f1b6e4a1a0058633d,,call(),9,2,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }",1e87ee3ae2fc5c95bf73cdc86734dfcd3f00927e,call(),38415,266,269
44373,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScreen.java,3.0,@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(result.commentlinks()); contentTable.setCommentLinkProcessor(commentLinkProcessor); },7df05b7b88738d48b10fcb3592e292ec91be561d,@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfoCache.Value result) { commentLinkProcessor = result.getCommentLinkProcessor(); contentTable.setCommentLinkProcessor(commentLinkProcessor); },3d8e87931be4f5f7eb98e14adc96f5cf9f5ffd47,onSuccess(com.google.gerrit.client.projects.ConfigInfo),onSuccess(com.google.gerrit.client.projects.ConfigInfoCache$Value),6,28,@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfoCache.Entry result) { commentLinkProcessor = result.getCommentLinkProcessor(); contentTable.setCommentLinkProcessor(commentLinkProcessor); },c164fc2f4a41602f0c57b6367cbb622ddad261be,onSuccess(com.google.gerrit.client.projects.ConfigInfoCache$Entry),151731,52,52
53495,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChangesTab.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void renderRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.change.RelatedChanges.ChangeAndCommit info) { sb.openSpan().setStyleName(FileTable.R.css().pointer()).closeSpan(); sb.openSpan().addStyleName(Gerrit.RESOURCES.css().relatedChangesSubject()); java.lang.String url = url(info); if (url != null) { sb.openAnchor().setAttribute(""href"", url); if (url.startsWith(""#"")) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.RelatedChangesTab.OPEN) + ""(event,\"""") + (url.substring(1))) + ""\"")"")); } if (showBranches) { sb.append(info.branch()).append("": ""); } sb.append(info.commit().subject()); sb.closeAnchor(); } else { sb.append(info.commit().subject()); } sb.closeSpan(); sb.openSpan(); com.google.gerrit.client.GitwebLink gw = com.google.gerrit.client.Gerrit.getGitwebLink(); if ((gw != null) && ((!(info.has_change_number())) || (!(info.has_revision_number())))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesGitweb()); sb.setAttribute(""title"", gw.getLinkName()); sb.append('\u25cf'); } else if (((connected) != null) && (!(connected.contains(info.commit().commit())))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesIndirect()); sb.setAttribute(""title"", Resources.C.indirectAncestor()); sb.append('~'); } else if (((info.has_current_revision_number()) && (info.has_revision_number())) && ((info._current_revision_number()) != (info._revision_number()))) { sb.addStyleName(Gerrit.RESOURCES.css().relatedChangesNotCurrent()); sb.setAttribute(""title"", Util.C.notCurrent()); sb.append('\u25cf'); } sb.closeSpan(); }",2405588536311a825c1f2feddb3c9903e7c89e5f,,"renderRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.change.RelatedChanges.ChangeAndCommit)",9,18,"private void renderRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb) { sb.openDiv().setStyleName(RelatedChanges.R.css().row()); sb.openSpan().setStyleName(RelatedChanges.R.css().pointer()); sb.append(com.google.gerrit.client.change.RelatedChangesTab.POINTER_HTML); sb.closeSpan(); sb.openSpan().setStyleName(RelatedChanges.R.css().subject()); java.lang.String url = url(); if (url != null) { sb.openAnchor().setAttribute(""href"", url); if (url.startsWith(""#"")) { sb.setAttribute(""onclick"", com.google.gerrit.client.change.RelatedChangesTab.OPEN); } if (showBranches) { sb.append(info.branch()).append("": ""); } sb.append(info.commit().subject()); sb.closeAnchor(); } else { sb.append(info.commit().subject()); } sb.closeSpan(); sb.openSpan(); com.google.gerrit.client.GitwebLink gw = com.google.gerrit.client.Gerrit.getGitwebLink(); if ((gw != null) && ((!(info.has_change_number())) || (!(info.has_revision_number())))) { sb.setStyleName(RelatedChanges.R.css().gitweb()); sb.setAttribute(""title"", gw.getLinkName()); sb.append('\u25cf'); } else if (notConnected) { sb.setStyleName(RelatedChanges.R.css().indirect()); sb.setAttribute(""title"", Resources.C.indirectAncestor()); sb.append('~'); } else if (((info.has_current_revision_number()) && (info.has_revision_number())) && ((info._current_revision_number()) != (info._revision_number()))) { sb.setStyleName(RelatedChanges.R.css().notCurrent()); sb.setAttribute(""title"", Util.C.notCurrent()); sb.append('\u25cf'); } else { sb.setStyleName(RelatedChanges.R.css().current()); } sb.closeSpan(); sb.closeDiv(); }",7e782bf254027c3ebdfc35eb4160b216f5e0beaa,renderRow(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder),135675,480,480
166630,javatests_com_google_gerrit_common_data_LabelFunctionTest.java,,,,"private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, java.util.Collections.emptyList()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }",709d46029239203219e394b8744b118c54b658e6,,checkNothingHappens(com.google.gerrit.common.data.LabelFunction),7,11,"private static void checkNothingHappens(com.google.gerrit.common.data.LabelFunction function) { com.google.gerrit.common.data.SubmitRecord.Label myLabel = function.check(com.google.gerrit.common.data.LabelFunctionTest.VERIFIED_LABEL, com.google.common.collect.ImmutableList.of()); assertThat(myLabel.status).isEqualTo(SubmitRecord.Label.Status.MAY); assertThat(myLabel.appliedBy).isNull(); }",0cae2edacc8602a9b3c8d8a80f2189c7f880809e,checkNothingHappens(com.google.gerrit.common.data.LabelFunction),114522,104,108
105090,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeEditApiImpl.java,7.0,"@java.lang.Override public void create() throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply(changeResource, null); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create change edit"", e); } }",efba5abf999c4517b8f62fe675542a2043514027,"@java.lang.Override public void create() throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply(changeResource, null); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create change edit"", e); } }",ee83886747c91e400636e3b2f9d797d9cccc0eca,create(),create(),7,7,"@java.lang.Override public void create() throws com.google.gerrit.extensions.restapi.RestApiException { try { changeEditsPost.apply(changeResource, null); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot create change edit"", e); } }",e7e07eb1fb883aac0e1d3afa59f5e7e17c7393db,create(),188437,105,79
53170,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,23.0,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> all = com.google.common.collect.Iterables.concat(in); com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, all); if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { com.google.gerrit.server.query.change.ChangeData.ensureAllPatchSetsLoaded(db, all); } else { com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, all); } if (has(com.google.gerrit.server.change.REVIEWED)) { ensureReviewedLoaded(all); } com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, all); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeJson.ChangeInfo> out = com.google.common.collect.Maps.newHashMap(); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { res.add(toChangeInfo(out, changes)); } accountLoader.fill(); return res; }",ca30bcd75e276034d57c7fe1f0b85e87d79d3a62,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> all = com.google.common.collect.Iterables.concat(in); com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, all); if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { com.google.gerrit.server.query.change.ChangeData.ensureAllPatchSetsLoaded(db, all); } else { com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, all); } if (has(com.google.gerrit.server.change.REVIEWED)) { ensureReviewedLoaded(all); } com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, all); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeJson.ChangeInfo> out = com.google.common.collect.Maps.newHashMap(); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { res.add(toChangeInfo(out, changes)); } accountLoader.fill(); return res; }",03b74dfd1183315a1515799de793c560fae9a4c1,formatList2(java.util.List),formatList2(java.util.List),48,17,"public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.lang.Iterable<com.google.gerrit.server.query.change.ChangeData> all = com.google.common.collect.Iterables.concat(in); com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(all); if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { com.google.gerrit.server.query.change.ChangeData.ensureAllPatchSetsLoaded(all); } else { com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(all); } java.util.Set<com.google.gerrit.reviewdb.client.Change.Id> reviewed = com.google.common.collect.Sets.newHashSet(); if (has(com.google.gerrit.server.change.REVIEWED)) { reviewed = loadReviewed(all); } com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(all); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); java.util.Map<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.server.change.ChangeJson.ChangeInfo> out = com.google.common.collect.Maps.newHashMap(); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { res.add(toChangeInfo(out, changes, reviewed)); } accountLoader.fill(); return res; }",8db22b260edc326c877b4c3eece0d00940cd2836,formatList2(java.util.List),95772,462,491
67778,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,11.0,private void startPoller() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (0 < (com.google.gerrit.client.Gerrit.getConfig().getChangeUpdateDelay()))) { updateCheck = new com.google.gerrit.client.change.UpdateCheckTimer(this); updateCheck.schedule(); handlers.add(com.google.gerrit.client.ui.UserActivityMonitor.addValueChangeHandler(updateCheck)); } },df06d83655253bd7763e70358ccd7d2e6db5fc85,private void startPoller() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (0 < (com.google.gerrit.client.Gerrit.getServerInfo().change().updateDelay()))) { updateCheck = new com.google.gerrit.client.change.UpdateCheckTimer(this); updateCheck.schedule(); handlers.add(com.google.gerrit.client.ui.UserActivityMonitor.addValueChangeHandler(updateCheck)); } },95628c1de45be33f42f5c9e3b4fac6a7e0ead6d7,startPoller(),startPoller(),18,11,private void startPoller() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (0 < (com.google.gerrit.client.Gerrit.info().change().updateDelay()))) { updateCheck = new com.google.gerrit.client.change.UpdateCheckTimer(this); updateCheck.schedule(); handlers.add(com.google.gerrit.client.ui.UserActivityMonitor.addValueChangeHandler(updateCheck)); } },f4c996b0716f6adbba9b66bed77c98a8efd8018b,startPoller(),151990,105,104
78056,gitiles-servlet_src_main_java_com_google_gitiles_RefServlet.java,13.0,"private static java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getRefsSoyData(org.eclipse.jgit.lib.RefDatabase refdb, com.google.gitiles.GitilesView view, java.lang.String prefix, com.google.common.collect.Ordering<org.eclipse.jgit.lib.Ref> ordering, @javax.annotation.Nullable org.eclipse.jgit.lib.Ref headLeaf, int limit) throws java.io.IOException { java.util.Collection<org.eclipse.jgit.lib.Ref> refs = refdb.getRefs(prefix).values(); refs = ordering.leastOf(refs, (limit > 0 ? com.google.common.primitives.Ints.saturatedCast((limit + 1L)) : refs.size())); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = com.google.common.collect.Lists.newArrayListWithCapacity(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { java.lang.String name = ref.getName().substring(prefix.length()); org.eclipse.jgit.lib.Ref refForName = refdb.getRef(name); if (refForName != null) { boolean needPrefix = !(ref.getName().equals(refForName.getName())); java.util.Map<java.lang.String, java.lang.Object> value = com.google.common.collect.Maps.newHashMapWithExpectedSize(3); value.put(""url"", com.google.gitiles.GitilesView.revision().copyFrom(view).setRevision(com.google.gitiles.Revision.unpeeled((needPrefix ? ref.getName() : name), ref.getObjectId())).toUrl()); value.put(""name"", name); if (headLeaf != null) { value.put(""isHead"", headLeaf.equals(ref)); } result.add(value); } } return result; }",96b902752c68c2b59b9f0836514d80b103215a53,"private static java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getRefsSoyData(org.eclipse.jgit.lib.RefDatabase refdb, com.google.gitiles.GitilesView view, java.lang.String prefix, com.google.common.collect.Ordering<org.eclipse.jgit.lib.Ref> ordering, @javax.annotation.Nullable org.eclipse.jgit.lib.Ref headLeaf, int limit) throws java.io.IOException { java.util.Collection<org.eclipse.jgit.lib.Ref> refs = refdb.getRefs(prefix).values(); refs = ordering.leastOf(refs, (limit > 0 ? com.google.common.primitives.Ints.saturatedCast((limit + 1L)) : refs.size())); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = com.google.common.collect.Lists.newArrayListWithCapacity(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { java.lang.String name = ref.getName().substring(prefix.length()); org.eclipse.jgit.lib.Ref refForName = refdb.findRef(name); if (refForName != null) { boolean needPrefix = !(ref.getName().equals(refForName.getName())); java.util.Map<java.lang.String, java.lang.Object> value = com.google.common.collect.Maps.newHashMapWithExpectedSize(3); value.put(""url"", com.google.gitiles.GitilesView.revision().copyFrom(view).setRevision(com.google.gitiles.Revision.unpeeled((needPrefix ? ref.getName() : name), ref.getObjectId())).toUrl()); value.put(""name"", name); if (headLeaf != null) { value.put(""isHead"", headLeaf.equals(ref)); } result.add(value); } } return result; }",6800959d7b9a9870e32526b1920784e4667cfde1,"getRefsSoyData(org.eclipse.jgit.lib.RefDatabase,com.google.gitiles.GitilesView,java.lang.String,com.google.common.collect.Ordering,org.eclipse.jgit.lib.Ref,int)","getRefsSoyData(org.eclipse.jgit.lib.RefDatabase,com.google.gitiles.GitilesView,java.lang.String,com.google.common.collect.Ordering,org.eclipse.jgit.lib.Ref,int)",2,13,"private static java.util.List<java.util.Map<java.lang.String, java.lang.Object>> getRefsSoyData(org.eclipse.jgit.lib.RefDatabase refdb, com.google.gitiles.GitilesView view, java.lang.String prefix, com.google.common.collect.Ordering<org.eclipse.jgit.lib.Ref> ordering, @javax.annotation.Nullable org.eclipse.jgit.lib.Ref headLeaf, int limit) throws java.io.IOException { java.util.Collection<org.eclipse.jgit.lib.Ref> refs = refdb.getRefs(prefix).values(); refs = ordering.leastOf(refs, (limit > 0 ? com.google.common.primitives.Ints.saturatedCast((limit + 1L)) : refs.size())); java.util.List<java.util.Map<java.lang.String, java.lang.Object>> result = com.google.common.collect.Lists.newArrayListWithCapacity(refs.size()); for (org.eclipse.jgit.lib.Ref ref : refs) { java.lang.String name = ref.getName().substring(prefix.length()); org.eclipse.jgit.lib.Ref refForName = refdb.getRef(name); if (refForName != null) { boolean needPrefix = !(ref.getName().equals(refForName.getName())); java.util.Map<java.lang.String, java.lang.Object> value = com.google.common.collect.Maps.newHashMapWithExpectedSize(3); value.put(""url"", com.google.gitiles.GitilesView.revision().copyFrom(view).setRevision(com.google.gitiles.Revision.unpeeled((needPrefix ? ref.getName() : name), ref.getObjectId())).toUrl()); value.put(""name"", name); if (headLeaf != null) { value.put(""isHead"", headLeaf.equals(ref)); } result.add(value); } } return result; }",96b902752c68c2b59b9f0836514d80b103215a53,"getRefsSoyData(org.eclipse.jgit.lib.RefDatabase,com.google.gitiles.GitilesView,java.lang.String,com.google.common.collect.Ordering,org.eclipse.jgit.lib.Ref,int)",156630,463,462
37901,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,14.0,"public void doChangeRestoredHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final java.lang.String reason, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ChangeRestoredEvent event = new com.google.gerrit.server.events.ChangeRestoredEvent(); event.change = eventFactory.asChangeAttribute(change); event.restorer = eventFactory.asAccountAttribute(account); event.reason = reason; fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--restorer"", getDisplayName(account)); addArg(args, ""--reason"", (reason == null ? """" : reason)); runHook(change.getProject(), changeRestoredHook, args); }",73d0e769ecb09d238963e2b55570bf80faefd2a3,"public void doChangeRestoredHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final java.lang.String reason, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ChangeRestoredEvent event = new com.google.gerrit.server.events.ChangeRestoredEvent(); event.change = eventFactory.asChangeAttribute(change); event.restorer = eventFactory.asAccountAttribute(account); event.reason = reason; fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--ref"", event.patchSet.ref); addArg(args, ""--restorer"", getDisplayName(account)); addArg(args, ""--reason"", (reason == null ? """" : reason)); runHook(change.getProject(), changeRestoredHook, args); }",ce2a721ac7f83215dadae89e37d0c57f2de24aed,"doChangeRestoredHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.reviewdb.server.ReviewDb)","doChangeRestoredHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.reviewdb.server.ReviewDb)",2,14,"public void doChangeRestoredHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final java.lang.String reason, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ChangeRestoredEvent event = new com.google.gerrit.server.events.ChangeRestoredEvent(); event.change = eventFactory.asChangeAttribute(change); event.restorer = eventFactory.asAccountAttribute(account); event.reason = reason; fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, ""--change"", event.change.id); addArg(args, ""--change-url"", event.change.url); addArg(args, ""--project"", event.change.project); addArg(args, ""--branch"", event.change.branch); addArg(args, ""--topic"", event.change.topic); addArg(args, ""--restorer"", getDisplayName(account)); addArg(args, ""--reason"", (reason == null ? """" : reason)); runHook(change.getProject(), changeRestoredHook, args); }",73d0e769ecb09d238963e2b55570bf80faefd2a3,"doChangeRestoredHook(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.reviewdb.server.ReviewDb)",147188,321,306
148032,java_com_google_gerrit_server_audit_AuditService.java,3.0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to account event"", e); } } }",9cffbaf5fd22349b37b2a038fa1cc4345cab9b06,"dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)","dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",17,3,"public void dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onAddAccountsToGroup(actor, added, addedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error(""failed to log add accounts to group event"", e); } } }",e9f537334969f9ec192603e0d1c2318204fbb8d0,"dispatchAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.sql.Timestamp)",215454,146,146
78945,gerrit-server_src_main_java_com_google_gerrit_server_change_H2AccountPatchReviewStore.java,,,,"@java.lang.Override public boolean markReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String path) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = java.sql.DriverManager.getConnection(url);java.sql.PreparedStatement stmt = con.prepareStatement((""INSERT INTO ACCOUNT_PATCH_REVIEWS "" + (""(ACCOUNT_ID, CHANGE_ID, PATCH_SET_ID, FILE_NAME) VALUES "" + ""(?, ?, ?, ?)"")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); stmt.setString(4, path); stmt.executeUpdate(); return true; } catch (java.sql.SQLException e) { com.google.gwtorm.server.OrmException ormException = com.google.gerrit.server.change.H2AccountPatchReviewStore.convertError(""insert"", e); if (ormException instanceof com.google.gwtorm.server.OrmDuplicateKeyException) { return false; } throw ormException; } }",d5ff1426bb0f521027502580c6d8152b2961e41e,,"markReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id,java.lang.String)",4,0,"@java.lang.Override public boolean markReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.String path) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = java.sql.DriverManager.getConnection(url);java.sql.PreparedStatement stmt = con.prepareStatement((""INSERT INTO ACCOUNT_PATCH_REVIEWS "" + (""(ACCOUNT_ID, CHANGE_ID, PATCH_SET_ID, FILE_NAME) VALUES "" + ""(?, ?, ?, ?)"")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); stmt.setString(4, path); stmt.executeUpdate(); return true; } catch (java.sql.SQLException e) { com.google.gwtorm.server.OrmException ormException = com.google.gerrit.server.schema.H2AccountPatchReviewStore.convertError(""insert"", e); if (ormException instanceof com.google.gwtorm.server.OrmDuplicateKeyException) { return false; } throw ormException; } }",2ff251958718b5a145ab139823a91458d03869a5,"markReviewed(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.Account$Id,java.lang.String)",68989,278,278
10667,src_main_java_com_google_gerrit_client_changes_PatchTable.java,9.0,"void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnName()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnComments()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.setAttribute(""colspan"", 3); m.append(Util.C.patchTableColumnDiff()); m.closeTd(); m.closeTr(); }",f3d5a3653e8cd1321ada86084afae672718bbd6e,"void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnName()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnComments()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.setAttribute(""colspan"", 3); m.append(Util.C.patchTableColumnDiff()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.append(Util.C.reviewed()); m.closeTd(); m.closeTr(); }",fca983b42b562aa680fc80bfd0e4d8852c60409b,appendHeader(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder),appendHeader(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder),12,9,"void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.addStyleName(""LeftMostCell""); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.nbsp(); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnName()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.append(Util.C.patchTableColumnComments()); m.closeTd(); m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_DATA_HEADER); m.setAttribute(""colspan"", 3); m.append(Util.C.patchTableColumnDiff()); m.closeTd(); if (com.google.gerrit.client.Gerrit.isSignedIn()) { m.openTd(); m.setStyleName(com.google.gerrit.client.changes.S_ICON_HEADER); m.append(Util.C.reviewed()); m.closeTd(); } m.closeTr(); }",848d5bea085dbd5bbc49561f7ce8c8b9587ff76a,appendHeader(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder),47209,316,337
65041,gerrit-server_src_main_java_com_google_gerrit_server_change_ActionJson.java,3.0,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.change.RevisionResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (rsrc.getControl().getCurrentUser().isIdentifiedUser()) { com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(rsrc.getControl().getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(revisions, rsrc, userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } } return out; }",f8ff36f926e3cbe52e0a5b848d8a1f07666a746f,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.change.RevisionResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (!(rsrc.getControl().getCurrentUser().isIdentifiedUser())) { return out; } if (!(rsrc.getPatchSet().getId().equals(rsrc.getChange().currentPatchSetId()))) { return out; } com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(rsrc.getControl().getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(revisions, rsrc, userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } return out; }",fdde06f2ef4dac6bc78d8751ddfe50337853b0e8,toActionMap(com.google.gerrit.server.change.RevisionResource),toActionMap(com.google.gerrit.server.change.RevisionResource),6,3,"private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> toActionMap(com.google.gerrit.server.change.RevisionResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> out = new java.util.LinkedHashMap<>(); if (rsrc.getControl().getCurrentUser().isIdentifiedUser()) { com.google.inject.Provider<com.google.gerrit.server.CurrentUser> userProvider = com.google.inject.util.Providers.of(rsrc.getControl().getCurrentUser()); for (com.google.gerrit.extensions.webui.UiAction.Description d : com.google.gerrit.server.extensions.webui.UiActions.from(revisions, rsrc, userProvider)) { out.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } } return out; }",f8ff36f926e3cbe52e0a5b848d8a1f07666a746f,toActionMap(com.google.gerrit.server.change.RevisionResource),195836,253,221
157552,java_com_google_gerrit_pgm_init_InitAdminUser.java,1.0,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }",23fd5b15942af09f159fb67b2b29208dedc8a570,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(new com.google.gerrit.server.account.AccountSshKey.Id(id, 1), content); }",5cfb1f6f55da4a5e3afb5fd717fe2885b7eee8b6,"createSshKey(com.google.gerrit.reviewdb.client.Account$Id,java.lang.String)","createSshKey(com.google.gerrit.reviewdb.client.Account$Id,java.lang.String)",5,1,"private com.google.gerrit.server.account.AccountSshKey createSshKey(com.google.gerrit.reviewdb.client.Account.Id id, java.lang.String keyFile) throws java.io.IOException { java.nio.file.Path p = java.nio.file.Paths.get(keyFile); if (!(java.nio.file.Files.exists(p))) { throw new java.io.IOException(java.lang.String.format(""Cannot add public SSH key: %s is not a file"", keyFile)); } java.lang.String content = new java.lang.String(java.nio.file.Files.readAllBytes(p), java.nio.charset.StandardCharsets.UTF_8); return com.google.gerrit.server.account.AccountSshKey.create(id, 1, content); }",54ca43528ceebc139113dcc2d08cd47315600cd8,"createSshKey(com.google.gerrit.reviewdb.client.Account$Id,java.lang.String)",128164,201,182
86913,gerrit-server_src_main_java_com_google_gerrit_server_git_ReplaceOp.java,12.0,"@java.lang.Override public void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { changeKind = changeKindCache.getChangeKind(projectControl.getProjectState(), ctx.getRepository(), priorCommit, commit); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } }",7663921b03c6b051bb49c2f2f6f7ed8549f971f9,"@java.lang.Override public void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { changeKind = changeKindCache.getChangeKind(projectControl.getProjectState(), ctx.getRepository(), priorCommit, commit); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } if (updateRef) { if ((updateRefCommand) == null) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, patchSetId.toRefName())); } else { ctx.addRefUpdate(updateRefCommand); } } }",ec8156cbf068fb76c2dd08b1aa9fb28f3bef3723,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),4,7,"@java.lang.Override public void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRepository(), priorCommit, commit); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, patchSetId.toRefName())); } }",feb662d071af475685bdade6a518d63b2db56019,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),131738,208,185
74488,gerrit-server_src_main_java_com_google_gerrit_server_git_BatchUpdate.java,19.0,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = db.changes().get(id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew(c); com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext(changeControlFactory.controlFor(notes, user), new com.google.gerrit.server.git.BatchUpdateReviewDb(db)); if (notesMigration.readChanges()) { ctx.getNotes().load(); } return ctx; }",78a52a132edd23f30fa26f570bd754afc5f2f99d,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = db.changes().get(id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew(db, c); com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext(changeControlFactory.controlFor(notes, user), new com.google.gerrit.server.git.BatchUpdateReviewDb(db)); if (notesMigration.readChanges()) { ctx.getNotes().load(); } return ctx; }",cc082708e4d7d49a74c16e283c05b05788c27ba9,newChangeContext(com.google.gerrit.reviewdb.client.Change$Id),newChangeContext(com.google.gerrit.reviewdb.client.Change$Id),2,19,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = db.changes().get(id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForNew(c); com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx = new com.google.gerrit.server.git.BatchUpdate.ChangeContext(changeControlFactory.controlFor(notes, user), new com.google.gerrit.server.git.BatchUpdateReviewDb(db)); if (notesMigration.readChanges()) { ctx.getNotes().load(); } return ctx; }",78a52a132edd23f30fa26f570bd754afc5f2f99d,newChangeContext(com.google.gerrit.reviewdb.client.Change$Id),13395,203,201
16294,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,26.0,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.ChangeAccess changes();,b0ca0450d5bc39729f73ece197054070f0d2c252,@com.google.gwtorm.client.Relation(id = 19) com.google.gerrit.reviewdb.ChangeAccess changes();,3dece61dd0ed04661bda8db3c8b76e35b189c362,changes(),changes(),2,26,@com.google.gwtorm.client.Relation(id = 20) com.google.gerrit.reviewdb.ChangeAccess changes();,951421b0840438552433043be9ce6bd1cf2af138,changes(),97507,31,30
46722,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeUtil.java,8.0,"public boolean canCherryPick(final com.google.gerrit.server.git.MergeSorter mergeSorter, final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { org.eclipse.jgit.merge.ThreeWayMerger m = newThreeWayMerger(repo, createDryRunInserter(repo)); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException((""Cannot merge "" + (toMerge.name())), e); } } return (canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (canMerge(mergeSorter, repo, mergeTip, toMerge)); }",66c3c87be54eaa2fb14d78355931fdedbca5f94a,"public boolean canCherryPick(final com.google.gerrit.server.git.MergeSorter mergeSorter, final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { org.eclipse.jgit.merge.ThreeWayMerger m = newThreeWayMerger(repo, createDryRunInserter(repo)); m.setBase(toMerge.getParent(0)); return m.merge(false, mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException((""Cannot merge "" + (toMerge.name())), e); } } return (canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (canMerge(mergeSorter, repo, mergeTip, toMerge)); }",1ddaa1c4b3ce567d5c3f63019f543612c67b1e4c,"canCherryPick(com.google.gerrit.server.git.MergeSorter,org.eclipse.jgit.lib.Repository,com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.git.CodeReviewCommit)","canCherryPick(com.google.gerrit.server.git.MergeSorter,org.eclipse.jgit.lib.Repository,com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.git.CodeReviewCommit)",6,10,"public boolean canCherryPick(final com.google.gerrit.server.git.MergeSorter mergeSorter, final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final org.eclipse.jgit.revwalk.RevWalk rw, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { org.eclipse.jgit.merge.ThreeWayMerger m = newThreeWayMerger(repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(repo)); m.setBase(toMerge.getParent(0)); return m.merge(false, mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException((""Cannot merge "" + (toMerge.name())), e); } } return (canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (canMerge(mergeSorter, repo, mergeTip, toMerge)); }",ed5f15c11c52697d35292a87d3cbee71c23ebbb6,"canCherryPick(com.google.gerrit.server.git.MergeSorter,org.eclipse.jgit.lib.Repository,com.google.gerrit.server.git.CodeReviewCommit,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.git.CodeReviewCommit)",206198,272,286
62849,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,5.0,@java.lang.Override protected void preDisplay(java.lang.String content) { initEditor(content); },c7baa57ec6321a70ecba6790b094549c7c626cc7,@java.lang.Override protected void preDisplay(java.lang.String content) { setShowTabs(prefs.showTabs()); initEditor(content); },8e1b22f4f2890703cc13708b1c6fab0434c1b4b9,preDisplay(java.lang.String),preDisplay(java.lang.String),4,6,@java.lang.Override protected void preDisplay(java.lang.String content) { initEditor(content); },c7baa57ec6321a70ecba6790b094549c7c626cc7,preDisplay(java.lang.String),34551,34,25
148032,java_com_google_gerrit_server_restapi_group_DeleteMembers.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.AddMembers.Input in = new com.google.gerrit.server.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",60ddd2ed116fd0a6c3c6e32082ad9b58278d4f15,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.restapi.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",f86f0ad2ed4ea32a8180c18c7aaa7bc6f485367d,"apply(com.google.gerrit.server.group.MemberResource,com.google.gerrit.server.group.AddMembers.Input)","apply(com.google.gerrit.server.restapi.group.MemberResource,com.google.gerrit.server.restapi.group.AddMembers.Input)",17,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.group.MemberResource resource, com.google.gerrit.server.restapi.group.AddMembers.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.restapi.group.AddMembers.Input in = new com.google.gerrit.server.restapi.group.AddMembers.Input(); in._oneMember = resource.getMember().getAccountId().toString(); return delete.get().apply(resource, in); }",3cc1fa06cdb7b572f8fb81175c811a3f2ae61a66,"apply(com.google.gerrit.server.group.MemberResource,com.google.gerrit.server.restapi.group.AddMembers.Input)",214990,225,222
57933,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_DraftApiImpl.java,,,,@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo get() { return CommentInfoMapper.INSTANCE.apply(getDraft.apply(draft)); },c0f0cbb5c47bda6db66683669f44565121477660,,get(),17,3,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getDraft.apply(draft); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot retrieve draft"", e); } }",75fe2d67150856a665806192b5b5f5b29bf44c86,get(),13964,40,91
89300,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteDraftChangeOp.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void cleanUpReferences(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.Change.Id id, java.util.List<com.google.gerrit.reviewdb.client.PatchSet> patchSets) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { accountPatchReviewStore.get().clearReviewed(ps.getId()); } starredChangesUtil.unstarAll(ctx.getChange().getProject(), id); }",5a07a94ef8f4fd12b180c141c0cf43432ce6614a,,"cleanUpReferences(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.reviewdb.client.Change$Id,java.util.List)",2,6,"private void cleanUpReferences(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.Change.Id id, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.PatchSet ps : patchSets) { accountPatchReviewStore.get().clearReviewed(ps.getId()); } starredChangesUtil.unstarAll(ctx.getChange().getProject(), id); }",5ea10416634d30c22a25abb0d57f42d24b71e3a8,"cleanUpReferences(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.reviewdb.client.Change$Id,java.util.Collection)",40829,155,155
69599,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,78.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.util.Map<java.lang.String, java.lang.String> getUserUrlAliases() { return com.google.gerrit.client.Gerrit.myUrlAliases; }",00adac2c9d04d7b8772ecb7bf81196797f010d1d,,getUserUrlAliases(),24,23,public static com.google.gerrit.client.info.AccountPreferencesInfo getUserPreferences() { return com.google.gerrit.client.Gerrit.myPrefs; },7c840c1c0a6d5207066ba2906396c1afc6fd3c3d,getUserPreferences(),195611,44,38
60781,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.common.data.SubmitTypeRecord typeError(java.lang.String err, java.lang.Exception e) { if (logErrors) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err, e); return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError(); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError(err); } }",8813e723582ccebf5398657ceb6dd76566d796b8,,"typeError(java.lang.String,java.lang.Exception)",3,11,"private com.google.gerrit.common.data.SubmitTypeRecord typeError(java.lang.String err, java.lang.Exception e) { if (logErrors) { if (e == null) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err); } else { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err, e); } return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultTypeError(); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createTypeError(err); } }",fb0418c3ffcdaec0111e7c3dc5fe0c31bf989433,"typeError(java.lang.String,java.lang.Exception)",144707,109,141
158710,java_com_google_gerrit_httpd_gitweb_GitwebServlet.java,0.0,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : req.getQueryString().split(""[&;]"")) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",759b66ad9148422523c8ceddefccb677f311725b,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.gerrit.httpd.gitweb.GitwebServlet.QUERY_SPLIT_PATTERN).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",e8e9981d603296edffa14b2e466fd7c9b1fd7751,getParameters(javax.servlet.http.HttpServletRequest),getParameters(javax.servlet.http.HttpServletRequest),3,0,"private static java.util.Map<java.lang.String, java.lang.String> getParameters(javax.servlet.http.HttpServletRequest req) { final java.util.Map<java.lang.String, java.lang.String> params = new java.util.HashMap<>(); for (java.lang.String pair : com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf(""&;"")).split(req.getQueryString())) { final int eq = pair.indexOf('='); if (0 < eq) { java.lang.String name = pair.substring(0, eq); java.lang.String value = pair.substring((eq + 1)); name = com.google.gerrit.extensions.restapi.Url.decode(name); value = com.google.gerrit.extensions.restapi.Url.decode(value); params.put(name, value); } } return params; }",9d70b1c61cb01c0025254d1631b6ad5485ebbb2f,getParameters(javax.servlet.http.HttpServletRequest),178968,211,203
58572,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeDraftUpdate.java,,,,"public void deleteComment(com.google.gerrit.reviewdb.client.PatchLineComment c) { verifyComment(c); com.google.common.collect.Table<com.google.gerrit.reviewdb.client.PatchSet.Id, java.lang.String, com.google.gerrit.reviewdb.client.PatchLineComment> draftsForSide = ((c.getSide()) == ((short) (0))) ? draftNotes.getDraftBaseComments() : draftNotes.getDraftPsComments(); boolean draftExisted = draftsForSide.containsColumn(c.getKey().get()); if (draftExisted) { deleteComments.add(c); } }",f9a9de5337d2ea9320aceadd95b635b7bfccd44f,,deleteComment(com.google.gerrit.reviewdb.client.PatchLineComment),21,5,"public void deleteComment(com.google.gerrit.reviewdb.client.PatchLineComment c) { verifyComment(c); checkArgument(draftNotes.containsComment(c), (""Cannot delete this comment"" + "" because it didn't previously exist as a draft"")); deleteComments.add(c); }",15319184add3c026b91c58decb6535d965cfc339,deleteComment(com.google.gerrit.reviewdb.client.PatchLineComment),49302,152,67
89301,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void deleteAbandonedChange() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = createChange(); java.lang.String changeId = changeResult.getChangeId(); gApi.changes().id(changeId).abandon(); gApi.changes().id(changeId).delete(); assertThat(query(changeId)).isEmpty(); },a28aed7fa0637f9d867360bb82c2739d61c7c00f,,deleteAbandonedChange(),4,64,"@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(cloneAs = ""user"") public void deleteAbandonedChangeAsNormalUser() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result changeResult = pushFactory.create(db, user.getIdent(), testRepo).to(""refs/for/master""); java.lang.String changeId = changeResult.getChangeId(); com.google.gerrit.reviewdb.client.Change.Id id = changeResult.getChange().getId(); setApiUser(user); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(java.lang.String.format(""Deleting change %s is not permitted"", id)); gApi.changes().id(changeId).delete(); }",f37d94f332f0a28259c0df45d35f885c08c10c00,deleteAbandonedChangeAsNormalUser(),163154,97,208
68307,gerrit-server_src_main_java_com_google_gerrit_server_config_ChangeCleanupConfig.java,,,,"private java.lang.String readAbandonMessage(org.eclipse.jgit.lib.Config cfg) { java.lang.String abandonMessage = cfg.getString(com.google.gerrit.server.config.ChangeCleanupConfig.SECTION, null, com.google.gerrit.server.config.ChangeCleanupConfig.KEY_ABANDON_MESSAGE); if (com.google.common.base.Strings.isNullOrEmpty(abandonMessage)) { return com.google.gerrit.server.config.ChangeCleanupConfig.DEFAULT_ABANDON_MESSAGE; } return abandonMessage; }",c35340a3ddeb0f22f63f5d01dac734d09db4a7df,,readAbandonMessage(org.eclipse.jgit.lib.Config),14,2,"private java.lang.String readAbandonMessage(org.eclipse.jgit.lib.Config cfg, java.lang.String webUrl) { java.lang.String abandonMessage = cfg.getString(com.google.gerrit.server.config.ChangeCleanupConfig.SECTION, null, com.google.gerrit.server.config.ChangeCleanupConfig.KEY_ABANDON_MESSAGE); if (com.google.common.base.Strings.isNullOrEmpty(abandonMessage)) { abandonMessage = com.google.gerrit.server.config.ChangeCleanupConfig.DEFAULT_ABANDON_MESSAGE; } abandonMessage = abandonMessage.replaceAll(""\\$\\{URL\\}"", webUrl); return abandonMessage; }",ebe1f4d63fc7069305e38133f7434f0bd40d01e4,"readAbandonMessage(org.eclipse.jgit.lib.Config,java.lang.String)",196221,130,156
17380,gerrit-common_src_main_java_com_google_gerrit_common_data_ProjectAdminService.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.VisibleProjectsInfo> callback);,d34543d40796369973ff1b7df53a84bf1b1e55ac,,visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback),13,0,void visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.Project>> callback);,91b956e5e6442d3b258eacb9b85035b0e05c7af7,visibleProjects(com.google.gwt.user.client.rpc.AsyncCallback),50083,36,40
34880,gerrit-server_src_main_java_com_google_gerrit_server_git_NotifyConfig.java,,,,public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getGroups() { return groups; },901e154332bb94fd2d05924b8bc6f1f2697bc094,,getGroups(),11,14,public java.util.Set<com.google.gerrit.common.data.GroupReference> getGroups() { return groups; },523581ae863f0b14b31301ed1e442f3faba57d53,getGroups(),95429,33,29
148032,java_com_google_gerrit_server_restapi_group_MembersCollection.java,3.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",6284dd7a544e67f245933f1ddc2eb4da75b98f35,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",39d0b925144c08e12e8baaba0e3421ba406c468e,list(),list(),17,2,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.group.GroupResource> list() throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { return list.get(); }",6284dd7a544e67f245933f1ddc2eb4da75b98f35,list(),217961,78,75
116711,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ProjectWatch.java,1.0,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getId()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",c7e8a824acf59f91f4742a44a0921017e8a18d7f,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getGroupUUID()).forEachOrdered(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",edf7a0ccd9842295e927100232c5eaf6f5ceb8cc,"deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch$Watchers$List,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch$Watchers$List,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",5,1,"private void deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch.Watchers.List matching, com.google.gerrit.reviewdb.client.AccountGroup.UUID startUUID) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seen = new java.util.HashSet<>(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> q = new java.util.ArrayList<>(); seen.add(startUUID); q.add(startUUID); while (!(q.isEmpty())) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = q.remove(((q.size()) - 1)); com.google.gerrit.common.data.GroupDescription.Basic group = args.groupBackend.get(uuid); if (!(com.google.common.base.Strings.isNullOrEmpty(group.getEmailAddress()))) { matching.emails.add(new com.google.gerrit.server.mail.Address(group.getEmailAddress())); continue; } com.google.gerrit.reviewdb.client.AccountGroup ig = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (ig == null) { continue; } args.groups.getMembers(db, ig.getGroupUUID()).forEach(matching.accounts::add); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID m : args.groupIncludes.subgroupsOf(uuid)) { if (seen.add(m)) { q.add(m); } } } }",f69dfa252c20648437caacfda2c380cf8b39a52d,"deliverToMembers(com.google.gerrit.server.mail.send.ProjectWatch$Watchers$List,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",187940,401,401
109879,gerrit-server_src_main_java_com_google_gerrit_server_git_WorkQueue.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.git.WorkQueue.Executor createQueue(int poolsize, java.lang.String prefix, int threadPriority) { final com.google.gerrit.server.git.WorkQueue.Executor r = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); if (threadPriority != (java.lang.Thread.NORM_PRIORITY)) { final java.util.concurrent.ThreadFactory parent = r.getThreadFactory(); r.setThreadFactory(( task) -> { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; }); } r.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); r.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(r); return r; }",90a5d19a83cb16dd11856e95b70788f51e58c40d,,"createQueue(int,java.lang.String,int)",7,29,"public java.util.concurrent.ScheduledThreadPoolExecutor createQueue(int poolsize, java.lang.String prefix, int threadPriority) { com.google.gerrit.server.git.WorkQueue.Executor executor = new com.google.gerrit.server.git.WorkQueue.Executor(poolsize, prefix); executor.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); executor.setExecuteExistingDelayedTasksAfterShutdownPolicy(true); queues.add(executor); if (threadPriority != (java.lang.Thread.NORM_PRIORITY)) { java.util.concurrent.ThreadFactory parent = executor.getThreadFactory(); executor.setThreadFactory(( task) -> { java.lang.Thread t = parent.newThread(task); t.setPriority(threadPriority); return t; }); } return executor; }",f811d4c1e3771e06377c8314709d2818b2ad9f93,"createQueue(int,java.lang.String,int)",159342,187,172
62828,gerrit-gwtui_src_main_java_net_codemirror_lib_CodeMirror.java,50.0,"public final void addLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { addLineClassNative(line, where.name().toLowerCase(), className); }",e46b8c853303c020989d70d06513fd7d97863c1b,"public final void addLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { addLineClassNative(line, where.value, className); }",f63b9ec370a28f215889525deb72149dd8999f5e,"addLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)","addLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)",6,56,"public final void addLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { addLineClassNative(line, where.value(), className); }",b0a2eb3a03799e9df3f9dab69162dced2368f3f0,"addLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)",194358,58,58
20355,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectAccessFactory.java,,,,"@java.lang.Override public com.google.gerrit.common.data.ProjectAccess call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { pc = open(); com.google.gerrit.server.git.ProjectConfig config = new com.google.gerrit.server.git.ProjectConfig(); com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { config.load(md); if (config.updateGroupNames(groupCache)) { md.setMessage(""Update group names\n""); if (config.commit(md)) { projectCache.evict(config.getProject()); pc = open(); } } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(); } } finally { md.close(); } java.util.List<com.google.gerrit.common.data.AccessSection> local = new java.util.ArrayList<com.google.gerrit.common.data.AccessSection>(); java.util.Set<java.lang.String> ownerOf = new java.util.HashSet<java.lang.String>(); for (com.google.gerrit.common.data.AccessSection section : config.getAccessSections()) { com.google.gerrit.server.project.RefControl rc = pc.controlForRef(section.getRefPattern()); if (rc.isOwner()) { local.add(section); ownerOf.add(section.getRefPattern()); } else if (rc.isVisible()) { local.add(section); } } final com.google.gerrit.common.data.ProjectAccess detail = new com.google.gerrit.common.data.ProjectAccess(); detail.setRevision(config.getRevision().name()); detail.setLocal(local); detail.setInherited(java.util.Collections.<com.google.gerrit.common.data.AccessSection>emptyList()); detail.setOwnerOf(ownerOf); return detail; }",04a0ac3a2704557e28fbe16182b1a19e4b79a1c4,,call(),14,0,"@java.lang.Override public com.google.gerrit.common.data.ProjectAccess call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { pc = open(); com.google.gerrit.server.git.ProjectConfig config; com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupCache)) { md.setMessage(""Update group names\n""); if (config.commit(md)) { projectCache.evict(config.getProject()); pc = open(); } } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(); } } finally { md.close(); } java.util.List<com.google.gerrit.common.data.AccessSection> local = new java.util.ArrayList<com.google.gerrit.common.data.AccessSection>(); java.util.Set<java.lang.String> ownerOf = new java.util.HashSet<java.lang.String>(); for (com.google.gerrit.common.data.AccessSection section : config.getAccessSections()) { com.google.gerrit.server.project.RefControl rc = pc.controlForRef(section.getRefPattern()); if (rc.isOwner()) { local.add(section); ownerOf.add(section.getRefPattern()); } else if (rc.isVisible()) { local.add(section); } } final com.google.gerrit.common.data.ProjectAccess detail = new com.google.gerrit.common.data.ProjectAccess(); detail.setRevision(config.getRevision().name()); detail.setLocal(local); detail.setOwnerOf(ownerOf); if (projectName.equals(wildProject)) { detail.setInheritsFrom(null); } else if ((config.getProject().getParent()) != null) { detail.setInheritsFrom(config.getProject().getParent()); } else { detail.setInheritsFrom(wildProject); } return detail; }",ae642e4c6c748891c8458fbb64f5045e42fa5573,call(),6312,469,500
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentBox.java,18.0,protected net.codemirror.lib.LineWidget getSelfWidget() { return selfWidget; },933687f2d586cda28609c4a9d8f5cc3cee8ce8f7,protected com.google.gerrit.client.diff.CommentBoxManager getWidgetManager() { return widgetManager; },882a856b0ef453f410d70afd5b675938bb9c618d,getSelfWidget(),getWidgetManager(),4,17,com.google.gerrit.client.diff.PaddingManager getPaddingManager() { return widgetManager; },c25f155683329899476e5d7a7778fb3fe548dc10,getPaddingManager(),115273,25,23
65335,gerrit-pgm_src_main_java_com_google_gerrit_pgm_util_GarbageCollectionLogFile.java,1.0,"public static com.google.gerrit.extensions.events.LifecycleListener start(java.nio.file.Path sitePath) throws java.io.FileNotFoundException { java.nio.file.Path logdir = com.google.gerrit.common.FileUtil.mkdirsOrDie(new com.google.gerrit.server.config.SitePaths(sitePath).logs_dir, ""Cannot create log directory""); if (com.google.gerrit.server.util.SystemLog.shouldConfigure()) { com.google.gerrit.pgm.util.GarbageCollectionLogFile.initLogSystem(logdir); } return new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { org.apache.log4j.LogManager.getLogger(GarbageCollection.LOG_NAME).removeAllAppenders(); } }; }",a6fcb55282ad9882a9c65169ccf6c6a61c8fcca1,"public static com.google.gerrit.extensions.events.LifecycleListener start(java.nio.file.Path sitePath) throws java.nio.file.NoSuchFileException { java.nio.file.Path logdir = com.google.gerrit.common.FileUtil.mkdirsOrDie(new com.google.gerrit.server.config.SitePaths(sitePath).logs_dir, ""Cannot create log directory""); if (com.google.gerrit.server.util.SystemLog.shouldConfigure()) { com.google.gerrit.pgm.util.GarbageCollectionLogFile.initLogSystem(logdir); } return new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { org.apache.log4j.LogManager.getLogger(GarbageCollection.LOG_NAME).removeAllAppenders(); } }; }",4507130041be9591bc6b93cfd76b2169ebbc88d8,start(java.nio.file.Path),start(java.nio.file.Path),7,1,"public static com.google.gerrit.extensions.events.LifecycleListener start(java.nio.file.Path sitePath) throws java.io.IOException { java.nio.file.Path logdir = com.google.gerrit.common.FileUtil.mkdirsOrDie(new com.google.gerrit.server.config.SitePaths(sitePath).logs_dir, ""Cannot create log directory""); if (com.google.gerrit.server.util.SystemLog.shouldConfigure()) { com.google.gerrit.pgm.util.GarbageCollectionLogFile.initLogSystem(logdir); } return new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { org.apache.log4j.LogManager.getLogger(GarbageCollection.LOG_NAME).removeAllAppenders(); } }; }",31e6a8d166758754d588ce0428d9b6cb41fb042d,start(java.nio.file.Path),76875,205,201
72006,gerrit-gwtui-common_src_main_java_com_google_gerrit_client_info_AccountPreferencesInfo.java,7.0,public final com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat timeFormat() { java.lang.String s = timeFormatRaw(); return s != null ? com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat.valueOf(s) : null; },04ab98d04d6286ce121fb066b18a81b876f76072,public final com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo.TimeFormat timeFormat() { java.lang.String s = timeFormatRaw(); return s != null ? com.google.gerrit.extensions.client.AccountGeneralPreferencesInfo.TimeFormat.valueOf(s) : null; },09ed51858e7b6ea2e5545ea9850ce911faf7a450,timeFormat(),timeFormat(),14,8,public final com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat timeFormat() { java.lang.String s = timeFormatRaw(); return s != null ? com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat.valueOf(s) : null; },7c9059f8b53c85168438afab80876ec2be099722,timeFormat(),178250,70,68
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,11.0,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",46d5a9ab98bf629af2f9dd1d03df81b414d92917,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update account config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",fdbccf4bba6f1d8b2489322f00521cebad1b9005,"assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)","assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",17,11,"private void assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String groupRefName, java.lang.String expectedErrorOnUpdate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_DELETED_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, RefNames.REFS_GROUPNAMES, Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + "":groupRef"")); repo.reset(""groupRef""); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").to(groupRefName); if (expectedErrorOnUpdate != null) { r.assertErrorStatus(expectedErrorOnUpdate); } else { r.assertOkStatus(); } }",46d5a9ab98bf629af2f9dd1d03df81b414d92917,"assertPushToGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String,java.lang.String)",217365,479,479
74562,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,21.0,"public com.google.gerrit.server.project.ChangeControl controlFor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.NoSuchChangeException { try { return projectControl.controlFor(notes.getProjectName(), user).controlFor(notes); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId(), e); } }",dcbe4a80979cdcfbbf494db64e0401fd3d6db3d9,"public com.google.gerrit.server.project.ChangeControl controlFor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { try { return projectControl.controlFor(notes.getProjectName(), user).controlFor(notes); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId(), e); } }",7afb574dd55660547f882b20b41d405366db725c,"controlFor(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.server.CurrentUser)","controlFor(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.server.CurrentUser)",7,21,"public com.google.gerrit.server.project.ChangeControl controlFor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.server.project.NoSuchChangeException { try { return projectControl.controlFor(notes.getProjectName(), user).controlFor(notes); } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(notes.getChangeId(), e); } }",dcbe4a80979cdcfbbf494db64e0401fd3d6db3d9,"controlFor(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.server.CurrentUser)",114609,148,135
49159,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,18.0,"public void testUnblockRange() { grant(local, ((LABEL) + ""Code-Review""), (-1), (+1), anonymous, ""refs/heads/*"").setBlock(); grant(local, ((LABEL) + ""Code-Review""), (-2), (+2), devs, ""refs/heads/*""); com.google.gerrit.server.project.ProjectControl u = user(devs); com.google.gerrit.common.data.PermissionRange range = u.controlForRef(""refs/heads/master"").getRange(((LABEL) + ""Code-Review"")); assertTrue(""u can vote -2"", range.contains((-2))); assertTrue(""u can vote +2"", range.contains(2)); }",a88c55545410d8ceb1f9b3ba27601eabb8f58c89,"public void testUnblockRange() { com.google.gerrit.server.project.Util.grantLabel(local, ((LABEL) + ""Code-Review""), (-1), (+1), com.google.gerrit.server.project.Util.ANONYMOUS, ""refs/heads/*"").setBlock(); com.google.gerrit.server.project.Util.grantLabel(local, ((LABEL) + ""Code-Review""), (-2), (+2), com.google.gerrit.server.project.Util.DEVS, ""refs/heads/*""); com.google.gerrit.server.project.ProjectControl u = util.user(local, com.google.gerrit.server.project.Util.DEVS); com.google.gerrit.common.data.PermissionRange range = u.controlForRef(""refs/heads/master"").getRange(((LABEL) + ""Code-Review"")); assertTrue(""u can vote -2"", range.contains((-2))); assertTrue(""u can vote +2"", range.contains(2)); }",ba63c9e94421c34a852191ffce81a94a2c213083,testUnblockRange(),testUnblockRange(),16,16,"public void testUnblockRange() { com.google.gerrit.server.project.Util.grant(local, ((LABEL) + ""Code-Review""), (-1), (+1), com.google.gerrit.server.project.Util.ANONYMOUS, ""refs/heads/*"").setBlock(); com.google.gerrit.server.project.Util.grant(local, ((LABEL) + ""Code-Review""), (-2), (+2), com.google.gerrit.server.project.Util.DEVS, ""refs/heads/*""); com.google.gerrit.server.project.ProjectControl u = util.user(local, com.google.gerrit.server.project.Util.DEVS); com.google.gerrit.common.data.PermissionRange range = u.controlForRef(""refs/heads/master"").getRange(((LABEL) + ""Code-Review"")); assertTrue(""u can vote -2"", range.contains((-2))); assertTrue(""u can vote +2"", range.contains(2)); }",ca5a7baf0e437878a6190d5a6d72e869318458f0,testUnblockRange(),145429,234,232
90110,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_StaticModule.java,35.0,"@com.google.inject.Provides @com.google.inject.Singleton com.google.gerrit.httpd.raw.FontsServlet getFontsServlet(@com.google.inject.name.Named(com.google.gerrit.httpd.raw.StaticModule.CACHE) com.google.common.cache.Cache<java.nio.file.Path, com.google.gerrit.httpd.raw.ResourceServlet.Resource> cache) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet(cache, getPaths().buckOut); }",5181ba6436b5947b20be9a58f99d8c0f4e09a1e0,"@com.google.inject.Provides @com.google.inject.Singleton com.google.gerrit.httpd.raw.FontsServlet getFontsServlet(@com.google.inject.name.Named(com.google.gerrit.httpd.raw.StaticModule.CACHE) com.google.common.cache.Cache<java.nio.file.Path, com.google.gerrit.httpd.raw.ResourceServlet.Resource> cache) throws java.io.IOException { return new com.google.gerrit.httpd.raw.FontsServlet(cache, getPaths().builder); }",f539511f52c989e3a82dc09099353d3e1f25282b,getFontsServlet(com.google.common.cache.Cache),getFontsServlet(com.google.common.cache.Cache),16,34,"@com.google.inject.Provides @com.google.inject.Singleton com.google.gerrit.httpd.raw.FontsDevServlet getFontsServlet(@com.google.inject.name.Named(com.google.gerrit.httpd.raw.StaticModule.CACHE) com.google.common.cache.Cache<java.nio.file.Path, com.google.gerrit.httpd.raw.ResourceServlet.Resource> cache) throws java.io.IOException { return getPaths().isDev() ? new com.google.gerrit.httpd.raw.FontsDevServlet(cache, getPaths().builder) : null; }",7be77935197dbd859fd2f941eb1fa7855bb7f91d,getFontsServlet(com.google.common.cache.Cache),153431,131,144
140535,java_gerrit_PRED_commit_delta_4.java,0.0,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.patch.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.patch.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",51d048493ae1a987f6f33370787a50b1bdcea1e3,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.patchlib.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.patchlib.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",64cf307e452f2b0858f7a8714928f48f2e24982d,exec(com.googlecode.prolog_cafe.lang.Prolog),exec(com.googlecode.prolog_cafe.lang.Prolog),11,0,"@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) throws com.googlecode.prolog_cafe.exceptions.PrologException { engine.cont = cont; engine.setB0(); com.googlecode.prolog_cafe.lang.Term a1 = arg1.dereference(); if (a1 instanceof com.googlecode.prolog_cafe.lang.VariableTerm) { throw new com.googlecode.prolog_cafe.exceptions.PInstantiationException(this, 1); } if (!(a1 instanceof com.googlecode.prolog_cafe.lang.SymbolTerm)) { throw new com.googlecode.prolog_cafe.exceptions.IllegalTypeException(this, 1, ""symbol"", a1); } java.util.regex.Pattern regex = java.util.regex.Pattern.compile(a1.name()); engine.r1 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(regex); engine.r2 = arg2; engine.r3 = arg3; engine.r4 = arg4; com.google.gerrit.server.diff.PatchList pl = StoredValues.PATCH_LIST.get(engine); java.util.Iterator<com.google.gerrit.server.diff.PatchListEntry> iter = pl.getPatches().iterator(); engine.r5 = new com.googlecode.prolog_cafe.lang.JavaObjectTerm(iter); return engine.jtry5(gerrit.PRED_commit_delta_4.commit_delta_check, gerrit.PRED_commit_delta_4.commit_delta_next); }",5596b52c3bac65072a652f4322c9b734dcf4932d,exec(com.googlecode.prolog_cafe.lang.Prolog),15228,384,382
71347,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListEntry.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public java.lang.Long getSizeDelta() { return sizeDelta; },b80df605437cc8cc8191c92d2d30518df4f1061f,,getSizeDelta(),3,9,public long getSizeDelta() { return sizeDelta; },59f05e70830b4d10f45384d2fd253fa5379b853f,getSizeDelta(),173353,16,12
91971,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,,,,"@com.google.common.annotations.VisibleForTesting static com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> parseStates(java.lang.Iterable<byte[]> states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((states != null), null); com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> result = com.google.common.collect.HashMultimap.create(); for (byte[] b : states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefState.check(((((parts.size()) == 3) && (!(parts.get(0).isEmpty()))) && (!(parts.get(1).isEmpty()))), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefState.create(parts.get(1), parts.get(2))); } return result; }",825a68fe00183ebdc192031146b1341b3834c3a4,,parseStates(java.lang.Iterable),5,12,"public static com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> parseStates(java.lang.Iterable<byte[]> states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((states != null), null); com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> result = com.google.common.collect.HashMultimap.create(); for (byte[] b : states) { com.google.gerrit.server.index.change.StalenessChecker.RefState.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefState.check(((((parts.size()) == 3) && (!(parts.get(0).isEmpty()))) && (!(parts.get(1).isEmpty()))), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefState.create(parts.get(1), parts.get(2))); } return result; }",f7768eb749ca224dd4ae70c9206d33c70791d03b,parseStates(java.lang.Iterable),167361,381,371
84151,gitiles-servlet_src_main_java_com_google_gitiles_BaseServlet.java,25.0,"protected void setApiHeaders(javax.servlet.http.HttpServletResponse res, java.lang.String contentType) { if (!(com.google.common.base.Strings.isNullOrEmpty(contentType))) { res.setContentType(contentType); } res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); res.setHeader(HttpHeaders.CONTENT_DISPOSITION, ""attachment""); res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, ""*""); setCacheHeaders(res); }",8286e393415f46e50179b72e24d61e4c6505a571,"protected void setApiHeaders(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String contentType) throws java.io.IOException { if (!(com.google.common.base.Strings.isNullOrEmpty(contentType))) { res.setContentType(contentType); } res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); res.setHeader(HttpHeaders.CONTENT_DISPOSITION, ""attachment""); com.google.gitiles.GitilesAccess access = getAccess(req); java.lang.String[] allowOrigin = access.getConfig().getStringList(""gitiles"", null, ""allowOriginRegex""); if ((allowOrigin.length) > 0) { java.lang.String origin = req.getHeader(HttpHeaders.ORIGIN); java.util.regex.Pattern allowOriginPattern = java.util.regex.Pattern.compile(com.google.common.base.Joiner.on(""|"").skipNulls().join(allowOrigin)); if ((!((origin == null) || (origin.isEmpty()))) && (allowOriginPattern.matcher(origin).matches())) { res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin); } } else { res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, ""*""); } setCacheHeaders(res); }",53896a9214e1be3eb6d533b5ff3cab987246fe72,"setApiHeaders(javax.servlet.http.HttpServletResponse,java.lang.String)","setApiHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",3,30,"protected void setApiHeaders(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String contentType) throws java.io.IOException { if (!(com.google.common.base.Strings.isNullOrEmpty(contentType))) { res.setContentType(contentType); } res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); res.setHeader(HttpHeaders.CONTENT_DISPOSITION, ""attachment""); com.google.gitiles.GitilesAccess access = getAccess(req); java.lang.String[] allowOrigin = access.getConfig().getStringList(""gitiles"", null, ""allowOriginRegex""); if ((allowOrigin.length) > 0) { java.lang.String origin = req.getHeader(HttpHeaders.ORIGIN); java.util.regex.Pattern allowOriginPattern = java.util.regex.Pattern.compile(com.google.common.base.Joiner.on(""|"").join(allowOrigin)); if ((!(com.google.common.base.Strings.isNullOrEmpty(origin))) && (allowOriginPattern.matcher(origin).matches())) { res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, origin); } } else { res.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, ""*""); } setCacheHeaders(res); }",e6d52a3393d8ad4d3be1801bd41a7a5e2e88dda3,"setApiHeaders(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",3411,282,283
17265,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_HintTextBox.java,2.0,public void setHintText(java.lang.String text) { if (text == null) { if ((hintText) == null) { return; } hintFocusHandler.removeHandler(); hintFocusHandler = null; hintBlurHandler.removeHandler(); hintBlurHandler = null; hintText = null; focusHint(); return; } if ((hintText) == null) { hintText = text; hintFocusHandler = addFocusHandler(new com.google.gwt.event.dom.client.FocusHandler() { @java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { setFocus(true); } }); hintBlurHandler = addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(com.google.gwt.event.dom.client.BlurEvent event) { setFocus(false); } }); } else { focusHint(); hintText = text; } if (!(isFocused)) { blurHint(); } },c0c81c2f215069c494784d342ed65c0fb83a4990,public void setHintText(java.lang.String text) { if (text == null) { if ((hintText) == null) { return; } hintFocusHandler.removeHandler(); hintFocusHandler = null; hintBlurHandler.removeHandler(); hintBlurHandler = null; keyPressHandler.removeHandler(); keyPressHandler = null; hintText = null; focusHint(); return; } if ((hintText) == null) { hintText = text; hintFocusHandler = addFocusHandler(new com.google.gwt.event.dom.client.FocusHandler() { @java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { focusHint(); isFocused = true; } }); hintBlurHandler = addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(com.google.gwt.event.dom.client.BlurEvent event) { blurHint(); isFocused = false; } }); keyPressHandler = addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) { setFocus(false); } } }); } else { focusHint(); hintText = text; } if (!(isFocused)) { blurHint(); } },92291d546db2377bb66bc8f36c4d903f00d146a4,setHintText(java.lang.String),setHintText(java.lang.String),4,2,public void setHintText(java.lang.String text) { if (text == null) { if ((hintText) == null) { return; } hintFocusHandler.removeHandler(); hintFocusHandler = null; hintBlurHandler.removeHandler(); hintBlurHandler = null; keyDownHandler.removeHandler(); keyDownHandler = null; hintText = null; focusHint(); return; } if ((hintText) == null) { hintText = text; hintFocusHandler = addFocusHandler(new com.google.gwt.event.dom.client.FocusHandler() { @java.lang.Override public void onFocus(com.google.gwt.event.dom.client.FocusEvent event) { focusHint(); prevText = getText(); isFocused = true; } }); hintBlurHandler = addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(com.google.gwt.event.dom.client.BlurEvent event) { blurHint(); isFocused = false; } }); keyDownHandler = addKeyDownHandler(new com.google.gwt.event.dom.client.KeyDownHandler() { @java.lang.Override public void onKeyDown(final com.google.gwt.event.dom.client.KeyDownEvent event) { onKey(event.getNativeKeyCode()); } }); } else { focusHint(); hintText = text; } if (!(isFocused)) { blurHint(); } },e037b44df8e1f9e1a8a9f4fc7b39cd1ba9ab51c0,setHintText(java.lang.String),168941,345,322
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CherryPickAction.java,2.0,@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); },71c15f774d4f4ed37ec019d6da222fb355c77ab2,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), project)); }",7abdaaa83eb9082fc3d405c219ff259317b685b8,onSuccess(com.google.gerrit.client.info.ChangeInfo),onSuccess(com.google.gerrit.client.info.ChangeInfo),7,2,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, result.legacyId())); }",9c0b91fd70109bbabab2ac67d2f98654e5a1873f,onSuccess(com.google.gerrit.client.info.ChangeInfo),211095,70,70
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,44.0,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index group""); gApi.groups().id(group.id).index(); }",6edf656a4e651816203c155cb5c2843fb1f16960,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index account""); gApi.groups().id(group.id).index(); }",c0c50ed6d50f6d70edcec6981ab30a6e11b4dfab,reindexPermissions(),reindexPermissions(),17,44,"@org.junit.Test public void reindexPermissions() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount groupOwner = accountCreator.user2(); com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""group""); in.members = java.util.Collections.singleton(groupOwner).stream().map(( u) -> u.id.toString()).collect(java.util.stream.Collectors.toList()); in.visibleToAll = true; com.google.gerrit.extensions.common.GroupInfo group = gApi.groups().create(in).get(); setApiUser(admin); gApi.groups().id(group.id).index(); setApiUser(groupOwner); gApi.groups().id(group.id).index(); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.AuthException.class); exception.expectMessage(""not allowed to index group""); gApi.groups().id(group.id).index(); }",6edf656a4e651816203c155cb5c2843fb1f16960,reindexPermissions(),217379,249,249
94513,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeEditApi.java,,,,@java.lang.Override public java.util.Optional<com.google.gerrit.extensions.restapi.BinaryResult> getFile(java.lang.String filePath) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },f147823b5feea5323764ead3f5150a67a31b1ea9,,getFile(java.lang.String),5,9,@java.lang.Override public java.util.Optional<com.google.gerrit.extensions.restapi.BinaryResult> getFile(java.lang.String filePath) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); },b16070352cb4429b02a6d30683825720b44a9e44,getFile(java.lang.String),123455,71,56
164370,java_com_google_gerrit_server_project_SubmitRuleOptions.java,0.0,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return new com.google.gerrit.server.project.AutoValue_SubmitRuleOptions.Builder().allowClosed(false).skipFilters(false).rule(null); },df222d74633ebd17b61849b51f92640c601acae1,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.DEFAULT_OPTIONS.toBuilder(); },2841fd82149290d41e3c8364130b8787204b0a1f,builder(),builder(),12,1,public static com.google.gerrit.server.project.SubmitRuleOptions.Builder builder() { return com.google.gerrit.server.project.SubmitRuleOptions.defaults.toBuilder(); },6995bf2252d5888298c9142c9ba16da7cac3787c,builder(),51999,45,43
32782,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,36.0,public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); },a7e3dee40f27329ab532b00101b29a2b87925cbd,public void onFailure(java.lang.Throwable caught) { enableOnFailure.setEnabled(true); },fe16f498e44e4464aa874b22ff048a8f1577f9a4,onFailure(java.lang.Throwable),onFailure(java.lang.Throwable),7,36,@java.lang.Override public void onFailure(java.lang.Throwable caught) { enableOnFailure.setEnabled(true); },b25b24ccee56966251e37b8f715e8a137e7907d4,onFailure(java.lang.Throwable),99970,21,27
49831,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,1.0,"public com.google.gerrit.server.git.PluginProjectConfig getPluginConfig(java.lang.String pluginName) { com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = pluginConfigs.get(pluginName); if (pluginConfig == null) { pluginConfig = com.google.common.collect.LinkedListMultimap.create(); pluginConfigs.put(pluginName, pluginConfig); } return new com.google.gerrit.server.git.PluginProjectConfig(pluginName, pluginConfig); }",791e7b40708525ee2a7722f650c5cda37dea8893,"public com.google.gerrit.server.git.PluginProjectConfig getPluginConfig(java.lang.String pluginName) { com.google.common.collect.LinkedListMultimap<java.lang.String, java.lang.String> pluginConfig = pluginConfigs.get(pluginName); if (pluginConfig == null) { pluginConfig = com.google.common.collect.LinkedListMultimap.create(); pluginConfigs.put(pluginName, pluginConfig); } return new com.google.gerrit.server.git.PluginProjectConfig(pluginName, this, pluginConfig); }",66fc38530af7fb07191ba97849d918bbf422b58c,getPluginConfig(java.lang.String),getPluginConfig(java.lang.String),15,1,"public com.google.gerrit.server.config.PluginConfig getPluginConfig(java.lang.String pluginName) { org.eclipse.jgit.lib.Config pluginConfig = pluginConfigs.get(pluginName); if (pluginConfig == null) { pluginConfig = new org.eclipse.jgit.lib.Config(); pluginConfigs.put(pluginName, pluginConfig); } return new com.google.gerrit.server.config.PluginConfig(pluginName, pluginConfig, this); }",f1ff7ae5d719367000fe804125dd7cc7bf9e90ae,getPluginConfig(java.lang.String),81788,124,108
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,5.0,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.projectListTitle()); createProjectLinkPanel = new com.google.gwt.user.client.ui.VerticalPanel(); createProjectLinkPanel.setStyleName(Gerrit.RESOURCES.css().createProjectLink()); createProjectLinkPanel.add(new com.google.gerrit.client.ui.Hyperlink(Util.C.headingCreateProject(), com.google.gerrit.common.PageLinks.ADMIN_CREATE_PROJECT)); add(createProjectLinkPanel); projects = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void onOpenRow(final int row) { com.google.gwt.user.client.History.newItem(link(getRowItem(row))); } private java.lang.String link(final com.google.gerrit.reviewdb.client.Project item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); } @java.lang.Override protected void populate(final int row, final com.google.gerrit.reviewdb.client.Project k) { table.setWidget(row, 1, new com.google.gerrit.client.ui.Hyperlink(k.getName(), link(k))); table.setText(row, 2, k.getDescription()); setRowItem(row, k); } }; projects.setSavePointerId(PageLinks.ADMIN_PROJECTS); add(projects); }",6dd5670913b3c952170337a00d414443f6a34bee,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.projectListTitle()); createProjectLinkPanel = new com.google.gwt.user.client.ui.VerticalPanel(); createProjectLinkPanel.setStyleName(Gerrit.RESOURCES.css().createProjectLink()); createProjectLinkPanel.add(new com.google.gerrit.client.ui.Hyperlink(Util.C.headingCreateProject(), com.google.gerrit.common.PageLinks.ADMIN_CREATE_PROJECT)); add(createProjectLinkPanel); projects = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void onOpenRow(final int row) { com.google.gwt.user.client.History.newItem(link(getRowItem(row))); } private java.lang.String link(final com.google.gerrit.client.projects.ProjectInfo item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); } @java.lang.Override protected void populate(final int row, final com.google.gerrit.client.projects.ProjectInfo k) { table.setWidget(row, 1, new com.google.gerrit.client.ui.Hyperlink(k.getName(), link(k))); table.setText(row, 2, k.getDescription()); setRowItem(row, k); } }; projects.setSavePointerId(PageLinks.ADMIN_PROJECTS); add(projects); }",da5c4e98d2e88d33a623d0796b81c35b05d905fa,onInitUI(),onInitUI(),13,6,"@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.projectListTitle()); createProjectLinkPanel = new com.google.gwt.user.client.ui.VerticalPanel(); createProjectLinkPanel.setStyleName(Gerrit.RESOURCES.css().createProjectLink()); createProjectLinkPanel.add(new com.google.gerrit.client.ui.Hyperlink(Util.C.headingCreateProject(), com.google.gerrit.common.PageLinks.ADMIN_CREATE_PROJECT)); add(createProjectLinkPanel); projects = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void onOpenRow(final int row) { com.google.gwt.user.client.History.newItem(link(getRowItem(row))); } private java.lang.String link(final com.google.gerrit.client.projects.ProjectInfo item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.name_key(), ProjectScreen.INFO); } @java.lang.Override protected void populate(final int row, final com.google.gerrit.client.projects.ProjectInfo k) { table.setWidget(row, 1, new com.google.gerrit.client.ui.Hyperlink(k.name(), link(k))); table.setText(row, 2, k.description()); setRowItem(row, k); } }; projects.setSavePointerId(PageLinks.ADMIN_PROJECTS); add(projects); }",27c3be7dd99ccdda354b7e4ebe1208c917afcafb,onInitUI(),19439,340,341
76265,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_SubmoduleValidator.java,7.0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig(receiveEvent.project.getNameKey(), pluginName); boolean rejectSubmodule = cfg.getBoolean(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.KEY_CHECK_SUBMODULE, false); if (!rejectSubmodule) { return java.util.Collections.emptyList(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(receiveEvent.project.getNameKey())) { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation(repo, receiveEvent.commit); if (!(messages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""contains submodules"", messages); } } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""failed to check on submodules"", e); } return java.util.Collections.emptyList(); }",aa0752ac642db4741b9d6b1b92353b1f4321ab7f,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig(receiveEvent.project.getNameKey(), pluginName); if (!(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.doCheckSubmodules(cfg))) { return java.util.Collections.emptyList(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(receiveEvent.project.getNameKey())) { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation(repo, receiveEvent.commit); if (!(messages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""contains submodules"", messages); } } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""failed to check on submodules"", e); } return java.util.Collections.emptyList(); }",8b2fefa867e915901e324ad8438b32de91716a92,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),9,7,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { try { com.google.gerrit.server.config.PluginConfig cfg = cfgFactory.getFromProjectConfig(receiveEvent.project.getNameKey(), pluginName); if (!(com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.isActive(cfg))) { return java.util.Collections.emptyList(); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(receiveEvent.project.getNameKey())) { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages = com.googlesource.gerrit.plugins.uploadvalidator.SubmoduleValidator.performValidation(repo, receiveEvent.commit); if (!(messages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""contains submodules"", messages); } } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new com.google.gerrit.server.git.validators.CommitValidationException(""failed to check on submodules"", e); } return java.util.Collections.emptyList(); }",73744f6d923e4c296303dc8473397a020f7a9253,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),142037,326,323
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,72.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertGroupOwnerPermissions(java.lang.String groupUuid, java.lang.String expectedOwnerUuid) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.access.PermissionInfo newPermissionInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(null, null); newPermissionInfo.rules = com.google.common.collect.ImmutableMap.of(expectedOwnerUuid, new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.extensions.api.access.PermissionRuleInfo.Action.ALLOW, false)); ProjectAccessInfo access = gApi.projects().name(allUsersName.get()).access(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(AccountGroup.UUID.parse(groupUuid)); assertThat(access.local).containsKey(groupRef); assertThat(access.local.get(groupRef).permissions).containsExactly(Permission.PUSH, newPermissionInfo, Permission.READ, newPermissionInfo); }",387d6bea7df6a5293c47e57c977ae1d33e79a9a2,,"assertGroupOwnerPermissions(java.lang.String,java.lang.String)",6,77,"private void assertGroupOwnerPermissions(java.lang.String groupUuid, java.lang.String expectedOwnerUuid) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.access.PermissionInfo newPermissionInfo = new com.google.gerrit.extensions.api.access.PermissionInfo(null, null); newPermissionInfo.rules = com.google.common.collect.ImmutableMap.of(expectedOwnerUuid, new com.google.gerrit.extensions.api.access.PermissionRuleInfo(com.google.gerrit.extensions.api.access.PermissionRuleInfo.Action.ALLOW, false)); ProjectAccessInfo access = gApi.projects().name(allUsers.get()).access(); java.lang.String groupRef = com.google.gerrit.reviewdb.client.RefNames.refsGroups(AccountGroup.UUID.parse(groupUuid)); assertThat(access.local).containsKey(groupRef); assertThat(access.local.get(groupRef).permissions).containsExactly(Permission.PUSH, newPermissionInfo, Permission.READ, newPermissionInfo); }",9a3f558b4cca81230935d916bd1e8287ef6db929,"assertGroupOwnerPermissions(java.lang.String,java.lang.String)",12353,247,246
110850,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountConfig.java,,,,"private com.google.gerrit.reviewdb.client.Account parse(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, registeredOn); account.setActive(cfg.getBoolean(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_ACTIVE, true)); account.setFullName(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME)); java.lang.String preferredEmail = cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL); account.setPreferredEmail(preferredEmail); if (((emailValidator) != null) && (!(emailValidator.isValid(preferredEmail)))) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, java.lang.String.format(""Invalid preferred email: %s"", preferredEmail))); } account.setStatus(cfg.getString(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_STATUS)); return account; }",4712ee566cc20fbb278e051e48d999836a0af89b,,parse(org.eclipse.jgit.lib.Config),7,9,"private com.google.gerrit.reviewdb.client.Account parse(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, registeredOn); account.setActive(cfg.getBoolean(com.google.gerrit.server.account.AccountConfig.ACCOUNT, null, com.google.gerrit.server.account.AccountConfig.KEY_ACTIVE, true)); account.setFullName(com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_FULL_NAME)); java.lang.String preferredEmail = com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_PREFERRED_EMAIL); account.setPreferredEmail(preferredEmail); if (((emailValidator) != null) && (!(emailValidator.isValid(preferredEmail)))) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.account.AccountConfig.ACCOUNT_CONFIG, java.lang.String.format(""Invalid preferred email: %s"", preferredEmail))); } account.setStatus(com.google.gerrit.server.account.AccountConfig.get(cfg, com.google.gerrit.server.account.AccountConfig.KEY_STATUS)); return account; }",f9799e575b1c575dfe4e5f49377ef1ef5bc51005,parse(org.eclipse.jgit.lib.Config),148498,338,326
106453,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIdIT.java,,,,@org.junit.Test public void numericChangeIdReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); },cf4fd2d453c8be28c98f6400d416fe7bc7c8bd6b,,numericChangeIdReturnsChange(),4,10,@org.junit.Test public void changeNumberReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); },50034d66530f7b68359aa82f90a1a6cf6fdaa11b,changeNumberReturnsChange(),175394,74,73
41101,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_53.java,15.0,private static com.google.gerrit.common.data.PermissionRule deny(com.google.gerrit.common.data.GroupReference group) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule(group); rule.setDeny(); return rule; },fc99901bc12718dd6cb5da4403356f4ed72aedf7,"private static com.google.gerrit.common.data.PermissionRule deny(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.common.data.GroupReference group) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule(project, group); rule.setDeny(); return rule; }",d02060260ab93f7d7aa3e2fc546d89921cbca596,deny(com.google.gerrit.common.data.GroupReference),"deny(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.common.data.GroupReference)",5,9,private static com.google.gerrit.common.data.PermissionRule deny(com.google.gerrit.common.data.GroupReference group) { com.google.gerrit.common.data.PermissionRule rule = com.google.gerrit.server.schema.Schema_53.rule(group); rule.setDeny(); return rule; },fc99901bc12718dd6cb5da4403356f4ed72aedf7,deny(com.google.gerrit.common.data.GroupReference),43597,98,77
72338,gerrit-server_src_main_java_com_google_gerrit_server_project_DeleteBranches.java,2.0,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); com.google.gerrit.reviewdb.client.Branch.NameKey branchKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(project.getNameKey(), cmd.getRefName()); hooks.doRefUpdatedHook(branchKey, cmd.getOldId(), cmd.getNewId(), identifiedUser.get().getAccount()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.SubmoduleSubscription> submoduleSubscriptions = dbProvider.get().submoduleSubscriptions().bySuperProject(branchKey); dbProvider.get().submoduleSubscriptions().delete(submoduleSubscriptions); }",42643503a7a3a7b75f4fd3db17b235739aaaaad8,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) throws com.google.gwtorm.server.OrmException { referenceUpdated.fire(project.getNameKey(), cmd); com.google.gerrit.reviewdb.client.Branch.NameKey branchKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(project.getNameKey(), cmd.getRefName()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.SubmoduleSubscription> submoduleSubscriptions = dbProvider.get().submoduleSubscriptions().bySuperProject(branchKey); dbProvider.get().submoduleSubscriptions().delete(submoduleSubscriptions); }",c6e0efeb14f427202cb7cd6aa4f87f53db56a197,"postDeletion(com.google.gerrit.server.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)","postDeletion(com.google.gerrit.server.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)",43,2,"private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }",5d44b0cac8f96c6dc663d300ecf9ec9bbb80091b,"postDeletion(com.google.gerrit.server.project.ProjectResource,org.eclipse.jgit.transport.ReceiveCommand)",204353,172,54
105475,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_DraftApiImpl.java,3.0,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot update draft"", e); } }",165901ea7e7356566bc0648442376f09c256b7b6,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.DraftApiImpl.throwIfPossible(e); throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot update draft"", e); } }",12623fd355e2607ec89754120f1441cc6c6980ad,update(com.google.gerrit.extensions.api.changes.DraftInput),update(com.google.gerrit.extensions.api.changes.DraftInput),6,2,"@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot update draft"", e); } }",46f9d8f75ddc9d066a01a127ce3ce97bac705fd4,update(com.google.gerrit.extensions.api.changes.DraftInput),158124,129,108
25644,src_test_java_com_google_gwtorm_data_PersonAccess.java,5.0,"@com.google.gwtorm.client.Query(""WHERE name != ? AND age > ? ORDER BY name DESC"") com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.TestPerson> notPerson(com.google.gwtorm.data.TestPerson.Key key, int age) throws com.google.gwtorm.client.OrmException;",5a1dfe52eea1ad307b81f4cd55155ee1fd54868f,"@com.google.gwtorm.client.Query(""WHERE name != ? AND age > ? ORDER BY name DESC"") com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.Person> notPerson(com.google.gwtorm.data.Person.Key key, int age) throws com.google.gwtorm.client.OrmException;",eeb3d2310a2adf1e7c0d2222876fd4bfc4e0aa7b,"notPerson(com.google.gwtorm.data.TestPerson$Key,int)","notPerson(com.google.gwtorm.data.Person$Key,int)",4,4,"@com.google.gwtorm.server.Query(""WHERE age > ? ORDER BY name DESC"") com.google.gwtorm.server.ResultSet<com.google.gwtorm.data.Person> olderThanDescByName(int age) throws com.google.gwtorm.server.OrmException;",fac80e15e6ad12f0d6ca1e6911f1b6950d383c07,olderThanDescByName(int),54680,83,67
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,4.0,"@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",1b9d6104d66f985cbc8bf59be38ed27b0fa69a61,"@java.lang.Override public com.google.gerrit.server.restapi.project.CommitResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.restapi.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",232f47124a5d60a497218a6dee227d38b2d36c16,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",17,3,"@java.lang.Override public com.google.gerrit.server.project.CommitResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { org.eclipse.jgit.lib.ObjectId objectId; try { objectId = org.eclipse.jgit.lib.ObjectId.fromString(id.get()); } catch (java.lang.IllegalArgumentException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(parent.getNameKey());org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(objectId); rw.parseBody(commit); if (!(canRead(parent.getProjectState(), repo, commit))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (int i = 0; i < (commit.getParentCount()); i++) { rw.parseBody(rw.parseCommit(commit.getParent(i))); } return new com.google.gerrit.server.project.CommitResource(parent, commit); } catch (org.eclipse.jgit.errors.MissingObjectException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",1b9d6104d66f985cbc8bf59be38ed27b0fa69a61,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",218415,376,367
76640,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static org.eclipse.jgit.lib.ObjectId writeLabels(org.eclipse.jgit.lib.Repository repo, java.util.SortedSet<java.lang.String> labels) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId id = oi.insert(Constants.OBJ_BLOB, com.google.common.base.Joiner.on(""\n"").join(labels).getBytes(java.nio.charset.StandardCharsets.UTF_8)); oi.flush(); return id; } }",05fd552c08cca0b1c8365811703362269ebb4bab,,"writeLabels(org.eclipse.jgit.lib.Repository,java.util.SortedSet)",10,13,"public static org.eclipse.jgit.lib.ObjectId writeLabels(org.eclipse.jgit.lib.Repository repo, java.util.SortedSet<java.lang.String> labels) throws java.io.IOException { java.util.SortedSet<java.lang.String> invalidLabels = com.google.gerrit.server.StarredChangesUtil.validateLabels(labels); if (!(invalidLabels.isEmpty())) { throw new java.lang.IllegalArgumentException(java.lang.String.format(""Invalid star labels: %s"", com.google.common.base.Joiner.on("", "").join(labels))); } try (org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId id = oi.insert(Constants.OBJ_BLOB, com.google.common.base.Joiner.on(""\n"").join(labels).getBytes(java.nio.charset.StandardCharsets.UTF_8)); oi.flush(); return id; } }",492139be8ef0d3245128ab69761120126f41d2a1,"writeLabels(org.eclipse.jgit.lib.Repository,java.util.SortedSet)",32054,136,222
50064,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean hasNonTrivialSortKeyAfter(com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> schema, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { com.google.gerrit.server.query.change.SortKeyPredicate after = ((com.google.gerrit.server.query.change.SortKeyPredicate) (find(p, com.google.gerrit.server.query.change.SortKeyPredicate.class, ""sortkey_after""))); return (after != null) && ((after.getMaxValue(schema)) > 0); }",8965e0e78eae32113c6b3c21e1dee21db8bad7cb,,"hasNonTrivialSortKeyAfter(com.google.gerrit.server.index.Schema,com.google.gerrit.server.query.Predicate)",4,16,"public static boolean hasNonTrivialSortKeyAfter(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { com.google.gerrit.server.query.change.SortKeyPredicate after = ((com.google.gerrit.server.query.change.SortKeyPredicate) (find(p, com.google.gerrit.server.query.change.SortKeyPredicate.class, ""sortkey_after""))); return (after != null) && ((after.getMaxValue()) > 0); }",fb7e11de3221fc3e114f8b6e681e28fafffe8d29,hasNonTrivialSortKeyAfter(com.google.gerrit.server.query.Predicate),3798,160,127
47870,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ChangeGlue.java,,,,"static void simple(com.google.gerrit.client.changes.ChangeInfo change, com.google.gerrit.client.changes.ChangeInfo.ActionInfo action, com.google.gerrit.client.rpc.RestApi api) { final com.google.gerrit.reviewdb.client.Change.Id id = change.legacy_id(); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); } }; if (""PUT"".equalsIgnoreCase(action.method())) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if (""DELETE"".equalsIgnoreCase(action.method())) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } }",f1ed859bfbb36afd15feb01a1feee37082fff654,,"simple(com.google.gerrit.client.changes.ChangeInfo,com.google.gerrit.client.changes.ChangeInfo.ActionInfo,com.google.gerrit.client.rpc.RestApi)",7,1,private static final native com.google.gwt.core.client.JavaScriptObject get(java.lang.String id);,5b42c8e393f6964d5436c0f58b03bc108db9a4a3,get(java.lang.String),192347,282,25
68187,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void assertCommitMessageUpdatedMessage(com.google.gerrit.reviewdb.client.Change change) throws java.lang.Exception { assertChangeMessage(change, ""Commit message was updated""); }",5a114b7c128199918521a160512692de766e23ca,,assertCommitMessageUpdatedMessage(com.google.gerrit.reviewdb.client.Change),8,49,"@org.junit.BeforeClass public static void setTimeForTesting() { final long clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.SECONDS); final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong(new org.joda.time.DateTime(2009, 9, 30, 17, 0, 0).getMillis()); org.joda.time.DateTimeUtils.setCurrentMillisProvider(new org.joda.time.DateTimeUtils.MillisProvider() { @java.lang.Override public long getMillis() { return clockMs.getAndAdd(clockStepMs); } }); }",50550e1bfd7a8364e847488d88ec33b63d9c036f,setTimeForTesting(),53607,44,142
154974,java_com_google_gerrit_server_group_DbGroupAuditListener.java,6.0,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupMemberAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent(""Cannot log add accounts to group event performed by user"", event, e); } }",380cd45a14aaa442ca3dd96a42856ea6e4888328,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event)); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForMembersEvent(""Cannot log add accounts to group event performed by user"", event, e); } }",0396e0cb5b9b7224db227c06f283f2d8afcb834e,onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent),onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent),5,7,"@java.lang.Override public void onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent event) { java.util.Optional<com.google.gerrit.server.group.InternalGroup> updatedGroup = groupCache.get(event.getUpdatedGroup()); if (!(updatedGroup.isPresent())) { logFailToLoadUpdatedGroup(event); return; } com.google.gerrit.server.group.InternalGroup group = updatedGroup.get(); try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(com.google.gerrit.server.group.DbGroupAuditListener.toAccountGroupMemberAudits(event, group.getId())); } catch (com.google.gwtorm.server.OrmException e) { logOrmException(""Cannot log add accounts to group event performed by user"", event, group.getName(), e); } }",9fb726725ab57866fd3c5e30726cda4b478cc58f,onAddMembers(com.google.gerrit.server.audit.group.GroupMemberAuditEvent),187574,133,211
55512,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> projects(java.lang.String name) throws com.google.gerrit.server.query.QueryParseException { if (!(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes).hasField(ChangeField.PROJECTS))) { throw new com.google.gerrit.server.query.QueryParseException(""Unsupported operator: projects""); } return new com.google.gerrit.server.query.change.ProjectPrefixPredicate(name); }",8c1431fabf889813a913cb6baf0b8373a4db50ff,,projects(java.lang.String),7,29,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> projects(java.lang.String name) throws com.google.gerrit.server.query.QueryParseException { if (!(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes).hasField(ChangeField.PROJECTS))) { throw new com.google.gerrit.server.query.QueryParseException((""Unsupported operator: "" + (com.google.gerrit.server.query.change.ChangeQueryBuilder.FIELD_PROJECTS))); } return new com.google.gerrit.server.query.change.ProjectPrefixPredicate(name); }",9379d0db222662db4fdcee74736aca655f2c92ac,projects(java.lang.String),182624,147,170
41101,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_53.java,0.0,private static com.google.gerrit.common.data.PermissionRule rule(com.google.gerrit.common.data.GroupReference group) { return new com.google.gerrit.common.data.PermissionRule(group); },de28aa411d42f71429f6e43f4ef576d2108e07d0,"private static com.google.gerrit.common.data.PermissionRule rule(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.common.data.GroupReference group) { return new com.google.gerrit.common.data.PermissionRule(project, group); }",fc4a5cbf34e18330ed48a6f9cd786e78d390f91d,rule(com.google.gerrit.common.data.GroupReference),"rule(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.common.data.GroupReference)",5,6,private static com.google.gerrit.common.data.PermissionRule rule(com.google.gerrit.common.data.GroupReference group) { return new com.google.gerrit.common.data.PermissionRule(group); },de28aa411d42f71429f6e43f4ef576d2108e07d0,rule(com.google.gerrit.common.data.GroupReference),43604,73,52
58213,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,39.0,"public com.google.gerrit.server.project.ChangeControl forUser(final com.google.gerrit.server.CurrentUser who) { if (getCurrentUser().equals(who)) { return this; } return new com.google.gerrit.server.project.ChangeControl(changeDataFactory, getRefControl().forUser(who), notes); }",a953ff423605de69bdd4fd5fa9a319985d85e6ac,"public com.google.gerrit.server.project.ChangeControl forUser(final com.google.gerrit.server.CurrentUser who) { if (getCurrentUser().equals(who)) { return this; } return new com.google.gerrit.server.project.ChangeControl(gerritServerConfig, changeDataFactory, getRefControl().forUser(who), notes); }",fcda64f73450a112744b5396625fbbfe66c47534,forUser(com.google.gerrit.server.CurrentUser),forUser(com.google.gerrit.server.CurrentUser),10,10,"public com.google.gerrit.server.project.ChangeControl forUser(final com.google.gerrit.server.CurrentUser who) { if (getCurrentUser().equals(who)) { return this; } return new com.google.gerrit.server.project.ChangeControl(changeDataFactory, getRefControl().forUser(who), notes); }",a953ff423605de69bdd4fd5fa9a319985d85e6ac,forUser(com.google.gerrit.server.CurrentUser),141008,80,76
43884,gerrit-server_src_main_java_com_google_gerrit_server_change_GetComment.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.lang.Exception { com.google.gerrit.server.account.AccountInfo.Loader accountLoader = accountLoaderFactory.create(true); com.google.gerrit.server.change.CommentInfo ci = new com.google.gerrit.server.change.CommentInfo(rsrc.getComment(), accountLoader); accountLoader.fill(); return ci; }",e299b9045e860b3eb730ec0f3a97e346adb27d7b,,apply(com.google.gerrit.server.change.CommentResource),2,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.CommentResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.account.AccountInfo.Loader accountLoader = accountLoaderFactory.create(true); com.google.gerrit.server.change.CommentInfo ci = new com.google.gerrit.server.change.CommentInfo(rsrc.getComment(), accountLoader); accountLoader.fill(); return ci; }",bd40de991050d4db9d72b39aff17917d8258cca5,apply(com.google.gerrit.server.change.CommentResource),51989,157,117
70409,gerrit-gpg_src_main_java_com_google_gerrit_gpg_GpgModule.java,,,,"@java.lang.Override protected void configure() { boolean configEnableSignedPush = cfg.getBoolean(""receive"", null, ""enableSignedPush"", false); boolean havePgp = com.google.gerrit.server.util.BouncyCastleUtil.havePGP(); boolean enableSignedPush = configEnableSignedPush && havePgp; bindConstant().annotatedWith(com.google.gerrit.server.EnableSignedPush.class).to(enableSignedPush); if (configEnableSignedPush && (!havePgp)) { com.google.gerrit.gpg.GpgModule.log.info((""Bouncy Castle PGP not installed; signed push verification is"" + "" disabled"")); } if (!enableSignedPush) { bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.GpgModule.NoGpgApi.class); return; } install(new com.google.gerrit.gpg.SignedPushModule()); bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.GPG_KEY_KIND); child(com.google.gerrit.gpg.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }",d6f39fa4297f934b28a575774b9756c58bc288d9,,configure(),8,0,"@java.lang.Override protected void configure() { boolean configEnableSignedPush = cfg.getBoolean(""receive"", null, ""enableSignedPush"", false); boolean havePgp = com.google.gerrit.gpg.BouncyCastleUtil.havePGP(); boolean enableSignedPush = configEnableSignedPush && havePgp; bindConstant().annotatedWith(com.google.gerrit.server.EnableSignedPush.class).to(enableSignedPush); if (configEnableSignedPush && (!havePgp)) { com.google.gerrit.gpg.GpgModule.log.info((""Bouncy Castle PGP not installed; signed push verification is"" + "" disabled"")); } if (!enableSignedPush) { bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.GpgModule.NoGpgApi.class); return; } install(new com.google.gerrit.gpg.SignedPushModule()); bind(com.google.gerrit.server.api.accounts.GpgApiAdapter.class).to(com.google.gerrit.gpg.api.GpgApiAdapterImpl.class); factory(GpgKeyApiImpl.Factory.class); com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.gpg.GPG_KEY_KIND); child(com.google.gerrit.gpg.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.GpgKeys.class); post(com.google.gerrit.gpg.ACCOUNT_KIND, ""gpgkeys"").to(com.google.gerrit.gpg.server.PostGpgKeys.class); get(com.google.gerrit.gpg.GPG_KEY_KIND).to(GpgKeys.Get.class); delete(com.google.gerrit.gpg.GPG_KEY_KIND).to(com.google.gerrit.gpg.server.DeleteGpgKey.class); }",8ec16773a59b8321b299fc90e40ba87da1af9de3,configure(),51985,462,461
143232,src_main_java_com_googlesource_gerrit_plugins_javamelody_GerritMonitoringFilter.java,3.0,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } if (!(java.nio.file.Files.isDirectory(defaultDataDir))) { try { java.nio.file.Files.createDirectories(defaultDataDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", defaultDataDir, e); throw new java.lang.RuntimeException(e); } } return defaultDataDir.toString(); }",e93f8f48d2e4438e117a595ba713d2d6d64eaa5d,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { return tmp.toString(); } java.nio.file.Path storageDir = java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(( path) -> { if (path == null) { return defaultDataDir; } return java.nio.file.Paths.get(path); }).get(); if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.log.error(""Creation of javamelody data dir [{}] failed."", storageDir, e); throw new java.lang.RuntimeException(e); } } return storageDir.toString(); }",2c3c8a52edce0ebc8216a8f70af16634c6906bc4,getStorageDir(),getStorageDir(),6,3,"private java.lang.String getStorageDir() { final java.nio.file.Path tmp = java.nio.file.Paths.get(java.lang.System.getProperty(""java.io.tmpdir"")).resolve(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.JAVAMELODY_PREFIX); if (java.nio.file.Files.isDirectory(tmp)) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.log.warn(""Javamelody data exists in 'tmp' [{}]. Configuration (if any) will be ignored."", tmp); return tmp.toString(); } java.nio.file.Path storageDir = java.util.Optional.ofNullable(cfg.getString(com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.JavamelodyFilter.STORAGE_DIR)).map(java.nio.file.Paths::get).orElse(defaultDataDir); if (!(java.nio.file.Files.isDirectory(storageDir))) { try { java.nio.file.Files.createDirectories(storageDir); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.javamelody.GerritMonitoringFilter.log.error(""Creation of javamelody data dir [{}] failed."", storageDir, e); throw new java.lang.RuntimeException(e); } } return storageDir.toString(); }",582ebcff01d5b3b2fc76a1f9399ea5f7783ca2a8,getStorageDir(),1423,303,329
159510,java_com_google_gerrit_server_git_GarbageCollectionRunner.java,2.0,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (!(schedule.isPresent())) { com.google.gerrit.server.git.GarbageCollectionRunner.log.info(""Ignoring missing gc schedule configuration""); } else if (((schedule.get().initialDelay()) < 0) || ((schedule.get().interval()) <= 0)) { com.google.gerrit.server.git.GarbageCollectionRunner.log.warn(java.lang.String.format(""Ignoring invalid gc schedule configuration: %s"", scheduleConfig)); } else { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",b9d24f72b0b20f754b0f30dd46931ef1bcd2584f,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); java.util.Optional<com.google.gerrit.server.config.ScheduleConfig.Schedule> schedule = scheduleConfig.schedule(); if (schedule.isPresent()) { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, schedule.get().initialDelay(), schedule.get().interval(), java.util.concurrent.TimeUnit.MILLISECONDS); } }",f6ce2cfe7f287dfe09bd23b26e17e72176e2c12b,start(),start(),3,2,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = gcConfig.getScheduleConfig(); scheduleConfig.schedule().ifPresent(( s) -> { @java.lang.SuppressWarnings(""unused"") Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(gcRunner, s.initialDelay(), s.interval(), TimeUnit.MILLISECONDS); }); }",d3aab464d2a3fb25a40b8ce44e4b04a71922cab3,start(),140154,127,90
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,8.0,@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(postTask); },9b080cd13be1c5bc99cb01de26a251a9aad884e3,@org.junit.Test public void remoteUrlUndefinedEventsNotPosted() { eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(processor); verifyZeroInteractions(postTask); },cd43db92ead06685354f0b10368f01b6c653dc08,remoteUrlUndefinedEventsNotPosted(),remoteUrlUndefinedEventsNotPosted(),8,3,@org.junit.Test public void remoteUrlUndefinedTaskNotScheduled() { when(config.getSubsections(eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE))).thenReturn(com.google.common.collect.ImmutableSet.of(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO)); eventHandler.onEvent(projectCreated); verifyZeroInteractions(taskFactory); verifyZeroInteractions(postTask); },dc3af0cc2983dbf2c3d7d2de5656f79ed8bda7d5,remoteUrlUndefinedTaskNotScheduled(),55442,62,108
101017,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewersOp.java,,,,"com.google.gerrit.server.change.PostReviewersOp create(com.google.gerrit.server.change.ChangeResource rsrc, java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.project.ChangeControl> reviewers, java.util.Collection<com.google.gerrit.server.mail.Address> reviewersByEmail, com.google.gerrit.extensions.client.ReviewerState state, com.google.gerrit.extensions.api.changes.NotifyHandling notify, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify);",657a3225d904107e680370960adef56d1be76314,,"create(com.google.gerrit.server.change.ChangeResource,java.util.Map,java.util.Collection,com.google.gerrit.extensions.client.ReviewerState,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.ListMultimap)",11,9,"com.google.gerrit.server.change.PostReviewersOp create(com.google.gerrit.server.change.ChangeResource rsrc, java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.project.ChangeControl> reviewers, java.util.Collection<com.google.gerrit.server.mail.Address> reviewersByEmail, com.google.gerrit.extensions.client.ReviewerState state, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.NotifyHandling notify, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify);",550acb71493f2db5514c43c61b6b7ab2b427e0cf,"create(com.google.gerrit.server.change.ChangeResource,java.util.Map,java.util.Collection,com.google.gerrit.extensions.client.ReviewerState,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.ListMultimap)",116857,179,190
40386,gerrit-server_src_main_java_com_google_gerrit_server_plugins_CopyConfigModule.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.inject.Provides @com.google.gerrit.server.GerritPersonIdent org.eclipse.jgit.lib.PersonIdent getServerIdent() { return serverIdent; },62d07725a08e61c429881dc8da4b3e63e16e5547,,getServerIdent(),2,3,@com.google.inject.Provides @com.google.gerrit.server.GerritPersonIdent org.eclipse.jgit.lib.PersonIdent getServerIdent() { return serverIdentProvider.get(); },43d8038f2c9df734846a774569174fd9c06c2a52,getServerIdent(),164555,44,47
74492,gerrit-server_src_test_java_com_google_gerrit_server_notedb_AbstractChangeNotesTest.java,4.0,"protected com.google.gerrit.reviewdb.client.Change newChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId()); com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate(c, changeOwner); u.setChangeId(c.getKey().get()); u.setBranch(c.getDest().get()); u.commit(); return c; }",65a453e2c65078f5f34aafe8be8a91c8cddda8de,"protected com.google.gerrit.reviewdb.client.Change newChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId()); db.changes().insert(java.util.Arrays.asList(c)); com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate(c, changeOwner); u.setChangeId(c.getKey().get()); u.setBranch(c.getDest().get()); u.commit(); return c; }",a59b6456814f77539961fc5117c0dc00ed287e14,newChange(),newChange(),14,4,"protected com.google.gerrit.reviewdb.client.Change newChange() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.testutil.TestChanges.newChange(project, changeOwner.getAccountId()); com.google.gerrit.server.notedb.ChangeUpdate u = newUpdate(c, changeOwner); u.setChangeId(c.getKey().get()); u.setBranch(c.getDest().get()); u.commit(); return c; }",65a453e2c65078f5f34aafe8be8a91c8cddda8de,newChange(),158482,137,120
48530,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_CommentRange.java,,,,public void setStartCh(int sc) { startCh = sc; },3ce61d7c03a11f772f1a1a9455470cad6c3a22a6,,setStartCh(int),6,8,public void setStartCharacter(int sc) { startCharacter = sc; },6813a3de5936c4693cf58f968e9e78a6d485ba6f,setStartCharacter(int),143263,16,16
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FollowUpAction.java,0.0,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId())); hide(); } }); }",5bc5864245b89f47c9df9da719fa706de4b36acd,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.legacyId(), result.projectNameKey())); hide(); } }); }",0dc0f74d04954e19cb2624effdda12201d81c0e8,send(java.lang.String),send(java.lang.String),7,0,"@java.lang.Override void send(java.lang.String message) { com.google.gerrit.client.changes.ChangeApi.createChange(project, branch, topic, message, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(result.projectNameKey(), result.legacyId())); hide(); } }); }",5fd962ab7a7921d5f15c5b013225df0bb596d7bb,send(java.lang.String),211511,148,148
33595,gerrit-server_src_main_java_com_google_gerrit_server_git_MultiProgressMonitor.java,3.0,"public void begin(java.util.concurrent.Future<?> workerFuture) throws java.util.concurrent.ExecutionException { synchronized(this) { long left = maxIntervalNanos; while (!(done)) { long start = java.lang.System.nanoTime(); try { java.util.concurrent.TimeUnit.NANOSECONDS.timedWait(this, left); } catch (java.lang.InterruptedException e) { throw new java.util.concurrent.ExecutionException(e); } left -= (java.lang.System.nanoTime()) - start; if (left <= 0) { moveSpinner(); left = maxIntervalNanos; } sendUpdate(); if ((!(done)) && (workerFuture.isDone())) { com.google.gerrit.server.git.MultiProgressMonitor.log.warn((""MultiProgressMonitor worker did not call end()"" + "" before returning"")); end(); } } } try { workerFuture.get(maxIntervalNanos, java.util.concurrent.TimeUnit.NANOSECONDS); } catch (java.lang.InterruptedException e) { throw new java.util.concurrent.ExecutionException(e); } catch (java.util.concurrent.CancellationException e) { throw new java.util.concurrent.ExecutionException(e); } catch (java.util.concurrent.TimeoutException e) { workerFuture.cancel(true); throw new java.util.concurrent.ExecutionException(e); } sendDone(); }",b314158c3b31f19574873afeaec4c27358655232,"public void begin(final java.util.concurrent.Future<?> workerFuture) throws java.util.concurrent.ExecutionException { begin(workerFuture, 0, null); }",e63476bb1577b8c84f8bba0aa7e194e5822dab45,begin(java.util.concurrent.Future),begin(java.util.concurrent.Future),13,2,"public void waitFor(final java.util.concurrent.Future<?> workerFuture) throws java.util.concurrent.ExecutionException { waitFor(workerFuture, 0, null); }",f23a0942a5a328c6bdbac2eb0cd751ffd0de7b14,waitFor(java.util.concurrent.Future),77620,35,35
75947,gerrit-lucene_src_main_java_com_google_gerrit_lucene_GerritIndexConfig.java,,,,"static void convertLegacyConfig(org.eclipse.jgit.lib.Config cfg) { for (java.lang.String subsection : cfg.getSubsections(com.google.gerrit.lucene.GerritIndexConfig.SECTION)) { java.lang.Integer v = com.google.common.primitives.Ints.tryParse(subsection); if (v != null) { java.lang.String ready = cfg.getString(com.google.gerrit.lucene.GerritIndexConfig.SECTION, subsection, com.google.gerrit.lucene.GerritIndexConfig.KEY_READY); if (ready != null) { cfg.unset(com.google.gerrit.lucene.GerritIndexConfig.SECTION, subsection, com.google.gerrit.lucene.GerritIndexConfig.KEY_READY); cfg.set(com.google.gerrit.lucene.GerritIndexConfig.indexDirName(ChangeSchemaDefinitions.NAME, v)); } } } }",91f4fb74642f259f3fdab383d0664dc18c676697,,convertLegacyConfig(org.eclipse.jgit.lib.Config),7,1,"void setReady(java.lang.String indexName, int version, boolean ready) { cfg.setBoolean(com.google.gerrit.lucene.GerritIndexStatus.SECTION, com.google.gerrit.lucene.GerritIndexStatus.indexDirName(indexName, version), com.google.gerrit.lucene.GerritIndexStatus.KEY_READY, ready); }",7cf4bf5bf5e6fc92c7c957184fe893469984458d,"setReady(java.lang.String,int,boolean)",125810,220,87
104539,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksServlet.java,,,,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action action = new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action(req, resp); java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_LOCKS_URL.matcher(action.path); if (matcher.matches()) { java.lang.String project = matcher.group(1); java.lang.String lockId = matcher.group(2); if (com.google.common.base.Strings.isNullOrEmpty(lockId)) { createLock(project, action); } else { deleteLock(project, lockId, action); } return; } matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_VERIFICATION_URL.matcher(action.path); if (matcher.matches()) { verifyLocks(matcher.group(1), action); } else { action.sendError(com.googlesource.gerrit.plugins.lfs.locks.SC_INTERNAL_SERVER_ERROR, java.lang.String.format(""Unsupported path %s was provided"", action.path)); } }",807c223e4ea511e7831aa0a5131491649450a687,,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",13,2,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse resp) throws java.io.IOException, javax.servlet.ServletException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action action = new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.Action(req, resp); java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_LOCKS_URL_PATTERN.matcher(action.path); if (matcher.matches()) { java.lang.String project = matcher.group(1); java.lang.String lockId = matcher.group(2); if (com.google.common.base.Strings.isNullOrEmpty(lockId)) { createLock(project, action); } else { deleteLock(project, lockId, action); } return; } matcher = com.googlesource.gerrit.plugins.lfs.locks.LfsLocksServlet.LFS_VERIFICATION_URL_PATTERN.matcher(action.path); if (matcher.matches()) { verifyLocks(matcher.group(1), action); return; } action.sendError(com.googlesource.gerrit.plugins.lfs.locks.SC_INTERNAL_SERVER_ERROR, java.lang.String.format(""Unsupported path %s was provided"", action.path)); }",5ebb1677dfadd6528919b79afa1e976670e5649e,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",8587,312,315
110915,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setSequenceGap(java.lang.Integer sequenceGap) { this.sequenceGap = sequenceGap; return this; },ae9ba7c0b38678d6305f828e6342d0836615e69b,,setSequenceGap(java.lang.Integer),6,13,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setSequenceGap(int sequenceGap) { this.sequenceGap = sequenceGap; return this; },80240ecdf8ac2b250bc569eddaf4a5e65a440276,setSequenceGap(int),92826,48,44
85336,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_PushTagIT.java,7.0,"@org.junit.Test public void create() throws java.lang.Exception { for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForExistingCommit(tagType, Status.REJECTED_OTHER_REASON); allowTagCreation(tagType); pushTagForExistingCommit(tagType, Status.OK); pushTagForNewCommit(tagType, Status.REJECTED_OTHER_REASON); } allowPushOfTagsForNewCommits(); for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForNewCommit(tagType, Status.OK); } }",2363cccc364263302fb54f258e907803f2ebb6ff,"@org.junit.Test public void create() throws java.lang.Exception { for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForExistingCommit(tagType, Status.REJECTED_OTHER_REASON); allowTagCreation(tagType); pushTagForExistingCommit(tagType, Status.OK); pushTagForNewCommit(tagType, Status.REJECTED_OTHER_REASON); } allowPushOnRefsTags(); for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForNewCommit(tagType, Status.OK); } }",64fb00d0e280f70abe71587c89a68f2faf6e1d3b,create(),create(),6,9,"@org.junit.Test public void createTagForExistingCommit() throws java.lang.Exception { for (com.google.gerrit.acceptance.rest.project.PushTagIT.TagType tagType : com.google.gerrit.acceptance.rest.project.PushTagIT.TagType.values()) { pushTagForExistingCommit(tagType, Status.REJECTED_OTHER_REASON); allowTagCreation(tagType); pushTagForExistingCommit(tagType, Status.OK); allowPushOnRefsTags(); pushTagForExistingCommit(tagType, Status.OK); removePushFromRefsTags(); } }",b84e10226dff1c85d8e85bda2a004bbbdc5ffb91,createTagForExistingCommit(),78364,203,141
64320,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownHelper.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void populateBanner(java.util.Map<java.lang.String, java.lang.Object> data, org.pegdown.ast.RootNode nav) { data.put(""siteTitle"", null); data.put(""logoUrl"", null); data.put(""homeUrl"", null); for (java.util.Iterator<org.pegdown.ast.Node> i = nav.getChildren().iterator(); i.hasNext();) { org.pegdown.ast.Node n = i.next(); if (n instanceof org.pegdown.ast.HeaderNode) { org.pegdown.ast.HeaderNode h = ((org.pegdown.ast.HeaderNode) (n)); if ((h.getLevel()) == 1) { data.put(""siteTitle"", com.google.gitiles.doc.TocSerializer.getText(h)); i.remove(); break; } } } for (org.pegdown.ast.ReferenceNode r : nav.getReferences()) { java.lang.String key = com.google.gitiles.doc.TocSerializer.getText(r); java.lang.String url = r.getUrl(); if (""logo"".equalsIgnoreCase(key)) { data.put(""logoUrl"", url); } else if (""home"".equalsIgnoreCase(key)) { if (links.isMarkdown(url)) { url = links.getMarkdownUrl(url); } data.put(""homeUrl"", url); } } }",706cbb715b38c4a498974360f1ff858f0e4d059d,,"populateBanner(java.util.Map,org.pegdown.ast.RootNode)",18,3,static java.lang.String getTitle(org.pegdown.ast.Node node) { if (node instanceof org.pegdown.ast.HeaderNode) { if ((((org.pegdown.ast.HeaderNode) (node)).getLevel()) == 1) { return com.google.gitiles.doc.MarkdownHelper.getInnerText(node); } return null; } for (org.pegdown.ast.Node child : node.getChildren()) { java.lang.String title = com.google.gitiles.doc.MarkdownHelper.getTitle(child); if (title != null) { return title; } } return null; },15efead96f00c860063dad6e8c10b8bf5146bb23,getTitle(org.pegdown.ast.Node),5723,321,142
68307,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeCleanupRunner.java,,,,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.change.ChangeCleanupRunner.log.info(""Ignoring missing changeCleanup schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.change.ChangeCleanupRunner.log.warn(""Ignoring invalid changeCleanup schedule configuration""); } else { queue.getDefaultQueue().scheduleAtFixedRate(runner, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",61a5b111c251d813f2ad961aa2acd66a1f2c4370,,start(),14,3,"@java.lang.Override public void start() { com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.change.ChangeCleanupRunner.log.info(""Ignoring missing changeCleanup schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.change.ChangeCleanupRunner.log.warn(java.lang.String.format(""Ignoring invalid changeCleanup schedule configuration: %s"", scheduleConfig)); } else { queue.getDefaultQueue().scheduleAtFixedRate(runner, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",8bc30e90d4cfb5cb4d6fa247b6ed1a790cd9de96,start(),196228,166,180
107000,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,82.0,"protected Project.NameKey createProject(java.lang.String nameSuffix, com.google.gerrit.reviewdb.client.Project.NameKey parent, com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, parent, true, submitType); }",ef16540d899e8efaa80afb36ca47c981f8e8dee9,"protected com.google.gerrit.reviewdb.client.Project.NameKey createProject(java.lang.String nameSuffix, com.google.gerrit.reviewdb.client.Project.NameKey parent, com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, parent, true, submitType); }",259cf45dd6db6efbf410b3b9edadffb32f5101b3,"createProject(java.lang.String,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.extensions.client.SubmitType)","createProject(java.lang.String,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.extensions.client.SubmitType)",5,82,"protected Project.NameKey createProject(java.lang.String nameSuffix, com.google.gerrit.reviewdb.client.Project.NameKey parent, com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.extensions.restapi.RestApiException { return createProject(nameSuffix, parent, true, submitType); }",ef16540d899e8efaa80afb36ca47c981f8e8dee9,"createProject(java.lang.String,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.extensions.client.SubmitType)",3629,95,82
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void addReviewerByEmailToReviewableChangeInReviewDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); addReviewerByEmailToReviewableChangeInReviewDb(batch()); },1eae46bcff7a89e8e6279276e11defb2af993f71,,addReviewerByEmailToReviewableChangeInReviewDbBatch(),16,6,@org.junit.Test public void addReviewerByEmailToReviewableChangeInReviewDbBatch() throws java.lang.Exception { addReviewerByEmailToReviewableChangeInReviewDb(batch()); },158cc23ed04486db2d3d32b51ea2dd34211658c4,addReviewerByEmailToReviewableChangeInReviewDbBatch(),145716,59,45
58385,gitiles-servlet_src_test_java_com_google_gitiles_blame_BlameServletTest.java,,,,"@org.junit.Test public void blameJson() throws java.lang.Exception { java.lang.String contents1 = ""foo\n""; java.lang.String contents2 = ""foo\ncontents\n""; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update(""master"", repo.commit().add(""foo"", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update(""master"", repo.commit().tick(10).parent(c1).add(""foo"", contents2)); java.util.Map<java.lang.String, java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData>> result = getBlameJson(((""/test/+blame/"" + (c2.name())) + ""/foo"")); assertEquals(""regions"", com.google.common.collect.Iterables.getOnlyElement(result.keySet())); java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData> regions = result.get(""regions""); assertEquals(2, regions.size()); com.google.gitiles.blame.BlameServletTest.RegionJsonData r1 = regions.get(0); assertEquals(1, r1.start); assertEquals(2, r1.end); assertEquals(""foo"", r1.path); assertEquals(c1.name(), r1.commit); assertEquals(""J. Author"", r1.author.name); assertEquals(""jauthor@example.com"", r1.author.email); assertEquals(""2009-03-13 17:29:48 -0330"", r1.author.time); com.google.gitiles.blame.BlameServletTest.RegionJsonData r2 = regions.get(1); assertEquals(2, r2.start); assertEquals(3, r2.end); assertEquals(""foo"", r2.path); assertEquals(c2.name(), r2.commit); assertEquals(""J. Author"", r2.author.name); assertEquals(""jauthor@example.com"", r2.author.email); assertEquals(""2009-03-13 17:29:58 -0330"", r2.author.time); }",fbceeaa9f19976d1afb8afb2d3d5cf8d31702616,,blameJson(),2,2,"@org.junit.Test public void blameJson() throws java.lang.Exception { java.lang.String contents1 = ""foo\n""; java.lang.String contents2 = ""foo\ncontents\n""; org.eclipse.jgit.revwalk.RevCommit c1 = repo.update(""master"", repo.commit().add(""foo"", contents1)); org.eclipse.jgit.revwalk.RevCommit c2 = repo.update(""master"", repo.commit().tick(10).parent(c1).add(""foo"", contents2)); java.util.Map<java.lang.String, java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData>> result = getBlameJson(((""/test/+blame/"" + (c2.name())) + ""/foo"")); assertEquals(""regions"", com.google.common.collect.Iterables.getOnlyElement(result.keySet())); java.util.List<com.google.gitiles.blame.BlameServletTest.RegionJsonData> regions = result.get(""regions""); assertEquals(2, regions.size()); com.google.gitiles.blame.BlameServletTest.RegionJsonData r1 = regions.get(0); assertEquals(1, r1.start); assertEquals(1, r1.count); assertEquals(""foo"", r1.path); assertEquals(c1.name(), r1.commit); assertEquals(""J. Author"", r1.author.name); assertEquals(""jauthor@example.com"", r1.author.email); assertEquals(""2009-03-13 17:29:48 -0330"", r1.author.time); com.google.gitiles.blame.BlameServletTest.RegionJsonData r2 = regions.get(1); assertEquals(2, r2.start); assertEquals(1, r2.count); assertEquals(""foo"", r2.path); assertEquals(c2.name(), r2.commit); assertEquals(""J. Author"", r2.author.name); assertEquals(""jauthor@example.com"", r2.author.email); assertEquals(""2009-03-13 17:29:58 -0330"", r2.author.time); }",133f970b8b85fd94fba674a9ce3bdddf031c49f8,blameJson(),41436,453,453
34320,gerrit-sshd_src_test_java_com_google_gerrit_sshd_commands_ColumnFormatterTest.java,,,,"public void testOneColumn() { final com.google.gerrit.sshd.commands.ColumnFormatterTest.PrintWriterComparator comparator = new com.google.gerrit.sshd.commands.ColumnFormatterTest.PrintWriterComparator(); final com.google.gerrit.sshd.commands.ColumnFormatter formatter = new com.google.gerrit.sshd.commands.ColumnFormatter(comparator.getPrintWriter(), ""\t""); formatter.addColumn(""foo""); formatter.nextLine(); formatter.finish(); comparator.assertEquals(""foo\n""); }",0fadac704ba689c723b893c5f16e1bb8def42301,,testOneColumn(),7,4,"public void testOneColumn() { final com.google.gerrit.server.ioutil.ColumnFormatterTest.PrintWriterComparator comparator = new com.google.gerrit.server.ioutil.ColumnFormatterTest.PrintWriterComparator(); final com.google.gerrit.server.ioutil.ColumnFormatter formatter = new com.google.gerrit.server.ioutil.ColumnFormatter(comparator.getPrintWriter(), '\t'); formatter.addColumn(""foo""); formatter.nextLine(); formatter.finish(); comparator.assertEquals(""foo\n""); }",690ae87abcdfee57e604da821e1269b993d569da,testOneColumn(),119411,112,113
38330,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginLoader.java,6.0,"private com.google.gerrit.server.plugins.Plugin runPlugin(java.lang.String name, java.io.File jar, com.google.gerrit.server.plugins.Plugin oldPlugin) throws com.google.gerrit.server.plugins.PluginInstallException { org.eclipse.jgit.storage.file.FileSnapshot snapshot = org.eclipse.jgit.storage.file.FileSnapshot.save(jar); try { com.google.gerrit.server.plugins.Plugin newPlugin = loadPlugin(name, jar, snapshot); boolean reload = ((oldPlugin != null) && (oldPlugin.canReload())) && (newPlugin.canReload()); if ((!reload) && (oldPlugin != null)) { oldPlugin.stop(); running.remove(name); } if (!(newPlugin.isDisabled())) { newPlugin.start(env); } if (reload) { env.onReloadPlugin(oldPlugin, newPlugin); oldPlugin.stop(); } else if (!(newPlugin.isDisabled())) { env.onStartPlugin(newPlugin); } if (!(newPlugin.isDisabled())) { running.put(name, newPlugin); } else { disabled.put(name, newPlugin); } broken.remove(name); return newPlugin; } catch (java.lang.Throwable err) { broken.put(name, snapshot); throw new com.google.gerrit.server.plugins.PluginInstallException(err); } }",2d63e60e7b0e19fd10d940533123726cf24d7a50,"private com.google.gerrit.server.plugins.Plugin runPlugin(java.lang.String name, java.io.File jar, com.google.gerrit.server.plugins.Plugin oldPlugin) throws com.google.gerrit.server.plugins.PluginInstallException { org.eclipse.jgit.storage.file.FileSnapshot snapshot = org.eclipse.jgit.storage.file.FileSnapshot.save(jar); try { com.google.gerrit.server.plugins.Plugin newPlugin = loadPlugin(name, jar, snapshot); boolean reload = ((oldPlugin != null) && (oldPlugin.canReload())) && (newPlugin.canReload()); if ((!reload) && (oldPlugin != null)) { oldPlugin.stop(); running.remove(name); } if (!(newPlugin.isDisabled())) { newPlugin.start(env, staticDir); } if (reload) { env.onReloadPlugin(oldPlugin, newPlugin); oldPlugin.stop(); } else if (!(newPlugin.isDisabled())) { env.onStartPlugin(newPlugin); } if (!(newPlugin.isDisabled())) { running.put(name, newPlugin); } else { disabled.put(name, newPlugin); } if (newPlugin.hasWebUiPlugin()) { com.google.gerrit.common.data.RegisteredWebUiPlugin registerdPlugin = new com.google.gerrit.common.data.RegisteredWebUiPlugin(name, newPlugin.getWebUiPlugin()); registeredWebUiPlugins.add(registerdPlugin); } broken.remove(name); return newPlugin; } catch (java.lang.Throwable err) { broken.put(name, snapshot); throw new com.google.gerrit.server.plugins.PluginInstallException(err); } }",7a4e98242bbf92c3182ef4d6d91db74fc6dac515,"runPlugin(java.lang.String,java.io.File,com.google.gerrit.server.plugins.Plugin)","runPlugin(java.lang.String,java.io.File,com.google.gerrit.server.plugins.Plugin)",9,6,"private com.google.gerrit.server.plugins.Plugin runPlugin(java.lang.String name, java.io.File jar, com.google.gerrit.server.plugins.Plugin oldPlugin) throws com.google.gerrit.server.plugins.PluginInstallException { org.eclipse.jgit.storage.file.FileSnapshot snapshot = org.eclipse.jgit.storage.file.FileSnapshot.save(jar); try { com.google.gerrit.server.plugins.Plugin newPlugin = loadPlugin(name, jar, snapshot); boolean reload = ((oldPlugin != null) && (oldPlugin.canReload())) && (newPlugin.canReload()); if ((!reload) && (oldPlugin != null)) { oldPlugin.stop(); running.remove(name); } if (!(newPlugin.isDisabled())) { newPlugin.start(env); } if (reload) { env.onReloadPlugin(oldPlugin, newPlugin); oldPlugin.stop(); } else if (!(newPlugin.isDisabled())) { env.onStartPlugin(newPlugin); } if (!(newPlugin.isDisabled())) { running.put(name, newPlugin); } else { disabled.put(name, newPlugin); } broken.remove(name); return newPlugin; } catch (java.lang.Throwable err) { broken.put(name, snapshot); throw new com.google.gerrit.server.plugins.PluginInstallException(err); } }",2d63e60e7b0e19fd10d940533123726cf24d7a50,"runPlugin(java.lang.String,java.io.File,com.google.gerrit.server.plugins.Plugin)",92271,380,308
57829,src_main_java_com_googlesource_gerrit_plugins_quota_Publisher.java,19.0,"private com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent createEvent() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent(); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { long size = repoSizeCache.get(p).get(); event.addData(size, p.get()); } return event; }",3757e8c3078f00ec2850c725462d415bcc9b460c,"private com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent createRepoSizeEvent() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent(com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { long size = repoSizeCache.get(p).get(); event.addData(size, p.get()); } return event; }",a8405288e2e255190defec10f1adbb25db6a7aa9,createEvent(),createRepoSizeEvent(),20,1,"private com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent createRepoSizeEvent() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent event = new com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent(com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE); for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { long size = repoSizeCache.get(p).get(); event.addData(size, p.get()); } return event; }",68fc539e3f5d3df8ab2abf90b219a5afd20c09e8,createRepoSizeEvent(),50551,149,152
76355,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,4.0,"@org.junit.Test public void testOwnerGroupsForStarFilter() { java.lang.String[] ownerGroups = new java.lang.String[]{ ""group1"", ""group2"" }; configureOwnerGroups(""*"", com.google.common.collect.Lists.newArrayList(ownerGroups)); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(ownerGroups); }",8e94a20d5272774651e57eabbcb20616229aa506,"@org.junit.Test public void testOwnerGroupsForStarFilter() { java.util.List<java.lang.String> ownerGroups = java.util.Arrays.asList(""group1"", ""group2""); configureOwnerGroups(""*"", ownerGroups); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).containsExactlyElementsIn(ownerGroups); }",406f38081666d18238acc44ac1e8217ba2ec2b52,testOwnerGroupsForStarFilter(),testOwnerGroupsForStarFilter(),6,4,"@org.junit.Test public void testOwnerGroupsForStarFilter() { com.google.common.collect.ImmutableList<java.lang.String> ownerGroups = com.google.common.collect.ImmutableList.of(""group1"", ""group2""); configureOwnerGroups(""*"", ownerGroups); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).containsExactlyElementsIn(ownerGroups); }",26cc25c00d0116144a37123758d79eb81b61a46d,testOwnerGroupsForStarFilter(),183491,92,100
46711,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetMembersCommand.java,,,,"private void reportGroupsAdded(java.lang.String groupName, java.util.List<com.google.gerrit.server.group.GroupJson.GroupInfo> groupInfoList) throws java.io.IOException, java.io.UnsupportedEncodingException { out.write(java.lang.String.format(""Groups added to group %s: %s\n"", groupName, com.google.common.base.Joiner.on("","").join(com.google.common.collect.Iterables.transform(groupInfoList, new com.google.common.base.Function<com.google.gerrit.server.group.GroupJson.GroupInfo, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupJson.GroupInfo groupInfo) { return groupInfo.name; } }))).getBytes(com.google.gerrit.sshd.commands.ENC)); }",b46c76b46d160e9b2197cc9bf40db2fe15f68b59,,"reportGroupsAdded(java.lang.String,java.util.List)",5,6,"private void reportGroupsAction(java.lang.String action, com.google.gerrit.server.group.GroupResource group, java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> groupUuidList) throws java.io.IOException, java.io.UnsupportedEncodingException { out.write(java.lang.String.format(""Groups %s group %s: %s\n"", action, group.getName(), com.google.common.base.Joiner.on("", "").join(com.google.common.collect.Iterables.transform(groupUuidList, new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return groupCache.get(uuid).getName(); } }))).getBytes(com.google.gerrit.sshd.commands.ENC)); }",e8c27bbe5c462aaf2b3d6395be96ecd67c8b80e1,"reportGroupsAction(java.lang.String,com.google.gerrit.server.group.GroupResource,java.util.List)",186924,206,235
99271,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,53.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.change.ChangeJson create(com.google.gerrit.extensions.client.ListChangesOption... options) { return create(com.google.common.collect.Sets.newEnumSet(java.util.Arrays.asList(options), com.google.gerrit.extensions.client.ListChangesOption.class)); }",21cda5ea879c15c57d7c1814f2ff4400d87c5a87,,create(com.google.gerrit.extensions.client.ListChangesOption[]),2,47,"public com.google.gerrit.server.change.ChangeJson create(com.google.gerrit.extensions.client.ListChangesOption first, com.google.gerrit.extensions.client.ListChangesOption... rest) { return create(com.google.common.collect.Sets.immutableEnumSet(first, rest)); }",799e4f83b20f075e811396a1ed3a9f9a8361d26d,"create(com.google.gerrit.extensions.client.ListChangesOption,com.google.gerrit.extensions.client.ListChangesOption[])",95152,78,71
57690,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ShowCaches.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void threadSummary() { java.util.List<java.lang.String> prefixes = com.google.common.collect.Lists.newArrayList(""HTTP"", ""IntraLineDiff"", ""ReceiveCommits"", ""SSH git-receive-pack"", ""SSH git-upload-pack"", ""SSH-Interactive-Worker"", ""SSH-Stream-Worker"", ""SshCommandStart""); java.lang.Runtime r = java.lang.Runtime.getRuntime(); java.lang.management.ThreadMXBean threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); stdout.format(""Threads: %d cpus available, %d threads\n"", r.availableProcessors(), threadMXBean.getThreadCount()); com.google.common.collect.Table<java.lang.String, java.lang.Thread.State, java.lang.Integer> count = com.google.common.collect.HashBasedTable.create(); for (long id : threadMXBean.getAllThreadIds()) { java.lang.management.ThreadInfo info = threadMXBean.getThreadInfo(id); if (info == null) { continue; } java.lang.String name = info.getThreadName(); for (java.lang.String p : prefixes) { if (name.startsWith(p)) { java.lang.Thread.State state = info.getThreadState(); java.lang.Integer c = count.get(p, state); count.put(p, info.getThreadState(), (c != null ? c++ : 1)); } } } stdout.print(java.lang.String.format("" %22s"", """")); for (java.lang.Thread.State s : java.lang.Thread.State.values()) { stdout.print(java.lang.String.format("" %14s"", s.name())); } stdout.print('\n'); for (java.lang.String p : prefixes) { stdout.print(java.lang.String.format("" %-22s"", p)); for (java.lang.Thread.State s : java.lang.Thread.State.values()) { stdout.print(java.lang.String.format("" %14d"", com.google.gerrit.sshd.commands.ShowCaches.nullToZero(count.get(p, s)))); } stdout.print('\n'); } stdout.print('\n'); }",24fcbbe12ce7d4f231cfb3cd92e96086d711dc30,,threadSummary(),7,19,"private void threadSummary() { java.util.List<java.lang.String> prefixes = java.util.Arrays.asList(""HTTP"", ""IntraLineDiff"", ""ReceiveCommits"", ""SSH git-receive-pack"", ""SSH git-upload-pack"", ""SSH-Interactive-Worker"", ""SSH-Stream-Worker"", ""SshCommandStart""); java.lang.String other = ""Other""; java.lang.Runtime r = java.lang.Runtime.getRuntime(); java.lang.management.ThreadMXBean threadMXBean = java.lang.management.ManagementFactory.getThreadMXBean(); stdout.format(""Threads: %d CPUs available, %d threads\n"", r.availableProcessors(), threadMXBean.getThreadCount()); if (showThreads) { com.google.common.collect.Table<java.lang.String, java.lang.Thread.State, java.lang.Integer> count = com.google.common.collect.HashBasedTable.create(); for (long id : threadMXBean.getAllThreadIds()) { java.lang.management.ThreadInfo info = threadMXBean.getThreadInfo(id); if (info == null) { continue; } java.lang.String name = info.getThreadName(); java.lang.Thread.State state = info.getThreadState(); java.lang.String group = other; for (java.lang.String p : prefixes) { if (name.startsWith(p)) { group = p; break; } } java.lang.Integer c = count.get(group, state); count.put(group, state, (c != null ? c + 1 : 1)); } stdout.print(java.lang.String.format("" %22s"", """")); for (java.lang.Thread.State s : java.lang.Thread.State.values()) { stdout.print(java.lang.String.format("" %14s"", s.name())); } stdout.print('\n'); for (java.lang.String p : prefixes) { printThreadCounts(p, count.row(p)); } printThreadCounts(other, count.row(other)); } stdout.print('\n'); }",1a224ea37afefcaa45d2013454d1ee7be14838b0,threadSummary(),200873,512,463
61740,gerrit-server_src_test_java_com_google_gerrit_server_project_RefControlTest.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testDenyOwnerProject() { allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); deny(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/*""); assertAdminsAreOwnersAndDevsAreNot(); }",864b71453906fcffe9cf44df9f335dfe2d94c0a4,,testDenyOwnerProject(),3,7,"@org.junit.Test public void testDenyOwnerProject() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, ""refs/*""); com.google.gerrit.server.project.Util.deny(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, ""refs/*""); assertAdminsAreOwnersAndDevsAreNot(); }",169f4370c8cd7efd8934f485d56ebc877860061b,testDenyOwnerProject(),191837,101,127
24622,gerrit-common_src_test_java_com_google_gerrit_common_data_ParametrizedStringTest.java,8.0,"public void testReplaceToLowerCase() { final com.google.gerrit.common.data.ParamertizedString p = new com.google.gerrit.common.data.ParamertizedString(""${a.toLowerCase}""); assertEquals(1, p.getParameterNames().size()); assertTrue(p.getParameterNames().contains(""a"")); final java.util.Map<java.lang.String, java.lang.String> a = new java.util.HashMap<java.lang.String, java.lang.String>(); a.put(""a"", ""foo""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); a.put(""a"", ""FOO""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); }",63ec6b3df463e0cbd92f0273988a0f5937e1a21a,"public void testReplaceToLowerCase() { final com.google.gerrit.common.data.ParametrizedString p = new com.google.gerrit.common.data.ParametrizedString(""${a.toLowerCase}""); assertEquals(1, p.getParameterNames().size()); assertTrue(p.getParameterNames().contains(""a"")); final java.util.Map<java.lang.String, java.lang.String> a = new java.util.HashMap<java.lang.String, java.lang.String>(); a.put(""a"", ""foo""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); a.put(""a"", ""FOO""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); }",5970872c69255244a1d9afda8ea85eaa7ce90efc,testReplaceToLowerCase(),testReplaceToLowerCase(),3,8,"public void testReplaceToLowerCase() { final com.google.gerrit.common.data.ParameterizedString p = new com.google.gerrit.common.data.ParameterizedString(""${a.toLowerCase}""); assertEquals(1, p.getParameterNames().size()); assertTrue(p.getParameterNames().contains(""a"")); final java.util.Map<java.lang.String, java.lang.String> a = new java.util.HashMap<java.lang.String, java.lang.String>(); a.put(""a"", ""foo""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); a.put(""a"", ""FOO""); assertNotNull(p.bind(a)); assertEquals(1, p.bind(a).length); assertEquals(""foo"", p.bind(a)[0]); assertEquals(""foo"", p.replace(a)); }",36b1bb555c7c6351915be512a76cf55b34b1d4ab,testReplaceToLowerCase(),122124,204,202
24116,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,6.0,"private static com.google.gerrit.client.ui.Screen mine(final java.lang.String token) { if (com.google.gerrit.client.MINE.equals(token)) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { return new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } else { final com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen(null); r.setRequiresSignIn(true); return r; } } else if (""mine,starred"".equals(token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""is:starred""); } else if (""mine,drafts"".equals(token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""has:draft""); } else { java.lang.String p = ""mine,watched,""; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(""is:watched status:open"", com.google.gerrit.client.Dispatcher.skip(p, token)); } return new com.google.gerrit.client.NotFoundScreen(); } }",f741b6a1e108701cb1f874e76bf8310c4d0f6dbb,private static com.google.gerrit.client.ui.Screen mine(final java.lang.String token) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { return new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } else { final com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen(null); r.setRequiresSignIn(true); return r; } },a73bfe79d86f4f83ca456ee394b05d81480a3dfa,mine(java.lang.String),mine(java.lang.String),2,9,private static com.google.gerrit.client.ui.Screen mine(final java.lang.String token) { if (com.google.gerrit.client.Gerrit.isSignedIn()) { return new com.google.gerrit.client.changes.AccountDashboardScreen(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } else { com.google.gerrit.client.ui.Screen r = new com.google.gerrit.client.changes.AccountDashboardScreen(null); r.setRequiresSignIn(true); return r; } },157b67d275288222eb1c405a3b0e67d86bbc5f92,mine(java.lang.String),101930,131,130
112223,gerrit-server_src_main_java_com_google_gerrit_server_CommentsUtil.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getPublished(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return java.util.Optional.ofNullable(db.patchComments().get(PatchLineComment.Key.from(notes.getChangeId(), key))).map(( plc) -> plc.asComment(serverId)); } return publishedByChange(db, notes).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",799103fca7096f28ec6ea37a27dda080291a3e6a,,"getPublished(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.Comment$Key)",2,25,"public java.util.Optional<com.google.gerrit.reviewdb.client.Comment> getPublished(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.Comment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return getReviewDb(db, notes, key); } return publishedByChange(db, notes).stream().filter(( c) -> key.equals(c.key)).findFirst(); }",e74021413939f654ca86e481b3487ca3ec615ae6,"getPublished(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.Comment$Key)",163281,177,139
33891,gerrit-server_src_main_java_com_google_gerrit_server_util_GuiceRequestScopePropagator.java,,,,"@java.lang.Override public <T> java.util.concurrent.Callable<T> wrap(java.util.concurrent.Callable<T> callable) { java.util.Map<com.google.inject.Key<?>, java.lang.Object> seedMap = com.google.common.collect.Maps.newHashMap(); java.lang.String url = urlProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.lang.String.class), com.google.gerrit.server.config.CanonicalWebUrl.class), com.google.inject.util.Providers.of(url)); seedMap.put(com.google.inject.Key.get(java.lang.String.class, com.google.gerrit.server.config.CanonicalWebUrl.class), url); java.net.SocketAddress addr = socketAddressProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.net.SocketAddress.class), com.google.gerrit.server.RemotePeer.class), com.google.inject.util.Providers.of(addr)); seedMap.put(com.google.inject.Key.get(java.net.SocketAddress.class, com.google.gerrit.server.RemotePeer.class), addr); com.google.gerrit.server.CurrentUser user = currentUserProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(com.google.gerrit.server.CurrentUser.class)), com.google.inject.util.Providers.of(user)); seedMap.put(com.google.inject.Key.get(com.google.gerrit.server.CurrentUser.class), user); return com.google.inject.servlet.ServletScopes.continueRequest(callable, seedMap); }",e0a066c031413fd56aff581e20fcae6507ab680c,,wrap(java.util.concurrent.Callable),7,0,"@java.lang.Override protected <T> java.util.concurrent.Callable<T> wrapImpl(java.util.concurrent.Callable<T> callable) { java.util.Map<com.google.inject.Key<?>, java.lang.Object> seedMap = com.google.common.collect.Maps.newHashMap(); java.lang.String url = urlProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.lang.String.class), com.google.gerrit.server.config.CanonicalWebUrl.class), com.google.inject.util.Providers.of(url)); seedMap.put(com.google.inject.Key.get(java.lang.String.class, com.google.gerrit.server.config.CanonicalWebUrl.class), url); java.net.SocketAddress peer = remotePeerProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(java.net.SocketAddress.class), com.google.gerrit.server.RemotePeer.class), com.google.inject.util.Providers.of(peer)); seedMap.put(com.google.inject.Key.get(java.net.SocketAddress.class, com.google.gerrit.server.RemotePeer.class), peer); com.google.gerrit.server.CurrentUser user = currentUserProvider.get(); seedMap.put(com.google.inject.Key.get(typeOfProvider(com.google.gerrit.server.CurrentUser.class)), com.google.inject.util.Providers.of(user)); seedMap.put(com.google.inject.Key.get(com.google.gerrit.server.CurrentUser.class), user); return com.google.inject.servlet.ServletScopes.continueRequest(callable, seedMap); }",3a7060ce6d26f81683793a63190ea4fb2b49f98b,wrapImpl(java.util.concurrent.Callable),132981,404,405
119050,src_main_java_com_googlesource_gerrit_plugins_supermanifest_JiriManifest.java,,,,public com.googlesource.gerrit.plugins.supermanifest.Import[] getImports() { return imports; },dbd8ef16988fdd579e2991488126b1c1e95c13f9,,getImports(),7,5,public com.googlesource.gerrit.plugins.supermanifest.JiriManifest.Import[] getImports() { return imports; },d6ef09fbb23c2689e5631aa4d31ce6bae13c079c,getImports(),170033,25,30
72338,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookApiListener.java,,,,"@java.lang.Override public void onChangeRestored(com.google.gerrit.extensions.events.ChangeRestoredListener.Event ev) { try { ch.doChangeRestoredHook(getChange(ev.getChange()), getAccount(ev.getRestorer()), getPatchSet(ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }",40f3b523b6aef2e286f365eb54ffa605740bb636,,onChangeRestored(com.google.gerrit.extensions.events.ChangeRestoredListener$Event),43,17,"@java.lang.Override public void onChangeRestored(com.google.gerrit.extensions.events.ChangeRestoredListener.Event ev) { try { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(ev.getChange()); hooks.doChangeRestoredHook(notes.getChange(), getAccount(ev.getRestorer()), getPatchSet(notes, ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error((""ChangeRestored hook failed to run "" + (ev.getChange()._number)), e); } }",edf6d92e525bcae4c42ec736468a2d1c2c3314fc,onChangeRestored(com.google.gerrit.extensions.events.ChangeRestoredListener$Event),204368,100,162
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_CommentApi.java,1.0,"public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, ""drafts"").id(draftId).put(content, cb); }",0a3952ac7078df3d4353be183ba3ba8c6c671f4f,"public static void updateDraft(com.google.gerrit.reviewdb.client.PatchSet.Id id, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(id, project, ""drafts"").id(draftId).put(content, cb); }",2ca93e5b891ccbca4aa51235212518b6a957551b,"updateDraft(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,com.google.gerrit.client.changes.CommentInfo,com.google.gwt.user.client.rpc.AsyncCallback)","updateDraft(com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,java.lang.String,com.google.gerrit.client.changes.CommentInfo,com.google.gwt.user.client.rpc.AsyncCallback)",7,3,"public static void updateDraft(@com.google.gerrit.common.Nullable java.lang.String project, com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String draftId, com.google.gerrit.client.changes.CommentInfo content, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.CommentInfo> cb) { CommentApi.revision(project, id, ""drafts"").id(draftId).put(content, cb); }",9e353d460aede85c70d234710c9a49ebcb4d4a7b,"updateDraft(java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id,java.lang.String,com.google.gerrit.client.changes.CommentInfo,com.google.gwt.user.client.rpc.AsyncCallback)",210600,125,124
75967,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,48.0,void setShowTabs(boolean show) { cm.extras().showTabs(show); },b3378934a831bb1a39ed58e327e2469a2a68f598,void setShowTabs(boolean show) { cmOrig.extras().showTabs(show); cmEdit.extras().showTabs(show); },8edf7ad7d93c454b759230d9707406109beebbc5,setShowTabs(boolean),setShowTabs(boolean),43,59,void setShowTabs(boolean show) { cmBase.extras().showTabs(show); cmEdit.extras().showTabs(show); },a67171cad0d5796943477554de99e140f7896057,setShowTabs(boolean),191641,30,30
44015,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,18.0,"public void execute() { final java.lang.String to = com.google.gwt.user.client.History.getToken(); new com.google.gerrit.client.auth.openid.OpenIdSignInDialog(com.google.gerrit.common.auth.SignInMode.REGISTER, to, null).center(); }",5e0df751044b4beedd70e86b9ecbb1b3305933df,public void execute() { com.google.gerrit.client.Gerrit.doSignIn(PageLinks.REGISTER); },a8d3e62c91d1f73ad7ec7bf32e148c485dc5533c,execute(),execute(),2,18,"public void execute() { java.lang.String t = com.google.gwt.user.client.History.getToken(); if (t == null) { t = """"; } com.google.gerrit.client.Gerrit.doSignIn(((com.google.gerrit.common.PageLinks.REGISTER) + t)); }",8e44e48cc32b47c9a343669a9fe09ee97034d881,execute(),117174,27,74
63196,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_RebaseDialog.java,,,,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { boolean checked = ((com.google.gwt.user.client.ui.CheckBox) (event.getSource())).getValue(); if (checked) { final com.google.gwt.user.client.ui.FlowPanel mwrap = ((com.google.gwt.user.client.ui.FlowPanel) (cb.getParent())); cb.setVisible(false); com.google.gerrit.client.changes.ChangeList.next(((((""project:"" + project) + "" AND branch:"") + branch) + "" AND NOT age:90d""), 0, 1000, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { changes = com.google.gerrit.client.rpc.Natives.asList(result); base.setVisible(true); } }); } }",fef0d52487336fbe38d43cd77995191e944decf7,,onClick(com.google.gwt.event.dom.client.ClickEvent),15,1,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { boolean checked = ((com.google.gwt.user.client.ui.CheckBox) (event.getSource())).getValue(); if (checked) { com.google.gerrit.client.changes.ChangeList.next(((((""project:"" + project) + "" AND branch:"") + branch) + "" AND is:open NOT age:90d""), 0, 1000, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { changes = com.google.gerrit.client.rpc.Natives.asList(result); base.setEnabled(true); } }); } else { base.setEnabled(false); } }",f09e4c9fd6581f9ea20ba4f47a6001bd78f4f11b,onClick(com.google.gwt.event.dom.client.ClickEvent),113253,239,205
74866,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,8.0,"private com.google.gerrit.reviewdb.client.ChangeMessage message(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.git.strategy.CommitMergeStatus s) { java.lang.String txt = s.getMessage(); if (s == (CommitMergeStatus.CLEAN_MERGE)) { return message(ctx, commit.getPatchsetId(), (txt + (getByAccountName()))); } else if ((s == (CommitMergeStatus.CLEAN_REBASE)) || (s == (CommitMergeStatus.CLEAN_PICK))) { return message(ctx, commit.getPatchsetId(), (((txt + "" as "") + (commit.name())) + (getByAccountName()))); } else if (s == (CommitMergeStatus.SKIPPED_IDENTICAL_TREE)) { return message(ctx, commit.getPatchsetId(), txt); } else if (s == (CommitMergeStatus.ALREADY_MERGED)) { switch (args.submitType) { case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_MERGE); case CHERRY_PICK : return message(ctx, commit, CommitMergeStatus.CLEAN_PICK); case REBASE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_REBASE); default : return message(ctx, commit, null); } } else { throw new java.lang.IllegalStateException(((((""unexpected status "" + s) + "" for change "") + (commit.change().getId())) + ""; expected to previously fail fast"")); } }",4fbd9f25497ab57e33375a006f2cfeccf9bb5f1e,"private com.google.gerrit.reviewdb.client.ChangeMessage message(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.git.strategy.CommitMergeStatus s) { checkNotNull(s, ""CommitMergeStatus s may not be null""); java.lang.String txt = s.getMessage(); if (s == (CommitMergeStatus.CLEAN_MERGE)) { return message(ctx, commit.getPatchsetId(), (txt + (getByAccountName()))); } else if ((s == (CommitMergeStatus.CLEAN_REBASE)) || (s == (CommitMergeStatus.CLEAN_PICK))) { return message(ctx, commit.getPatchsetId(), (((txt + "" as "") + (commit.name())) + (getByAccountName()))); } else if (s == (CommitMergeStatus.SKIPPED_IDENTICAL_TREE)) { return message(ctx, commit.getPatchsetId(), txt); } else if (s == (CommitMergeStatus.ALREADY_MERGED)) { switch (args.submitType) { case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_MERGE); case CHERRY_PICK : return message(ctx, commit, CommitMergeStatus.CLEAN_PICK); case REBASE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_REBASE); default : throw new java.lang.IllegalStateException((((""unexpected submit type "" + (args.submitType.toString())) + "" for change "") + (commit.change().getId()))); } } else { throw new java.lang.IllegalStateException(((((""unexpected status "" + s) + "" for change "") + (commit.change().getId())) + ""; expected to previously fail fast"")); } }",13999c789acd9e9daa6504de31940ebe04e54224,"message(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.strategy.CommitMergeStatus)","message(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.strategy.CommitMergeStatus)",5,8,"private com.google.gerrit.reviewdb.client.ChangeMessage message(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.git.CodeReviewCommit commit, com.google.gerrit.server.git.strategy.CommitMergeStatus s) { checkNotNull(s, ""CommitMergeStatus may not be null""); java.lang.String txt = s.getMessage(); if (s == (CommitMergeStatus.CLEAN_MERGE)) { return message(ctx, commit.getPatchsetId(), (txt + (getByAccountName()))); } else if ((s == (CommitMergeStatus.CLEAN_REBASE)) || (s == (CommitMergeStatus.CLEAN_PICK))) { return message(ctx, commit.getPatchsetId(), (((txt + "" as "") + (commit.name())) + (getByAccountName()))); } else if (s == (CommitMergeStatus.SKIPPED_IDENTICAL_TREE)) { return message(ctx, commit.getPatchsetId(), txt); } else if (s == (CommitMergeStatus.ALREADY_MERGED)) { switch (args.submitType) { case FAST_FORWARD_ONLY : case MERGE_ALWAYS : case MERGE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_MERGE); case CHERRY_PICK : return message(ctx, commit, CommitMergeStatus.CLEAN_PICK); case REBASE_IF_NECESSARY : return message(ctx, commit, CommitMergeStatus.CLEAN_REBASE); default : throw new java.lang.IllegalStateException((((""unexpected submit type "" + (args.submitType.toString())) + "" for change "") + (commit.change().getId()))); } } else { throw new java.lang.IllegalStateException(((((""unexpected status "" + s) + "" for change "") + (commit.change().getId())) + ""; expected to previously fail fast"")); } }",643c85ce872f42db8a2ab4e8f13e58473b003565,"message(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.strategy.CommitMergeStatus)",6621,438,436
76474,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AccountCreator.java,6.0,"public com.google.gerrit.acceptance.TestAccount admin() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.UnsupportedEncodingException { return create(""admin"", ""admin@example.com"", ""Administrator"", ""Administrators""); }",b377781908f5538fee35e13632d7cde004455f03,"public com.google.gerrit.acceptance.TestAccount admin() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { return create(""admin"", ""admin@example.com"", ""Administrator"", ""Administrators""); }",4e461ef4cc8a7c6902e6c7590106f6f7de198cad,admin(),admin(),9,5,"public com.google.gerrit.acceptance.TestAccount admin() throws java.lang.Exception { return create(""admin"", ""admin@example.com"", ""Administrator"", ""Administrators""); }",b25170af046ffa75407223b7ef7a65d462c75844,admin(),84797,92,42
113893,src_main_java_com_googlesource_gerrit_plugins_findowners_Cache.java,7.0,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(dbKey, repository, project, branch, changeData.currentFilePaths()); }",d68dd83715bd5ff2ea4705a54a0d0054ebea46b1,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.AccountCache accountCache, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(accountByEmailCache, accountCache, dbKey, repository, project, branch, changeData.currentFilePaths()); }",0d2c4ad8df003e300d072da6108e269f03dbeaa3,"get(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.query.change.ChangeData,int)","get(com.google.gerrit.server.account.AccountByEmailCache,com.google.gerrit.server.account.AccountCache,org.eclipse.jgit.lib.Repository,com.google.gerrit.server.query.change.ChangeData,int)",4,5,"com.googlesource.gerrit.plugins.findowners.OwnersDb get(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts, org.eclipse.jgit.lib.Repository repository, com.google.gerrit.server.query.change.ChangeData changeData, int patchset) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); java.lang.String branch = changeData.change().getDest().get(); java.lang.String dbKey = com.googlesource.gerrit.plugins.findowners.Cache.makeKey(changeData.getId().get(), patchset, branch); return get(accountCache, accounts, dbKey, repository, project, branch, changeData.currentFilePaths()); }",bb6bd788b05299699822ed62f136e587f171629c,"get(com.google.gerrit.server.account.AccountCache,com.google.gerrit.server.account.Accounts,org.eclipse.jgit.lib.Repository,com.google.gerrit.server.query.change.ChangeData,int)",41373,212,203
49820,src_main_java_com_googlesource_gerrit_plugins_replication_AutoReloadConfigDecorator.java,,,,@java.lang.Override public synchronized void startup(com.google.gerrit.server.git.WorkQueue workQueue) { this.workQueue = workQueue; currentConfig.startup(workQueue); },6070f166167de91bddd082582ef347e83cea0ac3,,startup(com.google.gerrit.server.git.WorkQueue),15,4,@java.lang.Override public synchronized void startup(com.google.gerrit.server.git.WorkQueue workQueue) { currentConfig.startup(workQueue); },b26f4599b502d80ee0e160949c221c1040c5dd05,startup(com.google.gerrit.server.git.WorkQueue),13262,44,36
106454,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_DefaultActions.java,8.0,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } }",dc19d55ac925f927aa491a59141de2b3296b1a67,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (result == null) { com.google.gerrit.client.Gerrit.display(target); } if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } }",70355c799ec112c105877beb49cd0637bc716b14,onSuccess(com.google.gwt.core.client.JavaScriptObject),onSuccess(com.google.gwt.core.client.JavaScriptObject),2,8,"@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (result == null) { com.google.gerrit.client.Gerrit.display(target); return; } if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } }",75d01f7bb686093a84648cc8ca9b578188813b05,onSuccess(com.google.gwt.core.client.JavaScriptObject),66853,204,206
54044,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,4.0,"@org.junit.Test public void noCopyMinScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); review(r, (-2)); assertApproval(r, (-2)); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",ff6a2928b40d602c99cb97cd9ea271ae815311e6,"@org.junit.Test public void noCopyMinScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).reject(); assertApproval(r, (-2)); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",4db9fde373234055a77ec7f4777f4e184243211b,noCopyMinScoreOnRework(),noCopyMinScoreOnRework(),3,4,"@org.junit.Test public void noCopyMinScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).review(com.google.gerrit.extensions.api.changes.ReviewInput.reject()); assertApproval(r, (-2)); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 0); }",5e86ed9604269cd0b3655c4cfb16e7c5e6420ae2,noCopyMinScoreOnRework(),39646,177,197
112817,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,20.0,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",de594345004192d9ea2272f24519dc2cb91bf435,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assertWithMessage(java.lang.String.format(""%s not equal %s"", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",afc1010017ff12df3d981e8618c938393c88be9f,"assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)","assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)",2,20,"protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.lang.Exception { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assertThat(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }",4af031314ab4500a5bf54ca8213bbfb5f0ec8269,"assertRebase(org.eclipse.jgit.junit.TestRepository,boolean)",170520,184,155
72574,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkImplicitMerges(java.util.Set<org.eclipse.jgit.revwalk.RevCommit> mergedParents) throws java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (!(mergedParents.isEmpty())) { org.eclipse.jgit.lib.Ref targetRef = allRefs.get(magicBranch.ctl.getRefName()); if (targetRef != null) { org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); boolean containsImplicitMerges = true; org.eclipse.jgit.revwalk.RevCommit tip = rw.parseCommit(targetRef.getObjectId()); for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { containsImplicitMerges &= !(rw.isMergedInto(p, tip)); } if (containsImplicitMerges) { rw.reset(); for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { rw.markStart(p); } rw.markUninteresting(tip); org.eclipse.jgit.revwalk.RevCommit c; while ((c = rw.next()) != null) { rw.parseBody(c); messages.add(new com.google.gerrit.server.git.validators.CommitValidationMessage((((""WARNING: Implicit Merge of "" + (c.abbreviate(7).name())) + "" "") + (c.getShortMessage())), false)); } } } } }",e2e77f1408c9bbfb21f3eed35d7c261d3579d24b,,checkImplicitMerges(java.util.Set),6,1,"private void rejectImplicitMerges(java.util.Set<org.eclipse.jgit.revwalk.RevCommit> mergedParents) throws java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { if (!(mergedParents.isEmpty())) { org.eclipse.jgit.lib.Ref targetRef = allRefs.get(magicBranch.ctl.getRefName()); if (targetRef != null) { org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit tip = rw.parseCommit(targetRef.getObjectId()); boolean containsImplicitMerges = true; for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { containsImplicitMerges &= !(rw.isMergedInto(p, tip)); } if (containsImplicitMerges) { rw.reset(); for (org.eclipse.jgit.revwalk.RevCommit p : mergedParents) { rw.markStart(p); } rw.markUninteresting(tip); org.eclipse.jgit.revwalk.RevCommit c; while ((c = rw.next()) != null) { rw.parseBody(c); messages.add(new com.google.gerrit.server.git.validators.CommitValidationMessage((((""ERROR: Implicit Merge of "" + (c.abbreviate(7).name())) + "" "") + (c.getShortMessage())), false)); } reject(magicBranch.cmd, ""implicit merges detected""); } } } }",4f7a4a7d777f2e0dbc3c0af295cab346e75056ac,rejectImplicitMerges(java.util.Set),184206,343,356
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,10.0,"private com.google.gerrit.server.git.MergeTip preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy strategy, java.util.List<com.google.gerrit.server.query.change.ChangeData> submitted, com.google.gerrit.server.git.CodeReviewCommit branchTip) throws com.google.gerrit.server.git.MergeException, com.google.gwtorm.server.OrmException { logDebug(""Running submit strategy {} for {} commits {}"", strategy.getClass().getSimpleName(), submitted.size(), submitted); java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge = new java.util.ArrayList(submitted.size()); for (com.google.gerrit.server.query.change.ChangeData cd : submitted) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(cd.change().getId()); checkState((commit != null), ""commit for %s not found by validateChangeList"", cd.change().getId()); toMerge.add(commit); } com.google.gerrit.server.git.MergeTip mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); logDebug(""Produced {} new commits"", strategy.getNewCommits().size()); commits.putAll(strategy.getNewCommits()); return mergeTip; }",a6a7b916ee86d689ce8110e628ae85414ee4d616,"private com.google.gerrit.server.git.MergeTip preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy strategy, java.util.List<com.google.gerrit.server.query.change.ChangeData> submitted, com.google.gerrit.server.git.CodeReviewCommit branchTip) throws com.google.gerrit.server.git.IntegrateException, com.google.gwtorm.server.OrmException { logDebug(""Running submit strategy {} for {} commits {}"", strategy.getClass().getSimpleName(), submitted.size(), submitted); java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge = new java.util.ArrayList(submitted.size()); for (com.google.gerrit.server.query.change.ChangeData cd : submitted) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(cd.change().getId()); checkState((commit != null), ""commit for %s not found by validateChangeList"", cd.change().getId()); toMerge.add(commit); } com.google.gerrit.server.git.MergeTip mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); logDebug(""Produced {} new commits"", strategy.getNewCommits().size()); commits.putAll(strategy.getNewCommits()); return mergeTip; }",57e94ce29f3cc7f0f94af295791e7224a16f2235,"preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy,java.util.List,com.google.gerrit.server.git.CodeReviewCommit)","preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy,java.util.List,com.google.gerrit.server.git.CodeReviewCommit)",2,10,"private com.google.gerrit.server.git.MergeTip preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy strategy, java.util.List<com.google.gerrit.server.query.change.ChangeData> submitted, com.google.gerrit.server.git.CodeReviewCommit branchTip) throws com.google.gerrit.server.git.IntegrationException, com.google.gwtorm.server.OrmException { logDebug(""Running submit strategy {} for {} commits {}"", strategy.getClass().getSimpleName(), submitted.size(), submitted); java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge = new java.util.ArrayList(submitted.size()); for (com.google.gerrit.server.query.change.ChangeData cd : submitted) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(cd.change().getId()); checkState((commit != null), ""commit for %s not found by validateChangeList"", cd.change().getId()); toMerge.add(commit); } com.google.gerrit.server.git.MergeTip mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); logDebug(""Produced {} new commits"", strategy.getNewCommits().size()); commits.putAll(strategy.getNewCommits()); return mergeTip; }",4eb1597b9e7d237562aad19d1d03f425c037bc8e,"preMerge(com.google.gerrit.server.git.strategy.SubmitStrategy,java.util.List,com.google.gerrit.server.git.CodeReviewCommit)",172493,313,312
50852,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,17.0,"private void initProjectActions(com.google.gerrit.client.projects.ConfigInfo info) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = info.actions(); if ((actions == null) || (actions.isEmpty())) { return; } actions.copyKeysIntoChildren(""id""); actionsGrid.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectCommands())); com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().projectActions()); actionsPanel.setVisible(true); actionsGrid.add(Util.C.headingCommands(), actionsPanel); for (java.lang.String id : actions.keySet()) { actionsPanel.add(new com.google.gerrit.client.actions.ActionButton(getProjectKey(), actions.get(id))); } }",c45df3309dc55675e72a8a220c4c8820be2c030d,"private void initProjectActions(com.google.gerrit.client.projects.ConfigInfo info) { actionsGrid.clear(); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = info.actions(); if ((actions == null) || (actions.isEmpty())) { return; } actions.copyKeysIntoChildren(""id""); actionsGrid.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectCommands())); com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().projectActions()); actionsPanel.setVisible(true); actionsGrid.add(Util.C.headingCommands(), actionsPanel); for (java.lang.String id : actions.keySet()) { actionsPanel.add(new com.google.gerrit.client.actions.ActionButton(getProjectKey(), actions.get(id))); } }",8e15db4355cf00c507de80fd706841241b131d48,initProjectActions(com.google.gerrit.client.projects.ConfigInfo),initProjectActions(com.google.gerrit.client.projects.ConfigInfo),2,17,"private void initProjectActions(com.google.gerrit.client.projects.ConfigInfo info) { actionsGrid.clear(true); actionsGrid.removeAllRows(); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = info.actions(); if ((actions == null) || (actions.isEmpty())) { return; } actions.copyKeysIntoChildren(""id""); actionsGrid.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectCommands())); com.google.gwt.user.client.ui.FlowPanel actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().projectActions()); actionsPanel.setVisible(true); actionsGrid.add(Util.C.headingCommands(), actionsPanel); for (java.lang.String id : actions.keySet()) { actionsPanel.add(new com.google.gerrit.client.actions.ActionButton(getProjectKey(), actions.get(id))); } }",a64d3be25414c4d7f2820fda6c2635f3719cefcd,initProjectActions(com.google.gerrit.client.projects.ConfigInfo),141287,233,241
100412,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraItsFacade.java,1.0,"private void doPerformAction(final java.lang.String issueKey, final java.lang.String actionName) throws java.io.IOException { log.debug((((""Trying to perform action: "" + actionName) + "" on issue "") + issueKey)); boolean ret = client().doTransition(issueKey, actionName); if (ret) { log.debug((((""Action "" + actionName) + "" successful on Issue "") + issueKey)); } else { log.debug(""Action {} on Issue {} not possible"", actionName, issueKey); } }",2c475b4aa51475fa34fa892647bd664db53e7f92,"private void doPerformAction(final java.lang.String issueKey, final java.lang.String actionName) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException, com.googlesource.gerrit.plugins.its.jira.JiraRestException { log.debug((((""Trying to perform action: "" + actionName) + "" on issue "") + issueKey)); boolean ret = client().doTransition(issueKey, actionName); if (ret) { log.debug((((""Action "" + actionName) + "" successful on Issue "") + issueKey)); } else { log.debug(""Action {} on Issue {} not possible"", actionName, issueKey); } }",707ca324f1f724a543b625e98cdf769f4c4b86e6,"doPerformAction(java.lang.String,java.lang.String)","doPerformAction(java.lang.String,java.lang.String)",6,1,"private void doPerformAction(final java.lang.String issueKey, final java.lang.String actionName) throws com.googlesource.gerrit.plugins.its.base.its.InvalidTransitionException, java.io.IOException { log.debug((((""Trying to perform action: "" + actionName) + "" on issue "") + issueKey)); boolean ret = client().doTransition(issueKey, actionName); if (ret) { log.debug((((""Action "" + actionName) + "" successful on Issue "") + issueKey)); } else { log.debug(""Action {} on Issue {} not possible"", actionName, issueKey); } }",1ea8d353466aafde4770e4c9f38f412c752d879c,"doPerformAction(java.lang.String,java.lang.String)",121620,152,140
30726,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_RetrieveParentCandidatesHandler.java,,,,@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.Project> call() throws java.lang.Exception { return retrieveParentCandidates.getParentCandidates(); },b87af9fff68371a880a4b4e8e1a147182da965eb,,call(),9,0,@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.Project> call() throws java.lang.Exception { return suggestParentCandidates.getProjects(); },fc33f2c3fe95b206aa8abe3fcae607e73407a8d6,call(),207388,44,44
158491,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,2.0,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",1302a4b8ee8b0449638df75ad5fde70323eba784,"@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { try { return reindexIfStaleAsync(id).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { com.google.gerrit.server.index.account.AccountIndexerImpl.log.warn(""reindex of possibly stale account {} failed"", id.get()); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }",a01b5d9c42e1a5440cdce4ed5cf702c5177b6f04,reindexIfStale(com.google.gerrit.reviewdb.client.Account$Id),reindexIfStale(com.google.gerrit.reviewdb.client.Account$Id),7,2,@java.lang.Override public boolean reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) throws java.io.IOException { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; },a9a166918e12100c1efe801b0b0237307127369c,reindexIfStale(com.google.gerrit.reviewdb.client.Account$Id),147226,144,62
72793,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocServlet.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getPath(javax.servlet.http.HttpServletRequest req) { java.lang.String path = req.getRequestURI(); java.lang.String prefix = ""/plugins/"" + (pluginName); if (path.startsWith(prefix)) { path = path.substring(prefix.length()); } return path; }",ada84810ffe4ac372d625bb5315dd125b7171822,,getPath(javax.servlet.http.HttpServletRequest),2,1,"private java.lang.String getEncodedPath(javax.servlet.http.HttpServletRequest req) { java.lang.String path = req.getRequestURI(); java.lang.String prefix = ""/plugins/"" + (pluginName); if (path.startsWith(prefix)) { path = path.substring(prefix.length()); } return path; }",0edbfa72dd31e9885767f4dbbe6ec7a96861b9da,getEncodedPath(javax.servlet.http.HttpServletRequest),44867,70,71
71220,gerrit-gpg_src_test_java_com_google_gerrit_gpg_GerritPublicKeyCheckerTest.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void checkTrustChainWithoutSpecifyingExpectedKey() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey keyA = add(keyA(), user); com.google.gerrit.gpg.testutil.TestKey keyB = add(keyB(), addUser(""userB"")); com.google.gerrit.gpg.testutil.TestKey keyC = add(keyC(), addUser(""userC"")); com.google.gerrit.gpg.testutil.TestKey keyD = add(keyD(), addUser(""userD"")); com.google.gerrit.gpg.testutil.TestKey keyE = add(keyE(), addUser(""userE"")); com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create(); assertNoProblems(checker.check(keyA.getPublicKey(), store)); assertProblems(checker.check(keyB.getPublicKey(), store), ""Key is expired""); assertNoProblems(checker.check(keyC.getPublicKey(), store)); assertNoProblems(checker.check(keyD.getPublicKey(), store)); assertProblems(checker.check(keyE.getPublicKey(), store), ""Key is expired"", ""No path to a trusted key""); }",fc4fc0fe7d817620a32ac26f7029ebcb3fe99725,,checkTrustChainWithoutSpecifyingExpectedKey(),10,3,"@org.junit.Test public void checkTrustChainUsingCheckerWithoutExpectedKey() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey keyA = add(keyA(), user); com.google.gerrit.gpg.testutil.TestKey keyB = add(keyB(), addUser(""userB"")); com.google.gerrit.gpg.testutil.TestKey keyC = add(keyC(), addUser(""userC"")); com.google.gerrit.gpg.testutil.TestKey keyD = add(keyD(), addUser(""userD"")); com.google.gerrit.gpg.testutil.TestKey keyE = add(keyE(), addUser(""userE"")); com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create(); assertNoProblems(checker.check(keyA.getPublicKey(), store)); assertProblems(checker.check(keyB.getPublicKey(), store), Status.BAD, ""Key is expired""); assertNoProblems(checker.check(keyC.getPublicKey(), store)); assertNoProblems(checker.check(keyD.getPublicKey(), store)); assertProblems(checker.check(keyE.getPublicKey(), store), Status.BAD, ""Key is expired"", ""No path to a trusted key""); }",79ed8bac39c25c5df3593bedf6cd4ce87cca230f,checkTrustChainUsingCheckerWithoutExpectedKey(),107246,284,294
94350,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_ValidatorConfig.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canOverrideUploadValidation() { com.google.gerrit.server.account.CapabilityControl ctl = userProvider.get().getCapabilities(); return ctl.canPerform((((pluginName) + ""-"") + (com.googlesource.gerrit.plugins.uploadvalidator.OverrideUploadValidation.OVERRIDE_UPLOAD_VALIDATION))); }",28e5d953c3001d88355cb29ef85fe8b979ce2026,,canOverrideUploadValidation(),23,2,"private boolean canSkipValidation(com.google.gerrit.server.config.PluginConfig config, java.lang.String validatorOp) { return matchCriteria(config, ""skipValidation"", validatorOp, false); }",4572e7b0fd8350572b495ac6fd9a7c38fae2be5d,"canSkipValidation(com.google.gerrit.server.config.PluginConfig,java.lang.String)",45800,72,46
38722,src_main_java_com_googlesource_gerrit_plugins_replication_OnStartStop.java,0.0,"@java.lang.Override public void start() { queue.start(); if (((srvInfo.getState()) == (ServerInformation.State.STARTUP)) && (queue.replicateAllOnPluginStart)) { pushAllFuture.set(pushAll.create(null).schedule(30, java.util.concurrent.TimeUnit.SECONDS)); } }",4d4871ba76fd44d22f25121570bd3b5f6514f1cb,"@java.lang.Override public void start() { queue.start(); if (((srvInfo.getState()) == (ServerInformation.State.STARTUP)) && (queue.replicateAllOnPluginStart)) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.START_UP); pushAllFuture.set(pushAll.create(null, state).schedule(30, java.util.concurrent.TimeUnit.SECONDS)); } }",c4a0c2bab445c5adfae2422d2e25de899e9877b4,start(),start(),9,0,"@java.lang.Override public void start() { queue.start(); if (((srvInfo.getState()) == (ServerInformation.State.STARTUP)) && (queue.replicateAllOnPluginStart)) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.STARTUP); pushAllFuture.set(pushAll.create(null, state).schedule(30, java.util.concurrent.TimeUnit.SECONDS)); } }",acdf4c9fb61db75a3071d26ec35bf3cce8886e00,start(),206216,112,111
56097,gerrit-server_src_main_java_com_google_gerrit_server_plugins_JarScanner.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public <T> java.util.Enumeration<T> resources(java.lang.Class<? extends T> resourceClass) { return ((java.util.Enumeration<T>) (isJarResource(resourceClass) ? ((java.util.Enumeration<T>) (jarFile.entries())) : java.util.Collections.emptyEnumeration())); }",adad78cb19a6360165847208654eb099789876fe,,resources(java.lang.Class),21,9,"private com.google.gerrit.server.plugins.PluginEntry resourceOf(java.util.jar.JarEntry jarEntry) throws java.io.IOException { return new com.google.gerrit.server.plugins.PluginEntry(jarEntry.getName(), jarEntry.getTime(), jarEntry.getSize(), attributesOf(jarEntry)); }",fb9edd99ebde75d410f1b858ff47ff2854a4e3a9,resourceOf(java.util.jar.JarEntry),63426,92,72
94917,gerrit-server_src_main_java_com_google_gerrit_server_mail_MailFilter.java,,,,boolean shouldDiscardMessage(com.google.gerrit.server.mail.receive.MailMessage message);,168e3804ecf22863dea5eef4b28012281b202092,,shouldDiscardMessage(com.google.gerrit.server.mail.receive.MailMessage),4,0,boolean shouldProcessMessage(com.google.gerrit.server.mail.receive.MailMessage message);,2e3d78125d561a034e639953aa9973bb0de65399,shouldProcessMessage(com.google.gerrit.server.mail.receive.MailMessage),55724,22,22
139730,javatests_com_google_gerrit_acceptance_rest_project_CreateBranchIT.java,12.0,@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(); assertCreateFails(com.google.gerrit.extensions.restapi.ResourceConflictException.class); },385d9cd71e0fac8120de96a1193ba340787d3bc7,"@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(branch); assertCreateFails(branch, com.google.gerrit.extensions.restapi.ResourceConflictException.class); }",139874d23bafa7b96b8e2356ac8b2749f82814ee,branchAlreadyExists_Conflict(),branchAlreadyExists_Conflict(),3,10,"@org.junit.Test public void branchAlreadyExists_Conflict() throws java.lang.Exception { assertCreateSucceeds(testBranch); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.ResourceConflictException.class); }",57785f4cc3f04e138c8b463aef774f65caa0f251,branchAlreadyExists_Conflict(),126688,56,58
41950,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchSetSelectBox.java,1.0,public boolean isFile() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); return !((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))); },b3a9017a8509da7053fec301e991d033b97867b4,public boolean isFileOrCommitMessae() { return !((((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size()))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))); },10ea7cd395bf465eec6cf91060afd75f80d95791,isFile(),isFileOrCommitMessae(),3,8,public boolean isFileOrCommitMessage() { return !((((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size()))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))); },78ca8d8551e6a1b1bbc2bb2788f28bda97cdd2bf,isFileOrCommitMessage(),102739,88,86
69700,github-plugin_src_main_java_com_googlesource_gerrit_plugins_github_notification_WebhookServlet.java,,,,"@java.lang.Override @java.lang.SuppressWarnings(""unchecked"") public void init() throws javax.servlet.ServletException { super.init(); handlerByName.put(""ping"", com.googlesource.gerrit.plugins.github.notification.PingHandler.class); com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.info(""Loaded PingHandler""); for (org.kohsuke.github.GHEvent event : org.kohsuke.github.GHEvent.values()) { java.lang.String name = com.googlesource.gerrit.plugins.github.notification.WebhookServlet.getControllerClassName(event); java.lang.Class<? extends com.googlesource.gerrit.plugins.github.notification.EventHandler<?>> clazz; try { clazz = ((java.lang.Class<? extends com.googlesource.gerrit.plugins.github.notification.EventHandler<?>>) (java.lang.Class.forName(name))); } catch (java.lang.ClassNotFoundException e) { com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.debug(""Handler \""{}\"" not found. Skipping"", name); continue; } com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.info(""Loaded {}"", clazz.getName()); handlerByName.put(event.name().toLowerCase(), clazz); } }",252a1c61bb84763fccc7e9645502358d24217d80,,init(),12,3,"private com.googlesource.gerrit.plugins.github.notification.WebhookEventHandler<?> getWebhookHandler(java.lang.String name) { if (name == null) { com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.error(""Null event name: cannot find any handler for it""); return null; } com.googlesource.gerrit.plugins.github.notification.WebhookEventHandler<?> handler = handlerByName.get(name); if (handler != null) { return handler; } try { java.lang.String className = eventClassName(name); java.lang.Class<?> clazz = java.lang.Class.forName(className); handler = ((com.googlesource.gerrit.plugins.github.notification.WebhookEventHandler<?>) (injector.getInstance(clazz))); handlerByName.put(name, handler); com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.info(""Loaded {}"", clazz.getName()); } catch (java.lang.ClassNotFoundException e) { com.googlesource.gerrit.plugins.github.notification.WebhookServlet.logger.error(((""Handler '"" + name) + ""' not found. Skipping""), e); } return handler; }",b0f3f8e30b39cb00e854c715b5c5a7707e648c2c,getWebhookHandler(java.lang.String),11492,296,262
73291,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_ResourceServlet.java,1.0,"private static boolean isUnreasonableName(java.lang.String name) { return ((((((name.length()) < 1) || (name.contains(""\\""))) || (name.startsWith(""../""))) || (name.contains(""/../""))) || (name.contains(""/./""))) || (name.contains(""//"")); }",2b56c2ffa2d33ff0a29b38dcf4e671bec3a1eccf,"private static boolean isUnreasonableName(java.lang.String name) { return ((((name.contains(""\\"")) || (name.startsWith(""../""))) || (name.contains(""/../""))) || (name.contains(""/./""))) || (name.contains(""//"")); }",d6c66a7d8236ec41dc2a8efef34a0860c9c38040,isUnreasonableName(java.lang.String),isUnreasonableName(java.lang.String),3,1,"private static boolean isUnreasonableName(java.lang.String name) { return ((((((name.length()) < 1) || (name.contains(""\\""))) || (name.startsWith(""../""))) || (name.contains(""/../""))) || (name.contains(""/./""))) || (name.contains(""//"")); }",2b56c2ffa2d33ff0a29b38dcf4e671bec3a1eccf,isUnreasonableName(java.lang.String),9,61,69
12535,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_JettyModule.java,,,,@java.lang.Override protected void configure() { listener().to(com.google.gerrit.pgm.http.jetty.JettyServer.class); },be7a6ff7f2cfb62edd7be0007ac1e041ae523df5,,configure(),2,1,@java.lang.Override protected void configure() { listener().to(JettyServer.Lifecycle.class); },d0cc6a3e76d2b0306b8cb5a8c5149137e3337c8e,configure(),86106,35,23
30811,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,,,,"protected void createWidgets(final java.lang.String popupText, final java.lang.String currentPageLink) { projectsTab = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void movePointerTo(final int row, final boolean scroll) { super.movePointerTo(row, scroll); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnMovePointerEvent(popingUp, getRowItem(row).getName())); } @java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnOpenRowEvent(getRowItem(row).getName())); } }; projectsTab.setSavePointerId(currentPageLink); close = new com.google.gwt.user.client.ui.Button(Util.C.projectsClose()); close.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopupOnCloseEvent()); } }); popup = new com.google.gwtexpui.user.client.PluginSafeDialogBox(); popup.setModal(false); popup.setText(popupText); }",9bce0120b333cd00f00aeb94750751998001638d,,"createWidgets(java.lang.String,java.lang.String)",20,7,"private void createWidgets(final java.lang.String popupText, final java.lang.String currentPageLink) { projectsTab = new com.google.gerrit.client.ui.ProjectsTable() { @java.lang.Override protected void movePointerTo(final int row, final boolean scroll) { super.movePointerTo(row, scroll); onMovePointerTo(getRowItem(row).name()); } @java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); openRow(getRowItem(row).name()); } }; projectsTab.setSavePointerId(currentPageLink); close = new com.google.gwt.user.client.ui.Button(Util.C.projectsClose()); close.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); } }); popup = new com.google.gwtexpui.user.client.PluginSafeDialogBox(); popup.setModal(false); popup.setText(popupText); }",dbdfa36b8126343d690481275789dc6ee0f40100,"createWidgets(java.lang.String,java.lang.String)",37663,318,248
49149,github-plugin_src_main_java_com_googlesrouce_gerrit_plugins_github_git_GitClone.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void configureProject(org.eclipse.jgit.lib.ProgressMonitor progress) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(getProjectNameKey()); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); progress.beginTask(""Configure Gerrit project"", 2); setProjectSettings(); progress.update(1); setProjectPermissions(); progress.update(1); md.setMessage((""Imported from "" + (sourceUri))); config.commit(md); } finally { md.close(); progress.endTask(); } }",459abaf84de15c588f0a63ae0f1fcca2edf2ab21,,configureProject(org.eclipse.jgit.lib.ProgressMonitor),4,15,"public void configureProject(org.eclipse.jgit.lib.ProgressMonitor progress) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(getProjectNameKey()); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); progress.beginTask(""Configure Gerrit project"", 2); setProjectSettings(); progress.update(1); setProjectPermissions(); progress.update(1); md.setMessage((""Imported from "" + (sourceUri))); config.commit(md); projectCache.onCreateProject(getProjectNameKey()); } finally { md.close(); progress.endTask(); } }",57a4fae0258ef1ff122ebd581cefd8ef78f6e806,configureProject(org.eclipse.jgit.lib.ProgressMonitor),7038,158,168
23526,gerrit-server_src_main_java_com_google_gerrit_rules_PrologEnvironment.java,,,,"@java.lang.Override public void setPredicate(java.lang.String pkg, java.lang.String functor, com.googlecode.prolog_cafe.lang.Term... args) { init(); try { super.setPredicate(pkg, functor, args); } catch (com.googlecode.prolog_cafe.lang.ExistenceException err) { if (!(pkg.startsWith(""com.google.gerrit.rules.""))) { try { pkg = ""com.google.gerrit.rules.common""; setPredicate(pkg, (""default_"" + functor), args); } catch (com.googlecode.prolog_cafe.lang.ExistenceException err2) { throw err; } } else { throw err; } } }",ff2946dc39cf5aaa86ebb3028f3b3819841b1219,,"setPredicate(java.lang.String,java.lang.String,com.googlecode.prolog_cafe.lang.Term[])",4,1,"@java.lang.Override public void setPredicate(java.lang.String pkg, java.lang.String functor, com.googlecode.prolog_cafe.lang.Term... args) { init(); super.setPredicate(pkg, functor, args); }",242eea4c79c2aff4ca9593749e078817adb717a4,"setPredicate(java.lang.String,java.lang.String,com.googlecode.prolog_cafe.lang.Term[])",129539,161,57
74829,src_main_java_com_googlesource_gerrit_plugins_its_jira_JiraClient.java,5.0,"public com.atlassian.jira.rpc.soap.client.RemoteIssue performAction(com.googlesource.gerrit.plugins.its.jira.JiraSession token, java.lang.String issueKey, java.lang.String actionId, com.atlassian.jira.rpc.soap.client.RemoteFieldValue... params) throws java.rmi.RemoteException { return service.progressWorkflowAction(getToken(token), issueKey, actionId, params); }",6d7037779ef44246bae55927937a3775c4a8b9cd,"public void addComment(java.lang.String issueKey, com.atlassian.jira.rest.client.domain.Comment comment) throws java.io.IOException { try { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug((""Trying to add comment for issue "" + issueKey)); com.atlassian.jira.rest.client.domain.Issue issue = getIssue(issueKey); java.net.URI issueUri = new java.net.URI(((issue.getSelf().toString()) + ""/comment/"")); com.atlassian.jira.rest.client.IssueRestClient issueClient = client.getIssueClient(); com.atlassian.util.concurrent.Promise<java.lang.Void> promise = issueClient.addComment(issueUri, comment); promise.claim(); com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug((""Comment added to issue "" + issueKey)); } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.error((""Could not add comment to issue "" + issueKey)); throw new java.io.IOException(((""Adding Comment to issue "" + issueKey) + "" failed""), e); } }",18170757be47c15c0928ca8f18b80ac7d2ba500b,"performAction(com.googlesource.gerrit.plugins.its.jira.JiraSession,java.lang.String,java.lang.String,com.atlassian.jira.rpc.soap.client.RemoteFieldValue[])","addComment(java.lang.String,com.atlassian.jira.rest.client.domain.Comment)",5,4,"public void addComment(java.lang.String issueKey, com.atlassian.jira.rest.client.api.domain.Comment comment) throws com.atlassian.jira.rest.client.api.RestClientException, java.net.URISyntaxException { com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug((""Trying to add comment for issue "" + issueKey)); com.atlassian.jira.rest.client.api.domain.Issue issue = getIssue(issueKey); java.net.URI issueUri; issueUri = new java.net.URI(((issue.getSelf().toString()) + ""/comment/"")); com.atlassian.jira.rest.client.api.IssueRestClient issueClient = client.getIssueClient(); com.atlassian.util.concurrent.Promise<java.lang.Void> promise = issueClient.addComment(issueUri, comment); promise.claim(); com.googlesource.gerrit.plugins.its.jira.JiraClient.log.debug((""Comment added to issue "" + issueKey)); }",14c57fc718116b4598ff5c7e52fa50dbe6de06b5,"addComment(java.lang.String,com.atlassian.jira.rest.client.api.domain.Comment)",168504,274,227
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,50.0,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { diffChunkNav(cm, com.google.gerrit.client.diff.SideBySide2.Direction.NEXT).run(); } } }; }",25d86cacf3c4080c9f5f58b6f7e6ff752bde037c,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { coloringManager.diffChunkNav(cm, com.google.gerrit.client.diff.SideBySide2.Direction.NEXT).run(); } } }; }",7da393ec5b2740a6c5d9ff3dce9f8402a8d61d7a,maybeNextVimSearch(net.codemirror.lib.CodeMirror),maybeNextVimSearch(net.codemirror.lib.CodeMirror),5,50,"private java.lang.Runnable maybeNextVimSearch(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.hasVimSearchHighlight()) { net.codemirror.lib.CodeMirror.handleVimKey(cm, ""n""); } else { chunkManager.diffChunkNav(cm, Direction.NEXT).run(); } } }; }",8000cb662e04e6ab58ce3e460e8a89679580fff3,maybeNextVimSearch(net.codemirror.lib.CodeMirror),199267,115,99
61941,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,,,,"@org.junit.Test public void testOwnerGroupsWhenNotConfigured() { assertArrayEquals(new java.lang.String[]{ }, repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); }",22a8bb04b8efaae620fea7add2c625c9358511e3,,testOwnerGroupsWhenNotConfigured(),12,1,"@org.junit.Test public void testOwnerGroupsWhenNotConfigured() { assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(new java.lang.String[]{ }); }",1f79be17d5913f9bfc424e7fd61ce847d51acbdf,testOwnerGroupsWhenNotConfigured(),177501,58,58
66970,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_AddFileBox.java,7.0,@java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gerrit.client.ui.RemoteSuggestBox> event) { hide(); },91575e17495460e89d828904959b58c79b633216,@java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gerrit.client.ui.RemoteSuggestBox> event) { if (((path.getText()) != null) && ((path.getText().length()) > 0)) { open(path.getText()); } hide(); },1902e5649c2bfd28abbf48b49451a9e88ab5af36,onClose(com.google.gwt.event.logical.shared.CloseEvent),onClose(com.google.gwt.event.logical.shared.CloseEvent),5,7,@java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gerrit.client.ui.RemoteSuggestBox> event) { hide(); fileTable.registerKeys(); },693d86a60f37468ee3d111787a73f339f66a9e0e,onClose(com.google.gwt.event.logical.shared.CloseEvent),34367,76,53
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ListenableAccountDiffPreference.java,2.0,public void reset() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((com.google.gerrit.client.Gerrit.getAccountDiffPreference()) != null)) { set(com.google.gerrit.client.Gerrit.getAccountDiffPreference()); } else { set(com.google.gerrit.reviewdb.client.AccountDiffPreference.createDefault(null)); } },f54e326c316ff084c02198303e81dfed75fba98e,public void reset() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((com.google.gerrit.client.Gerrit.getDiffPreferences()) != null)) { set(com.google.gerrit.client.Gerrit.getDiffPreferences()); } else { set(new com.google.gerrit.extensions.common.DiffPreferencesInfo()); } },c03f62b2fe60b880034a56a4106ea834e8f0e657,reset(),reset(),40,2,public void reset() { if ((com.google.gerrit.client.Gerrit.isSignedIn()) && ((com.google.gerrit.client.Gerrit.getDiffPreferences()) != null)) { set(com.google.gerrit.client.Gerrit.getDiffPreferences()); } else { set(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults()); } },80ce025ad1c1fa77422236692be87d1ff1eb32e7,reset(),127741,91,92
95952,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_ExternalIdInfo.java,,,,public final native boolean trusted();,7e0d406f6cfdb937e9220981691f62c0ec8e264a,,trusted(),12,0,public final native boolean isTrusted();,c72c945b841dcc2af3422098db6753ece08acdeb,isTrusted(),43028,6,7
76263,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_SymlinkValidatorTest.java,0.0,"@org.junit.Test public void testWithSymlink() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.performValidation(repo, c); assertEquals(2, m.size()); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> expected = new java.util.ArrayList<>(); expected.add(new com.google.gerrit.server.git.validators.CommitValidationMessage((""Symbolic links are not allowed: "" + ""foo.txt""), true)); expected.add(new com.google.gerrit.server.git.validators.CommitValidationMessage((""Symbolic links are not allowed: "" + ""symbolicFolder""), true)); assertTrue(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.compareCommitValidationMessage(m, expected)); }",217970b86a6459c2748a3afa6e7043bdf6b36188,"@org.junit.Test public void testWithSymlink() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.performValidation(repo, c); assertThat(m).hasSize(2); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> expected = new java.util.ArrayList<>(); expected.add(new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage(""Symbolic links are not allowed: foo.txt"", true)); expected.add(new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage(""Symbolic links are not allowed: symbolicFolder"", true)); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsAnyIn(expected); }",a5b30bb0220e726fe4575a20850c05cb9880096f,testWithSymlink(),testWithSymlink(),8,0,"@org.junit.Test public void testWithSymlink() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommitWithSymlink(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.SymlinkValidator.performValidation(repo, c); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(""ERROR: Symbolic links are not allowed: foo.txt"", ""ERROR: Symbolic links are not allowed: symbolicFolder""); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",290e9ef28adb2d417edae4e85e270c4fb8ba558d,testWithSymlink(),51929,232,175
46081,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,9.0,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> file(java.lang.String file) throws com.google.gerrit.server.query.QueryParseException { if (!(allowsFile)) { throw error((""operator not permitted here: file:"" + file)); } if (file.startsWith(""^"")) { return new com.google.gerrit.server.query.change.RegexFilePredicate(args.dbProvider, args.patchListCache, file); } throw new java.lang.IllegalArgumentException(); }",54903fa81f02e6ebab064b2110238247e74926c2,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> file(java.lang.String file) throws com.google.gerrit.server.query.QueryParseException { if (allowFileRegex) { if (file.startsWith(""^"")) { return new com.google.gerrit.server.query.change.RegexFilePredicate(args.dbProvider, args.patchListCache, file); } else { throw new java.lang.IllegalArgumentException(); } } else { if (!(file.startsWith(""^""))) { return new com.google.gerrit.server.index.PredicateWrapper(args.index, new com.google.gerrit.server.query.change.EqualsFilePredicate(args.dbProvider, args.patchListCache, file)); } else { throw error((""regular expression not permitted here: file:"" + file)); } } }",57eb180dc45e98ffef5ac1e89ef77ccf1d77ee8c,file(java.lang.String),file(java.lang.String),6,9,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> file(java.lang.String file) throws com.google.gerrit.server.query.QueryParseException { if (allowFileRegex) { if (file.startsWith(""^"")) { return new com.google.gerrit.server.query.change.RegexFilePredicate(args.dbProvider, args.patchListCache, file); } else { throw new java.lang.IllegalArgumentException(); } } else { if ((!(file.startsWith(""^""))) && ((args.index) != (com.google.gerrit.server.index.ChangeIndex.DISABLED))) { return new com.google.gerrit.server.index.PredicateWrapper(args.index, new com.google.gerrit.server.query.change.EqualsFilePredicate(args.dbProvider, args.patchListCache, file)); } else { throw error((""regular expression not permitted here: file:"" + file)); } } }",4f2dd1007d7aaf790e0f8155fcd246527a38624f,file(java.lang.String),159638,215,242
108164,gerrit-server_src_main_java_com_google_gerrit_server_change_FileContentUtil.java,1.0,"private static java.lang.String randSuffix() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",4f01c84929363e5275af7c4dc5c3a8ecce0f21be,"private static java.lang.String randSuffix() { @java.lang.SuppressWarnings(""deprecation"") com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",72cb18477d86d1a4312305a1b6177a37c408496e,randSuffix(),randSuffix(),7,1,"private static java.lang.String randSuffix() { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); byte[] buf = new byte[8]; org.eclipse.jgit.util.NB.encodeInt64(buf, 0, com.google.gerrit.common.TimeUtil.nowMs()); h.putBytes(buf); com.google.gerrit.server.change.FileContentUtil.rng.nextBytes(buf); h.putBytes(buf); return h.hash().toString(); }",557b7657e13590b21e106c3a64fd92ae1e3a4ee1,randSuffix(),2804,133,127
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,3.0,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else if ((diff.meta_b()) != null) { int line = 0; if (!(diffChunks.isEmpty())) { com.google.gerrit.client.diff.DiffChunkInfo d = diffChunks.get(0); net.codemirror.lib.CodeMirror cm = getCmFromSide(d.getSide()); line = d.getStart(); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } } cmB.setCursor(net.codemirror.lib.LineCharacter.create(line)); cmB.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",48be9f14625110a488bd868731e46b04b0de09b5,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startSide) == null) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = coloringManager.getFirstDiffChunk(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",29138d54418aa94b7dba5629381a92dae41dcbab,onShowView(),onShowView(),5,2,"@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startSide) == null) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, ""local"")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }",faa5600edb1e2e4bab1de124b8f69338cfadc6ba,onShowView(),199319,453,450
53971,gerrit-server_src_main_java_com_google_gerrit_server_validators_ProjectCreationValidationListener.java,,,,public void onProjectCreated(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;,fa8e5552d35044f27d55b2774eae07dd9b9b504f,,onProjectCreated(com.google.gerrit.server.project.CreateProjectArgs),6,0,public void validateNewProject(com.google.gerrit.server.project.CreateProjectArgs args) throws com.google.gerrit.server.validators.ValidationException;,d3204fda7dc930dc02ee948287e78d799657d779,validateNewProject(com.google.gerrit.server.project.CreateProjectArgs),136723,38,38
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_UrlModule.java,14.0,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",78f6784e670d245cbc4629c83839c2ecb4e7f3ca,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id, null), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",40a2a1ed1380f7849e6c639bd0fc49b65bfb36a6,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",7,14,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith(""/"")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(null, id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } }",e4fbbd056a88b1f32a376af68c6d90a149790778,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",211490,174,172
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,28.0,"public void run() { defer(new java.lang.Runnable() { @java.lang.Override public void run() { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor(""end"").getLine()); if ((cm.hasActiveLine()) && (cm.getActiveLine().equals(handle))) { return; } clearActiveLine(cm); clearActiveLine(other); cm.setActiveLine(handle); cm.addLineClass(handle, LineClassWhere.WRAP, DiffTable.style.activeLine()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther(getSideFromCm(cm), cm.getLineNumber(handle)); if (info.isAligned()) { net.codemirror.lib.CodeMirror.LineHandle oLineHandle = other.getLineHandle(info.getLine()); other.setActiveLine(oLineHandle); other.addLineClass(oLineHandle, LineClassWhere.WRAP, DiffTable.style.activeLine()); } } }); }",bfa3574678de72b5f0e4010de37b38fe6fe6321d,"public void run() { defer(new java.lang.Runnable() { @java.lang.Override public void run() { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor(""end"").getLine()); if ((cm.hasActiveLine()) && (cm.getActiveLine().equals(handle))) { return; } clearActiveLine(cm); clearActiveLine(other); cm.setActiveLine(handle); cm.addLineClass(handle, LineClassWhere.WRAP, DiffTable.style.activeLine()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = lineOnOther(getSideFromCm(cm), cm.getLineNumber(handle)); if (info.isAligned()) { net.codemirror.lib.CodeMirror.LineHandle oLineHandle = other.getLineHandle(info.getLine()); other.setActiveLine(oLineHandle); other.addLineClass(oLineHandle, LineClassWhere.WRAP, DiffTable.style.activeLine()); } } }); }",b5ad83362b154aefcadc99b8848b3285b5b9d44a,run(),run(),5,27,"public void run() { defer(new java.lang.Runnable() { @java.lang.Override public void run() { net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandleVisualStart(cm.getCursor(""end"").getLine()); if ((cm.hasActiveLine()) && (cm.getActiveLine().equals(handle))) { return; } clearActiveLine(cm); clearActiveLine(other); cm.setActiveLine(handle); cm.addLineClass(handle, LineClassWhere.WRAP, DiffTable.style.activeLine()); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = lineOnOther(cm.side(), cm.getLineNumber(handle)); if (info.isAligned()) { net.codemirror.lib.CodeMirror.LineHandle oLineHandle = other.getLineHandle(info.getLine()); other.setActiveLine(oLineHandle); other.addLineClass(oLineHandle, LineClassWhere.WRAP, DiffTable.style.activeLine()); } } }); }",b54048758874dfd87e5d729622958a1e54b93647,run(),199318,233,229
41832,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override protected void configure() { bindConstant().annotatedWith(com.google.inject.name.Names.named(""HEADLESS"")).to(headless); }",36fd39c333cdaa532e509593e315c430c0964f4e,,configure(),2,8,@java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(headless)); },81d1fc9ee5c9415bd780f1a5f3040b8a7d084dea,configure(),91627,36,54
113690,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneProjectIndex.java,,,,"@java.lang.Override public void replace(com.google.gerrit.server.project.ProjectState projectState) throws java.io.IOException { try { replace(com.google.gerrit.lucene.LuceneProjectIndex.idTerm(projectState), toDocument(projectState, null)).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new java.io.IOException(e); } }",42513da1fc9dc414ca9cbfcf81dc4dbda7353e86,,replace(com.google.gerrit.server.project.ProjectState),8,2,"@java.lang.Override public void replace(com.google.gerrit.server.project.ProjectState projectState) throws java.io.IOException { try { replace(com.google.gerrit.lucene.LuceneProjectIndex.idTerm(projectState), toDocument(projectState)).get(); } catch (java.util.concurrent.ExecutionException | java.lang.InterruptedException e) { throw new java.io.IOException(e); } }",bc35698d402f3b3db14cd996893844243933fcd5,replace(com.google.gerrit.server.project.ProjectState),54875,100,98
47382,gerrit-lucene_src_main_java_com_google_gerrit_lucene_OnlineReindexer.java,,,,public void start() { new java.lang.Thread() { @java.lang.Override public void run() { reindex(); } }.start(); },3787ed8f9ffb2450d2843b33c67271297a58c44c,,start(),7,3,"public void start() { java.lang.Thread t = new java.lang.Thread() { @java.lang.Override public void run() { reindex(); } }; t.setName(java.lang.String.format(""Reindex v%d-v%d"", com.google.gerrit.lucene.OnlineReindexer.version(indexes.getSearchIndex()), version)); t.start(); }",bbd11a5c474cc7766f3928b20b1d29164a0bea23,start(),24676,33,91
106310,src_test_java_com_googlesource_gerrit_plugins_findowners_FindOwnersIT.java,17.0,"@org.junit.Test public void ownersFile1Test() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c1 = createChange(""add OWNERS"", ""OWNERS"", ""x@x\na@a\n""); assertThat(getOwnersResponse(c1)).contains(""owners:[], files:[ OWNERS ]""); com.google.gerrit.acceptance.PushOneCommit.Result c2 = createChange(""add t.c"", ""t.c"", ""##""); assertThat(getOwnersResponse(c2)).contains(""owners:[], files:[ t.c ]""); approveSubmit(c1); assertThat(getOwnersResponse(c2)).contains(""owners:[ a@a[1+0+0], x@x[1+0+0] ], files:[ t.c ]""); assertThat(getOwnersResponse(c1)).contains(""owners:[ a@a[1+0+0], x@x[1+0+0] ], files:[ OWNERS ]""); java.lang.String expectedTail = ""path2owners:{ ./:a@ax@x }, owner2paths:{ a@a:./, x@x:./ } }"" + ("", file2owners:{ ./t.c:a@ax@x }, reviewers:[], owners:[ "" + ""a@a[1+0+0], x@x[1+0+0] ], files:[ t.c ] }""); assertThat(getOwnersDebugResponse(c2)).contains(expectedTail); }",9a65ea67544b1442de8fa4641e279671b761bddc,"@org.junit.Test public void ownersFile1Test() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c1 = createChange(""add OWNERS"", ""OWNERS"", ""x@x\na@a\n""); assertThat(getOwnersResponse(c1)).contains(""owners:[], files:[ OWNERS ]""); com.google.gerrit.acceptance.PushOneCommit.Result c2 = createChange(""add t.c"", ""t.c"", ""##""); assertThat(getOwnersResponse(c2)).contains(""owners:[], files:[ t.c ]""); approveSubmit(c1); java.lang.String ownerA = ""{ email:a@a, weights:[ 1, 0, 0 ] }""; java.lang.String ownerB = ""{ email:b@b, weights:[ 1, 0, 0 ] }""; java.lang.String ownerC = ""{ email:c@c, weights:[ 1, 0, 0 ] }""; java.lang.String ownerX = ""{ email:x@x, weights:[ 1, 0, 0 ] }""; java.lang.String ownersAX = (((""owners:[ "" + ownerA) + "", "") + ownerX) + "" ]""; assertThat(getOwnersResponse(c2)).contains((ownersAX + "", files:[ t.c ]"")); assertThat(getOwnersResponse(c1)).contains((ownersAX + "", files:[ OWNERS ]"")); java.lang.String expectedTail = ((""path2owners:{ ./:[ a@a, x@x ] }, owner2paths:{ a@a:[ ./ ], x@x:[ ./ ] } }"" + "", file2owners:{ ./t.c:[ a@a, x@x ] }, reviewers:[], "") + ownersAX) + "", files:[ t.c ] }""; assertThat(getOwnersDebugResponse(c2)).contains(expectedTail); }",b7eb152ec2f6dd454d7f0f5da2b5911b634eb0c9,ownersFile1Test(),ownersFile1Test(),2,8,"@org.junit.Test public void ownersFile1Test() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result c1 = createChange(""add OWNERS"", ""OWNERS"", ""x@x\na@a\n""); assertThat(getOwnersResponse(c1)).contains(""owners:[], files:[ OWNERS ]""); com.google.gerrit.acceptance.PushOneCommit.Result c2 = createChange(""add t.c"", ""t.c"", ""##""); assertThat(getOwnersResponse(c2)).contains(""owners:[], files:[ t.c ]""); approveSubmit(c1); java.lang.String ownerA = ownerJson(""a@a""); java.lang.String ownerB = ownerJson(""b@b""); java.lang.String ownerC = ownerJson(""c@c""); java.lang.String ownerX = ownerJson(""x@x""); java.lang.String ownersAX = (((""owners:[ "" + ownerA) + "", "") + ownerX) + "" ]""; assertThat(getOwnersResponse(c2)).contains((ownersAX + "", files:[ t.c ]"")); assertThat(getOwnersResponse(c1)).contains((ownersAX + "", files:[ OWNERS ]"")); java.lang.String expectedTail = ((""path2owners:{ ./:[ a@a, x@x ] }, owner2paths:{ a@a:[ ./ ], x@x:[ ./ ] } }"" + "", file2owners:{ ./t.c:[ a@a, x@x ] }, reviewers:[], "") + ownersAX) + "", files:[ t.c ] }""; assertThat(getOwnersDebugResponse(c2)).contains(expectedTail); }",e1646a267f480119d34999b474dc22a015f6dc86,ownersFile1Test(),123904,475,435
35184,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_GerritJsonServlet.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected com.google.gwtjsonrpc.server.MethodHandle lookupMethod(final java.lang.String methodName) { return super.lookupMethod(methodName); },08dee00cc450c1895485998485f77f4018800df9,,lookupMethod(java.lang.String),19,2,"private static com.google.gson.GsonBuilder gerritDefaultGsonBuilder() { final com.google.gson.GsonBuilder g = defaultGsonBuilder(); g.registerTypeAdapter(org.eclipse.jgit.diff.Edit.class, new org.eclipse.jgit.diff.EditDeserializer()); return g; }",53a2a46b2d5841d611b5d85848c887be33ffed9c,gerritDefaultGsonBuilder(),88220,33,68
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_QuickApprove.java,1.0,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }",1a8d36dc64ff8838629b5ab6053fd6347ba68ba9,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(changeId.get(), project.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); } }); } }",a491820cac92109009799a02f70ad1835f632bf1,onClick(com.google.gwt.event.dom.client.ClickEvent),onClick(com.google.gwt.event.dom.client.ClickEvent),7,1,"@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if (((replyAction) != null) && (replyAction.isVisible())) { replyAction.quickApprove(input); } else { com.google.gerrit.client.changes.ChangeApi.revision(project.get(), changeId.get(), revision).view(""review"").post(input, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ReviewInput>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ReviewInput result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); } }); } }",60135d1abc24d88681d10934bcbfbf7f687368b9,onClick(com.google.gwt.event.dom.client.ClickEvent),210348,189,189
75967,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,42.0,void setLineLength(int length) { cm.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); },aaa41418917bebee354b935131f104ef1f73dc90,void setLineLength(int length) { cmOrig.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); cmEdit.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); },51e6e16cd97381efe2ad825ebf39d1258ce6d03f,setLineLength(int),setLineLength(int),43,51,void setLineLength(int length) { int adjustedLength = (Patch.COMMIT_MSG.equals(path)) ? 72 : length; cmBase.extras().lineLength(adjustedLength); cmEdit.extras().lineLength(adjustedLength); },f6b23c28ed58d39eccc886bbf2bb3e752adf9e1b,setLineLength(int),191656,62,56
46970,gerrit-sshd_src_main_java_com_google_gerrit_sshd_DispatchCommand.java,1.0,"private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = cmd.getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); if ((!(ctl.canPerform(rc.value()))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), rc.value()); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }",7e35e9d0a29858ee23fcf57d14f23bf6e5ee68f3,"private void checkRequiresCapability(java.lang.String baseName, org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = cmd.getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); java.lang.String value = (baseName.startsWith(""gerrit"")) ? rc.value() : java.lang.String.format(""%s-%s"", baseName, rc.value()); if ((!(ctl.canPerform(value))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), value); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }",88a6d490624cf51a177896c84cb039a9a070ab7c,checkRequiresCapability(org.apache.sshd.server.Command),"checkRequiresCapability(java.lang.String,org.apache.sshd.server.Command)",21,4,"private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = cmd.getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); java.lang.String capability = rc.value(); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { java.lang.String pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); if (((pluginName != null) && (!(""gerrit"".equals(pluginName)))) && (((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) || ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.CONTEXT)))) { capability = java.lang.String.format(""%s-%s"", pluginName, rc.value()); } else if ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) { com.google.gerrit.sshd.DispatchCommand.log.error(java.lang.String.format(""Class %s uses @%s(scope=%s), but is not within a plugin"", cmd.getClass().getName(), com.google.gerrit.extensions.annotations.RequiresCapability.class.getSimpleName(), CapabilityScope.PLUGIN.name())); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, ""fatal: cannot check capability""); } } if ((!(ctl.canPerform(capability))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), capability); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }",0ffaa2e3e761f668f51d410bdafcb4e8d0320e66,checkRequiresCapability(org.apache.sshd.server.Command),203883,251,490
57990,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public int compare(com.google.gerrit.reviewdb.client.PatchLineComment c1, com.google.gerrit.reviewdb.client.PatchLineComment c2) { java.lang.String filename1 = c1.getKey().getParentKey().get(); java.lang.String filename2 = c2.getKey().getParentKey().get(); int nameCmp = filename1.compareTo(filename2); if (nameCmp != 0) { return nameCmp; } int rangeCmp = c1.getRange().compareTo(c2.getRange()); if (rangeCmp != 0) { return rangeCmp; } int timeCmp = c1.getWrittenOn().compareTo(c2.getWrittenOn()); if (timeCmp != 0) { return timeCmp; } return 0; }",2dda8be25dd2499dcb3dfcbb15c6ddc5d941f9b4,,"compare(com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.reviewdb.client.PatchLineComment)",10,15,"public int compare(com.google.gerrit.reviewdb.client.PatchLineComment c1, com.google.gerrit.reviewdb.client.PatchLineComment c2) { java.lang.String filename1 = c1.getKey().getParentKey().get(); java.lang.String filename2 = c2.getKey().getParentKey().get(); com.google.gerrit.reviewdb.client.CommentRange range1 = c1.getRange(); com.google.gerrit.reviewdb.client.CommentRange range2 = c2.getRange(); int lineForComment1 = (range1 == null) ? c1.getLine() : range1.getEndLine(); int lineForComment2 = (range2 == null) ? c2.getLine() : range2.getEndLine(); com.google.common.collect.ComparisonChain chain = com.google.common.collect.ComparisonChain.start(); if ((range1 == null) || (range2 == null)) { chain = chain.compare(lineForComment1, lineForComment2); } else { chain = chain.compare(range1.getStartLine(), range2.getStartLine()).compare(range1.getStartCharacter(), range2.getStartCharacter()).compare(range1.getEndLine(), range2.getEndLine()).compare(range1.getEndCharacter(), range2.getEndCharacter()); } return chain.compare(filename1, filename2).compare(c1.getWrittenOn(), c2.getWrittenOn()).result(); }",d7d3464030399835d0fa444299d4028301010f21,"compare(com.google.gerrit.reviewdb.client.PatchLineComment,com.google.gerrit.reviewdb.client.PatchLineComment)",90247,156,309
48910,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,39.0,@java.lang.Override public void run() { header.prev.go(); },74544e24b1c9347ac07a1d660e0651d027efe6ed,@java.lang.Override public void run() { (header.prev.isVisible() ? header.prev : header.up).go(); },049a97e85ce51b01ac38c720cf5c812376292c44,run(),run(),3,30,@java.lang.Override public void run() { (header.hasPrev() ? header.prev : header.up).go(); },c1ea61f05c33b7ad85bed8bb0c574a2cacc07dab,run(),12717,31,30
136711,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_DeleteBranchesIT.java,11.0,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",d9d41a7a578e56081425f881ef8d03c6038d7a82,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); assert_().fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",17884b8143b1c84b273a58fbb409cf60fd0a3841,deleteBranchesNotFoundContinue(),deleteBranchesNotFoundContinue(),3,11,"@org.junit.Test public void deleteBranchesNotFoundContinue() throws java.lang.Exception { com.google.gerrit.extensions.api.projects.DeleteBranchesInput input = new com.google.gerrit.extensions.api.projects.DeleteBranchesInput(); java.util.List<java.lang.String> branches = com.google.common.collect.Lists.newArrayList(""refs/heads/does-not-exist""); branches.addAll(com.google.gerrit.acceptance.rest.project.DeleteBranchesIT.BRANCHES); input.branches = branches; try { project().deleteBranches(input); fail(""Expected ResourceConflictException""); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { assertThat(e).hasMessageThat().isEqualTo(errorMessageForBranches(com.google.common.collect.ImmutableList.of(""refs/heads/does-not-exist""))); } assertBranchesDeleted(); }",d9d41a7a578e56081425f881ef8d03c6038d7a82,deleteBranchesNotFoundContinue(),198266,210,207
48530,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_CommentRange.java,,,,public int getEndCh() { return endCh; },654d4edab39e921e5119116385fd92c1f02079b1,,getEndCh(),6,9,public int getEndCharacter() { return endCharacter; },8cd33d42cca5455b8284dd793f45408189c08ae8,getEndCharacter(),143256,12,12
67322,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_GerritServer.java,5.0,"private static com.google.inject.Injector createTestInjector(com.google.gerrit.pgm.Daemon daemon) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.acceptance.GerritServer.get(daemon, ""sysInjector""); java.lang.Module module = new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.acceptance.AccountCreator.class); factory(PushOneCommit.Factory.class); factory(SubmoduleOp.Factory.class); install(com.google.gerrit.acceptance.InProcessProtocol.module()); install(new com.google.gerrit.server.ssh.NoSshModule()); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); } }; return sysInjector.createChildInjector(module); }",814656a8a46ebb09f3bdb540c745b60d998bef89,"private static com.google.inject.Injector createTestInjector(com.google.gerrit.pgm.Daemon daemon) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.acceptance.GerritServer.get(daemon, ""sysInjector""); java.lang.Module module = new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.acceptance.AccountCreator.class); factory(PushOneCommit.Factory.class); factory(SubmoduleOp.Factory.class); factory(SubmoduleSectionParser.Factory.class); install(com.google.gerrit.acceptance.InProcessProtocol.module()); install(new com.google.gerrit.server.ssh.NoSshModule()); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); } }; return sysInjector.createChildInjector(module); }",dc39db4c2629a407203f97cb42d775418bf21a7a,createTestInjector(com.google.gerrit.pgm.Daemon),createTestInjector(com.google.gerrit.pgm.Daemon),3,5,"private static com.google.inject.Injector createTestInjector(com.google.gerrit.pgm.Daemon daemon) throws java.lang.Exception { com.google.inject.Injector sysInjector = com.google.gerrit.acceptance.GerritServer.get(daemon, ""sysInjector""); java.lang.Module module = new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.acceptance.AccountCreator.class); factory(PushOneCommit.Factory.class); factory(SubmoduleOp.Factory.class); install(com.google.gerrit.acceptance.InProcessProtocol.module()); install(new com.google.gerrit.server.ssh.NoSshModule()); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); } }; return sysInjector.createChildInjector(module); }",814656a8a46ebb09f3bdb540c745b60d998bef89,createTestInjector(com.google.gerrit.pgm.Daemon),161602,219,208
73617,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ReplyBox.java,7.0,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { e.stopPropagation(); if ((((e.getCharCode()) == '\n') || ((e.getCharCode()) == (KEY_ENTER))) && (e.isControlKeyDown())) { e.preventDefault(); if (post.isEnabled()) { onPost(null); } } },f87bc2e9fffaf831e9282975e952e0227d4e3fb5,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { e.stopPropagation(); if ((((e.getCharCode()) == '\n') || ((e.getCharCode()) == (KEY_ENTER))) && ((e.isControlKeyDown()) || (e.isMetaKeyDown()))) { e.preventDefault(); if (post.isEnabled()) { onPost(null); } } },7c677f57a99517aab26a70bd9c4a26fe448d5b28,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),5,11,@java.lang.Override public void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { e.stopPropagation(); if ((((e.getNativeKeyCode()) == (KEY_ENTER)) || ((e.getNativeKeyCode()) == (KEY_MAC_ENTER))) && ((e.isControlKeyDown()) || (e.isMetaKeyDown()))) { e.preventDefault(); if (post.isEnabled()) { onPost(null); } } },facf220a657e1e73e9b723f0d6f77b6d8e26cf26,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),195346,101,103
9941,src_main_java_com_google_gwtjsonrpc_client_JsonCall.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private <T extends com.google.gwt.event.shared.EventHandler> void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<T> e) { e.service = ((com.google.gwtjsonrpc.client.RemoteJsonService) (proxy)); com.google.gwtjsonrpc.client.JsonUtil.fireEvent(e); },04164543793a98065cd047e0ec1c9baf82fde47e,,fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent),2,3,private <T extends com.google.gwt.event.shared.EventHandler> void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<T> e) { e.call = this; com.google.gwtjsonrpc.client.JsonUtil.fireEvent(e); },99eaf4a109801f274b1f7391fbe297ddc2446da0,fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent),213463,80,63
31301,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,9.0,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },f9c425819da58796eae87c5d63b84b44ac16ba09,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },03128e46883e9c6137c6239afba01103d087ea5d,createSysInjector(),createSysInjector(),2,9,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },8112fda728e08635f4776aba238e0c6346e9dde4,createSysInjector(),140398,392,436
69928,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,65.0,"private boolean isSubmittable(com.google.gerrit.client.changes.ChangeInfo info) { boolean canSubmit = info.status().isOpen(); if (canSubmit && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { for (java.lang.String name : info.labels()) { com.google.gerrit.client.changes.ChangeInfo.LabelInfo label = info.label(name); switch (label.status()) { case NEED : statusText.setInnerText((""Needs "" + name)); canSubmit = false; break; case REJECT : case IMPOSSIBLE : if (label.blocking()) { statusText.setInnerText((""Not "" + name)); canSubmit = false; } break; default : break; } } } return canSubmit; }",5ecc40615d8b533daaf3194352c7f97f4c1f3de3,"private boolean isSubmittable(com.google.gerrit.client.changes.ChangeInfo info) { boolean canSubmit = ((info.status().isOpen()) && ((revision) == (info.current_revision()))) && (!(info.revision(revision).draft())); if (canSubmit && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { for (java.lang.String name : info.labels()) { com.google.gerrit.client.changes.ChangeInfo.LabelInfo label = info.label(name); switch (label.status()) { case NEED : statusText.setInnerText((""Needs "" + name)); canSubmit = false; break; case REJECT : case IMPOSSIBLE : if (label.blocking()) { statusText.setInnerText((""Not "" + name)); canSubmit = false; } break; default : break; } } } return canSubmit; }",f1db31daeac6a1ca63bff51e97825e05f3b008a4,isSubmittable(com.google.gerrit.client.changes.ChangeInfo),isSubmittable(com.google.gerrit.client.changes.ChangeInfo),7,65,"private boolean isSubmittable(com.google.gerrit.client.changes.ChangeInfo info) { boolean canSubmit = ((info.status().isOpen()) && (revision.equals(info.current_revision()))) && (!(info.revision(revision).draft())); if (canSubmit && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { for (java.lang.String name : info.labels()) { com.google.gerrit.client.changes.ChangeInfo.LabelInfo label = info.label(name); switch (label.status()) { case NEED : statusText.setInnerText((""Needs "" + name)); canSubmit = false; break; case REJECT : case IMPOSSIBLE : if (label.blocking()) { statusText.setInnerText((""Not "" + name)); canSubmit = false; } break; default : break; } } } return canSubmit; }",55bc6f581ea1c55ce99bae83c844d66c37f47d7d,isSubmittable(com.google.gerrit.client.changes.ChangeInfo),67889,220,219
58860,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,2.0,"public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : byChange(db, notes)) { if (key.equals(c.getKey())) { return c; } } return null; }",3b318b4b54b18e64732e50f02096945dca9a7e35,"public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : publishedByChange(db, notes)) { if (key.equals(c.getKey())) { return c; } } return null; }",c64765034e7f3eb4a6f52f9cfbcc4038984b8bba,"get(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchLineComment$Key)","get(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchLineComment$Key)",21,5,"public com.google.common.base.Optional<com.google.gerrit.reviewdb.client.PatchLineComment> get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.common.base.Optional.fromNullable(db.patchComments().get(key)); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : publishedByChange(db, notes)) { if (key.equals(c.getKey())) { return com.google.common.base.Optional.of(c); } } for (com.google.gerrit.reviewdb.client.PatchLineComment c : draftByChange(db, notes)) { if (key.equals(c.getKey())) { return com.google.common.base.Optional.of(c); } } return com.google.common.base.Optional.absent(); }",c4900f6dad3ce33afb6cb09a8c4d44ffa66eb4b8,"get(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchLineComment$Key)",62160,155,259
46290,gerrit-server_src_main_java_com_google_gerrit_server_account_GetSshKeys.java,,,,@java.lang.Override public java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> sshKeys = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.AccountSshKey sshKey : dbProvider.get().accountSshKeys().byAccount(rsrc.getUser().getAccountId()).toList()) { com.google.gerrit.server.account.GetSshKeys.SshKeyInfo info = new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(); info.id = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); sshKeys.add(info); } return sshKeys; },37a7ebcdd64060f967252c7294d8e2aac69bd724,,apply(com.google.gerrit.server.account.AccountResource),4,0,"@java.lang.Override public java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get SSH keys""); } java.util.List<com.google.gerrit.server.account.GetSshKeys.SshKeyInfo> sshKeys = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.AccountSshKey sshKey : dbProvider.get().accountSshKeys().byAccount(rsrc.getUser().getAccountId()).toList()) { com.google.gerrit.server.account.GetSshKeys.SshKeyInfo info = new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(); info.seq = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); sshKeys.add(info); } return sshKeys; }",6bae80a90ddc7cadd55b099fd345ba8717ef4979,apply(com.google.gerrit.server.account.AccountResource),200202,278,347
9518,src_main_java_com_google_gerrit_client_patches_PatchUnifiedScreen.java,0.0,"@java.lang.Override public void onLoad() { if ((diffTable) == null) { initUI(); } super.onLoad(); PatchUtil.DETAIL_SVC.unifiedPatchDetail(patchId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.data.UnifiedPatchDetail>() { public void onSuccess(final com.google.gerrit.client.data.UnifiedPatchDetail r) { if (isAttached()) { display(r); } } }); }",20147789abbf7eceb6cd3bbeb8df6a4791e94fd1,"@java.lang.Override public void onLoad() { if ((diffTable) == null) { initUI(); } super.onLoad(); PatchUtil.DETAIL_SVC.unifiedPatchDetail(patchId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.data.UnifiedPatchDetail>(this) { @java.lang.Override protected void prepare(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); } }); }",208aa5f861193a9b88861c02020410181c7711f5,onLoad(),onLoad(),2,0,"@java.lang.Override public void onLoad() { if ((diffTable) == null) { initUI(); } super.onLoad(); PatchUtil.DETAIL_SVC.unifiedPatchDetail(patchId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.data.UnifiedPatchDetail>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); } }); }",72442236eb275b512a57d9905afce23d4bd7c8fa,onLoad(),974,116,117
47314,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,0.0,"private void add(org.apache.lucene.document.Document doc, com.google.gerrit.server.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, ?> f, java.lang.Iterable<?> values) throws com.google.gwtorm.server.OrmException { java.lang.String name = f.getName(); org.apache.lucene.document.Field.Store store = com.google.gerrit.lucene.LuceneChangeIndex.store(f); if ((f.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.IntField(name, ((java.lang.Integer) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { for (java.lang.Object v : values) { doc.add(new org.apache.lucene.document.IntField(name, com.google.gerrit.lucene.LuceneChangeIndex.toIndexTime(((java.sql.Timestamp) (v))), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.StringField(name, ((java.lang.String) (value)), store)); } } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(f.getType()); } }",d51edd15deae5e3d41c86fc8ea409a4324df0f98,"private void add(org.apache.lucene.document.Document doc, com.google.gerrit.server.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, ?> f, java.lang.Iterable<?> values) throws com.google.gwtorm.server.OrmException { java.lang.String name = f.getName(); org.apache.lucene.document.Field.Store store = com.google.gerrit.lucene.LuceneChangeIndex.store(f); if ((f.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.IntField(name, ((java.lang.Integer) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.LONG)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.LongField(name, ((java.lang.Long) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { for (java.lang.Object v : values) { doc.add(new org.apache.lucene.document.IntField(name, com.google.gerrit.lucene.LuceneChangeIndex.toIndexTime(((java.sql.Timestamp) (v))), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.StringField(name, ((java.lang.String) (value)), store)); } } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(f.getType()); } }",2586080dbc2b0d4eb88b84ae257035a3fe43b8ed,"add(org.apache.lucene.document.Document,com.google.gerrit.server.index.FieldDef,java.lang.Iterable)","add(org.apache.lucene.document.Document,com.google.gerrit.server.index.FieldDef,java.lang.Iterable)",2,0,"private void add(org.apache.lucene.document.Document doc, com.google.gerrit.server.index.FieldDef<com.google.gerrit.server.query.change.ChangeData, ?> f, java.lang.Iterable<?> values) throws com.google.gwtorm.server.OrmException { java.lang.String name = f.getName(); org.apache.lucene.document.Field.Store store = com.google.gerrit.lucene.LuceneChangeIndex.store(f); if ((f.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.IntField(name, ((java.lang.Integer) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.LONG)) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.LongField(name, ((java.lang.Long) (value)), store)); } } else if ((f.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { for (java.lang.Object v : values) { doc.add(new org.apache.lucene.document.IntField(name, com.google.gerrit.lucene.LuceneChangeIndex.toIndexTime(((java.sql.Timestamp) (v))), store)); } } else if (((f.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) || ((f.getType()) == (com.google.gerrit.server.index.FieldType.PREFIX))) { for (java.lang.Object value : values) { doc.add(new org.apache.lucene.document.StringField(name, ((java.lang.String) (value)), store)); } } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(f.getType()); } }",4baba1547e73add6c85dc38ee6d9242b06cca5d8,"add(org.apache.lucene.document.Document,com.google.gerrit.server.index.FieldDef,java.lang.Iterable)",121874,443,466
69467,src_main_java_com_googlesource_gerrit_plugins_refprotection_RefUpdateListener.java,0.0,"@java.lang.Override public void onGitReferenceUpdated(final com.googlesource.gerrit.plugins.refprotection.Event event) { if (isRelevantRef(event)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); boolean protectDeleted = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean(""protectDeleted"", true); boolean protectFastForward = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean(""protectFastForward"", true); if ((protectDeleted && (isRefDeleted(event))) || (protectFastForward && (isNonFastForwardUpdate(event, project)))) { backupBranch.createBackup(event, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } }",bfa0a87d6e47203a85103f5a3b7c9de40e7393ef,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { com.google.gerrit.server.events.RefUpdatedEvent refUpdate = ((com.google.gerrit.server.events.RefUpdatedEvent) (event)); if (refUpdate != null) { if (isRelevantRef(refUpdate)) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = refUpdate.getProjectNameKey(); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); boolean protectDeleted = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean(""protectDeleted"", true); boolean protectFastForward = cfg.getFromGerritConfig(RefProtectionModule.NAME).getBoolean(""protectFastForward"", true); if ((protectDeleted && (isRefDeleted(refUpdate))) || (protectFastForward && (isNonFastForwardUpdate(refUpdate, project)))) { backupBranch.createBackup(refUpdate, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } } }",cc0be6c9075fa2b96dd5ce1837c3757108d3802c,onGitReferenceUpdated(com.googlesource.gerrit.plugins.refprotection.Event),onEvent(com.google.gerrit.server.events.Event),8,4,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (event instanceof com.google.gerrit.server.events.RefUpdatedEvent) { com.google.gerrit.server.events.RefUpdatedEvent refUpdate = ((com.google.gerrit.server.events.RefUpdatedEvent) (event)); if (((protectDeleted) || (protectFastForward)) && (isRelevantRef(refUpdate))) { com.google.gerrit.reviewdb.client.Project.NameKey nameKey = refUpdate.getProjectNameKey(); try { com.google.gerrit.server.project.ProjectResource project = new com.google.gerrit.server.project.ProjectResource(projectControl.controlFor(nameKey, user)); if (((protectDeleted) && (isRefDeleted(refUpdate))) || ((protectFastForward) && (isNonFastForwardUpdate(refUpdate, project)))) { backupRef.createBackup(refUpdate, project); } } catch (com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { com.googlesource.gerrit.plugins.refprotection.RefUpdateListener.log.error(e.getMessage(), e); } } } }",38b9de85b0b890e744516cc5663b64f55745e52f,onEvent(com.google.gerrit.server.events.Event),111446,304,277
69853,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,1.0,"private void submit(java.lang.String changeId, int expectedStatus) throws java.lang.Exception { approve(changeId); com.google.gerrit.extensions.api.changes.SubmitInput subm = new com.google.gerrit.extensions.api.changes.SubmitInput(); com.google.gerrit.acceptance.RestResponse r = adminSession.post(((""/changes/"" + changeId) + ""/submit""), subm); assertThat(r.getStatusCode()).isEqualTo(expectedStatus); if (expectedStatus == (org.apache.http.HttpStatus.SC_OK)) { com.google.gerrit.extensions.common.ChangeInfo change = newGson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.extensions.common.ChangeInfo>() {}.getType()); assertThat(change.status).isEqualTo(ChangeStatus.MERGED); checkMergeResult(change); } r.consume(); }",afc737a66261c8c85805492fce41eee622372f86,"private void submit(java.lang.String changeId, int expectedStatus, java.lang.String msg) throws java.lang.Exception { approve(changeId); com.google.gerrit.extensions.api.changes.SubmitInput subm = new com.google.gerrit.extensions.api.changes.SubmitInput(); com.google.gerrit.acceptance.RestResponse r = adminSession.post(((""/changes/"" + changeId) + ""/submit""), subm); assertThat(r.getStatusCode()).isEqualTo(expectedStatus); if (expectedStatus == (org.apache.http.HttpStatus.SC_OK)) { com.google.gerrit.extensions.common.ChangeInfo change = newGson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.extensions.common.ChangeInfo>() {}.getType()); assertThat(change.status).isEqualTo(ChangeStatus.MERGED); checkMergeResult(change); } else { assertThat(r.getEntityContent()).contains(msg); } r.consume(); }",3ad43615c1eb73cc40587c6d858face0941b6673,"submit(java.lang.String,int)","submit(java.lang.String,int,java.lang.String)",4,1,"private void submit(java.lang.String changeId, int expectedStatus, java.lang.String msg) throws java.lang.Exception { approve(changeId); com.google.gerrit.extensions.api.changes.SubmitInput subm = new com.google.gerrit.extensions.api.changes.SubmitInput(); com.google.gerrit.acceptance.RestResponse r = adminSession.post(((""/changes/"" + changeId) + ""/submit""), subm); assertThat(r.getStatusCode()).isEqualTo(expectedStatus); if (expectedStatus == (org.apache.http.HttpStatus.SC_OK)) { checkArgument((msg == null), ""msg must be null for successful submits""); com.google.gerrit.extensions.common.ChangeInfo change = newGson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.extensions.common.ChangeInfo>() {}.getType()); assertThat(change.status).isEqualTo(ChangeStatus.MERGED); checkMergeResult(change); } else { checkArgument((!(com.google.common.base.Strings.isNullOrEmpty(msg))), (""msg must be a valid string "" + ""containing an error message for unsuccessful submits"")); assertThat(r.getEntityContent()).isEqualTo(msg); } r.consume(); }",4504bde1d3dff04dc955babe3629716ed632a85a,"submit(java.lang.String,int,java.lang.String)",68345,234,291
150795,java_com_google_gerrit_server_update_RetryHelper.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.github.rholder.retry.RetryerBuilder<T> retryerBuilder = createRetryerBuilder(com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); try { return retryerBuilder.build().call(() -> action.call()); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { java.lang.Throwable t = e; if ((e.getCause()) != null) { t = e.getCause(); } com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",72a04e80dc89828c28d4a22df42ee9a57f3ffd5c,,"execute(com.google.gerrit.server.update.RetryHelper$Action,com.google.common.base.Predicate)",3,5,"public <T> T execute(com.google.gerrit.server.update.RetryHelper.ActionType actionType, com.google.gerrit.server.update.RetryHelper.Action<T> action, com.google.common.base.Predicate<java.lang.Throwable> exceptionPredicate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return execute(actionType, action, com.google.gerrit.server.update.RetryHelper.defaults(), exceptionPredicate); } catch (java.lang.Throwable t) { com.google.common.base.Throwables.throwIfUnchecked(t); com.google.common.base.Throwables.throwIfInstanceOf(t, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(t, com.google.gwtorm.server.OrmException.class); throw new com.google.gwtorm.server.OrmException(t); } }",6e8262e98fdae8c61e035fa375616a605e3e18fb,"execute(com.google.gerrit.server.update.RetryHelper$ActionType,com.google.gerrit.server.update.RetryHelper$Action,com.google.common.base.Predicate)",77052,315,260
60631,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,19.0,private void afterTest() throws java.lang.Exception { db.close(); sshSession.close(); server.stop(); com.google.gerrit.testutil.TempFileUtil.cleanup(); },16983c5ba84588a58cf6a0fdcf6fbf26eec8a7ee,private void afterTest(boolean hasCustomConfig) throws java.lang.Exception { db.close(); sshSession.close(); if (hasCustomConfig) { server.stop(); } else { server.clearAllData(); } },17aa3a68faf3608c02dffca87c749e07d176be85,afterTest(),afterTest(boolean),7,38,private Project.NameKey createProject(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { gApi.projects().create(in); return new com.google.gerrit.reviewdb.client.Project.NameKey(in.name); },d089785518f58f62c88e7e07cc71a3e627e9d326,createProject(com.google.gerrit.extensions.api.projects.ProjectInput),128969,48,75
34670,gerrit-pgm_src_main_java_com_google_gerrit_pgm_shell_JythonShell.java,,,,"private static java.lang.Class findClass(java.lang.String klazzname) { try { return java.lang.Class.forName(klazzname); } catch (java.lang.ClassNotFoundException e) { throw com.google.gerrit.pgm.shell.JythonShell.noShell(((""Class "" + klazzname) + "" not found""), e); } }",f7104e39de284eea0e68f342dcd1cc5eac781102,,findClass(java.lang.String),7,3,"private static java.lang.Class<?> findClass(java.lang.String klazzname) { try { return java.lang.Class.forName(klazzname); } catch (java.lang.ClassNotFoundException e) { throw com.google.gerrit.pgm.shell.JythonShell.noShell(((""Class "" + klazzname) + "" not found""), e); } }",238e2293347bdeb6f352050e38f6b5c7eefb0809,findClass(java.lang.String),140272,86,87
13518,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapRealm.java,26.0,"public com.google.gerrit.server.account.AuthRequest authenticate(final com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { final java.lang.String username = who.getLocalUser(); try { final javax.naming.directory.DirContext ctx = open(); try { final com.google.gerrit.server.auth.ldap.LdapQuery.Result m = findAccount(ctx, username); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP)) { authenticate(m.getDN(), who.getPassword()); } who.setDisplayName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountFullName, m)); who.setUserName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountSshUserName, m)); if ((accountEmailAddress) != null) { who.setEmailAddress(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountEmailAddress, m)); } else if (emailExpander.canExpand(username)) { who.setEmailAddress(emailExpander.expand(username)); } membershipCache.put(username, queryForGroups(ctx, username, m)); return who; } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.error(""Cannot query LDAP to autenticate user"", e); throw new com.google.gerrit.server.account.AccountException(""Cannot query LDAP for account"", e); } }",b6b6db29c9de5a22252356deb1297ba9ff43281a,"public com.google.gerrit.server.account.AuthRequest authenticate(final com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { final java.lang.String authUsername = who.getLocalUser(); final java.lang.String authPassword = who.getPassword(); if ((this.username) == null) { this.username = authUsername; this.password = authPassword; } try { final javax.naming.directory.DirContext ctx = open(); try { final com.google.gerrit.server.auth.ldap.LdapQuery.Result m = findAccount(ctx, authUsername); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP)) { authenticate(m.getDN(), authPassword); } who.setDisplayName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountFullName, m)); who.setUserName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountSshUserName, m)); if ((accountEmailAddress) != null) { who.setEmailAddress(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountEmailAddress, m)); } else if (emailExpander.canExpand(authUsername)) { who.setEmailAddress(emailExpander.expand(authUsername)); } membershipCache.put(authUsername, queryForGroups(ctx, authUsername, m)); return who; } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.error(""Cannot query LDAP to autenticate user"", e); throw new com.google.gerrit.server.account.AccountException(""Cannot query LDAP for account"", e); } }",c121f54fd95503be603d4838391850bc00adbc90,authenticate(com.google.gerrit.server.account.AuthRequest),authenticate(com.google.gerrit.server.account.AuthRequest),5,26,"public com.google.gerrit.server.account.AuthRequest authenticate(final com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { final java.lang.String username = who.getLocalUser(); try { final javax.naming.directory.DirContext ctx; if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP_BIND)) { ctx = authenticate(username, who.getPassword()); } else { ctx = open(); } try { final com.google.gerrit.server.auth.ldap.LdapQuery.Result m = findAccount(ctx, username); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.LDAP)) { authenticate(m.getDN(), who.getPassword()); } who.setDisplayName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountFullName, m)); who.setUserName(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountSshUserName, m)); if ((accountEmailAddress) != null) { who.setEmailAddress(com.google.gerrit.server.auth.ldap.LdapRealm.apply(accountEmailAddress, m)); } else if (emailExpander.canExpand(username)) { who.setEmailAddress(emailExpander.expand(username)); } membershipCache.put(username, queryForGroups(ctx, username, m)); return who; } finally { try { ctx.close(); } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.warn(""Cannot close LDAP query handle"", e); } } } catch (javax.naming.NamingException e) { com.google.gerrit.server.auth.ldap.LdapRealm.log.error(""Cannot query LDAP to autenticate user"", e); throw new com.google.gerrit.server.account.AccountException(""Cannot query LDAP for account"", e); } }",07ca2d065e4d9a3263ce5eef8f242d06f2b7d690,authenticate(com.google.gerrit.server.account.AuthRequest),144034,450,453
88474,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsGlobalConfig.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsBackendConfig apply(java.lang.String input) { return new com.googlesource.gerrit.plugins.lfs.LfsBackendConfig(input, type); }",393f7d6856a1789d5ae15dd4d3114442abd5fb6f,,apply(java.lang.String),7,3,"@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsBackend apply(java.lang.String input) { return new com.googlesource.gerrit.plugins.lfs.LfsBackend(input, type); }",baf526be637b85926c395e44268dcea7ca8e0378,apply(java.lang.String),180318,59,57
64200,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,28.0,"private static boolean notModified(javax.servlet.http.HttpServletRequest req, com.google.gerrit.extensions.restapi.RestResource rsrc) { if (!(com.google.gerrit.httpd.restapi.RestApiServlet.isGetOrHead(req))) { return false; } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasETag) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.RestResource.HasETag) (rsrc)).getETag()); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified) { java.sql.Timestamp m = ((com.google.gerrit.extensions.restapi.RestResource.HasLastModified) (rsrc)).getLastModified(); long d = req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE); return (d / 1000L) == ((m.getTime()) / 1000L); } return false; }",ef36670c8ac2b01b01a3dbf931ea07a046a17172,"private static boolean notModified(javax.servlet.http.HttpServletRequest req, com.google.gerrit.extensions.restapi.RestResource rsrc, com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestResource> view) { if (!(com.google.gerrit.httpd.restapi.RestApiServlet.isGetOrHead(req))) { return false; } if (view instanceof com.google.gerrit.extensions.restapi.ETagView) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.ETagView) (view)).getETag(rsrc)); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasETag) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.RestResource.HasETag) (rsrc)).getETag()); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified) { java.sql.Timestamp m = ((com.google.gerrit.extensions.restapi.RestResource.HasLastModified) (rsrc)).getLastModified(); long d = req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE); return (d / 1000L) == ((m.getTime()) / 1000L); } return false; }",092181a3335452793f91a2bce9cf34e727df821e,"notModified(javax.servlet.http.HttpServletRequest,com.google.gerrit.extensions.restapi.RestResource)","notModified(javax.servlet.http.HttpServletRequest,com.google.gerrit.extensions.restapi.RestResource,com.google.gerrit.extensions.restapi.RestView)",17,43,"@java.lang.SuppressWarnings({ ""unchecked"", ""rawtypes"" }) private static boolean notModified(javax.servlet.http.HttpServletRequest req, com.google.gerrit.extensions.restapi.RestResource rsrc, com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.RestResource> view) { if (!(com.google.gerrit.httpd.restapi.RestApiServlet.isGetOrHead(req))) { return false; } if (view instanceof com.google.gerrit.extensions.restapi.ETagView) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.ETagView) (view)).getETag(rsrc)); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasETag) { java.lang.String have = req.getHeader(HttpHeaders.IF_NONE_MATCH); if (have != null) { return have.equals(((com.google.gerrit.extensions.restapi.RestResource.HasETag) (rsrc)).getETag()); } } if (rsrc instanceof com.google.gerrit.extensions.restapi.RestResource.HasLastModified) { java.sql.Timestamp m = ((com.google.gerrit.extensions.restapi.RestResource.HasLastModified) (rsrc)).getLastModified(); long d = req.getDateHeader(HttpHeaders.IF_MODIFIED_SINCE); return (d / 1000L) == ((m.getTime()) / 1000L); } return false; }",94a931581b30dee6b73ee5607d5c804bbbf58c57,"notModified(javax.servlet.http.HttpServletRequest,com.google.gerrit.extensions.restapi.RestResource,com.google.gerrit.extensions.restapi.RestView)",98038,359,374
48012,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PaddingManager.java,2.0,"private void setPaddingHeight(int height) { padding.element.getStyle().setHeight(height, Unit.PX); padding.widget.changed(); }",58a38a6c4d3d1bce8b2fcc0bcbc1370c89679aa4,"private void setPaddingHeight(int height) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(padding.element, height); padding.widget.changed(); }",f3e4f0eab8b6d7f02f717ceaf3d3df047cc6d777,setPaddingHeight(int),setPaddingHeight(int),4,1,"private void setPaddingHeight(int height) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(wrapper.element, height); wrapper.widget.changed(); }",1eb0ea39ff4a3b0373e5addd2b5700a919e1270a,setPaddingHeight(int),117813,43,43
39301,gerrit-gwtui_src_main_java_com_google_gerrit_client_Dispatcher.java,20.0,"private com.google.gerrit.client.ui.Screen selectProject() { if (com.google.gerrit.client.Dispatcher.matchPrefix(""/admin/projects/"", token)) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); int c = rest.lastIndexOf(','); if (c < 0) { return new com.google.gerrit.client.admin.ProjectInfoScreen(Project.NameKey.parse(rest)); } else if (c == 0) { return new com.google.gerrit.client.NotFoundScreen(); } com.google.gerrit.reviewdb.client.Project.NameKey k = Project.NameKey.parse(rest.substring(0, c)); java.lang.String panel = rest.substring((c + 1)); if (ProjectScreen.INFO.equals(panel)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if (ProjectScreen.BRANCH.equals(panel)) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } } return new com.google.gerrit.client.NotFoundScreen(); }",5e18efd3f2217f57ff52a1851db3d818e3045e2f,"private com.google.gerrit.client.ui.Screen selectProject() { if (com.google.gerrit.client.Dispatcher.matchPrefix(""/admin/projects/"", token)) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); int c = rest.lastIndexOf(','); if (c < 0) { return new com.google.gerrit.client.admin.ProjectInfoScreen(Project.NameKey.parse(rest)); } else if (c == 0) { return new com.google.gerrit.client.NotFoundScreen(); } com.google.gerrit.reviewdb.client.Project.NameKey k = Project.NameKey.parse(rest.substring(0, c)); java.lang.String panel = rest.substring((c + 1)); if (ProjectScreen.INFO.equals(panel)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if (ProjectScreen.BRANCH.equals(panel)) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } if (ProjectScreen.DASHES.equals(panel)) { return new com.google.gerrit.client.admin.ProjectDashesScreen(k); } } return new com.google.gerrit.client.NotFoundScreen(); }",21f55c12020704a78afd8bfcad3bfac99ccbcde6,selectProject(),selectProject(),13,20,"private com.google.gerrit.client.ui.Screen selectProject() { if (com.google.gerrit.client.Dispatcher.matchPrefix(""/admin/projects/"", token)) { java.lang.String rest = com.google.gerrit.client.Dispatcher.skip(token); int c = rest.lastIndexOf(','); if (c < 0) { return new com.google.gerrit.client.admin.ProjectInfoScreen(Project.NameKey.parse(rest)); } else if (c == 0) { return new com.google.gerrit.client.NotFoundScreen(); } com.google.gerrit.reviewdb.client.Project.NameKey k = Project.NameKey.parse(rest.substring(0, c)); java.lang.String panel = rest.substring((c + 1)); if (ProjectScreen.INFO.equals(panel)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if (ProjectScreen.BRANCH.equals(panel)) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } if (ProjectScreen.DASHBOARDS.equals(panel)) { return new com.google.gerrit.client.admin.ProjectDashboardsScreen(k); } } return new com.google.gerrit.client.NotFoundScreen(); }",5c0c520f2f0dbd703c4236beae0e5b6b34609ff2,selectProject(),87354,318,319
57400,gerrit-server_src_main_java_com_google_gerrit_server_config_ListCaches.java,,,,"public void setMem(long value, long total) { mem = com.google.gerrit.server.config.ListCaches.HitRationInfo.percent(value, total); }",473cce0922a926be59c171b961d86b6207366f6d,,"setMem(long,long)",7,7,"public void setMem(long value, long total) { mem = com.google.gerrit.server.config.ListCaches.HitRatioInfo.percent(value, total); }",6c0f53b038416021c14b4453d699408dca69b840,"setMem(long,long)",120430,41,40
78945,gerrit-server_src_main_java_com_google_gerrit_server_change_H2AccountPatchReviewStore.java,,,,"public static java.lang.String getUrl(SitePaths sitePaths) { return ""jdbc:h2:"" + (sitePaths.db_dir.resolve(""account_patch_reviews"")); }",b2ceb9a90679470fabde4d9deee5b5cbe0766bd8,,getUrl(com.google.gerrit.server.config.SitePaths),4,6,"public static java.lang.String getUrl(SitePaths sitePaths) { return com.google.gerrit.server.schema.H2.createUrl(sitePaths.db_dir.resolve(""account_patch_reviews"")); }",5a8716615e7c710a7e083b62e99b720fb9f5172b,getUrl(com.google.gerrit.server.config.SitePaths),68984,43,51
20354,gerrit-server_src_main_java_com_google_gerrit_server_git_RenameGroupOp.java,,,,"@java.lang.Override public void run() { tryingAgain = false; for (com.google.gerrit.reviewdb.Project.NameKey projectName : projectCache.all()) { if (!(projectCache.get(projectName).getConfig().hasGroup(uuid))) { continue; } try { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { rename(md); } finally { md.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } catch (java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } } }",2a108b5e68e0aa7a464c6fa811911f0b379790b4,,run(),14,1,"@java.lang.Override public void run() { java.lang.Iterable<com.google.gerrit.reviewdb.Project.NameKey> names = (tryingAgain) ? retryOn : projectCache.all(); for (com.google.gerrit.reviewdb.Project.NameKey projectName : names) { com.google.gerrit.server.git.ProjectConfig config = projectCache.get(projectName).getConfig(); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { continue; } try { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { rename(md); } finally { md.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noProject) { continue; } catch (org.eclipse.jgit.errors.ConfigInvalidException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } catch (java.io.IOException err) { com.google.gerrit.server.git.RenameGroupOp.log.error((((""Cannot rename group "" + (oldName)) + "" in "") + projectName), err); } } if ((!(retryOn.isEmpty())) && (!(tryingAgain))) { tryingAgain = true; start(5, java.util.concurrent.TimeUnit.MINUTES); } }",604a3c9170ecbe3614c4de6e0dd122825ce3e90e,run(),17220,230,342
148032,java_com_google_gerrit_server_restapi_project_GetChildProject.java,1.0,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },965634c06201e12ac80de2b08e11ff60a277f3d0,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.restapi.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },bc31987797a22a94b37f49bbddade8e0ce4a5c46,apply(com.google.gerrit.server.project.ChildProjectResource),apply(com.google.gerrit.server.restapi.project.ChildProjectResource),17,1,@java.lang.Override public com.google.gerrit.extensions.common.ProjectInfo apply(com.google.gerrit.server.project.ChildProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((recursive) || (rsrc.isDirectChild())) { return json.format(rsrc.getChild().getProject()); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(rsrc.getChild().getName()); },965634c06201e12ac80de2b08e11ff60a277f3d0,apply(com.google.gerrit.server.project.ChildProjectResource),215452,111,108
53495,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChangesTab.java,30.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if (((rows) != null) && ((selectedRow) < (rows.size()))) { movePointerTo(((selectedRow) + 1)); } },ce86f84d0662a4142f76fbec38d820f38bc070ec,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),9,7,"@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { movePointerTo(((selectedRow) + 1), true); }",5fba247b5f6f1e8367e27172b60a3606fd5340d3,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),135681,59,42
124630,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,42.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void isPureRevertReturnsTrueForPureRevert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); approve(r.getChangeId()); gApi.changes().id(r.getChangeId()).current().submit(); java.lang.String revertId = gApi.changes().id(r.getChangeId()).revert().get().id; assertThat(gApi.changes().id(revertId).isPureRevert()).isTrue(); },a1daffa1695df6f587eb9ab7554a3da80bfb5ab3,,isPureRevertReturnsTrueForPureRevert(),5,148,@org.junit.Test public void pureRevertReturnsTrueForPureRevert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); merge(r); java.lang.String revertId = gApi.changes().id(r.getChangeId()).revert().get().id; assertThat(gApi.changes().id(revertId).pureRevert().isPureRevert).isTrue(); assertThat(gApi.changes().id(revertId).pureRevert(getRemoteHead().toObjectId().name()).isPureRevert).isTrue(); },3cb18afe6af071445bec2f24ce749fa843ce9ad0,pureRevertReturnsTrueForPureRevert(),212101,128,140
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_EditConfigAction.java,2.0,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); }",47337125b902caa507906905d694aaeaffed6a7e,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), project, ""project.config"")); }",df4693a2f021258cfdaf7412ea722fd9966bcd91,onSuccess(com.google.gerrit.client.info.ChangeInfo),onSuccess(com.google.gerrit.client.info.ChangeInfo),7,1,"@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toEditScreen(project, new com.google.gerrit.reviewdb.client.PatchSet.Id(result.legacyId(), 1), ""project.config"")); }",c00502490d894440042d37f739080cd365950612,onSuccess(com.google.gerrit.client.info.ChangeInfo),211100,90,90
94858,gerrit-httpd_src_main_java_com_google_gerrit_httpd_GitOverHttpModule.java,0.0,"@java.lang.Override protected void configureServlets() { java.lang.Class<? extends javax.servlet.Filter> authFilter; if (authConfig.isTrustContainerAuth()) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class; } else if (authConfig.isGitBasicAuth()) { if ((authConfig.getAuthType()) == (OAUTH)) { authFilter = com.google.gerrit.httpd.ProjectOAuthFilter.class; } else { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class; } } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class; } if (isHttpEnabled()) { java.lang.String git = GitOverHttpServlet.URL_REGEX; filterRegex(git).through(authFilter); serveRegex(git).with(com.google.gerrit.httpd.GitOverHttpServlet.class); } filter(""/a/*"").through(authFilter); }",f271a9cc6e397e0fe26e17b8489aebc2f06b617d,"@java.lang.Override protected void configureServlets() { java.lang.Class<? extends javax.servlet.Filter> authFilter; if (authConfig.isTrustContainerAuth()) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class; } else if (authConfig.isGitBasicAuth()) { if ((authConfig.getAuthType()) == (OAUTH)) { authFilter = com.google.gerrit.httpd.ProjectOAuthFilter.class; } else { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class; } } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class; } if (isHttpEnabled()) { java.lang.String git = GitOverHttpServlet.URL_REGEX; filterRegex(git).through(authFilter); serveRegex(git).with(com.google.gerrit.httpd.GitOverHttpServlet.class); } filterRegex(com.google.gerrit.httpd.GitOverHttpModule.LFS_URL_REGEX).through(com.google.gerrit.httpd.ProjectBasicAuthFilter.class); filter(""/a/*"").through(authFilter); }",7c72ce85c5231d5a068ed6f2f7dd206605c0f7c1,configureServlets(),configureServlets(),12,0,"@java.lang.Override protected void configureServlets() { java.lang.Class<? extends javax.servlet.Filter> authFilter; if (authConfig.isTrustContainerAuth()) { authFilter = com.google.gerrit.httpd.ContainerAuthFilter.class; } else if (authConfig.isGitBasicAuth()) { if ((authConfig.getAuthType()) == (OAUTH)) { authFilter = com.google.gerrit.httpd.ProjectOAuthFilter.class; } else { authFilter = com.google.gerrit.httpd.ProjectBasicAuthFilter.class; } } else { authFilter = com.google.gerrit.httpd.ProjectDigestFilter.class; } if (isHttpEnabled()) { java.lang.String git = GitOverHttpServlet.URL_REGEX; filterRegex(git).through(authFilter); serveRegex(git).with(com.google.gerrit.httpd.GitOverHttpServlet.class); } filterRegex(com.google.gerrit.httpd.GitOverHttpModule.LFS_URL_REGEX).through(authFilter); filter(""/a/*"").through(authFilter); }",686831a16620877c7ab2c25308db2bb0941597c6,configureServlets(),140316,261,248
57400,gerrit-server_src_main_java_com_google_gerrit_server_cache_PersistentCache.java,,,,public com.google.gerrit.server.cache.PersistentCache.DiskStats diskStats();,3083519880738875e0d1f86b6cac6bfeb2f7b9d8,,diskStats(),7,2,com.google.gerrit.server.cache.PersistentCache.DiskStats diskStats();,66d99c155dc3154e37ce673e24ac086edb5e6a7c,diskStats(),120442,20,19
71880,gitiles-servlet_src_test_java_com_google_gitiles_LogServletTest.java,2.0,"private void verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit jsonCommit, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gitiles.DateFormatter df) throws java.lang.Exception { assertThat(jsonCommit.commit).isEqualTo(commit.name()); assertThat(jsonCommit.tree).isEqualTo(commit.getTree().name()); java.util.ArrayList<java.lang.String> expectedParents = new java.util.ArrayList<>(); for (int i = 0; i < (commit.getParentCount()); i++) { expectedParents.add(commit.getParent(i).name()); } assertThat(jsonCommit.parents).containsExactlyElementsIn(expectedParents); assertThat(jsonCommit.author.name).isEqualTo(commit.getAuthorIdent().getName()); assertThat(jsonCommit.author.email).isEqualTo(commit.getAuthorIdent().getEmailAddress()); assertThat(jsonCommit.author.time).isEqualTo(df.format(commit.getAuthorIdent())); assertThat(jsonCommit.committer.name).isEqualTo(commit.getCommitterIdent().getName()); assertThat(jsonCommit.committer.email).isEqualTo(commit.getCommitterIdent().getEmailAddress()); assertThat(jsonCommit.committer.time).isEqualTo(df.format(commit.getCommitterIdent())); assertThat(jsonCommit.message).isEqualTo(commit.getFullMessage()); }",e7dd2b6a64736e234998946450dcea7e3c5ab562,"private void verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit jsonCommit, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { com.google.gitiles.GitilesAccess access = new com.google.gitiles.TestGitilesAccess(repo.getRepository()).forRequest(null); com.google.gitiles.DateFormatter df = new com.google.gitiles.DateFormatter(access, com.google.gitiles.DateFormatter.Format.DEFAULT); assertThat(jsonCommit.commit).isEqualTo(commit.name()); assertThat(jsonCommit.tree).isEqualTo(commit.getTree().name()); java.util.ArrayList<java.lang.String> expectedParents = new java.util.ArrayList<>(); for (int i = 0; i < (commit.getParentCount()); i++) { expectedParents.add(commit.getParent(i).name()); } assertThat(jsonCommit.parents).containsExactlyElementsIn(expectedParents); assertThat(jsonCommit.author.name).isEqualTo(commit.getAuthorIdent().getName()); assertThat(jsonCommit.author.email).isEqualTo(commit.getAuthorIdent().getEmailAddress()); assertThat(jsonCommit.author.time).isEqualTo(df.format(commit.getAuthorIdent())); assertThat(jsonCommit.committer.name).isEqualTo(commit.getCommitterIdent().getName()); assertThat(jsonCommit.committer.email).isEqualTo(commit.getCommitterIdent().getEmailAddress()); assertThat(jsonCommit.committer.time).isEqualTo(df.format(commit.getCommitterIdent())); assertThat(jsonCommit.message).isEqualTo(commit.getFullMessage()); }",4b4f8cf5abbfdf2b19970d36356c0ed260914b62,"verifyJsonCommit(com.google.gitiles.CommitJsonData$Commit,org.eclipse.jgit.revwalk.RevCommit,com.google.gitiles.DateFormatter)","verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit,org.eclipse.jgit.revwalk.RevCommit)",4,2,"private void verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit jsonCommit, org.eclipse.jgit.revwalk.RevCommit commit) throws java.lang.Exception { repo.getRevWalk().parseBody(commit); com.google.gitiles.GitilesAccess access = new com.google.gitiles.TestGitilesAccess(repo.getRepository()).forRequest(null); com.google.gitiles.DateFormatter df = new com.google.gitiles.DateFormatter(access, com.google.gitiles.DateFormatter.Format.DEFAULT); assertThat(jsonCommit.commit).isEqualTo(commit.name()); assertThat(jsonCommit.tree).isEqualTo(commit.getTree().name()); java.util.ArrayList<java.lang.String> expectedParents = new java.util.ArrayList<>(); for (int i = 0; i < (commit.getParentCount()); i++) { expectedParents.add(commit.getParent(i).name()); } assertThat(jsonCommit.parents).containsExactlyElementsIn(expectedParents); assertThat(jsonCommit.author.name).isEqualTo(commit.getAuthorIdent().getName()); assertThat(jsonCommit.author.email).isEqualTo(commit.getAuthorIdent().getEmailAddress()); assertThat(jsonCommit.author.time).isEqualTo(df.format(commit.getAuthorIdent())); assertThat(jsonCommit.committer.name).isEqualTo(commit.getCommitterIdent().getName()); assertThat(jsonCommit.committer.email).isEqualTo(commit.getCommitterIdent().getEmailAddress()); assertThat(jsonCommit.committer.time).isEqualTo(df.format(commit.getCommitterIdent())); assertThat(jsonCommit.message).isEqualTo(commit.getFullMessage()); }",35dddda46d66495b92338c576d3c5a9c0df05308,"verifyJsonCommit(com.google.gitiles.CommitJsonData.Commit,org.eclipse.jgit.revwalk.RevCommit)",203522,355,366
46466,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectBranchesScreen.java,0.0,"@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.listBranches(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ListBranchesResult>(this) { @java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } } }); savedPanel = BRANCH; }",8c140a19f4145e5b55cdd2727761424fe2b8d8b8,@java.lang.Override protected void onLoad() { super.onLoad(); refreshBranches(); savedPanel = BRANCH; },bc2258160c0464b811b91d9df953ed80e2ee55ca,onLoad(),onLoad(),7,0,"@java.lang.Override protected void onLoad() { super.onLoad(); addPanel.setVisible(false); com.google.gerrit.client.access.AccessMap.get(getProjectKey(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.access.ProjectAccessInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.access.ProjectAccessInfo result) { addPanel.setVisible(result.canAddRefs()); } }); refreshBranches(); savedPanel = BRANCH; }",3c5e992b38e79ed0a7339369027c7354613e375c,onLoad(),57242,26,125
54044,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,18.0,"@org.junit.Test public void copyAllScoresOnTrivialRebase() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; java.lang.String contents = ""contents""; codeReview.setCopyAllScoresOnTrivialRebase(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent()); com.google.gerrit.acceptance.PushOneCommit.Result r1 = push.to(git, ""refs/for/master""); merge(r1); push = pushFactory.create(db, user.getIdent(), ""non-conflicting"", ""b.txt"", ""other contents""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = push.to(git, ""refs/for/master""); merge(r2); git.checkout().setName(r1.getCommit().name()).call(); push = pushFactory.create(db, user.getIdent(), subject, file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r3 = push.to(git, ""refs/for/master""); review(r3, 1); assertApproval(r3, 1); rebase(r3); assertApproval(r3, 1); }",8d15e996acf941b547f930c0eef927c0b6269de4,"@org.junit.Test public void copyAllScoresOnTrivialRebase() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; java.lang.String contents = ""contents""; codeReview.setCopyAllScoresOnTrivialRebase(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent()); com.google.gerrit.acceptance.PushOneCommit.Result r1 = push.to(git, ""refs/for/master""); merge(r1); push = pushFactory.create(db, user.getIdent(), ""non-conflicting"", ""b.txt"", ""other contents""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = push.to(git, ""refs/for/master""); merge(r2); git.checkout().setName(r1.getCommit().name()).call(); push = pushFactory.create(db, user.getIdent(), subject, file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r3 = push.to(git, ""refs/for/master""); revision(r3).like(); assertApproval(r3, 1); rebase(r3); assertApproval(r3, 1); }",1c2f4b3fbbca00c527f8290c543829931ca23c7b,copyAllScoresOnTrivialRebase(),copyAllScoresOnTrivialRebase(),3,18,"@org.junit.Test public void copyAllScoresOnTrivialRebase() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; java.lang.String contents = ""contents""; codeReview.setCopyAllScoresOnTrivialRebase(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent()); com.google.gerrit.acceptance.PushOneCommit.Result r1 = push.to(git, ""refs/for/master""); merge(r1); push = pushFactory.create(db, user.getIdent(), ""non-conflicting"", ""b.txt"", ""other contents""); com.google.gerrit.acceptance.PushOneCommit.Result r2 = push.to(git, ""refs/for/master""); merge(r2); git.checkout().setName(r1.getCommit().name()).call(); push = pushFactory.create(db, user.getIdent(), subject, file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r3 = push.to(git, ""refs/for/master""); revision(r3).review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); assertApproval(r3, 1); rebase(r3); assertApproval(r3, 1); }",0b93b946483785ba7c503b8bc7defd7452a274d0,copyAllScoresOnTrivialRebase(),39638,296,317
47111,gitiles-servlet_src_main_java_com_google_gitiles_ViewFilter.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean isEmptyPath(java.lang.String path) { return (path.isEmpty()) || (path.equals(""/"")); }",632e75d2890415c89e37da91ae30782e412520ae,,isEmptyPath(java.lang.String),2,6,"private static boolean isEmptyOrSlash(java.lang.String path) { return (path.isEmpty()) || (path.equals(""/"")); }",357e082adb42e463a4027d8b1f0b3543180532e8,isEmptyOrSlash(java.lang.String),60347,29,30
63560,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,4.0,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); int result = 0; try { index.markReady(false); index.deleteAll(); result = indexAll(); index.markReady(true); } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } sysManager.stop(); dbManager.stop(); return result; }",e9d359c01a98312ec505b0a8bc287e8a0842720c,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); int result = 0; try { index.markReady(false); index.deleteAll(); result = indexAll(); index.markReady(true); } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } sysManager.stop(); dbManager.stop(); return result; }",11680ca078de6fa9b32c2fcc2fc8e211360f157c,run(),run(),2,4,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); if ((version) == null) { version = com.google.gerrit.server.index.ChangeSchemas.getLatest().getVersion(); } com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); index = sysInjector.getInstance(com.google.gerrit.server.index.IndexCollection.class).getSearchIndex(); int result = 0; try { index.markReady(false); index.deleteAll(); result = indexAll(); index.markReady(true); } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } sysManager.stop(); dbManager.stop(); return result; }",aee23684f9f0705d98bca47ce33f8c57b61da1ba,run(),91081,339,339
34741,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,,,,"@java.lang.Override public void run() throws java.lang.Exception { if (!(currentUser.getCapabilities().canAdministrateServer())) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""Administrator\"" capability."", currentUser.getUserName()); throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); } parseCommandLine(); if ((active) && (inactive)) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, ""You can't use both --active and --inactive""); } setAccount(); }",6fcfe37a4ca669e4dc549206eb227a31e454acdf,,run(),5,6,"@java.lang.Override public void run() throws java.lang.Exception { if (!(currentUser.getCapabilities().canAdministrateServer())) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""Administrator\"" capability."", currentUser.getUserName()); throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, msg); } parseCommandLine(); validate(); setAccount(); }",c49a76120580924f23611c089d4116f80d6c7434,run(),70834,136,94
67581,gerrit-server_src_main_java_com_google_gerrit_server_account_GetPreferences.java,1.0,"private java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Changes"", ""#/dashboard/self"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Groups"", ""#/groups/self"", null)); } return my; }",60a6e8b74e07379d357dc7954c9cfd2f84695211,"private java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Changes"", ""#/dashboard/self"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Change Edits"", ""#/q/has:edit"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Groups"", ""#/groups/self"", null)); } return my; }",44decc8b7bb7a4b1e9345b5513520cf83a0edd92,"my(com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)","my(com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)",12,1,"private java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my(com.google.gerrit.server.account.VersionedAccountPreferences v, org.eclipse.jgit.lib.Repository allUsers) { java.util.List<com.google.gerrit.extensions.webui.TopMenu.MenuItem> my = my(v); if ((my.isEmpty()) && (!(v.isDefaults()))) { try { com.google.gerrit.server.account.VersionedAccountPreferences d = com.google.gerrit.server.account.VersionedAccountPreferences.forDefault(); d.load(allUsers); my = my(d); } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { com.google.gerrit.server.account.GetPreferences.log.warn(""cannot read default preferences"", e); } } if (my.isEmpty()) { my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Changes"", ""#/dashboard/self"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Drafts"", ""#/q/owner:self+is:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Draft Comments"", ""#/q/has:draft"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Edits"", ""#/q/has:edit"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Watched Changes"", ""#/q/is:watched+is:open"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Starred Changes"", ""#/q/is:starred"", null)); my.add(new com.google.gerrit.extensions.webui.TopMenu.MenuItem(""Groups"", ""#/groups/self"", null)); } return my; }",923d051f030f4a57ce8ca462c8ac7e5b444d9c7d,"my(com.google.gerrit.server.account.VersionedAccountPreferences,org.eclipse.jgit.lib.Repository)",71567,473,472
47774,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void registerCmEvents(net.codemirror.lib.CodeMirror cm) { cm.on(""cursorActivity"", updateActiveLine(cm)); cm.on(""scroll"", doScroll(otherCM(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'j'"", moveCursorDown(cm, 1))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'k'"", moveCursorDown(cm, (-1)))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'o'"", toggleOpenBox(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""Enter"", toggleOpenBox(cm))); if (com.google.gerrit.client.Gerrit.isSignedIn()) { cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'c'"", insertNewDraft(cm))); } }",9d8f9842cf48dea975ca01f21f1eb69e5054ad2e,,registerCmEvents(net.codemirror.lib.CodeMirror),8,36,"private void registerCmEvents(net.codemirror.lib.CodeMirror cm) { cm.on(""cursorActivity"", updateActiveLine(cm)); cm.on(""scroll"", doScroll(otherCM(cm))); cm.on(""mousedown"", ignoreRightClick()); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'u'"", upToChange())); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'o'"", toggleOpenBox(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""Enter"", toggleOpenBox(cm))); if (com.google.gerrit.client.Gerrit.isSignedIn()) { cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""'c'"", insertNewDraft(cm))); } for (java.lang.String c : new java.lang.String[]{ ""A"", ""C"", ""D"", ""I"", ""O"", ""P"", ""R"", ""S"", ""U"", ""X"", ""Y"", ""~"" }) { net.codemirror.lib.CodeMirror.disableUnwantedKey(""vim"", c); } }",2399c17ec834dea1e0608da1cd9323173a96e2d5,registerCmEvents(net.codemirror.lib.CodeMirror),122930,221,271
75931,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySideChunkManager.java,4.0,"@java.lang.Override public void run() { int line = (cm.extras().hasActiveLine()) ? cm.getLineNumber(cm.extras().activeLine()) : 0; int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.DiffChunkInfo(cm.side(), line, 0, false), getDiffChunkComparator()); diffChunkNavHelper(chunks, cm, res, dir); }",acb3e6954f558ab21c5b7f13941831749d266e07,"@java.lang.Override public void run() { int line = (cm.extras().hasActiveLine()) ? cm.getLineNumber(cm.extras().activeLine()) : 0; int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.DiffChunkInfo(cm.side(), line, 0, false), getDiffChunkComparator()); diffChunkNavHelper(chunks, host, res, dir); }",384407028f0dfb7180787a8d3e23db352c4e5450,run(),run(),4,4,"@java.lang.Override public void run() { int line = (cm.extras().hasActiveLine()) ? cm.getLineNumber(cm.extras().activeLine()) : 0; int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.DiffChunkInfo(cm.side(), line, 0, false), getDiffChunkComparator()); diffChunkNavHelper(chunks, cm, res, dir); }",acb3e6954f558ab21c5b7f13941831749d266e07,run(),178572,97,97
75151,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,26.0,public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { writeCommit(batch); org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } },16fceef568f4c9b6baadeebcf8ff2f99580afdb8,"public org.eclipse.jgit.lib.ObjectId commit() throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerProvider.get(); updateManager.add(this); updateManager.execute(); return getResult(); }",69923dfdc7dd207490ab02d6ff795f41ef54784d,commit(),commit(),7,26,"public org.eclipse.jgit.lib.ObjectId commit() throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(getProjectName()); updateManager.add(this); updateManager.execute(); return getResult(); }",cc0a34335190c7087782b5ad9675f5a9480d6c50,commit(),175780,75,77
72417,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,,,,"public com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.common.collect.FluentIterable.from(dbProvider.get().starredChanges().byChange(changeId)).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.StarredChange, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(com.google.gerrit.reviewdb.client.StarredChange in) { return in.getAccountId(); } }).toSet(); } return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""-"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }).toSet(); }",b00267973831d8ddccb0b802b55913b139cb9f05,,byChange(com.google.gerrit.reviewdb.client.Change$Id),11,2,"public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { return com.google.common.collect.FluentIterable.from(dbProvider.get().starredChanges().byChange(changeId)).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.StarredChange, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.reviewdb.client.StarredChange in) { return in.getAccountId(); } }); } return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }",e7a2f6efb8cce2f0c117f7e51e63b540ae5ceb70,byChange(com.google.gerrit.reviewdb.client.Change$Id),59037,384,346
46600,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,,,,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { loadConfigInfo(info); } }); }",b1ecb80d499861aa8c7f29fd8330083dd7884cff,,onLoad(),28,0,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.changes.ChangeApi.detail(changeId.get(), java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS, ListChangesOption.CURRENT_ACTIONS), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { info.init(); loadConfigInfo(info); } }); }",814bbe4844b9235b9d49d2f36258b42cea28fc73,onLoad(),123605,107,137
72429,src_main_java_com_amd_gerrit_plugins_manifestsubscription_ManifestSubscription.java,,,,"private void processManifestChange(com.amd.gerrit.plugins.manifestsubscription.Event event, java.lang.String projectName, java.lang.String branchName) { com.amd.gerrit.plugins.manifestsubscription.VersionedManifests versionedManifests; try { versionedManifests = parseManifests(event); if (versionedManifests != null) { com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest cManifest = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(versionedManifests); java.util.Map<java.lang.String, com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest> manifests = versionedManifests.getManifests(); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest; java.lang.String store = enabledManifestRepos.get(projectName).getStore(); com.google.common.collect.Table<java.lang.String, java.lang.String, java.lang.String> lookup = com.google.common.collect.HashBasedTable.create(); for (java.lang.String path : manifests.keySet()) { java.lang.String bp = (branchName + ""/"") + path; try { manifest = cManifest.getCanonicalManifest(path); watchCanonicalManifest(manifest, store, bp); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.affixManifest(gitRepoManager, manifest, lookup); updateManifest(store, ((com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX) + bp), manifest); } catch (com.amd.gerrit.plugins.manifestsubscription.ManifestReadException e) { e.printStackTrace(); } } } } catch (javax.xml.bind.JAXBException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(); } }",1bffd1ddfc9ba2f137e4cb82f7a98dad1a58033d,,"processManifestChange(com.amd.gerrit.plugins.manifestsubscription.Event,java.lang.String,java.lang.String)",6,3,"private void processManifestChange(com.amd.gerrit.plugins.manifestsubscription.Event event, java.lang.String projectName, java.lang.String branchName) { try { com.amd.gerrit.plugins.manifestsubscription.VersionedManifests versionedManifests = parseManifests(event); processManifestChange(versionedManifests, projectName, branchName); } catch (javax.xml.bind.JAXBException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(); } }",d924c3def536ae08890f1328ae3b0c485beb42f2,"processManifestChange(com.amd.gerrit.plugins.manifestsubscription.Event,java.lang.String,java.lang.String)",75074,422,117
163794,java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,3.0,"public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""No change found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results"", cd, projectState); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(""Submit rule '%s' for change %s of %s has no solution."", getSubmitRuleName(), cd.getId(), projectState.getName())); } return resultsToSubmitRecord(getSubmitRule(), results, cd); }",6d775c2ca789e5419241a4a21ce62a8c81fb3e20,"public java.util.Collection<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""No change found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } return prologRule.evaluate(cd, opts); }",47c61d1ea271b9f091d2ab7f4da1cdb6a7f3b4b2,evaluate(com.google.gerrit.server.query.change.ChangeData),evaluate(com.google.gerrit.server.query.change.ChangeData),15,3,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate(com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.reviewdb.client.Change change; com.google.gerrit.server.project.ProjectState projectState; try { change = cd.change(); if (change == null) { throw new com.google.gwtorm.server.OrmException(""Change not found""); } projectState = projectCache.get(cd.project()); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(cd.project()); } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchProjectException e) { return ruleError((""Error looking up change "" + (cd.getId())), e); } if ((!(opts.allowClosed())) && (change.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } return com.google.common.collect.ImmutableList.copyOf(prologRule.evaluate(cd, opts)); }",5cab6c0c2ab38bf839322384eb5e23f8fd53822d,evaluate(com.google.gerrit.server.query.change.ChangeData),123246,287,299
84151,gitiles-servlet_src_test_java_com_google_gitiles_ServletTest.java,15.0,"protected com.google.gitiles.FakeHttpServletResponse buildResponse(java.lang.String path, java.lang.String queryString, int expectedStatus) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest.newRequest(); req.setPathInfo(path); if (queryString != null) { req.setQueryString(queryString); } com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse(); servlet.service(req, res); assertThat(res.getStatus()).isEqualTo(expectedStatus); return res; }",5446a5161418aedac77c917e13f0822335848a0d,"protected com.google.gitiles.FakeHttpServletResponse buildResponse(java.lang.String path, java.lang.String queryString, int expectedStatus) throws java.lang.Exception { com.google.gitiles.FakeHttpServletRequest req = com.google.gitiles.FakeHttpServletRequest.newRequest(); req.setHeader(HttpHeaders.ORIGIN, ""http://localhost""); req.setPathInfo(path); if (queryString != null) { req.setQueryString(queryString); } com.google.gitiles.FakeHttpServletResponse res = new com.google.gitiles.FakeHttpServletResponse(); servlet.service(req, res); assertThat(res.getStatus()).isEqualTo(expectedStatus); return res; }",7dc185017a1c7fc9d315cb727e47cdfa5db144b1,"buildResponse(java.lang.String,java.lang.String,int)","buildResponse(java.lang.String,java.lang.String,int)",3,16,"protected com.google.gitiles.FakeHttpServletResponse buildResponse(java.lang.String path, java.lang.String queryString, int expectedStatus) throws java.lang.Exception { return buildResponse(path, queryString, expectedStatus, ""http://localhost""); }",0d6f93b0a1a7f57f0040726c89d096cbb2f007ab,"buildResponse(java.lang.String,java.lang.String,int)",3453,148,56
92438,gerrit-server_src_main_java_com_google_gerrit_server_git_AbandonOp.java,0.0,"com.google.gerrit.server.git.AbandonOp create(@com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable java.lang.String msgTxt, @com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling);",87e7740a4aab85e95a649c29a7fec0bc7e825c9a,"com.google.gerrit.server.git.AbandonOp create(@com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable java.lang.String msgTxt, @com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify);",d48be93273cd6e561ae65a7f95533d98daa811dc,"create(com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.extensions.api.changes.NotifyHandling)","create(com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.Multimap)",3,4,"com.google.gerrit.server.git.AbandonOp create(@com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account, @com.google.inject.assistedinject.Assisted @com.google.gerrit.common.Nullable java.lang.String msgTxt, @com.google.inject.assistedinject.Assisted com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, @com.google.inject.assistedinject.Assisted com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify);",3681a6520a546671a69772fbdfbff7328b7f1ed0,"create(com.google.gerrit.reviewdb.client.Account,java.lang.String,com.google.gerrit.extensions.api.changes.NotifyHandling,com.google.common.collect.Multimap)",174309,187,176
97811,gerrit-server_src_main_java_com_google_gerrit_server_permissions_PermissionBackend.java,,,,public boolean testOrFalse(com.google.gerrit.server.permissions.ChangePermissionOrLabel perm) { try { return test(perm); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { return false; } },f9f163726985c142ec3f49fe6c0a0e02002dfe3b,,testOrFalse(com.google.gerrit.server.permissions.ChangePermissionOrLabel),18,16,"public boolean testOrFalse(com.google.gerrit.server.permissions.ChangePermissionOrLabel perm) { try { return test(perm); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.permissions.PermissionBackend.logger.warn(((""Cannot test "" + perm) + ""; assuming false""), e); return false; } }",d61f07a5781f46eb38601680c6a69e478e9660b3,testOrFalse(com.google.gerrit.server.permissions.ChangePermissionOrLabel),92550,56,90
148032,javatests_com_google_gerrit_server_group_db_GroupConfigTest.java,1.0,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",5c4d32ac13ef9d3e9c90c24d5e95e539ebe6f58c,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the account users-XYZ""); groupConfig.commit(metaDataUpdate); } }",7910c7b8ac5dc7be1dd28969b56b161cdcad8036,nameOfNewGroupMustNotBeNull(),nameOfNewGroupMustNotBeNull(),17,1,"@org.junit.Test public void nameOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().setNameKey(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage(""Name of the group users-XYZ""); groupConfig.commit(metaDataUpdate); } }",5c4d32ac13ef9d3e9c90c24d5e95e539ebe6f58c,nameOfNewGroupMustNotBeNull(),218835,193,193
39454,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public <T extends com.google.gwt.core.client.JavaScriptObject> void put(com.google.gwtjsonrpc.common.AsyncCallback<T> cb) { send(RequestBuilder.PUT, cb); }",766c9861ddd87dbf65c7512b1f6c9a10ec337d92,,put(com.google.gwtjsonrpc.common.AsyncCallback),2,11,"public <T extends com.google.gwt.core.client.JavaScriptObject> void put(com.google.gwtjsonrpc.common.AsyncCallback<T> cb) { send(com.google.gerrit.client.rpc.PUT, cb); }",60bf5ec9bdfac4e4a5eae68049be2ac27ec715c4,put(com.google.gwtjsonrpc.common.AsyncCallback),114681,47,56
60027,gerrit-server_src_main_java_com_google_gerrit_server_change_RevisionResource.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,com.google.gerrit.server.change.Optional<com.google.gerrit.server.edit.ChangeEdit> getEdit() { return edit; },9e183ef78e45ff4d05136aaa55657eb6d7509948,,getEdit(),5,5,com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> getEdit() { return edit; },c2acebe0f87286bb5db87a6f04f5319e9f555020,getEdit(),186931,35,32
72429,src_main_java_com_amd_gerrit_plugins_manifestsubscription_ManifestSubscription.java,,,,"private void processProjectConfigChange(com.amd.gerrit.plugins.manifestsubscription.Event event) { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.git.ProjectConfig oldCfg = parseConfig(p, event.getOldObjectId()); com.google.gerrit.server.git.ProjectConfig newCfg = parseConfig(p, event.getNewObjectId()); if (oldCfg != null) { java.lang.String oldStore = oldCfg.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if ((oldStore != null) && (!(oldStore.isEmpty()))) { stores.remove(oldStore); enabledManifestRepos.remove(event.getProjectName()); java.util.Iterator<Table.Cell<com.amd.gerrit.plugins.manifestsubscription.ProjectBranchKey, java.lang.String, java.util.Set<java.lang.String>>> iter = subscribedRepos.cellSet().iterator(); while (iter.hasNext()) { if (oldStore.equals(iter.next().getColumnKey())) { iter.remove(); } } } } if (newCfg != null) { loadStoreFromProjectConfig(event.getProjectName(), newCfg); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(); } }",e356bc784365a2a2c519c4af99ddb1b407db1099,,processProjectConfigChange(com.amd.gerrit.plugins.manifestsubscription.Event),6,1,"private void processProjectConfigChange(com.amd.gerrit.plugins.manifestsubscription.Event event) { com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); try { com.google.gerrit.server.git.ProjectConfig oldCfg = parseConfig(p, event.getOldObjectId()); com.google.gerrit.server.git.ProjectConfig newCfg = parseConfig(p, event.getNewObjectId()); if (oldCfg != null) { java.lang.String oldStore = oldCfg.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if ((oldStore != null) && (!(oldStore.isEmpty()))) { manifestStores.row(oldStore).clear(); enabledManifestSource.remove(event.getProjectName()); java.util.Iterator<Table.Cell<com.amd.gerrit.plugins.manifestsubscription.ProjectBranchKey, java.lang.String, java.util.Map<java.lang.String, java.util.Set<com.amd.gerrit.plugins.manifestsubscription.manifest.Project>>>> iter = subscribedRepos.cellSet().iterator(); while (iter.hasNext()) { if (oldStore.equals(iter.next().getColumnKey())) { iter.remove(); } } } } if (newCfg != null) { loadStoreFromProjectConfig(event.getProjectName(), newCfg); } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | javax.xml.bind.JAXBException e) { e.printStackTrace(); } }",fab99668e5003321fa52d0157b9457127933590b,processProjectConfigChange(com.amd.gerrit.plugins.manifestsubscription.Event),75077,340,374
129966,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,45.0,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }",447ccb31afd564bd441ed2b90ba5e22cf5825670,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null); accountLoader.fill(); return rev; } }",02b0b305e4b19312578a778c8a4d8776a2b58c1d,"getRevisionInfo(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)","getRevisionInfo(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)",5,47,"public com.google.gerrit.extensions.common.RevisionInfo getRevisionInfo(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { com.google.gerrit.extensions.common.RevisionInfo rev = toRevisionInfo(cd, in, repo, rw, true, null, isWorldReadable(cd)); accountLoader.fill(); return rev; } }",04af92609cab2ec8819692bf007493c0664fa5b0,"getRevisionInfo(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)",42195,228,234
80930,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbChangeState.java,15.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage of(@com.google.gerrit.common.Nullable com.google.gerrit.server.notedb.NoteDbChangeState state) { return state != null ? state.getPrimaryStorage() : com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.REVIEW_DB; },22ec0a391ce64839d01a7d28e794559b3f3c6d11,,of(com.google.gerrit.server.notedb.NoteDbChangeState),8,14,public static com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage of(com.google.gerrit.server.notedb.NoteDbChangeState s) { return s != null ? s.getPrimaryStorage() : com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.REVIEW_DB; },db13e37a0a2d463b63c7f96523a3dd648ef80d48,of(com.google.gerrit.server.notedb.NoteDbChangeState),157837,89,82
60010,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditFileBox.java,1.0,"@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { file.setFocus(true); } }); }",3ebb133809e501a5aaf9eb5870a7354ccddd2893,"@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if (com.google.common.base.Strings.isNullOrEmpty(fileName)) { file.setFocus(true); } else { content.setFocus(true); } } }); }",905278540c2c4608cc5f2dc62a5e69058100da3a,onLoad(),onLoad(),3,1,"@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if (fileName.isEmpty()) { file.setFocus(true); } else { content.setFocus(true); } } }); }",101b1f2362b6ce7dec171fa0e6a714ee433afe3f,onLoad(),194556,129,118
65679,src_main_java_com_googlesource_gerrit_plugins_deleteproject_fs_FilesystemDeleteHandler.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { if (!(cfgFactory.getFromGerritConfig(pluginName).getBoolean(""allowDeletionOfReposWithTags"", true))) { assertHasNoTags(rsrc); } }",20ed1d13d1880ae02781bf6e6a840777c0791c4c,,assertCanDelete(com.google.gerrit.server.project.ProjectResource),7,1,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, boolean preserveGitRepository) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { if ((!preserveGitRepository) && (!(cfgFactory.getFromGerritConfig(pluginName).getBoolean(""allowDeletionOfReposWithTags"", true)))) { assertHasNoTags(rsrc); } }",219d73a2345d3e84957a4dc569c0108b1a2cb20f,"assertCanDelete(com.google.gerrit.server.project.ProjectResource,boolean)",175552,77,89
67920,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CommitBox.java,15.0,"void set(com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor, com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = change.revision(revision); com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo.commit(); commitName.setText(revision); idText.setText((""Change-Id: "" + (change.change_id()))); idText.setPreviewText(change.change_id()); com.google.gerrit.client.change.CommitBox.formatLink(commit.author(), authorPanel, authorNameEmail, authorDate, change); com.google.gerrit.client.change.CommitBox.formatLink(commit.committer(), committerPanel, committerNameEmail, committerDate, change); text.setHTML(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commit.message()).linkify())); setWebLinks(change, revision, revInfo); if ((revInfo.commit().parents().length()) > 1) { mergeCommit.setVisible(true); } setParents(change.project(), revInfo.commit().parents()); boolean parentNotCurrent = false; if (revInfo.has_actions()) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = revInfo.actions(); if (actions.containsKey(""rebase"")) { parentNotCurrent = actions.get(""rebase"").enabled(); } } com.google.gwt.user.client.ui.UIObject.setVisible(parentNotCurrentText, parentNotCurrent); parentNotCurrentText.setInnerText((parentNotCurrent ? ""\u25cf"" : """")); }",ba846eee078da3896bfb70eb46f2d430dce23cb7,"void set(com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor, com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = change.revision(revision); com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo.commit(); commitName.setText(revision); idText.setText((""Change-Id: "" + (change.change_id()))); idText.setPreviewText(change.change_id()); com.google.gerrit.client.change.CommitBox.formatLink(commit.author(), authorPanel, authorNameEmail, authorDate, change); com.google.gerrit.client.change.CommitBox.formatLink(commit.committer(), committerPanel, committerNameEmail, committerDate, change); text.setHTML(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commit.message()).linkify())); setWebLinks(change, revision, revInfo); if ((revInfo.commit().parents().length()) > 1) { mergeCommit.setVisible(true); } setParents(change.project(), revInfo.commit().parents()); setParentNotCurrent(false); }",2b5c5920b5a0b70265572eb944e8613aaaba1adf,"set(com.google.gerrit.client.ui.CommentLinkProcessor,com.google.gerrit.client.changes.ChangeInfo,java.lang.String)","set(com.google.gerrit.client.ui.CommentLinkProcessor,com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",2,14,"void set(com.google.gerrit.client.ui.CommentLinkProcessor commentLinkProcessor, com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = change.revision(revision); com.google.gerrit.client.changes.ChangeInfo.CommitInfo commit = revInfo.commit(); commitName.setText(revision); idText.setText((""Change-Id: "" + (change.change_id()))); idText.setPreviewText(change.change_id()); com.google.gerrit.client.change.CommitBox.formatLink(commit.author(), authorPanel, authorNameEmail, authorDate, change); com.google.gerrit.client.change.CommitBox.formatLink(commit.committer(), committerPanel, committerNameEmail, committerDate, change); text.setHTML(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commit.message()).linkify())); setWebLinks(change, revision, revInfo); if ((revInfo.commit().parents().length()) > 1) { mergeCommit.setVisible(true); } setParents(change.project(), revInfo.commit().parents()); }",7e5e4dd6c5ca91338f6c65f78a8bfd60824e8c18,"set(com.google.gerrit.client.ui.CommentLinkProcessor,com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",41542,302,295
55560,gerrit-pgm_src_main_java_com_google_gerrit_pgm_http_jetty_JettyServer.java,21.0,"private org.eclipse.jetty.util.thread.ThreadPool threadPool(org.eclipse.jgit.lib.Config cfg) { int maxThreads = cfg.getInt(""httpd"", null, ""maxthreads"", 25); int minThreads = cfg.getInt(""httpd"", null, ""minthreads"", 5); int maxCapacity = cfg.getInt(""httpd"", null, ""maxqueued"", 50); int idleTimeout = ((int) (java.util.concurrent.TimeUnit.MILLISECONDS.convert(60, java.util.concurrent.TimeUnit.SECONDS))); org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool(maxThreads, minThreads, idleTimeout, new org.eclipse.jetty.util.BlockingArrayQueue<java.lang.Runnable>(minThreads, minThreads, maxCapacity)); pool.setName(""HTTP""); return pool; }",a68e2d665d6480dab9d6d180cfee5023d3d5682f,"private org.eclipse.jetty.util.thread.ThreadPool threadPool(org.eclipse.jgit.lib.Config cfg) { int maxThreads = cfg.getInt(""httpd"", null, ""maxthreads"", 25); int minThreads = cfg.getInt(""httpd"", null, ""minthreads"", 5); int maxQueued = cfg.getInt(""httpd"", null, ""maxqueued"", 50); int idleTimeout = ((int) (java.util.concurrent.TimeUnit.MILLISECONDS.convert(60, java.util.concurrent.TimeUnit.SECONDS))); int maxCapacity = (maxQueued == 0) ? java.lang.Integer.MAX_VALUE : maxQueued; org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool(maxThreads, minThreads, idleTimeout, new org.eclipse.jetty.util.BlockingArrayQueue<java.lang.Runnable>(minThreads, minThreads, maxCapacity)); pool.setName(""HTTP""); return pool; }",0010c0f4fea587cf025dd31d4006cf41cb951e78,threadPool(org.eclipse.jgit.lib.Config),threadPool(org.eclipse.jgit.lib.Config),3,21,"private org.eclipse.jetty.util.thread.ThreadPool threadPool(org.eclipse.jgit.lib.Config cfg) { int maxThreads = cfg.getInt(""httpd"", null, ""maxthreads"", 25); int minThreads = cfg.getInt(""httpd"", null, ""minthreads"", 5); int maxQueued = cfg.getInt(""httpd"", null, ""maxqueued"", 50); int idleTimeout = ((int) (java.util.concurrent.TimeUnit.MILLISECONDS.convert(60, java.util.concurrent.TimeUnit.SECONDS))); int maxCapacity = (maxQueued == 0) ? java.lang.Integer.MAX_VALUE : java.lang.Math.max(minThreads, maxQueued); org.eclipse.jetty.util.thread.QueuedThreadPool pool = new org.eclipse.jetty.util.thread.QueuedThreadPool(maxThreads, minThreads, idleTimeout, new org.eclipse.jetty.util.BlockingArrayQueue<java.lang.Runnable>(minThreads, minThreads, maxCapacity)); pool.setName(""HTTP""); return pool; }",773c7c3bff85d6302b5b6d21f7b72d34821efe7b,threadPool(org.eclipse.jgit.lib.Config),14962,214,225
34953,gerrit-server_src_main_java_com_google_gerrit_server_account_UniversalGroupBackend.java,,,,@java.lang.Override public com.google.gerrit.common.data.ExtGroup get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return requireBackend(uuid).get(uuid); },fe98dda4c8f60f524d22bdcca2e43ed0c6c1c85d,,get(com.google.gerrit.reviewdb.client.AccountGroup$UUID),25,6,"@java.lang.Override public GroupDescription.Basic get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { com.google.gerrit.server.account.GroupBackend b = backend(uuid); if (b == null) { com.google.gerrit.server.account.UniversalGroupBackend.log.warn((""Unknown GroupBackend for UUID: "" + uuid)); return null; } return b.get(uuid); }",a2e09698791af8856e442d0c42faf13d9fc461e2,get(com.google.gerrit.reviewdb.client.AccountGroup$UUID),76425,53,103
129873,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,24.0,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } }",4156da0f1d78339adb0c0e91dc922ed7cd79e975,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } if ((labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)).findAny().isPresent()) && (labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)).findAny().isPresent())) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL, com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL); } }",72ad1b1a162643f9773eda304dd3d415e1d156c0,checkMutuallyExclusiveLabels(java.util.Set),checkMutuallyExclusiveLabels(java.util.Set),6,31,"private static void checkMutuallyExclusiveLabels(java.util.Set<java.lang.String> labels) throws com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException { if (labels.containsAll(com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL))) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.DEFAULT_LABEL, com.google.gerrit.server.StarredChangesUtil.IGNORE_LABEL); } java.util.Set<java.lang.Integer> reviewedPatchSets = labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)).map(( l) -> java.lang.Integer.valueOf(l.substring(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL.length()) + 1)))).collect(java.util.stream.Collectors.toSet()); java.util.Set<java.lang.Integer> unreviewedPatchSets = labels.stream().filter(( l) -> l.startsWith(com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)).map(( l) -> java.lang.Integer.valueOf(l.substring(((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL.length()) + 1)))).collect(java.util.stream.Collectors.toSet()); java.util.Optional<java.lang.Integer> ps = com.google.common.collect.Sets.intersection(reviewedPatchSets, unreviewedPatchSets).stream().findFirst(); if (ps.isPresent()) { throw new com.google.gerrit.server.StarredChangesUtil.MutuallyExclusiveLabelsException(com.google.gerrit.server.StarredChangesUtil.getReviewedLabel(ps.get()), com.google.gerrit.server.StarredChangesUtil.getUnreviewedLabel(ps.get())); } }",47188357d680c0047a0619934a814694edb768b0,checkMutuallyExclusiveLabels(java.util.Set),74728,309,501
89872,gerrit-server_src_test_java_com_google_gerrit_server_notedb_NoteDbChangeStateTest.java,2.0,"@org.junit.Test public void applyDeltaToNoteDbPrimaryIsNoOp() { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); c.setNoteDbState(""N""); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.metaId(SHA1), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), SHA2))); assertThat(c.getNoteDbState()).isEqualTo(""N""); }",d10160d510854c52c6a64a3cb6312618649ed359,"@org.junit.Test public void applyDeltaToNoteDbPrimaryIsNoOp() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); c.setNoteDbState(""N""); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.metaId(SHA1), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), SHA2)), com.google.gerrit.common.TimeUtil.nowTs()); assertThat(c.getNoteDbState()).isEqualTo(""N""); }",8838daa8db72f67756aefeb7c5bf14606be43489,applyDeltaToNoteDbPrimaryIsNoOp(),applyDeltaToNoteDbPrimaryIsNoOp(),14,1,"@org.junit.Test public void applyDeltaToNoteDbPrimaryIsNoOp() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = com.google.gerrit.server.notedb.NoteDbChangeStateTest.newChange(); c.setNoteDbState(""N""); com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(c, com.google.gerrit.server.notedb.NoteDbChangeState.Delta.create(c.getId(), com.google.gerrit.server.notedb.NoteDbChangeStateTest.metaId(SHA1), com.google.gerrit.server.notedb.NoteDbChangeStateTest.drafts(new com.google.gerrit.reviewdb.client.Account.Id(1001), SHA2))); assertThat(c.getNoteDbState()).isEqualTo(""N""); }",e1b788434b810739b3d2d604c949e9545b8de7fa,applyDeltaToNoteDbPrimaryIsNoOp(),206921,216,199
79747,gerrit-server_src_main_java_com_google_gerrit_server_mail_ProjectWatch.java,5.0,"private boolean add(com.google.gerrit.server.mail.ProjectWatch.Watchers matching, com.google.gerrit.reviewdb.client.AccountProjectWatch w, com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory.create(w.getAccountId()); try { if (filterMatch(user, w.getFilter())) { if (w.isNotify(type)) { matching.bcc.accounts.add(w.getAccountId()); } return true; } } catch (com.google.gerrit.server.query.QueryParseException e) { } return false; }",5524eb4180b7176e33d0252493047ee948a8b2c6,"private boolean add(com.google.gerrit.server.mail.ProjectWatch.Watchers matching, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType> watchedTypes, com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory.create(accountId); try { if (filterMatch(user, key.filter())) { if (watchedTypes.contains(type)) { matching.bcc.accounts.add(accountId); } return true; } } catch (com.google.gerrit.server.query.QueryParseException e) { } return false; }",189164a36aca4ced9ab8efbed51e8c759dad107e,"add(com.google.gerrit.server.mail.ProjectWatch$Watchers,com.google.gerrit.reviewdb.client.AccountProjectWatch,com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType)","add(com.google.gerrit.server.mail.ProjectWatch$Watchers,com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Collection,com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType)",21,2,"private boolean add(com.google.gerrit.server.mail.ProjectWatch.Watchers matching, com.google.gerrit.reviewdb.client.Account.Id accountId, com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key, java.util.Set<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType> watchedTypes, com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = args.identifiedUserFactory.create(accountId); try { if (filterMatch(user, key.filter())) { if (watchedTypes.contains(type)) { matching.bcc.accounts.add(accountId); } return true; } } catch (com.google.gerrit.server.query.QueryParseException e) { } return false; }",a4ba1ccc5820ff56294ece753d5b1794a1b8f9b0,"add(com.google.gerrit.server.mail.ProjectWatch$Watchers,com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.WatchConfig.ProjectWatchKey,java.util.Set,com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType)",168586,213,213
58626,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_TempFileUtil.java,2.0,"public static synchronized java.io.File createTempDirectory() throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile(""gerrit_test_"", """"); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException((""Cannot create "" + (tmp.getPath()))); } com.google.gerrit.acceptance.TempFileUtil.allDirsCreated.add(tmp); return tmp; }",6012cc55a18a12216b004958ce9b614c006f0423,"public static synchronized java.io.File createTempDirectory() throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile(""gerrit_test_"", """"); tmp = tmp.getCanonicalFile(); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException((""Cannot create "" + (tmp.getPath()))); } com.google.gerrit.acceptance.TempFileUtil.allDirsCreated.add(tmp); return tmp; }",02cebec2f357b9890bef5aab32119d3a2671eec0,createTempDirectory(),createTempDirectory(),5,2,"public static synchronized java.io.File createTempDirectory() throws java.io.IOException { java.io.File tmp = java.io.File.createTempFile(""gerrit_test_"", """").getCanonicalFile(); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException((""Cannot create "" + (tmp.getPath()))); } com.google.gerrit.acceptance.TempFileUtil.allDirsCreated.add(tmp); return tmp; }",0f60e71cb56094c9cdaba624bec6a23f79cb77e6,createTempDirectory(),91537,105,101
86057,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LocalLargeFileRepository.java,0.0,"private static java.nio.file.Path getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig config, java.nio.file.Path defaultDataDir) throws java.io.IOException { java.lang.String dataDir = config.getConfig().getString(LfsBackend.FS.name(), null, ""directory""); if (com.google.common.base.Strings.isNullOrEmpty(dataDir)) { return defaultDataDir; } java.nio.file.Path ensured = java.nio.file.Files.createDirectories(java.nio.file.Paths.get(dataDir)); if (!(java.nio.file.Files.isReadable(ensured))) { throw new java.io.IOException(((""Path '"" + (ensured.toAbsolutePath())) + ""' cannot be accessed"")); } return ensured; }",f9db9319dc33b3d1d978310769d308e94bb43715,"private static java.nio.file.Path getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig config, java.nio.file.Path defaultDataDir) throws java.io.IOException { java.lang.String dataDir = config.getGlobalConfig().getString(LfsBackend.FS.name(), null, ""directory""); if (com.google.common.base.Strings.isNullOrEmpty(dataDir)) { return defaultDataDir; } java.nio.file.Path ensured = java.nio.file.Files.createDirectories(java.nio.file.Paths.get(dataDir)); if (!(java.nio.file.Files.isReadable(ensured))) { throw new java.io.IOException(((""Path '"" + (ensured.toAbsolutePath())) + ""' cannot be accessed"")); } return ensured; }",72bf5931466f75edee200f46125187fa22f57a4c,"getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig,java.nio.file.Path)","getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsConfig,java.nio.file.Path)",7,1,"private static java.nio.file.Path getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsGlobalConfig config, java.nio.file.Path defaultDataDir) throws java.io.IOException { java.lang.String dataDir = config.getString(LfsBackend.FS.name(), null, ""directory""); if (com.google.common.base.Strings.isNullOrEmpty(dataDir)) { return defaultDataDir; } java.nio.file.Path ensured = java.nio.file.Files.createDirectories(java.nio.file.Paths.get(dataDir)); if (!(java.nio.file.Files.isReadable(ensured))) { throw new java.io.IOException(((""Path '"" + (ensured.toAbsolutePath())) + ""' cannot be accessed"")); } return ensured; }",f0edc1e69a3635923863bb66ef8663614749a554,"getOrCreateDataDir(com.googlesource.gerrit.plugins.lfs.LfsGlobalConfig,java.nio.file.Path)",188278,184,182
61703,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitModule.java,0.0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.config.SitePaths.class); bind(com.google.gerrit.pgm.init.api.InitFlags.class); bind(com.google.gerrit.pgm.init.Libraries.class); bind(com.google.gerrit.pgm.init.LibraryDownloader.class); factory(Section.Factory.class); step().to(com.google.gerrit.pgm.init.UpgradeFrom2_0_x.class); step().to(com.google.gerrit.pgm.init.InitGitManager.class); if (initDb) { step().to(com.google.gerrit.pgm.init.InitDatabase.class); } step().to(com.google.gerrit.pgm.init.InitIndex.class); step().to(com.google.gerrit.pgm.init.InitAuth.class); step().to(com.google.gerrit.pgm.init.InitLabels.class); step().to(com.google.gerrit.pgm.init.InitSendEmail.class); if (standalone) { step().to(com.google.gerrit.pgm.init.InitContainer.class); } step().to(com.google.gerrit.pgm.init.InitSshd.class); step().to(com.google.gerrit.pgm.init.InitHttpd.class); step().to(com.google.gerrit.pgm.init.InitCache.class); step().to(com.google.gerrit.pgm.init.InitPlugins.class); },af17b0fbb92e135c36e90857ca8236cec3442592,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.config.SitePaths.class); bind(com.google.gerrit.pgm.init.api.InitFlags.class); bind(com.google.gerrit.pgm.init.Libraries.class); bind(com.google.gerrit.pgm.init.LibraryDownloader.class); factory(Section.Factory.class); step().to(com.google.gerrit.pgm.init.UpgradeFrom2_0_x.class); step().to(com.google.gerrit.pgm.init.InitGitManager.class); if (initDb) { step().to(com.google.gerrit.pgm.init.InitDatabase.class); } step().to(com.google.gerrit.pgm.init.InitIndex.class); step().to(com.google.gerrit.pgm.init.InitAuth.class); step().to(com.google.gerrit.pgm.init.InitLabels.class); step().to(com.google.gerrit.pgm.init.InitSendEmail.class); if (standalone) { step().to(com.google.gerrit.pgm.init.InitContainer.class); } step().to(com.google.gerrit.pgm.init.InitSshd.class); step().to(com.google.gerrit.pgm.init.InitHttpd.class); step().to(com.google.gerrit.pgm.init.InitCache.class); step().to(com.google.gerrit.pgm.init.InitAdminUser.class); step().to(com.google.gerrit.pgm.init.InitPlugins.class); },82d365c5a6591ed31bbabd79c14079257bb47113,configure(),configure(),3,0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.config.SitePaths.class); bind(com.google.gerrit.pgm.init.api.InitFlags.class); bind(com.google.gerrit.pgm.init.Libraries.class); bind(com.google.gerrit.pgm.init.LibraryDownloader.class); factory(Section.Factory.class); step().to(com.google.gerrit.pgm.init.UpgradeFrom2_0_x.class); step().to(com.google.gerrit.pgm.init.InitGitManager.class); if (initDb) { step().to(com.google.gerrit.pgm.init.InitDatabase.class); } step().to(com.google.gerrit.pgm.init.InitIndex.class); step().to(com.google.gerrit.pgm.init.InitAuth.class); step().to(com.google.gerrit.pgm.init.InitAdminUser.class); step().to(com.google.gerrit.pgm.init.InitLabels.class); step().to(com.google.gerrit.pgm.init.InitSendEmail.class); if (standalone) { step().to(com.google.gerrit.pgm.init.InitContainer.class); } step().to(com.google.gerrit.pgm.init.InitSshd.class); step().to(com.google.gerrit.pgm.init.InitHttpd.class); step().to(com.google.gerrit.pgm.init.InitCache.class); step().to(com.google.gerrit.pgm.init.InitPlugins.class); },80590cc5d15a548775722c102f7d503617517022,configure(),79213,391,391
93410,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_revision_RobotCommentsIT.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void addedRobotCommentsCanBeRetrievedByChange() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = createRobotCommentInput(); addRobotComment(changeId, in); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> out = gApi.changes().id(changeId).robotComments(); assertThat(out).hasSize(1); com.google.gerrit.extensions.common.RobotCommentInfo comment = com.google.common.collect.Iterables.getOnlyElement(out.get(in.path)); assertRobotComment(comment, in, false); }",92f3a32a7406229f0acd28051863b8b816be1431,,addedRobotCommentsCanBeRetrievedByChange(),4,5,"@org.junit.Test public void addedRobotCommentsCanBeRetrievedByChange() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in = createRobotCommentInput(); addRobotComment(changeId, in); pushFactory.create(db, admin.getIdent(), testRepo, changeId).to(""refs/for/master""); com.google.gerrit.extensions.api.changes.ReviewInput.RobotCommentInput in2 = createRobotCommentInput(); addRobotComment(changeId, in2); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> out = gApi.changes().id(changeId).robotComments(); assertThat(out).hasSize(1); assertThat(out.get(in.path)).hasSize(2); com.google.gerrit.extensions.common.RobotCommentInfo comment1 = out.get(in.path).get(0); assertRobotComment(comment1, in, false); com.google.gerrit.extensions.common.RobotCommentInfo comment2 = out.get(in.path).get(1); assertRobotComment(comment2, in2, false); }",0814405d68bcdc2f39f15e54a19be9fbbf85c0de,addedRobotCommentsCanBeRetrievedByChange(),192889,178,281
156032,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,4.0,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",c54d4682823c8ea4f9e0707c98c9708ead83554b,"@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return java.util.Optional.empty(); } return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",bb3f6db26d1b08f22b3d5905937e24ae52c5b78d,createToken(java.util.List),createToken(java.util.List),6,4,"@java.lang.Override protected com.google.common.base.Optional<com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken> createToken(java.util.List<java.lang.String> values) { if ((values.size()) != 3) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.LfsFsAuthToken(values.get(0), org.eclipse.jgit.lfs.lib.LongObjectId.fromString(values.get(1)), values.get(2))); }",c54d4682823c8ea4f9e0707c98c9708ead83554b,createToken(java.util.List),8491,145,157
99230,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_GsonParser.java,0.0,"static java.lang.String toJson(java.lang.String cacheName, java.lang.Object key) { com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create(); java.lang.String json; switch (cacheName) { case com.ericsson.gerrit.plugins.evictcache.GsonParser.ACCOUNTS : json = gson.toJson(key, Account.Id.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS : json = gson.toJson(key, AccountGroup.Id.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS_BYINCLUDE : case com.ericsson.gerrit.plugins.evictcache.GsonParser.GROUPS_MEMBERS : json = gson.toJson(key, AccountGroup.UUID.class); break; case com.ericsson.gerrit.plugins.evictcache.GsonParser.PROJECT_LIST : default : json = gson.toJson(key); } return json; }",5f5e25c2435c7828c3d3e0e1aaa68ddfc2577bb7,"static java.lang.String toJson(java.lang.String cacheName, java.lang.Object key) { com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create(); java.lang.String json; switch (cacheName) { case com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.ACCOUNTS : json = gson.toJson(key, Account.Id.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.GROUPS : json = gson.toJson(key, AccountGroup.Id.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.GROUPS_BYINCLUDE : case com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.GROUPS_MEMBERS : json = gson.toJson(key, AccountGroup.UUID.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.PROJECT_LIST : default : json = gson.toJson(key); } return json; }",e0ce331b74ff755ac537d36f172247585cb2d828,"toJson(java.lang.String,java.lang.Object)","toJson(java.lang.String,java.lang.Object)",6,0,"static java.lang.String toJson(java.lang.String cacheName, java.lang.Object key) { com.google.gson.Gson gson = new com.google.gson.GsonBuilder().create(); java.lang.String json; switch (cacheName) { case com.ericsson.gerrit.plugins.highavailability.cache.Constants.ACCOUNTS : json = gson.toJson(key, Account.Id.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.Constants.GROUPS : json = gson.toJson(key, AccountGroup.Id.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.Constants.GROUPS_BYINCLUDE : case com.ericsson.gerrit.plugins.highavailability.cache.Constants.GROUPS_MEMBERS : json = gson.toJson(key, AccountGroup.UUID.class); break; case com.ericsson.gerrit.plugins.highavailability.cache.Constants.PROJECT_LIST : default : json = gson.toJson(key); } return json; }",fd4cb213983bd08bdee949bdedc3609000600cd0,"toJson(java.lang.String,java.lang.Object)",188627,258,243
59404,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_MergeIfNecessary.java,1.0,"@java.lang.Override protected com.google.gerrit.server.git.CodeReviewCommit _run(com.google.gerrit.server.git.CodeReviewCommit mergeTip, java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); if (mergeTip == null) { mergeTip = toMerge.remove(0); } mergeTip = args.mergeUtil.getFirstFastForward(mergeTip, args.rw, toMerge); while (!(toMerge.isEmpty())) { mergeTip = args.mergeUtil.mergeOneCommit(args.myIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip, toMerge.remove(0)); } final com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval = args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip, args.alreadyAccepted); setRefLogIdent(submitApproval); return mergeTip; }",1c8564836c194344516424e0ea32ba68817f71b8,"@java.lang.Override protected com.google.gerrit.server.git.CodeReviewCommit _run(com.google.gerrit.server.git.CodeReviewCommit mergeTip, java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); if (mergeTip == null) { mergeTip = toMerge.remove(0); } mergeTip = args.mergeUtil.getFirstFastForward(mergeTip, args.rw, toMerge); while (!(toMerge.isEmpty())) { mergeTip = args.mergeUtil.mergeOneCommit(args.myIdent.get(), args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip, toMerge.remove(0)); } final com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval = args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip, args.alreadyAccepted); setRefLogIdent(submitApproval); return mergeTip; }",407b9f13369a7d541d40998a4f16a04748f8c47a,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.List)","_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.List)",3,1,"@java.lang.Override protected com.google.gerrit.server.git.CodeReviewCommit _run(com.google.gerrit.server.git.CodeReviewCommit mergeTip, java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); if (mergeTip == null) { mergeTip = toMerge.remove(0); } mergeTip = args.mergeUtil.getFirstFastForward(mergeTip, args.rw, toMerge); while (!(toMerge.isEmpty())) { mergeTip = args.mergeUtil.mergeOneCommit(args.serverIdent.get(), args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip, toMerge.remove(0)); } final com.google.gerrit.reviewdb.client.PatchSetApproval submitApproval = args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip, args.alreadyAccepted); setRefLogIdent(submitApproval); return mergeTip; }",4059aed7270c8e1cecdeb3cb898928a4dd5f235c,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.List)",193588,259,259
69681,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPreferencesScreen.java,15.0,"private void display(com.google.gerrit.client.account.Preferences p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",2f14fb430bc25c1496e1a7b1a1d0e3aa32315064,"private void display(com.google.gerrit.client.account.Preferences p) { showSiteHeader.setValue(p.showSiteHeader()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",a0fd83bce4a9339ad81f79590d3e4eaaa36a5d09,display(com.google.gerrit.client.account.Preferences),display(com.google.gerrit.client.account.Preferences),8,15,"private void display(com.google.gerrit.client.account.Preferences p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",2f14fb430bc25c1496e1a7b1a1d0e3aa32315064,display(com.google.gerrit.client.account.Preferences),155583,239,251
96133,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ChangeEmail.java,11.0,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { if ((args.projectCache) != null) { projectState = args.projectCache.get(change.getProject()); } else { projectState = null; } if ((patchSet) == null) { try { patchSet = changeData.currentPatchSet(); } catch (com.google.gwtorm.server.OrmException err) { patchSet = null; } } if ((patchSet) != null) { setHeader(""X-Gerrit-PatchSet"", ((patchSet.getPatchSetId()) + """")); if ((patchSetInfo) == null) { try { patchSetInfo = args.patchSetInfoFactory.get(args.db.get(), changeData.notes(), patchSet.getId()); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException | com.google.gwtorm.server.OrmException err) { patchSetInfo = null; } } } authors = getAuthors(); super.init(); if ((timestamp) != null) { setHeader(""Date"", new java.util.Date(timestamp.getTime())); } setChangeSubjectHeader(); setHeader(""X-Gerrit-Change-Id"", ("""" + (change.getKey().get()))); setChangeUrlHeader(); setCommitIdHeader(); }",ef9d7f2a7e7663c6d52609cea779d781d6095b08,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { if ((args.projectCache) != null) { projectState = args.projectCache.get(change.getProject()); } else { projectState = null; } if ((patchSet) == null) { try { patchSet = changeData.currentPatchSet(); } catch (com.google.gwtorm.server.OrmException err) { patchSet = null; } } if ((patchSet) != null) { setHeader(""X-Gerrit-PatchSet"", ((patchSet.getPatchSetId()) + """")); if ((patchSetInfo) == null) { try { patchSetInfo = args.patchSetInfoFactory.get(args.db.get(), changeData.notes(), patchSet.getId()); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException | com.google.gwtorm.server.OrmException err) { patchSetInfo = null; } } } authors = getAuthors(); super.init(); if ((timestamp) != null) { setHeader(""Date"", new java.util.Date(timestamp.getTime())); } setChangeSubjectHeader(); setHeader(""X-Gerrit-Change-Id"", ("""" + (change.getKey().get()))); setHeader(""X-Gerrit-Numeric-Change-Id"", ("""" + (change.getChangeId()))); setChangeUrlHeader(); setCommitIdHeader(); }",086e099137a8d75d28695e4594e3c0dab09cc982,init(),init(),2,11,"@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { if ((args.projectCache) != null) { projectState = args.projectCache.get(change.getProject()); } else { projectState = null; } if ((patchSet) == null) { try { patchSet = changeData.currentPatchSet(); } catch (com.google.gwtorm.server.OrmException err) { patchSet = null; } } if ((patchSet) != null) { setHeader(""X-Gerrit-PatchSet"", ((patchSet.getPatchSetId()) + """")); if ((patchSetInfo) == null) { try { patchSetInfo = args.patchSetInfoFactory.get(args.db.get(), changeData.notes(), patchSet.getId()); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException | com.google.gwtorm.server.OrmException err) { patchSetInfo = null; } } } authors = getAuthors(); super.init(); if ((timestamp) != null) { setHeader(""Date"", new java.util.Date(timestamp.getTime())); } setChangeSubjectHeader(); setHeader(""X-Gerrit-Change-Id"", ("""" + (change.getKey().get()))); setHeader(""X-Gerrit-Change-Number"", ("""" + (change.getChangeId()))); setChangeUrlHeader(); setCommitIdHeader(); }",725b4f7acb6c99775c38c213d08d57e4cecf9eec,init(),41343,329,327
44710,src_main_java_com_googlesource_gerrit_plugins_replication_Destination.java,17.0,"java.util.List<org.eclipse.jgit.transport.URIish> getURIs(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch) { java.util.List<org.eclipse.jgit.transport.URIish> r = com.google.common.collect.Lists.newArrayListWithCapacity(remote.getURIs().size()); for (org.eclipse.jgit.transport.URIish uri : remote.getURIs()) { if (com.googlesource.gerrit.plugins.replication.Destination.matches(uri, urlMatch)) { java.lang.String name = project.get(); if (com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding(uri)) { name = com.googlesource.gerrit.plugins.replication.Destination.encode(name); } if (remoteNameStyle.equals(""dash"")) { name = name.replace(""/"", ""-""); } else if (remoteNameStyle.equals(""underscore"")) { name = name.replace(""/"", ""_""); } else if (!(remoteNameStyle.equals(""slash""))) { ReplicationQueue.log.debug(java.lang.String.format(""Unknown remoteNameStyle: %s, falling back to slash"", remoteNameStyle)); } java.lang.String replacedPath = com.googlesource.gerrit.plugins.replication.ReplicationQueue.replaceName(uri.getPath(), name); if (replacedPath != null) { uri = uri.setPath(replacedPath); r.add(uri); } } } return r; }",f36072243eddb5b9049f7cc450ca1933fdfe50cb,"java.util.List<org.eclipse.jgit.transport.URIish> getURIs(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch) { java.util.List<org.eclipse.jgit.transport.URIish> r = com.google.common.collect.Lists.newArrayListWithCapacity(remote.getURIs().size()); if ((!(replicatesSingleProject())) || (getProject().equals(project))) { for (org.eclipse.jgit.transport.URIish uri : remote.getURIs()) { if (com.googlesource.gerrit.plugins.replication.Destination.matches(uri, urlMatch)) { java.lang.String name = project.get(); if (com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding(uri)) { name = com.googlesource.gerrit.plugins.replication.Destination.encode(name); } if (remoteNameStyle.equals(""dash"")) { name = name.replace(""/"", ""-""); } else if (remoteNameStyle.equals(""underscore"")) { name = name.replace(""/"", ""_""); } else if (!(remoteNameStyle.equals(""slash""))) { ReplicationQueue.log.debug(java.lang.String.format(""Unknown remoteNameStyle: %s, falling back to slash"", remoteNameStyle)); } java.lang.String replacedPath = com.googlesource.gerrit.plugins.replication.ReplicationQueue.replaceName(uri.getPath(), name, replicatesSingleProject()); if (replacedPath != null) { uri = uri.setPath(replacedPath); r.add(uri); } } } } return r; }",6af54e81e1bd1b512eada42fcccf1f78cf26df3c,"getURIs(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","getURIs(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",8,19,"java.util.List<org.eclipse.jgit.transport.URIish> getURIs(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String urlMatch) { java.util.List<org.eclipse.jgit.transport.URIish> r = com.google.common.collect.Lists.newArrayListWithCapacity(remote.getURIs().size()); for (org.eclipse.jgit.transport.URIish uri : remote.getURIs()) { if (com.googlesource.gerrit.plugins.replication.Destination.matches(uri, urlMatch)) { java.lang.String name = project.get(); if (com.googlesource.gerrit.plugins.replication.Destination.needsUrlEncoding(uri)) { name = com.googlesource.gerrit.plugins.replication.Destination.encode(name); } if (remoteNameStyle.equals(""dash"")) { name = name.replace(""/"", ""-""); } else if (remoteNameStyle.equals(""underscore"")) { name = name.replace(""/"", ""_""); } else if (!(remoteNameStyle.equals(""slash""))) { ReplicationQueue.log.debug(java.lang.String.format(""Unknown remoteNameStyle: %s, falling back to slash"", remoteNameStyle)); } java.lang.String replacedPath = com.googlesource.gerrit.plugins.replication.ReplicationQueue.replaceName(uri.getPath(), name, isSingleProjectMatch()); if (replacedPath != null) { uri = uri.setPath(replacedPath); r.add(uri); } } } return r; }",8ebaa29e9368454ccea628e5f5f6ae03b230a540,"getURIs(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",24220,370,350
13344,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.reviewdb.RefRight> getAllRights(final com.google.gerrit.reviewdb.ApprovalCategory.Id id) { java.util.List<com.google.gerrit.reviewdb.RefRight> l = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); l.addAll(getLocalRights(id)); l.addAll(getInheritedRights(id)); java.util.Collections.sort(l, RefRight.REF_PATTERN_ORDER); l = java.util.Collections.unmodifiableList(com.google.gerrit.server.project.RefControl.filterMostSpecific(l)); return l; }",0d928752155c5d030f9dcb1d9dcda47d7e0df3f8,,getAllRights(com.google.gerrit.reviewdb.ApprovalCategory$Id),2,3,"public java.util.List<com.google.gerrit.reviewdb.RefRight> getAllRights(final com.google.gerrit.reviewdb.ApprovalCategory.Id id) { java.util.List<com.google.gerrit.reviewdb.RefRight> l = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); l.addAll(getLocalRights(id)); l.addAll(getInheritedRights(id)); java.util.Collections.sort(l, RefRight.REF_PATTERN_ORDER); return java.util.Collections.unmodifiableList(com.google.gerrit.server.project.RefControl.filterMostSpecific(l)); }",60124f3bb7e4d7904c2c9b6d04fe7544440f28b2,getAllRights(com.google.gerrit.reviewdb.ApprovalCategory$Id),84248,162,158
92634,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_ListSubject.java,,,,"public static <S extends com.google.common.truth.Subject<S, E>, E> com.google.gerrit.acceptance.ListSubject<S, E> assertThat(java.util.List<E> list, java.util.function.Function<E, S> elementAssertThatFunction) { return ((com.google.gerrit.acceptance.ListSubject<S, E>) (assertAbout(new com.google.gerrit.acceptance.ListSubject.ListSubjectFactory(elementAssertThatFunction)).that(list))); }",88bce4c6c33a966e82cf4263d8551793b1abf382,,"assertThat(java.util.List,java.util.function.Function)",2,1,"@java.lang.SuppressWarnings(""unchecked"") public static <S extends com.google.common.truth.Subject<S, E>, E> com.google.gerrit.acceptance.ListSubject<S, E> assertThat(java.util.List<E> list, java.util.function.Function<E, S> elementAssertThatFunction) { return ((com.google.gerrit.acceptance.ListSubject<S, E>) (assertAbout(new com.google.gerrit.acceptance.ListSubject.ListSubjectFactory(elementAssertThatFunction)).that(list))); }",d7d6526c8a077feb5f54e50512d5037dd0162f5b,"assertThat(java.util.List,java.util.function.Function)",78045,125,134
68604,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,14.0,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = openRepository(); try { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs().values()); } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }",0f20d70ed1c2f8766d002f3234cb2df2c30d200b,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { try (org.eclipse.jgit.lib.Repository repo = openRepository()) { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs().values()); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }",d6b839b0d895edf21206c1d7f6ee6052757ede60,"canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)","canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)",5,14,"public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try (org.eclipse.jgit.lib.Repository repo = openRepository()) { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs().values()); } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format(""Cannot verify permissions to commit object %s in repository %s"", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }",b47e7c52652296ad2ac210b9b904092dc98e71a8,"canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.revwalk.RevCommit)",113967,171,168
67678,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_ContactPanelShort.java,11.0,private boolean canRegisterNewEmail() { return com.google.gerrit.client.Gerrit.getConfig().canEdit(Account.FieldName.REGISTER_NEW_EMAIL); },8d76f40c69e291d0d9dd551cc2fafee85154a0b1,private boolean canRegisterNewEmail() { return com.google.gerrit.client.Gerrit.getInfo().auth().canEdit(Account.FieldName.REGISTER_NEW_EMAIL); },14a0106cd10f6250459e37e16d5750706f3067b0,canRegisterNewEmail(),canRegisterNewEmail(),9,11,private boolean canRegisterNewEmail() { return com.google.gerrit.client.Gerrit.info().auth().canEdit(Account.FieldName.REGISTER_NEW_EMAIL); },0dfb94c0efb1f44deba23fcd9efca63cd8228cd2,canRegisterNewEmail(),9181,40,40
79922,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReviewers.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.server.change.PostReviewers.Addition fail(java.lang.String reviewer, boolean confirm, java.lang.String error) { com.google.gerrit.server.change.PostReviewers.Addition addition = new com.google.gerrit.server.change.PostReviewers.Addition(reviewer); addition.result.needsConfirmation = (confirm) ? true : null; addition.result.error = error; return addition; }",2a7001e1f797bed49feb94dc10bb8b77a1774484,,"fail(java.lang.String,boolean,java.lang.String)",13,0,"private com.google.gerrit.server.change.PostReviewers.Addition fail(java.lang.String reviewer, boolean confirm, java.lang.String error) { com.google.gerrit.server.change.PostReviewers.Addition addition = new com.google.gerrit.server.change.PostReviewers.Addition(reviewer); addition.result.confirm = (confirm) ? true : null; addition.result.error = error; return addition; }",c6fa62422bf4753e72d569f475f8b960b4c4a5bc,"fail(java.lang.String,boolean,java.lang.String)",75723,105,104
54771,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""accounts.visibility"", value = ""SAME_GROUP"") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, ""user2"", 2); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, ""user2"", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, ""user2"", 2); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, ""user2"", 2); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }",8627f5aaf6384f4d28a49bcb5a9a303832b5fd15,,suggestReviewersSameGroupVisibility(),4,1,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""accounts.visibility"", value = ""SAME_GROUP"") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, ""user2"", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, ""user2"", 2); assertEquals(1, reviewers.size()); assertEquals(""User2"", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }",9c23605b09c51165152816b15e47bff8697df551,suggestReviewersSameGroupVisibility(),27061,298,319
123651,gerrit-server_src_main_java_com_google_gerrit_server_git_receive_ReplaceOp.java,18.0,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException { if (approvals.isEmpty()) { return; } com.google.gerrit.server.project.ChangeControl changeControl = changeControlFactory.controlFor(ctx.getDb(), notes.getChange(), ctx.getUser()); java.util.List<com.google.gerrit.common.data.LabelType> labels = changeControl.getLabelTypes().getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",223305ef4a7ab0158360ca6e406d7c64abce3adc,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (approvals.isEmpty()) { return; } java.util.List<com.google.gerrit.common.data.LabelType> labels = projectCache.checkedGet(ctx.getProject()).getLabelTypes(notes, ctx.getUser()).getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",23d73893d7648c7a2b38f313c4d5587ee85352c0,fireCommentAddedEvent(com.google.gerrit.server.update.Context),fireCommentAddedEvent(com.google.gerrit.server.update.Context),3,18,"private void fireCommentAddedEvent(com.google.gerrit.server.update.Context ctx) throws java.io.IOException { if (approvals.isEmpty()) { return; } java.util.List<com.google.gerrit.common.data.LabelType> labels = projectCache.checkedGet(ctx.getProject()).getLabelTypes(notes, ctx.getUser()).getLabelTypes(); java.util.Map<java.lang.String, java.lang.Short> allApprovals = new java.util.HashMap<>(); java.util.Map<java.lang.String, java.lang.Short> oldApprovals = new java.util.HashMap<>(); for (com.google.gerrit.common.data.LabelType lt : labels) { allApprovals.put(lt.getName(), ((short) (0))); oldApprovals.put(lt.getName(), null); } for (java.util.Map.Entry<java.lang.String, java.lang.Short> entry : approvals.entrySet()) { if ((entry.getValue()) != 0) { allApprovals.put(entry.getKey(), entry.getValue()); oldApprovals.put(entry.getKey(), ((short) (0))); } } commentAdded.fire(notes.getChange(), newPatchSet, ctx.getAccount(), null, allApprovals, oldApprovals, ctx.getWhen()); }",f689be0b3bed64e7b97dea58e2049ed028254dce,fireCommentAddedEvent(com.google.gerrit.server.update.Context),104687,317,304
68869,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,11.0,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, ""refs/heads/master""); } }",f3624c16bdbc4ea98fb3bf8c3abd08098efc3f3c,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project... projects) throws java.io.IOException { assertThat(projects.length).isLessThan(2); com.google.gerrit.reviewdb.client.Project.NameKey project = this.project; if ((projects.length) > 0) { project = projects[0]; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, ""refs/heads/master""); } }",eaa587b23ebd4f52d0f0248ddce8c9c5241f010f,getRemoteHead(),getRemoteHead(com.google.gerrit.reviewdb.client.Project[]),23,20,"protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, (""refs/heads/"" + branch)); } }",64afb4072a37742bf00d1d2b3acc5cf9d8de52d9,"getRemoteHead(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",136301,129,92
134334,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.extensions.common.AccountInfo> getDirectMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = com.google.gerrit.server.group.ListMembers.getDirectMemberIds(group, groupControl); return toAccountInfos(directMembers); }",b88c69b9502316cf7f74bf796bba5ba724dcbdc1,,"getDirectMembers(com.google.gerrit.common.data.GroupDescription$Internal,com.google.gerrit.server.account.GroupControl)",7,7,"public java.util.List<com.google.gerrit.extensions.common.AccountInfo> getDirectMembers(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.group.ListMembers.checkSameGroup(group, groupControl); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = com.google.gerrit.server.group.ListMembers.getDirectMemberIds(group, groupControl); return toAccountInfos(directMembers); }",eb14f59a154cfe3b299f4a67c349f0cc5c6e8f8d,"getDirectMembers(com.google.gerrit.common.data.GroupDescription$Internal,com.google.gerrit.server.account.GroupControl)",97062,131,154
76432,gerrit-server_src_main_java_com_google_gerrit_server_git_BatchUpdate.java,41.0,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { com.google.gerrit.server.git.BatchUpdate.RepoContext ctx = new com.google.gerrit.server.git.BatchUpdate.RepoContext(); for (com.google.gerrit.server.git.BatchUpdate.Op op : ops.values()) { op.updateRepo(ctx); } if ((inserter) != null) { inserter.flush(); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.git.UpdateException(e); } }",d65a4982f36e2b39ad161905caa49c1dccd7d261,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { com.google.gerrit.server.git.BatchUpdate.RepoContext ctx = new com.google.gerrit.server.git.BatchUpdate.RepoContext(); for (com.google.gerrit.server.git.BatchUpdate.Op op : ops.values()) { op.updateRepo(ctx); } if ((inserter) != null) { inserter.flush(); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.git.UpdateException(e); } }",0d4866224db007dd659005d5e96a371ac8a3fe05,executeUpdateRepo(),executeUpdateRepo(),6,25,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { logDebug(""Executing updateRepo on {} ops"", ops.size()); com.google.gerrit.server.git.BatchUpdate.RepoContext ctx = new com.google.gerrit.server.git.BatchUpdate.RepoContext(); for (com.google.gerrit.server.git.BatchUpdate.Op op : ops.values()) { op.updateRepo(ctx); } if (!(repoOnlyOps.isEmpty())) { logDebug(""Executing updateRepo on {} RepoOnlyOps"", ops.size()); for (com.google.gerrit.server.git.BatchUpdate.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } } if ((inserter) != null) { logDebug(""Flushing inserter""); inserter.flush(); } else { logDebug(""No objects to flush""); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.git.UpdateException(e); } }",43f2c2a1bde127abc8d9cc7dd9c73156d0da41b2,executeUpdateRepo(),114991,187,282
62862,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,6.0,"@java.lang.Override public void onSuccess(java.lang.String result) { type = result; injectMode(type, modeInjectorCb); }",da522ed7228ad38604bda02fc20443275b53431b,@java.lang.Override protected void preDisplay(java.lang.Void result) { setShowTabs(prefs.showTabs()); initEditor(content.text()); content = null; },cc1b9d818153d9a7893e7324f058e65b5137542e,onSuccess(java.lang.String),preDisplay(java.lang.Void),7,19,"@java.lang.Override public void onSuccess(java.lang.Void result) { net.codemirror.theme.ThemeLoader.loadTheme(prefs.theme(), themeCallback); }",58263c4ae38c18629967e7ea66d599df1c854647,onSuccess(java.lang.Void),67119,40,39
37970,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,13.0,"private com.google.gerrit.pgm.Init.SiteInit createSiteInit() { final com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(batchMode); final java.io.File sitePath = getSitePath(); final java.util.List<java.lang.Module> m = new java.util.ArrayList<java.lang.Module>(); m.add(new com.google.gerrit.pgm.init.InitModule()); m.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(ui); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(com.google.gerrit.pgm.init.ReloadSiteLibrary.class).toInstance(new com.google.gerrit.pgm.init.ReloadSiteLibrary() { @java.lang.Override public void reload() { com.google.gerrit.pgm.Init.super.loadSiteLib(); } }); } }); try { return com.google.inject.Guice.createInjector(com.google.gerrit.pgm.PRODUCTION, m).getInstance(com.google.gerrit.pgm.Init.SiteInit.class); } catch (com.google.inject.CreationException ce) { final com.google.inject.spi.Message first = ce.getErrorMessages().iterator().next(); java.lang.Throwable why = first.getCause(); if (why instanceof com.google.gerrit.pgm.util.Die) { throw ((com.google.gerrit.pgm.util.Die) (why)); } final java.lang.StringBuilder buf = new java.lang.StringBuilder(); while (why != null) { buf.append(why.getMessage()); why = why.getCause(); if (why != null) { buf.append(""\n caused by ""); } } throw die(buf.toString(), new java.lang.RuntimeException(""InitInjector failed"", ce)); } }",2d7a9b0bda022ac6e591f42d5996a3f98e8515ba,"private com.google.gerrit.pgm.Init.SiteInit createSiteInit() { final com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(batchMode); final java.io.File sitePath = getSitePath(); final java.util.List<java.lang.Module> m = new java.util.ArrayList<java.lang.Module>(); m.add(new com.google.gerrit.pgm.init.InitModule()); m.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(ui); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(com.google.gerrit.pgm.init.ReloadSiteLibrary.class).toInstance(new com.google.gerrit.pgm.init.ReloadSiteLibrary() { @java.lang.Override public void reload() { com.google.gerrit.pgm.Init.super.loadSiteLib(); } }); } }); try { return com.google.inject.Guice.createInjector(com.google.gerrit.pgm.PRODUCTION, m).getInstance(com.google.gerrit.pgm.Init.SiteInit.class); } catch (com.google.inject.CreationException ce) { final com.google.inject.spi.Message first = ce.getErrorMessages().iterator().next(); java.lang.Throwable why = first.getCause(); if (why instanceof com.google.gerrit.pgm.util.Die) { throw ((com.google.gerrit.pgm.util.Die) (why)); } final java.lang.StringBuilder buf = new java.lang.StringBuilder(ce.getLocalizedMessage()); while (why != null) { buf.append(why.getMessage()); why = why.getCause(); if (why != null) { buf.append(""\n caused by ""); } } throw die(buf.toString(), new java.lang.RuntimeException(""InitInjector failed"", ce)); } }",90f3a1607afc08bb41b6225c3b5fb9a4c1c121f3,createSiteInit(),createSiteInit(),2,13,"private com.google.gerrit.pgm.Init.SiteInit createSiteInit() { final com.google.gerrit.pgm.util.ConsoleUI ui = com.google.gerrit.pgm.util.ConsoleUI.getInstance(batchMode); final java.io.File sitePath = getSitePath(); final java.util.List<java.lang.Module> m = new java.util.ArrayList<java.lang.Module>(); m.add(new com.google.gerrit.pgm.init.InitModule()); m.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(ui); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(sitePath); bind(com.google.gerrit.pgm.init.ReloadSiteLibrary.class).toInstance(new com.google.gerrit.pgm.init.ReloadSiteLibrary() { @java.lang.Override public void reload() { com.google.gerrit.pgm.Init.super.loadSiteLib(); } }); } }); try { return com.google.inject.Guice.createInjector(com.google.gerrit.pgm.PRODUCTION, m).getInstance(com.google.gerrit.pgm.Init.SiteInit.class); } catch (com.google.inject.CreationException ce) { final com.google.inject.spi.Message first = ce.getErrorMessages().iterator().next(); java.lang.Throwable why = first.getCause(); if (why instanceof com.google.gerrit.pgm.util.Die) { throw ((com.google.gerrit.pgm.util.Die) (why)); } final java.lang.StringBuilder buf = new java.lang.StringBuilder(ce.getMessage()); while (why != null) { buf.append(""\n""); buf.append(why.getMessage()); why = why.getCause(); if (why != null) { buf.append(""\n caused by ""); } } throw die(buf.toString(), new java.lang.RuntimeException(""InitInjector failed"", ce)); } }",0a5b11af3190ae4756d987e016ad3bf6e7d39cb0,createSiteInit(),212794,488,493
17478,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,7.0,"private void initSubmitType() { submitTypePanel = new com.google.gwt.user.client.ui.VerticalPanel(); submitTypePanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingSubmitType())); submitType = new com.google.gwt.user.client.ui.ListBox(); for (final com.google.gerrit.reviewdb.Project.SubmitType type : Project.SubmitType.values()) { submitType.addItem(com.google.gerrit.client.admin.Util.toLongString(type), type.name()); } submitType.addChangeHandler(new com.google.gwt.event.dom.client.ChangeHandler() { @java.lang.Override public void onChange(final com.google.gwt.event.dom.client.ChangeEvent event) { saveProject.setEnabled(true); } }); submitTypePanel.add(submitType); add(submitTypePanel); }",dc6a599abb7537db70169e122b39469f0648415b,"private void initSubmitType() { submitTypePanel = new com.google.gwt.user.client.ui.VerticalPanel(); submitTypePanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingSubmitType())); submitType = new com.google.gwt.user.client.ui.ListBox(); for (final com.google.gerrit.reviewdb.Project.SubmitType type : Project.SubmitType.values()) { submitType.addItem(com.google.gerrit.client.admin.Util.toLongString(type), type.name()); } saveEnabler.listenTo(submitType); submitTypePanel.add(submitType); add(submitTypePanel); }",b04b39d50b2d89037a3292ef486c9ca3d6cd48aa,initSubmitType(),initSubmitType(),4,4,"private void initProjectOptions() { projectOptionsPanel = new com.google.gwt.user.client.ui.VerticalPanel(); projectOptionsPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingProjectOptions())); submitType = new com.google.gwt.user.client.ui.ListBox(); for (final com.google.gerrit.reviewdb.Project.SubmitType type : Project.SubmitType.values()) { submitType.addItem(com.google.gerrit.client.admin.Util.toLongString(type), type.name()); } saveEnabler.listenTo(submitType); projectOptionsPanel.add(submitType); requireChangeID = new com.google.gwt.user.client.ui.CheckBox(Util.C.requireChangeID(), true); saveEnabler.listenTo(requireChangeID); projectOptionsPanel.add(requireChangeID); add(projectOptionsPanel); }",aad64cb37703231911bcde865d9d68c220a33f73,initProjectOptions(),196382,159,209
94436,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,19.0,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug(""{}#updateRepo for change {}"", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug(""Already merged as {}"", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug(""Did not move tip"", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } logDebug(""Moved tip from {} to {}"", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); args.submoduleOp.addBranchTip(getDest(), tipAfter); }",b2e9f6e061742b81e4dabb2c25d90b114a43caef,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug(""{}#updateRepo for change {}"", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug(""Already merged as {}"", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug(""Did not move tip"", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } logDebug(""Moved tip from {} to {}"", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); validateRefUpdate(ctx, tipBefore, tipAfter); ctx.addRefUpdate(command); args.submoduleOp.addBranchTip(getDest(), tipAfter); }",2283ce9a515473a7f5a83533b8e9b3852134cae0,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),16,18,"@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug(""{}#updateRepo for change {}"", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug(""Already merged as {}"", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug(""Did not move tip"", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug(""No merge tip, no update to perform""); return; } logDebug(""Moved tip from {} to {}"", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); args.submoduleOp.addBranchTip(getDest(), tipAfter); }",b2e9f6e061742b81e4dabb2c25d90b114a43caef,updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext),156791,313,301
15353,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_AccountServiceImpl.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.reviewdb.AccountDiffPreference run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.client.OrmException { return db.accountDiffPreferences().get(currentUser.get().getAccountId()); }",8024955356fdb0248d3bfca48af833a7bf1b68dd,,run(com.google.gerrit.reviewdb.ReviewDb),4,10,@java.lang.Override public com.google.gerrit.reviewdb.AccountDiffPreference run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { return currentUser.get().getAccountDiffPreference(); },97086f0546984b3440696a8bfa48d8f87e1b3099,run(com.google.gerrit.reviewdb.ReviewDb),108688,114,63
76030,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_120.java,0.0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { ui.message(""Generating Superproject subscriptions table to submodule ACLs""); try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((""SELECT "" + ((((""key.super_project.project_name, "" + ""key.super_project.branch_name, "") + ""submodule.project_name "") + ""submodule.branch_name "") + ""FROM submodule_subscriptions"")))) { while (rs.next()) { com.google.gerrit.reviewdb.client.Project.NameKey superproject = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(1)); com.google.gerrit.reviewdb.client.Branch.NameKey superbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(superproject, rs.getString(2)); com.google.gerrit.reviewdb.client.Project.NameKey submodule = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(4)); com.google.gerrit.reviewdb.client.Branch.NameKey subbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(submodule, rs.getString(5)); allowSubmoduleSubscription(subbranch, superbranch); } } }",62cd69396866a8c0c304a748aeda60caa42a2c94,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { ui.message(""Generating Superproject subscriptions table to submodule ACLs""); try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((""SELECT "" + ((((""key.super_project.project_name, "" + ""key.super_project.branch_name, "") + ""submodule.project_name, "") + ""submodule.branch_name "") + ""FROM submodule_subscriptions"")))) { while (rs.next()) { com.google.gerrit.reviewdb.client.Project.NameKey superproject = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(1)); com.google.gerrit.reviewdb.client.Branch.NameKey superbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(superproject, rs.getString(2)); com.google.gerrit.reviewdb.client.Project.NameKey submodule = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(4)); com.google.gerrit.reviewdb.client.Branch.NameKey subbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(submodule, rs.getString(5)); allowSubmoduleSubscription(subbranch, superbranch); } } }",37043c38e8a0660471670b486e51eb95f00189f6,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)","migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",3,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { ui.message(""Generating Superproject subscriptions table to submodule ACLs""); try (java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement();java.sql.ResultSet rs = stmt.executeQuery((""SELECT "" + ((((""super_project_project_name, "" + ""super_project_branch_name, "") + ""submodule_project_name, "") + ""submodule_branch_name "") + ""FROM submodule_subscriptions"")))) { while (rs.next()) { com.google.gerrit.reviewdb.client.Project.NameKey superproject = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(1)); com.google.gerrit.reviewdb.client.Branch.NameKey superbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(superproject, rs.getString(2)); com.google.gerrit.reviewdb.client.Project.NameKey submodule = new com.google.gerrit.reviewdb.client.Project.NameKey(rs.getString(4)); com.google.gerrit.reviewdb.client.Branch.NameKey subbranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(submodule, rs.getString(5)); allowSubmoduleSubscription(subbranch, superbranch); } } }",c2d43ba4469902ec23cd0f8656430e4d3eaa4753,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",191231,382,378
62852,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTextBox.java,6.0,"private void loadFileContent() { com.google.gerrit.client.changes.ChangeFileApi.getContent(id, getText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeFileApi.FileContent>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeFileApi.FileContent result) { textArea.setText(result.text()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { } else { super.onFailure(caught); } } }); }",ca63eed180ac826d03593c307d375c33e5816750,"private void loadFileContent() { com.google.gerrit.client.changes.ChangeEditApi.get(id, getText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeEditApi.FileContent>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeEditApi.FileContent result) { textArea.setText(result.text()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { } else { super.onFailure(caught); } } }); }",e8c5706027663acb2db76001854982fbe40827f0,loadFileContent(),loadFileContent(),7,6,"private void loadFileContent() { com.google.gerrit.client.changes.ChangeEditApi.get(id, getText(), new com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> result) { textArea.setText(result.getResult().asString()); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { } else { com.google.gerrit.client.rpc.GerritCallback.showFailure(caught); } } }); }",86daabc80d6b8f9c349a337c05b42969198fac8f,loadFileContent(),71896,159,178
86871,gerrit-elasticsearch_src_main_java_com_google_gerrit_elasticsearch_AbstractElasticIndex.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected static <T> java.util.List<T> decodeProtos(com.google.gson.JsonObject doc, java.lang.String fieldName, com.google.gwtorm.protobuf.ProtobufCodec<T> codec) { return com.google.common.collect.FluentIterable.from(doc.getAsJsonArray(fieldName)).transform(( i) -> codec.decode(org.apache.commons.codec.binary.Base64.decodeBase64(i.toString()))).toList(); }",ca5e3da7ac01f276e54d50864946083435a14343,,"decodeProtos(com.google.gson.JsonObject,java.lang.String,com.google.gwtorm.protobuf.ProtobufCodec)",15,9,"protected static <T> java.util.List<T> decodeProtos(com.google.gson.JsonObject doc, java.lang.String fieldName, com.google.gwtorm.protobuf.ProtobufCodec<T> codec) { com.google.gson.JsonArray field = doc.getAsJsonArray(fieldName); if (field == null) { return null; } return com.google.common.collect.FluentIterable.from(field).transform(( i) -> codec.decode(decodeBase64(i.toString()))).toList(); }",30c29e0c9c9de9b5453fe892c53c80017bd8dcbc,"decodeProtos(com.google.gson.JsonObject,java.lang.String,com.google.gwtorm.protobuf.ProtobufCodec)",141873,103,112
56532,gitiles-servlet_src_main_java_com_google_gitiles_BaseServlet.java,4.0,"public static com.google.gitiles.BaseServlet notFoundServlet() { return new com.google.gitiles.BaseServlet(null, null) { private static final long serialVersionUID = 1L; @java.lang.Override public void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) { res.setStatus(com.google.gitiles.SC_NOT_FOUND); } }; }",23d2eda58a265221ab5c81d39dda2130c23ba35c,"public static com.google.gitiles.BaseServlet notFoundServlet() { return new com.google.gitiles.BaseServlet(null, null, null) { private static final long serialVersionUID = 1L; @java.lang.Override public void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) { res.setStatus(com.google.gitiles.SC_NOT_FOUND); } }; }",d222399612df8d719d7004770ddc8eafaba4cd5e,notFoundServlet(),notFoundServlet(),3,4,"public static com.google.gitiles.BaseServlet notFoundServlet() { return new com.google.gitiles.BaseServlet(null, null) { private static final long serialVersionUID = 1L; @java.lang.Override public void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) { res.setStatus(com.google.gitiles.SC_NOT_FOUND); } }; }",23d2eda58a265221ab5c81d39dda2130c23ba35c,notFoundServlet(),38193,97,95
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }",2dc275038bfea4f12f0d1ed91db1c8e118ac5866,,newReviewerFilterSection(java.lang.String),4,7,"private com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection newReviewerFilterSection(java.lang.String filter) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> b = com.google.common.collect.ImmutableSet.builder(); for (java.lang.String reviewer : cfg.getStringList(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER, filter, com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.KEY_REVIEWER)) { b.add(reviewer); } return new com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection(filter, b.build()); }",381c3eadeca0e5794c4683562922ca1c8bca7fc1,newReviewerFilterSection(java.lang.String),176447,169,167
51670,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_project_ProjectIT.java,,,,"@org.junit.Test public void createBranch() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.extensions.api.projects.ProjectApi pApi = gApi.projects().forName(project.get()); com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput(); in.ref = ""foo""; pApi.createBranch(in); }",30357848781e375776a68d0ce2be11fb71bcb746,,createBranch(),5,2,"@org.junit.Test public void createBranch() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { gApi.projects().name(project.get()).branch(""foo"").create(new com.google.gerrit.extensions.api.projects.BranchInput()); }",d3095e8538554c3fc0f4436264c0318749959f50,createBranch(),211597,127,84
106454,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_DefaultActions.java,9.0,"private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> callback(final java.lang.String target) { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } } private com.google.gerrit.client.api.DefaultActions.UiResult asUiResult(com.google.gwt.core.client.JavaScriptObject in) { if (com.google.gerrit.client.rpc.NativeString.is(in)) { java.lang.String str = ((com.google.gerrit.client.rpc.NativeString) (in)).asString(); return str.isEmpty() ? com.google.gerrit.client.api.DefaultActions.UiResult.none() : com.google.gerrit.client.api.DefaultActions.UiResult.alert(str); } return in.cast(); } }; }",0a653186de7b8f5ad73d4f85008fcffef109f0a7,"private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> callback(final java.lang.String target) { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (result == null) { com.google.gerrit.client.Gerrit.display(target); } if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } } private com.google.gerrit.client.api.DefaultActions.UiResult asUiResult(com.google.gwt.core.client.JavaScriptObject in) { if (com.google.gerrit.client.rpc.NativeString.is(in)) { java.lang.String str = ((com.google.gerrit.client.rpc.NativeString) (in)).asString(); return str.isEmpty() ? com.google.gerrit.client.api.DefaultActions.UiResult.none() : com.google.gerrit.client.api.DefaultActions.UiResult.alert(str); } return in.cast(); } }; }",3510dee17b219f7c47e4729683e88571e6d56bd4,callback(java.lang.String),callback(java.lang.String),2,9,"private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> callback(final java.lang.String target) { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject in) { com.google.gerrit.client.api.DefaultActions.UiResult result = asUiResult(in); if (result == null) { com.google.gerrit.client.Gerrit.display(target); return; } if ((result.alert()) != null) { com.google.gwt.user.client.Window.alert(result.alert()); } if (((result.redirectUrl()) != null) && (result.openWindow())) { com.google.gwt.user.client.Window.open(result.redirectUrl(), ""_blank"", null); } else if ((result.redirectUrl()) != null) { com.google.gwt.user.client.Window.Location.assign(result.redirectUrl()); } else { com.google.gerrit.client.Gerrit.display(target); } } private com.google.gerrit.client.api.DefaultActions.UiResult asUiResult(com.google.gwt.core.client.JavaScriptObject in) { if (com.google.gerrit.client.rpc.NativeString.is(in)) { java.lang.String str = ((com.google.gerrit.client.rpc.NativeString) (in)).asString(); return str.isEmpty() ? com.google.gerrit.client.api.DefaultActions.UiResult.none() : com.google.gerrit.client.api.DefaultActions.UiResult.alert(str); } return in.cast(); } }; }",d2309fcf83507adc462dc33b35c7db793217f2f2,callback(java.lang.String),66846,421,423
91445,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,37.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void submitWholeTopicMultipleBranchesOnSameProject() throws java.lang.Exception { assume().that(isSubmitWholeTopicEnabled()).isTrue(); java.lang.String topic = ""test-topic""; org.eclipse.jgit.junit.TestRepository<?> repoA = createProjectWithPush(""project-a"", null, getSubmitType()); com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput(); gApi.projects().name(name(""project-a"")).branch(""dev"").create(in); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(repoA, ""master"", ""Change 1"", ""a.txt"", ""content"", topic); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(repoA, ""master"", ""Change 2"", ""b.txt"", ""content"", topic); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(repoA, ""dev"", ""Change 3"", ""a.txt"", ""content"", topic); com.google.gerrit.acceptance.PushOneCommit.Result change4 = createChange(repoA, ""dev"", ""Change 4"", ""b.txt"", ""content"", topic); approve(change1.getChangeId()); approve(change2.getChangeId()); approve(change3.getChangeId()); approve(change4.getChangeId()); submit(change4.getChangeId()); java.lang.String expectedTopic = name(topic); change1.assertChange(Change.Status.MERGED, expectedTopic, admin); change2.assertChange(Change.Status.MERGED, expectedTopic, admin); change3.assertChange(Change.Status.MERGED, expectedTopic, admin); change4.assertChange(Change.Status.MERGED, expectedTopic, admin); }",d5b029bfc99c62a10a189f48d20ffda279ba3ae5,,submitWholeTopicMultipleBranchesOnSameProject(),4,38,"@org.junit.Test public void submitWholeTopicMultipleBranchesOnSameProject() throws java.lang.Exception { assume().that(isSubmitWholeTopicEnabled()).isTrue(); java.lang.String topic = ""test-topic""; org.eclipse.jgit.junit.TestRepository<?> repoA = createProjectWithPush(""project-a"", null, getSubmitType()); com.google.gerrit.extensions.api.projects.BranchInput in = new com.google.gerrit.extensions.api.projects.BranchInput(); gApi.projects().name(name(""project-a"")).branch(""dev"").create(in); org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(project, ""master""); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(repoA, ""master"", ""Change 1"", ""a.txt"", ""content"", topic); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(repoA, ""master"", ""Change 2"", ""b.txt"", ""content"", topic); repoA.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(repoA, ""dev"", ""Change 3"", ""a.txt"", ""content"", topic); com.google.gerrit.acceptance.PushOneCommit.Result change4 = createChange(repoA, ""dev"", ""Change 4"", ""b.txt"", ""content"", topic); approve(change1.getChangeId()); approve(change2.getChangeId()); approve(change3.getChangeId()); approve(change4.getChangeId()); submit(change4.getChangeId()); java.lang.String expectedTopic = name(topic); change1.assertChange(Change.Status.MERGED, expectedTopic, admin); change2.assertChange(Change.Status.MERGED, expectedTopic, admin); change3.assertChange(Change.Status.MERGED, expectedTopic, admin); change4.assertChange(Change.Status.MERGED, expectedTopic, admin); }",6747256fbf2a7cdbe90295cd4abbae2ec7531ae0,submitWholeTopicMultipleBranchesOnSameProject(),201834,426,458
60270,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Hashtags.java,10.0,"@com.google.gwt.uibinder.client.UiHandler(""add"") void onAdd(com.google.gwt.event.dom.client.ClickEvent e) { java.lang.String hashtag = hashtagTextBox.getText(); if (!(hashtag.isEmpty())) { addHashtag(hashtag); } }",86c7221579c6987c9d385ca3bb039736ec943e36,"@com.google.gwt.uibinder.client.UiHandler(""add"") void onAdd(com.google.gwt.event.dom.client.ClickEvent e) { java.lang.String hashtag = hashtagTextBox.getText(); while (hashtag.startsWith(""#"")) { hashtag = hashtag.substring(1); } if (!(hashtag.isEmpty())) { addHashtag(hashtag); } }",73165046ac6b2d47ae71693a180c216dad21eca2,onAdd(com.google.gwt.event.dom.client.ClickEvent),onAdd(com.google.gwt.event.dom.client.ClickEvent),8,10,"@com.google.gwt.uibinder.client.UiHandler(""add"") void onAdd(com.google.gwt.event.dom.client.ClickEvent e) { java.lang.String hashtag = hashtagTextBox.getText(); if (!(hashtag.isEmpty())) { addHashtag(hashtag); } }",86c7221579c6987c9d385ca3bb039736ec943e36,onAdd(com.google.gwt.event.dom.client.ClickEvent),187545,86,68
79563,gerrit-server_src_main_java_com_google_gerrit_server_git_ProjectConfig.java,48.0,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { accessSections.remove(section.getName()); } },da3349893d4359827734e31b91a7762faf26b8c6,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { com.google.gerrit.common.data.AccessSection a = accessSections.get(section.getName()); if (!(a.hasMoreConfig())) { accessSections.remove(a); } else { a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } },57d065855ce75b6e79f6809acc1993a41c1e4724,remove(com.google.gerrit.common.data.AccessSection),remove(com.google.gerrit.common.data.AccessSection),4,48,public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { com.google.gerrit.common.data.AccessSection a = accessSections.get(section.getName()); if (sectionsWithUnknownPermissions.contains(a)) { accessSections.remove(a); } else { a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } },9a4737b2994341ea7369e29dbcbb86d10dd73067,remove(com.google.gerrit.common.data.AccessSection),131435,98,102
80042,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,17.0,"@org.junit.Test public void testPushForMasterWithNotify() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user2 = accounts.user2(); java.lang.String pushSpec = (((""refs/for/master"" + ""%reviewer="") + (user.email)) + "",cc="") + (user2.email); sender.clear(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.NONE))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.OWNER))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.OWNER_REVIEWERS))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling.ALL))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress, user2.emailAddress); }",efe6e22b4b56068d80fc40e6245f890ad59e056c,"@org.junit.Test public void testPushForMasterWithNotify() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user2 = accounts.user2(); java.lang.String pushSpec = (((""refs/for/master"" + ""%reviewer="") + (user.email)) + "",cc="") + (user2.email); sender.clear(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewNotification.NONE))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewNotification.OWNER))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewNotification.OWNER_REVIEWERS))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.ReviewNotification.ALL))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress, user2.emailAddress); }",d564f9c12b385e920223c308a55515fb4849534a,testPushForMasterWithNotify(),testPushForMasterWithNotify(),3,17,"@org.junit.Test public void testPushForMasterWithNotify() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user2 = accounts.user2(); java.lang.String pushSpec = (((""refs/for/master"" + ""%reviewer="") + (user.email)) + "",cc="") + (user2.email); sender.clear(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.NotifyHandling.NONE))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(0); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER_REVIEWERS))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); sender.clear(); r = pushTo(((pushSpec + "",notify="") + (com.google.gerrit.extensions.api.changes.NotifyHandling.ALL))); r.assertOkStatus(); assertThat(sender.getMessages()).hasSize(1); m = sender.getMessages().get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress, user2.emailAddress); }",d4d3ff39ff468ff80f38d2b1bef4e9ca33588130,testPushForMasterWithNotify(),24883,390,390
62799,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteDraftPatchSet.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.server.change.DeleteDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet patchSet = rsrc.getPatchSet(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = patchSet.getId(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(patchSet.isDraft())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Patch set is not a draft.""); } if (!(allowDrafts)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Draft workflow is disabled.""); } if (!(rsrc.getControl().canDeleteDraft(dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not permitted to delete this draft patch set""); } deleteDraftPatchSet(patchSet, change); deleteOrUpdateDraftChange(patchSetId, change); return com.google.gerrit.extensions.restapi.Response.none(); }",dc66edd5142f073c8698e8c1a6a22bce1a0f07c5,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.server.change.DeleteDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet patchSet = rsrc.getPatchSet(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = patchSet.getId(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(patchSet.isDraft())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Patch set is not a draft""); } if (!(allowDrafts)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Draft workflow is disabled.""); } if (!(rsrc.getControl().canDeleteDraft(dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not permitted to delete this draft patch set""); } deleteDraftPatchSet(patchSet, change); deleteOrUpdateDraftChange(patchSetId, change); return com.google.gerrit.extensions.restapi.Response.none(); }",23cbf7434f7b1e8225e72851d591627572245deb,"apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.server.change.DeleteDraftPatchSet$Input)","apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.server.change.DeleteDraftPatchSet$Input)",4,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.server.change.DeleteDraftPatchSet.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet patchSet = rsrc.getPatchSet(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = patchSet.getId(); com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(patchSet.isDraft())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Patch set is not a draft""); } if (!(allowDrafts)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""Draft workflow is disabled""); } if (!(rsrc.getControl().canDeleteDraft(dbProvider.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""Not permitted to delete this draft patch set""); } deleteDraftPatchSet(patchSet, change); deleteOrUpdateDraftChange(patchSetId, change); return com.google.gerrit.extensions.restapi.Response.none(); }",d3694153c0c258386fdac70187c6a9970275735e,"apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.server.change.DeleteDraftPatchSet$Input)",142334,348,347
9518,src_main_java_com_google_gerrit_client_changes_AccountDashboardScreen.java,2.0,public void onSuccess(final com.google.gerrit.client.data.AccountDashboardInfo r) { if (isAttached()) { display(r); } },f202a48bf5108ecfbdb8e9c6ccf2a0cbd176a197,@java.lang.Override protected void prepare(final com.google.gerrit.client.data.AccountDashboardInfo r) { display(r); },6da5700151e279ffcd377ea1555d82d82c56b790,onSuccess(com.google.gerrit.client.data.AccountDashboardInfo),prepare(com.google.gerrit.client.data.AccountDashboardInfo),2,2,@java.lang.Override protected void preDisplay(final com.google.gerrit.client.data.AccountDashboardInfo r) { display(r); },d55f0ebac28725262782872bb62907d3fd3e9b41,preDisplay(com.google.gerrit.client.data.AccountDashboardInfo),852,33,34
74586,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangesCollection.java,5.0,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeUtil.findChanges(id, user.get()); if (ctls.isEmpty()) { try { changeIndexer.delete(id); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id).get(), e); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return new com.google.gerrit.server.change.ChangeResource(ctl); }",95c59ec57011011eac27bdf07c3a4117aa569211,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.findChanges(id, user.get()); if (ctls.isEmpty()) { try { changeIndexer.delete(id); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id).get(), e); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return new com.google.gerrit.server.change.ChangeResource(ctl); }",dcba0ec18bd6fb1296c6908ba707f8f926a4150d,parse(com.google.gerrit.reviewdb.client.Change$Id),parse(com.google.gerrit.reviewdb.client.Change$Id),2,5,"public com.google.gerrit.server.change.ChangeResource parse(com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(id, user.get()); if (ctls.isEmpty()) { try { changeIndexer.delete(id); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id).get(), e); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } if ((ctls.size()) != 1) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""Multiple changes found for "" + id)); } com.google.gerrit.server.project.ChangeControl ctl = ctls.get(0); if (!(ctl.isVisible(db.get()))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.server.change.ChangesCollection.toIdString(id)); } return new com.google.gerrit.server.change.ChangeResource(ctl); }",6065e743d914f58ebca75abd879593618f52e011,parse(com.google.gerrit.reviewdb.client.Change$Id),209061,335,334
67580,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,43.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> editby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return editby(parseAccount(who)); }",bd8501f6c7691a6ba2e06028c04556d0201a3e9b,,editby(java.lang.String),20,50,"@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> query(java.lang.String name) throws com.google.gerrit.server.query.QueryParseException { com.google.gerrit.server.config.AllUsersName allUsers = args.allUsersName.get(); try (org.eclipse.jgit.lib.Repository git = args.repoManager.openRepository(allUsers)) { com.google.gerrit.server.account.VersionedAccountQueries q = com.google.gerrit.server.account.VersionedAccountQueries.forUser(self()); q.load(git); java.lang.String query = q.getQueryList().getQuery(name); if (query != null) { return parse(query); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.query.QueryParseException((((""Unknown named query (no "" + (allUsers.get())) + "" repo): "") + name), e); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.query.QueryParseException((""Error parsing named query: "" + name), e); } throw new com.google.gerrit.server.query.QueryParseException((""Unknown named query: "" + name)); }",384c936f558ee373f40e64148b3eabd14ca750ff,query(java.lang.String),149201,93,330
136330,src_main_java_com_googlesource_gerrit_plugins_its_base_util_PropertyAttributeExtractor.java,2.0,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",228f8ea5a2bb3bb0786d051ba7fc38f9bf333d97,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",4dc91484705783e79c9f6437b29e9f72ba1311d8,extractFrom(com.google.gerrit.server.data.PatchSetAttribute),extractFrom(com.google.gerrit.server.data.PatchSetAttribute),5,2,"public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create(""revision"", patchSetAttribute.revision)); properties.add(propertyFactory.create(""patch-set-number"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""patchSetNumber"", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create(""ref"", patchSetAttribute.ref)); properties.add(propertyFactory.create(""created-on"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""createdOn"", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create(""parents"", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create(""deletions"", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create(""insertions"", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.add(propertyFactory.create(""is-draft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.add(propertyFactory.create(""isDraft"", java.lang.Boolean.toString(patchSetAttribute.isDraft))); properties.addAll(extractFrom(patchSetAttribute.uploader, ""uploader"")); properties.addAll(extractFrom(patchSetAttribute.author, ""author"")); return properties; }",542d8e5141b1514d445c68650d055f4127a8999a,extractFrom(com.google.gerrit.server.data.PatchSetAttribute),184601,350,377
131290,src_main_java_com_googlesource_gerrit_plugins_webhooks_EventHandler.java,1.0,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE)) { java.lang.String url = cfg.getString(com.googlesource.gerrit.plugins.webhooks.Configuration.REMOTE, name, ""url""); if (com.google.common.base.Strings.isNullOrEmpty(url)) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, cfg, name); if (processor.shouldProcess()) { post(url, processor); } } }",d5f8ec49d202636fb632037764be65ba82dcc3d1,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE)) { com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote = remoteFactory.create(cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(remote.getUrl())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } com.googlesource.gerrit.plugins.webhooks.EventProcessor processor = processorFactory.create(projectEvent, remote); if (processor.shouldProcess()) { post(remote, processor); } } }",2debb9f6f244c4d2e40b6ae77231007b386d05bd,onEvent(com.google.gerrit.server.events.Event),onEvent(com.google.gerrit.server.events.Event),10,0,"@java.lang.Override public void onEvent(com.google.gerrit.server.events.Event event) { if (!(event instanceof com.google.gerrit.server.events.ProjectEvent)) { return; } com.google.gerrit.server.events.ProjectEvent projectEvent = ((com.google.gerrit.server.events.ProjectEvent) (event)); org.eclipse.jgit.lib.Config cfg; try { cfg = configFactory.getProjectPluginConfigWithInheritance(projectEvent.getProjectNameKey(), pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""Ignoring event for a non-existing project {}, {}"", projectEvent.getProjectNameKey().get(), projectEvent); return; } for (java.lang.String name : cfg.getSubsections(com.googlesource.gerrit.plugins.webhooks.RemoteConfig.REMOTE)) { com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote = remoteFactory.create(cfg, name); if (com.google.common.base.Strings.isNullOrEmpty(remote.getUrl())) { com.googlesource.gerrit.plugins.webhooks.EventHandler.log.warn(""remote.{}.url not defined, skipping this remote"", name); continue; } taskFactory.create(projectEvent, remote).schedule(); } }",89d66c0f2ca847dd8904ac8c56f0851bda66c7ec,onEvent(com.google.gerrit.server.events.Event),65286,348,317
79042,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,22.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public java.util.List<com.google.gerrit.server.query.change.ChangeData> call() throws java.io.IOException { return doRead(); },2635ebf186e59dbf5bc9ad5e1b24463406e5fa63,,call(),10,3,@java.lang.Override public java.util.List<org.apache.lucene.document.Document> call() throws java.io.IOException { return doRead(fields); },d8594b8141e8e3b5511b5178fea10dc85a77cdf0,call(),78184,43,39
86303,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RevisionNoteData.java,1.0,"com.google.gerrit.reviewdb.client.PatchLineComment export() { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }",e20d7a7fabd7b0dd39baad12aa03e2f9d9011ac0,"com.google.gerrit.reviewdb.client.PatchLineComment export(com.google.gerrit.reviewdb.client.Change.Id changeId) { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(changeId), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); return plc; }",ac8a623086ee15617cfb6c20378a1978de88374b,export(),export(com.google.gerrit.reviewdb.client.Change$Id),3,4,"com.google.gerrit.reviewdb.client.PatchLineComment export(com.google.gerrit.reviewdb.client.Change.Id changeId, com.google.gerrit.reviewdb.client.PatchLineComment.Status status) { com.google.gerrit.reviewdb.client.PatchLineComment plc = new com.google.gerrit.reviewdb.client.PatchLineComment(key.export(changeId), lineNbr, author.export(), parentUuid, writtenOn); plc.setSide(side); plc.setMessage(message); if ((range) != null) { plc.setRange(range.export()); } plc.setTag(tag); plc.setRevId(new com.google.gerrit.reviewdb.client.RevId(revId)); plc.setStatus(status); return plc; }",7f00d8cdeade39f7f6f65e29074ff12ec7f34cb8,"export(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.PatchLineComment$Status)",193108,170,197
94512,gerrit-server_src_main_java_com_google_gerrit_server_edit_tree_TreeCreator.java,,,,"private org.eclipse.jgit.lib.ObjectId writeAndGetId(org.eclipse.jgit.dircache.DirCache tree, org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter objectInserter = repository.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId treeId = tree.writeTree(objectInserter); objectInserter.flush(); return treeId; } }",af1c8b197a7c2c037fd54e19329e445641ce4f0e,,"writeAndGetId(org.eclipse.jgit.dircache.DirCache,org.eclipse.jgit.lib.Repository)",5,0,"private static org.eclipse.jgit.lib.ObjectId writeAndGetId(org.eclipse.jgit.lib.Repository repository, org.eclipse.jgit.dircache.DirCache tree) throws java.io.IOException { try (org.eclipse.jgit.lib.ObjectInserter objectInserter = repository.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId treeId = tree.writeTree(objectInserter); objectInserter.flush(); return treeId; } }",e30c5d741f340fc7f6d20a60c5c32115c6589c82,"writeAndGetId(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.dircache.DirCache)",196328,108,109
78641,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_SubmitOnPushIT.java,6.0,"@org.junit.Test public void mergeOnPushToBranch() throws java.lang.Exception { grant(Permission.PUSH, project, ""refs/heads/master""); com.google.gerrit.acceptance.PushOneCommit.Result r = push(""refs/for/master"", PushOneCommit.SUBJECT, ""a.txt"", ""some content""); r.assertOkStatus(); git().push().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(((r.getCommit().name()) + "":refs/heads/master""))).call(); assertCommit(project, ""refs/heads/master""); assertSubmitApproval(r.getPatchSetId()); com.google.gerrit.extensions.common.ChangeInfo c = gApi.changes().id(r.getPatchSetId().getParentKey().get()).get(); assertThat(c.status).isEqualTo(ChangeStatus.MERGED); }",dec3c7a187142df11b9d6cf499fe917f9f1bc973,"@org.junit.Test public void mergeOnPushToBranch() throws java.lang.Exception { grant(Permission.PUSH, project, ""refs/heads/master""); com.google.gerrit.acceptance.PushOneCommit.Result r = push(""refs/for/master"", PushOneCommit.SUBJECT, ""a.txt"", ""some content""); r.assertOkStatus(); git().push().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(((r.getCommit().name()) + "":refs/heads/master""))).call(); assertCommit(project, ""refs/heads/master""); com.google.gerrit.server.query.change.ChangeData cd = com.google.common.collect.Iterables.getOnlyElement(queryProvider.get().byKey(new com.google.gerrit.reviewdb.client.Change.Key(r.getChangeId()))); org.eclipse.jgit.revwalk.RevCommit c = r.getCommit(); com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.currentPatchSet().getId(); assertThat(psId.get()).isEqualTo(1); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.MERGED); assertCommit(project, ""refs/heads/master""); assertSubmitApproval(psId); assertThat(cd.patchSets()).hasSize(1); assertThat(cd.patchSet(psId).getRevision().get()).isEqualTo(c.name()); }",05ec3d99954d1c38e976c9a45d9315c13686c85a,mergeOnPushToBranch(),mergeOnPushToBranch(),3,6,"@org.junit.Test public void mergeOnPushToBranch() throws java.lang.Exception { grant(Permission.PUSH, project, ""refs/heads/master""); com.google.gerrit.acceptance.PushOneCommit.Result r = push(""refs/for/master"", PushOneCommit.SUBJECT, ""a.txt"", ""some content""); r.assertOkStatus(); git().push().setRefSpecs(new org.eclipse.jgit.transport.RefSpec(((r.getCommit().name()) + "":refs/heads/master""))).call(); assertCommit(project, ""refs/heads/master""); com.google.gerrit.server.query.change.ChangeData cd = com.google.common.collect.Iterables.getOnlyElement(queryProvider.get().byKey(new com.google.gerrit.reviewdb.client.Change.Key(r.getChangeId()))); org.eclipse.jgit.revwalk.RevCommit c = r.getCommit(); com.google.gerrit.reviewdb.client.PatchSet.Id psId = cd.currentPatchSet().getId(); assertThat(psId.get()).isEqualTo(1); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.MERGED); assertSubmitApproval(psId); assertThat(cd.patchSets()).hasSize(1); assertThat(cd.patchSet(psId).getRevision().get()).isEqualTo(c.name()); }",8d03a3a8e3408cd5269426f1c6371c68fb9d0bd5,mergeOnPushToBranch(),129778,334,320
139471,java_com_google_gerrit_server_group_db_GroupConfig.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.server.group.db.GroupConfig loadforGroup(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId id, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = new com.google.gerrit.server.group.db.GroupConfig(groupUuid); groupConfig.load(rw, id); return groupConfig; }",7e5ba821f829a5c98c3c07a65c7f4e058f7e2092,,"loadforGroup(org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",10,21,@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.git.MetaDataUpdate update) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit c = super.commit(update); loadedGroup = java.util.Optional.of(loadedGroup.get().toBuilder().setRefState(c.toObjectId()).build()); return c; },834f581e360e28b0ff862f2101261812b64ca538,commit(com.google.gerrit.server.git.MetaDataUpdate),196709,138,98
69774,gerrit-gwtui_src_main_java_com_google_gerrit_client_Gerrit.java,32.0,"private static com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.AccountPreferencesInfo> createMyMenuBarCallback() { return new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.ui.LinkMenuBar myBar = com.google.gerrit.client.Gerrit.menuBars.get(GerritTopMenu.MY.menuName); myBar.clear(); java.util.List<com.google.gerrit.client.info.TopMenuItem> myMenuItems = com.google.gerrit.client.rpc.Natives.asList(prefs.my()); java.lang.String url = null; if (!(myMenuItems.isEmpty())) { if (myMenuItems.get(0).getUrl().startsWith(""#"")) { url = myMenuItems.get(0).getUrl().substring(1); } for (com.google.gerrit.client.info.TopMenuItem item : myMenuItems) { com.google.gerrit.client.Gerrit.addExtensionLink(myBar, item); } } com.google.gerrit.client.Gerrit.defaultScreenToken = url; } }; }",14be9f69533abeb3c15579cdce877482d8ada14c,"public static void refreshUserPreferences() { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view(""preferences"").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.setUserPreferences(prefs); } }); } else { com.google.gerrit.client.Gerrit.setUserPreferences(com.google.gerrit.client.Gerrit.getDefaultUserPreferences()); } }",a4181e7bd8823a5feb348f67b953ea8ccb7fac84,createMyMenuBarCallback(),refreshUserPreferences(),8,6,"public static void refreshUserPreferences() { if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view(""preferences"").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.setUserPreferences(prefs); } }); } else { com.google.gerrit.client.Gerrit.setUserPreferences(com.google.gerrit.client.info.AccountPreferencesInfo.createDefault()); } }",ec615cf3466b514dd0ff4b3feb1f8934ab09b6af,refreshUserPreferences(),102235,168,168
108164,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalId.java,8.0,"public org.eclipse.jgit.lib.ObjectId sha1() { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",ee0b1b12710d4bb3215a2372cb911ab06ea29ab6,"public org.eclipse.jgit.lib.ObjectId sha1() { @java.lang.SuppressWarnings(""deprecation"") byte[] h = com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes(); return org.eclipse.jgit.lib.ObjectId.fromRaw(h); }",bb0aef694ff8aa267fdaae39227e375518f412d0,sha1(),sha1(),7,8,"@java.lang.SuppressWarnings(""deprecation"") public org.eclipse.jgit.lib.ObjectId sha1() { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",5da83080dd5ce6a83ee63bd76a090c750c3a0d00,sha1(),2944,78,72
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ChangeGlue.java,4.0,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",33fad75611cc79af59bb726c4700883d8ab394ce,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.legacyId().get(), change.project()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",d2cbae62a487abe44a8fd99ff3251eb3410fb609,"onAction(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ActionInfo,com.google.gerrit.client.actions.ActionButton)","onAction(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ActionInfo,com.google.gerrit.client.actions.ActionButton)",7,4,"public static void onAction(com.google.gerrit.client.info.ChangeInfo change, com.google.gerrit.client.info.ActionInfo action, com.google.gerrit.client.actions.ActionButton button) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.change(change.project(), change.legacyId().get()).view(action.id()); com.google.gwt.core.client.JavaScriptObject f = com.google.gerrit.client.api.ChangeGlue.get(action.id()); if (f != null) { com.google.gerrit.client.api.ActionContext c = com.google.gerrit.client.api.ActionContext.create(api); c.set(action); c.set(change); c.button(button); com.google.gerrit.client.api.ApiGlue.invoke(f, c); } else { com.google.gerrit.client.api.DefaultActions.invoke(change, action, api); } }",45c6180edf25ddeb880fd750c6e091155b179961,"onAction(com.google.gerrit.client.info.ChangeInfo,com.google.gerrit.client.info.ActionInfo,com.google.gerrit.client.actions.ActionButton)",210326,240,240
79068,gerrit-server_src_main_java_com_google_gerrit_common_StreamEventsApiListener.java,,,,private com.google.gerrit.reviewdb.client.PatchSet getPatchSet(com.google.gerrit.reviewdb.client.PatchSet.Id id) throws com.google.gwtorm.server.OrmException { return unwrap(db.get()).patchSets().get(id); },765c2bcaa4f90ee584476022c3a8ac7ef9e1fa6f,,getPatchSet(com.google.gerrit.reviewdb.client.PatchSet$Id),13,22,"private com.google.gerrit.reviewdb.client.PatchSet getPatchSet(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.extensions.common.RevisionInfo info) throws com.google.gwtorm.server.OrmException { return psUtil.get(db.get(), notes, PatchSet.Id.fromRef(info.ref)); }",28d586095a8557971a570e4cf3de594983d149c2,"getPatchSet(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.extensions.common.RevisionInfo)",194812,69,91
73809,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_CherryPick.java,5.0,"@java.lang.Override public void updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { if ((newCommit) == null) { return; } ctx.getChangeUpdate().setPatchSetId(psId); com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(psId); ps.setCreatedOn(ctx.getWhen()); ps.setUploader(args.caller.getAccountId()); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(newCommit.getId().getName())); com.google.gerrit.reviewdb.client.Change c = toMerge.change(); ps.setGroups(com.google.gerrit.server.git.GroupCollector.getCurrentGroups(args.db, c)); args.db.patchSets().insert(java.util.Collections.singleton(ps)); c.setCurrentPatchSet(patchSetInfo); args.db.changes().update(java.util.Collections.singletonList(c)); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : args.approvalsUtil.byPatchSet(args.db, toMerge.getControl(), toMerge.getPatchsetId())) { approvals.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(ps.getId(), a)); ctx.getChangeUpdate().putApproval(a.getLabel(), a.getValue()); } args.db.patchSetApprovals().insert(approvals); newCommit.copyFrom(toMerge); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); newCommit.setControl(args.changeControlFactory.controlFor(toMerge.change(), args.caller)); mergeTip.moveTipTo(newCommit, newCommit); args.commits.put(newCommit); }",0c4ca99fae1199e03e5b6b2410701317a6c7efb9,"@java.lang.Override public void updateChangeImpl(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { if ((newCommit) == null) { return; } ctx.getChangeUpdate().setPatchSetId(psId); com.google.gerrit.reviewdb.client.PatchSet ps = new com.google.gerrit.reviewdb.client.PatchSet(psId); ps.setCreatedOn(ctx.getWhen()); ps.setUploader(args.caller.getAccountId()); ps.setRevision(new com.google.gerrit.reviewdb.client.RevId(newCommit.getId().getName())); com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); ps.setGroups(com.google.gerrit.server.git.GroupCollector.getCurrentGroups(args.db, c)); args.db.patchSets().insert(java.util.Collections.singleton(ps)); c.setCurrentPatchSet(patchSetInfo); args.db.changes().update(java.util.Collections.singletonList(c)); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : args.approvalsUtil.byPatchSet(args.db, ctx.getChangeControl(), toMerge.getPatchsetId())) { approvals.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(ps.getId(), a)); ctx.getChangeUpdate().putApproval(a.getLabel(), a.getValue()); } args.db.patchSetApprovals().insert(approvals); newCommit.setControl(ctx.getChangeControl()); newCommit.setPatchsetId(c.currentPatchSetId()); }",0f91b1cccc295779c495a4d7a35c099b4756b4a4,updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext),updateChangeImpl(com.google.gerrit.server.git.BatchUpdate.ChangeContext),17,5,"@java.lang.Override public void updateChangeImpl(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { checkState(((newCommit) != null), ""no new commit produced by CherryPick of %s, expected to fail fast"", toMerge.change().getId()); com.google.gerrit.reviewdb.client.PatchSet prevPs = args.psUtil.current(ctx.getDb(), ctx.getNotes()); args.psUtil.insert(ctx.getDb(), ctx.getUpdate(psId), psId, newCommit, false, (prevPs != null ? prevPs.getGroups() : null), null); ctx.getChange().setCurrentPatchSet(patchSetInfo); ctx.saveChange(); newCommit.setControl(ctx.getControl()); }",9601ad7e2fe9d258aed8511341c562edfb5b80a5,updateChangeImpl(com.google.gerrit.server.git.BatchUpdate.ChangeContext),73262,449,203
142190,java_com_google_gerrit_server_index_account_AccountIndexerImpl.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id, boolean deleted) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id, deleted)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",485505e87ca9a83b76e345f18e252633029c6fd9,,"reindexIfStale(com.google.gerrit.reviewdb.client.Account$Id,boolean)",3,0,"@java.lang.SuppressWarnings(""deprecation"") public com.google.common.util.concurrent.CheckedFuture<java.lang.Boolean, java.io.IOException> reindexIfStale(com.google.gerrit.reviewdb.client.Account.Id id) { java.util.concurrent.Callable<java.lang.Boolean> task = () -> { if (stalenessChecker.isStale(id)) { index(id); return true; } return false; }; return com.google.common.util.concurrent.Futures.makeChecked(com.google.common.util.concurrent.Futures.nonCancellationPropagating(batchExecutor.submit(task)), IndexUtils.MAPPER); }",1302a4b8ee8b0449638df75ad5fde70323eba784,reindexIfStale(com.google.gerrit.reviewdb.client.Account$Id),197466,160,155
97817,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChangeWithoutData(); },5399d5c68c3d4c10fcf1fac3442485999964c6b9,,user(com.google.gerrit.server.CurrentUser),15,26,@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForRef user(com.google.gerrit.server.CurrentUser user) { return forUser(user).asForRef().database(db); },93804af499f5f94b10633512880b23921d3b0beb,user(com.google.gerrit.server.CurrentUser),78553,61,53
52200,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,6.0,"private void onSave() { java.lang.String message = editArea.getValue().trim(); if ((message.length()) == 0) { return; } com.google.gerrit.client.changes.CommentInfo original = comment; com.google.gerrit.client.changes.CommentInput input = com.google.gerrit.client.changes.CommentInput.create(original); input.setMessage(message); enableEdit(false); com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { enableEdit(true); set(result); setEdit(false); if (autoClosed) { setOpen(false); } } @java.lang.Override public void onFailure(java.lang.Throwable e) { enableEdit(true); super.onFailure(e); } }; if ((original.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, cb); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(psId, original.id(), input, cb); } getCm().focus(); }",cd6564ed4200169611895b4611c13fdcdacf8117,"void save() { java.lang.String message = editArea.getValue().trim(); if ((message.length()) == 0) { return; } com.google.gerrit.client.changes.CommentInfo original = comment; com.google.gerrit.client.changes.CommentInput input = com.google.gerrit.client.changes.CommentInput.create(original); input.setMessage(message); enableEdit(false); com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { enableEdit(true); set(result); setEdit(false); if (autoClosed) { setOpen(false); } } @java.lang.Override public void onFailure(java.lang.Throwable e) { enableEdit(true); super.onFailure(e); } }; if ((original.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, cb); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(psId, original.id(), input, cb); } getCm().focus(); }",a954eb0c0466ee589d27b6b6021a58a04edebad0,onSave(),save(),3,22,"void save(com.google.gerrit.client.rpc.CallbackGroup group) { java.lang.String message = editArea.getValue().trim(); if ((message.length()) == 0) { return; } com.google.gerrit.client.changes.CommentInfo original = comment; com.google.gerrit.client.changes.CommentInput input = com.google.gerrit.client.changes.CommentInput.create(original); input.setMessage(message); enableEdit(false); com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo> cb = new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { enableEdit(true); set(result); setEdit(false); if (autoClosed) { setOpen(false); } parent.updateUnsaved(com.google.gerrit.client.diff.DraftBox.this, false); } @java.lang.Override public void onFailure(java.lang.Throwable e) { enableEdit(true); super.onFailure(e); } }; if ((original.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(psId, input, (group == null ? cb : group.add(cb))); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(psId, original.id(), input, (group == null ? cb : group.add(cb))); } getCm().focus(); }",ce5530b3ab84d9a1d93454711c08f05995f8cfab,save(com.google.gerrit.client.rpc.CallbackGroup),178321,323,386
85091,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onFailure(java.lang.Throwable caught) { loadConfigInfo(info, rev); }",ac52bc80adb7617fd0ef38dd53cce25ee8943434,,onFailure(java.lang.Throwable),2,103,"@java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, (""Loading file list and inline comments failed: "" + (caught.getMessage()))); loadConfigInfo(info, rev); }",c6a3d1b276007ee1546e38f8a0c35313955dab83,onFailure(java.lang.Throwable),12519,27,72
68451,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeKindCacheImpl.java,13.0,"@java.lang.Override public com.google.gerrit.server.change.ChangeKind load(com.google.gerrit.server.change.ChangeKindCacheImpl.Key key) throws java.io.IOException { if (java.util.Objects.equals(key.prior, key.next)) { return ChangeKind.NO_CODE_CHANGE; } try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(key.repo)) { org.eclipse.jgit.revwalk.RevCommit prior = walk.parseCommit(key.prior); walk.parseBody(prior); org.eclipse.jgit.revwalk.RevCommit next = walk.parseCommit(key.next); walk.parseBody(next); if (!(next.getFullMessage().equals(prior.getFullMessage()))) { if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CODE_CHANGE; } else { return ChangeKind.REWORK; } } if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CHANGE; } if (((prior.getParentCount()) != 1) || ((next.getParentCount()) != 1)) { return ChangeKind.REWORK; } org.eclipse.jgit.merge.ThreeWayMerger merger = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(key.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(key.repo), key.strategyName); merger.setBase(prior.getParent(0)); if ((merger.merge(next.getParent(0), prior)) && (merger.getResultTreeId().equals(next.getTree()))) { return ChangeKind.TRIVIAL_REBASE; } else { return ChangeKind.REWORK; } } finally { key.repo = null; } }",7daba8bf41eb69ece3c7b192f3d70df24f830475,"@java.lang.Override public com.google.gerrit.server.change.ChangeKind load(com.google.gerrit.server.change.ChangeKindCacheImpl.Key key) throws java.io.IOException { if (java.util.Objects.equals(key.prior, key.next)) { return ChangeKind.NO_CODE_CHANGE; } try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(key.repo)) { org.eclipse.jgit.revwalk.RevCommit prior = walk.parseCommit(key.prior); walk.parseBody(prior); org.eclipse.jgit.revwalk.RevCommit next = walk.parseCommit(key.next); walk.parseBody(next); if (!(next.getFullMessage().equals(prior.getFullMessage()))) { if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CODE_CHANGE; } else { return ChangeKind.REWORK; } } if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CHANGE; } if (((prior.getParentCount()) != 1) || ((next.getParentCount()) != 1)) { return ChangeKind.REWORK; } org.eclipse.jgit.merge.ThreeWayMerger merger = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(key.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(key.repo), key.strategyName); merger.setBase(prior.getParent(0)); try { if ((merger.merge(next.getParent(0), prior)) && (merger.getResultTreeId().equals(next.getTree()))) { return ChangeKind.TRIVIAL_REBASE; } } catch (com.google.gerrit.server.change.LargeObjectException e) { } return ChangeKind.REWORK; } finally { key.repo = null; } }",b32e5fec1a80435a9030698da0e20618e833b0f3,load(com.google.gerrit.server.change.ChangeKindCacheImpl$Key),load(com.google.gerrit.server.change.ChangeKindCacheImpl$Key),3,13,"@java.lang.Override public com.google.gerrit.server.change.ChangeKind load(com.google.gerrit.server.change.ChangeKindCacheImpl.Key key) throws java.io.IOException { if (java.util.Objects.equals(key.prior, key.next)) { return ChangeKind.NO_CODE_CHANGE; } try (org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(key.repo)) { org.eclipse.jgit.revwalk.RevCommit prior = walk.parseCommit(key.prior); walk.parseBody(prior); org.eclipse.jgit.revwalk.RevCommit next = walk.parseCommit(key.next); walk.parseBody(next); if (!(next.getFullMessage().equals(prior.getFullMessage()))) { if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CODE_CHANGE; } else { return ChangeKind.REWORK; } } if (com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.isSameDeltaAndTree(prior, next)) { return ChangeKind.NO_CHANGE; } if (((prior.getParentCount()) != 1) || ((next.getParentCount()) != 1)) { return ChangeKind.REWORK; } org.eclipse.jgit.merge.ThreeWayMerger merger = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(key.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(key.repo), key.strategyName); merger.setBase(prior.getParent(0)); try { if ((merger.merge(next.getParent(0), prior)) && (merger.getResultTreeId().equals(next.getTree()))) { return ChangeKind.TRIVIAL_REBASE; } } catch (org.eclipse.jgit.errors.LargeObjectException e) { } return ChangeKind.REWORK; } finally { key.repo = null; } }",a3455a316914d2da53d351ba3124c729e40343aa,load(com.google.gerrit.server.change.ChangeKindCacheImpl$Key),106780,466,464
67159,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditUtil.java,7.0,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.server.edit.ChangeEditUtil.editRefPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",a2f348b03597b980bb767263a67d06655265c955,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.reviewdb.client.RefNames.editRefPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",b5f596864e477c37500abdb013dbbfa20b80b032,"byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)","byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)",4,7,"public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.reviewdb.client.RefNames.refsEditPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }",b2d8cb825924521b37db799c9b024320198de25a,"byChange(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.server.IdentifiedUser)",107987,347,348
110346,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_NoteDbMigrator.java,12.0,public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setTrialMode(boolean trial) { this.trial = trial; return this; },706cd8ee9206c40fd742de1846d1f777a6714e3b,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator setTrialMode(boolean trial) { this.trial = trial; return this; },1bed5e0e4b440d01d45e6cb7abae7d6a2379703a,setTrialMode(boolean),setTrialMode(boolean),4,11,public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator.Builder setTrialMode(boolean trial) { this.trial = trial; return this; },488ecd5d74aecd5af5907a429ff51ee4044ec291,setTrialMode(boolean),101160,39,41
35880,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_AccountDashboardScreen.java,5.0,"@java.lang.Override protected void onInitUI() { super.onInitUI(); table = new com.google.gerrit.client.changes.ChangeTable2(); table.addStyleName(Gerrit.RESOURCES.css().accountDashboard()); outgoing = new com.google.gerrit.client.changes.ChangeTable2.Section(); incoming = new com.google.gerrit.client.changes.ChangeTable2.Section(); closed = new com.google.gerrit.client.changes.ChangeTable2.Section(); outgoing.setTitleText(Util.C.outgoingReviews()); incoming.setTitleText(Util.C.incomingReviews()); closed.setTitleText(Util.C.recentlyClosed()); table.addSection(outgoing); table.addSection(incoming); table.addSection(closed); add(table); table.setSavePointerId((""owner:"" + (ownerId))); }",89f9dc42f013c01595e25916644359c79d76b622,"@java.lang.Override protected void onInitUI() { super.onInitUI(); table = new com.google.gerrit.client.changes.ChangeTable2(); table.addStyleName(Gerrit.RESOURCES.css().accountDashboard()); outgoing = new com.google.gerrit.client.changes.ChangeTable2.Section(); incoming = new com.google.gerrit.client.changes.ChangeTable2.Section(); closed = new com.google.gerrit.client.changes.ChangeTable2.Section(); outgoing.setTitleText(Util.C.outgoingReviews()); incoming.setTitleText(Util.C.incomingReviews()); incoming.initHighlightUnreviewed(true, ownerId); closed.setTitleText(Util.C.recentlyClosed()); table.addSection(outgoing); table.addSection(incoming); table.addSection(closed); add(table); table.setSavePointerId((""owner:"" + (ownerId))); }",0ddf1d5bf69e3a0a6bc7dfa91381272e7c5bb7dd,onInitUI(),onInitUI(),6,5,"@java.lang.Override protected void onInitUI() { super.onInitUI(); table = new com.google.gerrit.client.changes.ChangeTable2(); table.addStyleName(Gerrit.RESOURCES.css().accountDashboard()); outgoing = new com.google.gerrit.client.changes.ChangeTable2.Section(); incoming = new com.google.gerrit.client.changes.ChangeTable2.Section(); closed = new com.google.gerrit.client.changes.ChangeTable2.Section(); outgoing.setTitleText(Util.C.outgoingReviews()); incoming.setTitleText(Util.C.incomingReviews()); incoming.setHighlightUnreviewed(true); closed.setTitleText(Util.C.recentlyClosed()); table.addSection(outgoing); table.addSection(incoming); table.addSection(closed); add(table); table.setSavePointerId((""owner:"" + (ownerId))); }",7e0b3181d99efc1badacbf67f74121cf6e0e92e0,onInitUI(),82866,208,205
107631,src_main_java_com_googlesource_gerrit_plugins_supermanifest_SuperManifestRefUpdatedListener.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.lang.StackTraceElement[] trimStack(java.lang.StackTraceElement[] boom, java.lang.StackTraceElement ref) { java.lang.String key = ((ref.getClassName()) + ""#"") + (ref.getMethodName()); java.util.List<java.lang.StackTraceElement> trimmed = new java.util.ArrayList<>(); for (java.lang.StackTraceElement e : boom) { java.lang.String boomKey = ((e.getClassName()) + ""#"") + (e.getMethodName()); if (boomKey.equals(key)) { break; } trimmed.add(e); } return trimmed.toArray(new java.lang.StackTraceElement[trimmed.size()]); }",4c36064eb8cc54771e0a3a21e19e0ce4feb7a72f,,"trimStack(java.lang.StackTraceElement[],java.lang.StackTraceElement)",4,14,"@com.google.common.annotations.VisibleForTesting static java.lang.StackTraceElement[] trimStack(java.lang.StackTraceElement[] trace, java.lang.StackTraceElement ref) { java.util.List<java.lang.StackTraceElement> trimmed = new java.util.ArrayList<>(); for (java.lang.StackTraceElement e : trace) { trimmed.add(e); if ((e.getClassName().equals(ref.getClassName())) && (e.getMethodName().equals(ref.getMethodName()))) { break; } } return trimmed.toArray(new java.lang.StackTraceElement[trimmed.size()]); }",20f202608854a54c38f0d52dd36e901a7b94af44,"trimStack(java.lang.StackTraceElement[],java.lang.StackTraceElement)",198505,154,131
60021,gerrit-server_src_main_java_com_google_gerrit_server_edit_ChangeEditUtil.java,0.0,"public void publish(com.google.gerrit.server.edit.ChangeEdit edit) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange(); org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject()); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter(); try { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = edit.getBasePatchSet(); if (!(basePatchSet.getId().equals(change.currentPatchSetId()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""only edit for current patch set can be published""); } insertPatchSet(edit, change, repo, rw, basePatchSet, squashEdit(repo, rw, inserter, edit.getEditCommit(), basePatchSet)); } finally { inserter.release(); rw.release(); } com.google.gerrit.server.edit.ChangeEditUtil.deleteRef(repo, edit); } finally { repo.close(); } }",15b3cb508b1694e8d6b487bcaf66b6edc128d1ad,"public void publish(com.google.gerrit.server.edit.ChangeEdit edit) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange(); org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject()); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter(); try { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = edit.getBasePatchSet(); if (!(basePatchSet.getId().equals(change.currentPatchSetId()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""only edit for current patch set can be published""); } insertPatchSet(edit, change, repo, rw, basePatchSet, squashEdit(repo, rw, inserter, edit.getEditCommit(), basePatchSet)); } finally { inserter.release(); rw.release(); } com.google.gerrit.server.edit.ChangeEditModifier.deleteRef(repo, edit); } finally { repo.close(); } }",1956efe0bc8aad8d55df2c8074b77114512bff1b,publish(com.google.gerrit.server.edit.ChangeEdit),publish(com.google.gerrit.server.edit.ChangeEdit),9,0,"public void publish(com.google.gerrit.server.edit.ChangeEdit edit) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.Change change = edit.getChange(); org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject()); try { org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter(); try { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = edit.getBasePatchSet(); if (!(basePatchSet.getId().equals(change.currentPatchSetId()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""only edit for current patch set can be published""); } insertPatchSet(edit, change, repo, rw, basePatchSet, squashEdit(repo, rw, inserter, edit.getEditCommit(), basePatchSet)); } finally { inserter.release(); rw.release(); } com.google.gerrit.server.edit.ChangeEditUtil.deleteRef(repo, edit); } finally { repo.close(); } }",15b3cb508b1694e8d6b487bcaf66b6edc128d1ad,publish(com.google.gerrit.server.edit.ChangeEdit),170752,355,355
36337,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchSetSelectBox.java,,,,java.lang.String deselected();,69a947c6c38c8e6d44e057e76052d5cd6f9caad9,,deselected(),5,3,java.lang.String hidden();,e2ccb0115b9906ecb800f58f890d812b87b180c7,hidden(),88569,8,7
56222,gitiles-servlet_src_main_java_com_google_gitiles_HtmlDiffFormatter.java,3.0,"private void renderHeader(java.lang.String header) throws java.io.IOException { int lf = header.indexOf('\n'); java.lang.String first; java.lang.String rest; if (0 <= lf) { first = header.substring(0, lf); rest = header.substring((lf + 1)); } else { first = header; rest = """"; } getOutputStream().write(renderer.newRenderer(""gitiles.diffHeader"").setData(com.google.common.collect.ImmutableMap.of(""first"", first, ""rest"", rest, ""fileIndex"", fileIndex)).render().getBytes(Charsets.UTF_8)); }",01d03e7ea8f494a183d7a921cff9090c9c325b57,"private void renderHeader(java.lang.String header) throws java.io.IOException { int lf = header.indexOf('\n'); java.lang.String first; java.lang.String rest; if (0 <= lf) { first = header.substring(0, lf); rest = header.substring((lf + 1)); } else { first = header; rest = """"; } java.util.List<java.util.Map<java.lang.String, java.lang.String>> parts = com.google.common.collect.Lists.newArrayListWithCapacity(4); for (java.lang.String part : com.google.gitiles.HtmlDiffFormatter.SPACE.split(first)) { if (part.startsWith(""a/"")) { parts.add(com.google.common.collect.ImmutableMap.of(""text"", part, ""url"", revisionUrl(view.getOldRevision(), part.substring(2)))); } else if (part.startsWith(""b/"")) { parts.add(com.google.common.collect.ImmutableMap.of(""text"", part, ""url"", revisionUrl(view.getRevision(), part.substring(2)))); } else { parts.add(com.google.common.collect.ImmutableMap.of(""text"", part)); } } getOutputStream().write(renderer.newRenderer(""gitiles.diffHeader"").setData(com.google.common.collect.ImmutableMap.of(""firstParts"", parts, ""rest"", rest, ""fileIndex"", fileIndex)).render().getBytes(Charsets.UTF_8)); }",5ef3398c615c3539e624f8377fb4d5cabfd37b30,renderHeader(java.lang.String),renderHeader(java.lang.String),4,3,"private void renderHeader(java.lang.String header) throws java.io.IOException { int lf = header.indexOf('\n'); java.lang.String rest = (0 <= lf) ? header.substring((lf + 1)) : """"; java.util.List<java.util.Map<java.lang.String, java.lang.String>> parts = com.google.common.collect.Lists.newArrayListWithCapacity(3); parts.add(com.google.common.collect.ImmutableMap.of(""text"", ""diff --git"")); if ((entry.getChangeType()) != (org.eclipse.jgit.diff.DiffEntry.ChangeType.ADD)) { parts.add(com.google.common.collect.ImmutableMap.of(""text"", com.google.gitiles.GIT_PATH.quote(((getOldPrefix()) + (entry.getOldPath()))), ""url"", revisionUrl(view.getOldRevision(), entry.getOldPath()))); } else { parts.add(com.google.common.collect.ImmutableMap.of(""text"", com.google.gitiles.GIT_PATH.quote(((getOldPrefix()) + (entry.getNewPath()))))); } if ((entry.getChangeType()) != (org.eclipse.jgit.diff.DiffEntry.ChangeType.DELETE)) { parts.add(com.google.common.collect.ImmutableMap.of(""text"", com.google.gitiles.GIT_PATH.quote(((getNewPrefix()) + (entry.getNewPath()))), ""url"", revisionUrl(view.getRevision(), entry.getNewPath()))); } else { parts.add(com.google.common.collect.ImmutableMap.of(""text"", com.google.gitiles.GIT_PATH.quote(((getNewPrefix()) + (entry.getOldPath()))))); } getOutputStream().write(renderer.newRenderer(""gitiles.diffHeader"").setData(com.google.common.collect.ImmutableMap.of(""firstParts"", parts, ""rest"", rest, ""fileIndex"", fileIndex)).render().getBytes(Charsets.UTF_8)); }",8e8caae3cb99d10b62db02b57199744fcad1f889,renderHeader(java.lang.String),38435,327,451
88199,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotesCache.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private int changeMessage() { int key = (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(20)); return (((((((((((com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.O) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + key) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.T)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(64))) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (patchSetId())) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P); },7ce2e8b2e5f4e789621e3a1a648072933acb5845,,changeMessage(),3,15,private static int changeMessage() { int key = (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(20)); return (((((((((((com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.O) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + key) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.K)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.T)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.str(64))) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.patchSetId())) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P)) + (com.google.gerrit.server.notedb.ChangeNotesCache.Weigher.P); },377335fb45cdc3b6040678d01620a1f2adc45030,changeMessage(),171967,313,334
37755,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeAlways.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge); }",cc2fa33fd04bde1f12baef0e55b57589f4b66868,,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",8,0,"@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return com.google.gerrit.server.git.MergeUtil.canMerge(args.mergeSorter, args.repo, args.useContentMerge, mergeTip, toMerge); }",c147485f98ce21ad5d3517fd82872a168b08576c,"dryRun(com.google.gerrit.server.git.CodeReviewCommit,com.google.gerrit.server.git.CodeReviewCommit)",69138,95,101
50253,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,26.0,"private void parseCreate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { com.google.gerrit.server.git.ReceiveCommits.log.error(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canCreate(rp.getRevWalk(), obj)) { validateNewCommits(ctl, cmd); batch.addCommand(cmd); } else { reject(cmd); } }",14feb906c96e2f173750f161efb8c1514f5b491a,"private void parseCreate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { com.google.gerrit.server.git.ReceiveCommits.log.error(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canCreate(rp.getRepository(), rp.getRevWalk(), obj)) { validateNewCommits(ctl, cmd); batch.addCommand(cmd); } else { reject(cmd); } }",5e9f64b8683b4de7ce90d0179ac4f01734f5cdb8,parseCreate(org.eclipse.jgit.transport.ReceiveCommand),parseCreate(org.eclipse.jgit.transport.ReceiveCommand),6,26,"private void parseCreate(final org.eclipse.jgit.transport.ReceiveCommand cmd) { org.eclipse.jgit.revwalk.RevObject obj; try { obj = rp.getRevWalk().parseAny(cmd.getNewId()); } catch (java.io.IOException err) { com.google.gerrit.server.git.ReceiveCommits.log.error(((((""Invalid object "" + (cmd.getNewId().name())) + "" for "") + (cmd.getRefName())) + "" creation""), err); reject(cmd, ""invalid object""); return; } if ((com.google.gerrit.server.git.ReceiveCommits.isHead(cmd)) && (!(isCommit(cmd)))) { return; } com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canCreate(rp.getRevWalk(), obj)) { validateNewCommits(ctl, cmd); batch.addCommand(cmd); } else { reject(cmd); } }",14feb906c96e2f173750f161efb8c1514f5b491a,parseCreate(org.eclipse.jgit.transport.ReceiveCommand),147609,234,229
68506,src_main_java_com_googlesource_gerrit_plugins_uploadvalidator_PathValidator.java,1.0,"private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser(); org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader(); try { p.reset(or, new org.eclipse.jgit.revwalk.RevWalk(repo).parseTree(repo.resolve(name))); return p; } finally { or.release(); } }",839d155eae78a43d06ea0cd82ac27543601259d2,"private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser(); try (final org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { p.reset(or, new org.eclipse.jgit.revwalk.RevWalk(repo).parseTree(repo.resolve(name))); return p; } }",883ddd12402425906346e198ea01b441f5f538b4,"getTreeIterator(org.eclipse.jgit.lib.Repository,java.lang.String)","getTreeIterator(org.eclipse.jgit.lib.Repository,java.lang.String)",2,1,"private org.eclipse.jgit.treewalk.AbstractTreeIterator getTreeIterator(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { org.eclipse.jgit.treewalk.CanonicalTreeParser p = new org.eclipse.jgit.treewalk.CanonicalTreeParser(); try (org.eclipse.jgit.lib.ObjectReader or = repo.newObjectReader()) { p.reset(or, new org.eclipse.jgit.revwalk.RevWalk(repo).parseTree(repo.resolve(name))); return p; } }",7c0fcdddc198585a1c20900629e7e84dac51e734,"getTreeIterator(org.eclipse.jgit.lib.Repository,java.lang.String)",44257,133,132
154472,java_com_google_gerrit_server_restapi_change_PostReviewersOp.java,4.0,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.get(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",94e16296d0670ee813c8b48885d254d71bfd2520,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.getEvenIfMissing(r.getAccountId())).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",f8c5b47b7c201132bb01b8d088aa93d040e201cc,postUpdate(com.google.gerrit.server.update.Context),postUpdate(com.google.gerrit.server.update.Context),8,4,"@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) throws java.lang.Exception { opResult = com.google.gerrit.server.restapi.change.PostReviewersOp.Result.builder().setAddedReviewers(com.google.common.collect.ImmutableList.copyOf(addedReviewers)).setAddedCCs(com.google.common.collect.ImmutableList.copyOf(addedCCs)).build(); emailReviewers(rsrc.getChange(), com.google.common.collect.Lists.transform(addedReviewers, ( r) -> r.getAccountId()), ((addedCCs) == null ? com.google.common.collect.ImmutableList.of() : addedCCs), reviewersByEmail, addedCCsByEmail, notify, accountsToNotify); if (!(addedReviewers.isEmpty())) { java.util.List<com.google.gerrit.server.account.AccountState> reviewers = addedReviewers.stream().map(( r) -> accountCache.maybeGet(r.getAccountId())).flatMap(Streams::stream).collect(java.util.stream.Collectors.toList()); reviewerAdded.fire(rsrc.getChange(), patchSet, reviewers, ctx.getAccount(), ctx.getWhen()); } }",6e6a97d015f5a8a026e28f1028f410ed8b130f7a,postUpdate(com.google.gerrit.server.update.Context),86516,280,285
60211,gerrit-server_src_main_java_com_google_gerrit_server_change_EmailReviewComments.java,5.0,@java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { return null; },265f412523f4c4670f048f0572ba4d287fcf397c,"@java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException(""No user on merge thread""); }",f4b06648fd2e26571396dd5b572f205327d9897f,getCurrentUser(),getCurrentUser(),2,5,"@java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException(""No user on email thread""); }",9b74423d78ae0b21e14c49f57935e7616893be41,getCurrentUser(),162536,40,40
72417,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,0.0,"public com.google.gerrit.server.IdentifiedUser create(java.net.SocketAddress remotePeer, com.google.gerrit.reviewdb.client.Account.Id id) { return new com.google.gerrit.server.IdentifiedUser(capabilityControlFactory, authConfig, realm, anonymousCowardName, canonicalUrl, accountCache, groupBackend, disableReverseDnsLookup, com.google.inject.util.Providers.of(remotePeer), null, id, null); }",2df97f43b8a7a9f6ecdbb9e783e8fe3d33761c14,"public com.google.gerrit.server.IdentifiedUser create(java.net.SocketAddress remotePeer, com.google.gerrit.reviewdb.client.Account.Id id) { return new com.google.gerrit.server.IdentifiedUser(capabilityControlFactory, null, authConfig, realm, anonymousCowardName, canonicalUrl, accountCache, groupBackend, disableReverseDnsLookup, com.google.inject.util.Providers.of(remotePeer), null, id, null); }",91a8950b82e8554c01b757f8e401fbd1e6517a3d,"create(java.net.SocketAddress,com.google.gerrit.reviewdb.client.Account$Id)","create(java.net.SocketAddress,com.google.gerrit.reviewdb.client.Account$Id)",11,0,"public com.google.gerrit.server.IdentifiedUser create(java.net.SocketAddress remotePeer, com.google.gerrit.reviewdb.client.Account.Id id) { return new com.google.gerrit.server.IdentifiedUser(capabilityControlFactory, starredChangesUtil, authConfig, realm, anonymousCowardName, canonicalUrl, accountCache, groupBackend, disableReverseDnsLookup, com.google.inject.util.Providers.of(remotePeer), null, id, null); }",973b9d04aa8aa5a4b0f8cb9b06cbe83fb56bc76e,"create(java.net.SocketAddress,com.google.gerrit.reviewdb.client.Account$Id)",59104,109,112
69384,gerrit-server_src_test_java_com_google_gerrit_server_git_gpg_PublicKeyStoreTest.java,,,,"@org.junit.Test public void testKeyToString() throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = TestKey.KEY1.getPublicKey(); assertThat(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(key)).isEqualTo((""46328A8C Testuser One <test1@example.com>"" + "" (04AE A7ED 2F82 1133 E5B1 28D1 ED06 25DC 4632 8A8C)"")); }",861343699ef6f9e52bf08f4d86dff21712378218,,testKeyToString(),5,4,"@org.junit.Test public void testKeyToString() throws java.lang.Exception { org.bouncycastle.openpgp.PGPPublicKey key = com.google.gerrit.server.git.gpg.TestKey.key1().getPublicKey(); assertEquals((""46328A8C Testuser One <test1@example.com>"" + "" (04AE A7ED 2F82 1133 E5B1 28D1 ED06 25DC 4632 8A8C)""), com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(key)); }",17652066d57c04495eafc70288ba38783f8452f1,testKeyToString(),209823,119,131
30302,src_test_java_com_google_gwtorm_jdbc_TestJdbcAccess.java,42.0,"@org.junit.Test public void testUpsertTwoBothExistsing() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1, 1); createClassUnderTest().upsert(com.google.gwtorm.jdbc.TestJdbcAccess.TWO_ROWS); }",7cfd76a0fe91bca91242dac512d5d7bce384fd28,"@org.junit.Test public void testUpsertTwoBothExistsing() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1, 1); createClassUnderTest().upsert(twoRows); }",d0b2b987423218454eeb23b95217c3b7ba1fdc94,testUpsertTwoBothExistsing(),testUpsertTwoBothExistsing(),7,9,"@org.junit.Test public void testUpsertTwoBothExisting() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1, 1); java.sql.PreparedStatement insert = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.INSERT); createClassUnderTest().upsert(twoRows); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(update); com.google.gwtorm.jdbc.TestJdbcAccess.assertNotUsed(insert); }",e1c9e3b259eb636131f3837ae9c9a4206e2b3763,testUpsertTwoBothExisting(),157410,69,146
159851,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,5.0,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(""."").append(args[i]); } return commandName.toString(); }",fb8f919e7c112abba762266fa30d8cb2d2496216,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { for (int i = 1; i < (trimmedArgs.length); i++) { commandName.append(""."").append(trimmedArgs[i]); } } return commandName.toString(); }",025ef70aadd9c5f89732b8d54a1dabe283ab3cae,extractWhat(com.google.gerrit.sshd.DispatchCommand),extractWhat(com.google.gerrit.sshd.DispatchCommand),6,5,"private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return ""Command was already destroyed""; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] trimmedArgs = dcmd.getTrimmedArguments(); if (trimmedArgs != null) { commandName.append(com.google.common.base.Joiner.on(""."").join(trimmedArgs)); } return commandName.toString(); }",03959d5b7a71929dfae0ef9b9150ca1b542c08b0,extractWhat(com.google.gerrit.sshd.DispatchCommand),193449,127,119
59725,gerrit-server_src_main_java_com_google_gerrit_server_project_RefPatternMatcher.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String evaluate(com.google.gerrit.common.data.ParameterizedString parameterizedRef, java.lang.String userName) { return parameterizedRef.replace(java.util.Collections.singletonMap(""username"", userName)); }",232988e815792cbb7a6c8b644f540d81ba6521dd,,"evaluate(com.google.gerrit.common.data.ParameterizedString,java.lang.String)",7,8,"private java.lang.String expand(com.google.gerrit.common.data.ParameterizedString parameterizedRef, java.lang.String userName) { return parameterizedRef.replace(java.util.Collections.singletonMap(""username"", userName)); }",bd43c1c23b8b4ece33dfbea70f0d775f765a9156,"expand(com.google.gerrit.common.data.ParameterizedString,java.lang.String)",23508,51,51
130732,gerrit-server_src_main_java_com_google_gerrit_server_account_PutHttpPassword.java,2.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",bbf9b82885613d22683fc1b66ef17dba34ec8827,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.HttpPasswordInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.server.account.HttpPasswordInput(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",1b9f73f8af565d297fa334d56bffcd580c591da4,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutHttpPassword$Input)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.HttpPasswordInput)",2,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.common.HttpPasswordInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); } if (input == null) { input = new com.google.gerrit.extensions.common.HttpPasswordInput(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { newPassword = null; } else { permissionBackend.user(self).check(GlobalPermission.ADMINISTRATE_SERVER); newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",18bc57975eaa4c0e652131177bff7a5e4f4aa0b9,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.common.HttpPasswordInput)",148353,336,336
66770,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeInfo.java,71.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final native boolean submittable();,a66119d21bc18eafd18004fd38cba84dbaab3bc3,,submittable(),6,96,public final boolean submittable() { init(); getMissingLabelIndex(); return _submittable(); },672264b3723f2834c0adc2f42213cfe3d6653caa,submittable(),100965,7,21
68794,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_DiffPreferences.java,41.0,public static com.google.gerrit.client.account.DiffPreferences create(com.google.gerrit.extensions.client.DiffPreferencesInfo in) { com.google.gerrit.client.account.DiffPreferences p = createObject().cast(); p.ignoreWhitespace(in.ignoreWhitespace); p.tabSize(in.tabSize); p.lineLength(in.lineLength); p.cursorBlinkRate(in.cursorBlinkRate); p.context(in.context); p.intralineDifference(in.intralineDifference); p.showLineEndings(in.showLineEndings); p.showTabs(in.showTabs); p.showWhitespaceErrors(in.showWhitespaceErrors); p.syntaxHighlighting(in.syntaxHighlighting); p.hideTopMenu(in.hideTopMenu); p.autoHideDiffTableHeader(in.autoHideDiffTableHeader); p.hideLineNumbers(in.hideLineNumbers); p.expandAllComments(in.expandAllComments); p.manualReview(in.manualReview); p.renderEntireFile(in.renderEntireFile); p.theme(in.theme); p.hideEmptyPane(in.hideEmptyPane); return p; },697d7e7ba84b0d4945e71e4be44a9f93ea1b4b56,public static com.google.gerrit.client.account.DiffPreferences create(com.google.gerrit.extensions.client.DiffPreferencesInfo in) { com.google.gerrit.client.account.DiffPreferences p = createObject().cast(); p.ignoreWhitespace(in.ignoreWhitespace); p.tabSize(in.tabSize); p.lineLength(in.lineLength); p.cursorBlinkRate(in.cursorBlinkRate); p.context(in.context); p.intralineDifference(in.intralineDifference); p.showLineEndings(in.showLineEndings); p.showTabs(in.showTabs); p.showWhitespaceErrors(in.showWhitespaceErrors); p.syntaxHighlighting(in.syntaxHighlighting); p.hideTopMenu(in.hideTopMenu); p.autoHideDiffTableHeader(in.autoHideDiffTableHeader); p.hideLineNumbers(in.hideLineNumbers); p.expandAllComments(in.expandAllComments); p.manualReview(in.manualReview); p.renderEntireFile(in.renderEntireFile); p.theme(in.theme); p.hideEmptyPane(in.hideEmptyPane); p.matchBrackets(in.matchBrackets); return p; },220b4d53f27a7424899334caf669b24ea18a69e8,create(com.google.gerrit.extensions.client.DiffPreferencesInfo),create(com.google.gerrit.extensions.client.DiffPreferencesInfo),12,50,public static com.google.gerrit.client.account.DiffPreferences create(com.google.gerrit.extensions.client.DiffPreferencesInfo in) { if (in == null) { in = com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults(); } com.google.gerrit.client.account.DiffPreferences p = createObject().cast(); p.ignoreWhitespace(in.ignoreWhitespace); p.tabSize(in.tabSize); p.lineLength(in.lineLength); p.cursorBlinkRate(in.cursorBlinkRate); p.context(in.context); p.intralineDifference(in.intralineDifference); p.showLineEndings(in.showLineEndings); p.showTabs(in.showTabs); p.showWhitespaceErrors(in.showWhitespaceErrors); p.syntaxHighlighting(in.syntaxHighlighting); p.hideTopMenu(in.hideTopMenu); p.autoHideDiffTableHeader(in.autoHideDiffTableHeader); p.hideLineNumbers(in.hideLineNumbers); p.expandAllComments(in.expandAllComments); p.manualReview(in.manualReview); p.renderEntireFile(in.renderEntireFile); p.theme(in.theme); p.hideEmptyPane(in.hideEmptyPane); p.retainHeader(in.retainHeader); p.skipUncommented(in.skipUncommented); p.skipDeleted(in.skipDeleted); p.matchBrackets(in.matchBrackets); return p; },5bae528581ce56843136a2063de7fe4d25dbd354,create(com.google.gerrit.extensions.client.DiffPreferencesInfo),205804,278,339
101813,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_FileExtensionValidatorTest.java,3.0,"@org.junit.Test public void testBlockedExtensions() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<java.lang.String> expected = new java.util.ArrayList<>(); for (java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC) { expected.add((""ERROR: blocked file: foo."" + extension)); } assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",f3a8a47218d18cd38ae5e17620833d72390bab84,"@org.junit.Test public void testBlockedExtensions() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.performValidation(repo, c, new org.eclipse.jgit.revwalk.RevWalk(repo), com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<java.lang.String> expected = new java.util.ArrayList<>(); for (java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC) { expected.add((""ERROR: blocked file: foo."" + extension)); } assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",b6a5e619dc90783229fe7cbea85a057370af6f8b,testBlockedExtensions(),testBlockedExtensions(),10,3,"@org.junit.Test public void testBlockedExtensions() throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(rw, com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidator.performValidation(repo, c, rw, com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC); java.util.List<java.lang.String> expected = new java.util.ArrayList<>(); for (java.lang.String extension : com.googlesource.gerrit.plugins.uploadvalidator.FileExtensionValidatorTest.BLOCKED_EXTENSIONS_LC) { expected.add((""ERROR: blocked file: foo."" + extension)); } assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); } }",a30b0713dc8bd933334b403024ee53b821f4e977,testBlockedExtensions(),47773,254,276
165336,javatests_com_google_gerrit_acceptance_ProjectResetterTest.java,20.0,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",03ea740291c126f5afdd1b1f62b70ce927c4f261,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null).reset(project).reset(allUsers).build()) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",08d420b74e715d0b3e2016bc0908f65ad0465565,accountEvictionFromAccountCreatorIfUserBranchIsDeleted(),accountEvictionFromAccountCreatorIfUserBranchIsDeleted(),6,20,"@org.junit.Test public void accountEvictionFromAccountCreatorIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.acceptance.AccountCreator accountCreator = org.easymock.EasyMock.createNiceMock(com.google.gerrit.acceptance.AccountCreator.class); accountCreator.evict(com.google.common.collect.ImmutableSet.of(accountId)); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCreator); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(accountCreator, null, null, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCreator); }",4915e5817f1910e1d95bba2fb636d5e822ec3019,accountEvictionFromAccountCreatorIfUserBranchIsDeleted(),120997,314,331
46970,gerrit-server_src_test_java_com_google_gerrit_server_config_ListCapabilitiesTest.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Before public void setUp() throws java.lang.Exception { com.google.inject.AbstractModule mod = new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND); bind(com.google.gerrit.server.config.EXTERNAL_CAPABILITY_KIND).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(""startreplication"")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getName() { return ""startReplication""; } @java.lang.Override public java.lang.String getDescription() { return ""Start Replication""; } }); } }; injector = com.google.inject.Guice.createInjector(mod); }",a747d86d0386de7c99fb5221437fd2c7e960eb6d,,setUp(),21,1,"@org.junit.Before public void setUp() throws java.lang.Exception { com.google.inject.AbstractModule mod = new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicMap.mapOf(binder(), com.google.gerrit.extensions.config.CapabilityDefinition.class); bind(com.google.gerrit.extensions.config.CapabilityDefinition.class).annotatedWith(com.google.gerrit.extensions.annotations.Exports.named(""printHello"")).toInstance(new com.google.gerrit.extensions.config.CapabilityDefinition() { @java.lang.Override public java.lang.String getDescription() { return ""Print Hello""; } }); } }; injector = com.google.inject.Guice.createInjector(mod); }",96b938528120bd5147e0f946a75e93f5c8de4201,setUp(),203876,214,183
139471,java_com_google_gerrit_server_group_db_Groups.java,1.0,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { if (readFromNoteDb) { throw new com.google.gwtorm.server.OrmException(""Audit logs not yet implemented in NoteDb""); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }",44b3f14d3b428ce18c622dcfa62c4f01e6f86bd7,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (readFromNoteDb) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } return db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); }",c25e86b46e1b6248befe2aace1cdffdb6017d502,"getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",10,2,"public java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (groupsMigration.readFromNoteDb()) { return auditLogReader.getMembersAudit(groupUuid); } java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> group = com.google.gerrit.server.group.db.Groups.getGroupFromReviewDb(db, groupUuid); if (!(group.isPresent())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> audits = db.accountGroupMembersAudit().byGroup(group.get().getId()).toList(); java.util.Collections.sort(audits, java.util.Comparator.comparing((com.google.gerrit.reviewdb.client.AccountGroupMemberAudit a) -> a.getAddedOn())); return audits; }",a66e8f99ebed4e0acbb3c868b214a0195b530c00,"getMembersAudit(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",196700,208,285
148032,java_com_google_gerrit_server_restapi_change_GetPastAssignees.java,0.0,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },5ea4a3b23c22698a1d69d4b3456571b55691adfa,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.restapi.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },1f0c71ede62921e102fb3ea0ef709b79c8ad0e97,apply(com.google.gerrit.server.change.ChangeResource),apply(com.google.gerrit.server.restapi.change.ChangeResource),17,0,@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.List<com.google.gerrit.extensions.common.AccountInfo>> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees = rsrc.getNotes().load().getPastAssignees(); if (pastAssignees == null) { return com.google.gerrit.extensions.restapi.Response.ok(java.util.Collections.emptyList()); } com.google.gerrit.server.account.AccountLoader accountLoader = accountLoaderFactory.create(true); java.util.List<com.google.gerrit.extensions.common.AccountInfo> infos = pastAssignees.stream().map(accountLoader::get).collect(java.util.stream.Collectors.toList()); accountLoader.fill(); return com.google.gerrit.extensions.restapi.Response.ok(infos); },5ea4a3b23c22698a1d69d4b3456571b55691adfa,apply(com.google.gerrit.server.change.ChangeResource),218646,253,250
11884,src_main_java_com_google_gerrit_client_reviewdb_AccountExternalId.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"static com.google.gerrit.client.reviewdb.AccountExternalId getInstance(int rawOldAccountId, java.lang.String rawExternalId) { return new com.google.gerrit.client.reviewdb.AccountExternalId(new com.google.gerrit.client.reviewdb.Account.Id(rawOldAccountId), new com.google.gerrit.client.reviewdb.AccountExternalId.Key(rawExternalId)); }",8b4f9ab949cb6beafeed8c5b4dc6c7af2f83705d,,"getInstance(int,java.lang.String)",3,1,"static com.google.gerrit.client.reviewdb.AccountExternalId newInstance(int rawOldAccountId, java.lang.String rawExternalId) { return new com.google.gerrit.client.reviewdb.AccountExternalId(new com.google.gerrit.client.reviewdb.Account.Id(rawOldAccountId), new com.google.gerrit.client.reviewdb.AccountExternalId.Key(rawExternalId)); }",bbb0d38fa6f925872f5854a55a5af2d14f278c05,"newInstance(int,java.lang.String)",81912,101,101
72358,gerrit-server_src_main_java_com_google_gerrit_server_git_BatchUpdate.java,15.0,"public void execute() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { executeRefUpdates(); executeChangeOps(); reindexChanges(); if ((batchRefUpdate) != null) { gitRefUpdated.fire(project, batchRefUpdate); } executePostOps(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { throw e; } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e); throw new com.google.gerrit.server.git.UpdateException(e); } }",136142cd0258c23829c6ad4be0f892acadef979f,"public void execute() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { try { executeRefUpdates(); executeChangeOps(); reindexChanges(); if ((batchRefUpdate) != null) { gitRefUpdated.fire(project, batchRefUpdate, user.getAccountId()); } executePostOps(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { throw e; } catch (java.lang.Exception e) { com.google.common.base.Throwables.propagateIfPossible(e); throw new com.google.gerrit.server.git.UpdateException(e); } }",c3865d8817282e9e78032723e9e7e453687d76fd,execute(),execute(),21,21,"public void execute() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { execute(com.google.gerrit.server.git.BatchUpdate.Listener.NONE); }",8d5221d1ab87974b78513534d05156718f621bad,execute(),105328,164,55
100955,gerrit-server_src_main_java_com_google_gerrit_server_update_NoteDbBatchUpdate.java,22.0,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { logDebug(""Executing updateRepo on {} ops"", ops.size()); com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl ctx = new com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl(); for (com.google.gerrit.server.update.BatchUpdateOp op : ops.values()) { op.updateRepo(ctx); } logDebug(""Executing updateRepo on {} RepoOnlyOps"", repoOnlyOps.size()); for (com.google.gerrit.server.update.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } if ((((onSubmitValidators) != null) && ((commands) != null)) && (!(commands.isEmpty()))) { onSubmitValidators.validate(project, new com.google.gerrit.server.update.ReadOnlyRepository(getRepository()), ctx.getInserter().newReader(), commands.getCommands()); } if ((inserter) != null) { logDebug(""Flushing inserter""); inserter.flush(); } else { logDebug(""No objects to flush""); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }",e0b46726cea72633b7df42ddfc4cbd8fa69ab0a2,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { logDebug(""Executing updateRepo on {} ops"", ops.size()); com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl ctx = new com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl(); for (com.google.gerrit.server.update.BatchUpdateOp op : ops.values()) { op.updateRepo(ctx); } logDebug(""Executing updateRepo on {} RepoOnlyOps"", repoOnlyOps.size()); for (com.google.gerrit.server.update.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } if (((onSubmitValidators) != null) && (!(getRefUpdates().isEmpty()))) { onSubmitValidators.validate(project, new com.google.gerrit.server.update.ReadOnlyRepository(getRepository()), ctx.getInserter().newReader(), getRefUpdates()); } if ((repoView) != null) { logDebug(""Flushing inserter""); repoView.getInserter().flush(); } else { logDebug(""No objects to flush""); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }",92202becd8381b6b101b86a4f10d2b32c6e00dfe,executeUpdateRepo(),executeUpdateRepo(),6,22,"private void executeUpdateRepo() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { try { logDebug(""Executing updateRepo on {} ops"", ops.size()); com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl ctx = new com.google.gerrit.server.update.NoteDbBatchUpdate.RepoContextImpl(); for (com.google.gerrit.server.update.BatchUpdateOp op : ops.values()) { op.updateRepo(ctx); } logDebug(""Executing updateRepo on {} RepoOnlyOps"", repoOnlyOps.size()); for (com.google.gerrit.server.update.RepoOnlyOp op : repoOnlyOps) { op.updateRepo(ctx); } if (((onSubmitValidators) != null) && (!(getRefUpdates().isEmpty()))) { onSubmitValidators.validate(project, ctx.getRevWalk().getObjectReader(), repoView.getCommands()); } if ((repoView) != null) { logDebug(""Flushing inserter""); repoView.getInserter().flush(); } else { logDebug(""No objects to flush""); } } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gerrit.extensions.restapi.RestApiException.class); throw new com.google.gerrit.server.update.UpdateException(e); } }",7ae2be520e77f16e31a115a3ce394b0f726b0de4,executeUpdateRepo(),80296,337,321
121210,gerrit-server_src_main_java_com_google_gerrit_server_query_group_GroupPredicates.java,0.0,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name.toLowerCase(java.util.Locale.US)); }",875c339df2e49a09b2401e3fb983802dd74b39b4,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.server.group.InternalGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name); }",4029ba52c6feca6e13148592c58c28f4d8f3bf25,name(java.lang.String),name(java.lang.String),2,0,"public static com.google.gerrit.index.query.Predicate<com.google.gerrit.reviewdb.client.AccountGroup> name(java.lang.String name) { return new com.google.gerrit.server.query.group.GroupPredicates.GroupPredicate(com.google.gerrit.server.index.group.GroupField.NAME, GroupQueryBuilder.FIELD_NAME, name); }",628a53b28b13017643c069aaf2f048b9a952c2f7,name(java.lang.String),169805,89,91
59015,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_GitHubLogin.java,2.0,"public boolean login(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope... scopes) throws java.io.IOException { if (isLoggedIn()) { return true; } com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login "" + (this))); if (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.isOAuthFinal(request)) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login-FINAL "" + (this))); login(oauth.loginPhase2(request, response)); if (isLoggedIn()) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login-SUCCESS "" + (this))); response.sendRedirect(com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.getTargetUrl(request)); return true; } else { response.sendError(HttpStatus.SC_UNAUTHORIZED); return false; } } else { this.loginScopes = getScopes(getScopesKey(request, response), scopes); com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login-PHASE1 "" + (this))); oauth.loginPhase1(request, response, loginScopes); return false; } }",cffef6d7b84703994f04a5c079d1cb912aca338f,"public boolean login(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope... scopes) throws java.io.IOException { if (isLoggedIn()) { return true; } com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login "" + (this))); if (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.isOAuthFinal(request)) { log.debug((""Login-FINAL "" + (this))); com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken loginAccessToken = oauth.loginPhase2(request, response); if ((loginAccessToken != null) && (!(loginAccessToken.isError()))) { login(loginAccessToken); } if (isLoggedIn()) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login-SUCCESS "" + (this))); response.sendRedirect(com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.getTargetUrl(request)); return true; } else { response.sendError(HttpStatus.SC_UNAUTHORIZED); return false; } } else { this.loginScopes = getScopes(getScopesKey(request, response), scopes); com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.LOG.debug((""Login-PHASE1 "" + (this))); oauth.loginPhase1(request, response, loginScopes); return false; } }",f5d4191e3c553ad03c165a1d125c0e2ba48ade69,"login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope[])","login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope[])",4,2,"public boolean login(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response, com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope... scopes) throws java.io.IOException { if (isLoggedIn()) { return true; } com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.debug((""Login "" + (this))); if (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.isOAuthFinal(request)) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.debug((""Login-FINAL "" + (this))); com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken loginAccessToken = oauth.loginPhase2(request, response); if ((loginAccessToken != null) && (!(loginAccessToken.isError()))) { login(loginAccessToken); } if (isLoggedIn()) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.debug((""Login-SUCCESS "" + (this))); response.sendRedirect(com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.getTargetUrl(request)); return true; } else { response.sendError(HttpStatus.SC_UNAUTHORIZED); return false; } } else { this.loginScopes = getScopes(getScopesKey(request, response), scopes); com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.debug((""Login-PHASE1 "" + (this))); oauth.loginPhase1(request, response, loginScopes); return false; } }",6183505f15ad83f8c0b485bd3c0c2010c6fb6fe4,"login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope[])",191519,338,355
73425,gerrit-server_src_main_java_com_google_gerrit_server_access_ListAccess.java,2.0,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config; try { com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName); try { config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage(""Update group names\n""); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } finally { md.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } return access; }",91c32942e5290b70748526d4c2cea44df5e2abd0,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config; try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage(""Update group names\n""); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return access; }",08432272b66d783233d872b351e8d07991d09590,apply(com.google.gerrit.extensions.restapi.TopLevelResource),apply(com.google.gerrit.extensions.restapi.TopLevelResource),2,2,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage(""Update group names\n""); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return access; }",7904df12f65ec7fafdc38f083908cd2364b09eeb,apply(com.google.gerrit.extensions.restapi.TopLevelResource),183254,473,471
58850,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.reviewdb.client.PatchLineComment get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().get(key); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(byChange(db, notes)); for (com.google.gerrit.reviewdb.client.PatchLineComment c : comments) { if (key.equals(c.getKey())) { return c; } } return null; }",0c8bd7a50b24b25e646af92e56925d13d36af6f8,,"get(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchLineComment$Key)",17,4,"public com.google.common.base.Optional<com.google.gerrit.reviewdb.client.PatchLineComment> get(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchLineComment.Key key) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.common.base.Optional.fromNullable(db.patchComments().get(key)); } for (com.google.gerrit.reviewdb.client.PatchLineComment c : byChange(db, notes)) { if (key.equals(c.getKey())) { return com.google.common.base.Optional.of(c); } } return com.google.common.base.Optional.absent(); }",13bdce7a29761cefd7d6796dd48470e7362905d7,"get(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.reviewdb.client.PatchLineComment$Key)",167670,194,200
35118,gerrit-sshd_src_main_java_com_google_gerrit_sshd_args4j_ChangeIdHandler.java,,,,"@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.lang.String[] tokens = token.split("",""); if ((tokens.length) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, (""change should be specified as "" + ""<project>,<branch>,<change-id>"")); } com.google.gerrit.reviewdb.client.Change.Key key; try { key = Change.Key.parse(tokens[2]); for (com.google.gerrit.reviewdb.client.Change change : db.changes().byKeyRange(key, key.max())) { if ((change.getProject().get().equals(tokens[0])) && (change.getDest().getShortName().equals(tokens[1]))) { setter.addValue(change.getId()); return 1; } throw new org.kohsuke.args4j.CmdLineException(owner, (((change.getDest().get()) + "" "") + (change.getProject().get()))); } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ""Change-Id is not valid""); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, (""Database error: "" + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, ((""\"""" + token) + ""\"": change not found"")); }",d3bbaa327b2db673de79e0478631d8c517076045,,parseArguments(org.kohsuke.args4j.spi.Parameters),3,0,"@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String token = params.getParameter(0); final java.lang.String[] tokens = token.split("",""); if ((tokens.length) != 3) { throw new org.kohsuke.args4j.CmdLineException(owner, (""change should be specified as "" + ""<project>,<branch>,<change-id>"")); } try { final com.google.gerrit.reviewdb.client.Change.Key key = Change.Key.parse(tokens[2]); final com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(tokens[0]); final com.google.gerrit.reviewdb.client.Branch.NameKey branch = new com.google.gerrit.reviewdb.client.Branch.NameKey(project, tokens[1]); for (final com.google.gerrit.reviewdb.client.Change change : db.changes().byBranchKey(branch, key)) { setter.addValue(change.getId()); return 1; } } catch (java.lang.IllegalArgumentException e) { throw new org.kohsuke.args4j.CmdLineException(owner, ""Change-Id is not valid""); } catch (com.google.gwtorm.server.OrmException e) { throw new org.kohsuke.args4j.CmdLineException(owner, (""Database error: "" + (e.getMessage()))); } throw new org.kohsuke.args4j.CmdLineException(owner, ((""\"""" + token) + ""\"": change not found"")); }",e8d443d43cd0d93bcd6f3e0dacd0b3cf3d037742,parseArguments(org.kohsuke.args4j.spi.Parameters),23769,376,392
100776,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeQueryBuilder.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByState(java.lang.String who, com.google.gerrit.server.notedb.ReviewerStateInternal state) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByEmailPredicate = null; try { reviewerByEmailPredicate = com.google.gerrit.server.query.change.ReviewerByEmailPredicate.forState(args, com.google.gerrit.server.mail.Address.parse(who), state); } catch (java.lang.IllegalArgumentException e) { } com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerPredicate = null; try { reviewerPredicate = com.google.gerrit.server.query.Predicate.or(parseAccount(who).stream().map(( id) -> com.google.gerrit.server.query.change.ReviewerPredicate.forState(args, id, state)).collect(java.util.stream.Collectors.toList())); } catch (com.google.gerrit.server.query.QueryParseException e) { if (reviewerByEmailPredicate == null) throw e; } if ((reviewerPredicate != null) && (reviewerByEmailPredicate != null)) { return com.google.gerrit.server.query.Predicate.or(reviewerPredicate, reviewerByEmailPredicate); } else if (reviewerPredicate != null) { return reviewerPredicate; } else { return reviewerByEmailPredicate; } }",bcda81492b1e9eb5111f89ace4218b7cf24a20e0,,"reviewerByState(java.lang.String,com.google.gerrit.server.notedb.ReviewerStateInternal)",4,72,"public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByState(java.lang.String who, com.google.gerrit.server.notedb.ReviewerStateInternal state) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerByEmailPredicate = null; if (args.index.getSchema().hasField(ChangeField.REVIEWER_BY_EMAIL)) { com.google.gerrit.server.mail.Address address = com.google.gerrit.server.mail.Address.tryParse(who); if (address != null) { reviewerByEmailPredicate = com.google.gerrit.server.query.change.ReviewerByEmailPredicate.forState(args, address, state); } } com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> reviewerPredicate = null; try { reviewerPredicate = com.google.gerrit.server.query.Predicate.or(parseAccount(who).stream().map(( id) -> com.google.gerrit.server.query.change.ReviewerPredicate.forState(args, id, state)).collect(java.util.stream.Collectors.toList())); } catch (com.google.gerrit.server.query.QueryParseException e) { if (reviewerByEmailPredicate == null) { throw e; } } if ((reviewerPredicate != null) && (reviewerByEmailPredicate != null)) { return com.google.gerrit.server.query.Predicate.or(reviewerPredicate, reviewerByEmailPredicate); } else if (reviewerPredicate != null) { return reviewerPredicate; } return reviewerByEmailPredicate; }",215e435fd27df2688f33940b68a2a83e121e85de,"reviewerByState(java.lang.String,com.google.gerrit.server.notedb.ReviewerStateInternal)",54247,404,436
83749,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_AgreementInfo.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final native com.google.gerrit.client.groups.GroupInfo autoVerifyGroup();,3507dc79ef33ec48441878b59d5c8762f19ea037,,autoVerifyGroup(),5,0,public final native com.google.gerrit.client.info.GroupInfo autoVerifyGroup();,b17a7a71735932c092658080bfb6b50bd97ce56c,autoVerifyGroup(),181021,20,20
30726,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectModule.java,1.0,@java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); },278cfd2330d6d4e75d34e73783a48bc0c49b8006,@java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(RetrieveParentCandidatesHandler.Factory.class); },706cdb42c579d477bae2750f9b9fc65c51f341c4,configure(),configure(),9,1,@java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(VisibleProjectDetails.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(SuggestParentCandidatesHandler.Factory.class); },dc51ca0cc9f98602c07e40471cbb140b9e763e3c,configure(),207409,109,119
62828,gerrit-gwtui_src_main_java_net_codemirror_lib_CodeMirror.java,76.0,"public final void removeLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { removeLineClassNative(line, where.name().toLowerCase(), className); }",d6fbb487efd5658698a8cb99943786cee87b177b,"public final void removeLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { removeLineClassNative(line, where.value, className); }",c93c48d45bcb6c1eb91a200673acc296a1e4465f,"removeLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)","removeLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)",6,78,"public final void removeLineClass(net.codemirror.lib.CodeMirror.LineHandle line, net.codemirror.lib.CodeMirror.LineClassWhere where, java.lang.String className) { removeLineClassNative(line, where.value(), className); }",b4dadd851f18ba1f82a644413b93a81926a206d9,"removeLineClass(net.codemirror.lib.CodeMirror$LineHandle,net.codemirror.lib.CodeMirror$LineClassWhere,java.lang.String)",194327,58,58
35235,gerrit-httpd_src_main_java_com_google_gerrit_httpd_RestApiServlet.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void checkRequiresCapability() throws java.lang.RuntimeException { com.google.gerrit.extensions.annotations.RequiresCapability rc = getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); if ((!(ctl.canPerform(rc.value()))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), rc.value()); throw new java.lang.RuntimeException(msg); } } }",dece29ae036058b4fdf743654548a3e03b322e27,,checkRequiresCapability(),3,3,"private void checkRequiresCapability() throws com.google.gerrit.httpd.RestApiServlet.RequireCapabilityException { com.google.gerrit.extensions.annotations.RequiresCapability rc = getClass().getAnnotation(com.google.gerrit.extensions.annotations.RequiresCapability.class); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); if ((!(ctl.canPerform(rc.value()))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), rc.value()); throw new com.google.gerrit.httpd.RestApiServlet.RequireCapabilityException(msg); } } }",3be5248fe73b5edff8884dc314914fb73e228dbe,checkRequiresCapability(),186798,168,190
59546,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_CreateChangeDialog.java,,,,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.util.LinkedList<com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion> suggestions = new java.util.LinkedList<>(); for (final com.google.gerrit.client.projects.BranchInfo b : branches) { if (b.ref().contains(request.getQuery())) { suggestions.add(new com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion(b)); } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }",8147f210cf669883f6f8d35b324b5da6bd418169,,"onRequestSuggestions(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Callback)",9,2,"@java.lang.Override protected void onRequestSuggestions(com.google.gerrit.client.ui.Request request, com.google.gerrit.client.ui.Callback done) { java.util.List<com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion> suggestions = new java.util.ArrayList<>(); for (com.google.gerrit.client.projects.BranchInfo b : branches) { if (b.ref().contains(request.getQuery())) { suggestions.add(new com.google.gerrit.client.ui.CreateChangeDialog.BranchSuggestion(b)); } } done.onSuggestionsReady(request, new com.google.gerrit.client.ui.Response(suggestions)); }",7011c16abb81cf30583b0317081f33d9b436618b,"onRequestSuggestions(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Callback)",89586,162,161
30302,src_test_java_com_google_gwtorm_jdbc_TestJdbcAccess.java,3.0,"@org.junit.Test public void testUpdateOne() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1); createClassUnderTest().update(com.google.gwtorm.jdbc.TestJdbcAccess.ONE_ROW); }",3c10d9b522e2bdcfd196cbafae938cdc206776b0,"@org.junit.Test public void testUpdateOne() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1); createClassUnderTest().update(oneRow); }",54e7a4052c3d46635284ce2338af5a62273a84b8,testUpdateOne(),testUpdateOne(),7,28,"@org.junit.Test public void testUpdateOne() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, 1); createClassUnderTest().update(oneRow); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(update); }",3823f82a308f16ae46c15a5ef5c189f57a36dcff,testUpdateOne(),157416,63,93
62798,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ConflictsOperatorIT.java,2.0,"private void assertChanges(java.util.Set<java.lang.String> actualChanges, com.google.gerrit.acceptance.PushOneCommit... expectedChanges) { assertEquals(expectedChanges.length, actualChanges.size()); for (com.google.gerrit.acceptance.PushOneCommit.Result c : expectedChanges) { assertTrue(actualChanges.contains(id(c))); } }",1d6a8b408064ffe03b61fa6d2e566ee0be742666,"private void assertChanges(java.util.Set<java.lang.String> actualChanges, com.google.gerrit.acceptance.PushOneCommit... expectedChanges) { assertThat(actualChanges).hasSize(expectedChanges.length); for (com.google.gerrit.acceptance.PushOneCommit.Result c : expectedChanges) { assertThat(actualChanges.contains(id(c))).isTrue(); } }",99ab2963af43f35b1d14e247e5454050085e67d0,"assertChanges(java.util.Set,com.google.gerrit.acceptance.PushOneCommit[])","assertChanges(java.util.Set,com.google.gerrit.acceptance.PushOneCommit[])",3,2,"private void assertChanges(java.util.Set<java.lang.String> actualChanges, com.google.gerrit.acceptance.PushOneCommit... expectedChanges) { assertThat(((java.lang.Iterable<?>) (actualChanges))).hasSize(expectedChanges.length); for (com.google.gerrit.acceptance.PushOneCommit.Result c : expectedChanges) { assertThat(actualChanges.contains(id(c))).isTrue(); } }",84b1bb8ed0919a16cab2d6321dc8f2baf514c74e,"assertChanges(java.util.Set,com.google.gerrit.acceptance.PushOneCommit[])",125461,91,99
78821,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByMergeIfNecessaryIT.java,1.0,"@org.junit.Test public void submitWithMergedAncestorsOnOtherBranch() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(testRepo, ""master"", ""base commit"", ""a.txt"", ""1"", """"); submit(change1.getChangeId()); gApi.projects().name(project.get()).branch(""branch"").create(new com.google.gerrit.extensions.api.projects.BranchInput()); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(testRepo, ""master"", ""We want to commit this to master first"", ""a.txt"", ""2"", """"); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit tip1 = getRemoteLog(project, ""master"").get(0); assertThat(tip1.getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); org.eclipse.jgit.revwalk.RevCommit tip2 = getRemoteLog(project, ""branch"").get(0); assertThat(tip2.getShortMessage()).isEqualTo(change1.getCommit().getShortMessage()); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(testRepo, ""branch"", (""This commit is based on master, which includes change2, "" + ""but is targeted at branch, which doesn't include it.""), ""a.txt"", ""3"", """"); submit(change3.getChangeId()); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log3 = getRemoteLog(project, ""branch""); assertThat(log3.get(0).getShortMessage()).isEqualTo(change3.getCommit().getShortMessage()); assertThat(log3.get(1).getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); }",fd0c2e1b367fa270732edcb12e6d061f870e6933,"@org.junit.Test public void submitWithMergedAncestorsOnOtherBranch() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(testRepo, ""master"", ""base commit"", ""a.txt"", ""1"", """"); submit(change1.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterFirstSubmit = getRemoteHead(); gApi.projects().name(project.get()).branch(""branch"").create(new com.google.gerrit.extensions.api.projects.BranchInput()); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(testRepo, ""master"", ""We want to commit this to master first"", ""a.txt"", ""2"", """"); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterSecondSubmit = getRemoteLog(project, ""master"").get(0); assertThat(headAfterSecondSubmit.getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); org.eclipse.jgit.revwalk.RevCommit tip2 = getRemoteLog(project, ""branch"").get(0); assertThat(tip2.getShortMessage()).isEqualTo(change1.getCommit().getShortMessage()); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(testRepo, ""branch"", (""This commit is based on master, which includes change2, "" + ""but is targeted at branch, which doesn't include it.""), ""a.txt"", ""3"", """"); submit(change3.getChangeId()); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log3 = getRemoteLog(project, ""branch""); assertThat(log3.get(0).getShortMessage()).isEqualTo(change3.getCommit().getShortMessage()); assertThat(log3.get(1).getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); assertRefUpdatedEvents(initialHead, headAfterFirstSubmit, headAfterFirstSubmit, headAfterSecondSubmit); assertChangeMergedEvents(2); }",c3ed6f711e1395e836cc996f0f1b3285d0ba7789,submitWithMergedAncestorsOnOtherBranch(),submitWithMergedAncestorsOnOtherBranch(),6,1,"@org.junit.Test public void submitWithMergedAncestorsOnOtherBranch() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(testRepo, ""master"", ""base commit"", ""a.txt"", ""1"", """"); submit(change1.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterFirstSubmit = getRemoteHead(); gApi.projects().name(project.get()).branch(""branch"").create(new com.google.gerrit.extensions.api.projects.BranchInput()); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(testRepo, ""master"", ""We want to commit this to master first"", ""a.txt"", ""2"", """"); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterSecondSubmit = getRemoteLog(project, ""master"").get(0); assertThat(headAfterSecondSubmit.getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); org.eclipse.jgit.revwalk.RevCommit tip2 = getRemoteLog(project, ""branch"").get(0); assertThat(tip2.getShortMessage()).isEqualTo(change1.getCommit().getShortMessage()); com.google.gerrit.acceptance.PushOneCommit.Result change3 = createChange(testRepo, ""branch"", (""This commit is based on master, which includes change2, "" + ""but is targeted at branch, which doesn't include it.""), ""a.txt"", ""3"", """"); submit(change3.getChangeId()); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log3 = getRemoteLog(project, ""branch""); assertThat(log3.get(0).getShortMessage()).isEqualTo(change3.getCommit().getShortMessage()); assertThat(log3.get(1).getShortMessage()).isEqualTo(change2.getCommit().getShortMessage()); assertRefUpdatedEvents(initialHead, headAfterFirstSubmit, headAfterFirstSubmit, headAfterSecondSubmit); assertChangeMergedEvents(change1.getChangeId(), headAfterFirstSubmit.name(), change2.getChangeId(), headAfterSecondSubmit.name()); }",532f1966f0dc412c368df651ab64f21a95f80a44,submitWithMergedAncestorsOnOtherBranch(),61824,463,489
152295,java_com_google_gerrit_server_account_AccountCacheImpl.java,6.0,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",954a32c6f2342fc8ba2a9db50b69688e9969efdf,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",32161f94fbe65e4789b19801c4c8dfbb9123e757,missing(com.google.gerrit.reviewdb.client.Account$Id),missing(com.google.gerrit.reviewdb.client.Account$Id),4,6,"private com.google.gerrit.server.account.AccountState missing(com.google.gerrit.reviewdb.client.Account.Id accountId) { com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(accountId, com.google.gerrit.common.TimeUtil.nowTs()); account.setActive(false); return com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account); }",e276b21fea557ea7c5a6c611b577cc79ed69018a,missing(com.google.gerrit.reviewdb.client.Account$Id),68874,217,116
42253,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_CreateGroupIT.java,,,,"@org.junit.Test public void testCreateGroupWithoutCapability() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create(""user"", ""user@example.com"", ""User""); com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession(user).put(""/groups/newGroup""); assertEquals(HttpStatus.SC_FORBIDDEN, r.getStatusCode()); }",bb18c72d5c10d3fd2d2f03ac556acce38bdf106a,,testCreateGroupWithoutCapability(),4,1,"@org.junit.Test public void testCreateGroupWithoutCapability_Forbidden() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.TestAccount user = accounts.create(""user"", ""user@example.com"", ""User""); com.google.gerrit.acceptance.RestResponse r = new com.google.gerrit.acceptance.RestSession(user).put(""/groups/newGroup""); assertEquals(HttpStatus.SC_FORBIDDEN, r.getStatusCode()); }",0130e4206b301b5b7233e70f83f661ea765f3b84,testCreateGroupWithoutCapability_Forbidden(),148319,125,127
47380,gerrit-server_src_test_java_com_google_gerrit_server_index_IndexRewriteTest.java,25.0,@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); index = new com.google.gerrit.server.query.change.IndexRewriteTest.DummyIndex(); queryBuilder = new com.google.gerrit.server.query.change.IndexRewriteTest.QueryBuilder(); rewrite = new com.google.gerrit.server.query.change.IndexRewriteImpl(index); },19794c62145262cfa2297096c7ac8ea2737cd772,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); index = new com.google.gerrit.server.index.IndexRewriteTest.DummyIndex(); queryBuilder = new com.google.gerrit.server.index.IndexRewriteTest.QueryBuilder(); rewrite = new com.google.gerrit.server.index.IndexRewriteImpl(index, new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl(null)); }",7dd80d38df58c07d5cca33a4ae3e2594333af147,setUp(),setUp(),4,27,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); index = new com.google.gerrit.server.index.IndexRewriteTest.DummyIndex(); queryBuilder = new com.google.gerrit.server.index.IndexRewriteTest.QueryBuilder(); rewrite = new com.google.gerrit.server.index.IndexRewriteImpl(index, null, new com.google.gerrit.server.index.IndexRewriteImpl.BasicRewritesImpl(null)); }",ef4dc91f983b7781ed365a55abeebd241f2fb68e,setUp(),100505,107,109
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitRule.java,1.0,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",3c07c0ceab8d028ce53cd4f1bd0e507de464696a,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",76af47e3c9b066c15f5083034b03982e5e6f3d0c,"apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.common.TestSubmitRuleInput)","apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.common.TestSubmitRuleInput)",3,1,"@java.lang.Override public java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> apply(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.common.TestSubmitRuleInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.extensions.common.TestSubmitRuleInput(); } if (((input.rule) != null) && (!(rules.isProjectRulesEnabled()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""project rules are disabled""); } input.filters = com.google.common.base.MoreObjects.firstNonNull(input.filters, filters); com.google.gerrit.server.project.SubmitRuleEvaluator evaluator = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, changeDataFactory.create(db.get(), rsrc.getControl())); java.util.List<com.google.gerrit.common.data.SubmitRecord> records = evaluator.setPatchSet(rsrc.getPatchSet()).setLogErrors(false).setSkipSubmitFilters(((input.filters) == (com.google.gerrit.extensions.common.TestSubmitRuleInput.Filters.SKIP))).setRule(input.rule).evaluate(); java.util.List<com.google.gerrit.server.change.TestSubmitRule.Record> out = com.google.common.collect.Lists.newArrayListWithCapacity(records.size()); com.google.gerrit.server.account.AccountLoader accounts = accountInfoFactory.create(true); for (com.google.gerrit.common.data.SubmitRecord r : records) { out.add(new com.google.gerrit.server.change.TestSubmitRule.Record(r, accounts)); } if (!(out.isEmpty())) { out.get(0).prologReductionCount = evaluator.getReductionsConsumed(); } accounts.fill(); return out; }",bb876a756fee42a4ea345f0355e3d978232f39b0,"apply(com.google.gerrit.server.change.RevisionResource,com.google.gerrit.extensions.common.TestSubmitRuleInput)",63865,472,469
160036,javatests_com_google_gerrit_server_config_GitwebConfigTest.java,0.0,"@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertFalse((""invalid character accepted: "" + c), com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)); } }",987d03f84a8e1553a23d0737fac7c1445190038f,@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertThat(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } },4e2cbe3ff203708c9a7c47bfa6c8a8d6405afc13,inalidPathSeparator(),inalidPathSeparator(),2,0,"@org.junit.Test public void inalidPathSeparator() { for (char c : com.google.gerrit.server.config.GitwebConfigTest.SOME_INVALID_CHARACTERS.toCharArray()) { assertWithMessage((""invalid character accepted: "" + c)).that(com.google.gerrit.server.config.GitwebConfig.isValidPathSeparator(c)).isFalse(); } }",99f68dc380c113e42676640c6b05d602726d8c3d,inalidPathSeparator(),137064,75,89
107650,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountCacheImpl.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get()) { return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME) + "":"") + username)))).map(AccountExternalId::getAccountId); } }",0f0d40aa9b30c8211cec30d8a8a7c418048aae02,,load(java.lang.String),2,10,"@java.lang.Override public java.util.Optional<com.google.gerrit.reviewdb.client.Account.Id> load(java.lang.String username) throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); return java.util.Optional.ofNullable(db.accountExternalIds().get(new com.google.gerrit.reviewdb.client.AccountExternalId.Key((((com.google.gerrit.server.account.ExternalId.SCHEME_USERNAME) + "":"") + username)))).map(AccountExternalId::getAccountId); }",dde2af46cfe87b46e271995fb9f6c340d765b5d6,load(java.lang.String),120536,144,140
68270,gerrit-server_src_main_java_com_google_gerrit_common_DisabledChangeHooks.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void postEvent(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.events.Event event) { }",39aaa3163e702551bb29c8ea93469457e1e4de2d,,"postEvent(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.events.Event)",18,20,"@java.lang.Override public void postEvent(com.google.gerrit.server.events.Event event, com.google.gerrit.reviewdb.server.ReviewDb db) { }",777f73915cb56d7717821c171f93b4e4d8b015c1,"postEvent(com.google.gerrit.server.events.Event,com.google.gerrit.reviewdb.server.ReviewDb)",172051,46,44
24622,gerrit-common_src_main_java_com_google_gerrit_common_data_GitwebLink.java,2.0,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParamertizedString pattern = new com.google.gerrit.common.data.ParamertizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }",86b6a6d2a5b2f5d0350d09349a375cdc5833d3af,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParametrizedString pattern = new com.google.gerrit.common.data.ParametrizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }",375a3f71238d5b29d8a966467c962c5bd26ed5ce,toProject(com.google.gerrit.reviewdb.Project$NameKey),toProject(com.google.gerrit.reviewdb.Project$NameKey),3,2,"public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put(""project"", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }",4de4da8d7bd3fd118351efa5259d8ed83746c525,toProject(com.google.gerrit.reviewdb.Project$NameKey),122075,142,140
152971,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,9.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",f880e4e34fc9e8b0f9e406fb74c3f8a6c0d7eff2,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",07cc602587efcb904ffaa01d659ec72f18d8ef5d,"create(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","create(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",2,9,"@java.lang.Override public com.google.gerrit.extensions.restapi.RestModifyView<com.google.gerrit.server.project.ProjectResource, ?> create(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException { parent.getProjectState().checkStatePermitsWrite(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return createDefault.get(); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2abb6e0806abdd1540a86c82d65449578733ee29,"create(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",100630,150,150
13329,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,6.0,@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.RefRight> get() { return this.get(wildProject).getLocalRights(); },d9bb1edd1eeb1a0ae46a156744260a10108d60c0,@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.RefRight> get() { return this.get(wildProject).getLocalRights(); },8e31d7c8778d39ebec220e12d57a70131cfde70e,get(),get(),3,6,@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.RefRight> get() { return this.get(wildProject).getLocalRights(); },d9bb1edd1eeb1a0ae46a156744260a10108d60c0,get(),129726,44,44
154472,java_com_google_gerrit_server_mail_send_FromAddressGeneratorProvider.java,6.0,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",1d377927d27fb85622b81a294528a987f060dc11,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { final com.google.gerrit.reviewdb.client.Account account = accountCache.getEvenIfMissing(fromId).getAccount(); java.lang.String fullName = account.getFullName(); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",20e117650f39f5f01a78ea0b477610953ac484af,from(com.google.gerrit.reviewdb.client.Account$Id),from(com.google.gerrit.reviewdb.client.Account$Id),8,6,"@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { final java.lang.String senderName; if (fromId != null) { java.lang.String fullName = accountCache.maybeGet(fromId).map(( a) -> a.getAccount().getFullName()).orElse(null); if ((fullName == null) || ("""".equals(fullName))) { fullName = anonymousCowardName; } senderName = namePattern.replace(""user"", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace(""userHash"", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }",8ad358547cf399b308870a3f5fe1b5aea2d5c90d,from(com.google.gerrit.reviewdb.client.Account$Id),86668,244,237
89132,gerrit-server_src_main_java_com_google_gerrit_server_ChangeMessagesUtil.java,2.0,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String body) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), ctx.getChange().currentPatchSetId(), ctx.getUser(), ctx.getWhen(), body); }",d832ff46b247a838c64837991cdde3b01cc3dfeb,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String body, java.lang.String tag) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), ctx.getChange().currentPatchSetId(), ctx.getUser(), ctx.getWhen(), body, tag); }",c9da2330906e1d2e231040d378b1f20d42565799,"newMessage(com.google.gerrit.server.git.BatchUpdate$ChangeContext,java.lang.String)","newMessage(com.google.gerrit.server.git.BatchUpdate$ChangeContext,java.lang.String,java.lang.String)",11,4,"public static com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String body, @com.google.gerrit.common.Nullable java.lang.String tag) throws com.google.gwtorm.server.OrmException { return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), ctx.getChange().currentPatchSetId(), ctx.getUser(), ctx.getWhen(), body, tag); }",06e10001a52ee3e87f504a6f22a6a108fbcbeca3,"newMessage(com.google.gerrit.server.git.BatchUpdate$ChangeContext,java.lang.String,java.lang.String)",73614,111,122
148714,src_test_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfigTest.java,10.0,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.Event event = new com.google.gerrit.server.events.Event(""foo"") {}; com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",ceb3a6a030e64e2f0129aa77182b560408ef81df,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.ChangeEvent event = createMock(com.google.gerrit.server.events.ChangeEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",d602913e36d304d8f9f5b18c723911fac828cb75,BROKEN_testIsEnabledUnknownEvent(),BROKEN_testIsEnabledUnknownEvent(),5,10,"public void BROKEN_testIsEnabledUnknownEvent() { com.google.gerrit.server.events.RefEvent event = createMock(com.google.gerrit.server.events.RefEvent.class); com.googlesource.gerrit.plugins.its.base.its.ItsConfig itsConfig = createItsConfig(); replayMocks(); assertFalse(itsConfig.isEnabled(event)); assertLogMessageContains(""not recognised and ignored""); }",a2d0fba1f9dfcceb72967851e49fc6f73ede54b7,BROKEN_testIsEnabledUnknownEvent(),101353,98,100
48120,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DraftBox.java,2.0,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } parent.removeDraft(this, comment.side(), ((comment.line()) - 1)); removeFromParent(); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); cm.focus(); }",ba421fdafaa87f22bc3e910d06d9d568b42e1ff4,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } parent.removeDraft(this, comment.side(), ((comment.line()) - 1)); removeFromParent(); resizePaddingWidget(); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); cm.focus(); }",9c03bade573f9932a5496533b9ccf0cf56535852,removeUI(),removeUI(),3,2,"private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } parent.removeDraft(this, comment.side(), ((comment.line()) - 1)); removeFromParent(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); cm.focus(); }",397cee749dca7bdcad7f322774371c4a1873a74a,removeUI(),150726,94,141
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,62.0,"public static void publishEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit:publish"").post(in, cb); }",f15c4a18edd59f7ab70c2884cdff96a8e883c8f9,"public static void publishEdit(int id, @com.google.gerrit.common.Nullable java.lang.String project, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit:publish"").post(in, cb); }",44c06393abdb5f93c37154d5dd18bb0e168ec61b,"publishEdit(int,com.google.gwt.user.client.rpc.AsyncCallback)","publishEdit(int,java.lang.String,com.google.gwt.user.client.rpc.AsyncCallback)",7,0,"public static void publishEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit:publish"").post(in, cb); }",f4a27226d825da640c09ae542bcae8f7c1911b1c,"publishEdit(java.lang.String,int,com.google.gwt.user.client.rpc.AsyncCallback)",211159,121,120
109251,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_DeleteReviewerSenderIT.java,16.0,private com.google.gerrit.acceptance.server.mail.StagedChange stageWipChange() throws java.lang.Exception { return stageChange(this::stageWipChange); },be94e874bba4ba524671c267ea2b2a0b29ae9eb1,@java.lang.Override protected com.google.gerrit.acceptance.server.mail.StagedChange stageWipChange() throws java.lang.Exception { return stageChange(() -> super.stageWipChange()); },204a5215e0bb9902252df48877f457ffef717827,stageWipChange(),stageWipChange(),16,0,private com.google.gerrit.acceptance.server.mail.StagedChange stageWipChangeWithExtraReviewer() throws java.lang.Exception { return stageChangeWithExtraReviewer(this::stageWipChange); },2d54b3c47050ae33ef694239703fc28003515035,stageWipChangeWithExtraReviewer(),39841,50,50
86094,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_FileTable.java,37.0,"private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.info.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.RESTORE) + ""(event,"") + (info._row())) + "")"")); } else { sb.setAttribute(""href"", (""#"" + (url(info)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.OPEN) + ""(event,"") + (info._row())) + "")"")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (com.google.gerrit.client.Gerrit.getUserPreferences().muteCommonPathPrefixes()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.oldPath()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.oldPath()).closeSpan(); } sb.closeTd(); }",d0dca168f54008c230f2e934863ce5e7b5c3c1e6,"private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.info.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.RESTORE) + ""(event,"") + (info._row())) + "")"")); } else { sb.setAttribute(""href"", (""#"" + (url(info)))).setAttribute(""onclick"", ((((com.google.gerrit.client.change.FileTable.OPEN) + ""(event,"") + (info._row())) + "")"")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (Patch.MERGE_LIST.equals(path)) { sb.append(Util.C.mergeList()); } else if (com.google.gerrit.client.Gerrit.getUserPreferences().muteCommonPathPrefixes()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.oldPath()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.oldPath()).closeSpan(); } sb.closeTd(); }",dab9c51ca8cd8220b416db1022106d0a4062a203,"columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.info.FileInfo)","columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder,com.google.gerrit.client.info.FileInfo)",12,68,"private void appendPath(java.lang.String path) { if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if (Patch.MERGE_LIST.equals(path)) { sb.append(Util.C.mergeList()); } else if (com.google.gerrit.client.Gerrit.getUserPreferences().muteCommonPathPrefixes()) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } }",9977bd9eb02f9829c1819241d9131fe22b5a90d2,appendPath(java.lang.String),65541,456,182
99230,src_test_java_com_ericsson_gerrit_plugins_highavailability_cache_CacheEvictionIT.java,1.0,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.evict-cache.url"", value = Constants.URL), @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.evict-cache.user"", value = ""admin"") }) public void flushAndSendPost() throws java.lang.Exception { final java.lang.String flushRequest = (Constants.ENDPOINT_BASE) + (Constants.PROJECT_LIST); wireMockRule.addMockServiceRequestListener(new com.github.tomakehurst.wiremock.http.RequestListener() { @java.lang.Override public void requestReceived(com.github.tomakehurst.wiremock.http.Request request, com.github.tomakehurst.wiremock.http.Response response) { if (request.getAbsoluteUrl().contains(flushRequest)) { synchronized(flushRequest) { flushRequest.notify(); } } } }); givenThat(post(urlEqualTo(flushRequest)).willReturn(aResponse().withStatus(HttpStatus.SC_OK))); adminSshSession.exec((""gerrit flush-caches --cache "" + (Constants.PROJECT_LIST))); synchronized(flushRequest) { flushRequest.wait(java.util.concurrent.TimeUnit.SECONDS.toMillis(2)); } verify(postRequestedFor(urlEqualTo(flushRequest))); }",d3ba5a0ac3cdc2fc80c1e4d3e3648e98f2f1f6d4,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.high-availability.url"", value = ""http://localhost:18888""), @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.high-availability.user"", value = ""admin"") }) public void flushAndSendPost() throws java.lang.Exception { final java.lang.String flushRequest = ""/plugins/high-availability/cache/"" + (com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.PROJECT_LIST); wireMockRule.addMockServiceRequestListener(new com.github.tomakehurst.wiremock.http.RequestListener() { @java.lang.Override public void requestReceived(com.github.tomakehurst.wiremock.http.Request request, com.github.tomakehurst.wiremock.http.Response response) { if (request.getAbsoluteUrl().contains(flushRequest)) { synchronized(flushRequest) { flushRequest.notify(); } } } }); givenThat(post(urlEqualTo(flushRequest)).willReturn(aResponse().withStatus(HttpStatus.SC_OK))); adminSshSession.exec((""gerrit flush-caches --cache "" + (com.ericsson.gerrit.plugins.highavailability.cache.CacheContants.PROJECT_LIST))); synchronized(flushRequest) { flushRequest.wait(java.util.concurrent.TimeUnit.SECONDS.toMillis(5)); } verify(postRequestedFor(urlEqualTo(flushRequest))); }",14ee37df90ed8e75d574f4eaa2025019536a4793,flushAndSendPost(),flushAndSendPost(),6,1,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.high-availability.url"", value = ""http://localhost:18888""), @com.google.gerrit.acceptance.GerritConfig(name = ""plugin.high-availability.user"", value = ""admin"") }) public void flushAndSendPost() throws java.lang.Exception { final java.lang.String flushRequest = ""/plugins/high-availability/cache/"" + (com.ericsson.gerrit.plugins.highavailability.cache.Constants.PROJECT_LIST); wireMockRule.addMockServiceRequestListener(new com.github.tomakehurst.wiremock.http.RequestListener() { @java.lang.Override public void requestReceived(com.github.tomakehurst.wiremock.http.Request request, com.github.tomakehurst.wiremock.http.Response response) { if (request.getAbsoluteUrl().contains(flushRequest)) { synchronized(flushRequest) { flushRequest.notify(); } } } }); givenThat(post(urlEqualTo(flushRequest)).willReturn(aResponse().withStatus(HttpStatus.SC_OK))); adminSshSession.exec((""gerrit flush-caches --cache "" + (com.ericsson.gerrit.plugins.highavailability.cache.Constants.PROJECT_LIST))); synchronized(flushRequest) { flushRequest.wait(java.util.concurrent.TimeUnit.SECONDS.toMillis(5)); } verify(postRequestedFor(urlEqualTo(flushRequest))); }",54f53d234d8c24a84105f9dad20dec57f3d023e9,flushAndSendPost(),188631,360,354
96323,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_MailProcessorIT.java,3.0,"@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\nTest Message""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); }",5963e92d02df8ef27ed14ba8eb00314ad81a7f98,"@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\nTest Message""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); }",8760f7f6c08b92c4731c10557a260163ed8de8f9,parseAndPersistChangeMessage(),parseAndPersistChangeMessage(),4,3,"@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of(""UTC""))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = newPlaintextBody(((((canonicalWebUrl.get()) + ""#/c/"") + (changeInfo._number)) + ""/1""), ""Test Message"", null, null, null); b.textContent((txt + (textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo(""Patch Set 1:\n\nTest Message""); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo(""mailMessageId=some id""); }",03156f40c0216e31a49756c0652c8e4d1a69a26f,parseAndPersistChangeMessage(),33376,352,354
148032,java_com_google_gerrit_server_account_GroupUUID.java,0.0,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""group "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",a2c426bc47085e49bf0d1162bb4479bf5570ffe7,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""account "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",fb81d95748e12dc4a2239c2749f6ee75eb6ca625,"make(java.lang.String,org.eclipse.jgit.lib.PersonIdent)","make(java.lang.String,org.eclipse.jgit.lib.PersonIdent)",17,0,"public static AccountGroup.UUID make(java.lang.String groupName, org.eclipse.jgit.lib.PersonIdent creator) { java.security.MessageDigest md = org.eclipse.jgit.lib.Constants.newMessageDigest(); md.update(org.eclipse.jgit.lib.Constants.encode(((""group "" + groupName) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(((""creator "" + (creator.toExternalString())) + ""\n""))); md.update(org.eclipse.jgit.lib.Constants.encode(java.lang.String.valueOf(java.lang.Math.random()))); return new com.google.gerrit.reviewdb.client.AccountGroup.UUID(org.eclipse.jgit.lib.ObjectId.fromRaw(md.digest()).name()); }",a2c426bc47085e49bf0d1162bb4479bf5570ffe7,"make(java.lang.String,org.eclipse.jgit.lib.PersonIdent)",216908,186,186
152295,javatests_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,26.0,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults())); }",2bb9b115cce7c25f89a6ba47127368cb83237999,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())); }",44fb2a285f1da222619ad12fa5186757b802e2e4,"makeUser(java.lang.String,java.lang.String)","makeUser(java.lang.String,java.lang.String)",4,26,"private com.google.gerrit.server.account.AccountState makeUser(java.lang.String name, java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return com.google.gerrit.server.account.AccountState.forAccount(new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT), account); }",72933a1ace73f0b2f6d790e64df3395c90a3292b,"makeUser(java.lang.String,java.lang.String)",68851,292,191
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,31.0,"@org.junit.Test public void addReviewerByEmailToReviewableChangeInReviewDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); forAll(( adder) -> { java.lang.String email = ""addedbyemail@example.com""; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); addReviewer(adder, sc.changeId, sc.owner, email); assertThat(sender).notSent(); }); }",36bda0e4fddeb3feeda61e2a435b40ade9f65d89,"private void addReviewerByEmailToReviewableChangeInReviewDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { java.lang.String email = ""addedbyemail@example.com""; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); addReviewer(adder, sc.changeId, sc.owner, email); assertThat(sender).notSent(); }",64afdcbb206254740f79b90c460806f9de5d3816,addReviewerByEmailToReviewableChangeInReviewDb(),addReviewerByEmailToReviewableChangeInReviewDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),16,34,"private void addReviewerByEmailToReviewableChangeInReviewDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); java.lang.String email = ""addedbyemail@example.com""; com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); addReviewer(adder, sc.changeId, sc.owner, email); assertThat(sender).notSent(); }",5f21c692e35e849ae16db7306dbf1c7bbcf26222,addReviewerByEmailToReviewableChangeInReviewDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),145688,112,126
53170,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,25.0,public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { return format(new com.google.gerrit.server.query.change.ChangeData(rsrc.getControl())); },67710d7a4e66cd135267627fe45319545e7dbdd0,"public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException, java.io.IOException { return format(new com.google.gerrit.server.query.change.ChangeData(rsrc.getControl())); }",4f747d882135a3ebf00d0bd713878afbb5eb049c,format(com.google.gerrit.server.change.ChangeResource),format(com.google.gerrit.server.change.ChangeResource),48,22,"public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gwtorm.server.OrmException { return format(changeDataFactory.create(db.get(), rsrc.getControl())); }",73778529bbf37cb4a13c75cebdfb5011432b61a0,format(com.google.gerrit.server.change.ChangeResource),95745,81,68
62828,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,75.0,"private net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler onSelectionChange(final net.codemirror.lib.CodeMirror cm) { return new net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler() { private com.google.gerrit.client.diff.InsertCommentBubble bubble; @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.LineCharacter anchor, net.codemirror.lib.LineCharacter head) { if ((anchor == head) || (((anchor.getLine()) == (head.getLine())) && ((anchor.getCh()) == (head.getCh())))) { if ((bubble) != null) { bubble.setVisible(false); } return; } else if ((bubble) == null) { init(anchor); } else { bubble.setVisible(true); } bubble.position(cm.charCoords(head, ""local"")); } private void init(net.codemirror.lib.LineCharacter anchor) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble(commentManager, cm); add(bubble); cm.addWidget(anchor, bubble.getElement(), false); } }; }",bfc58c5207eaf383fcce486cfe8d6ea86087c12d,"private net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler onSelectionChange(final net.codemirror.lib.CodeMirror cm) { return new net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler() { private com.google.gerrit.client.diff.InsertCommentBubble bubble; @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.Pos anchor, net.codemirror.lib.Pos head) { if ((anchor == head) || (((anchor.line()) == (head.line())) && ((anchor.ch()) == (head.ch())))) { if ((bubble) != null) { bubble.setVisible(false); } return; } else if ((bubble) == null) { init(anchor); } else { bubble.setVisible(true); } bubble.position(cm.charCoords(head, ""local"")); } private void init(net.codemirror.lib.Pos anchor) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble(commentManager, cm); add(bubble); cm.addWidget(anchor, bubble.getElement()); } }; }",266cc3dc4123225ee0123d179e42a54ce4d41e58,onSelectionChange(net.codemirror.lib.CodeMirror),onSelectionChange(net.codemirror.lib.CodeMirror),6,74,"private net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler onSelectionChange(final net.codemirror.lib.CodeMirror cm) { return new net.codemirror.lib.CodeMirror.BeforeSelectionChangeHandler() { private com.google.gerrit.client.diff.InsertCommentBubble bubble; @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.Pos anchor, net.codemirror.lib.Pos head) { if (anchor.equals(head)) { if ((bubble) != null) { bubble.setVisible(false); } return; } else if ((bubble) == null) { init(anchor); } else { bubble.setVisible(true); } bubble.position(cm.charCoords(head, ""local"")); } private void init(net.codemirror.lib.Pos anchor) { bubble = new com.google.gerrit.client.diff.InsertCommentBubble(commentManager, cm); add(bubble); cm.addWidget(anchor, bubble.getElement()); } }; }",b00c9c0781d7b5088925cbf7ebd0c22183e432dd,onSelectionChange(net.codemirror.lib.CodeMirror),194275,256,231
108592,gerrit-httpd_src_main_java_com_google_gerrit_httpd_DirectChangeByCommit.java,0.0,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(results.iterator().next()._number)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",339a0e628671608d1c9e90198eecbba46dbedbe9,"@java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { com.google.gerrit.extensions.common.ChangeInfo ci = results.iterator().next(); token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(ci._number), new com.google.gerrit.reviewdb.client.Project.NameKey(ci.project)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",3d13236087b05f12dff0836cc6313a9aae9ca453,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",7,0,"@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { java.lang.String query = com.google.common.base.CharMatcher.is('/').trimTrailingFrom(req.getPathInfo()); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; try { results = changes.query(query).withLimit(2).get(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { com.google.gerrit.httpd.DirectChangeByCommit.log.warn((""Cannot process query by URL: /r/"" + query), e); results = com.google.common.collect.ImmutableList.of(); } java.lang.String token; if ((results.size()) == 1) { com.google.gerrit.extensions.common.ChangeInfo ci = results.iterator().next(); token = com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Project.NameKey(ci.project), new com.google.gerrit.reviewdb.client.Change.Id(ci._number)); } else { token = com.google.gerrit.common.PageLinks.toChangeQuery(query); } com.google.gerrit.httpd.UrlModule.toGerrit(token, req, rsp); }",552e29f8a516da4bfbc951da8ba2389fb8f9c429,"doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",210436,324,322
21181,gerrit-sshd_src_main_java_com_google_gerrit_sshd_NoShell.java,9.0,public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set(context); java.lang.String message; try { message = messageFactory.get().getMessage(); } finally { com.google.gerrit.sshd.SshScope.set(old); } err.write(org.eclipse.jgit.lib.Constants.encodeASCII(message.toString())); err.flush(); in.close(); out.close(); err.close(); exit.onExit(127); },3d67b722492252ca0a39e3c9a68b68e52ece5e4e,public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set(context); java.lang.String message; try { message = messageFactory.get().getMessage(); } finally { com.google.gerrit.sshd.SshScope.set(old); } err.write(message.toString().getBytes()); err.flush(); in.close(); out.close(); err.close(); exit.onExit(127); },ed16ba204cdb53fc85662cd421510e8ef8657621,start(org.apache.sshd.server.Environment),start(org.apache.sshd.server.Environment),2,9,public void start(final org.apache.sshd.server.Environment env) throws java.io.IOException { com.google.gerrit.sshd.SshScope.Context old = com.google.gerrit.sshd.SshScope.set(context); java.lang.String message; try { message = messageFactory.get().getMessage(); } finally { com.google.gerrit.sshd.SshScope.set(old); } err.write(org.eclipse.jgit.lib.Constants.encode(message.toString())); err.flush(); in.close(); out.close(); err.close(); exit.onExit(127); },3779f6fcb51cadda42289eda18619eb605851d07,start(org.apache.sshd.server.Environment),159329,130,141
91971,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RobotCommentNotes.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public org.eclipse.jgit.lib.ObjectId getMetaId() { return metaId; },3f2211aaf886e3724992865a53f929da7c0c3a31,,getMetaId(),5,4,@com.google.gerrit.common.Nullable public org.eclipse.jgit.lib.ObjectId getMetaId() { return metaId; },aae8ee19042a9979cbc596af83d387cd788c9369,getMetaId(),167346,21,32
43205,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,38.0,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, change, ps, info, recipients.getReviewers(), java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } created = true; gitRefUpdated.fire(project.getNameKey(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, info); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } })); }",187e6e8587b19ee13b44c76406f8e247868bf938,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); changeInserter.insertChange(db, change, ps, commit, footerLines, info, recipients.getReviewers()); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, info); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } })); }",6d9c57a5e183eaffc05a5823fa78ad78b0268f8d,insertChange(com.google.gerrit.reviewdb.server.ReviewDb),insertChange(com.google.gerrit.reviewdb.server.ReviewDb),3,38,"private void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.Account.Id me = currentUser.getAccountId(); final java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines = commit.getFooterLines(); final com.google.gerrit.server.mail.MailUtil.MailRecipients recipients = new com.google.gerrit.server.mail.MailUtil.MailRecipients(); if ((magicBranch) != null) { recipients.add(magicBranch.getMailRecipients()); } recipients.add(getRecipientsFromFooters(accountResolver, ps, footerLines)); recipients.remove(me); changeInserter.insertChange(db, change, ps, commit, labelTypes, footerLines, info, recipients.getReviewers()); created = true; workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change); cm.setFrom(me); cm.setPatchSet(ps, info); cm.addReviewers(recipients.getReviewers()); cm.addExtraCC(recipients.getCcOnly()); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.git.ReceiveCommits.log.error((""Cannot send email for new change "" + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return ""send-email newchange""; } })); }",c34be466ef0f0c831927ce1788aed60302d63781,insertChange(com.google.gerrit.reviewdb.server.ReviewDb),10885,387,390
51241,gerrit-gwtui_src_main_java_com_google_gerrit_client_documentation_DocTable.java,,,,"private void insertNoneRow(final int row) { insertRow(row); table.setText(row, 0, Util.C.docTableNone()); final com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); fmt.setColSpan(row, 0, columns); fmt.setStyleName(row, 0, Gerrit.RESOURCES.css().emptySection()); }",b92e28df69eb0fe55283669a69322a8b44b5c71a,,insertNoneRow(int),6,7,"private void insertNoneRow(int row) { table.insertRow(row); table.setText(row, 0, Util.C.docTableNone()); com.google.gwt.user.client.ui.FlexTable.FlexCellFormatter fmt = table.getFlexCellFormatter(); fmt.setStyleName(row, 0, Gerrit.RESOURCES.css().emptySection()); }",3d5f0b81868daa1cfe8ba9a83492c19d9419801f,insertNoneRow(int),77343,91,80
63180,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_CommentsIT.java,1.0,"@org.junit.Test public void putDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Side.REVISION, 1, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); java.lang.String uuid = actual.id; comment.message = ""updated comment 1""; updateDraft(changeId, revId, comment, uuid); result = getDraftComments(changeId, revId); actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",358daa71b053adac85e63547d9fe278b9f79ef5e,"@org.junit.Test public void putDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Side.REVISION, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); java.lang.String uuid = actual.id; comment.message = ""updated comment 1""; updateDraft(changeId, revId, comment, uuid); result = getDraftComments(changeId, revId); actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",087ffc97bdd20bef2111e0ba6742b83771703753,putDraft(),putDraft(),9,1,"@org.junit.Test public void putDraft() throws java.lang.Exception { for (java.lang.Integer line : lines) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Side.REVISION, line, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); java.lang.String uuid = actual.id; comment.message = ""updated comment 1""; updateDraft(changeId, revId, comment, uuid); result = getDraftComments(changeId, revId); actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); } }",befaa87f011c666b5fb63a76aac8071ce41a8e3a,putDraft(),84433,316,332
152952,java_com_google_gerrit_server_restapi_project_GetDashboard.java,2.0,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",05238778f53bde7e0adefeb7568de23c45a9385a,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",137a350da2d192002828a4ddaddfe9d06f8fb5dc,"defaultOf(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)","defaultOf(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)",3,2,"private com.google.gerrit.server.project.DashboardResource defaultOf(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String id = projectState.getProject().getLocalDefaultDashboard(); if (com.google.common.base.Strings.isNullOrEmpty(id)) { id = projectState.getProject().getDefaultDashboard(); } if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } else if (!(inherited)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } for (com.google.gerrit.server.project.ProjectState ps : projectState.tree()) { id = ps.getProject().getDefaultDashboard(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } else if (!(com.google.common.base.Strings.isNullOrEmpty(id))) { return parse(projectState, user, id); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }",6a69e80165aa7dd2e107bbf65d0dd71e89b8d8be,"defaultOf(com.google.gerrit.server.project.ProjectState,com.google.gerrit.server.CurrentUser)",8768,382,366
89872,gerrit-server_src_main_java_com_google_gerrit_server_git_BatchUpdate.java,27.0,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Change.Id id) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate(c); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(notes, user); return new com.google.gerrit.server.git.BatchUpdate.ChangeContext(ctl, new com.google.gerrit.server.git.BatchUpdateReviewDb(db), repo, rw); }",ce89fd4a999065a7250ce559e68c27018657dbec,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); com.google.gerrit.server.notedb.NoteDbChangeState.checkNotReadOnly(c, skewMs); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate(c); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(notes, user); return new com.google.gerrit.server.git.BatchUpdate.ChangeContext(ctl, new com.google.gerrit.server.git.BatchUpdateReviewDb(db), repo, rw); }",b481256a11343ad4e71dec1e2ab8ebf85947d971,"newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change$Id)","newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change$Id)",14,27,"private com.google.gerrit.server.git.BatchUpdate.ChangeContext newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Change.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = newChanges.get(id); if (c == null) { c = com.google.gerrit.server.notedb.ChangeNotes.readOneReviewDbChange(db, id); if (c == null) { logDebug(""Failed to get change {} from unwrapped db"", id); throw new com.google.gerrit.server.project.NoSuchChangeException(id); } com.google.gerrit.server.notedb.NoteDbChangeState.checkNotReadOnly(c, skewMs); } com.google.gerrit.server.notedb.ChangeNotes notes = changeNotesFactory.createForBatchUpdate(c); com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(notes, user); return new com.google.gerrit.server.git.BatchUpdate.ChangeContext(ctl, new com.google.gerrit.server.git.BatchUpdateReviewDb(db), repo, rw); }",aeef2b151209e0d06b490440d71a144ba332a40b,"newChangeContext(com.google.gerrit.reviewdb.server.ReviewDb,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.reviewdb.client.Change$Id)",206904,295,321
77649,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@com.google.gerrit.common.Nullable public synchronized <T> T get(com.google.gerrit.server.IdentifiedUser.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings(""unchecked"") T value = ((T) (properties.get(key))); if (value != null) { return value; } } return state().get(key); }",5b94fab12ca049dfed9089e94a6e6696382b82d0,,get(com.google.gerrit.server.IdentifiedUser$PropertyKey),5,4,"@java.lang.Override @com.google.gerrit.common.Nullable public synchronized <T> T get(com.google.gerrit.server.PropertyKey<T> key) { if ((properties) != null) { @java.lang.SuppressWarnings(""unchecked"") T value = ((T) (properties.get(key))); return value; } return null; }",531b9fb07b1aa05a5e65f9a2ce7001613728ad02,get(com.google.gerrit.server.PropertyKey),108633,91,81
50773,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.client.change.RelatedChangesTab getTab() { if ((conflictingChangesTab) == null) { conflictingChangesTab = createTab(Resources.C.conflictingChanges(), Resources.C.conflictingChangesTooltip()); conflictingChangesTab.registerKeys(); } return conflictingChangesTab; }",71cd565ad219cd64fccf6c4dda824f5e5e6a1845,,getTab(),8,19,"private com.google.gerrit.client.change.RelatedChangesTab getTab() { if ((conflictingChangesTab) == null) { conflictingChangesTab = createTab(Resources.C.conflictingChanges(), Resources.C.conflictingChangesTooltip()); } return conflictingChangesTab; }",a302e38aea522cfdffe0ccf52f63de0dbfceadfe,getTab(),9354,69,62
88095,gerrit-server_src_main_java_com_google_gerrit_server_notedb_rebuild_Event.java,0.0,"protected void checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate update) { checkState(java.util.Objects.equals(update.getPatchSetId(), psId), ""cannot apply event for %s to update for %s"", update.getPatchSetId(), psId); checkState((((when.getTime()) - (update.getWhen().getTime())) <= (com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS)), ""event at %s outside update window starting at %s"", when, update.getWhen()); checkState(java.util.Objects.equals(update.getNullableAccountId(), who), ""cannot apply event by %s to update by %s"", who, update.getNullableAccountId()); }",29c5c1882efc23efec1c1792149fe5efaa314256,"protected void checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate update) { checkState(java.util.Objects.equals(update.getPatchSetId(), psId), ""cannot apply event for %s to update for %s"", update.getPatchSetId(), psId); checkState((((when.getTime()) - (update.getWhen().getTime())) <= (com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS)), ""event at %s outside update window starting at %s"", when, update.getWhen()); checkState(java.util.Objects.equals(update.getNullableAccountId(), effectiveUser), ""cannot apply event by %s to update by %s"", effectiveUser, update.getNullableAccountId()); }",11a4800b750a4c931b9f2170d6cff8444d283337,checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate),checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate),11,0,"protected void checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate update) { checkState(java.util.Objects.equals(update.getPatchSetId(), psId), ""cannot apply event for %s to update for %s"", update.getPatchSetId(), psId); checkState((((when.getTime()) - (update.getWhen().getTime())) <= (com.google.gerrit.server.notedb.rebuild.ChangeRebuilderImpl.MAX_WINDOW_MS)), ""event at %s outside update window starting at %s"", when, update.getWhen()); checkState(java.util.Objects.equals(update.getNullableAccountId(), user), ""cannot apply event by %s to update by %s"", user, update.getNullableAccountId()); }",57829c8ad312a25ee6bea2c16b63e4a91bf9f262,checkUpdate(com.google.gerrit.server.notedb.AbstractChangeUpdate),81485,173,171
59510,gitiles-servlet_src_test_java_com_google_gitiles_PaginatorTest.java,12.0,"@org.junit.Test public void exactlyOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(3); walk.markStart(commits.get(2)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(2), commits.get(1), commits.get(0)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertNull(p.getNextStart()); }",1b45b64e87f7a7121a3d98aa544d57e118c76ac3,"@org.junit.Test public void exactlyOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(3); walk.markStart(commits.get(2)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null, com.google.gitiles.PaginatorFilters.everything()); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(2), commits.get(1), commits.get(0)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertNull(p.getNextStart()); }",817236dddb3b0024bf2fb6897ae0c9b1bb9b8a8d,exactlyOnePage(),exactlyOnePage(),9,10,"@org.junit.Test public void exactlyOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(3); walk.markStart(commits.get(2)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(2), commits.get(1), commits.get(0)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertNull(p.getNextStart()); }",1b45b64e87f7a7121a3d98aa544d57e118c76ac3,exactlyOnePage(),54303,157,143
77077,gerrit-server_src_main_java_com_google_gerrit_server_project_RefPatternMatcher.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.util.List<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { java.util.List<java.lang.String> r; if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); r = new java.util.ArrayList<>(((emails.size()) + 1)); r.addAll(emails); } else { r = new java.util.ArrayList<>(1); } if ((user.getUserName()) != null) { r.add(user.getUserName()); } return r; },30f060eecba7f80b86ffcfa830518a02f79e309e,,getUsernames(com.google.gerrit.server.CurrentUser),9,1,"private java.lang.Iterable<java.lang.String> getUsernames(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { java.util.Set<java.lang.String> emails = user.asIdentifiedUser().getEmailAddresses(); if ((user.getUserName()) == null) { return emails; } else if (emails.isEmpty()) { return com.google.common.collect.ImmutableSet.of(user.getUserName()); } com.google.common.collect.Iterables.concat(emails, com.google.common.collect.ImmutableSet.of(user.getUserName())); } if ((user.getUserName()) != null) { return com.google.common.collect.ImmutableSet.of(user.getUserName()); } return com.google.common.collect.ImmutableSet.of(); }",459e78cbfb9ac80d59f29d49ffc7c47e8963fa64,getUsernames(com.google.gerrit.server.CurrentUser),2450,141,186
57370,gerrit-server_src_main_java_com_google_gerrit_server_query_change_DeltaPredicate.java,,,,@java.lang.Override protected int getLines(com.google.gerrit.server.query.change.ChangeData.ChangedLines cl) { return (cl.insertions) + (cl.deletions); },15fe04841c7088a5967e6bc272aeea7091114b85,,getLines(com.google.gerrit.server.query.change.ChangeData.ChangedLines),8,0,@java.lang.Override protected int getValueInt(com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData.ChangedLines changedLines = changeData.changedLines(); return (changedLines.insertions) + (changedLines.deletions); },0c5641255b03fc88e506e849ad666069b9d87000,getValueInt(com.google.gerrit.server.query.change.ChangeData),158938,47,88
50771,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,0.0,"void set(com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String revision) { if (info.status().isClosed()) { setVisible(false); return; } project = info.project(); com.google.gerrit.client.changes.ChangeApi.revision(info.legacy_id().get(), revision).view(""related"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.change.RelatedChanges.RelatedInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.change.RelatedChanges.RelatedInfo result) { render(revision, result.changes()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { progress.setVisible(false); scroll.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText(err.getMessage()); } }); }",6ef302212b3f07c8a0fc662c4129e01e48d6cd89,"void set(com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String revision) { if (info.status().isClosed()) { setVisible(false); return; } project = info.project(); com.google.gerrit.client.changes.ChangeApi.revision(info.legacy_id().get(), revision).view(""related"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.change.RelatedChanges.RelatedInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.change.RelatedChanges.RelatedInfo result) { tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges(result.changes().length())); render(revision, result.changes()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges(""na"")); progress.setVisible(false); scroll.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText(err.getMessage()); } }); }",8d518156e56e9ea7c76cc0061b55ae600ff15b78,"set(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)","set(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",5,0,"void set(com.google.gerrit.client.changes.ChangeInfo info, final java.lang.String revision) { if (info.status().isClosed()) { setVisible(false); return; } project = info.project(); com.google.gerrit.client.changes.ChangeApi.revision(info.legacy_id().get(), revision).view(""related"").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.change.RelatedChanges.RelatedInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.change.RelatedChanges.RelatedInfo result) { tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges(result.changes().length())); render(revision, result.changes()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { tabPanel.getTabBar().setTabText(0, Resources.M.relatedChanges(Resources.C.notAvailable())); progress.setVisible(false); scroll.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText(err.getMessage()); } }); }",2da131d0c1936d606cd2773474e8068d5703acf7,"set(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",67096,264,269
107257,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_AbstractNotificationTest.java,,,,"public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject reviewersByEmail(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { if (!(actual().participants.supportReviewersByEmail)) { return this; } return receives(actual().participants.reviewerByEmail, type); }",ee4ade34202593bd441550a6b45a483f43b25683,,reviewersByEmail(com.google.gerrit.extensions.api.changes.RecipientType),24,2,"private com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject rcpt(@com.google.gerrit.common.Nullable com.google.gerrit.acceptance.RecipientType type, com.google.gerrit.server.account.WatchConfig.NotifyType[] watches) { for (com.google.gerrit.server.account.WatchConfig.NotifyType watch : watches) { rcpt(type, watch); } return this; }",275db92ae1dee7bb903b1090a1ee6729213f454c,"rcpt(com.google.gerrit.acceptance.RecipientType,com.google.gerrit.server.account.WatchConfig.NotifyType[])",14939,84,103
30790,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_Screen.java,15.0,protected void onInitUI() { final com.google.gwt.user.client.ui.FlowPanel me = ((com.google.gwt.user.client.ui.FlowPanel) (getWidget())); me.add((header = new com.google.gwt.user.client.ui.FlowPanel())); me.add((body = new com.google.gwt.user.client.ui.FlowPanel())); header.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.add((headerText = new com.google.gwt.user.client.ui.InlineLabel())); },f61591b44a116a409255d256280e3067e786a79f,"protected void onInitUI() { final com.google.gwt.user.client.ui.FlowPanel me = ((com.google.gwt.user.client.ui.FlowPanel) (getWidget())); me.add((header = new com.google.gwt.user.client.ui.Grid(1, com.google.gerrit.client.ui.Screen.Cols.values().length))); me.add((body = new com.google.gwt.user.client.ui.FlowPanel())); com.google.gwt.user.client.ui.FlowPanel title = new com.google.gwt.user.client.ui.FlowPanel(); title.add((headerText = new com.google.gwt.user.client.ui.InlineLabel())); title.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.setWidget(0, com.google.gerrit.client.ui.Screen.Cols.Title.num, title); header.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.getCellFormatter().setHorizontalAlignment(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.num, HasHorizontalAlignment.ALIGN_RIGHT); header.getCellFormatter().setWidth(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.num, ""99%""); }",f5b016ff85f19f1b2a26feb375e4d1ab83718cd6,onInitUI(),onInitUI(),3,15,"protected void onInitUI() { final com.google.gwt.user.client.ui.FlowPanel me = ((com.google.gwt.user.client.ui.FlowPanel) (getWidget())); me.add((header = new com.google.gwt.user.client.ui.Grid(1, com.google.gerrit.client.ui.Screen.Cols.values().length))); me.add((body = new com.google.gwt.user.client.ui.FlowPanel())); com.google.gwt.user.client.ui.FlowPanel title = new com.google.gwt.user.client.ui.FlowPanel(); title.add((headerText = new com.google.gwt.user.client.ui.InlineLabel())); title.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.setWidget(0, com.google.gerrit.client.ui.Screen.Cols.Title.ordinal(), title); header.setStyleName(Gerrit.RESOURCES.css().screenHeader()); header.getCellFormatter().setHorizontalAlignment(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.ordinal(), HasHorizontalAlignment.ALIGN_RIGHT); header.getCellFormatter().setWidth(0, com.google.gerrit.client.ui.Screen.Cols.FarEast.ordinal(), ""100%""); }",fd6a6382c31b923edd9e732a7b1d9186a27eb25a,onInitUI(),147350,290,289
148032,java_com_google_gerrit_server_restapi_project_DashboardsCollection.java,5.0,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",c8bbbeea5dd2fb674d114aaa14d74c623bc9aadb,"@java.lang.Override public com.google.gerrit.server.restapi.project.DashboardResource parse(com.google.gerrit.server.restapi.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.restapi.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",6b7ee5d7a19387b7cdc66947c2b924d809787636,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",17,10,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",05010da3618980ff9445d7b2ad0103c8a1b7e929,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",217572,412,403
140535,javatests_com_google_gerrit_acceptance_server_change_PatchListCacheIT.java,3.0,"private com.google.gerrit.server.patch.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.patch.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",a3dc7a688fb5e3ebc2614915c7273abc7ea7c706,"private com.google.gerrit.server.patchlib.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.patchlib.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",2b2759f82bfad53adcb5968fd8b65582a16d1dae,"getKey(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)","getKey(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)",11,1,"private com.google.gerrit.server.diff.PatchListKey getKey(org.eclipse.jgit.lib.ObjectId revisionIdA, org.eclipse.jgit.lib.ObjectId revisionIdB) { return com.google.gerrit.server.diff.PatchListKey.againstCommit(revisionIdA, revisionIdB, Whitespace.IGNORE_NONE); }",857d7c14d98257ff7cd13b3aafecf4223480e13a,"getKey(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId)",15522,85,83
53170,gerrit-server_src_main_java_com_google_gerrit_server_change_GetChange.java,2.0,com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.ChangeJson.ChangeInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return cache(json.format(rsrc)); },7a851ff9758cabbeba779b5cdce408c6cfcc68c1,"com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.ChangeJson.ChangeInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException, java.io.IOException { return cache(json.format(rsrc)); }",8cda01df2c8508137cacd4c9d1dac5ac88011d7b,apply(com.google.gerrit.server.change.RevisionResource),apply(com.google.gerrit.server.change.RevisionResource),48,1,com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.ChangeJson.ChangeInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return cache(json.format(rsrc)); },7a851ff9758cabbeba779b5cdce408c6cfcc68c1,apply(com.google.gerrit.server.change.RevisionResource),96178,80,74
15828,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPreferencesScreen.java,0.0,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.reviewdb.Account result) { display(result.getGeneralPreferences()); enable(true); } }); },3ae0353686aadaed4f735e848fa621e717423dea,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.reviewdb.Account result) { display(result.getGeneralPreferences()); display(); } }); },ff91b36028960f13dbb2a897eecb7a20de29fba7,onLoad(),onLoad(),2,0,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.reviewdb.Account>(this) { public void preDisplay(final com.google.gerrit.reviewdb.Account result) { display(result.getGeneralPreferences()); } }); },124ea58150d2b6b4c892afe73ef59c0b01425a8c,onLoad(),128345,91,92
49371,gerrit-sshd_src_main_java_com_google_gerrit_sshd_DispatchCommand.java,1.0,"private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { com.google.gerrit.extensions.annotations.RequiresCapability rc = com.google.gerrit.sshd.DispatchCommand.getRequiresCapability(cmd.getClass()); if (rc != null) { com.google.gerrit.server.CurrentUser user = currentUser.get(); com.google.gerrit.server.account.CapabilityControl ctl = user.getCapabilities(); java.lang.String capability = rc.value(); if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { java.lang.String pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); if (((pluginName != null) && (!(""gerrit"".equals(pluginName)))) && (((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) || ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.CONTEXT)))) { capability = java.lang.String.format(""%s-%s"", pluginName, rc.value()); } else if ((rc.scope()) == (com.google.gerrit.extensions.annotations.CapabilityScope.PLUGIN)) { com.google.gerrit.sshd.DispatchCommand.log.error(java.lang.String.format(""Class %s uses @%s(scope=%s), but is not within a plugin"", cmd.getClass().getName(), com.google.gerrit.extensions.annotations.RequiresCapability.class.getSimpleName(), CapabilityScope.PLUGIN.name())); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, ""fatal: cannot check capability""); } } if ((!(ctl.canPerform(capability))) && (!(ctl.canAdministrateServer()))) { java.lang.String msg = java.lang.String.format(""fatal: %s does not have \""%s\"" capability."", user.getUserName(), capability); throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, msg); } } }",148338cbb9252634ebbea3924ba546b7bf053554,"private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { java.lang.String pluginName = null; if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); } try { com.google.gerrit.extensions.config.CapabilityUtils.checkRequiresCapability(currentUser, pluginName, cmd.getClass()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, ""fatal: cannot check capability""); } }",651733c42ab352b40e6a3fdfb56c046272858c8d,checkRequiresCapability(org.apache.sshd.server.Command),checkRequiresCapability(org.apache.sshd.server.Command),3,1,"private void checkRequiresCapability(org.apache.sshd.server.Command cmd) throws com.google.gerrit.sshd.UnloggedFailure { java.lang.String pluginName = null; if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { pluginName = ((com.google.gerrit.sshd.BaseCommand) (cmd)).getPluginName(); } try { com.google.gerrit.server.account.CapabilityUtils.checkRequiresCapability(currentUser, pluginName, cmd.getClass()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.sshd.UnloggedFailure(BaseCommand.STATUS_NOT_ADMIN, e.getMessage()); } }",e6f55ae342604a2b8a31f77b1901d2d2485e9288,checkRequiresCapability(org.apache.sshd.server.Command),142885,170,167
16247,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountExternalIdCacheImpl.java,,,,"@java.lang.Override public void evict(com.google.gerrit.reviewdb.AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); byAccountEmail.remove(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.AccountIdAndEmail(id.getAccountId(), id.getEmailAddress())); byEmail.remove(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.EmailWrapper(id.getEmailAddress())); }",84bfd75e9cafe8a51961b098dc06fae9b91f42b3,,evict(com.google.gerrit.reviewdb.AccountExternalId),3,2,@java.lang.Override public void evict(com.google.gerrit.reviewdb.AccountExternalId id) { byKey.remove(id.getKey()); byAccountId.remove(id.getAccountId()); if ((id.getEmailAddress()) != null) { byEmail.remove(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.EmailWrapper(id.getEmailAddress())); } },b87683b0a0aacac1afd5dc08e23caa4145209e40,evict(com.google.gerrit.reviewdb.AccountExternalId),121837,115,91
45590,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,15.0,@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(final java.lang.String pfx) { final java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> src; try { src = list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).tailSet(new com.google.gerrit.reviewdb.client.Project.NameKey(pfx)); } catch (java.util.concurrent.ExecutionException e) { return java.util.Collections.emptyList(); } return new java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; } }; },6f77be8e9e52ce8499866c35466b3814fb3627c2,@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(final java.lang.String pfx) { final java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> src; try { src = list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).tailSet(new com.google.gerrit.reviewdb.client.Project.NameKey(pfx)); } catch (java.util.concurrent.ExecutionException e) { return java.util.Collections.emptyList(); } return new java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private com.google.gerrit.reviewdb.client.Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public com.google.gerrit.reviewdb.client.Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; } }; },591a13471fecfbfa6af478b2e955394602c8af84,byName(java.lang.String),byName(java.lang.String),2,14,@java.lang.Override public java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> byName(final java.lang.String pfx) { final java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey> src; try { src = list.get(com.google.gerrit.server.project.ProjectCacheImpl.ListKey.ALL).tailSet(new com.google.gerrit.reviewdb.client.Project.NameKey(pfx)); } catch (java.util.concurrent.ExecutionException e) { return java.util.Collections.emptyList(); } return new java.lang.Iterable<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; } }; },6f77be8e9e52ce8499866c35466b3814fb3627c2,byName(java.lang.String),134224,502,476
140193,java_com_google_gerrit_index_IndexedQuery.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public <V> java.util.Collection<V> readField(com.google.gerrit.index.FieldDef<T, V> field) throws com.google.gwtorm.server.OrmException { return source.readField(field); }",260b463a3cdc638ac6b324fa234a6686f09b213f,,readField(com.google.gerrit.index.FieldDef),5,4,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.index.query.FieldBundle> readRaw() throws com.google.gwtorm.server.OrmException { return source.readRaw(); },6e14f848562f0fe059a5bbc6b4af77c0b79eec24,readRaw(),148168,62,56
130893,gerrit-server_src_main_java_com_google_gerrit_server_git_LocalDiskRepositoryManager.java,4.0,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } java.io.File gitDir = path.resolve(name.get()).toFile(); if (!(names.contains(name))) { if (!(name.get().endsWith(Constants.DOT_GIT_EXT))) { if ((org.eclipse.jgit.lib.RepositoryCache.FileKey.resolve(gitDir, FS.DETECTED)) != null) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } else { final java.io.File directory = gitDir; if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory, org.eclipse.jgit.lib.Constants.DOT_GIT), FS.DETECTED)) { onCreateProject(name); } else if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(new java.io.File(directory.getParentFile(), ((directory.getName()) + (org.eclipse.jgit.lib.Constants.DOT_GIT_EXT))), FS.DETECTED)) { onCreateProject(name); } else { throw new org.eclipse.jgit.errors.RepositoryNotFoundException(gitDir); } } } final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(gitDir, FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",78d7c4ecca8b0d6af68aeb3262fedbd918995ac1,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } final org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(path.resolve(name.get()).toFile(), FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",64de2bc9089f78edfe2f04c5bdc041d1de8bd29e,"openRepository(java.nio.file.Path,com.google.gerrit.reviewdb.client.Project$NameKey)","openRepository(java.nio.file.Path,com.google.gerrit.reviewdb.client.Project$NameKey)",2,4,"private org.eclipse.jgit.lib.Repository openRepository(java.nio.file.Path path, com.google.gerrit.reviewdb.client.Project.NameKey name) throws org.eclipse.jgit.errors.RepositoryNotFoundException { if (isUnreasonableName(name)) { throw new org.eclipse.jgit.errors.RepositoryNotFoundException((""Invalid name: "" + name)); } org.eclipse.jgit.lib.RepositoryCache.FileKey loc = org.eclipse.jgit.lib.RepositoryCache.FileKey.lenient(path.resolve(name.get()).toFile(), FS.DETECTED); try { return org.eclipse.jgit.lib.RepositoryCache.open(loc); } catch (java.io.IOException e1) { final org.eclipse.jgit.errors.RepositoryNotFoundException e2; e2 = new org.eclipse.jgit.errors.RepositoryNotFoundException((""Cannot open repository "" + name)); e2.initCause(e1); throw e2; } }",c7a0f7a760277dbe55be81d24ea77761343f2210,"openRepository(java.nio.file.Path,com.google.gerrit.reviewdb.client.Project$NameKey)",151470,224,223
69470,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByMergeIfNecessaryIT.java,3.0,"@org.junit.Test public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommitId()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertSubmitter(change.getChangeId(), 1); }",070d3b6d57753d00037dac014ac705a9ad251680,"@org.junit.Test public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommitId()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertSubmitter(change.getChangeId(), 1); assertAuthor(head, admin.getIdent()); assertCommitter(head, admin.getIdent()); }",2e03135835fecfa61c30507fbfe4b4da4601de9a,submitWithFastForward(),submitWithFastForward(),6,3,"@org.junit.Test public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommitId()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); }",5ed374a97e96160625fae105368c1330299eb8bd,submitWithFastForward(),187004,144,153
50441,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void initIncludedInAction(com.google.gerrit.client.changes.ChangeInfo info) { if (info.status().isClosed()) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.legacy_id(), style, headerLine, includedIn); includedIn.setVisible(true); } }",8fb8fd8890df1f098bcf388ba159288c6b7f28d3,,initIncludedInAction(com.google.gerrit.client.changes.ChangeInfo),3,56,"private void initIncludedInAction(com.google.gerrit.client.changes.ChangeInfo info) { if ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.MERGED)) { includedInAction = new com.google.gerrit.client.change.IncludedInAction(info.legacy_id(), style, headerLine, includedIn); includedIn.setVisible(true); } }",cb1c21b5ef367ddb6437cc906f6805477259699b,initIncludedInAction(com.google.gerrit.client.changes.ChangeInfo),57103,76,97
12579,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,,,,"private java.lang.String password(java.lang.String fmt, java.lang.Object... args) { if ((console) == null) { console = java.lang.System.console(); } if ((console) == null) { return null; } final java.lang.String prompt = java.lang.String.format(fmt, args); char[] r = console.readPassword(""%-30s : "", prompt); if (r == null) { throw die(""aborted by user""); } java.lang.String s = new java.lang.String(r).trim(); return !(s.isEmpty()) ? s : null; }",ab30d35d3ee2f8d33103b731d7ef8a528620a113,,"password(java.lang.String,java.lang.Object[])",4,7,private static boolean isLocal(final java.lang.String hostname) { try { return java.net.InetAddress.getByName(hostname).isLoopbackAddress(); } catch (java.net.UnknownHostException e) { return false; } },e51c98a00c53b57c326b467d6c05128a88bd6955,isLocal(java.lang.String),78864,143,50
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,1.0,"@org.junit.Test public void specifiedEventTypesPosted() { config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.URL, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); config.setString(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.EVENT, ""project-created""); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verify(postTask, times(1)).schedule(); }",d836515097ccdef4ec4ae15c05a0a4d0d2a1b4a7,"@org.junit.Test public void shouldNotCallProcessWhenWebhookTypeIsMisconfigured() { mockConfig(); when(provider.getFactory(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(java.util.Optional.empty()); eventHandler.onEvent(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_CREATED); verifyZeroInteractions(processor); verifyZeroInteractions(postTask); }",9a06ede592c7e8d82107b3b0de444995fa5d7024,specifiedEventTypesPosted(),shouldNotCallProcessWhenWebhookTypeIsMisconfigured(),8,0,"@org.junit.Test public void remoteUrlDefinedTaskScheduled() { when(config.getSubsections(eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.REMOTE))).thenReturn(com.google.common.collect.ImmutableSet.of(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO)); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO_URL); eventHandler.onEvent(projectCreated); verify(taskFactory, times(1)).create(eq(projectCreated), eq(remote)); verify(postTask, times(1)).schedule(); }",ae855d3f74937c8957a66157dfb2b0c17962d653,remoteUrlDefinedTaskScheduled(),55444,112,148
57400,gerrit-server_src_main_java_com_google_gerrit_server_config_ListCaches.java,,,,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> apply(com.google.gerrit.server.config.ConfigResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> cacheInfos = new java.util.TreeMap<>(); for (java.util.Map.Entry<java.lang.String, com.google.common.cache.Cache<?, ?>> entry : getCaches().entrySet()) { cacheInfos.put(entry.getKey(), new com.google.gerrit.server.config.ListCaches.CacheInfo(entry.getValue())); } return cacheInfos; }",71808755da9b6629ffabb5cabe85660f8b1fbf15,,apply(com.google.gerrit.server.config.ConfigResource),7,8,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> apply(com.google.gerrit.server.config.ConfigResource rsrc) { java.util.Map<java.lang.String, com.google.gerrit.server.config.ListCaches.CacheInfo> cacheInfos = new java.util.TreeMap<>(); for (DynamicMap.Entry<com.google.common.cache.Cache<?, ?>> e : cacheMap) { cacheInfos.put(com.google.gerrit.server.config.ListCaches.cacheNameOf(e.getPluginName(), e.getExportName()), new com.google.gerrit.server.config.ListCaches.CacheInfo(e.getProvider().get())); } return cacheInfos; }",132be610b18857c1d282e83d95d63aae9e6b7eba,apply(com.google.gerrit.server.config.ConfigResource),120435,171,187
140535,java_com_google_gerrit_server_patch_PatchListCacheImpl.java,3.0,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patch.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",32b4d753efdf9662fba54caa008fe4d68c0736de,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.patchlib.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",52be42045b18d29c334c48263465bec3b943f92c,"getOldId(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,java.lang.Integer)","getOldId(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,java.lang.Integer)",11,4,"@java.lang.Override public org.eclipse.jgit.lib.ObjectId getOldId(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.lang.Integer parentNum) throws com.google.gerrit.server.diff.PatchListNotAvailableException { return get(change, patchSet, parentNum).getOldId(); }",67d0c09c253997edbff921efc3f43033d7fd963b,"getOldId(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,java.lang.Integer)",15134,97,96
54310,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,17.0,"private void setSubmitType(com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input(); in.submitType = submitType; in.useContentMerge = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.FALSE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/config""), in); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); r.consume(); }",adb7b15ac593f5b4f122caa8113f03de1ce4618d,"private void setSubmitType(com.google.gerrit.extensions.common.ProjectSubmitType submitType) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input(); in.submitType = submitType; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.FALSE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/config""), in); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); r.consume(); }",2f9b2907fd1c0b2c1ccb750a26612dc26a1e9673,setSubmitType(com.google.gerrit.reviewdb.client.Project.SubmitType),setSubmitType(com.google.gerrit.extensions.common.ProjectSubmitType),14,4,"private void setSubmitType(com.google.gerrit.extensions.common.SubmitType submitType) throws java.io.IOException { com.google.gerrit.server.project.PutConfig.Input in = new com.google.gerrit.server.project.PutConfig.Input(); in.submitType = submitType; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.FALSE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/config""), in); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); r.consume(); }",d7bc77c6a2df40d542e0f45a622ecb9bfe849052,setSubmitType(com.google.gerrit.extensions.common.SubmitType),163764,147,146
125410,gerrit-server_src_main_java_com_google_gerrit_server_git_LabelNormalizer.java,4.0,"private boolean applyRightFloor(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) { com.google.gerrit.common.data.PermissionRange range = getRange(ctl, lt, a.getAccountId()); if (range.isEmpty()) { return false; } a.setValue(((short) (range.squash(a.getValue())))); return true; }",caa2e559428b6b73663cd624eef29890faae467e,"private boolean applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange = permissionBackend.user(userFactory.create(a.getAccountId())).database(db).change(notes); try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission(lt.getName())); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } short value = a.getValue(); while (value != 0) { try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt.getName(), value)); break; } catch (com.google.gerrit.extensions.restapi.AuthException e) { if (value > 0) { value--; } else if (value < 0) { value++; } } } a.setValue(value); return true; }",e26131ad13c0ee27b7e9a1c57b81d7a6c154dcd3,"applyRightFloor(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.common.data.LabelType,com.google.gerrit.reviewdb.client.PatchSetApproval)","applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.common.data.LabelType,com.google.gerrit.reviewdb.client.PatchSetApproval)",3,3,"private boolean applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.common.data.LabelType lt, com.google.gerrit.reviewdb.client.PatchSetApproval a) throws com.google.gerrit.server.permissions.PermissionBackendException { com.google.gerrit.server.permissions.PermissionBackend.ForChange forChange = permissionBackend.user(userFactory.create(a.getAccountId())).database(db).change(notes); try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission(lt.getName())); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } try { forChange.check(new com.google.gerrit.server.permissions.LabelPermission.WithValue(lt.getName(), a.getValue())); return true; } catch (com.google.gerrit.extensions.restapi.AuthException e) { a.setValue(forChange.squashThenCheck(lt, a.getValue())); return true; } }",5ba6a23851c6676124bb61cc3a9fe3b5f9d83893,"applyRightFloor(com.google.gerrit.server.notedb.ChangeNotes,com.google.gerrit.common.data.LabelType,com.google.gerrit.reviewdb.client.PatchSetApproval)",178939,262,244
68163,gerrit-server_src_main_java_com_google_gerrit_server_change_Submit.java,12.0,private java.util.List<com.google.gerrit.server.query.change.ChangeData> getChangesByTopic(java.lang.String topic) { try { return queryProvider.get().byTopicOpen(topic); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } },e2586636e6e36a4e5958a450798303f9dbce7a26,private java.util.List<com.google.gerrit.server.query.change.ChangeData> getChangesByTopic(java.lang.String topic) { try { java.util.List<com.google.gerrit.server.query.change.ChangeData> ret = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.server.query.change.ChangeData c : queryProvider.get().byTopicOpen(topic)) { if (topic.equals(c.change().getTopic())) { ret.add(c); } } return ret; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } },995734f759b531c33f3b10c673bf9d8fd3a444ec,getChangesByTopic(java.lang.String),getChangesByTopic(java.lang.String),10,12,private java.util.List<com.google.gerrit.server.query.change.ChangeData> getChangesByTopic(java.lang.String topic) { try { return queryProvider.get().byExactTopicOpen(topic); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } },2c84a304228af6ba1a36e950bf9bdee135aebb23,getChangesByTopic(java.lang.String),211728,168,88
73527,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,13.0,"@java.lang.Override public void doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String headName) { com.google.gerrit.server.events.ProjectCreatedEvent event = new com.google.gerrit.server.events.ProjectCreatedEvent(); event.projectName = project.get(); event.headName = headName; fireEvent(project, event); java.util.List<java.lang.String> args = new java.util.ArrayList<>(); addArg(args, ""--project"", project.get()); addArg(args, ""--head"", headName); runHook(project, projectCreatedHook, args); }",5f56214fb970251610ef9e973b1d45ee9bc807b1,"@java.lang.Override public void doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String headName) { if (!(projectCreatedHook.isPresent())) { return; } com.google.gerrit.server.events.ProjectCreatedEvent event = new com.google.gerrit.server.events.ProjectCreatedEvent(); event.projectName = project.get(); event.headName = headName; fireEvent(project, event); java.util.List<java.lang.String> args = new java.util.ArrayList<>(); addArg(args, ""--project"", project.get()); addArg(args, ""--head"", headName); runHook(project, projectCreatedHook, args); }",93268ff9ec90dde975f0ac21b49d230858d6b7f6,"doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",6,14,"@java.lang.Override public void doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String headName) { com.google.gerrit.server.events.ProjectCreatedEvent event = new com.google.gerrit.server.events.ProjectCreatedEvent(); event.projectName = project.get(); event.headName = headName; fireEvent(project, event); if (!(projectCreatedHook.isPresent())) { return; } java.util.List<java.lang.String> args = new java.util.ArrayList<>(); addArg(args, ""--project"", project.get()); addArg(args, ""--head"", headName); runHook(project, projectCreatedHook, args); }",3ce919bc5c9714fb6ae329ad22061f2f4fb42fc0,"doProjectCreatedHook(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",37821,164,164
75180,gerrit-gwtui_src_main_java_net_codemirror_mode_Modes.java,106.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@net.codemirror.mode.Source(""idl.dl"") @com.google.gwt.resources.client.DataResource.DoNotEmbed com.google.gwt.resources.client.DataResource idl();",205035b9a8ad134f141adec6d9cb571c058ddf4d,,idl(),5,62,"@net.codemirror.mode.Source(""idl.js"") @com.google.gwt.resources.client.DataResource.DoNotEmbed com.google.gwt.resources.client.DataResource idl();",ae92ca0ab3d52e82f4dafe9499106bae6168b652,idl(),166814,46,46
148032,java_com_google_gerrit_server_restapi_project_FilesCollection.java,2.0,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",8a0cc266f849925c994a8a91c79866c5905f8a8f,"@java.lang.Override public com.google.gerrit.server.restapi.project.FileResource parse(com.google.gerrit.server.restapi.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.restapi.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",350e789d4866b830314cd691f0bb9b9a6d9eb95f,"parse(com.google.gerrit.server.project.BranchResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.restapi.project.BranchResource,com.google.gerrit.extensions.restapi.IdString)",17,1,"@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.BranchResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), org.eclipse.jgit.lib.ObjectId.fromString(parent.getRevision()), id.get()); }",8a0cc266f849925c994a8a91c79866c5905f8a8f,"parse(com.google.gerrit.server.project.BranchResource,com.google.gerrit.extensions.restapi.IdString)",216581,132,123
94513,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_api_changes_ChangeEditApi.java,,,,"@java.lang.Override public void modifyFile(java.lang.String filePath, com.google.gerrit.extensions.restapi.RawInput newContent) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }",e1db4c9cda6b9a889787e493b84a1f23b104580e,,"modifyFile(java.lang.String,com.google.gerrit.extensions.restapi.RawInput)",5,23,"@java.lang.Override public void modifyFile(java.lang.String filePath, com.google.gerrit.extensions.restapi.RawInput newContent) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }",0abc0e50773e0fbcdd6ab5ce763112c5e17a8046,"modifyFile(java.lang.String,com.google.gerrit.extensions.restapi.RawInput)",123466,69,54
47480,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SkipBar.java,,,,"void setMarker(net.codemirror.lib.TextMarker marker, int length) { this.marker = marker; numSkipLines = length; skipNum.setText(java.lang.Integer.toString(length)); if (!(checkAndUpdateArrows())) { upArrow.setHTML(PatchUtil.M.expandBefore(com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND)); downArrow.setHTML(PatchUtil.M.expandAfter(com.google.gerrit.client.diff.SkipBar.NUM_ROWS_TO_EXPAND)); } }",36cb15f95029529a36bf137b9a82a393c241ebdd,,"setMarker(net.codemirror.lib.TextMarker,int)",14,0,void setWidget(net.codemirror.lib.LineWidget widget) { this.widget = widget; },350831b0182735c21a0f207666a67eba3fd92fd7,setWidget(net.codemirror.lib.LineWidget),166551,129,23
41772,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,33.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean canForcePerform(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> access = access(permissionName); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> allows = com.google.common.collect.Sets.newHashSet(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> blocks = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.common.data.PermissionRule rule : access) { if (rule.isBlock()) { blocks.add(rule.getProject()); } else if (rule.getForce()) { allows.add(rule.getProject()); } } blocks.removeAll(allows); return (blocks.isEmpty()) && (!(allows.isEmpty())); },e8e90c3c641faafc7e9395196377a519c7354a66,,canForcePerform(java.lang.String),6,34,private boolean canForcePerform(java.lang.String permissionName) { java.util.List<com.google.gerrit.common.data.PermissionRule> access = access(permissionName); java.util.Set<com.google.gerrit.server.project.ProjectRef> allows = com.google.common.collect.Sets.newHashSet(); java.util.Set<com.google.gerrit.server.project.ProjectRef> blocks = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.common.data.PermissionRule rule : access) { if (rule.isBlock()) { blocks.add(relevant.getRuleProps(rule)); } else if (rule.getForce()) { allows.add(relevant.getRuleProps(rule)); } } blocks.removeAll(allows); return (blocks.isEmpty()) && (!(allows.isEmpty())); },b3a5d3a40502f3a83b40fa30388de4087fedd096,canForcePerform(java.lang.String),42887,196,194
156132,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsAuthUserProvider.java,0.0,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",310538d8cee6e8d97657374cb4010d13d96d0666,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }",22425141cd83870000df7e7822989947308e8d39,"getUser(java.lang.String,java.lang.String,java.lang.String)","getUser(java.lang.String,java.lang.String,java.lang.String)",5,0,"public com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { java.util.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { java.util.Optional<com.google.gerrit.server.account.AccountState> acc = accounts.getByUsername(user.get()); if (acc.isPresent()) { return userFactory.create(acc.get()); } } } } return anonymous.get(); }",6327e8995a296e04bee8985e534854858ae9565a,"getUser(java.lang.String,java.lang.String,java.lang.String)",22691,238,247
47870,gerrit-gwtui_src_main_java_com_google_gerrit_client_api_ApiGlue.java,,,,"private static native void init0(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JavaScriptObject> changes, com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JavaScriptObject> revisions);",a4823f782c8b93f8a897609e892bfec6cebc78c6,,"init0(com.google.gerrit.client.rpc.NativeMap,com.google.gerrit.client.rpc.NativeMap)",7,3,private static native void init0();,ef6bee9c383e6bb426855c4e05b6706bd7599f47,init0(),192350,65,7
144152,java_com_google_gerrit_server_group_db_GroupBundle.java,25.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.common.collect.SortedSetMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().treeSetValues(com.google.gerrit.server.group.db.GroupBundle.AUDIT_ENTRY_COMPARATOR)::build)); }",15aac262e0806939fbe897a725f28842397dfaa8,,toByIdAuditEntriesById(com.google.common.collect.ImmutableSet),3,3,"private static com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.group.db.GroupBundle.AuditEntry> toByIdAuditEntriesById(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> byIdAudits) { return byIdAudits.stream().flatMap(com.google.gerrit.server.group.db.GroupBundle::toAuditEntries).collect(com.google.common.collect.Multimaps.toMultimap(com.google.gerrit.server.group.db.GroupBundle.AuditEntry::getTarget, java.util.function.Function.identity(), com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues()::build)); }",daac4a9b706521e26b3ad1435b5ef4992b641e34,toByIdAuditEntriesById(com.google.common.collect.ImmutableSet),50939,201,178
98050,gerrit-server_src_main_java_com_google_gerrit_server_index_FieldDef.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isRepeatable() { return true; },bb8884f6532ad623d613ddd2214336a0abb98d65,,isRepeatable(),4,4,"public static com.google.gerrit.server.index.FieldDef.Builder<java.sql.Timestamp> timestamp(java.lang.String name) { return new com.google.gerrit.server.index.FieldDef.Builder(FieldType.TIMESTAMP, name); }",1d5b14e5d8e6665164aa1bbd5411311a444be104,timestamp(java.lang.String),116390,17,59
134332,gerrit-common_src_main_java_com_google_gerrit_common_data_GroupDescription.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> getMembers();,21ac3eebe29d48ba11c33306631c0ae923f39667,,getMembers(),4,10,java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers();,594d8c17ce117f8b20fcdb67b27271220782f56a,getMembers(),191287,31,26
92435,gerrit-server_src_test_java_com_google_gerrit_server_mail_receive_HtmlParserTest.java,,,,"@org.junit.Test public void testSimpleChangeMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody(""Looks good to me"", null, null, null, null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, """"); assertThat(parsedComments).hasSize(1); assertChangeMessage(""Looks good to me"", parsedComments.get(0)); }",482838f3531bfe4b5284aca434b7c27a562a1851,,testSimpleChangeMessage(),4,3,"@org.junit.Test public void simpleChangeMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder b = newMailMessageBuilder(); b.htmlContent(newHtmlBody(""Looks good to me"", null, null, null, null, null, null)); java.util.List<com.google.gerrit.reviewdb.client.Comment> comments = defaultComments(); java.util.List<com.google.gerrit.server.mail.receive.MailComment> parsedComments = com.google.gerrit.server.mail.receive.HtmlParser.parse(b.build(), comments, """"); assertThat(parsedComments).hasSize(1); assertChangeMessage(""Looks good to me"", parsedComments.get(0)); }",2c88ff073fc0245210b7125d961160014f65761b,simpleChangeMessage(),41239,165,164
106453,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangesImpl.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi id(java.lang.String project, int id) throws com.google.gerrit.extensions.restapi.RestApiException { return id(((project + ""/+/"") + id)); }",04b3e072604cc03c5a2f5aeedc063a919f2db7dd,,"id(java.lang.String,int)",4,0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi id(java.lang.String project, int id) throws com.google.gerrit.extensions.restapi.RestApiException { return id(com.google.common.base.Joiner.on('~').join(com.google.common.collect.ImmutableList.of(com.google.gerrit.extensions.restapi.Url.encode(project), com.google.gerrit.extensions.restapi.Url.encode(java.lang.String.valueOf(id))))); }",1681c57b14b12cb7cf9aaec1e80593c5a8bb11b3,"id(java.lang.String,int)",175324,64,129
53495,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChangesTab.java,31.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { onOpenRow(selectedRow); },ae70023e261302918b3837e841ddc57763bd040d,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),9,8,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { onOpenRow(getRow(selectedRow)); },21e646932415b5ca5a358daf365c01f1e90fae01,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),135691,37,39
68040,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeList.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.push(result); callback.onSuccess(wrapped); },e21ff64e69078e438f56d91c087f9ff0e193359f,,onSuccess(com.google.gerrit.client.changes.ChangeList),2,6,"@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.set(0, result); callback.onSuccess(wrapped); }",66a85fc5fd6ccdf0203aff3512b56a430a402cd1,onSuccess(com.google.gerrit.client.changes.ChangeList),71384,88,88
68550,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,59.0,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""""); try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes)).merge(); } catch (com.google.gerrit.server.git.MergeException | com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",a8add21512749871473e411bec8785eeb8543c67,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } addMessage(""""); try { integrationProvider.get().create(com.google.gerrit.server.git.ChangeSet.create(changes, ((com.google.gerrit.server.IdentifiedUser) (changeCtl.getCurrentUser())))).integrate(false); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",c8ab774b77035521764fc2b5db05ba1f24d2d388,"submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)","submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)",33,59,"private void submit(com.google.gerrit.server.project.ChangeControl changeCtl, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.Submit submit = submitProvider.get(); com.google.gerrit.server.change.RevisionResource rsrc = new com.google.gerrit.server.change.RevisionResource(changes.parse(changeCtl), ps); java.util.List<com.google.gerrit.reviewdb.client.Change> changes; try { changes = submit.submit(rsrc, currentUser, true); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { throw new java.io.IOException(e); } try { mergeFactory.create(com.google.gerrit.server.git.ChangeSet.create(changes), ((com.google.gerrit.server.IdentifiedUser) (changeCtl.getCurrentUser()))).merge(false); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } addMessage(""""); for (com.google.gerrit.reviewdb.client.Change c : changes) { c = db.changes().get(c.getId()); switch (c.getStatus()) { case SUBMITTED : addMessage(((""Change "" + (c.getChangeId())) + "" submitted."")); break; case MERGED : addMessage(((""Change "" + (c.getChangeId())) + "" merged."")); break; case NEW : com.google.gerrit.reviewdb.client.ChangeMessage msg = submit.getConflictMessage(rsrc); if (msg != null) { addMessage((((""Change "" + (c.getChangeId())) + "": "") + (msg.getMessage()))); break; } default : addMessage((((""change "" + (c.getChangeId())) + "" is "") + (c.getStatus().name().toLowerCase()))); } } }",681e4ff3b93dce501e31eaef0eba52434f80369c,"submit(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)",169518,501,498
54860,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_webui_WebLink.java,,,,public java.lang.String getLinkName();,ad5d8d600c5c1e724ee6a9880c8774ee016294a7,,getLinkName(),11,0,java.lang.String getLinkName();,23866b63c727e2caab6798645ba87cb83465a2fe,getLinkName(),22297,10,9
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,10.0,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { return getHead(repo, ""HEAD""); }",eb0d163f1c13eec90b05ba32e1612d4a06ede481,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return rw.parseCommit(repo.exactRef(name).getObjectId()); } }",893c3491d006cc2c6fcd2b6150f969ddbee1366e,getHead(org.eclipse.jgit.lib.Repository),"getHead(org.eclipse.jgit.lib.Repository,java.lang.String)",6,30,"private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { return getHead(repo, ""HEAD""); }",eb0d163f1c13eec90b05ba32e1612d4a06ede481,getHead(org.eclipse.jgit.lib.Repository),38168,93,45
60043,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffTable.java,6.0,"void setHeaderVisible(boolean show) { headerVisible = show; com.google.gwt.user.client.ui.UIObject.setVisible(patchSetNavRow, show); com.google.gwt.user.client.ui.UIObject.setVisible(diffHeaderRow, (show && (header))); if (show) { parent.header.removeStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } else { parent.header.addStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } parent.resizeCodeMirror(); }",c057d3b47cfbd4f336a411bbd3925c03638434d3,"void setHeaderVisible(boolean show) { headerVisible = (!(autoHideHeader)) || show; com.google.gwt.user.client.ui.UIObject.setVisible(patchSetNavRow, headerVisible); com.google.gwt.user.client.ui.UIObject.setVisible(diffHeaderRow, ((headerVisible) && (header))); if (headerVisible) { parent.header.removeStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } else { parent.header.addStyleName(com.google.gerrit.client.diff.DiffTable.style.fullscreen()); } parent.resizeCodeMirror(); }",4de962b5a09d0ca7b712fe5e6cdb200d931193e7,setHeaderVisible(boolean),setHeaderVisible(boolean),2,8,void setHeaderVisible(boolean show) { headerVisible = (!(autoHideHeader)) || show; showHeader(headerVisible); },2e84da57598d6a53c213fbb8326222988850a44a,setHeaderVisible(boolean),205733,142,27
63367,gerrit-server_src_main_java_com_google_gerrit_server_git_VersionedMetaData.java,33.0,"private org.eclipse.jgit.revwalk.RevCommit updateRef(org.eclipse.jgit.lib.AnyObjectId oldId, org.eclipse.jgit.lib.AnyObjectId newId, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate bru = update.getBatch(); if (bru != null) { bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(oldId.toObjectId(), newId.toObjectId(), refName)); inserter.flush(); revision = rw.parseCommit(newId); return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(oldId); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",91ff3cecfb6f0c3724c8177f8b916a6dd5b28879,"private org.eclipse.jgit.revwalk.RevCommit updateRef(org.eclipse.jgit.lib.AnyObjectId oldId, org.eclipse.jgit.lib.AnyObjectId newId, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate bru = update.getBatch(); if (bru != null) { bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(oldId.toObjectId(), newId.toObjectId(), refName)); inserter.flush(); revision = rw.parseCommit(newId); return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(oldId); ru.setNewObjectId(src); ru.setRefLogIdent(update.getCommitBuilder().getAuthor()); ru.setRefLogMessage(""meta data update"", true); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",09aa465eba18f0a3041db838b812aacfa574762d,"updateRef(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,java.lang.String)","updateRef(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,java.lang.String)",4,33,"private org.eclipse.jgit.revwalk.RevCommit updateRef(org.eclipse.jgit.lib.AnyObjectId oldId, org.eclipse.jgit.lib.AnyObjectId newId, java.lang.String refName) throws java.io.IOException { org.eclipse.jgit.lib.BatchRefUpdate bru = update.getBatch(); if (bru != null) { bru.addCommand(new org.eclipse.jgit.transport.ReceiveCommand(oldId.toObjectId(), newId.toObjectId(), refName)); inserter.flush(); revision = rw.parseCommit(newId); return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(oldId); ru.setNewObjectId(src); ru.setRefLogIdent(update.getCommitBuilder().getAuthor()); try (java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.StringReader(update.getCommitBuilder().getMessage()))) { ru.setRefLogMessage((""commit: "" + (reader.readLine())), true); } inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",0aa4755e7f7223f570f93e224f666bb889688b21,"updateRef(org.eclipse.jgit.lib.AnyObjectId,org.eclipse.jgit.lib.AnyObjectId,java.lang.String)",151485,324,365
52255,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ReviewCommand.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean inBranch(final com.google.gerrit.reviewdb.client.Change change) { if ((branch) == null) { return true; } return change.getDest().toString().equals(branch); },47bcf9110aadefc6d1e16b5a8f32ed080db93e9d,,inBranch(com.google.gerrit.reviewdb.client.Change),6,7,private boolean inBranch(final com.google.gerrit.reviewdb.client.Change change) { if ((branch) == null) { return true; } return change.getDest().get().equals(branch); },7cf2395101690ebf4db19ced2df2710b4a47e408,inBranch(com.google.gerrit.reviewdb.client.Change),46510,49,49
41202,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public int compare(com.google.gerrit.server.group.MembersCollection.MemberInfo a, com.google.gerrit.server.group.MembersCollection.MemberInfo b) { int cmp = nullToEmpty(a.fullName).compareTo(nullToEmpty(b.fullName)); if (cmp != 0) { return cmp; } cmp = nullToEmpty(a.preferredEmail).compareTo(nullToEmpty(b.preferredEmail)); if (cmp != 0) { return cmp; } return nullToEmpty(a.id).compareTo(nullToEmpty(b.id)); }",2083b0f3b4f98061d67c9e0954cc65149001d918,,"compare(com.google.gerrit.server.group.MembersCollection.MemberInfo,com.google.gerrit.server.group.MembersCollection.MemberInfo)",3,2,"@java.lang.Override public int compare(com.google.gerrit.server.group.MembersCollection.MemberInfo a, com.google.gerrit.server.group.MembersCollection.MemberInfo b) { return com.google.common.collect.ComparisonChain.start().compare(a.fullName, b.fullName, com.google.common.collect.Ordering.natural().nullsFirst()).compare(a.preferredEmail, b.preferredEmail, com.google.common.collect.Ordering.natural().nullsFirst()).compare(a.id, b.id, com.google.common.collect.Ordering.natural().nullsFirst()).result(); }",d01aa97c6dc99fc5380425a0778b904303ee4c57,"compare(com.google.gerrit.server.group.MembersCollection.MemberInfo,com.google.gerrit.server.group.MembersCollection.MemberInfo)",12598,121,147
72429,src_main_java_com_amd_gerrit_plugins_manifestsubscription_ManifestSubscription.java,,,,"@java.lang.Override public void start() { com.google.gerrit.server.git.ProjectConfig config; for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { try { config = com.google.gerrit.server.git.ProjectConfig.read(metaDataUpdateFactory.create(p)); loadStoreFromProjectConfig(p.toString(), config); com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig ppc = enabledManifestRepos.get(p.toString()); if (ppc != null) { com.google.gerrit.reviewdb.client.Project.NameKey store = new com.google.gerrit.reviewdb.client.Project.NameKey(ppc.getStore()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> branches = gitRepoManager.openRepository(store).getRefDatabase().getRefs(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX); for (java.lang.String branchPath : branches.keySet()) { try { com.amd.gerrit.plugins.manifestsubscription.VersionedManifests manifests = parseManifests(store, ((com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.STORE_BRANCH_PREFIX) + branchPath)); watchCanonicalManifest(manifests.getManifests().get(""default.xml""), store.toString(), branchPath); } catch (java.lang.Exception e) { com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.log.error(e.toString()); e.printStackTrace(); } } } } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.log.error(e.toString()); e.printStackTrace(); } } }",ab79d6a999c9f5e5be2be8cc3c5ae5dbd91101ed,,start(),6,13,"@java.lang.Override public void start() { com.google.gerrit.server.git.ProjectConfig config; for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectCache.all()) { try { config = com.google.gerrit.server.git.ProjectConfig.read(metaDataUpdateFactory.create(p)); loadStoreFromProjectConfig(p.toString(), config); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | javax.xml.bind.JAXBException e) { com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.log.error(e.toString()); e.printStackTrace(); } } }",c97f19f20395befc82d0c6e4805d125ff8b0953a,start(),75075,423,156
40530,gerrit-httpd_src_main_java_com_google_gerrit_httpd_restapi_RestApiServlet.java,17.0,"static void replyText(@javax.annotation.Nullable javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String text) throws java.io.IOException { if (((req == null) || (""GET"".equals(req.getMethod()))) && (com.google.gerrit.httpd.restapi.RestApiServlet.isMaybeHTML(text))) { com.google.gerrit.httpd.restapi.RestApiServlet.replyJson(req, res, com.google.common.collect.ImmutableMultimap.of(""pp"", ""0""), new com.google.gson.JsonPrimitive(text)); } else { if (!(text.endsWith(""\n""))) { text += ""\n""; } com.google.gerrit.httpd.restapi.RestApiServlet.replyBinaryResult(req, res, com.google.gerrit.extensions.restapi.BinaryResult.create(text).setContentType(""text/plain"")); } }",62ba0a064835ad13356db38042fafc7649625ec1,"public static void replyText(@javax.annotation.Nullable javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String text) throws java.io.IOException { if (((req == null) || (""GET"".equals(req.getMethod()))) && (com.google.gerrit.httpd.restapi.RestApiServlet.isMaybeHTML(text))) { com.google.gerrit.httpd.restapi.RestApiServlet.replyJson(req, res, com.google.common.collect.ImmutableMultimap.of(""pp"", ""0""), new com.google.gson.JsonPrimitive(text)); } else { if (!(text.endsWith(""\n""))) { text += ""\n""; } com.google.gerrit.httpd.restapi.RestApiServlet.replyBinaryResult(req, res, com.google.gerrit.extensions.restapi.BinaryResult.create(text).setContentType(""text/plain"")); } }",e77cf891fabbc56c13acd7aa9b25b7f21f6e5a9a,"replyText(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)","replyText(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",5,22,"static void replyText(@javax.annotation.Nullable javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.lang.String text) throws java.io.IOException { if (((req == null) || (""GET"".equals(req.getMethod()))) && (com.google.gerrit.httpd.restapi.RestApiServlet.isMaybeHTML(text))) { com.google.gerrit.httpd.restapi.RestApiServlet.replyJson(req, res, com.google.common.collect.ImmutableMultimap.of(""pp"", ""0""), new com.google.gson.JsonPrimitive(text)); } else { if (!(text.endsWith(""\n""))) { text += ""\n""; } com.google.gerrit.httpd.restapi.RestApiServlet.replyBinaryResult(req, res, com.google.gerrit.extensions.restapi.BinaryResult.create(text).setContentType(""text/plain"")); } }",62ba0a064835ad13356db38042fafc7649625ec1,"replyText(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)",36510,209,208
48252,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UpToChangeCommand2.java,,,,"@java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(revision.getParentKey(), java.lang.String.valueOf(revision))); }",15751118454e50b4980aee39e4579483031b5b89,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),9,0,"@java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(revision.getParentKey(), java.lang.String.valueOf(revision.get()))); }",48c36ea054ca55e3ea9cc8095543d43885099bd7,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),192986,78,80
55205,gitiles-servlet_src_main_java_com_google_gitiles_CommitData.java,,,,"private java.util.List<org.eclipse.jgit.diff.DiffEntry> computeDiffEntries(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, org.eclipse.jgit.revwalk.RevCommit commit) throws java.io.IOException { org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree; switch (commit.getParentCount()) { case 0 : oldTree = new org.eclipse.jgit.treewalk.EmptyTreeIterator(); break; case 1 : oldTree = getTreeIterator(commit.getParent(0)); break; default : return com.google.common.collect.ImmutableList.of(); } org.eclipse.jgit.treewalk.AbstractTreeIterator newTree = getTreeIterator(commit); org.eclipse.jgit.diff.DiffFormatter diff = new org.eclipse.jgit.diff.DiffFormatter(org.eclipse.jgit.util.io.NullOutputStream.INSTANCE); try { diff.setRepository(repo); diff.setDetectRenames(true); return diff.scan(oldTree, newTree); } finally { diff.release(); } }",e688a3572a448e36ca752031fbf2b09b0844b7cf,,"computeDiffEntries(org.eclipse.jgit.lib.Repository,com.google.gitiles.GitilesView,org.eclipse.jgit.revwalk.RevCommit)",3,9,"private com.google.gitiles.CommitData.DiffList computeDiffEntries(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, org.eclipse.jgit.revwalk.RevCommit commit) throws java.io.IOException { com.google.gitiles.CommitData.DiffList result = new com.google.gitiles.CommitData.DiffList(); org.eclipse.jgit.treewalk.AbstractTreeIterator oldTree; switch (commit.getParentCount()) { case 0 : result.oldRevision = Revision.NULL; oldTree = new org.eclipse.jgit.treewalk.EmptyTreeIterator(); break; case 1 : result.oldRevision = com.google.gitiles.Revision.peeled(((view.getRevision().getName()) + ""^""), commit.getParent(0)); oldTree = getTreeIterator(commit.getParent(0)); break; default : return result; } org.eclipse.jgit.treewalk.AbstractTreeIterator newTree = getTreeIterator(commit); org.eclipse.jgit.diff.DiffFormatter diff = new org.eclipse.jgit.diff.DiffFormatter(org.eclipse.jgit.util.io.NullOutputStream.INSTANCE); try { diff.setRepository(repo); diff.setDetectRenames(true); result.entries = diff.scan(oldTree, newTree); return result; } finally { diff.release(); } }",131d99c8d1bdcfc26c900be844d5328b0bcb00e9,"computeDiffEntries(org.eclipse.jgit.lib.Repository,com.google.gitiles.GitilesView,org.eclipse.jgit.revwalk.RevCommit)",125177,253,313
129966,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ChangeMerged.java,1.0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",9ff5197638806d24054f34447f08a8e931ada135,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",8497588dc4360d605f913526da26a4905420d00a,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)","fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)",5,1,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account merger, java.lang.String newRevisionId, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeMerged.Event event = new com.google.gerrit.server.extensions.events.ChangeMerged.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(merger), newRevisionId, when); for (com.google.gerrit.extensions.events.ChangeMergedListener l : listeners) { try { l.onChangeMerged(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.warn((""Couldn't fire event: "" + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeMerged.log.error(""Couldn't fire event"", e); } }",2c378f980611b2f3bb966c309c0be9a08a31fda8,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,java.lang.String,java.sql.Timestamp)",42243,313,370
10902,src_main_java_com_google_gerrit_server_ssh_GerritCommandFactory.java,0.0,"public com.google.gerrit.server.ssh.Command createCommand(final java.lang.String commandLine) { final int sp1 = commandLine.indexOf(' '); java.lang.String cmd; java.lang.String args; if (0 < sp1) { cmd = commandLine.substring(0, sp1); args = commandLine.substring((sp1 + 1)); } else { cmd = commandLine; args = """"; } if ((""git"".equals(cmd)) || (""gerrit"".equals(cmd))) { cmd += ""-""; final int sp2 = args.indexOf(' '); if (0 < sp2) { cmd += args.substring(0, sp2); args = args.substring((sp2 + 1)); } else { cmd += args; args = """"; } } final com.google.gerrit.server.ssh.Command c = create(cmd); if (c instanceof com.google.gerrit.server.ssh.AbstractCommand) { ((com.google.gerrit.server.ssh.AbstractCommand) (c)).setCommandLine(cmd, args); } return c; }",d56cd4c726e1bf3664742c67eba9b3392c56a6c2,"public com.google.gerrit.server.ssh.Command createCommand(final java.lang.String commandLine) { return new com.google.gerrit.server.ssh.BaseCommand() { @java.lang.Override public void start() throws java.io.IOException { final int sp1 = commandLine.indexOf(' '); java.lang.String cmd; java.lang.String args; if (0 < sp1) { cmd = commandLine.substring(0, sp1); args = commandLine.substring((sp1 + 1)); } else { cmd = commandLine; args = """"; } if ((""git"".equals(cmd)) || (""gerrit"".equals(cmd))) { cmd += ""-""; final int sp2 = args.indexOf(' '); if (0 < sp2) { cmd += args.substring(0, sp2); args = args.substring((sp2 + 1)); } else { cmd += args; args = """"; } } final com.google.inject.Provider<com.google.gerrit.server.ssh.Command> p = commands.get(cmd); if (p != null) { final com.google.gerrit.server.ssh.SshScopes.Context old = SshScopes.current.get(); try { SshScopes.current.set(new com.google.gerrit.server.ssh.SshScopes.Context(session)); final com.google.gerrit.server.ssh.Command c = p.get(); if (c instanceof com.google.gerrit.server.ssh.AbstractCommand) { ((com.google.gerrit.server.ssh.AbstractCommand) (c)).setCommandLine(cmd, args); } c.start(); } finally { SshScopes.current.set(old); } } else { final java.lang.String msg = (""gerrit: "" + cmd) + "": not found\n""; err.write(msg.getBytes(""UTF-8"")); err.flush(); exit.onExit(127); } } }; }",442f4459d2ad862a84f74d6aff952d0e3585a93f,createCommand(java.lang.String),createCommand(java.lang.String),2,0,"public com.google.gerrit.server.ssh.Command createCommand(final java.lang.String commandLine) { return new com.google.gerrit.server.ssh.BaseCommand() { @java.lang.Override public void start() throws java.io.IOException { final int sp1 = commandLine.indexOf(' '); java.lang.String cmd; java.lang.String args; if (0 < sp1) { cmd = commandLine.substring(0, sp1); args = commandLine.substring((sp1 + 1)); } else { cmd = commandLine; args = """"; } if ((""git"".equals(cmd)) || (""gerrit"".equals(cmd))) { cmd += ""-""; final int sp2 = args.indexOf(' '); if (0 < sp2) { cmd += args.substring(0, sp2); args = args.substring((sp2 + 1)); } else { cmd += args; args = """"; } } final com.google.inject.Provider<com.google.gerrit.server.ssh.Command> p = commands.get(cmd); if (p != null) { final com.google.gerrit.server.ssh.SshScopes.Context old = SshScopes.current.get(); try { SshScopes.current.set(new com.google.gerrit.server.ssh.SshScopes.Context(session)); final com.google.gerrit.server.ssh.Command c = p.get(); if (c instanceof com.google.gerrit.server.ssh.AbstractCommand) { ((com.google.gerrit.server.ssh.AbstractCommand) (c)).setCommandLine(cmd, args); } delegateTo(c); } finally { SshScopes.current.set(old); } } else { final java.lang.String msg = (""gerrit: "" + cmd) + "": not found\n""; err.write(msg.getBytes(""UTF-8"")); err.flush(); exit.onExit(127); } } }; }",ea9385ac16f08d1ffb22eaa2af8e81a552b478e7,createCommand(java.lang.String),94616,428,429
46642,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_ConfigServerApi.java,,,,"public static com.google.gerrit.client.rpc.RestApi capabilities() { return new com.google.gerrit.client.rpc.RestApi(""/config/server/capabilities/""); }",54b78b6251d6aa361ad3bff8bdd6528fb450f548,,capabilities(),4,0,"public static void capabilities(com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.config.CapabilityInfo>> cb) { new com.google.gerrit.client.rpc.RestApi(""/config/server/capabilities/"").get(cb); }",58702ed1ec30fac13073a662e6793c842a548130,capabilities(com.google.gwt.user.client.rpc.AsyncCallback),28858,40,77
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,13.0,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },8a602f9811d3eeb23a987cf24b810aece3259675,@java.lang.Override public int getBegin(com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },34ff2da0b00368a80bc1c0e057e82b5876600316,getBegin(com.google.gerrit.server.patch.EditTransformer$ContextAwareEdit),getBegin(com.google.gerrit.server.patchlib.EditTransformer$ContextAwareEdit),11,24,@java.lang.Override public int getBegin(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit) { return edit.getBeginA(); },8a602f9811d3eeb23a987cf24b810aece3259675,getBegin(com.google.gerrit.server.patch.EditTransformer$ContextAwareEdit),15684,38,37
35102,gerrit-server_src_main_java_com_google_gerrit_server_git_RenameGroupOp.java,2.0,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename group "" + (oldName)) + "" to "") + (newName)) + ""\n"")); if (config.commit(md)) { projectCache.evict(config.getProject()); success = true; } else { try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",a2f82ea50f1222ee87fa2d6c00167846f2204330,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename group "" + (oldName)) + "" to "") + (newName)) + ""\n"")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",bd2086a63d5a59fd30edd39aa25dd45498fc1acb,rename(com.google.gerrit.server.git.MetaDataUpdate),rename(com.google.gerrit.server.git.MetaDataUpdate),6,3,"private void rename(com.google.gerrit.server.git.MetaDataUpdate md) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { boolean success = false; for (int attempts = 0; (!success) && (attempts < (com.google.gerrit.server.git.RenameGroupOp.MAX_TRIES)); attempts++) { com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.GroupReference ref = config.getGroup(uuid); if ((ref == null) || (newName.equals(ref.getName()))) { projectCache.evict(config.getProject()); return; } ref.setName(newName); md.getCommitBuilder().setAuthor(author); md.setMessage(((((""Rename group "" + (oldName)) + "" to "") + (newName)) + ""\n"")); try { config.commit(md); projectCache.evict(config.getProject()); success = true; } catch (java.io.IOException e) { com.google.gerrit.server.git.RenameGroupOp.log.error((((((""Could not commit rename of group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get())), e); try { java.lang.Thread.sleep(25); } catch (java.lang.InterruptedException wakeUp) { continue; } } } if (!success) { if (tryingAgain) { com.google.gerrit.server.git.RenameGroupOp.log.warn((((((""Could not rename group "" + (oldName)) + "" to "") + (newName)) + "" in "") + (md.getProjectName().get()))); } else { retryOn.add(md.getProjectName()); } } }",383881a02c1e9d93eadd34a4d6e6dd82aad73401,rename(com.google.gerrit.server.git.MetaDataUpdate),88738,356,416
101315,gerrit-server_src_main_java_com_google_gerrit_server_account_externalids_ExternalIdCacheImpl.java,4.0,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId newNotesRev, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); updateCache(newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.get(accountId), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",da356ceb02d17b8a0b11fe0a55501066bfbdef92,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId oldNotesRev, org.eclipse.jgit.lib.ObjectId newNotesRev, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); updateCache(oldNotesRev, newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.get(accountId), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",e4d105a6f7904105c8f3ec67d24b5d275086615c,"onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.util.Collection)","onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.util.Collection)",2,1,"@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId oldNotesRev, org.eclipse.jgit.lib.ObjectId newNotesRev, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { com.google.gerrit.server.account.externalids.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); updateCache(oldNotesRev, newNotesRev, ( m) -> { removeKeys(m.get(accountId), toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }",f54fbc302349560b7ef811c359bc6cae7a14cec3,"onReplaceByKeys(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,java.util.Collection)",151205,236,216
69660,gerrit-server_src_main_java_com_google_gerrit_server_account_SuggestAccounts.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> map, com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(id); return addSuggestion(map, a); }",5df0ac7b6b8f97be47e3e01c46a2d458ee258c0a,,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.client.Account.Id)",3,0,"private boolean addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> map, com.google.gerrit.reviewdb.client.Account.Id id) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(id).getAccount(); return addSuggestion(map, a); }",63e6acfa4a90c53cd2f6258ac799c77d3cae59e3,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.client.Account$Id)",162485,109,97
24116,gerrit-gwtui_src_main_java_com_google_gerrit_client_auth_userpass_UserPassSignInDialog.java,13.0,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if ((result.isNew) && (!(to.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "",""))))) { to = ((com.google.gerrit.common.PageLinks.REGISTER) + "","") + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login/"") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",809436e3ab7f68dd3177d8b0aa71fd0ce1a582ed,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if ((result.isNew) && (!(to.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = ((com.google.gerrit.common.PageLinks.REGISTER) + "","") + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login/"") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",9cc7072b8670301d2ade8adaf3861e84ce53bd5a,onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),2,13,"public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith(""/""))) { to = ""/"" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + ""/""))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + ""login"") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } }",30611554e7a3089b0c261849c97ad4d693568ba5,onSuccess(com.google.gerrit.common.auth.userpass.LoginResult),101909,215,224
25219,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_ModifyReviewersCommand.java,0.0,"private void matchChange(java.util.Set<com.google.gerrit.reviewdb.Change.Id> matched, com.google.gerrit.reviewdb.Change change) { try { if (((change != null) && (inProject(change))) && (changeControlFactory.controlFor(change).isVisible())) { matched.add(change.getId()); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } }",34e16a57237bd60767c83364dd5693a956aa83e0,"private void matchChange(java.util.Set<com.google.gerrit.reviewdb.Change.Id> matched, com.google.gerrit.reviewdb.Change change) { try { if (((change != null) && (inProject(change))) && (changeControlFactory.controlFor(change).isVisible(db))) { matched.add(change.getId()); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.sshd.commands.ModifyReviewersCommand.log.warn((""Error reading change "" + (change.getId())), e); } }",41dde384b455a9fa2674e6500b68fc74382e007e,"matchChange(java.util.Set,com.google.gerrit.reviewdb.Change)","matchChange(java.util.Set,com.google.gerrit.reviewdb.Change)",6,0,"private void matchChange(java.util.Set<com.google.gerrit.reviewdb.Change.Id> matched, com.google.gerrit.reviewdb.Change change) { try { if (((change != null) && (inProject(change))) && (changeControlFactory.controlFor(change).isVisible(db))) { matched.add(change.getId()); } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.sshd.commands.SetReviewersCommand.log.warn((""Error reading change "" + (change.getId())), e); } }",e297e0258ff8b0b4cd470ffcf976ab5edc6b5d7d,"matchChange(java.util.Set,com.google.gerrit.reviewdb.Change)",152314,158,158
98050,gerrit-server_src_main_java_com_google_gerrit_server_index_FieldDef.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isRepeatable() { return false; },0e35591ae5246a0c54c5dc6f3fc5a5c22831323c,,isRepeatable(),4,13,"public static com.google.gerrit.server.index.FieldDef.Builder<java.lang.Integer> integer(java.lang.String name) { return new com.google.gerrit.server.index.FieldDef.Builder(FieldType.INTEGER, name); }",a75650b2e1df4a04910f749a5358d498dd56818f,integer(java.lang.String),116387,17,59
35184,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,8.0,"void onAuthFail(final com.google.gerrit.sshd.SshSession sd) { final org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), null, java.lang.System.currentTimeMillis(), org.apache.log4j.Level.INFO, (""AUTH FAILURE FROM "" + (sd.getRemoteAddressAsString())), ""SSHD"", null, null, null, null); event.setProperty(com.google.gerrit.sshd.SshLog.P_SESSION, com.google.gerrit.sshd.SshLog.id(sd.getSessionId())); event.setProperty(com.google.gerrit.sshd.SshLog.P_USER_NAME, sd.getUsername()); final java.lang.String error = sd.getAuthenticationError(); if (error != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, error); } async.append(event); }",ac5452216722854b0c44fd7faa27b0cfb8497956,"void onAuthFail(final com.google.gerrit.sshd.SshSession sd) { final org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), null, java.lang.System.currentTimeMillis(), org.apache.log4j.Level.INFO, (""AUTH FAILURE FROM "" + (sd.getRemoteAddressAsString())), ""SSHD"", null, null, null, null); event.setProperty(com.google.gerrit.sshd.SshLog.P_SESSION, com.google.gerrit.sshd.SshLog.id(sd.getSessionId())); event.setProperty(com.google.gerrit.sshd.SshLog.P_USER_NAME, sd.getUsername()); final java.lang.String error = sd.getAuthenticationError(); if (error != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, error); } async.append(event); audit(""FAIL"", ""AUTH"", java.util.Arrays.asList(sd.getRemoteAddressAsString())); }",c65e85f3904852ac9e181f71e02df2b034fd6f64,onAuthFail(com.google.gerrit.sshd.SshSession),onAuthFail(com.google.gerrit.sshd.SshSession),19,11,"void onAuthFail(final com.google.gerrit.sshd.SshSession sd) { final org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), com.google.gerrit.sshd.SshLog.log, java.lang.System.currentTimeMillis(), org.apache.log4j.Level.INFO, (""AUTH FAILURE FROM "" + (sd.getRemoteAddressAsString())), ""SSHD"", null, null, null, null); event.setProperty(com.google.gerrit.sshd.SshLog.P_SESSION, com.google.gerrit.sshd.SshLog.id(sd.getSessionId())); event.setProperty(com.google.gerrit.sshd.SshLog.P_USER_NAME, sd.getUsername()); final java.lang.String error = sd.getAuthenticationError(); if (error != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, error); } async.append(event); audit(""FAIL"", ""AUTH"", new java.lang.String[]{ sd.getRemoteAddressAsString() }); }",f5b2442b237846ca95585ac9270bdc0e5933bf77,onAuthFail(com.google.gerrit.sshd.SshSession),88250,254,266
80041,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_events_ChangeEvent.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.AccountInfo getWho();,35911a86607690eb7dbca68ccc4de9309dfa83db,,getWho(),5,2,com.google.gerrit.extensions.common.AccountInfo getWho();,249715cc04256d2882a1f60fceeb2320bdb9425b,getWho(),196468,27,16
79424,gerrit-server_src_main_java_com_google_gerrit_server_query_account_AccountQueryBuilder.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> username(java.lang.String username) { return new com.google.gerrit.server.query.account.UsernamePredicate(username); },72f656e51ded99a314b336db08e4de01c4ec19f5,,username(java.lang.String),6,2,@com.google.gerrit.server.query.account.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.account.AccountState> username(java.lang.String username) { return com.google.gerrit.server.query.account.AccountPredicates.username(username); },649f2e7fbfa12e8a0eb64db5466a11a29594f871,username(java.lang.String),7158,74,75
9085,src_main_java_com_google_gerrit_server_patch_PatchDetailServiceImpl.java,18.0,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult r; r = db.run(new com.google.gwtorm.client.OrmRunnable<com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult, com.google.gerrit.client.reviewdb.ReviewDb>() { public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gwtorm.client.Transaction txn, boolean retry) throws com.google.gwtorm.client.OrmException { return doPublishComments(psid, message, approvals, db, txn); } }); try { final com.google.gerrit.server.ChangeMail cm = new com.google.gerrit.server.ChangeMail(server, r.change); cm.setFrom(com.google.gerrit.client.rpc.Common.getAccountId()); cm.setPatchSet(r.patchSet, r.info); cm.setChangeMessage(r.message); cm.setPatchLineComments(r.comments); cm.setReviewDb(db); cm.setHttpServletRequest(com.google.gerrit.server.GerritJsonServlet.getCurrentCall().getHttpServletRequest()); cm.sendComment(); } catch (MessagingException e) { log.error((""Cannot send comments by email for patch set "" + psid), e); throw new com.google.gerrit.server.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",a731d81ae38bceb92267753ff7f658ce9bcf46b2,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult r; r = db.run(new com.google.gwtorm.client.OrmRunnable<com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult, com.google.gerrit.client.reviewdb.ReviewDb>() { public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gwtorm.client.Transaction txn, boolean retry) throws com.google.gwtorm.client.OrmException { return doPublishComments(psid, message, approvals, db, txn); } }); try { final com.google.gerrit.server.ChangeMail cm = new com.google.gerrit.server.ChangeMail(server, r.change); cm.setFrom(com.google.gerrit.client.rpc.Common.getAccountId()); cm.setPatchSet(r.patchSet, r.info); cm.setChangeMessage(r.message); cm.setPatchLineComments(r.comments); cm.setReviewDb(db); cm.setHttpServletRequest(com.google.gerrit.server.GerritJsonServlet.getCurrentCall().getHttpServletRequest()); cm.sendComment(); } catch (MessagingException e) { log.error((""Cannot send comments by email for patch set "" + psid), e); throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",bf169b80a7aec7fcb80040af079198b7d3a4cad3,run(com.google.gerrit.client.reviewdb.ReviewDb),run(com.google.gerrit.client.reviewdb.ReviewDb),6,16,"public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.server.patch.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult r; r = db.run(new com.google.gwtorm.client.OrmRunnable<com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult, com.google.gerrit.client.reviewdb.ReviewDb>() { public com.google.gerrit.server.patch.PatchDetailServiceImpl.PublishResult run(com.google.gerrit.client.reviewdb.ReviewDb db, com.google.gwtorm.client.Transaction txn, boolean retry) throws com.google.gwtorm.client.OrmException { return doPublishComments(psid, message, approvals, db, txn); } }); try { final com.google.gerrit.server.ChangeMail cm = new com.google.gerrit.server.ChangeMail(server, r.change); cm.setFrom(com.google.gerrit.client.rpc.Common.getAccountId()); cm.setPatchSet(r.patchSet, r.info); cm.setChangeMessage(r.message); cm.setPatchLineComments(r.comments); cm.setReviewDb(db); cm.setHttpServletRequest(com.google.gerrit.server.GerritJsonServlet.getCurrentCall().getHttpServletRequest()); cm.sendComment(); } catch (MessagingException e) { log.error((""Cannot send comments by email for patch set "" + psid), e); throw new com.google.gerrit.server.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",a731d81ae38bceb92267753ff7f658ce9bcf46b2,run(com.google.gerrit.client.reviewdb.ReviewDb),193470,422,414
53210,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PatchSetSelectBox2.java,3.0,"void setUpPatchSetNav(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list, com.google.gerrit.client.diff.DiffInfo.FileMeta meta) { com.google.gerrit.client.ui.InlineHyperlink baseLink = null; com.google.gerrit.client.ui.InlineHyperlink selectedLink = null; if (sideA) { baseLink = createLink(PatchUtil.C.patchBase(), null); linkPanel.add(baseLink); } for (int i = 0; i < (list.length()); i++) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r = list.get(i); com.google.gerrit.client.ui.InlineHyperlink link = createLink(java.lang.String.valueOf(r._number()), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, r._number())); linkPanel.add(link); if (((revision) != null) && ((r._number()) == (revision.get()))) { selectedLink = link; } } if (selectedLink != null) { selectedLink.setStyleName(style.selected()); } else if (sideA) { baseLink.setStyleName(style.selected()); } if ((meta != null) && (!(Patch.COMMIT_MSG.equals(path)))) { linkPanel.add(createDownloadLink()); } }",f98014c442397b71389c4de79cefe8a1ef75568c,"void setUpPatchSetNav(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list, com.google.gerrit.client.diff.DiffInfo.FileMeta meta) { com.google.gerrit.client.ui.InlineHyperlink baseLink = null; com.google.gerrit.client.ui.InlineHyperlink selectedLink = null; if (sideA) { baseLink = createLink(PatchUtil.C.patchBase(), null); linkPanel.add(baseLink); } for (int i = 0; i < (list.length()); i++) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r = list.get(i); com.google.gerrit.client.ui.InlineHyperlink link = createLink(r.id(), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, r._number(), r.edit())); linkPanel.add(link); if (((revision) != null) && (r.id().equals(revision.getId()))) { selectedLink = link; } } if (selectedLink != null) { selectedLink.setStyleName(style.selected()); } else if (sideA) { baseLink.setStyleName(style.selected()); } if ((meta != null) && (!(Patch.COMMIT_MSG.equals(path)))) { linkPanel.add(createDownloadLink()); } }",67d0b932910f8b46c8c55c0d74cc579ade2588b5,"setUpPatchSetNav(com.google.gwt.core.client.JsArray,com.google.gerrit.client.diff.DiffInfo$FileMeta)","setUpPatchSetNav(com.google.gwt.core.client.JsArray,com.google.gerrit.client.diff.DiffInfo$FileMeta)",48,3,"void setUpPatchSetNav(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list, com.google.gerrit.client.diff.DiffInfo.FileMeta meta) { com.google.gerrit.client.ui.InlineHyperlink baseLink = null; com.google.gerrit.client.ui.InlineHyperlink selectedLink = null; if (sideA) { baseLink = createLink(PatchUtil.C.patchBase(), null); linkPanel.add(baseLink); } for (int i = 0; i < (list.length()); i++) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r = list.get(i); com.google.gerrit.client.ui.InlineHyperlink link = createLink(r.id(), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, r._number())); linkPanel.add(link); if (((revision) != null) && (r.id().equals(revision.getId()))) { selectedLink = link; } } if (selectedLink != null) { selectedLink.setStyleName(style.selected()); } else if (sideA) { baseLink.setStyleName(style.selected()); } if ((meta != null) && (!(Patch.COMMIT_MSG.equals(path)))) { linkPanel.add(createDownloadLink()); } }",d3b1fd2fb1697e39f65c5251dca83c068704af8c,"setUpPatchSetNav(com.google.gwt.core.client.JsArray,com.google.gerrit.client.diff.DiffInfo$FileMeta)",105651,326,322
80930,gerrit-server_src_main_java_com_google_gerrit_server_PatchSetUtil.java,6.0,"public void delete(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches(ps.getId(), update); checkArgument(ps.isDraft(), ""cannot delete non-draft patch set %s"", ps.getId()); update.setPatchSetState(PatchSetState.DELETED); db.patchSets().delete(java.util.Collections.singleton(ps)); }",b5f7f77b29539f0d0d6c7a8c6c144fd1567635d1,"public void delete(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches(ps.getId(), update); checkArgument(ps.isDraft(), ""cannot delete non-draft patch set %s"", ps.getId()); update.setPatchSetState(PatchSetState.DELETED); if (com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(update.getChange()).writeToReviewDb()) { db.patchSets().delete(java.util.Collections.singleton(ps)); } }",f4474c0cafe39c8160b65b8b00f68a5ce2ca495b,"delete(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.reviewdb.client.PatchSet)","delete(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.reviewdb.client.PatchSet)",8,6,"public void delete(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { ensurePatchSetMatches(ps.getId(), update); checkArgument(ps.isDraft(), ""cannot delete non-draft patch set %s"", ps.getId()); update.setPatchSetState(PatchSetState.DELETED); if ((com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(update.getChange())) == (REVIEW_DB)) { db.patchSets().delete(java.util.Collections.singleton(ps)); } }",f38d99208fa87fe3bdec020d7515a1128539d51f,"delete(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.notedb.ChangeUpdate,com.google.gerrit.reviewdb.client.PatchSet)",157827,168,170
76474,gerrit-server_src_main_java_com_google_gerrit_server_account_GetSshKeys.java,2.0,public java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> apply(com.google.gerrit.server.IdentifiedUser user) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> sshKeys = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.reviewdb.client.AccountSshKey sshKey : dbProvider.get().accountSshKeys().byAccount(user.getAccountId()).toList()) { sshKeys.add(com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo(sshKey)); } return sshKeys; },e5e994cec6238648bbc7697c5926d640a4c08a36,"public java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> apply(com.google.gerrit.server.IdentifiedUser user) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { java.util.List<com.google.gerrit.reviewdb.client.AccountSshKey> keys = (readFromGit) ? readFromGit(user.getAccountId()) : com.google.gerrit.server.account.GetSshKeys.readFromDb(dbProvider.get(), user.getAccountId()); return com.google.common.collect.Lists.transform(keys, new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountSshKey, com.google.gerrit.extensions.common.SshKeyInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.SshKeyInfo apply(com.google.gerrit.reviewdb.client.AccountSshKey key) { return com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo(key); } }); }",8d4313af7b2b0dad64f5a3d2e9458d31d1de5543,apply(com.google.gerrit.server.IdentifiedUser),apply(com.google.gerrit.server.IdentifiedUser),9,0,"public java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> apply(com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { return com.google.common.collect.Lists.transform(authorizedKeys.getKeys(user.getAccountId()), new com.google.common.base.Function<com.google.gerrit.reviewdb.client.AccountSshKey, com.google.gerrit.extensions.common.SshKeyInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.SshKeyInfo apply(com.google.gerrit.reviewdb.client.AccountSshKey key) { return com.google.gerrit.server.account.GetSshKeys.newSshKeyInfo(key); } }); }",286d9c51adbdccf6e0eee9f8cafbb5b17a1af16f,apply(com.google.gerrit.server.IdentifiedUser),84794,279,209
61661,src_main_java_com_googlesource_gerrit_plugins_reviewers_client_AddReviewersScreen.java,,,,@java.lang.Override public int hashCode() { return (31 * (filter.hashCode())) * (reviewer.hashCode()); },0e3b78f6669626d85da4308f799a6b51cb88a8af,,hashCode(),3,11,"@java.lang.Override public int hashCode() { return java.util.Objects.hash(filter, reviewer); }",799f20c87712d6eb5d6cbecbdc29ffc28902d4f0,hashCode(),183197,28,26
60065,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginGuiceEnvironment.java,3.0,@java.lang.Override protected void configure() { install(copyConfigModule); install(cm); install(sm); },ad24587c949e607c0c8fac6cf291bf48c6de55d1,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.securestore.SecureStore.class).toProvider(com.google.gerrit.pgm.util.SecureStoreProvider.class); install(copyConfigModule); install(cm); install(sm); },71cd3c978256c017918a4f68e3565bddc281f770,configure(),configure(),11,3,@java.lang.Override protected void configure() { install(copyConfigModule); install(cm); install(sm); },ad24587c949e607c0c8fac6cf291bf48c6de55d1,configure(),159970,67,27
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupName get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },0b14c801641e979d1e5eead47b9089e581037395,,get(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),3,2,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupName get(com.google.gerrit.reviewdb.client.AccountGroup.NameKey name) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },6c831831484fd29eb660cd935f1620bdc10d5c3b,get(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),205065,92,79
67777,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_CommitBox.java,9.0,"private void setWebLinks(com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo) { com.google.gerrit.client.GitwebLink gw = com.google.gerrit.client.Gerrit.getGitwebLink(); if ((gw != null) && (gw.canLink(revInfo))) { toAnchor(gw.toRevision(change.project(), revision), gw.getLinkName()); } com.google.gwt.core.client.JsArray<com.google.gerrit.client.WebLinkInfo> links = revInfo.commit().web_links(); if (links != null) { for (com.google.gerrit.client.WebLinkInfo link : com.google.gerrit.client.rpc.Natives.asList(links)) { webLinkPanel.add(link.toAnchor()); } } }",32af5f5e3c251bc0d22880347d48d430f11e4122,"private void setWebLinks(com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo) { com.google.gerrit.client.config.GitWebInfo gw = com.google.gerrit.client.Gerrit.getServerInfo().gitWeb(); if ((gw != null) && (gw.canLink(revInfo))) { toAnchor(gw.toRevision(change.project(), revision), gw.getLinkName()); } com.google.gwt.core.client.JsArray<com.google.gerrit.client.WebLinkInfo> links = revInfo.commit().web_links(); if (links != null) { for (com.google.gerrit.client.WebLinkInfo link : com.google.gerrit.client.rpc.Natives.asList(links)) { webLinkPanel.add(link.toAnchor()); } } }",825371182fa00c12eab08a90ba0ec23700eec415,"setWebLinks(com.google.gerrit.client.changes.ChangeInfo,java.lang.String,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo)","setWebLinks(com.google.gerrit.client.changes.ChangeInfo,java.lang.String,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo)",16,10,"private void setWebLinks(com.google.gerrit.client.changes.ChangeInfo change, java.lang.String revision, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo) { com.google.gerrit.client.config.GitWebInfo gw = com.google.gerrit.client.Gerrit.info().gitWeb(); if ((gw != null) && (gw.canLink(revInfo))) { toAnchor(gw.toRevision(change.project(), revision), gw.getLinkName()); } com.google.gwt.core.client.JsArray<com.google.gerrit.client.WebLinkInfo> links = revInfo.commit().webLinks(); if (links != null) { for (com.google.gerrit.client.WebLinkInfo link : com.google.gerrit.client.rpc.Natives.asList(links)) { webLinkPanel.add(link.toAnchor()); } } }",5664f7e24b5470e1dc0f9279467a14cf7945c35a,"setWebLinks(com.google.gerrit.client.changes.ChangeInfo,java.lang.String,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo)",124471,223,220
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,44.0,private void initProviderJce() { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG1.Factory())); setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(new org.apache.sshd.common.random.JceRandom.Factory())); },f2080e0624ed1ab8a7421f225d21ea9952799e49,private void initProviderJce() { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.kex.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG1.Factory())); setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(new org.apache.sshd.common.random.JceRandom.Factory())); },d203698bac13d4ca118565370f58414d9a3ffeb4,initProviderJce(),initProviderJce(),6,43,"private void initProviderJce() { setKeyExchangeFactories(NamedFactory.Utils.setUpTransformedFactories(true, java.util.Collections.unmodifiableList(java.util.Arrays.asList(BuiltinDHFactories.dhg1)), ServerBuilder.DH2KEX)); setKeyExchangeFactories(org.apache.sshd.server.ServerBuilder.setUpDefaultKeyExchanges(true)); setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(org.apache.sshd.common.random.JceRandomFactory.INSTANCE)); }",2a3999537abc876321b3533d46ed838784f664da,initProviderJce(),42131,106,122
91449,gerrit-server_src_main_java_com_google_gerrit_server_plugins_DelegatingClassLoader.java,,,,"public java.lang.Class<?> findClass(java.lang.String name) throws java.lang.ClassNotFoundException { java.lang.String path = (name.replace('.', '/')) + "".class""; java.io.InputStream resource = target.getResourceAsStream(path); if (resource != null) { try { byte[] bytes = com.google.gerrit.server.plugins.DelegatingClassLoader.getBytes(resource); return defineClass(name, bytes, 0, bytes.length); } catch (java.io.IOException e) { } } throw new java.lang.ClassNotFoundException(name); }",7013491ee2c6d4a38fe6f44a4dce7c20a0e4528a,,findClass(java.lang.String),7,1,"public java.lang.Class<?> findClass(java.lang.String name) throws java.lang.ClassNotFoundException { java.lang.String path = (name.replace('.', '/')) + "".class""; java.io.InputStream resource = target.getResourceAsStream(path); if (resource != null) { try { byte[] bytes = com.google.common.io.ByteStreams.toByteArray(resource); return defineClass(name, bytes, 0, bytes.length); } catch (java.io.IOException e) { } } throw new java.lang.ClassNotFoundException(name); }",6d6383c3c8a85974eef2a630f58172c8a194e8a1,findClass(java.lang.String),25534,127,124
71884,gitiles-servlet_src_main_java_com_google_gitiles_LogSoyData.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Map<java.lang.String, java.lang.Object> toRenameSoyData(org.eclipse.jgit.diff.DiffEntry entry) { if (entry == null) { return null; } org.eclipse.jgit.diff.DiffEntry.ChangeType type = entry.getChangeType(); if ((type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.RENAME)) && (type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.COPY))) { return null; } return com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.Object>of(""changeType"", entry.getChangeType().toString(), ""oldPath"", entry.getOldPath(), ""newPath"", entry.getNewPath(), ""score"", entry.getScore()); }",0c9d39b60ebc222bab1d8f34b143c6ff344eea87,,toRenameSoyData(org.eclipse.jgit.diff.DiffEntry),8,0,"private java.util.Map<java.lang.String, java.lang.Object> toRenameSoyData(org.eclipse.jgit.diff.DiffEntry entry) { if (entry == null) { return null; } org.eclipse.jgit.diff.DiffEntry.ChangeType type = entry.getChangeType(); if ((type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.RENAME)) && (type != (org.eclipse.jgit.diff.DiffEntry.ChangeType.COPY))) { return null; } return com.google.common.collect.ImmutableMap.<java.lang.String, java.lang.Object>of(""changeType"", type.toString(), ""oldPath"", entry.getOldPath(), ""newPath"", entry.getNewPath(), ""score"", entry.getScore()); }",0cee1c17798d4cc5232ffb8323fe2e7500b726ae,toRenameSoyData(org.eclipse.jgit.diff.DiffEntry),175132,186,182
79112,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_124.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static boolean toBoolean(java.lang.String v) { if (com.google.common.base.Strings.isNullOrEmpty(v)) { return false; } return v.equalsIgnoreCase(""Y""); }",0d536de7f93375f4742772c76438634b01d43a3b,,toBoolean(java.lang.String),3,2,"private static boolean toBoolean(java.lang.String v) { return (!(com.google.common.base.Strings.isNullOrEmpty(v))) && (v.equalsIgnoreCase(""Y"")); }",93cd551125731d24557c52641de8c898f0e337ce,toBoolean(java.lang.String),72991,44,40
67651,src_main_java_com_googlesource_gerrit_plugins_importer_LocalApi.java,2.0,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.extensions.common.CommentInfo> getComments(int changeId, java.lang.String rev) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { try { com.google.gerrit.server.change.ChangeResource changeRsrc = changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(changeId)); com.google.gerrit.server.change.RevisionResource revRsrc = revisions.parse(changeRsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(rev)); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = listComments.apply(revRsrc); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : result.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo i : e.getValue()) { i.path = e.getKey(); } } return com.google.common.collect.Iterables.concat(result.values()); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { return null; } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",0c0a1c7731c175cd28e6b0c8c38152a91be52498,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.extensions.common.CommentInfo> getComments(int changeId, java.lang.String rev) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { try { java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = gApi.changes().id(java.lang.String.valueOf(changeId)).revision(rev).comments(); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : result.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo i : e.getValue()) { i.path = e.getKey(); } } return com.google.common.collect.Iterables.concat(result.values()); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",7ad1091e84f5ecdfe2092dce1c925bb32f54bf72,"getComments(int,java.lang.String)","getComments(int,java.lang.String)",2,2,"@java.lang.Override public java.lang.Iterable<com.google.gerrit.extensions.common.CommentInfo> getComments(int changeId, java.lang.String rev) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { try { java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = gApi.changes().id(changeId).revision(rev).comments(); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : result.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo i : e.getValue()) { i.path = e.getKey(); } } return com.google.common.collect.Iterables.concat(result.values()); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }",8d60aa5e8ea067917dea7cf2e724b7dea8de072e,"getComments(int,java.lang.String)",117718,278,269
148032,java_com_google_gerrit_server_CreateGroupPermissionSyncer.java,0.0,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create group permissions"", e); } }",80e47218e70e2ee975d32edcbd4877e520d17ff6,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create account permissions"", e); } }",0c6e91749dcc24978915cc00d78643d6dc9ab920,onChangeMerged(com.google.gerrit.server.Event),onChangeMerged(com.google.gerrit.server.Event),17,0,"@java.lang.Override public void onChangeMerged(com.google.gerrit.server.Event event) { if ((!(allProjects.get().equals(event.getChange().project))) || (!(RefNames.REFS_CONFIG.equals(event.getChange().branch)))) { return; } try { syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.CreateGroupPermissionSyncer.log.error(""Can't sync create group permissions"", e); } }",80e47218e70e2ee975d32edcbd4877e520d17ff6,onChangeMerged(com.google.gerrit.server.Event),217188,126,126
15948,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListEntry.java,12.0,"static com.google.gerrit.server.patch.PatchListEntry empty(final java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList()); }",dbfa27f275e72ee093a8dd9564f71714776a79f4,"static com.google.gerrit.server.patch.PatchListEntry empty(final java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, java.util.Collections.<com.google.gerrit.server.patch.GwtOrmBaseEdit>emptyList()); }",3f7692228facbb6aedb0c17c4eec34c5809807b3,empty(java.lang.String),empty(java.lang.String),9,11,"static com.google.gerrit.server.patch.PatchListEntry empty(final java.lang.String fileName) { return new com.google.gerrit.server.patch.PatchListEntry(com.google.gerrit.reviewdb.Patch.ChangeType.MODIFIED, com.google.gerrit.reviewdb.Patch.PatchType.UNIFIED, null, fileName, com.google.gerrit.server.patch.PatchListEntry.EMPTY_HEADER, java.util.Collections.<com.google.gerrit.prettify.common.LineEdit>emptyList()); }",d46d2e7eba46e8078f9de004d29b8ebc8bbb218a,empty(java.lang.String),52629,130,129
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_dropwizard_DropWizardMetricMaker.java,9.0,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public <V> com.google.gerrit.metrics.CallbackMetric<V> newCallbackMetric(java.lang.String name, java.lang.Class<V> valueClass, com.google.gerrit.metrics.Description desc) { checkNotDefined(name); descriptions.put(name, desc.getAnnotations()); return new com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.CallbackMetricImpl<V>(name, valueClass); }",dc87ae0fbd66a491ec988bf4abd2c051eedaccd0,"@java.lang.SuppressWarnings(""unused"") @java.lang.Override public <V> com.google.gerrit.metrics.CallbackMetric<V> newCallbackMetric(java.lang.String name, java.lang.Class<V> valueClass, com.google.gerrit.metrics.Description desc) { define(name, desc); return new com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.CallbackMetricImpl<V>(name, valueClass); }",571986d7d0a51648374960069db1710d76333dc2,"newCallbackMetric(java.lang.String,java.lang.Class,com.google.gerrit.metrics.Description)","newCallbackMetric(java.lang.String,java.lang.Class,com.google.gerrit.metrics.Description)",9,5,"@java.lang.Override public <V> com.google.gerrit.metrics.CallbackMetric0<V> newCallbackMetric(java.lang.String name, java.lang.Class<V> valueClass, com.google.gerrit.metrics.Description desc) { define(name, desc); return new com.google.gerrit.metrics.dropwizard.CallbackMetricImpl0(name, valueClass); }",203c1eef307e228ae5d89b6e12036a8d5040a60c,"newCallbackMetric(java.lang.String,java.lang.Class,com.google.gerrit.metrics.Description)",56868,105,90
86351,gerrit-server_src_main_java_com_google_gerrit_server_change_SubmittedTogether.java,0.0,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options"") void addOption(com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o) { options.add(o); }",c91ec3227f526803b697cb08a49057b148ff9ddf,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options"") void addOption(java.lang.String option) { for (com.google.gerrit.extensions.client.ListChangesOption o : com.google.gerrit.extensions.client.ListChangesOption.values()) { if (o.name().equals(option)) { jsonOpt.add(o); break; } } for (com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o : com.google.gerrit.extensions.api.changes.SubmittedTogetherOption.values()) { if (o.name().equals(option)) { options.add(o); break; } } throw new java.lang.IllegalArgumentException((""option not recognized "" + option)); }",c65f875b7be0c717a1e4fb8eef710b4f38dea9aa,addOption(com.google.gerrit.extensions.api.changes.SubmittedTogetherOption),addOption(java.lang.String),5,2,"@org.kohsuke.args4j.Option(name = ""-o"", usage = ""Output options"") void addOption(java.lang.String option) { for (com.google.gerrit.extensions.client.ListChangesOption o : com.google.gerrit.extensions.client.ListChangesOption.values()) { if (o.name().equalsIgnoreCase(option)) { jsonOpt.add(o); return; } } for (com.google.gerrit.extensions.api.changes.SubmittedTogetherOption o : com.google.gerrit.extensions.api.changes.SubmittedTogetherOption.values()) { if (o.name().equalsIgnoreCase(option)) { options.add(o); return; } } throw new java.lang.IllegalArgumentException((""option not recognized: "" + option)); }",eb6b53f269469a9ac1ad4f09d2f06e4b7bdebe6a,addOption(java.lang.String),74953,178,179
25644,src_test_java_com_google_gwtorm_schema_sql_DialectH2Test.java,3.0,"public void testUpgradeSchema() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final com.google.gwtorm.data.PhoneBookDb p = phoneBook.open(); try { p.updateSchema(executor); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); execute(""ALTER TABLE people ADD COLUMN fake_name VARCHAR(20)""); execute(""ALTER TABLE people DROP COLUMN registered""); execute(""DROP TABLE addresses""); execute(""DROP SEQUENCE address_id""); java.util.Set<java.lang.String> sequences; java.util.Set<java.lang.String> tables; p.updateSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertTrue(sequences.contains(""cnt"")); assertTrue(tables.contains(""foo"")); assertTrue(sequences.contains(""address_id"")); assertTrue(tables.contains(""addresses"")); p.pruneSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertFalse(sequences.contains(""cnt"")); assertFalse(tables.contains(""foo"")); final com.google.gwtorm.data.TestPerson.Key pk = new com.google.gwtorm.data.TestPerson.Key(""Bob""); final com.google.gwtorm.data.TestPerson bob = new com.google.gwtorm.data.TestPerson(pk, p.nextAddressId()); p.people().insert(java.util.Collections.singleton(bob)); final com.google.gwtorm.data.TestAddress addr = new com.google.gwtorm.data.TestAddress(new com.google.gwtorm.data.TestAddress.Key(pk, ""home""), ""some place""); p.addresses().insert(java.util.Collections.singleton(addr)); } finally { p.close(); } final com.google.gwtorm.data.PhoneBookDb2 p2 = phoneBook2.open(); try { ((com.google.gwtorm.jdbc.JdbcSchema) (p2)).renameField(executor, ""people"", ""registered"", ""isRegistered""); } finally { p2.close(); } }",a42fb55b0092650c30db0075f267633186ebbe4c,"@org.junit.Test public void testUpgradeSchema() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final com.google.gwtorm.data.PhoneBookDb p = phoneBook.open(); try { p.updateSchema(executor); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); execute(""ALTER TABLE people ADD COLUMN fake_name VARCHAR(20)""); execute(""ALTER TABLE people DROP COLUMN registered""); execute(""DROP TABLE addresses""); execute(""DROP SEQUENCE address_id""); java.util.Set<java.lang.String> sequences; java.util.Set<java.lang.String> tables; p.updateSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertTrue(sequences.contains(""cnt"")); assertTrue(tables.contains(""foo"")); assertTrue(sequences.contains(""address_id"")); assertTrue(tables.contains(""addresses"")); p.pruneSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertFalse(sequences.contains(""cnt"")); assertFalse(tables.contains(""foo"")); final com.google.gwtorm.data.Person.Key pk = new com.google.gwtorm.data.Person.Key(""Bob""); final com.google.gwtorm.data.Person bob = new com.google.gwtorm.data.Person(pk, p.nextAddressId()); p.people().insert(java.util.Collections.singleton(bob)); final com.google.gwtorm.data.Address addr = new com.google.gwtorm.data.Address(new com.google.gwtorm.data.Address.Key(pk, ""home""), ""some place""); p.addresses().insert(java.util.Collections.singleton(addr)); } finally { p.close(); } final com.google.gwtorm.data.PhoneBookDb2 p2 = phoneBook2.open(); try { ((com.google.gwtorm.jdbc.JdbcSchema) (p2)).renameField(executor, ""people"", ""registered"", ""isRegistered""); } finally { p2.close(); } }",7b74c6cdf9aefc9994619f0e5b9b8c8718a076a3,testUpgradeSchema(),testUpgradeSchema(),4,3,"@org.junit.Test public void testUpgradeSchema() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { final com.google.gwtorm.data.PhoneBookDb p = phoneBook.open(); try { p.updateSchema(executor); execute(""CREATE SEQUENCE cnt""); execute(""CREATE TABLE foo (cnt INT)""); execute(""ALTER TABLE people ADD COLUMN fake_name VARCHAR(20)""); execute(""ALTER TABLE people DROP COLUMN registered""); execute(""DROP TABLE addresses""); execute(""DROP SEQUENCE address_id""); java.util.Set<java.lang.String> sequences; java.util.Set<java.lang.String> tables; p.updateSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertTrue(sequences.contains(""cnt"")); assertTrue(tables.contains(""foo"")); assertTrue(sequences.contains(""address_id"")); assertTrue(tables.contains(""addresses"")); p.pruneSchema(executor); sequences = dialect.listSequences(db); tables = dialect.listTables(db); assertFalse(sequences.contains(""cnt"")); assertFalse(tables.contains(""foo"")); final com.google.gwtorm.data.Person.Key pk = new com.google.gwtorm.data.Person.Key(""Bob""); final com.google.gwtorm.data.Person bob = new com.google.gwtorm.data.Person(pk, p.nextAddressId()); p.people().insert(java.util.Collections.singleton(bob)); final com.google.gwtorm.data.Address addr = new com.google.gwtorm.data.Address(new com.google.gwtorm.data.Address.Key(pk, ""home""), ""some place""); p.addresses().insert(java.util.Collections.singleton(addr)); } finally { p.close(); } final com.google.gwtorm.data.PhoneBookDb2 p2 = phoneBook2.open(); try { ((com.google.gwtorm.jdbc.JdbcSchema) (p2)).renameField(executor, ""people"", ""registered"", ""isRegistered""); } finally { p2.close(); } }",c1126ba58a2d97ebd27426bb130d646351777621,testUpgradeSchema(),54645,474,474
62731,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_AccountApi.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void suggest(java.lang.String query, int limit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AccountInfo>> cb) { new com.google.gerrit.client.rpc.RestApi(""/accounts/"").addParameter(""q"", query).addParameter(""n"", limit).get(cb); }",fd2b98d4aecbb0192a0afc39f9edef1b677a0899,,"suggest(java.lang.String,int,com.google.gwt.user.client.rpc.AsyncCallback)",4,1,"public static void suggest(java.lang.String query, int limit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AccountInfo>> cb) { new com.google.gerrit.client.rpc.RestApi(""/accounts/"").addParameter(""q"", query).addParameter(""n"", limit).background().get(cb); }",5a82928326baf6e282493903ff55b98ea081c8f6,"suggest(java.lang.String,int,com.google.gwt.user.client.rpc.AsyncCallback)",85104,94,96
56712,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,79.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"java.util.Map<java.lang.String, java.lang.Short> getCustomLabels() { return customLabels; }",264873cdc84a483d3482a1b0783113b710793196,,getCustomLabels(),11,40,"java.util.Map<java.lang.String, java.lang.Short> getLabels() { return labels; }",7bbb017cea41e103eaf6ef35cefb03b94fe1fa0c,getLabels(),85445,28,26
67852,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_SubmoduleSubscriptionsIT.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testSubmoduleCommitMessage() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> superRepo = createProjectWithPush(""super-project""); org.eclipse.jgit.junit.TestRepository<?> subRepo = createProjectWithPush(""subscribed-to-project""); pushChangeTo(subRepo, ""master""); createSubscription(superRepo, ""master"", ""subscribed-to-project"", ""master""); org.eclipse.jgit.lib.ObjectId subHEAD = pushChangeTo(subRepo, ""master""); org.eclipse.jgit.revwalk.RevWalk rw = subRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit subCommitMsg = rw.parseCommit(subHEAD); expectToHaveCommitMessage(superRepo, ""master"", (((((((""Updated git submodules\n\n"" + ""Project: "") + (name(""subscribed-to-project""))) + "" "") + (subHEAD.name())) + ""\n\n"") + (subCommitMsg.getFullMessage())) + ""\n"")); }",7d87ed8755bdf45c11352f87c13cf47b04bcf84c,,testSubmoduleCommitMessage(),12,0,"@org.junit.Test public void testSubmoduleCommitMessage() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<?> superRepo = createProjectWithPush(""super-project""); org.eclipse.jgit.junit.TestRepository<?> subRepo = createProjectWithPush(""subscribed-to-project""); pushChangeTo(subRepo, ""master""); createSubscription(superRepo, ""master"", ""subscribed-to-project"", ""master""); org.eclipse.jgit.lib.ObjectId subHEAD = pushChangeTo(subRepo, ""master""); org.eclipse.jgit.revwalk.RevWalk rw = subRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit subCommitMsg = rw.parseCommit(subHEAD); expectToHaveCommitMessage(superRepo, ""master"", (((((""Updated git submodules\n\n"" + ""Project: "") + (name(""subscribed-to-project""))) + "" master "") + (subHEAD.name())) + ""\n\n"")); subHEAD = pushChangeTo(subRepo, ""master""); subCommitMsg = rw.parseCommit(subHEAD); expectToHaveCommitMessage(superRepo, ""master"", (((((((""Updated git submodules\n\n"" + ""Project: "") + (name(""subscribed-to-project""))) + "" master "") + (subHEAD.name())) + ""\n\n"") + (subCommitMsg.getFullMessage())) + ""\n\n"")); }",107f31b7962d143c4b3f02022dff57c775cc51a4,testSubmoduleCommitMessage(),1458,242,329
39475,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeDescriptionBlock.java,0.0,"public void display(com.google.gerrit.reviewdb.client.Change chg, java.lang.Boolean starred, com.google.gerrit.reviewdb.client.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc, com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord) { infoBlock.display(chg, acc, submitTypeRecord); messageBlock.display(chg.getId(), starred, info.getMessage()); }",f7897968d0ca73ce37efbafe18d7c3f6b387ad9a,"public void display(com.google.gerrit.reviewdb.client.Change chg, java.lang.Boolean starred, com.google.gerrit.reviewdb.client.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc, com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord) { infoBlock.display(chg, acc, submitTypeRecord); messageBlock.display(chg.getId(), chg.currentPatchSetId(), starred, info.getMessage()); }",c07bc24a331b9a38868ecb03e8ff666b464b6ef4,"display(com.google.gerrit.reviewdb.client.Change,java.lang.Boolean,com.google.gerrit.reviewdb.client.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache,com.google.gerrit.common.data.SubmitTypeRecord)","display(com.google.gerrit.reviewdb.client.Change,java.lang.Boolean,com.google.gerrit.reviewdb.client.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache,com.google.gerrit.common.data.SubmitTypeRecord)",11,0,"public void display(com.google.gerrit.reviewdb.client.Change chg, java.lang.Boolean starred, java.lang.Boolean canEditCommitMessage, com.google.gerrit.reviewdb.client.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc, com.google.gerrit.common.data.SubmitTypeRecord submitTypeRecord) { infoBlock.display(chg, acc, submitTypeRecord); messageBlock.display(chg.currentPatchSetId(), starred, canEditCommitMessage, info.getMessage()); }",0d86ed4e529ad946d7b04eec625f76ffd20ff46c,"display(com.google.gerrit.reviewdb.client.Change,java.lang.Boolean,java.lang.Boolean,com.google.gerrit.reviewdb.client.PatchSetInfo,com.google.gerrit.common.data.AccountInfoCache,com.google.gerrit.common.data.SubmitTypeRecord)",28338,123,133
76891,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffChunkInfo.java,0.0,com.google.gerrit.client.diff.DisplaySide getSide() { return side; },76e07c35b3c9df25d0f52ff614405c2bf25ff86c,@java.lang.Override public int compareTo(com.google.gerrit.client.diff.DiffChunkInfo o) { if ((side) == (o.side)) { return (start) - (o.start); } else if ((side) == (com.google.gerrit.client.diff.DisplaySide.A)) { int comp = (otherStart) - (o.start); return comp == 0 ? -1 : comp; } else { int comp = (start) - (o.otherStart); return comp == 0 ? 1 : comp; } },f208d2e51698622706a9baf5942a7fc73c5c8383,getSide(),compareTo(com.google.gerrit.client.diff.DiffChunkInfo),4,0,@java.lang.Override public int compareTo(com.google.gerrit.client.diff.DiffChunkInfo o) { if ((side) == (o.side)) { return (start) - (o.start); } else if ((side) == (DisplaySide.A)) { int comp = (startOnOther) - (o.start); return comp == 0 ? -1 : comp; } else { int comp = (start) - (o.startOnOther); return comp == 0 ? 1 : comp; } },e343470e612f02644bc3f71fffeba49fe7c070bb,compareTo(com.google.gerrit.client.diff.DiffChunkInfo),92839,126,117
61093,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,9.0,"@org.junit.Test public void updateMessage() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); try { modifier.modifyMessage(edit.get(), edit.get().getEditCommit().getFullMessage()); fail(""Exception expected""); } catch (com.google.gerrit.server.project.InvalidChangeOperationException ex) { assertEquals(ex.getMessage(), ""New commit message cannot be same as existing commit message""); } java.lang.String msg = java.lang.String.format(""New commit message\n\nChange-Id: %s"", change.getKey()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyMessage(edit.get(), msg)); edit = editUtil.byChange(change); assertEquals(msg, edit.get().getEditCommit().getFullMessage()); editUtil.delete(edit.get()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }",80bfbe285603be6f6bce5e48bd9af5c8c4ab9fe2,"@org.junit.Test public void updateMessage() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); try { modifier.modifyMessage(edit.get(), edit.get().getEditCommit().getFullMessage()); fail(""InvalidChangeOperationException expected""); } catch (java.lang.Exception e) { assertTrue((e instanceof com.google.gerrit.server.project.InvalidChangeOperationException)); assertEquals(e.getMessage(), ""New commit message cannot be same as existing commit message""); } java.lang.String msg = java.lang.String.format(""New commit message\n\nChange-Id: %s"", change.getKey()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyMessage(edit.get(), msg)); edit = editUtil.byChange(change); assertEquals(msg, edit.get().getEditCommit().getFullMessage()); editUtil.delete(edit.get()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }",f148a17d126a0e1e9b439fce5bb5e68d46ef9915,updateMessage(),updateMessage(),18,11,"@org.junit.Test public void updateMessage() throws java.lang.Exception { assertThat(modifier.createEdit(change, getCurrentPatchSet(changeId))).isEqualTo(RefUpdate.Result.NEW); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); try { modifier.modifyMessage(edit.get(), edit.get().getEditCommit().getFullMessage()); fail(""InvalidChangeOperationException expected""); } catch (com.google.gerrit.server.project.InvalidChangeOperationException ex) { assertThat(ex.getMessage()).isEqualTo(""New commit message cannot be same as existing commit message""); } java.lang.String msg = java.lang.String.format(""New commit message\n\nChange-Id: %s"", change.getKey()); assertThat(modifier.modifyMessage(edit.get(), msg)).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); assertThat(edit.get().getEditCommit().getFullMessage()).isEqualTo(msg); editUtil.publish(edit.get()); assertThat(editUtil.byChange(change).isPresent()).isFalse(); ChangeInfo info = get(changeId, ListChangesOption.CURRENT_COMMIT, ListChangesOption.CURRENT_REVISION); assertThat(info.revisions.get(info.currentRevision).commit.message).isEqualTo(msg); }",2a1a29661ce6a27f0b01748c425b00cc10df1c0f,updateMessage(),14131,257,308
73033,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshDaemon.java,32.0,"private void initChannels() { setChannelFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Channel>>asList(new org.apache.sshd.server.channel.ChannelSession.Factory(), new org.apache.sshd.common.forward.TcpipServerChannel.DirectTcpipFactory())); }",590fe026ab38b534d23c99ec507802be937340fc,"private void initChannels() { setChannelFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.channel.Channel>>asList(new org.apache.sshd.server.channel.ChannelSession.Factory(), new org.apache.sshd.server.forward.TcpipServerChannel.DirectTcpipFactory())); }",ce55d4b8bc8496965cea7944f37528abb98ae69a,initChannels(),initChannels(),6,31,private void initChannels() { setChannelFactories(ServerBuilder.DEFAULT_CHANNEL_FACTORIES); },31ee1b79d071236e603a1960e3039e298a703473,initChannels(),42106,84,21
68172,gerrit-server_src_main_java_com_google_gerrit_server_query_change_IsReviewedPredicate.java,1.0,@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = object.change(); if (c == null) { return false; } com.google.gerrit.reviewdb.client.PatchSet.Id current = c.currentPatchSetId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval p : object.approvals().get(current)) { if ((p.getValue()) != 0) { return true; } } return false; },6d321e706f903c5fdbb92fa583669eaffb48a360,@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = cd.reviewedBy(); return !(reviewedBy.isEmpty()) ? reviewedBy.contains(id) : (id) == null; },1ed6690cd7d084e84e8c76df82da1f08b375d5c2,match(com.google.gerrit.server.query.change.ChangeData),match(com.google.gerrit.server.query.change.ChangeData),4,2,@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = cd.reviewedBy(); return !(reviewedBy.isEmpty()) ? reviewedBy.contains(id) : (id) == (com.google.gerrit.server.query.change.IsReviewedPredicate.NOT_REVIEWED); },e6eb12e5c175885eef53185a2d7350af64a48574,match(com.google.gerrit.server.query.change.ChangeData),3355,98,120
163935,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,1.0,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",c8c93e4585a72d8e1fe15242a5b7037194ae6d41,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId.asAccountExternalId())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",a25788083b66a6e6ce5fc72937ed93966079c0f8,"link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)","link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",3,1,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(db, who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(to); } byEmailCache.evict(who.getEmailAddress()); } } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",00194b8507fc054528d8746c7f02b8daa480718d,"link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",64509,387,358
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.reviewdb.client.AccountGroupMemberAudit toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account.Id id, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, java.sql.Timestamp ts, com.google.gerrit.reviewdb.client.Account.Id me) { return new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key(id, groupId, ts), me); }",085c388fdbc2f5f2999debb83872aae21792659d,,"toAccountGroupMemberAudit(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.reviewdb.client.AccountGroup$Id,java.sql.Timestamp,com.google.gerrit.reviewdb.client.Account$Id)",7,3,"private void logFailToLoadUpdatedGroup(com.google.gerrit.server.audit.group.GroupAuditEvent event) { com.google.common.collect.ImmutableList<java.lang.String> descriptions = createEventDescriptions(event, ""(fail to load group)""); java.lang.String message = createErrorMessage(""Fail to load the updated group"", event.getActor(), descriptions); com.google.gerrit.server.group.DbGroupMemberAuditListener.log.error(message); }",09525d0e684a18c68525a291a0cf7b175ffc23ca,logFailToLoadUpdatedGroup(com.google.gerrit.server.audit.group.GroupAuditEvent),118652,140,105
140535,java_com_google_gerrit_server_patchlib_PatchListCache.java,4.0,"com.google.gerrit.server.patch.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patch.IntraLineDiffKey key, com.google.gerrit.server.patch.IntraLineDiffArgs args);",c98c8e11d5bc72a8f89494aecdedeb034733e3da,"com.google.gerrit.server.patchlib.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.patchlib.IntraLineDiffKey key, com.google.gerrit.server.patchlib.IntraLineDiffArgs args);",34d06f2c4bc96c6de87bd864d0c6a4072f65d7d4,"getIntraLineDiff(com.google.gerrit.server.patch.IntraLineDiffKey,com.google.gerrit.server.patch.IntraLineDiffArgs)","getIntraLineDiff(com.google.gerrit.server.patchlib.IntraLineDiffKey,com.google.gerrit.server.patchlib.IntraLineDiffArgs)",11,0,"com.google.gerrit.server.diff.IntraLineDiff getIntraLineDiff(com.google.gerrit.server.diff.IntraLineDiffKey key, com.google.gerrit.server.diff.IntraLineDiffArgs args);",e049c1d910a729b32337cee38105f496cce851c7,"getIntraLineDiff(com.google.gerrit.server.diff.IntraLineDiffKey,com.google.gerrit.server.diff.IntraLineDiffArgs)",15233,60,57
43632,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_Change.java,30.0,public static com.google.gerrit.reviewdb.client.Change.Id parse(final java.lang.String str) { final com.google.gerrit.reviewdb.client.Change.Id r = new com.google.gerrit.reviewdb.client.Change.Id(); r.fromString(str); return r; },e5fc4ee5611789a44aca50f17660a8129d74ec58,"public static com.google.gerrit.reviewdb.client.Change.Id parse(final java.lang.String str) { final com.google.gerrit.reviewdb.client.Change.Id r = new com.google.gerrit.reviewdb.client.Change.Id(); java.lang.String preparedStr = str; if (preparedStr.endsWith(""/"")) { preparedStr = preparedStr.substring(0, ((preparedStr.length()) - 1)); } r.fromString(preparedStr); return r; }",39fd7bb225d8c84832f9f1c1a1104a52e1cfc401,parse(java.lang.String),parse(java.lang.String),2,30,public static com.google.gerrit.reviewdb.client.Change.Id parse(final java.lang.String str) { final com.google.gerrit.reviewdb.client.Change.Id r = new com.google.gerrit.reviewdb.client.Change.Id(); r.fromString(str); return r; },e5fc4ee5611789a44aca50f17660a8129d74ec58,parse(java.lang.String),122197,116,76
103253,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_accounts_AccountIT.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void create() throws java.lang.Exception { TestAccount foo = accounts.create(""foo""); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.username).isEqualTo(""foo""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.getId())); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); assertThat(c.getCommitTime()).isEqualTo(((accountCache.get(foo.getId()).getAccount().getRegisteredOn().getTime()) / 1000)); } }",6aca603c8b68ed924a35027c047138aa66b8e54c,,create(),11,8,"@org.junit.Test public void create() throws java.lang.Exception { TestAccount foo = accounts.create(""foo""); com.google.gerrit.extensions.common.AccountInfo info = gApi.accounts().id(foo.id.get()).get(); assertThat(info.username).isEqualTo(""foo""); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(foo.getId())); assertThat(ref).isNotNull(); org.eclipse.jgit.revwalk.RevCommit c = rw.parseCommit(ref.getObjectId()); long timestampDiffMs = java.lang.Math.abs((((c.getCommitTime()) * 1000L) - (accountCache.get(foo.getId()).getAccount().getRegisteredOn().getTime()))); assertThat(timestampDiffMs).isAtMost(ChangeRebuilderImpl.MAX_WINDOW_MS); } }",08ced4d468b2bee951bacddcb3b0116ac537a391,create(),190848,228,260
61604,gerrit-common_src_main_java_com_google_gerrit_common_data_PatchScript.java,14.0,public com.google.gerrit.reviewdb.client.AccountDiffPreference getDiffPrefs() { return diffPrefs; },008c606660a8d319fb550a7f838c02ac17bc3b2e,public com.google.gerrit.extensions.common.DiffPreferencesInfo getDiffPrefs() { return diffPrefs; },17de93fe5a342d2fc1b82edb1de746dd80b71f8d,getDiffPrefs(),getDiffPrefs(),40,14,public com.google.gerrit.extensions.client.DiffPreferencesInfo getDiffPrefs() { return diffPrefs; },2fae48f25a6f02daa64628d4727d8001a44b3b54,getDiffPrefs(),127745,25,25
35380,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ProjectMap.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void suggestParentCandidates(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.client.projects.ProjectMap> callback) { new com.google.gerrit.client.rpc.RestApi(""/projects/"").addParameterRaw(""type"", ""SUGGEST_PARENT_CANDIDATES"").addParameterTrue(""all"").addParameterTrue(""d"").send(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(callback)); }",9896ba16c306e384693236b69e8f57a83c8a3320,,suggestParentCandidates(com.google.gwtjsonrpc.common.AsyncCallback),8,3,"public static void parentCandidates(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.client.projects.ProjectMap> callback) { new com.google.gerrit.client.rpc.RestApi(""/projects/"").addParameterRaw(""type"", ""PARENT_CANDIDATES"").addParameterTrue(""all"").addParameterTrue(""d"").send(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(callback)); }",de18866eb87da575a75b3f544b34ca30038e7258,parentCandidates(com.google.gwtjsonrpc.common.AsyncCallback),181706,105,100
97931,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetAccountCommand.java,8.0,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",84b1c2de26c9545f00d1203558f596b20609c480,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",5dbf801c484cb734bd17ae8272d4cc7e72d85991,deleteEmail(java.lang.String),deleteEmail(java.lang.String),12,8,"private void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (email.equals(""ALL"")) { java.util.List<com.google.gerrit.extensions.common.EmailInfo> emails = getEmails.apply(rsrc); for (com.google.gerrit.extensions.common.EmailInfo e : emails) { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, e.email), new com.google.gerrit.server.account.DeleteEmail.Input()); } } else { deleteEmail.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), new com.google.gerrit.server.account.DeleteEmail.Input()); } }",b91d0f3dbb6937db5b5c87bf872f476576376867,deleteEmail(java.lang.String),69756,217,230
30150,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_SuggestServiceImpl.java,3.0,"private boolean suggestGroupAsReviewer(final com.google.gerrit.reviewdb.Project.NameKey project, final com.google.gerrit.common.data.GroupReference group) throws com.google.gwtorm.client.OrmException { if (!(com.google.gerrit.server.patch.AddReviewer.isLegalReviewerGroup(group.getUUID()))) { return false; } try { final java.util.Set<com.google.gerrit.reviewdb.Account> members = groupMembersFactory.create(project, group.getUUID()).call(); if (members.isEmpty()) { return false; } final int maxAllowed = cfg.getInt(""addreviewer"", ""maxAllowed"", AddReviewer.DEFAULT_MAX_REVIEWERS); if ((maxAllowed > 0) && ((members.size()) > maxAllowed)) { return false; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return false; } return true; }",441fa5cdd146e7c8402315a241d4be0a4c42231f,"private boolean suggestGroupAsReviewer(final com.google.gerrit.reviewdb.Project.NameKey project, final com.google.gerrit.common.data.GroupReference group) throws com.google.gwtorm.client.OrmException { if (!(com.google.gerrit.server.patch.AddReviewer.isLegalReviewerGroup(group.getUUID()))) { return false; } try { final com.google.gerrit.server.account.PerformGroupMembers groupMembers = groupMembersFactory.create(); groupMembers.setProject(project); final java.util.Set<com.google.gerrit.reviewdb.Account> members = groupMembers.listAccounts(group.getUUID()); if (members.isEmpty()) { return false; } final int maxAllowed = cfg.getInt(""addreviewer"", ""maxAllowed"", AddReviewer.DEFAULT_MAX_REVIEWERS); if ((maxAllowed > 0) && ((members.size()) > maxAllowed)) { return false; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return false; } return true; }",ca03873e48a460d2f8a44e484cfcf13f63831818,"suggestGroupAsReviewer(com.google.gerrit.reviewdb.Project$NameKey,com.google.gerrit.common.data.GroupReference)","suggestGroupAsReviewer(com.google.gerrit.reviewdb.Project$NameKey,com.google.gerrit.common.data.GroupReference)",2,3,"private boolean suggestGroupAsReviewer(final com.google.gerrit.reviewdb.Project.NameKey project, final com.google.gerrit.common.data.GroupReference group) throws com.google.gwtorm.client.OrmException { if (!(com.google.gerrit.server.patch.AddReviewer.isLegalReviewerGroup(group.getUUID()))) { return false; } try { final java.util.Set<com.google.gerrit.reviewdb.Account> members = groupMembersFactory.create().listAccounts(group.getUUID(), project); if (members.isEmpty()) { return false; } final int maxAllowed = cfg.getInt(""addreviewer"", ""maxAllowed"", AddReviewer.DEFAULT_MAX_REVIEWERS); if ((maxAllowed > 0) && ((members.size()) > maxAllowed)) { return false; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return false; } catch (com.google.gerrit.server.project.NoSuchProjectException e) { return false; } return true; }",6a91010615d16a3d0115a73aa12e0b257b9acb1c,"suggestGroupAsReviewer(com.google.gerrit.reviewdb.Project$NameKey,com.google.gerrit.common.data.GroupReference)",154557,270,244
79646,gerrit-server_src_test_java_com_google_gerrit_server_query_account_AbstractQueryAccountsTest.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void withSecondaryEmails() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user1 = newAccount(""myuser"", ""My User"", ""my.user@example.com"", true); java.lang.String[] secondaryEmails = new java.lang.String[]{ ""foo@example.com"", ""bar@example.com"" }; addEmails(user1, secondaryEmails); java.util.List<com.google.gerrit.extensions.common.AccountInfo> result = assertQuery(user1.username, user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.DETAILS), user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsAllIn(java.util.Arrays.asList(secondaryEmails)); result = assertQuery(newQuery(user1.username).withOptions(ListAccountsOption.DETAILS, ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsAllIn(java.util.Arrays.asList(secondaryEmails)); }",9b9083e2e77293f315c24c20896c18a465b265fe,,withSecondaryEmails(),6,24,"@org.junit.Test public void withSecondaryEmails() throws java.lang.Exception { com.google.gerrit.extensions.common.AccountInfo user1 = newAccount(""myuser"", ""My User"", ""my.user@example.com"", true); java.lang.String[] secondaryEmails = new java.lang.String[]{ ""bar@example.com"", ""foo@example.com"" }; addEmails(user1, secondaryEmails); java.util.List<com.google.gerrit.extensions.common.AccountInfo> result = assertQuery(user1.username, user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.DETAILS), user1); assertThat(result.get(0).secondaryEmails).isNull(); result = assertQuery(newQuery(user1.username).withOption(ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsExactlyElementsIn(java.util.Arrays.asList(secondaryEmails)).inOrder(); result = assertQuery(newQuery(user1.username).withOptions(ListAccountsOption.DETAILS, ListAccountsOption.ALL_EMAILS), user1); assertThat(result.get(0).secondaryEmails).containsExactlyElementsIn(java.util.Arrays.asList(secondaryEmails)).inOrder(); }",dabd4cec2386d29a9f7328c8417e838cb5dd63ae,withSecondaryEmails(),176070,287,299
72338,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookApiListener.java,,,,"@java.lang.Override public void onTopicEdited(com.google.gerrit.extensions.events.TopicEditedListener.Event ev) { try { ch.doTopicChangedHook(getChange(ev.getChange()), getAccount(ev.getEditor()), ev.getOldTopic(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }",2098a119666e46f612d00f320f28ba7df7cdc671,,onTopicEdited(com.google.gerrit.extensions.events.TopicEditedListener$Event),43,3,"@java.lang.Override public void onTopicEdited(com.google.gerrit.extensions.events.TopicEditedListener.Event ev) { try { hooks.doTopicChangedHook(getNotes(ev.getChange()).getChange(), getAccount(ev.getEditor()), ev.getOldTopic(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error((""TopicChanged hook failed to run "" + (ev.getChange()._number)), e); } }",a77f0ca1b78fbcf5656573a971b35aa5858921da,onTopicEdited(com.google.gerrit.extensions.events.TopicEditedListener$Event),204357,89,131
88095,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeUpdate.java,4.0,"public Account.Id getAccountId() { checkState(((accountId) != null), ""author identity for %s is not from an IdentifiedUser: %s"", getClass().getSimpleName(), authorIdent.toExternalString()); return accountId; }",2e21c310584de8a6cf4b8fc8208e6ab21b12d4f1,"public Account.Id getEffectiveAccountId() { checkState(((effectiveAccountId) != null), ""author identity for %s is not from an IdentifiedUser: %s"", getClass().getSimpleName(), authorIdent.toExternalString()); return effectiveAccountId; }",5d04e5e440ab3ae87c934b79844a411c85bbc3be,getAccountId(),getEffectiveAccountId(),11,18,"public Account.Id getAccountId() { checkState(((accountId) != null), ""author identity for %s is not from an IdentifiedUser: %s"", getClass().getSimpleName(), authorIdent.toExternalString()); return accountId; }",2e21c310584de8a6cf4b8fc8208e6ab21b12d4f1,getAccountId(),81252,52,49
34483,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,,,,"private static native <T extends com.google.gwt.core.client.JavaScriptObject> T parse(com.google.gwt.core.client.JavaScriptObject p, java.lang.String d);",9952b2309e9b2650ce3df911b87f5f6863aa9227,,"parse(com.google.gwt.core.client.JavaScriptObject,java.lang.String)",8,9,"private static boolean isContentType(com.google.gwt.http.client.Response res, java.lang.String want) { java.lang.String type = res.getHeader(""Content-Type""); if (type == null) { return false; } int semi = type.indexOf(';'); if (semi >= 0) { type = type.substring(0, semi).trim(); } return want.equals(type); }",4b91ae1009278c3a898b34f1ca67496bb83ae0dc,"isContentType(com.google.gwt.http.client.Response,java.lang.String)",186360,44,89
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.gerrit.client.rpc.RestApi id(int id, java.lang.String project) { return idRaw((((com.google.gwt.http.client.URL.encodePathSegment(project)) + ""~"") + id)); }",7b61663f6063212a0cd16708ba18062917f51913,,"id(int,java.lang.String)",7,44,"public com.google.gerrit.client.rpc.RestApi id(java.lang.String project, int id) { return idRaw((((com.google.gwt.http.client.URL.encodePathSegment(project)) + ""~"") + id)); }",5d6bf40f5a6dc5c19be0e7731824975c7ec4906f,"id(java.lang.String,int)",211468,56,56
140535,java_com_google_gerrit_server_patchlib_PatchListEntry.java,6.0,"static com.google.gerrit.server.patch.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.Patch.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.patch.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.patch.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",0d8f8fee001e14d9e0ff6c07b8c69e29610d82d2,"static com.google.gerrit.server.patchlib.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.patchlib.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.patchlib.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.patchlib.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",360d40514074ed15db10104e1520f7e0699618e9,readFrom(java.io.InputStream),readFrom(java.io.InputStream),11,6,"static com.google.gerrit.server.diff.PatchListEntry readFrom(java.io.InputStream in) throws java.io.IOException { com.google.gerrit.reviewdb.client.Patch.ChangeType changeType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.ChangeType.values()); com.google.gerrit.reviewdb.client.Patch.PatchType patchType = readEnum(in, com.google.gerrit.reviewdb.client.Patch.PatchType.values()); java.lang.String oldName = readString(in); java.lang.String newName = readString(in); byte[] hdr = readBytes(in); int ins = readVarInt32(in); int del = readVarInt32(in); long size = readFixInt64(in); long sizeDelta = readFixInt64(in); org.eclipse.jgit.diff.Edit[] editArray = com.google.gerrit.server.diff.PatchListEntry.readEditArray(in); org.eclipse.jgit.diff.Edit[] editsDueToRebase = com.google.gerrit.server.diff.PatchListEntry.readEditArray(in); return new com.google.gerrit.server.diff.PatchListEntry(changeType, patchType, oldName, newName, hdr, com.google.common.collect.ImmutableList.copyOf(editArray), com.google.common.collect.ImmutableSet.copyOf(editsDueToRebase), ins, del, size, sizeDelta); }",0fbd19b9685f06bf1638fc399d1c42709920d7be,readFrom(java.io.InputStream),15483,350,350
46073,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_DiffTable.java,,,,public com.google.gwt.dom.client.DivElement getCmB() { return cmB; },2ab8bb2cd44920b097e44cad9382d095e86788b8,,getCmB(),7,0,com.google.gwt.dom.client.DivElement getCmB() { return cmB; },ac74b07ad3d251c566782e01d14117970a6200b0,getCmB(),188678,24,23
30057,gerrit-server_src_main_java_com_google_gerrit_server_RequestCleanup.java,0.0,"public void run() { synchronized(cleanup) { for (final java.util.Iterator<java.lang.Runnable> i = cleanup.iterator(); i.hasNext();) { try { i.next().run(); } catch (java.lang.Throwable err) { com.google.gerrit.server.RequestCleanup.log.error(""Failed to execute per-request cleanup"", err); } i.remove(); } } }",733a6e734f94e2d65df0fc71b0bdb1911dcd01a0,"public void run() { synchronized(cleanup) { run = true; for (final java.util.Iterator<java.lang.Runnable> i = cleanup.iterator(); i.hasNext();) { try { i.next().run(); } catch (java.lang.Throwable err) { com.google.gerrit.server.RequestCleanup.log.error(""Failed to execute per-request cleanup"", err); } i.remove(); } } }",83e135cdeb29f30b40968c6d9595ada9f31e5bbb,run(),run(),2,0,"public void run() { synchronized(cleanup) { ran = true; for (final java.util.Iterator<java.lang.Runnable> i = cleanup.iterator(); i.hasNext();) { try { i.next().run(); } catch (java.lang.Throwable err) { com.google.gerrit.server.RequestCleanup.log.error(""Failed to execute per-request cleanup"", err); } i.remove(); } } }",c3871f198adeab2035b3fdd2d695d9598e2af85c,run(),147357,94,94
163935,gerrit-server_src_test_java_com_google_gerrit_server_mail_send_FromAddressGeneratorProviderTest.java,26.0,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.emptySet(), java.util.Collections.emptySet(), new java.util.HashMap()); }",0e45302035b5a872d705d08d1ddfe12b6507cb78,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet(), java.util.Collections.<com.google.gerrit.reviewdb.client.AccountExternalId>emptySet(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>>()); }",f7e3449733abbbd717da3f9ca89c8293f82f37c5,"makeUser(java.lang.String,java.lang.String)","makeUser(java.lang.String,java.lang.String)",3,26,"private com.google.gerrit.server.account.AccountState makeUser(final java.lang.String name, final java.lang.String email) { final com.google.gerrit.reviewdb.client.Account.Id userId = new com.google.gerrit.reviewdb.client.Account.Id(42); final com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(userId, com.google.gerrit.common.TimeUtil.nowTs()); account.setFullName(name); account.setPreferredEmail(email); return new com.google.gerrit.server.account.AccountState(account, java.util.Collections.emptySet(), java.util.Collections.emptySet(), new java.util.HashMap()); }",0e45302035b5a872d705d08d1ddfe12b6507cb78,"makeUser(java.lang.String,java.lang.String)",64480,259,180
72320,gerrit-server_src_main_java_com_google_gerrit_metrics_dropwizard_DropWizardMetricMaker.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public synchronized <F1> com.google.gerrit.metrics.Timer1<F1> newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc, com.google.gerrit.metrics.Field<F1> field1) { checkArgument((!(desc.isGauge())), ""timer must not be a gauge""); checkArgument((!(desc.isRate())), ""timer must not be a rate""); checkArgument(desc.isCumulative(), ""timer must be cumulative""); checkArgument(((desc.getTimeUnit()) != null), ""timer must have a unit""); com.google.gerrit.metrics.dropwizard.TimerImpl1<F1> m = new com.google.gerrit.metrics.dropwizard.TimerImpl1(this, name, field1); define(name, desc); bucketed.put(name, m); return m; }",23555533fd83a2c434b812e2342eb44e27f6cf37,,"newTimer(java.lang.String,com.google.gerrit.metrics.Description,com.google.gerrit.metrics.Field)",9,20,"@java.lang.Override public synchronized <F1> com.google.gerrit.metrics.Timer1<F1> newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc, com.google.gerrit.metrics.Field<F1> field1) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkTimerDescription(desc); com.google.gerrit.metrics.dropwizard.TimerImpl1<F1> m = new com.google.gerrit.metrics.dropwizard.TimerImpl1(this, name, desc, field1); define(name, desc); bucketed.put(name, m); return m.timer(); }",ac7d7cf1cfa5bbd60730511d22fbe692b7d23aac,"newTimer(java.lang.String,com.google.gerrit.metrics.Description,com.google.gerrit.metrics.Field)",56870,188,147
48697,gerrit-extension-api_src_main_java_com_google_gerrit_extensions_registration_DynamicItem.java,4.0,"public static <T> void itemOf(com.google.inject.Binder binder, com.google.inject.TypeLiteral<T> member) { @java.lang.SuppressWarnings(""unchecked"") com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>> key = ((com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>>) (com.google.inject.Key.get(com.google.inject.util.Types.newParameterizedType(com.google.gerrit.extensions.registration.DynamicItem.class, member.getType())))); binder.bind(key).toProvider(new com.google.gerrit.extensions.registration.DynamicItemProvider<T>(member, key)).in(Scopes.SINGLETON); }",270c546c905588dbb9b1359e5f669bd99676e796,"public static <T> void itemOf(com.google.inject.Binder binder, com.google.inject.TypeLiteral<T> member) { com.google.gerrit.extensions.registration.DynamicItem.itemOf(binder, member, false); }",48b9566220ae128e699d758f79182ad4522a3bcf,"itemOf(com.google.inject.Binder,com.google.inject.TypeLiteral)","itemOf(com.google.inject.Binder,com.google.inject.TypeLiteral)",16,0,"public static <T> void itemOf(com.google.inject.Binder binder, com.google.inject.TypeLiteral<T> member) { @java.lang.SuppressWarnings(""unchecked"") com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>> key = ((com.google.inject.Key<com.google.gerrit.extensions.registration.DynamicItem<T>>) (com.google.inject.Key.get(com.google.inject.util.Types.newParameterizedType(com.google.gerrit.extensions.registration.DynamicItem.class, member.getType())))); binder.bind(key).toProvider(new com.google.gerrit.extensions.registration.DynamicItemProvider(member, key)).in(Scopes.SINGLETON); }",1b83297d5c874f1979c9bbcc7bbddbc81ec352f6,"itemOf(com.google.inject.Binder,com.google.inject.TypeLiteral)",106935,55,176
61730,gerrit-server_src_main_java_com_google_gerrit_server_change_ConsistencyChecker.java,,,,public com.google.gerrit.server.change.CheckResult check(com.google.gerrit.reviewdb.client.Change c) { reset(); change = c; try { checkImpl(); com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = messages; return result; } finally { if ((rw) != null) { rw.release(); } if ((repo) != null) { repo.close(); } } },e48c82654190af6c1cba0bd8b39f7f6e24ab93a6,,check(com.google.gerrit.reviewdb.client.Change),5,0,public java.util.List<java.lang.String> check(com.google.gerrit.reviewdb.client.Change c) { reset(); change = c; try { checkImpl(); return messages; } finally { if ((rw) != null) { rw.release(); } if ((repo) != null) { repo.close(); } } },bd093ce8bc7fbb3c73e079e3124d799e571621a2,check(com.google.gerrit.reviewdb.client.Change),102458,116,79
166513,javatests_com_google_gitiles_ConfigUtilTest.java,0.0,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",d8cd17e79e36e9e968c1c2c4b893700d663d9033,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.lang.Long t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",6a2eacddfaab265be082de4f6556dd77b3156c71,nullAsDefault(),nullAsDefault(),3,0,"@org.junit.Test public void nullAsDefault() throws java.lang.Exception { org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", """"); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); config.setString(""core"", null, ""blank"", "" ""); t = com.google.gitiles.ConfigUtil.getDuration(config, ""core"", null, ""blank"", null); assertThat(t).isNull(); }",b66af37a8e6c589e8794d60e77647d134378dda5,nullAsDefault(),57052,177,177
73479,src_main_java_com_googlesource_gerrit_plugins_imagare_client_ImagareConfigScreen.java,1.0,@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); },a82f5cc7e5506264c70f65eda2633ea32e80063a,@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(info.enableImageServer()); },6c7b4c67139b480f4742d4c3436a21d5d63ad54f,onClick(com.google.gwt.event.dom.client.ClickEvent),onClick(com.google.gwt.event.dom.client.ClickEvent),4,1,@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); },a82f5cc7e5506264c70f65eda2633ea32e80063a,onClick(com.google.gwt.event.dom.client.ClickEvent),83578,37,31
61476,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_BanCommitIT.java,2.0,"@org.junit.Test public void banCommit() throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.add(git, ""a.txt"", ""some content""); com.google.gerrit.acceptance.GitUtil.Commit c = com.google.gerrit.acceptance.GitUtil.createCommit(git, admin.getIdent(), ""subject""); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/ban/""), BanCommit.Input.fromCommits(c.getCommit().getName())); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); com.google.gerrit.server.project.BanCommit.BanResultInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.BanCommit.BanResultInfo.class); assertEquals(c.getCommit().getName(), com.google.common.collect.Iterables.getOnlyElement(info.newlyBanned)); assertNull(info.alreadyBanned); assertNull(info.ignored); org.eclipse.jgit.transport.PushResult pushResult = com.google.gerrit.acceptance.GitUtil.pushHead(git, ""refs/heads/master"", false); assertTrue(pushResult.getRemoteUpdate(""refs/heads/master"").getMessage().startsWith(""contains banned commit"")); }",866826f39a397ce192a2fd1b92aedf63f79f1510,"@org.junit.Test public void banCommit() throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.add(git, ""a.txt"", ""some content""); com.google.gerrit.acceptance.GitUtil.Commit c = com.google.gerrit.acceptance.GitUtil.createCommit(git, admin.getIdent(), ""subject""); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/ban/""), BanCommit.Input.fromCommits(c.getCommit().getName())); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.server.project.BanCommit.BanResultInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.BanCommit.BanResultInfo.class); assertThat(com.google.common.collect.Iterables.getOnlyElement(info.newlyBanned)).isEqualTo(c.getCommit().getName()); assertThat(info.alreadyBanned).isNull(); assertThat(info.ignored).isNull(); org.eclipse.jgit.transport.PushResult pushResult = com.google.gerrit.acceptance.GitUtil.pushHead(git, ""refs/heads/master"", false); assertThat(pushResult.getRemoteUpdate(""refs/heads/master"").getMessage().startsWith(""contains banned commit"")); }",a5ec04d6add051f2774f1adc8cf38d96cc4d2562,banCommit(),banCommit(),6,2,"@org.junit.Test public void banCommit() throws java.lang.Exception { com.google.gerrit.acceptance.GitUtil.add(git, ""a.txt"", ""some content""); com.google.gerrit.acceptance.GitUtil.Commit c = com.google.gerrit.acceptance.GitUtil.createCommit(git, admin.getIdent(), ""subject""); com.google.gerrit.acceptance.RestResponse r = adminSession.put(((""/projects/"" + (project.get())) + ""/ban/""), BanCommit.Input.fromCommits(c.getCommit().getName())); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.server.project.BanCommit.BanResultInfo info = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.BanCommit.BanResultInfo.class); assertThat(com.google.common.collect.Iterables.getOnlyElement(info.newlyBanned)).isEqualTo(c.getCommit().getName()); assertThat(info.alreadyBanned).isNull(); assertThat(info.ignored).isNull(); org.eclipse.jgit.transport.PushResult pushResult = com.google.gerrit.acceptance.GitUtil.pushHead(git, ""refs/heads/master"", false); assertThat(pushResult.getRemoteUpdate(""refs/heads/master"").getMessage()).startsWith(""contains banned commit""); }",e03d61532b3166e0148710ab3b1200357208c60b,banCommit(),119779,328,329
105856,src_main_java_com_googlesource_gerrit_plugins_lfs_locks_LfsLocksHandler.java,3.0,"com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse listLocks(java.lang.String project) { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Get locks for {} project"", project); return new com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse(projects.getUnchecked(project).asMap().values(), null); }",a7d6dd03ffacfad294762bc8de9581a1cbbd3881,"com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse listLocks(java.lang.String project) { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Get locks for {} project"", project); return new com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse(projects.getUnchecked(project).getLocks(), null); }",92681a7e6608c400b639daf99875f783e246ad40,listLocks(java.lang.String),listLocks(java.lang.String),16,0,"com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse listLocks(com.google.gerrit.reviewdb.client.Project.NameKey project) { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug(""Get locks for {} project"", project); return new com.googlesource.gerrit.plugins.lfs.locks.LfsGetLocksResponse(projectLocks.getUnchecked(project).getLocks(), null); }",fff962484d5430aff87e7fa1e4d14caa8a4c4018,listLocks(com.google.gerrit.reviewdb.client.Project$NameKey),63700,99,112
79014,gitiles-servlet_src_main_java_com_google_gitiles_doc_GitilesHtmlExtension.java,0.0,"private static void inline(org.commonmark.node.HtmlInline curr) { java.lang.String html = curr.getLiteral(); java.util.regex.Matcher m = com.google.gitiles.doc.GitilesHtmlExtension.BREAK.matcher(html); if (m.matches()) { switch (m.group(1).toLowerCase()) { case ""br"" : curr.insertAfter(new org.commonmark.node.HardLineBreak()); curr.unlink(); return; case ""hr"" : curr.insertAfter(new org.commonmark.node.ThematicBreak()); curr.unlink(); return; } } m = com.google.gitiles.doc.GitilesHtmlExtension.ANCHOR_OPEN.matcher(html); if (m.matches()) { java.lang.String name = m.group(2); org.commonmark.node.Node next = curr.getNext(); if (com.google.gitiles.doc.GitilesHtmlExtension.isAnchorClose(next)) { next.unlink(); next = curr.getNext(); com.google.gitiles.doc.NamedAnchor anchor = new com.google.gitiles.doc.NamedAnchor(); anchor.setName(name); curr.insertAfter(anchor); curr.unlink(); com.google.gitiles.doc.MarkdownUtil.trimPreviousWhitespace(anchor); return; } } curr.unlink(); }",9a77f7a2bb3c664b4758162ebd64a695b5af8e0a,"private static void inline(org.commonmark.node.HtmlInline curr) { java.lang.String html = curr.getLiteral(); java.util.regex.Matcher m = com.google.gitiles.doc.GitilesHtmlExtension.BREAK.matcher(html); if (m.matches()) { switch (m.group(1).toLowerCase()) { case ""br"" : curr.insertAfter(new org.commonmark.node.HardLineBreak()); curr.unlink(); return; case ""hr"" : curr.insertAfter(new org.commonmark.node.ThematicBreak()); curr.unlink(); return; } } m = com.google.gitiles.doc.GitilesHtmlExtension.ANCHOR_OPEN.matcher(html); if (m.matches()) { java.lang.String name = m.group(2); org.commonmark.node.Node next = curr.getNext(); if (com.google.gitiles.doc.GitilesHtmlExtension.isAnchorClose(next)) { next.unlink(); curr.getNext(); com.google.gitiles.doc.NamedAnchor anchor = new com.google.gitiles.doc.NamedAnchor(); anchor.setName(name); curr.insertAfter(anchor); curr.unlink(); com.google.gitiles.doc.MarkdownUtil.trimPreviousWhitespace(anchor); return; } } curr.unlink(); }",342a442734bc77ebcb7f3ef46b8e3ab979463550,inline(org.commonmark.node.HtmlInline),inline(org.commonmark.node.HtmlInline),2,0,"private static void inline(org.commonmark.node.HtmlInline curr) { java.lang.String html = curr.getLiteral(); java.util.regex.Matcher m = com.google.gitiles.doc.GitilesHtmlExtension.BREAK.matcher(html); if (m.matches()) { switch (m.group(1).toLowerCase()) { case ""br"" : curr.insertAfter(new org.commonmark.node.HardLineBreak()); curr.unlink(); return; case ""hr"" : curr.insertAfter(new org.commonmark.node.ThematicBreak()); curr.unlink(); return; } } m = com.google.gitiles.doc.GitilesHtmlExtension.ANCHOR_OPEN.matcher(html); if (m.matches()) { java.lang.String name = m.group(2); org.commonmark.node.Node next = curr.getNext(); if (com.google.gitiles.doc.GitilesHtmlExtension.isAnchorClose(next)) { next.unlink(); com.google.gitiles.doc.NamedAnchor anchor = new com.google.gitiles.doc.NamedAnchor(); anchor.setName(name); curr.insertAfter(anchor); curr.unlink(); com.google.gitiles.doc.MarkdownUtil.trimPreviousWhitespace(anchor); return; } } curr.unlink(); }",a9b4c3f432aa14cd78921e761868230300a841dd,inline(org.commonmark.node.HtmlInline),20497,298,294
68284,src_main_java_com_googlesource_gerrit_plugins_gitiles_GitilesWeblinks.java,,,,"@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.name, null, java.lang.String.format(""%s/%s"", com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.baseUrl, projectName), Target.BLANK); }",d478a618293d06a382c7701c21664743de8cff3e,,getProjectWeblink(java.lang.String),4,2,"@java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo getProjectWeblink(java.lang.String projectName) { return new com.google.gerrit.extensions.common.WebLinkInfo(name, null, java.lang.String.format(""%s/%s"", baseUrl, projectName), Target.BLANK); }",77b4ddbd42b56f9f79f54b33cbc3d492c928b573,getProjectWeblink(java.lang.String),77272,117,78
91850,src_main_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizer.java,,,,"public java.lang.String generateToken(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { if (key.isPresent()) { try { byte[] initVector = new byte[com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.IV_LENGTH]; rndm.nextBytes(initVector); javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.ENCRYPT_MODE); return org.eclipse.jgit.util.Base64.encodeBytes(com.google.common.primitives.Bytes.concat(initVector, cipher.doFinal(java.lang.String.format(""%s-%s-%s"", operation, id.name(), timeout()).getBytes(java.nio.charset.StandardCharsets.UTF_8)))); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.log.error(""Token generation failed with error"", e); } } return ""not:required""; }",9e39fd153dd7fc999f1653ad9c93d7382e473a3c,,"generateToken(java.lang.String,org.eclipse.jgit.lfs.lib.AnyLongObjectId)",10,1,"public java.lang.String generateToken(java.lang.String operation, org.eclipse.jgit.lfs.lib.AnyLongObjectId id) { try { byte[] initVector = new byte[com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.IV_LENGTH]; rndm.nextBytes(initVector); javax.crypto.Cipher cipher = cipher(initVector, javax.crypto.Cipher.ENCRYPT_MODE); return org.eclipse.jgit.util.Base64.encodeBytes(com.google.common.primitives.Bytes.concat(initVector, cipher.doFinal(java.lang.String.format(""%s-%s-%s"", operation, id.name(), timeout()).getBytes(java.nio.charset.StandardCharsets.UTF_8)))); } catch (java.security.GeneralSecurityException e) { com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.log.error(""Token generation failed with error"", e); throw new java.lang.RuntimeException(e); } }",06b0663b51275bcd1f9ab637e0191553d8c79950,"generateToken(java.lang.String,org.eclipse.jgit.lfs.lib.AnyLongObjectId)",47184,234,230
54310,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,5.0,"private com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet ps) { try { final com.google.gerrit.common.data.SubmitTypeRecord r = changeControlFactory.controlFor(change, identifiedUserFactory.create(change.getOwner())).getSubmitTypeRecord(db, ps); if ((r.status) != (SubmitTypeRecord.Status.OK)) { com.google.gerrit.server.git.MergeOp.log.error((""Failed to get submit type for "" + (change.getKey()))); return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.git.MergeOp.log.error((""Failed to get submit type for "" + (change.getKey())), e); return null; } }",375218dc01ad028e21cef059fb6d9c954c959771,"private com.google.gerrit.extensions.common.ProjectSubmitType getSubmitType(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet ps) { try { final com.google.gerrit.common.data.SubmitTypeRecord r = changeControlFactory.controlFor(change, identifiedUserFactory.create(change.getOwner())).getSubmitTypeRecord(db, ps); if ((r.status) != (SubmitTypeRecord.Status.OK)) { com.google.gerrit.server.git.MergeOp.log.error((""Failed to get submit type for "" + (change.getKey()))); return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.git.MergeOp.log.error((""Failed to get submit type for "" + (change.getKey())), e); return null; } }",b24b01956470918e4ec6a2e66291db09ca051658,"getSubmitType(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)","getSubmitType(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",14,6,"private com.google.gerrit.extensions.common.SubmitType getSubmitType(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet ps) { com.google.gerrit.common.data.SubmitTypeRecord r = ctl.getSubmitTypeRecord(db, ps); if ((r.status) != (SubmitTypeRecord.Status.OK)) { com.google.gerrit.server.git.MergeOp.log.error((""Failed to get submit type for "" + (ctl.getChange().getKey()))); return null; } return r.type; }",dffe701ba99383408be3f8c6a6512ce832abdf4d,"getSubmitType(com.google.gerrit.server.project.ChangeControl,com.google.gerrit.reviewdb.client.PatchSet)",164290,222,143
72101,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,64.0,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.inject.Injector injector = createInjector(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); com.google.gerrit.reviewdb.client.Account userAccount = db.accounts().get(userId); userAccount.setPreferredEmail(""user@example.com""); db.accounts().update(com.google.common.collect.ImmutableList.of(userAccount)); user = userFactory.create(com.google.inject.util.Providers.of(db), userId); requestContext.setContext(newRequestContext(userAccount.getId())); }",492337f941b15fd61dd200b26a0e350fae6b4c71,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { config.setInt(""index"", null, ""maxPages"", 10); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.inject.Injector injector = createInjector(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); com.google.gerrit.reviewdb.client.Account userAccount = db.accounts().get(userId); userAccount.setPreferredEmail(""user@example.com""); db.accounts().update(com.google.common.collect.ImmutableList.of(userAccount)); user = userFactory.create(com.google.inject.util.Providers.of(db), userId); requestContext.setContext(newRequestContext(userAccount.getId())); }",c0279a850c13260fb30a50d7d7bd3217eb84f089,setUpInjector(),setUpInjector(),6,65,"@org.junit.Before public void setUpInjector() throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.inject.Injector injector = createInjector(); lifecycle.add(injector); injector.injectMembers(this); lifecycle.start(); db = schemaFactory.open(); schemaCreator.create(db); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(""user"")).getAccountId(); com.google.gerrit.reviewdb.client.Account userAccount = db.accounts().get(userId); userAccount.setPreferredEmail(""user@example.com""); db.accounts().update(com.google.common.collect.ImmutableList.of(userAccount)); user = userFactory.create(com.google.inject.util.Providers.of(db), userId); requestContext.setContext(newRequestContext(userAccount.getId())); }",492337f941b15fd61dd200b26a0e350fae6b4c71,setUpInjector(),182749,211,198
74829,src_main_java_com_googlesource_gerrit_plugins_its_jira_InitJira.java,3.0,"private boolean isJiraConnectSuccessful() { ui.message(""Checking Jira connectivity ... ""); try { com.googlesource.gerrit.plugins.its.jira.JiraClient jiraClient = new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraUrl); com.googlesource.gerrit.plugins.its.jira.JiraSession jiraToken = jiraClient.login(jiraUsername, jiraPassword); jiraClient.logout(jiraToken); ui.message(""[OK]\n""); return true; } catch (java.rmi.RemoteException e) { ui.message(""*FAILED* (%s)\n"", e.toString()); return false; } }",9f2a161213984953b614206f6cbc87ec821dd90c,"private boolean isJiraConnectSuccessful() { ui.message(""Checking Jira connectivity ... ""); try { new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraUrl, jiraUsername, jiraPassword).sysInfo().getVersion(); ui.message(""[OK]\n""); return true; } catch (java.net.URISyntaxException | java.io.IOException e) { ui.message(""*FAILED* (%s)\n"", e.toString()); return false; } }",65fe2bc71f81ad6f6b0a4a3db48e673856895f7e,isJiraConnectSuccessful(),isJiraConnectSuccessful(),5,3,"private boolean isJiraConnectSuccessful() { ui.message(""Checking Jira connectivity ... ""); try { new com.googlesource.gerrit.plugins.its.jira.JiraClient(jiraUrl, jiraUsername, jiraPassword).sysInfo().getVersion(); ui.message(""[OK]\n""); return true; } catch (java.net.URISyntaxException e) { ui.message(""*FAILED* (%s)\n"", e.toString()); return false; } }",723998381908f82ecf03e9b8cb877e735d2d05a1,isJiraConnectSuccessful(),168507,105,99
71763,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PublicKeyStore.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static org.bouncycastle.openpgp.PGPPublicKey getSigner(java.lang.Iterable<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings, org.bouncycastle.openpgp.PGPSignature sig, org.bouncycastle.openpgp.PGPPublicKey onKey) throws org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPPublicKeyRing kr : keyRings) { org.bouncycastle.openpgp.PGPPublicKey k = kr.getPublicKey(); sig.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), k); if (sig.verifyCertification(onKey)) { return k; } } return null; }",95d4f8ebf897d1c5317a8b5dcd2b7e99e015bb67,,"getSigner(java.lang.Iterable,org.bouncycastle.openpgp.PGPSignature,org.bouncycastle.openpgp.PGPPublicKey)",7,14,"private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> get(long keyId, byte[] fp) throws java.io.IOException { if ((reader) == null) { load(); } if ((notes) == null) { return java.util.Collections.emptyList(); } org.eclipse.jgit.notes.Note note = notes.getNote(com.google.gerrit.gpg.PublicKeyStore.keyObjectId(keyId)); if (note == null) { return java.util.Collections.emptyList(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keys = new java.util.ArrayList<>(); try (java.io.InputStream in = reader.open(note.getData(), com.google.gerrit.gpg.OBJ_BLOB).openStream()) { while (true) { @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.Object> it = new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(new org.bouncycastle.bcpg.ArmoredInputStream(in)).iterator(); if (!(it.hasNext())) { break; } java.lang.Object obj = it.next(); if (obj instanceof org.bouncycastle.openpgp.PGPPublicKeyRing) { org.bouncycastle.openpgp.PGPPublicKeyRing kr = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (obj)); if ((fp == null) || (java.util.Arrays.equals(fp, kr.getPublicKey().getFingerprint()))) { keys.add(kr); } } checkState((!(it.hasNext())), ""expected one PGP object per ArmoredInputStream""); } return keys; } }",8a4102d455b3d433117623f1b98b3221fa1034a2,"get(long,byte[])",122213,160,378
58390,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListProjectsIT.java,,,,"@org.junit.Test public void listProjects() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey someProject = new com.google.gerrit.reviewdb.client.Project.NameKey(""some-project""); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, someProject.get()); com.google.gerrit.acceptance.RestResponse r = GET(""/projects/""); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(allUsers, someProject, existingProject), result.values()); }",04cf3a5e3eea86490a04b84cfa7a9d7eb5c1ebc9,,listProjects(),2,8,"@org.junit.Test public void listProjects() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey someProject = new com.google.gerrit.reviewdb.client.Project.NameKey(""some-project""); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, someProject.get()); com.google.gerrit.acceptance.RestResponse r = GET(""/projects/""); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(allUsers, someProject, project), result.values()); }",ebbcd722b5b19999297ce9b9a44ea6db57d028cb,listProjects(),43019,222,221
57216,src_main_java_com_google_gwtorm_schema_QueryModel.java,21.0,"private void findParameters(final java.util.List<com.google.gwtorm.schema.ColumnModel> r, final org.antlr.runtime.tree.Tree node) { switch (node.getType()) { case QueryParser.WHERE : extractParameters(r, node); break; default : for (int i = 0; i < (node.getChildCount()); i++) { findParameters(r, node.getChild(i)); } break; } }",f170812454f4263086e6cceb71f4eae226b9520e,"private void findParameters(final java.util.List<com.google.gwtorm.schema.ColumnModel> r, final org.antlr.runtime.tree.Tree node) { switch (node.getType()) { case QueryParser.WHERE : case QueryParser.LIMIT : extractParameters(r, node); break; default : for (int i = 0; i < (node.getChildCount()); i++) { findParameters(r, node.getChild(i)); } break; } }",4abdb7a209f01a052b56c41293a1e309b7131eaa,"findParameters(java.util.List,org.antlr.runtime.tree.Tree)","findParameters(java.util.List,org.antlr.runtime.tree.Tree)",2,21,"private void findParameters(final java.util.List<com.google.gwtorm.schema.ColumnModel> r, final org.antlr.runtime.tree.Tree node) { switch (node.getType()) { case QueryParser.WHERE : extractParameters(r, node); break; default : for (int i = 0; i < (node.getChildCount()); i++) { findParameters(r, node.getChild(i)); } break; } }",f170812454f4263086e6cceb71f4eae226b9520e,"findParameters(java.util.List,org.antlr.runtime.tree.Tree)",51899,104,97
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizerTest.java,1.0,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""p"", zeroId())).isFalse(); }",6c8e1c052c1d6186089b1ec9e0507e4142bc4880,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""p"", zeroId())).isFalse(); }",e0906bf198f3aad4662ea2857a2f49f4890bb37b,testVerifyAgainstDifferentOperation(),testVerifyAgainstDifferentOperation(),8,1,"@org.junit.Test public void testVerifyAgainstDifferentOperation() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1L); assertThat(auth.verifyAuthInfo(info.authToken(), ""p"", zeroId())).isFalse(); }",9e45093e79a481997dcc486e393701720be77a5d,testVerifyAgainstDifferentOperation(),56818,79,81
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectListScreen.java,0.0,@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.visibleProjects(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectList>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.ProjectList result) { createProjectLinkPanel.setVisible(result.canCreateProject()); projects.display(result.getProjects()); projects.finishDisplay(); } }); },f57e0701445754f53feb1b41c1554fec2bcf46cb,@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.projects.ProjectList.all(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ProjectList>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.client.projects.ProjectList result) { createProjectLinkPanel.setVisible(result.canCreateProject()); projects.display(result); projects.finishDisplay(); } }); },ab8aa2b2aa664b75102a46db6df71d783d58f73a,onLoad(),onLoad(),13,0,"@java.lang.Override protected void onLoad() { super.onLoad(); createProjectLinkPanel.setVisible(false); com.google.gerrit.client.account.AccountCapabilities.all(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.account.AccountCapabilities>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.account.AccountCapabilities ac) { createProjectLinkPanel.setVisible(ac.canPerform(com.google.gerrit.client.admin.CREATE_PROJECT)); } }, com.google.gerrit.client.admin.CREATE_PROJECT); com.google.gerrit.client.projects.ProjectMap.all(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ProjectMap>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.client.projects.ProjectMap result) { projects.display(result); projects.finishDisplay(); } }); }",c28c3463403d3b918ec0cb45429139eb676062d5,onLoad(),19442,121,237
169092,java_com_google_gerrit_server_restapi_change_DeleteChange.java,2.0,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(couldDeleteWhenIn(status), perm.testCond(ChangePermission.DELETE))); }",5f55d5edea9bb9c2e9e1b2a14fc02009724ce9f9,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }",3b1473b30432d324220c656fd6062c0ce8925c8e,getDescription(com.google.gerrit.server.change.ChangeResource),getDescription(com.google.gerrit.server.change.ChangeResource),2,2,"@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.reviewdb.client.Change.Status status = rsrc.getChange().getStatus(); com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(db); return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Delete"").setTitle((""Delete change "" + (rsrc.getId()))).setVisible(and(com.google.gerrit.server.restapi.change.DeleteChange.isChangeDeletable(status), perm.testCond(ChangePermission.DELETE))); }",a38120b63581fb3be81b90e2a29cfaf4c49be976,getDescription(com.google.gerrit.server.change.ChangeResource),185690,145,162
71649,src_main_java_com_googlesource_gerrit_plugins_cfoauth_UAAClient.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.String getAccessTokenAttribute(java.lang.String tokenResponse) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { if (com.google.common.base.Strings.isNullOrEmpty(tokenResponse)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(""Can't extract a token from an empty string""); } com.google.gson.JsonObject json = getAsJsonObject(tokenResponse); java.lang.String accessToken = getAttribute(json, com.googlesource.gerrit.plugins.cfoauth.UAAClient.ACCESS_TOKEN_ATTRIBUTE); if (accessToken == null) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(""Can't extract a token: missing or invalid 'access_token' attribute""); } return accessToken; }",88ef49efa373108d920c3bd225670b0561dcce27,,getAccessTokenAttribute(java.lang.String),4,0,"private java.lang.String getAccessTokenAttribute(java.lang.String tokenResponse) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { com.google.gson.JsonObject json = getAsJsonObject(tokenResponse); java.lang.String accessToken = getAttribute(json, com.googlesource.gerrit.plugins.cfoauth.UAAClient.ACCESS_TOKEN_ATTRIBUTE); if (accessToken == null) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(""Can't extract a token: missing or invalid 'access_token' attribute""); } return accessToken; }",6dbc76920e7a9beb82a5399388aa5e601dac1361,getAccessTokenAttribute(java.lang.String),58003,185,135
133072,gerrit-server_src_test_java_com_google_gerrit_server_edit_tree_ChangeFileContentModificationSubject.java,3.0,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject.MODIFICATION_SUBJECT_FACTORY).that(modification); },78457eb2a2458409a0ffec174e006826e551b38b,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.MODIFICATION_SUBJECT_FACTORY).that(modification); },a0faf7ecb947d0466b434e7c147e3ed2220e81ff,assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification),assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification),2,2,public static com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification modification) { return assertAbout(com.google.gerrit.server.edit.tree.ChangeFileContentModificationSubject::new).that(modification); },55767c3f59fe412e567bb8c48d42f29818f333be,assertThat(com.google.gerrit.server.edit.tree.ChangeFileContentModification),82041,71,72
67778,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_ServerInfo.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public native final com.google.gerrit.client.config.SuggestInfo suggest();,95a3cbfdcab5bfc7141fc386098d99a7fbd27dc0,,suggest(),18,8,public native final com.google.gerrit.client.config.ServerInfo.SuggestInfo suggest();,4fc66d8dce7b9bab7709e0ca72ef178d904421a8,suggest(),151917,18,21
104850,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_RestForwarder.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"void tryOnce() throws com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult result = send(); if (!(result.isSuccessful())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error((((""Unable to "" + (name)) + "": "") + (result.getMessage()))); throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(true, (((""Unable to "" + (name)) + "": "") + (result.getMessage()))); } } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(""Error trying to {}"", name, e); throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(isRecoverable(e), e.getMessage()); } }",537d6073d4607397cb4267052644f056706d5293,,tryOnce(),8,12,"void tryOnce() throws com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException { try { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult result = send(); if (!(result.isSuccessful())) { throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(true, (((""Unable to "" + (name)) + "": "") + (result.getMessage()))); } } catch (java.io.IOException e) { throw new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException(isRecoverable(e), e.getMessage(), e); } }",7a41130b5a0b02814df18b11bd17380fe859177b,tryOnce(),65734,240,161
40341,gerrit-server_src_main_java_com_google_gerrit_server_git_VersionedMetaData.java,12.0,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",8b58f2b048affd24b0f7b7d66053ecf139533b8b,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",6b1f3d9f6df676fd9059049e82cc5b68d2c19668,commitAt(org.eclipse.jgit.lib.ObjectId),commitAt(org.eclipse.jgit.lib.ObjectId),7,12,"@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException((((((""Cannot update "" + (ru.getName())) + "" in "") + (db.getDirectory())) + "": "") + (ru.getResult()))); } }",8c89ba7f6ed30e0365c2609a161c95c16355f68d,commitAt(org.eclipse.jgit.lib.ObjectId),121598,241,242
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,49.0,"public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view(""hashtags"").id(hashtag); }",8cafcf2f441f824ea933b347be0d8d4357aa8df1,"public static com.google.gerrit.client.rpc.RestApi hashtag(int changeId, @com.google.gerrit.common.Nullable java.lang.String project, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(changeId, project).view(""hashtags"").id(hashtag); }",04d97f55f769a6b304c2def8b8c345a024a13b2c,"hashtag(int,java.lang.String)","hashtag(int,java.lang.String,java.lang.String)",7,16,"public static com.google.gerrit.client.rpc.RestApi hashtag(@com.google.gerrit.common.Nullable java.lang.String project, int changeId, java.lang.String hashtag) { return com.google.gerrit.client.changes.ChangeApi.change(project, changeId).view(""hashtags"").id(hashtag); }",ec8b50410d72ed771ce4d1964a4a0de9bfe03d38,"hashtag(java.lang.String,int,java.lang.String)",211151,82,81
69683,gerrit-gwtexpui_src_main_java_com_google_gwtexpui_user_client_UserAgent.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isInstalled() { if (!(com.google.gwtexpui.user.client.UserAgent.Flash.checked)) { com.google.gwtexpui.user.client.UserAgent.Flash.installed = com.google.gwtexpui.user.client.UserAgent.Flash.hasFlash(); } return com.google.gwtexpui.user.client.UserAgent.Flash.installed; },ef7fa3ffd91e430d04d5de868a68ae8bdea17bb8,,isInstalled(),2,2,public static boolean isInstalled() { if (!(com.google.gwtexpui.user.client.UserAgent.Flash.checked)) { com.google.gwtexpui.user.client.UserAgent.Flash.installed = com.google.gwtexpui.user.client.UserAgent.Flash.hasFlash(); com.google.gwtexpui.user.client.UserAgent.Flash.checked = true; } return com.google.gwtexpui.user.client.UserAgent.Flash.installed; },1b41f7c37532bbe46480e3bd54b8bc50e80c7dc2,isInstalled(),159384,86,106
123190,gerrit-server_src_main_java_com_google_gerrit_server_change_CreateChange.java,1.0,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectControl projectControl, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } com.google.gerrit.server.project.ProjectState state = projectControl.getProjectState(); org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",ce29c52be2d1ecc858c08db262c45f43a30c225f,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } com.google.gerrit.server.project.ProjectState state = projectState; org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(state, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(state); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",bf47515b6c2e48d6fdf2b434695a121f0c8c49e4,"newMergeCommit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.project.ProjectControl,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.extensions.common.MergeInput,org.eclipse.jgit.lib.PersonIdent,java.lang.String)","newMergeCommit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.extensions.common.MergeInput,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",3,1,"private org.eclipse.jgit.revwalk.RevCommit newMergeCommit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectInserter oi, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.project.ProjectState projectState, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.extensions.common.MergeInput merge, org.eclipse.jgit.lib.PersonIdent authorIdent, java.lang.String commitMessage) throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException { if (com.google.common.base.Strings.isNullOrEmpty(merge.source)) { throw new com.google.gerrit.extensions.restapi.BadRequestException(""merge.source must be non-empty""); } org.eclipse.jgit.revwalk.RevCommit sourceCommit = com.google.gerrit.server.git.MergeUtil.resolveCommit(repo, rw, merge.source); if (!(commits.canRead(projectState, repo, sourceCommit))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((""do not have read permission for: "" + (merge.source))); } com.google.gerrit.server.git.MergeUtil mergeUtil = mergeUtilFactory.create(projectState); java.lang.String mergeStrategy = com.google.common.base.MoreObjects.firstNonNull(com.google.common.base.Strings.emptyToNull(merge.strategy), mergeUtil.mergeStrategyName()); return com.google.gerrit.server.git.MergeUtil.createMergeCommit(oi, repo.getConfig(), mergeTip, sourceCommit, mergeStrategy, authorIdent, commitMessage, rw); }",b3e645bf04fea9469b5da9f2afde56f87e4b4a5a,"newMergeCommit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.revwalk.RevWalk,com.google.gerrit.server.project.ProjectState,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.extensions.common.MergeInput,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",173604,419,403
61604,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchScriptSettingsPanel.java,17.0,private void update() { if ((colWidth.getIntValue()) <= 0) { new com.google.gerrit.client.ErrorDialog(PatchUtil.C.illegalNumberOfColumns()).center(); return; } com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(getValue()); dp.setIgnoreWhitespace(getIgnoreWhitespace()); dp.setContext(getContext()); dp.setTabSize(tabWidth.getIntValue()); dp.setLineLength(colWidth.getIntValue()); dp.setSyntaxHighlighting(syntaxHighlighting.getValue()); dp.setIntralineDifference(intralineDifference.getValue()); dp.setShowWhitespaceErrors(whitespaceErrors.getValue()); dp.setShowLineEndings(showLineEndings.getValue()); dp.setShowTabs(showTabs.getValue()); dp.setSkipDeleted(skipDeleted.getValue()); dp.setSkipUncommented(skipUncommented.getValue()); dp.setExpandAllComments(expandAllComments.getValue()); dp.setRetainHeader(retainHeader.getValue()); dp.setManualReview(manualReview.getValue()); listenablePrefs.set(dp); },2085762040977d75b90d82395c1bbb013c9472d3,private void update() { if ((colWidth.getIntValue()) <= 0) { new com.google.gerrit.client.ErrorDialog(PatchUtil.C.illegalNumberOfColumns()).center(); return; } com.google.gerrit.extensions.common.DiffPreferencesInfo dp = getValue(); dp.ignoreWhitespace = getIgnoreWhitespace(); dp.context = getContext(); dp.tabSize = tabWidth.getIntValue(); dp.lineLength = colWidth.getIntValue(); dp.syntaxHighlighting = syntaxHighlighting.getValue(); dp.intralineDifference = intralineDifference.getValue(); dp.showWhitespaceErrors = whitespaceErrors.getValue(); dp.showLineEndings = showLineEndings.getValue(); dp.showTabs = showTabs.getValue(); dp.skipDeleted = skipDeleted.getValue(); dp.skipUncommented = skipUncommented.getValue(); dp.expandAllComments = expandAllComments.getValue(); dp.retainHeader = retainHeader.getValue(); dp.manualReview = manualReview.getValue(); listenablePrefs.set(dp); },d974a23b5046c907316e01d466fd09e4089bd260,update(),update(),40,19,private void update() { if ((colWidth.getIntValue()) <= 0) { new com.google.gerrit.client.ErrorDialog(PatchUtil.C.illegalNumberOfColumns()).center(); return; } com.google.gerrit.extensions.client.DiffPreferencesInfo dp = getValue(); dp.ignoreWhitespace = getIgnoreWhitespace(); dp.context = getContext(); dp.tabSize = tabWidth.getIntValue(); dp.lineLength = colWidth.getIntValue(); dp.syntaxHighlighting = syntaxHighlighting.getValue(); dp.intralineDifference = intralineDifference.getValue(); dp.showWhitespaceErrors = whitespaceErrors.getValue(); dp.showLineEndings = showLineEndings.getValue(); dp.showTabs = showTabs.getValue(); dp.skipDeleted = skipDeleted.getValue(); dp.skipUncommented = skipUncommented.getValue(); dp.expandAllComments = expandAllComments.getValue(); dp.retainHeader = retainHeader.getValue(); dp.manualReview = manualReview.getValue(); listenablePrefs.set(dp); },0c776f19e832ce701def9c231419db3cd1bb1aa6,update(),127979,242,242
155732,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_HeaderFormatter.java,3.0,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account user) { sb.append(""Submitted-by: ""); appendUserData(user); sb.append(""\n""); }",4a49b1f6af6713206432008e6d5b9e4f9261f05a,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Account account) { sb.append(""Submitted-by: ""); appendUserData(accountId, account); sb.append(""\n""); }",f6904ff0a0243ff63c4ad9e411aa54bd54109e04,appendSubmittedBy(com.google.gerrit.reviewdb.client.Account),"appendSubmittedBy(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.reviewdb.client.Account)",2,2,"void appendSubmittedBy(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Optional<com.google.gerrit.reviewdb.client.Account> account) { sb.append(""Submitted-by: ""); appendUserData(accountId, account); sb.append(""\n""); }",3f03fa734f33567620c8c36f344c0503ea4cf6ff,"appendSubmittedBy(com.google.gerrit.reviewdb.client.Account$Id,java.util.Optional)",175247,77,73
63491,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,9.0,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { who = realm.authenticate(who); try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); final com.google.gerrit.reviewdb.client.AccountExternalId id = db.accountExternalIds().get(key); if (id == null) { return create(db, who); } else { com.google.gerrit.reviewdb.client.Account act = db.accounts().get(id.getAccountId()); if ((act == null) || (!(act.isActive()))) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.getAccountId(), key, false); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",eebb32655533a5e0c783af50388e49e0c5f82307,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { who = realm.authenticate(who); try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); final com.google.gerrit.reviewdb.client.AccountExternalId id = getAccountExternalId(db, key); if (id == null) { return create(db, who); } else { com.google.gerrit.reviewdb.client.Account act = db.accounts().get(id.getAccountId()); if ((act == null) || (!(act.isActive()))) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.getAccountId(), key, false); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",9a021f5cefc1bf085a9d449f0d54d0fa9ae2bca9,authenticate(com.google.gerrit.server.account.AuthRequest),authenticate(com.google.gerrit.server.account.AuthRequest),6,12,"public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId id = getAccountExternalId(db, key); if (id == null) { return create(db, who); } else { com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.getAccountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException(""Authentication error, account inactive""); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.getAccountId(), key, false); } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.common.errors.NameAlreadyUsedException | com.google.gerrit.common.errors.InvalidUserNameException e) { throw new com.google.gerrit.server.account.AccountException(""Authentication error"", e); } }",d32269d84664110fe1cfb0905f3cc203313f525b,authenticate(com.google.gerrit.server.account.AuthRequest),189077,309,327
39416,gerrit-server_src_main_java_com_google_gerrit_server_dashboard_ListDashboards.java,5.0,"private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> loadDashboards(final com.google.gerrit.reviewdb.client.Project.NameKey projectName, final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk revWalk, final org.eclipse.jgit.lib.Ref ref) throws java.io.IOException { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output = com.google.common.collect.Maps.newTreeMap(); final org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); final org.eclipse.jgit.revwalk.RevTree tree = commit.getTree(); org.eclipse.jgit.treewalk.TreeWalk treeWalk = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { treeWalk.addTree(tree); treeWalk.setRecursive(true); while (treeWalk.next()) { com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo info = new com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo(); info.name = treeWalk.getPathString(); info.refName = ref.getName(); info.projectName = projectName.get(); info.id = com.google.gerrit.server.dashboard.ListDashboards.createId(info.refName, info.name); final org.eclipse.jgit.lib.ObjectLoader loader = repo.open(treeWalk.getObjectId(0)); java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(); loader.copyTo(out); org.eclipse.jgit.lib.Config dashboardConfig = new org.eclipse.jgit.lib.Config(); try { dashboardConfig.fromText(new java.lang.String(out.toByteArray(), ""UTF-8"")); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.dashboard.ListDashboards.log.warn(""Failed to load dashboards"", e); } info.description = dashboardConfig.getString(""main"", null, ""description""); final java.lang.StringBuilder query = new java.lang.StringBuilder(); query.append(""title=""); query.append(info.name.replaceAll("" "", ""+"")); final java.util.Set<java.lang.String> sections = dashboardConfig.getSubsections(""section""); for (final java.lang.String section : sections) { query.append(""&""); query.append(section.replaceAll("" "", ""+"")); query.append(""=""); query.append(dashboardConfig.getString(""section"", section, ""query"")); } info.parameters = query.toString(); output.put(info.id, info); } } finally { treeWalk.release(); } return output; }",fc6ea7a71e4020ebf328e73d1850862c5c4f6c4c,"private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> loadDashboards(final com.google.gerrit.reviewdb.client.Project project, final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk revWalk, final org.eclipse.jgit.lib.Ref ref) throws java.io.IOException { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output = com.google.common.collect.Maps.newTreeMap(); final org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); final org.eclipse.jgit.revwalk.RevTree tree = commit.getTree(); org.eclipse.jgit.treewalk.TreeWalk treeWalk = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { treeWalk.addTree(tree); treeWalk.setRecursive(true); while (treeWalk.next()) { final org.eclipse.jgit.lib.ObjectLoader loader = repo.open(treeWalk.getObjectId(0)); final com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo info = loadDashboard(project, ref.getName(), treeWalk.getPathString(), loader); output.put(info.id, info); } } finally { treeWalk.release(); } return output; }",44a6f461b0722551ad9b94d9a5689495675ecb54,"loadDashboards(com.google.gerrit.reviewdb.client.Project$NameKey,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.Ref)","loadDashboards(com.google.gerrit.reviewdb.client.Project,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.Ref)",3,7,"private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> loadDashboards(final com.google.gerrit.reviewdb.client.Project project, final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.revwalk.RevWalk revWalk, final org.eclipse.jgit.lib.Ref ref) throws java.io.IOException { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards = com.google.common.collect.Maps.newTreeMap(); org.eclipse.jgit.treewalk.TreeWalk treeWalk = new org.eclipse.jgit.treewalk.TreeWalk(repo); try { final org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(ref.getObjectId()); final org.eclipse.jgit.revwalk.RevTree tree = commit.getTree(); treeWalk.addTree(tree); treeWalk.setRecursive(true); while (treeWalk.next()) { final org.eclipse.jgit.lib.ObjectLoader loader = repo.open(treeWalk.getObjectId(0)); final com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo info = loadDashboard(project, ref.getName(), treeWalk.getPathString(), loader); dashboards.put(info.id, info); } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.dashboard.ListDashboards.log.warn((((""Failed to load dashboards of project "" + (project.getName())) + "" from ref "") + (ref.getName())), e); } catch (java.io.IOException e) { com.google.gerrit.server.dashboard.ListDashboards.log.warn((((""Failed to load dashboards of project "" + (project.getName())) + "" from ref "") + (ref.getName())), e); } finally { treeWalk.release(); } return dashboards; }",4a7d0cef3dfdd49ff7e0877737da13086f333933,"loadDashboards(com.google.gerrit.reviewdb.client.Project,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevWalk,org.eclipse.jgit.lib.Ref)",17143,335,465
79515,gerrit-server_src_main_java_com_google_gerrit_server_query_Predicate.java,4.0,public abstract boolean match(T object) throws com.google.gwtorm.server.OrmException;,055bf6ab303fcd32ab8122060b5cbc29ece623f5,public boolean isMatchable() { return (this) instanceof com.google.gerrit.server.query.MatchablePredicate; },a398b39439eae10288f81ee6302dbaf2edfd0ea8,match(java.lang.Object),isMatchable(),3,9,public boolean isMatchable() { return (this) instanceof com.google.gerrit.server.query.Matchable; },f829218091293e519bb36a50f82c120f1030824c,isMatchable(),43797,28,27
30721,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_AdminSetParent.java,2.0,private java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getAllParents(final com.google.gerrit.reviewdb.Project.NameKey projectName) { final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> parents = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); com.google.gerrit.reviewdb.Project.NameKey p = projectName; while ((p != null) && (parents.add(p))) { final com.google.gerrit.server.project.ProjectState e = projectCache.get(p); if (e == null) { break; } p = getParentName(e.getProject()); } return parents; },7d0b66d42c45d60d7d1268f961709aba26e19073,private java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> getAllParents(final com.google.gerrit.reviewdb.Project.NameKey projectName) { final java.util.Set<com.google.gerrit.reviewdb.Project.NameKey> parents = new java.util.HashSet<com.google.gerrit.reviewdb.Project.NameKey>(); com.google.gerrit.reviewdb.Project.NameKey p = projectName; while ((p != null) && (parents.add(p))) { final com.google.gerrit.server.project.ProjectState e = projectCache.get(p); if (e == null) { break; } p = parentResolver.get(e.getProject()); } return parents; },7cf71b115d2defa253175751d2840a624b2dcc87,getAllParents(com.google.gerrit.reviewdb.Project$NameKey),getAllParents(com.google.gerrit.reviewdb.Project$NameKey),3,2,private java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> getAllParents(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { final java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> parents = new java.util.HashSet<com.google.gerrit.reviewdb.client.Project.NameKey>(); com.google.gerrit.reviewdb.client.Project.NameKey p = projectName; while ((p != null) && (parents.add(p))) { final com.google.gerrit.server.project.ProjectState e = projectCache.get(p); if (e == null) { break; } p = e.getProject().getParent(allProjectsName); } return parents; },f42c684db522fdb5d94b2148ec73e4eda0ce9507,getAllParents(com.google.gerrit.reviewdb.client.Project$NameKey),214220,179,190
105095,gerrit-server_src_main_java_com_google_gerrit_server_api_projects_ProjectApiImpl.java,22.0,"@java.lang.Override public void deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranches.apply(checkExists(), in); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete branches"", e); } }",982e31e4b6e44e990d56fd7dffc3688bcd5bb5e0,"@java.lang.Override public void deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranches.apply(checkExists(), in); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot delete branches"", e); } }",e4756f4275202133cd50282ff912c62841bbb4e2,deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput),deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput),8,22,"@java.lang.Override public void deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteBranches.apply(checkExists(), in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot delete branches"", e); } }",80970e554f14cfd777882244207600ea1ea44b28,deleteBranches(com.google.gerrit.extensions.api.projects.DeleteBranchesInput),80322,121,95
21950,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_account_GroupDetailFactory.java,0.0,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); break; } detail.setAccounts(aic.create()); return detail; }",b067d6f5255f98d44ec6d993fb865fc9481291a6,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludedGroups(loadIncludedGroups()); break; } detail.setAccounts(aic.create()); detail.setGroups(gic.create()); return detail; }",e2054b94563d8609c3fc62ccab36d67461feff90,call(),call(),9,1,"@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }",5382dc26cc824e1be2dac6e7dd8778e49ccdc8fd,call(),189977,192,201
126430,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,113.0,"private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.project.ChangeControl> ctls = changeFinder.find(r.getChangeId(), atrScope.get().getUser()); assertThat(ctls).hasSize(1); return changeResourceFactory.create(ctls.get(0)); }",711be0a2f3ceb51a2cfe4c6815c5d5f3ffaa1f27,"private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { java.util.List<com.google.gerrit.server.notedb.ChangeNotes> notes = changeFinder.find(r.getChangeId()); assertThat(notes).hasSize(1); return changeResourceFactory.create(changeControlFactory.controlFor(notes.get(0), atrScope.get().getUser())); }",dfd36e70cb2d3679e7401f5591f867295bee86b5,parseResource(com.google.gerrit.acceptance.PushOneCommit$Result),parseResource(com.google.gerrit.acceptance.PushOneCommit$Result),5,113,private com.google.gerrit.server.change.ChangeResource parseResource(com.google.gerrit.acceptance.PushOneCommit.Result r) throws java.lang.Exception { return parseChangeResource(r.getChangeId()); },c408acc3785237eb1217cfc9de808c6522a3f0d4,parseResource(com.google.gerrit.acceptance.PushOneCommit$Result),40362,109,53
54044,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_LabelTypeIT.java,3.0,"@org.junit.Test public void copyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; codeReview.setCopyMaxScore(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); review(r, 2); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 2); }",dd62a25a48bdf9a008d66d45ddd49c5e37e3a525,"@org.junit.Test public void copyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; codeReview.setCopyMaxScore(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).approve(); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 2); }",1dda470fe980bea9d6c295a5da87b601aa7d6ab2,copyMaxScoreOnRework(),copyMaxScoreOnRework(),3,3,"@org.junit.Test public void copyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = ""test commit""; java.lang.String file = ""a.txt""; codeReview.setCopyMaxScore(true); saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, ""first contents""); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, ""refs/for/master""); revision(r).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, ""second contents"", r.getChangeId()); r = push.to(git, ""refs/for/master""); assertApproval(r, 2); }",a7f5d77550af8e1414c11c88310e0afbaa5fa5a3,copyMaxScoreOnRework(),39641,188,208
13295,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_SideBySideTable.java,2.0,"private void appendHeader(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().iconCell()); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderOld()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderNew()); m.closeTd(); m.closeTr(); }",297ec36b4fa8ea339477cebece8c1cc2e04548df,"private void appendHeader(com.google.gerrit.common.data.PatchScript script, final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().iconCell()); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderOld()); m.br(); if (0 < (script.getA().size())) { if ((idSideA) == null) { downloadLink(m, patchKey, ""1""); } else { downloadLink(m, new com.google.gerrit.reviewdb.Patch.Key(idSideA, patchKey.get()), ""0""); } } m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderNew()); m.br(); if (0 < (script.getA().size())) { downloadLink(m, patchKey, ""0""); } m.closeTd(); m.closeTr(); }",43e06d1c8c96f8e9200e7b0f5c31ab303e039007,appendHeader(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder),"appendHeader(com.google.gerrit.common.data.PatchScript,com.google.gwtexpui.safehtml.client.SafeHtmlBuilder)",2,2,"private void appendHeader(com.google.gerrit.common.data.PatchScript script, final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m) { m.openTr(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().iconCell()); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderOld()); m.br(); if (0 < (script.getA().size())) { if ((idSideA) == null) { downloadLink(m, patchKey, ""1""); } else { downloadLink(m, new com.google.gerrit.reviewdb.Patch.Key(idSideA, patchKey.get()), ""0""); } } m.closeTd(); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.addStyleName(Gerrit.RESOURCES.css().lineNumber()); m.closeTd(); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileColumnHeader()); m.setAttribute(""width"", ""50%""); m.append(PatchUtil.C.patchHeaderNew()); m.br(); if (0 < (script.getB().size())) { downloadLink(m, new com.google.gerrit.reviewdb.Patch.Key(idSideB, patchKey.get()), ""0""); } m.closeTd(); m.closeTr(); }",6e731bf593be2dc2ad52ff1ec614cf1b14b3c4d8,"appendHeader(com.google.gerrit.common.data.PatchScript,com.google.gwtexpui.safehtml.client.SafeHtmlBuilder)",162728,382,405
38722,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationState.java,,,,public boolean hasPushTask() { taskLock.lock(); try { if ((totalPushCount) == 0) { return false; } } finally { taskLock.unlock(); } return true; },611686536d963d315437af50222b2f329dd90c7b,,hasPushTask(),9,3,public boolean hasPushTask() { return (totalPushTasksCount) != 0; },4264d8627389de37939b1d3cf5dddd9acd72a4d1,hasPushTask(),206238,41,17
47240,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupControl.java,0.0,"public com.google.gerrit.server.account.GroupControl controlFor(com.google.gerrit.common.data.GroupDescription.Basic group) { return new com.google.gerrit.server.account.GroupControl(user.get(), group); }",1a3f033d088cd4050d5e498edb10173bd00b9670,"public com.google.gerrit.server.account.GroupControl controlFor(com.google.gerrit.common.data.GroupDescription.Basic group) { return new com.google.gerrit.server.account.GroupControl(user.get(), group, groupBackend); }",2dbeca6ee54e204cf8152c93c1b3ae63d3da7443,controlFor(com.google.gerrit.common.data.GroupDescription$Basic),controlFor(com.google.gerrit.common.data.GroupDescription$Basic),3,0,"public com.google.gerrit.server.account.GroupControl controlFor(com.google.gerrit.common.data.GroupDescription.Basic group) { return new com.google.gerrit.server.account.GroupControl(user.get(), group); }",1a3f033d088cd4050d5e498edb10173bd00b9670,controlFor(com.google.gerrit.common.data.GroupDescription$Basic),17969,61,58
35221,gerrit-server_src_main_java_com_google_gerrit_server_git_NotesBranchUtil.java,,,,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (!(base.contains(n))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",a3471776a40aac4c47b9d71740c1d922cf479ba8,,"commitNewNotes(org.eclipse.jgit.notes.NoteMap,java.lang.String,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",7,0,"public final org.eclipse.jgit.notes.NoteMap commitNewNotes(org.eclipse.jgit.notes.NoteMap notes, java.lang.String notesBranch, org.eclipse.jgit.lib.PersonIdent commitAuthor, java.lang.String commitMessage) throws java.io.IOException, org.eclipse.jgit.api.errors.ConcurrentRefUpdateException { this.overwrite = false; commitNotes(notes, notesBranch, commitAuthor, commitMessage); org.eclipse.jgit.notes.NoteMap newlyCreated = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); for (org.eclipse.jgit.notes.Note n : notes) { if (((base) == null) || (!(base.contains(n)))) { newlyCreated.set(n, n.getData()); } } return newlyCreated; }",6a74ee00e5d4ab12d453fc1ba0381b1a9e9cfe27,"commitNewNotes(org.eclipse.jgit.notes.NoteMap,java.lang.String,org.eclipse.jgit.lib.PersonIdent,java.lang.String)",168762,162,185
41450,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeInfoBlock.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if (((event.getSource()) == (newTopic)) && ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) { doTopicEdit(); } },bda70d79213b733ffc98f59fbf142199b9091e8d,,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),2,7,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if (((event.getSource()) == (newTopic)) && ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) { doTopicEdit(); } },8b19026f946b4dd5535d88b079135bf891e33348,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),91526,77,79
148032,java_com_google_gerrit_server_schema_SchemaCreator.java,6.0,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); }",5243df379b1af0b6f8c0dff26dd7bd6e2d98ae2f,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created account wasn't automatically loaded"")); }",521ddfd45fa788403e7c32c9323c6b98241f1843,"createGroupInNoteDb(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)","createGroupInNoteDb(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",17,6,"private com.google.gerrit.server.group.InternalGroup createGroupInNoteDb(org.eclipse.jgit.lib.Repository allUsersRepo, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmDuplicateKeyException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(allUsersRepo, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName = groupUpdate.getName().orElseGet(groupCreation::getNameKey); com.google.gerrit.server.group.db.GroupNameNotes groupNameNotes = com.google.gerrit.server.group.db.GroupNameNotes.loadForNewGroup(allUsersRepo, groupCreation.getGroupUUID(), groupName); commit(allUsersRepo, groupConfig, groupNameNotes); return groupConfig.getLoadedGroup().orElseThrow(() -> new java.lang.IllegalStateException(""Created group wasn't automatically loaded"")); }",5243df379b1af0b6f8c0dff26dd7bd6e2d98ae2f,"createGroupInNoteDb(org.eclipse.jgit.lib.Repository,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",218309,327,327
131570,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,63.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void pushToPublishMagicBranchIsAllowed() throws java.lang.Exception { createChange(""refs/publish/master""); com.google.gerrit.acceptance.PushOneCommit.Result result = pushTo(""refs/publish/master""); result.assertOkStatus(); assertThat(result.getMessage()).endsWith(""Pushing to refs/publish/* will be deprecated, use refs/for/* instead.\n""); }",a58cedf487db8e726e646da036fd7fa353070fef,,pushToPublishMagicBranchIsAllowed(),6,58,"@org.junit.Test public void pushToPublishMagicBranchIsAllowed() throws java.lang.Exception { createChange(""refs/publish/master""); com.google.gerrit.acceptance.PushOneCommit.Result result = pushTo(""refs/publish/master""); result.assertOkStatus(); assertThat(result.getMessage()).endsWith(""Pushing to refs/publish/* is deprecated, use refs/for/* instead.\n""); }",bbf84a397164971b0f6102dcdce65a777da0c368,pushToPublishMagicBranchIsAllowed(),45900,99,98
43472,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_AddRemoveGroupMembersIT.java,,,,"@org.junit.Test public void addRemoveMember() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount user = accounts.create(""user""); assertEquals(HttpStatus.SC_CREATED, PUT(""/groups/Administrators/members/user"")); assertMembers(""Administrators"", admin, user); assertEquals(HttpStatus.SC_NO_CONTENT, DELETE(""/groups/Administrators/members/user"")); assertMembers(""Administrators"", admin); }",164d6859b6fda2c41539b6a75161e1f674089fcc,,addRemoveMember(),4,2,"@org.junit.Test public void addRemoveMember() throws java.lang.Exception { com.google.gerrit.acceptance.TestAccount u = accounts.create(""user"", ""user@example.com"", ""Full Name""); com.google.gerrit.acceptance.RestResponse r = PUT(""/groups/Administrators/members/user""); assertEquals(HttpStatus.SC_CREATED, r.getStatusCode()); com.google.gerrit.acceptance.rest.group.AccountInfo ai = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.AccountInfo>() {}.getType()); assertAccountInfo(u, ai); assertMembers(""Administrators"", admin, u); r.consume(); assertEquals(HttpStatus.SC_NO_CONTENT, DELETE(""/groups/Administrators/members/user"")); assertMembers(""Administrators"", admin); }",e69e3028e0cab08f88f600deace2ad07eafa243b,addRemoveMember(),204722,98,208
61090,src_main_java_com_googlesource_gerrit_plugins_replication_ReplicationFilter.java,,,,public static boolean isRE(java.lang.String str) { return str.startsWith(AccessSection.REGEX_PREFIX); },39cbd3f099c5f36062e5298fefbf1958d4cabc1a,,isRE(java.lang.String),8,1,"public static com.googlesource.gerrit.plugins.replication.ReplicationFilter.PatternType getPatternType(java.lang.String pattern) { if (pattern.startsWith(AccessSection.REGEX_PREFIX)) { return com.googlesource.gerrit.plugins.replication.ReplicationFilter.PatternType.REGEX; } else if (pattern.endsWith(""*"")) { return com.googlesource.gerrit.plugins.replication.ReplicationFilter.PatternType.WILDCARD; } else { return com.googlesource.gerrit.plugins.replication.ReplicationFilter.PatternType.EXACT_MATCH; } }",c0c2ff800f66d8761a22bd482dbfdcc70bd1261c,getPatternType(java.lang.String),119330,27,126
79945,gerrit-httpd_src_main_java_com_google_gerrit_httpd_plugins_LfsPluginServlet.java,1.0,@java.lang.Override public void remove() { guiceFilter.destroy(); },91901944c4e570875de3bcffa3776216a782f6e6,@java.lang.Override public void remove() { guiceFilter.destroy(); if (guiceFilter == (filter)) { filter = null; } },024618f7050e3629fa78313884918f2b4ea139a6,remove(),remove(),3,1,@java.lang.Override public void remove() { guiceFilter.destroy(); },91901944c4e570875de3bcffa3776216a782f6e6,remove(),121731,32,18
93484,gerrit-server_src_main_java_com_google_gerrit_server_index_group_AllGroupsIndexer.java,,,,"@java.lang.Override public SiteIndexer.Result indexAll(com.google.gerrit.server.index.group.GroupIndex index) { org.eclipse.jgit.lib.ProgressMonitor progress = new org.eclipse.jgit.lib.TextProgressMonitor(new java.io.PrintWriter(progressOut)); progress.start(2); com.google.common.base.Stopwatch sw = com.google.common.base.Stopwatch.createStarted(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids; try { uuids = collectGroups(progress); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.group.AllGroupsIndexer.log.error(""Error collecting groups"", e); return new com.google.gerrit.server.index.group.Result(sw, false, 0, 0); } return reindexGroupss(index, uuids, progress); }",9edf8095fb110687912aa4ec38f6e664e79b0c56,,indexAll(com.google.gerrit.server.index.group.GroupIndex),7,2,"@java.lang.Override public SiteIndexer.Result indexAll(com.google.gerrit.server.index.group.GroupIndex index) { org.eclipse.jgit.lib.ProgressMonitor progress = new org.eclipse.jgit.lib.TextProgressMonitor(new java.io.PrintWriter(progressOut)); progress.start(2); com.google.common.base.Stopwatch sw = com.google.common.base.Stopwatch.createStarted(); java.util.List<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids; try { uuids = collectGroups(progress); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.index.group.AllGroupsIndexer.log.error(""Error collecting groups"", e); return new com.google.gerrit.server.index.SiteIndexer.Result(sw, false, 0, 0); } return reindexGroups(index, uuids, progress); }",449be25ada2b7a481d3fabaebea886006cf38077,indexAll(com.google.gerrit.server.index.group.GroupIndex),140428,215,215
99230,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_EvictCacheRestApiServlet.java,2.0,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (com.ericsson.gerrit.plugins.evictcache.EvictCacheRestApiServlet.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.evictcache.EvictCacheRestApiServlet.logger.debug((""Invalidated "" + cacheName)); }",493cf392e1d13b2a9a184531cea5ef221b3c5ae8,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (CacheContants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.EvictCacheRestApiServlet.logger.debug((""Invalidated "" + cacheName)); }",5bcc11c4611a1cc3cd798862545249fb79e38525,"evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)","evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)",6,2,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug((""Invalidated "" + cacheName)); }",b3350f7db034961a8458fa8ac7473c1fe5a9b55f,"evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)",188630,103,99
36337,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchSetSelectBox.java,,,,"private void addLink(java.lang.String label, final com.google.gerrit.reviewdb.client.PatchSet.Id id) { final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(label); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) { idSideA = id; } else { idSideB = id; } com.google.gerrit.reviewdb.client.Patch.Key k = new com.google.gerrit.reviewdb.client.Patch.Key(idSideB, patchKey.get()); switch (screenType) { case SIDE_BY_SIDE : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchSideBySide(idSideA, k)); break; case UNIFIED : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchUnified(idSideA, k)); break; } } }); links.add(anchor); linkPanel.add(anchor); }",852126623fd8834962471c3afe4eb66af5e388f0,,"addLink(java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id)",5,5,"private void addLink(java.lang.String label, final com.google.gerrit.reviewdb.client.PatchSet.Id id) { final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(label); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) { idSideA = id; } else { idSideB = id; } com.google.gerrit.reviewdb.client.Patch.Key keySideB = new com.google.gerrit.reviewdb.client.Patch.Key(idSideB, patchKey.get()); switch (screenType) { case SIDE_BY_SIDE : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchSideBySide(idSideA, keySideB)); break; case UNIFIED : com.google.gerrit.client.Gerrit.display(com.google.gerrit.client.Dispatcher.toPatchUnified(idSideA, keySideB)); break; } } }); links.add(anchor); linkPanel.add(anchor); }",baddcc3689f841a71ce4cb10019be825e5608a14,"addLink(java.lang.String,com.google.gerrit.reviewdb.client.PatchSet$Id)",88568,319,325
47240,gerrit-gwtui_src_main_java_com_google_gerrit_client_groups_GroupInfo.java,7.0,public final void setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { owner_id(com.google.gwt.http.client.URL.encodePathSegment(uuid.get())); },36811725b94865003696b73fb9920217ff3e48a8,public final void setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { owner_id(com.google.gwt.http.client.URL.encodePathSegment(com.google.gwt.http.client.URL.encodeQueryString(uuid.get()))); },caf4aff07a0b037f7370f4885a1c26f53b14bff1,setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),3,7,public final void setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { owner_id(com.google.gwt.http.client.URL.encodeQueryString(uuid.get())); },dd2e6581329a7aeb3eb8c4021aa2b5b0cdb19ece,setOwnerUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),17977,66,51
71870,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PreferencesBox.java,24.0,"private void initIgnoreWhitespace() { ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_NONE(), com.google.gerrit.client.diff.IGNORE_NONE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_AT_EOL(), com.google.gerrit.client.diff.IGNORE_SPACE_AT_EOL.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_CHANGE(), com.google.gerrit.client.diff.IGNORE_SPACE_CHANGE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_ALL_SPACE(), com.google.gerrit.client.diff.IGNORE_ALL_SPACE.name()); }",4addc5db4dee39671536ca4305a0c884f5453192,"private void initIgnoreWhitespace() { ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_NONE(), com.google.gerrit.client.diff.IGNORE_NONE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_AT_EOL(), com.google.gerrit.client.diff.IGNORE_AT_LINE_END.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_SPACE_CHANGE(), com.google.gerrit.client.diff.IGNORE_LEADING_AND_END.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_ALL_SPACE(), com.google.gerrit.client.diff.IGNORE_ALL.name()); }",288f484133475b639ea23714de84c3d39b943f72,initIgnoreWhitespace(),initIgnoreWhitespace(),5,24,"private void initIgnoreWhitespace() { ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_NONE(), com.google.gerrit.client.diff.IGNORE_NONE.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_TRAILING(), com.google.gerrit.client.diff.IGNORE_TRAILING.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_LEADING_AND_TRAILING(), com.google.gerrit.client.diff.IGNORE_LEADING_AND_TRAILING.name()); ignoreWhitespace.addItem(PatchUtil.C.whitespaceIGNORE_ALL(), com.google.gerrit.client.diff.IGNORE_ALL.name()); }",c0ece5e1f10348bdc570c559b66133dc94e9e324,initIgnoreWhitespace(),150031,152,148
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchedProjectsScreen.java,21.0,protected void populateProjects() { Util.PROJECT_SVC.visibleProjects(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectList>() { @java.lang.Override public void onSuccess(final com.google.gerrit.common.data.ProjectList result) { projectsTab.display(result.getProjects()); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } } }); },5aa0cc6982c80dcb05e6ef2fc09fe424ed5ffb01,protected void populateProjects() { com.google.gerrit.client.projects.ProjectList.all(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ProjectList>() { @java.lang.Override public void onSuccess(final com.google.gerrit.client.projects.ProjectList result) { projectsTab.display(result); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } } }); },f637aace95f88b74a5252d9e700b216f6990df7c,populateProjects(),populateProjects(),13,21,protected void populateProjects() { com.google.gerrit.client.projects.ProjectMap.all(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ProjectMap>() { @java.lang.Override public void onSuccess(final com.google.gerrit.client.projects.ProjectMap result) { projectsTab.display(result); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } } }); },2010f24abbc6c52578b85c4e363a0931d0d65b82,populateProjects(),19458,108,108
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeActions.java,9.0,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }; }",896578826f153813a88e2d60a9a6d2cb2a4efad5,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(final com.google.gerrit.reviewdb.client.Change.Id id, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id, project)); } else { super.onFailure(err); } } }; }",f6b4331ed8f4154c6e320e1a415fb61f39c47d16,"cs(com.google.gerrit.reviewdb.client.Change$Id,com.google.gwt.user.client.ui.Button[])","cs(com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gwt.user.client.ui.Button[])",7,10,"public static com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject> cs(com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.reviewdb.client.Change.Id id, com.google.gwt.user.client.ui.Button... draftButtons) { com.google.gerrit.client.change.ChangeActions.setEnabled(false, draftButtons); return new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } } }; }",e8ce006eb12774d4fff11d6ccb875c7896c029a3,"cs(com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id,com.google.gwt.user.client.ui.Button[])",210274,347,335
60917,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,2.0,"public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getProjectLinks(java.lang.String project) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.ProjectWebLink webLink : projectLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getProjectUrl(project), webLink.getTarget())); } return links; }",5a163964d980228f9db023152ff4b6407dc76c79,"public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getProjectLinks(java.lang.String project) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.ProjectWebLink webLink : projectLinks) { java.lang.String name = webLink.getLinkName(); java.lang.String url = webLink.getProjectUrl(project); if ((!(com.google.common.base.Strings.isNullOrEmpty(name))) && (!(com.google.common.base.Strings.isNullOrEmpty(url)))) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(name, webLink.getImageUrl(), url, webLink.getTarget())); } } return links; }",3ae5e2072042d73b8cc57b2d0b9f1f6db5985fd2,getProjectLinks(java.lang.String),getProjectLinks(java.lang.String),27,7,"public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getProjectLinks(final java.lang.String project) { return filterLinks(projectLinks, new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.extensions.common.WebLinkInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo apply(com.google.gerrit.extensions.webui.WebLink webLink) { return ((com.google.gerrit.extensions.webui.ProjectWebLink) (webLink)).getProjectWeblink(project); } }); }",a4795c15cdcc0992db053bc1af53ad2e1e11580f,getProjectLinks(java.lang.String),39927,201,163
100331,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginLoader.java,42.0,"public java.lang.String getGerritPluginName(java.nio.file.Path srcPath) { java.lang.String fileName = srcPath.getFileName().toString(); if (com.google.gerrit.server.plugins.PluginLoader.isJsPlugin(fileName)) { return fileName.substring(0, ((fileName.length()) - 3)); } if (serverPluginFactory.handles(srcPath)) { return serverPluginFactory.getPluginName(srcPath); } return null; }",1ce2984be7b005671a8634d0ffb741b9ff8d0747,"public java.lang.String getGerritPluginName(java.nio.file.Path srcPath) { java.lang.String fileName = srcPath.getFileName().toString(); if (com.google.gerrit.server.plugins.PluginLoader.isJsPlugin(fileName)) { return fileName.substring(0, fileName.lastIndexOf('.')); } if (serverPluginFactory.handles(srcPath)) { return serverPluginFactory.getPluginName(srcPath); } return null; }",fef73dcf820d27371afe94d9dccf557fe9beb691,getGerritPluginName(java.nio.file.Path),getGerritPluginName(java.nio.file.Path),4,42,"public java.lang.String getGerritPluginName(java.nio.file.Path srcPath) { java.lang.String fileName = srcPath.getFileName().toString(); if (com.google.gerrit.server.plugins.PluginLoader.isUiPlugin(fileName)) { return fileName.substring(0, fileName.lastIndexOf('.')); } if (serverPluginFactory.handles(srcPath)) { return serverPluginFactory.getPluginName(srcPath); } return null; }",31876787b54d0fd38dd7e9bfe494da4abfb337f8,getGerritPluginName(java.nio.file.Path),83845,101,101
76791,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,40.0,@java.lang.Override protected void loadDefaults() { approvals = com.google.common.collect.ImmutableListMultimap.of(); reviewers = com.google.common.collect.ImmutableSetMultimap.of(); submitRecords = com.google.common.collect.ImmutableList.of(); allChangeMessages = com.google.common.collect.ImmutableList.of(); changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of(); comments = com.google.common.collect.ImmutableListMultimap.of(); hashtags = com.google.common.collect.ImmutableSet.of(); },477a39ad5fcc6f67fd1de2f9a8ce812d60175905,@java.lang.Override protected void loadDefaults() { approvals = com.google.common.collect.ImmutableListMultimap.of(); reviewers = com.google.common.collect.ImmutableSetMultimap.of(); submitRecords = com.google.common.collect.ImmutableList.of(); allChangeMessages = com.google.common.collect.ImmutableList.of(); changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of(); comments = com.google.common.collect.ImmutableListMultimap.of(); hashtags = com.google.common.collect.ImmutableSet.of(); patchSets = com.google.common.collect.ImmutableSortedMap.of(); },e79ab209eb33449a800e0e721bd008258d92059c,loadDefaults(),loadDefaults(),4,40,@java.lang.Override protected void loadDefaults() { approvals = com.google.common.collect.ImmutableListMultimap.of(); reviewers = com.google.common.collect.ImmutableSetMultimap.of(); submitRecords = com.google.common.collect.ImmutableList.of(); allChangeMessages = com.google.common.collect.ImmutableList.of(); changeMessagesByPatchSet = com.google.common.collect.ImmutableListMultimap.of(); comments = com.google.common.collect.ImmutableListMultimap.of(); hashtags = com.google.common.collect.ImmutableSet.of(); patchSets = com.google.common.collect.ImmutableSortedMap.of(); allPastReviewers = com.google.common.collect.ImmutableList.of(); },33ad95ce7fae4181474490f0d96674a739129fdd,loadDefaults(),10075,144,161
68543,src_test_java_com_googlesource_gerrit_plugins_hooks_workflow_action_AddVelocityCommentTest.java,0.0,"public void testInlineWithSingleProperty() throws java.io.IOException { com.googlesource.gerrit.plugins.its.workflow.ActionRequest actionRequest = createMock(com.googlesource.gerrit.plugins.its.workflow.ActionRequest.class); expect(actionRequest.getParameter(1)).andReturn(""inline""); expect(actionRequest.getParameters()).andReturn(new java.lang.String[]{ ""inline"", ""${subject}"" }); java.util.Set<com.googlesource.gerrit.plugins.its.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); com.googlesource.gerrit.plugins.its.workflow.Property propertySubject = createMock(com.googlesource.gerrit.plugins.its.workflow.Property.class); expect(propertySubject.getKey()).andReturn(""subject"").anyTimes(); expect(propertySubject.getValue()).andReturn(""Rosebud"").anyTimes(); properties.add(propertySubject); org.easymock.IAnswer<java.lang.Boolean> answer = new com.googlesource.gerrit.plugins.hooks.workflow.action.AddVelocityCommentTest.VelocityWriterFiller(""Rosebud""); org.easymock.Capture<org.apache.velocity.VelocityContext> contextCapture = new org.easymock.Capture(); expect(velocityRuntime.evaluate(capture(contextCapture), ((java.io.Writer) (anyObject())), ((java.lang.String) (anyObject())), eq(""${subject}""))).andAnswer(answer); its.addComment(""4711"", ""Rosebud""); replayMocks(); com.googlesource.gerrit.plugins.its.workflow.action.AddVelocityComment addVelocityComment = createAddVelocityComment(); addVelocityComment.execute(""4711"", actionRequest, properties); org.apache.velocity.VelocityContext context = contextCapture.getValue(); assertEquals(""Subject property of context did not match"", ""Rosebud"", context.get(""subject"")); }",7c6aa894e8075f8fa834fb3bd9560d29e59cfaa1,"public void testInlineWithSingleProperty() throws java.io.IOException { com.googlesource.gerrit.plugins.its.workflow.ActionRequest actionRequest = createMock(com.googlesource.gerrit.plugins.its.workflow.ActionRequest.class); expect(actionRequest.getParameter(1)).andReturn(""inline""); expect(actionRequest.getParameters()).andReturn(new java.lang.String[]{ ""inline"", ""${subject}"" }); java.util.Set<com.googlesource.gerrit.plugins.its.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); com.googlesource.gerrit.plugins.its.workflow.Property propertySubject = createMock(com.googlesource.gerrit.plugins.its.workflow.Property.class); expect(propertySubject.getKey()).andReturn(""subject"").anyTimes(); expect(propertySubject.getValue()).andReturn(""Rosebud"").anyTimes(); properties.add(propertySubject); org.easymock.IAnswer<java.lang.Boolean> answer = new com.googlesource.gerrit.plugins.hooks.workflow.action.AddVelocityCommentTest.VelocityWriterFiller(""Rosebud""); org.easymock.Capture<org.apache.velocity.VelocityContext> contextCapture = org.easymock.EasyMock.newCapture(); expect(velocityRuntime.evaluate(capture(contextCapture), ((java.io.Writer) (anyObject())), ((java.lang.String) (anyObject())), eq(""${subject}""))).andAnswer(answer); its.addComment(""4711"", ""Rosebud""); replayMocks(); com.googlesource.gerrit.plugins.its.workflow.action.AddVelocityComment addVelocityComment = createAddVelocityComment(); addVelocityComment.execute(""4711"", actionRequest, properties); org.apache.velocity.VelocityContext context = contextCapture.getValue(); assertEquals(""Subject property of context did not match"", ""Rosebud"", context.get(""subject"")); }",114e017d96c501e803e24e0cc1ca203d245a102b,testInlineWithSingleProperty(),testInlineWithSingleProperty(),3,0,"public void testInlineWithSingleProperty() throws java.io.IOException { com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest actionRequest = createMock(com.googlesource.gerrit.plugins.its.base.workflow.ActionRequest.class); expect(actionRequest.getParameter(1)).andReturn(""inline""); expect(actionRequest.getParameters()).andReturn(new java.lang.String[]{ ""inline"", ""${subject}"" }); java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); com.googlesource.gerrit.plugins.its.base.workflow.Property propertySubject = createMock(com.googlesource.gerrit.plugins.its.base.workflow.Property.class); expect(propertySubject.getKey()).andReturn(""subject"").anyTimes(); expect(propertySubject.getValue()).andReturn(""Rosebud"").anyTimes(); properties.add(propertySubject); org.easymock.IAnswer<java.lang.Boolean> answer = new com.googlesource.gerrit.plugins.its.base.workflow.action.AddVelocityCommentTest.VelocityWriterFiller(""Rosebud""); org.easymock.Capture<org.apache.velocity.VelocityContext> contextCapture = createCapture(); expect(velocityRuntime.evaluate(capture(contextCapture), ((java.io.Writer) (anyObject())), ((java.lang.String) (anyObject())), eq(""${subject}""))).andAnswer(answer); its.addComment(""4711"", ""Rosebud""); replayMocks(); com.googlesource.gerrit.plugins.its.base.workflow.action.AddVelocityComment addVelocityComment = createAddVelocityComment(); addVelocityComment.execute(""4711"", actionRequest, properties); org.apache.velocity.VelocityContext context = contextCapture.getValue(); assertEquals(""Subject property of context did not match"", ""Rosebud"", context.get(""subject"")); }",4695dd75cbd0bef9e1496520d5e8d27f1700c38c,testInlineWithSingleProperty(),118287,436,441
48530,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_client_CommentRange.java,,,,"@java.lang.Override public java.lang.String toString() { return (((((((""Range [startLine="" + (startLine)) + "", startCh="") + (startCh)) + "", endLine="") + (endLine)) + "", endCh="") + (endCh)) + ""]""; }",700bc849fa4de3be2ae4a361eddd420aeb611919,,toString(),6,5,"@java.lang.Override public java.lang.String toString() { return (((((((""Range[startLine="" + (startLine)) + "", startCharacter="") + (startCharacter)) + "", endLine="") + (endLine)) + "", endCharacter="") + (endCharacter)) + ""]""; }",3570497e570d7bfd70ec01cd5e71100673e85b58,toString(),143257,70,69
10534,src_main_java_com_google_gerrit_client_patches_PatchScreen.java,10.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void setSideB(com.google.gerrit.client.reviewdb.PatchSet.Id patchSetId) { idSideB = patchSetId; updateCookie(com.google.gerrit.client.patches.PatchScreen.COOKIE_SIDE_B, patchSetId); }",e36ca1831cb5881889e8090405b25fe0e37d7538,,setSideB(com.google.gerrit.client.reviewdb.PatchSet$Id),6,7,public void setSideB(com.google.gerrit.client.reviewdb.PatchSet.Id patchSetId) { idSideB = patchSetId; com.google.gerrit.client.patches.PatchScreen.diffSideB = patchSetId; },2e62d1230ac533cef7af516f5cfc284abc535957,setSideB(com.google.gerrit.client.reviewdb.PatchSet$Id),105436,65,60
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffKey.java,2.0,"public static com.google.gerrit.server.patch.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",a5a67e1a09b0365672626f11fbb4c86ce126ead9,"public static com.google.gerrit.server.patchlib.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patchlib.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",a5c1b10f4044b62545239513e7d6e2df94f71c67,"create(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)","create(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",11,2,"public static com.google.gerrit.server.diff.IntraLineDiffKey create(org.eclipse.jgit.lib.ObjectId aId, org.eclipse.jgit.lib.ObjectId bId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.diff.AutoValue_IntraLineDiffKey(aId, bId, whitespace); }",5d91678cc157a740ece3d7fc13fb6d4fe10a6a11,"create(org.eclipse.jgit.lib.ObjectId,org.eclipse.jgit.lib.ObjectId,com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace)",15718,98,96
99632,gerrit-server_src_main_java_com_google_gerrit_server_change_ApplyFix.java,,,,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.getControl().getProjectControl().getProjectState(); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { com.google.gerrit.server.edit.tree.TreeModification treeModification = fixReplacementInterpreter.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getControl(), patchSet, treeModification); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } return com.google.gerrit.extensions.restapi.Response.none(); }",e6ad5a910b748e2cf4f19b5e3c1f03fdab6eced3,,"apply(com.google.gerrit.server.change.FixResource,java.lang.Void)",6,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.FixResource fixResource, java.lang.Void nothing) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.change.RevisionResource revisionResource = fixResource.getRevisionResource(); com.google.gerrit.reviewdb.client.Project.NameKey project = revisionResource.getProject(); com.google.gerrit.server.project.ProjectState projectState = revisionResource.getControl().getProjectControl().getProjectState(); com.google.gerrit.reviewdb.client.PatchSet patchSet = revisionResource.getPatchSet(); org.eclipse.jgit.lib.ObjectId patchSetCommitId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); try (org.eclipse.jgit.lib.Repository repository = gitRepositoryManager.openRepository(project)) { com.google.gerrit.server.edit.tree.TreeModification treeModification = fixReplacementInterpreter.toTreeModification(repository, projectState, patchSetCommitId, fixResource.getFixReplacements()); com.google.gerrit.server.edit.ChangeEdit changeEdit = changeEditModifier.combineWithModifiedPatchSetTree(repository, revisionResource.getControl(), patchSet, treeModification); com.google.gerrit.extensions.common.EditInfo editInfo = changeEditJson.toEditInfo(changeEdit, false); return com.google.gerrit.extensions.restapi.Response.ok(editInfo); } catch (com.google.gerrit.server.project.InvalidChangeOperationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",11a26ebf3944ed7e7ba0d097588502e7e8494e87,"apply(com.google.gerrit.server.change.FixResource,java.lang.Void)",85794,399,461
104572,gerrit-server_src_main_java_com_google_gerrit_server_index_AbstractVersionManager.java,,,,"protected com.google.inject.ProvisionException fail(java.lang.Throwable t) { com.google.inject.ProvisionException e = new com.google.inject.ProvisionException(""Error scanning indexes""); e.initCause(t); return e; }",2a6b030f5abeb43fffb114f0d077bd412b0f7905,,fail(java.lang.Throwable),6,3,"private com.google.inject.ProvisionException fail(java.lang.Throwable t) { com.google.inject.ProvisionException e = new com.google.inject.ProvisionException(""Error scanning indexes""); e.initCause(t); return e; }",c10f4bb930666d12d6358810e00a2f08b50eca43,fail(java.lang.Throwable),126631,54,54
52753,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,23.0,void setMaxHeight(int height) { maxHeight = height - ((getTabBar().getOffsetHeight()) + 2); for (int i = 0; i < (getTabBar().getTabCount()); i++) { tabs.get(i).setMaxHeight(maxHeight); } },8d39e39c096144b776b2749ea4d4ba6ccd4d8253,void setMaxHeight(int height) { maxHeightBeforeHeader = height; if (isVisible()) { applyMaxHeight(); } },8fbd4dd488aa2c572fe44467a650aa0cd0f614ad,setMaxHeight(int),setMaxHeight(int),2,23,void setMaxHeight(int height) { maxHeightWithHeader = height; if (isVisible()) { applyMaxHeight(); } },ff6a9323e3d3c14f79d971bbeac4db03ce58dc0e,setMaxHeight(int),165722,26,26
45569,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,2.0,"private static java.lang.String getCommitMessageHookInstallationHint(final com.google.gerrit.server.IdentifiedUser currentUser, java.lang.String canonicalWebUrl, final com.google.gerrit.server.ssh.SshInfo sshInfo) { final java.util.List<com.jcraft.jsch.HostKey> hostKeys = sshInfo.getHostKeys(); if (hostKeys.isEmpty()) { java.lang.String p = "".git/hooks/commit-msg""; return java.lang.String.format("" curl -Lo %s %s/tools/hooks/commit-msg ; chmod +x %s"", p, com.google.gerrit.server.git.validators.CommitValidators.getGerritUrl(canonicalWebUrl), p); } java.lang.String sshHost; int sshPort; java.lang.String host = hostKeys.get(0).getHost(); int c = host.lastIndexOf(':'); if (0 <= c) { if (host.startsWith(""*:"")) { sshHost = com.google.gerrit.server.git.validators.CommitValidators.getGerritHost(canonicalWebUrl); } else { sshHost = host.substring(0, c); } sshPort = java.lang.Integer.parseInt(host.substring((c + 1))); } else { sshHost = host; sshPort = 22; } return java.lang.String.format("" scp -p -P %d %s@%s:hooks/commit-msg .git/hooks/"", sshPort, currentUser.getUserName(), sshHost); }",c38e3798806eff5542116debd7196d0e2bc0d71c,"private java.lang.String getCommitMessageHookInstallationHint() { final java.util.List<com.jcraft.jsch.HostKey> hostKeys = sshInfo.getHostKeys(); if (hostKeys.isEmpty()) { if ((commitMsgHookCommand) != null) { return commitMsgHookCommand; } else { java.lang.String p = "".git/hooks/commit-msg""; return java.lang.String.format("" curl -Lo %s %s/tools/hooks/commit-msg ; chmod +x %s"", p, com.google.gerrit.server.git.validators.CommitValidators.getGerritUrl(canonicalWebUrl), p); } } java.lang.String sshHost; int sshPort; java.lang.String host = hostKeys.get(0).getHost(); int c = host.lastIndexOf(':'); if (0 <= c) { if (host.startsWith(""*:"")) { sshHost = com.google.gerrit.server.git.validators.CommitValidators.getGerritHost(canonicalWebUrl); } else { sshHost = host.substring(0, c); } sshPort = java.lang.Integer.parseInt(host.substring((c + 1))); } else { sshHost = host; sshPort = 22; } return java.lang.String.format("" scp -p -P %d %s@%s:hooks/commit-msg .git/hooks/"", sshPort, user.getUserName(), sshHost); }",4bc10215009e6cbcbbbcd17ade575785d0d81516,"getCommitMessageHookInstallationHint(com.google.gerrit.server.IdentifiedUser,java.lang.String,com.google.gerrit.server.ssh.SshInfo)",getCommitMessageHookInstallationHint(),2,6,"private java.lang.String getCommitMessageHookInstallationHint() { if ((installCommitMsgHookCommand) != null) { return installCommitMsgHookCommand; } final java.util.List<com.jcraft.jsch.HostKey> hostKeys = sshInfo.getHostKeys(); if (hostKeys.isEmpty()) { java.lang.String p = "".git/hooks/commit-msg""; return java.lang.String.format("" curl -Lo %s %s/tools/hooks/commit-msg ; chmod +x %s"", p, com.google.gerrit.server.git.validators.CommitValidators.getGerritUrl(canonicalWebUrl), p); } java.lang.String sshHost; int sshPort; java.lang.String host = hostKeys.get(0).getHost(); int c = host.lastIndexOf(':'); if (0 <= c) { if (host.startsWith(""*:"")) { sshHost = com.google.gerrit.server.git.validators.CommitValidators.getGerritHost(canonicalWebUrl); } else { sshHost = host.substring(0, c); } sshPort = java.lang.Integer.parseInt(host.substring((c + 1))); } else { sshHost = host; sshPort = 22; } return java.lang.String.format("" scp -p -P %d %s@%s:hooks/commit-msg .git/hooks/"", sshPort, user.getUserName(), sshHost); }",732a90bac33dc19efe9f0fd0271c0cc91d65d08f,getCommitMessageHookInstallationHint(),110154,331,330
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""user.writeGroupsToNoteDb"", value = ""true"") public void groupOwnerWithWriteToNoteDb() throws java.lang.Exception { testGroupOwner(true); }",2d2df5a4cc3ddf72b83c21b2c07641dc91c08364,,groupOwnerWithWriteToNoteDb(),6,0,"@org.junit.Test public void pushNonGroupsAccessSectionChangeToAllUsersSucceeds() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig projectConfig = projectCache.checkedGet(allUsers).getConfig(); com.google.gerrit.common.data.AccessSection as = new com.google.gerrit.common.data.AccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""foo"")); com.google.gerrit.common.data.Permission perm = new com.google.gerrit.common.data.Permission(""push""); perm.add(new com.google.gerrit.common.data.PermissionRule(systemGroupBackend.getGroup(com.google.gerrit.acceptance.api.group.ANONYMOUS_USERS))); as.addPermission(perm); projectConfig.replace(as); saveProjectConfig(allUsers, projectConfig); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(allUsers, RefNames.REFS_CONFIG); java.lang.String config = gApi.projects().name(allUsers.get()).branch(RefNames.REFS_CONFIG).file(ProjectConfig.PROJECT_CONFIG).asString(); assertThat(config).contains(""[access \""refs/groups/foo\""]""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(config); cfg.setString(""access"", ((com.google.gerrit.reviewdb.client.RefNames.REFS_CHANGES) + ""foo""), ""push"", ""group Registered Users""); config = cfg.toText(); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Subject"", ProjectConfig.PROJECT_CONFIG, config).to(RefNames.REFS_CONFIG); r.assertOkStatus(); }",578822aa76045b6352279fa69743921e13fc4625,pushNonGroupsAccessSectionChangeToAllUsersSucceeds(),12377,62,458
113930,gerrit-server_src_main_java_com_google_gerrit_server_change_Mergeable.java,0.0,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",69b03b3dab29405f3c2f183ce4064bf80ab5d174,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountByEmailCache, accountCache, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",32e26b5d5f4dd769a2761ad652fa4e86315aa17e,"getSubmitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)","getSubmitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)",3,0,"private com.google.gerrit.extensions.client.SubmitType getSubmitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setPatchSet(patchSet).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException((""Submit type rule failed: "" + rec)); } return rec.type; }",42187783706c53bb935cf9c7a52553b13149ec8a,"getSubmitType(com.google.gerrit.server.query.change.ChangeData,com.google.gerrit.reviewdb.client.PatchSet)",63991,170,167
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,16.0,"public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(notesMigration.readChanges())), ""should not have created ChangeData without a project when NoteDb is enabled""); project = change().getProject(); } return project; }",a0233763b881dae4dbbc484e8f59af9302ae6d59,"public Project.NameKey project() throws com.google.gwtorm.server.OrmException { if ((project) == null) { checkState((!(a.notesMigration.readChanges())), ""should not have created ChangeData without a project when NoteDb is enabled""); project = change().getProject(); } return project; }",c57346941ab16e865e7ba5ba37aab198e12f0c5c,project(),project(),5,16,public Project.NameKey project() { return project; },98735b53ed56b0af158d55a2dccd2aee3e6bcabf,project(),94385,70,12
90131,gerrit-server_src_main_java_com_google_gerrit_server_mail_send_ChangeEmail.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<java.lang.String> getReviewerEmails() { java.util.List<java.lang.String> reviewers = new java.util.ArrayList<>(); try { for (com.google.gerrit.reviewdb.client.Account.Id who : changeData.reviewers().all()) { reviewers.add(getNameEmailFor(who)); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot get change reviewers"", e); } return reviewers; }",7c00a96da8a9ddfadc8bb2f18bc28fea13607e75,,getReviewerEmails(),4,4,"private java.util.Set<java.lang.String> getEmailsByState(com.google.gerrit.server.notedb.ReviewerStateInternal state) { java.util.Set<java.lang.String> reviewers = new java.util.TreeSet<>(); try { for (com.google.gerrit.reviewdb.client.Account.Id who : changeData.reviewers().byState(state)) { reviewers.add(getNameEmailFor(who)); } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn(""Cannot get change reviewers"", e); } return reviewers; }",a661687a817df9cf8b507800f8bdba88f0ae7f57,getEmailsByState(com.google.gerrit.server.notedb.ReviewerStateInternal),142156,139,159
66646,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,8.0,"private void beforeTest(org.junit.runner.Description description, boolean memory, boolean enableHttpd) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = config(description); server = startServer(cfg, memory, enableHttpd); server.getTestInjector().injectMembers(this); admin = accounts.admin(); user = accounts.user(); adminSession = new com.google.gerrit.acceptance.RestSession(server, admin); userSession = new com.google.gerrit.acceptance.RestSession(server, user); com.google.gerrit.acceptance.GitUtil.initSsh(admin); db = reviewDbProvider.open(); com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = newRequestContext(admin); atrScope.set(ctx); sshSession = ctx.getSession(); sshSession.open(); com.google.gerrit.extensions.api.projects.ProjectInput projectInput = projectInput(description); project = new com.google.gerrit.reviewdb.client.Project.NameKey(projectInput.name); createProject(projectInput); testRepo = com.google.gerrit.acceptance.GitUtil.cloneProject(project, sshSession); }",0db674b1a332f6a3946d9c1769a7a4c3e4f7dddd,"private void beforeTest(org.junit.runner.Description description, boolean memory, boolean enableHttpd) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = config(description); server = startServer(cfg, memory, enableHttpd); server.getTestInjector().injectMembers(this); admin = accounts.admin(); user = accounts.user(); adminSession = new com.google.gerrit.acceptance.RestSession(server, admin); userSession = new com.google.gerrit.acceptance.RestSession(server, user); com.google.gerrit.acceptance.GitUtil.initSsh(admin); db = reviewDbProvider.open(); com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = newRequestContext(admin); atrScope.set(ctx); sshSession = ctx.getSession(); sshSession.open(); projectPrefix = com.google.gerrit.acceptance.AbstractDaemonTest.UNSAFE_PROJECT_NAME.matcher(((((description.getClassName()) + ""_"") + (description.getMethodName())) + ""_"")).replaceAll(""""); project = createProject(projectInput(description)); testRepo = com.google.gerrit.acceptance.GitUtil.cloneProject(project, sshSession); }",61cbaa679b9c39ac5ec2cb9846c571a8538cdfb7,"beforeTest(org.junit.runner.Description,boolean,boolean)","beforeTest(org.junit.runner.Description,boolean,boolean)",3,8,"private void beforeTest(org.junit.runner.Description description, boolean memory, boolean enableHttpd) throws java.lang.Exception { org.eclipse.jgit.lib.Config cfg = config(description); server = startServer(cfg, memory, enableHttpd); server.getTestInjector().injectMembers(this); admin = accounts.admin(); user = accounts.user(); adminSession = new com.google.gerrit.acceptance.RestSession(server, admin); userSession = new com.google.gerrit.acceptance.RestSession(server, user); com.google.gerrit.acceptance.GitUtil.initSsh(admin); db = reviewDbProvider.open(); com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = newRequestContext(admin); atrScope.set(ctx); sshSession = ctx.getSession(); sshSession.open(); resourcePrefix = com.google.gerrit.acceptance.AbstractDaemonTest.UNSAFE_PROJECT_NAME.matcher(((((description.getClassName()) + ""_"") + (description.getMethodName())) + ""_"")).replaceAll(""""); project = createProject(projectInput(description)); testRepo = com.google.gerrit.acceptance.GitUtil.cloneProject(project, sshSession); }",6687324493b8fd676c48c582e7f42522e18d5d23,"beforeTest(org.junit.runner.Description,boolean,boolean)",202628,274,274
42220,gerrit-server_src_main_java_com_google_gerrit_server_group_GetOwner.java,0.0,@java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup(); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.addOption(com.google.gerrit.server.group.OWNER).format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } },f84b71635d1bdd7b25c385c546247284c2568c76,"@java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup(); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.addOption(com.google.gerrit.server.group.MEMBERS).addOption(com.google.gerrit.server.group.INCLUDES).addOption(com.google.gerrit.server.group.OWNER).format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c7470af23fb464e77df4914dab12f939e4f4ba98,apply(com.google.gerrit.server.group.GroupResource),apply(com.google.gerrit.server.group.GroupResource),5,0,"@java.lang.Override public com.google.gerrit.server.group.GroupJson.GroupInfo apply(com.google.gerrit.server.group.GroupResource resource) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = resource.toAccountGroup(); if (group == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } try { com.google.gerrit.server.account.GroupControl c = controlFactory.validateFor(group.getOwnerGroupUUID()); return json.format(c.getGroup()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }",c8c91c57bb83d7e2e7cf12bf4c069c890cb66582,apply(com.google.gerrit.server.group.GroupResource),114474,241,194
35174,gerrit-httpd_src_main_java_com_google_gerrit_httpd_plugins_HttpAutoRegisterModuleGenerator.java,,,,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public void export(com.google.gerrit.extensions.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException { if (javax.servlet.http.HttpServlet.class.isAssignableFrom(type)) { java.lang.Class<javax.servlet.http.HttpServlet> old = serve.get(export.value()); if (old != null) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""@Export(\""%s\"") has duplicate bindings:\n %s\n %s"", export.value(), old.getName(), type.getName())); } serve.put(export.value(), ((java.lang.Class<javax.servlet.http.HttpServlet>) (type))); } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s with @Export(\""%s\"") must extend %s"", type.getName(), export.value(), javax.servlet.http.HttpServlet.class.getName())); } }",4e5ae1d5aa6a68f6a08123526cf3f5858692b23d,,"export(com.google.gerrit.extensions.Export,java.lang.Class)",4,3,"@java.lang.SuppressWarnings(""unchecked"") @java.lang.Override public void export(com.google.gerrit.extensions.annotations.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException { if (javax.servlet.http.HttpServlet.class.isAssignableFrom(type)) { java.lang.Class<javax.servlet.http.HttpServlet> old = serve.get(export.value()); if (old != null) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""@Export(\""%s\"") has duplicate bindings:\n %s\n %s"", export.value(), old.getName(), type.getName())); } serve.put(export.value(), ((java.lang.Class<javax.servlet.http.HttpServlet>) (type))); } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s with @Export(\""%s\"") must extend %s"", type.getName(), export.value(), javax.servlet.http.HttpServlet.class.getName())); } }",834f689e4e9e9e023d319fd974e736f23f0d4130,"export(com.google.gerrit.extensions.annotations.Export,java.lang.Class)",125549,253,255
62001,gerrit-server_src_test_java_com_google_gerrit_server_change_HashtagsTest.java,,,,"@org.junit.Test public void singleHashtag() { java.lang.String commitMessage = ""#Subject\n\nLine 1\n\nLine 2""; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet(""#Subject"")); }",37555318de6f1595d7f0db53729be653df671dc8,,singleHashtag(),12,8,"@org.junit.Test public void singleHashtag() throws java.lang.Exception { java.lang.String commitMessage = ""#Subject\n\nLine 1\n\nLine 2""; assertThat(com.google.gerrit.server.change.HashtagsUtil.extractTags(commitMessage)).containsExactlyElementsIn(com.google.common.collect.Sets.newHashSet(""Subject"")); }",c14fb01286d1c73a0b089043f5342ac001db3a65,singleHashtag(),122978,81,87
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },f31ecd6724c0e660b4c1f91b77e17473bfded80b,,get(java.lang.Iterable),3,9,@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupByIdAud> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroupByIdAud.Key> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },b4f210e28bd8e4cbc6d8d306672c6deaef906ffc,get(java.lang.Iterable),205030,116,103
24622,gerrit-common_src_main_java_com_google_gerrit_common_data_ParametrizedString.java,16.0,"public com.google.gerrit.common.data.ParamertizedString.Builder replace(final java.lang.String name, final java.lang.String value) { params.put(name, value); return this; }",b2f9bd649f4fd8229b5d507cd06d82ec808cac81,"public com.google.gerrit.common.data.ParametrizedString.Builder replace(final java.lang.String name, final java.lang.String value) { params.put(name, value); return this; }",68c962244f471f0ae3fdfeabf0dc2d4326e13aac,"replace(java.lang.String,java.lang.String)","replace(java.lang.String,java.lang.String)",3,16,"public com.google.gerrit.common.data.ParameterizedString.Builder replace(final java.lang.String name, final java.lang.String value) { params.put(name, value); return this; }",78bb4ce75e10f0cc4a8ee0658adbf1b4e826bcac,"replace(java.lang.String,java.lang.String)",122144,48,47
92492,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean isStale(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.reviewdb.client.Change indexChange, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change reviewDbChange, com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> states, com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> patterns) { return (com.google.gerrit.server.index.change.StalenessChecker.reviewDbChangeIsStale(indexChange, reviewDbChange)) || (com.google.gerrit.server.index.change.StalenessChecker.isStale(repoManager, id, states, patterns)); }",9d9170080caafbeb4c164e3e578702a5cab55c06,,"isStale(com.google.gerrit.server.git.GitRepositoryManager,com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Change,com.google.common.collect.SetMultimap,com.google.common.collect.Multimap)",2,23,"public static boolean isStale(com.google.gerrit.server.git.GitRepositoryManager repoManager, com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.reviewdb.client.Change indexChange, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Change reviewDbChange, com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefState> states, com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> patterns) { return (com.google.gerrit.server.index.change.StalenessChecker.reviewDbChangeIsStale(indexChange, reviewDbChange)) || (com.google.gerrit.server.index.change.StalenessChecker.refsAreStale(repoManager, id, states, patterns)); }",09174cf744d9e00035998fed883ef922baa42912,"isStale(com.google.gerrit.server.git.GitRepositoryManager,com.google.gerrit.reviewdb.client.Change$Id,com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.Change,com.google.common.collect.SetMultimap,com.google.common.collect.Multimap)",146707,255,257
47252,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeIndexerImpl.java,2.0,"@java.lang.Override public void run() { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(change); try { index.replace(cd); } catch (java.io.IOException e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(""Error indexing change"", e); } }",04e1365f7e4750a59fcc9041c92ad535e117d112,"@java.lang.Override public void run() { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(change); try { index.replace(cd); } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(""Error indexing change"", e); } }",7470ccaab09b05a66a4975e0792c988a884b2e11,run(),run(),2,3,@java.lang.Override public java.lang.Void call() throws java.lang.Exception { index.replace(new com.google.gerrit.server.query.change.ChangeData(change)); return null; },a088e4a5ad555d31de09fffec7597f7cba96fd44,call(),12169,93,48
32552,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,25.0,"@java.lang.Override public void onPreReceive(final org.eclipse.jgit.transport.ReceivePack arg0, final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { parseCommands(commands); if (((newChange) != null) && ((newChange.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED))) { createNewChanges(); } doReplaces(); }",a4b25144a6151e512cbe4afcd0578437c32cc7d7,"@java.lang.Override public void onPreReceive(final org.eclipse.jgit.transport.ReceiveSession rs, final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { parseCommands(commands); if (((newChange) != null) && ((newChange.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED))) { createNewChanges(); } doReplaces(); }",5c903c10329c5e9a4374bde4506b30442c5f57d6,"onPreReceive(org.eclipse.jgit.transport.ReceivePack,java.util.Collection)","onPreReceive(org.eclipse.jgit.transport.ReceiveSession,java.util.Collection)",11,3,"@java.lang.Override public void onPreReceive(final org.eclipse.jgit.transport.ReceivePack arg0, final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { parseCommands(commands); if (((newChange) != null) && ((newChange.getResult()) == (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED))) { createNewChanges(); } doReplaces(); }",a4b25144a6151e512cbe4afcd0578437c32cc7d7,"onPreReceive(org.eclipse.jgit.transport.ReceivePack,java.util.Collection)",14074,102,102
62688,gerrit-server_src_main_java_com_google_gerrit_server_query_change_QueryProcessor.java,28.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> queryByStrings(java.util.List<java.lang.String> queryStrings) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> queries = new java.util.ArrayList<>(queryStrings.size()); for (java.lang.String qs : queryStrings) { queries.add(queryBuilder.parse(qs)); } return queryChanges(queries); }",e2de63230171c9ebde80f60232e5b895ba941a15,,queryByStrings(java.util.List),4,14,"public java.util.List<com.google.gerrit.server.query.change.QueryResult> queryByStrings(java.util.List<java.lang.String> queryStrings) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> queries = new java.util.ArrayList<>(queryStrings.size()); for (java.lang.String qs : queryStrings) { queries.add(queryBuilder.parse(qs)); } return queryChanges(queries); }",6114951dedc128d45cc568d7d3d09315033600ab,queryByStrings(java.util.List),12393,161,154
25219,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,15.0,public boolean isVisible() { return getRefControl().isVisible(); },3d7dd49cd04580df2531addc4c681ddeff584b94,public boolean isVisible(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { if (((change.getStatus()) == (Change.Status.DRAFT)) && (!(isDraftVisible(db)))) { return false; } return getRefControl().isVisible(); },ffc3dfbe321b2250a75aca70fc9ddb59deaa24f6,isVisible(),isVisible(com.google.gerrit.reviewdb.ReviewDb),6,4,public boolean isVisible(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { if (((change.getStatus()) == (Change.Status.DRAFT)) && (!(isDraftVisible(db)))) { return false; } return isRefVisible(); },a8f4a08be8592a28ff287a2258b5c30eb7e3c74b,isVisible(com.google.gerrit.reviewdb.ReviewDb),152297,71,69
44840,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,15.0,"protected com.google.gerrit.prettify.common.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(s.getB().getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if (((dp.isSyntaxHighlighting()) && (s.getA().isWholeFile())) && (!(s.getB().isWholeFile()))) { f.format(s.getB().apply(s.getA(), s.getEdits())); } else { f.format(s.getB()); } return f; }",d3e31dcfc73baa0fa9cf05431c4335b72b259c9f,"protected com.google.gerrit.prettify.common.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(s.getB().getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(s.getB().isWholeFile()))) { f.format(s.getB().apply(s.getA(), s.getEdits())); } else { f.format(s.getB()); } return f; }",3350cdab638a6260d15034f3c2c0378038f13317,getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),4,15,"protected com.google.gerrit.prettify.common.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.common.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }",9f6145e6dd2ef5f2f1b42e3e23e09d2949f1e9bf,getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript),116472,209,219
68040,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeList.java,0.0,"public static void query(com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList>> callback, java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> options, java.lang.String... queries) { assert (queries.length) >= 2; com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.changes.ChangeList.URI); for (java.lang.String q : queries) { call.addParameterRaw(""q"", com.google.gwtorm.client.KeyUtil.encode(q)); } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll(options); com.google.gerrit.client.changes.ChangeList.addOptions(call, com.google.gerrit.client.changes.ChangeList.OPTIONS); call.get(callback); }",f91a3379538a37952afe843948f9371d1dba4c28,"public static void queryMultiple(final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList>> callback, java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> options, java.lang.String... queries) { if ((queries.length) == 0) { return; } com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.changes.ChangeList.URI); for (java.lang.String q : queries) { call.addParameterRaw(""q"", com.google.gwtorm.client.KeyUtil.encode(q)); } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll(options); com.google.gerrit.client.changes.ChangeList.addOptions(call, com.google.gerrit.client.changes.ChangeList.OPTIONS); if ((queries.length) == 1) { call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.push(result); callback.onSuccess(wrapped); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { callback.onFailure(caught); } }); } else { call.get(callback); } }",c92cbdfa87ddd1bd2f7f76e11c14426559c9046c,"query(com.google.gwt.user.client.rpc.AsyncCallback,java.util.EnumSet,java.lang.String[])","queryMultiple(com.google.gwt.user.client.rpc.AsyncCallback,java.util.EnumSet,java.lang.String[])",2,0,"public static void queryMultiple(final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList>> callback, java.util.EnumSet<com.google.gerrit.extensions.client.ListChangesOption> options, java.lang.String... queries) { if ((queries.length) == 0) { return; } com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.changes.ChangeList.URI); for (java.lang.String q : queries) { call.addParameterRaw(""q"", com.google.gwtorm.client.KeyUtil.encode(q)); } com.google.gerrit.client.changes.ChangeList.OPTIONS.addAll(options); com.google.gerrit.client.changes.ChangeList.addOptions(call, com.google.gerrit.client.changes.ChangeList.OPTIONS); if ((queries.length) == 1) { call.get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeList>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeList> wrapped = com.google.gwt.core.client.JsArray.createArray(1).cast(); wrapped.set(0, result); callback.onSuccess(wrapped); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { callback.onFailure(caught); } }); } else { call.get(callback); } }",4d8bcf212c1ca0429dd7b4c00eb03bc58bb8b358,"queryMultiple(com.google.gwt.user.client.rpc.AsyncCallback,java.util.EnumSet,java.lang.String[])",71387,408,408
72237,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_TagsIT.java,5.0,"@org.junit.Test public void listTagsOfNonExistingProjectWithApi() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(""does-not-exist"").tags(); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(""does-not-exist"").tag(""tag"").get(); }",f852e3df53a9a1700b4dfd19e59db9041c40a804,"@org.junit.Test public void listTagsOfNonExistingProjectWithApi() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(""does-not-exist"").tags(); }",3aff67f25a2c69d59213e32c54e3d8a240129698,listTagsOfNonExistingProjectWithApi(),listTagsOfNonExistingProjectWithApi(),4,5,"@org.junit.Test public void listTagsOfNonExistingProjectWithApi() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(""does-not-exist"").tags().get(); }",0b978be2bbe7ab59ccb494bee901184fa98780b7,listTagsOfNonExistingProjectWithApi(),162295,61,63
74586,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_SetReviewersCommand.java,6.0,"private void addChangeImpl(java.lang.String id) throws com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = changeUtil.findChanges(id, userProvider.get()); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(ctl.getProject()))) && (ctl.isVisible(db))) { toAdd.add(ctl); } } switch (toAdd.size()) { case 0 : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" no such change"")); case 1 : com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); break; default : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" matches multiple changes"")); } }",f78432860089c27530a980410af9d290bc4cd750,"private void addChangeImpl(java.lang.String id) throws com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = changeFinder.findChanges(id, userProvider.get()); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(ctl.getProject()))) && (ctl.isVisible(db))) { toAdd.add(ctl); } } switch (toAdd.size()) { case 0 : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" no such change"")); case 1 : com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); break; default : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" matches multiple changes"")); } }",3a4e885ecffc774ecc33ed8f85bedcc8e9642f32,addChangeImpl(java.lang.String),addChangeImpl(java.lang.String),2,6,"private void addChangeImpl(java.lang.String id) throws com.google.gerrit.sshd.commands.UnloggedFailure, com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.server.project.ChangeControl> matched = changeFinder.find(id, userProvider.get()); java.util.List<com.google.gerrit.server.project.ChangeControl> toAdd = new java.util.ArrayList(changes.size()); for (com.google.gerrit.server.project.ChangeControl ctl : matched) { if (((!(changes.containsKey(ctl.getId()))) && (inProject(ctl.getProject()))) && (ctl.isVisible(db))) { toAdd.add(ctl); } } switch (toAdd.size()) { case 0 : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" no such change"")); case 1 : com.google.gerrit.server.project.ChangeControl ctl = toAdd.get(0); changes.put(ctl.getId(), changesCollection.parse(ctl)); break; default : throw com.google.gerrit.sshd.commands.SetReviewersCommand.error(((""\"""" + id) + ""\"" matches multiple changes"")); } }",2ac6accef046c4788c85b96074f9c22f1056e223,addChangeImpl(java.lang.String),209104,299,298
128031,gerrit-server_src_test_java_com_google_gerrit_server_schema_Schema_150_to_151_Test.java,3.0,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testutil.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",2ba4f5326278c0cff71948e3f6c98842917da15b,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); com.google.gerrit.reviewdb.client.AccountGroup group = db.accountGroups().get(groupId); assertThat(group.getCreatedOn()).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",3597c950e80b9e7a9b11838512211214311c32ed,createdOnIsPopulatedForGroupsCreatedBeforeAudit(),createdOnIsPopulatedForGroupsCreatedBeforeAudit(),11,5,"@org.junit.Test public void createdOnIsPopulatedForGroupsCreatedBeforeAudit() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = createGroup(""Ancient group for schema migration""); setCreatedOnToVeryOldTimestamp(groupId); removeAuditEntriesFor(groupId); schema151.migrateData(db, new com.google.gerrit.testing.TestUpdateUI()); java.sql.Timestamp createdOn = getCreatedOn(groupId); assertThat(createdOn).isEqualTo(com.google.gerrit.reviewdb.client.AccountGroup.auditCreationInstantTs()); }",ccb7f53c8b9df380d317522aad0254d828e9a078,createdOnIsPopulatedForGroupsCreatedBeforeAudit(),97317,156,140
104853,gerrit-server_src_main_java_com_google_gerrit_server_change_SetPrivateOp.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addMessage(com.google.gerrit.server.update.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, (c.isPrivate() ? ""Set Private"" : ""Unset Private""), (c.isPrivate() ? com.google.gerrit.server.ChangeMessagesUtil.TAG_SET_PRIVATE : com.google.gerrit.server.ChangeMessagesUtil.TAG_UNSET_PRIVATE)); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }",c371352497780726593f921bad4dd6e58843f18a,,"addMessage(com.google.gerrit.server.update.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate)",2,0,"private void addMessage(com.google.gerrit.server.update.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); com.google.gerrit.reviewdb.client.ChangeMessage cmsg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, (c.isPrivate() ? ""Set private"" : ""Unset private""), (c.isPrivate() ? com.google.gerrit.server.ChangeMessagesUtil.TAG_SET_PRIVATE : com.google.gerrit.server.ChangeMessagesUtil.TAG_UNSET_PRIVATE)); cmUtil.addChangeMessage(ctx.getDb(), update, cmsg); }",309758bf1a5d094061f08900acb65fe25ccb0e8f,"addMessage(com.google.gerrit.server.update.ChangeContext,com.google.gerrit.server.notedb.ChangeUpdate)",165563,188,188
169092,java_com_google_gerrit_server_restapi_change_DeleteChange.java,1.0,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if ((rsrc.getChange().getStatus()) == (Change.Status.MERGED)) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",a858e724432f3783fbee234d8064f32446a74fb7,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",54a1728b9238ae4c46b7c23c9942be6438b1a484,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.common.Input)","applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.common.Input)",2,1,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.common.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { if (!(com.google.gerrit.server.restapi.change.DeleteChange.isChangeDeletable(rsrc.getChange().getStatus()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(""delete not permitted""); } rsrc.permissions().database(db).check(ChangePermission.DELETE); try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { com.google.gerrit.reviewdb.client.Change.Id id = rsrc.getChange().getId(); bu.setOrder(Order.DB_BEFORE_REPO); bu.addOp(id, opProvider.get()); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",400ae570847cc2d7288e65c0f91abb50afca00d7,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.extensions.common.Input)",185688,305,322
33370,gerrit-server_src_main_java_com_google_gerrit_server_events_EventFactory.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void addDependencies(com.google.gerrit.server.events.ChangeAttribute ca, com.google.gerrit.reviewdb.Change change) { ca.dependsOn = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); ca.neededBy = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); try { final com.google.gerrit.reviewdb.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.PatchSet.Id psId = change.currentPatchSetId(); for (com.google.gerrit.reviewdb.PatchSetAncestor a : db.patchSetAncestors().ancestorsOf(psId)) { for (com.google.gerrit.reviewdb.PatchSet p : db.patchSets().byRevision(a.getAncestorRevision())) { com.google.gerrit.reviewdb.Change c = db.changes().get(p.getId().getParentKey()); ca.dependsOn.add(newDependsOn(c, p)); } } final com.google.gerrit.reviewdb.RevId revId = db.patchSets().get(psId).getRevision(); for (com.google.gerrit.reviewdb.PatchSetAncestor a : db.patchSetAncestors().descendantsOf(revId)) { final com.google.gerrit.reviewdb.PatchSet p = db.patchSets().get(a.getPatchSet()); final com.google.gerrit.reviewdb.Change c = db.changes().get(p.getId().getParentKey()); ca.neededBy.add(newNeededBy(c, p)); } } finally { db.close(); } } catch (com.google.gwtorm.client.OrmException e) { } if (ca.dependsOn.isEmpty()) { ca.dependsOn = null; } if (ca.neededBy.isEmpty()) { ca.neededBy = null; } }",ad16a76aee5ebd386c0750c459773806cbfe0529,,"addDependencies(com.google.gerrit.server.events.ChangeAttribute,com.google.gerrit.reviewdb.Change)",5,19,"public void addDependencies(com.google.gerrit.server.events.ChangeAttribute ca, com.google.gerrit.reviewdb.client.Change change) { ca.dependsOn = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); ca.neededBy = new java.util.ArrayList<com.google.gerrit.server.events.DependencyAttribute>(); try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); for (com.google.gerrit.reviewdb.client.PatchSetAncestor a : db.patchSetAncestors().ancestorsOf(psId)) { for (com.google.gerrit.reviewdb.client.PatchSet p : db.patchSets().byRevision(a.getAncestorRevision())) { com.google.gerrit.reviewdb.client.Change c = db.changes().get(p.getId().getParentKey()); ca.dependsOn.add(newDependsOn(c, p)); } } final com.google.gerrit.reviewdb.client.RevId revId = db.patchSets().get(psId).getRevision(); for (com.google.gerrit.reviewdb.client.PatchSetAncestor a : db.patchSetAncestors().descendantsOf(revId)) { final com.google.gerrit.reviewdb.client.PatchSet p = db.patchSets().get(a.getPatchSet()); final com.google.gerrit.reviewdb.client.Change c = db.changes().get(p.getId().getParentKey()); ca.neededBy.add(newNeededBy(c, p)); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { } if (ca.dependsOn.isEmpty()) { ca.dependsOn = null; } if (ca.neededBy.isEmpty()) { ca.neededBy = null; } }",6626b088cc264cdca0eefc75e99001c034bf96a8,"addDependencies(com.google.gerrit.server.events.ChangeAttribute,com.google.gerrit.reviewdb.client.Change)",108497,445,465
140535,java_com_google_gerrit_server_patchlib_EditTransformer.java,22.0,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patch.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",0271ff6520b3f9b87d0c239152edea79f7202176,"static com.google.gerrit.server.patchlib.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patchlib.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",930d04e9b52c276d00235dcbc21bdd1945b60ab4,"create(java.lang.String,java.lang.String,int,int,int,int,boolean)","create(java.lang.String,java.lang.String,int,int,int,int,boolean)",11,22,"static com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(java.lang.String oldFilePath, java.lang.String newFilePath, int beginA, int endA, int beginB, int endB, boolean filePathAdjusted) { java.lang.String adjustedOldFilePath = com.google.common.base.MoreObjects.firstNonNull(oldFilePath, newFilePath); boolean implicitRename = (!(java.util.Objects.equals(oldFilePath, newFilePath))) && filePathAdjusted; return new com.google.gerrit.server.patch.AutoValue_EditTransformer_ContextAwareEdit(adjustedOldFilePath, newFilePath, beginA, endA, beginB, endB, implicitRename); }",0271ff6520b3f9b87d0c239152edea79f7202176,"create(java.lang.String,java.lang.String,int,int,int,int,boolean)",15680,156,154
114470,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountDeactivator.java,,,,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } com.google.gerrit.server.config.ScheduleConfig scheduleConfig = cfg.getScheduleConfig(); long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Ignoring missing accountDeactivator schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format(""Ignoring invalid accountDeactivator schedule configuration: %s"", scheduleConfig)); } else { @java.lang.SuppressWarnings(""unused"") java.util.concurrent.Future<?> possiblyIgnoredError = queue.getDefaultQueue().scheduleAtFixedRate(deactivator, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",8870db4a7f8985d0a9a5a51cf67833772b617d1c,,start(),21,3,"@java.lang.Override public void start() { if (!(supportAutomaticAccountActivityUpdate)) { return; } long interval = scheduleConfig.getInterval(); long delay = scheduleConfig.getInitialDelay(); if ((delay == (MISSING_CONFIG)) && (interval == (MISSING_CONFIG))) { com.google.gerrit.server.account.AccountDeactivator.log.info(""Ignoring missing accountDeactivator schedule configuration""); } else if ((delay < 0) || (interval <= 0)) { com.google.gerrit.server.account.AccountDeactivator.log.warn(java.lang.String.format(""Ignoring invalid accountDeactivator schedule configuration: %s"", scheduleConfig)); } else { queue.getDefaultQueue().scheduleAtFixedRate(deactivator, delay, interval, java.util.concurrent.TimeUnit.MILLISECONDS); } }",0a2a637139af4a56732f9a4d5a9323fea72a8d97,start(),78031,216,173
73297,gerrit-server_src_main_java_com_google_gerrit_server_git_ReadOnlyRepository.java,,,,"private static org.eclipse.jgit.lib.BaseRepositoryBuilder<?, ?> builder(org.eclipse.jgit.lib.Repository r) { return new org.eclipse.jgit.lib.BaseRepositoryBuilder().setFS(r.getFS()).setGitDir(r.getDirectory()).setWorkTree(r.getWorkTree()).setIndexFile(r.getIndexFile()); }",23c01aa88983b2279ceb2732cd274c3616f61292,,builder(org.eclipse.jgit.lib.Repository),2,3,"private static org.eclipse.jgit.lib.BaseRepositoryBuilder<?, ?> builder(org.eclipse.jgit.lib.Repository r) { checkNotNull(r); return new org.eclipse.jgit.lib.BaseRepositoryBuilder().setFS(r.getFS()).setGitDir(r.getDirectory()).setWorkTree(r.getWorkTree()).setIndexFile(r.getIndexFile()); }",a80127fda3feb8c77bd9bbf1e18cc0d0c4e96eb2,builder(org.eclipse.jgit.lib.Repository),103314,85,89
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,38.0,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",fd41fdfa27c88af76d9c7f54c71a4ceaa0bcc8ab,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update account config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",5cd6b5dfc510aca8b50754ee0aac73a98c59d903,"assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)","assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",17,38,"private void assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedErrorOnCreate) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + ""*""), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, ""Update group config"", GroupConfig.GROUP_CONFIG_FILE, ""some content"").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name(""bar"")))); if (expectedErrorOnCreate != null) { r.assertErrorStatus(expectedErrorOnCreate); } else { r.assertOkStatus(); } }",fd41fdfa27c88af76d9c7f54c71a4ceaa0bcc8ab,"assertCreateGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",217384,319,319
68604,gerrit-server_src_test_java_com_google_gerrit_testutil_InMemoryDatabase.java,3.0,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.server.OrmException { if (!(created)) { created = true; final com.google.gerrit.reviewdb.server.ReviewDb c = open(); try { try { schemaCreator.create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(""Cannot create in-memory database"", e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot create in-memory database"", e); } } finally { c.close(); } } return this; }",289f457a26e0eee2c0fec7bfa86b257a7b198b98,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.server.OrmException { if (!(created)) { created = true; try (com.google.gerrit.reviewdb.server.ReviewDb c = open()) { try { schemaCreator.create(c); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(""Cannot create in-memory database"", e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot create in-memory database"", e); } } } return this; }",d295806dc29564dbc931966ee01bf38d6e289867,create(),create(),5,3,"public com.google.gerrit.testutil.InMemoryDatabase create() throws com.google.gwtorm.server.OrmException { if (!(created)) { created = true; try (com.google.gerrit.reviewdb.server.ReviewDb c = open()) { schemaCreator.create(c); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot create in-memory database"", e); } } return this; }",f8a63dcef0b37e6413350c0a501caa22bae6b2f7,create(),114339,153,121
70420,gitiles-servlet_src_main_java_com_google_gitiles_DefaultAccess.java,5.0,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.util.Set<java.lang.String> branches) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> repos = com.google.common.collect.Maps.newTreeMap(com.google.gitiles.DefaultAccess.US_COLLATOR); for (org.eclipse.jgit.lib.Repository repo : scanRepositories(basePath, req)) { repos.put(getRepositoryName(repo), buildDescription(repo, branches)); repo.close(); } return repos; }",3245606439857dcadeadc57d368059c3284266c8,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.lang.String prefix, java.util.Set<java.lang.String> branches) throws java.io.IOException { prefix = com.google.common.base.Strings.emptyToNull(prefix); if ((prefix != null) && (!(prefix.endsWith(""/"")))) { prefix += '/'; } java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> repos = com.google.common.collect.Maps.newTreeMap(com.google.gitiles.DefaultAccess.US_COLLATOR); for (org.eclipse.jgit.lib.Repository repo : scanRepositories(basePath, req)) { java.lang.String name = getRepositoryName(repo); if ((prefix == null) || (name.startsWith(prefix))) { repos.put(name, buildDescription(repo, branches)); } repo.close(); } return repos; }",2ecfdbd64aa52d5bfbce3c05272797e69b8a1b53,listRepositories(java.util.Set),"listRepositories(java.lang.String,java.util.Set)",2,7,"@java.lang.Override public java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> listRepositories(java.lang.String prefix, java.util.Set<java.lang.String> branches) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> repos = com.google.common.collect.Maps.newTreeMap(com.google.gitiles.DefaultAccess.US_COLLATOR); for (org.eclipse.jgit.lib.Repository repo : scanRepositories(basePath, prefix, req)) { repos.put(getRepositoryName(repo), buildDescription(repo, branches)); repo.close(); } return repos; }",db289a13bb5cdf6d810399836970a1f794b42d2f,"listRepositories(java.lang.String,java.util.Set)",123194,228,164
68292,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,28.0,"private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy(com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }",75ad57c6b7974bea8959600284eb9f6eec768635,"private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException, com.google.gwtorm.server.OrmException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), cd.change().getDest()); }",a1a733e89c3ebd67a170c73f8e639f6a18aecc63,createStrategy(com.google.gerrit.extensions.client.SubmitType),"createStrategy(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.server.query.change.ChangeData)",26,43,"private com.google.gerrit.server.git.strategy.SubmitStrategy createStrategy(com.google.gerrit.extensions.client.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }",75ad57c6b7974bea8959600284eb9f6eec768635,createStrategy(com.google.gerrit.extensions.client.SubmitType),64936,133,99
70434,src_main_java_com_googlesource_gerrit_plugins_reviewnotes_ExportReviewNotes.java,6.0,"@java.lang.Override public void run() { com.google.gerrit.reviewdb.server.ReviewDb db; try { db = database.open(); } catch (com.google.gwtorm.server.OrmException e) { stderr.println(e.getMessage()); return; } try { for (; ;) { java.util.Map.Entry<com.google.gerrit.reviewdb.client.Project.NameKey, java.util.List<com.google.gerrit.reviewdb.client.Change>> next = next(); if (next != null) { try { export(db, next.getKey(), next.getValue()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { stderr.println(e.getMessage()); } } else { break; } } } finally { monitor.endWorker(); db.close(); } }",d42554837492fc0921738a8651996e126650df2e,"@java.lang.Override public void run() { try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { java.util.Map.Entry<com.google.gerrit.reviewdb.client.Project.NameKey, java.util.List<com.google.gerrit.reviewdb.client.Change>> next = next(); if (next != null) { try { export(db, next.getKey(), next.getValue()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { stderr.println(e.getMessage()); } } else { break; } } } catch (com.google.gwtorm.server.OrmException e) { stderr.println(e.getMessage()); return; } finally { monitor.endWorker(); } }",146eff0d767f61fb42d1c0190bdf660f61daee64,run(),run(),3,6,"@java.lang.Override public void run() { try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { java.util.Map.Entry<com.google.gerrit.reviewdb.client.Project.NameKey, java.util.List<com.google.gerrit.reviewdb.client.Change>> next = next(); if (next != null) { try { export(db, next.getKey(), next.getValue()); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { stderr.println(e.getMessage()); } } else { break; } } } catch (com.google.gwtorm.server.OrmException e) { stderr.println(e.getMessage()); } finally { monitor.endWorker(); } }",33d8a7b1c1451a92199155b00d5ec3529472d74a,run(),204411,192,190
73381,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_RevisionApiImpl.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType testSubmitType(com.google.gerrit.server.change.TestSubmitRule.Input in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return testSubmitType.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot test submit type"", e); } }",4bca9b59c25ebc8a67c4b08b28f686b4826ddb74,,testSubmitType(com.google.gerrit.server.change.TestSubmitRule$Input),4,1,"@java.lang.Override public com.google.gerrit.extensions.client.SubmitType testSubmitType(com.google.gerrit.extensions.common.TestSubmitRuleInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return testSubmitType.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot test submit type"", e); } }",7a82492698239e8e3e6424ec40b78b6f153495d2,testSubmitType(com.google.gerrit.extensions.common.TestSubmitRuleInput),142912,117,116
80720,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsApiServlet.java,1.0,"@java.lang.Override protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest request, java.lang.String path) throws org.eclipse.jgit.lfs.errors.LfsException { java.lang.String pathInfo = (path.startsWith(""/"")) ? path : ""/"" + path; java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.LfsApiServlet.URL_PATTERN.matcher(pathInfo); if (!(matcher.matches())) { return null; } com.google.gerrit.reviewdb.client.Project.NameKey project = Project.NameKey.parse(com.google.gerrit.common.ProjectUtil.stripGitSuffix(matcher.group(1))); com.google.gerrit.server.project.ProjectState state = projectCache.get(project); if ((state == null) || ((state.getProject().getState()) == (HIDDEN))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } if ((request.getOperation().equals(""upload"")) && ((state.getProject().getState()) == (READ_ONLY))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryReadOnly(project.get()); } org.eclipse.jgit.lib.Config config = pluginConfigFactory.getProjectPluginConfigWithInheritance(state, pluginName); return config.getBoolean(""lfs"", ""enabled"", false) ? getRepository() : null; }",aa6aaf2713515430c6f727b67a96421580687c5b,"@java.lang.Override protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest request, java.lang.String path) throws org.eclipse.jgit.lfs.errors.LfsException { java.lang.String pathInfo = (path.startsWith(""/"")) ? path : ""/"" + path; java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.LfsApiServlet.URL_PATTERN.matcher(pathInfo); if (!(matcher.matches())) { return null; } com.google.gerrit.reviewdb.client.Project.NameKey project = Project.NameKey.parse(com.google.gerrit.common.ProjectUtil.stripGitSuffix(matcher.group(1))); com.google.gerrit.server.project.ProjectState state = projectCache.get(project); if ((state == null) || ((state.getProject().getState()) == (HIDDEN))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } if ((request.getOperation().equals(""upload"")) && ((state.getProject().getState()) == (READ_ONLY))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryReadOnly(project.get()); } org.eclipse.jgit.lib.Config config = pluginConfigFactory.getProjectPluginConfigWithInheritance(state, pluginName); if (!(config.getBoolean(""lfs"", ""enabled"", false))) { return null; } if (request.getOperation().equals(""upload"")) { long maxObjectSize = config.getLong(""lfs"", ""maxObjectSize"", 0); if (maxObjectSize > 0) { for (org.eclipse.jgit.lfs.server.LfsObject object : request.getObjects()) { if ((object.getSize()) > maxObjectSize) { throw new org.eclipse.jgit.lfs.errors.LfsValidationError(((""size of object "" + (object.getOid())) + "" exceeds limit"")); } } } } return getRepository(); }",ac7b80487d0103a9e7e2bb8d1fbb16b4faabd2ba,"getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest,java.lang.String)","getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest,java.lang.String)",8,1,"@java.lang.Override protected org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest request, java.lang.String path) throws org.eclipse.jgit.lfs.errors.LfsException { java.lang.String pathInfo = (path.startsWith(""/"")) ? path : ""/"" + path; java.util.regex.Matcher matcher = com.googlesource.gerrit.plugins.lfs.LfsApiServlet.URL_PATTERN.matcher(pathInfo); if (!(matcher.matches())) { return null; } com.google.gerrit.reviewdb.client.Project.NameKey project = Project.NameKey.parse(com.google.gerrit.common.ProjectUtil.stripGitSuffix(matcher.group(1))); com.google.gerrit.server.project.ProjectState state = projectCache.get(project); if ((state == null) || ((state.getProject().getState()) == (HIDDEN))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } if ((request.getOperation().equals(""upload"")) && ((state.getProject().getState()) == (READ_ONLY))) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryReadOnly(project.get()); } org.eclipse.jgit.lib.Config config = pluginConfigFactory.getProjectPluginConfigWithInheritance(state, pluginName); if (!(config.getBoolean(""lfs"", ""enabled"", false))) { return null; } if (request.getOperation().equals(""upload"")) { long maxObjectSize = config.getLong(""lfs"", ""maxObjectSize"", 0); if (maxObjectSize > 0) { for (org.eclipse.jgit.lfs.server.LfsObject object : request.getObjects()) { if ((object.getSize()) > maxObjectSize) { throw new org.eclipse.jgit.lfs.errors.LfsValidationError(java.lang.String.format(""size of object %s (%d bytes) exceeds limit (%d bytes)"", object.getOid(), object.getSize(), maxObjectSize)); } } } } return getRepository(); }",51373e575fb6ec4472162d45877e007bd5aea8e6,"getLargeFileRepository(com.googlesource.gerrit.plugins.lfs.LfsRequest,java.lang.String)",100228,471,490
76826,gerrit-gwtui_src_main_java_com_google_gerrit_client_StringListPanel.java,3.0,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { widget.setEnabled(true); add(); } },5675a926c17e5784aeec3b41d658b19d3591e14f,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { widget.setEnabled(true); add(); } },297e73c4c0ceb8df0495f5ee5d2f6ee59ab93e5b,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),4,3,@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { widget.setEnabled(true); add(); } },5675a926c17e5784aeec3b41d658b19d3591e14f,onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent),48349,70,72
86379,gerrit-server_src_main_java_com_google_gerrit_server_change_SetAssigneeOp.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if ((change) != null) { assigneeChanged.fire(change, ctx.getAccount(), oldAssignee, ctx.getWhen()); } }",6f4546bd8b0480b7ab7e5db8ed16c8df441834a4,,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),8,3,"@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { assigneeChanged.fire(change, ctx.getAccount(), oldAssignee, ctx.getWhen()); }",68483891091aefcc9f2156f893af523ac60237c4,postUpdate(com.google.gerrit.server.git.BatchUpdate.Context),183066,74,64
48890,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,5.0,private java.lang.Runnable doScroll(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCm(cm); return new java.lang.Runnable() { public void run() { if (((cm.getScrollSetAt()) + 50) > (java.lang.System.currentTimeMillis())) { return; } net.codemirror.lib.ScrollInfo si = cm.getScrollInfo(); if (((si.getTop()) == 0) && (!(com.google.gerrit.client.Gerrit.isHeaderVisible()))) { com.google.gerrit.client.Gerrit.setHeaderVisible(true); diffTable.updateFileCommentVisibility(false); resizeCodeMirror(); } else if (((si.getTop()) > (0.5 * (si.getClientHeight()))) && (com.google.gerrit.client.Gerrit.isHeaderVisible())) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); diffTable.updateFileCommentVisibility(true); resizeCodeMirror(); } other.scrollToY(si.getTop()); other.setScrollSetAt(java.lang.System.currentTimeMillis()); (cm == (cmA) ? scrollTimerA : scrollTimerB).schedule(50); } }; },86dc6600813b8feaddf6c30dde2d5cea2791f16d,private java.lang.Runnable doScroll(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { public void run() { if (((cm.getScrollSetAt()) + 5) > (java.lang.System.currentTimeMillis())) { return; } net.codemirror.lib.ScrollInfo si = cm.getScrollInfo(); if (((si.getTop()) == 0) && (!(com.google.gerrit.client.Gerrit.isHeaderVisible()))) { com.google.gerrit.client.Gerrit.setHeaderVisible(true); diffTable.updateFileCommentVisibility(false); resizeCodeMirror(); } else if (((si.getTop()) > (0.5 * (si.getClientHeight()))) && (com.google.gerrit.client.Gerrit.isHeaderVisible())) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); diffTable.updateFileCommentVisibility(true); resizeCodeMirror(); } fixScroll(cm); scrollTimerA.cancel(); scrollTimerB.cancel(); (cm == (cmA) ? scrollTimerA : scrollTimerB).schedule(10); } }; },9638e6dafd8735d5b6ac129fd1ab486fad98ab95,doScroll(net.codemirror.lib.CodeMirror),doScroll(net.codemirror.lib.CodeMirror),2,5,private java.lang.Runnable doScroll(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { public void run() { if (((cm.getScrollSetAt()) + 5) > (java.lang.System.currentTimeMillis())) { return; } net.codemirror.lib.ScrollInfo si = cm.getScrollInfo(); if (((si.getTop()) == 0) && (!(com.google.gerrit.client.Gerrit.isHeaderVisible()))) { com.google.gerrit.client.Gerrit.setHeaderVisible(true); diffTable.updateFileCommentVisibility(false); } else if (((si.getTop()) > (0.5 * (si.getClientHeight()))) && (com.google.gerrit.client.Gerrit.isHeaderVisible())) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); diffTable.updateFileCommentVisibility(true); } fixScroll(cm); scrollTimerA.cancel(); scrollTimerB.cancel(); (cm == (cmA) ? scrollTimerA : scrollTimerB).schedule(10); } }; },c536decfc173392e287249892baf0ea8e0e32fd1,doScroll(net.codemirror.lib.CodeMirror),60023,255,247
138777,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,52.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void createGroupBranch(java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(allUsers);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(""Create group""); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",f61af29dc98d869295b92bcde3f9a62855dc35d4,,createGroupBranch(java.lang.String),2,43,"private void createGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String ref) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(project);org.eclipse.jgit.lib.ObjectInserter oi = r.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(r)) { org.eclipse.jgit.lib.ObjectId emptyTree = oi.insert(Constants.OBJ_TREE, new byte[]{ }); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(serverIdent.get(), com.google.gerrit.common.TimeUtil.nowTs()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(emptyTree); cb.setCommitter(ident); cb.setAuthor(ident); cb.setMessage(""Create group""); org.eclipse.jgit.lib.ObjectId emptyCommit = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate updateRef = r.updateRef(ref); updateRef.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); updateRef.setNewObjectId(emptyCommit); assertThat(updateRef.update(rw)).isEqualTo(RefUpdate.Result.NEW); } }",74ff1695e895ad9b5c06a02ce6dfec6cfa08b00e,"createGroupBranch(com.google.gerrit.reviewdb.client.Project$NameKey,java.lang.String)",129071,327,345
142471,src_main_java_com_ericsson_gerrit_plugins_highavailability_health_HealthServlet.java,,,,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; }",9551d75165e1f98ccf9bba81dff18f9bd2bf6506,,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",8,0,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) { this.healthy = true; rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.health.SC_NO_CONTENT); }",768177e48abce8fc3e6d1b8ef3a6adde0f5da46c,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",120549,38,64
165852,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_InitIndex.java,1.0,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { index.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); index.string(""Hostname"", ""hostname"", ""localhost""); index.string(""Port"", ""port"", ""9200""); index.string(""Index Name"", ""name"", ""gerrit""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",b641a7dbc702a297261651803caab4f5a05b2775,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { java.lang.String name = index.string(""Index Name"", ""name"", ""gerrit""); com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get(""elasticsearch"", name); elasticsearch.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); elasticsearch.string(""Hostname"", ""hostname"", ""localhost""); elasticsearch.string(""Port"", ""port"", ""9200""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",50569fa68e8e99ac75b0a468dd4c536f747a32e7,run(),run(),3,1,"@java.lang.Override public void run() throws java.io.IOException { com.google.gerrit.server.index.IndexModule.IndexType type = com.google.gerrit.server.index.IndexModule.IndexType.LUCENE; if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) > 1) { ui.header(""Index""); type = index.select(""Type"", ""type"", type); } if (type == (com.google.gerrit.server.index.IndexModule.IndexType.ELASTICSEARCH)) { com.google.gerrit.pgm.init.api.Section elasticsearch = sections.get(""elasticsearch"", null); elasticsearch.string(""Index Prefix"", ""prefix"", ""gerrit""); java.lang.String name = ui.readString(""default"", ""Server Name""); com.google.gerrit.pgm.init.api.Section defaultServer = sections.get(""elasticsearch"", name); defaultServer.select(""Transport protocol"", ""protocol"", ""http"", com.google.common.collect.Sets.newHashSet(""http"", ""https"")); defaultServer.string(""Hostname"", ""hostname"", ""localhost""); defaultServer.string(""Port"", ""port"", ""9200""); } if (((site.isNew) || (isEmptySite())) && (type == (com.google.gerrit.server.index.IndexModule.IndexType.LUCENE))) { for (com.google.gerrit.server.index.SchemaDefinitions<?> def : com.google.gerrit.server.index.IndexModule.ALL_SCHEMA_DEFS) { com.google.gerrit.server.index.IndexUtils.setReady(site, def.getName(), def.getLatest().getVersion(), true); } } else { if ((com.google.gerrit.server.index.IndexModule.IndexType.values().length) <= 1) { ui.header(""Index""); } java.lang.String message = java.lang.String.format((""\nThe index must be %sbuilt before starting Gerrit:\n"" + "" java -jar gerrit.war reindex -d site_path\n""), (site.isNew ? """" : ""re"")); ui.message(message); initFlags.autoStart = false; } }",f9724c4829e5050fb7ce91a481719fdd479a8281,run(),200098,461,499
63015,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen2.java,50.0,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }",b4e38cdbc0e8decaa810e974b6608cf7c2041884,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); if (info.revision(revision).draft()) { quickApprove.setVisible(false); } }",8ab6ec04b7ed85d26430a41837869d23b8b6211d,"initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)","initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",4,50,"private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals(""edit"")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }",b4e38cdbc0e8decaa810e974b6608cf7c2041884,"initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo,java.lang.String)",209719,356,337
15805,gerrit-httpd_src_main_java_com_google_gerrit_httpd_WebSession.java,13.0,"@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>> type = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>>() {}; core(type, com.google.gerrit.httpd.WebSession.CACHE_NAME).memoryLimit(1024).maxAge(12, java.util.concurrent.TimeUnit.HOURS).evictionPolicy(EvictionPolicy.LRU); bind(com.google.gerrit.httpd.WebSession.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.httpd.WebSession.KeyGenerator.class).in(com.google.gerrit.httpd.SINGLETON); }",4328bcd754f079c84d002a29fa773bd05b22ae3b,"@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>> type = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>>() {}; core(type, com.google.gerrit.httpd.WebSession.CACHE_NAME, ActiveSession.Key.class, com.google.gerrit.reviewdb.ActiveSession.class).memoryLimit(1024).maxAge(12, java.util.concurrent.TimeUnit.HOURS).evictionPolicy(EvictionPolicy.LRU); bind(com.google.gerrit.httpd.WebSession.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.httpd.WebSession.KeyGenerator.class).in(com.google.gerrit.httpd.SINGLETON); }",ebb3b9e7e1edcc8944ceddbd11abc369eda6ac90,configure(),configure(),3,13,"@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>> type = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<com.google.gerrit.reviewdb.ActiveSession.Key, com.google.gerrit.reviewdb.ActiveSession>>() {}; core(type, com.google.gerrit.httpd.WebSession.CACHE_NAME).memoryLimit(1024).maxAge(12, java.util.concurrent.TimeUnit.HOURS).evictionPolicy(EvictionPolicy.LRU); bind(com.google.gerrit.httpd.WebSession.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.httpd.WebSession.KeyGenerator.class).in(com.google.gerrit.httpd.SINGLETON); }",4328bcd754f079c84d002a29fa773bd05b22ae3b,configure(),206966,253,230
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CommentBox.java,12.0,"void resizePaddingWidget() { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { paddingWidgetEle.getStyle().setHeight(getOffsetHeight(), Unit.PX); paddingWidget.changed(); selfWidget.changed(); } }); }",21bc54845f2208ef978a4be1cd8151934867dc9b,void resizePaddingWidget() { selfWidget.changed(); widgetManager.resizePaddingWidget(); },ef388ea217e81abed972ded5ed82de94ae37141a,resizePaddingWidget(),resizePaddingWidget(),4,12,"void resizePaddingWidget() { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { public void execute() { if (((selfWidget) == null) || ((widgetManager) == null)) { throw new java.lang.IllegalStateException(""resizePaddingWidget() called before setting up widgets""); } selfWidget.changed(); widgetManager.resizePaddingWidget(); } }); }",f1600424289a5d9c0880e8e11ce3bbaa6d131508,resizePaddingWidget(),115269,19,98
90350,src_main_java_com_googlesource_gerrit_plugins_hooks_CommitReceived.java,1.0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { com.google.gerrit.server.IdentifiedUser user = receiveEvent.user; java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = org.eclipse.jgit.lib.ObjectId.zeroId(); if ((receiveEvent.commit.getParentCount()) > 0) { old = receiveEvent.commit.getParent(0); } if (receiveEvent.command.getRefName().startsWith(com.googlesource.gerrit.plugins.hooks.REFS_CHANGES)) { refname = refname.replace(com.googlesource.gerrit.plugins.hooks.R_HEADS, ""refs/for/refs/heads/""); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs(); args.add(""--project"", receiveEvent.project.getName()); args.add(""--refname"", refname); args.add(""--uploader"", user.getNameEmail()); args.add(""--oldrev"", old.name()); args.add(""--newrev"", receiveEvent.commit.name()); com.googlesource.gerrit.plugins.hooks.HookResult result = hook.run(args); if ((result != null) && ((result.getExitValue()) != 0)) { throw new com.google.gerrit.server.git.validators.CommitValidationException(result.toString().trim()); } return java.util.Collections.emptyList(); }",6830447085b2dc233c9810c03eb12a4f84893580,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { com.google.gerrit.server.IdentifiedUser user = receiveEvent.user; java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = org.eclipse.jgit.lib.ObjectId.zeroId(); if ((receiveEvent.commit.getParentCount()) > 0) { old = receiveEvent.commit.getParent(0); } if (receiveEvent.command.getRefName().startsWith(com.googlesource.gerrit.plugins.hooks.REFS_CHANGES)) { refname = refname.replace(com.googlesource.gerrit.plugins.hooks.R_HEADS, ""refs/for/refs/heads/""); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs(); args.add(""--project"", receiveEvent.project.getName()); args.add(""--refname"", refname); args.add(""--uploader"", user.getNameEmail()); args.add(""--oldrev"", old.name()); args.add(""--newrev"", receiveEvent.commit.name()); com.googlesource.gerrit.plugins.hooks.HookResult result = hook.run(args); if (result != null) { java.lang.String output = result.toString(); if ((result.getExitValue()) != 0) { throw new com.google.gerrit.server.git.validators.CommitValidationException(output); } if (!(output.isEmpty())) { return com.google.common.collect.FluentIterable.from(com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf(""\n\r"")).splitToList(output)).transform(com.googlesource.gerrit.plugins.hooks.CommitReceived.MESSAGE).toList(); } } return java.util.Collections.emptyList(); }",d34867934c369ff1b9b02e6e95be02d1de0d0ce7,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),3,0,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { com.google.gerrit.server.IdentifiedUser user = receiveEvent.user; java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = org.eclipse.jgit.lib.ObjectId.zeroId(); if ((receiveEvent.commit.getParentCount()) > 0) { old = receiveEvent.commit.getParent(0); } if (receiveEvent.command.getRefName().startsWith(com.googlesource.gerrit.plugins.hooks.REFS_CHANGES)) { refname = refname.replace(com.googlesource.gerrit.plugins.hooks.R_HEADS, ""refs/for/refs/heads/""); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.googlesource.gerrit.plugins.hooks.HookArgs args = hookFactory.createArgs(); args.add(""--project"", receiveEvent.project.getName()); args.add(""--refname"", refname); args.add(""--uploader"", user.getNameEmail()); args.add(""--oldrev"", old.name()); args.add(""--newrev"", receiveEvent.commit.name()); com.googlesource.gerrit.plugins.hooks.HookResult result = hook.run(args); if (result != null) { java.lang.String output = result.toString(); if ((result.getExitValue()) != 0) { throw new com.google.gerrit.server.git.validators.CommitValidationException(output); } if (!(output.isEmpty())) { return com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidationMessage(output, false)); } } return java.util.Collections.emptyList(); }",228acc3dfbb94ff93f4ac90bfedd5600dfb8b0bc,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),146203,481,446
46280,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPasswordScreen.java,10.0,"private void doClearPassword() { if ((id) != null) { enableUI(false); Util.ACCOUNT_SEC.clearPassword(id.getKey(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.AccountExternalId>() { public void onSuccess(final com.google.gerrit.reviewdb.client.AccountExternalId result) { display(result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { enableUI(true); } }); } }",75ff6ab16281192a8e03c7a22c5601157558ebd1,"private void doClearPassword() { if ((id) != null) { enableUI(false); com.google.gerrit.client.account.AccountApi.clearHttpPassword(id.getAccountId().toString(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { id.setPassword(null); display(id); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { enableUI(true); } }); } }",fdbc8f39cdae9261045b4c2cb5fb1944debd638f,doClearPassword(),doClearPassword(),5,10,"private void doClearPassword() { if ((id) != null) { enableUI(false); com.google.gerrit.client.account.AccountApi.clearHttpPassword(""self"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { id.setPassword(null); display(id); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { enableUI(true); } }); } }",a3b481bf45006ea8bd2d3cdacf9e9239011f78d1,doClearPassword(),168057,138,134
59015,github-oauth_src_main_java_com_googlesource_gerrit_plugins_github_oauth_OAuthProtocol.java,2.0,"@java.lang.Override public java.lang.String toString() { return (((""AccessToken [access_token="" + (access_token)) + "", token_type="") + (token_type)) + ""]""; }",219c730c6b7eb7cdc9661ee4e3d9c0452576a019,"@java.lang.Override public java.lang.String toString() { if (isError()) { return (((((""Error AcessToken [error="" + (error)) + "", error_description="") + (error_description)) + "", error_uri="") + (error_uri)) + ""]""; } else { return (((""AccessToken [access_token="" + (access_token)) + "", token_type="") + (token_type)) + ""]""; } }",ee72664a8e8271deeb50e8d36db7c597472205d8,toString(),toString(),4,3,"@java.lang.Override public java.lang.String toString() { if (isError()) { return (((((""Error AccessToken [error="" + (error)) + "", error_description="") + (errorDescription)) + "", error_uri="") + (errorUri)) + ""]""; } else { return (((""AccessToken [access_token="" + (accessToken)) + "", token_type="") + (tokenType)) + ""]""; } }",8fe6085f2588a085897e6d2e7c57697958f28c75,toString(),191527,106,100
73058,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteVote.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.server.change.DeleteVote.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.server.project.ChangeControl ctl = r.getControl(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), ctl.getUser().asIdentifiedUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel())); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",389b81caf0e8bb6f977a83ce9eefa420edf1456c,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.server.change.DeleteVote.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), rsrc.getReviewer().getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel())); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",ffc048f285442be26ebf2c2a4c0ef4e0f76fffd6,"apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.server.change.DeleteVote$Input)","apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.server.change.DeleteVote$Input)",5,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.server.change.DeleteVote.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel())); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }",4ad0a7fb6d9300f35794a9f59a85e34853964f6f,"apply(com.google.gerrit.server.change.VoteResource,com.google.gerrit.server.change.DeleteVote$Input)",183172,252,248
53495,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChangesTab.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void renderRange(int start, int end, boolean removeAll, boolean insertFirst) { if (insertFirst || removeAll) { startRow = start; top = start * (rowHeight); } if ((!insertFirst) || removeAll) { bottom = (end * (rowHeight)) - (maxHeight); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); for (int i = start; i < end; i++) { renderRow(sb, i); } if (removeAll) { body.setInnerSafeHtml(sb); body.getStyle().setTop(top, Style.Unit.PX); } else { surrogate.setInnerSafeHtml(sb); for (int cnt = surrogate.getChildCount(); cnt > 0; cnt--) { fragment.appendChild(surrogate.getFirstChild()); } if (insertFirst) { body.insertFirst(fragment); body.getStyle().setTop(top, Style.Unit.PX); } else { body.appendChild(fragment); } } }",417123abc5713c6b84d8e3a4cb646ce52c142db4,,"renderRange(int,int,boolean,boolean)",9,31,"private void renderRange(int start, int end, boolean removeAll, boolean insertFirst) { if (insertFirst || removeAll) { startRow = start; top = start * (rowHeight); } if ((!insertFirst) || removeAll) { bottom = ((end - 2) * (rowHeight)) - (maxHeight); } com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); for (int i = start; i < end; i++) { sb.append(rows.get(i)); } if (removeAll) { body.setInnerSafeHtml(sb); body.getStyle().setTop(top, Style.Unit.PX); } else { surrogate.setInnerSafeHtml(sb); for (int cnt = surrogate.getChildCount(); cnt > 0; cnt--) { fragment.appendChild(surrogate.getFirstChild()); } if (insertFirst) { body.insertFirst(fragment); body.getStyle().setTop(top, Style.Unit.PX); } else { body.appendChild(fragment); } } }",68bddf8ee8f717ccbe4e4bf049c90b03ae2b8ee9,"renderRange(int,int,boolean,boolean)",135676,229,235
62515,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,40.0,private void fireEventForUnrestrictedListeners(final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeListener listener : unrestrictedListeners) { listener.onChangeEvent(event); } },9b6ab3b57023e7e8a3a3840dd8d70c19a1e07772,private void fireEventForUnrestrictedListeners(final com.google.gerrit.server.events.Event event) { for (com.google.gerrit.common.ChangeListener listener : unrestrictedListeners) { listener.onEvent(event); } },2721ba87e36515cae27be246c6c060c7de49ec0b,fireEventForUnrestrictedListeners(com.google.gerrit.server.events.ChangeEvent),fireEventForUnrestrictedListeners(com.google.gerrit.server.events.Event),9,29,private void fireEventForUnrestrictedListeners(final com.google.gerrit.server.events.Event event) { for (com.google.gerrit.common.EventListener listener : unrestrictedListeners) { listener.onEvent(event); } },37f9daf5ac982a0570f021fb7a4686b7493862f3,fireEventForUnrestrictedListeners(com.google.gerrit.server.events.Event),19786,54,54
55390,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginGuiceEnvironment.java,9.0,"public void setHttpInjector(com.google.inject.Injector injector) { httpModule = copy(injector); httpGen = injector.getProvider(com.google.gerrit.server.plugins.ModuleGenerator.class); httpSets = dynamicSetsOf(injector); httpMaps = dynamicMapsOf(injector); onStart.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.StartPluginListener.class)); onReload.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.ReloadPluginListener.class)); }",c54b981fe299048228d26f6d86e1ea094b48f1b3,"public void setHttpInjector(com.google.inject.Injector injector) { httpModule = copy(injector); httpGen = injector.getProvider(com.google.gerrit.server.plugins.ModuleGenerator.class); httpItems = dynamicItemOf(injector); httpSets = dynamicSetsOf(injector); httpMaps = dynamicMapsOf(injector); onStart.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.StartPluginListener.class)); onReload.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.ReloadPluginListener.class)); }",4c4e20577133914b3504644195ff95136be6a7e9,setHttpInjector(com.google.inject.Injector),setHttpInjector(com.google.inject.Injector),4,9,"public void setHttpInjector(com.google.inject.Injector injector) { httpModule = copy(injector); httpGen = injector.getProvider(com.google.gerrit.server.plugins.ModuleGenerator.class); httpItems = dynamicItemsOf(injector); httpSets = dynamicSetsOf(injector); httpMaps = dynamicMapsOf(injector); onStart.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.StartPluginListener.class)); onReload.addAll(com.google.gerrit.server.plugins.PluginGuiceEnvironment.listeners(injector, com.google.gerrit.server.plugins.ReloadPluginListener.class)); }",4527d4a016631233ee6467f176664fc33bfa8216,setHttpInjector(com.google.inject.Injector),178279,157,157
76474,gerrit-server_src_main_java_com_google_gerrit_server_account_SshKeys.java,2.0,"public AccountResource.SshKey parse(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { try { int seq = java.lang.Integer.parseInt(id.get(), 10); com.google.gerrit.reviewdb.client.AccountSshKey sshKey = dbProvider.get().accountSshKeys().get(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(user.getAccountId(), seq)); if (sshKey == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource.SshKey(user, sshKey); } catch (java.lang.NumberFormatException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",1baf5273d497e267a3777c37737935334a6c8402,"public AccountResource.SshKey parse(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { int seq = java.lang.Integer.parseInt(id.get(), 10); com.google.gerrit.reviewdb.client.AccountSshKey sshKey; if (readFromGit) { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName.get())) { com.google.gerrit.server.account.VersionedAuthorizedKeys authorizedKeys = new com.google.gerrit.server.account.VersionedAuthorizedKeys(user.getAccountId()); authorizedKeys.load(git); sshKey = authorizedKeys.getKey(seq); } } else { sshKey = dbProvider.get().accountSshKeys().get(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(user.getAccountId(), seq)); } if (sshKey == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource.SshKey(user, sshKey); } catch (java.lang.NumberFormatException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",4521d8da2cfd7744d3a45c3ffa2ac87116edf208,"parse(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.restapi.IdString)",9,2,"public AccountResource.SshKey parse(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { int seq = java.lang.Integer.parseInt(id.get(), 10); com.google.gerrit.reviewdb.client.AccountSshKey sshKey = authorizedKeys.getKey(user.getAccountId(), seq); if (sshKey == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return new com.google.gerrit.server.account.AccountResource.SshKey(user, sshKey); } catch (java.lang.NumberFormatException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }",726f88f4a69b1749e78c360f573a9d6f5ae73285,"parse(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.restapi.IdString)",84823,340,206
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void addReviewerToReviewableChangeByOtherCcingSelfInNoteDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeByOtherCcingSelfInNoteDb(batch()); },2614a4b2d4acd5cd492cd5a95650c641df9c9759,,addReviewerToReviewableChangeByOtherCcingSelfInNoteDbBatch(),16,11,@org.junit.Test public void addReviewerToReviewableChangeByOtherCcingSelfInNoteDbBatch() throws java.lang.Exception { addReviewerToReviewableChangeByOtherCcingSelfInNoteDb(batch()); },ac1fe0a392d4c1f566e7a78720e4158a6979938d,addReviewerToReviewableChangeByOtherCcingSelfInNoteDbBatch(),145708,66,53
41201,gerrit-server_src_main_java_com_google_gerrit_server_group_ListMembers.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, final boolean recursive, final java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> members = com.google.common.collect.Maps.newHashMap(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); final com.google.gerrit.common.data.GroupDetail groupDetail = groupDetailFactory.create(group.getId()).call(); if ((groupDetail.members) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupMember member : groupDetail.members) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(member.getAccountId()).getAccount(); members.put(account.getId(), com.google.gerrit.server.group.MembersCollection.parse(account)); } } if (recursive) { if ((groupDetail.includes) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupIncludeByUuid includedGroup : groupDetail.includes) { if (!(seenGroups.contains(includedGroup.getIncludeUUID()))) { members.putAll(getMembers(includedGroup.getIncludeUUID(), recursive, seenGroups)); } } } } return members; }",4cd5639c4f7d060c797f36e894f9b346a8aacc5b,,"getMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,boolean,java.util.HashSet)",2,1,"private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, final java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.group.MembersCollection.MemberInfo> members = com.google.common.collect.Maps.newHashMap(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail = groupDetailFactory.create(group.getId()).call(); if ((groupDetail.members) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupMember m : groupDetail.members) { if (!(members.containsKey(m.getAccountId()))) { final com.google.gerrit.reviewdb.client.Account account = accountCache.get(m.getAccountId()).getAccount(); members.put(account.getId(), com.google.gerrit.server.group.MembersCollection.parse(account)); } } } if (recursive) { if ((groupDetail.includes) != null) { for (final com.google.gerrit.reviewdb.client.AccountGroupIncludeByUuid includedGroup : groupDetail.includes) { if (!(seenGroups.contains(includedGroup.getIncludeUUID()))) { members.putAll(getMembers(includedGroup.getIncludeUUID(), seenGroups)); } } } } return members; }",43216150309b450fbd4146608e3e1c8c140e6d9e,"getMembers(com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.util.HashSet)",183727,430,453
14923,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,5.0,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent event = new com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent(); event.change = getChangeAttribute(change); event.submitter = getAccountAttribute(account); event.patchSet = getPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",610c0cd98a8460d0dfe599eb6ae80e71d915bf1b,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent event = new com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent(); event.change = getChangeAttribute(change); event.submitter = getAccountAttribute(account); event.patchSet = getPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--change-number""); args.add(event.change.number); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",2c38d4cc29907a48a74236eff4728a2372be3d5f,"doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)","doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)",2,5,"public void doChangeMergedHook(final com.google.gerrit.reviewdb.Change change, final com.google.gerrit.reviewdb.Account account, final com.google.gerrit.reviewdb.PatchSet patchSet) { final com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent event = new com.google.gerrit.common.ChangeHookRunner.ChangeMergedEvent(); event.change = getChangeAttribute(change); event.submitter = getAccountAttribute(account); event.patchSet = getPatchSetAttribute(patchSet); fireEvent(change, event); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); args.add(changeMergedHook.getAbsolutePath()); args.add(""--change""); args.add(event.change.id); args.add(""--change-url""); args.add(event.change.url); args.add(""--project""); args.add(event.change.project); args.add(""--branch""); args.add(event.change.branch); args.add(""--submitter""); args.add(getDisplayName(account)); args.add(""--commit""); args.add(event.patchSet.revision); runHook(getRepo(change), args); }",37361b2e80c64f64b3bd6dcae98911ef03abf2ac,"doChangeMergedHook(com.google.gerrit.reviewdb.Change,com.google.gerrit.reviewdb.Account,com.google.gerrit.reviewdb.PatchSet)",77411,280,280
71132,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SubmitByFastForwardIT.java,4.0,"@org.junit.Test public void submitTwoChangesWithFastForward() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); approve(change.getChangeId()); submit(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change2.getCommitId()); assertThat(head.getParent(0).getId()).isEqualTo(change.getCommitId()); assertSubmitter(change.getChangeId(), 1); assertSubmitter(change2.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); }",ba9d57e326537e7e896ffb1be59608177896ec1d,"@org.junit.Test public void submitTwoChangesWithFastForward() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); java.lang.String id1 = change.getChangeId(); java.lang.String id2 = change2.getChangeId(); approve(id1); submit(id2); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change2.getCommitId()); assertThat(head.getParent(0).getId()).isEqualTo(change.getCommitId()); assertSubmitter(change.getChangeId(), 1); assertSubmitter(change2.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); assertSubmittedTogether(id1, id2, id1); assertSubmittedTogether(id2, id2, id1); }",7ccaf56503f6f1056cf36f8080c67c861cb9fcf8,submitTwoChangesWithFastForward(),submitTwoChangesWithFastForward(),13,4,"@org.junit.Test public void submitTwoChangesWithFastForward() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); java.lang.String id1 = change.getChangeId(); java.lang.String id2 = change2.getChangeId(); approve(id1); submit(id2); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change2.getCommitId()); assertThat(head.getParent(0).getId()).isEqualTo(change.getCommitId()); assertSubmitter(change.getChangeId(), 1); assertSubmitter(change2.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); assertSubmittedTogether(id1, id1, id2); assertSubmittedTogether(id2, id1, id2); }",5280c6695bbfaa6921bf689eea7cb2b6eae6ee27,submitTwoChangesWithFastForward(),7906,221,221
127030,src_test_java_com_googlesource_gerrit_plugins_webhooks_EventHandlerTest.java,7.0,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(taskFactory.create(anyString(), anyString())).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory); }",db5283232576312ff2e13bf556387d63ac2988b7,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(provider.getFactory(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(java.util.Optional.of(factory)); when(factory.create(any(com.google.gerrit.server.events.ProjectEvent.class))).thenReturn(processor); when(taskFactory.create(anyString(), eq(processor))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, taskFactory, provider); }",0e72ffc77e86e0b5ae014567197ff87814fadb04,setup(),setup(),8,2,"@org.junit.Before public void setup() throws com.google.gerrit.server.project.NoSuchProjectException { when(projectCreated.getProjectNameKey()).thenReturn(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME); when(configFactory.getProjectPluginConfigWithInheritance(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PROJECT_NAME, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN)).thenReturn(config); when(remoteFactory.create(eq(config), eq(com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.FOO))).thenReturn(remote); when(taskFactory.create(eq(projectCreated), eq(remote))).thenReturn(postTask); eventHandler = new com.googlesource.gerrit.plugins.webhooks.EventHandler(configFactory, com.googlesource.gerrit.plugins.webhooks.EventHandlerTest.PLUGIN, remoteFactory, taskFactory); }",0bb00f01621508ddfbeecce14d268c716e5bb145,setup(),55445,223,223
60783,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,20.0,"private java.util.List<com.google.gerrit.common.data.SubmitRecord> cannotSubmitDraft() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = getPatchSet(); try { if (!(control.isDraftVisible(cd.db(), cd))) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(((""Patch set "" + (ps.getPatchSetId())) + "" not found"")); } else if (patchSet.isDraft()) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft patch sets""); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft changes""); } } catch (com.google.gwtorm.server.OrmException err) { java.lang.String msg = ""Cannot read patch set "" + ps; com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(msg, err); return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(msg); } }",6c90fc95ee525dfc94be6d047710f70fe7ec8940,"private java.util.List<com.google.gerrit.common.data.SubmitRecord> cannotSubmitDraft(com.google.gerrit.reviewdb.client.PatchSet ps) { try { if (!(control.isDraftVisible(cd.db(), cd))) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(((""Patch set "" + (ps.getId())) + "" not found"")); } else if (ps.isDraft()) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft patch sets""); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft changes""); } } catch (com.google.gwtorm.server.OrmException err) { java.lang.String msg = ""Cannot check visibility of patch set "" + (ps.getId()); com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(msg, err); return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(msg); } }",adc4ffff780bf34a2a700f21b964f9abc9e9002f,cannotSubmitDraft(),cannotSubmitDraft(com.google.gerrit.reviewdb.client.PatchSet),5,4,"private java.util.List<com.google.gerrit.common.data.SubmitRecord> cannotSubmitDraft() { try { if (!(control.isDraftVisible(cd.db(), cd))) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(((""Patch set "" + (patchSet.getId())) + "" not found"")); } else if (patchSet.isDraft()) { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft patch sets""); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(""Cannot submit draft changes""); } } catch (com.google.gwtorm.server.OrmException err) { java.lang.String msg = ""Cannot check visibility of patch set "" + (patchSet.getId()); com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(msg, err); return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(msg); } }",e986492bec5997654417f4190d2b87287aee1adc,cannotSubmitDraft(),29144,247,233
76892,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_UnifiedChunkManager.java,8.0,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, 0, false)); if (res >= 0) { return chunks.get(res).cmLine; } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.edit)) && ((info.side) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.end)) { return ((delete.cmLine) + line) - (delete.start); } else { return (((((delete.cmLine) + line) - (delete.start)) + (info.end)) - (info.start)) + 1; } } else if (side == (info.side)) { return ((info.cmLine) + line) - (info.start); } else { return ((info.cmLine) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.start); } } else { return line; } } }",270b8ba9add3a38fcc63402e4cfffa4ee5a518a8,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, 0, false)); if (res >= 0) { return chunks.get(res).cmLine; } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.edit)) && ((info.side) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.end)) { return ((delete.cmLine) + line) - (delete.start); } else { return (((((delete.cmLine) + line) - (delete.start)) + (info.end)) - (info.start)) + 1; } } else if (side == (info.side)) { return ((info.cmLine) + line) - (info.start); } else { return ((info.cmLine) + (mapper.lineOnOther(side, line).getLine())) - (info.start); } } else { return line; } } }",15ef442808919252bdb80ef6b633eb08f75defb3,"getCmLine(int,com.google.gerrit.client.diff.DisplaySide)","getCmLine(int,com.google.gerrit.client.diff.DisplaySide)",4,8,"@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, 0, false)); if (res >= 0) { return chunks.get(res).cmLine; } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.edit)) && ((info.side) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.end)) { return ((delete.cmLine) + line) - (delete.start); } else { return (((((delete.cmLine) + line) - (delete.start)) + (info.end)) - (info.start)) + 1; } } else if (side == (info.side)) { return ((info.cmLine) + line) - (info.start); } else { return ((info.cmLine) + (lineMapper.lineOnOther(side, line).getLine())) - (info.start); } } else { return line; } } }",e3b288caa2c1594cc86063660077ec940f8ccdd2,"getCmLine(int,com.google.gerrit.client.diff.DisplaySide)",135474,319,320
94912,src_main_java_com_googlesource_gerrit_plugins_lfs_LfsSshAuth.java,0.0,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String href = ((((((url.getProtocol()) + ""://"") + (url.getAuthority())) + (url.getPath())) + ""/"") + (args.get(0))) + ""/info/lfs""; org.eclipse.jgit.lfs.server.Response.Action response = new org.eclipse.jgit.lfs.server.Response.Action(); response.href = href; response.header = java.util.Collections.singletonMap(com.googlesource.gerrit.plugins.lfs.HDR_AUTHORIZATION, ""not:required""); return gson.toJson(response); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",4e4020f22db58efb09cc9b2e8e24cf5b6254e46f,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String project = args.get(0); java.lang.String operation = args.get(1); java.lang.String href = ((((((url.getProtocol()) + ""://"") + (url.getAuthority())) + (url.getPath())) + ""/"") + project) + ""/info/lfs""; org.eclipse.jgit.lfs.server.Response.Action response = new org.eclipse.jgit.lfs.server.Response.Action(); response.href = href; response.header = java.util.Collections.singletonMap(com.googlesource.gerrit.plugins.lfs.HDR_AUTHORIZATION, auth.generateToken(user, project, operation)); return gson.toJson(response); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",21b61eddd54c761b8601ed934dd91c24d843457c,"authenticate(com.google.gerrit.server.CurrentUser,java.util.List)","authenticate(com.google.gerrit.server.CurrentUser,java.util.List)",12,0,"@java.lang.Override public java.lang.String authenticate(com.google.gerrit.server.CurrentUser user, java.util.List<java.lang.String> args) throws com.google.gerrit.sshd.BaseCommand.Failure, com.google.gerrit.sshd.BaseCommand.UnloggedFailure { try { java.net.URL url = new java.net.URL(canonicalWebUrl); java.lang.String path = url.getPath(); java.lang.String project = args.get(0); java.lang.String operation = args.get(1); java.lang.StringBuilder href = new java.lang.StringBuilder(url.getProtocol()).append(""://"").append(url.getAuthority()).append(path).append((path.endsWith(""/"") ? """" : ""/"")).append(project).append(""/info/lfs""); com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SshAuthInfo info = auth.generateAuthInfo(user, project, operation); com.googlesource.gerrit.plugins.lfs.ExpiringAction action = new com.googlesource.gerrit.plugins.lfs.ExpiringAction(href.toString(), info); return gson.toJson(action); } catch (java.net.MalformedURLException e) { throw new com.google.gerrit.sshd.BaseCommand.Failure(1, (((""Server configuration error: "" + ""forming Git LFS endpoint URL from canonicalWebUrl ["") + (canonicalWebUrl)) + ""] failed."")); } }",0aea08811960e1e2d0ebbd44697df5611167be46,"authenticate(com.google.gerrit.server.CurrentUser,java.util.List)",10053,312,335
103375,gerrit-server_src_main_java_com_google_gerrit_server_update_BatchUpdate.java,25.0,"@java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public void execute(java.util.Collection<com.google.gerrit.server.update.BatchUpdate> updates, com.google.gerrit.server.update.BatchUpdateListener listener, @com.google.gerrit.common.Nullable com.google.gerrit.server.util.RequestId requestId, boolean dryRun) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { checkNotNull(listener); if (migration.disableChangeReviewDb()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.NoteDbBatchUpdate> noteDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.NoteDbBatchUpdate.execute(noteDbUpdates, listener, requestId, dryRun); } else { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.ReviewDbBatchUpdate> reviewDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.ReviewDbBatchUpdate.execute(reviewDbUpdates, listener, requestId, dryRun); } }",2175d47980b9bbd47af41fd22cea098ef9277fac,"@java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public void execute(java.util.Collection<com.google.gerrit.server.update.BatchUpdate> updates, com.google.gerrit.server.update.BatchUpdateListener listener, @com.google.gerrit.common.Nullable com.google.gerrit.server.util.RequestId requestId, boolean dryRun) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { checkNotNull(listener); com.google.gerrit.server.update.BatchUpdate.Factory.checkSameProject(updates); if (migration.disableChangeReviewDb()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.NoteDbBatchUpdate> noteDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.NoteDbBatchUpdate.execute(noteDbUpdates, listener, requestId, dryRun); } else { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.ReviewDbBatchUpdate> reviewDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.ReviewDbBatchUpdate.execute(reviewDbUpdates, listener, requestId, dryRun); } }",0900bd46640cbbe6d77f859b7d13b75a49130797,"execute(java.util.Collection,com.google.gerrit.server.update.BatchUpdateListener,com.google.gerrit.server.util.RequestId,boolean)","execute(java.util.Collection,com.google.gerrit.server.update.BatchUpdateListener,com.google.gerrit.server.util.RequestId,boolean)",3,26,"@java.lang.SuppressWarnings({ ""rawtypes"", ""unchecked"" }) public void execute(java.util.Collection<com.google.gerrit.server.update.BatchUpdate> updates, com.google.gerrit.server.update.BatchUpdateListener listener, @com.google.gerrit.common.Nullable com.google.gerrit.server.util.RequestId requestId, boolean dryRun) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { checkNotNull(listener); com.google.gerrit.server.update.BatchUpdate.Factory.checkDifferentProject(updates); if (migration.disableChangeReviewDb()) { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.NoteDbBatchUpdate> noteDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.NoteDbBatchUpdate.execute(noteDbUpdates, listener, requestId, dryRun); } else { com.google.common.collect.ImmutableList<com.google.gerrit.server.update.ReviewDbBatchUpdate> reviewDbUpdates = ((com.google.common.collect.ImmutableList) (com.google.common.collect.ImmutableList.copyOf(updates))); com.google.gerrit.server.update.ReviewDbBatchUpdate.execute(reviewDbUpdates, listener, requestId, dryRun); } }",d46e02b1f70ea01e6e29158e4b940b90697e1eca,"execute(java.util.Collection,com.google.gerrit.server.update.BatchUpdateListener,com.google.gerrit.server.util.RequestId,boolean)",113496,333,333
48254,gerrit-server_src_main_java_com_google_gerrit_server_project_ChangeControl.java,6.0,public com.google.gerrit.common.data.PermissionRange getRange(java.lang.String permission) { return getRefControl().getRange(permission); },f6cd00d0e68d99c2a7368e14fb891caca7b7e1dc,"public com.google.gerrit.common.data.PermissionRange getRange(java.lang.String permission) { java.util.List<com.google.gerrit.common.data.PermissionRule> rules = getRefControl().getRules(permission); if ((isOwner()) && (rulesContainGroup(rules, AccountGroup.CHANGE_OWNERS))) { return getRefControl().getLabelRange(permission); } else { return getRefControl().getRange(permission); } }",632dd9f230605dec7dcbb6f5cdb75ca11437734e,getRange(java.lang.String),getRange(java.lang.String),30,5,"public com.google.gerrit.common.data.PermissionRange getRange(java.lang.String permission) { return getRefControl().getRange(permission, isOwner()); }",c350009df7fb237709e2cbdf69bbcc73bc4c177a,getRange(java.lang.String),134379,103,38
96962,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,61.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static com.google.gerrit.server.query.change.ChangeData.StarsOf create(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Set<java.lang.String> stars) { return new com.google.gerrit.server.query.change.AutoValue_ChangeData_StarsOf(accountId, stars); }",82867ccab70c3a311396fdd85e0b630d951b3804,,"create(com.google.gerrit.reviewdb.client.Account$Id,java.util.Set)",2,61,"private static com.google.gerrit.server.query.change.ChangeData.StarsOf create(com.google.gerrit.reviewdb.client.Account.Id accountId, java.lang.Iterable<java.lang.String> stars) { return new com.google.gerrit.server.query.change.AutoValue_ChangeData_StarsOf(accountId, com.google.common.collect.ImmutableSortedSet.copyOf(stars)); }",7f28751b7964ae8dd0e9c91dcef96b31315beb10,"create(com.google.gerrit.reviewdb.client.Account$Id,java.lang.Iterable)",197178,86,100
166331,java_com_google_gerrit_server_group_db_GroupsUpdate.java,47.0,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { checkIfReviewDbUpdatesAreBlocked(); com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }",e16405a9ad4d5602695b984542f06f0371172419,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getModifiedMembers(), updateResult.getModifiedSubgroups(), updateResult.getRefState()); }",6d01cb2262fb3178376ade1fd200f58f1522e7a1,"createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)","createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",3,47,"private com.google.gerrit.server.group.InternalGroup createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroupName gn = new com.google.gerrit.reviewdb.client.AccountGroupName(groupCreation.getNameKey(), groupCreation.getId()); db.accountGroupNames().insert(com.google.common.collect.ImmutableList.of(gn)); java.sql.Timestamp createdOn = groupUpdate.getUpdatedOn().orElseGet(TimeUtil::nowTs); com.google.gerrit.reviewdb.client.AccountGroup group = com.google.gerrit.server.group.db.GroupsUpdate.createAccountGroup(groupCreation, createdOn); com.google.gerrit.server.group.db.GroupsUpdate.UpdateResult updateResult = updateGroupInReviewDb(db, group, groupUpdate); return com.google.gerrit.server.group.InternalGroup.create(group, updateResult.getAddedMembers(), updateResult.getAddedSubgroups(), updateResult.getRefState()); }",4a8da05e13db4700a7604e6cc312b02872bf35fd,"createGroupInReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.group.db.InternalGroupCreation,com.google.gerrit.server.group.db.InternalGroupUpdate)",93417,272,299
105472,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,45.0,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply(change, input); } catch (com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set assignee"", e); } }",c8fa44dc72c69011a80862cce24ba7ee81264730,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply(change, input); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwIfPossible(e); throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot set assignee"", e); } }",20661076cbe1d0f8a1cacc760a56d540bb3c26e3,setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput),setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput),6,43,"@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putAssignee.apply(change, input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot set assignee"", e); } }",bf31dbd38ecb3a9c7c8c437ad3663bb9ae2cda46,setAssignee(com.google.gerrit.extensions.api.changes.AssigneeInput),18802,132,111
59960,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_EditFileBox.java,1.0,"@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { content.setFocus(true); } }); }",23dec0b5eae807c67297583dbd93d8845d0aa2af,"@java.lang.Override protected void onLoad() { file.set(id, content, editExists); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { content.setFocus(true); } }); }",6a394a51ad99e0a43ae498c89bc8ec0b3e369fba,onLoad(),onLoad(),5,1,"@java.lang.Override protected void onLoad() { file.set(id, content); file.setText(fileName); file.setEnabled(fileName.isEmpty()); content.setText(fileContent); save.setEnabled(false); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if (fileName.isEmpty()) { file.setFocus(true); } else { content.setFocus(true); } } }); }",101b1f2362b6ce7dec171fa0e6a714ee433afe3f,onLoad(),147986,104,118
61941,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,,,,"@org.junit.Test public void testDefaultSubmitTypeWhenNotConfigured() { assertEquals(SubmitType.MERGE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); }",9badf267350b0beb818a999ab0b4ba9f5b95b7f6,,testDefaultSubmitTypeWhenNotConfigured(),12,7,"@org.junit.Test public void testDefaultSubmitTypeWhenNotConfigured() { assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(SubmitType.MERGE_IF_NECESSARY); }",a3e9983a4b2a546b1900965aa042e06d81b91e27,testDefaultSubmitTypeWhenNotConfigured(),177498,61,64
93991,src_main_java_org_eclipse_jgit_lfs_server_LfsGerritProtocolServlet.java,,,,"protected abstract org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet.LfsRequest request, java.lang.String path, org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet.AuthInfo info) throws org.eclipse.jgit.lfs.errors.LfsException;",2ad0199e14c8bc8d28bd5470fb582e47ad77a469,,"getLargeFileRepository(org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet$LfsRequest,java.lang.String,org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet$AuthInfo)",18,1,"protected abstract org.eclipse.jgit.lfs.server.LargeFileRepository getLargeFileRepository(org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet.LfsRequest request, java.lang.String path, java.lang.String auth) throws org.eclipse.jgit.lfs.errors.LfsException;",0c6b8ad84217cbcda740506170c5ae5f3f215e8c,"getLargeFileRepository(org.eclipse.jgit.lfs.server.LfsGerritProtocolServlet$LfsRequest,java.lang.String,java.lang.String)",152367,94,78
61941,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,,,,"@org.junit.Test public void testDefaultSubmitTypeForStartWithFilter() { configureDefaultSubmitType(""somePath/somePath/*"", SubmitType.REBASE_IF_NECESSARY); configureDefaultSubmitType(""somePath/*"", SubmitType.CHERRY_PICK); configureDefaultSubmitType(""*"", SubmitType.MERGE_ALWAYS); assertEquals(SubmitType.MERGE_ALWAYS, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))); assertEquals(SubmitType.CHERRY_PICK, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/someProject""))); assertEquals(SubmitType.REBASE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/somePath/someProject""))); }",b399f9f389490fddc2dc7825d9f96c2e3d277332,,testDefaultSubmitTypeForStartWithFilter(),12,2,"@org.junit.Test public void testDefaultSubmitTypeForStartWithFilter() { configureDefaultSubmitType(""somePath/somePath/*"", SubmitType.REBASE_IF_NECESSARY); configureDefaultSubmitType(""somePath/*"", SubmitType.CHERRY_PICK); configureDefaultSubmitType(""*"", SubmitType.MERGE_ALWAYS); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(SubmitType.MERGE_ALWAYS); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/someProject""))).isEqualTo(SubmitType.CHERRY_PICK); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/somePath/someProject""))).isEqualTo(SubmitType.REBASE_IF_NECESSARY); }",114e447b39207f7af9b11fae8b10b111f0d7371e,testDefaultSubmitTypeForStartWithFilter(),177505,209,218
162992,java_com_google_gerrit_common_data_SubmitRequirement.java,,,,@com.google.gerrit.common.Nullable public abstract java.lang.String label();,5b785f3d8979eb77ea6ec14f8cd1b77cd24b3aef,,label(),20,4,public java.util.Optional<java.lang.String> label() { return java.util.Optional.ofNullable(label); },3b2b70a9fa6a0ecc854e071d75bb26c0234ae74a,label(),167928,20,28
69596,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_ServerInfo.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final native java.lang.String urlAlias(java.lang.String n);,f42862e4bde94a58ba12f3022521578d1db903b2,,urlAlias(java.lang.String),17,23,public final native java.lang.String urlAliasToken(java.lang.String n);,778bcb423f5b7ff64290cb69377d49c1c9130f2a,urlAliasToken(java.lang.String),9886,18,19
34560,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,,,,@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnCloseEvent()); },534992cc48cec3f5fa4caf2854b5724f7029b7f4,,onClick(com.google.gwt.event.dom.client.ClickEvent),10,2,@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { closePopup(); },b9c866922af8b6900321ae94ae65f6a6c4223118,onClick(com.google.gwt.event.dom.client.ClickEvent),141492,58,31
35193,gerrit-server_src_main_java_com_google_gerrit_server_plugins_AutoRegisterModules.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void listen(java.lang.Class<?> type, java.lang.Class<?> clazz) throws com.google.gerrit.server.plugins.InvalidPluginException { while (type != null) { if ((type.getAnnotation(com.google.gerrit.extensions.annotations.ExtensionPoint.class)) != null) { if (!(env.hasDynamicSet(type))) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot load %s with @Listen, server does not accept %s"", clazz.getName(), type.getName())); } sysSingletons.add(clazz); sysListen.put(type, clazz); return; } java.lang.Class<?>[] interfaces = type.getInterfaces(); if (interfaces != null) { for (java.lang.Class<?> i : interfaces) { listen(i, clazz); } } type = type.getSuperclass(); } }",5e85d2cd26fa7373edb245abb1d188a757f2d51c,,"listen(java.lang.Class,java.lang.Class)",6,21,"private void listen(java.lang.reflect.Type type, java.lang.Class<?> clazz) throws com.google.gerrit.server.plugins.InvalidPluginException { while (type != null) { java.lang.Class<?> rawType; if (type instanceof java.lang.reflect.ParameterizedType) { rawType = ((java.lang.Class<?>) (((java.lang.reflect.ParameterizedType) (type)).getRawType())); } else if (type instanceof java.lang.Class) { rawType = ((java.lang.Class<?>) (type)); } else { return; } if ((rawType.getAnnotation(com.google.gerrit.extensions.annotations.ExtensionPoint.class)) != null) { com.google.inject.TypeLiteral<?> tl = com.google.inject.TypeLiteral.get(type); if (env.hasDynamicSet(tl)) { sysSingletons.add(clazz); sysListen.put(tl, clazz); } else if (env.hasDynamicMap(tl)) { if ((clazz.getAnnotation(com.google.gerrit.extensions.annotations.Export.class)) == null) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Class %s requires @Export(\""name\"") annotation for %s"", clazz.getName(), rawType.getName())); } sysSingletons.add(clazz); sysListen.put(tl, clazz); } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format(""Cannot register %s, server does not accept %s"", clazz.getName(), rawType.getName())); } return; } java.lang.reflect.Type[] interfaces = rawType.getGenericInterfaces(); if (interfaces != null) { for (java.lang.reflect.Type i : interfaces) { listen(i, clazz); } } type = rawType.getGenericSuperclass(); } }",f15bcf199863a60c7c3fd08e5fb8b0d6a312d085,"listen(java.lang.reflect.Type,java.lang.Class)",135358,199,420
106453,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIdIT.java,,,,@org.junit.Test public void wrongNumericChangeIdReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.changes().id(java.lang.Integer.MAX_VALUE); },6f5aa466d69e3395f07d13a9c67cc044984c7554,,wrongNumericChangeIdReturnsNotFound(),4,9,@org.junit.Test public void wrongChangeNumberReturnsNotFound() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.changes().id(java.lang.Integer.MAX_VALUE); },44486405c4284c5ce9f2a9d3a3fa70d3dd65c5bb,wrongChangeNumberReturnsNotFound(),175383,63,62
20045,gerrit-server_src_main_java_com_google_gerrit_server_git_CreateCodeReviewNotes.java,,,,"private org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.notes.NoteMap map, org.eclipse.jgit.lib.PersonIdent author, java.lang.String message, org.eclipse.jgit.revwalk.RevCommit... parents) throws java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.lib.ObjectInserter inserter = db.newObjectInserter(); org.eclipse.jgit.lib.CommitBuilder b = new org.eclipse.jgit.lib.CommitBuilder(); b.setTreeId(map.writeTree(inserter)); b.setAuthor(author); b.setCommitter(gerritIdent); if ((parents.length) > 0) { b.setParentIds(parents); } b.setMessage(message); return revWalk.parseCommit(inserter.insert(b)); }",0c6c6eb206570a7d406ce27496893721217541fd,,"createCommit(org.eclipse.jgit.notes.NoteMap,org.eclipse.jgit.lib.PersonIdent,java.lang.String,org.eclipse.jgit.revwalk.RevCommit[])",10,5,"private org.eclipse.jgit.revwalk.RevCommit createCommit(org.eclipse.jgit.notes.NoteMap map, org.eclipse.jgit.lib.PersonIdent author, java.lang.String message, org.eclipse.jgit.revwalk.RevCommit... parents) throws java.io.IOException { org.eclipse.jgit.lib.CommitBuilder b = new org.eclipse.jgit.lib.CommitBuilder(); b.setTreeId(map.writeTree(inserter)); b.setAuthor(author); b.setCommitter(gerritIdent); if ((parents.length) > 0) { b.setParentIds(parents); } b.setMessage(message); org.eclipse.jgit.lib.ObjectId commitId = inserter.insert(b); inserter.flush(); return revWalk.parseCommit(commitId); }",53687bab30cc2173553b8ee8188991b4139b8a48,"createCommit(org.eclipse.jgit.notes.NoteMap,org.eclipse.jgit.lib.PersonIdent,java.lang.String,org.eclipse.jgit.revwalk.RevCommit[])",81049,218,191
72020,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPreferencesScreen.java,14.0,"private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",a5aa6c6a3d8fcc13f9c151e5836c3f3a587b5edd,"private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); signedOffBy.setValue(p.signedOffBy()); setListBox(reviewCategoryStrategy, AccountGeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",0842cae7a4fa9dd4dfee9f86944e7fb2af5fa5c6,display(com.google.gerrit.client.info.AccountPreferencesInfo),display(com.google.gerrit.client.info.AccountPreferencesInfo),21,10,"private void display(com.google.gerrit.client.info.GeneralPreferences p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, GeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, GeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); signedOffBy.setValue(p.signedOffBy()); setListBox(reviewCategoryStrategy, GeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, GeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); setListBox(emailStrategy, GeneralPreferencesInfo.EmailStrategy.ENABLED, p.emailStrategy()); display(p.my()); }",22ec75e7d716d95d40052e38c791c7266ebb22d2,display(com.google.gerrit.client.info.GeneralPreferences),99749,269,270
64412,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,12.0,"private void initRevisionActions(com.google.gerrit.client.changes.ChangeInfo info, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo, boolean hasUser) { com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions = (revInfo.has_actions()) ? revInfo.actions() : com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create(); actions.copyKeysIntoChildren(""id""); canSubmit = false; if (hasUser) { canSubmit = actions.containsKey(""submit""); if (canSubmit) { com.google.gerrit.client.actions.ActionInfo action = actions.get(""submit""); submit.setTitle(action.title()); submit.setEnabled(action.enabled()); submit.setHTML(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openDiv().append(action.label()).closeDiv()); } com.google.gerrit.client.change.Actions.a2b(actions, ""cherrypick"", cherrypick); com.google.gerrit.client.change.Actions.a2b(actions, ""rebase"", rebase); for (java.lang.String id : com.google.gerrit.client.change.Actions.filterNonCore(actions)) { add(new com.google.gerrit.client.actions.ActionButton(info, revInfo, actions.get(id))); } } }",6e1ee9ec26c075794e0bcba42e9572d635bfa18b,"void reloadRevisionActions(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions) { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { return; } actions.copyKeysIntoChildren(""id""); boolean canSubmit = actions.containsKey(""submit""); if (canSubmit) { com.google.gerrit.client.actions.ActionInfo action = actions.get(""submit""); submit.setTitle(action.title()); submit.setEnabled(action.enabled()); submit.setHTML(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openDiv().append(action.label()).closeDiv()); submit.setEnabled(action.enabled()); } submit.setVisible(canSubmit); com.google.gerrit.client.change.Actions.a2b(actions, ""cherrypick"", cherrypick); com.google.gerrit.client.change.Actions.a2b(actions, ""rebase"", rebase); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = changeInfo.revision(revision); for (java.lang.String id : com.google.gerrit.client.change.Actions.filterNonCore(actions)) { add(new com.google.gerrit.client.actions.ActionButton(changeInfo, revInfo, actions.get(id))); } }",6a3a560a12991070e7218b8be9ea6118bb6f9e66,"initRevisionActions(com.google.gerrit.client.changes.ChangeInfo,com.google.gerrit.client.changes.ChangeInfo.RevisionInfo,boolean)",reloadRevisionActions(com.google.gerrit.client.rpc.NativeMap),16,6,"void reloadRevisionActions(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actions) { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { return; } boolean canSubmit = actions.containsKey(""submit""); if (canSubmit) { com.google.gerrit.client.actions.ActionInfo action = actions.get(""submit""); submit.setTitle(action.title()); submit.setEnabled(action.enabled()); submit.setHTML(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openDiv().append(action.label()).closeDiv()); submit.setEnabled(action.enabled()); } submit.setVisible(canSubmit); com.google.gerrit.client.change.Actions.a2b(actions, ""cherrypick"", cherrypick); com.google.gerrit.client.change.Actions.a2b(actions, ""rebase"", rebase); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = changeInfo.revision(revision); for (java.lang.String id : com.google.gerrit.client.change.Actions.filterNonCore(actions)) { add(new com.google.gerrit.client.actions.ActionButton(changeInfo, revInfo, actions.get(id))); } }",eb8c855142bd84842fccda36b27593004632b573,reloadRevisionActions(com.google.gerrit.client.rpc.NativeMap),198648,314,305
157370,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeIndexer.java,19.0,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { if (!(stalenessChecker.isStale(id))) { return false; } index(newChangeData(db.get(), project, id)); return true; }",ce2db5b5616947544dd4a474f233d36b0d41d1b7,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change was deleted, aborting reindexing the change""); } return false; }",2196df430261a8e3dbf3cef6f037825d15ef7353,callImpl(com.google.inject.Provider),callImpl(com.google.inject.Provider),4,19,"@java.lang.Override public java.lang.Boolean callImpl(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws java.lang.Exception { try { if (stalenessChecker.isStale(id)) { index(newChangeData(db.get(), project, id)); return true; } } catch (com.google.gerrit.server.project.NoSuchChangeException e) { com.google.gerrit.server.index.change.ChangeIndexer.log.debug(""Change {} was deleted, aborting reindexing the change."", id.get()); } return false; }",9515349ad4eb2e330f7c7e8098461a93552b58d5,callImpl(com.google.inject.Provider),135079,137,143
44276,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_AbstractPatchContentTable.java,54.0,protected boolean hasDifferences(final com.google.gerrit.common.data.PatchScript script) { boolean hasEdits = !(script.getEdits().isEmpty()); boolean hasMeta = !(script.getPatchHeader().isEmpty()); return hasEdits || hasMeta; },5d7f2e8d27e267460f0c4c54d0060050c5bd5996,protected boolean hasDifferences(final com.google.gerrit.common.data.PatchScript script) { boolean hasEdits = false; for (org.eclipse.jgit.diff.Edit e : script.getEdits()) { if ((e.getType()) != (Edit.Type.EMPTY)) { hasEdits = true; break; } } boolean hasMeta = !(script.getPatchHeader().isEmpty()); return hasEdits || hasMeta; },b473b7f8a765b4c3123436824535586ddb3d1231,hasDifferences(com.google.gerrit.common.data.PatchScript),hasDifferences(com.google.gerrit.common.data.PatchScript),3,57,protected boolean hasDifferences(com.google.gerrit.common.data.PatchScript script) { return (hasEdits(script)) || (hasMeta(script)); },b09df99b89dd0a30bcdd824b11ede4a626d69cd9,hasDifferences(com.google.gerrit.common.data.PatchScript),55633,100,38
20327,gerrit-server_src_main_java_com_google_gerrit_server_ChangeUtil.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static void mergeTestChangesByBranch(com.google.gerrit.server.git.MergeOp.Factory opFactory, com.google.gerrit.reviewdb.Branch.NameKey branch) { opFactory.create(branch).testMergeabilityOfChangesbyBranch(); }",cfd95a3a66010586aafa9aa38449ed3193df9921,,"mergeTestChangesByBranch(com.google.gerrit.server.git.MergeOp$Factory,com.google.gerrit.reviewdb.Branch$NameKey)",6,5,"public static void submit(final com.google.gerrit.reviewdb.PatchSet.Id patchSetId, final com.google.gerrit.server.IdentifiedUser user, final com.google.gerrit.reviewdb.ReviewDb db, final com.google.gerrit.server.git.MergeOp.Factory opFactory, final com.google.gerrit.server.git.MergeQueue merger) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Change.Id changeId = patchSetId.getParentKey(); final com.google.gerrit.reviewdb.PatchSetApproval approval = com.google.gerrit.server.ChangeUtil.createSubmitApproval(patchSetId, user, db); db.patchSetApprovals().upsert(java.util.Collections.singleton(approval)); final com.google.gerrit.reviewdb.Change updatedChange = db.changes().atomicUpdate(changeId, new com.google.gwtorm.client.AtomicUpdate<com.google.gerrit.reviewdb.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.Change update(com.google.gerrit.reviewdb.Change change) { if ((change.getStatus()) == (Change.Status.NEW)) { change.setStatus(Change.Status.SUBMITTED); com.google.gerrit.server.ChangeUtil.updated(change); } return change; } }); if ((updatedChange.getStatus()) == (Change.Status.SUBMITTED)) { merger.merge(opFactory, updatedChange.getDest()); } }",93973cf43ed33357f1eebabcbaf31b2f8d84ee40,"submit(com.google.gerrit.reviewdb.PatchSet$Id,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.ReviewDb,com.google.gerrit.server.git.MergeOp$Factory,com.google.gerrit.server.git.MergeQueue)",97603,61,365
52673,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,0.0,"private void populatePublishAction() { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(Util.C.buttonPublishPatchSet()); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); Util.MANAGE_SVC.publish(patchSet.getId(), new com.google.gerrit.client.changes.ChangeDetailCache.GerritWidgetCallback(b)); } }); actionsPanel.add(b); }",aae25fcb5ca96f1f0ac945f006c96afbc434052a,"private void populatePublishAction() { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(Util.C.buttonPublishPatchSet()); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); final com.google.gerrit.reviewdb.client.Change.Id id = patchSet.getId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.publish(id.get(), patchSet.getRevision().get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.changes.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.changes.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } } }); } }); actionsPanel.add(b); }",6abc878b8c71b69aa808fd10cf9af99c5db124e5,populatePublishAction(),populatePublishAction(),2,0,"private void populatePublishAction() { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(Util.C.buttonPublishPatchSet()); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); final com.google.gerrit.reviewdb.client.Change.Id id = patchSet.getId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.publish(id.get(), patchSet.getRevision().get(), com.google.gerrit.client.change.DraftActions.cs(id)); } }); actionsPanel.add(b); }",6b2777ff7fb00c4ef4829f371bcdf6d7567c54c6,populatePublishAction(),92651,352,183
108830,github-plugin_src_main_java_com_googlesource_gerrit_plugins_github_git_PullRequestImportJob.java,6.0,"private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String login, java.lang.String name, java.lang.String email) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.AccountExternalId.Key userExtKey = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(com.google.gerrit.reviewdb.client.AccountExternalId.SCHEME_USERNAME, login); com.google.gerrit.reviewdb.server.AccountExternalIdAccess gerritExtIds = db.accountExternalIds(); com.google.gerrit.reviewdb.client.AccountExternalId userExtId = gerritExtIds.get(userExtKey); if (userExtId == null) { return accountImporter.importAccount(login, name, email); } return userExtId.getAccountId(); }",b7372ff20c3817b00c30db94ccdeed3ea2c21169,"private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String login, java.lang.String name, java.lang.String email) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> externalId = externalIds.byUsername(login); if (externalId.isPresent()) { return externalId.get().accountId(); } return accountImporter.importAccount(login, name, email); }",b3d5ca6e98ad6852aa05d2d6dde9a346fc4389bc,"getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb,java.lang.String,java.lang.String,java.lang.String)","getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb,java.lang.String,java.lang.String,java.lang.String)",6,6,"private com.google.gerrit.reviewdb.client.Change.Id getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String login, java.lang.String name, java.lang.String email) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Optional<com.google.gerrit.server.account.externalids.ExternalId> gerritId = externalIdByScheme(ExternalId.SCHEME_GERRIT, login); if (gerritId.isPresent()) { return gerritId.get().accountId(); } return accountImporter.importAccount(login, name, email); }",3e9afdc135c584bd30d2a646b90e787f04c25f7d,"getOrRegisterAccount(com.google.gerrit.reviewdb.server.ReviewDb,java.lang.String,java.lang.String,java.lang.String)",117702,208,221
79060,gerrit-acceptance-framework_src_test_java_com_google_gerrit_acceptance_EventRecorder.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void assertReviewerDeletedEvents(java.lang.String... expected) { com.google.common.collect.ImmutableList<ReviewerDeletedEvent> events = getReviewerDeletedEvents(((expected.length) / 2)); int i = 0; for (ReviewerDeletedEvent event : events) { java.lang.String id = event.change.get().id; assertThat(id).isEqualTo(expected[i]); java.lang.String reviewer = event.reviewer.get().username; assertThat(reviewer).isEqualTo(expected[(i + 1)]); i += 2; } },86945a015d02b1e425f58227409819acf94b4cc3,,assertReviewerDeletedEvents(java.lang.String[]),13,4,public void assertReviewerDeletedEvents(java.lang.String... expected) { com.google.common.collect.ImmutableList<ReviewerDeletedEvent> events = getReviewerDeletedEvents(((expected.length) / 2)); int i = 0; for (ReviewerDeletedEvent event : events) { java.lang.String id = event.change.get().id; assertThat(id).isEqualTo(expected[i]); java.lang.String reviewer = event.reviewer.get().email; assertThat(reviewer).isEqualTo(expected[(i + 1)]); i += 2; } },17c4c004e91b1de9a5ec4e3c1d17105ee31a108d,assertReviewerDeletedEvents(java.lang.String[]),182477,124,124
86814,gerrit-server_src_main_java_com_google_gerrit_server_patch_PatchListCache.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"com.google.gerrit.server.patch.FilePathList getFilePaths(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",e3cae07b8f77bacfb580f8dbe98df48c1763f6af,,"getFilePaths(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",5,2,"com.google.gerrit.server.patch.FileList getFileList(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws com.google.gerrit.server.patch.PatchListNotAvailableException;",5f32f14b4d9971738742ff4f867318a6eb129077,"getFileList(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet)",70653,68,67
77937,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_SubmoduleSectionParserIT.java,10.0,"@org.junit.Test public void testWithAnotherURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = http://localhost:80/"")) + (p.get())) + ""\n"") + ""branch = master\n""; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",18ec247184863b7541912f1ad7bc7ff97173a919,"@org.junit.Test public void testWithAnotherURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = http://localhost:80/"")) + (p.get())) + ""\n"") + ""branch = master\n""; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",5ed6abb8c0933aabed64ad1365ca9b403a5b33ac,testWithAnotherURI(),testWithAnotherURI(),4,10,"@org.junit.Test public void testWithAnotherURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p = createProject(""a""); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("""" + ((""[submodule \""a\""]\n"" + ""path = a\n"") + ""url = http://localhost:80/"")) + (p.get())) + ""\n"") + ""branch = master\n"")); com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""project""), ""master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p, ""master""), ""a"")); assertThat(res).containsExactlyElementsIn(expected); }",f8dd6fdcfbf7c0a5d5bc03aa6595e463e21fc3f6,testWithAnotherURI(),39359,379,356
82594,gerrit-server_src_main_java_com_google_gerrit_server_project_AccessControlModule.java,0.0,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitUploadPackGroups.class).toProvider(com.google.gerrit.server.config.GitUploadPackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitReceivePackGroups.class).toProvider(com.google.gerrit.server.config.GitReceivePackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(ChangeControl.Factory.class); factory(ProjectControl.AssistedFactory.class); },cec198122176521ac2ad110229cc250c3632097d,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.common.data.GroupReference>>() {}).annotatedWith(com.google.gerrit.server.config.AdministrateServerGroups.class).toProvider(com.google.gerrit.server.config.AdministrateServerGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitUploadPackGroups.class).toProvider(com.google.gerrit.server.config.GitUploadPackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitReceivePackGroups.class).toProvider(com.google.gerrit.server.config.GitReceivePackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(ChangeControl.Factory.class); factory(ProjectControl.AssistedFactory.class); },3b1e987aec6ec90357e2d3a7da9c47100a4b57dc,configure(),configure(),2,0,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSet<com.google.gerrit.common.data.GroupReference>>() {}).annotatedWith(com.google.gerrit.server.config.AdministrateServerGroups.class).toProvider(com.google.gerrit.server.config.AdministrateServerGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitUploadPackGroups.class).toProvider(com.google.gerrit.server.config.GitUploadPackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).annotatedWith(com.google.gerrit.server.config.GitReceivePackGroups.class).toProvider(com.google.gerrit.server.config.GitReceivePackGroupsProvider.class).in(com.google.gerrit.server.project.SINGLETON); bind(ChangeControl.Factory.class); factory(ProjectControl.AssistedFactory.class); },6bf499b653fdd6999961aa0b27644756fc74916e,configure(),111059,311,316
61604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_changedetail_PatchSetDetailFactory.java,4.0,"com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create(@com.google.inject.assistedinject.Assisted(""psIdBase"") @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet.Id psIdBase, @com.google.inject.assistedinject.Assisted(""psIdNew"") com.google.gerrit.reviewdb.client.PatchSet.Id psIdNew, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs);",56b7dddd7539a8814b0de9281f66dfcfbefa5ea4,"com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create(@com.google.inject.assistedinject.Assisted(""psIdBase"") @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet.Id psIdBase, @com.google.inject.assistedinject.Assisted(""psIdNew"") com.google.gerrit.reviewdb.client.PatchSet.Id psIdNew, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.common.DiffPreferencesInfo diffPrefs);",567e0ba5a3022dafc1c3f9c621714ad953bb5cad,"create(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.AccountDiffPreference)","create(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.extensions.common.DiffPreferencesInfo)",40,1,"com.google.gerrit.httpd.rpc.changedetail.PatchSetDetailFactory create(@com.google.inject.assistedinject.Assisted(""psIdBase"") @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.PatchSet.Id psIdBase, @com.google.inject.assistedinject.Assisted(""psIdNew"") com.google.gerrit.reviewdb.client.PatchSet.Id psIdNew, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs);",90e686fb0846422ee6681602139bb6ae6fecc60b,"create(com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.reviewdb.client.PatchSet$Id,com.google.gerrit.extensions.client.DiffPreferencesInfo)",127828,135,135
68534,gerrit-server_src_main_java_com_google_gerrit_server_WebLinks.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public com.google.common.collect.FluentIterable<com.google.gerrit.common.data.WebLinkInfoCommon> getFileHistoryLinksCommon(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return com.google.common.collect.FluentIterable.from(fileLogLinks).transform(new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.common.data.WebLinkInfoCommon>() { @java.lang.Override public com.google.gerrit.common.data.WebLinkInfoCommon apply(com.google.gerrit.extensions.webui.WebLink webLink) { com.google.gerrit.extensions.common.WebLinkInfo info = ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); com.google.gerrit.common.data.WebLinkInfoCommon commonInfo = new com.google.gerrit.common.data.WebLinkInfoCommon(); commonInfo.name = info.name; commonInfo.imageUrl = info.imageUrl; commonInfo.url = info.url; commonInfo.target = info.target; return commonInfo; } }).filter(com.google.gerrit.server.WebLinks.INVALID_WEBLINK_COMMON); }",b792de6982bea975bc15876ce6827f58c1b7626d,,"getFileHistoryLinksCommon(java.lang.String,java.lang.String,java.lang.String)",11,16,"public com.google.common.collect.FluentIterable<com.google.gerrit.common.data.WebLinkInfoCommon> getFileHistoryLinksCommon(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return com.google.common.collect.FluentIterable.from(fileHistoryLinks).transform(new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.common.data.WebLinkInfoCommon>() { @java.lang.Override public com.google.gerrit.common.data.WebLinkInfoCommon apply(com.google.gerrit.extensions.webui.WebLink webLink) { com.google.gerrit.extensions.common.WebLinkInfo info = ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); com.google.gerrit.common.data.WebLinkInfoCommon commonInfo = new com.google.gerrit.common.data.WebLinkInfoCommon(); commonInfo.name = info.name; commonInfo.imageUrl = info.imageUrl; commonInfo.url = info.url; commonInfo.target = info.target; return commonInfo; } }).filter(com.google.gerrit.server.WebLinks.INVALID_WEBLINK_COMMON); }",fcfc73d077deea431d226dbf789d16ff06c63b7e,"getFileHistoryLinksCommon(java.lang.String,java.lang.String,java.lang.String)",66735,314,314
59917,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeMessages.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String removeHashTag(java.lang.String name);,2c31368033aba817d1de89551ca28aeb6f572e58,,removeHashTag(java.lang.String),37,0,java.lang.String removeHashtag(java.lang.String name);,994a45ff9d67279f787fe155f39de08256dd2a35,removeHashtag(java.lang.String),189387,16,16
75989,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteProject.java,0.0,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",3cef483c0d4b338e3814e888eda7358e6b7afbb3,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",6f184ca97dadd7d16171647474cbd2e454c22ca5,"assertCanDelete(com.google.gerrit.server.project.ProjectResource,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input)","assertCanDelete(com.google.gerrit.server.project.ProjectResource,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input)",3,0,"public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }",3cef483c0d4b338e3814e888eda7358e6b7afbb3,"assertCanDelete(com.google.gerrit.server.project.ProjectResource,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input)",175634,152,166
60712,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocGlobalConfig.java,0.0,"static void initialize(org.eclipse.jgit.lib.Config cfg) { cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, MarkdownFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/x-markdown""); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, PlainTextFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/plain""); }",00b2c078ca629fa044efabc58d7ee9758241fe14,"static void initialize(org.eclipse.jgit.lib.Config cfg) { cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, AsciidocFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_EXT, ""adoc""); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, MarkdownFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/x-markdown""); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, PlainTextFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/plain""); }",ca1b7b940a516fb6f3732d184f83901474898d6c,initialize(org.eclipse.jgit.lib.Config),initialize(org.eclipse.jgit.lib.Config),3,0,"static void initialize(org.eclipse.jgit.lib.Config cfg) { cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, AsciidoctorFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_EXT, ""adoc""); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, MarkdownFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/x-markdown""); cfg.setString(com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.SECTION_FORMATTER, PlainTextFormatter.NAME, com.googlesource.gerrit.plugins.xdocs.XDocGlobalConfig.KEY_MIME_TYPE, ""text/plain""); }",385b1494a588a8ecec1e2b64bfa5ab34dd16d9bb,initialize(org.eclipse.jgit.lib.Config),94315,202,202
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Hashtags.java,17.0,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }",e867c5ce301e20c59e32e8d862ad0525c6dd0a77,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); final com.google.gerrit.reviewdb.client.Project.NameKey project = null; com.google.gerrit.client.changes.ChangeApi.hashtags(psId.getParentKey().get(), Project.NameKey.asStringOrNull(project)).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(psId)); } } }); } }",1f09c26b2946484955dd4402cb8b3c936fd10e4e,onRemove(com.google.gwt.dom.client.NativeEvent),onRemove(com.google.gwt.dom.client.NativeEvent),7,17,"private static void onRemove(com.google.gwt.dom.client.NativeEvent event) { java.lang.String hashtags = com.google.gerrit.client.change.Hashtags.getDataId(event); if (hashtags != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.PatchSet.Id psId = screen.getPatchSetId(); com.google.gerrit.client.changes.ChangeApi.hashtags(screen.getProject().get(), psId.getParentKey().get()).post(com.google.gerrit.client.change.Hashtags.PostInput.create(null, hashtags), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getProject(), psId)); } } }); } }",8617e3c9e56175a869b094ade07be42ec771208a,onRemove(com.google.gwt.dom.client.NativeEvent),210662,306,284
61410,gerrit-server_src_main_java_com_google_gerrit_server_project_PermissionCollection.java,1.0,"@java.lang.Override public boolean equals(java.lang.Object other) { if (other instanceof com.google.gerrit.server.project.PermissionCollection.SeenRule) { com.google.gerrit.server.project.PermissionCollection.SeenRule a = this; com.google.gerrit.server.project.PermissionCollection.SeenRule b = ((com.google.gerrit.server.project.PermissionCollection.SeenRule) (other)); return ((a.refPattern.equals(b.refPattern)) && (a.permissionName.equals(b.permissionName))) && (eq(a.group, b.group)); } return false; }",648295fe580ddd852e1aa8dfc3310a3d0da8f2c2,"static com.google.gerrit.server.project.PermissionCollection.SeenRule create(com.google.gerrit.common.data.AccessSection section, com.google.gerrit.common.data.Permission permission, com.google.gerrit.common.data.PermissionRule rule) { return new com.google.gerrit.server.project.AutoValue_PermissionCollection_SeenRule(section.getName(), permission.getName(), rule.getGroup().getUUID()); }",20e9276030daddb8d7e62d75f5d40fe38d23a250,equals(java.lang.Object),"create(com.google.gerrit.common.data.AccessSection,com.google.gerrit.common.data.Permission,com.google.gerrit.common.data.PermissionRule)",4,8,"static com.google.gerrit.server.project.PermissionCollection.SeenRule create(com.google.gerrit.common.data.AccessSection section, com.google.gerrit.common.data.Permission permission, @com.google.gerrit.common.Nullable com.google.gerrit.common.data.PermissionRule rule) { com.google.gerrit.reviewdb.client.AccountGroup.UUID group = ((rule != null) && ((rule.getGroup()) != null)) ? rule.getGroup().getUUID() : null; return new com.google.gerrit.server.project.AutoValue_PermissionCollection_SeenRule(section.getName(), permission.getName(), group); }",775c8cabf2bb15a3b04f08347fbaab2ae508ef12,"create(com.google.gerrit.common.data.AccessSection,com.google.gerrit.common.data.Permission,com.google.gerrit.common.data.PermissionRule)",61745,102,155
60631,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_GerritServer.java,13.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void clearDatabase() throws java.lang.Exception { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (schemaFactory.open())); try { java.sql.Connection conn = schema.getConnection(); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); com.google.gwtorm.jdbc.JdbcExecutor e = new com.google.gwtorm.jdbc.JdbcExecutor(schema); try { for (java.lang.String table : dialect.listTables(conn)) { e.execute((""DROP TABLE "" + table)); } schema.restartSequences(e); } finally { e.close(); } } finally { schema.close(); } }",119a97c61cf8c638e0fb6f0da5630da6d0f299ad,,clearDatabase(),7,14,"static com.google.gerrit.acceptance.GerritServer.Description forTestMethod(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, ((testDesc.getAnnotation(com.google.gerrit.acceptance.UseLocalDisk.class)) == null), (((testDesc.getAnnotation(com.google.gerrit.acceptance.NoHttpd.class)) == null) && ((testDesc.getTestClass().getAnnotation(com.google.gerrit.acceptance.NoHttpd.class)) == null)), testDesc.getAnnotation(com.google.gerrit.acceptance.GerritConfig.class), testDesc.getAnnotation(com.google.gerrit.acceptance.GerritConfigs.class)); }",9fc55076a1737dcd12dddc1b0a46be888c7cdbf8,"forTestMethod(org.junit.runner.Description,java.lang.String)",128942,162,191
53627,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_GetGroupIT.java,1.0,"private void testGetGroup(java.lang.String url, com.google.gerrit.reviewdb.client.AccountGroup expectedGroup) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.acceptance.rest.group.GroupInfo group = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.acceptance.rest.group.GroupInfo>() {}.getType()); com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroupInfo(expectedGroup, group); }",99abcb6327a8d8cf2836b8391aefa221e9359b03,"private void testGetGroup(java.lang.String url, com.google.gerrit.reviewdb.client.AccountGroup expectedGroup) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.server.group.GroupJson.GroupInfo group = new com.google.gson.Gson().fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<com.google.gerrit.server.group.GroupJson.GroupInfo>() {}.getType()); com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroupInfo(expectedGroup, group); }",312ce109182ae9f4765219115cd1cb17c01b8c35,"testGetGroup(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup)","testGetGroup(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup)",5,1,"private void testGetGroup(java.lang.String url, com.google.gerrit.reviewdb.client.AccountGroup expectedGroup) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get(url); com.google.gerrit.server.group.GroupJson.GroupInfo group = newGson().fromJson(r.getReader(), com.google.gerrit.server.group.GroupJson.GroupInfo.class); com.google.gerrit.acceptance.rest.group.GroupAssert.assertGroupInfo(expectedGroup, group); }",5d59852ade3821eb8746d5288cdd226d74b54047,"testGetGroup(java.lang.String,com.google.gerrit.reviewdb.client.AccountGroup)",4640,151,131
85291,gerrit-server_src_main_java_com_google_gerrit_server_mail_SmtpEmailSender.java,4.0,"private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> hdrs, final java.lang.String name, final java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.EmailHeader.String(value)); } }",b2c5c50a163c07a4639e11aeb2e5436436adf1a5,"private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> hdrs, final java.lang.String name, final java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { setHeader(hdrs, name, value); } }",cd19672f84fc4be55d1fd61bff13d20c4fa7a1b9,"setMissingHeader(java.util.Map,java.lang.String,java.lang.String)","setMissingHeader(java.util.Map,java.lang.String,java.lang.String)",10,3,"private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> hdrs, final java.lang.String name, final java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.EmailHeader.String(value)); } }",b2c5c50a163c07a4639e11aeb2e5436436adf1a5,"setMissingHeader(java.util.Map,java.lang.String,java.lang.String)",72021,89,106
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_LocalComments.java,13.0,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",ec04c937418e4b7bacda187d923c73ac761ab2d6,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (final java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(input.psId, Project.NameKey.asStringOrNull(input.project), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(input.psId, Project.NameKey.asStringOrNull(input.project), input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",247c5aeea1aafcb51eb710bed67ca6c571b67350,saveInlineComments(),saveInlineComments(),7,13,"public static void saveInlineComments() { final com.google.gerrit.client.change.LocalComments.StorageBackend storage = new com.google.gerrit.client.change.LocalComments.StorageBackend(); for (java.lang.String cookie : storage.getKeys()) { if (com.google.gerrit.client.change.LocalComments.isInlineComment(cookie)) { com.google.gerrit.client.change.LocalComments.InlineComment input = com.google.gerrit.client.change.LocalComments.getInlineComment(cookie); if ((input.commentInfo.id()) == null) { com.google.gerrit.client.changes.CommentApi.createDraft(Project.NameKey.asStringOrNull(input.project), input.psId, input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } }); } else { com.google.gerrit.client.changes.CommentApi.updateDraft(Project.NameKey.asStringOrNull(input.project), input.psId, input.commentInfo.id(), input.commentInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.CommentInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.CommentInfo result) { storage.removeItem(cookie); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if (com.google.gerrit.client.rpc.RestApi.isNotFound(caught)) { storage.removeItem(cookie); } else { super.onFailure(caught); } } }); } } } }",506fce0f0fb0d3fcfa13578fc4a96e8a644d3cb9,saveInlineComments(),211263,426,425
143853,javatests_com_google_gerrit_server_group_db_GroupBundleTest.java,,,,"private GroupBundle.Builder newBundle() { java.sql.Timestamp ts = new java.sql.Timestamp(TestTimeUtil.START.toEpochMilli()); com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",f17a777d6aa487e78e139ca2faf7a966e12ee285,,newBundle(),5,3,"private GroupBundle.Builder newBundle() { com.google.gerrit.reviewdb.client.AccountGroup group = new com.google.gerrit.reviewdb.client.AccountGroup(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(""group""), new com.google.gerrit.reviewdb.client.AccountGroup.Id(1), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""group-1""), ts); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(new com.google.gerrit.reviewdb.client.Account.Id(1000), group.getId())); com.google.gerrit.reviewdb.client.AccountGroupMemberAudit memberAudit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(member, new com.google.gerrit.reviewdb.client.Account.Id(2000), ts); com.google.gerrit.reviewdb.client.AccountGroupById byId = new com.google.gerrit.reviewdb.client.AccountGroupById(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(group.getId(), new com.google.gerrit.reviewdb.client.AccountGroup.UUID(""subgroup""))); com.google.gerrit.reviewdb.client.AccountGroupByIdAud byIdAudit = new com.google.gerrit.reviewdb.client.AccountGroupByIdAud(byId, new com.google.gerrit.reviewdb.client.Account.Id(3000), ts); return com.google.gerrit.server.group.db.GroupBundle.builder().group(group).members(member).memberAudit(memberAudit).byId(byId).byIdAudit(byIdAudit); }",0b7b3b4251ca840001c3bf9351d3fb40c1ca2f5d,newBundle(),20833,474,450
68212,gerrit-server_src_main_java_com_google_gerrit_server_account_DefaultRealm.java,0.0,@java.lang.Override public boolean allowsEdit(final com.google.gerrit.reviewdb.client.Account.FieldName field) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.HTTP)) { switch (field) { case USER_NAME : return false; case FULL_NAME : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpDisplaynameHeader())) == null; case REGISTER_NEW_EMAIL : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpEmailHeader())) == null; default : return true; } } else { return true; } },c83766ce750354a73b5def817cbc7b468673050c,@java.lang.Override public boolean allowsEdit(final com.google.gerrit.reviewdb.client.Account.FieldName field) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.HTTP)) { switch (field) { case USER_NAME : return false; case FULL_NAME : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpDisplaynameHeader())) == null; case REGISTER_NEW_EMAIL : return (emailSettings.allowRegisterNewEmail) && ((com.google.common.base.Strings.emptyToNull(authConfig.getHttpEmailHeader())) == null); default : return true; } } else { return true; } },efbdb2dda39859d23fdea462faa95ed02459efdf,allowsEdit(com.google.gerrit.reviewdb.client.Account$FieldName),allowsEdit(com.google.gerrit.reviewdb.client.Account$FieldName),3,0,@java.lang.Override public boolean allowsEdit(final com.google.gerrit.reviewdb.client.Account.FieldName field) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.HTTP)) { switch (field) { case USER_NAME : return false; case FULL_NAME : return (com.google.common.base.Strings.emptyToNull(authConfig.getHttpDisplaynameHeader())) == null; case REGISTER_NEW_EMAIL : return (emailSettings.allowRegisterNewEmail) && ((com.google.common.base.Strings.emptyToNull(authConfig.getHttpEmailHeader())) == null); default : return true; } } else { switch (field) { case REGISTER_NEW_EMAIL : return emailSettings.allowRegisterNewEmail; default : return true; } } },15e8c6b9f2312467b2d944c8a14d6e4b9d81f366,allowsEdit(com.google.gerrit.reviewdb.client.Account$FieldName),136140,175,202
34477,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_NativeList.java,,,,@java.lang.Override public boolean hasNext() { return (index) < (size()); },892bc8c1277933c9ce25e9bc707f10356273ceec,,hasNext(),13,3,"@java.lang.Override public T set(int index, T element) { T old = this.get(index); this.set0(index, element); return old; }",9b88aa7a2602ed66d5ab06eab3ff55d959810ec9,"set(int,com.google.gwt.core.client.JavaScriptObject)",19477,21,39
67060,gerrit-server_src_test_java_com_google_gerrit_server_schema_SchemaCreatorTest.java,3.0,@org.junit.Before public void setUp() throws java.lang.Exception { new com.google.gerrit.testutil.InMemoryModule().inject(this); },80b8bed8b351b48f7f5ed070a26364a665065dfb,@org.junit.Before public void setUp() throws java.lang.Exception { com.google.gerrit.lifecycle.LifecycleManager lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.gerrit.testutil.InMemoryModule.createInjector(lifecycle).injectMembers(this); lifecycle.start(); },cc2cf69e2821028f37d2575fe25c0d6040d1c211,setUp(),setUp(),3,3,@org.junit.Before public void setUp() throws java.lang.Exception { lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); com.google.gerrit.testutil.InMemoryModule.createInjector(lifecycle).injectMembers(this); lifecycle.start(); },fc3ea9e136372787479e9d1b16244a7a4e817d10,setUp(),4087,70,59
74475,gerrit-httpd_src_main_java_com_google_gerrit_httpd_XsrfCookieFilter.java,0.0,"private static boolean isSecure(javax.servlet.http.HttpServletRequest req) { return (req.isSecure()) || (""https"".equals(req.getScheme())); }",9c32ed0506b82d51655f9b29852de68ab846a09a,"private boolean isSecure(javax.servlet.http.HttpServletRequest req) { return ((authConfig.getCookieSecure()) || (req.isSecure())) || (""https"".equals(req.getScheme())); }",8e9e7c64ce11884cdfdcc9d3f2aeea1527268057,isSecure(javax.servlet.http.HttpServletRequest),isSecure(javax.servlet.http.HttpServletRequest),2,0,"private boolean isSecure(javax.servlet.http.HttpServletRequest req) { return (req.isSecure()) || (""https"".equals(req.getScheme())); }",feeadc7799bbdac1bc2e86d54af239bb0435e25b,isSecure(javax.servlet.http.HttpServletRequest),117032,45,35
82212,gerrit-server_src_test_java_com_google_gerrit_server_mail_FromAddressGeneratorProviderTest.java,23.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void testUSERNoAllowDomain() { setFrom(""USER""); setDomain(java.util.Arrays.asList(""example.com"")); final java.lang.String name = ""A U. Thor""; final java.lang.String email = ""a.u.thor@test.com""; final com.google.gerrit.reviewdb.client.Account.Id user = user(name, email); replay(accountCache); final com.google.gerrit.server.mail.Address r = create().from(user); assertThat(r).isNotNull(); assertThat(r.name).isEqualTo(name); assertThat(r.email).isEqualTo(ident.getEmailAddress()); verify(accountCache); }",d8514cc7867375859968e35a74df09956928f974,,testUSERNoAllowDomain(),7,23,"@org.junit.Test public void testUSERNoAllowDomain() { setFrom(""USER""); setDomains(java.util.Arrays.asList(""example.com"")); final java.lang.String name = ""A U. Thor""; final java.lang.String email = ""a.u.thor@test.com""; final com.google.gerrit.reviewdb.client.Account.Id user = user(name, email); replay(accountCache); final com.google.gerrit.server.mail.Address r = create().from(user); assertThat(r).isNotNull(); assertThat(r.name).isEqualTo((name + "" (Code Review)"")); assertThat(r.email).isEqualTo(ident.getEmailAddress()); verify(accountCache); }",2376e25e6771d58cc13b3e51e6c63ebb04ec8caa,testUSERNoAllowDomain(),16818,156,164
62800,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_DefaultGroupsIT.java,0.0,"@org.junit.Test public void defaultGroupsCreated_internals() throws java.lang.Exception { java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().all()) { names.add(g.getName()); } assertTrue(names.contains(""Administrators"")); assertTrue(names.contains(""Non-Interactive Users"")); }",e2152f3209d2262678cb2edfe2a7c5ff86df1958,"@org.junit.Test public void defaultGroupsCreated_internals() throws java.lang.Exception { java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().all()) { names.add(g.getName()); } assertThat(names).contains(""Administrators""); assertThat(names).contains(""Non-Interactive Users""); }",84b77bb73489cf5d53b78338dab3c429f83e544f,defaultGroupsCreated_internals(),defaultGroupsCreated_internals(),4,0,"@org.junit.Test public void defaultGroupsCreated_internals() throws java.lang.Exception { java.util.Set<java.lang.String> names = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.AccountGroup g : db.accountGroups().all()) { names.add(g.getName()); } assertThat(((java.lang.Iterable<?>) (names))).contains(""Administrators""); assertThat(((java.lang.Iterable<?>) (names))).contains(""Non-Interactive Users""); }",d43d47521ea2b3beaa118456c29f72b7ed63d6c2,defaultGroupsCreated_internals(),183560,107,123
127210,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,5.0,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals(""default"")) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",acc6ea4ce76f5af6136070d4fca5450979ac42c8,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (id.toString().equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",bd2842e5f28220b2a30695e29b90d3f1eb1c601c,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",4,7,"@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.project.ProjectControl myCtl = parent.getControl(); if (com.google.gerrit.server.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(myCtl); } java.util.List<java.lang.String> parts = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id.get())); if ((parts.size()) != 2) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } com.google.gerrit.server.CurrentUser user = myCtl.getUser(); java.lang.String ref = parts.get(0); java.lang.String path = parts.get(1); for (com.google.gerrit.server.project.ProjectState ps : myCtl.getProjectState().tree()) { try { return parse(ps.controlFor(user), ref, path, myCtl); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }",2972cf44b13bc76353cec15d4e6f7aa87c144df8,"parse(com.google.gerrit.server.project.ProjectResource,com.google.gerrit.extensions.restapi.IdString)",31369,451,444
54044,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,1.0,"@org.junit.Test public void revert() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).review(com.google.gerrit.acceptance.api.change.ChangeIT.approve()); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).submit(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revert(); }",885418222e18024d6e8c53cb2a694802ff017325,"@org.junit.Test public void revert() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).approve(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).submit(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revert(); }",f3979087fe335a6a824f433815b7867c4020cc77,revert(),revert(),3,1,"@org.junit.Test public void revert() throws com.google.gerrit.extensions.restapi.RestApiException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revision(r.getCommit().name()).submit(); gApi.changes().id((""p~master~"" + (r.getChangeId()))).revert(); }",035c3c314792d698bf92bf7088591e8ddd244467,revert(),39631,164,184
45590,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCache.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.gerrit.server.project.ProjectState getChecked(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws java.io.IOException;,d3ca6944502b7ffc49800860c6a546443caef1c1,,getChecked(com.google.gerrit.reviewdb.client.Project$NameKey),2,2,public com.google.gerrit.server.project.ProjectState checkedGet(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws java.io.IOException;,120973272f9e78aec3c56fbde0b167291ebc7120,checkedGet(com.google.gerrit.reviewdb.client.Project$NameKey),134247,43,43
74403,gerrit-server_src_main_java_com_google_gerrit_server_PatchLineCommentsUtil.java,22.0,"private java.lang.Iterable<java.lang.String> getDraftRefs(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { java.util.Set<java.lang.String> refNames = getRefNamesAllUsers(RefNames.REFS_DRAFT_COMMENTS); final java.lang.String suffix = ""/"" + (changeId.get()); return com.google.common.collect.Iterables.filter(refNames, new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String input) { return input.endsWith(suffix); } }); }",680a906f87fa0a3841d00a36d5cdbbe17ee1ad73,"private java.lang.Iterable<org.eclipse.jgit.lib.Ref> getDraftRefs(com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openMetadataRepository(allUsers)) { return getDraftRefs(repo, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",6f2d64082cea6d2238de30b3b9331c3bc80139ea,getDraftRefs(com.google.gerrit.reviewdb.client.Change$Id),getDraftRefs(com.google.gerrit.reviewdb.client.Change$Id),5,22,"private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getDraftRefs(com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openMetadataRepository(allUsers)) { return getDraftRefs(repo, changeId); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }",e983c3c49e2a1f314e68b3a5b169d005714be285,getDraftRefs(com.google.gerrit.reviewdb.client.Change$Id),105099,120,126
45590,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectCacheImpl.java,14.0,"public com.google.gerrit.server.project.ProjectState get(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { if (projectName == null) { return null; } try { com.google.gerrit.server.project.ProjectState state = byName.get(projectName.get()); if ((state != null) && (state.needsRefresh(clock.read()))) { byName.invalidate(projectName.get()); state = byName.get(projectName.get()); } return state; } catch (java.util.concurrent.ExecutionException e) { if (!((e.getCause()) instanceof org.eclipse.jgit.errors.RepositoryNotFoundException)) { com.google.gerrit.server.project.ProjectCacheImpl.log.warn(java.lang.String.format(""Cannot read project %s"", projectName.get()), e); } return null; } }",64bbf719a96c78db40378baa394b1ce042a9b49c,@java.lang.Override public com.google.gerrit.server.project.ProjectState get(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return getChecked(projectName); } catch (java.io.IOException e) { return null; } },598e266060594f17ce9f3983a4e189b78d89f5b2,get(com.google.gerrit.reviewdb.client.Project$NameKey),get(com.google.gerrit.reviewdb.client.Project$NameKey),2,13,@java.lang.Override public com.google.gerrit.server.project.ProjectState get(final com.google.gerrit.reviewdb.client.Project.NameKey projectName) { try { return checkedGet(projectName); } catch (java.io.IOException e) { return null; } },488005b37571f7a9d4c3ed4d555684225a042cf7,get(com.google.gerrit.reviewdb.client.Project$NameKey),134228,67,67
35260,gerrit-server_src_main_java_com_google_gerrit_server_plugins_Plugin.java,4.0,public void add(final com.google.gerrit.extensions.registration.RegistrationHandle handle) { if (handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle) { if ((reloadableHandles) == null) { reloadableHandles = com.google.common.collect.Lists.newArrayList(); } reloadableHandles.add(((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?>) (handle))); } add(new com.google.gerrit.lifecycle.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { handle.remove(); } }); },f01a7af8418df47fa995b15e8d04aaeaa9e12876,public void add(final com.google.gerrit.extensions.registration.RegistrationHandle handle) { if (handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle) { if ((reloadableHandles) == null) { reloadableHandles = com.google.common.collect.Lists.newArrayList(); } reloadableHandles.add(((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?>) (handle))); } add(new com.google.gerrit.extensions.events.LifecycleListener() { @java.lang.Override public void start() { } @java.lang.Override public void stop() { handle.remove(); } }); },f3ee11d04f1cd8ca15e5688051161acffbda9dbb,add(com.google.gerrit.extensions.registration.RegistrationHandle),add(com.google.gerrit.extensions.registration.RegistrationHandle),6,4,public void add(com.google.gerrit.extensions.registration.RegistrationHandle handle) { if (handle instanceof com.google.gerrit.extensions.registration.ReloadableRegistrationHandle) { if ((reloadableHandles) == null) { reloadableHandles = com.google.common.collect.Lists.newArrayList(); } reloadableHandles.add(((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?>) (handle))); } manager.add(handle); },33fcd0ff9db9c8145a105c5997731c7574383117,add(com.google.gerrit.extensions.registration.RegistrationHandle),113769,143,101
142610,java_com_google_gerrit_reviewdb_server_DisallowReadFromGroupsReviewDbWrapper.java,,,,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMemberAudit get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },3316e49d201543eb3794d60d4583f4216024fd6b,,get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit$Key),3,40,@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMemberAudit get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); },300d77ba172485a2cbd73528133dcad70020433b,get(com.google.gerrit.reviewdb.client.AccountGroupMemberAudit$Key),205027,93,80
76474,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_VersionedAuthorizedKeysOnInit.java,,,,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { revision = getRevision(); super.onLoad(); }",ec1f2ba327e46d6c01254b52dda00dcca38e70de,,onLoad(),9,1,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { revision = getRevision(); keys = com.google.gerrit.server.account.AuthorizedKeys.parse(accountId, readUTF8(AuthorizedKeys.FILE_NAME)); }",9a12ba7b0518ef2dc64beb1265137654e36e4bdf,onLoad(),84839,41,68
70825,gerrit-server_src_main_java_com_google_gerrit_server_project_RefFilter.java,,,,public com.google.gerrit.server.project.RefFilter<T> setStart(int start) { this.start = start; return this; },e80dbeaca403dd5b28524e0e48ebfe05d14c654e,,setStart(int),7,1,public com.google.gerrit.server.project.RefFilter<T> start(int start) { this.start = start; return this; },4146a1183b601ed44c55b05333a10bb97fbece68,start(int),118269,34,33
58390,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListProjectsIT.java,,,,"@org.junit.Test public void listProjectsWithBranch() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = GET(""/projects/?b=master""); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); assertNotNull(result.get(existingProject.get())); assertNotNull(result.get(existingProject.get()).branches); assertEquals(1, result.get(existingProject.get()).branches.size()); assertNotNull(result.get(existingProject.get()).branches.get(""master"")); }",af16636c0a235099e2632471287a3e0eb779f66b,,listProjectsWithBranch(),2,9,"@org.junit.Test public void listProjectsWithBranch() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = GET(""/projects/?b=master""); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ProjectInfo> result = com.google.gerrit.acceptance.rest.project.ListProjectsIT.toProjectInfoMap(r); assertNotNull(result.get(project.get())); assertNotNull(result.get(project.get()).branches); assertEquals(1, result.get(project.get()).branches.size()); assertNotNull(result.get(project.get()).branches.get(""master"")); }",cdf1011f87e5d590555ee155b745dbeeb2d102cd,listProjectsWithBranch(),43012,179,175
74312,gerrit-server_src_main_java_com_google_gerrit_server_group_SystemGroupBackend.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> getNames() { return com.google.gerrit.server.group.SystemGroupBackend.names; }",85135e4200cc3a6942be21b8f8d81c0208470301,,getNames(),12,8,"public static java.util.List<java.lang.String> getNames() { java.util.List<java.lang.String> names = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : com.google.gerrit.server.group.SystemGroupBackend.all) { int c = uuid.get().indexOf(':'); names.add(uuid.get().substring((c + 1)).replace('-', ' ')); } return names; }",cc00de31c6d892e26b08f1ac98c2be6666e1d6de,getNames(),112095,52,121
78371,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_VisibleRefFilterIT.java,10.0,"private void assertRefs(java.lang.String... expectedWithMeta) throws java.lang.Exception { java.util.List<java.lang.String> expected = new java.util.ArrayList<>(expectedWithMeta.length); for (java.lang.String r : expectedWithMeta) { if ((notesMigration.writeChanges()) || (!(r.endsWith(RefNames.META_SUFFIX)))) { expected.add(r); } } com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = disableDb(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(project, identifiedUserFactory.create(user.getId())); com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, ctl, new com.google.gerrit.testutil.DisabledReviewDb(), true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = repo.getAllRefs(); assertThat(filter.filter(all, false).keySet()).containsExactlyElementsIn(expected); } finally { enableDb(ctx); } }",d8ec32df0ecb3583a6b7d738fc319ed5e721f00f,"private void assertRefs(java.lang.String... expectedWithMeta) throws java.lang.Exception { java.util.List<java.lang.String> expected = new java.util.ArrayList<>(expectedWithMeta.length); for (java.lang.String r : expectedWithMeta) { if ((notesMigration.writeChanges()) || (!(r.endsWith(RefNames.META_SUFFIX)))) { expected.add(r); } } com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context ctx = disableDb(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { com.google.gerrit.server.project.ProjectControl ctl = projectControlFactory.controlFor(project, userProvider.get()); com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, ctl, new com.google.gerrit.testutil.DisabledReviewDb(), true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = repo.getAllRefs(); assertThat(filter.filter(all, false).keySet()).containsExactlyElementsIn(expected); } finally { enableDb(ctx); } }",52769b941961b1510c148602da4578fa71d2968b,assertRefs(java.lang.String[]),assertRefs(java.lang.String[]),5,7,"private void assertRefs(java.lang.String... expectedWithMeta) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { assertRefs(repo, new com.google.gerrit.server.git.VisibleRefFilter(tagCache, notesFactory, changeCache, repo, projectControl(), new com.google.gerrit.testutil.DisabledReviewDb(), true), true, expectedWithMeta); } }",c7083acb1d3a8e48bfd2f02a073d0175c7c7752b,assertRefs(java.lang.String[]),30171,290,105
43661,gerrit-server_src_main_java_com_google_gerrit_server_git_MergeOp.java,4.0,"private void setMerged(final com.google.gerrit.reviewdb.client.Change c, final com.google.gerrit.reviewdb.client.ChangeMessage msg) { com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change.currentPatchSetId(); setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = saveApprovals(c, merged); addMergedMessage(submitter, msg); sendMergedEmail(c, submitter); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(c.currentPatchSetId()), db); } catch (com.google.gwtorm.server.OrmException ex) { com.google.gerrit.server.git.MergeOp.log.error((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } }",d76bf3df5aaa29a0d0685f0e2bf6263dcc925b41,"private void setMerged(final com.google.gerrit.reviewdb.client.Change c, final com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException { try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change.currentPatchSetId(); setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = saveApprovals(c, merged); addMergedMessage(submitter, msg); sendMergedEmail(c, submitter); db.commit(); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(c.currentPatchSetId()), db); } catch (com.google.gwtorm.server.OrmException ex) { com.google.gerrit.server.git.MergeOp.log.error((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } } finally { db.rollback(); } }",4ae92af73eef7bac41580c263eac5a06cecb7506,"setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)","setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)",3,4,"private void setMerged(final com.google.gerrit.reviewdb.client.Change c, final com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException { try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change.currentPatchSetId(); setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = saveApprovals(c, merged); addMergedMessage(submitter, msg); db.commit(); sendMergedEmail(c, submitter); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(c.currentPatchSetId()), db); } catch (com.google.gwtorm.server.OrmException ex) { com.google.gerrit.server.git.MergeOp.log.error((""Cannot run hook for submitted patch set "" + (c.getId())), ex); } } } finally { db.rollback(); } }",5b9e56e64e4bcb98e343ad09d12b928a0d882953,"setMerged(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.ChangeMessage)",5253,293,293
91971,gerrit-server_src_main_java_com_google_gerrit_server_index_change_StalenessChecker.java,,,,boolean match(java.lang.String refName) { return pattern().matcher(refName).find(); },ca5c1ecad80abf55bdcbc1d2a4b36863933ddb66,,match(java.lang.String),5,5,boolean match(java.lang.String refName) { return regex().matcher(refName).find(); },2454e6b770f8d8b2ef13f76b3216c788214607f4,match(java.lang.String),167351,23,23
42881,gerrit-server_src_main_java_com_google_gerrit_server_change_TestSubmitType.java,,,,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { return test.apply(resource, null); }",56335b4c2d5623015f99a2129534a90fe07b4040,,apply(com.google.gerrit.server.change.RevisionResource),4,0,"@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { return test.apply(resource, null); }",ef961b2500e0f3110b38171fb58a3208ec100207,apply(com.google.gerrit.server.change.RevisionResource),148356,69,84
109251,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_RevertedSenderIT.java,3.0,"@org.junit.Test public void revertChangeByOwner() throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange(); revert(sc, sc.owner); assertThat(sender).sent(""newchange"", sc).notTo(sc.owner).to(sc.reviewer).cc(sc.ccer).notTo(sc.starrer).notTo(sc.reviewerByEmail, sc.ccerByEmail).notTo(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS); assertThat(sender).sent(""revert"", sc).notTo(sc.owner).cc(sc.reviewer, sc.ccer).notTo(sc.starrer).notTo(sc.reviewerByEmail, sc.ccerByEmail).bcc(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS); }",1685f09d8a223faf5a4261aaa75faa9f229ad5ac,"@org.junit.Test public void revertChangeByOwner() throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange(); revert(sc, sc.owner); assertThat(sender).sent(""newchange"", sc).to(sc.reviewer, sc.watchingProjectOwner, admin).cc(sc.ccer).bcc(com.google.gerrit.acceptance.server.mail.NEW_CHANGES, com.google.gerrit.acceptance.server.mail.NEW_PATCHSETS).noOneElse(); assertThat(sender).sent(""revert"", sc).cc(sc.reviewer, sc.ccer, admin).bcc(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS).noOneElse(); }",a456133d11b0d5239d7dcab905f604b42d0cb299,revertChangeByOwner(),revertChangeByOwner(),16,6,"@org.junit.Test public void revertChangeByOwnerInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.server.mail.StagedChange sc = stageChange(); revert(sc, sc.owner); assertThat(sender).sent(""newchange"", sc).to(sc.reviewer, sc.watchingProjectOwner, admin).cc(sc.ccer).bcc(com.google.gerrit.acceptance.server.mail.NEW_CHANGES, com.google.gerrit.acceptance.server.mail.NEW_PATCHSETS).noOneElse(); assertThat(sender).sent(""revert"", sc).cc(sc.reviewer, sc.ccer, admin).bcc(com.google.gerrit.acceptance.server.mail.ALL_COMMENTS).noOneElse(); }",6dc509ceaf5c64e9ac1d6f1489093360c5f314f7,revertChangeByOwnerInNoteDb(),39892,180,196
148032,java_com_google_gerrit_server_restapi_project_CommitsCollection.java,3.0,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },7464bda06e48c1a98c8885dbe106f869a76b791d,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },741b256d8805066a68bb65a1cb9fe8df4de3195f,list(),list(),17,2,@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.project.ProjectResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); },7464bda06e48c1a98c8885dbe106f869a76b791d,list(),218418,75,72
33090,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_PatchSetComplexDisclosurePanel.java,13.0,"private void populateDiffAllActions(final com.google.gerrit.common.data.PatchSetDetail detail) { final com.google.gwt.user.client.ui.Button diffAllSideBySide = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllSideBySide()); diffAllSideBySide.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { com.google.gwt.user.client.Window.open((((Window.Location.getPath()) + ""#"") + (com.google.gerrit.client.Dispatcher.toPatchSideBySide(p.getKey()))), ""_blank"", null); } } }); actionsPanel.add(diffAllSideBySide); final com.google.gwt.user.client.ui.Button diffAllUnified = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllUnified()); diffAllUnified.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { com.google.gwt.user.client.Window.open((((Window.Location.getPath()) + ""#"") + (com.google.gerrit.client.Dispatcher.toPatchUnified(p.getKey()))), ""_blank"", null); } } }); actionsPanel.add(diffAllUnified); }",f4e383681b77af5dc5f97c39cb92cf6ea3cf89ad,private void populateDiffAllActions(final com.google.gerrit.common.data.PatchSetDetail detail) { diffAllSideBySide = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllSideBySide()); diffAllUnified = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllUnified()); addHandlerForDiffButton(detail); actionsPanel.add(diffAllSideBySide); actionsPanel.add(diffAllUnified); },e7c776e1098bc3ad83f1bccc9abd9e247bde8271,populateDiffAllActions(com.google.gerrit.common.data.PatchSetDetail),populateDiffAllActions(com.google.gerrit.common.data.PatchSetDetail),5,14,"private void populateDiffAllActions(final com.google.gerrit.common.data.PatchSetDetail detail) { final com.google.gwt.user.client.ui.Button diffAllSideBySide = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllSideBySide()); diffAllSideBySide.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { openWindow(com.google.gerrit.client.Dispatcher.toPatchSideBySide(diffBaseId, p.getKey())); } } }); actionsPanel.add(diffAllSideBySide); final com.google.gwt.user.client.ui.Button diffAllUnified = new com.google.gwt.user.client.ui.Button(Util.C.buttonDiffAllUnified()); diffAllUnified.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { for (com.google.gerrit.reviewdb.Patch p : detail.getPatches()) { openWindow(com.google.gerrit.client.Dispatcher.toPatchUnified(diffBaseId, p.getKey())); } } }); actionsPanel.add(diffAllUnified); }",48cc99e90beb148ec4207cb67da2194bb5b3b621,populateDiffAllActions(com.google.gerrit.common.data.PatchSetDetail),130609,114,340
38380,gerrit-gwtui_src_main_java_com_google_gerrit_client_HostPageDataService.java,0.0,"@com.google.gwtjsonrpc.common.HostPageCache(name = ""gerrit_hostpagedata"", once = true) void load(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.HostPageData> callback);",c1149599183400138044b5fe0630d558199ae89c,"@com.google.gwtjsonrpc.common.HostPageCache(name = ""_hpd"", once = true) void load(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.HostPageData> callback);",f5e8e27b508bb92cc4effe707ca6c8d8be5fdb72,load(com.google.gwtjsonrpc.common.AsyncCallback),load(com.google.gwtjsonrpc.common.AsyncCallback),3,0,"@com.google.gwtjsonrpc.common.HostPageCache(name = ""gerrit_hostpagedata"", once = true) void load(com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.HostPageData> callback);",c1149599183400138044b5fe0630d558199ae89c,load(com.google.gwtjsonrpc.common.AsyncCallback),194060,59,62
76059,gerrit-server_src_main_java_com_google_gerrit_server_notedb_AbstractChangeNotes.java,0.0,public T load() throws com.google.gwtorm.server.OrmException { if (loaded) { return self(); } if ((!(args.migration.enabled())) || ((changeId) == null)) { loadDefaults(); return self(); } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openMetadataRepository(getProjectName());com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle handle = openHandle(repo)) { revision = handle.id(); onLoad(handle); loaded = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } return self(); },e487a78dfc81c25dc976c34be7d96dec5cfabb86,public T load() throws com.google.gwtorm.server.OrmException { if (loaded) { return self(); } if ((!(args.migration.enabled())) || ((changeId) == null)) { loadDefaults(); return self(); } try (com.google.gerrit.metrics.Timer1.Context timer = args.metrics.readLatency.start(com.google.gerrit.server.notedb.NoteDbTable.CHANGES);org.eclipse.jgit.lib.Repository repo = args.repoManager.openMetadataRepository(getProjectName());com.google.gerrit.server.notedb.AbstractChangeNotes.LoadHandle handle = openHandle(repo)) { revision = handle.id(); onLoad(handle); loaded = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } return self(); },1cdcbd78ca7ae4cef8328e39265d5da0aa4ae70f,load(),load(),3,0,public T load() throws com.google.gwtorm.server.OrmException { if (loaded) { return self(); } if ((!(args.migration.enabled())) || ((changeId) == null)) { loadDefaults(); return self(); } try (com.google.gerrit.metrics.Timer1.Context timer = args.metrics.readLatency.start(com.google.gerrit.server.notedb.NoteDbTable.CHANGES);org.eclipse.jgit.lib.Repository repo = args.repoManager.openMetadataRepository(getProjectName());org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().exactRef(getRefName()); org.eclipse.jgit.lib.ObjectId id = (ref != null) ? ref.getObjectId() : null; revision = (id != null) ? walk.parseCommit(id).copy() : null; onLoad(walk); loaded = true; } catch (org.eclipse.jgit.errors.ConfigInvalidException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } return self(); },6cc487fa94af7ee120e2d5b8b67aa6f293cec249,load(),83242,209,279
159711,src_main_java_com_googlesource_gerrit_plugins_reviewers_ReviewersConfig.java,4.0,java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); },5acb6fab7f80f3aa097ec6e885274025d95117fe,"public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { try { return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName)); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(((""Project"" + (projectName.get())) + "" not found"")); } }",99c5c2eb86b878df632bedc1fc9909899751a407,getReviewerFilterSections(),forProject(com.google.gerrit.reviewdb.client.Project$NameKey),4,4,"public com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject forProject(com.google.gerrit.reviewdb.client.Project.NameKey projectName) { org.eclipse.jgit.lib.Config cfg; try { cfg = cfgFactory.getProjectPluginConfigWithInheritance(projectName, pluginName); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.log.error(""Unable to get config for project {}"", projectName.get()); cfg = new org.eclipse.jgit.lib.Config(); } return new com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject(cfg); }",8e86e3bbd7c56c6db8e738e8a1de1406366551c2,forProject(com.google.gerrit.reviewdb.client.Project$NameKey),176451,152,168
90041,gerrit-server_src_main_java_com_google_gerrit_server_change_DeleteChangeOp.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean isPatchSetMerged(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.Repository repository = ctx.getRepository(); org.eclipse.jgit.revwalk.RevWalk revWalk = ctx.getRevWalk(); org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit revCommit = revWalk.parseCommit(objectId); com.google.gerrit.reviewdb.client.Branch.NameKey destinationNameKey = ctx.getChange().getDest(); org.eclipse.jgit.lib.Ref destinationRef = repository.exactRef(destinationNameKey.get()); if (destinationRef == null) { return false; } return com.google.gerrit.server.change.IncludedInResolver.includedInOne(repository, revWalk, revCommit, java.util.Collections.singletonList(destinationRef)); }",5d68c5d1046660b21706772398a30b4d6103f94f,,"isPatchSetMerged(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.reviewdb.client.PatchSet)",2,5,"private boolean isPatchSetMerged(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.Repository repository = ctx.getRepository(); org.eclipse.jgit.lib.Ref destinationRef = repository.exactRef(ctx.getChange().getDest().get()); if (destinationRef == null) { return false; } org.eclipse.jgit.revwalk.RevWalk revWalk = ctx.getRevWalk(); org.eclipse.jgit.lib.ObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(patchSet.getRevision().get()); org.eclipse.jgit.revwalk.RevCommit revCommit = revWalk.parseCommit(objectId); return com.google.gerrit.server.change.IncludedInResolver.includedInOne(repository, revWalk, revCommit, java.util.Collections.singletonList(destinationRef)); }",35ee4a2736f3680da4c2a8dbab5b96f811129738,"isPatchSetMerged(com.google.gerrit.server.git.BatchUpdate.ChangeContext,com.google.gerrit.reviewdb.client.PatchSet)",46521,249,224
65911,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_config_ServerIT.java,,,,@org.junit.Test public void getVersion() throws java.lang.Exception { java.lang.String version = gApi.config().server().getVersion(); com.google.common.truth.Truth.assertThat(version).is(com.google.gerrit.common.Version.getVersion()); },4f68d30d00e5209ba5f45b73bba130d45a7b910b,,getVersion(),5,0,@org.junit.Test public void getVersion() throws java.lang.Exception { assertThat(gApi.config().server().getVersion()).isEqualTo(com.google.gerrit.common.Version.getVersion()); },0ac8d64754491bb0a8c40a1559b8976ae660ba13,getVersion(),148340,68,46
140535,java_com_google_gerrit_server_change_PostReview.java,15.0,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patch.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",f5138fcf827c709c9bbaba89f59114ce8c1996d2,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.patchlib.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",b8e8ac0fc2dd1409146a43efa2c76e758cdd4955,"checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)","checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)",11,15,"private <T extends com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput> void checkComments(com.google.gerrit.server.change.RevisionResource revision, java.util.Map<java.lang.String, java.util.List<T>> commentsPerPath) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.diff.PatchListNotAvailableException { java.util.Set<java.lang.String> revisionFilePaths = getAffectedFilePaths(revision); for (java.util.Map.Entry<java.lang.String, java.util.List<T>> entry : commentsPerPath.entrySet()) { java.lang.String path = entry.getKey(); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = revision.getChange().currentPatchSetId(); com.google.gerrit.server.change.PostReview.ensurePathRefersToAvailableOrMagicFile(path, revisionFilePaths, patchSetId); java.util.List<T> comments = entry.getValue(); for (T comment : comments) { com.google.gerrit.server.change.PostReview.ensureLineIsNonNegative(comment.line, path); com.google.gerrit.server.change.PostReview.ensureCommentNotOnMagicFilesOfAutoMerge(path, comment); com.google.gerrit.server.change.PostReview.ensureRangeIsValid(path, comment.range); } } }",568239634f4fdfdd0d8cdc7c5d54a7e3987340f0,"checkComments(com.google.gerrit.server.change.RevisionResource,java.util.Map)",15191,338,337
74934,gerrit-server_src_main_java_com_google_gerrit_server_git_ReplaceOp.java,,,,"private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = ctx.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); org.eclipse.jgit.lib.Ref firstRef = all.get(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : all.values()) { if (com.google.gerrit.server.git.ReplaceOp.isHead(ref)) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn(""Can't check for already submitted change"", e); return null; } }",ccca6e6b37fad8700c17b5db2e734f76dd4ea487,,"findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext,java.lang.String,org.eclipse.jgit.revwalk.RevCommit)",3,15,"private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = ctx.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); org.eclipse.jgit.lib.Ref firstRef = all.get(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : all.values()) { if (com.google.gerrit.server.git.ReplaceOp.isBranch(ref)) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn(""Can't check for already submitted change"", e); return null; } }",2dad474c425387522c6ce81780ca2ee32ff3f784,"findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext,java.lang.String,org.eclipse.jgit.revwalk.RevCommit)",67575,296,296
71763,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PublicKeyStore.java,17.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public org.bouncycastle.openpgp.PGPPublicKeyRing get(byte[] fingerprint) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { if ((reader) == null) { load(); } if ((notes) == null) { return null; } org.eclipse.jgit.notes.Note note = notes.getNote(com.google.gerrit.gpg.PublicKeyStore.keyObjectId(com.google.gerrit.gpg.Fingerprint.getId(fingerprint))); if (note == null) { return null; } try (java.io.InputStream in = reader.open(note.getData(), com.google.gerrit.gpg.OBJ_BLOB).openStream()) { while (true) { @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.Object> it = new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(new org.bouncycastle.bcpg.ArmoredInputStream(in)).iterator(); if (!(it.hasNext())) { break; } java.lang.Object obj = it.next(); if (obj instanceof org.bouncycastle.openpgp.PGPPublicKeyRing) { org.bouncycastle.openpgp.PGPPublicKeyRing kr = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (obj)); if (java.util.Arrays.equals(kr.getPublicKey().getFingerprint(), fingerprint)) { return kr; } } checkState((!(it.hasNext())), ""expected one PGP object per ArmoredInputStream""); } return null; } }",2cc29834f8c450e248ac450f7be8c242ed3d0226,,get(byte[]),7,2,"public org.bouncycastle.openpgp.PGPPublicKeyRing get(byte[] fingerprint) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = get(com.google.gerrit.gpg.Fingerprint.getId(fingerprint), fingerprint); return !(keyRings.isEmpty()) ? keyRings.get(0) : null; }",33426b8ffc71d46e90e84ce32aec394fa3051c7d,get(byte[]),122226,341,98
42234,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_RestSession.java,2.0,"public java.io.Reader get(java.lang.String endPoint) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet((""http://localhost:8080/a"" + endPoint)); org.apache.http.HttpResponse response = getClient().execute(get); java.io.Reader reader = new java.io.InputStreamReader(response.getEntity().getContent()); reader.skip(4); return reader; }",77a38162b2772aa5239e64f2a42a88eb4a193e7d,"public java.io.Reader get(java.lang.String endPoint) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet((""http://localhost:8080/a"" + endPoint)); org.apache.http.HttpResponse response = getClient().execute(get); java.io.Reader reader = new java.io.InputStreamReader(response.getEntity().getContent()); reader.skip(RestApiServlet.JSON_MAGIC.length); return reader; }",3aa5a886ec9dcca1114ae166814282b48ac2422d,get(java.lang.String),get(java.lang.String),2,2,"public java.io.Reader get(java.lang.String endPoint) throws java.io.IOException { org.apache.http.client.methods.HttpGet get = new org.apache.http.client.methods.HttpGet((""http://localhost:8080/a"" + endPoint)); org.apache.http.HttpResponse response = getClient().execute(get); java.io.Reader reader = new java.io.InputStreamReader(response.getEntity().getContent()); reader.skip(JSON_MAGIC.length); return reader; }",63caf063e8de765772a3b6418f341b6a281dec1c,get(java.lang.String),64056,116,113
61470,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_CommentsIT.java,3.0,"@org.junit.Test public void createDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Comment.Side.REVISION, 1, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); assertEquals(1, result.size()); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",af1562d9b23d969951d6175e1016d5e31cb62101,"@org.junit.Test public void createDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Comment.Side.REVISION, 1, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); assertThat(result.size()).isEqualTo(1); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",e4ab58e1c8bca8a563300865d9f03977479387ce,createDraft(),createDraft(),6,3,"@org.junit.Test public void createDraft() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(""file1"", Comment.Side.REVISION, 1, ""comment 1""); addDraft(changeId, revId, comment); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getDraftComments(changeId, revId); assertThat(result).hasSize(1); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }",edbe3cb789bf02951a929de4cf081b60a6da3b25,createDraft(),23758,233,231
127232,gerrit-server_src_main_java_com_google_gerrit_server_project_DashboardsCollection.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static boolean isDefaultDashboard(java.lang.String id) { return (id != null) && (id.equals(com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME)); },c6f30a37d79663ae11addf481a395e55d5182aa6,,isDefaultDashboard(java.lang.String),4,4,public static boolean isDefaultDashboard(@com.google.gerrit.common.Nullable java.lang.String id) { return com.google.gerrit.server.project.DashboardsCollection.DEFAULT_DASHBOARD_NAME.equals(id); },9917ffa31692df08b1fad0f1e18cf358149f6dd0,isDefaultDashboard(java.lang.String),93912,50,53
47322,gerrit-lucene_src_main_java_com_google_gerrit_lucene_SubIndex.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.lang.Void get(long timeout, java.util.concurrent.TimeUnit unit) { nrtManager.waitForGeneration(gen, timeout, unit); return null; }",153f6f1668c7b571457e183644a254b2c6f8f7d9,,"get(long,java.util.concurrent.TimeUnit)",2,5,"@java.lang.Override public java.lang.Void get(long timeout, java.util.concurrent.TimeUnit unit) throws java.lang.InterruptedException, java.util.concurrent.ExecutionException, java.util.concurrent.TimeoutException { if (!(isDone())) { nrtManager.waitForGeneration(gen, timeout, unit); set(null); } return super.get(timeout, unit); }",e222a0f801e5f9418be54ab86febf4e4942ed74f,"get(long,java.util.concurrent.TimeUnit)",196266,44,84
34953,gerrit-server_src_main_java_com_google_gerrit_server_account_UniversalGroupBackend.java,,,,@java.lang.Override public java.util.Set<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name)); } return groups; },5747bd905d466ac427cfa597217fda72a2e081a8,,suggest(java.lang.String),25,3,@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name)); } return groups; },aa5adb5a30174bb3e2ba0d5fdce26786f0544d4d,suggest(java.lang.String),76424,108,132
53917,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeInfo.java,71.0,"public static void sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list) { java.util.Collections.sort(com.google.gerrit.client.rpc.Natives.asList(list), new java.util.Comparator<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b) { return (a._number()) - (b._number()); } }); }",ca757ff9fafd4f015059bc186f06bb369bfe1b9b,"public static void sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list) { java.util.Collections.sort(com.google.gerrit.client.rpc.Natives.asList(list), new java.util.Comparator<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b) { return java.lang.Integer.compare(a._number(), b._number()); } }); }",b2a790b5b2091cab5ef844168021538f070d7e37,sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray),sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray),6,71,"public static void sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list) { java.util.Collections.sort(com.google.gerrit.client.rpc.Natives.asList(list), new java.util.Comparator<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo a, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo b) { return (a._number()) - (b._number()); } }); }",ca757ff9fafd4f015059bc186f06bb369bfe1b9b,sortRevisionInfoByNumber(com.google.gwt.core.client.JsArray),24713,166,161
154472,java_com_google_gerrit_server_account_AccountResolver.java,0.0,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.get(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",81f73622ff2e99cb205850b9cae16a9e0d627d45,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.getEvenIfMissing(r.iterator().next()).getAccount(); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if ((!(account.isPresent())) || (!(account.get().isActive()))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",6a72da5f030aca5e4daa567bfc7c4479aed0b169,find(java.lang.String),find(java.lang.String),8,0,"public com.google.gerrit.reviewdb.client.Account find(java.lang.String nameOrEmail) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> r = findAll(nameOrEmail); if ((r.size()) == 1) { return byId.maybeGet(r.iterator().next()).map(AccountState::getAccount).orElse(null); } com.google.gerrit.reviewdb.client.Account match = null; for (com.google.gerrit.reviewdb.client.Account.Id id : r) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> account = byId.maybeGet(id).map(AccountState::getAccount); if (!(account.map(Account::isActive).orElse(false))) { continue; } if (match != null) { return null; } match = account.get(); } return match; }",dc4e70db8c08302e85235bfec728ae4ea4da25d6,find(java.lang.String),86508,240,246
13138,gerrit-httpd_src_test_java_com_google_gerrit_httpd_rpc_project_ListBranchesTest.java,1.0,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); idA = org.eclipse.jgit.lib.ObjectId.fromString(""df84c2f4f7ce7e0b25cdeac84b8870bcff319885""); name = new com.google.gerrit.reviewdb.Project.NameKey(""test""); realDb = createBareRepository(); mockDb = createStrictMock(org.eclipse.jgit.lib.Repository.class); pc = createStrictMock(com.google.gerrit.server.project.ProjectControl.class); pcf = createStrictMock(ProjectControl.Factory.class); grm = createStrictMock(com.google.gerrit.server.git.GitRepositoryManager.class); }",cbfd9bff2b4e36ca24efc4431f823dd04eae1482,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); idA = org.eclipse.jgit.lib.ObjectId.fromString(""df84c2f4f7ce7e0b25cdeac84b8870bcff319885""); name = new com.google.gerrit.reviewdb.Project.NameKey(""test""); realDb = createBareRepository(); mockDb = createStrictMock(org.eclipse.jgit.lib.Repository.class); pc = createStrictMock(com.google.gerrit.server.project.ProjectControl.class); pcf = createStrictMock(ProjectControl.Factory.class); grm = createStrictMock(com.google.gerrit.GitRepositoryManager.class); }",62994d1459eec13323bb5f4e2bed9dbf916dd589,setUp(),setUp(),7,1,"@java.lang.Override protected void setUp() throws java.lang.Exception { super.setUp(); idA = org.eclipse.jgit.lib.ObjectId.fromString(""df84c2f4f7ce7e0b25cdeac84b8870bcff319885""); name = new com.google.gerrit.reviewdb.Project.NameKey(""test""); realDb = createBareRepository(); mockDb = createStrictMock(org.eclipse.jgit.lib.Repository.class); pc = createStrictMock(com.google.gerrit.server.project.ProjectControl.class); pcf = createStrictMock(ProjectControl.Factory.class); grm = createStrictMock(com.google.gerrit.server.git.GitRepositoryManager.class); }",cbfd9bff2b4e36ca24efc4431f823dd04eae1482,setUp(),194970,170,174
32431,gerrit-server_src_main_java_com_google_gerrit_server_ChangeUtil.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static org.eclipse.jgit.lib.CommitBuilder rebaseCommits(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit branchTip) throws java.io.IOException { final org.eclipse.jgit.merge.ThreeWayMerger merger = MergeStrategy.RESOLVE.newMerger(git, true); merger.merge(original, branchTip); final org.eclipse.jgit.lib.CommitBuilder rebasedCommitBuilder = new org.eclipse.jgit.lib.CommitBuilder(); rebasedCommitBuilder.setTreeId(merger.getResultTreeId()); rebasedCommitBuilder.setParentId(branchTip); rebasedCommitBuilder.setAuthor(original.getAuthorIdent()); rebasedCommitBuilder.setMessage(original.getFullMessage()); return rebasedCommitBuilder; }",b0cd040742f24aa5373493556c8415f39bb45b6a,,"rebaseCommits(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit)",12,4,"public static org.eclipse.jgit.lib.CommitBuilder rebaseCommit(org.eclipse.jgit.lib.Repository git, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit base, org.eclipse.jgit.lib.PersonIdent committerIdent) throws java.io.IOException { if ((original.getParentCount()) == 0) { throw new java.io.IOException(""Commits with no parents cannot be rebased (is this the initial commit?).""); } if ((original.getParentCount()) > 1) { throw new java.io.IOException(((""Patch sets with multiple parents cannot be rebased (merge commits)."" + "" Parents: "") + (java.util.Arrays.toString(original.getParents())))); } final org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new java.io.IOException(""Change is already up to date.""); } final org.eclipse.jgit.merge.ThreeWayMerger merger = MergeStrategy.RESOLVE.newMerger(git, true); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new java.io.IOException(""The rebase failed since conflicts occured during the merge.""); } final org.eclipse.jgit.lib.CommitBuilder rebasedCommitBuilder = new org.eclipse.jgit.lib.CommitBuilder(); rebasedCommitBuilder.setTreeId(merger.getResultTreeId()); rebasedCommitBuilder.setParentId(base); rebasedCommitBuilder.setAuthor(original.getAuthorIdent()); rebasedCommitBuilder.setMessage(original.getFullMessage()); rebasedCommitBuilder.setCommitter(committerIdent); return rebasedCommitBuilder; }",eb54cfef3bfcf14f184ee56819f3c64cb2547e42,"rebaseCommit(org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.revwalk.RevCommit,org.eclipse.jgit.lib.PersonIdent)",13036,195,406
58761,gerrit-server_src_main_java_com_google_gerrit_server_account_PutHttpPassword.java,1.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""need to be Gerrit administrator"")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",a7a52896cef534ced5b58c7800d6a60786b7def6,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canGenerateHttpPassword())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the generate http password permision."")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",3f5b0d92761afefd5220477401b647f2f41b80de,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutHttpPassword$Input)","apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutHttpPassword$Input)",4,1,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.google.gerrit.server.account.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.String newPassword; if (input.generate) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to generate HTTP password""); } newPassword = com.google.gerrit.server.account.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canGenerateHttpPassword()))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to clear HTTP password""); } newPassword = null; } else { if (!(self.get().getCapabilities().canGenerateHttpPassword())) { throw new com.google.gerrit.extensions.restapi.AuthException((""not allowed to set HTTP password directly, "" + ""requires the Generate HTTP Password permission"")); } newPassword = input.httpPassword; } return apply(rsrc.getUser(), newPassword); }",90ad264dd14268153ae05145b846d160883ba850,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutHttpPassword$Input)",23343,415,412
76055,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbModule.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.List<org.eclipse.jgit.transport.ReceiveCommand> rebuild(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId) { throw new java.lang.UnsupportedOperationException(); }",2aa40fb17570604fe469fc6dc11599399ce3bd1d,,"rebuild(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change.Id)",10,2,"@java.lang.Override public com.google.gerrit.server.notedb.NoteDbChangeState rebuild(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return null; }",094d1204715568f8307400b96bd0b4df0ea836ac,"rebuild(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Change$Id)",138203,74,79
56351,gerrit-pgm_src_main_java_com_google_gerrit_pgm_init_Libraries.java,3.0,"private void init() { final org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); try { cfg.fromText(com.google.gerrit.pgm.init.Libraries.read(com.google.gerrit.pgm.init.Libraries.RESOURCE_FILE)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } for (final java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { init(f, cfg); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException((""Cannot initialize "" + (f.getName()))); } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException((""Cannot initialize "" + (f.getName()))); } } } }",71fae57c0c8a29fe72c6a443a8c76772faeb7ea8,"private void init() { final org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); try { cfg.fromText(com.google.gerrit.pgm.init.Libraries.read(com.google.gerrit.pgm.init.Libraries.RESOURCE_FILE)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { f.set(this, downloadProvider.get()); } catch (java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException((""Cannot initialize "" + (f.getName()))); } } } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { init(f, cfg); } catch (java.lang.IllegalArgumentException | java.lang.IllegalAccessException | java.lang.NoSuchFieldException | java.lang.SecurityException e) { throw new java.lang.IllegalStateException((""Cannot configure "" + (f.getName()))); } } } }",7692816b5e245f1eb52117954d7e929b4adfb798,init(),init(),4,3,"private void init() { final org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); try { cfg.fromText(com.google.gerrit.pgm.init.Libraries.read(com.google.gerrit.pgm.init.Libraries.RESOURCE_FILE)); } catch (java.io.IOException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(e.getMessage(), e); } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { f.set(this, downloadProvider.get()); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException((""Cannot initialize "" + (f.getName()))); } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException((""Cannot initialize "" + (f.getName()))); } } } for (java.lang.reflect.Field f : com.google.gerrit.pgm.init.Libraries.class.getDeclaredFields()) { if ((((f.getModifiers()) & (java.lang.reflect.Modifier.STATIC)) == 0) && ((f.getType()) == (com.google.gerrit.pgm.init.LibraryDownloader.class))) { try { init(f, cfg); } catch (java.lang.IllegalArgumentException e) { throw new java.lang.IllegalStateException((""Cannot configure "" + (f.getName()))); } catch (java.lang.IllegalAccessException e) { throw new java.lang.IllegalStateException((""Cannot configure "" + (f.getName()))); } catch (java.lang.NoSuchFieldException e) { throw new java.lang.IllegalStateException((""Cannot configure "" + (f.getName()))); } catch (java.lang.SecurityException e) { throw new java.lang.IllegalStateException((""Cannot configure "" + (f.getName()))); } } } }",0695db32603fc9fc80280580bc15153d6b287e78,init(),155110,407,503
141434,java_com_google_gerrit_server_group_db_GroupNameNotes.java,12.0,"@java.lang.SuppressWarnings(""deprecation"") private static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",d239c501636eef747f5e95d2a3f5138399412f64,"@java.lang.SuppressWarnings(""deprecation"") static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",731618740a8259df9a12889ee4960d760b39c018,getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),5,13,"@java.lang.SuppressWarnings(""deprecation"") @com.google.common.annotations.VisibleForTesting static org.eclipse.jgit.lib.ObjectId getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup.NameKey groupName) { return org.eclipse.jgit.lib.ObjectId.fromRaw(com.google.common.hash.Hashing.sha1().hashString(groupName.get(), java.nio.charset.StandardCharsets.UTF_8).asBytes()); }",a801629f362251ae13bfe084b49a99d16f22d565,getNoteKey(com.google.gerrit.reviewdb.client.AccountGroup$NameKey),56365,96,107
62827,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_ProjectListPopup.java,3.0,"public void displayPopup() { poppingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); try { com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); } catch (java.lang.Throwable e) { } projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); filterTxt.setFocus(true); poppingUp = false; } }",bb9a426a609f54fd31d8e7dc7bb2b7c12e89916d,"public void displayPopup() { poppingUp = true; if (firstPopupLoad) { query = new com.google.gerrit.client.ui.ProjectListPopup.Query("""").run(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); try { com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); } catch (java.lang.Throwable e) { } projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); filterTxt.setFocus(true); poppingUp = false; } }",61a02e7f2ed36c72b43ce977f83b7eb858f95c28,displayPopup(),displayPopup(),3,3,"public void displayPopup() { poppingUp = true; if (firstPopupLoad) { match = """"; query = new com.google.gerrit.client.ui.ProjectListPopup.Query(match).run(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); try { com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); } catch (java.lang.Throwable e) { } projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); filterTxt.setFocus(true); poppingUp = false; } }",f5ad5f5a10e12cd813b8e0512b0cc4c9d8db1ee4,displayPopup(),59507,179,183
88095,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,7.0,"public void removeApproval(java.lang.String label) { removeApprovalFor(getAccountId(), label); }",de120fff719292cc25b13cff512aa26b6fa54793,"public void removeApproval(java.lang.String label) { removeApprovalFor(getEffectiveAccountId(), label); }",0234254d32d9c7dabcb3f0962f6899185410406a,removeApproval(java.lang.String),removeApproval(java.lang.String),11,6,"public void removeApproval(java.lang.String label) { removeApprovalFor(getAccountId(), label); }",de120fff719292cc25b13cff512aa26b6fa54793,removeApproval(java.lang.String),81328,23,22
61711,src_test_java_com_google_gwtorm_nosql_IndexFunctionTest.java,5.0,"@org.junit.Test public void testPersonByNameAge() throws java.lang.Exception { com.google.gwtorm.nosql.IndexFunction<com.google.gwtorm.data.Person> idx = index(""nameAge"", ""WHERE name=? AND age=?""); org.junit.Assert.assertEquals(""nameAge"", idx.getName()); com.google.gwtorm.nosql.IndexKeyBuilder b; com.google.gwtorm.data.Person p; b = new com.google.gwtorm.nosql.IndexKeyBuilder(); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""hm""), 42); assertTrue(idx.includes(p)); idx.encode(b, p); com.google.gwtorm.nosql.IndexFunctionTest.assertEqualToBuilderResult(new byte[]{ 'h', 'm', 0, 1, 1, 42 }, b); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(null), 0); assertFalse(idx.includes(p)); b = new com.google.gwtorm.nosql.IndexKeyBuilder(); assertFalse(idx.includes(p)); }",9259bf77da84f2ede40cfa1e900274027afc4aae,"@org.junit.Test public void testPersonByNameAge() throws java.lang.Exception { com.google.gwtorm.nosql.IndexFunction<com.google.gwtorm.data.Person> idx = index(""nameAge"", ""WHERE name=? AND age=?""); org.junit.Assert.assertEquals(""nameAge"", idx.getName()); com.google.gwtorm.nosql.IndexKeyBuilder b; com.google.gwtorm.data.Person p; b = new com.google.gwtorm.nosql.IndexKeyBuilder(); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""hm""), 42); assertTrue(idx.includes(p)); idx.encode(b, p); com.google.gwtorm.nosql.IndexFunctionTest.assertEqualToBuilderResult(new byte[]{ 'h', 'm', 0, 1, 1, 42 }, b); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(null), 0); assertFalse(idx.includes(p)); new com.google.gwtorm.nosql.IndexKeyBuilder(); assertFalse(idx.includes(p)); }",d692cf14cc87b2b8fe7e48fd6aae0636194bdc6f,testPersonByNameAge(),testPersonByNameAge(),2,5,"@org.junit.Test public void testPersonByNameAge() throws java.lang.Exception { com.google.gwtorm.nosql.IndexFunction<com.google.gwtorm.data.Person> idx = index(""nameAge"", ""WHERE name=? AND age=?""); org.junit.Assert.assertEquals(""nameAge"", idx.getName()); com.google.gwtorm.nosql.IndexKeyBuilder b; com.google.gwtorm.data.Person p; b = new com.google.gwtorm.nosql.IndexKeyBuilder(); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""hm""), 42); assertTrue(idx.includes(p)); idx.encode(b, p); com.google.gwtorm.nosql.IndexFunctionTest.assertEqualToBuilderResult(new byte[]{ 'h', 'm', 0, 1, 1, 42 }, b); p = new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(null), 0); assertFalse(idx.includes(p)); }",f9047af3d0e32bf21acba3ac182143d96b5d90aa,testPersonByNameAge(),126428,271,247
59267,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NotesMigration.java,3.0,"public static com.google.gerrit.server.notedb.NotesMigration allEnabled() { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setBoolean(""notedb"", null, ""write"", true); cfg.setBoolean(""notedb"", ""patchSetApprovals"", ""read"", true); cfg.setBoolean(""notedb"", ""changeMessages"", ""read"", true); cfg.setBoolean(""notedb"", ""comments"", ""read"", true); return new com.google.gerrit.server.notedb.NotesMigration(cfg); }",29e98d35527e4fd04ff3b688a7f25009ab646ef1,"public static com.google.gerrit.server.notedb.NotesMigration allEnabled() { org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { cfg.setBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t.name().toLowerCase(), com.google.gerrit.server.notedb.NotesMigration.WRITE, true); cfg.setBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t.name().toLowerCase(), com.google.gerrit.server.notedb.NotesMigration.READ, true); } return new com.google.gerrit.server.notedb.NotesMigration(cfg); }",79a3630601a686ef4b2c82f01fde257c132a8e42,allEnabled(),allEnabled(),4,4,public static com.google.gerrit.server.notedb.NotesMigration allEnabled() { return new com.google.gerrit.server.notedb.NotesMigration(com.google.gerrit.server.notedb.NotesMigration.allEnabledConfig()); },f9d485f3a72f2c3c240d9199d55288270e44906e,allEnabled(),132121,205,57
47307,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeIndexerImpl.java,0.0,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { context.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } @java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException(""No user during ChangeIndexer""); } }); index.replace(new com.google.gerrit.server.query.change.ChangeData(change)); return null; } finally { context.setContext(null); db.close(); } } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(java.lang.String.format(""Failed to index change %d in %s"", change.getChangeId(), change.getProject().get()), e); throw e; } }",93f3fadda570d30517f5e16ae84b5ac6ea4bb362,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { context.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } @java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException(""No user during ChangeIndexer""); } }); index.replace(cd); return null; } finally { context.setContext(null); db.close(); } } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(java.lang.String.format(""Failed to index change %d in %s"", cd.getId(), cd.getChange().getProject().get()), e); throw e; } }",259f9569caa0b964b79a5e45ec94959d8f507704,call(),call(),9,0,"@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { context.setContext(new com.google.gerrit.server.util.RequestContext() { @java.lang.Override public com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> getReviewDbProvider() { return com.google.inject.util.Providers.of(db); } @java.lang.Override public com.google.gerrit.server.CurrentUser getCurrentUser() { throw new com.google.inject.OutOfScopeException(""No user during ChangeIndexer""); } }); index.replace(cd); return null; } finally { context.setContext(null); db.close(); } } catch (java.lang.Exception e) { com.google.gerrit.server.index.ChangeIndexerImpl.log.error(java.lang.String.format(""Failed to index change %d in %s"", cd.getId().get(), cd.getChange().getProject().get()), e); throw e; } }",0f4ba7632a076ca28d127f18e8a802a6269005e1,call(),38395,253,255
57829,src_main_java_com_googlesource_gerrit_plugins_quota_Publisher.java,2.0,"@java.lang.Override public void run() { if (!(listeners.iterator().hasNext())) { return; } try { com.googlesource.gerrit.plugins.quota.Publisher.RepoSizeEvent event = createEvent(); for (com.google.gerrit.extensions.events.UsageDataPublishedListener l : listeners) { try { l.onUsageDataPublished(event); } catch (java.lang.RuntimeException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Failure in UsageDataPublishedListener"", e); } } } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Error accessing repoSizeCache"", e); } }",4b40ad0a5eb4175a7cc25a6aab3ff12625864699,"@java.lang.Override public void run() { if (!(listeners.iterator().hasNext())) { return; } try { com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent repoSizeEvent = createRepoSizeEvent(); com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent pushCountEvent = createPushCountEvent(); com.googlesource.gerrit.plugins.quota.Publisher.RepoEvent fetchCountEvent = createFetchCountEvent(); for (com.google.gerrit.extensions.events.UsageDataPublishedListener l : listeners) { try { l.onUsageDataPublished(repoSizeEvent); l.onUsageDataPublished(pushCountEvent); l.onUsageDataPublished(fetchCountEvent); } catch (java.lang.RuntimeException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Failure in UsageDataPublishedListener"", e); } } } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Error accessing repoSizeCache"", e); } }",8b75a9d71ddb01a2a29ba8a9ad484fbf68d3b75c,run(),run(),20,4,"@java.lang.Override public void run() { if (!(listeners.iterator().hasNext())) { return; } try { com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent repoSizeEvent = createRepoSizeEvent(); com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent pushCountEvent = createEvent(com.googlesource.gerrit.plugins.quota.Publisher.PUSH_COUNT, numberOfPushesCache); com.googlesource.gerrit.plugins.quota.Publisher.UsageDataEvent fetchCountEvent = createEvent(com.googlesource.gerrit.plugins.quota.Publisher.FETCH_COUNT, numberOfFetchesCache); for (com.google.gerrit.extensions.events.UsageDataPublishedListener l : listeners) { try { l.onUsageDataPublished(repoSizeEvent); l.onUsageDataPublished(pushCountEvent); l.onUsageDataPublished(fetchCountEvent); } catch (java.lang.RuntimeException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Failure in UsageDataPublishedListener"", e); } } } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.quota.Publisher.log.warn(""Error creating RepoSizeEvent"", e); } }",8e61ea52bb8ea0e7d43909718ddb55e774b2ee7d,run(),50552,245,293
39402,gerrit-httpd_src_main_java_com_google_gerrit_httpd_CacheBasedWebSession.java,10.0,"public void setUserAccountId(com.google.gerrit.reviewdb.client.Account.Id id) { key = new com.google.gerrit.httpd.WebSessionManager.Key((""id:"" + id)); val = new com.google.gerrit.httpd.WebSessionManager.Val(id, 0, false, null, 0); }",803ff1bc4b5dd3655bd70abfe1998c9f042e2558,"@java.lang.Override public void setUserAccountId(com.google.gerrit.reviewdb.client.Account.Id id) { key = new com.google.gerrit.httpd.WebSessionManager.Key((""id:"" + id)); val = new com.google.gerrit.httpd.WebSessionManager.Val(id, 0, false, null, 0); }",0b9a70cf5975e2afb6c3b108410e001b4fb9a5f4,setUserAccountId(com.google.gerrit.reviewdb.client.Account$Id),setUserAccountId(com.google.gerrit.reviewdb.client.Account$Id),4,12,"@java.lang.Override public void setUserAccountId(com.google.gerrit.reviewdb.client.Account.Id id) { key = new com.google.gerrit.httpd.WebSessionManager.Key((""id:"" + id)); val = new com.google.gerrit.httpd.WebSessionManager.Val(id, 0, false, null, 0, null); }",3043817dbc09dfd3ea2e0ccfae93c608f5640722,setUserAccountId(com.google.gerrit.reviewdb.client.Account$Id),173423,83,85
70891,gerrit-gpg_src_main_java_com_google_gerrit_gpg_server_GpgKeys.java,3.0,"static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } return info; }",bd96c10cec47da038493fb612bb27bd24264c884,"static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing, com.google.gerrit.gpg.PublicKeyChecker checker, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } com.google.gerrit.gpg.CheckResult checkResult = checker.check(key, store); info.status = checkResult.getStatus(); if (!(checkResult.getProblems().isEmpty())) { info.problems = checkResult.getProblems(); } return info; }",1b7fc05fe09d8943feea73ab98ddeb867e507d87,toJson(org.bouncycastle.openpgp.PGPPublicKeyRing),"toJson(org.bouncycastle.openpgp.PGPPublicKeyRing,com.google.gerrit.gpg.PublicKeyChecker,com.google.gerrit.gpg.PublicKeyStore)",10,8,"static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKeyRing keyRing, com.google.gerrit.gpg.PublicKeyChecker checker, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings(""unchecked"") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } com.google.gerrit.gpg.CheckResult checkResult = checker.check(key, store); info.status = checkResult.getStatus(); info.problems = checkResult.getProblems(); return info; }",0561b11f08a86f86eea7b7377a6cae922b1586db,"toJson(org.bouncycastle.openpgp.PGPPublicKeyRing,com.google.gerrit.gpg.PublicKeyChecker,com.google.gerrit.gpg.PublicKeyStore)",110201,358,345
61602,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_EditPreferences.java,,,,public final void copyTo(com.google.gerrit.extensions.common.EditPreferencesInfo p) { p.tabSize = tabSize(); p.lineLength = lineLength(); p.lineWrapping = lineWrapping(); p.showTabs = showTabs(); p.showTrailingSpace = showTrailingSpace(); p.syntaxHighlighting = syntaxHighlighting(); p.hideLineNumbers = hideLineNumbers(); p.keyMap = keyMap(); p.theme = theme(); },b4a95d437f84939847d1639f4044629dd798eb25,,copyTo(com.google.gerrit.extensions.common.EditPreferencesInfo),28,1,public final void copyTo(com.google.gerrit.extensions.client.EditPreferencesInfo p) { p.tabSize = tabSize(); p.lineLength = lineLength(); p.hideTopMenu = hideTopMenu(); p.showTabs = showTabs(); p.showWhitespaceErrors = showWhitespaceErrors(); p.syntaxHighlighting = syntaxHighlighting(); p.hideLineNumbers = hideLineNumbers(); p.theme = theme(); },eda04c3f572bcb158eadea93ad2e7000ef4c5163,copyTo(com.google.gerrit.extensions.client.EditPreferencesInfo),109215,100,94
93409,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,1.0,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = com.google.gerrit.server.account.AccountManager.id(who); com.google.gerrit.reviewdb.client.AccountExternalId extId = getAccountExternalId(key); if (extId != null) { if (!(extId.getAccountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { extId = com.google.gerrit.server.account.AccountManager.createId(to, who); extId.setEmailAddress(who.getEmailAddress()); db.accountExternalIds().insert(java.util.Collections.singleton(extId)); externalIdCache.onCreate(extId); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, key, false); } }",add22f2f65800920688068db88ff21137a1fbf8e,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = getAccountExternalId(who.getExternalId()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdate.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalId(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalId(), false); } }",f38d3ab0be71cedd74b577eb36641517d432fdd7,"link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)","link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",27,1,"public com.google.gerrit.server.account.AuthResult link(com.google.gerrit.reviewdb.client.Account.Id to, com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.ExternalId extId = findExternalId(who.getExternalIdKey()); if (extId != null) { if (!(extId.accountId().equals(to))) { throw new com.google.gerrit.server.account.AccountException(""Identity in use by another account""); } update(db, who, extId); } else { externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(who.getExternalIdKey(), to, who.getEmailAddress())); if ((who.getEmailAddress()) != null) { com.google.gerrit.reviewdb.client.Account a = db.accounts().get(to); if ((a.getPreferredEmail()) == null) { a.setPreferredEmail(who.getEmailAddress()); db.accounts().update(java.util.Collections.singleton(a)); } } if ((who.getEmailAddress()) != null) { byEmailCache.evict(who.getEmailAddress()); } byIdCache.evict(to); } return new com.google.gerrit.server.account.AuthResult(to, who.getExternalIdKey(), false); } }",f6a59d5a7b4f8327d8ee33c79ead43482369fdd5,"link(com.google.gerrit.reviewdb.client.Account$Id,com.google.gerrit.server.account.AuthRequest)",179477,379,382
19439,gerrit-server_src_main_java_com_google_gerrit_server_git_LocalDiskRepositoryManager.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.SortedSet<com.google.gerrit.reviewdb.Project.NameKey> scanProjects() { java.util.SortedSet<com.google.gerrit.reviewdb.Project.NameKey> names = new java.util.TreeSet<com.google.gerrit.reviewdb.Project.NameKey>(); scanProjects(basePath, """", names); return java.util.Collections.unmodifiableSortedSet(names); }",8cca625f84a95fabed4c371dfecba46709ad5df4,,scanProjects(),10,1,"private void scanProjects(final java.io.File dir, final java.lang.String prefix, final java.util.SortedSet<com.google.gerrit.reviewdb.Project.NameKey> names) { final java.io.File[] ls = dir.listFiles(); if (ls == null) { return; } for (java.io.File f : ls) { java.lang.String fileName = f.getName(); if (org.eclipse.jgit.lib.RepositoryCache.FileKey.isGitRepository(f, FS.DETECTED)) { java.lang.String projectName; if (fileName.equals(Constants.DOT_GIT)) { projectName = prefix.substring(0, ((prefix.length()) - 1)); } else if (fileName.endsWith(Constants.DOT_GIT_EXT)) { int newLen = (fileName.length()) - (Constants.DOT_GIT_EXT.length()); projectName = prefix + (fileName.substring(0, newLen)); } else { projectName = prefix + fileName; } com.google.gerrit.reviewdb.Project.NameKey nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); if (isUnreasonableName(nameKey)) { com.google.gerrit.server.git.LocalDiskRepositoryManager.log.warn((""Ignoring unreasonably named repository "" + (f.getAbsolutePath()))); } else { names.add(nameKey); } } else if (f.isDirectory()) { scanProjects(f, ((prefix + (f.getName())) + ""/""), names); } } }",a1c960a97e28970abffb0490612368f0fd4da42d,"scanProjects(java.io.File,java.lang.String,java.util.SortedSet)",183899,95,346
84191,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_CorsIT.java,,,,"@org.junit.Test public void preflightBadMethod() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); for (java.lang.String method : new java.lang.String[]{ ""POST"", ""PUT"", ""DELETE"", ""PATCH"" }) { org.apache.http.client.fluent.Request req = org.apache.http.client.fluent.Request.Options(((((adminRestSession.url()) + ""/a/changes/"") + (change.getChangeId())) + ""/detail"")); req.addHeader(HttpHeaders.ORIGIN, ""http://example.com""); req.addHeader(HttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, method); adminRestSession.execute(req).assertBadRequest(); } }",da7cdbe6edbee6c80c46e325f0cdd4463a75f15e,,preflightBadMethod(),2,6,"@org.junit.Test public void preflightBadMethod() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); for (java.lang.String method : new java.lang.String[]{ ""POST"", ""PUT"", ""DELETE"", ""PATCH"" }) { org.apache.http.client.fluent.Request req = org.apache.http.client.fluent.Request.Options(((((adminRestSession.url()) + ""/a/changes/"") + (change.getChangeId())) + ""/detail"")); req.addHeader(com.google.gerrit.acceptance.rest.change.ORIGIN, ""http://example.com""); req.addHeader(com.google.gerrit.acceptance.rest.change.ACCESS_CONTROL_REQUEST_METHOD, method); adminRestSession.execute(req).assertBadRequest(); } }",9188d7af6e94867ea6b36b23dc7e1680a83c01dd,preflightBadMethod(),85322,171,195
148032,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,3.0,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""group '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",ff6372a7bd25f94a42b7425ca7605891c0a74871,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""account '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",2f56cc3bef48cdefbb4326d7ebadb44bf577a748,createDuplicateInternalGroupCaseSensitiveName_Conflict(),createDuplicateInternalGroupCaseSensitiveName_Conflict(),17,3,"@org.junit.Test public void createDuplicateInternalGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String dupGroupName = name(""dupGroup""); gApi.groups().create(dupGroupName); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(((""group '"" + dupGroupName) + ""' already exists"")); gApi.groups().create(dupGroupName); }",ff6372a7bd25f94a42b7425ca7605891c0a74871,createDuplicateInternalGroupCaseSensitiveName_Conflict(),217371,99,99
68604,gerrit-server_src_main_java_com_google_gerrit_server_schema_SchemaVersionCheck.java,3.0,"@java.lang.Override public void start() { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion currentVer = getSchemaVersion(db); final int expectedVer = com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion(); if (currentVer == null) { throw new com.google.inject.ProvisionException(((""Schema not yet initialized."" + ("" Run init to initialize the schema:\n"" + ""$ java -jar gerrit.war init -d "")) + (site.site_path.toAbsolutePath()))); } if ((currentVer.versionNbr) < expectedVer) { throw new com.google.inject.ProvisionException(((((((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Run init to upgrade:\n"") + ""$ java -jar "") + (site.gerrit_war.toAbsolutePath())) + "" init -d "") + (site.site_path.toAbsolutePath()))); } else if ((currentVer.versionNbr) > expectedVer) { throw new com.google.inject.ProvisionException(((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Downgrade is not supported."")); } } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.inject.ProvisionException(""Cannot read schema_version"", e); } }",22f98851782bb7b2695119eece6fc81d72a73421,"@java.lang.Override public void start() { try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion currentVer = getSchemaVersion(db); final int expectedVer = com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion(); if (currentVer == null) { throw new com.google.inject.ProvisionException(((""Schema not yet initialized."" + ("" Run init to initialize the schema:\n"" + ""$ java -jar gerrit.war init -d "")) + (site.site_path.toAbsolutePath()))); } if ((currentVer.versionNbr) < expectedVer) { throw new com.google.inject.ProvisionException(((((((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Run init to upgrade:\n"") + ""$ java -jar "") + (site.gerrit_war.toAbsolutePath())) + "" init -d "") + (site.site_path.toAbsolutePath()))); } else if ((currentVer.versionNbr) > expectedVer) { throw new com.google.inject.ProvisionException(((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Downgrade is not supported."")); } } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.inject.ProvisionException(""Cannot read schema_version"", e); } }",823c74d8e3e74fd63ffd3c7e443df4e50a01296b,start(),start(),5,3,"@java.lang.Override public void start() { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { final com.google.gerrit.reviewdb.client.CurrentSchemaVersion currentVer = getSchemaVersion(db); final int expectedVer = com.google.gerrit.server.schema.SchemaVersion.getBinaryVersion(); if (currentVer == null) { throw new com.google.inject.ProvisionException(((""Schema not yet initialized."" + ("" Run init to initialize the schema:\n"" + ""$ java -jar gerrit.war init -d "")) + (site.site_path.toAbsolutePath()))); } if ((currentVer.versionNbr) < expectedVer) { throw new com.google.inject.ProvisionException(((((((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Run init to upgrade:\n"") + ""$ java -jar "") + (site.gerrit_war.toAbsolutePath())) + "" init -d "") + (site.site_path.toAbsolutePath()))); } else if ((currentVer.versionNbr) > expectedVer) { throw new com.google.inject.ProvisionException(((((""Unsupported schema version "" + (currentVer.versionNbr)) + ""; expected schema version "") + expectedVer) + "". Downgrade is not supported."")); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.inject.ProvisionException(""Cannot read schema_version"", e); } }",3a6a7de9dbdd416e318521104f1233406860c7dc,start(),114299,361,358
85291,gerrit-server_src_main_java_com_google_gerrit_server_mail_OutgoingEmail.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"protected java.lang.String soyHtmlTemplate(java.lang.String name) { return args.soyTofu.newRenderer((""com.google.gerrit.server.mail.template."" + name)).setContentKind(SanitizedContent.ContentKind.HTML).setData(soyContext).render(); }",bfeb7a0ab70323473acd6523b939d5f078b8653b,,soyHtmlTemplate(java.lang.String),10,30,"protected java.lang.String soyHtmlTemplate(java.lang.String name) { return soyTemplate(name, SanitizedContent.ContentKind.HTML); }",1db8d41228e51507866a7dd66ab60091a8167f5d,soyHtmlTemplate(java.lang.String),72053,68,35
98433,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangesImpl.java,3.0,"@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi create(com.google.gerrit.extensions.common.ChangeInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.ChangeInfo out = createChange.apply(TopLevelResource.INSTANCE, in).value(); return api.create(changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(out._number))); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create change"", e); } }",bd8ef8914e2b01243eb2c91d4fe4653371b5b211,"@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi create(com.google.gerrit.extensions.common.ChangeInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.ChangeInfo out = createChange.apply(TopLevelResource.INSTANCE, in).value(); return api.create(changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(out._number))); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gerrit.server.git.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create change"", e); } }",ebbe6be5b90a9c4aac42b7d3e13770feaa35c642,create(com.google.gerrit.extensions.common.ChangeInput),create(com.google.gerrit.extensions.common.ChangeInput),7,3,"@java.lang.Override public com.google.gerrit.extensions.api.changes.ChangeApi create(com.google.gerrit.extensions.common.ChangeInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.common.ChangeInfo out = createChange.apply(TopLevelResource.INSTANCE, in).value(); return api.create(changes.parse(new com.google.gerrit.reviewdb.client.Change.Id(out._number))); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot create change"", e); } }",b367a294bb42dd88bbe792fdf0ab0a0602542b0f,create(com.google.gerrit.extensions.common.ChangeInput),91574,214,214
106139,src_main_java_com_ericsson_gerrit_plugins_highavailability_peers_PeerInfoModule.java,0.0,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.PluginConfigPeerInfoProvider.class); },aea730ac7e5fe6ff11cfe9435b1e932b480862a6,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.JGroupsPeerInfoProvider.class); listener().to(com.ericsson.gerrit.plugins.highavailability.peers.JGroupsPeerInfoProvider.class); },a8378bc34f172caf79e772b5a964546778a86751,configure(),configure(),25,0,@java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo>>() {}).toProvider(com.ericsson.gerrit.plugins.highavailability.peers.PeerInfoProvider.class); if ((strategy) == (Configuration.PeerInfoStrategy.JGROUPS)) { listener().to(com.ericsson.gerrit.plugins.highavailability.peers.jgroups.JGroupsPeerInfoProvider.class); } },3edf6433525305ebae10170ffe7022f62145f5b9,configure(),5413,112,131
84252,gerrit-server_src_main_java_com_google_gerrit_server_account_GetExternalIds.java,,,,"@java.lang.Override public java.util.List<com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.IdentifiedUser user = resource.getUser(); if ((self.get()) != user) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get external IDs""); } try { java.util.List<com.google.gerrit.reviewdb.client.AccountExternalId> ids = db.get().accountExternalIds().byAccount(user.getAccountId()).toList(); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo info = new com.google.gerrit.server.account.GetExternalIds.ExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = authConfig.isIdentityTrustable(java.util.Collections.singleton(id)); if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { info.canDelete = false; } else { info.canDelete = false; } result.add(info); } return result; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot get external IDs"", e); } }",bf2e62ff002aa8ce7a53b03bc8db4f5500889173,,apply(com.google.gerrit.server.account.AccountResource),8,0,"@java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> apply(com.google.gerrit.server.account.AccountResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { if ((self.get()) != (resource.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to get external IDs""); } java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids = externalIdCache.byAccount(resource.getUser().getAccountId()); if (ids.isEmpty()) { return com.google.common.collect.ImmutableList.of(); } java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> result = com.google.common.collect.Lists.newArrayListWithCapacity(ids.size()); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.getExternalId(); info.emailAddress = id.getEmailAddress(); info.trusted = authConfig.isIdentityTrustable(java.util.Collections.singleton(id)); if (id.isScheme(com.google.gerrit.server.account.SCHEME_USERNAME)) { info.canDelete = false; } else { com.google.gerrit.server.CurrentUser.PropertyKey<com.google.gerrit.reviewdb.client.AccountExternalId.Key> k = CurrentUser.PropertyKey.create(); com.google.gerrit.reviewdb.client.AccountExternalId.Key last = resource.getUser().get(k); info.canDelete = (last != null) && (!(last.get().equals(info.identity))); } result.add(info); } return result; }",691d946a310d96a5f46502ce9905aa76a6909866,apply(com.google.gerrit.server.account.AccountResource),157957,430,437
116091,gerrit-server_src_main_java_com_google_gerrit_server_group_IncludedGroupsCollection.java,1.0,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return (dbProvider.get().accountGroupById().get(new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parent.getId(), member.getGroupUUID()))) != null; }",841cc6ac95f98961c34eacb84e7edc42c4da3e60,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return groups.isMember(dbProvider.get(), parent.getId(), member.getGroupUUID()); }",ca72bcf299a520631ae5aadfddfd1a85e2406581,"isMember(com.google.gerrit.reviewdb.client.AccountGroup,com.google.gerrit.common.data.GroupDescription$Basic)","isMember(com.google.gerrit.reviewdb.client.AccountGroup,com.google.gerrit.common.data.GroupDescription$Basic)",7,1,"private boolean isMember(com.google.gerrit.reviewdb.client.AccountGroup parent, com.google.gerrit.common.data.GroupDescription.Basic member) throws com.google.gwtorm.server.OrmException { return groups.isIncluded(dbProvider.get(), parent.getId(), member.getGroupUUID()); }",6f4636dd413da2b8570d2c0525880bd02cf98db7,"isMember(com.google.gerrit.reviewdb.client.AccountGroup,com.google.gerrit.common.data.GroupDescription$Basic)",51498,74,74
48254,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_group_SystemGroupsIT.java,1.0,"@org.junit.Test public void systemGroupsCreated_rest() throws java.io.IOException { com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession(server, admin); com.google.gerrit.acceptance.RestResponse r = session.get(""/groups/""); com.google.gson.Gson gson = new com.google.gson.Gson(); java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo> result = gson.fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo>>() {}.getType()); java.util.Set<java.lang.String> names = result.keySet(); assertTrue(names.contains(""Administrators"")); assertTrue(names.contains(""Anonymous Users"")); assertTrue(names.contains(""Non-Interactive Users"")); assertTrue(names.contains(""Project Owners"")); assertTrue(names.contains(""Registered Users"")); }",a498b5afe99b276a2f8eb0618e0a586474673f1a,"@org.junit.Test public void systemGroupsCreated_rest() throws java.io.IOException { com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession(server, admin); com.google.gerrit.acceptance.RestResponse r = session.get(""/groups/""); com.google.gson.Gson gson = new com.google.gson.Gson(); java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo> result = gson.fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo>>() {}.getType()); java.util.Set<java.lang.String> names = result.keySet(); assertTrue(names.contains(""Administrators"")); assertTrue(names.contains(""Anonymous Users"")); assertTrue(names.contains(""Change Owners"")); assertTrue(names.contains(""Non-Interactive Users"")); assertTrue(names.contains(""Project Owners"")); assertTrue(names.contains(""Registered Users"")); }",8cf45a702a975812ed0171c2bf6b8fac63f38f1d,systemGroupsCreated_rest(),systemGroupsCreated_rest(),30,1,"@org.junit.Test public void systemGroupsCreated_rest() throws java.io.IOException { com.google.gerrit.acceptance.RestSession session = new com.google.gerrit.acceptance.RestSession(server, admin); com.google.gerrit.acceptance.RestResponse r = session.get(""/groups/""); com.google.gson.Gson gson = new com.google.gson.Gson(); java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo> result = gson.fromJson(r.getReader(), new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.acceptance.rest.group.GroupInfo>>() {}.getType()); java.util.Set<java.lang.String> names = result.keySet(); assertTrue(names.contains(""Administrators"")); assertTrue(names.contains(""Anonymous Users"")); assertTrue(names.contains(""Change Owner"")); assertTrue(names.contains(""Non-Interactive Users"")); assertTrue(names.contains(""Project Owners"")); assertTrue(names.contains(""Registered Users"")); }",978a747bd0ab2ab6007ba110b90541a0824a60d5,systemGroupsCreated_rest(),134419,258,257
138780,javatests_com_google_gerrit_acceptance_api_group_GroupsIT.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = ""user.writeGroupsToNoteDb"", value = ""true"") public void createGroupWithWriteToNoteDb() throws java.lang.Exception { testCreateGroup(true); }",6e116476a64d2c37a220af87b811dd2d7f0a7b2a,,createGroupWithWriteToNoteDb(),6,61,"@java.lang.SuppressWarnings(""deprecation"") @org.junit.Test public void createGroupWithProperties() throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name(""newGroup""); in.description = ""Test description""; in.visibleToAll = true; in.ownerId = getFromCache(""Administrators"").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); if (groupsInNoteDb()) { assertGroupOwnerPermissions(g.id, in.ownerId); } }",1ddc1669790fd02973a10513eff1b1541e46c4a0,createGroupWithProperties(),12324,62,198
108230,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private com.google.gerrit.extensions.api.changes.NotifyHandling defaultNotify(com.google.gerrit.server.project.ChangeControl control) { return control.getNotes().hasReviewStarted() ? com.google.gerrit.extensions.api.changes.NotifyHandling.ALL : com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER; },ed12020a10db55fe90f84b525ec55090ddf32394,,defaultNotify(com.google.gerrit.server.project.ChangeControl),20,5,private com.google.gerrit.extensions.api.changes.NotifyHandling defaultNotify(com.google.gerrit.server.project.ChangeControl control) { return control.getChange().hasReviewStarted() ? com.google.gerrit.extensions.api.changes.NotifyHandling.ALL : com.google.gerrit.extensions.api.changes.NotifyHandling.OWNER; },f42192d66c746606f8227cf3c7c3559f3db4446e,defaultNotify(com.google.gerrit.server.project.ChangeControl),114650,87,87
77763,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_AbstractSubmit.java,2.0,@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(createEmptyCommit = false) public void submitToEmptyRepo() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertThat(getRemoteHead().getId()).isEqualTo(change.getCommitId()); },da4cf6f7913fbdf7990e7c418fac7b5e3a8cb498,@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(createEmptyCommit = false) public void submitToEmptyRepo() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertThat(getRemoteHead().getId()).isEqualTo(change.getCommit()); },a8610d57ae0b05d0652d8c6f64405b9cecc6417f,submitToEmptyRepo(),submitToEmptyRepo(),6,2,@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(createEmptyCommit = false) public void submitToEmptyRepo() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); assertThat(getRemoteHead().getId()).isEqualTo(change.getCommitId()); },da4cf6f7913fbdf7990e7c418fac7b5e3a8cb498,submitToEmptyRepo(),38178,85,86
126430,gerrit-sshd_src_main_java_com_google_gerrit_sshd_ChangeArgumentParser.java,1.0,"private java.util.List<com.google.gerrit.server.project.ChangeControl> changeFromNotesFactory(java.lang.String id, com.google.gerrit.server.CurrentUser currentUser) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().map(( changeNote) -> controlForChange(changeNote, currentUser)).filter(( changeControl) -> changeControl.isPresent()).map(( changeControl) -> changeControl.get()).collect(java.util.stream.Collectors.toList()); }",2b14c2a89e2daf0d440e2efef130682bbdf877f0,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changeFromNotesFactory(java.lang.String id) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)).stream().collect(java.util.stream.Collectors.toList()); }",67df59efda4dd698f0425d8966d327c9cde6ee8b,"changeFromNotesFactory(java.lang.String,com.google.gerrit.server.CurrentUser)",changeFromNotesFactory(java.lang.String),5,1,"private java.util.List<com.google.gerrit.server.notedb.ChangeNotes> changeFromNotesFactory(java.lang.String id) throws com.google.gerrit.sshd.BaseCommand.UnloggedFailure, com.google.gwtorm.server.OrmException { return changeNotesFactory.create(db, parseId(id)); }",51d8a6cef032259944535eac432f821a17ac58c0,changeFromNotesFactory(java.lang.String),40559,95,80
21950,gerrit-reviewdb_src_main_java_com_google_gerrit_reviewdb_ReviewDb.java,32.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountGroupIncludedGroupAccess accountGroupIncludedGroups();,cdafe231ab8f96ede02fbbd3ee7c2d9d5191ca45,,accountGroupIncludedGroups(),9,13,@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountGroupIncludeAccess accountGroupIncludes();,8953a8386e338d1dcf3af42fc19a2e654e85cbe4,accountGroupIncludes(),189826,32,30
75816,gerrit-server_src_main_java_com_google_gerrit_server_index_account_AccountField.java,,,,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.gerrit.server.index.SchemaUtil.getPersonParts(input.getAccount().getFullName(), com.google.common.collect.Iterables.transform(input.getExternalIds(), new Function<com.google.gerrit.reviewdb.client.AccountExternalId, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountExternalId in) { return in.getEmailAddress(); } })); }",1150d75552ca7efeffaea340a55627f323a16c5f,,"get(com.google.gerrit.server.account.AccountState,com.google.gerrit.server.index.account.FillArgs)",6,5,"@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { java.lang.String fullName = input.getAccount().getFullName(); Set<java.lang.String> parts = com.google.gerrit.server.index.SchemaUtil.getPersonParts(fullName, com.google.common.collect.Iterables.transform(input.getExternalIds(), new Function<com.google.gerrit.reviewdb.client.AccountExternalId, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.reviewdb.client.AccountExternalId in) { return in.getEmailAddress(); } })); if (fullName != null) { parts.add(fullName); } return parts; }",1ef672a75e4165097ed4736095ad4a62f6100794,"get(com.google.gerrit.server.account.AccountState,com.google.gerrit.server.index.account.FillArgs)",36489,162,197
20019,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_48.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private int inheritedMax(com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.schema.Schema_48.OldRefRight old) { int max = 0; java.lang.String ref = old.ref_pattern; java.lang.String category = old.category; com.google.gerrit.reviewdb.AccountGroup.UUID group = old.group.getUUID(); com.google.gerrit.reviewdb.Project.NameKey project = config.getProject().getParent(); if (project == null) { project = systemConfig.wildProjectName; } do { java.util.List<com.google.gerrit.server.schema.Schema_48.OldRefRight> rights = rightsByProject.get(project); if (rights != null) { for (com.google.gerrit.server.schema.Schema_48.OldRefRight r : rights) { if (((r.ref_pattern.equals(ref)) && (r.group.getUUID().equals(group))) && (r.category.equals(category))) { max = java.lang.Math.max(max, r.max_value); break; } } } project = parentsByProject.get(project); } while (!(project.equals(systemConfig.wildProjectName)) ); return max; }",cd7f4372f6294560666467a243145630198ba14b,,"inheritedMax(com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.server.schema.Schema_48$OldRefRight)",14,6,"private int inheritedMax(com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.schema.Schema_53.OldRefRight old) { int max = 0; java.lang.String ref = old.ref_pattern; java.lang.String category = old.category; com.google.gerrit.reviewdb.AccountGroup.UUID group = old.group.getUUID(); com.google.gerrit.reviewdb.Project.NameKey project = config.getProject().getParent(); if (project == null) { project = systemConfig.wildProjectName; } do { java.util.List<com.google.gerrit.server.schema.Schema_53.OldRefRight> rights = rightsByProject.get(project); if (rights != null) { for (com.google.gerrit.server.schema.Schema_53.OldRefRight r : rights) { if (((r.ref_pattern.equals(ref)) && (r.group.getUUID().equals(group))) && (r.category.equals(category))) { max = java.lang.Math.max(max, r.max_value); break; } } } project = parentsByProject.get(project); } while (!(project.equals(systemConfig.wildProjectName)) ); return max; }",7999cd2961d15fa75f1603f4032132dd48cfba70,"inheritedMax(com.google.gerrit.server.git.ProjectConfig,com.google.gerrit.server.schema.Schema_53$OldRefRight)",10381,295,295
147190,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,3.0,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> values, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupById m : values) { com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid = m.getIncludeUUID(); java.lang.String groupName = groupBackend.get(groupUuid).getName(); com.google.gerrit.reviewdb.client.AccountGroup.Id targetGroupId = m.getGroupId(); java.lang.String targetGroupName = getGroupName(targetGroupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", groupUuid, groupName, targetGroupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",e9df4245dc043ab28915a01dfdf24c44ba5182f3,"private void logOrmExceptionForGroups(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroup.UUID> uuids, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId, com.google.gwtorm.server.OrmException e) { java.util.List<java.lang.String> descriptions = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid : uuids) { java.lang.String groupName = groupBackend.get(uuid).getName(); java.lang.String targetGroupName = getGroupName(groupId); descriptions.add(java.text.MessageFormat.format(""group {0}/{1}, group {2}/{3}"", uuid, groupName, groupId, targetGroupName)); } logOrmException(header, me, descriptions, e); }",54e83095b0ddf02813a737b0c162fac0eb71b1da,"logOrmExceptionForGroups(java.lang.String,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,com.google.gwtorm.server.OrmException)","logOrmExceptionForGroups(java.lang.String,com.google.gerrit.reviewdb.client.Account$Id,java.util.Collection,com.google.gerrit.reviewdb.client.AccountGroup$Id,com.google.gwtorm.server.OrmException)",7,10,"private java.lang.String createErrorMessage(java.lang.String header, com.google.gerrit.reviewdb.client.Account.Id me, com.google.common.collect.ImmutableList<java.lang.String> descriptions) { java.lang.StringBuilder message = new java.lang.StringBuilder(header); message.append("" ""); message.append(me); message.append(""/""); message.append(getUserName(me).orElse(null)); message.append("": ""); message.append(com.google.common.base.Joiner.on(""; "").join(descriptions)); return message.toString(); }",db6662fca68a23af12cec9dba069f828d6bbc601,"createErrorMessage(java.lang.String,com.google.gerrit.reviewdb.client.Account$Id,com.google.common.collect.ImmutableList)",118659,220,134
58944,src_test_java_com_googlesource_gerrit_plugins_replication_GitUpdateProcessingTest.java,3.0,"public void testChangeRefReplicated() throws com.google.gwtorm.server.OrmException, java.net.URISyntaxException { com.google.gerrit.reviewdb.client.Change expectedChange = new com.google.gerrit.reviewdb.client.Change(null, null, null, null, null); reset(changeAccessMock); expect(changeAccessMock.get(anyObject(Change.Id.class))).andReturn(expectedChange); replay(changeAccessMock); reset(changeHooksMock); com.googlesource.gerrit.plugins.replication.RefReplicatedEvent expectedEvent = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent(""someProject"", ""refs/changes/1/1/1"", ""someHost"", com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult.FAILED); changeHooksMock.postEvent(eq(expectedChange), com.googlesource.gerrit.plugins.replication.RefReplicatedEventEquals.eqEvent(expectedEvent), anyObject(com.google.gerrit.reviewdb.server.ReviewDb.class)); expectLastCall().once(); replay(changeHooksMock); gitUpdateProcessing.onRefReplicatedToOneNode(""someProject"", ""refs/changes/1/1/1"", new org.eclipse.jgit.transport.URIish(""git://someHost/someProject.git""), RefPushResult.FAILED); verify(changeHooksMock); }",6ebb569224e0084868db54bd436ed4a545ef6fcc,"public void testChangeRefReplicated() throws com.google.gwtorm.server.OrmException, java.net.URISyntaxException { com.google.gerrit.reviewdb.client.Change expectedChange = new com.google.gerrit.reviewdb.client.Change(null, null, null, null, null); reset(changeAccessMock); expect(changeAccessMock.get(anyObject(Change.Id.class))).andReturn(expectedChange); replay(changeAccessMock); reset(changeHooksMock); com.googlesource.gerrit.plugins.replication.RefReplicatedEvent expectedEvent = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent(""someProject"", ""refs/changes/01/1/1"", ""someHost"", com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult.FAILED); changeHooksMock.postEvent(eq(expectedChange), com.googlesource.gerrit.plugins.replication.RefReplicatedEventEquals.eqEvent(expectedEvent), anyObject(com.google.gerrit.reviewdb.server.ReviewDb.class)); expectLastCall().once(); replay(changeHooksMock); gitUpdateProcessing.onRefReplicatedToOneNode(""someProject"", ""refs/changes/1/1/1"", new org.eclipse.jgit.transport.URIish(""git://someHost/someProject.git""), RefPushResult.FAILED); verify(changeHooksMock); }",2227619292f882b1573cae4ae15da0cbe6a996af,testChangeRefReplicated(),testChangeRefReplicated(),2,3,"public void testChangeRefReplicated() throws com.google.gwtorm.server.OrmException, java.net.URISyntaxException { com.google.gerrit.reviewdb.client.Change expectedChange = new com.google.gerrit.reviewdb.client.Change(null, null, null, null, null); reset(changeAccessMock); expect(changeAccessMock.get(anyObject(Change.Id.class))).andReturn(expectedChange); replay(changeAccessMock); reset(changeHooksMock); com.googlesource.gerrit.plugins.replication.RefReplicatedEvent expectedEvent = new com.googlesource.gerrit.plugins.replication.RefReplicatedEvent(""someProject"", ""refs/changes/01/1/1"", ""someHost"", com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult.FAILED); changeHooksMock.postEvent(eq(expectedChange), com.googlesource.gerrit.plugins.replication.RefReplicatedEventEquals.eqEvent(expectedEvent), anyObject(com.google.gerrit.reviewdb.server.ReviewDb.class)); expectLastCall().once(); replay(changeHooksMock); gitUpdateProcessing.onRefReplicatedToOneNode(""someProject"", ""refs/changes/01/1/1"", new org.eclipse.jgit.transport.URIish(""git://someHost/someProject.git""), RefPushResult.FAILED); verify(changeHooksMock); }",b5e996f20a1fecf14b6be117ea004375c9ca7389,testChangeRefReplicated(),135971,319,320
64310,gitiles-servlet_src_main_java_com_google_gitiles_doc_DivNode.java,,,,java.lang.String getStyleName() { return style.name().toLowerCase(java.util.Locale.US); },ffade887b3002f7a13a3c40e71fcbb583e61686f,,getStyleName(),21,1,public java.lang.String getStyleName() { return style; },b74acfa4f0293f5c973d24a97dd7421f43cbfdaa,getStyleName(),80738,26,15
77089,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyAgreementsScreen.java,1.0,@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SVC.myAgreements(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.AgreementInfo>(this) { @java.lang.Override public void preDisplay(final com.google.gerrit.common.data.AgreementInfo result) { agreements.display(result); } }); },065b596ab4c0c8d1bb6c52f592cba296787121a0,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements(""self"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { agreements.display(com.google.gerrit.client.rpc.Natives.asList(result)); } }); display(); }",de748f6dd49eb47ee01f757809de274931885539,onLoad(),onLoad(),5,1,"@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.client.account.AccountApi.getAgreements(""self"", new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo>>(this) { @java.lang.Override public void preDisplay(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.AgreementInfo> result) { agreements.display(com.google.gerrit.client.rpc.Natives.asList(result)); } }); }",347345da74ce6830770fe52140d170415f78d49e,onLoad(),122046,149,150
46151,gerrit-lucene_src_main_java_com_google_gerrit_lucene_Module.java,0.0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.class); },35dbca3c60553603b67da68719e5e29cac2909c1,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.class); if (checkVersion) { listener().to(com.google.gerrit.lucene.IndexVersionCheck.class); } },8d0603622d7dc9ffaad8c9f4cd82f6b37624f697,configure(),configure(),3,0,@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); bind(com.google.gerrit.server.index.ChangeIndexer.class).to(com.google.gerrit.server.index.ChangeIndexerImpl.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.class); if (checkVersion) { listener().to(com.google.gerrit.lucene.IndexVersionCheck.class); } },0792dcccf1596d8ce7675d6887df78568eb8f1dc,configure(),17719,92,129
148032,java_com_google_gerrit_server_group_db_GroupBundle.java,13.0,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""group {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",7c9b89ca18e2097df82f4da5cceca6f8cfbcdf46,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""account {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",3d4dd5030f51b01ba9e78a34846f5a8d9db2a8d4,"logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle$Source,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.lang.Iterable,java.util.Comparator,java.lang.Class)","logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle$Source,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.lang.Iterable,java.util.Comparator,java.lang.Class)",17,13,"private static <T> com.google.common.collect.ImmutableSet<T> logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle.Source source, com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid, java.lang.Iterable<T> iterable, java.util.Comparator<T> comparator, java.lang.Class<T> clazz) { java.util.List<T> list = com.google.common.collect.Streams.stream(iterable).sorted(comparator).collect(java.util.stream.Collectors.toList()); com.google.common.collect.ImmutableSet<T> set = com.google.common.collect.ImmutableSet.copyOf(list); if ((set.size()) != (list.size())) { com.google.gerrit.server.group.db.GroupBundle.log.warn(""group {} in {} has duplicate {} entities: {}"", uuid, source, clazz.getSimpleName(), iterable); } return set; }",7c9b89ca18e2097df82f4da5cceca6f8cfbcdf46,"logIfNotUnique(com.google.gerrit.server.group.db.GroupBundle$Source,com.google.gerrit.reviewdb.client.AccountGroup$UUID,java.lang.Iterable,java.util.Comparator,java.lang.Class)",215943,220,220
16459,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_SuggestServiceImpl.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void addSuggestion(java.util.Map map, com.google.gerrit.reviewdb.Account account, com.google.gerrit.common.data.AccountInfo info, java.lang.Boolean active) { if (active != null) { if ((active.booleanValue()) != (account.isActive())) { return; } } map.put(account.getId(), info); }",8a76b92ffac0f2856a8b5e763e72b4e87f061862,,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.Account,com.google.gerrit.common.data.AccountInfo,java.lang.Boolean)",2,0,"private void addSuggestion(java.util.Map map, com.google.gerrit.reviewdb.Account account, com.google.gerrit.common.data.AccountInfo info, java.lang.Boolean active) { if ((active == null) || (active == (account.isActive()))) { map.put(account.getId(), info); } }",12081269338a42fa996e38d84c48a6f28560b5b3,"addSuggestion(java.util.Map,com.google.gerrit.reviewdb.Account,com.google.gerrit.common.data.AccountInfo,java.lang.Boolean)",58141,85,78
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeApi.java,53.0,"public static com.google.gerrit.client.rpc.RestApi edit(int id) { return com.google.gerrit.client.changes.ChangeApi.change(id).view(""edit""); }",6d5911ba8dfa925239e329b5f46a5b598bf010ff,"public static com.google.gerrit.client.rpc.RestApi edit(int id, @com.google.gerrit.common.Nullable java.lang.String project) { return com.google.gerrit.client.changes.ChangeApi.change(id, project).view(""edit""); }",5a28bbce270a0bfc4962e4aa09869bf331f8bd31,edit(int),"edit(int,java.lang.String)",7,41,"public static com.google.gerrit.client.rpc.RestApi edit(@com.google.gerrit.common.Nullable java.lang.String project, int id) { return com.google.gerrit.client.changes.ChangeApi.change(project, id).view(""edit""); }",f03c8dd76705dacea8aeff16dc0a905011757778,"edit(java.lang.String,int)",211111,65,64
17441,gerrit-gwtui_src_main_java_com_google_gerrit_client_admin_ProjectInfoScreen.java,2.0,"private void doSave() { project.setDescription(descTxt.getText().trim()); project.setUseContributorAgreements(useContributorAgreements.getValue()); project.setUseSignedOffBy(useSignedOffBy.getValue()); project.setRequireChangeID(requireChangeID.getValue()); if ((submitType.getSelectedIndex()) >= 0) { project.setSubmitType(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex()))); } enableForm(false, false, false); saveProject.setEnabled(false); Util.PROJECT_SVC.changeProjectSettings(project, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectDetail>() { public void onSuccess(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType); display(result); } }); }",4956fe791b25dc53d5dbe87e61dc1dc85999e935,"private void doSave() { project.setDescription(descTxt.getText().trim()); project.setUseContributorAgreements(useContributorAgreements.getValue()); project.setUseSignedOffBy(useSignedOffBy.getValue()); project.setUseContentMerge(useContentMerge.getValue()); project.setRequireChangeID(requireChangeID.getValue()); if ((submitType.getSelectedIndex()) >= 0) { project.setSubmitType(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex()))); } enableForm(false, false, false); saveProject.setEnabled(false); Util.PROJECT_SVC.changeProjectSettings(project, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectDetail>() { public void onSuccess(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType); display(result); } }); }",dcea3bf543631a6225978be2ce45b367864060b0,doSave(),doSave(),3,4,"private void doSave() { project.setDescription(descTxt.getText().trim()); project.setUseContributorAgreements(useContributorAgreements.getValue()); project.setUseSignedOffBy(useSignedOffBy.getValue()); project.setUseContentMerge(useContentMerge.getValue()); project.setRequireChangeID(requireChangeID.getValue()); if ((submitType.getSelectedIndex()) >= 0) { project.setSubmitType(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex()))); } enableForm(false, false, false); Util.PROJECT_SVC.changeProjectSettings(project, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.ProjectDetail>() { public void onSuccess(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType); display(result); } }); }",141f8f2d34ca75e80535b8d0793f6413ea85ddc9,doSave(),62483,218,211
62030,gerrit-server_src_main_java_com_google_gerrit_server_git_LocalDiskRepositoryManager.java,2.0,"@java.lang.Override public org.eclipse.jgit.lib.Repository createRepository(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.git.RepositoryCaseMismatchException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = createRepository(basePath, name); if ((noteDbPath) != null) { createRepository(noteDbPath, name); } return repo; }",4f7dcccccd8bb89a73f5a7f338b7d8b05388f3b8,"@java.lang.Override public org.eclipse.jgit.lib.Repository createRepository(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.git.RepositoryCaseMismatchException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = createRepository(getBasePath(name), name); if ((noteDbPath) != null) { createRepository(noteDbPath, name); } return repo; }",b1d7e9b7cdd2317fdc2b5a837707b792c78c2ded,createRepository(com.google.gerrit.reviewdb.client.Project$NameKey),createRepository(com.google.gerrit.reviewdb.client.Project$NameKey),26,2,"@java.lang.Override public org.eclipse.jgit.lib.Repository createRepository(com.google.gerrit.reviewdb.client.Project.NameKey name) throws com.google.gerrit.server.git.RepositoryCaseMismatchException, org.eclipse.jgit.errors.RepositoryNotFoundException { org.eclipse.jgit.lib.Repository repo = createRepository(getBasePath(name), name); if ((notesMigration.writeChanges()) && (!(noteDbPath.equals(basePath)))) { createRepository(noteDbPath, name); } return repo; }",f2087920a970e96e651a0095cd4f6bf74ec73313,createRepository(com.google.gerrit.reviewdb.client.Project$NameKey),41177,116,125
18340,gerrit-server_src_main_java_com_google_gerrit_server_IdentifiedUser.java,1.0,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(final java.util.Date when, final java.util.TimeZone tz) { final com.google.gerrit.reviewdb.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((user == null) || (user.isEmpty())) { user = ""account-"" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = ""Anonymous Coward""; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }",f05bf6183c99454efd5ec11ea137725e782ce761,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(final java.util.Date when, final java.util.TimeZone tz) { final com.google.gerrit.reviewdb.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((user == null) || (user.isEmpty())) { user = ""account-"" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = ""Anonymous Coward""; } } if ((when == null) && (tz == null)) { return new org.eclipse.jgit.lib.PersonIdent(name, email); } else { return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); } }",1adf5cb9856c64f753862cd348791d4c8ec15e3d,"newCommitterIdent(java.util.Date,java.util.TimeZone)","newCommitterIdent(java.util.Date,java.util.TimeZone)",2,1,"public org.eclipse.jgit.lib.PersonIdent newCommitterIdent(final java.util.Date when, final java.util.TimeZone tz) { final com.google.gerrit.reviewdb.Account ua = getAccount(); java.lang.String name = ua.getFullName(); java.lang.String email = ua.getPreferredEmail(); if ((email == null) || (email.isEmpty())) { java.lang.String user = getUserName(); if ((user == null) || (user.isEmpty())) { user = ""account-"" + (ua.getId().toString()); } java.lang.String host; if ((canonicalUrl.get()) != null) { try { host = new java.net.URL(canonicalUrl.get()).getHost(); } catch (java.net.MalformedURLException e) { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } } else { host = org.eclipse.jgit.util.SystemReader.getInstance().getHostname(); } email = (user + ""@"") + host; } if ((name == null) || (name.isEmpty())) { final int at = email.indexOf('@'); if (0 < at) { name = email.substring(0, at); } else { name = ""Anonymous Coward""; } } return new org.eclipse.jgit.lib.PersonIdent(name, email, when, tz); }",f05bf6183c99454efd5ec11ea137725e782ce761,"newCommitterIdent(java.util.Date,java.util.TimeZone)",18450,346,310
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,37.0,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",5414016ca634aa94516809738bea76a68c67e19d,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId, project)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",64a4bddd6718149588f0307630ac8a514ae110ff,showUpdates(com.google.gerrit.client.info.ChangeInfo),showUpdates(com.google.gerrit.client.info.ChangeInfo),7,36,"void showUpdates(com.google.gerrit.client.info.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((om.length()) == (nm.length())) { return; } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, changeId)); } @java.lang.Override void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isAttached())) { add(updateAvailable); } }",13b3d6c77ed820dbf175e07678df0d4a64133b6a,showUpdates(com.google.gerrit.client.info.ChangeInfo),210945,354,354
9518,src_main_java_com_google_gerrit_client_account_AccountSettings.java,1.0,@java.lang.Override public void onLoad() { if ((info) == null) { initUI(); } super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); tabs.selectTab(tabTokens.indexOf(initialTabToken)); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.reviewdb.Account>() { public void onSuccess(final com.google.gerrit.client.reviewdb.Account result) { if (isAttached()) { display(result); } } }); },aa3ae4d9e57a0a1097960ef2e2584114a75750c6,@java.lang.Override public void onLoad() { if ((info) == null) { initUI(); } super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); tabs.selectTab(tabTokens.indexOf(initialTabToken)); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.reviewdb.Account>(this) { @java.lang.Override protected void prepare(final com.google.gerrit.client.reviewdb.Account result) { display(result); } }); },9efa5a78c4b5726a223e63d0fa27be322026e589,onLoad(),onLoad(),2,0,@java.lang.Override public void onLoad() { if ((info) == null) { initUI(); } super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); tabs.selectTab(tabTokens.indexOf(initialTabToken)); Util.ACCOUNT_SVC.myAccount(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.reviewdb.Account>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.client.reviewdb.Account result) { display(result); } }); },50421394163906b6cd499828914817eddf8c0575,onLoad(),845,141,142
64613,gitiles-servlet_src_main_java_com_google_gitiles_doc_html_HtmlBuilder.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static boolean isValidHttpUri(java.lang.String val) { return ((val.startsWith(""http:"")) || (val.startsWith(""https:""))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }",88c773a5fa4eb7c951b5fecaab819a98fe1f7977,,isValidHttpUri(java.lang.String),3,3,"public static boolean isValidHttpUri(java.lang.String val) { return (((val.startsWith(""https://"")) || (val.startsWith(""http://""))) || (val.startsWith(""//""))) && (com.google.gitiles.doc.html.HtmlBuilder.URI.getValueFilter().matcher(val).find()); }",bc8b810eea302ac6b4da29be59d3561808719626,isValidHttpUri(java.lang.String),22778,62,69
32431,gerrit-server_src_main_java_com_google_gerrit_server_mail_RebasedPatchSetSender.java,,,,com.google.gerrit.server.mail.RebasedPatchSetSender create(com.google.gerrit.reviewdb.Change change);,ba8101e5d63eb94ff0b2b5b65317b07a51dc21be,,create(com.google.gerrit.reviewdb.Change),12,1,com.google.gerrit.server.mail.RebasedPatchSetSender create(com.google.gerrit.reviewdb.client.Change change);,0b0fa6454f61c5d319d99adb11abd2b0307fc9eb,create(com.google.gerrit.reviewdb.client.Change),13045,32,34
35129,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Daemon.java,9.0,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },7293c735ec9b0ff3237a689086e50560e6e4a87a,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); modules.add(new com.google.gerrit.server.plugins.PluginLoaderModule()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },c787d459fd3601c6d7b918409b6e7dbc57a804a7,createSysInjector(),createSysInjector(),8,9,private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.server.schema.SchemaVersionCheck.module()); modules.add(new com.google.gerrit.pgm.util.LogFileCompressor.Module()); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.git.PushReplication.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); },85f8a68bee8eecf59687ab79579b3b80916e8ad9,createSysInjector(),108454,476,475
156531,java_com_google_gerrit_server_permissions_RefControl.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { for (com.google.gerrit.server.permissions.PermissionCollection.BlockAccessSection s : relevant.getBlocks(permissionName)) { boolean blocked = false; for (com.google.gerrit.common.data.PermissionRule pr : s.blocks) { if (projectControl.match(pr, isChangeOwner)) { blocked = true; break; } } if (blocked) { for (com.google.gerrit.common.data.PermissionRule pr : s.overrides) { if (projectControl.match(pr, isChangeOwner)) { return (pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW); } } } } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getRules(permissionName)) { if (projectControl.match(pr, isChangeOwner)) { if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.DENY)) { return false; } if (withForce) { if (((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) && (pr.getForce())) { return true; } } else if ((pr.getAction()) == (com.google.gerrit.common.data.PermissionRule.Action.ALLOW)) { return true; } } } return false; }",85ab9f46441a333d390485cd55be99cf626d6c17,,"canPerform(java.lang.String,boolean,boolean)",21,17,"private boolean canPerform(java.lang.String permissionName, boolean isChangeOwner, boolean withForce) { if (isBlocked(permissionName, isChangeOwner, withForce)) { return false; } for (com.google.gerrit.common.data.PermissionRule pr : relevant.getAllowRules(permissionName)) { if ((com.google.gerrit.server.permissions.RefControl.isAllow(pr, withForce)) && (projectControl.match(pr, isChangeOwner))) { return true; } } return false; }",c31ffacf7e099709b8ebd7446b71914c8a6b37bb,"canPerform(java.lang.String,boolean,boolean)",67216,337,119
108592,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_Actions.java,11.0,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, deleteChange); } }",5f5ae8f6fec2dcdb3e4a0f57c54736c67cb17bfa,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(changeId, project, deleteChange); } }",77bf230cb0a7b3984ab5f24255235d00f54fd289,onDeleteChange(com.google.gwt.event.dom.client.ClickEvent),onDeleteChange(com.google.gwt.event.dom.client.ClickEvent),7,11,"@com.google.gwt.uibinder.client.UiHandler(""deleteChange"") void onDeleteChange(@java.lang.SuppressWarnings(""unused"") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChange())) { com.google.gerrit.client.change.ChangeActions.delete(project, changeId, deleteChange); } }",0d3d584e78ab20afcf8063f0e577db2fcc81da8d,onDeleteChange(com.google.gwt.event.dom.client.ClickEvent),210362,97,97
144151,java_com_google_gerrit_server_group_db_GroupConfig.java,23.0,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup; },c0ab9dfc58b344a7210fef7f0b9d7ab0b447cec2,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); loadedGroup.ifPresent(( t) -> checkConsistencyWithGroupNameNotes(t)); return loadedGroup; },f2caabf23646d54aea17ce335d9ba3f9b6b9c7dc,getLoadedGroup(),getLoadedGroup(),9,24,public java.util.Optional<com.google.gerrit.server.group.InternalGroup> getLoadedGroup() { checkLoaded(); return loadedGroup; },c0ab9dfc58b344a7210fef7f0b9d7ab0b447cec2,getLoadedGroup(),106908,52,34
70508,gerrit-gpg_src_main_java_com_google_gerrit_gpg_PushCertificateChecker.java,1.0,"public final com.google.gerrit.gpg.CheckResult check(org.eclipse.jgit.transport.PushCertificate cert) { if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { return new com.google.gerrit.gpg.CheckResult(""Invalid nonce""); } java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); try { org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig != null) { org.eclipse.jgit.lib.Repository repo = getRepository(); try (com.google.gerrit.gpg.PublicKeyStore store = new com.google.gerrit.gpg.PublicKeyStore(repo)) { checkSignature(sig, cert, store.get(sig.getKeyID()), problems); checkCustom(repo, problems); } finally { if (shouldClose(repo)) { repo.close(); } } } else { problems.add(""Invalid signature format""); } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { java.lang.String msg = ""Internal error checking push certificate""; com.google.gerrit.gpg.PushCertificateChecker.log.error(msg, e); problems.add(msg); } return new com.google.gerrit.gpg.CheckResult(problems); }",50d966a966254f0fa0339887ec2b75947e830653,"public final com.google.gerrit.gpg.CheckResult check(org.eclipse.jgit.transport.PushCertificate cert) { if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { return new com.google.gerrit.gpg.CheckResult(""Invalid nonce""); } java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); try { org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig != null) { org.eclipse.jgit.lib.Repository repo = getRepository(); try (com.google.gerrit.gpg.PublicKeyStore store = new com.google.gerrit.gpg.PublicKeyStore(repo)) { checkSignature(sig, cert, store, problems); checkCustom(repo, problems); } finally { if (shouldClose(repo)) { repo.close(); } } } else { problems.add(""Invalid signature format""); } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { java.lang.String msg = ""Internal error checking push certificate""; com.google.gerrit.gpg.PushCertificateChecker.log.error(msg, e); problems.add(msg); } return new com.google.gerrit.gpg.CheckResult(problems); }",0c55ca86ac0b03a18a68a8bb1108c55e63e3477d,check(org.eclipse.jgit.transport.PushCertificate),check(org.eclipse.jgit.transport.PushCertificate),5,1,"public final com.google.gerrit.gpg.CheckResult check(org.eclipse.jgit.transport.PushCertificate cert) { if ((cert.getNonceStatus()) != (org.eclipse.jgit.transport.PushCertificate.NonceStatus.OK)) { return new com.google.gerrit.gpg.CheckResult(""Invalid nonce""); } java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); try { org.bouncycastle.openpgp.PGPSignature sig = readSignature(cert); if (sig != null) { @java.lang.SuppressWarnings(""resource"") org.eclipse.jgit.lib.Repository repo = getRepository(); try (com.google.gerrit.gpg.PublicKeyStore store = new com.google.gerrit.gpg.PublicKeyStore(repo)) { checkSignature(sig, cert, store, problems); checkCustom(repo, problems); } finally { if (shouldClose(repo)) { repo.close(); } } } else { problems.add(""Invalid signature format""); } } catch (org.bouncycastle.openpgp.PGPException | java.io.IOException e) { java.lang.String msg = ""Internal error checking push certificate""; com.google.gerrit.gpg.PushCertificateChecker.log.error(msg, e); problems.add(msg); } return new com.google.gerrit.gpg.CheckResult(problems); }",626e7165d4506c09fc51a7c6ad790da782012c83,check(org.eclipse.jgit.transport.PushCertificate),213595,304,313
39821,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,3.0,"private static <T extends com.google.gwt.core.client.JavaScriptObject> T parseJson(com.google.gwt.http.client.Response res) throws com.google.gwt.json.client.JSONException { java.lang.String json = res.getText(); if (json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC)) { json = json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length()); } if (json.isEmpty()) { throw new com.google.gwt.json.client.JSONException(""response was empty""); } return com.google.gerrit.client.rpc.RestApi.cast(com.google.gwt.json.client.JSONParser.parseStrict(json)); }",92ec668516c909ff67b521a6fc871a02eaafed63,"private static <T extends com.google.gwt.core.client.JavaScriptObject> T parseJson(com.google.gwt.http.client.Response res) throws com.google.gwt.json.client.JSONException { java.lang.String json = com.google.gerrit.client.rpc.RestApi.trimJsonMagic(res.getText()); if (json.isEmpty()) { throw new com.google.gwt.json.client.JSONException(""response was empty""); } return com.google.gerrit.client.rpc.RestApi.cast(com.google.gwt.json.client.JSONParser.parseStrict(json)); }",c437846f1c7facf41070696cf0661b3028cc6efb,parseJson(com.google.gwt.http.client.Response),parseJson(com.google.gwt.http.client.Response),2,3,"private static com.google.gwt.json.client.JSONValue parseJson(com.google.gwt.http.client.Response res) throws com.google.gwt.json.client.JSONException { java.lang.String json = com.google.gerrit.client.rpc.RestApi.trimJsonMagic(res.getText()); if (json.isEmpty()) { throw new com.google.gwt.json.client.JSONException(""response was empty""); } return com.google.gwt.json.client.JSONParser.parseStrict(json); }",987a445a4d696c3b7c4a0b90dbe979dc537e60c1,parseJson(com.google.gwt.http.client.Response),62664,137,117
53360,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_FileCommentPanel.java,2.0,"void createOrEditFileComment() { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(parent.getToken()); return; } if (boxes.isEmpty()) { com.google.gerrit.client.changes.CommentInfo info = com.google.gerrit.client.changes.CommentInfo.createFile(path, parent.getStoredSideFromDisplaySide(side), null, null); addFileComment(parent.addDraftBox(info, side)); } else { com.google.gerrit.client.diff.CommentBox box = boxes.get(((boxes.size()) - 1)); if (box instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (box)).setEdit(true); } else { addFileComment(((com.google.gerrit.client.diff.PublishedBox) (box)).addReplyBox()); } } }",032033473b4a44dca30ff6ad5f19f2bc68d95ee8,void createOrEditFileComment() { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(manager.getSideBySide2().getToken()); return; } if (boxes.isEmpty()) { addFileComment(manager.newFileDraft(side)); } else { com.google.gerrit.client.diff.CommentBox box = boxes.get(((boxes.size()) - 1)); if (box instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (box)).setEdit(true); } else { addFileComment(((com.google.gerrit.client.diff.PublishedBox) (box)).addReplyBox()); } } },7156ae95f5ed73b7ffa6c5563c46992dc64fe834,createOrEditFileComment(),createOrEditFileComment(),4,2,void createOrEditFileComment() { if (!(com.google.gerrit.client.Gerrit.isSignedIn())) { com.google.gerrit.client.Gerrit.doSignIn(parent.getToken()); return; } if (boxes.isEmpty()) { addFileComment(parent.getCommentManager().newFileDraft(side)); } else { com.google.gerrit.client.diff.CommentBox box = boxes.get(((boxes.size()) - 1)); if (box instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (box)).setEdit(true); } else { addFileComment(((com.google.gerrit.client.diff.PublishedBox) (box)).addReplyBox()); } } },d6d80ba54592848265a132b05ccb13b3dfc5f678,createOrEditFileComment(),75377,180,177
91605,gerrit-server_src_main_java_com_google_gerrit_server_LibModuleLoader.java,,,,public static com.google.inject.Injector createChildInjector(com.google.inject.Injector parentInjector) { com.google.gerrit.server.LibModuleLoader moduleLoader = parentInjector.getInstance(com.google.gerrit.server.LibModuleLoader.class); return parentInjector.createChildInjector(moduleLoader.modules()); },34ecff2ba41275c7d3ae83cffabedebeb4d6d366,,createChildInjector(com.google.inject.Injector),7,2,"public static java.util.List<java.lang.Module> loadModules(com.google.inject.Injector parent) { org.eclipse.jgit.lib.Config cfg = com.google.gerrit.server.LibModuleLoader.getConfig(parent); return java.util.Arrays.stream(cfg.getStringList(""gerrit"", null, ""installModule"")).map(( m) -> createModule(parent, m)).collect(java.util.stream.Collectors.toList()); }",e446a5eee9b681ef9cb3a69af4598c8f20e8551d,loadModules(com.google.inject.Injector),71552,73,106
61480,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_edit_ChangeEditIT.java,5.0,"@org.junit.Test public void retrieveFilesInEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); EditInfo info = toEditInfo(true); assertEquals(2, info.files.size()); java.util.List<java.lang.String> l = com.google.common.collect.Lists.newArrayList(info.files.keySet()); assertEquals(""/COMMIT_MSG"", l.get(0)); assertEquals(""foo"", l.get(1)); }",55f7a4db2796eea0330e09e3acf07483c517d293,"@org.junit.Test public void retrieveFilesInEdit() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))); EditInfo info = toEditInfo(true); assertEquals(2, info.files.size()); java.util.List<java.lang.String> l = com.google.common.collect.Lists.newArrayList(info.files.keySet()); assertEquals(""/COMMIT_MSG"", l.get(0)); assertEquals(""foo"", l.get(1)); }",52d9a74b1fab98dd228278dfd032b4588af6abe4,retrieveFilesInEdit(),retrieveFilesInEdit(),3,5,"@org.junit.Test public void retrieveFilesInEdit() throws java.lang.Exception { assertThat(modifier.createEdit(change, ps)).isEqualTo(RefUpdate.Result.NEW); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))).isEqualTo(RefUpdate.Result.FORCED); EditInfo info = toEditInfo(true); assertThat(info.files).hasSize(2); java.util.List<java.lang.String> l = com.google.common.collect.Lists.newArrayList(info.files.keySet()); assertThat(l.get(0)).isEqualTo(""/COMMIT_MSG""); assertThat(l.get(1)).isEqualTo(""foo""); }",2492b8daa012c5cb655a38d32a6d8fe247c55913,retrieveFilesInEdit(),110511,218,231
69700,github-plugin_src_main_java_com_googlesource_gerrit_plugins_github_notification_WebhookServlet.java,,,,"private static java.lang.String getControllerClassName(org.kohsuke.github.GHEvent event) { java.lang.StringBuilder controllerName = new java.lang.StringBuilder(com.googlesource.gerrit.plugins.github.notification.WebhookServlet.PACKAGE_NAME); controllerName.append("".""); for (java.lang.String component : event.name().split(""_"")) { controllerName.append(component.charAt(0)); controllerName.append(component.substring(1).toLowerCase()); } controllerName.append(""Handler""); return controllerName.toString(); }",2d0811deed99e732affe61493dfbbfc060683e37,,getControllerClassName(org.kohsuke.github.GHEvent),12,4,"private java.lang.String eventClassName(java.lang.String name) { java.lang.String[] nameParts = name.split(""_""); java.util.List<java.lang.String> classNameParts = com.google.common.collect.Lists.transform(java.util.Arrays.asList(nameParts), new com.google.common.base.Function<java.lang.String, java.lang.String>() { @java.lang.Override public java.lang.String apply(java.lang.String part) { return (java.lang.Character.toUpperCase(part.charAt(0))) + (part.substring(1)); } }); return (((com.googlesource.gerrit.plugins.github.notification.WebhookServlet.PACKAGE_NAME) + ""."") + (com.google.common.base.Joiner.on("""").join(classNameParts))) + ""Handler""; }",1e8382d08f1701a6eef67f760aa2ef6a5f130a8e,eventClassName(java.lang.String),11495,120,190
159810,java_com_google_gerrit_server_config_ScheduleConfig.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static long computeInitialDelay(long interval, java.lang.String start, java.time.ZonedDateTime now) { checkNotNull(start); java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; }",f4339afbb579966b09cb32010197c42c0f956f38,,"computeInitialDelay(long,java.lang.String,java.time.ZonedDateTime)",5,12,"private static long computeInitialDelay(long interval, java.lang.String start, java.time.ZonedDateTime now) { checkNotNull(start); try { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern(""[E ]HH:mm"").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); long delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } return delay; } catch (java.time.format.DateTimeParseException e) { return com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } }",d3ed09680eb4f8c2d6d3f462ab14509bec952e82,"computeInitialDelay(long,java.lang.String,java.time.ZonedDateTime)",104523,205,241
72006,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyPreferencesScreen.java,15.0,"private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferences.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferences.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferences.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferences.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",acafc9a6459320468bc3333247c3a1a7400dc5c1,"private void display(com.google.gerrit.client.info.AccountPreferencesInfo p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); copySelfOnEmails.setValue(p.copySelfOnEmail()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, AccountGeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, AccountGeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, AccountGeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, AccountGeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); display(p.my()); }",a5aa6c6a3d8fcc13f9c151e5836c3f3a587b5edd,display(com.google.gerrit.client.info.AccountPreferencesInfo),display(com.google.gerrit.client.info.AccountPreferencesInfo),14,10,"private void display(com.google.gerrit.client.info.GeneralPreferences p) { showSiteHeader.setValue(p.showSiteHeader()); useFlashClipboard.setValue(p.useFlashClipboard()); setListBox(maximumPageSize, com.google.gerrit.client.account.DEFAULT_PAGESIZE, p.changesPerPage()); setListBox(dateFormat, GeneralPreferencesInfo.DateFormat.STD, p.dateFormat()); setListBox(timeFormat, GeneralPreferencesInfo.TimeFormat.HHMM_12, p.timeFormat()); relativeDateInChangeTable.setValue(p.relativeDateInChangeTable()); sizeBarInChangeTable.setValue(p.sizeBarInChangeTable()); legacycidInChangeTable.setValue(p.legacycidInChangeTable()); muteCommonPathPrefixes.setValue(p.muteCommonPathPrefixes()); setListBox(reviewCategoryStrategy, GeneralPreferencesInfo.ReviewCategoryStrategy.NONE, p.reviewCategoryStrategy()); setListBox(diffView, GeneralPreferencesInfo.DiffView.SIDE_BY_SIDE, p.diffView()); setListBox(emailStrategy, GeneralPreferencesInfo.EmailStrategy.ENABLED, p.emailStrategy()); display(p.my()); }",b3fc7b477326d825c85aac46eccf04c206e69fd6,display(com.google.gerrit.client.info.GeneralPreferences),178275,257,258
108890,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_IndexAccountRestApiServlet.java,0.0,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); java.lang.String path = req.getPathInfo(); java.lang.String accountId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.error(""Unable to update account index"", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",28902f6bc0a2c56c9a1971d74847d1d942a380ad,"@java.lang.Override protected void doPost(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { rsp.setContentType(""text/plain""); rsp.setCharacterEncoding(""UTF-8""); java.lang.String path = req.getPathInfo(); java.lang.String accountId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.error(""Unable to update account index"", e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }",c67e959189464b70e92a1e117d93aec5b8fb4632,"doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)","doPost(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",6,0,@java.lang.Override Account.Id parse(java.lang.String id) { return Account.Id.parse(id); },74d58af0f78f9b3c4f7abc765ad717d517ae610a,parse(java.lang.String),175529,281,29
42531,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,4.0,"private java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> scanLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> del) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = rsrc.getControl().getLabelTypes(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> current = com.google.common.collect.Maps.newHashMap(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSetUser(rsrc.getPatchSet().getId(), rsrc.getAccountId())) { if (ApprovalCategory.SUBMIT_ID.equals(a.getCategoryId().get())) { continue; } com.google.gerrit.common.data.LabelType lt = labelTypes.byId(a.getCategoryId().get()); if (lt != null) { current.put(lt.getName(), a); } else { del.add(a); } } return current; }",a2ece9b7efe59f135fe384d8954d5f80ba50a0e7,"private java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> scanLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> del) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = rsrc.getControl().getLabelTypes(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> current = com.google.common.collect.Maps.newHashMap(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSetUser(rsrc.getPatchSet().getId(), rsrc.getAccountId())) { if (a.isSubmit()) { continue; } com.google.gerrit.common.data.LabelType lt = labelTypes.byId(a.getLabelId()); if (lt != null) { current.put(lt.getName(), a); } else { del.add(a); } } return current; }",cd59e0239eada24e8db878c0d0829fad4e74a3ec,"scanLabels(com.google.gerrit.server.change.RevisionResource,java.util.List)","scanLabels(com.google.gerrit.server.change.RevisionResource,java.util.List)",18,4,"private java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> scanLabels(com.google.gerrit.server.change.RevisionResource rsrc, java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> del) throws com.google.gwtorm.server.OrmException { com.google.gerrit.common.data.LabelTypes labelTypes = rsrc.getControl().getLabelTypes(); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> current = com.google.common.collect.Maps.newHashMap(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSetUser(rsrc.getPatchSet().getId(), rsrc.getAccountId())) { if (a.isSubmit()) { continue; } com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(a.getLabelId()); if (lt != null) { current.put(lt.getName(), a); } else { del.add(a); } } return current; }",e775f57ebbe4b24ce6d938d40a02163199c561fe,"scanLabels(com.google.gerrit.server.change.RevisionResource,java.util.List)",82602,274,274
80285,src_main_java_com_googlesource_gerrit_plugins_lfs_HttpModule.java,0.0,"@java.lang.Override protected void configureServlets() { com.googlesource.gerrit.plugins.lfs.LfsBackend backend = config.getEnum(""backend"", LfsBackend.FS); switch (backend) { case FS : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.class); serve(((""/"" + (CONTENT_PATH)) + ""/*"")).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet.class); break; case S3 : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.s3.LfsS3ApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.s3.S3LargeFileRepository.class); break; default : throw new java.lang.RuntimeException((""Unsupported backend: "" + backend)); } }",3ebe4e1b26180a5c4bcfa9a856758de7a103d11a,"@java.lang.Override protected void configureServlets() { com.googlesource.gerrit.plugins.lfs.LfsBackend backend = config.getEnum(""data"", null, ""backend"", LfsBackend.FS); switch (backend) { case FS : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.class); serve(((""/"" + (CONTENT_PATH)) + ""/*"")).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet.class); break; case S3 : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.s3.LfsS3ApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.s3.S3LargeFileRepository.class); break; default : throw new java.lang.RuntimeException((""Unsupported backend: "" + backend)); } }",5d3157ae75b6829f1c980d3055c1fe8dae72c53a,configureServlets(),configureServlets(),4,0,"@java.lang.Override protected void configureServlets() { com.googlesource.gerrit.plugins.lfs.LfsBackend backend = config.getEnum(""storage"", null, ""backend"", LfsBackend.FS); switch (backend) { case FS : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.fs.LocalLargeFileRepository.class); serve(((""/"" + (CONTENT_PATH)) + ""/*"")).with(com.googlesource.gerrit.plugins.lfs.fs.LfsFsContentServlet.class); break; case S3 : serveRegex(com.googlesource.gerrit.plugins.lfs.URL_REGEX).with(com.googlesource.gerrit.plugins.lfs.s3.LfsS3ApiServlet.class); bind(com.googlesource.gerrit.plugins.lfs.s3.S3LargeFileRepository.class); break; default : throw new java.lang.RuntimeException((""Unsupported backend: "" + backend)); } }",524d28ecf04ff20ace3743772ca17be28b4edd98,configureServlets(),174601,270,270
41267,gerrit-server_src_main_java_com_google_gerrit_server_account_IncludingGroupMembership.java,4.0,@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getKnownGroups() { findIncludedGroup(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet()); return com.google.common.collect.Sets.newHashSet(includes); },3701f775b672f43b65052c67953df1d08c893c92,"@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getKnownGroups() { search(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>emptySet()); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> r = com.google.common.collect.Sets.newHashSetWithExpectedSize(memberOf.size()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.AccountGroup.UUID, java.lang.Boolean> e : memberOf.entrySet()) { if (e.getValue()) { r.add(e.getKey()); } } return r; }",7a68cfd4c440f454a54cb634b7f484127c7265ad,getKnownGroups(),getKnownGroups(),5,6,@java.lang.Override public java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getKnownGroups() { if ((knownGroups) == null) { knownGroups = computeKnownGroups(); } return knownGroups; },0541f6d38cf5a2bb09974c6b30e23633d297baa6,getKnownGroups(),154536,175,59
62030,gerrit-server_src_test_java_com_google_gerrit_server_git_LocalDiskRepositoryManagerTest.java,,,,"@org.junit.Test public void testAlternateRepositoryLocation() throws java.io.IOException { java.io.File alternateBasePath = com.google.gerrit.testutil.TempFileUtil.createTempDirectory(); com.google.gerrit.reviewdb.client.Project.NameKey someProjectKey = new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""); reset(repositoryConfigMock); expect(repositoryConfigMock.getBasePath(someProjectKey)).andReturn(alternateBasePath.getAbsolutePath()).anyTimes(); expect(repositoryConfigMock.getAllBasePaths()).andReturn(new java.lang.String[]{ alternateBasePath.getAbsolutePath() }).anyTimes(); replay(repositoryConfigMock); org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(someProjectKey); assertThat(repo.getDirectory()).isNotNull(); assertThat(repo.getDirectory().exists()).isTrue(); assertThat(repo.getDirectory().getParent()).isEqualTo(alternateBasePath.getAbsolutePath()); repo = repoManager.openRepository(someProjectKey); assertThat(repo.getDirectory()).isNotNull(); assertThat(repo.getDirectory().exists()).isTrue(); assertThat(repo.getDirectory().getParent()).isEqualTo(alternateBasePath.getAbsolutePath()); assertThat(repoManager.getBasePath(someProjectKey).getAbsolutePath()).isEqualTo(alternateBasePath.getAbsolutePath()); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); assertThat(repoList.size()).isEqualTo(1); assertThat(repoList.toArray(new com.google.gerrit.reviewdb.client.Project.NameKey[repoList.size()])).isEqualTo(new com.google.gerrit.reviewdb.client.Project.NameKey[]{ someProjectKey }); }",cbecdd8258e3ac72a39e89a374fa1d218a4b0d00,,testAlternateRepositoryLocation(),26,17,"@org.junit.Test(expected = org.eclipse.jgit.errors.RepositoryNotFoundException.class) public void testOpenRepositoryInvalidName() throws java.lang.Exception { repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(""project%?|<>A"")); }",7cf2a661e8045578a47dcd526c09976cf8f2ba2d,testOpenRepositoryInvalidName(),41143,383,73
76355,gerrit-server_src_test_java_com_google_gerrit_server_config_RepositoryConfigTest.java,2.0,"@org.junit.Test public void testOwnerGroupsForStartWithFilter() { java.lang.String[] ownerGroups1 = new java.lang.String[]{ ""group1"" }; java.lang.String[] ownerGroups2 = new java.lang.String[]{ ""group2"" }; java.lang.String[] ownerGroups3 = new java.lang.String[]{ ""group3"" }; configureOwnerGroups(""*"", com.google.common.collect.Lists.newArrayList(ownerGroups1)); configureOwnerGroups(""somePath/*"", com.google.common.collect.Lists.newArrayList(ownerGroups2)); configureOwnerGroups(""somePath/somePath/*"", com.google.common.collect.Lists.newArrayList(ownerGroups3)); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).isEqualTo(ownerGroups1); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/someProject""))).isEqualTo(ownerGroups2); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/somePath/someProject""))).isEqualTo(ownerGroups3); }",165d77c82fd37787efe7dcb47c024e53614128c4,"@org.junit.Test public void testOwnerGroupsForStartWithFilter() { java.util.List<java.lang.String> ownerGroups1 = java.util.Arrays.asList(""group1""); java.util.List<java.lang.String> ownerGroups2 = java.util.Arrays.asList(""group2""); java.util.List<java.lang.String> ownerGroups3 = java.util.Arrays.asList(""group3""); configureOwnerGroups(""*"", ownerGroups1); configureOwnerGroups(""somePath/*"", ownerGroups2); configureOwnerGroups(""somePath/somePath/*"", ownerGroups3); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).containsExactlyElementsIn(ownerGroups1); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/someProject""))).containsExactlyElementsIn(ownerGroups2); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/somePath/someProject""))).containsExactlyElementsIn(ownerGroups3); }",da2b6e19979f6ff7ff95af5c50cea6f05eb42d86,testOwnerGroupsForStartWithFilter(),testOwnerGroupsForStartWithFilter(),6,2,"@org.junit.Test public void testOwnerGroupsForStartWithFilter() { com.google.common.collect.ImmutableList<java.lang.String> ownerGroups1 = com.google.common.collect.ImmutableList.of(""group1""); com.google.common.collect.ImmutableList<java.lang.String> ownerGroups2 = com.google.common.collect.ImmutableList.of(""group2""); com.google.common.collect.ImmutableList<java.lang.String> ownerGroups3 = com.google.common.collect.ImmutableList.of(""group3""); configureOwnerGroups(""*"", ownerGroups1); configureOwnerGroups(""somePath/*"", ownerGroups2); configureOwnerGroups(""somePath/somePath/*"", ownerGroups3); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""someProject""))).containsExactlyElementsIn(ownerGroups1); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/someProject""))).containsExactlyElementsIn(ownerGroups2); assertThat(repoCfg.getOwnerGroups(new com.google.gerrit.reviewdb.client.Project.NameKey(""somePath/somePath/someProject""))).containsExactlyElementsIn(ownerGroups3); }",11815525be05daffed2dd7a3878f90d9af100f84,testOwnerGroupsForStartWithFilter(),183496,255,279
72085,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_ResourceServlet.java,7.0,"private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }",17b819a8cc2c95c2bcc9f0c15936a769a146d187,"private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }",e18eee64d6443840959d517351a9a990d7347a0a,newLoader(java.nio.file.Path),newLoader(java.nio.file.Path),8,8,"private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } catch (java.nio.file.NoSuchFileException e) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } } }; }",e0210d23dc2e42362c3e509bc8cca3a4f2e406f0,newLoader(java.nio.file.Path),116993,162,202
16173,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_ChangeListServiceImpl.java,48.0,"public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account.Id me = getAccountId(); final java.util.Set<com.google.gerrit.reviewdb.Change.Id> existing = currentUser.get().getStarredChanges(); java.util.List<com.google.gerrit.reviewdb.StarredChange> add = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange>(); java.util.List<com.google.gerrit.reviewdb.StarredChange.Key> remove = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange.Key>(); if ((req.getAddSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getAddSet()) { if (!(existing.contains(id))) { add.add(new com.google.gerrit.reviewdb.StarredChange(new com.google.gerrit.reviewdb.StarredChange.Key(me, id))); } } } if ((req.getRemoveSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getRemoveSet()) { remove.add(new com.google.gerrit.reviewdb.StarredChange.Key(me, id)); } } db.starredChanges().insert(add); db.starredChanges().deleteKeys(remove); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",4e38261362875f6f001dee6e72377007caec1e0f,"public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account.Id me = getAccountId(); final java.util.Set<com.google.gerrit.reviewdb.Change.Id> existing = currentUser.get().getStarredChanges(); java.util.List<com.google.gerrit.reviewdb.StarredChange> add = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange>(); java.util.List<com.google.gerrit.reviewdb.StarredChange.Key> remove = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange.Key>(); if ((req.getAddSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getAddSet()) { if (!(existing.contains(id))) { com.google.gerrit.reviewdb.StarredChange.Key key = new com.google.gerrit.reviewdb.StarredChange.Key(me, id); add.add(new com.google.gerrit.reviewdb.StarredChange(key)); starredChangesCache.evict(key); } } } if ((req.getRemoveSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getRemoveSet()) { com.google.gerrit.reviewdb.StarredChange.Key key = new com.google.gerrit.reviewdb.StarredChange.Key(me, id); remove.add(key); starredChangesCache.evict(key); } } db.starredChanges().insert(add); db.starredChanges().deleteKeys(remove); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",aeac3cc77500d2250b7ade3595001f699fda0d57,run(com.google.gerrit.reviewdb.ReviewDb),run(com.google.gerrit.reviewdb.ReviewDb),6,48,"public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.Account.Id me = getAccountId(); final java.util.Set<com.google.gerrit.reviewdb.Change.Id> existing = currentUser.get().getStarredChanges(); java.util.List<com.google.gerrit.reviewdb.StarredChange> add = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange>(); java.util.List<com.google.gerrit.reviewdb.StarredChange.Key> remove = new java.util.ArrayList<com.google.gerrit.reviewdb.StarredChange.Key>(); if ((req.getAddSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getAddSet()) { if (!(existing.contains(id))) { add.add(new com.google.gerrit.reviewdb.StarredChange(new com.google.gerrit.reviewdb.StarredChange.Key(me, id))); } } } if ((req.getRemoveSet()) != null) { for (final com.google.gerrit.reviewdb.Change.Id id : req.getRemoveSet()) { remove.add(new com.google.gerrit.reviewdb.StarredChange.Key(me, id)); } } db.starredChanges().insert(add); db.starredChanges().deleteKeys(remove); for (com.google.gerrit.reviewdb.StarredChange sc : add) { starredChangesCache.evict(sc.getKey()); } for (com.google.gerrit.reviewdb.StarredChange.Key key : remove) { starredChangesCache.evict(key); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }",5db87f31d95173a30844ff1cdb53cc3368f4bc52,run(com.google.gerrit.reviewdb.ReviewDb),142760,451,461
18454,gerrit-httpd_src_main_java_com_google_gerrit_httpd_rpc_project_ProjectModule.java,0.0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(AddRefRight.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(DeleteRefRights.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectDetailFactory.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },e5688c886495d7c9e058351d21f08dbf32f46cd5,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(AddRefRight.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(DeleteRefRights.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(UpdateParent.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },b2837d49518a39659c4b222d3bdac9bf65567193,configureServlets(),configureServlets(),14,0,@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(ChangeProjectAccess.Factory.class); factory(ReviewProjectAccess.Factory.class); factory(ProjectAccessFactory.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); },dbbb94f84ca3e8d95f0b2242e154fda532cc9487,configureServlets(),29675,154,98
74460,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategyOp.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private com.google.gerrit.reviewdb.client.PatchSet getOrCreateAlreadyMergedPatchSet(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = alreadyMerged.getPatchsetId(); ctx.getChange().setCurrentPatchSet(psId, alreadyMerged.getShortMessage(), ctx.getChange().getOriginalSubject()); com.google.gerrit.reviewdb.client.PatchSet existing = args.psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (existing != null) { return existing; } return args.psUtil.insert(ctx.getDb(), ctx.getRevWalk(), ctx.getUpdate(psId), psId, alreadyMerged, false, null, null); }",b7c45c9ffd616925e194a9116698a0e53e11f306,,getOrCreateAlreadyMergedPatchSet(com.google.gerrit.server.git.BatchUpdate.ChangeContext),12,0,"private com.google.gerrit.reviewdb.client.PatchSet getOrCreateAlreadyMergedPatchSet(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = alreadyMerged.getPatchsetId(); logDebug(""Fixing up already-merged patch set {}"", psId); com.google.gerrit.reviewdb.client.PatchSet prevPs = args.psUtil.current(ctx.getDb(), ctx.getNotes()); ctx.getRevWalk().parseBody(alreadyMerged); ctx.getChange().setCurrentPatchSet(psId, alreadyMerged.getShortMessage(), ctx.getChange().getOriginalSubject()); com.google.gerrit.reviewdb.client.PatchSet existing = args.psUtil.get(ctx.getDb(), ctx.getNotes(), psId); if (existing != null) { logDebug(""Patch set row exists, only updating change""); return existing; } java.util.List<java.lang.String> groups = (prevPs != null) ? prevPs.getGroups() : com.google.gerrit.server.git.GroupCollector.getDefaultGroups(alreadyMerged); return args.psUtil.insert(ctx.getDb(), ctx.getRevWalk(), ctx.getUpdate(psId), psId, alreadyMerged, false, groups, null); }",e02e2e0e7416562c37dc15db780c1c9b34a94d31,getOrCreateAlreadyMergedPatchSet(com.google.gerrit.server.git.BatchUpdate.ChangeContext),83962,199,323
168172,gerrit-server_src_main_java_com_google_gerrit_server_change_SetWorkInProgress.java,0.0,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if (!(rsrc.isUserOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",e371a78788c7f905f17ad0dbf9fa81ffd476dd6f,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",476d16aa1ed30929ea964b4d84f3e415db5977fb,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.WorkInProgressOp.Input)","applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.WorkInProgressOp.Input)",2,0,"@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<?> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.WorkInProgressOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException { com.google.gerrit.reviewdb.client.Change change = rsrc.getChange(); if ((!(rsrc.isUserOwner())) && (!(permissionBackend.user(self).test(GlobalPermission.ADMINISTRATE_SERVER)))) { throw new com.google.gerrit.extensions.restapi.AuthException(""not allowed to set work in progress""); } if ((change.getStatus()) != (com.google.gerrit.reviewdb.client.Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""change is "" + (com.google.gerrit.server.ChangeUtil.status(change)))); } if (change.isWorkInProgress()) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""change is already work in progress""); } try (com.google.gerrit.server.update.BatchUpdate bu = updateFactory.create(db.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(rsrc.getChange().getId(), opFactory.create(true, input)); bu.execute(); return com.google.gerrit.extensions.restapi.Response.ok(""""); } }",506069508469a9bae1a193eb5e533a07d273ffec,"applyImpl(com.google.gerrit.server.update.BatchUpdate$Factory,com.google.gerrit.server.change.ChangeResource,com.google.gerrit.server.change.WorkInProgressOp.Input)",65056,392,407
92290,src_main_java_com_googlesource_gerrit_plugins_its_base_its_ItsConfig.java,3.0,"public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy() { return gerritConfig.getEnum(""commentlink"", getCommentLinkName(), ""association"", ItsAssociationPolicy.OPTIONAL); }",9955f41895ba76c974ad5d77bce55e722e0a1736,"public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy() { return getConfigEnum(""commentlink"", getCommentLinkName(), ""association"", ItsAssociationPolicy.OPTIONAL); }",0b53abad764bfb6bc0c98d810289b106ab1d055a,getItsAssociationPolicy(),getItsAssociationPolicy(),7,6,"public com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy getItsAssociationPolicy() { com.googlesource.gerrit.plugins.its.base.validation.ItsAssociationPolicy legacyItsAssociationPolicy = gerritConfig.getEnum(""commentLink"", getCommentLinkName(), ""association"", ItsAssociationPolicy.OPTIONAL); return getPluginConfigEnum(""association"", legacyItsAssociationPolicy); }",61876f15009361d534d8476a4c058c68bd4c7aff,getItsAssociationPolicy(),51869,51,94
113411,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_api_change_ChangeIT.java,5.0,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); }",6adff95ffdd2dc09ab3b0fc8128bd2bd5c220417,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); assertThat(revertChange.revertOf).isEqualTo(r.getChange().getId().get()); }",b713852fcaa0ae5f1b211e1c20063209be885674,revert(),revert(),5,5,"@org.junit.Test public void revert() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).submit(); ChangeInfo revertChange = gApi.changes().id(r.getChangeId()).revert().get(); java.util.List<com.google.gerrit.extensions.common.ChangeMessageInfo> sourceMessages = new java.util.ArrayList(gApi.changes().id(r.getChangeId()).get().messages); assertThat(sourceMessages).hasSize(4); java.lang.String expectedMessage = java.lang.String.format(""Created a revert of this change as %s"", revertChange.changeId); assertThat(sourceMessages.get(3).message).isEqualTo(expectedMessage); assertThat(revertChange.messages).hasSize(1); assertThat(revertChange.messages.iterator().next().message).isEqualTo(""Uploaded patch set 1.""); assertThat(revertChange.revertOf).isEqualTo(gApi.changes().id(r.getChangeId()).get()._number); }",6c481425a72c5bfc9999773d970358f7d59c1aef,revert(),128464,295,306
61604,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_101.java,,,,"private boolean toBoolean(java.lang.String v) { com.google.common.base.Preconditions.checkState((!(com.google.common.base.Strings.isNullOrEmpty(v)))); return v.equals(""Y""); }",e59931448d8b7e5cd419942a2db7c52c3d18c2c4,,toBoolean(java.lang.String),40,2,"private void recreatePK(com.google.gwtorm.server.StatementExecutor executor, java.lang.String tableName, com.google.gerrit.server.schema.Schema_101.PrimaryKey pk, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if ((pk.oldNameInDb) == null) { ui.message(java.lang.String.format(""warning: primary key for table %s didn't exist ... "", tableName)); } else { if ((dialect) instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { executor.execute((((""ALTER TABLE "" + tableName) + "" DROP CONSTRAINT "") + (pk.oldNameInDb))); } else { executor.execute(((""ALTER TABLE "" + tableName) + "" DROP PRIMARY KEY"")); } } executor.execute(((((""ALTER TABLE "" + tableName) + "" ADD PRIMARY KEY("") + (com.google.common.base.Joiner.on("","").join(pk.cols))) + "")"")); }",f0c93bd7fdf21e51abac640577391ff7bc237ece,"recreatePK(com.google.gwtorm.server.StatementExecutor,java.lang.String,com.google.gerrit.server.schema.Schema_101$PrimaryKey,com.google.gerrit.server.schema.UpdateUI)",127842,51,235
53316,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_Header.java,2.0,boolean hasPrev() { return hasPrev; },e1427dfb6b13ad4ee4139ae21ea41df192fafd95,java.lang.Runnable navigate(com.google.gerrit.client.diff.SideBySide2.Direction dir) { switch (dir) { case PREV : return new java.lang.Runnable() { @java.lang.Override public void run() { (hasPrev ? prev : up).go(); } }; case NEXT : return new java.lang.Runnable() { @java.lang.Override public void run() { (hasNext ? next : up).go(); } }; default : return new java.lang.Runnable() { @java.lang.Override public void run() { } }; } },be7706878870fff3a6a72a0fa370583ecd5bf783,hasPrev(),navigate(com.google.gerrit.client.diff.SideBySide2$Direction),3,19,java.lang.Runnable navigate(com.google.gerrit.client.diff.Direction dir) { switch (dir) { case PREV : return new java.lang.Runnable() { @java.lang.Override public void run() { (hasPrev ? prev : up).go(); } }; case NEXT : return new java.lang.Runnable() { @java.lang.Override public void run() { (hasNext ? next : up).go(); } }; default : return new java.lang.Runnable() { @java.lang.Override public void run() { } }; } },bd080236e8fec5d7f1e6cb3e912afabcc93fd267,navigate(com.google.gerrit.client.diff.Direction),180830,136,132
140535,java_com_google_gerrit_server_patchlib_IntraLineDiffArgs.java,3.0,public abstract com.google.gerrit.server.patch.Text aText();,8a6bfbf4e4eaecb95e7ce1a7af1bf6b5483e57fb,public abstract com.google.gerrit.server.patchlib.Text aText();,e2344e29faa6d43df3b408213c8d592ffdb6d3f9,aText(),aText(),11,3,public abstract com.google.gerrit.server.diff.Text aText();,28918853edcf0df87409f891bbcacddea365a718,aText(),15218,18,17
63653,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,10.0,private void renderLinks() { for (com.google.gerrit.client.ui.InlineHyperlink link : getLinks()) { linkPanel.add(link); } },3cec05d7ed82d1af9003c277afcf4cd9a9912c23,private void renderLinks(com.google.gerrit.client.editor.ChangeEditInfo info) { for (com.google.gerrit.client.ui.InlineHyperlink link : getLinks()) { linkPanel.add(link); } if (info != null) { java.util.List<com.google.gerrit.client.DiffWebLinkInfo> diffWebLinks = com.google.gerrit.client.rpc.Natives.asList(info.web_links()); if (diffWebLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : diffWebLinks) { linkPanel.add(webLink.toAnchor()); } } } },1291bdf263f6f24119775338eb7df52eb4868cad,renderLinks(),renderLinks(com.google.gerrit.client.editor.ChangeEditInfo),10,27,"private void renderLinks(com.google.gerrit.client.editor.EditFileInfo info, com.google.gerrit.client.diff.DiffInfo diffInfo) { for (com.google.gerrit.client.ui.InlineHyperlink link : getLinks()) { linkPanel.add(link); } if (info != null) { renderPluginLinks(com.google.gerrit.client.rpc.Natives.asList(info.web_links())); } else if (diffInfo != null) { renderPluginLinks(com.google.gerrit.client.rpc.Natives.asList(diffInfo.web_links())); } }",5a4b67e2ce7cfe91e94ce2f05defcdd94c604770,"renderLinks(com.google.gerrit.client.editor.EditFileInfo,com.google.gerrit.client.diff.DiffInfo)",192266,157,143
72417,gerrit-server_src_main_java_com_google_gerrit_server_StarredChangesUtil.java,,,,"@java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""-"" + (changeId.get()))); }",8ad279a55bd01bc414b67fde819721e6b9035753,,apply(java.lang.String),11,5,"@java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith((""/"" + (changeId.get()))); }",14cb035b606795eaa3eb54a642b484aa1b2f5009,apply(java.lang.String),59026,36,35
59601,gerrit-server_src_main_java_com_google_gerrit_server_index_ChangeBatchIndexer.java,5.0,"private java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.Multimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.lib.Repository repo = null; com.google.gerrit.reviewdb.server.ReviewDb db = null; try { repo = repoManager.openRepository(project); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.ALL); db = schemaFactory.open(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, c)); } } new com.google.gerrit.server.index.ChangeBatchIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.ChangeBatchIndexer.log.error(rnfe.getMessage()); } finally { if (db != null) { db.close(); } if (repo != null) { repo.close(); } } return null; } }; }",9d4bcd24f7710ac4271b57b7497dae114861042a,"private java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.Multimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.lib.Repository repo = null; com.google.gerrit.reviewdb.server.ReviewDb db = null; try { repo = repoManager.openRepository(project); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.ALL); db = schemaFactory.open(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, c)); } } new com.google.gerrit.server.index.ChangeBatchIndexer.ProjectIndexer(indexer, recursiveMerger, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.ChangeBatchIndexer.log.error(rnfe.getMessage()); } finally { if (db != null) { db.close(); } if (repo != null) { repo.close(); } } return null; } }; }",2c0dfe8a5b4c3a454b791d84208764db962f570a,"reindexProject(com.google.gerrit.server.index.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)","reindexProject(com.google.gerrit.server.index.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)",4,5,"private java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.Multimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.lib.Repository repo = null; com.google.gerrit.reviewdb.server.ReviewDb db = null; try { repo = repoManager.openRepository(project); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.ALL); db = schemaFactory.open(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, c)); } } new com.google.gerrit.server.index.ChangeBatchIndexer.ProjectIndexer(indexer, mergeStrategy, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.ChangeBatchIndexer.log.error(rnfe.getMessage()); } finally { if (db != null) { db.close(); } if (repo != null) { repo.close(); } } return null; } }; }",2fd8922e8f2205d3060a9a09a01b1561c653ed35,"reindexProject(com.google.gerrit.server.index.ChangeIndexer,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.server.git.MultiProgressMonitor.Task,com.google.gerrit.server.git.MultiProgressMonitor.Task,java.io.PrintWriter)",54606,497,497
109734,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_RebuildNoteDbIT.java,0.0,"@org.junit.Test public void rebuildEmptySite() throws java.lang.Exception { initSite(); com.google.common.io.Files.asCharSink(new java.io.File(sitePath.toString(), ""etc/gerrit.config""), java.nio.charset.StandardCharsets.UTF_8, FileWriteMode.APPEND).write(com.google.gerrit.server.notedb.ConfigNotesMigration.allEnabledConfig().toText()); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit(""RebuildNoteDb"", ""-d"", sitePath.toString(), ""--show-stack-trace""); }",15e82fef5e68f518ed1c918775848b5e7d91a062,"@org.junit.Test public void rebuildEmptySiteStartingWithNoteDbEnabled() throws java.lang.Exception { initSite(); setNotesMigrationState(NotesMigrationState.NOTE_DB); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit(""RebuildNoteDb"", ""-d"", sitePath, ""--show-stack-trace""); }",cfde429eb1245f35c94041f9b2d478a878beae1f,rebuildEmptySite(),rebuildEmptySiteStartingWithNoteDbEnabled(),5,5,"@org.junit.Test public void rebuildEmptySiteStartingWithNoteDbEnabled() throws java.lang.Exception { initSite(); setNotesMigrationState(NotesMigrationState.NOTE_DB_UNFUSED); com.google.gerrit.acceptance.pgm.RebuildNoteDbIT.runGerrit(""RebuildNoteDb"", ""-d"", sitePath, ""--show-stack-trace""); }",7fd003117033de596a6c6e7e35ba187785647a15,rebuildEmptySiteStartingWithNoteDbEnabled(),23849,82,86
93272,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_SuggestReviewersIT.java,13.0,"@org.junit.Before public void setUp() throws java.lang.Exception { group1 = group(""users1""); group2 = group(""users2""); group3 = group(""users3""); user1 = user(""user1"", ""First1 Last1"", group1); user2 = user(""user2"", ""First2 Last2"", group2); user3 = user(""user3"", ""First3 Last3"", group1, group2); user4 = user(""jdoe"", ""John Doe"", ""JDOE""); }",bd40f92601e8df57d016a519b47d9974564eb70e,"@org.junit.Before public void setUp() throws java.lang.Exception { group1 = group(""users1""); group2 = group(""users2""); group3 = group(""users3""); user1 = user(""user1"", ""First1 Last1"", group1); user2 = user(""user2"", ""First2 Last2"", group2); user3 = user(""user3"", ""First3 Last3"", group1, group2); user4 = user(""jdoe"", ""John Doe"", ""JDOE""); anonymousUsers = groups.parse(""Anonymous Users"").getGroupUUID(); allow(allProjects, ""read"", anonymousUsers, ""refs/*""); }",dfdfad0de4d55c27622e8a80a2acddfadcbcc66d,setUp(),setUp(),5,14,"@org.junit.Before public void setUp() throws java.lang.Exception { group1 = group(""users1""); group2 = group(""users2""); group3 = group(""users3""); user1 = user(""user1"", ""First1 Last1"", group1); user2 = user(""user2"", ""First2 Last2"", group2); user3 = user(""user3"", ""First3 Last3"", group1, group2); user4 = user(""jdoe"", ""John Doe"", ""JDOE""); }",bd40f92601e8df57d016a519b47d9974564eb70e,setUp(),115051,134,105
62522,gerrit-server_src_main_java_com_google_gerrit_common_ChangeHookRunner.java,17.0,"private void fireEvent(com.google.gerrit.reviewdb.client.Branch.NameKey branchName, final com.google.gerrit.server.events.RefEvent event) { dispatcher.fireEvent(branchName, event); }",173338f5d88ffb95948e2cdd85e04dc8a18834fd,"private void fireEvent(com.google.gerrit.reviewdb.client.Branch.NameKey branchName, final com.google.gerrit.server.events.RefEvent event) { com.google.gerrit.common.EventDispatcher d = dispatcher.get(); if (d != null) { d.fireEvent(branchName, event); } }",cd1ae092c2bfe75986c0f4e4b30dda20adf9c5f1,"fireEvent(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.events.RefEvent)","fireEvent(com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.events.RefEvent)",15,28,private com.google.common.base.Supplier<com.google.gerrit.server.data.ChangeAttribute> changeAttributeSupplier(final com.google.gerrit.reviewdb.client.Change change) { return com.google.common.base.Suppliers.memoize(new com.google.common.base.Supplier<com.google.gerrit.server.data.ChangeAttribute>() { @java.lang.Override public com.google.gerrit.server.data.ChangeAttribute get() { return eventFactory.asChangeAttribute(change); } }); },1a4bae0a0ed6b62bbfe12110485b19a4a7c573f5,changeAttributeSupplier(com.google.gerrit.reviewdb.client.Change),185632,78,123
107280,gitiles-servlet_src_main_java_com_google_gitiles_doc_MarkdownToHtml.java,34.0,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id).attribute(""href"", (""#"" + id)).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",f786978b8d1cc01905305880d2353aac64d313e7,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id.toLowerCase()).attribute(""href"", (""#"" + (id.toLowerCase()))).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",2a7c7a9e957905b2cb4af1927da91230abfbe245,visit(org.commonmark.node.Heading),visit(org.commonmark.node.Heading),4,34,"@java.lang.Override public void visit(org.commonmark.node.Heading node) { outputNamedAnchor = false; java.lang.String tag = ""h"" + (node.getLevel()); html.open(tag); java.lang.String id = toc.idFromHeader(node); if (id != null) { html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id).attribute(""href"", (""#"" + id)).open(""span"").close(""span"").close(""a""); html.open(""a"").attribute(""class"", ""h"").attribute(""name"", id.toLowerCase()).attribute(""href"", (""#"" + (id.toLowerCase()))).open(""span"").close(""span"").close(""a""); } visitChildren(node); html.close(tag); outputNamedAnchor = true; }",803f40e62c594555714590c2b73fcc90ef35014a,visit(org.commonmark.node.Heading),150553,139,181
62931,gerrit-gwtui_src_main_java_com_google_gerrit_client_changes_ChangeTable2.java,19.0,"@java.lang.Override protected void applyDataRowStyle(final int row) { super.applyDataRowStyle(row); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STAR, Gerrit.RESOURCES.css().iconCell()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_ID; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().dataCell()); } fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SUBJECT, Gerrit.RESOURCES.css().cSUBJECT()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STATUS, Gerrit.RESOURCES.css().cSTATUS()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_OWNER, Gerrit.RESOURCES.css().cOWNER()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_LAST_UPDATE, Gerrit.RESOURCES.css().cLastUpdate()); if ((!(com.google.gerrit.client.Gerrit.isSignedIn())) || (!(com.google.gerrit.client.Gerrit.getUserAccount().getGeneralPreferences().isLegacycidInChangeTable()))) { fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_ID, Gerrit.RESOURCES.css().dataCellHidden()); } int i = com.google.gerrit.client.changes.ChangeTable2.C_SIZE; fmt.addStyleName(row, (i++), Gerrit.RESOURCES.css().cSIZE()); for (; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().cAPPROVAL()); } }",c18e8a25c5cbe7c7b6762399affda12720fb600b,"@java.lang.Override protected void applyDataRowStyle(final int row) { super.applyDataRowStyle(row); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STAR, Gerrit.RESOURCES.css().iconCell()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_ID; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().dataCell()); } if (!(showLegacyId)) { fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_ID, Gerrit.RESOURCES.css().dataCellHidden()); } fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SUBJECT, Gerrit.RESOURCES.css().cSUBJECT()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STATUS, Gerrit.RESOURCES.css().cSTATUS()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_OWNER, Gerrit.RESOURCES.css().cOWNER()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_LAST_UPDATE, Gerrit.RESOURCES.css().cLastUpdate()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SIZE, Gerrit.RESOURCES.css().cSIZE()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_SIZE; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().cAPPROVAL()); } }",87e265850ab9b16bf090b3dc6031996b6b261f17,applyDataRowStyle(int),applyDataRowStyle(int),2,19,"@java.lang.Override protected void applyDataRowStyle(final int row) { super.applyDataRowStyle(row); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STAR, Gerrit.RESOURCES.css().iconCell()); for (int i = com.google.gerrit.client.changes.ChangeTable2.C_ID; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().dataCell()); } if (!(showLegacyId)) { fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_ID, Gerrit.RESOURCES.css().dataCellHidden()); } fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SUBJECT, Gerrit.RESOURCES.css().cSUBJECT()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_STATUS, Gerrit.RESOURCES.css().cSTATUS()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_OWNER, Gerrit.RESOURCES.css().cOWNER()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_LAST_UPDATE, Gerrit.RESOURCES.css().cLastUpdate()); fmt.addStyleName(row, com.google.gerrit.client.changes.ChangeTable2.C_SIZE, Gerrit.RESOURCES.css().cSIZE()); for (int i = (com.google.gerrit.client.changes.ChangeTable2.C_SIZE) + 1; i < (columns); i++) { fmt.addStyleName(row, i, Gerrit.RESOURCES.css().cAPPROVAL()); } }",c7ddc23f8efe6e9183328d36b8cd6bae59442a11,applyDataRowStyle(int),23244,429,432
47670,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_CodeMirrorDemo.java,21.0,"private com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.changes.CommentInfo info, boolean doSave) { com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(this, revision, info, commentLinkProcessor, true, doSave); addCommentBox(info, box); if (!doSave) { box.setEdit(true); } getLineBoxMapFromSide(info.side()).put(((info.line()) - 1), box); return box; }",d0807a64a1e97f4d7385b1418229d619e8a3bc6d,"private com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.changes.CommentInfo info, boolean doSave, com.google.gerrit.client.diff.PublishedBox replyTo) { com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(this, revision, info, commentLinkProcessor, true, doSave); addCommentBox(info, box, replyTo); if (!doSave) { box.setEdit(true); } net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(info.side()).getLineHandle(((info.line()) - 1)); lineActiveBoxMap.put(handle, box); return box; }",0123e421ed57aa2e702652fe559575a6bb835ad8,"addDraftBox(com.google.gerrit.client.changes.CommentInfo,boolean)","addDraftBox(com.google.gerrit.client.changes.CommentInfo,boolean,com.google.gerrit.client.diff.PublishedBox)",4,10,"private com.google.gerrit.client.diff.DraftBox addDraftBox(com.google.gerrit.client.changes.CommentInfo info, boolean doSave) { com.google.gerrit.client.diff.DraftBox box = new com.google.gerrit.client.diff.DraftBox(this, revision, info, commentLinkProcessor, true, doSave); addCommentBox(info, box); if (!doSave) { box.setEdit(true); } net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(info.side()).getLineHandle(((info.line()) - 1)); lineActiveBoxMap.put(handle, box); return box; }",cc6da7527dde02db9134baecff30b4f4e5310475,"addDraftBox(com.google.gerrit.client.changes.CommentInfo,boolean)",115322,174,155
142972,src_test_java_com_googlesource_gerrit_plugins_its_base_validation_ItsValidateCommentTest.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.regex.Pattern.compile(""SKIP"")).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage SKIP"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage SKIP"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }",e037f5445fb006a3f903ecd5032cb3898304c82e,,testOnlySkipMatching(),6,2,"public void testOnlySkipMatching() throws com.google.gerrit.server.git.validators.CommitValidationException { java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> ret; com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment ivc = injector.getInstance(com.googlesource.gerrit.plugins.its.base.validation.ItsValidateComment.class); org.eclipse.jgit.transport.ReceiveCommand command = createMock(org.eclipse.jgit.transport.ReceiveCommand.class); org.eclipse.jgit.revwalk.RevCommit commit = createMock(org.eclipse.jgit.revwalk.RevCommit.class); com.google.gerrit.server.events.CommitReceivedEvent event = newCommitReceivedEvent(command, project, null, commit, null); expect(itsConfig.getItsAssociationPolicy()).andReturn(ItsAssociationPolicy.MANDATORY).atLeastOnce(); expect(itsConfig.getDummyIssuePattern()).andReturn(java.util.Optional.of(java.util.regex.Pattern.compile(""SKIP""))).atLeastOnce(); expect(commit.getFullMessage()).andReturn(""TestMessage SKIP"").atLeastOnce(); expect(commit.getId()).andReturn(commit).anyTimes(); expect(commit.getName()).andReturn(""TestCommit"").anyTimes(); expect(issueExtractor.getIssueIds(""TestMessage SKIP"")).andReturn(new java.lang.String[]{ }).atLeastOnce(); replayMocks(); ret = ivc.onCommitReceived(event); assertEmptyList(ret); }",3073022bedd49e43102d3e51333d0ce474268dcb,testOnlySkipMatching(),7344,344,353
46154,gerrit-server_src_test_java_com_google_gerrit_server_query_change_IndexRewriteTest.java,,,,@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(); },c007b0473d8bf881f7ba35794210235149f03a39,,match(com.google.gerrit.server.query.change.ChangeData),4,0,"public void testDuplicateSimpleNonIndexOnlyPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = parse(""status:new project:p file:a""); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite(in); assertSame(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(in.getChild(0), in.getChild(1), wrap(com.google.gerrit.server.query.Predicate.and(in.getChild(0), in.getChild(2)))), out.getChildren()); }",7333466a057d78cc269ea688c61cd6511aaaa1c6,testDuplicateSimpleNonIndexOnlyPredicates(),1947,51,172
57990,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeUpdate.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void putComment(com.google.gerrit.reviewdb.client.PatchLineComment comment) { commentsToAdd.add(comment); },259150eadac8b8232db00ae3a44a12c191f23057,,putComment(com.google.gerrit.reviewdb.client.PatchLineComment),10,22,"public void putComment(com.google.gerrit.reviewdb.client.PatchLineComment comment) { checkArgument(((psId) != null), ""setPatchSetId must be called before putComment""); checkArgument(com.google.gerrit.server.notedb.CommentsInNotesUtil.getCommentPsId(comment).equals(psId), ""Comment on %s doesn't match previous patch set %s"", com.google.gerrit.server.notedb.CommentsInNotesUtil.getCommentPsId(comment), psId); checkArgument(((comment.getRevId()) != null)); if ((comment.getSide()) == 0) { commentsForBase.add(comment); } else { commentsForPs.add(comment); } }",3849fa9ebe86a3605028e9af0227041788884c3d,putComment(com.google.gerrit.reviewdb.client.PatchLineComment),90264,32,161
51817,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ProjectApi.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,static com.google.gerrit.client.projects.ProjectApi.ConfigValueInput create() { return ((com.google.gerrit.client.projects.ProjectApi.ConfigValueInput) (createObject())); },26119df7473e2164b3c6d0ee8d28809ef2ce44f9,,create(),16,13,static com.google.gerrit.client.projects.ProjectApi.StringMap create() { return ((com.google.gerrit.client.projects.ProjectApi.StringMap) (createObject())); },80fdaf4ac484a3b28d34251bd652c1b04b4e59b8,create(),149597,46,44
79762,gerrit-server_src_main_java_com_google_gerrit_server_account_WatchConfig.java,9.0,"java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }",e84d9300bcd88c6ca50169b4712d118abb7a3ce1,"java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }",2a30a20564f8a1b2dea4985524a2725c3ea026fc,getProjectWatches(),getProjectWatches(),33,6,"java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }",1d06028b1bc673e05b21a270f84b27c9db53519d,getProjectWatches(),155642,62,62
98974,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_project_ProjectWatchIT.java,3.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@org.junit.Test public void watchProjectNotifyForDraftChange() throws java.lang.Exception { java.lang.String watchedProject = createProject(""watchedProject"").get(); setApiUser(user); watch(watchedProject, null); grant(Permission.VIEW_DRAFTS, new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), ""refs/*"", false, com.google.gerrit.acceptance.server.project.REGISTERED_USERS); setApiUser(admin); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> watchedRepo = cloneProject(new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), admin); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), watchedRepo, ""TRIGGER"", ""a"", ""a1"").to(""refs/for/master%draft""); r.assertOkStatus(); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = messages.get(0); assertThat(m.rcpt()).containsExactly(user.emailAddress); assertThat(m.body()).contains(""Change subject: TRIGGER\n""); assertThat(m.body()).contains(""Gerrit-PatchSet: 1\n""); }",599339873126bce9954e22f1ae3e985f36e138af,,watchProjectNotifyForDraftChange(),3,6,"@org.junit.Test public void watchProjectNotifyOnDraftChange() throws java.lang.Exception { java.lang.String watchedProject = createProject(""watchedProject"").get(); com.google.gerrit.extensions.common.GroupInfo groupThatCanViewDrafts = gApi.groups().create(""groupThatCanViewDrafts"").get(); grant(Permission.VIEW_DRAFTS, new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), ""refs/*"", false, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(groupThatCanViewDrafts.id)); setApiUser(user); watch(watchedProject, null); com.google.gerrit.acceptance.TestAccount userThatCanViewDrafts = accounts.create(""user2"", ""user2@test.com"", ""User2"", groupThatCanViewDrafts.name); setApiUser(userThatCanViewDrafts); watch(watchedProject, null); setApiUser(admin); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> watchedRepo = cloneProject(new com.google.gerrit.reviewdb.client.Project.NameKey(watchedProject), admin); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), watchedRepo, ""TRIGGER"", ""a"", ""a1"").to(""refs/for/master%draft""); r.assertOkStatus(); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); com.google.gerrit.testutil.FakeEmailSender.Message m = messages.get(0); assertThat(m.rcpt()).containsExactly(userThatCanViewDrafts.emailAddress); assertThat(m.body()).contains(""Change subject: TRIGGER\n""); assertThat(m.body()).contains(""Gerrit-PatchSet: 1\n""); }",315318b6b906a9deee80028b1bd4db8fb3589da1,watchProjectNotifyOnDraftChange(),150006,350,464
70041,gerrit-server_src_test_java_com_google_gerrit_server_util_SubmoduleSectionParserTest.java,3.0,"@org.junit.Test public void testSubmodulesParseWithSubProjectFound() throws java.lang.Exception { java.util.Map<java.lang.String, com.google.gerrit.server.util.SubmoduleSection> sectionsToReturn = new java.util.TreeMap<>(); sectionsToReturn.put(""a/b"", new com.google.gerrit.server.util.SubmoduleSection(""ssh://localhost/a/b"", ""a/b"", ""."")); java.util.Map<java.lang.String, java.lang.String> reposToBeFound = new java.util.HashMap<>(); reposToBeFound.put(""a/b"", ""a/b""); reposToBeFound.put(""b"", ""b""); com.google.gerrit.reviewdb.client.Branch.NameKey superBranchNameKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""super-project""), ""refs/heads/master""); com.google.gerrit.server.util.List<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expectedSubscriptions = new com.google.gerrit.server.util.ArrayList(); expectedSubscriptions.add(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(superBranchNameKey, new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""a/b""), ""refs/heads/master""), ""a/b"")); execute(superBranchNameKey, sectionsToReturn, reposToBeFound, expectedSubscriptions); }",129c56407c60893e2c339943f4a4cc0c1c55c066,"@org.junit.Test public void testSubmodulesParseWithSubProjectFound() throws java.lang.Exception { java.util.Map<java.lang.String, com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection> sectionsToReturn = new java.util.TreeMap<>(); sectionsToReturn.put(""a/b"", new com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection(""ssh://localhost/a/b"", ""a/b"", ""."")); java.util.Map<java.lang.String, java.lang.String> reposToBeFound = new java.util.HashMap<>(); reposToBeFound.put(""a/b"", ""a/b""); reposToBeFound.put(""b"", ""b""); com.google.gerrit.reviewdb.client.Branch.NameKey superBranchNameKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""super-project""), ""refs/heads/master""); com.google.gerrit.server.util.List<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expectedSubscriptions = new com.google.gerrit.server.util.ArrayList(); expectedSubscriptions.add(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(superBranchNameKey, new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""a/b""), ""refs/heads/master""), ""a/b"")); execute(superBranchNameKey, sectionsToReturn, reposToBeFound, expectedSubscriptions); }",c68d22fb11a233c2840989be8d51eeadf8fe3b09,testSubmodulesParseWithSubProjectFound(),testSubmodulesParseWithSubProjectFound(),3,4,"@org.junit.Test public void testSubmodulesParseWithSubProjectFound() throws java.lang.Exception { java.util.Map<java.lang.String, com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection> sectionsToReturn = new java.util.TreeMap<>(); sectionsToReturn.put(""a/b"", new com.google.gerrit.server.util.SubmoduleSectionParserTest.SubmoduleSection(""ssh://localhost/a/b"", ""a/b"", ""."")); java.util.Map<java.lang.String, java.lang.String> reposToBeFound = new java.util.HashMap<>(); reposToBeFound.put(""a/b"", ""a/b""); reposToBeFound.put(""b"", ""b""); com.google.gerrit.reviewdb.client.Branch.NameKey superBranchNameKey = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""super-project""), ""refs/heads/master""); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expectedSubscriptions = com.google.common.collect.Sets.newHashSet(); expectedSubscriptions.add(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(superBranchNameKey, new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey(""a/b""), ""refs/heads/master""), ""a/b"")); execute(superBranchNameKey, sectionsToReturn, reposToBeFound, expectedSubscriptions); }",6b442b4f309a315f4a9e2970b25410a81b79a47f,testSubmodulesParseWithSubProjectFound(),120493,391,382
48623,gerrit-server_src_main_java_com_google_gerrit_server_change_Module.java,1.0,@java.lang.Override protected void configure() { factory(ReviewerResource.Factory.class); factory(AccountInfo.Loader.Factory.class); factory(EmailReviewComments.Factory.class); factory(ChangeInserter.Factory.class); factory(PatchSetInserter.Factory.class); },835ad7b3252bcaf7a5c56927e87bc438a1ba5822,@java.lang.Override protected void configure() { factory(ReviewerResource.Factory.class); factory(AccountInfo.Loader.Factory.class); factory(EmailReviewComments.Factory.class); factory(ChangeInserter.Factory.class); factory(PatchSetInserter.Factory.class); factory(ReviewedFlagCopier.Factory.class); bind(ReviewedFlagCopier.Queue.class); },3fda25992754dd7f463648049e02401dbfb7a300,configure(),configure(),2,1,@java.lang.Override protected void configure() { factory(ReviewerResource.Factory.class); factory(AccountInfo.Loader.Factory.class); factory(EmailReviewComments.Factory.class); factory(ChangeInserter.Factory.class); factory(PatchSetInserter.Factory.class); },835ad7b3252bcaf7a5c56927e87bc438a1ba5822,configure(),56427,86,64
97811,gerrit-server_src_main_java_com_google_gerrit_server_project_ProjectControl.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForRef ref(java.lang.String ref) { return controlForRef(ref).asForRef(); },47345d5d669ebf6da3eb1eb0c925b7af0206d36b,,ref(java.lang.String),18,49,@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForRef ref(java.lang.String ref) { return controlForRef(ref).asForRef().database(db); },f481abf7e7382e6e74409b23f7f97d7588c3f65f,ref(java.lang.String),92443,45,49
47819,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Init.java,16.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private void verifyInstallPluginList(com.google.gerrit.pgm.util.ConsoleUI ui, java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins) { if ((nullOrEmpty(installPlugins)) || (nullOrEmpty(plugins))) { return; } java.util.ArrayList<java.lang.String> copy = com.google.common.collect.Lists.newArrayList(installPlugins); java.util.List<java.lang.String> pluginNames = com.google.common.collect.Lists.transform(plugins, new com.google.common.base.Function<com.google.gerrit.pgm.init.InitPlugins.PluginData, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.pgm.init.InitPlugins.PluginData input) { return input.name; } }); copy.removeAll(pluginNames); if (!(copy.isEmpty())) { ui.message(""Cannot find plugin(s): %s\n"", com.google.common.base.Joiner.on("", "").join(copy)); listPlugins = true; } }",86c729549375066d2f4261d05f1054a6571adf9b,,"verifyInstallPluginList(com.google.gerrit.pgm.util.ConsoleUI,java.util.List)",10,0,"private void verifyInstallPluginList(com.google.gerrit.pgm.util.ConsoleUI ui, java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> plugins) { if ((com.google.gerrit.pgm.Init.nullOrEmpty(installPlugins)) || (com.google.gerrit.pgm.Init.nullOrEmpty(plugins))) { return; } java.util.ArrayList<java.lang.String> copy = com.google.common.collect.Lists.newArrayList(installPlugins); java.util.List<java.lang.String> pluginNames = com.google.common.collect.Lists.transform(plugins, new com.google.common.base.Function<com.google.gerrit.pgm.init.InitPlugins.PluginData, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.pgm.init.InitPlugins.PluginData input) { return input.name; } }); copy.removeAll(pluginNames); if (!(copy.isEmpty())) { ui.message(""Cannot find plugin(s): %s\n"", com.google.common.base.Joiner.on("", "").join(copy)); listPlugins = true; } }",1594ce2dfe137eb905729c5e31fb216c07496b82,"verifyInstallPluginList(com.google.gerrit.pgm.util.ConsoleUI,java.util.List)",157948,265,289
62838,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_PreferencesBox.java,19.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onSuccess(java.lang.Void result) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { java.lang.String t = prefs.theme().name().toLowerCase(); view.getCmFromSide(DisplaySide.A).setOption(""theme"", t); view.getCmFromSide(DisplaySide.B).setOption(""theme"", t); } }); }",0ccf8d97f47c616cf45b2fef2ebaf1e4516ee4b3,,onSuccess(java.lang.Void),9,7,"@java.lang.Override public void onSuccess(java.lang.Void result) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { if (((getSelectedTheme()) == newTheme) && (isAttached())) { java.lang.String t = newTheme.name().toLowerCase(); view.getCmFromSide(DisplaySide.A).setOption(""theme"", t); view.getCmFromSide(DisplaySide.B).setOption(""theme"", t); view.setThemeStyles(newTheme.isDark()); } } }); }",4cd6cee8384186df456d0ee0b6016acf480c1abf,onSuccess(java.lang.Void),59681,100,127
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,38.0,"@org.junit.Test public void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, null); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }",7f5704b2622a01486459fe4d66a5c7503b1a559d,"private void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, null); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }",c0101242057246a3c319733d2fef78be31150ce7,addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(),addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),16,0,"private void addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT.Adder adder) throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create(""added"", ""added@example.com"", ""added""); addReviewer(adder, sc.changeId, sc.owner, reviewer.email, com.google.gerrit.acceptance.server.mail.CC_ON_OWN_COMMENTS, null); assertThat(sender).sent(""newchange"", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }",78a179916e7be57ac113f19c8c7a1420aa1e8e2d,addReviewerToReviewableChangeByOwnerCcingSelfInNoteDb(com.google.gerrit.acceptance.server.mail.AddReviewerSenderIT$Adder),145726,199,213
148032,java_com_google_gerrit_server_restapi_change_Files.java,7.0,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; },e9af9d1c2974b7ee4b976d50cfbb36799b71d96b,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.FileResource>> views() { return views; },4ffad7e1839fc410cc66703b8d36553a58bc2068,views(),views(),17,7,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.FileResource>> views() { return views; },e9af9d1c2974b7ee4b976d50cfbb36799b71d96b,views(),216105,60,57
53352,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySide2.java,53.0,"void resizePaddingOnOtherSide(com.google.gerrit.client.diff.DisplaySide mySide, int line) { net.codemirror.lib.CodeMirror cm = getCmFromSide(mySide); net.codemirror.lib.CodeMirror.LineHandle handle = cm.getLineHandle(line); final com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper otherWrapper = linePaddingOnOtherSideMap.get(handle); double myChunkHeight = (cm.heightAtLine((line + 1))) - (cm.heightAtLine(((line - (otherWrapper.getChunkLength())) + 1))); com.google.gwt.dom.client.Element otherPadding = otherWrapper.getElement(); int otherPaddingHeight = otherPadding.getOffsetHeight(); net.codemirror.lib.CodeMirror otherCm = otherCm(cm); int otherLine = otherWrapper.getOtherLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm.getLineHandle(otherLine); if (linePaddingOnOtherSideMap.containsKey(other)) { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper myWrapper = linePaddingOnOtherSideMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingOnOtherSideMap.get(other).getElement(); int myPaddingHeight = myPadding.getOffsetHeight(); myChunkHeight -= myPaddingHeight; double otherChunkHeight = ((otherCm.heightAtLine((otherLine + 1))) - (otherCm.heightAtLine(((otherLine - (myWrapper.getChunkLength())) + 1)))) - otherPaddingHeight; double delta = myChunkHeight - otherChunkHeight; if (delta > 0) { if (myPaddingHeight != 0) { myPadding.getStyle().setHeight(((double) (0)), Unit.PX); myWrapper.getWidget().changed(); } if (otherPaddingHeight != delta) { otherPadding.getStyle().setHeight(delta, Unit.PX); otherWrapper.getWidget().changed(); } } else { if (myPaddingHeight != (-delta)) { myPadding.getStyle().setHeight((-delta), Unit.PX); myWrapper.getWidget().changed(); } if (otherPaddingHeight != 0) { otherPadding.getStyle().setHeight(((double) (0)), Unit.PX); otherWrapper.getWidget().changed(); } } } else if (otherPaddingHeight != myChunkHeight) { otherPadding.getStyle().setHeight(myChunkHeight, Unit.PX); otherWrapper.getWidget().changed(); } }",975506b2f98aa50953c3b10cd212a1c2633a37c4,"private net.codemirror.lib.CodeMirror.RenderLineHandler resizeLinePadding(final com.google.gerrit.client.diff.DisplaySide side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.CodeMirror.LineHandle lh, com.google.gwt.dom.client.Element e) { commentManager.resizePadding(lh); coloringManager.resizePadding(cm, lh, side); } }; }",23d8331c7b54d2a694e3c5e83538f9d7367ebbb8,"resizePaddingOnOtherSide(com.google.gerrit.client.diff.DisplaySide,int)",resizeLinePadding(com.google.gerrit.client.diff.DisplaySide),5,63,"private net.codemirror.lib.CodeMirror.RenderLineHandler resizeLinePadding(final com.google.gerrit.client.diff.DisplaySide side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(net.codemirror.lib.CodeMirror cm, net.codemirror.lib.CodeMirror.LineHandle lh, com.google.gwt.dom.client.Element e) { commentManager.resizePadding(lh); chunkManager.resizePadding(cm, lh, side); } }; }",c0fc5598fef481ea91d97acc371e787d16aabac8,resizeLinePadding(com.google.gerrit.client.diff.DisplaySide),199322,129,128
79747,gerrit-server_src_test_java_com_google_gerrit_testutil_FakeAccountCache.java,1.0,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountProjectWatch>of()); }",0399727ad2c8e64bea04173e65147ff4328ebcd5,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>>()); }",e690bd02c6856aa0cc48a81d7b994e7e16f712a2,newState(com.google.gerrit.reviewdb.client.Account),newState(com.google.gerrit.reviewdb.client.Account),21,1,"private static com.google.gerrit.server.account.AccountState newState(com.google.gerrit.reviewdb.client.Account account) { return new com.google.gerrit.server.account.AccountState(account, com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountGroup.UUID>of(), com.google.common.collect.ImmutableSet.<com.google.gerrit.reviewdb.client.AccountExternalId>of(), new java.util.HashMap<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>>()); }",f61ab0a708f60dd995edb6529c63190475d3ad71,newState(com.google.gerrit.reviewdb.client.Account),168617,169,169
76892,gerrit-gwtui_src_main_java_com_google_gerrit_client_diff_SideBySideChunkManager.java,8.0,"@java.lang.Override void render(com.google.gerrit.client.diff.DiffInfo diff) { super.render(); com.google.gerrit.client.diff.LineMapper mapper = getLineMapper(); chunks = new java.util.ArrayList(); padding = new java.util.ArrayList(); paddingDivs = new java.util.ArrayList(); java.lang.String diffColor = (((diff.metaA()) == null) || ((diff.metaB()) == null)) ? SideBySideTable.style.intralineBg() : SideBySideTable.style.diff(); for (com.google.gerrit.client.diff.DiffInfo.Region current : com.google.gerrit.client.rpc.Natives.asList(diff.content())) { if ((current.ab()) != null) { mapper.appendCommon(current.ab().length()); } else if ((current.skip()) > 0) { mapper.appendCommon(current.skip()); } else if (current.common()) { mapper.appendCommon(current.b().length()); } else { render(current, diffColor); } } if (paddingDivs.isEmpty()) { paddingDivs = null; } }",715911720040b7fd0f60b7e37c34c0321b1cbe07,"@java.lang.Override void render(com.google.gerrit.client.diff.DiffInfo diff) { super.render(); chunks = new java.util.ArrayList(); padding = new java.util.ArrayList(); paddingDivs = new java.util.ArrayList(); java.lang.String diffColor = (((diff.metaA()) == null) || ((diff.metaB()) == null)) ? SideBySideTable.style.intralineBg() : SideBySideTable.style.diff(); for (com.google.gerrit.client.diff.DiffInfo.Region current : com.google.gerrit.client.rpc.Natives.asList(diff.content())) { if ((current.ab()) != null) { mapper.appendCommon(current.ab().length()); } else if ((current.skip()) > 0) { mapper.appendCommon(current.skip()); } else if (current.common()) { mapper.appendCommon(current.b().length()); } else { render(current, diffColor); } } if (paddingDivs.isEmpty()) { paddingDivs = null; } }",df18c36d8237f88c33c0dbf0a1d596c92bcf8853,render(com.google.gerrit.client.diff.DiffInfo),render(com.google.gerrit.client.diff.DiffInfo),4,8,"@java.lang.Override void render(com.google.gerrit.client.diff.DiffInfo diff) { super.render(); chunks = new java.util.ArrayList(); padding = new java.util.ArrayList(); paddingDivs = new java.util.ArrayList(); java.lang.String diffColor = (((diff.metaA()) == null) || ((diff.metaB()) == null)) ? SideBySideTable.style.intralineBg() : SideBySideTable.style.diff(); for (com.google.gerrit.client.diff.DiffInfo.Region current : com.google.gerrit.client.rpc.Natives.asList(diff.content())) { if ((current.ab()) != null) { lineMapper.appendCommon(current.ab().length()); } else if ((current.skip()) > 0) { lineMapper.appendCommon(current.skip()); } else if (current.common()) { lineMapper.appendCommon(current.b().length()); } else { render(current, diffColor); } } if (paddingDivs.isEmpty()) { paddingDivs = null; } }",4be43efe3f22dcc49ab83d419e2c662f4facb63c,render(com.google.gerrit.client.diff.DiffInfo),135502,245,248
34560,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchedProjectsScreen.java,10.0,"public void setPosition(int offsetWidth, int offsetHeight) { if ((preferredPopupWidth) == (-1)) { preferredPopupWidth = offsetWidth; } int top = (grid.getAbsoluteTop()) - 50; int left = 5 + (java.lang.Math.max(((grid.getAbsoluteLeft()) + (grid.getOffsetWidth())), ((watchesTab.getAbsoluteLeft()) + (watchesTab.getOffsetWidth())))); if ((top + offsetHeight) > (com.google.gwt.user.client.Window.getClientHeight())) { top = (com.google.gwt.user.client.Window.getClientHeight()) - offsetHeight; } if ((left + offsetWidth) > (com.google.gwt.user.client.Window.getClientWidth())) { left = (com.google.gwt.user.client.Window.getClientWidth()) - offsetWidth; } if (top < 0) { sp.setHeight((((sp.getOffsetHeight()) + top) + ""px"")); top = 0; } if (left < 0) { sp.setWidth((((sp.getOffsetWidth()) + left) + ""px"")); left = 0; } popup.setPopupPosition(left, top); }",595e4ae89f999976c919f1e975de1c1475c3ef20,@java.lang.Override public void onOpenProjectRow(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent projectListPopupEvent) { doAddNew(); },c998c13fb36e29a539b4c880e726281aff749ebf,"setPosition(int,int)",onOpenProjectRow(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent),10,13,@java.lang.Override protected void openRow(java.lang.String projectName) { nameBox.setText(projectName); doAddNew(); },5866d35b7664ae21c0418427a51ede1692ed757e,openRow(java.lang.String),141500,46,31
73052,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_change_ChangeMessagesIT.java,3.0,"@org.junit.Before public void setTimeForTesting() { systemTimeZone = java.lang.System.setProperty(""user.timezone"", ""US/Eastern""); clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.SECONDS); final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong(new org.joda.time.DateTime(2009, 9, 30, 17, 0, 0).getMillis()); org.joda.time.DateTimeUtils.setCurrentMillisProvider(new org.joda.time.DateTimeUtils.MillisProvider() { @java.lang.Override public long getMillis() { return clockMs.getAndAdd(clockStepMs); } }); }",89648689fe5de11523c1280dcc0023c0837c014d,"@org.junit.Before public void setTimeForTesting() { systemTimeZone = java.lang.System.setProperty(""user.timezone"", ""US/Eastern""); com.google.gerrit.testutil.TestTimeUtil.setClockStep(1, java.util.concurrent.TimeUnit.SECONDS); }",5a58748885392ea400bbdf84bbb6068e70458bc1,setTimeForTesting(),setTimeForTesting(),3,3,"@org.junit.Before public void setTimeForTesting() { systemTimeZone = java.lang.System.setProperty(""user.timezone"", ""US/Eastern""); com.google.gerrit.testutil.TestTimeUtil.resetWithClockStep(1, java.util.concurrent.TimeUnit.SECONDS); }",6b456bcc04e5a8be1e14850820245a0241ffbd88,setTimeForTesting(),125634,65,66
72684,gerrit-launcher_src_main_java_com_google_gerrit_launcher_GerritLauncher.java,0.0,"public static java.nio.file.Path getDeveloperBuckOut() throws java.io.FileNotFoundException { java.lang.Class<com.google.gerrit.launcher.GerritLauncher> self = com.google.gerrit.launcher.GerritLauncher.class; java.net.URL u = self.getResource(((self.getSimpleName()) + "".class"")); if (u == null) { throw new java.io.FileNotFoundException((""Cannot find class "" + (self.getName()))); } else if (""jar"".equals(u.getProtocol())) { java.lang.String p = u.getPath(); try { u = new java.net.URL(p.substring(0, p.indexOf('!'))); } catch (java.net.MalformedURLException e) { java.io.FileNotFoundException fnfe = new java.io.FileNotFoundException((""Not a valid jar file: "" + u)); fnfe.initCause(e); throw fnfe; } } if (!(""file"".equals(u.getProtocol()))) { throw new java.io.FileNotFoundException((""Cannot find extract path from "" + u)); } java.nio.file.Path dir = java.nio.file.Paths.get(u.getPath()); while (!(com.google.gerrit.launcher.GerritLauncher.name(dir).equals(""buck-out""))) { java.nio.file.Path parent = dir.getParent(); if ((parent == null) || (parent.equals(dir))) { throw new java.io.FileNotFoundException((""Cannot find buck-out from "" + u)); } dir = parent; } return dir; }",2fb8ab571870ac1fa855a927c9656546f5618aea,"public static java.nio.file.Path getDeveloperEclipseOut() throws java.io.FileNotFoundException { java.lang.Class<com.google.gerrit.launcher.GerritLauncher> self = com.google.gerrit.launcher.GerritLauncher.class; java.net.URL u = self.getResource(((self.getSimpleName()) + "".class"")); if (u == null) { throw new java.io.FileNotFoundException((""Cannot find class "" + (self.getName()))); } else if (""jar"".equals(u.getProtocol())) { java.lang.String p = u.getPath(); try { u = new java.net.URL(p.substring(0, p.indexOf('!'))); } catch (java.net.MalformedURLException e) { java.io.FileNotFoundException fnfe = new java.io.FileNotFoundException((""Not a valid jar file: "" + u)); fnfe.initCause(e); throw fnfe; } } if (!(""file"".equals(u.getProtocol()))) { throw new java.io.FileNotFoundException((""Cannot find extract path from "" + u)); } java.nio.file.Path dir = java.nio.file.Paths.get(u.getPath()); while (!(com.google.gerrit.launcher.GerritLauncher.name(dir).equals(""eclipse-out""))) { java.nio.file.Path parent = dir.getParent(); if ((parent == null) || (parent.equals(dir))) { throw new java.io.FileNotFoundException((""Cannot find buck-out from "" + u)); } dir = parent; } return dir; }",a7839cb67add1a0d616c9d1cfde9c8eec2b3917d,getDeveloperBuckOut(),getDeveloperEclipseOut(),5,19,"public static java.nio.file.Path getDeveloperEclipseOut() throws java.io.FileNotFoundException { return com.google.gerrit.launcher.GerritLauncher.resolveInSourceRoot(""eclipse-out""); }",7e5e68c3020ab2f672ffb206b6d56491485604b0,getDeveloperEclipseOut(),134103,352,47
110997,src_main_java_com_ericsson_gerrit_plugins_highavailability_Setup.java,0.0,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDir = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, null); if (!(com.google.common.base.Strings.isNullOrEmpty(sharedDir))) { java.nio.file.Path shared = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(shared, (""cannot create "" + shared)); } }",066e88db772d59171ccb333c07d175890861f883,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDirDefault = (ui.isBatch()) ? ""shared"" : null; java.lang.String shared = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.SHARED_DIRECTORY_KEY, sharedDirDefault); if (!(com.google.common.base.Strings.isNullOrEmpty(shared))) { sharedDir = java.nio.file.Paths.get(shared); java.nio.file.Path resolved = site.site_path.resolve(sharedDir); com.google.gerrit.common.FileUtil.mkdirsOrDie(resolved, (""cannot create "" + resolved)); } }",a05183b3b6bd9686941f67c3db13b8f1d9393541,configureMainSection(),configureMainSection(),5,0,"private void configureMainSection() { ui.header(""Main section""); java.lang.String sharedDirDefault = (ui.isBatch()) ? com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SHARED_DIRECTORY : null; java.lang.String shared = promptAndSetString(""Shared directory"", com.ericsson.gerrit.plugins.highavailability.Configuration.MAIN_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SHARED_DIRECTORY_KEY, sharedDirDefault); if (!(com.google.common.base.Strings.isNullOrEmpty(shared))) { java.nio.file.Path resolved = site.site_path.resolve(java.nio.file.Paths.get(shared)); com.google.gerrit.common.FileUtil.mkdirsOrDie(resolved, (""cannot create "" + resolved)); } }",5f2a1c7738114ee3afa2d398b26168795a96cecb,configureMainSection(),73287,174,190
60504,src_main_java_com_googlesource_gerrit_plugins_xdocs_XDocWebLink.java,1.0,"@java.lang.Override public java.lang.String getImageUrl() { return (""plugins/"" + (pluginName)) + ""/static/readme.png""; }",39a551a98fdeb4cc22be1b1816aa4230bdcc76f6,"protected java.lang.String getImageUrl() { return (""plugins/"" + (pluginName)) + ""/static/readme.png""; }",052af24bed63c2c6617a6a8e24b227f109a76eb9,getImageUrl(),getImageUrl(),2,0,"private java.lang.String getImageUrl() { return (""plugins/"" + (pluginName)) + ""/static/readme.png""; }",fa2abed446404fcbf0c2494f1f6983d3434e19e8,getImageUrl(),52999,30,30
51071,gerrit-sshd_src_main_java_com_google_gerrit_sshd_commands_AproposCommand.java,,,,"@java.lang.Override public void run() throws java.lang.Exception { java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> res = searcher.doQuery(q); for (com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult docResult : res) { stdout.println(java.lang.String.format(""%s: %s"", docResult.title, docResult.url)); } }",bfbdb39d1b44d87a0e54f61e58767621ffe51063,,run(),3,0,"@java.lang.Override public void run() throws java.lang.Exception { java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> res = searcher.doQuery(q); for (com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult docResult : res) { stdout.println(java.lang.String.format(""%s:\n%s%s\n"", docResult.title, url, docResult.url)); } }",9f13da7d24e3ac5868452caa6de371a01f3ed8c4,run(),50568,105,112
72114,gerrit-server_src_main_java_com_google_gerrit_server_documentation_QueryDocumentationExecutor.java,1.0,"public java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> doQuery(java.lang.String q) throws com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException { if (((parser) == null) || ((searcher) == null)) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(""Documentation search not available""); } try { org.apache.lucene.search.Query query = parser.parse(q); org.apache.lucene.search.TopDocs results = searcher.search(query, java.lang.Integer.MAX_VALUE); org.apache.lucene.search.ScoreDoc[] hits = results.scoreDocs; int totalHits = results.totalHits; java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> out = com.google.common.collect.Lists.newArrayListWithCapacity(totalHits); for (int i = 0; i < totalHits; i++) { com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult result = new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult(); org.apache.lucene.document.Document doc = searcher.doc(hits[i].doc); result.url = doc.get(Constants.URL_FIELD); result.title = doc.get(Constants.TITLE_FIELD); out.add(result); } return out; } catch (java.io.IOException | org.apache.lucene.queryparser.classic.ParseException e) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(e); } }",d57d7e7cb0973afa2c41cbffad082efd4290d4c8,"public java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> doQuery(java.lang.String q) throws com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException { if (((parser) == null) || ((searcher) == null)) { return com.google.common.collect.Lists.newArrayListWithCapacity(0); } try { org.apache.lucene.search.Query query = parser.parse(q); org.apache.lucene.search.TopDocs results = searcher.search(query, java.lang.Integer.MAX_VALUE); org.apache.lucene.search.ScoreDoc[] hits = results.scoreDocs; int totalHits = results.totalHits; java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> out = com.google.common.collect.Lists.newArrayListWithCapacity(totalHits); for (int i = 0; i < totalHits; i++) { com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult result = new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult(); org.apache.lucene.document.Document doc = searcher.doc(hits[i].doc); result.url = doc.get(Constants.URL_FIELD); result.title = doc.get(Constants.TITLE_FIELD); out.add(result); } return out; } catch (java.io.IOException | org.apache.lucene.queryparser.classic.ParseException e) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(e); } }",2dd906e1719284deabada749ef6dedb0676844e5,doQuery(java.lang.String),doQuery(java.lang.String),14,1,"public java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> doQuery(java.lang.String q) throws com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException { if (!(isAvailable())) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(""Documentation search not available""); } try { org.apache.lucene.search.Query query = parser.parse(q); org.apache.lucene.search.TopDocs results = searcher.search(query, java.lang.Integer.MAX_VALUE); org.apache.lucene.search.ScoreDoc[] hits = results.scoreDocs; int totalHits = results.totalHits; java.util.List<com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult> out = com.google.common.collect.Lists.newArrayListWithCapacity(totalHits); for (int i = 0; i < totalHits; i++) { com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult result = new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocResult(); org.apache.lucene.document.Document doc = searcher.doc(hits[i].doc); result.url = doc.get(Constants.URL_FIELD); result.title = doc.get(Constants.TITLE_FIELD); out.add(result); } return out; } catch (java.io.IOException | org.apache.lucene.queryparser.classic.ParseException e) { throw new com.google.gerrit.server.documentation.QueryDocumentationExecutor.DocQueryException(e); } }",7872866fa5bf5844def90a134e014bf031bc340b,doQuery(java.lang.String),183655,368,367
65674,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteLog.java,,,,"public void onDelete(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input options) { org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log, com.google.gerrit.common.TimeUtil.nowMs(), org.apache.log4j.Level.INFO, ""Project Deletion"", java.lang.Thread.currentThread().getName(), null, null, null, null); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.ACCOUNT_ID, user.getAccountId().toString()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.USER_NAME, user.getUserName()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.PROJECT_NAME, project.get()); if (options != null) { event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.OPTIONS, OutputFormat.JSON_COMPACT.newGson().toJson(options)); } com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log.callAppenders(event); }",7210e6d7c2c50d88b8e180ff5b8ab76633a9f47d,,"onDelete(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.client.Project$NameKey,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input)",8,0,"public void onDelete(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey project, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input options, java.lang.Exception ex) { org.apache.log4j.spi.LoggingEvent event = new org.apache.log4j.spi.LoggingEvent(org.apache.log4j.Logger.class.getName(), com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log, com.google.gerrit.common.TimeUtil.nowMs(), (ex == null ? org.apache.log4j.Level.INFO : org.apache.log4j.Level.ERROR), (ex == null ? ""OK"" : ""FAIL""), java.lang.Thread.currentThread().getName(), null, null, null, null); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.ACCOUNT_ID, user.getAccountId().toString()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.USER_NAME, user.getUserName()); event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.PROJECT_NAME, project.get()); if (options != null) { event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.OPTIONS, OutputFormat.JSON_COMPACT.newGson().toJson(options)); } if (ex != null) { event.setProperty(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.ERROR, ex.toString()); } com.googlesource.gerrit.plugins.deleteproject.DeleteLog.log.callAppenders(event); }",8965ba9aea166829a8ddf0ce718aa334bd44563e,"onDelete(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.reviewdb.client.Project$NameKey,com.googlesource.gerrit.plugins.deleteproject.DeleteProject$Input,java.lang.Exception)",95721,321,388
148032,java_com_google_gerrit_server_group_db_Groups.java,4.0,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",566d52e9f941ffa3a9713a0988c4af4bdc642572,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate account UUID "" + groupUuid)); } }",433bed0c7c3e4c9e40416115b829cc48f3ab81bf,"getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)","getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",17,4,"private static java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.AccountGroup> accountGroups = db.accountGroups().byUUID(groupUuid).toList(); if ((accountGroups.size()) == 1) { return java.util.Optional.of(com.google.common.collect.Iterables.getOnlyElement(accountGroups)); } else if (accountGroups.isEmpty()) { return java.util.Optional.empty(); } else { throw new com.google.gwtorm.server.OrmDuplicateKeyException((""Duplicate group UUID "" + groupUuid)); } }",566d52e9f941ffa3a9713a0988c4af4bdc642572,"getGroupFromReviewDb(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.AccountGroup$UUID)",217593,207,207
56098,gerrit-server_src_main_java_com_google_gerrit_server_plugins_PluginLoader.java,29.0,"public static java.lang.String getPluginName(java.io.File srcFile) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.PluginLoader.getGerritPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)).toLowerCase(); }",80929da35ee37ea003d54be10869467dcc6b4a61,"public java.lang.String getPluginName(java.io.File srcFile) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull(getGerritPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)).toLowerCase(); }",23c48815f17a11c3f71a88280993717788786abb,getPluginName(java.io.File),getPluginName(java.io.File),46,30,"public java.lang.String getPluginName(java.io.File srcFile) throws java.io.IOException { return com.google.common.base.Objects.firstNonNull(getGerritPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)); }",9bb2714d175cb6dbbab5c1ed5530613f474cde5a,getPluginName(java.io.File),94704,70,67
105472,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,32.0,"@java.lang.Override public void rebase(com.google.gerrit.extensions.api.changes.RebaseInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply(change, in); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | java.io.IOException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(""Cannot rebase change"", e); } }",bac4ec140463d6dbfa8952ee7f08f662e17575bc,"@java.lang.Override public void rebase(com.google.gerrit.extensions.api.changes.RebaseInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply(change, in); } catch (java.lang.Exception e) { com.google.gerrit.server.api.changes.ChangeApiImpl.throwRestApiException(""Cannot rebase change"", e); } }",116ce285fea88389376bca9c1ecf5aaa4122765c,rebase(com.google.gerrit.extensions.api.changes.RebaseInput),rebase(com.google.gerrit.extensions.api.changes.RebaseInput),6,30,"@java.lang.Override public void rebase(com.google.gerrit.extensions.api.changes.RebaseInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { rebase.apply(change, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException(""Cannot rebase change"", e); } }",15fb9da23920d49c58c9406bc06a5e00b919ee2d,rebase(com.google.gerrit.extensions.api.changes.RebaseInput),18793,99,96
64140,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_ChangeScreen.java,20.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments == null ? empty : comments.get(0)), (drafts == null ? empty : drafts.get(0))); }",e58df7627aaa0dbe531f30214753a5e1ae155431,,onSuccess(com.google.gerrit.client.rpc.NativeMap),5,66,"@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); }",ef242790d4e71ecdca8aa89faf9246debdf6605f,onSuccess(com.google.gerrit.client.rpc.NativeMap),35211,162,162
63253,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,22.0,"private void initEditor(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> file) { net.codemirror.mode.ModeInfo mode = null; java.lang.String content = """"; if (file != null) { content = file.getResult().asString(); if (prefs.syntaxHighlighting()) { mode = net.codemirror.mode.ModeInfo.findMode(file.getContentType(), path); } } cm = net.codemirror.lib.CodeMirror.create(editor, net.codemirror.lib.Configuration.create().set(""value"", content).set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", prefs.tabSize()).set(""lineWrapping"", false).set(""scrollbarStyle"", ""overlay"").set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""theme"", prefs.theme().name().toLowerCase()).set(""mode"", (mode != null ? mode.mode() : null))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""Cmd-S"", save()).on(""Ctrl-S"", save())); }",4a6dc8c479eee8b511fcdc2fa1730734838dd183,"private void initEditor(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> file) { net.codemirror.mode.ModeInfo mode = null; java.lang.String content = """"; if (file != null) { content = file.getResult().asString(); if (prefs.syntaxHighlighting()) { mode = net.codemirror.mode.ModeInfo.findMode(file.getContentType(), path); } } cm = net.codemirror.lib.CodeMirror.create(editor, net.codemirror.lib.Configuration.create().set(""value"", content).set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", prefs.tabSize()).set(""lineWrapping"", false).set(""scrollbarStyle"", ""overlay"").set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""theme"", prefs.theme().name().toLowerCase()).set(""mode"", (mode != null ? mode.mode() : null))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""Cmd-S"", save()).on(""Ctrl-S"", save())); if ((com.google.gerrit.client.editor.EditScreen.scrollToLine) != 0) { cm.scrollToLine(com.google.gerrit.client.editor.EditScreen.scrollToLine); com.google.gerrit.client.editor.EditScreen.scrollToLine = 0; } }",715988b54226376904adea82a3bb2e179c02700f,initEditor(com.google.gerrit.client.rpc.HttpResponse),initEditor(com.google.gerrit.client.rpc.HttpResponse),6,22,"private void initEditor(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> file) { net.codemirror.mode.ModeInfo mode = null; java.lang.String content = """"; if (file != null) { content = file.getResult().asString(); if (prefs.syntaxHighlighting()) { mode = net.codemirror.mode.ModeInfo.findMode(file.getContentType(), path); } } cm = net.codemirror.lib.CodeMirror.create(editor, net.codemirror.lib.Configuration.create().set(""value"", content).set(""readOnly"", false).set(""cursorBlinkRate"", 0).set(""cursorHeight"", 0.85).set(""lineNumbers"", true).set(""tabSize"", prefs.tabSize()).set(""lineWrapping"", false).set(""scrollbarStyle"", ""overlay"").set(""styleSelectedText"", true).set(""showTrailingSpace"", true).set(""keyMap"", ""default"").set(""theme"", prefs.theme().name().toLowerCase()).set(""mode"", (mode != null ? mode.mode() : null))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on(""Cmd-S"", save()).on(""Ctrl-S"", save())); }",4a6dc8c479eee8b511fcdc2fa1730734838dd183,initEditor(com.google.gerrit.client.rpc.HttpResponse),53540,347,283
47322,gerrit-lucene_src_main_java_com_google_gerrit_lucene_SubIndex.java,5.0,void insert(org.apache.lucene.document.Document doc) throws java.io.IOException { writer.addDocument(doc); },5e7c1cad6bd044a0c963ed99ef72cd98e0da4b43,java.util.concurrent.Future<java.lang.Void> insert(org.apache.lucene.document.Document doc) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture(writer.addDocument(doc)); },a7cdbaa30c11419c88e230353c4a67abf2eb4119,insert(org.apache.lucene.document.Document),insert(org.apache.lucene.document.Document),2,9,com.google.common.util.concurrent.ListenableFuture<java.lang.Void> insert(org.apache.lucene.document.Document doc) throws java.io.IOException { return new com.google.gerrit.lucene.SubIndex.NrtFuture(writer.addDocument(doc)); },701b8a16ad440e99935985428995a4279ee22356,insert(org.apache.lucene.document.Document),196265,60,64
148032,java_com_google_gerrit_server_group_DbGroupMemberAuditListener.java,4.0,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted group "" + groupId)); }",a99b2f15fd41c66e419e7f5b7280ad2505ae122e,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted account "" + groupId)); }",a6b3332ce3d82704968ed924e8df63600c919dca,getGroupName(com.google.gerrit.reviewdb.client.AccountGroup$Id),getGroupName(com.google.gerrit.reviewdb.client.AccountGroup$Id),17,4,"private java.lang.String getGroupName(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { return groupCache.get(groupId).map(InternalGroup::getName).orElse((""Deleted group "" + groupId)); }",a99b2f15fd41c66e419e7f5b7280ad2505ae122e,getGroupName(com.google.gerrit.reviewdb.client.AccountGroup$Id),215416,56,56
64310,gitiles-servlet_src_main_java_com_google_gitiles_doc_GitilesMarkdown.java,5.0,@java.lang.Override public org.parboiled.Rule[] blockPluginRules() { return new org.parboiled.Rule[]{ toc() }; },92fbcd63383d8b540636947d4e768d982ea7c395,"@java.lang.Override public org.parboiled.Rule[] blockPluginRules() { return new org.parboiled.Rule[]{ toc(), note() }; }",deaa9882c64bc90df5938100cf44fe027f28eea4,blockPluginRules(),blockPluginRules(),21,6,"@java.lang.Override public org.parboiled.Rule[] blockPluginRules() { return new org.parboiled.Rule[]{ note(), toc() }; }",fa797b755e88c008752908894240cd0144340142,blockPluginRules(),80742,40,40
37130,gerrit-gwtui_src_main_java_com_google_gerrit_client_patches_PatchSetSelectBox.java,1.0,"private com.google.gwt.user.client.ui.Anchor getDownloadLink() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); if ((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key key = ((idSideA) == null) ? patchKey : new com.google.gerrit.reviewdb.client.Patch.Key(idSideA, patchKey.get()); java.lang.String sideURL = ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) ? ""1"" : ""0""; final java.lang.String base = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + ""cat/""; final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(PatchUtil.C.download()); anchor.setHref((((base + (com.google.gwtorm.client.KeyUtil.encode(key.toString()))) + ""^"") + sideURL)); return anchor; }",bf66179496161805da8df0c4332d087ab642c429,"private com.google.gwt.user.client.ui.Anchor getDownloadLink() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); if ((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key key = ((idSideA) == null) ? patchKey : new com.google.gerrit.reviewdb.client.Patch.Key(idSideA, patchKey.get()); java.lang.String sideURL = ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) ? ""1"" : ""0""; final java.lang.String base = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + ""cat/""; com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.downloadIcon()); final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(); anchor.setHref((((base + (com.google.gwtorm.client.KeyUtil.encode(key.toString()))) + ""^"") + sideURL)); anchor.setTitle(PatchUtil.C.download()); com.google.gwt.user.client.DOM.insertBefore(anchor.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(anchor.getElement())); return anchor; }",20762f52d6d2036b1ae6e066c33d62d0527ad5dc,getDownloadLink(),getDownloadLink(),4,6,"private com.google.gwt.user.client.ui.Anchor createDownloadLink() { boolean isCommitMessage = Patch.COMMIT_MSG.equals(script.getNewName()); if ((isCommitMessage || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) && (0 >= (script.getA().size())))) || (((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.B)) && (0 >= (script.getB().size())))) { return null; } com.google.gerrit.reviewdb.client.Patch.Key key = ((idSideA) == null) ? patchKey : new com.google.gerrit.reviewdb.client.Patch.Key(idSideA, patchKey.get()); java.lang.String sideURL = ((side) == (com.google.gerrit.client.patches.PatchSetSelectBox.Side.A)) ? ""1"" : ""0""; final java.lang.String base = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + ""cat/""; com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.downloadIcon()); final com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(); anchor.setHref((((base + (com.google.gwtorm.client.KeyUtil.encode(key.toString()))) + ""^"") + sideURL)); anchor.setTitle(PatchUtil.C.download()); anchor.setStyleName(style.downloadLink()); com.google.gwt.user.client.DOM.insertBefore(anchor.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(anchor.getElement())); return anchor; }",56199d8c41268cb0a39e51678a78128fb4f1005b,createDownloadLink(),128920,415,425
135371,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_git_AbstractPushForReview.java,90.0,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId()); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",f3f0ddc8c6e6c7a4fb8960b3c2b26533632566e7,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",5a2fcc2432de9ca15ce38b630d49b8c84da78d58,pushNewPatchSetForMasterWithApprovals(),pushNewPatchSetForMasterWithApprovals(),2,90,"@org.junit.Test public void pushNewPatchSetForMasterWithApprovals() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = pushTo(""refs/for/master""); r.assertOkStatus(); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, ""b.txt"", ""anotherContent"", r.getChangeId()); r = push.to(""refs/for/master/%l=Code-Review+2""); ChangeInfo ci = get(r.getChangeId(), com.google.gerrit.acceptance.git.DETAILED_LABELS, com.google.gerrit.acceptance.git.MESSAGES, com.google.gerrit.acceptance.git.DETAILED_ACCOUNTS); LabelInfo cr = ci.labels.get(""Code-Review""); assertThat(com.google.common.collect.Iterables.getLast(ci.messages).message).isEqualTo(""Uploaded patch set 2: Code-Review+2.""); assertThatUserIsOnlyReviewer(ci, admin); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo(""Administrator""); assertThat(cr.all.get(0).value).isEqualTo(2); }",a753a4c66b2d8c6a59b175a3c62025ae8cd64d2f,pushNewPatchSetForMasterWithApprovals(),185265,267,285
49603,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_DraftActions.java,,,,"static void publish(final com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision) { com.google.gerrit.client.changes.ChangeApi.publish(id.get(), revision, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { redisplay(); } public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.changes.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.changes.SubmitFailureDialog(err.getMessage()).center(); redisplay(); } else { super.onFailure(err); } } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); } }); }",cab072b2e51136d383085a5c7f441585feba395b,,"publish(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",20,7,"static void publish(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String revision) { com.google.gerrit.client.changes.ChangeApi.publish(id.get(), revision, com.google.gerrit.client.change.DraftActions.cs(id)); }",a3980890e85e2e42a88e0ddc2805eee7e0b4127b,"publish(com.google.gerrit.reviewdb.client.Change$Id,java.lang.String)",173898,224,72
77324,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyWatchesTable.java,0.0,"@java.lang.Override public void onFailure(final java.lang.Throwable caught) { cbox.setEnabled(true); info.getWatch().setNotify(type, oldVal); cbox.setValue(oldVal); super.onFailure(caught); }",f38787256a2f7d12f40e5e29fe6230a28c61e72f,"@java.lang.Override public void onFailure(java.lang.Throwable caught) { cbox.setEnabled(true); info.notify(type, oldVal); cbox.setValue(oldVal); }",895f1210fb7db6c17343b37fcae12e2b7e9a7e58,onFailure(java.lang.Throwable),onFailure(java.lang.Throwable),9,2,"@java.lang.Override public void onFailure(java.lang.Throwable caught) { cbox.setEnabled(true); info.notify(type, oldVal); cbox.setValue(oldVal); super.onFailure(caught); }",020a73e4608ff6874a66db91f5e8b8a6e1d47daf,onFailure(java.lang.Throwable),159142,43,49
57891,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_AbstractDaemonTest.java,9.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,protected com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context setAccountContext(com.google.gerrit.acceptance.TestAccount account) { return atrScope.set(newRequestContext(account)); },1174d80781bef131d9fa2eb5318f5bfecb25a1c6,,setAccountContext(com.google.gerrit.acceptance.TestAccount),2,17,protected com.google.gerrit.acceptance.AcceptanceTestRequestScope.Context setApiUser(com.google.gerrit.acceptance.TestAccount account) { return atrScope.set(newRequestContext(account)); },2e5e9e11d8d7060d6f3da31177892729f2ee7883,setApiUser(com.google.gerrit.acceptance.TestAccount),157272,50,50
76285,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,4.0,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId);",34deadff7708aabbfaa357e3ef12e2e0dd92f883,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.SubmitInput submitInput);",ddc710699666d0c2904261fccb5df87ef27aeed2,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String)","create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String,com.google.gerrit.extensions.api.changes.SubmitInput)",9,4,"com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notifyHandling);",cf033c1934547c7c38cf0e1ea082036b1033df69,"create(com.google.gerrit.extensions.client.SubmitType,com.google.gerrit.reviewdb.client.Branch$NameKey,com.google.gerrit.server.git.MergeOp.CommitStatus,com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk,com.google.gerrit.server.IdentifiedUser,com.google.gerrit.server.git.MergeTip,org.eclipse.jgit.lib.ObjectInserter,org.eclipse.jgit.lib.Repository,org.eclipse.jgit.revwalk.RevFlag,com.google.gerrit.reviewdb.server.ReviewDb,java.util.Set,java.lang.String,com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling)",30928,233,236
78923,gitiles-servlet_src_main_java_com_google_gitiles_LogServlet.java,3.0,"private static com.google.gitiles.Paginator newPaginator(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, com.google.gitiles.GitilesAccess access) throws java.io.IOException { if (view == null) { return null; } org.eclipse.jgit.revwalk.RevWalk walk = null; try { walk = com.google.gitiles.LogServlet.newWalk(repo, view, access); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { return null; } com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> start; try { start = com.google.gitiles.LogServlet.getStart(view.getParameters(), walk.getObjectReader()); } catch (java.io.IOException e) { walk.close(); throw e; } if (start == null) { return null; } return new com.google.gitiles.Paginator(walk, com.google.gitiles.LogServlet.getLimit(view), start.orNull()); }",57bb79161b04e2cd71aadda7934bb01cdf618e1c,"private static com.google.gitiles.Paginator newPaginator(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, com.google.gitiles.GitilesAccess access) throws java.io.IOException { if (view == null) { return null; } try (org.eclipse.jgit.revwalk.RevWalk walk = com.google.gitiles.LogServlet.newWalk(repo, view, access)) { com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> start; try { start = com.google.gitiles.LogServlet.getStart(view.getParameters(), walk.getObjectReader()); } catch (java.io.IOException e) { throw e; } if (start == null) { return null; } return new com.google.gitiles.Paginator(walk, com.google.gitiles.LogServlet.getLimit(view), start.orNull()); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { return null; } }",033169418e4df87f481ddfd6cb403bb397bc02cc,"newPaginator(org.eclipse.jgit.lib.Repository,com.google.gitiles.GitilesView,com.google.gitiles.GitilesAccess)","newPaginator(org.eclipse.jgit.lib.Repository,com.google.gitiles.GitilesView,com.google.gitiles.GitilesAccess)",4,3,"private static com.google.gitiles.Paginator newPaginator(org.eclipse.jgit.lib.Repository repo, com.google.gitiles.GitilesView view, com.google.gitiles.GitilesAccess access) throws java.io.IOException { if (view == null) { return null; } try (org.eclipse.jgit.revwalk.RevWalk walk = com.google.gitiles.LogServlet.newWalk(repo, view, access)) { if (walk == null) { return null; } com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> start = com.google.gitiles.LogServlet.getStart(view.getParameters(), walk.getObjectReader()); if (start == null) { return null; } return new com.google.gitiles.Paginator(walk, com.google.gitiles.LogServlet.getLimit(view), start.orNull()); } }",ea6205982aa82941cc79cb42c086be9a2016225a,"newPaginator(org.eclipse.jgit.lib.Repository,com.google.gitiles.GitilesView,com.google.gitiles.GitilesAccess)",125189,240,211
30024,gerrit-server_src_main_java_com_google_gerrit_server_account_PerformVisibleGroups.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public void setProjects(final java.util.Set<com.google.gerrit.server.project.ProjectControl> projects) { this.projects = projects; },2b24103a47920e254f7a291680bb54cbbb793608,,setProjects(java.util.Set),3,1,public void setProjects(final java.util.Collection<com.google.gerrit.server.project.ProjectControl> projects) { this.projects = projects; },aef17aa13fc0fe179db509a56f9fb11d96317756,setProjects(java.util.Collection),212780,36,36
99514,src_test_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_HttpClientProviderTest.java,0.0,@java.lang.Override protected void configure() { bind(com.ericsson.gerrit.plugins.highavailability.Configuration.class).toInstance(config); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.class).in(Scopes.SINGLETON); },edac186701d510dfccd9ed9370c75b50a66a0d48,@java.lang.Override protected void configure() { bind(com.ericsson.gerrit.plugins.highavailability.Configuration.class).toInstance(config); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.class).in(Scopes.SINGLETON); bind(com.ericsson.gerrit.plugins.highavailability.peers.PeerInfo.class).toInstance(peerInfo); },2370811faa2e1f461c01de4a6895fa7953206a49,configure(),configure(),2,0,@java.lang.Override protected void configure() { bind(com.ericsson.gerrit.plugins.highavailability.Configuration.class).toInstance(config); bind(org.apache.http.impl.client.CloseableHttpClient.class).toProvider(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpClientProvider.class).in(Scopes.SINGLETON); },edac186701d510dfccd9ed9370c75b50a66a0d48,configure(),190355,117,87
32651,gerrit-server_src_main_java_com_google_gerrit_server_git_ReceiveCommits.java,7.0,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""can not delete references""); } }",c9b6c5e063aed459c2316cee6a727f81edf7a054,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ""Deleting the project configuration is not allowed""); } else { rp.sendMessage((""You need 'Push' rights with the 'Force Push' flag set to delete references."" + (com.google.gerrit.server.git.ReceiveCommits.MESSAGE_FOOTER))); com.google.gerrit.server.git.ReceiveCommits.reject(cmd, ((""Current user '"" + (ctl.getCurrentUser().getUserName())) + ""' can not delete references"")); } } }",142bff3e18774cf000119bbf808aa2a52de66b89,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),parseDelete(org.eclipse.jgit.transport.ReceiveCommand),5,11,"private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { cmd.execute(rp); } else { if (GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())) { reject(cmd, ""cannot delete project configuration""); } else { errors.put(com.google.gerrit.server.git.ReceiveCommits.Error.DELETE, ctl.getRefName()); reject(cmd, ""can not delete references""); } } }",101b0db9eeb94ea9270d4d76d0be83a0a31222ba,parseDelete(org.eclipse.jgit.transport.ReceiveCommand),94825,200,138
147210,java_com_google_gerrit_server_account_PutStatus.java,0.0,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",37041609a9a4a08850fd980102df5e99927feab1,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.update().setStatus(com.google.common.base.Strings.nullToEmpty(newStatus))); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",90b7c09308ec88528e6a289dacf3b23c62492fdb,"apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.api.accounts.StatusInput)","apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.api.accounts.StatusInput)",10,0,"public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.api.accounts.StatusInput input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.api.accounts.StatusInput(); } java.lang.String newStatus = input.status; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.setStatus(newStatus)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } return com.google.common.base.Strings.isNullOrEmpty(account.getStatus()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getStatus()); }",0e0dbc395a5cd8af3dfc21d19857fbf1aba050cd,"apply(com.google.gerrit.server.IdentifiedUser,com.google.gerrit.extensions.api.accounts.StatusInput)",62703,268,253
92634,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_ListSubject.java,,,,"public S element(int index) { com.google.gerrit.acceptance.ListSubject.checkArgument((index >= 0), ""index(%s) must be >= 0"", index); java.util.List<E> list = ((java.util.List<E>) (com.google.gerrit.acceptance.ListSubject.actual())); com.google.gerrit.acceptance.ListSubject.isNotNull(); if (index >= (list.size())) { com.google.gerrit.acceptance.ListSubject.fail((""has an element at index "" + index)); } return elementAssertThatFunction.apply(list.get(index)); }",abdae628984758d36814b61c9e1f6348e6770538,,element(int),2,4,"public S element(int index) { com.google.gerrit.acceptance.ListSubject.checkArgument((index >= 0), ""index(%s) must be >= 0"", index); @java.lang.SuppressWarnings(""unchecked"") java.util.List<E> list = ((java.util.List<E>) (com.google.gerrit.acceptance.ListSubject.actual())); com.google.gerrit.acceptance.ListSubject.isNotNull(); if (index >= (list.size())) { com.google.gerrit.acceptance.ListSubject.fail((""has an element at index "" + index)); } return elementAssertThatFunction.apply(list.get(index)); }",b58287b53e21aeb0fd1e3cce41f24e3b5e97a071,element(int),78046,144,153
90110,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_BuckUtils.java,0.0,"static void build(java.nio.file.Path root, java.nio.file.Path gen, java.lang.String target) throws com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException, java.io.IOException { com.google.gerrit.httpd.raw.BuckUtils.log.info((""buck build "" + target)); java.util.Properties properties = com.google.gerrit.httpd.raw.BuckUtils.loadBuckProperties(gen); java.lang.String buck = firstNonNull(properties.getProperty(""buck""), ""buck""); java.lang.ProcessBuilder proc = new java.lang.ProcessBuilder(buck, ""build"", target).directory(root.toFile()).redirectErrorStream(true); if (properties.containsKey(""PATH"")) { proc.environment().put(""PATH"", properties.getProperty(""PATH"")); } long start = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.Process rebuild = proc.start(); byte[] out; try (java.io.InputStream in = rebuild.getInputStream()) { out = com.google.common.io.ByteStreams.toByteArray(in); } finally { rebuild.getOutputStream().close(); } int status; try { status = rebuild.waitFor(); } catch (java.lang.InterruptedException e) { throw new java.io.InterruptedIOException((""interrupted waiting for "" + buck)); } if (status != 0) { throw new com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException(out); } long time = (com.google.gerrit.common.TimeUtil.nowMs()) - start; com.google.gerrit.httpd.raw.BuckUtils.log.info(java.lang.String.format(""UPDATED %s in %.3fs"", target, (time / 1000.0))); }",4d0616337b1d6383919297c75f3ed6ec58c5c18c,"@java.lang.Override public void build(com.google.gerrit.httpd.raw.Label label) throws com.google.gerrit.httpd.raw.BuildFailureException, java.io.IOException { com.google.gerrit.httpd.raw.BuckUtils.log.info((""buck build "" + label)); java.util.Properties properties = com.google.gerrit.httpd.raw.BuckUtils.loadBuckProperties(targetPath(label)); java.lang.String buck = firstNonNull(properties.getProperty(""buck""), ""buck""); java.lang.ProcessBuilder proc = new java.lang.ProcessBuilder(buck, ""build"", label.fullName()).directory(sourceRoot.toFile()).redirectErrorStream(true); if (properties.containsKey(""PATH"")) { proc.environment().put(""PATH"", properties.getProperty(""PATH"")); } long start = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.Process rebuild = proc.start(); byte[] out; try (java.io.InputStream in = rebuild.getInputStream()) { out = com.google.common.io.ByteStreams.toByteArray(in); } finally { rebuild.getOutputStream().close(); } int status; try { status = rebuild.waitFor(); } catch (java.lang.InterruptedException e) { throw new java.io.InterruptedIOException((""interrupted waiting for "" + buck)); } if (status != 0) { throw new com.google.gerrit.httpd.raw.BuildFailureException(out); } long time = (com.google.gerrit.common.TimeUtil.nowMs()) - start; com.google.gerrit.httpd.raw.BuckUtils.log.info(java.lang.String.format(""UPDATED %s in %.3fs"", label.fullName(), (time / 1000.0))); }",00343abde7998eaeb36e86e2ea5376d45fc83899,"build(java.nio.file.Path,java.nio.file.Path,java.lang.String)",build(com.google.gerrit.httpd.raw.Label),16,1,"@java.lang.Override public void build(com.google.gerrit.httpd.raw.Label label) throws com.google.gerrit.httpd.raw.BuildFailureException, java.io.IOException { com.google.gerrit.httpd.raw.BuckUtils.log.info((""buck build "" + (label.fullName()))); java.util.Properties properties = com.google.gerrit.httpd.raw.BuckUtils.loadBuckProperties(sourceRoot.resolve(""buck-out/gen/tools/buck/buck.properties"")); java.lang.String buck = firstNonNull(properties.getProperty(""buck""), ""buck""); java.lang.ProcessBuilder proc = new java.lang.ProcessBuilder(buck, ""build"", label.fullName()).directory(sourceRoot.toFile()).redirectErrorStream(true); if (properties.containsKey(""PATH"")) { proc.environment().put(""PATH"", properties.getProperty(""PATH"")); } long start = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.Process rebuild = proc.start(); byte[] out; try (java.io.InputStream in = rebuild.getInputStream()) { out = com.google.common.io.ByteStreams.toByteArray(in); } finally { rebuild.getOutputStream().close(); } int status; try { status = rebuild.waitFor(); } catch (java.lang.InterruptedException e) { throw new java.io.InterruptedIOException((""interrupted waiting for "" + buck)); } if (status != 0) { throw new com.google.gerrit.httpd.raw.BuildFailureException(out); } long time = (com.google.gerrit.common.TimeUtil.nowMs()) - start; com.google.gerrit.httpd.raw.BuckUtils.log.info(java.lang.String.format(""UPDATED %s in %.3fs"", label.fullName(), (time / 1000.0))); }",0abfdf374b08a238d4c1e659fd1ef2e7554b3cec,build(com.google.gerrit.httpd.raw.Label),153399,404,425
23526,gerrit-server_src_test_java_com_google_gerrit_rules_common_CommonRulesTest.java,,,,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); java.util.List<com.google.gerrit.common.data.ApprovalType> typeList = new java.util.ArrayList<com.google.gerrit.common.data.ApprovalType>(); typeList.add(com.google.gerrit.rules.common.CommonRulesTest.codeReviewCategory()); typeList.add(com.google.gerrit.rules.common.CommonRulesTest.verifiedCategory()); final com.google.gerrit.common.data.ApprovalTypes types = new com.google.gerrit.common.data.ApprovalTypes(typeList); load(""common_rules_test.pl"", new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.common.data.ApprovalTypes.class).toInstance(types); } }); }",23749c2f9c403d591b0221dbdffaf346ba9691ac,,setUp(),4,3,"@java.lang.Override public void setUp() throws java.lang.Exception { super.setUp(); final com.google.gerrit.common.data.ApprovalTypes types = new com.google.gerrit.common.data.ApprovalTypes(java.util.Arrays.asList(com.google.gerrit.rules.common.CommonRulesTest.codeReviewCategory(), com.google.gerrit.rules.common.CommonRulesTest.verifiedCategory())); load(""common_rules_test.pl"", new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.common.data.ApprovalTypes.class).toInstance(types); } }); }",b66e31f1ca5e6098088103f11c4276e78e36a5ed,setUp(),129501,205,156
66890,src_main_java_com_ericsson_gerrit_plugins_eventslog_SQLStore.java,5.0,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<java.lang.String> events = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = null; for (java.util.Map.Entry<java.lang.String, java.util.Collection<java.lang.String>> entry : eventsDb.getEvents(query).asMap().entrySet()) { try { project = new com.google.gerrit.reviewdb.client.Project.NameKey(entry.getKey()); if (projectControlFactory.controlFor(project, userProvider.get()).isVisible()) { events.addAll(entry.getValue()); } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Database contains a non-existing project, "" + (project.get())) + "", removing project from database""), e); removeProjectEvents(project.get()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Cannot get project visibility info for "" + (project.get())) + "" from cache""), e); } } return events; }",e1f5c4e30104a9ac1bb0215c01578552c298ed15,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<java.lang.String> events = new java.util.ArrayList<>(); java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry> entries = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = null; for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { try { project = new com.google.gerrit.reviewdb.client.Project.NameKey(entry.getKey()); if (projectControlFactory.controlFor(project, userProvider.get()).isVisible()) { entries.addAll(entry.getValue()); } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Database contains a non-existing project, "" + (project.get())) + "", removing project from database""), e); removeProjectEvents(project.get()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Cannot get project visibility info for "" + (project.get())) + "" from cache""), e); } } java.util.Collections.sort(entries, eventsDb.getIdComparator()); for (com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry entry : entries) { events.add(entry.getEvent()); } return events; }",dcb700f597a4d3f547fdbcba45463333a5591828,queryChangeEvents(java.lang.String),queryChangeEvents(java.lang.String),2,5,"@java.lang.Override public java.util.List<java.lang.String> queryChangeEvents(java.lang.String query) throws com.ericsson.gerrit.plugins.eventslog.MalformedQueryException, com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException { if (!(online)) { throw new com.ericsson.gerrit.plugins.eventslog.ServiceUnavailableException(); } java.util.List<java.lang.String> events = new java.util.ArrayList<>(); java.util.List<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry> entries = new java.util.ArrayList<>(); com.google.gerrit.reviewdb.client.Project.NameKey project = null; for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry>> entry : eventsDb.getEvents(query).asMap().entrySet()) { try { project = new com.google.gerrit.reviewdb.client.Project.NameKey(entry.getKey()); if (projectControlFactory.controlFor(project, userProvider.get()).isVisible()) { entries.addAll(entry.getValue()); } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Database contains a non-existing project, "" + (project.get())) + "", removing project from database""), e); removeProjectEvents(project.get()); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn(((""Cannot get project visibility info for "" + (project.get())) + "" from cache""), e); } } java.util.Collections.sort(entries); for (com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry entry : entries) { events.add(entry.getEvent()); } return events; }",a8dd175e7ac1b3cc1006367afe44c5e740d5a719,queryChangeEvents(java.lang.String),37149,472,466
63401,src_main_java_com_googlesource_gerrit_plugins_xdocs_client_ChangeApi.java,0.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static com.google.gerrit.plugin.client.rpc.RestApi change(int id) { return new com.google.gerrit.plugin.client.rpc.RestApi(""/changes/"").id(id); }",c67736d3def3be25d0461c212fd283120327862e,,change(int),4,5,"private static com.google.gerrit.plugin.client.rpc.RestApi change(int id) { return new com.google.gerrit.plugin.client.rpc.RestApi(""/changes/"").id(id); }",6a66a4a3980051e47fe81c39c388724208348617,change(int),205954,48,48
49104,gerrit-gwtexpui_src_main_java_com_google_gwtexpui_clippy_client_CopyableLabel.java,6.0,@java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { swf.getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); },ef671d347982803752b75f932290f4516ce753ff,@java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { if ((event.isVisible()) && (event.contains(this))) { return; } swf.getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); },9d8a2973d32e45ad77ea1a3c1f060684a1513f95,onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent),onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent),2,6,@java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { if (event.contains(this)) { if (event.isVisible()) { swf.getStyle().setVisibility(com.google.gwtexpui.clippy.client.VISIBLE); } } else { swf.getStyle().setVisibility((event.isVisible() ? HIDDEN : VISIBLE)); } },e6f5fd044afca4ffdbbd2cd52273af396ca03f1d,onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent),84231,78,94
89872,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbChangeState.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public static java.sql.Timestamp timeForReadOnlyCheck(long skewMs) { return new java.sql.Timestamp(((com.google.gerrit.common.TimeUtil.nowMs()) - skewMs)); },5064d7a3aa2d41cfd7e202e9b9a39241c2d9b9cb,,timeForReadOnlyCheck(long),14,36,private static java.sql.Timestamp timeForReadOnlyCheck(long skewMs) { return new java.sql.Timestamp(((com.google.gerrit.common.TimeUtil.nowMs()) - skewMs)); },b1ea4f1faf02c0d9a499572044936cbfd8a13f2e,timeForReadOnlyCheck(long),206815,47,47
44373,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ConfigInfo.java,7.0,"public final java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentlinks() { com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> cls = commentlinks0().values(); java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentLinks = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.FindReplace>(cls.length()); for (int i = 0; i < (cls.length()); i++) { com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo cl = cls.get(i); if (!(cl.enabled())) { continue; } if ((cl.link()) != null) { commentLinks.add(new com.google.gwtexpui.safehtml.client.LinkFindReplace(cl.match(), cl.link())); } else { commentLinks.add(new com.google.gwtexpui.safehtml.client.RawFindReplace(cl.match(), cl.html())); } } return commentLinks; }",a1fb3b8906834567e92c63a6d61e8d8cd279745c,final native com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> commentlinks();,c13c0430b6793171e8929c7efa3e6ccfdc016689,commentlinks(),commentlinks(),6,8,"final java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentlinks() { com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> cls = commentlinks0().values(); java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentLinks = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.FindReplace>(cls.length()); for (int i = 0; i < (cls.length()); i++) { com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo cl = cls.get(i); if (!(cl.enabled())) { continue; } if ((cl.link()) != null) { commentLinks.add(new com.google.gwtexpui.safehtml.client.LinkFindReplace(cl.match(), cl.link())); } else { commentLinks.add(new com.google.gwtexpui.safehtml.client.RawFindReplace(cl.match(), cl.html())); } } return commentLinks; }",465ce22456da01e6ae8e64758d3a297ea48a7313,commentlinks(),151797,38,255
68604,gerrit-httpd_src_main_java_com_google_gerrit_httpd_gitweb_GitWebServlet.java,3.0,"@java.lang.Override public void run() { try { final java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(in, ""ISO-8859-1"")); try { java.lang.String line; while ((line = br.readLine()) != null) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error((""CGI: "" + line)); } } finally { br.close(); } } catch (java.io.IOException e) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug(""Unexpected error copying stderr from CGI"", e); } }",bf471cbf049b56f666ad87063b364965afb3627a,"@java.lang.Override public void run() { try { try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(in, ""ISO-8859-1""))) { java.lang.String line; while ((line = br.readLine()) != null) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error((""CGI: "" + line)); } } } catch (java.io.IOException e) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug(""Unexpected error copying stderr from CGI"", e); } }",60285a563c7c36f9776ee98520b14a7cd2471748,run(),run(),5,3,"@java.lang.Override public void run() { try (java.io.BufferedReader br = new java.io.BufferedReader(new java.io.InputStreamReader(in, ""ISO-8859-1""))) { java.lang.String line; while ((line = br.readLine()) != null) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.error((""CGI: "" + line)); } } catch (java.io.IOException e) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.debug(""Unexpected error copying stderr from CGI"", e); } }",5d128b8fa6c03e620b1a938d72fbeb9fe1d37fa0,run(),114168,137,136
52661,gerrit-server_src_main_java_com_google_gerrit_server_contact_EncryptedContactStore.java,2.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.SuppressWarnings(""deprecation"") private final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk() throws java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(org.bouncycastle.openpgp.PGPEncryptedData.CAST5, true, prng, ""BC""); cpk.addMethod(dest); return cpk; }",b4ea01aba7a5d6d9d29a2e08c5c3132a6c1ae692,,cpk(),2,6,"@java.lang.SuppressWarnings(""deprecation"") private final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk() throws java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(org.bouncycastle.openpgp.PGPEncryptedData.CAST5, true, prng, ""BC""); cpk.addMethod(dest); return cpk; }",6c43f07955772907178cc9a7826a9f3c9f1545fa,cpk(),21093,110,109
39401,gerrit-server_src_main_java_com_google_gerrit_server_dashboard_ListDashboards.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> addProjectDashboards(final com.google.gerrit.server.project.ProjectState projectState, java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> all) { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards = projectDashboards(projectState); dashboards.putAll(all); return dashboards; }",9f5de3938fedfafd15586a8649914cfbbd152026,,"addProjectDashboards(com.google.gerrit.server.project.ProjectState,java.util.Map)",11,2,"private java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> addProjectDashboards(final com.google.gerrit.server.project.ProjectState projectState, java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> all, final java.lang.String defaultId) { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards = projectDashboards(projectState, defaultId); dashboards.putAll(all); return dashboards; }",ab1cc2fd21ea0128eb6817774552dac0e7242bf2,"addProjectDashboards(com.google.gerrit.server.project.ProjectState,java.util.Map,java.lang.String)",153581,139,151
118971,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,17.0,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },480573d66a030c300b939755506c7ada1303f123,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = a.approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },347245b704f785ae1af238bc39f87c7ccdd597d9,reviewerUpdates(),reviewerUpdates(),5,17,public java.util.List<com.google.gerrit.server.ReviewerStatusUpdate> reviewerUpdates() throws com.google.gwtorm.server.OrmException { if ((reviewerUpdates) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } reviewerUpdates = approvalsUtil.getReviewerUpdates(notes()); } return reviewerUpdates; },480573d66a030c300b939755506c7ada1303f123,reviewerUpdates(),94411,89,88
142611,java_com_google_gerrit_server_schema_NotesMigrationSchemaFactory.java,0.0,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },63900c1ce25281fd5da04da9db6fb60d4ea1ea65,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if (migration.readChanges()) { if (migration.disableChangeReviewDb()) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { if (groupsMigration.disableGroupReviewDb()) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },a577fe57ed9a4097a3c7d7e78706d18e540ddd6c,open(),open(),3,0,@java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb open() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = delegate.open(); if ((migration.readChanges()) && (migration.disableChangeReviewDb())) { db = new com.google.gerrit.server.schema.NoChangesReviewDbWrapper(db); } if ((groupsMigration.readFromNoteDb()) && (groupsMigration.disableGroupReviewDb())) { db = new com.google.gerrit.server.schema.NoGroupsReviewDbWrapper(db); } if (migration.readChanges()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromChangesReviewDbWrapper(db); } if (groupsMigration.readFromNoteDb()) { db = new com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper(db); } return db; },b0f7e965be3f54ed886ed15a0afa5cc3ed7db9f6,open(),49186,204,222
129873,gerrit-server_src_main_java_com_google_gerrit_server_change_MarkAsUnreviewed.java,,,,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark as Unreviewed"").setTitle(""Mark the change as unreviewed to highlight it in the dashboard"").setVisible(isReviewed(rsrc)); }",4260abaf7f74f7503ebb61604ba2884deabcf28d,,getDescription(com.google.gerrit.server.change.ChangeResource),6,2,"@java.lang.Override public com.google.gerrit.server.change.Description getDescription(com.google.gerrit.server.change.ChangeResource rsrc) { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(""Mark Unreviewed"").setTitle(""Mark the change as unreviewed to highlight it in the dashboard"").setVisible(isReviewed(rsrc)); }",76d5e688d3204b2e992d91e96657576eb2aeed9b,getDescription(com.google.gerrit.server.change.ChangeResource),74719,94,93
147210,javatests_com_google_gerrit_server_query_group_AbstractQueryGroupsTest.java,29.0,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( a) -> { a.setFullName(fullName); a.setPreferredEmail(email); a.setActive(active); }); return id; } }",0f3656791a522722e1aa820ee0c206cfbedc8a57,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.update().setFullName(com.google.common.base.Strings.nullToEmpty(fullName)).setPreferredEmail(com.google.common.base.Strings.nullToEmpty(email)).setActive(active); }); return id; } }",c5e4c28cca2a9cd3addd572dc9f2c026ab16f4bc,"createAccountOutsideRequestContext(java.lang.String,java.lang.String,java.lang.String,boolean)","createAccountOutsideRequestContext(java.lang.String,java.lang.String,java.lang.String,boolean)",10,29,"private Account.Id createAccountOutsideRequestContext(java.lang.String username, java.lang.String fullName, java.lang.String email, boolean active) throws java.lang.Exception { try (com.google.gerrit.server.util.ManualRequestContext ctx = oneOffRequestContext.open()) { com.google.gerrit.reviewdb.client.Account.Id id = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser(username)).getAccountId(); if (email != null) { accountManager.link(id, com.google.gerrit.server.account.AuthRequest.forEmail(email)); } accountsUpdate.create().update(id, ( u) -> { u.setFullName(fullName).setPreferredEmail(email).setActive(active); }); return id; } }",0449f6f9d55aa73e22cb9d4b2d374fb58cef3fb0,"createAccountOutsideRequestContext(java.lang.String,java.lang.String,java.lang.String,boolean)",63079,209,179
124630,gerrit-server_src_main_java_com_google_gerrit_server_api_changes_ChangeApiImpl.java,18.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@java.lang.Override public boolean isPureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { return isPureRevert(null); },72637ea7108152692273f9f0656a2e21deec8895,,isPureRevert(),5,1,@java.lang.Override public com.google.gerrit.extensions.common.PureRevertInfo pureRevert() throws com.google.gerrit.extensions.restapi.RestApiException { return pureRevert(null); },384cd282e5f2bec257de8ef474b00719484807aa,pureRevert(),212171,38,50
158950,src_test_java_com_googlesource_gerrit_plugins_lfs_fs_LfsFsRequestAuthorizerTest.java,2.0,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", zeroId())).isTrue(); }",45efa249cad13bb6a37d554dbf5f13459d4bed89,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1); assertThat(auth.verifyAuthInfo(info.authToken, ""o"", zeroId())).isTrue(); }",96caade0a24d18275923c8a3ddc9681466fed695,testVerifyAuthInfo(),testVerifyAuthInfo(),8,2,"@org.junit.Test public void testVerifyAuthInfo() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.AuthInfo info = auth.generateAuthInfo(""o"", zeroId(), java.time.Instant.now(), 1L); assertThat(auth.verifyAuthInfo(info.authToken(), ""o"", zeroId())).isTrue(); }",23982b29bff5123081fbb29cecb59186f688924c,testVerifyAuthInfo(),56820,76,78
62824,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_RemoteSuggestOracle.java,,,,"@java.lang.Override public void onSuggestionsReady(com.google.gerrit.client.ui.Request req, com.google.gerrit.client.ui.Response res) { if ((query) == (this)) { active = false; query = null; callback.onSuggestionsReady(req, res); } else { query.start(); } }",fb0b46c705ff4c7af9737a232c054ab0e8ba4008,,"onSuggestionsReady(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Response)",4,0,"@java.lang.Override public void onSuggestionsReady(com.google.gerrit.client.ui.Request req, com.google.gerrit.client.ui.Response res) { if ((query) == (this)) { query = null; callback.onSuggestionsReady(req, res); } else { query.start(); } }",ea789d2573aeb0d0ef5498c6fb19ef866ed3440f,"onSuggestionsReady(com.google.gerrit.client.ui.Request,com.google.gerrit.client.ui.Response)",52335,78,74
57990,gerrit-server_src_main_java_com_google_gerrit_server_notedb_ChangeNotes.java,1.0,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try { com.google.gerrit.server.notedb.ChangeNotes.Parser parser = new com.google.gerrit.server.notedb.ChangeNotes.Parser(change.getId(), rev, walk); parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } finally { walk.release(); } }",091920c972b718a5c963b41b0c95ae7427374502,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try { com.google.gerrit.server.notedb.ChangeNotes.Parser parser = new com.google.gerrit.server.notedb.ChangeNotes.Parser(change, rev, walk, repoManager); parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); publishedComments = com.google.common.collect.ImmutableListMultimap.copyOf(parser.publishedComments); noteMap = parser.publishedCommentNoteMap; ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { } finally { walk.release(); } }",cd9183f3e135a194d03276cfdb8eaee965006fd2,onLoad(),onLoad(),10,2,"@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { loadDefaults(); return; } org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); try { com.google.gerrit.server.notedb.ChangeNotes.Parser parser = new com.google.gerrit.server.notedb.ChangeNotes.Parser(change, rev, walk, repoManager); parser.parseAll(); if ((parser.status) != null) { change.setStatus(parser.status); } approvals = parser.buildApprovals(); changeMessages = parser.buildMessages(); commentsForBase = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForBase); commentsForPS = com.google.common.collect.ImmutableListMultimap.copyOf(parser.commentsForPs); noteMap = parser.commentNoteMap; ImmutableSetMultimap.Builder<com.google.gerrit.server.notedb.ReviewerState, com.google.gerrit.reviewdb.client.Account.Id> reviewers = com.google.common.collect.ImmutableSetMultimap.builder(); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.notedb.ReviewerState> e : parser.reviewers.entrySet()) { reviewers.put(e.getValue(), e.getKey()); } this.reviewers = reviewers.build(); submitRecords = com.google.common.collect.ImmutableList.copyOf(parser.submitRecords); } catch (java.text.ParseException e1) { throw new java.io.IOException(e1); } finally { walk.release(); } }",ca5e059261ef3aed62ff1e51d9a25aa90d37415f,onLoad(),90252,387,420
75858,gerrit-lucene_src_main_java_com_google_gerrit_lucene_LuceneChangeIndex.java,14.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public static org.apache.lucene.index.Term idTerm(com.google.gerrit.reviewdb.client.Change.Id id) { return com.google.gerrit.lucene.QueryBuilder.intTerm(com.google.gerrit.lucene.LEGACY_ID.getName(), id.get()); }",99538499b704727cbb8d42080213ff1a07777960,,idTerm(com.google.gerrit.reviewdb.client.Change$Id),6,4,"static org.apache.lucene.index.Term idTerm(com.google.gerrit.reviewdb.client.Change.Id id) { return com.google.gerrit.lucene.QueryBuilder.intTerm(com.google.gerrit.lucene.LEGACY_ID.getName(), id.get()); }",25df1a2ecf8be89e6d0558be8006a18095a823e0,idTerm(com.google.gerrit.reviewdb.client.Change$Id),156963,71,70
83091,src_main_java_com_googlesource_gerrit_plugins_verifystatus_client_JobsScreen.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public void onLoad(final com.google.gerrit.plugin.client.screen.Screen screen) { java.lang.String input = screen.getToken(1); java.lang.String[] patchsetId = input.split("",""); final java.lang.String changeId = com.google.gwt.http.client.URL.decodePathSegment(patchsetId[0]); final java.lang.String revisionId = patchsetId[1]; new com.google.gerrit.plugin.client.rpc.RestApi(""changes"").id(changeId).get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { if (result != null) { screen.setPageTitle((((""Reports for change "" + (result._number())) + ""/"") + revisionId)); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); screen.show(new com.googlesource.gerrit.plugins.verifystatus.client.JobsScreen(changeId, revisionId)); }",ce525397c45a1077ddd032d6b7015c2b8ebe97a2,,onLoad(com.google.gerrit.plugin.client.screen.Screen),8,1,"@java.lang.Override public void onLoad(final com.google.gerrit.plugin.client.screen.Screen screen) { java.lang.String input = screen.getToken(1); java.lang.String[] patchsetId = input.split(""/""); final java.lang.String changeNumber = patchsetId[0]; final java.lang.String revisionNumber = patchsetId[1]; screen.setPageTitle((""Report History for Change "" + input)); screen.show(new com.googlesource.gerrit.plugins.verifystatus.client.JobsScreen(changeNumber, revisionNumber)); }",691bd33c46f0ad1819a7f8833f113f42b206b388,onLoad(com.google.gerrit.plugin.client.screen.Screen),188399,258,122
45873,gerrit-server_src_main_java_com_google_gerrit_server_account_PutInactive.java,,,,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutInactive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException((""No such account: "" + (rsrc.getUser().getAccountId()))); } if (!(a.isActive())) { return com.google.gerrit.extensions.restapi.Response.ok(""""); } a.setActive(false); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""""); }",a45f4fe4e908777169d5cb7a799b5f00020c93dc,,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.PutInactive$Input)",6,0,"@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.DeleteActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(""account not found""); } if (!(a.isActive())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } a.setActive(false); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.none(); }",cf397c304e8f87f8b3c1660fddd09520d5d499d6,"apply(com.google.gerrit.server.account.AccountResource,com.google.gerrit.server.account.DeleteActive$Input)",121962,226,215
9085,src_main_java_com_google_gerrit_client_changes_AbandonChangeDialog.java,,,,"public void onClick(com.google.gwt.user.client.ui.Widget sender) { sendButton.setEnabled(false); PatchUtil.DETAIL_SVC.abandonChange(message.getText().trim(), psid, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { if ((appCallback) != null) { appCallback.onSuccess(null); } hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { sendButton.setEnabled(true); super.onFailure(caught); } }); }",85db739cd42978cbe3cda530c6d1e408e6f647f9,,onClick(com.google.gwt.user.client.ui.Widget),6,3,"public void onClick(com.google.gwt.user.client.ui.Widget sender) { sendButton.setEnabled(false); PatchUtil.DETAIL_SVC.abandonChange(psid, message.getText().trim(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { if ((appCallback) != null) { appCallback.onSuccess(null); } hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { sendButton.setEnabled(true); super.onFailure(caught); } }); }",8806f63a3dfb91b9d2c0578607d925e35a260111,onClick(com.google.gwt.user.client.ui.Widget),193481,155,155
90738,gerrit-server_src_test_java_com_google_gerrit_server_mail_receive_RawMailParserTest.java,,,,"private void assertMail(com.google.gerrit.server.mail.receive.MailMessage have, com.google.gerrit.server.mail.receive.MailMessage want) { assertThat(have.id()).isEqualTo(want.id()); assertThat(have.to()).isEqualTo(want.to()); assertThat(have.from()).isEqualTo(want.from()); assertThat(have.cc()).isEqualTo(want.cc()); assertThat(have.dateReceived()).isEqualTo(want.dateReceived()); assertThat(have.additionalHeaders()).isEqualTo(want.additionalHeaders()); assertThat(have.subject()).isEqualTo(want.subject()); assertThat(have.textContent()).isEqualTo(want.textContent()); assertThat(have.htmlContent()).isEqualTo(want.htmlContent()); }",4fdad2dccf51147e3ea801d8af1c1e0676121bbc,,"assertMail(com.google.gerrit.server.mail.receive.MailMessage,com.google.gerrit.server.mail.receive.MailMessage)",9,0,"private void assertMail(com.google.gerrit.server.mail.receive.MailMessage have, com.google.gerrit.server.mail.receive.MailMessage want) { assertThat(have.id()).isEqualTo(want.id()); assertThat(have.to()).isEqualTo(want.to()); assertThat(have.from()).isEqualTo(want.from()); assertThat(have.cc()).isEqualTo(want.cc()); assertThat(have.dateReceived().getMillis()).isEqualTo(want.dateReceived().getMillis()); assertThat(have.additionalHeaders()).isEqualTo(want.additionalHeaders()); assertThat(have.subject()).isEqualTo(want.subject()); assertThat(have.textContent()).isEqualTo(want.textContent()); assertThat(have.htmlContent()).isEqualTo(want.htmlContent()); }",bd7611dd8e2aef2a9cd826d5fdc051c7149fa225,"assertMail(com.google.gerrit.server.mail.receive.MailMessage,com.google.gerrit.server.mail.receive.MailMessage)",5684,166,170
17478,gerrit-gwtui_src_main_java_com_google_gerrit_client_ui_OnEditEnabler.java,,,,@java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event e) { com.google.gerrit.client.ui.OnEditEnabler.TBBInfo tbi = tbis.get(com.google.gwt.dom.client.Element.as(e.getEventTarget())); tbi.listener.onBrowserEvent(e); if ((e.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { onTextBoxBase(tbi.textBoxBase); } },bf84e7d0ac0bcd8665570e23964288cce77bed21,,onBrowserEvent(com.google.gwt.user.client.Event),4,0,@java.lang.Override public void onKeyDown(final com.google.gwt.event.dom.client.KeyDownEvent e) { on(e); },89540183ede517a425e0e3da55654bbdc9e7f9da,onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent),196396,124,35
72051,src_main_java_com_googlesource_gerrit_plugins_cookbook_SampleOperator.java,,,,@com.google.gerrit.server.query.QueryBuilder.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> sample(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException { return new com.googlesource.gerrit.plugins.cookbook.SampleOperator.MyPredicate(Change.Id.parse(value)); },a096a213e1dff8559aa134a6a8f479d07e12077d,,sample(java.lang.String),3,2,"@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> create(com.google.gerrit.server.query.change.ChangeQueryBuilder builder, java.lang.String value) throws com.google.gerrit.server.query.QueryParseException { return new com.googlesource.gerrit.plugins.cookbook.SampleOperator.MyPredicate(Change.Id.parse(value)); }",74bba3d24ce207f91746c49a2a6e12b092263f15,"create(com.google.gerrit.server.query.change.ChangeQueryBuilder,java.lang.String)",204648,99,107
37011,gerrit-gwtui_src_main_java_com_google_gerrit_client_rpc_RestApi.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private <T extends com.google.gwt.core.client.JavaScriptObject> void sendPost(final com.google.gwtjsonrpc.common.AsyncCallback<T> cb, java.lang.String token) { com.google.gwt.http.client.RequestBuilder req = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.POST, url.toString()); req.setHeader(""Accept"", JsonConstants.JSON_TYPE); req.setHeader(""Content-Type"", ""application/x-www-form-urlencoded""); req.setRequestData(token); req.setCallback(new com.google.gerrit.client.rpc.RestApi.MyRequestCallback<T>(cb)); try { req.send(); } catch (com.google.gwt.http.client.RequestException e) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(e); } }",960a62acb23e6e3f12513511b53fe623dbbb33c9,,"sendPost(com.google.gwtjsonrpc.common.AsyncCallback,java.lang.String)",6,6,"private <T extends com.google.gwt.core.client.JavaScriptObject> void resendPost(final com.google.gwtjsonrpc.common.AsyncCallback<T> cb, java.lang.String token) { com.google.gwt.http.client.RequestBuilder req = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.POST, url.toString()); req.setHeader(""Accept"", JsonConstants.JSON_TYPE); req.setHeader(""Content-Type"", JsonConstants.JSON_TYPE); req.setRequestData(token); req.setCallback(new com.google.gerrit.client.rpc.RestApi.MyRequestCallback<T>(false, cb)); try { req.send(); } catch (com.google.gwt.http.client.RequestException e) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(e); } }",31630685c42ce076bc24ef86956f792bb5c01d65,"resendPost(com.google.gwtjsonrpc.common.AsyncCallback,java.lang.String)",93085,201,200
146191,gerrit-sshd_src_main_java_com_google_gerrit_sshd_SshLog.java,1.0,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(dcmd); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(context.get(), status, dcmd); }",cf4c3c1b79e003f39bf50844dc815aee91333f73,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); com.google.common.collect.ListMultimap<java.lang.String, ?> parameters = extractParameters(dcmd); java.lang.String cmd = extractWhat(dcmd, parameters); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } audit(ctx, status, extractWhat(dcmd, parameters), parameters); }",00da1de17c9804d0242e1a7b619b9829014e5069,"onExecute(com.google.gerrit.sshd.DispatchCommand,int,com.google.gerrit.sshd.SshSession)","onExecute(com.google.gerrit.sshd.DispatchCommand,int,com.google.gerrit.sshd.SshSession)",18,5,"void onExecute(com.google.gerrit.sshd.DispatchCommand dcmd, int exitValue, com.google.gerrit.sshd.SshSession sshSession) { final com.google.gerrit.sshd.SshScope.Context ctx = context.get(); ctx.finished = com.google.gerrit.common.TimeUtil.nowMs(); java.lang.String cmd = extractWhat(dcmd, true); final org.apache.log4j.spi.LoggingEvent event = log(cmd); event.setProperty(com.google.gerrit.sshd.SshLog.P_WAIT, (((ctx.started) - (ctx.created)) + ""ms"")); event.setProperty(com.google.gerrit.sshd.SshLog.P_EXEC, (((ctx.finished) - (ctx.started)) + ""ms"")); final java.lang.String status; switch (exitValue) { case BaseCommand.STATUS_CANCEL : status = ""killed""; break; case BaseCommand.STATUS_NOT_FOUND : status = ""not-found""; break; case BaseCommand.STATUS_NOT_ADMIN : status = ""not-admin""; break; default : status = java.lang.String.valueOf(exitValue); break; } event.setProperty(com.google.gerrit.sshd.SshLog.P_STATUS, status); java.lang.String peerAgent = sshSession.getPeerAgent(); if (peerAgent != null) { event.setProperty(com.google.gerrit.sshd.SshLog.P_AGENT, peerAgent); } if ((async) != null) { async.append(event); } if (!(auditMask)) { cmd = extractWhat(dcmd, false); } audit(ctx, status, cmd, extractParameters(dcmd)); }",3be5ea528d55393743816484824bebf767f9d779,"onExecute(com.google.gerrit.sshd.DispatchCommand,int,com.google.gerrit.sshd.SshSession)",107561,403,392
70825,gerrit-server_src_main_java_com_google_gerrit_server_project_RefFilter.java,,,,public com.google.gerrit.server.project.RefFilter<T> setSubString(java.lang.String subString) { this.matchSubstring = subString; return this; },bcd03742e98d00dc9e74337b21ae6b5b6999d5b1,,setSubString(java.lang.String),7,5,public com.google.gerrit.server.project.RefFilter<T> subString(java.lang.String subString) { this.matchSubstring = subString; return this; },3e7147e51adc15c70b7489b79df077caa78bfb04,subString(java.lang.String),118266,42,41
154411,javatests_com_google_gerrit_acceptance_rest_account_ExternalIdIT.java,36.0,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",810e02074c7e8a7b3f4fee8106c1a4e1b447e906,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = accountCache.maybeGet(user.getId()).get().getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",1eebd94f0ed01567c11516af1a4d05f594fcf50e,getExternalIds(),getExternalIds(),2,36,"@org.junit.Test public void getExternalIds() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> expectedIds = getAccountState(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = toExternalIdInfos(expectedIds); com.google.gerrit.acceptance.RestResponse response = userRestSession.get(""/accounts/self/external.ids""); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }",724e01e7953e8751eab5992eab73389b1f742a5a,getExternalIds(),35468,235,231
107422,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_change_CommentsIT.java,29.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getRevisionComments(java.lang.String changeId, java.lang.String revId) throws java.lang.Exception { return getPublishedComments(changeId, revId).values().stream().flatMap(( t) -> t.stream()).collect(java.util.stream.Collectors.toList()); }",3634c5dca27804bd2796911a956a6e50ca411cf5,,"getRevisionComments(java.lang.String,java.lang.String)",5,49,"private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getRevisionComments(java.lang.String changeId, java.lang.String revId) throws java.lang.Exception { return getPublishedComments(changeId, revId).values().stream().flatMap(java.util.List::stream).collect(java.util.stream.Collectors.toList()); }",5203345371c78995749f54f562d43ce3e4c9be2e,"getRevisionComments(java.lang.String,java.lang.String)",194584,89,86
105052,gerrit-server_src_main_java_com_google_gerrit_server_notedb_NoteDbUpdateManager.java,21.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static void addRewrites(com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.notedb.NoteDbRewriter> rewriters, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo openRepo) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.google.gerrit.server.notedb.NoteDbRewriter>> entry : rewriters.asMap().entrySet()) { java.lang.String refName = entry.getKey(); org.eclipse.jgit.lib.ObjectId oldTip = openRepo.cmds.get(refName).orElse(org.eclipse.jgit.lib.ObjectId.zeroId()); if (oldTip.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return; } org.eclipse.jgit.lib.ObjectId currTip = oldTip; try { for (com.google.gerrit.server.notedb.NoteDbRewriter noteDbRewriter : entry.getValue()) { org.eclipse.jgit.lib.ObjectId nextTip = noteDbRewriter.rewriteCommitHistory(openRepo.rw, openRepo.tempIns, currTip); if (nextTip != null) { currTip = nextTip; } } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot rewrite history"", e); } if (!(oldTip.equals(currTip))) { openRepo.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(oldTip, currTip, refName)); } } }",2eefbf563d26937eb17d4340cf9a8cb9c7b41747,,"addRewrites(com.google.common.collect.ListMultimap,com.google.gerrit.server.notedb.NoteDbUpdateManager$OpenRepo)",16,23,"private static void addRewrites(com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.notedb.NoteDbRewriter> rewriters, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo openRepo) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.util.Map.Entry<java.lang.String, java.util.Collection<com.google.gerrit.server.notedb.NoteDbRewriter>> entry : rewriters.asMap().entrySet()) { java.lang.String refName = entry.getKey(); org.eclipse.jgit.lib.ObjectId oldTip = openRepo.cmds.get(refName).orElse(org.eclipse.jgit.lib.ObjectId.zeroId()); if (oldTip.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format(""Ref %s is empty"", refName)); } org.eclipse.jgit.lib.ObjectId currTip = oldTip; try { for (com.google.gerrit.server.notedb.NoteDbRewriter noteDbRewriter : entry.getValue()) { org.eclipse.jgit.lib.ObjectId nextTip = noteDbRewriter.rewriteCommitHistory(openRepo.rw, openRepo.tempIns, currTip); if (nextTip != null) { currTip = nextTip; } } } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException(""Cannot rewrite commit history"", e); } if (!(oldTip.equals(currTip))) { openRepo.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(oldTip, currTip, refName)); } } }",637a3afda87c816c481e8118b2ff79fb98180517,"addRewrites(com.google.common.collect.ListMultimap,com.google.gerrit.server.notedb.NoteDbUpdateManager$OpenRepo)",76032,392,423
61573,gerrit-server_src_test_java_com_google_gerrit_server_query_change_AbstractQueryChangesTest.java,27.0,"@org.junit.Test public void byHashtagWithNotedb() throws java.lang.Exception { assumeTrue(notesMigration.enabled()); java.util.List<com.google.gerrit.reviewdb.client.Change> changes = setUpHashtagChanges(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results = query(""hashtag:foo""); assertEquals(2, results.size()); assertResultEquals(changes.get(1), results.get(0)); assertResultEquals(changes.get(0), results.get(1)); assertResultEquals(changes.get(1), queryOne(""hashtag:bar"")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\"" a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""#a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""# #a tag\"""")); }",0c06374b1091af2538737bc326b33be254bdc860,"@org.junit.Test public void byHashtagWithNotedb() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); java.util.List<com.google.gerrit.reviewdb.client.Change> changes = setUpHashtagChanges(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results = query(""hashtag:foo""); assertThat(results).hasSize(2); assertResultEquals(changes.get(1), results.get(0)); assertResultEquals(changes.get(0), results.get(1)); assertResultEquals(changes.get(1), queryOne(""hashtag:bar"")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\"" a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""#a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""# #a tag\"""")); }",80bc263c8ce36031a319f9c1a1d19bfb19725e67,byHashtagWithNotedb(),byHashtagWithNotedb(),15,26,"@org.junit.Test public void byHashtagWithNotedb() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); java.util.List<com.google.gerrit.reviewdb.client.Change> changes = setUpHashtagChanges(); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results = query(""hashtag:foo""); assertThat(results).hasSize(2); assertResultEquals(changes.get(1), results.get(0)); assertResultEquals(changes.get(0), results.get(1)); assertResultEquals(changes.get(1), queryOne(""hashtag:bar"")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\"" a tag \"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""#a tag\"""")); assertResultEquals(changes.get(1), queryOne(""hashtag:\""# #a tag\"""")); }",fe24f1c871c58521d958a1163efc246ab9659e59,byHashtagWithNotedb(),77454,248,245
91093,gerrit-server_src_main_java_com_google_gerrit_server_git_RebaseSorter.java,1.0,public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); if ((initialTip) != null) { rw.markUninteresting(initialTip); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<>(); while ((c = rw.next()) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (com.google.gerrit.server.git.strategy.CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },6774cd9c695ee11add430e5d70422cec8569a912,public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { if (!(c.equals(n))) { rw.markUninteresting(c); } } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<>(); while ((c = rw.next()) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (com.google.gerrit.server.git.strategy.CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },0a7466b30686537a362d3dce52f31253772b658b,sort(java.util.Collection),sort(java.util.Collection),2,1,public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); if ((initialTip) != null) { rw.markUninteresting(initialTip); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<>(); while ((c = rw.next()) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (com.google.gerrit.server.git.strategy.CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; },6774cd9c695ee11add430e5d70422cec8569a912,sort(java.util.Collection),129662,427,408
80062,gerrit-server_src_main_java_com_google_gerrit_server_extensions_events_ReviewerAdded.java,2.0,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(account), util.accountInfo(adder), when); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",90446062dd4f7436997ff40b95d3fb91687c5e8c,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> transformed = com.google.common.collect.FluentIterable.from(reviewers).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.reviewdb.client.Account.Id account) { return util.accountInfo(account); } }).toList(); try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), transformed, util.accountInfo(adder), when); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",7fbcac24883046a5fd74a8b4ff1af53ea9f46759,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,com.google.gerrit.reviewdb.client.Account,com.google.gerrit.reviewdb.client.Account,java.sql.Timestamp)","fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,java.util.List,com.google.gerrit.reviewdb.client.Account,java.sql.Timestamp)",13,2,"public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, java.util.List<com.google.gerrit.reviewdb.client.Account.Id> reviewers, com.google.gerrit.reviewdb.client.Account adder, java.sql.Timestamp when) { if ((!(listeners.iterator().hasNext())) || (reviewers.isEmpty())) { return; } java.util.List<com.google.gerrit.extensions.common.AccountInfo> transformed = com.google.common.collect.Lists.transform(reviewers, new com.google.common.base.Function<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.AccountInfo apply(com.google.gerrit.reviewdb.client.Account.Id account) { return util.accountInfo(account); } }); try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), transformed, util.accountInfo(adder), when); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerAdded.log.error(""Couldn't fire event"", e); } }",e7b41bee30c558160eda1eae01128a7b577284b2,"fire(com.google.gerrit.reviewdb.client.Change,com.google.gerrit.reviewdb.client.PatchSet,java.util.List,com.google.gerrit.reviewdb.client.Account,java.sql.Timestamp)",156319,371,366
148032,java_com_google_gerrit_server_index_IndexUtils.java,8.0,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""group:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",c2cd0d583b4d35799fd12545a7476223e62ac9e6,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""account:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",d714f62c7d1c6f0e0e7342c76d258d9ac5223eec,describe(com.google.gerrit.server.CurrentUser),describe(com.google.gerrit.server.CurrentUser),17,8,"public static java.lang.String describe(com.google.gerrit.server.CurrentUser user) { if (user.isIdentifiedUser()) { return user.getAccountId().toString(); } if (user instanceof com.google.gerrit.server.query.change.SingleGroupUser) { return ""group:"" + (user.getEffectiveGroups().getKnownGroups().iterator().next().toString()); } return user.toString(); }",c2cd0d583b4d35799fd12545a7476223e62ac9e6,describe(com.google.gerrit.server.CurrentUser),216378,91,91
70064,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_MyGpgKeysScreen.java,,,,"private void refreshKeys() { keys.clear(); com.google.gerrit.client.account.AccountApi.self().view(""gpgkeys"").get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""id"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo> result) { java.util.List<com.google.gerrit.client.account.GpgKeyInfo> list = com.google.gerrit.client.rpc.Natives.asList(result.values()); java.util.Collections.sort(list, new java.util.Comparator<com.google.gerrit.client.account.GpgKeyInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.account.GpgKeyInfo a, com.google.gerrit.client.account.GpgKeyInfo b) { return a.id().compareTo(b.id()); } }); if (!(list.isEmpty())) { keys.setVisible(true); for (com.google.gerrit.client.account.GpgKeyInfo k : list) { keys.addOneKey(k); } showKeyTable(true); } else { keys.setVisible(false); showAddKeyBlock(true); showKeyTable(false); } display(); } })); }",53fcc56275d0bf1635c0fc3ba367651234121458,,refreshKeys(),14,9,"private void refreshKeys() { com.google.gerrit.client.account.AccountApi.self().view(""gpgkeys"").get(com.google.gerrit.client.rpc.NativeMap.copyKeysIntoChildren(""id"", new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.account.GpgKeyInfo> result) { java.util.List<com.google.gerrit.client.account.GpgKeyInfo> list = com.google.gerrit.client.rpc.Natives.asList(result.values()); java.util.Collections.sort(list, new java.util.Comparator<com.google.gerrit.client.account.GpgKeyInfo>() { @java.lang.Override public int compare(com.google.gerrit.client.account.GpgKeyInfo a, com.google.gerrit.client.account.GpgKeyInfo b) { return a.id().compareTo(b.id()); } }); keys.clear(); keyText.setText(""""); errorPanel.setVisible(false); addButton.setEnabled(true); if (!(list.isEmpty())) { keys.setVisible(true); for (com.google.gerrit.client.account.GpgKeyInfo k : list) { keys.addOneKey(k); } showKeyTable(true); showAddKeyBlock(false); } else { keys.setVisible(false); showAddKeyBlock(true); showKeyTable(false); } display(); } })); }",e2e2eb2d3a0f712e61b860d10a1ac57a5ef3dd91,refreshKeys(),207653,362,388
64300,gitiles-servlet_src_main_java_com_google_gitiles_doc_DocServlet.java,,,,"private org.pegdown.ast.RootNode parseFile(com.google.gitiles.GitilesView view, java.lang.String path, com.google.gitiles.doc.MarkdownFormatter fmt, java.lang.String md) { org.pegdown.ast.RootNode docTree; try { docTree = fmt.parseMarkdown(md); } catch (org.pegdown.ParsingTimeoutException e) { com.google.gitiles.doc.DocServlet.log.error(""timeout rendering {}/{} at {}"", view.getRepositoryName(), path, view.getRevision().getName()); return null; } if (docTree == null) { com.google.gitiles.doc.DocServlet.log.error(""cannot parse {}/{} at {}"", view.getRepositoryName(), path, view.getRevision().getName()); } return docTree; }",8698f77ebd6f96cfde1aa9bd6567590e3c9353c5,,"parseFile(com.google.gitiles.GitilesView,java.lang.String,com.google.gitiles.doc.MarkdownFormatter,java.lang.String)",26,0,"private void showDoc(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, com.google.gitiles.GitilesView view, org.pegdown.ast.RootNode nav, org.pegdown.ast.RootNode doc) throws java.io.IOException { java.util.Map<java.lang.String, java.lang.Object> data = new java.util.HashMap<>(); data.put(""pageTitle"", com.google.common.base.MoreObjects.firstNonNull(com.google.gitiles.doc.MarkdownHelper.getTitle(doc), view.getPathPart())); data.put(""sourceUrl"", com.google.gitiles.GitilesView.path().copyFrom(view).toUrl()); data.put(""logUrl"", com.google.gitiles.GitilesView.log().copyFrom(view).toUrl()); data.put(""blameUrl"", com.google.gitiles.GitilesView.blame().copyFrom(view).toUrl()); data.put(""navbarHtml"", new com.google.gitiles.doc.MarkdownToHtml(view).toSoyHtml(nav)); data.put(""bodyHtml"", new com.google.gitiles.doc.MarkdownToHtml(view).toSoyHtml(doc)); java.lang.String page = renderer.render(com.google.gitiles.doc.DocServlet.SOY_TEMPLATE, data); byte[] raw = page.getBytes(java.nio.charset.StandardCharsets.UTF_8); res.setContentType(FormatType.HTML.getMimeType()); res.setCharacterEncoding(java.nio.charset.StandardCharsets.UTF_8.name()); setCacheHeaders(res); if (acceptsGzipEncoding(req)) { res.setHeader(HttpHeaders.CONTENT_ENCODING, ""gzip""); raw = gzip(raw); } res.setContentLength(raw.length); res.setStatus(HttpServletResponse.SC_OK); res.getOutputStream().write(raw); }",fc2cd1384c74d241ca352e73f3ae52519fef7f9d,"showDoc(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,com.google.gitiles.GitilesView,org.pegdown.ast.RootNode,org.pegdown.ast.RootNode)",10764,184,424
60733,gerrit-server_src_main_java_com_google_gerrit_server_project_SubmitRuleEvaluator.java,4.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> canSubmit() { java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results""); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(((((((""Submit rule '"" + (getSubmitRule())) + ""' for change "") + (cd.getId())) + "" of "") + (getProjectName())) + "" has no solution."")); } return resultsToSubmitRecord(getSubmitRule(), results); }",bb567f861b24071e7a7a6d6d4cdfda171e004b9b,,canSubmit(),4,0,"public java.util.List<com.google.gerrit.common.data.SubmitRecord> canSubmit() { java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl(""locate_submit_rule"", ""can_submit"", ""locate_submit_filter"", ""filter_submit_results""); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format((""Submit rule '%s' for change %s of %s has "" + ""no solution.""), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }",04ba4a89779775891017c9ec04cd93fbd6be3e10,canSubmit(),195862,177,176
67776,gerrit-gwtui_src_main_java_com_google_gerrit_client_config_DownloadInfo.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public final java.util.List<java.lang.String> archives() { java.util.List<java.lang.String> archives = new java.util.ArrayList<>(); for (com.google.gerrit.client.config.DownloadInfo.ArchiveFormatInfo f : com.google.gerrit.client.rpc.Natives.asList(_archives())) { archives.add(f.get()); } return archives; },05befc5b0d7c345800e5dc11df96354a324b106b,,archives(),10,15,public final java.util.List<java.lang.String> archives() { java.util.List<java.lang.String> archives = new java.util.ArrayList<>(); for (java.lang.String f : com.google.gerrit.client.rpc.Natives.asList(_archives())) { archives.add(f); } return archives; },55714997d6593efc66f341b533ad5bb468bc79ea,archives(),134195,94,80
109734,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_pgm_RebuildNoteDbIT.java,4.0,@org.junit.Before public void createTempDirectory() throws java.lang.Exception { sitePath = com.google.gerrit.testutil.TempFileUtil.createTempDirectory(); },f6dcfb5fa8d0d525628b01602ff5f7410d888227,"@org.junit.Before public void setUp() throws java.lang.Exception { sitePaths = new com.google.gerrit.server.config.SitePaths(com.google.gerrit.testutil.TempFileUtil.createTempDirectory().toPath()); sitePath = sitePaths.site_path.toString(); gerritConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePaths.gerrit_config.toFile(), org.eclipse.jgit.util.FS.detect()); }",fe61b74402535da66f64fd96d6058f5b8fd6418b,createTempDirectory(),setUp(),5,0,"@org.junit.Before public void setUp() throws java.lang.Exception { SitePaths sitePaths = new SitePaths(com.google.gerrit.testutil.TempFileUtil.createTempDirectory().toPath()); sitePath = sitePaths.site_path.toString(); gerritConfig = new org.eclipse.jgit.storage.file.FileBasedConfig(sitePaths.gerrit_config.toFile(), org.eclipse.jgit.util.FS.detect()); }",7caacee8c226a655f9b520bfbdfca713f3fb3b24,setUp(),23853,112,103
38330,gerrit-gwtui-plugin_src_main_java_com_google_gerrit_rebind_PluginGenerator.java,,,,"@java.lang.Override public java.lang.String generate(com.google.gwt.core.ext.TreeLogger logger, com.google.gwt.core.ext.GeneratorContext context, java.lang.String typeName) throws com.google.gwt.core.ext.UnableToCompleteException { com.google.gwt.core.ext.typeinfo.TypeOracle typeOracle = context.getTypeOracle(); com.google.gwt.core.ext.typeinfo.JClassType sourceType = typeOracle.findType(typeName); if (sourceType == null) { logger.log(TreeLogger.ERROR, ""Could not find requested typeName"", null); throw new com.google.gwt.core.ext.UnableToCompleteException(); } validateType(logger, sourceType); java.lang.String generatedSimpleSourceName = (sourceType.getSimpleSourceName()) + ""PluginImpl""; com.google.gwt.user.rebind.ClassSourceFileComposerFactory f = new com.google.gwt.user.rebind.ClassSourceFileComposerFactory(sourceType.getPackage().getName(), generatedSimpleSourceName); f.addImport(com.google.gwt.core.client.GWT.class.getName()); f.setSuperclass(typeName); java.io.PrintWriter out = context.tryCreate(logger, sourceType.getPackage().getName(), generatedSimpleSourceName); if (out != null) { com.google.gwt.user.rebind.SourceWriter sw = f.createSourceWriter(context, out); sw.println(((""public "" + generatedSimpleSourceName) + ""() {"")); sw.indent(); sw.println(""init();""); sw.outdent(); sw.println(""}""); sw.commit(logger); } return f.getCreatedClassName(); }",79c14478ae9506a3de430fdf6f9aed41ced7e59c,,"generate(com.google.gwt.core.ext.TreeLogger,com.google.gwt.core.ext.GeneratorContext,java.lang.String)",9,0,"@java.lang.Override public java.lang.String generate(com.google.gwt.core.ext.TreeLogger logger, com.google.gwt.core.ext.GeneratorContext context, java.lang.String typeName) throws com.google.gwt.core.ext.UnableToCompleteException { com.google.gwt.core.ext.typeinfo.TypeOracle typeOracle = context.getTypeOracle(); com.google.gwt.core.ext.typeinfo.JClassType sourceType = typeOracle.findType(typeName); if (sourceType == null) { logger.log(TreeLogger.ERROR, ""Could not find requested typeName"", null); throw new com.google.gwt.core.ext.UnableToCompleteException(); } validateType(logger, sourceType); java.lang.String generatedSimpleSourceName = (sourceType.getSimpleSourceName()) + ""PluginImpl""; com.google.gwt.user.rebind.ClassSourceFileComposerFactory f = new com.google.gwt.user.rebind.ClassSourceFileComposerFactory(sourceType.getPackage().getName(), generatedSimpleSourceName); f.addImport(com.google.gwt.core.client.GWT.class.getName()); f.setSuperclass(typeName); java.io.PrintWriter out = context.tryCreate(logger, sourceType.getPackage().getName(), generatedSimpleSourceName); if (out != null) { com.google.gwt.user.rebind.SourceWriter sw = f.createSourceWriter(context, out); sw.println(((""public "" + generatedSimpleSourceName) + ""() {"")); sw.indent(); sw.println(""onModuleLoad();""); sw.outdent(); sw.println(""}""); sw.commit(logger); } return f.getCreatedClassName(); }",740a51085351b481806675dac63a649418c8b71b,"generate(com.google.gwt.core.ext.TreeLogger,com.google.gwt.core.ext.GeneratorContext,java.lang.String)",92260,379,381
46081,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,,,,"@java.lang.SuppressWarnings(""rawtypes"") @java.lang.Override protected void configure() { bind(new com.google.inject.TypeLiteral<com.google.gerrit.extensions.registration.DynamicSet<com.google.gerrit.server.cache.CacheRemovalListener>>() {}).toInstance(com.google.gerrit.extensions.registration.DynamicSet.<com.google.gerrit.server.cache.CacheRemovalListener>emptySet()); install(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); }",69a2469ae9e1d3771b4f86188ceb53a253686333,,configure(),6,0,"@java.lang.SuppressWarnings(""rawtypes"") @java.lang.Override protected void configure() { bind(com.google.gerrit.reviewdb.server.ReviewDb.class).toProvider(new com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb>() { @java.lang.Override public com.google.gerrit.reviewdb.server.ReviewDb get() { return dbRef.get(); } }); bind(new com.google.inject.TypeLiteral<com.google.gerrit.extensions.registration.DynamicSet<com.google.gerrit.server.cache.CacheRemovalListener>>() {}).toInstance(com.google.gerrit.extensions.registration.DynamicSet.<com.google.gerrit.server.cache.CacheRemovalListener>emptySet()); install(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); }",088c1355f04db5ee05adc5cee7aae40fbee67d49,configure(),159559,120,202
34953,gerrit-server_src_main_java_com_google_gerrit_server_auth_ldap_LdapGroupBackend.java,,,,"private static boolean isLdapUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return uuid.get().startsWith(""ldapgroup:""); }",64dc0b7f594d700b5b13a0f49ce9f9caf95a16bd,,isLdapUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),25,5,private static boolean isLdapUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { return uuid.get().startsWith(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID); },c365e045692b7c28378944b13493907f81c151b8,isLdapUUID(com.google.gerrit.reviewdb.client.AccountGroup$UUID),76492,39,54
92553,gerrit-server_src_main_java_com_google_gerrit_server_project_DeleteBranch.java,0.0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.server.project.DeleteBranch.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(rsrc.getControl().controlForRef(rsrc.getBranchKey()).canDelete())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Cannot delete branch""); } if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } try (org.eclipse.jgit.lib.Repository r = repoManager.openRepository(rsrc.getNameKey())) { org.eclipse.jgit.lib.RefUpdate.Result result; org.eclipse.jgit.lib.RefUpdate u = r.updateRef(rsrc.getRef()); u.setForceUpdate(true); refDeletionValidator.validateRefOperation(rsrc.getName(), identifiedUser.get(), u); int remainingLockFailureCalls = com.google.gerrit.server.project.DeleteBranch.MAX_LOCK_FAILURE_CALLS; for (; ;) { try { result = u.delete(); } catch (org.eclipse.jgit.errors.LockFailedException e) { result = RefUpdate.Result.LOCK_FAILURE; } catch (java.io.IOException e) { com.google.gerrit.server.project.DeleteBranch.log.error((""Cannot delete "" + (rsrc.getBranchKey())), e); throw e; } if ((result == (RefUpdate.Result.LOCK_FAILURE)) && ((--remainingLockFailureCalls) > 0)) { try { java.lang.Thread.sleep(com.google.gerrit.server.project.DeleteBranch.SLEEP_ON_LOCK_FAILURE_MS); } catch (java.lang.InterruptedException ie) { } } else { break; } } switch (result) { case NEW : case NO_CHANGE : case FAST_FORWARD : case FORCED : referenceUpdated.fire(rsrc.getNameKey(), u, ReceiveCommand.Type.DELETE, identifiedUser.get().getAccount()); break; case REJECTED_CURRENT_BRANCH : com.google.gerrit.server.project.DeleteBranch.log.error((((""Cannot delete "" + (rsrc.getBranchKey())) + "": "") + (result.name()))); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(""cannot delete current branch""); case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case RENAMED : default : com.google.gerrit.server.project.DeleteBranch.log.error((((""Cannot delete "" + (rsrc.getBranchKey())) + "": "") + (result.name()))); throw new com.google.gerrit.extensions.restapi.ResourceConflictException((""cannot delete branch: "" + (result.name()))); } } return com.google.gerrit.extensions.restapi.Response.none(); }",89146104f9bdc71b06d7d0149d31e373a6e0f151,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.server.project.DeleteBranch.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(rsrc.getControl().controlForRef(rsrc.getBranchKey()).canDelete())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Cannot delete branch""); } if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRef.delete(rsrc); return com.google.gerrit.extensions.restapi.Response.none(); }",68792e608a6af07ca9e91839c5ae34dcbfad89e9,"apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.server.project.DeleteBranch$Input)","apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.server.project.DeleteBranch$Input)",7,0,"@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource rsrc, com.google.gerrit.server.project.DeleteBranch.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { if (!(rsrc.getControl().controlForRef(rsrc.getBranchKey()).canDelete())) { throw new com.google.gerrit.extensions.restapi.AuthException(""Cannot delete branch""); } if (!(queryProvider.get().setLimit(1).byBranchOpen(rsrc.getBranchKey()).isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((""branch "" + (rsrc.getBranchKey())) + "" has open changes"")); } deleteRefFactory.create(rsrc).ref(rsrc.getRef()).delete(); return com.google.gerrit.extensions.restapi.Response.none(); }",0988ed9d876f6f2897e611b7289b4d552d5a4064,"apply(com.google.gerrit.server.project.BranchResource,com.google.gerrit.server.project.DeleteBranch$Input)",182678,225,236
71661,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountManager.java,2.0,"private void update(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.account.AuthRequest who, com.google.gerrit.reviewdb.client.AccountExternalId extId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = userFactory.create(extId.getAccountId()); com.google.gerrit.reviewdb.client.Account toUpdate = null; java.lang.String newEmail = who.getEmailAddress(); java.lang.String oldEmail = extId.getEmailAddress(); if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { if ((oldEmail != null) && (oldEmail.equals(user.getAccount().getPreferredEmail()))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setPreferredEmail(newEmail); } extId.setEmailAddress(newEmail); db.accountExternalIds().update(java.util.Collections.singleton(extId)); } if ((!(realm.allowsEdit(Account.FieldName.FULL_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getAccount().getFullName(), who.getDisplayName())))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setFullName(who.getDisplayName()); } if ((!(realm.allowsEdit(Account.FieldName.USER_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getUserName(), who.getUserName())))) { changeUserNameFactory.create(db, user, who.getUserName()); } if (toUpdate != null) { db.accounts().update(java.util.Collections.singleton(toUpdate)); } if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { byEmailCache.evict(oldEmail); byEmailCache.evict(newEmail); } if (toUpdate != null) { byIdCache.evict(toUpdate.getId()); } }",3419ca68e667c8fc0e4852cfef7db2f97a0eb5b5,"private void update(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.account.AuthRequest who, com.google.gerrit.reviewdb.client.AccountExternalId extId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = userFactory.create(extId.getAccountId()); com.google.gerrit.reviewdb.client.Account toUpdate = null; java.lang.String newEmail = who.getEmailAddress(); java.lang.String oldEmail = extId.getEmailAddress(); if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { if ((oldEmail != null) && (oldEmail.equals(user.getAccount().getPreferredEmail()))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setPreferredEmail(newEmail); } extId.setEmailAddress(newEmail); db.accountExternalIds().update(java.util.Collections.singleton(extId)); } if (((!(realm.allowsEdit(Account.FieldName.FULL_NAME))) && ((who.getDisplayName()) != null)) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getAccount().getFullName(), who.getDisplayName())))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setFullName(who.getDisplayName()); } if ((!(realm.allowsEdit(Account.FieldName.USER_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getUserName(), who.getUserName())))) { changeUserNameFactory.create(db, user, who.getUserName()); } if (toUpdate != null) { db.accounts().update(java.util.Collections.singleton(toUpdate)); } if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { byEmailCache.evict(oldEmail); byEmailCache.evict(newEmail); } if (toUpdate != null) { byIdCache.evict(toUpdate.getId()); } }",5436bf06da67e512d0f2fd75d216f33b857f097a,"update(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.account.AuthRequest,com.google.gerrit.reviewdb.client.AccountExternalId)","update(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.account.AuthRequest,com.google.gerrit.reviewdb.client.AccountExternalId)",8,2,"private void update(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.account.AuthRequest who, com.google.gerrit.reviewdb.client.AccountExternalId extId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = userFactory.create(extId.getAccountId()); com.google.gerrit.reviewdb.client.Account toUpdate = null; java.lang.String newEmail = who.getEmailAddress(); java.lang.String oldEmail = extId.getEmailAddress(); if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { if ((oldEmail != null) && (oldEmail.equals(user.getAccount().getPreferredEmail()))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setPreferredEmail(newEmail); } extId.setEmailAddress(newEmail); db.accountExternalIds().update(java.util.Collections.singleton(extId)); } if (((!(realm.allowsEdit(Account.FieldName.FULL_NAME))) && (!(com.google.common.base.Strings.isNullOrEmpty(who.getDisplayName())))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getAccount().getFullName(), who.getDisplayName())))) { toUpdate = load(toUpdate, user.getAccountId(), db); toUpdate.setFullName(who.getDisplayName()); } if ((!(realm.allowsEdit(Account.FieldName.USER_NAME))) && (!(com.google.gerrit.server.account.AccountManager.eq(user.getUserName(), who.getUserName())))) { changeUserNameFactory.create(db, user, who.getUserName()); } if (toUpdate != null) { db.accounts().update(java.util.Collections.singleton(toUpdate)); } if ((newEmail != null) && (!(newEmail.equals(oldEmail)))) { byEmailCache.evict(oldEmail); byEmailCache.evict(newEmail); } if (toUpdate != null) { byIdCache.evict(toUpdate.getId()); } }",1ecf73ebb6c67196059abbad7a8b02a7f3d1391b,"update(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.account.AuthRequest,com.google.gerrit.reviewdb.client.AccountExternalId)",50649,464,474
140535,java_com_google_gerrit_server_mail_send_CommentSender.java,20.0,"private java.lang.String getLine(com.google.gerrit.server.patch.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",9119e7dd0041fcce28d977794a7abeb7f596c0e9,"private java.lang.String getLine(com.google.gerrit.server.patchlib.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",0a473c2a484440856c341b68d9a70b86a1396943,"getLine(com.google.gerrit.server.patch.PatchFile,short,int)","getLine(com.google.gerrit.server.patchlib.PatchFile,short,int)",11,24,"private java.lang.String getLine(com.google.gerrit.server.diff.PatchFile fileInfo, short side, int lineNbr) { try { return fileInfo.getLine(side, lineNbr); } catch (java.io.IOException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Failed to read file on side %d"", side), err); return """"; } catch (java.lang.IndexOutOfBoundsException err) { com.google.gerrit.server.mail.send.CommentSender.log.debug(java.lang.String.format(""Failed to get line number of file on side %d"", side), err); return """"; } catch (com.google.gerrit.common.errors.NoSuchEntityException err) { com.google.gerrit.server.mail.send.CommentSender.log.warn(java.lang.String.format(""Side %d of file didn't exist"", side), err); return """"; } }",bd0a8891789ce1f015ec74eb7196be0168a49c0a,"getLine(com.google.gerrit.server.diff.PatchFile,short,int)",15241,227,226
16692,gerrit-gwtui_src_main_java_com_google_gerrit_client_account_AccountConstants.java,103.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,java.lang.String unwatchedProjectListOpen();,2d61f14f449650ce3b6cc7865a5eee8ef4826e00,,unwatchedProjectListOpen(),9,51,java.lang.String projectListOpen();,d6d4d28a3e348ad2f015a3482a3c3d3ce2440248,projectListOpen(),145032,12,9
21950,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupControl.java,4.0,public boolean canSee(com.google.gerrit.reviewdb.Account.Id id) { return isOwner(); },5604ab6ce12427139e613b55aec8c24dbdcdb2e9,public boolean canSeeMember(com.google.gerrit.reviewdb.Account.Id id) { return isOwner(); },68982b7f0262cc47aa38ee5e76cc19dd285c0ecd,canSee(com.google.gerrit.reviewdb.Account$Id),canSeeMember(com.google.gerrit.reviewdb.Account$Id),9,8,public boolean canSeeMember(com.google.gerrit.reviewdb.Account.Id id) { return isVisible(); },9ace403c9208def508a42124b6f7b5563feeff32,canSeeMember(com.google.gerrit.reviewdb.Account$Id),189859,28,28
49470,gerrit-server_src_main_java_com_google_gerrit_server_CurrentUser.java,6.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public boolean isAuthentcated() { return (this) instanceof com.google.gerrit.server.IdentifiedUser; },dbfbb3c55c05161cf613c4091c59596e5070e1bf,,isAuthentcated(),8,4,public boolean isIdentifiedUser() { return false; },0d57ddb7a2517c8ea45e7d5e37bbea65e8068874,isIdentifiedUser(),101303,28,12
72417,gerrit-server_src_main_java_com_google_gerrit_server_account_StarredChanges.java,7.0,"@java.lang.Override public com.google.gerrit.reviewdb.client.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); try { user.asyncStarredChanges(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (user.getStarredChanges().contains(change.getChange().getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } finally { user.abortStarredChanges(); } }",2dc3a5044de083e62ee98504a00c922a673c0e64,"@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); try { user.asyncStarredChanges(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (user.getStarredChanges().contains(change.getChange().getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } finally { user.abortStarredChanges(); } }",d946572c2f5938868339b265a8faddc02ed7cff4,"parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)","parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)",11,7,"@java.lang.Override public AccountResource.StarredChange parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser user = parent.getUser(); try { user.asyncStarredChanges(); com.google.gerrit.server.change.ChangeResource change = changes.parse(TopLevelResource.INSTANCE, id); if (user.getStarredChanges().contains(change.getId())) { return new com.google.gerrit.server.account.AccountResource.StarredChange(user, change); } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } finally { user.abortStarredChanges(); } }",c3ec6d4c5323bc255d435c717397d3980ecd12da,"parse(com.google.gerrit.server.account.AccountResource,com.google.gerrit.extensions.restapi.IdString)",59072,203,200
145371,src_main_java_com_ericsson_gerrit_plugins_highavailability_forwarder_rest_CacheRestApiServlet.java,3.0,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); } else { cache.invalidate(key); } com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated {}"", cacheName); }",e6fcbac0277e12234404f7348a219e4310ab5191,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated all {}"", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated {} from {}"", key, cacheName); } }",e15cfd0a8f8d290e1221b022b2d22cb4af71fd86,"evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)","evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)",5,3,"private void evictCache(com.google.common.cache.Cache<?, ?> cache, java.lang.String cacheName, java.lang.Object key) { if (Constants.PROJECT_LIST.equals(cacheName)) { cache.invalidateAll(); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated cache {}"", cacheName); } else { cache.invalidate(key); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.CacheRestApiServlet.logger.debug(""Invalidated cache {}[{}]"", cacheName, key); } }",7ebc102f2c13c4c5bb06a5ba996e180d2cee7bf3,"evictCache(com.google.common.cache.Cache,java.lang.String,java.lang.Object)",69759,135,135
67860,gerrit-server_src_main_java_com_google_gerrit_server_config_ConfigUtil.java,11.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private static boolean isInteger(java.lang.Class<?> t) { return (java.lang.Integer.class.isAssignableFrom(t)) || ((int.class) == t); },e3610ddb0c8b7fee488ef6106244fed9682c2fef,,isInteger(java.lang.Class),13,13,private static boolean isInteger(java.lang.Class<?> t) { return ((java.lang.Integer.class) == t) || ((int.class) == t); },a88d8976e5d11b7ff4765649b645105bc784bbab,isInteger(java.lang.Class),162527,42,43
86057,src_main_java_com_googlesource_gerrit_plugins_lfs_GetLfsConfig.java,0.0,@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.googlesource.gerrit.plugins.lfs.LfsConfigInfo info = new com.googlesource.gerrit.plugins.lfs.LfsConfigInfo(); com.googlesource.gerrit.plugins.lfs.LfsConfigSection config = lfsConfig.getForProject(resource.getNameKey()); if (config != null) { info.enabled = config.isEnabled(); info.maxObjectSize = config.getMaxObjectSize(); } return info; },7adb8bbccbf6a09fc686a537e714fb2824b840e5,@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.googlesource.gerrit.plugins.lfs.LfsConfigInfo info = new com.googlesource.gerrit.plugins.lfs.LfsConfigInfo(); com.googlesource.gerrit.plugins.lfs.LfsConfigSection config = lfsConfigFactory.create().getForProject(resource.getNameKey()); if (config != null) { info.enabled = config.isEnabled(); info.maxObjectSize = config.getMaxObjectSize(); } return info; },e90164cf553d075dd06a76d7ece4eb1b5772f223,apply(com.google.gerrit.server.project.ProjectResource),apply(com.google.gerrit.server.project.ProjectResource),7,0,@java.lang.Override public com.googlesource.gerrit.plugins.lfs.LfsProjectConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) throws com.google.gerrit.extensions.restapi.RestApiException { com.googlesource.gerrit.plugins.lfs.LfsProjectConfigInfo info = new com.googlesource.gerrit.plugins.lfs.LfsProjectConfigInfo(); com.googlesource.gerrit.plugins.lfs.LfsProjectConfigSection config = lfsConfigFactory.getProjectsConfig().getForProject(resource.getNameKey()); if (config != null) { info.enabled = config.isEnabled(); info.maxObjectSize = config.getMaxObjectSize(); } return info; },ef31a05f53ed17e9a9b07896847a6394234659f7,apply(com.google.gerrit.server.project.ProjectResource),188284,163,169
160951,gerrit-server_src_main_java_com_google_gerrit_server_schema_Schema_159.java,0.0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes SET %s = 'Y', created_on = created_on WHERE status = 'd' OR "" + (""EXISTS (SELECT * FROM patch_sets WHERE "" + ""patch_sets.change_id = changes.change_id AND patch_sets.draft = 'Y')"")), column)); e.execute(""UPDATE changes SET status = 'n', created_on = created_on WHERE status = 'd'""); } ui.message(""done""); }",2eef0a20656beabe9992ac75e4debedc1b7e449a,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)?"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes "" + (((((((((""SET %s = 'Y', "" + "" status = 'n' "") + "" created_on = created_on "") + ""WHERE status = 'd' "") + "" OR (status = 'n' "") + "" AND EXISTS "") + "" (SELECT * "") + "" FROM patch_sets "") + "" WHERE patch_sets.change_id = changes.change_id "") + "" AND patch_sets.draft = 'Y')) "")), column)); } ui.message(""done""); }",1ab01c6d852b9dddda23202918766617fb0ca30c,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)","migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",4,0,"@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.WORK_IN_PROGRESS; if (ui.yesno(false, ""Migrate draft changes to private changes (default is work-in-progress)"")) { strategy = com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE; } ui.message(java.lang.String.format(""Replace draft changes with %s changes ..."", strategy.name().toLowerCase())); try (com.google.gwtorm.server.StatementExecutor e = newExecutor(db)) { java.lang.String column = (strategy == (com.google.gerrit.server.schema.Schema_159.DraftWorkflowMigrationStrategy.PRIVATE)) ? ""is_private"" : ""work_in_progress""; e.execute(java.lang.String.format((""UPDATE changes "" + (((((((((""SET %s = 'Y', "" + "" status = 'n', "") + "" created_on = created_on "") + ""WHERE status = 'd' "") + "" OR (status = 'n' "") + "" AND EXISTS "") + "" (SELECT * "") + "" FROM patch_sets "") + "" WHERE patch_sets.change_id = changes.change_id "") + "" AND patch_sets.draft = 'Y')) "")), column)); } ui.message(""done""); }",fbd32b90ebaa898bd543abf9e64070a0e4d1ea57,"migrateData(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.server.schema.UpdateUI)",67181,398,399
40123,gerrit-server_src_main_java_com_google_gerrit_server_account_UniversalGroupBackend.java,3.0,@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name)); } return groups; },aa5adb5a30174bb3e2ba0d5fdce26786f0544d4d,"@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.reviewdb.client.Project project) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name, project)); } return groups; }",9c74754b11f37d8a19fe7229ca2278aaaab80306,suggest(java.lang.String),"suggest(java.lang.String,com.google.gerrit.reviewdb.client.Project)",3,5,"@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.server.project.ProjectControl project) { java.util.Set<com.google.gerrit.common.data.GroupReference> groups = com.google.common.collect.Sets.newTreeSet(com.google.gerrit.server.account.GroupBackends.GROUP_REF_NAME_COMPARATOR); for (com.google.gerrit.server.account.GroupBackend g : backends) { groups.addAll(g.suggest(name, project)); } return groups; }",70b5385f807e94293c9d8bd865fbe57a2ad7013c,"suggest(java.lang.String,com.google.gerrit.server.project.ProjectControl)",14425,150,149
140535,java_com_google_gerrit_server_patchlib_Text.java,4.0,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.patch.Text.bigFileThreshold); }",0db11b871b924efed2f0b1754d21648ea2d0aafc,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.patchlib.Text.bigFileThreshold); }",38ad131276ad87cbffa53b43915b777c1a29ba43,asByteArray(org.eclipse.jgit.lib.ObjectLoader),asByteArray(org.eclipse.jgit.lib.ObjectLoader),11,4,"public static byte[] asByteArray(org.eclipse.jgit.lib.ObjectLoader ldr) throws java.io.IOException, org.eclipse.jgit.errors.LargeObjectException, org.eclipse.jgit.errors.MissingObjectException { return ldr.getCachedBytes(com.google.gerrit.server.diff.Text.bigFileThreshold); }",03a3a06b1378863ca7b271bde4e1f822ea2e622a,asByteArray(org.eclipse.jgit.lib.ObjectLoader),15597,80,79
140535,java_com_google_gerrit_server_patch_PatchListLoader.java,11.0,"private static com.google.gerrit.server.patch.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.patch.Text aText, com.google.gerrit.server.patch.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.patch.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",6ffaf4b5d14d3a6b74b126408ab5696141d26c90,"private static com.google.gerrit.server.patchlib.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.patchlib.Text aText, com.google.gerrit.server.patchlib.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.patchlib.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",5a430897d78fbf48868ed38624192b8b1e02a93d,"createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.patch.Text,com.google.gerrit.server.patch.Text,java.lang.String)","createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.patchlib.Text,com.google.gerrit.server.patchlib.Text,java.lang.String)",11,27,"private static com.google.gerrit.server.diff.PatchListEntry createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator cmp, org.eclipse.jgit.revwalk.RevCommit aCommit, com.google.gerrit.server.diff.Text aText, com.google.gerrit.server.diff.Text bText, java.lang.String fileName) { byte[] rawHdr = com.google.gerrit.server.patch.PatchListLoader.getRawHeader((aCommit != null), fileName); byte[] aContent = aText.getContent(); byte[] bContent = bText.getContent(); long size = bContent.length; long sizeDelta = (bContent.length) - (aContent.length); org.eclipse.jgit.diff.RawText aRawText = new org.eclipse.jgit.diff.RawText(aContent); org.eclipse.jgit.diff.RawText bRawText = new org.eclipse.jgit.diff.RawText(bContent); org.eclipse.jgit.diff.EditList edits = new org.eclipse.jgit.diff.HistogramDiff().diff(cmp, aRawText, bRawText); org.eclipse.jgit.patch.FileHeader fh = new org.eclipse.jgit.patch.FileHeader(rawHdr, edits, org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED); return new com.google.gerrit.server.diff.PatchListEntry(fh, edits, com.google.common.collect.ImmutableSet.of(), size, sizeDelta); }",60c19cd168cb5606ecd70bc7dccb053853ffc5f3,"createPatchListEntry(org.eclipse.jgit.diff.RawTextComparator,org.eclipse.jgit.revwalk.RevCommit,com.google.gerrit.server.diff.Text,com.google.gerrit.server.diff.Text,java.lang.String)",15349,361,357
148032,java_com_google_gerrit_server_restapi_change_RobotComments.java,0.0,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; },31694de8cf9e7e0dadc86a16beb9ab12845818e3,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.restapi.change.RobotCommentResource>> views() { return views; },1e1e4807a9098d7c1baef8b61fb4765847879183,views(),views(),17,0,@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.change.RobotCommentResource>> views() { return views; },31694de8cf9e7e0dadc86a16beb9ab12845818e3,views(),214929,61,58
49250,src_main_java_com_googlesource_gerrit_plugins_deleteproject_DeleteProject.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private boolean isAllProjects(com.google.gerrit.server.project.ProjectResource rsrc) { return rsrc.getName().endsWith(AllProjectsNameProvider.DEFAULT); },cd9aed39a4db6714fe65e433d63fbacba93f0f32,,isAllProjects(com.google.gerrit.server.project.ProjectResource),27,0,protected boolean isAllProjects(com.google.gerrit.server.project.ProjectResource rsrc) { return rsrc.getControl().getProject().getNameKey().equals(allProjectsName); },75cd5c60a05803750b055948265701739c1dc4ef,isAllProjects(com.google.gerrit.server.project.ProjectResource),181018,39,41
25644,src_test_java_com_google_gwtorm_server_PhoneBookDbTestCase.java,18.0,"public void testInsertManyPeopleByTransaction() throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = openAndCreate(); final com.google.gwtorm.client.Transaction txn = schema.beginTransaction(); final java.util.ArrayList<com.google.gwtorm.data.TestPerson> all = new java.util.ArrayList<com.google.gwtorm.data.TestPerson>(); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key(""Bob""), 18)); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key(""Mary""), 22)); all.add(new com.google.gwtorm.data.TestPerson(new com.google.gwtorm.data.TestPerson.Key(""Zak""), 33)); schema.people().insert(all, txn); final java.sql.Statement st = statement(schema); java.sql.ResultSet rs; rs = st.executeQuery(""SELECT name,age FROM people ORDER BY name""); assertFalse(rs.next()); rs.close(); txn.commit(); rs = st.executeQuery(""SELECT name,age FROM people ORDER BY name""); for (int rowIdx = 0; rowIdx < (all.size()); rowIdx++) { assertTrue(rs.next()); assertEquals(all.get(rowIdx).name(), rs.getString(1)); assertEquals(all.get(rowIdx).age(), rs.getInt(2)); } assertFalse(rs.next()); rs.close(); st.close(); }",44588cecd34ec9e474454d08ad50f5c8fc4e54ba,"@org.junit.Test public void testInsertManyPeopleByTransaction() throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = openAndCreate(); final com.google.gwtorm.client.Transaction txn = schema.beginTransaction(); final java.util.ArrayList<com.google.gwtorm.data.Person> all = new java.util.ArrayList<com.google.gwtorm.data.Person>(); all.add(new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""Bob""), 18)); all.add(new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""Mary""), 22)); all.add(new com.google.gwtorm.data.Person(new com.google.gwtorm.data.Person.Key(""Zak""), 33)); schema.people().insert(all, txn); final java.sql.Statement st = statement(schema); java.sql.ResultSet rs; rs = st.executeQuery(""SELECT name,age FROM people ORDER BY name""); assertFalse(rs.next()); rs.close(); txn.commit(); rs = st.executeQuery(""SELECT name,age FROM people ORDER BY name""); for (int rowIdx = 0; rowIdx < (all.size()); rowIdx++) { assertTrue(rs.next()); assertEquals(all.get(rowIdx).name(), rs.getString(1)); assertEquals(all.get(rowIdx).age(), rs.getInt(2)); } assertFalse(rs.next()); rs.close(); st.close(); }",60a1dca3ab37252df838501afbaa728d3977fbd6,testInsertManyPeopleByTransaction(),testInsertManyPeopleByTransaction(),4,18,"@org.junit.Test public void testGetAllRelations() throws java.lang.Exception { final com.google.gwtorm.data.PhoneBookDb schema = open(); com.google.gwtorm.server.Access<?, ?>[] all = schema.allRelations(); assertNotNull(all); assertEquals(2, all.length); assertSame(schema.people(), all[0]); assertSame(schema.addresses(), all[1]); }",730f9fd699085fdf07868b01af905a869d1be4a2,testGetAllRelations(),54655,350,85
52753,gerrit-gwtui_src_main_java_com_google_gerrit_client_change_RelatedChanges.java,12.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private void applyMaxHeight() { int header = (getTabBar().getOffsetHeight()) + 2; for (int i = 0; i < (getTabBar().getTabCount()); i++) { tabs.get(i).setMaxHeight(((maxHeightBeforeHeader) - header)); } },2ade724dea3489da2b85b9a238e74a2688a963f0,,applyMaxHeight(),2,19,private void applyMaxHeight() { int header = (getTabBar().getOffsetHeight()) + 2; for (int i = 0; i < (getTabBar().getTabCount()); i++) { tabs.get(i).setMaxHeight(((maxHeightWithHeader) - header)); } },d0c0fbb44b6c2ea9aa6f6c72109b4cb4b34c1305,applyMaxHeight(),165730,56,56
127031,src_main_java_com_googlesource_gerrit_plugins_webhooks_processors_JenkinsEventProcessor.java,1.0,@java.lang.Override public java.lang.String process() { return com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event); },9d1d9a01f52c674596f8f5e94cc1d8edc3546a3e,@java.lang.Override public java.util.Optional<com.googlesource.gerrit.plugins.webhooks.processors.Output> process() { return java.util.Optional.of(new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output(com.googlesource.gerrit.plugins.webhooks.processors.JenkinsEventProcessor.GSON.toJson(event))); },e98d521237cde247618919181b55ac9e9f425560,process(),process(),11,0,"@java.lang.Override public java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> doProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request(com.googlesource.gerrit.plugins.webhooks.processors.GerritEventProcessor.GSON.toJson(event))); }",27feff7cf1e1f3d4edc83e79666fa9c35ab7a2e1,"doProcess(com.google.gerrit.server.events.ProjectEvent,com.googlesource.gerrit.plugins.webhooks.RemoteConfig)",40648,93,129
128170,src_main_java_com_googlesource_gerrit_plugins_importer_CompleteProjectImport.java,0.0,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.account.CapabilityControl ctl = currentUserProvider.get().getCapabilities(); return (ctl.canAdministrateServer()) || ((ctl.canPerform((((pluginName) + ""-"") + (ImportCapability.ID)))) && (rsrc.getControl().isOwner())); }",e28e78669328235bc6d21cee7c8677a9b74eec72,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { com.google.gerrit.server.permissions.PermissionBackend.WithUser withUser = permissionBackend.user(currentUserProvider.get()); return (withUser.testOrFalse(GlobalPermission.ADMINISTRATE_SERVER)) || ((withUser.testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",e9afae2ea4f094a971aec3f71b4cc2471cf10271,canCompleteImport(com.google.gerrit.server.project.ProjectResource),canCompleteImport(com.google.gerrit.server.project.ProjectResource),2,0,"private boolean canCompleteImport(com.google.gerrit.server.project.ProjectResource rsrc) { return (permissionBackend.user(currentUserProvider).testOrFalse(com.googlesource.gerrit.plugins.importer.ADMINISTRATE_SERVER)) || ((permissionBackend.user(currentUserProvider).testOrFalse(new com.google.gerrit.extensions.api.access.PluginPermission(pluginName, ImportCapability.ID))) && (rsrc.getControl().isOwner())); }",99ac6da0ebf5efa2055bc03bff1071395d20fbb0,canCompleteImport(com.google.gerrit.server.project.ProjectResource),44010,116,107
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_MergeAlways.java,1.0,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); } while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); com.google.gerrit.server.git.CodeReviewCommit newTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip.getCurrentTip(), mergedFrom); mergeTip.moveTipTo(newTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip.getCurrentTip(), args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",ab1c8702570f494d843b036e469f28ca4b76b706,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrateException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); } while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); com.google.gerrit.server.git.CodeReviewCommit newTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip.getCurrentTip(), mergedFrom); mergeTip.moveTipTo(newTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip.getCurrentTip(), args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",4beb76a0a1b825fafebb9017d2b1fad43167cefd,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)","_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",2,1,"@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); } while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); com.google.gerrit.server.git.CodeReviewCommit newTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, mergeTip.getCurrentTip(), mergedFrom); mergeTip.moveTipTo(newTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, mergeTip.getCurrentTip(), args.alreadyAccepted); setRefLogIdent(); return mergeTip; }",871800a2369918bc296731198a1b96a176c4af0c,"_run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",172413,406,405
123651,gerrit-server_src_main_java_com_google_gerrit_server_change_PostReview.java,49.0,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(ctx); dirty |= insertMessage(ctx); return dirty; }",6fc2e0bb750ea7fd5ef0fca8beea66ac05184617,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(projectCache.checkedGet(ctx.getProject()), ctx); dirty |= insertMessage(ctx); return dirty; }",b206b3131a902c28a927e7ff492f6faf9d838014,updateChange(com.google.gerrit.server.update.ChangeContext),updateChange(com.google.gerrit.server.update.ChangeContext),3,50,"@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException, java.io.IOException { user = ctx.getIdentifiedUser(); notes = ctx.getNotes(); ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); boolean dirty = false; dirty |= insertComments(ctx); dirty |= insertRobotComments(ctx); dirty |= updateLabels(projectState, ctx); dirty |= insertMessage(ctx); return dirty; }",ae950432ad543ef2f97014d3c0b0d90e967d00ea,updateChange(com.google.gerrit.server.update.ChangeContext),104593,164,156
61602,gerrit-gwtui_src_main_java_com_google_gerrit_client_editor_EditScreen.java,26.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,void setShowTabs(boolean b) { if (b) { panel.addStyleName(style.showTabs()); } else { panel.removeStyleName(style.showTabs()); } },65650501201f84c1f0b6d1d109118e4fd20130bc,,setShowTabs(boolean),28,13,@java.lang.Override protected void onUnload() { super.onUnload(); if ((cm) != null) { cm.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); },9dc2ef187b2bbb000f07f66b80b6fb5acb0cdcd6,onUnload(),109237,39,123
101813,src_test_java_com_googlesource_gerrit_plugins_uploadvalidator_BlockedKeywordValidatorTest.java,3.0,"@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)""), ((""ERROR: blocked keyword(s) found in: "" + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + "" (Line: 1) (found: foobar)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",1100b9cf00aeaa9fd4783207a6ef9f5f24ed466d,"@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, new org.eclipse.jgit.revwalk.RevWalk(repo), com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)""), ((""ERROR: blocked keyword(s) found in: "" + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + "" (Line: 1) (found: foobar)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }",e27a69a67b5475edaba48fecf29706ec60930552,testKeywords(),testKeywords(),10,2,"@org.junit.Test public void testKeywords() throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(rw); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, rw, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of((""ERROR: blocked keyword(s) found in: foo.txt (Line: 1)"" + "" (found: myp4ssw0rd, foobar)""), (""ERROR: blocked keyword(s) found in: bar.txt (Line: 5)"" + "" (found: $Id: foo bar$)""), ((""ERROR: blocked keyword(s) found in: "" + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + "" (Line: 1) (found: foobar)"")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); } }",e92620fbfaee5c3b6371c3228a5c3d3446668090,testKeywords(),47757,408,430
13329,gerrit-server_src_main_java_com_google_gerrit_server_project_RefControl.java,0.0,"private boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; for (final com.google.gerrit.reviewdb.RefRight right : getLocalRights()) { if ((right.getApprovalCategoryId().equals(actionId)) && (groups.contains(right.getAccountGroupId()))) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } if ((val == (java.lang.Integer.MIN_VALUE)) && (actionId.canInheritFromWildProject())) { for (final com.google.gerrit.reviewdb.RefRight pr : getInheritedRights()) { if ((actionId.equals(pr.getApprovalCategoryId())) && (groups.contains(pr.getAccountGroupId()))) { val = java.lang.Math.max(pr.getMaxValue(), val); } } } return val >= level; }",236fb299f3cbc624f2d5bb4d03272492d153393a,"private boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights()); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights()); } java.util.List<com.google.gerrit.reviewdb.RefRight> actionRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); for (final com.google.gerrit.reviewdb.RefRight right : allRights) { if (right.getApprovalCategoryId().equals(actionId)) { actionRights.add(right); } } java.util.Collections.sort(actionRights, new com.google.gerrit.reviewdb.RefRight.RefPatternOrder()); java.util.List<com.google.gerrit.reviewdb.RefRight> mostSpecific = com.google.gerrit.server.project.RefControl.filterMostSpecific(actionRights); for (com.google.gerrit.reviewdb.RefRight right : mostSpecific) { if (groups.contains(right.getAccountGroupId())) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } return val >= level; }",b088b71fac2e7eeb2c1b456a88e1a308ce6e5271,"canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)","canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)",3,1,"private boolean canPerform(com.google.gerrit.reviewdb.ApprovalCategory.Id actionId, short level) { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> groups = getCurrentUser().getEffectiveGroups(); int val = java.lang.Integer.MIN_VALUE; java.util.List<com.google.gerrit.reviewdb.RefRight> allRights = new java.util.ArrayList<com.google.gerrit.reviewdb.RefRight>(); allRights.addAll(getLocalRights(actionId)); if (actionId.canInheritFromWildProject()) { allRights.addAll(getInheritedRights(actionId)); } java.util.Collections.sort(allRights, RefRight.REF_PATTERN_ORDER); for (com.google.gerrit.reviewdb.RefRight right : com.google.gerrit.server.project.RefControl.filterMostSpecific(allRights)) { if (groups.contains(right.getAccountGroupId())) { if ((val < 0) && ((right.getMaxValue()) > 0)) { val = right.getMaxValue(); } else { val = java.lang.Math.max(right.getMaxValue(), val); } } } return val >= level; }",3cd91a69f3c156073c3048461b42dd22d083d241,"canPerform(com.google.gerrit.reviewdb.ApprovalCategory$Id,short)",129686,408,285
51817,gerrit-gwtui_src_main_java_com_google_gerrit_client_projects_ProjectApi.java,35.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private final native void setPluginConfigValuesRaw(com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ProjectApi.ConfigValueInput>> v);,36f7eaca6490304e74f8efe1ff4b3054661c4c02,,setPluginConfigValuesRaw(com.google.gerrit.client.rpc.NativeMap),16,6,private final native void setPluginConfigValuesRaw(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ProjectApi.StringMap> v);,61c1a4299dbd52d0e5a3cb75795324622951c44c,setPluginConfigValuesRaw(com.google.gerrit.client.rpc.NativeMap),149599,57,43
43335,gerrit-server_src_main_java_com_google_gerrit_server_account_AccountResolver.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> findById(java.lang.String accountId) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account.Id id = Account.Id.parse(accountId); if ((schema.get().accounts().get(id)) != null) { return java.util.Collections.singleton(id); } else { return java.util.Collections.emptySet(); } },ba4973d276d5e1475e9ad9fdeab0b2d5377ed0d0,,findById(java.lang.String),2,1,private boolean exists(com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { return (schema.get().accounts().get(id)) != null; },b6de49d3ca8e5de9b40e9cc280edce4f7f4c3a33,exists(com.google.gerrit.reviewdb.client.Account$Id),135220,116,52
35184,gerrit-server_src_main_java_com_google_gerrit_audit_AuditEvent.java,,,,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; com.google.gerrit.audit.AuditEvent other = ((com.google.gerrit.audit.AuditEvent) (obj)); return this.asString().equals(other.asString()); },a06b2e36088ae07863d8ee8d01b8bb455d786024,,equals(java.lang.Object),19,0,@java.lang.Override public boolean equals(java.lang.Object obj) { if ((this) == obj) return true; if (obj == null) return false; if ((getClass()) != (obj.getClass())) return false; com.google.gerrit.audit.AuditEvent other = ((com.google.gerrit.audit.AuditEvent) (obj)); return this.uuid.equals(other.uuid); },073945982bd40ee941292533f6dd620ec2ba4ecb,equals(java.lang.Object),88202,93,93
70744,gerrit-server_src_main_java_com_google_gerrit_server_git_validators_CommitValidators.java,8.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (refControl.getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())); java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = receiveEvent.commit.getParent(0); if (receiveEvent.command.getRefName().startsWith(""refs/changes"")) { refname = refname.replace(""refs/heads/"", ""refs/for/refs/heads/""); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.google.gerrit.common.ChangeHookRunner.HookResult result = hooks.doRefUpdateHook(receiveEvent.project, refname, user.getAccount(), old, receiveEvent.commit); if ((result != null) && ((result.getExitValue()) != 0)) { final java.lang.String message = result.toString().trim(); throw new com.google.gerrit.server.git.validators.CommitValidationException(message); } } return java.util.Collections.emptyList(); }",a7d63e42fa65ff4246a89f499a0fd3487cc3e08a,,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),5,18,"@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (refControl.getCurrentUser().isIdentifiedUser()) { com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())); java.lang.String refname = receiveEvent.refName; org.eclipse.jgit.lib.ObjectId old = receiveEvent.commit.getParent(0); if (receiveEvent.command.getRefName().startsWith(com.google.gerrit.server.git.validators.REFS_CHANGES)) { refname = refname.replace(com.google.gerrit.server.git.validators.R_HEADS, ""refs/for/refs/heads/""); old = org.eclipse.jgit.lib.ObjectId.zeroId(); } com.google.gerrit.common.ChangeHookRunner.HookResult result = hooks.doRefUpdateHook(receiveEvent.project, refname, user.getAccount(), old, receiveEvent.commit); if ((result != null) && ((result.getExitValue()) != 0)) { throw new com.google.gerrit.server.git.validators.CommitValidationException(result.toString().trim()); } } return java.util.Collections.emptyList(); }",6f508531f35a6fc0ba8a448af455ab629b3f6e3e,onCommitReceived(com.google.gerrit.server.events.CommitReceivedEvent),11465,327,342
148032,javatests_com_google_gerrit_server_group_db_AuditLogReaderTest.java,1.0,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-group"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",127174651980634497882afbf662824def472e60,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-account"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",365941477909587f0308a03a4d1e83728252cb8f,createGroupAsServerIdent(),createGroupAsServerIdent(),17,1,"@org.junit.Test public void createGroupAsServerIdent() throws java.lang.Exception { com.google.gerrit.server.group.InternalGroup group = createGroup(1, ""test-group"", serverIdent, null); assertThat(auditLogReader.getMembersAudit(allUsersRepo, group.getGroupUUID())).hasSize(0); }",127174651980634497882afbf662824def472e60,createGroupAsServerIdent(),215561,72,72
72096,gerrit-server_src_main_java_com_google_gerrit_server_git_WorkQueue.java,33.0,"@java.lang.Override public boolean cancel(boolean mayInterruptIfRunning) { if (task.cancel(mayInterruptIfRunning)) { if (((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable) && (running.compareAndSet(false, true))) { ((com.google.gerrit.server.git.WorkQueue.CancelableRunnable) (runnable)).cancel(); } executor.remove(this); executor.purge(); return true; } else { return false; } }",293f3382595583bd74fb4e9754dad0bd936d0693,"@java.lang.Override public boolean cancel(boolean mayInterruptIfRunning) { if (task.cancel(mayInterruptIfRunning)) { if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable) { if (running.compareAndSet(false, true)) { ((com.google.gerrit.server.git.WorkQueue.CancelableRunnable) (runnable)).cancel(); } else if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) { ((com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) (runnable)).setCanceledWhileRunning(); } } executor.remove(this); executor.purge(); return true; } else { return false; } }",fbec7f838e9c3d33307870a9f069d9e4052db43b,cancel(boolean),cancel(boolean),13,33,"@java.lang.Override public boolean cancel(boolean mayInterruptIfRunning) { if (task.cancel(mayInterruptIfRunning)) { if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CancelableRunnable) { if (running.compareAndSet(false, true)) { ((com.google.gerrit.server.git.WorkQueue.CancelableRunnable) (runnable)).cancel(); } else if ((runnable) instanceof com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) { ((com.google.gerrit.server.git.WorkQueue.CanceledWhileRunning) (runnable)).setCanceledWhileRunning(); } } executor.remove(this); executor.purge(); return true; } return false; }",d55d912cff0d966cd52acb7b58cd007cec1bb14d,cancel(boolean),62091,166,163
53540,gerrit-server_src_main_java_com_google_gerrit_server_change_ChangeJson.java,4.0,private static com.google.gerrit.server.change.ChangeJson.GitPerson toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity committer) { com.google.gerrit.server.change.ChangeJson.GitPerson p = new com.google.gerrit.server.change.ChangeJson.GitPerson(); p.name = committer.getName(); p.email = committer.getEmail(); p.date = committer.getDate(); p.tz = committer.getTimeZone(); return p; },02d88b06d95f7da7c187a1a41973ea5574027851,public static com.google.gerrit.server.change.ChangeJson.GitPerson toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity committer) { com.google.gerrit.server.change.ChangeJson.GitPerson p = new com.google.gerrit.server.change.ChangeJson.GitPerson(); p.name = committer.getName(); p.email = committer.getEmail(); p.date = committer.getDate(); p.tz = committer.getTimeZone(); return p; },2cde3fc539eee75ffd7b5e3492024ee0b32694e9,toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity),toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity),30,4,private static com.google.gerrit.extensions.common.GitPerson toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity committer) { com.google.gerrit.extensions.common.GitPerson p = new com.google.gerrit.extensions.common.GitPerson(); p.name = committer.getName(); p.email = committer.getEmail(); p.date = committer.getDate(); p.tz = committer.getTimeZone(); return p; },535975b21f8e4445f053497b500c8c01e9dbf585,toGitPerson(com.google.gerrit.reviewdb.client.UserIdentity),168979,119,110
91974,gerrit-server_src_main_java_com_google_gerrit_server_index_change_ChangeIndexer.java,21.0,"public void index(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException, java.io.IOException { index(newChangeData(db, project, changeId)); }",ede74c1b6331f49185a5b0cec4979cbb013146c7,"public void index(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = newChangeData(db, project, changeId); index(cd); reindexIfStale(cd); }",0e5bf45de28a3bfbc5b2067477f2a9cc7c87c29b,"index(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)","index(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",7,21,"public void index(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = newChangeData(db, project, changeId); index(cd); com.google.gerrit.server.index.change.ChangeIndexer.reindexAfterIndexUpdate(cd); }",bdc4cfa3dd9f48349f24019da91b306f329aedd7,"index(com.google.gerrit.reviewdb.server.ReviewDb,com.google.gerrit.reviewdb.client.Project$NameKey,com.google.gerrit.reviewdb.client.Change$Id)",48631,119,136
72081,gerrit-httpd_src_main_java_com_google_gerrit_httpd_raw_ResourceServlet.java,,,,"private com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource(javax.servlet.http.HttpServletRequest req) throws java.util.concurrent.ExecutionException { java.lang.String name = com.google.common.base.CharMatcher.is('/').trimFrom(req.getPathInfo()); if (com.google.gerrit.httpd.raw.ResourceServlet.isUnreasonableName(name)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.nio.file.Path p = getResourcePath(name); if (p == null) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> loader = newLoader(name, p); com.google.gerrit.httpd.raw.ResourceServlet.Resource r = cache.get(p, loader); if (r == (com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } if ((refresh) && (r.isStale(p))) { cache.invalidate(p); r = cache.get(p, loader); } return r; }",46677920725fa5d23ebac8870c10f21b738be99d,,getResource(javax.servlet.http.HttpServletRequest),5,0,"private com.google.gerrit.httpd.raw.ResourceServlet.Resource getResource(javax.servlet.http.HttpServletRequest req) throws java.util.concurrent.ExecutionException { java.lang.String name = com.google.common.base.CharMatcher.is('/').trimFrom(req.getPathInfo()); if (com.google.gerrit.httpd.raw.ResourceServlet.isUnreasonableName(name)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.nio.file.Path p = getResourcePath(name); if (p == null) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> loader = newLoader(p); com.google.gerrit.httpd.raw.ResourceServlet.Resource r = cache.get(p, loader); if (r == (com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND)) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } if ((refresh) && (r.isStale(p))) { cache.invalidate(p); r = cache.get(p, loader); } return r; }",8f8efde3770988bc0416aaff479c39bc0b7edfd2,getResource(javax.servlet.http.HttpServletRequest),6676,305,303
87093,gerrit-server_src_main_java_com_google_gerrit_server_notedb_RevisionNote.java,1.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,public com.google.common.collect.ImmutableList<? extends com.google.gerrit.reviewdb.client.Comment> getComments() { checkParsed(); return comments; },4857632b27800028a3c721e768d7270cdda1a6bb,,getComments(),12,0,public com.google.common.collect.ImmutableList<T> getComments() { checkParsed(); return comments; },13c66c3c86cbc0bcf3fa985794696d27df4401ec,getComments(),56098,38,24
140535,java_com_google_gerrit_reviewdb_client_Patch.java,9.0,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.Patch.PatchType.forCode(patchType); },b86ffd8dae421f2698ad4581aebdb15e3da46809,public com.google.gerrit.reviewdb.client.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.PatchType.forCode(patchType); },4654952b3808daa68327ddeab6559e129b587914,getPatchType(),getPatchType(),11,11,public com.google.gerrit.reviewdb.client.Patch.PatchType getPatchType() { return com.google.gerrit.reviewdb.client.Patch.PatchType.forCode(patchType); },b86ffd8dae421f2698ad4581aebdb15e3da46809,getPatchType(),15642,45,49
89132,gerrit-server_src_main_java_com_google_gerrit_server_change_Abandon.java,6.0,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Abandoned""); if (!(com.google.common.base.Strings.nullToEmpty(msgTxt).trim().isEmpty())) { msg.append(""\n\n""); msg.append(msgTxt.trim()); } return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString()); }",42b55b8cfc3e8e6a201a40dc6ef04bea4da0675d,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Abandoned""); if (!(com.google.common.base.Strings.nullToEmpty(msgTxt).trim().isEmpty())) { msg.append(""\n\n""); msg.append(msgTxt.trim()); } return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString(), ChangeMessagesUtil.ABANDON); }",d58d14f4957b97cf5c4f728afe42ae9ea2d1103b,newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext),newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext),11,6,"private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append(""Abandoned""); if (!(com.google.common.base.Strings.nullToEmpty(msgTxt).trim().isEmpty())) { msg.append(""\n\n""); msg.append(msgTxt.trim()); } return com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx, msg.toString(), ChangeMessagesUtil.TAG_ABANDON); }",77fa07eb247daa90541217bf324849a36142b947,newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext),73578,147,149
109252,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_server_mail_AddReviewerSenderIT.java,27.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDbSingly() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeByOtherInNoteDb(singly()); },9b454dd7aaede21b903cc4f72e4db7b84d79c9e9,,addReviewerToReviewableChangeByOtherInNoteDbSingly(),16,3,@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDbSingly() throws java.lang.Exception { addReviewerToReviewableChangeByOtherInNoteDb(singly()); },ee961b4e28d612aa4179ca76cb21b8a6984686ae,addReviewerToReviewableChangeByOtherInNoteDbSingly(),145711,60,47
54509,gerrit-solr_src_main_java_com_google_gerrit_solr_SolrChangeIndex.java,7.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private static java.util.List<org.apache.solr.client.solrj.SolrQuery.SortClause> getSorts(com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> schema, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { if (com.google.gerrit.server.query.change.SortKeyPredicate.hasSortKeyField(schema)) { boolean reverse = com.google.gerrit.server.query.change.ChangeQueryBuilder.hasNonTrivialSortKeyAfter(schema, p); return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.SORTKEY.getName(), (!reverse ? SolrQuery.ORDER.desc : SolrQuery.ORDER.asc))); } else { return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.UPDATED.getName(), SolrQuery.ORDER.desc), new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.LEGACY_ID.getName(), SolrQuery.ORDER.desc)); } }",7ea5f47b316a2496d5f44c9f3cfd88163511aa88,,"getSorts(com.google.gerrit.server.index.Schema,com.google.gerrit.server.query.Predicate)",8,0,"@java.lang.SuppressWarnings(""deprecation"") private static java.util.List<org.apache.solr.client.solrj.SolrQuery.SortClause> getSorts(com.google.gerrit.server.index.Schema<com.google.gerrit.server.query.change.ChangeData> schema, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { if (com.google.gerrit.server.query.change.SortKeyPredicate.hasSortKeyField(schema)) { boolean reverse = com.google.gerrit.server.query.change.ChangeQueryBuilder.hasNonTrivialSortKeyAfter(schema, p); return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.SORTKEY.getName(), (!reverse ? SolrQuery.ORDER.desc : SolrQuery.ORDER.asc))); } else { return com.google.common.collect.ImmutableList.of(new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.UPDATED.getName(), SolrQuery.ORDER.desc), new org.apache.solr.client.solrj.SolrQuery.SortClause(ChangeField.LEGACY_ID.getName(), SolrQuery.ORDER.desc)); } }",d85b62de088ebd4eadec74a490f7d262fa201ecd,"getSorts(com.google.gerrit.server.index.Schema,com.google.gerrit.server.query.Predicate)",127058,288,297
35181,gerrit-server_src_main_java_com_google_gerrit_server_account_GroupCacheImpl.java,5.0,"public void evictAfterRename(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName, final com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName) { byName.remove(oldName); updateGroupList(oldName, newName); }",f8ba649ed98f44931926df0a0c61128db59c9883,"@java.lang.Override public void evictAfterRename(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName, final com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName) { byName.remove(oldName); updateGroupList(oldName, newName); }",8feda468b1a9fc957064e09160f3e49da1fcb0f3,"evictAfterRename(com.google.gerrit.reviewdb.client.AccountGroup$NameKey,com.google.gerrit.reviewdb.client.AccountGroup$NameKey)","evictAfterRename(com.google.gerrit.reviewdb.client.AccountGroup$NameKey,com.google.gerrit.reviewdb.client.AccountGroup$NameKey)",12,5,"@java.lang.Override public void evictAfterRename(final com.google.gerrit.reviewdb.client.AccountGroup.NameKey oldName, final com.google.gerrit.reviewdb.client.AccountGroup.NameKey newName) { if (oldName != null) { byName.invalidate(oldName.get()); } if (newName != null) { byName.invalidate(newName.get()); } }",fac92b8d8c0c89a1dd4075b8906d252ee4b22b17,"evictAfterRename(com.google.gerrit.reviewdb.client.AccountGroup$NameKey,com.google.gerrit.reviewdb.client.AccountGroup$NameKey)",93564,75,95
71940,gerrit-server_src_main_java_com_google_gerrit_server_git_strategy_SubmitStrategy.java,3.0,"public final com.google.gerrit.server.git.MergeTip run(final com.google.gerrit.server.git.CodeReviewCommit currentTip, final java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { refLogIdent = null; checkState(((args.caller) != null)); return _run(currentTip, toMerge); }",1d85470e7f54fb1fe6a2147b05cb8398df285920,"public final com.google.gerrit.server.git.MergeTip run(final com.google.gerrit.server.git.CodeReviewCommit currentTip, final java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrateException { refLogIdent = null; checkState(((args.caller) != null)); return _run(currentTip, toMerge); }",e8640f65c78ffc990060c7f781d5b0fe6900014e,"run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)","run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",2,3,"public final com.google.gerrit.server.git.MergeTip run(final com.google.gerrit.server.git.CodeReviewCommit currentTip, final java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { refLogIdent = null; checkState(((args.caller) != null)); return _run(currentTip, toMerge); }",5777b2c4ef3e3ff26ab5d99386e68f5f0d317f27,"run(com.google.gerrit.server.git.CodeReviewCommit,java.util.Collection)",172407,103,102
66646,gerrit-acceptance-tests_src_test_java_com_google_gerrit_acceptance_rest_project_ListProjectsIT.java,5.0,,da39a3ee5e6b4b0d3255bfef95601890afd80709,"private java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> filter(java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> infos) { return com.google.common.collect.Iterables.filter(infos, new com.google.common.base.Predicate<com.google.gerrit.extensions.common.ProjectInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.common.ProjectInfo in) { return ((in.name) != null) && (((in.name.equals(allProjects.get())) || (in.name.equals(allUsers.get()))) || (in.name.startsWith(getProjectPrefix()))); } }); }",747ad203bd5dfe7428aac573b7238baf4d28224f,,filter(java.lang.Iterable),3,6,"private java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> filter(java.lang.Iterable<com.google.gerrit.extensions.common.ProjectInfo> infos) { final java.lang.String prefix = name(""""); return com.google.common.collect.Iterables.filter(infos, new com.google.common.base.Predicate<com.google.gerrit.extensions.common.ProjectInfo>() { @java.lang.Override public boolean apply(com.google.gerrit.extensions.common.ProjectInfo in) { return ((in.name) != null) && (((in.name.equals(allProjects.get())) || (in.name.equals(allUsers.get()))) || (in.name.startsWith(prefix))); } }); }",5a64871329f950e0946a45ae7bf49fd6eab6bd18,filter(java.lang.Iterable),202582,166,175
84657,gitiles-servlet_src_main_java_com_google_gitiles_LogServlet.java,9.0,"private static com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> getStart(com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> params, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException { java.util.List<java.lang.String> values = params.get(com.google.gitiles.LogServlet.START_PARAM); switch (values.size()) { case 0 : return com.google.common.base.Optional.absent(); case 1 : java.lang.String id = values.get(0); if (!(org.eclipse.jgit.lib.AbbreviatedObjectId.isId(id))) { return null; } java.util.Collection<org.eclipse.jgit.lib.ObjectId> ids = reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(id)); if ((ids.size()) != 1) { return null; } return com.google.common.base.Optional.of(com.google.common.collect.Iterables.getOnlyElement(ids)); default : return null; } }",73d365b76637fc9bcb737a637619b3ee95f88515,"private static com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> getStart(com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> params, org.eclipse.jgit.lib.ObjectReader reader) throws java.io.IOException { java.util.List<java.lang.String> values = params.get(com.google.gitiles.LogServlet.START_PARAM); switch (values.size()) { case 0 : return com.google.common.base.Optional.absent(); case 1 : java.lang.String id = values.get(0); if (!(org.eclipse.jgit.lib.AbbreviatedObjectId.isId(id))) { throw new java.lang.IllegalStateException(); } java.util.Collection<org.eclipse.jgit.lib.ObjectId> ids = reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(id)); if ((ids.size()) != 1) { throw new java.lang.IllegalStateException(); } return com.google.common.base.Optional.of(com.google.common.collect.Iterables.getOnlyElement(ids)); default : throw new java.lang.IllegalStateException(); } }",3d2b58343c94065710ecab94cf8af559a9f01c41,"getStart(com.google.common.collect.ListMultimap,org.eclipse.jgit.lib.ObjectReader)","getStart(com.google.common.collect.ListMultimap,org.eclipse.jgit.lib.ObjectReader)",2,9,"private static com.google.common.base.Optional<org.eclipse.jgit.lib.ObjectId> getStart(com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> params, org.eclipse.jgit.lib.ObjectReader reader) throws com.google.gitiles.LogServlet.InvalidStartValueException, java.io.IOException { java.util.List<java.lang.String> values = params.get(com.google.gitiles.LogServlet.START_PARAM); switch (values.size()) { case 0 : return com.google.common.base.Optional.absent(); case 1 : java.lang.String id = values.get(0); if (!(org.eclipse.jgit.lib.AbbreviatedObjectId.isId(id))) { throw new com.google.gitiles.LogServlet.InvalidStartValueException(); } java.util.Collection<org.eclipse.jgit.lib.ObjectId> ids = reader.resolve(org.eclipse.jgit.lib.AbbreviatedObjectId.fromString(id)); if ((ids.size()) != 1) { throw new com.google.gitiles.LogServlet.InvalidStartValueException(); } return com.google.common.base.Optional.of(com.google.common.collect.Iterables.getOnlyElement(ids)); default : throw new com.google.gitiles.LogServlet.InvalidStartValueException(); } }",b53eece516c9e55a5c72e9c4b816bc02085ed341,"getStart(com.google.common.collect.ListMultimap,org.eclipse.jgit.lib.ObjectReader)",104903,279,318
158871,java_com_google_gitiles_doc_MarkdownToHtml.java,9.0,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return FilterImageDataUri.INSTANCE.getInnocuousOutput(); }",17d7a867f63c5da701071d1f840ebb0ca5149bfa,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return SharedUtility.IMAGE_URI_INNOCUOUS_OUTPUT; }",91430b6b403f357c0ae53a241f3ce5a1fba9a3ab,image(java.lang.String),image(java.lang.String),5,9,"java.lang.String image(java.lang.String dest) { if ((com.google.gitiles.doc.html.HtmlBuilder.isValidHttpUri(dest)) || (com.google.gitiles.doc.html.HtmlBuilder.isImageDataUri(dest))) { return dest; } else if ((imageLoader) != null) { return imageLoader.inline(filePath, dest); } return SoyConstants.IMAGE_URI_INNOCUOUS_OUTPUT; }",464b7b5e518943a23acc9c323b92e47debc24040,image(java.lang.String),67992,105,105
75978,gerrit-pgm_src_main_java_com_google_gerrit_pgm_Reindex.java,3.0,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); sysInjector.injectMembers(this); try { boolean ok = true; for (com.google.gerrit.server.index.IndexDefinition<?, ?, ?> def : indexDefs) { if (listIndices) { java.lang.System.out.format(""%s\n"", def.getName()); } else { ok &= reindex(def); } } return ok ? 0 : 1; } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } finally { sysManager.stop(); dbManager.stop(); } }",a4485a571078e9414397f37c08680136eeccf996,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); sysInjector.injectMembers(this); checkIndicesOption(); try { boolean ok = true; for (com.google.gerrit.server.index.IndexDefinition<?, ?, ?> def : indexDefs) { if (listIndices) { java.lang.System.out.format(""%s\n"", def.getName()); } else { if ((indices.isEmpty()) || (indices.contains(def.getName()))) { ok &= reindex(def); } } } return ok ? 0 : 1; } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } finally { sysManager.stop(); dbManager.stop(); } }",f84306966d277ff620534f8025e4fc4e2e3b6439,run(),run(),14,7,"@java.lang.Override public int run() throws java.lang.Exception { mustHaveValidSite(); dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); globalConfig = dbInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)); threads = com.google.gerrit.pgm.util.ThreadLimiter.limitThreads(dbInjector, threads); checkNotSlaveMode(); disableLuceneAutomaticCommit(); disableChangeCache(); com.google.gerrit.lifecycle.LifecycleManager dbManager = new com.google.gerrit.lifecycle.LifecycleManager(); dbManager.add(dbInjector); dbManager.start(); sysInjector = createSysInjector(); com.google.gerrit.lifecycle.LifecycleManager sysManager = new com.google.gerrit.lifecycle.LifecycleManager(); sysManager.add(sysInjector); sysManager.start(); sysInjector.injectMembers(this); checkIndicesOption(); try { boolean ok = (list) ? list() : reindex(); return ok ? 0 : 1; } catch (java.lang.Exception e) { throw die(e.getMessage(), e); } finally { sysManager.stop(); dbManager.stop(); } }",792b9699f0f92d9145ee636b5b9c68f2f21f00c7,run(),213759,359,288
78945,gerrit-server_src_main_java_com_google_gerrit_server_change_H2AccountPatchReviewStore.java,,,,"public static com.google.gwtorm.server.OrmException convertError(java.lang.String op, java.sql.SQLException err) { switch (com.google.gerrit.server.change.H2AccountPatchReviewStore.getSQLStateInt(err)) { case 23001 : case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(""ACCOUNT_PATCH_REVIEWS"", err); default : if (((err.getCause()) == null) && ((err.getNextException()) != null)) { err.initCause(err.getNextException()); } return new com.google.gwtorm.server.OrmException((op + "" failure on ACCOUNT_PATCH_REVIEWS""), err); } }",278fc78c8b620847b077e5e2df195ecdfab032bd,,"convertError(java.lang.String,java.sql.SQLException)",4,7,"public static com.google.gwtorm.server.OrmException convertError(java.lang.String op, java.sql.SQLException err) { switch (com.google.gerrit.server.schema.H2AccountPatchReviewStore.getSQLStateInt(err)) { case 23001 : case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(""ACCOUNT_PATCH_REVIEWS"", err); default : if (((err.getCause()) == null) && ((err.getNextException()) != null)) { err.initCause(err.getNextException()); } return new com.google.gwtorm.server.OrmException((op + "" failure on ACCOUNT_PATCH_REVIEWS""), err); } }",cd5e9827f757e9f2f3b88a1064613367cd251161,"convertError(java.lang.String,java.sql.SQLException)",68981,162,162
46080,gerrit-server_src_main_java_com_google_gerrit_server_query_change_ChangeData.java,25.0,"public java.lang.String[] currentFilePaths(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db, com.google.gerrit.server.patch.PatchListCache cache) throws com.google.gwtorm.server.OrmException { if ((currentFiles) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(db); if (ps == null) { return null; } com.google.gerrit.server.patch.PatchList p; try { p = cache.get(c, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { currentFiles = new java.lang.String[0]; return currentFiles; } java.util.List<java.lang.String> r = new java.util.ArrayList<java.lang.String>(p.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : p.getPatches()) { if (Patch.COMMIT_MSG.equals(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; case REWRITE : break; } } currentFiles = r.toArray(new java.lang.String[r.size()]); java.util.Arrays.sort(currentFiles); } return currentFiles; }",23138045d689b87044a92944912ccf470c697ee7,"public java.util.List<java.lang.String> currentFilePaths(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db, com.google.gerrit.server.patch.PatchListCache cache) throws com.google.gwtorm.server.OrmException { if ((currentFiles) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(db); if (ps == null) { return null; } com.google.gerrit.server.patch.PatchList p; try { p = cache.get(c, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { currentFiles = java.util.Collections.emptyList(); return currentFiles; } java.util.List<java.lang.String> r = new java.util.ArrayList<java.lang.String>(p.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : p.getPatches()) { if (Patch.COMMIT_MSG.equals(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; case REWRITE : break; } } java.util.Collections.sort(currentFiles); } return currentFiles; }",73071caecfe8b0e3792b711fa58f40a5662d707b,"currentFilePaths(com.google.inject.Provider,com.google.gerrit.server.patch.PatchListCache)","currentFilePaths(com.google.inject.Provider,com.google.gerrit.server.patch.PatchListCache)",4,24,"public java.util.List<java.lang.String> currentFilePaths(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db, com.google.gerrit.server.patch.PatchListCache cache) throws com.google.gwtorm.server.OrmException { if ((currentFiles) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(db); if (ps == null) { return null; } com.google.gerrit.server.patch.PatchList p; try { p = cache.get(c, ps); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { currentFiles = java.util.Collections.emptyList(); return currentFiles; } java.util.List<java.lang.String> r = new java.util.ArrayList<java.lang.String>(p.getPatches().size()); for (com.google.gerrit.server.patch.PatchListEntry e : p.getPatches()) { if (Patch.COMMIT_MSG.equals(e.getNewName())) { continue; } switch (e.getChangeType()) { case ADDED : case MODIFIED : case DELETED : case COPIED : r.add(e.getNewName()); break; case RENAMED : r.add(e.getOldName()); r.add(e.getNewName()); break; case REWRITE : break; } } java.util.Collections.sort(r); currentFiles = java.util.Collections.unmodifiableList(r); } return currentFiles; }",fadff7d885609dca7b56c7a416311bea02a53507,"currentFilePaths(com.google.inject.Provider,com.google.gerrit.server.patch.PatchListCache)",58475,390,402
