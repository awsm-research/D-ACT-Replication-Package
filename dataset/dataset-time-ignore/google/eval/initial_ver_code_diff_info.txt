<START_MOD>private void assertKeys(long keyId, org.bouncycastle.openpgp.PGPPublicKey... expected) throws java.lang.Exception { final com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKey, java.lang.String> keyToString = new com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKey, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.bouncycastle.openpgp.PGPPublicKey in) { return com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(in); } }; com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKeyRing, java.lang.String> keyRingToString = new com.google.common.base.Function<org.bouncycastle.openpgp.PGPPublicKeyRing, java.lang.String>() { @java.lang.Override public java.lang.String apply(org.bouncycastle.openpgp.PGPPublicKeyRing in) { return keyToString.apply(in.getPublicKey()); } }; assertThat(com.google.common.collect.Iterables.transform(store.get(keyId), keyRingToString)).containsExactlyElementsIn(com.google.common.collect.FluentIterable.of(expected).transform(keyToString)); }<END_MOD>
private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final org.bouncycastle.openpgp.<START_MOD>operator.bc.BcPGPDataEncryptorBuilder builder = new org.bouncycastle.openpgp.operator.bc.BcPGPDataEncryptorBuilder(org.bouncycastle.openpgp.PGPEncryptedData.CAST5).setSecureRandom(prng); final org.bouncycastle.openpgp.<END_MOD>PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(<START_MOD>builder); final org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator methodGenerator = new org.bouncycastle.openpgp.operator.bc.BcPublicKeyKeyEncryptionMethodGenerator(dest<END_MOD>); cpk.addMethod(<START_MOD>methodGenerator<END_MOD>); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk.open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to add starred change } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } <START_MOD>rsrc.getUser().clearStarredChanges(); <END_MOD>return com.google.gerrit.extensions.restapi.Response.none(); }
private java.util.Optional<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }
@com.google.gwt.uibinder.client.UiHandler("save") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.<START_MOD>getNativeKeyCode<END_MOD>()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }
<START_MOD>public static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key, com.google.gerrit.gpg.CheckResult checkResult) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } info.status = checkResult.getStatus(); if (!(checkResult.getProblems().isEmpty())) { info.problems = checkResult.getProblems(); } return info; }<END_MOD>
public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.schema.<START_MOD>ReviewDbUtil.unwrapDb<END_MOD>(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException( initialize schema e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException( upgrade schema e); } updateSystemConfig(db); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().<START_MOD>canMaintainServer<END_MOD>()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format( site administrators can flush %s com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""); }
void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.<START_MOD>getRevId<END_MOD>(c, cache, change, ps); } draftUpdate.insertComment(c); }
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup.NameKey apply(java.lang.String name) { return new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name); }<END_MOD>
<START_MOD>private static final void put(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, final com.google.gwt.core.client.JavaScriptObject cb) { api.put(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }<END_MOD>
void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(<START_MOD>projectState, user<END_MOD>, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }
<START_MOD>public static void patch(java.lang.String token, final com.google.gerrit.reviewdb.Patch.Key id, final int patchIndex, final com.google.gerrit.common.data.PatchSetDetail patchSetDetail, final com.google.gerrit.client.changes.PatchTable patchTable, final java.lang.String type) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, select()); } <END_MOD>private <START_MOD>com.google.gerrit.client.ui.Screen select() { if ((com.google.gerrit.client.Dispatcher.matchPrefix("/c/", token)) && (id != null)) { if ((type == null) || ("".equals(type))) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide(id, patchIndex, patchSetDetail, patchTable); } else if ("unified".equals(type)) { return new com.google.gerrit.client.patches.PatchScreen.Unified(id, patchIndex, patchSetDetail, patchTable); } else { return new com.google.gerrit.client.NotFoundScreen(); } } if (com.google.gerrit.client.Dispatcher.matchPrefix("patch,sidebyside,", token)) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide((id != null ? id : Patch.Key.parse(com.google.gerrit.client.Dispatcher.<END_MOD>skip(<START_MOD>token))), patchIndex, patchSetDetail, patchTable); } if (com.google.gerrit.client.Dispatcher.matchPrefix("patch,unified,", token)<END_MOD>) { return <START_MOD>new com.google.gerrit.client.patches.PatchScreen.Unified((id != null ? id : Patch.Key.parse(com.google.gerrit.client.Dispatcher.skip(token))), patchIndex, patchSetDetail, patchTable); } return new com.google.gerrit.client.NotFoundScreen(); } }); }<END_MOD>
void resizeCodeMirror() {<START_MOD> if ((cmA) == null) { return; }<END_MOD> int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + <START_MOD>10<END_MOD>; cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); diffTable.sidePanel.adjustGutters(cmB); }
<START_MOD>private void testCreateGroupWithProperties(boolean writeGroupsToNoteDb) throws java.lang.Exception { com.google.gerrit.extensions.api.groups.GroupInput in = new com.google.gerrit.extensions.api.groups.GroupInput(); in.name = name("newGroup"); in.description = "Test description"; in.visibleToAll = true; in.ownerId = getFromCache("Administrators").getGroupUUID().get(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(in).detail(); assertThat(g.description).isEqualTo(in.description); assertThat(g.options.visibleToAll).isEqualTo(in.visibleToAll); assertThat(g.ownerId).isEqualTo(in.ownerId); if (writeGroupsToNoteDb) { assertGroupOwnerPermissions(g.id, in.ownerId); } }<END_MOD>
@java.lang.Override public void run() { <START_MOD>for (java.lang.String folder : repoFolders) { java.nio.file.Path basePath = java.nio.file.Paths.get(folder); if (java.nio.file.Files.notExists(basePath)) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.debug( path {} does not exist basePath); continue; } <END_MOD>try { java.nio.file.Files.walkFileTree(<START_MOD>basePath<END_MOD>, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn( while trying to delete trash folders e); } }<START_MOD> }<END_MOD>
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.<START_MOD>format<END_MOD>(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { <START_MOD>int<END_MOD> <START_MOD>previousPatchIndex = detail.getPreviousPatch<END_MOD>(index<START_MOD>,<END_MOD> <START_MOD>PREFERENCE_VALIDATOR<END_MOD>); <START_MOD>if (previousPatchIndex < 0<END_MOD>) {<START_MOD> return null; }<END_MOD> com.google.gerrit.client.ui.InlineHyperlink link = createLink(<START_MOD>previousPatchIndex<END_MOD>, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); return link; }
<START_MOD>private boolean isHidden() { return getProjectControl().getProject().getState().equals(Project.State.HIDDEN); }<END_MOD>
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(( edit global capabilities for projects other than   + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( section name } com.google.gerrit.server.project.RefPattern.validate(name); } else { <START_MOD>java.util.Set<java.lang.String> pluginCapabilities = listCapabilities.collectPluginCapabilities().keySet(); <END_MOD>for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(<START_MOD>(<END_MOD>com.google.gerrit.common.data.GlobalCapability.<START_MOD>isGlobalCapability<END_MOD>(p.getName(<START_MOD>))) || (pluginCapabilities.contains(p.getName()<END_MOD>)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((( add non-global capability   + (p.getName())) +   to global capabilities } } } } }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } <START_MOD>if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement.Builder srb = com.google.gerrit.common.data.SubmitRequirement.builder(); srb.setFullReason(requirement.fullReason); srb.setShortReason(requirement.shortReason); if ((requirement.label) != null) { srb.setLabel(requirement.label); } rec.requirements.add(srb.build()); } } <END_MOD>return rec; }
private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), <START_MOD>ChangeMessagesUtil.MERGE_OP, <END_MOD>  was deleted. cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn(( abandon changes for deleted project   + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn(( abandon changes for deleted project   + destProject), e); } }
<START_MOD>private void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.client.account.AccountInfo a, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(((((person.name()) + " <") + (person.email())) + ">")); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.ui.AccountLinkPanel.owner(a), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }<END_MOD>
@java.lang.Override public void visit(com.google.gitiles.doc.<START_MOD>NamedAnchor<END_MOD> node) { if (outputNamedAnchor) { html.open("a").attribute("name", node.<START_MOD>getName()<END_MOD>).close("a"); } }
@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(( paragraph 1 + ((("\n" +   paragraph 2 + "\n") +   paragraph 3 update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(( patch set 1 + ((((((("\n" +   paragraph 1 + "\n") +   paragraph 2 + "\n") +   paragraph 3 + "\n") +   1 commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<<START_MOD>com.google.gerrit.reviewdb.client.ChangeMessage<END_MOD>> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(( paragraph 1 + ((("\n" +   paragraph 2 + "\n") +   paragraph 3 changeMessages.get(0)<START_MOD>.getMessage()<END_MOD>); }
<START_MOD>@java.lang.Override public void delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteComment.apply(comment, input); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException | com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete comment", e); } }<END_MOD>
<START_MOD>private static org.eclipse.jgit.revwalk.RevCommit lookupCommit(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId(patchSet); return com.google.gerrit.server.edit.ChangeEditModifier.lookup(repository, patchSetCommitId); }<END_MOD>
<START_MOD>@org.junit.Test public void testConnectionTask() throws java.sql.SQLException { eventsDb = new com.ericsson.gerrit.plugins.eventslog.SQLClient(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_DRIVER, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_PATH, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_OPTIONS); localEventsDb = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.SQLClient.class); expect(localEventsDb.getAll()).andReturn(new java.util.ArrayList<com.ericsson.gerrit.plugins.eventslog.SQLClient.SQLEntry>()); org.easymock.EasyMock.replay(localEventsDb); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); eventsDb.createDBIfNotCreated(); poolMock.scheduleWithFixedDelay(store.new com.ericsson.gerrit.plugins.eventslog.CheckConnectionTask(), 0, 0, java.util.concurrent.TimeUnit.MILLISECONDS); easyMock.verifyAll(); }<END_MOD>
<START_MOD>private long getDiskUsage(java.io.File file) { if (file.isFile()) { return file.length(); } long size = 0; for (java.io.File f : file.listFiles()) { size += getDiskUsage(f); } return size; }<END_MOD>
<START_MOD>public static java.lang.String getSideBySideDiffUrl(java.lang.String changeId, java.lang.Integer patchSetIdA, int patchSetIdB, java.lang.String fileName) { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append("/x/"); url.append(com.google.gerrit.plugin.client.Plugin.get().getPluginName()); url.append("/c/"); url.append(changeId); url.append("/"); if (patchSetIdA != null) { url.append(patchSetIdA); url.append(".."); } url.append(patchSetIdB); url.append("/"); url.append(com.google.gwt.http.client.URL.encode(fileName)); return url.toString(); }<END_MOD>
@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { assertThat(args.getCommands().<START_MOD>getCommands()).containsKey<END_MOD>("refs/heads/master"); try (org.eclipse.jgit.revwalk.RevWalk rw = args.newRevWalk()) { rw.parseBody(rw.parseCommit(args.getCommands().get("refs/heads/master").<START_MOD>get<END_MOD>())); } catch (java.io.IOException e) { assertThat(e).isNull(); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException( to fail } }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState<START_MOD>; try { newState<END_MOD> = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); <START_MOD>} catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } <END_MOD>if (newState == null) { return super.openHandle(repo, oldId); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock<START_MOD>.get()<END_MOD>)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); <START_MOD>assertThat(uDev.isOwner()).named<END_MOD>( owner <START_MOD>assertThat(uDev.isOwnerAnyRef()).named( ref assertOwner("refs/heads/x/*", uDev); assertOwner("refs/heads/x/y", uDev); assertOwner("refs/heads/x/y/*", uDev); assertNotOwner("refs/*", uDev); assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertThat(uFix<END_MOD>.isOwner())<START_MOD>.isFalse(); assertThat(uFix<END_MOD>.isOwnerAnyRef())<START_MOD>.isTrue(); <END_MOD>assertOwner(<START_MOD>"refs/heads/x/y/*", uFix); assertOwner("refs/heads/x/y/bar", uFix); assertNotOwner(<END_MOD>"refs/heads/x/*", <START_MOD>uFix); assertNotOwner<END_MOD>("refs/heads/x/y", <START_MOD>uFix); <END_MOD>assertNotOwner("refs/*", <START_MOD>uFix); <END_MOD>assertNotOwner("refs/heads/master", uFix); }
<START_MOD>private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) { com.google.gerrit.extensions.common.GroupInfo canSeeGroup = visibleGroups.get(id); if (canSeeGroup == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); canSeeGroup = (control.isVisible()) ? groupJson.format(control.getGroup()) : com.google.gerrit.server.project.GetAccess.invisibleSentinel; } catch (com.google.gerrit.common.errors.NoSuchGroupException | com.google.gwtorm.server.OrmException e) { canSeeGroup = com.google.gerrit.server.project.GetAccess.invisibleSentinel; } visibleGroups.put(id, canSeeGroup); } return canSeeGroup; }<END_MOD>
public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RANGE_SUBJECT_FACTORY).that(range); }
private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.<START_MOD>getInfo().auth<END_MOD>().canEdit(Account.FieldName.USER_NAME); }
<START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage( UUID of the <START_MOD>account<END_MOD> users-XYZ groupConfig.commit(metaDataUpdate); } }
@java.lang.Override public void execute() { <START_MOD>if (com.google.common.base.Strings.isNullOrEmpty(fileName)) { <END_MOD>file.setFocus(true); }<START_MOD> else { content.setFocus(true); } }<END_MOD>
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache<START_MOD>); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer<END_MOD>); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, <START_MOD>accountIndexer, <END_MOD>null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
<START_MOD>private<END_MOD> com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.<START_MOD>query.<END_MOD>change.<START_MOD>ChangeData<END_MOD> <START_MOD>cd, com.google.gerrit.reviewdb.client.PatchSet.Id psId<END_MOD>) throws com.google.gwtorm.server.OrmException { <START_MOD>accountLoader = accountLoaderFactory.create(has(<END_MOD>com.google.gerrit.server.change.<START_MOD>DETAILED_ACCOUNTS<END_MOD>)); com.google.<START_MOD>gerrit<END_MOD>.<START_MOD>server<END_MOD>.<START_MOD>change<END_MOD>.<START_MOD>ChangeJson.ChangeInfo res = toChangeInfo<END_MOD>(<START_MOD>cd, psId); accountLoader<END_MOD>.<START_MOD>fill<END_MOD>(); return <START_MOD>res<END_MOD>; }
<START_MOD>public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder(); }<END_MOD>
private void updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = ((   + quotedPath) +   && git symbolic-ref HEAD   + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.<START_MOD>SshHelper.newErrorBufferStream(); try { executeRemoteSsh(credsProvider, uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.<END_MOD>ReplicationQueue.<START_MOD>repLog.error(java.lang.String.format(( updating HEAD of remote repository at %s to %s: + (( Exception: %s +   Command: %s +   Output: %s uri, newHead, e<END_MOD>, cmd, errStream)<START_MOD>, e)<END_MOD>; } }
<START_MOD>@java.lang.Override public void execute() { message.setFocus(true); message.setText(originalMessage); message.setCursorPos(0); submit.setEnabled(false); }<END_MOD>
<START_MOD>public boolean hasGroup(com.google.gerrit.reviewdb.AccountGroup.UUID uuid) { return groupsByUUID.containsKey(uuid); }<END_MOD>
@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); <START_MOD>try {<END_MOD> java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = <START_MOD>com.google.common.collect.Lists.newArrayList();<END_MOD> java.util.<START_MOD>List<END_MOD><com.google.gerrit.<START_MOD>server.project.ListBranches.BranchInfo> branchInfos = listBranchesProvider.get().apply(new com.google.gerrit.server.project.ProjectResource(pctl)); for (com.google.gerrit.server.project.ListBranches.BranchInfo info : branchInfos) { com.google.gerrit.<END_MOD>reviewdb.client.Branch<START_MOD> b = new<END_MOD> com.google.gerrit.reviewdb.client.Branch<START_MOD>(new com.google.gerrit.reviewdb.client.Branch.NameKey(projectName, info.ref)); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(info.revision)); b.setCanDelete(((info.canDelete) !=<END_MOD> null<START_MOD> ? true : false)); branches.add(b<END_MOD>); } return new com.google.gerrit.common.data.ListBranchesResult(branches, <START_MOD>pctl.canAddRefs(), <END_MOD>false); } <START_MOD>catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e)<END_MOD> { <START_MOD>throw new com.google.gerrit.server.project.NoSuchProjectException(projectName<END_MOD>); } }
<START_MOD>public com.google.gerrit.client.ui.CommentLinkProcessor getCommentLinkProcessor() { if ((commentLinkProcessor) == null) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo> cls = info.commentlinks().values(); java.util.List<com.google.gwtexpui.safehtml.client.FindReplace> commentLinks = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.FindReplace>(cls.length()); for (int i = 0; i < (cls.length()); i++) { com.google.gerrit.client.projects.ConfigInfo.CommentLinkInfo cl = cls.get(i); if (!(cl.enabled())) { continue; } if ((cl.link()) != null) { commentLinks.add(new com.google.gwtexpui.safehtml.client.LinkFindReplace(cl.match(), cl.link())); } else { commentLinks.add(new com.google.gwtexpui.safehtml.client.RawFindReplace(cl.match(), cl.html())); } } commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(commentLinks); } return commentLinkProcessor; }<END_MOD>
@org.kohsuke.args4j.Option(name = "-o", usage =   options per <START_MOD>account<END_MOD> public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { com.google.gerrit.server.project.Util.allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, "refs/*"); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch("branch1").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); <START_MOD>org.eclipse.jgit.lib.Repository r = repo.getRepository(); <END_MOD>assertTrue(pc.canReadCommit(db, <START_MOD>r<END_MOD>, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, <START_MOD>r<END_MOD>, rw.parseCommit(id1))); repo.branch("branch1").update(parent1); assertTrue(pc.canReadCommit(db, <START_MOD>r<END_MOD>, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, <START_MOD>r<END_MOD>, rw.parseCommit(id1))); }
<START_MOD>@org.junit.Test public void addReviewerToReviewableChangeInNoteDbBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); addReviewerToReviewableChangeInNoteDb(batch()); }<END_MOD>
final void setState(com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>ProjectStatus<END_MOD> s) { setStateRaw(s.name()); }
<START_MOD>int mode() default com.google.gerrit.sshd.CommandMetaData.ALL;<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Ignore.Input input) throws com.google.gerrit.extensions.restapi.RestApiException { if ((rsrc.isUserOwner()) || (isIgnored(rsrc))) { return com.google.gerrit.extensions.restapi.Response.ok(""); } try { stars.star(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange().getId(), com.google.common.collect.ImmutableSet.of("ignore"), com.google.common.collect.ImmutableSet.of()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("failed to ignore change", e); } return null; }<END_MOD>
@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return <START_MOD>fallbackConvertError<END_MOD>(op, entity, err); } }
@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD> { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }
<START_MOD>@java.lang.Override public void move(java.lang.String destination) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.MoveInput input = new com.google.gerrit.extensions.api.changes.MoveInput(); input.destination = destination; move(input); }<END_MOD>
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())<START_MOD>, com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.EditPreferencesInfo.defaults())<END_MOD>))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
<START_MOD>@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.AccountExternalId> byAccountEmail(com.google.gerrit.reviewdb.Account.Id id, java.lang.String email) { return byAccountEmail.get(new com.google.gerrit.server.account.AccountExternalIdCacheImpl.AccountIdAndEmail(id, email)).list; }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { createFileCommentEitorOnSideA(); }<END_MOD>
<START_MOD>@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure, com.google.gerrit.sshd.commands.UnloggedFailure, java.lang.Exception { if ((regex) == null) { regex = "^*.*$"; } switch (level.toLowerCase()) { case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.RESET : reset(); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_ALL : setLoggingLevel(Level.ALL); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_TRACE : setLoggingLevel(Level.TRACE); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_DEBUG : setLoggingLevel(Level.DEBUG); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_INFO : setLoggingLevel(Level.INFO); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_WARN : setLoggingLevel(Level.WARN); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_ERROR : setLoggingLevel(Level.ERROR); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_FATAL : setLoggingLevel(Level.FATAL); break; case com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LEVEL_OFF : setLoggingLevel(Level.OFF); break; default : stdout.println("Invalid argument"); stdout.flush(); break; } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getNecessaryPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { revWalk.parseHeaders(currentCommit); try (org.eclipse.jgit.treewalk.TreeWalk treeWalk = org.eclipse.jgit.treewalk.TreeWalk.forPath(revWalk.getObjectReader(), currentFilePath, currentCommit.getTree())) { if (treeWalk == null) { return java.util.Collections.emptyList(); } org.eclipse.jgit.dircache.DirCacheEditor.DeletePath deletePathEdit = new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath(currentFilePath); com.google.gerrit.server.edit.tree.AddPath addPathEdit = new com.google.gerrit.server.edit.tree.AddPath(newFilePath, treeWalk.getFileMode(0), treeWalk.getObjectId(0)); return java.util.Arrays.asList(deletePathEdit, addPathEdit); } } }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes.ChangeApiImpl.throwIfPossible(<END_MOD>e)<START_MOD>;<END_MOD> throw new com.google.gerrit.extensions.restapi.RestApiException( delete assignee e); } }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().<START_MOD>removeDraft<END_MOD>(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); <START_MOD>getWidgetManager<END_MOD>().<START_MOD>remove<END_MOD>(<START_MOD>this<END_MOD>); }
<START_MOD>@java.lang.SuppressWarnings("unchecked") @java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions() throws com.google.gerrit.extensions.restapi.RestApiException { return ((com.google.gerrit.extensions.restapi.Response<java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo>>) (revisionActions.apply(revision))).value(); }<END_MOD>
<START_MOD>void review(com.google.gerrit.extensions.api2.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException;<END_MOD>
<START_MOD>protected java.lang.String getChangeUrl(final com.google.gerrit.reviewdb.Change change) { if ((change != null) && ((getGerritUrl()) != null)) { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append(getGerritUrl()); r.append(change.getChangeId()); return r.toString(); } return null; }<END_MOD>
<START_MOD>java.lang.Long getTime(final org.eclipse.jgit.revwalk.RevWalk walk, final org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { try { return cache.get(id, new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(id); while (o instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (o)); org.eclipse.jgit.lib.PersonIdent ident = tag.getTaggerIdent(); if (ident != null) { return ident.getWhen().getTime(); } walk.parseHeaders(tag); o = tag.getObject(); } if ((o.getType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { return java.lang.Long.valueOf(((org.eclipse.jgit.revwalk.RevCommit) (o)).getCommitTime()); } return java.lang.Long.MIN_VALUE; } }); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }<END_MOD>
<START_MOD>private void getApprovalNames() throws com.google.gwtorm.client.OrmException { java.util.SortedMap<java.lang.Short, java.lang.String> acvMap = new java.util.TreeMap<java.lang.Short, java.lang.String>(); optionList = new java.util.ArrayList<com.google.gerrit.server.ssh.commands.ApproveCommand.CmdOption>(); com.google.gwtorm.client.ResultSet<com.google.gerrit.client.reviewdb.ApprovalCategory> rs = db.approvalCategories().all(); for (com.google.gerrit.client.reviewdb.ApprovalCategory c : rs) { if (c.getFunctionName().equals("MaxWithBlock")) { com.google.gwtorm.client.ResultSet<com.google.gerrit.client.reviewdb.ApprovalCategoryValue> acvrs = db.approvalCategoryValues().byCategory(c.getId()); short min = java.lang.Short.MAX_VALUE; short max = java.lang.Short.MIN_VALUE; java.lang.String usage = ""; for (com.google.gerrit.client.reviewdb.ApprovalCategoryValue acv : acvrs) { if (min > (acv.getValue())) { min = acv.getValue(); } if (max < (acv.getValue())) { max = acv.getValue(); } acvMap.put(acv.getValue(), acv.getName()); } usage += ("Score for " + (c.getName())) + "\n"; java.util.Iterator<java.lang.Short> i = acvMap.keySet().iterator(); while (i.hasNext()) { java.lang.Short key = i.next(); usage += (((java.lang.String.format("%4d", key)) + " - ") + (acvMap.get(key))) + "\n"; } optionList.add(new com.google.gerrit.server.ssh.commands.ApproveCommand.CmdOption(("--" + (c.getName().toLowerCase().replace(' ', '-'))), usage, c.getId().get(), min, max, c.getName())); usage = ""; acvMap.clear(); } } }<END_MOD>
@org.junit.Test <START_MOD>@com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") <END_MOD>public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(   is not a configured label revision.review(in); }
static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, <START_MOD>null, <END_MOD>id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }
private com.google.gerrit.client.diff.PaddingManager.<START_MOD>LineWidgetWrapper<END_MOD> addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == (-1))); if (index != null) { config = config.set("insertAt", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ?   : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.<START_MOD>LineWidgetWrapper<END_MOD>(widget, div); }
@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.<START_MOD>common.data.GroupDetail>> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<java.util.List<com.google.gerrit.common.data.GroupDetail>>() { public java.util.List<com.google.gerrit.common.data.GroupDetail> run(final com.google.gerrit.<END_MOD>reviewdb.<START_MOD>ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { java.util.List<com.google.gerrit.common.data.GroupDetail> groups = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); try { for (com.google.gerrit.reviewdb.<END_MOD>AccountGroup<START_MOD> group :<END_MOD> myGroupsFactory.create().<START_MOD>call()) { groups.add(groupDetailFactory.create(group.getId()).call()); } } catch (java.lang.Exception e) { throw new com.google.gerrit.httpd.rpc.account.Failure(e); } return groups; } }); }<END_MOD>
<START_MOD>private static com.google.gerrit.extensions.registration.RegistrationHandle replace(com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<?> h, com.google.inject.Binding<?> b) { @java.lang.SuppressWarnings("unchecked") com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<java.lang.Object> handle = ((com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<java.lang.Object>) (h)); return handle.replace(b.getKey(), b.getProvider().get()); }<END_MOD>
<START_MOD>public com.google.gerrit.server.permissions.PermissionBackend.ForChange change(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return ref(cd.change().getDest()).change(cd); }<END_MOD>
@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, oldCurrentPatchSet)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.<START_MOD>RestSession.newRawInput(com.google.gerrit.acceptance.<END_MOD>edit.ChangeEditIT.CONTENT_NEW<START_MOD>)<END_MOD>)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertFalse(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())); }
public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { if (in instanceof com.google.gerrit.server.query.change.ChangeStatusPredicate) { return java.util.EnumSet.of(((com.google.gerrit.server.query.change.ChangeStatusPredicate) (in)).getStatus()); } else if ((in.getClass()) == (com.google.gerrit.server.query.NotPredicate.class)) { return java.util.EnumSet.complementOf(com.google.gerrit.server.<START_MOD>index<END_MOD>.IndexRewriteImpl.getPossibleStatus(in.getChild(0))); } else if ((in.getClass()) == (com.google.gerrit.server.query.OrPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.noneOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.addAll(com.google.gerrit.server.<START_MOD>index<END_MOD>.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getClass()) == (com.google.gerrit.server.query.AndPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.allOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.retainAll(com.google.gerrit.server.<START_MOD>index.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getChildCount()) == 0) { return java.util.EnumSet.allOf(Change.Status.class); } else { throw new java.lang.IllegalStateException(( predicate type in <END_MOD>change index query:   + (in.getClass()))); } }
public <START_MOD>static com.google.gerrit.server.account.AccountSshKey createInvalid(<END_MOD>com.google.gerrit.server.account.AccountSshKey.Id <START_MOD>id, java.lang.String sshPublicKey<END_MOD>) { return <START_MOD>com.google.gerrit.server.account.AccountSshKey.create(<END_MOD>id<START_MOD>, sshPublicKey, false)<END_MOD>; }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(<START_MOD>changeData.getChange()<END_MOD>.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append( ").append(p.getNewName()).append(" } detail.append(java.text.MessageFormat.format(("" + ((( files|1 file|1<{0} files} changed,   +   insertions|1 insertion|1<{1} insertions}(+),   +   deletions|1 deletion|1<{2} deletions}(-) + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn( format change detail err); return ""; } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return (((isOwner()) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
<START_MOD>@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put("/groups/Administrators"); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }<END_MOD>
<START_MOD>public void testReplaceOverlappingAtFirstCharFirstMatch() { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html("abcd"); com.google.gwtexpui.safehtml.client.RawFindReplace ab1 = new com.google.gwtexpui.safehtml.client.RawFindReplace("ab", "AB"); com.google.gwtexpui.safehtml.client.RawFindReplace ab2 = new com.google.gwtexpui.safehtml.client.RawFindReplace("[^cd][^cd]", "12"); assertEquals("ABcd", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab1, ab2)).asString()); assertEquals("12cd", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab2, ab1)).asString()); }<END_MOD>
<START_MOD>java.lang.String commentBox();<END_MOD>
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) { if ("starred".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args, <START_MOD>userProvider.get()<END_MOD>); } if ("watched".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, <START_MOD>userProvider.get()<END_MOD>, false); } if ("visible".equalsIgnoreCase(value)) { return is_visible(); } if ("reviewed".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if ("owner".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if ("reviewer".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if ("mergeable".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }
public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format( %s has invalid notify %s filter   %s state.getProject().getName(), nc.getName(), nc.getFilter()<START_MOD>)<END_MOD>, e); } } } } return matching; }
@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel<START_MOD>.setVisible(false); abandonOpenChanges<END_MOD>.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } }
<START_MOD>public final void addMime(java.lang.String mimeType) { net.codemirror.mode.ModeInfo.byMime.put(mimeType, this); }<END_MOD>
@java.lang.Override protected void loadPrev() { <START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.changes.ChangeList.queryPrev<END_MOD>(query, pos, pageSize, loadCallback()); }
@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, "refs/for/refs/*"); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/drafts/*"); com.google.gerrit.server.project.ProjectControl u = util.user(local); <START_MOD>assertCanUpload<END_MOD>(<START_MOD>"refs/heads/master",<END_MOD> u); <START_MOD>assertBlocked<END_MOD>(com.google.gerrit.server.project.PUSH<START_MOD>, "refs/drafts/refs/heads/master", u<END_MOD>)<START_MOD>; assertBlocked(com.google.gerrit.server.project.PUSH, "refs/drafts/master", u<END_MOD>); }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { hide(); <START_MOD>files.registerKeys(); <END_MOD>}
<START_MOD>private void initAllUsers(org.eclipse.jgit.lib.Repository git) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git); md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(("Initialized Gerrit Code Review " + (com.google.gerrit.common.Version.getVersion()))); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.reviewdb.client.Project p = config.getProject(); p.setDescription("Individual user settings and preferences."); com.google.gerrit.common.data.AccessSection all = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_USER) + "*"), true); all.getPermission(Permission.READ, true).setExclusiveGroup(true); config.commit(md); }<END_MOD>
public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); <START_MOD>case TAR : return new com.google.gitiles.ArchiveServlet(ArchiveServlet.Format.TGZ); case ZIP : return new com.google.gitiles.ArchiveServlet(ArchiveServlet.Format.ZIP); <END_MOD>default : throw new java.lang.IllegalArgumentException(( view type:   + view)); } }
<START_MOD>public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase("gitweb"))) { return new com.google.gerrit.common.data.GitWebType("GitWeb", "?p=${project}.git;a=commit;h=${commit}", "?p=${project}.git;a=summary", "?p=${project}.git;a=shortlog;h=${branch}"); } else if (name.equalsIgnoreCase("cgit")) { return new com.google.gerrit.common.data.GitWebType("CGit", "${project}/commit/?id=${commit}", "${project}/summary", "${project}/log/?h=${branch}"); } else if (name.equalsIgnoreCase("custom")) { return new com.google.gerrit.common.data.GitWebType("Custom", "", "", ""); } return null; }<END_MOD>
<START_MOD>public java.lang.String getSiteBContent() { com.google.gwt.user.client.Window.alert(cmB.getValue()); return cmB.getValue(); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> <START_MOD>node<END_MOD>, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.BranchResource parse(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
public static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey.Algorithm.OPTIMIZED_DIFF); }
<START_MOD>@java.lang.Override public java.lang.String getAuthorizationUrl(com.google.gerrit.extensions.auth.oauth.OAuthToken requestToken) { return oauth.getAuthorizationUrl(oauth.getScope(com.google.common.collect.Sets.newHashSet(config.getDefaultScopes())), null); }<END_MOD>
<START_MOD>private void deleteSshKeys(final java.lang.String readDeleteKey, final com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountSshKey> keys = db.accountSshKeys().byAccount(account.getId()); if (readDeleteKey.equals("ALL")) { db.accountSshKeys().delete(keys); } else { for (com.google.gerrit.reviewdb.client.AccountSshKey accountSshKey : keys) { if (accountSshKey.getSshPublicKey().equals(readDeleteKey)) { db.accountSshKeys().delete(java.util.Collections.singleton(accountSshKey)); } } } sshKeyCache.evict(account.getUserName()); }<END_MOD>
@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo("Code-Review"); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, <START_MOD>3000<END_MOD>))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo("Code-Review"); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, <START_MOD>5000<END_MOD>))); }
public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.<START_MOD>canAddMember<END_MOD>(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }
private java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return ""; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append(","); } out.append(scope.getValue()); } return out.toString(); }
<START_MOD>private void putPreferred(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { java.util.List<EmailInfo> emails = getEmails.apply(rsrc); for (EmailInfo e : emails) { if (e.email.equals(email)) { putPreferred.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), null); } } }<END_MOD>
protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.<START_MOD>lang.Exception<END_MOD> { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format( not equal %s localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }
private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get("Code-Review"); <START_MOD>assertThat<END_MOD>(((int) (cr.defaultValue)))<START_MOD>.isEqualTo((-1))<END_MOD>; <START_MOD>assertThat<END_MOD>(cr.all.size())<START_MOD>.isEqualTo(1)<END_MOD>; <START_MOD>assertThat<END_MOD>(cr.all.get(0).name)<START_MOD>.isEqualTo("Administrator")<END_MOD>; <START_MOD>assertThat<END_MOD>(cr.all.get(0).value.intValue())<START_MOD>.isEqualTo(expected)<END_MOD>; }
<START_MOD>private <T extends java.lang.Enum<?>> T getConfigEnum(java.lang.String section, java.lang.String subsection, java.lang.String key, T defaultValue) { return getCurrentPluginConfig().getEnum(key, gerritConfig.getEnum(section, subsection, key, defaultValue)); }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { <START_MOD>if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.discardUnsavedChanges()))) { <END_MOD>com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); }<START_MOD> }<END_MOD>
<START_MOD>private java.lang.Iterable<org.eclipse.jgit.lib.Ref> getDraftRefs(org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.client.Change.Id changeId) throws java.io.IOException { final java.lang.String suffix = "/" + (changeId.get()); return com.google.common.collect.Iterables.filter(repo.getRefDatabase().getRefs(RefNames.REFS_DRAFT_COMMENTS).values(), new com.google.common.base.Predicate<org.eclipse.jgit.lib.Ref>() { @java.lang.Override public boolean apply(org.eclipse.jgit.lib.Ref input) { return input.getName().endsWith(suffix); } }); }<END_MOD>
private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, java.lang.String operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding("UTF-8"); java.lang.String path = req.getPathInfo(); java.lang.String changeId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(changeId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id, operation); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { <START_MOD>sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); <END_MOD>com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.<START_MOD>logger.error( to update change index e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg =   trying to find a change   <END_MOD>sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.<START_MOD>SC_NOT_FOUND, msg<END_MOD>); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.<START_MOD>debug(<END_MOD>msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }
<START_MOD>public com.google.gerrit.server.project.ThemeInfo getTheme() { com.google.gerrit.server.project.ThemeInfo theme = this.theme; if (theme == null) { synchronized(this) { if ((this.theme) == null) { theme = loadTheme(); this.theme = theme; } } } if (theme == (ThemeInfo.INHERIT)) { com.google.gerrit.server.project.ProjectState parent = com.google.common.collect.Iterables.getFirst(parents(), null); return parent != null ? parent.getTheme() : null; } return theme; }<END_MOD>
<START_MOD>public boolean isMaxValueMandatory() { return requiresMaxValue; }<END_MOD>
@com.google.gwtorm.client.Relation<START_MOD>(id = 17)<END_MOD> com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();
<START_MOD>@org.junit.Test public void addReviewerToWipChangeInReviewDbNotifyAllBatch() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isFalse(); addReviewerToWipChangeInReviewDbNotifyAll(batch()); }<END_MOD>
<START_MOD>@java.lang.Override protected void onSave(org.eclipse.jgit.lib.CommitBuilder commit) { if (approvals.isEmpty()) { return; } int psId = change.currentPatchSetId().get(); java.lang.StringBuilder msg = new java.lang.StringBuilder().append("Update patch set ").append(psId).append("\n\n").append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET).append(": ").append(psId).append('\n').append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_ACCOUNT).append(": ").append(accountId).append('\n'); for (java.util.Map.Entry<java.lang.String, java.lang.Short> e : approvals.entrySet()) { msg.append(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_VOTE).append(": ").append(e.getKey()).append('=').append(com.google.gerrit.common.data.LabelValue.formatValue(e.getValue())).append('\n'); } commit.setMessage(msg.toString()); }<END_MOD>
public void display(final java.lang.String commitMessage) { <START_MOD>java.lang.String commitSummary = ""; java.lang.String commitBody = ""; java.lang.String[] splitCommitMessage = <END_MOD>commitMessage<START_MOD>.split<END_MOD>("\n", <START_MOD>2); commitSummary = splitCommitMessage[0]; commitBody = com.google.gwt.safehtml.shared.SafeHtmlUtils.htmlEscape(splitCommitMessage[1]); if (commitBody.trim().isEmpty()) { commitBodyPre.setAttribute("style",   none; } commitSummaryPre.setInnerText(commitSummary);<END_MOD> com.google.gwtexpui.safehtml.client.SafeHtml<START_MOD> commitBodyLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitBody); commitBodyLinkified = commitBodyLinkified.linkify(); commitBodyLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitBodyLinkified); commitBodyPre.setInnerHTML(commitBodyLinkified.asString()<END_MOD>); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); <START_MOD>assertRefUpdatedEvents(oldHead, head); assertChangeMergedEvents(1); <END_MOD>}
@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { <START_MOD>files = result.values(); <END_MOD>com.google.gerrit.client.info.FileInfo<START_MOD>.sortFileInfoByPath(<END_MOD>files<START_MOD>); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(<END_MOD>result.<START_MOD>get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString<END_MOD>(files.length())); <START_MOD>currIndex<END_MOD> = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { <START_MOD>currIndex<END_MOD> = i; break; } } <START_MOD>setupPrevNextFiles()<END_MOD>; } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }
private java.lang.String urlPublishEdit() { return (<START_MOD>urlDeleteEdit<END_MOD>()) + "/publish/"; }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts( log add accounts to <START_MOD>account<END_MOD> event performed by user me, added, e); } }
@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(args.repo, toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(args.inserter, <START_MOD>ctx.getRepository().getConfig(), <END_MOD>args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }
<START_MOD>private void display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info) { com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setStyleName("imagare-project-panel"); p.add(new com.google.gwt.user.client.ui.Label("Project:")); projectBox = new com.google.gwt.user.client.ui.TextBox(); projectBox.setValue(info.getDefaultProject()); p.add(projectBox); add(p); com.google.gwt.user.client.ui.HorizontalPanel buttons = new com.google.gwt.user.client.ui.HorizontalPanel(); add(buttons); saveButton = new com.google.gwt.user.client.ui.Button("Save"); saveButton.addStyleName("serviceuser-saveButton"); saveButton.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); } }); buttons.add(saveButton); saveButton.setEnabled(false); new com.googlesource.gerrit.plugins.imagare.client.OnEditEnabler(saveButton, projectBox); projectBox.setFocus(true); saveButton.setEnabled(false); }<END_MOD>
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message( all repositories ... java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message("done"); ui.message(java.lang.String.format( reflog files for %s branches ... RefNames.REFS_CONFIG)); <START_MOD>java.util.concurrent.ExecutorService executorPool = createExecutor(ui, repoList.size()); java.util.List<java.util.concurrent.Future<java.lang.Void>> futures = new java.util.ArrayList<>(); <END_MOD>for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { <START_MOD>java.util.concurrent.Callable<java.lang.Void> callable = new com.google.gerrit.server.schema.Schema_106.ReflogCreator(project); futures.add(executorPool.submit(callable)); } executorPool.shutdown(); <END_MOD>try <START_MOD>{ for (java.util.concurrent.Future<java.lang.Void> future : futures) { try { future.get(); } catch (java.util.concurrent.ExecutionException e) { ui.message(e.getCause().getMessage()); } } ui.message("done"); } catch (java.lang.InterruptedException ex) { java.lang.String msg<END_MOD> = <START_MOD>java.lang.String.format( step 106 was interrupted. Reflog created in %d of %d repositories only. com.google.gerrit.server.schema.Schema_106.countDone(futures<END_MOD>), <START_MOD>repoList.size());<END_MOD> ui.message(<START_MOD>msg); } }<END_MOD>
@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder( Set ").append(psId.get()).append(": Cherry Picked").append(" patchset was cherry picked to branch ").append(destBranch).append(" as commit   com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString()<START_MOD>, ChangeMessagesUtil.CHERRY_PICK_CHANGE<END_MOD>); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }
<START_MOD>@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.server.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }<END_MOD>
<START_MOD>@java.lang.Override public void clearReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement(("DELETE FROM ACCOUNT_PATCH_REVIEWS " + "WHERE CHANGE_ID = ? AND PATCH_SET_ID = ?"))) { stmt.setInt(1, psId.getParentKey().get()); stmt.setInt(2, psId.get()); stmt.executeUpdate(); } catch (java.sql.SQLException e) { throw convertError("delete", e); } }<END_MOD>
<START_MOD>@org.junit.Test public void testFailureAfterMaxTries() throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.Configuration cfg = mock(com.ericsson.gerrit.plugins.highavailability.Configuration.class); when(cfg.getMaxTries()).thenReturn(3); when(cfg.getRetryInterval()).thenReturn(10); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession httpSession = mock(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession.class); when(httpSession.post(anyString(), any())).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder forwarder = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder(httpSession, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.PLUGIN_NAME, cfg); assertThat(forwarder.evict(Constants.PROJECT_LIST, new java.lang.Object())).isFalse(); }<END_MOD>
<START_MOD>final void onResult(final java.lang.Object result) { cancel(); try { callback.onSuccess(serializer.fromJson(result)); } catch (java.lang.RuntimeException e) { callback.onFailure(e); } }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ProjectMap result) { <START_MOD>if (!(popup<END_MOD>.<START_MOD>isShowing<END_MOD>(<START_MOD>)))<END_MOD> <START_MOD>{ query = null<END_MOD>;<START_MOD> } else<END_MOD> if (<START_MOD>(query) == (this)<END_MOD>) { <START_MOD>query<END_MOD> = <START_MOD>null<END_MOD>; <START_MOD>showMap(result); } else { query.run<END_MOD>(); } }
<START_MOD>static javax<END_MOD>.<START_MOD>servlet<END_MOD>.<START_MOD>ServletContext<END_MOD> <START_MOD>create(com.google.gerrit.server.plugins.Plugin<END_MOD> <START_MOD>plugin<END_MOD>, java.lang.String <START_MOD>contextPath<END_MOD>) { <START_MOD>return <END_MOD>(<START_MOD>(javax.servlet.ServletContext) (java.lang.reflect.Proxy.newProxyInstance(com.google.gerrit.httpd.plugins.WrappedContext.class.getClassLoader()<END_MOD>, <START_MOD>new java.lang.Class[]{ javax.servlet.ServletContext.class, com.google.gerrit.httpd.plugins.WrappedContext.API.class }, new com.google.gerrit.httpd.plugins.WrappedContext.Handler(plugin, contextPath)))<END_MOD>); }
boolean canForceEditTopicName() { return <START_MOD>canPerform<END_MOD>(Permission.EDIT_TOPIC_NAME); }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString result) { cb.onSuccess(result.get()); }<END_MOD>
<START_MOD>public boolean canCreate(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; boolean admin; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); admin = getCurrentUser().getCapabilities().canAdministrateServer(); break; default : owner = false; admin = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { if (admin || (owner && (!(isBlocked(Permission.CREATE))))) { return true; } else if (!(canPerform(Permission.CREATE))) { return false; } boolean isMerged = isMergedIntoBranchOrTag(db, rw, ((org.eclipse.jgit.revwalk.RevCommit) (object))); return isMerged || (canUpdate()); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if (getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains("-----BEGIN PGP SIGNATURE-----\n")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }<END_MOD>
@java.lang.Override <START_MOD>public<END_MOD> void <START_MOD>onSuccess<END_MOD>(<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.changes.ChangeFileApi.FileContent<END_MOD> <START_MOD>fc<END_MOD>) { <START_MOD>content = fc; type = fc.contentType<END_MOD>(); <START_MOD>injectMode<END_MOD>(<START_MOD>type, modeInjectorCb<END_MOD>); }
<START_MOD>private static boolean sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit prior, org.eclipse.jgit.revwalk.RevCommit next) { java.util.Set<org.eclipse.jgit.revwalk.RevCommit> priorRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.mergedInParents(prior.getParents()); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> nextRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.mergedInParents(next.getParents()); return priorRestParents.equals(nextRestParents); }<END_MOD>
void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug( .gitmodules of {} for project {} branch, project); try <START_MOD>{ mergeOp.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = mergeOp.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(( open branch   + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & <END_MOD>(org.eclipse.jgit.lib.<START_MOD>FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.<END_MOD>repo<START_MOD>, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw<END_MOD> new java.io.IOException(( <START_MOD>not read .gitmodule file of super project:<END_MOD>   + (branch.<START_MOD>getParentKey())),<END_MOD> e)<START_MOD>; } }<END_MOD>
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; <START_MOD>} if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view("preferences").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.myPrefs = prefs;<END_MOD> onModuleLoad2(result); }<START_MOD> }); } else { com.google.gerrit.client.Gerrit.myPrefs = com.google.gerrit.client.Gerrit.getDefaultUserPreferences(); onModuleLoad2(result); } }<END_MOD>
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.FileResource parse(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException<START_MOD>, java.io.IOException<END_MOD> { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException( required } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); <START_MOD>projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); <END_MOD>} catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException( not permitted denied); } }
private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)<START_MOD>); ru.setRefLogMessage( edit false<END_MOD>); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException(( failed:   + ru)); } return res; }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(<START_MOD>tagger<END_MOD>) : null), canDelete, (<START_MOD>tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null), (<END_MOD>webLinks.isEmpty() ? null : webLinks)); } <START_MOD>java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; <END_MOD>return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, <START_MOD>timestamp, <END_MOD>(webLinks.isEmpty() ? null : webLinks)); }
private com.google.common.base.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return com.google.common.base.Optional.absent(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return com.google.common.base.Optional.absent(); } com.google.common.base.Optional<com.google.gerrit.server.patch.<START_MOD>DiffSummary<END_MOD>> <START_MOD>ds<END_MOD> = <START_MOD>getDiffSummary<END_MOD>(c, ps); if (<START_MOD>ds<END_MOD>.isPresent())<START_MOD> { return com.google.common.base.Optional.of(ds.get().getChangedLines()); }<END_MOD> return com.google.common.base.Optional.absent(); }
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ChildProjectResource parse(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); <START_MOD>properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")<END_MOD>); }
<START_MOD>private void replicateProjectLocally(final com.google.gerrit.reviewdb.Project.NameKey projectName, final org.eclipse.jgit.transport.URIish replicateURI, final java.lang.String head) { org.eclipse.jgit.lib.Repository repo = null; try { repo = gitRepositoryManager.openRepository(projectName); org.apache.commons.io.FileUtils.copyDirectory(repo.getDirectory(), new java.io.File(replicateURI.getPath())); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.git.PushReplication.log.error(("Failed to replicate project locally: " + (replicateURI.toString()))); } catch (java.io.IOException e) { com.google.gerrit.server.git.PushReplication.log.error(("Failed to replicate project locally: " + (replicateURI.toString()))); } finally { if (repo != null) { repo.close(); } } }<END_MOD>
<START_MOD>private org.eclipse.jgit.revwalk.RevCommit commit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, java.lang.String refName, org.eclipse.jgit.lib.ObjectId tree, org.eclipse.jgit.revwalk.RevCommit[] parents) throws java.io.IOException { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setAuthor(gerritIdent); cb.setCommitter(gerritIdent); cb.setTreeId(tree); for (org.eclipse.jgit.revwalk.RevCommit p : parents) { cb.addParentId(p); } org.eclipse.jgit.lib.ObjectId commitId; try (org.eclipse.jgit.lib.ObjectInserter inserter = repo.newObjectInserter()) { commitId = inserter.insert(cb); } org.eclipse.jgit.lib.RefUpdate update = repo.updateRef(refName); update.setNewObjectId(commitId); update.disableRefLog(); update.forceUpdate(); return rw.lookupCommit(commitId); }<END_MOD>
<START_MOD>@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); soyContext.put("changeId", change.getKey().get()); soyContext.put("coverLetter", getCoverLetter()); soyContext.put("fromName", getNameFor(fromId)); soyContextEmailData.put("unifiedDiff", getUnifiedDiff()); soyContextEmailData.put("changeDetail", getChangeDetail()); soyContextEmailData.put("changeUrl", getChangeUrl()); soyContextEmailData.put("includeDiff", getIncludeDiff()); java.util.LinkedHashMap<java.lang.String, java.lang.String> changeData = new java.util.LinkedHashMap<java.lang.String, java.lang.String>(); changeData.put("subject", change.getSubject()); changeData.put("originalSubject", change.getOriginalSubject()); changeData.put("ownerEmail", getNameEmailFor(change.getOwner())); soyContext.put("change", changeData); java.util.LinkedHashMap<java.lang.String, java.lang.Object> patchSetData = new java.util.LinkedHashMap<java.lang.String, java.lang.Object>(); patchSetData.put("patchSetId", patchSet.getPatchSetId()); patchSetData.put("refName", patchSet.getRefName()); soyContext.put("patchSet", patchSetData); }<END_MOD>
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(<START_MOD>new com.google.gerrit.httpd.plugins.HttpPluginModule()); modules.add(<END_MOD>sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); <START_MOD>com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { <END_MOD>modules.add(new com.google.gerrit.httpd.<START_MOD>auth.openid.OpenIdModule()); } else if ((<END_MOD>authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.<START_MOD>OAUTH<END_MOD>)) { modules.add(new com.google.gerrit.httpd.auth.<START_MOD>oauth.OAuthModule<END_MOD>()); } <START_MOD>modules.add(sysInjector.getInstance(com.google.inject.Module.class)); return sysInjector.createChildInjector(modules<END_MOD>); }
@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit <START_MOD>initialHead<END_MOD> = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit <START_MOD>headAfterSubmit<END_MOD> = getRemoteHead(); assertThat(<START_MOD>headAfterSubmit<END_MOD>.getParentCount()).isEqualTo(2); assertThat(<START_MOD>headAfterSubmit<END_MOD>.getParent(0)).isEqualTo(<START_MOD>initialHead<END_MOD>); assertThat(<START_MOD>headAfterSubmit<END_MOD>.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), <START_MOD>headAfterSubmit<END_MOD>.getAuthorIdent()); assertPersonEquals(serverIdent.get(), <START_MOD>headAfterSubmit<END_MOD>.getCommitterIdent()); <START_MOD>assertRefUpdatedEvents(initialHead, headAfterSubmit); assertChangeMergedEvents(1); <END_MOD>}
public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", com.google.gwt.http.client.URL.<START_MOD>encode<END_MOD>(project.get())); return (baseUrl) + (pattern.replace(p)); }
private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set("readOnly", true).set("lineNumbers", true).set("tabSize", 2).set("value", diff.text_b()); if (((diff.meta_b()) != null) && ((diff.meta_b().content_type()) != null)) { <START_MOD>java.lang.String mode = diff.meta_b().content_type(); if ("text/x-java-source".equals(mode)) { mode = "text/x-java"; } <END_MOD>cfg.set("mode", <START_MOD>mode<END_MOD>); } cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth("100%"); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }
<START_MOD>private void setStatus(com.google.gerrit.server.notedb.ChangeUpdate update) { java.lang.String msg = message.getMessage(); if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_ABANDONED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.ABANDONED); notedbChange.setStatus(Change.Status.ABANDONED); return; } if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_RESTORED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.NEW); notedbChange.setStatus(Change.Status.NEW); } }<END_MOD>
@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupType(); <START_MOD>initGroupNotifications(); com.google.gwt.user.client.ui.Label spacer = new com.google.gwt.user.client.ui.Label(""); spacer.setHeight("15px"); add(spacer); <END_MOD>initMemberList(); initExternal(); }
private int search(final java.lang.String fileName) { if (Patch.COMMIT_MSG.equals(fileName)) { return 0; } if ((isMerge) && (Patch.MERGE_LIST.equals(fileName))) { return 1; } <START_MOD>com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, (isMerge ? 2 : 1), patches.length, want, new java.util.Comparator<com.google.gerrit.server.patch.PatchListEntry>() { @java.lang.Override public <END_MOD>int <START_MOD>compare(com.google.gerrit.server.patch.PatchListEntry o1, com.google.gerrit.server.patch.PatchListEntry o2) { return o1<END_MOD>.getNewName().compareTo(<START_MOD>o2.getNewName()); } }); }<END_MOD>
<START_MOD>boolean execute() { for (; ;) { try { (execCnt)++; tryOnce(); return true; } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException e) { if (!(e.isRecoverable())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(("Failed to " + (name)), e); return false; } if ((execCnt) >= (cfg.getMaxTries())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error((((("Failed to " + (name)) + ", after ") + (cfg.getMaxTries())) + " tries")); return false; } logRetry(e); try { java.lang.Thread.sleep(cfg.getRetryInterval()); } catch (java.lang.InterruptedException ie) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error(((name) + " was interrupted, giving up"), ie); } } } }<END_MOD>
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(( current patch set for change   + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.<START_MOD>canBeSubmitted<END_MOD>(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format( for change %s returned empty list for %s in %s cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case <START_MOD>OK : break; case <END_MOD>CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException( is closed case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(( rule error:   + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format( SubmitRecord status %s for %s in %s record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }
@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, "refs/*"); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags(); }
private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.<START_MOD>getValue().name<END_MOD>(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel((( ( + (job.getValue().duration())) + ")"))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }
com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(<START_MOD>mapper<END_MOD>.lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }
<START_MOD>public synchronized void replace(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); db.accountExternalIds().deleteKeys(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIdKeys(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, accountId, extIdKey); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(ins, noteMap, extId); } commit(repo, rw, ins, rev, noteMap); } externalIdCache.replaceByKeys(accountId, toDelete, toAdd); }<END_MOD>
public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() {<START_MOD> checkState(((change) != null),   only valid after loading the change notes<END_MOD> com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId),   current patch set %s psId.get()); }
<START_MOD>private com.google.gerrit.common.data.GroupList createGroupList(final java.util.List<com.google.gerrit.reviewdb.AccountGroup> groups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetailList = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (final com.google.gerrit.reviewdb.AccountGroup group : groups) { groupDetailList.add(groupDetailFactory.create(group.getId()).call()); } final com.google.gerrit.common.data.GroupList groupList = new com.google.gerrit.common.data.GroupList(); groupList.setGroups(groupDetailList); groupList.setCanCreateGroup(identifiedUser.get().getCapabilities().canCreateGroup()); return groupList; }<END_MOD>
<START_MOD>private java.lang.String createChangeForTest() throws java.lang.Exception { java.lang.String file = "gerrit-server/test.txt"; java.lang.String contents = "contents \nlorem \nipsum \nlorem"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, "first subject", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/for/master"); java.lang.String changeId = r.getChangeId(); ReviewInput input = new ReviewInput(); input.message = "I have two comments"; input.comments = new java.util.HashMap(); CommentInput c1 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 0, "comment on file"); CommentInput c2 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 2, "inline comment"); input.comments.put(c1.path, ImmutableList.of(c1, c2)); revision(r).review(input); return changeId; }<END_MOD>
@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, <START_MOD>Change.Status.NEW<END_MOD>); com.google.gerrit.reviewdb.client.Change change1 = <START_MOD>insert(<END_MOD>ins1<START_MOD>); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, <END_MOD>Change.Status.<START_MOD>MERGED); com.google.gerrit.reviewdb.client.Change change2 =<END_MOD> insert(ins2<START_MOD>); assertQuery("status:new", change1); assertQuery("status:NEW", change1); assertQuery("is:new", change1); assertQuery("status:merged",<END_MOD> change2<START_MOD>); assertQuery("is:merged",<END_MOD> change2); }
<START_MOD>protected org.eclipse.jgit.junit.TestRepository<?> createProjectWithPush(java.lang.String name, com.google.gerrit.reviewdb.client.Project.NameKey parent) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = createProject(name, parent); grant(Permission.PUSH, project, "refs/heads/*"); grant(Permission.SUBMIT, project, "refs/for/refs/heads/*"); return cloneProject(project); }<END_MOD>
@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject =   commit java.lang.String file = "a.txt"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file,   contents com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); <START_MOD>revision<END_MOD>(r<START_MOD>).approve(<END_MOD>); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file,   contents r.getChangeId()); r = push.to(git, "refs/for/master"); assertApproval(r, 0); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.<START_MOD>RestApiException<END_MOD>, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.<START_MOD>maybeGet<END_MOD>(id).<START_MOD>map(AccountState::<END_MOD>getGeneralPreferences<START_MOD>).orElseThrow<END_MOD>(<START_MOD>ResourceNotFoundException::new<END_MOD>); }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource rsrc, com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.Boolean httpPasswordAllowed = getConfig.get().apply(new com.google.gerrit.server.config.ConfigResource()).allowHttpPassword; java.lang.String newPassword; if (input.generate) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to generate HTTP password"); } newPassword = com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.generate(); } else if ((input.httpPassword) == null) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to clear HTTP password"); } newPassword = null; } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + "requires the Administrate Server permission")); } newPassword = input.httpPassword; } return putHttpPassword.apply(rsrc.getUser(), newPassword); }<END_MOD>
@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); <START_MOD>if ((installAllPlugins) && (!(com.google.gerrit.pgm.Init.nullOrEmpty(installPlugins)))) { ui.message( plugin installation options. return true; } <END_MOD>verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message( plugins: for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message( * %s version %s plugin.name, plugin.version); } } else { ui.message( plugins found. } return true; } } return false; }
public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { <START_MOD>try { java.lang.String previousRevision = getPreviousRevision(patchSetId); if (previousRevision != null) { previous = getIssueIds(projectName, previousRevision); } } catch (<END_MOD>com.google.gerrit.<START_MOD>extensions.restapi.RestApiException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences =<END_MOD> com.google.<START_MOD>common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences =<END_MOD> com.google.<START_MOD>common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences);<END_MOD> } for (java.lang.String <START_MOD>occurrence<END_MOD> : <START_MOD>newOccurrences) { currentOccurrences.add(("added@" + occurrence)); } } } return <END_MOD>current<START_MOD>; }<END_MOD>
@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); <START_MOD>factory(LfsProjectLocks.Factory.class); <END_MOD>}
com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(<START_MOD>null<END_MOD>); return changeRepo.cmds; }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if (<START_MOD>p instanceof com.google.gerrit.server.query.change.RegexFilePredicate) { return regexQuery(p); } else if (<END_MOD>(p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }
public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId<START_MOD>, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey project<END_MOD>) { this.changeId = changeId; <START_MOD>this.project = project; <END_MOD>}
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); removeUsersThatIgnoredTheChange(); includeWatchers(NotifyType.NEW_PATCHSETS, (<START_MOD>(!(change.isWorkInProgress())) && (<END_MOD>!(change.isPrivate())))<START_MOD>)<END_MOD>; }
@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>> groups = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>>() {}; core(groups, com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE).maxAge(1, java.util.concurrent.TimeUnit.HOURS).populateWith(LdapRealm.MemberLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>> usernames = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>>() {}; core(usernames, com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE).populateWith(LdapRealm.UserLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); <START_MOD>com.google.inject.multibindings.Multibinder.newSetBinder(binder(), com.google.gerrit.server.account.GroupBackend.class).addBinding().to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); <END_MOD>}
<START_MOD>private void escape(java.lang.StringBuilder builder, java.lang.String string) { if (com.google.gerrit.gwtdebug.GerritDebugLauncher.JettyTreeLogger.__escape) { for (int i = 0; i < (string.length()); ++i) { char c = string.charAt(i); if (java.lang.Character.isISOControl(c)) { if (c == '\n') { builder.append('|'); } else if (c == '\r') { builder.append('<'); } else { builder.append('?'); } } else { builder.append(c); } } } else { builder.append(string); } }<END_MOD>
void setReviewed(boolean reviewed) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchId).view("files").id(fileId).view("reviewed"); if (reviewed) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } }
<START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); }
<START_MOD>@org.junit.Test(expected = com.google.gerrit.server.git.RepositoryCaseMismatchException.class) public void testNameCaseMismatchWithSymlink() throws java.lang.Exception { assume().that(((com.google.gerrit.server.util.HostPlatform.isWin32()) || (com.google.gerrit.server.util.HostPlatform.isMac()))); com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey("a"); repoManager.createRepository(name); createSymLink(name, "b.git"); repoManager.createRepository(new com.google.gerrit.reviewdb.client.Project.NameKey("B")); }<END_MOD>
<START_MOD>public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor("head").getLine(); int oLine = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); cm.setActiveLine(line); other.setActiveLine(oLine); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); }<END_MOD>
@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>() { public void onSuccess(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); <START_MOD>display(); <END_MOD>} }); }
<START_MOD>@java.lang.Override public com.google.gerrit.server.account.GetSshKeys.SshKeyInfo apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc) { com.google.gerrit.server.account.GetSshKeys.SshKeyInfo info = new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(); com.google.gerrit.reviewdb.client.AccountSshKey sshKey = rsrc.getSshKey(); info.id = sshKey.getKey().get(); info.sshPublicKey = sshKey.getSshPublicKey(); info.encodedKey = sshKey.getEncodedKey(); info.algorithm = sshKey.getAlgorithm(); info.comment = com.google.common.base.Strings.emptyToNull(sshKey.getComment()); info.valid = sshKey.isValid(); return info; }<END_MOD>
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException {<START_MOD> if (object.isFromQuery(getQueryRoot())) { return true; }<END_MOD> com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); }
public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId)<START_MOD>, com.google.gerrit.client.reviewdb.SafeFile.isSafeInline(null, patch.getFileName())<END_MOD>); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }
public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.<START_MOD>client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.<END_MOD>reviewdb.client.AccountSshKey<START_MOD>.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(),<END_MOD> k<START_MOD>.id())))) { table.removeRow(row); } else { row++; } }<END_MOD> if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.<START_MOD>client.account.SshKeyInfo<END_MOD>>emptyList()); } else { updateDeleteButton(); } }
@com.google.gwtorm.client.Relation<START_MOD>(id = 1)<END_MOD> com.google.gwtorm.data.AddressAccess addresses();
private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = "text=" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement(<START_MOD>"div"); h.setStyleName(ClippyResources.I.css().control()); h.openElement("object"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"); h.paramElement("movie", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement("FlashVars", flashVars); h.openElement("embed"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("wmode", "transparent"); h.setAttribute("type", "application/x-shockwave-flash"); h.setAttribute("src", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute("FlashVars", flashVars); h.closeSelf(); h.closeElement("object"); h.closeElement(<END_MOD>"span"); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }
<START_MOD>private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getLinks() { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(getUnifiedDiffUrl()); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id("<001a114da7ae26e2eb053fe0c29c@google.com>").from(new com.google.gerrit.server.mail.Address("Jonathan Nieder (Gerrit)", "noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com")).addTo(new com.google.gerrit.server.mail.Address("ekempin", "ekempin@google.com")).textContent(com.google.gerrit.server.mail.receive.data.Base64HeaderMessage.textContent).subject("\ud83d\ude1b test").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0)); return expect.build(); }<END_MOD>
<START_MOD>void onEdit() { textPanel.removeFromParent(); textPanel = null; textLabel = null; editIcon.removeFromParent(); editIcon = null; startHandlers = null; editPanel.setVisible(true); }<END_MOD>
<START_MOD>public void appendSubmittedBy(com.google.gerrit.reviewdb.Account user) { sb.append("Submitted-by: "); appendUserData(user); sb.append("\n"); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isFalse(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); }<END_MOD>
@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool = null; } }
<START_MOD>public java.util.List<com.google.gerrit.server.events.RefEvent> getRefUpdates(java.lang.String project, java.lang.String refName, int expectedSize) { java.lang.String key = java.lang.String.format("%s-%s-%s", RefUpdatedEvent.TYPE, project, refName); assertThat(recordedEvents).containsKey(key); java.util.List<com.google.gerrit.server.events.RefEvent> events = recordedEvents.get(key); assertThat(events).hasSize(expectedSize); return com.google.common.collect.ImmutableList.copyOf(events); }<END_MOD>
com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.<START_MOD>PatchSet<END_MOD> <START_MOD>ps<END_MOD>, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);
public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, "UTF-8"))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException( lacks UTF-8 encoding e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output; if ((level) != null) { switch (level) { case PROJECT : output = <START_MOD>allDashboardsFor<END_MOD>(new com.google.gerrit.reviewdb.client.Project.NameKey(entityName)); break; default : throw new java.lang.IllegalStateException(( dashboard level:   + (level))); } } else { output = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }
@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2<START_MOD>.getBytes("UTF-8")<END_MOD>)); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); <START_MOD>coloringManager.reset<END_MOD>(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }
<START_MOD>private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey("project"); com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, com.google.gerrit.server.project.SubmitRulesEvaluatorTest.ADMIN_USER)); return evaluatorFactory.create(cd); }<END_MOD>
public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException {<START_MOD> if (authorizationCode == null) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException( provide an authorization code }<END_MOD> org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format( /oauth/token failed with status {0} response.getCode())); } return parseAccessTokenResponse(response.getBody()); }
<START_MOD>public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean("user", "readGroupsFromNoteDb", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.server.group.InternalGroup> result = i.get(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } com.google.gerrit.server.group.InternalGroup group = result.get(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.findRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(group.getRefState())); } }<END_MOD>
<START_MOD>@com.google.gwt.resources.client.ClientBundle.Source("clipboard-16.png") com.google.gwt.resources.client.ImageResource clipboard();<END_MOD>
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, ("refs/heads/" + branch)); } }
public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>) { return com.google.gerrit.client.changes.ChangeApi.change(changeId<START_MOD>, project<END_MOD>).view("hashtags"); }
@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results; results = query("status:closed"); <START_MOD>assertThat(results).hasSize(2<END_MOD>); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); <START_MOD>assertThat(<END_MOD>query("status:CLOSED")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:c")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:cl")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:clo")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:clos")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:close")<START_MOD>).hasSize(2); assertThat(<END_MOD>query("status:closed")<START_MOD>).hasSize(2<END_MOD>); results = query("is:closed"); <START_MOD>assertThat(results).hasSize(2<END_MOD>); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }
<START_MOD>@java.lang.Override public void renameFile(java.lang.String oldFilePath, java.lang.String newFilePath) throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }<END_MOD>
public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site<START_MOD>, com.google.gerrit.pgm.init.GerritDistributionLocator distroLocator<END_MOD>) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true<START_MOD>, distroLocator<END_MOD>); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (<START_MOD>!(isDirty()))) { if (isNew(<END_MOD>)) { removeUI(); <START_MOD>} else { setEdit(false); cm.focus(); } } }<END_MOD>
@java.lang.Override protected void onUnload() { super.onUnload(); if ((<START_MOD>cmOrig<END_MOD>) != null) { <START_MOD>cmOrig.getWrapperElement().removeFromParent(); } if ((cmEdit) != null) { cmEdit<END_MOD>.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); }
private java.lang.String problemsForSubmittingChanges(<START_MOD>com.google.gerrit.server.change.RevisionResource resource, <END_MOD>java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { <START_MOD>try { if (!(mergeableProvider.get().apply(resource).mergeable)) { return Util.C.mergeConflict(); } } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gwtorm.server.OrmRuntimeException( not determine mergeability e); } <END_MOD>for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error( checking if change is submittable e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }
private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, <START_MOD>history.getProject(), <END_MOD>Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, <START_MOD>history.getProject(), <END_MOD>Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, <START_MOD>history.getProject(), <END_MOD>e.getKey(), e.getValue())); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { deferredTags.add(ref); } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { <START_MOD>java.util.Map<org.eclipse.jgit.lib.Ref, java.util.List<org.eclipse.jgit.lib.Ref>> reachableTags = tagCache.get(db); for (org.eclipse.jgit.lib.Ref tag : reachableTags.keySet()) { for (org.eclipse.jgit.lib.Ref ref : reachableTags.get(tag)) { if (projectCtl.controlForRef(ref.getName()).isVisible()) { <END_MOD>result<START_MOD>.put(tag.getName(), tag); break; } } }<END_MOD> } return result; }
public java.lang.String getMessage(com.google.gerrit.<START_MOD>server.notedb.ChangeNotes notes) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.<END_MOD>reviewdb.client.Change<START_MOD>.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.latest(db.get(), notes); if (ps == null) { throw new<END_MOD> com.google.gerrit.server.project.NoSuchChangeException<START_MOD>(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getChange().getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (<END_MOD>org.eclipse.jgit.errors.<START_MOD>RepositoryNotFoundException e)<END_MOD> { <START_MOD>throw new com.google.gerrit.server.project.NoSuchChangeException(<END_MOD>changeId<START_MOD>, e<END_MOD>); } }
<START_MOD>private final native java.lang.String urlAlias(java.lang.String n);<END_MOD>
private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { <START_MOD>try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (<END_MOD>com.google.gerrit.server.project.<START_MOD>NoSuchProjectException<END_MOD> e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } <START_MOD>if ((scrollToPath) != null) { table.scrollToPath(scrollToPath); scrollToPath = null; <END_MOD>}<START_MOD> }<END_MOD>
public boolean isIdentityTrustable(<START_MOD>final <END_MOD>java.util.Collection<com.google.gerrit.<START_MOD>reviewdb<END_MOD>.<START_MOD>client<END_MOD>.<START_MOD>AccountExternalId<END_MOD>> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (<START_MOD>final <END_MOD>com.google.gerrit.<START_MOD>reviewdb<END_MOD>.<START_MOD>client<END_MOD>.<START_MOD>AccountExternalId<END_MOD> e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
private void initUserAuth(final org.apache.sshd.server<START_MOD>.auth.pubkey<END_MOD>.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server<START_MOD>.auth<END_MOD>.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(new org.apache.sshd.server.auth.gss.UserAuthGSS.Factory()); com.google.gerrit.sshd.SshDaemon.log.info(( kerberos with keytab   + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.log.error(((   + kerberosKeytab) +   does not exist or is not readable; further errors are possible } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = "host/" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = "host/localhost"; } } com.google.gerrit.sshd.SshDaemon.log.info(( kerberos principal   + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith("host/"))) { com.google.gerrit.sshd.SshDaemon.log.warn(( principal does not start with host/   +   most SSH clients will supply automatically } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(new org.apache.sshd.server.auth.UserAuthPublicKey.Factory()); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }
java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm)<START_MOD> { return new java.lang.Runnable() { @java.lang.Override public void run() { if (cm.extras().hasActiveLine()) { com.google.gerrit.client.diff.CommentGroup w = map(cm.side()).get(((cm.getLineNumber(cm.extras().activeLine())) + 1))<END_MOD>;<START_MOD> if (w != null) { w.openCloseAll(); } } } }; }<END_MOD>
<START_MOD>private java.lang.String getInstanceName() { java.lang.System.out.println(args.instanceNameProvider); java.lang.System.out.println(args.instanceNameProvider.get()); return args.instanceNameProvider.get(); }<END_MOD>
<START_MOD>public void writeStdOut(final java.lang.String message) { pushProcessing.writeStdOut(message); }<END_MOD>
private static java.lang.String initSite() throws java.lang.Exception { java.<START_MOD>lang.String dt = new java.<END_MOD>text.SimpleDateFormat(<START_MOD>"yyyyMMdd_HHmmss").format(new java.util.Date()); java.io.File tmp = java.io.File.createTempFile((("gerrit_test_"<END_MOD> + <START_MOD>dt) + "_"), "_site"); java.lang.String path = tmp.getPath(); if ((!(tmp.delete())) || (!(tmp.mkdir()))) { throw new java.io.IOException(( create   + path)); }<END_MOD> com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ "-d", path, "--batch", "--no-auto-start" }); if (rc != 0) { throw new java.lang.RuntimeException( initialize site } return path; }
<START_MOD>private void revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, int index, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r) { com.google.gerrit.client.changes.ChangeInfo.CommitInfo c = r.commit(); sb.openTr(); if (revision.equals(r.name())) { sb.setStyleName(style.current()); } sb.openTd().setStyleName(style.legacy_id()).append(r._number()).closeTd(); sb.openTd().setStyleName(style.commit()).openAnchor().setAttribute("href", ("#" + (url(r)))).setAttribute("onclick", ((((com.google.gerrit.client.change.RevisionBox.OPEN) + "(event,") + index) + ")")).append(r.name().substring(0, 10)).closeAnchor().closeTd(); sb.openTd().append(com.google.gerrit.client.FormatUtil.shortFormatDayTime(c.committer().date())).closeTd(); java.lang.String an = com.google.gerrit.client.change.RevisionBox.shortName(c.author()); java.lang.String cn = com.google.gerrit.client.change.RevisionBox.shortName(c.committer()); sb.openTd(); sb.append(an); if (((!("".equals(an))) && (!("".equals(cn)))) && (!(an.equals(cn)))) { sb.append(" / ").append(cn); } sb.closeTd(); sb.closeTr(); }<END_MOD>
@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.<START_MOD>getRevId<END_MOD>(c, cache, change, ps); } update.insertComment(c); }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.<START_MOD>has<END_MOD>(<START_MOD>com.google.gerrit.acceptance.NoHttpd.class, testDesc.getTestClass()))), (!(com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.Hermethic.class, <END_MOD>testDesc.getTestClass()))), null, null); }
public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, <START_MOD>"--change-owner", ((((event.change.owner.name) +   ( + (event.change.owner.email)) + ")")); addArg(args, <END_MOD>"--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--reviewer", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }
private java.lang.Module getIndexModule(<START_MOD>int actualThreads<END_MOD>) { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), <START_MOD>actualThreads<END_MOD>); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), <START_MOD>actualThreads<END_MOD>); default : throw new java.lang.IllegalStateException( index.type } }
<START_MOD>@java.lang.Override public void setReadyForReview(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException { try { setReady.apply(change, new com.google.gerrit.server.change.WorkInProgressOp.Input(message)); } catch (com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot set ready for review state", e); } }<END_MOD>
public static void loadSiteLib(java.nio.file.Path libdir) { try { <START_MOD>java<END_MOD>.<START_MOD>util<END_MOD>.<START_MOD>List<java<END_MOD>.<START_MOD>nio<END_MOD>.<START_MOD>file<END_MOD>.<START_MOD>Path> jars = <END_MOD>com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir<START_MOD>); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.info( site libraries: {} com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars<END_MOD>)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(( scanning lib directory   + libdir), e); } }
private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.<START_MOD>PatchSetApproval.LabelId<END_MOD> id = new com.google.gerrit.reviewdb.client.<START_MOD>PatchSetApproval.LabelId<END_MOD>(com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getId()); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }
private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); <START_MOD>c.setChangeSet(logPrefix); <END_MOD>if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError(( read merged patch set   + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }
private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text aText = new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text bText = new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }
<START_MOD>private java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> sort(java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments) { java.util.Collections.sort(comments, ChangeNotes.PatchLineCommentComparator); return comments; }<END_MOD>
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( <START_MOD>u<END_MOD>) -> <START_MOD>u.update()<END_MOD>.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
<START_MOD>public boolean isFromQuery(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { return ((queries) != null) && (queries.contains(p)); }<END_MOD>
<START_MOD>private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, boolean visible) throws com.google.gwtorm.server.OrmException { if (visible) { com.google.gerrit.common.data.SubmitTypeRecord str = cd.submitTypeRecord(); if (!(str.isOk())) { logErrorAndThrow(((("Failed to get submit type for " + (cd.getId())) + ": ") + (str.errorMessage))); } return str.type; } else { return cd.changeControl().getProject().getSubmitType(); } }<END_MOD>
private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug( NoteDb update com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).<START_MOD>setCheckReadOnly(true, db).<END_MOD>setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug( MismatchedStateException while staging } return updateManager; }
@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (<START_MOD>org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (<END_MOD>java.io.IOException e) { <START_MOD>throw new <END_MOD>org.eclipse.jgit.transport.ServiceMayNotContinueException<START_MOD>()<END_MOD>.initCause(e); } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); <START_MOD>save<END_MOD>(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }
static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get<START_MOD>(), changeInfo.project<END_MOD>(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId<START_MOD>, changeInfo.projectNameKey())); } }); } }<END_MOD>
<START_MOD>@java.lang.Override public void onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener.Event ev) { try { ch.doHashtagsChangedHook(getChange(ev.getChange()), getAccount(ev.getEditor()), new java.util.HashSet<java.lang.String>(ev.getAddedHashtags()), new java.util.HashSet<java.lang.String>(ev.getRemovedHashtags()), new java.util.HashSet<java.lang.String>(ev.getHashtags()), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }<END_MOD>
<START_MOD>void onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox box) { boxes.remove(box); table.updateVisibility(false); }<END_MOD>
void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String <START_MOD>textBody, java.lang.String htmlBody<END_MOD>) throws com.google.gerrit.common.errors.EmailException;
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug( tag cache on fast-forward of {} cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug( project in cache try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(( evict from project cache, name key:   + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug( project description repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(( update description of   + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error( sync create <START_MOD>account<END_MOD> permissions e); } } } }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); <START_MOD>factory(RetrieveParentCandidatesHandler.Factory.class); <END_MOD>} }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); }
@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put("/groups/Administrators"); assertEquals(HttpStatus.<START_MOD>SC_CONFLICT<END_MOD>, r.getStatusCode()); }
@java.lang.Override <START_MOD>protected<END_MOD> java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() { return null; } }; }
<START_MOD>@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> rewrite(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { return super.rewrite(new com.google.gerrit.server.query.change.IndexRewrite(index).rewrite(in)); }<END_MOD>
public boolean hasEmailAddress(java.lang.String email) { <START_MOD>initValidEmails<END_MOD>()<START_MOD>; if (validEmails<END_MOD>.contains(email)<START_MOD>) { return true<END_MOD>; }<START_MOD> else if (((invalidEmails) != null) && (invalidEmails.contains(email))) { return false; } else if (realm.hasEmailAddress(this, email)) { validEmails.add(email); return true; } else if ((invalidEmails) == null) { invalidEmails = com.google.common.collect.Sets.newHashSetWithExpectedSize(4); } invalidEmails.add(email); return false; }<END_MOD>
@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); <START_MOD>install(new com.google.gerrit.server.git.validators.ValidationModule()); <END_MOD>}
boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.<START_MOD>includedInAny<END_MOD>(repo, rw, commit, refs.values())); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(<START_MOD>FooterConstants.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(("I" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } <END_MOD>com.google.gerrit.server.ChangeUtil.updated(change); return change; }
private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.RESTORE) + "(event,") + (info._row())) + ")")); } else { sb.setAttribute("href", ("#" + (url(info)))).setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.OPEN) + "(event,") + (info._row())) + ")")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else <START_MOD>if (com.google.gerrit.client.Gerrit.getConfig().getMuteCommonPathsInFileTable()) <END_MOD>{ int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } <START_MOD>else { sb.append(path); } <END_MOD>sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }
public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = <START_MOD>a.<END_MOD>approvalsUtil.byChange(db, notes()); } return allApprovals; }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (user.getUserName()<START_MOD>.isPresent(<END_MOD>)) ? <START_MOD>user.getUserName().get() : <END_MOD>"anonymous"; com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format( %s unauthorized for user %s on project %s op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
<START_MOD>@java.lang.Override public IncludedIn.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProject().getProject().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }<END_MOD>
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName =   Users exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(   Users already exists gApi.groups().create(newGroupName); }
private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); com.google.gerrit.client.changes.ChangeApi.reviewer(screen.<START_MOD>getPatchSetId().getParentKey<END_MOD>().get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.<START_MOD>getPatchSetId().getParentKey())); } } }); } }<END_MOD>
@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch<START_MOD>, state<END_MOD>); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.<START_MOD>wrappedLog<END_MOD>.error( enumerate known projects e<START_MOD>, state<END_MOD>); } <START_MOD>state.allTaskScheduled(); <END_MOD>}
<START_MOD>public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).format2(listComments(rsrc)); }<END_MOD>
public void visit(org.<START_MOD>commonmark<END_MOD>.<START_MOD>ext<END_MOD>.<START_MOD>gfm.strikethrough.Strikethrough<END_MOD> node) { <START_MOD>wrapChildren("del",<END_MOD> node); }
private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { <START_MOD>org.eclipse.jgit.lib.RefDatabase refDatabase = ctx.getRepository().getRefDatabase(); org.eclipse.jgit.lib.Ref firstRef = refDatabase.getRef(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : refDatabase.getRefs(Constants.R_HEADS).values()) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } return null; } catch (<END_MOD>java.<START_MOD>io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn( check for already submitted change e); return<END_MOD> null<START_MOD>; } }<END_MOD>
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { <START_MOD>ins<END_MOD> = <START_MOD>repo.newObjectInserter(); walk = <END_MOD>new org.eclipse.jgit.revwalk.RevWalk(<START_MOD>ins.newReader()); try { for (org.eclipse.jgit.lib.Ref ref : <END_MOD>repo<START_MOD>.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(bCommit); byId.removeAll(bCommit); } }<END_MOD> for (org.eclipse.jgit.lib.<START_MOD>ObjectId id<END_MOD> : <START_MOD>byId.keySet()) { getPathsAndIndex(id); } } finally { walk.close(); ins.close(); } return<END_MOD> null<START_MOD>; }<END_MOD>
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { <START_MOD>conflicts = !(args.submitDryRun.dryRun(submitType, repo,<END_MOD> rw<START_MOD>, otherChange.getDest(), changeDataCache.getTestAgainst(), other, getAlreadyAccepted(repo, rw))); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (<END_MOD>com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }
private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.<START_MOD>patchlib.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case   : return rw.parseAny(com.google.gerrit.server.<END_MOD>patch.<START_MOD>PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(<END_MOD>repo, <START_MOD>rw,<END_MOD> ins, <START_MOD>b, mergeStrategy); default : return<END_MOD> null<START_MOD>; } }<END_MOD>
<START_MOD>private com.google.gerrit.server.project.ProjectState newProjectState(com.google.gerrit.server.git.ProjectConfig local) { com.google.gerrit.rules.PrologEnvironment.Factory envFactory = null; com.google.gerrit.server.git.GitRepositoryManager gitMgr = null; com.google.gerrit.server.project.ProjectControl.AssistedFactory projectControlFactory = null; com.google.gerrit.rules.RulesCache rulesCache = null; com.google.gerrit.server.config.SitePaths sitePaths = null; java.util.List<com.google.gerrit.server.project.CommentLinkInfo> commentLinks = null; all.put(local.getProject().getNameKey(), new com.google.gerrit.server.project.ProjectState(sitePaths, projectCache, allProjectsName, projectControlFactory, envFactory, gitMgr, rulesCache, commentLinks, local)); return all.get(local.getProject().getNameKey()); }<END_MOD>
static int getMinOwnerVoteLevel(com.google.gerrit.server.<START_MOD>project<END_MOD>.<START_MOD>ProjectState<END_MOD> <START_MOD>projectState<END_MOD>) throws com.google.gwtorm.server.OrmException { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (<START_MOD>projectState<END_MOD> == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(<START_MOD>projectState<END_MOD>, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); }
private static com.google.gerrit.client.ui.Screen <START_MOD>legacyAll<END_MOD>(final java.lang.String token) { <START_MOD>if (com.google.gerrit.client.Dispatcher.matchPrefix(<END_MOD>"all,abandoned,"<START_MOD>, token)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("status:abandoned", com.google.gerrit.client.Dispatcher.skip(token)); }<END_MOD> if (<START_MOD>com.google.gerrit.client.Dispatcher.matchPrefix("all,merged,", token<END_MOD>)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(<START_MOD>"status:merged"<END_MOD>, com.google.gerrit.client.Dispatcher.skip(<START_MOD>token)); }<END_MOD> if (<START_MOD>com.google.gerrit.client.Dispatcher.matchPrefix("all,open,", token<END_MOD>)) { return com.google.gerrit.client.changes.QueryScreen.forQuery(<START_MOD>"status:open"<END_MOD>, com.google.gerrit.client.Dispatcher.skip(token)); } return new com.google.gerrit.client.NotFoundScreen(); }
@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS<START_MOD>, remote<END_MOD>, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }
@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if (<START_MOD>(<END_MOD>!(isEnabled()<START_MOD>)) || ((userProvider.get()) instanceof com.google.gerrit.server.AnonymousUser<END_MOD>)) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf("://"); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append(<START_MOD>userProvider.get().getUserName()); r.append("@"<END_MOD>); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }
@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); submitWithConflict(change2.getChangeId()<START_MOD>,   it depends on change<END_MOD> org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); }
@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (<START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> <START_MOD>e) {<END_MOD> com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeApiImpl<END_MOD>.<START_MOD>throwRestApiException<END_MOD>( abandon change e); } }
private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.<START_MOD>canPerform<END_MOD>(<START_MOD>Permission.EDIT_TOPIC_NAME<END_MOD>))) || (getProjectControl().isAdmin()); } return refControl.<START_MOD>canPerform<END_MOD>(<START_MOD>Permission.EDIT_TOPIC_NAME<END_MOD>); }
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.<START_MOD>fireRefUpdatedEvent<END_MOD>(ru); return revision; default : throw new java.io.IOException(((((( update   + (ru.getName())) +   in   + (db.getDirectory())) +     + (ru.getResult()))); } }
<START_MOD>@java.lang.Override public java.lang.String content() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.BinaryResult bin = getContent.apply(file); java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream(); bin.writeTo(os); return new java.lang.String(os.toByteArray(), com.google.common.base.Charsets.UTF_8); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot retrieve file content", e); } }<END_MOD>
public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); try { createDownstreamMerges(mdsMergeInput); reviewInput.message = ( to   + (com.google.common.base.Joiner.on(   +   succeeded! reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; <START_MOD>labels.put(<END_MOD>config.<START_MOD>getAutomergeLabel(), config.<END_MOD>getMinAutomergeVote()<START_MOD>)<END_MOD>; } <START_MOD>reviewInput.<END_MOD>labels<START_MOD> = <END_MOD>labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }
<START_MOD>public com.google.gerrit.server.group.GroupResource getParentGroup() { return parentGroup; }<END_MOD>
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case <START_MOD>ACCESS : return (isReadable()) || (isOwner()); case <END_MOD>READ : return (<START_MOD>allRefsAreVisible()) || (isOwner()<END_MOD>); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm +   unsupported }
protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.server.change.ChangeJson.ChangeInfo actual) { <START_MOD>assert_().withFailureMessage<END_MOD>(message<START_MOD>).that(actual._number).isEqualTo(<END_MOD>expected.getId().get()); }
<START_MOD>private java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> listTags() throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.project.ListTags list = listTagsProvider.get(); try { return list.apply(checkExists()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot list tags", e); } }<END_MOD>
@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); <START_MOD>cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUPS_BY_INCLUDED, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<java.lang.String>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS); <END_MOD>bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) <START_MOD>{ try { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; } catch (<END_MOD>java.io.IOException <START_MOD>e) <END_MOD>{ <START_MOD>throw<END_MOD> new <START_MOD>java.lang.IllegalStateException(e)<END_MOD>; }<START_MOD> }<END_MOD>
<START_MOD>public void setChangeSet(java.lang.String cs) { this.changeSet = cs; }<END_MOD>
<START_MOD>public boolean hasLegacyPermissions() { return hasLagacyPermissions; }<END_MOD>
<START_MOD>public java.util.List<com.google.gerrit.server.project.ChangeControl> findChanges(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id), user); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.server.project.GetConfig.ConfigInfo result = new com.google.gerrit.server.project.GetConfig.ConfigInfo(); com.google.gerrit.server.project.RefControl refConfig = resource.getControl().controlForRef(GitRepositoryManager.REF_CONFIG); if (refConfig.isVisible()) { com.google.gerrit.server.project.ProjectState project = resource.getControl().getProjectState(); if (want("usecontributoragreements")) { result.useContributorAgreements = project.isUseContributorAgreements(); } if (want("usecontentmerge")) { result.useContentMerge = project.isUseContentMerge(); } if (want("usesignedoffby")) { result.useSignedOffBy = project.isUseSignedOffBy(); } if (want("requirechangeid")) { result.requireChangeID = project.isRequireChangeID(); } } return result; }<END_MOD>
public final void timeFormat(com.google.gerrit.<START_MOD>extensions<END_MOD>.client.<START_MOD>AccountGeneralPreferencesInfo<END_MOD>.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); }
@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append( commands if (!(getName().isEmpty())) { usage.append( of   usage.append(getName()); } usage.append( are: usage.append("\n"); <START_MOD>int maxLength = -1; <END_MOD>for (java.lang.String name : <START_MOD>commands.keySet()) { maxLength = java.lang.Math.max(maxLength, name.length()); } java.lang.String format = ("%-" + maxLength) +   %s for (java.lang.String name : <END_MOD>com.google.common.collect.Sets.newTreeSet(commands.keySet())) { <START_MOD>final org.apache.sshd.server.Command cmd = commands.get(name).get(); usage.append(   if (cmd instanceof com.google.gerrit.sshd.BaseCommand) { com.google.gerrit.sshd.BaseCommand bc = ((com.google.gerrit.sshd.BaseCommand) (cmd)); java.lang.String descr = bc.getDescription(); if (name.equals("plugin")) { descr =   reload, remove and list plugins } usage.append(java.lang.String.format(format, name, descr)); } else { usage.append(name); }<END_MOD> usage.append("\n"); } usage.append("\n"); usage.append(   if ((getName().indexOf(   < 0) { usage.append(getName()); usage.append(   } usage.append( --help for more information. usage.append("\n"); return usage.toString(); }
void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); <START_MOD>useContentMerge.setValue(project.isUseContentMerge()); <END_MOD>requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); }
@com.google.gwtorm.client.Relation<START_MOD>(id = 18)<END_MOD> com.google.gerrit.reviewdb.ProjectAccess projects();
<START_MOD>@com.google.common.annotations.VisibleForTesting<END_MOD> void setSubject(java.lang.String subject) { this.subject = subject; }
@com.google.gerrit.server.query.change.Rewrite( S=(sortkey_after:*) L=(limit:*) public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named("S") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named("L") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s, l.intValue()) { @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if ((result.length()) > 0) { getTab().setTitle(Resources.M.sameTopic(result.length())); getTab().setChanges(info.project(), revision, convertChangeList(result)); } }<END_MOD>
<START_MOD>private static javax.sql.DataSource createDataSource(java.lang.String url) { org.apache.commons.dbcp.BasicDataSource datasource = new org.apache.commons.dbcp.BasicDataSource(); if (url.contains("postgresql")) { datasource.setDriverClassName("org.postgresql.Driver"); } else if (url.contains("h2")) { datasource.setDriverClassName("org.h2.Driver"); } else if (url.contains("mysql")) { datasource.setDriverClassName("com.mysql.jdbc.Driver"); } datasource.setUrl(url); datasource.setMaxActive(50); datasource.setMinIdle(4); datasource.setMaxIdle(16); long evictIdleTimeMs = 1000 * 60; datasource.setMinEvictableIdleTimeMillis(evictIdleTimeMs); datasource.setTimeBetweenEvictionRunsMillis((evictIdleTimeMs / 2)); return datasource; }<END_MOD>
private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = "dev"; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel( |   btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); <START_MOD>final java.lang.String reportBugUrl = com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl(); final java.lang.String reportBugTitle = com.google.gerrit.client.Gerrit.getConfig().getReportBugText(); <END_MOD>if (<START_MOD>reportBugUrl<END_MOD> != null) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(<START_MOD>(reportBugTitle == null ? <END_MOD>com.google.gerrit.client.Gerrit.C.reportBug()<START_MOD> : reportBugTitle)<END_MOD>, <START_MOD>reportBugUrl<END_MOD>); a.setTarget("_blank"); a.setStyleName(""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel( |   btmmenu.add(a); } }
<START_MOD>@java.lang.Override public com.google.gerrit.server.group.GroupInfo apply(com.google.gerrit.extensions.restapi.TopLevelResource resource, com.google.gerrit.server.group.PutGroup.Input input) throws com.google.gerrit.common.errors.NameAlreadyUsedException, com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { final com.google.gerrit.server.IdentifiedUser me = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (!(me.getCapabilities().canCreateGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("Cannot create group"); } com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(id)); if (group != null) { return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); } try { group = performCreateGroupFactory.create().createGroup(id, null, visibleToAll, null, java.util.Collections.singleton(me.getAccountId()), null); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); }<END_MOD>
<START_MOD>public static void deleteDraftChange(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.call(id, "draft").delete(cb); }<END_MOD>
private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Change.Id id : cs.ids()) { try { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db, id); if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException((((   + (cd.change().getChangeId())) +   is in state   + (cd.change().getStatus()))); } else { <START_MOD>com.google.gerrit.server.git.MergeOp.checkSubmitRule<END_MOD>(cd); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + "\n")); problemChanges.add(id); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((((( change could not be   +   because it depends on change(s)   + (problemChanges.toString())) +   which could not be submitted   + "because:\n") + reason)); } }
private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen<START_MOD>); textBox.setReadOnly(readOnly<END_MOD>); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }
<START_MOD>public org.eclipse.jgit.lib.Config getConfig() { return config; }<END_MOD>
public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.<START_MOD>LinkedHashSet<END_MOD><com.google.gerrit.reviewdb.client.Project.NameKey> projects = <START_MOD>getOrdedProjects<END_MOD>(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp op = new com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp(this, branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(projects), new com.google.gerrit.server.git.BatchUpdate.Listener()); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException( update gitlinks e); } }
private void loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); <START_MOD>com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(psId); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(legacyId); } <END_MOD>java.lang.String sha1 = db.patchSets().get(psId).getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }
<START_MOD>public java.lang.String generate(org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.server.project.ChangeControl ctl, java.lang.String current) { checkNotNull(original.getRawBuffer()); if (mergeTip != null) checkNotNull(mergeTip.getRawBuffer()); for (com.google.gerrit.server.git.ChangeMessageModifier changeMessageModifier : changeMessageModifiers) { current = changeMessageModifier.onCommitBeingCreated(current, original, mergeTip, ctl); checkState((current != null)); } return current; }<END_MOD>
void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content<START_MOD>, boolean editExists<END_MOD>) { this.id = id; this.textArea = content; <START_MOD>this.editExists = editExists; <END_MOD>}
public java.lang.Iterable<com.google.gerrit.server.WebLinks.Link> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.server.WebLinks.Link> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.server.WebLinks.Link(webLink.getLinkName(), webLink.<START_MOD>getImageUrl(), webLink.<END_MOD>getPatchSetUrl(project, commit))); } return links; }
<START_MOD>private java.lang.String getQueryParameter(java.lang.String param) { java.lang.String queryString = request.getQueryString(); if ((!(com.google.common.base.Strings.isNullOrEmpty(queryString))) && (queryString.contains(param))) { for (java.lang.String kvPair : com.google.common.base.Splitter.on('&').split(queryString)) { java.util.Iterator<java.lang.String> i = com.google.common.base.Splitter.on('=').limit(2).split(kvPair).iterator(); java.lang.String key = com.google.gerrit.extensions.restapi.Url.decode(i.next()); if (param.equals(key)) { return i.hasNext() ? com.google.gerrit.extensions.restapi.Url.decode(i.next()) : null; } } } return null; }<END_MOD>
<START_MOD>@org.junit.After public void tearDown() { com.google.gerrit.testutil.TestTimeUtil.useSystemTime(); if ((hookHandle) != null) { hookHandle.remove(); } }<END_MOD>
<START_MOD>private void logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info((("Cannot replicate to " + (uri)) + " it was canceled while running"), e); }<END_MOD>
com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); <START_MOD>if (addLinks) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getParentLinks(project, parent.name()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks; } <END_MOD>info.parents.add(i); } return info; }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return <START_MOD>sort(<END_MOD>db.patchComments().byPatchSet(psId).toList(<START_MOD>)<END_MOD>); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return <START_MOD>sort(comments); }<END_MOD>
@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError(((   + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) +   has no entry in name map }
<START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final com.google.gerrit.client.reviewdb.Account result) { display(result); }
@org.junit.After public void cleanupIndex() { <START_MOD>if ((<END_MOD>com.google.gerrit.elasticsearch.ElasticQueryChangesTest.<START_MOD>nodeInfo) != null) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes(com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.<END_MOD>node); com.google.gerrit.elasticsearch.<START_MOD>ElasticTestUtils<END_MOD>.createIndexes(<START_MOD>com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node<END_MOD>); }<START_MOD> }<END_MOD>
@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if ((<START_MOD>(<END_MOD>side == (DisplaySide.A)) && (info.isEdit())) <START_MOD>&& ((info.getSide()) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete<END_MOD> = chunks.get((res - 2)); if ((<START_MOD>(delete.getStart()) <= line) && (line <= (delete.getEnd()))) { return ((delete.getCmLine()) + line) - (delete.getStart()); } else { return (((((delete.getCmLine()) + line) - (delete.getStart())) + (info.getEnd())) - (info.getStart())) + 1; } } else if (side == (<END_MOD>info.getSide())<START_MOD>) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(<END_MOD>side<START_MOD>, line).getLine())) - (info.getStart()); }<END_MOD> } else { return <START_MOD>line; } } }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); <START_MOD>com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(db.get(), cd.change(), userProvider.get()); <END_MOD>try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (<START_MOD>ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(<END_MOD>cd<START_MOD>, <END_MOD>in, <START_MOD>repo, rw, false, changeInfo)); } } return<END_MOD> res<START_MOD>; } }<END_MOD>
<START_MOD>private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }<END_MOD>
com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);
private java.lang.String link(final com.google.gerrit.client.<START_MOD>projects.ProjectInfo<END_MOD> item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); }
public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("*:1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("*", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(":1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]", 80)); try { com.google.gerrit.server.util.SocketUtil.resolve(<START_MOD>"invalid.name.test.:12"<END_MOD>, 80); fail( not throw exception } catch (java.lang.IllegalArgumentException e) { assertEquals( host: invalid.name.<START_MOD>test.<END_MOD>:12 e.getMessage()); } }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.<START_MOD>git.BatchUpdate.ChangeContext ctx<END_MOD>) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Restored"); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append("\n\n"); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(<START_MOD>ctx.getDb())), ctx.getUser()<END_MOD>.getAccountId(), <START_MOD>ctx.getWhen(), <END_MOD>change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }
private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( is already up to date. } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException( change could not be rebased due to a conflict during merge. } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); <START_MOD>org.eclipse.jgit.revwalk.RevCommit rebasedCommit = ctx.getRevWalk().parseCommit(objectId); ctx.getRevWalk().parseBody(rebasedCommit); <END_MOD>return <START_MOD>rebasedCommit<END_MOD>; }
<START_MOD>private void ensurePermitted(com.google.gerrit.server.project.ChangeControl changeControl) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (!(changeControl.canAddPatchSet(reviewDb.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException(("Adding patch sets and hence creation or" + " modification of change edits is not permitted.")); } }<END_MOD>
<START_MOD>private com.google.gerrit.server.events.DependencyAttribute newDependsOn(com.google.gerrit.reviewdb.Change c, com.google.gerrit.reviewdb.PatchSet ps) { com.google.gerrit.server.events.DependencyAttribute d = newDependencyAttribute(c, ps); if (c.currPatchSetId().equals(ps.getId())) { d.isCurrentPatchSet = "true"; } else { d.isCurrentPatchSet = "false"; } return d; }<END_MOD>
<START_MOD>public void run(java.lang.String section, java.lang.String key, java.lang.String password) throws java.lang.Exception { com.google.gerrit.pgm.init.api.Section passwordSection = sections.get(section, null); if (ui.isBatch()) { passwordSection.setSecure(key, password); } else { ui.header("Set password for [%s]", section); passwordSection.passwordForKey(("Enter " + key), key); } }<END_MOD>
protected void bccWatchesNotifyAllComments(<START_MOD>java.util.List<java.lang.String> specificFileName<END_MOD>) { if ((db) != null) { <START_MOD>if (specificFileName == null) { final java.util.List<com.google.gerrit.reviewdb.Patch> patches = getPatches(patchSet.getId()); specificFileName = getPatchesFileNames(patches); } <END_MOD>try { final com.google.gerrit.server.project.ProjectState ps = getProjectState(); if (ps != null) { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : db.accountProjectWatches().notifyAllComments(ps.getProject().getNameKey()<START_MOD>)) { if (canAddRecipient(w, specificFileName<END_MOD>)) { add(RecipientType.BCC, w.getAccountId()); } } } <START_MOD>} <END_MOD>catch (com.google.gwtorm.client.OrmException err) { } } }
@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (<START_MOD>java.lang.Exception e) { <END_MOD>com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>RevisionReviewerApiImpl<END_MOD>.<START_MOD>throwRestApiException<END_MOD>( delete vote e); } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException( account configuration errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format( update for account %s failed accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }
<START_MOD>java.util.Set<java.lang.String> getCheckedRefs() { java.util.Set<java.lang.String> refs = new java.util.HashSet<>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.projects.TagInfo k = getRowItem(row); if (((k != null) && ((table.getWidget(row, 1)) instanceof com.google.gwt.user.client.ui.CheckBox)) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { refs.add(k.ref()); } } return refs; }<END_MOD>
private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); <START_MOD>getReviewers().updateReviewerList(); <END_MOD>} @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }
private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith("/"))) { to = "/" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "/"))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login") + to)); } else { <START_MOD>final java.lang.String message; switch (result.getError()) { case LDAP_SERVER_UNAVAILABLE : message = Util.C.ldapServerUnavailable(); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } <END_MOD>showError(<START_MOD>message<END_MOD>); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }
@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { <START_MOD>userSshSession<END_MOD>.exec( gc --all<START_MOD> assertThat(userSshSession.hasError()).isTrue();<END_MOD> assertError(( of the following capabilities is required to access this +   resource: [runGC, maintainServer] <START_MOD>userSshSession<END_MOD>.getError()); }
<START_MOD>@org.kohsuke.args4j.Argument(index = 1, required = true, multiValued = true, metaVar = "{EMAIL}", usage = "users to add (+name@example.com) or remove (-name@example.com)") void addAnnotatedNameOrEmail(final java.lang.String token) { try { parseAnnotatedNameOrEmail(token); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.client.OrmException e) { throw new java.lang.IllegalArgumentException("database error", e); } }<END_MOD>
public void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.WatchConfig watchConfig = open(accountId)) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>account<END_MOD>.<START_MOD>WatchConfig<END_MOD>.NotifyType>> projectWatches = watchConfig.getProjectWatches(); for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { projectWatches.remove(key); } commit(watchConfig); } }
public static com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey.Algorithm.OPTIMIZED_DIFF); }
public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }
void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format(( update HEAD of project on remote site %s. + ( Only local paths and SSH URLs are supported +   for remote HEAD update. replicateURI)); } }
@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { <START_MOD>if (info.showJobsPanelBelowTabPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_RELATED_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } else { <END_MOD>com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } <START_MOD>} <END_MOD>if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }
@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addTxt<START_MOD>.addKeyUpHandler(new com.google.gwt.event.dom.client.KeyUpHandler<END_MOD>() { @java.lang.Override public void <START_MOD>onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { addNew.setEnabled((!(addTxt.getText().trim().isEmpty()))); } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void <END_MOD>onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); }
@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(<START_MOD>CacheContants<END_MOD>.PROJECT_LIST); verifyResponseIsOK(); }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); <START_MOD>info.uis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.uis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.uis.add(UiType.POLYGERRIT); } <END_MOD>return info; }
<START_MOD>public void setup() throws java.lang.Exception { org.powermock.api.easymock.PowerMock.mockStatic(com.vmware.gerrit.owners.common.JgitWrapper.class); db = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.reviewdb.server.ReviewDb.class); repository = org.powermock.api.easymock.PowerMock.createMock(org.eclipse.jgit.lib.Repository.class); resolver = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.server.account.AccountResolver.class); parser = new com.vmware.gerrit.owners.common.ConfigurationParser(resolver, db); resolvingEmailToAccountIdMocking(); }<END_MOD>
private void setIgnoreWhitespace(com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD>.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); }
<START_MOD>private java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getDesiredPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = new java.util.LinkedList<>(); for (com.google.gerrit.server.edit.tree.TreeModification treeModification : treeModifications) { pathEdits.addAll(treeModification.getNecessaryPathEdits(repository)); } return pathEdits; }<END_MOD>
private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText((   + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append(   sb.append(info.subject()); } setWindowTitle(sb.toString()); <START_MOD>initEditCommitMessageAction(); }<END_MOD>
<START_MOD>java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }<END_MOD>
<START_MOD>static boolean doCheckBlockedKeywords(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN).length) > 0; }<END_MOD>
void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } <START_MOD>com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { <END_MOD>resizePaddingWidget(); }<START_MOD> }); }<END_MOD>
private net.codemirror.lib.Configuration getConfig() {<START_MOD> net.codemirror.mode.ModeInfo mode = net.codemirror.mode.ModeInfo.findMode(type, path);<END_MOD> return net.codemirror.lib.Configuration.create().set("readOnly", false).set("cursorBlinkRate", 0).set("cursorHeight", 0.85).set("lineNumbers", true).set("tabSize", 4).set("lineWrapping", false).set("styleSelectedText", true).set("showTrailingSpace", true).set("keyMap", "default").set("mode", <START_MOD>(mode != null ? mode<END_MOD>.<START_MOD>name<END_MOD>(<START_MOD>) : null<END_MOD>)); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.<START_MOD>AccountGroup.UUID<END_MOD>> <START_MOD>removedSubgroups, com.google.gerrit.reviewdb.client.AccountGroup.Id groupId<END_MOD>, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, <START_MOD>removedSubgroups, groupId<END_MOD>, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error( to log delete groups from group event e); } } }
@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Verified", ((short) (1))); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo("Code-Review"); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, <START_MOD>3000<END_MOD>))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo("Verified"); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }
private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if (<START_MOD>(<END_MOD> < cnt<START_MOD>) && (ps != null)<END_MOD>) { final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError("update", e); } return inserts; }
<START_MOD>@org.junit.Test public void addedReviewersGetNotified() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo("Foo Bar", "foo.bar@gerritcodereview.com"); for (com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of(ReviewerState.CC, ReviewerState.REVIEWER)) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput input = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); input.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRFCAddressString(acc); input.state = state; gApi.changes().id(r.getChangeId()).addReviewer(input); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); assertThat(messages.get(0).rcpt()).containsExactly(com.google.gerrit.server.mail.Address.parse(input.reviewer)); sender.clear(); } }<END_MOD>
<START_MOD>@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.RevisionResource resource) { com.google.gerrit.reviewdb.client.PatchSet.Id current = resource.getChange().currentPatchSetId(); try { return new com.google.gerrit.extensions.webui.UiAction.Description().setLabel(java.lang.String.format("Publish Revision %d", resource.getPatchSet().getPatchSetId())).setVisible((((resource.getPatchSet().isDraft()) && (resource.getPatchSet().getId().equals(current))) && (resource.getControl().canPublish(dbProvider.get())))); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalStateException(e); } }<END_MOD>
<START_MOD>private static java.lang.String readCss(java.util.concurrent.atomic.AtomicBoolean file) throws java.io.IOException { java.lang.String name = "asciidoc.css"; java.net.URL url = com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getResource(name); if (url == null) { throw new java.io.FileNotFoundException(("Resource " + name)); } file.set("file".equals(url.getProtocol())); try (java.io.InputStream in = url.openStream()) { try (org.eclipse.jgit.util.TemporaryBuffer.Heap tmp = new org.eclipse.jgit.util.TemporaryBuffer.Heap((128 * 1024))) { tmp.copy(in); return new java.lang.String(tmp.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } } }<END_MOD>
@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (<START_MOD>(<END_MOD>!(servlets.containsKey(type<START_MOD>))) && (type != (GitilesView.Type.SHOW<END_MOD>))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }
<START_MOD>public <END_MOD>java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.statusCode = CommitMergeStatus.MISSING_DEPENDENCY; n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.statusCode) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; }
public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); <START_MOD>java.lang.String r =<END_MOD> org.eclipse.jgit.util.Base64.encodeBytes(raw); <START_MOD>while (r.endsWith("=")) { r = r.substring(0, ((r.length()) - 1)); <END_MOD>}<START_MOD> return r.replace('+', '.').replace('/', '-'); }<END_MOD>
<START_MOD>protected boolean useAccountLoader() { return false; }<END_MOD>
@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.<START_MOD>IntegrateException<END_MOD> { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }
public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if ((<START_MOD>approvalsMap<END_MOD>) != null) { <START_MOD>return approvalsMap.get(c.currentPatchSetId()); } else { currentApprovals<END_MOD> = db.get(<START_MOD>).patchSetApprovals().byPatchSet(<END_MOD>c.currentPatchSetId()).toList(); } } return currentApprovals; }
<START_MOD>private void expectWriteGroupToReviewDbBlockedException() throws java.lang.Exception { exception.expect(com.google.gerrit.extensions.restapi.RestApiException.class); exception.expectCause(new org.hamcrest.BaseMatcher<java.lang.Throwable>() { @java.lang.Override public boolean matches(java.lang.Object item) { return (item instanceof com.google.gwtorm.server.OrmException) && ("Updates to groups in ReviewDb are blocked".equals(((com.google.gwtorm.server.OrmException) (item)).getMessage())); } @java.lang.Override public void describeTo(org.hamcrest.Description description) { description.appendText("OrmException: Updates to groups in ReviewDb are blocked"); } }); }<END_MOD>
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException( add email e); } }
com.google.gerrit.server.git.validators.MergeValidators create(<START_MOD>org.eclipse.jgit.lib.Repository repo<END_MOD>);
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage =   set of users to become members of the <START_MOD>account<END_MOD> void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }
<START_MOD>public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, com.google.gerrit.extensions.common.AccountInfo reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals) { com.google.gerrit.server.extensions.events.ReviewerDeleted.Event e = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(change, revision, reviewer, message, newApprovals, oldApprovals); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { listener.onReviewerDeleted(e); } }<END_MOD>
<START_MOD>private void showUpdates(com.google.gerrit.client.changes.ChangeInfo newInfo) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((availableUpdate) == null) { availableUpdate = new com.google.gerrit.client.change.UpdatedBar() { @java.lang.Override void onShow() { reload.reload(); } void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; availableUpdate.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { availableUpdate = null; } }); } availableUpdate.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(availableUpdate.isShowing())) { availableUpdate.popup(); } }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException( retrieve <START_MOD>account<END_MOD> e); } }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), (( id   + groupId) + "'")); }
<START_MOD>private com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo getRefReplicationInfo(java.lang.String project, java.lang.String ref) { java.util.AbstractMap.SimpleEntry<java.lang.String, java.lang.String> projectRefKey = new java.util.AbstractMap.SimpleEntry<java.lang.String, java.lang.String>(project, ref); if (!(replicationInfoPerProjectRef.containsKey(projectRefKey))) { com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo refReplicationInfo = new com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationInfo(project, ref); replicationInfoPerProjectRef.put(projectRefKey, refReplicationInfo); return refReplicationInfo; } return replicationInfoPerProjectRef.get(projectRefKey); }<END_MOD>
<START_MOD>public native final net.codemirror.lib.LineCharacter setCh(int ch);<END_MOD>
<START_MOD>public void setDownloadArchive(boolean a) { downloadArchive = a; }<END_MOD>
<START_MOD>@java.lang.Override protected void configure() { for (java.lang.Class<?> clazz : sysSingletons) { bind(clazz).in(Scopes.SINGLETON); } for (java.util.Map.Entry<java.lang.Class<?>, java.lang.Class<?>> e : sysListen.entrySet()) { @java.lang.SuppressWarnings("unchecked") java.lang.Class<java.lang.Object> type = ((java.lang.Class<java.lang.Object>) (e.getKey())); @java.lang.SuppressWarnings("unchecked") java.lang.Class<java.lang.Object> impl = ((java.lang.Class<java.lang.Object>) (e.getValue())); java.lang.annotation.Annotation n = impl.getAnnotation(javax.inject.Named.class); if (n == null) { n = impl.getAnnotation(com.google.inject.name.Named.class); } if (n == null) { n = com.google.inject.internal.UniqueAnnotations.create(); } bind(type).annotatedWith(n).to(impl); } }<END_MOD>
public static com.google.gerrit.pgm.init<START_MOD>.util<END_MOD>.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.<START_MOD>util.<END_MOD>ConsoleUI.getInstance(false); }
<START_MOD>private<END_MOD> java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve("gen").resolve("polygerrit-ui").resolve("polygerrit_components").resolve("polygerrit_components.bower_components.zip"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.<START_MOD>common.CommitInfo info = json.toCommit(rsrc.getControl(), rw, commit, addLinks); info.commit = commit.name(); com.google.gerrit.extensions.<END_MOD>restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(<START_MOD>info<END_MOD>); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }
@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName<START_MOD>, java.lang.String fileMatch<END_MOD>, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);
public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { org.eclipse.jgit.merge.ThreeWayMerger m; if (useContentMerge) { if (useRecursiveMerge) { m = MergeStrategy.RECURSIVE.newMerger(repo, true); } else { m = MergeStrategy.RESOLVE.newMerger(repo, true); } } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(repo); } m.setObjectInserter(inserter); return m; }
<START_MOD>public void setSensitiveParamaters(java.util.Set<java.lang.String> set) { this.sensitiveParameters = set; }<END_MOD>
@java.lang.Override public boolean match(<START_MOD>org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.AnyObjectId objectId) { try { return rFilter.include(rw, rw.parseCommit(objectId)); } catch (org.eclipse.jgit.errors.MissingObjectException e) { <END_MOD>com.google.gerrit.server.query.change.<START_MOD>MessagePredicate.log.error(((objectId.getName()) +   commit does not exist. e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) {<END_MOD> com.google.<START_MOD>gerrit<END_MOD>.server.<START_MOD>query.change.MessagePredicate.log.error(((objectId.getName()) +   revision is not a commit. e); } catch (java.io.IOException e) {<END_MOD> com.google.gerrit.<START_MOD>server.query.change.MessagePredicate.log.error(( not search for commit message in   + (objectId.getName())), e); }<END_MOD> return false; }
<START_MOD>private void appendParentSnippet(java.lang.StringBuilder cmts, com.google.gerrit.reviewdb.client.PatchLineComment childComment, com.google.gerrit.reviewdb.server.PatchLineCommentAccess commentAccess) { com.google.gerrit.reviewdb.client.PatchLineComment.Key parentKey = new com.google.gerrit.reviewdb.client.PatchLineComment.Key(childComment.getKey().getParentKey(), childComment.getParentUuid()); com.google.gerrit.reviewdb.client.PatchLineComment parentComment = null; try { parentComment = commentAccess.get(parentKey); } catch (com.google.gwtorm.server.OrmException e) { } if (parentComment != null) { java.lang.String parentCommentStr = parentComment.getMessage().trim(); int endIndex = java.lang.Math.min(75, parentCommentStr.length()); if (parentCommentStr.contains("\n")) { endIndex = java.lang.Math.min(endIndex, parentCommentStr.indexOf("\n")); } cmts.append("> ").append(parentCommentStr.substring(0, endIndex)).append('\n'); } }<END_MOD>
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.<START_MOD>reviewdb.client.AccountExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : expectedIds) { id.setCanDelete((!(id.getExternalId().equals(("username:" + (user.username)))))); id.setTrusted(true); expectedIdInfos.add(com.google.gerrit.acceptance.rest<END_MOD>.account.<START_MOD>ExternalIdIT.toInfo(id)<END_MOD>); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
public <START_MOD>java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>String<END_MOD> getDownloadUrl() { <START_MOD>switch<END_MOD> (downloadUrl) <START_MOD>{<END_MOD> <START_MOD>case<END_MOD> <START_MOD>"ANON_GIT" :<END_MOD> return <START_MOD>CoreDownloadSchemes.ANON_GIT; case "ANON_HTTP" : return CoreDownloadSchemes.ANON_HTTP; case "HTTP" : return CoreDownloadSchemes.HTTP; case "SSH" : return CoreDownloadSchemes.SSH; case "REPO_DOWNLOAD" : return CoreDownloadSchemes.REPO_DOWNLOAD<END_MOD>; } return downloadUrl; }
@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(( blocked keyword(s) found in: foo.txt (Line: 1) +   (found: myp4ssw0rd, foobar) ( blocked keyword(s) found in: bar.txt (Line: 5) +   (found: $Id: foo bar$) <START_MOD>( blocked keyword(s) found in: commit message (Line: 1) +   (found: foobar) <END_MOD>assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@org.junit.Before public void setUp() throws java.lang.Exception { <START_MOD>com.ericsson.gerrit.plugins.syncevents.Configuration <END_MOD>cfg = <START_MOD>mock<END_MOD>(com.ericsson.gerrit.plugins.syncevents.Configuration.class); <START_MOD>when<END_MOD>(cfg.getUrl()).<START_MOD>thenReturn<END_MOD>(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL)<START_MOD>; when<END_MOD>(cfg.getUser()).<START_MOD>thenReturn<END_MOD>("user"); <START_MOD>when<END_MOD>(cfg.getPassword()).<START_MOD>thenReturn<END_MOD>("pass"); <START_MOD>when<END_MOD>(cfg.getMaxTries()).<START_MOD>thenReturn<END_MOD>(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES)<START_MOD>; when<END_MOD>(cfg.getConnectionTimeout()).<START_MOD>thenReturn<END_MOD>(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT)<START_MOD>; when<END_MOD>(cfg.getSocketTimeout()).<START_MOD>thenReturn<END_MOD>(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT)<START_MOD>; when<END_MOD>(cfg.getRetryInterval()).<START_MOD>thenReturn<END_MOD>(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL)<START_MOD>; httpSession<END_MOD> = new com.ericsson.gerrit.plugins.syncevents.<START_MOD>HttpSession(new com.ericsson.gerrit.plugins.syncevents.<END_MOD>HttpClientProvider(cfg).get(), com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL); }
<START_MOD>private com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> getDraftIds() { com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.HashBasedTable.create(); if ((allUsersRepo) == null) { return draftIds; } for (org.eclipse.jgit.transport.ReceiveCommand cmd : allUsersRepo.cmds.getCommands().values()) { java.lang.String r = cmd.getRefName(); if (r.startsWith(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS)) { java.lang.String msg = "invalid draft ref: %s"; com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRefPart(r.substring(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS.length())); checkState((accountId != null), msg, r); int s = r.lastIndexOf('/'); checkState(((s >= 0) && (s < ((r.length()) - 1))), msg, r); com.google.gerrit.reviewdb.client.Change.Id changeId = Change.Id.parse(r.substring((s + 1))); draftIds.put(changeId, accountId, cmd.getNewId()); } } return draftIds; }<END_MOD>
private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern( ]HH:mm java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } <START_MOD>} catch (java.lang.IllegalArgumentException e2) { delay =<END_MOD> com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) { if (query.startsWith("refs/")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } java.util.List<com.google.gerrit.server.query.<START_MOD>Predicate<com.google.gerrit.server.query.<END_MOD>change.<START_MOD>ChangeData<END_MOD>><START_MOD>> predicates<END_MOD> = <START_MOD>com.google.common.collect.Lists.newArrayListWithCapacity(9); try { predicates.add(owner(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(reviewer(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(file(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(label(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(message(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(comment(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(projects(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } predicates.add(ref(query)); predicates.add(branch(query)); predicates.add(topic(query));<END_MOD> return com.google.gerrit.server.query.Predicate.or(<START_MOD>predicates); }<END_MOD>
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git<START_MOD>.strategy<END_MOD>.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git<START_MOD>.strategy<END_MOD>.SubmoduleOp submoduleOp, boolean dryrun);
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException( to grant read permissions on <START_MOD>account<END_MOD> branches e); } }
<START_MOD>@org.junit.Test public void testDoesTypeMatch() throws java.util.concurrent.ExecutionException { com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil ctu = new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.getPatternCache()); java.lang.String[] listOfTypes = new java.lang.String[]{ "text/*", "^application/(pdf|xml)", "application/zip" }; assertThat(ctu.doesTypeMatch("text/xml", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("text/html", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("text/plain", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("application/pdf", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("application/xml", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("application/zip", listOfTypes)).isTrue(); assertThat(ctu.doesTypeMatch("foo/bar", listOfTypes)).isFalse(); assertThat(ctu.doesTypeMatch("application/msword", listOfTypes)).isFalse(); }<END_MOD>
<START_MOD>@org.junit.Test public void testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); org.eclipse.jgit.revwalk.RevCommit ps1Commit = r.getCommit(); org.eclipse.jgit.revwalk.RevCommit ps2Commit; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { java.lang.String changeId = com.google.common.collect.Iterables.getOnlyElement(ps1Commit.getFooterLines(FooterConstants.CHANGE_ID)).substring(1); org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); ps2Commit = tr.branch("refs/heads/master").commit().message(((ps1Commit.getShortMessage()) + " v2")).insertChangeId(changeId).create(); } testRepo.git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec("refs/heads/master")).call(); testRepo.reset(ps2Commit); com.google.gerrit.server.query.change.ChangeData cd = com.google.common.collect.Iterables.getOnlyElement(queryProvider.get().byCommit(ps1Commit.name())); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.NEW); assertThat(com.google.gerrit.acceptance.git.AbstractPushForReview.getPatchSetRevisions(cd)).containsExactlyEntriesIn(com.google.common.collect.ImmutableMap.of(1, ps1Commit.name())); org.eclipse.jgit.transport.PushResult pr = com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, "refs/for/master", false); assertThat(pr.getRemoteUpdate("refs/for/master").getMessage()).isEqualTo("no new changes"); }<END_MOD>
private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if ((<START_MOD>(<END_MOD>!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) <START_MOD>&& (!(ChangeType.DELETED.matches(info.status())))) { if (ChangeType.ADDED.matches(info.status())) { sb.append<END_MOD>(info.lines_inserted())<START_MOD>.append( lines } else { sb.append("+").append(info.lines_inserted()).append( - } } sb.closeTd(<END_MOD>); }
private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); <START_MOD>com.google.gerrit.reviewdb.client.Account account = (user.isIdentifiedUser()) ? ((com.google.gerrit.server.IdentifiedUser) (user)).getAccount() : null; <END_MOD>gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId()<START_MOD>, account<END_MOD>); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange( 1 "a.txt", "content"); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange( 2 "a.txt",   content submitWithConflict(change2.getChangeId()<START_MOD>,   to a path conflict<END_MOD> assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }
private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.<START_MOD>unchanged()) { if (includeUnchanged || (psa.isSubmit())) { logDebug(( submit label   + psa)); update.putApprovalFor<END_MOD>(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }
<START_MOD>com.google.gerrit.server.api2.changes.ChangeApiImpl create(com.google.gerrit.server.change.ChangeResource change);<END_MOD>
<START_MOD>public static java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> toAccountExternalIds(java.util.Collection<com.google.gerrit.server.account.ExternalId> extIds) { return extIds.stream().map(( e) -> e.asAccountExternalId()).collect(java.util.stream.Collectors.toSet()); }<END_MOD>
@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }
<START_MOD>public com.google.gerrit.reviewdb.client.PatchSet latest(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { return get(db, notes, notes.getChange().currentPatchSetId()); }<END_MOD>
private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = "admin,group,"; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = "admin,project,"; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.<START_MOD>admin.ProjectAccessScreen(k); } return new com.google.gerrit.client.<END_MOD>NotFoundScreen(); } <START_MOD>if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } <END_MOD>return new com.google.gerrit.client.NotFoundScreen(); }
<START_MOD>private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyStartTime()))); return true; } if ((interval <= 0) && (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ingnored. ", key); return true; } return false; }<END_MOD>
<START_MOD>@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockChange.isPrivate = false; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }<END_MOD>
<START_MOD>public java.lang.String getUrl() { return jiraUrl; }<END_MOD>
<START_MOD>public final java.lang.String toBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().getBranch()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put("project", encode(branch.getParentKey().get())); p.put("branch", encode(branch.get())); return (url()) + (pattern.replace(p)); }<END_MOD>
<START_MOD>java.lang.String getIndexFile() { return com.google.common.base.MoreObjects.firstNonNull(cfg.getString(com.googlesource.gerrit.plugins.xdocs.XDocConfig.WEB_SECTION, null, com.googlesource.gerrit.plugins.xdocs.XDocConfig.KEY_INDEX_FILE), com.googlesource.gerrit.plugins.xdocs.XDocConfig.DEFAULT_INDEX_FILE); }<END_MOD>
public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.server.git.SubmoduleOp sub = subOpProvider.get(); com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException( is subscribed by other projects. } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException( is subscribed by other projects. } }
protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, <START_MOD>com.google.gwtorm.client.OrmException, <END_MOD>java.io.IOException;
protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeList<END_MOD>> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeList<END_MOD>>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.<START_MOD>client<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeList<END_MOD> result) { display(result); } }; }
<START_MOD>public java.lang.String toStatusString() { return name().toLowerCase().replace("_", "-"); }<END_MOD>
<START_MOD>private void authenticateAndRedirect(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.account.AuthRequest areq = new com.google.gerrit.server.account.AuthRequest(user.getId()); areq.setDisplayName(user.getName()); areq.setEmailAddress(user.getEmail()); com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.httpd.auth.oauth.OAuthSession.log.error((("Unable to authenticate user \"" + (user)) + "\""), e); rsp.sendError(HttpServletResponse.SC_FORBIDDEN); return; } webSession.get().login(arsp, true); java.lang.String suffix = redirectUrl.substring(((OAuthWebFilter.GERRIT_LOGIN.length()) + 1)); suffix = java.net.URLDecoder.decode(suffix, java.nio.charset.StandardCharsets.UTF_8.name()); rsp.sendRedirect(suffix); }<END_MOD>
com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(() <START_MOD>-><END_MOD> { return writer.deleteDocuments(term); }); }
<START_MOD>@org.junit.Test public void testParseAndPersistInlineComment() throws java.lang.Exception { java.lang.String changeId = createChangeForTest(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), null, "Some Inline Comment", null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo("Patch Set 1:\n(1 comment)"); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo("mailMessageId=some id"); comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(3); assertThat(comments.get(2).message).isEqualTo("Some Inline Comment"); assertThat(comments.get(2).tag).isEqualTo("mailMessageId=some id"); assertThat(comments.get(2).inReplyTo).isEqualTo(comments.get(1).id); }<END_MOD>
@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError(((   + (e.getMessage())) + "\n")); } catch (java.lang.Exception e) { ok = false; <START_MOD>java.lang.String err = ((( server error while approving   + patchSetId) + "\n\t") + (e.getMessage())) + "\n"; <END_MOD>writeError((<START_MOD>   + err)); com.google.gerrit.sshd.commands.ReviewCommand.log.<END_MOD>error<START_MOD>(err<END_MOD>); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, ( or more approvals failed; +   review output above } }
<START_MOD>private boolean canRebase(final com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { try { return (dbProvider.get().patchSetAncestors().ancestorsOf(patchSetId).toList().size()) == 1; } catch (com.google.gwtorm.server.OrmException e) { return false; } }<END_MOD>
@java.lang.Override public com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>ProjectSubmitType<END_MOD> apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = <START_MOD>com.google.gerrit.server.config.ScheduleConfig.builder<END_MOD>(rc, "a", "b"<START_MOD>).setKeyInterval(<END_MOD>"i"<START_MOD>).setKeyStartTime(<END_MOD>"s"<START_MOD>).setNow(<END_MOD>com.google.gerrit.server.config.ScheduleConfigTest.NOW)<START_MOD>.build()<END_MOD>; assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = <START_MOD>com.google.gerrit.server.config.ScheduleConfig.builder<END_MOD>(rc, "a", "b"<START_MOD>).setKeyInterval(<END_MOD>"myInterval"<START_MOD>).setKeyStartTime(<END_MOD>"myStart"<START_MOD>).setNow(<END_MOD>com.google.gerrit.server.config.ScheduleConfigTest.NOW)<START_MOD>.build()<END_MOD>; assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) {<START_MOD> if (msg instanceof com.google.gerrit.client.rpc.NativeString) { com.google.gerrit.client.rpc.NativeString str = ((com.google.gerrit.client.rpc.NativeString) (msg)); if ((str != null) && (!(str.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(str.asString()); } }<END_MOD> com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); }
<START_MOD>@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { return; } approvals = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); walk.markStart(walk.parseCommit(rev)); for (org.eclipse.jgit.revwalk.RevCommit commit : walk) { walk.parseBody(commit); parse(commit); } for (java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> v : approvals.asMap().values()) { java.util.Collections.reverse(((java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval>) (v))); } }<END_MOD>
public boolean canSubmit() {<START_MOD> if ("refs/meta/config".equals(refName)) { return getProjectControl().isOwner(); }<END_MOD> return canPerform(Permission.SUBMIT); }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((( for 'groups' in gerrit.config must be valid <START_MOD>account<END_MOD> +   UUIDs. The following <START_MOD>account<END_MOD> UUIDs could not be resolved:   + invalid) +   Please remove/fix these 'groups' subsections in +   gerrit.config. } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(( not find <START_MOD>account<END_MOD>   + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
@java.lang.SuppressWarnings("unchecked") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong("cache", def.name(), "memoryLimit", def.maximumWeight())); <START_MOD>builder.removalListener(masterRemovalListenerFactory.get(def.name())); <END_MOD>com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), "maxAge")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, "cache", def.name(), "maxAge", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }
@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson(com.google.gitiles.LogServletTest.LOG, <START_MOD>"/repo/+log"<END_MOD>); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }
<START_MOD>public static java.util.List<java.lang.String> getSecondaryEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.List<java.lang.String> emails = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }<END_MOD>
<START_MOD>public static com.google.gerrit.extensions.webui.UiResult redirectUrl(java.lang.String url) { com.google.gerrit.extensions.webui.UiResult r = new com.google.gerrit.extensions.webui.UiResult(); r.redirectUrl = url; return r; }<END_MOD>
@org.junit.Test public void <START_MOD>cannotMarkChangeThatWasMarkedAsReviewedAsUnreviewed<END_MOD>() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); <START_MOD>setApiUser(user); gApi.changes().id(changeId).markAsReviewed(true); assertThat(gApi.changes().id(changeId).get().reviewed).isTrue(); <END_MOD>exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage(<START_MOD>(((( labels   + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) +   and   + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) +   are mutually exclusive. Only one of them can be set.<END_MOD> gApi.<START_MOD>accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.<END_MOD>changes<START_MOD>.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL) + "/1")))<END_MOD>); }
private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); <START_MOD>info.htmlResourcePaths = new java.util.ArrayList(); <END_MOD>for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { <START_MOD>java.lang.String path = u.getJavaScriptResourcePath(); if (path.endsWith(".html")) { info.htmlResourcePaths.add(java.lang.String.format("plugins/%s/%s", u.getPluginName(), path)); } else { <END_MOD>info.jsResourcePaths.add(java.lang.String.format("plugins/%s/%s", u.getPluginName(), <START_MOD>path)); }<END_MOD> } return info; }
private void <START_MOD>copyFileIfConfigured<END_MOD>(java.io.File file) <START_MOD>{ if<END_MOD> (<START_MOD>!(copyLocal<END_MOD>))<START_MOD> { return<END_MOD>;<START_MOD> }<END_MOD> java.io.File copyFile = <START_MOD>cfg<END_MOD>.<START_MOD>getLocalCopyFile<END_MOD>(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn( not copy local database file with timestamp e); } }
<START_MOD>@com.google.inject.Inject(optional = true) void setPrimaryKeyFix(com.google.gerrit.server.schema.PrimaryKeyFix fix) { this.fix = fix; }<END_MOD>
public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = <START_MOD>a.<END_MOD>psUtil.byChange(db, notes()); } return patchSets; }
private static void patch(java.lang.String token, com.google.gerrit.<START_MOD>client.DiffObject base, com.google.gerrit.<END_MOD>reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = ( <= c) ? token.substring((c + 1)) : ""; } if (("".equals(panel)) || ("cm".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, <START_MOD>base<END_MOD>, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, <START_MOD>base<END_MOD>, id, side, line); } } else if ("sidebyside".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, <START_MOD>base<END_MOD>, id, side, line); } else if ("unified".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, <START_MOD>base<END_MOD>, id, side, line); } else if ("edit".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }
<START_MOD>@java.lang.Override public void error(com.google.gerrit.server.git.ValidationError error) { com.google.gerrit.pgm.init.api.AllProjectsConfig.log.error(((("Error pasring file " + (com.google.gerrit.server.git.GroupList.FILE_NAME)) + ": ") + (error.getMessage()))); }<END_MOD>
private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on("cursorActivity", updateActiveLine(cm)); cm.on("gutterClick", onGutterClick(cm)); cm.on("scroll", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on("viewportChange", adjustGutters(cm)); cm.on("renderLine", <START_MOD>resizeLinePadding<END_MOD>(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'j'", moveCursorDown(cm, 1)).on("'k'", moveCursorDown(cm, (-1))).on("'u'", upToChange()).on("'r'", toggleReviewed()).on("'o'", toggleOpenBox(cm)).on("Enter", toggleOpenBox(cm)).on("'c'", insertNewDraft(cm))); }
<START_MOD>public final native boolean hasField(java.lang.String field);<END_MOD>
public org.eclipse.jgit.lib.Config getFromPluginConfig(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { <START_MOD>return<END_MOD> <START_MOD>getProjectPluginConfig<END_MOD>(projectName<START_MOD>,<END_MOD> pluginName).get(); }
<START_MOD>@java.lang.Override public void start() { try { httpd.start(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException("Cannot start HTTP daemon", e); } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> byAccount(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.common.collect.ImmutableSet.copyOf(extIdsByAccount.get(com.google.gerrit.server.account.ExternalIdCacheImpl.ListKey.ALL).get(accountId)); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.ExternalIdCacheImpl.log.warn("Cannot list external ids", e); return java.util.Collections.emptySet(); } }<END_MOD>
boolean isDisabled() { return (<START_MOD>getPermittedLimit()<END_MOD>) <= 0; }
<START_MOD>public Project.NameKey getNameKey() { return new com.google.gerrit.reviewdb.client.Project.NameKey(getName()); }<END_MOD>
<START_MOD>public static com.google.gerrit.server.config.ScheduleConfig create(org.eclipse.jgit.lib.Config config, java.lang.String section, java.lang.String subsection) { return com.google.gerrit.server.config.ScheduleConfig.builder(config, section, subsection).build(); }<END_MOD>
boolean wouldPushRef(java.lang.String ref) { if ((!(<START_MOD>config.<END_MOD>replicatePermissions<START_MOD>()<END_MOD>)) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : remote.getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; }
private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.<START_MOD>GitRepositoryManager.class).to(com.google.gerrit.<END_MOD>server.git.<START_MOD>LocalDiskRepositoryManager.class); bind<END_MOD>(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); }
public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); <START_MOD>for (<END_MOD>java.lang.String<START_MOD> s : com.google.gerrit.client.Gerrit.getInfo().download().schemes()) { com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo scheme<END_MOD> = com.google.gerrit.client.Gerrit.getInfo().download().<START_MOD>scheme(s<END_MOD>); if ((<START_MOD>scheme.isAuthRequired()) && (!<END_MOD>allowAnonymous<START_MOD>)) { continue; } com.google.gerrit.client.download.DownloadUrlLink.KnownScheme knownScheme = com.google.gerrit.client.download.DownloadUrlLink.KnownScheme.get(s); if (knownScheme<END_MOD> != null) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink<START_MOD>(knownScheme.downloadScheme, knownScheme.text, scheme.getUrl<END_MOD>(project))<START_MOD>); } else<END_MOD> { urls.add(new com.google.gerrit.client.download.DownloadUrlLink<START_MOD>(s, scheme.getUrl<END_MOD>(project))<START_MOD>); } } return<END_MOD> urls<START_MOD>; }<END_MOD>
int findApproval(com.google.gerrit.server.account.<START_MOD>AccountByEmailCache accountByEmailCache, com.google.gerrit.server.account.<END_MOD>AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(<START_MOD>accountByEmailCache, accountCache, <END_MOD>repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(( db key =   + (db.key))); return findApproval(accountCache, db); }
private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); <START_MOD>labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } java.lang.StringBuilder sb<END_MOD> = <START_MOD>new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated<END_MOD>())); if (<START_MOD>(info.subject()) != null<END_MOD>) { <START_MOD>sb.append(   sb.append(info.subject<END_MOD>()); } <START_MOD>setWindowTitle(sb.toString()); renderRevisionInfo(info, com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create()<END_MOD>); }
<START_MOD>@org.junit.Test public void convertFromCCToReviewer() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo("Foo Bar", "foo.bar@gerritcodereview.com"); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput addInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); addInput.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRFCAddressString(acc); addInput.state = com.google.gerrit.extensions.client.ReviewerState.CC; gApi.changes().id(r.getChangeId()).addReviewer(addInput); com.google.gerrit.extensions.api.changes.AddReviewerInput modifyInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); modifyInput.reviewer = addInput.reviewer; modifyInput.state = com.google.gerrit.extensions.client.ReviewerState.REVIEWER; gApi.changes().id(r.getChangeId()).addReviewer(modifyInput); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(java.util.EnumSet.of(ListChangesOption.DETAILED_LABELS)); assertThat(info.reviewers).isEqualTo(com.google.common.collect.ImmutableMap.of(ReviewerState.REVIEWER, com.google.common.collect.ImmutableList.of(acc))); }<END_MOD>
public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(webLink.<START_MOD>getPathSetWebLink<END_MOD>(project, commit)); } return links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.BranchResource rsrc = new com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }
<START_MOD>public void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, org.eclipse.jgit.revwalk.RevCommit commit, java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers) throws com.google.gwtorm.server.OrmException { db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, change, ps, info, reviewers, java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } gitRefUpdated.fire(change.getProject(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); }<END_MOD>
public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site<START_MOD>, com.google.gerrit.pgm.init.GerritDistributionLocator distroLocator<END_MOD>) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false<START_MOD>, distroLocator<END_MOD>); }
@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("" + ((   +   = a +   = ../ + (p1.get())) + "\n") +   = master cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, "master"), "a")); assertThat(res).containsExactlyElementsIn(expected); }
<START_MOD>public <END_MOD>void setLimit(int n) { limit = n; }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException( index <START_MOD>account<END_MOD> e); } }
public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.<START_MOD>strategy.<END_MOD>CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }
static void <START_MOD>fireEvent<END_MOD>(com.google.gwtjsonrpc.client.<START_MOD>BaseRpcEvent<?><END_MOD> <START_MOD>event)<END_MOD> <START_MOD>{<END_MOD> com.google.gwtjsonrpc.client.JsonUtil.<START_MOD>globalHandlers<END_MOD>.<START_MOD>fireEvent<END_MOD>(<START_MOD>event<END_MOD>); <START_MOD>event.service = null;<END_MOD> }
@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(<START_MOD>branch, <END_MOD>com.google.gerrit.extensions.restapi.AuthException.class,   not permitted for refs/heads/test }
<START_MOD>@java.lang.Override public void onChange(com.google.gwt.event.dom.client.ChangeEvent event) { if (SubmitType.FAST_FORWARD_ONLY.equals(Project.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())))) { useContentMerge.setEnabled(false); useContentMerge.setValue(false); } else { useContentMerge.setEnabled(true); } }<END_MOD>
public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { <START_MOD>int n = change.currentPatchSetId().get(); <END_MOD>java.lang.String<START_MOD>[] refNames = new java.lang.String[n]; for (int i = n; i > 0; i--) { refNames[i]<END_MOD> = com.google.gerrit.reviewdb.client.RefNames.<START_MOD>refsEdit<END_MOD>(user.getAccountId(), change.getId()<START_MOD>, new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), i)); }<END_MOD> org.eclipse.jgit.lib.Ref<START_MOD> ref<END_MOD> = repo.getRefDatabase().<START_MOD>firstExactRef(refNames<END_MOD>); if (<START_MOD>ref == null<END_MOD>) { return com.google.common.base.Optional.absent(); } <START_MOD>try (<END_MOD>org.eclipse.jgit.<START_MOD>revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(<END_MOD>ref<START_MOD>.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return<END_MOD> com.google.common.<START_MOD>base.Optional.of(<END_MOD>new <START_MOD>com.google.gerrit.server.edit.ChangeEdit(user, change, ref,<END_MOD> commit<START_MOD>,<END_MOD> basePs)); } } }
private<START_MOD> static<END_MOD> void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }
@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = <START_MOD>newNotes<END_MOD>(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }
<START_MOD>public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> existingMembers = groups.getMembers(db, group.getId()).collect(toImmutableSet()); com.google.common.collect.ImmutableList<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = accountIds.stream().distinct().filter(existingMembers::contains).map(( accountId) -> new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId)).map(AccountGroupMember::new).collect(toImmutableList()); if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("reply") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { <START_MOD>checkAndAddReply<END_MOD>("", false); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; <START_MOD>db<END_MOD>.<START_MOD>accountExternalIds<END_MOD>().insert(com.google.<START_MOD>common<END_MOD>.<START_MOD>collect<END_MOD>.<START_MOD>ImmutableList<END_MOD>.<START_MOD>of<END_MOD>(<START_MOD>createExternalIdWithEmail<END_MOD>("foo:bar", email<START_MOD>)<END_MOD>)); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = setTopic(sdsMergeInput.<START_MOD>number<END_MOD>, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = "recursive"; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug( downstream merge for {} sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) +   am:   + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = "ours"; downstreamChangeInput.subject = ((sdsMergeInput.subject) +   skipped:   + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug( merge for {} to {} sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { <START_MOD>java.lang.String refName = c.currentPatchSetId().toRefName(); <END_MOD>org.eclipse.jgit.lib.Ref r = refs.get(<START_MOD>refName); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(<END_MOD>c<START_MOD>)); } else { java.lang.String error = ((( to index change   + (c.getId())) +   ( + refName) +   not found) com.google.gerrit.pgm.Reindex.log.warn(error); failed.update(1<END_MOD>); if (<START_MOD>verbose) { java.lang.System.out.println(error); } } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return<END_MOD> null<START_MOD>; }<END_MOD>
<START_MOD>public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getProject().getNameKey()), e); return false; } }<END_MOD>
<START_MOD><T> java.util.concurrent.Callable<T> scope(com.google.gerrit.server.util.RequestContext requestContext, java.util.concurrent.Callable<T> callable) { final com.google.gerrit.server.git.PerThreadRequestScope.Context ctx = new com.google.gerrit.server.git.PerThreadRequestScope.Context(); final java.util.concurrent.Callable<T> wrapped = context(requestContext, cleanup(callable)); return new java.util.concurrent.Callable<T>() { @java.lang.Override public T call() throws java.lang.Exception { com.google.gerrit.server.git.PerThreadRequestScope.Context old = com.google.gerrit.server.git.PerThreadRequestScope.current.get(); com.google.gerrit.server.git.PerThreadRequestScope.current.set(ctx); try { return wrapped.call(); } finally { com.google.gerrit.server.git.PerThreadRequestScope.current.set(old); } } }; }<END_MOD>
private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.<START_MOD>gerrit<END_MOD>.<START_MOD>lucene<END_MOD>.<START_MOD>LuceneChangeIndex<END_MOD>.<START_MOD>fieldsToStrings<END_MOD>(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)))); }
<START_MOD>public native final net.codemirror.lib.LineCharacter setLine(int line);<END_MOD>
<START_MOD>@java.lang.Override void onRefReplicatedToAllNodes(java.lang.String project, java.lang.String ref, int nodesCount) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("Replication of "); sb.append(project); sb.append(" completed to "); sb.append(nodesCount); sb.append(" nodes, "); writeStdOut(sb.toString()); }<END_MOD>
public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug( integration of {} change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug( to merge {} cs); if (checkSubmitRules) { logDebug( submit rules and state checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError( Conflict e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(<START_MOD>e.getMessage(),<END_MOD> e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }
<START_MOD>private java.lang.String encoding(javax.servlet.http.HttpServletRequest req) { return com.google.common.base.MoreObjects.firstNonNull(req.getCharacterEncoding(), "UTF-8"); }<END_MOD>
private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, com.google.gerrit.gpg.PublicKeyStore store, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys = store.get(sig.getKeyID()); if (!(keys.getKeyRings().hasNext())) { problems.add(( public keys found for key ID   + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); return; } org.bouncycastle.openpgp.PGPPublicKey signer = com.google.gerrit.gpg.PublicKeyStore.getSigner(keys, sig, org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (signer == null) { problems.add((( by   + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID()))) +   is not valid return; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(signer); if (!(result.isOk())) { java.lang.StringBuilder err = new java.lang.StringBuilder( public key ").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(signer)).append(": for (int i = 0; i < (result.getProblems().size()); i++) { err.append('\n').append(   } problems.add(err.toString()); } }
private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.LimitPredicate.getLimit(<START_MOD>ChangeQueryBuilder.FIELD_LIMIT, <END_MOD>p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); }
@java.lang.Override protected void formatChange() { appendText(<START_MOD>velocifyFile<END_MOD>(<START_MOD>"Abandoned.vm"<END_MOD>)); }
<START_MOD>java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.ForProject.FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }<END_MOD>
private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.Widget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.Widget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } <START_MOD>else if (widget instanceof com.google.gwt.user.client.ui.ListBox) { com.google.gwt.user.client.ui.ListBox listBox = ((com.google.gwt.user.client.ui.ListBox) (widget)); java.lang.String value = listBox.getValue(listBox.getSelectedIndex()); values.put(e2.getKey(), value); <END_MOD>} } <START_MOD>} <END_MOD>return pluginConfigValues; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, project<END_MOD>)); }
void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn( finishing pending Lucene writes e); } try { <START_MOD>try { <END_MOD>writer.getIndexWriter().<START_MOD>close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn( closing Lucene<END_MOD> writer<START_MOD> e); } try { dir.close();<END_MOD> } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn( closing Lucene directory e); } }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name(<START_MOD>"foo-account"<END_MOD>)); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ( that contains foo and the UUID of group2:   + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
<START_MOD>private static void load(org.eclipse.jgit.storage.file.FileBasedConfig cfg) { try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } }<END_MOD>
private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.<START_MOD>server.notedb.ChangeNotes<END_MOD>, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(<START_MOD>notesFactory.createAsync(<END_MOD>db<START_MOD>, project.getNameKey(), <END_MOD>request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.<START_MOD>server.notedb.ChangeNotes<END_MOD>, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.<START_MOD>server.notedb.ChangeNotes notes<END_MOD> = f.checkedGet(); if (<START_MOD>(notes.getChange())<END_MOD> != null) { replaceByChange.get(<START_MOD>notes.getChangeId<END_MOD>()).change = <START_MOD>notes.getChange(); } } }<END_MOD>
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(<START_MOD>getName(<END_MOD>result)); }
private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request<START_MOD>, javax.servlet.http.HttpServletResponse response<END_MOD>) { java.lang.String scopeRequested = request.getParameter("scope");<START_MOD> if (scopeRequested == null) { scopeRequested = getScopesKeyFromCookie(request); } if (scopeRequested != null) { javax.servlet.http.Cookie scopeCookie = new javax.servlet.http.Cookie("scope", scopeRequested); scopeCookie.setPath("/"); scopeCookie.setMaxAge(com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.SCOPE_COOKIE_NEVER_EXPIRES); response.addCookie(scopeCookie); }<END_MOD> return com.google.common.base.Objects.firstNonNull(scopeRequested, "scopes"); }
<START_MOD>private void setOurs() throws java.io.IOException { if ((baseCommit) != null) { ours = org.eclipse.jgit.notes.NoteMap.read(db.newObjectReader(), baseCommit); } else { ours = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); } java.lang.StringBuilder message = new java.lang.StringBuilder("Submitted the following changes:"); for (com.google.gerrit.server.git.CodeReviewCommit c : commits) { if (ours.contains(c)) { throw new java.lang.IllegalStateException((("Review summary note already exists for commit: " + c) + ". Merging of notes not yet supported")); } org.eclipse.jgit.lib.ObjectId id = inserter.insert(Constants.OBJ_BLOB, createNoteContent(c)); inserter.flush(); org.eclipse.jgit.revwalk.RevBlob blob = revWalk.lookupBlob(id); ours.set(c, blob); message.append(" "); message.append(c.change.getId()); } if ((baseCommit) != null) { oursCommit = createCommit(ours, author, message.toString(), baseCommit); } else { oursCommit = createCommit(ours, author, message.toString()); } }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.plugins.PluginScanner getScanner() { return this; }<END_MOD>
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(<START_MOD>com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) {<END_MOD> bind(com.google.<START_MOD>common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else {<END_MOD> install(new com.google.<START_MOD>gerrit.server.index.IndexModule.IndexExecutorModule(threads)<END_MOD>); } }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(<START_MOD>args.accounts, <END_MOD>ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( delete email e); } }
<START_MOD>public java.lang.String toFile(java.lang.String project, java.lang.String commit, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getFile()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", encode(project)); p.put("commit", encode(commit)); p.put("file", encode(file)); return (baseUrl) + (pattern.replace(p)); }<END_MOD>
<START_MOD>private void init() { if (!(intialized)) { intialized = true; if (!(initialize(Prolog.BUILTIN, "com.google.gerrit.rules.common"))) { throw new com.googlecode.prolog_cafe.lang.SystemException("Prolog initialization failed"); } } }<END_MOD>
<START_MOD>public void currentreviewers(com.google.gerrit.server.data.ChangeAttribute a, com.google.gerrit.server.change.ChangeResource rsrc, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval>> approvals) throws com.google.gwtorm.server.OrmException { a.currentReviewers = new java.util.ArrayList<com.google.gerrit.server.data.AccountAttribute>(); com.google.gerrit.reviewdb.client.PatchSet.Id psid = rsrc.getChange().currentPatchSetId(); java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> list = approvals.get(psid); if (list != null) { for (com.google.gerrit.reviewdb.client.PatchSetApproval p : list) { a.currentReviewers.add(asAccountAttribute(p.getAccountId())); } } }<END_MOD>
private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled(enabled); <START_MOD>review.setEnabled(enabled); <END_MOD>cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); }
public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(java.util.List<? extends com.google.gwtexpui.safehtml.client.FindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.<START_MOD>util.List<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement> repls = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement>(findReplaceList.size()); java.<END_MOD>lang.<START_MOD>StringBuilder pat = new java.lang.StringBuilder(); for (int i = 0; i < (findReplaceList.size()); i++) { com.google.gwtexpui.safehtml.client.FindReplace fr = findReplaceList.get(i); repls.add(new com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement(fr.find(), fr.replace())); pat.append(fr.find()); if (i != ((findReplaceList.size()) - 1)) { pat.append('|'); } } java.lang.StringBuilder result = new java.lang.StringBuilder(); com.google.gwt.regexp.shared.RegExp re = com.google.gwt.regexp.shared.RegExp.compile(pat.toString(), "g"); java.lang.<END_MOD>String <START_MOD>orig = <END_MOD>asString(); <START_MOD>int index = 0; com.google.gwt.regexp.shared.MatchResult mat; while ((mat = re.exec(orig)) != null) { java.lang.String g = mat.getGroup(0); <END_MOD>for (com.google.gwtexpui.safehtml.client.<START_MOD>SafeHtml.RegExpReplacement repl<END_MOD> : <START_MOD>repls) { if ((repl.re.exec(g)) != null) { result.append(orig.substring(index<END_MOD>, <START_MOD>mat.getIndex())); result.append(repl.re<END_MOD>.replace(<START_MOD>g, repl.repl)); index = (mat.getIndex()) + (g.length()); break; } } } result.append(orig.substring(index, orig.length()));<END_MOD> return <START_MOD>com.google.gwtexpui.safehtml.client.SafeHtml.asis(result.toString()); }<END_MOD>
<START_MOD>private java.lang.Runnable updateActiveLine(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCM(cm); return new java.lang.Runnable() { public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor("head").getLine(); int oLine = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); cm.setActiveLine(line); other.setActiveLine(oLine); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }; }<END_MOD>
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing<START_MOD>.getPublicKey()<END_MOD>, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }
@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = <START_MOD>groupCache.get(groupId); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(<END_MOD>control.<START_MOD>isOwner()); detail.setGroups(gic.create()); return detail<END_MOD>; }
protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); <START_MOD>com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> projectWatchInfos = com.google.gwt.core.client.JsArray.createArray().cast(); final com.google.gerrit.client.account.ProjectWatchInfo projectWatchInfo = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); projectWatchInfo.project<END_MOD>(projectName<START_MOD>); projectWatchInfo.filter(filterTxt.getText()); projectWatchInfos.push(projectWatchInfo); com.google.gerrit.client.account.AccountApi.updateWatchedProjects("self"<END_MOD>, <START_MOD>projectWatchInfos<END_MOD>, new com.google.<START_MOD>gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArray<com.google.<END_MOD>gerrit.client.<START_MOD>account.ProjectWatchInfo><END_MOD>>() { @java.lang.Override public void onSuccess(<START_MOD>com.google.gwt.core.client.JsArray<<END_MOD>com.google.gerrit.<START_MOD>client.account.ProjectWatchInfo> watchedProjects<END_MOD>) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""); watchesTab.insertWatch(<START_MOD>projectWatchInfo<END_MOD>); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); <START_MOD>} }); }<END_MOD>
<START_MOD>private void insertArchive() { java.lang.String id = revision.substring(0, 7); com.google.gwt.user.client.ui.Anchor archive = new com.google.gwt.user.client.ui.Anchor((id + ".tar.gz")); archive.setHref(new com.google.gerrit.client.rpc.RestApi("/changes/").id(psId.getParentKey().get()).view("revisions").id(revision).view("patch").addParameterTrue("archive").url()); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.add(archive); insertCommand("Archive", p); }<END_MOD>
<START_MOD>public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.AccountGroup group = db.accountGroups().get(groupId); assertAmGroupOwner(db, group); group.setVisibleToAll(visibleToAll); db.accountGroups().update(java.util.Collections.singleton(group)); groupCache.evict(group); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }<END_MOD>
<START_MOD>private boolean isOpen() { return com.google.gwt.user.client.ui.UIObject.isVisible(contentPanel); }<END_MOD>
public void evict(java.lang.String username) { self.remove(username); <START_MOD>accountCache.evictByUsername(username); <END_MOD>}
<START_MOD>protected com.google.gerrit.acceptance.AbstractNotificationTest.Notifications notificationsForReviewableChange(com.google.gerrit.acceptance.AbstractNotificationTest.ChangeInteraction interaction, com.google.gerrit.server.account.WatchConfig.NotifyType... watches) throws java.lang.Exception { com.google.gerrit.acceptance.AbstractNotificationTest.Participants participants = new com.google.gerrit.acceptance.AbstractNotificationTest.Participants(com.google.common.collect.ImmutableList.copyOf(watches)); java.lang.String changeId = participants.stageChange("refs/for/master").getChangeId(); sender.clear(); setApiUser(participants.owner); interaction.apply(changeId); try { return new com.google.gerrit.acceptance.AbstractNotificationTest.Notifications(sender, participants); } finally { sender.clear(); } }<END_MOD>
<START_MOD>protected java.lang.String getProjectPrefix() { return projectPrefix; }<END_MOD>
<START_MOD>public void deleteAll(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { delete(db, externalIdCache.byAccount(accountId)); }<END_MOD>
private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format( load %s with @Export( def.className, def.exportedAsName), err); } com.google.gerrit.extensions.<START_MOD>annotations.<END_MOD>Export export = clazz.getAnnotation(com.google.gerrit.extensions<START_MOD>.annotations<END_MOD>.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format( plugin %s asm incorrectly parsed %s with @Export( pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("org.apache.sshd.server.Command", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("javax.servlet.http.HttpServlet", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); } } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format( %s with @Export( not supported clazz.getName(), export.value())); } }
public long getInitialDelay() { <START_MOD>if ((initialDelay) == null) { load(); } <END_MOD>return initialDelay; }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
<START_MOD>private native final void notifyNewChanges(boolean b);<END_MOD>
public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, a.value()); } else if (type == (java.lang.Integer.class)) { f.set(section, a.value()); } else if (type == (java.lang.Long.class)) { f.set(section, a.value()); } else if (type == (java.lang.Boolean.class)) { f.set(section, a.value()); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn( during initialize: {} f.getName()); } } return section; }
<START_MOD>public final java.lang.String toFileHistory(com.google.gerrit.reviewdb.client.Branch.NameKey branch, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().getFileHistory()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put("project", encode(branch.getParentKey().get())); p.put("branch", encode(branch.get())); p.put("file", encode(file)); return (url()) + (pattern.replace(p)); }<END_MOD>
static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }
<START_MOD>boolean isVisibleA() { return aVisible; }<END_MOD>
public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.<START_MOD>UUID<END_MOD>> getOwners() { return owners; }
<START_MOD>public long elapsed() { return elapsed; }<END_MOD>
static void call(final com.google.gwt.user.client.ui.Button b, final <START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey project, final <END_MOD>java.lang.String <START_MOD>branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(<END_MOD>project, branch, id, enabled) { <START_MOD>@java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), <END_MOD>project.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, project<END_MOD>)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }
<START_MOD>public java.lang.Boolean getCookieSecure() { return cookieSecure; }<END_MOD>
void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(<START_MOD>); this.canEdit = (info.hasActions()) && (info.actions().containsKey("topic")<END_MOD>); this.currentAssignee = ((info.assignee()) != null) ? info.assignee().name() : ""; assigneeLink.setText(currentAssignee); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(<START_MOD>canEdit<END_MOD>); }
public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).<START_MOD>formatCommentsAsList<END_MOD>(listComments(rsrc)); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.change.HasDraftByPredicate> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(new com.google.gerrit.server.query.change.HasDraftByPredicate(id)); } return com.google.gerrit.server.query.Predicate.or(p); }
<START_MOD>public void commit(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String commitMessage) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((toDelete.isEmpty()) && (toAdd.isEmpty())) { return; } db.accountExternalIds().delete(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalIdsUpdate.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId extId : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, extId); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(ins, noteMap, extId); } com.google.gerrit.server.account.ExternalIdsUpdate.commit(repo, rw, ins, rev, noteMap, commitMessage, serverIdent, serverIdent); } toAdd.clear(); toDelete.clear(); }<END_MOD>
private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy<START_MOD>), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(autoBase<END_MOD>), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }
@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.<START_MOD>getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.<END_MOD>getControl()<START_MOD>, input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(<END_MOD>change); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error( cannot use --list with --all or --cache } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error( cannot combine --all and --cache } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains("all"))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { <START_MOD>postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH, caches)); } } catch (com.google.gerrit.extensions.restapi.RestApiException e<END_MOD>) { throw <START_MOD>die(<END_MOD>e.getMessage()); } }
private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); <START_MOD>if (com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(ctx.getChange()).writeToReviewDb()) { <END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteDraftChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); }<START_MOD> }<END_MOD>
private com.google.gerrit.server.<START_MOD>IdentifiedUser onBehalfOf(com.google.gerrit.server.<END_MOD>change.RevisionResource <START_MOD>rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions(); perm.check(ChangePermission.SUBMIT); perm.check(ChangePermission.SUBMIT_AS); com.google.gerrit.server.CurrentUser caller = rsrc.getUser(); com.google.gerrit.server.IdentifiedUser submitter = accounts.parseOnBehalfOf(caller, in.<END_MOD>onBehalfOf<START_MOD>); try { perm.user(submitter).check(ChangePermission.READ); } catch (<END_MOD>com.google.gerrit.extensions.restapi.AuthException<START_MOD> e<END_MOD>) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format( account %s cannot see <START_MOD>change submitter<END_MOD>.getAccountId())); } return <START_MOD>submitter<END_MOD>; }
private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(<START_MOD>getName(<END_MOD>result)); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }
<START_MOD>public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.Project p : projects) { buf.append(p.toSubmodules()); buf.append("\n"); } return buf.toString(); }<END_MOD>
private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } org.bouncycastle.openpgp.PGPPublicKeyRing <START_MOD>revokerKeyRing<END_MOD> = store.get(revoker.getFingerprint()); if (<START_MOD>revokerKeyRing<END_MOD> == null) <START_MOD>{ continue; } org.bouncycastle.openpgp.PGPPublicKey rk = revokerKeyRing<END_MOD>.getPublicKey()<START_MOD>; if ((rk<END_MOD>.getAlgorithm()) != (revoker.getAlgorithm())) { continue; } <START_MOD>if (!(checkBasic(rk, revocation.getCreationTime()).isOk())) { continue; } <END_MOD>revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), <START_MOD>rk<END_MOD>); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }
@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if ("create_account".equals(req.getParameter("action"))) { res = create(); } else if ((req.getParameter("user_name")) != null) { res = byUserName(req.getParameter("user_name")); } else if ((req.getParameter("preferred_email")) != null) { res = byPreferredEmail(req.getParameter("preferred_email")); } else if ((req.getParameter("account_id")) != null) { res = byAccountId(req.getParameter("account_id")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); <START_MOD>try (<END_MOD>java.io.OutputStream out = rsp.getOutputStream()<START_MOD>)<END_MOD> { out.write(raw); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append("/"); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); final java.io.Writer out = rsp.getWriter(); out.write("<html>"); out.write("<body>"); out.write( Not Found</h1> out.write("</body>"); out.write("</html>"); out.close(); } }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(change.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchList patchList = getPatchList(); for (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append( ").append(p.getNewName()).append(" } detail.append(java.text.MessageFormat.format(("" + ((( files|1 file|1<{0} files} changed,   +   insertions|1 insertion|1<{1} insertions}(+),   +   deletions|1 deletion|1<{2} deletions}(-) + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn( format change detail err); return ""; } }
private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), cd); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case REMOVE_REVIEWER : return getRefControl().canRemoveReviewer(); case RESTORE : return canRestore(db()); case SUBMIT : return <START_MOD>getRefControl().<END_MOD>canSubmit(<START_MOD>isOwner()); case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()<END_MOD>); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException("unavailable", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm +   unsupported }
<START_MOD>@java.lang.Override public java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> robotComments() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listChangeRobotComments.apply(change); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot get comments", e); } }<END_MOD>
@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "a.txt", "content"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/for/master"); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "b.txt", "anotherContent"); r = push.to("refs/for/master"); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, "refs/for/master", false), "refs/for/master",   <START_MOD>new changes<END_MOD> }
private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey();<START_MOD> if (name.startsWith("imports/")) { continue; } if (name.startsWith("cache-automerge/")) { continue; }<END_MOD> if (name.startsWith("changes/")) { continue; } if ((name.startsWith("users/")) && (name.contains("/edit"))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + (e.getKey()); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format( to update %s, RefUpdate.Result = %s targetRef, result)); } } }
<START_MOD>@org.junit.Test public void testReplacementStringOfFixReplacement() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().singleReplacement().replacement().isEqualTo(fixReplacementInfo.replacement); }<END_MOD>
public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> cb) { try { <START_MOD>switch (authConfig.getAuthType()) { case OPENID : case HTTP : case HTTP_LDAP : case CLIENT_SSL_CERT_LDAP : case LDAP : case LDAP_BIND : <END_MOD>final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); cb.onSuccess(VoidResult.INSTANCE); <START_MOD>break; case DEVELOPMENT_BECOME_ANY_ACCOUNT : registerMail(address, cb); break; default : log.error(( loginType:   + (authConfig.getAuthType())), new com.google.inject.ProvisionException(( loginType:   + (authConfig.getAuthType())))); throw new com.google.inject.ProvisionException(( loginType:   + (authConfig.getAuthType()))); } <END_MOD>} catch (com.google.gerrit.server.mail.EmailException e) { log.error(( send email verification message to   + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error(( send email verification message to   + address), e); cb.onFailure(e); } }
<START_MOD>public com.google.gerrit.server.change.RevisionResource getRevision() { return rev; }<END_MOD>
public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { <START_MOD>java.lang.String name = section.getName(); if (sectionsWithUnknownPermissions.contains(name)) { accessSections.remove(name); } else { <END_MOD>com.google.gerrit.common.data.AccessSection a = accessSections.get(<START_MOD>name<END_MOD>); a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } }
<START_MOD>@java.lang.Override public void start(org.apache.sshd.server.Environment env) throws java.io.IOException { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { parseCommandLine(); if ((limit) <= 0) throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, "fatal: --limit must be > 0"); query(); } }); }<END_MOD>
private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, <START_MOD>toStringFunc<END_MOD>), p); return r <   ? -(r + 1) : r; }
private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD>.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD>.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { <START_MOD>com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if (!(allowDraft)) { <END_MOD>try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError(( looking up patch set   + (control.getChange().currentPatchSetId()))); } <START_MOD>if (((c.getStatus()) == (<END_MOD>Change.Status.DRAFT)) || (patchSet.isDraft())) { return cannotSubmitDraft();<START_MOD> }<END_MOD> } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(( rule '%s' for change %s of %s has   +   solution. getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
<START_MOD>@java.lang.Override public T get(I input, com.google.gerrit.server.index.FieldDef.FillArgs args) throws com.google.gwtorm.server.OrmException { return getter.get(input, args); }<END_MOD>
@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.<START_MOD>cherryPicks<END_MOD>("na")); getTab().setError(err.getMessage()); }
<START_MOD>private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.GerritMasterLifecycle()); } return cfgInjector.createChildInjector(modules); }<END_MOD>
private static com.google.gerrit.gpg.<START_MOD>PushCertificateChecker.Result<END_MOD> combine(com.google.gerrit.gpg.<START_MOD>PushCertificateChecker.Result<END_MOD> sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; <START_MOD>org.bouncycastle.openpgp.PGPPublicKey key; <END_MOD>if (sigResult != null) { <START_MOD>key = sigResult.getPublicKey(); com.google.gerrit.gpg.CheckResult cr = sigResult.getCheckResult(); <END_MOD>problems.addAll(<START_MOD>cr<END_MOD>.getProblems()); if ((<START_MOD>cr<END_MOD>.getStatus()) == (BAD)) { status = BAD; } else if ((<START_MOD>cr<END_MOD>.getStatus()) == (TRUSTED)) { status = TRUSTED; } } <START_MOD>else { key = null; } <END_MOD>return<START_MOD> new com.google.gerrit.gpg.PushCertificateChecker.Result(key,<END_MOD> com.google.gerrit.gpg.CheckResult.create(status, problems)<START_MOD>); }<END_MOD>
protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(<START_MOD>changeData.getChange()<END_MOD>, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException( patchSet specified }
<START_MOD>public void setAccountsToNotify(com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify) { this.accountsToNotify = (accountsToNotify != null) ? com.google.common.collect.ImmutableListMultimap.copyOf(accountsToNotify) : null; }<END_MOD>
@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment =   Quote line 1 Quote line 2 > Quote line 3 java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); <START_MOD>assertQuoteBlock<END_MOD>(result, 0, <START_MOD>1); assertBlock(result.get(0).blocks, 0, <END_MOD>BlockType.<START_MOD>PARAGRAPH<END_MOD>,   line 1 line 2 line 3 }
<START_MOD>public java.lang.String replacePathSeparator(java.lang.String newSeparator) { if ('/' != (pathSeparator)) { return newSeparator.replace('/', pathSeparator); } return newSeparator; }<END_MOD>
<START_MOD>public abstract java.lang.String shortReason();<END_MOD>
<START_MOD>private com.google.common.base.Optional<com.google.gerrit.server.patch.FilePathList> getFilePathList(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((filePathLists) == null) { filePathLists = new java.util.HashMap(); } com.google.common.base.Optional<com.google.gerrit.server.patch.FilePathList> r = filePathLists.get(psId); if (r == null) { if (!(lazyLoad)) { return com.google.common.base.Optional.absent(); } try { r = com.google.common.base.Optional.of(patchListCache.getFilePaths(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = com.google.common.base.Optional.absent(); } filePathLists.put(psId, r); } return r; }<END_MOD>
<START_MOD>@java.lang.Override public void onLoad(com.google.gerrit.plugin.client.screen.Screen screen) { screen.setPageTitle("Reviewers"); screen.show(new com.googlesource.gerrit.plugins.reviewers.client.AddReviewersScreen(screen.getToken())); }<END_MOD>
<START_MOD>@org.junit.Test public void doesPublishWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }<END_MOD>
private com.google.gwt.user.client.ui.Widget createSearchLink(java.lang.String projectName) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.<START_MOD>admin.ProjectListScreen.ProjectSearchLink l<END_MOD> = new com.google.gerrit.client.<START_MOD>admin.ProjectListScreen.ProjectSearchLink(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName),  <END_MOD>   com.google.gerrit.common.PageLinks.toChangeQuery(("project:" + projectName))); <START_MOD>l<END_MOD>.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(<START_MOD>l<END_MOD>.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(<START_MOD>l<END_MOD>.getElement())); return <START_MOD>l<END_MOD>; }
@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = "newProject"; com.google.gerrit.<START_MOD>extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description =   description in.submitType = com.google.gerrit.extensions.common.ProjectSubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(("/projects/" + newProjectName), in); com.google.gerrit.<END_MOD>server.project.<START_MOD>ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(<END_MOD>new com.google.gerrit.<START_MOD>reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(<END_MOD>in.description<START_MOD>, project.getDescription()); assertEquals(<END_MOD>in.submitType<START_MOD>, project.getSubmitType()); assertEquals(<END_MOD>in.useContributorAgreements<START_MOD>, project.getUseContributorAgreements()); assertEquals(<END_MOD>in.useSignedOffBy<START_MOD>, project.getUseSignedOffBy()); assertEquals(<END_MOD>in.useContentMerge<START_MOD>, project.getUseContentMerge()); assertEquals(<END_MOD>in.requireChangeId, project.getRequireChangeID()); }
@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.<START_MOD>ScreenLoadCallback<END_MOD><java.util.List<com.google.gerrit.client.reviewdb.Project>>(<START_MOD>this<END_MOD>) { <START_MOD>@java.lang.Override protected<END_MOD> void <START_MOD>prepare<END_MOD>(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { projects.display(result); projects.finishDisplay(true); } }); }
<START_MOD>@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { <START_MOD>com.google.gerrit.common.data.ApprovalTypes types = com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes(); <END_MOD>for (com.google.gerrit.common.data.ApprovalType <START_MOD>type<END_MOD> : <START_MOD>types<END_MOD>.getApprovalTypes()<START_MOD>) { java.lang.String permission = com.google.gerrit.common.data.AccessSection.Permission.forLabel(type.getCategory().getLabelName()); com.google.gerrit.common.data.AccessSection.Range range = r.getRange(permission);<END_MOD> if (<START_MOD>(range != null) && (!(range.isEmpty()<END_MOD>))) { initApprovalType(r, body, <START_MOD>type, range); } } for (com.google.gerrit.common.data.AccessSection.Range range : r.getLabels()) { if ((!(range.isEmpty())) && ((types.byLabel(range.getLabel())) == null)) { } } }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.client.admin.PermissionEditor create(int index) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor(); permissionContainer.insert(subEditor, index); return subEditor; }<END_MOD>
<START_MOD>public static com.google.gerrit.client.account.Preferences create(java.util.List<com.google.gerrit.client.extensions.TopMenuItem> myMenus) { com.google.gerrit.client.account.Preferences p = createObject().cast(); p.setMyMenus(myMenus); return p; }<END_MOD>
<START_MOD>@org.junit.Test public void parsePatchSetGroups() throws java.lang.Exception { assertParseSucceeds(("Update change\n" + (((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n") + "Groups: a,b,c\n"))); assertParseFails(("Update change\n" + ((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Groups: a,b,c\n"))); assertParseFails(("Update change\n" + ((((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n") + "Groups: a,b,c\n") + "Groups: d,e,f\n"))); }<END_MOD>
<START_MOD>private static void invalidConfig(java.lang.String noteId, java.lang.String message) throws org.eclipse.jgit.errors.ConfigInvalidException { throw new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, message)); }<END_MOD>
@java.lang.Override<START_MOD> @java.lang.Deprecated<END_MOD> public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); }
<START_MOD>public boolean shouldNotifyOnChangeMerged() { return notifyOnChangeMerged; }<END_MOD>
<START_MOD>@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(revision.getParentKey(), java.lang.String.valueOf(revision.get()))); }<END_MOD>
<START_MOD>private boolean isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage msg) { try { com.google.gerrit.reviewdb.client.ChangeMessage last = com.google.common.collect.Iterables.getLast(db.changeMessages().byChange(msg.getPatchSetId().getParentKey()), null); if (last != null) { long lastMs = last.getWrittenOn().getTime(); long msgMs = msg.getWrittenOn().getTime(); if ((((last.getAuthor()) == null) && (com.google.common.base.Objects.equal(last.getMessage(), msg.getMessage()))) && ((msgMs - lastMs) > (com.google.gerrit.server.git.MergeOp.DUPLICATE_MESSAGE_INTERVAL))) { return true; } } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.git.MergeOp.log.warn("Cannot check previous merge failure message", err); } return false; }<END_MOD>
<START_MOD>@org.junit.Test public void testAsText() throws java.lang.Exception { java.lang.String text = ((com.google.gerrit.server.git.DestinationListTest.HEADER_PROPER) + "#\n") + (com.google.gerrit.server.git.DestinationListTest.F_PROPER); com.google.gerrit.server.git.DestinationList dl = new com.google.gerrit.server.git.DestinationList(); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL, com.google.gerrit.server.git.DestinationListTest.F_SIMPLE, null); java.lang.String asText = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL); assertThat(text).isEqualTo(asText); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL2, asText, null); java.lang.String asText2 = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL2); assertThat(text).isEqualTo(asText2); }<END_MOD>
@java.lang.Override public <START_MOD>boolean updateChange(<END_MOD>com.google.gerrit.<START_MOD>server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.<END_MOD>reviewdb.client.PatchSet <START_MOD>ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId);<END_MOD> java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return <START_MOD>false<END_MOD>; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return <START_MOD>false; } psUtil<END_MOD>.setGroups(<START_MOD>ps, ctx.getUpdate(psId), <END_MOD>groups); <START_MOD>db.patchSets().update(java.util.Collections.singleton(ps)); <END_MOD>return <START_MOD>true; }<END_MOD>
<START_MOD>@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences(null, 503, "513"); }<END_MOD>
@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { return new com.google.gerrit.server.query.change.IndexRewriteTest.Source(); }
<START_MOD>private void sendMarkdownAsHtml(java.util.jar.JarFile jar, java.util.jar.JarEntry entry, java.lang.String pluginName, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { byte[] rawmd = com.google.gerrit.httpd.plugins.HttpPluginServlet.readWholeEntry(jar, entry); java.lang.String encoding = null; java.util.jar.Attributes atts = entry.getAttributes(); if (atts != null) { encoding = com.google.common.base.Strings.emptyToNull(atts.getValue("Character-Encoding")); } java.lang.String txtmd = org.eclipse.jgit.util.RawParseUtils.decode(java.nio.charset.Charset.forName((encoding != null ? encoding : "UTF-8")), rawmd); long time = entry.getTime(); if (0 < time) { res.setDateHeader("Last-Modified", time); } sendMarkdownAsHtml(txtmd, pluginName, res); }<END_MOD>
<START_MOD>@java.lang.Override public void onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener.Event ev) { try { ch.doChangeAbandonedHook(getChange(ev.getChange()), getAccount(ev.getAbandoner()), getPatchSet(ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { } }<END_MOD>
<START_MOD>@org.junit.Test public void sendNotificationAfterPersistingComments() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); b.from(user.emailAddress); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(admin); }<END_MOD>
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru.getName()<START_MOD>, ru.getOldObjectId().name(), ru.getNewObjectId().name()<END_MOD>); return revision; default : throw new java.io.IOException(((((( update   + (ru.getName())) +   in   + (db.getDirectory())) +     + (ru.getResult()))); } }
@java.lang.Override public void onShowView() { super.onShowView(); commit.<START_MOD>onShowView<END_MOD>(); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith("/c/"))) { scrollToPath(prior.substring(3)); } } startPoller(); }
private boolean isEmpty() { return ((((((<START_MOD>((subject) == null) && (<END_MOD>approvals.isEmpty(<START_MOD>)<END_MOD>)) && (reviewers.isEmpty())) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && ((status) == null)) && ((submitRecords) == null)) && ((changeMessage) == null); }
public com.google.gerrit.common.data.LabelTypes getLabelTypes() { return <START_MOD>getRefControl<END_MOD>().getLabelTypes(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException( does not allow editing name } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( <START_MOD>u<END_MOD>) -> <START_MOD>u.update()<END_MOD>.setFullName(<START_MOD>com.google.common.base.Strings.nullToEmpty(<END_MOD>newName))<START_MOD>)<END_MOD>; if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException( not found } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
@java.lang.Override<START_MOD> @java.lang.Deprecated<END_MOD> public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; }
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } RpcStatus.INSTANCE = new com.google.gerrit.client.RpcStatus(); com.google.gerrit.client.config.ConfigServerApi.serverInfo(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.config.ServerInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.ServerInfo info) { com.google.gerrit.client.Gerrit.myServerInfo = info; onModuleLoad2(result); } }); }
public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())),   set RevId for patch set %s on comment %s ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }
<START_MOD>public com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> resolveAccounts(@com.google.gerrit.common.Nullable java.util.Map<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> notifyDetails) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (com.google.gerrit.server.change.NotifyUtil.isNullOrEmpty(notifyDetails)) { return null; } com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> m = null; for (java.util.Map.Entry<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> e : notifyDetails.entrySet()) { java.util.List<java.lang.String> accounts = e.getValue().accounts; if (accounts != null) { if (m == null) { m = com.google.common.collect.ArrayListMultimap.create(); } m.putAll(e.getKey(), find(dbProvider.get(), accounts)); } } return m; }<END_MOD>
<START_MOD>public com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) { checkState(((keys) != null), "SSH keys not loaded yet"); int seq = (keys.isEmpty()) ? 1 : (keys.lastKey()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey key = new com.google.gerrit.reviewdb.client.AccountSshKey(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq), pub); keys.put(seq, com.google.common.base.Optional.of(key)); return key; }<END_MOD>
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } voteDeleted.fire(change, ps, newApprovals, oldApprovals, input.notify, changeMessage.getMessage(), ctx.getAccount(), ctx.getWhen()); }
void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { <START_MOD>err.printStackTrace(); <END_MOD>com.google.gwt.core.client.GWT.log(( parsing history token:   + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }
public com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListKey.Algorithm getAlgorithm() { return algorithm; }
<START_MOD>@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return (com.google.gerrit.server.git.MergeUtil.canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge)); }<END_MOD>
<START_MOD>@org.junit.Before public void setup() throws org.eclipse.jgit.errors.ConfigInvalidException { config = new org.eclipse.jgit.lib.BlobBasedConfig(null, new byte[0]); config.setString("database", null, "hostname", "my.host"); hana = new com.google.gerrit.server.schema.HANA(config); }<END_MOD>
<START_MOD>public com.google.gerrit.server.notedb.BatchMetaDataUpdate openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate bru) throws java.io.IOException { if (migration.write()) { load(); com.google.gerrit.server.git.MetaDataUpdate md = updateFactory.create(getProjectName(), getUser()); md.setAllowEmpty(true); md.setBatch(bru); return super.openUpdate(md); } return new com.google.gerrit.server.notedb.BatchMetaDataUpdate() { @java.lang.Override public void write(org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public void write(com.google.gerrit.server.git.VersionedMetaData config, org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) { return null; } @java.lang.Override public void removeRef(java.lang.String refName) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit() { return null; } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId revision) { return null; } @java.lang.Override public void close() { } }; }<END_MOD>
@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1)); src.writeTo(e); e.flush(); <START_MOD>e.close(); <END_MOD>}
@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD> p = com.google.gerrit.client.Gerrit.<START_MOD>getDiffPreferences<END_MOD>(); result.copyTo(p); com.google.gerrit.client.Gerrit.<START_MOD>setDiffPreferences<END_MOD>(p); }
<START_MOD>static com.google.gerrit.acceptance.GerritServer start(final com.google.gerrit.acceptance.GerritSite site) throws java.lang.Exception { final java.util.concurrent.CyclicBarrier serverStarted = new java.util.concurrent.CyclicBarrier(2); final com.google.gerrit.pgm.Daemon daemon = new com.google.gerrit.pgm.Daemon(new java.lang.Runnable() { public void run() { try { serverStarted.await(); } catch (java.lang.InterruptedException e) { throw new java.lang.RuntimeException(e); } catch (java.util.concurrent.BrokenBarrierException e) { throw new java.lang.RuntimeException(e); } } }); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); daemonService.submit(new java.util.concurrent.Callable<java.lang.Void>() { public java.lang.Void call() throws java.lang.Exception { daemon.main(new java.lang.String[]{ "-d", site.getPath(), "--headless" }); return null; } }); serverStarted.await(); com.google.inject.Injector i = com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon); return i.getInstance(com.google.gerrit.acceptance.GerritServer.Factory.class).create(daemon, daemonService); }<END_MOD>
boolean wouldPushProject(com.google.gerrit.reviewdb.client.Project.NameKey project) {<START_MOD> try { com.google.gerrit.server.project.ProjectControl pc = projectControlFactory.controlFor(project); if (!(pc.isVisible())) { return false; } } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.replication.Destination.log.warn(java.lang.String.format( replicating, project '%s' does not exist! project)); }<END_MOD> if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }
private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> <START_MOD>readKeysToAdd<END_MOD>(com.google.gerrit.server.account.PostGpgKeys.Input input<START_MOD>, java.util.Set<com.google.gerrit.server.git.gpg.Fingerprint> toRemove<END_MOD>) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( exactly one PUBLIC KEY BLOCK } <START_MOD>org.bouncycastle.openpgp.PGPPublicKeyRing keyRing = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0))); if (toRemove.contains(new com.google.gerrit.server.git.gpg.Fingerprint(keyRing.getPublicKey().getFingerprint()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(( both add and remove key:   + (keyToString(keyRing.getPublicKey())))); } <END_MOD>keyRings.add(<START_MOD>keyRing<END_MOD>); } } return keyRings; }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.TopLevelResource> list() { return null; }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); return edit.isPresent() ? edit.get().getEditCommit().getFullMessage() : changeUtil.getMessage(rsrc.getChange()); }<END_MOD>
<START_MOD>@org.junit.Test public void pushAccountConfigToUserBranchIsRejectedIfPreferredEmailIsInvalid() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id)) + ":userRef")); allUsersRepo.reset("userRef"); java.lang.String noEmail = "no.email"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, "Update account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(RefNames.REFS_USERS_SELF); r.assertErrorStatus("invalid account configuration"); r.assertMessage(java.lang.String.format("invalid preferred email '%s' for account '%s'", noEmail, admin.id)); r.assertMessage(java.lang.String.format("account '%s' has no external ID for its preferred email '%s'", admin.id, noEmail)); accountIndexedCounter.assertNoReindex(); }<END_MOD>
@com.google.common.annotations.VisibleForTesting public void start() { sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }
public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); <START_MOD>if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible<END_MOD>(p.<START_MOD>isShowSiteHeader()); }<END_MOD> if ((com.google.gerrit.client.Gerrit.<START_MOD>siteFooter<END_MOD>) != null) { com.google.gerrit.client.Gerrit.<START_MOD>siteFooter<END_MOD>.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } }
<START_MOD>private java.lang.String safeFileName(java.lang.String fileName, final java.lang.String suffix) { final int slash = fileName.lastIndexOf('/'); if (slash >= 0) { fileName = fileName.substring((slash + 1)); } final java.lang.StringBuilder r = new java.lang.StringBuilder(fileName.length()); for (int i = 0; i < (fileName.length()); i++) { final char c = fileName.charAt(i); switch (c) { case ' ' : case '_' : case '-' : case '.' : case '@' : r.append(c); continue; } if (('0' <= c) && (c <= '9')) { r.append(c); continue; } if (('A' <= c) && (c <= 'Z')) { r.append(c); continue; } if (('a' <= c) && (c <= 'z')) { r.append(c); continue; } } fileName = r.toString(); final int dot = fileName.lastIndexOf('.'); if (dot < 0) { return (fileName + "_") + suffix; } else if (dot == 0) { return (fileName + "_") + suffix; } else { return (((fileName.substring(0, dot)) + "_") + suffix) + (fileName.substring(dot)); } }<END_MOD>
<START_MOD>private void createHAReplicaSite() throws java.lang.Exception { if (ui.yesno(true, "Create a local HA replica site")) { if ((sharedDir) == null) { ui.message(((SHARED_DIRECTORY_KEY) + " not set. Cannot setup HA replica")); return; } java.lang.String replicaPath = ui.readString("ha/1", "Location of the HA replica"); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message("%s already exists, exiting", replica); return; } new com.ericsson.gerrit.plugins.highavailability.SetupLocalHAReplica(pluginName, site, flags, sharedDir, new com.google.gerrit.server.config.SitePaths(replica)).run(); } }<END_MOD>
<START_MOD>@java.lang.Override protected void configure() { install(new com.google.gerrit.server.schema.SchemaVersion.Module()); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(new java.io.File(".")); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("gerrit", null, "basePath", "git"); bind(org.eclipse.jgit.lib.Config.class).annotatedWith(com.google.gerrit.server.config.GerritServerConfig.class).toInstance(cfg); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); }<END_MOD>
@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; }
<START_MOD>@com.google.gerrit.client.rpc.SignInRequired void myApprovals(com.google.gerrit.client.reviewdb.Change.Id id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.ApprovalDetail> callback);<END_MOD>
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { emailReviewers(ctx.getProject(), currChange, del, changeMessage); try { hooks.doReviewerDeletedHook(currChange, reviewer, currPs, changeMessage.getMessage(), newApprovals, oldApprovals, dbProvider.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.DeleteReviewer.log.warn( delivery failed e); } }
protected void bccStarredBy() { if (!(<START_MOD>ReviewNotification<END_MOD>.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn( BCC users that starred updated change err); } }
private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = shortestExample(pattern); } else if (pattern.endsWith("/*")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, <START_MOD>this.message<END_MOD>); return; } } chain.doFilter(request, response); }
<START_MOD>public int getStartCh() { return startCh; }<END_MOD>
@java.lang.Override public <START_MOD>com.google.gerrit.extensions.api.changes.RevisionApi<END_MOD> review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in)<START_MOD>; return this<END_MOD>; } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException( post review e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException( post review e); } }
<START_MOD>private org.eclipse.jgit.patch.FileHeader toFileHeader(com.google.gerrit.server.patch.PatchListKey key, final org.eclipse.jgit.diff.DiffFormatter diffFormatter, final org.eclipse.jgit.diff.DiffEntry diffEntry) throws java.io.IOException { java.util.concurrent.Future<org.eclipse.jgit.patch.FileHeader> result = diffExecutor.submit(new java.util.concurrent.Callable<org.eclipse.jgit.patch.FileHeader>() { @java.lang.Override public org.eclipse.jgit.patch.FileHeader call() throws java.io.IOException { return diffFormatter.toFileHeader(diffEntry); } }); org.eclipse.jgit.patch.FileHeader fileHeader; try { fileHeader = result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.PatchListLoader.log.warn(((((((((((((timeoutMillis) + " ms timeout reached for Diff loader") + " in project ") + (key.projectKey.get())) + " on commit ") + (key.getNewId())) + " on path ") + (diffEntry.getNewPath())) + " comparing ") + (diffEntry.getOldId())) + "..") + (diffEntry.getNewId()))); result.cancel(true); return toFileHeaderWithoutMyersDiff(diffFormatter, diffEntry); } catch (java.util.concurrent.ExecutionException e) { java.lang.Throwable cause = e.getCause(); if (cause instanceof java.io.IOException) { throw ((java.io.IOException) (cause)); } else { throw new java.io.IOException(e.getMessage(), cause); } } return fileHeader; }<END_MOD>
<START_MOD>java.lang.String unwatchedProjectDescription();<END_MOD>
<START_MOD>public static int daemonStart(final java.lang.String[] argv) throws java.lang.Exception { final java.lang.ClassLoader cl = com.google.gerrit.launcher.GerritLauncher.libClassLoader(false); java.lang.Thread.currentThread().setContextClassLoader(cl); java.lang.String[] daemonArgv = new java.lang.String[(argv.length) + 2]; daemonArgv[0] = "daemon"; daemonArgv[1] = "--start-only"; for (int i = 0; i < (argv.length); i++) { daemonArgv[(i + 2)] = argv[i]; } return com.google.gerrit.launcher.GerritLauncher.invokeProgram(cl, daemonArgv); }<END_MOD>
<START_MOD>private org.eclipse.jgit.lib.PersonIdent toCommitterIdent(final com.google.gerrit.reviewdb.client.PatchSetApproval audit) { if (audit != null) { return identifiedUserFactory.create(audit.getAccountId()).newCommitterIdent(audit.getGranted(), myIdent.getTimeZone()); } return myIdent; }<END_MOD>
<START_MOD>@org.junit.Test public void testDefaultSubmitTypeForStarFilter() { configureDefaultSubmitType("*", SubmitType.CHERRY_PICK); assertEquals(SubmitType.CHERRY_PICK, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); configureDefaultSubmitType("*", SubmitType.FAST_FORWARD_ONLY); assertEquals(SubmitType.FAST_FORWARD_ONLY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); configureDefaultSubmitType("*", SubmitType.REBASE_IF_NECESSARY); assertEquals(SubmitType.REBASE_IF_NECESSARY, repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))); }<END_MOD>
private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); <START_MOD>newPatchSet.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); <END_MOD>if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }
<START_MOD>@java.lang.Override protected<END_MOD> com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChange() throws java.lang.Exception { return stageChange(<START_MOD>() -> super.<END_MOD>stageReviewableWipChange<START_MOD>()<END_MOD>); }
<START_MOD>void export(com.google.gerrit.extensions.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException;<END_MOD>
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error( fire event e); } }
public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( one of m/r } if (<START_MOD>(ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (<END_MOD>owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }
<START_MOD>public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setLabel(@com.google.gerrit.common.Nullable java.lang.String label);<END_MOD>
void load(<START_MOD>) throws java.io.IOException { <END_MOD>com.google.gerrit.<START_MOD>reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug( .gitmodules of {} for project {} branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.<END_MOD>server.project.<START_MOD>NoSuchProjectException e) { throw new<END_MOD> java.io.IOException<START_MOD>(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(( open branch   + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo,<END_MOD> com.google.gerrit.<START_MOD>server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(( not read .gitmodule file of super project:   + (<END_MOD>branch.getParentKey()<START_MOD>)),<END_MOD> e)<START_MOD>; } }<END_MOD>
<START_MOD>private com.google.gerrit.server.config.GetServerInfo.NoteDbInfo getNoteDbInfo(org.eclipse.jgit.lib.Config cfg) { com.google.gerrit.server.config.GetServerInfo.NoteDbInfo info = new com.google.gerrit.server.config.GetServerInfo.NoteDbInfo(); info.tables = new java.util.HashMap<>(); for (java.lang.String t : cfg.getSubsections("noteDb")) { com.google.gerrit.server.config.GetServerInfo.NoteDbTableInfo tableInfo = new com.google.gerrit.server.config.GetServerInfo.NoteDbTableInfo(); tableInfo.read = cfg.getBoolean("notedb", t, "read", false); tableInfo.write = cfg.getBoolean("notedb", t, "write", false); info.tables.put(t, tableInfo); } return info; }<END_MOD>
<START_MOD>@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = input.reviewedBy(); if (reviewedBy.isEmpty()) { return com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.index.NOT_REVIEWED); } List<java.lang.String> result = new com.google.gerrit.server.index.ArrayList<>(reviewedBy.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : reviewedBy) { result.add(java.lang.Integer.toString(id.get())); } return result; }<END_MOD>
@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(<START_MOD>), Project.NameKey.asStringOrNull(projectKey<END_MOD>), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId<START_MOD>, Project.NameKey.asStringOrNull(projectKey)<END_MOD>).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }
<START_MOD>@java.lang.Override @javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return null; }<END_MOD>
<START_MOD>public void setChangeId(java.lang.String changeId) { this.changeId = changeId; }<END_MOD>
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.<START_MOD>AuthException, com.google.gerrit.extensions.restapi.<END_MOD>BadRequestException<START_MOD>, com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.server.CurrentUser user = self.get();<END_MOD> if (<START_MOD>user instanceof com.google.gerrit.server.AnonymousUser) { throw new com.google.gerrit.extensions.restapi.AuthException( required } else if (<END_MOD>!(<START_MOD>user.isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } if ((input == null) || ((input.operation) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must be specified } switch (input.operation) { case LIST : if (!(user.getCapabilities().canViewCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to view caches } return listCaches.get().getCaches().keySet(); case FLUSH_ALL : if (!(user.getCapabilities().canFlushCaches())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to flush caches } for (java.util.Map.Entry<java.lang.String, com.google.inject.Provider<com.google.common.cache.Cache<?, ?>>> e : listCaches.get().getCaches().entrySet()) { if (FlushCache.WEB_SESSIONS.equals(e.getKey())) { continue; } flushCache.get().apply(new <END_MOD>com.google.gerrit.server.config.<START_MOD>CacheResource(e.getKey(), e.getValue()), new com.google.gerrit.server.config.FlushCache.Input()); } return com.google.gerrit.extensions.restapi.Response.ok("ok"); default :<END_MOD> throw new com.google.gerrit.extensions.restapi.BadRequestException(( operation:   + (input.operation))); } <START_MOD>}<END_MOD>
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { <START_MOD>com.google.gerrit.reviewdb.client.Change.Id cid = getChangeId(); <END_MOD>try { com.google.gerrit.server.notedb.<START_MOD>NoteDbUpdateManager manager = args.rebuilder.get().stage(args.db.get(), cid); com.google.gerrit.server.notedb.NoteDbUpdateManager.Result r = manager.stageAndApplyDelta(change); try { manager.execute(); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { rebuildResult = checkNotNull(r); checkNotNull(r.<END_MOD>newState<START_MOD>()); checkNotNull(r.staged()); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newStagedRevWalk(repo, r.staged().changeObjects()), r.<END_MOD>newState<START_MOD>().getChangeMetaId()); } if ((r<END_MOD>.newState()<START_MOD>) == null) { return super.openHandle(<END_MOD>repo<START_MOD>, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), r.newState().getChangeMetaId()<END_MOD>); } catch (<START_MOD>com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException e) { throw new <END_MOD>java.io.IOException<START_MOD>(<END_MOD>e)<START_MOD>; } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.project.TagResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.lang.Exception { return resource.getTagInfo(); }<END_MOD>
private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, <START_MOD>projectKey, <END_MOD>info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, <START_MOD>projectKey, <END_MOD>info.path()); }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> <START_MOD>e)<END_MOD> <START_MOD>{<END_MOD> com.google.gerrit.server.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.<START_MOD>ChangeApiImpl<END_MOD>.<START_MOD>throwRestApiException<END_MOD>( index change e); } }
<START_MOD>private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(java.util.stream.Collectors.toList()); }<END_MOD>
<START_MOD>private static java.lang.String toHex(int i) { java.lang.String hex = java.lang.Integer.toHexString(i); if ((hex.length()) == 1) { hex = "0" + hex; } return hex; }<END_MOD>
<START_MOD>private Account.Id getSubmitter(com.google.gerrit.client.reviewdb.Change c) { com.google.gerrit.client.reviewdb.ChangeApproval submitter = null; try { final java.util.List<com.google.gerrit.client.reviewdb.ChangeApproval> approvals = schema.changeApprovals().byChange(c.getId()).toList(); final com.google.gerrit.client.workflow.FunctionState fs = new com.google.gerrit.client.workflow.FunctionState(c, approvals); for (com.google.gerrit.client.reviewdb.ChangeApproval a : approvals) { if (((a.getValue()) > 0) && (ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { if ((submitter == null) || ((a.getGranted().compareTo(submitter.getGranted())) > 0)) { submitter = a; } } } } catch (com.google.gwtorm.client.OrmException e) { } return submitter != null ? submitter.getAccountId() : null; }<END_MOD>
public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { final java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id> seen = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(); result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (<START_MOD>com.google.gerrit.reviewdb.AccountGroup.UUID myGroupUUID : user.getEffectiveGroups()) { com.google.gerrit.reviewdb.AccountGroup ag = groupCache.get(myGroupUUID); if (ag == null) { continue; }<END_MOD> com.google.gerrit.reviewdb.AccountGroup.Id myGroup <START_MOD>= ag.getId();<END_MOD> for (com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().ownedByGroup(myGroup)) { final com.google.gerrit.reviewdb.AccountGroup.Id id = group.getId(); if (!(seen.add(id))) { continue; } try { com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(id); if (c.isOwner()) { result.add(c.getAccountGroup()); } } catch (NoSuchGroupException e) { continue; } } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.GetAccess.LOG.warn(( ignoring <START_MOD>account<END_MOD>   + id), e); group = com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }
<START_MOD>private org.eclipse.jgit.dircache.DirCache createNewTree(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { org.eclipse.jgit.dircache.DirCache newTree = readBaseTree(repository); java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = getDesiredPathEdits(repository); applyPathEdits(newTree, pathEdits); return newTree; }<END_MOD>
<START_MOD>private void assertPublishedEditMessage(com.google.gerrit.reviewdb.client.Change change) throws java.lang.Exception { assertChangeMessage(change, "Published edit on patch set 1"); }<END_MOD>
<START_MOD>@org.junit.Test public void nonStrictLabelVotesPerDefault() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); r.assertOkStatus(); java.lang.String changeId = r.getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = com.google.gerrit.extensions.api.changes.ReviewInput.approve(); in.label("Verified", (-1)); in.label("Code-Style", 1); in.label("Library-Compliance", (-1)); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().keySet()).containsExactly("Code-Review"); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); assertThat(gApi.changes().id(changeId).get().submittable).isTrue(); in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.label("Code-Review", 42); gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).review(in); assertThat(gApi.changes().id(changeId).current().reviewer(admin.email).votes().values()).containsExactly(((short) (2))); }<END_MOD>
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException( allowed to unmark private } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( is not private } com.google.gerrit.server.change.SetPrivateOp op = <START_MOD>setPrivateOpFactory.create<END_MOD>(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
<START_MOD>private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } }; }<END_MOD>
private void renderHistory(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> messages = info.messages(); if (messages != null) { for (int i = 0; i < (messages.length()); i++) { history.add(new com.google.gerrit.client.change.Message(commentLinkProcessor, messages.get(i)<START_MOD>, revision, info<END_MOD>)); } } }
<START_MOD>private static boolean isAbsolute(java.lang.String url) { java.lang.String pattern = "^https?://.*"; return url.matches(pattern); }<END_MOD>
<START_MOD>public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> set(com.google.inject.Key<T> key, com.google.inject.Provider<T> item) { if (!(this.item.compareAndSet(null, item))) { throw new java.lang.RuntimeException(("Type already provided by " + (this.item.get()))); } return new ReloadableHandle(key, item); }<END_MOD>
@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.YEAR_IN_MILLIS,   the future com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.SECOND_IN_MILLIS,   the future }
<START_MOD>public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject owner(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { return receives(actual().participants.owner, type); }<END_MOD>
@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = <START_MOD>seed.get()<END_MOD>; } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(oldId, ((next) + (batchSize))); }
private java.util.List<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(RevertedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); factory(PerformCreateGroup.Factory.class); <START_MOD>factory(BranchEmail.Factory.class); <END_MOD>}
<START_MOD>@java.lang.Override public java.lang.String getName() { return "reposize"; }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.<START_MOD>restapi.<END_MOD>access.AccessResource>> views() { return views; }
<START_MOD>@java.lang.Override public boolean isVisible(com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create(dbProvider, account.getId()); return changeControl.forUser(who).isRefVisible(); }<END_MOD>
<START_MOD>public final native java.lang.String allQueries();<END_MOD>
<START_MOD>@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.httpd.rpc.account.AccountCapabilitiesServlet.Impl impl = factory.get(); if (acceptsJson(req)) { impl.format = com.google.gerrit.server.OutputFormat.JSON_COMPACT; } if (paramParser.parse(impl, req, res)) { impl.compute(); java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(buf, "UTF-8"); if (impl.format.isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.account.JSON_TYPE); res.setCharacterEncoding("UTF-8"); buf.write(com.google.gerrit.httpd.rpc.account.JSON_MAGIC); impl.format.newGson().toJson(impl.have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType(), out); out.flush(); buf.write('\n'); } else { res.setContentType("text/plain"); res.setCharacterEncoding("UTF-8"); for (java.util.Map.Entry<java.lang.String, java.lang.Object> e : impl.have.entrySet()) { out.write(e.getKey()); if (!((e.getValue()) instanceof java.lang.Boolean)) { out.write(": "); out.write(e.getValue().toString()); } out.write('\n'); } out.flush(); } send(req, res, buf.toByteArray()); } }<END_MOD>
@java.lang.Override public WorkQueue.Executor get() { <START_MOD>com.google.gerrit.server.CurrentUser user = userProvider.get();<END_MOD> com.google.gerrit.server.git.WorkQueue.Executor executor<START_MOD> = queues.getInteractiveQueue()<END_MOD>;<START_MOD> if (user.isBatchUser()) {<END_MOD> executor = queues.<START_MOD>getBatchQueue<END_MOD>(); } return executor; }
public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(<START_MOD>getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("/" + (changeId<END_MOD>.get()<START_MOD>))); } }<END_MOD>).transform(new com.google.common.base.Function<<START_MOD>java.lang.String, <END_MOD>com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(<START_MOD>java.lang.String refPart<END_MOD>) { return <START_MOD>Account.Id.fromRefPart(refPart<END_MOD>); } }); }
public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { <START_MOD>if (((store) == null) && ((trusted) != null)) { throw new java.lang.IllegalStateException( is required } else if (((store) != null) && ((trusted) == null)) { throw new java.lang.IllegalStateException( least one trusted key is required } <END_MOD>return check(key, 0, <START_MOD>true<END_MOD>, <START_MOD>((store) != <END_MOD>null<START_MOD> ? new java.util.HashSet<com.google.gerrit.gpg.Fingerprint>() : null)<END_MOD>); }
<START_MOD>@java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request req, com.google.gwt.http.client.Response res) { java.lang.String text = res.getText(); if (text.startsWith("token=")) { this.sendPost(cb, text); return; } RpcStatus.INSTANCE.onRpcComplete(); int status = res.getStatusCode(); if (status != 200) { if (((400 <= status) && (status < 500)) && (com.google.gerrit.client.rpc.RestApi.isTextBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(res.getText(), status, null)); } else { cb.onFailure(new com.google.gwt.user.client.rpc.StatusCodeException(status, res.getStatusText())); } return; } if (!(com.google.gerrit.client.rpc.RestApi.isJsonBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } java.lang.String json = res.getText(); if (!(json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } T data; try { data = com.google.gerrit.client.rpc.Natives.<T>parseJSON(json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length())); } catch (java.lang.RuntimeException e) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } cb.onSuccess(data); }<END_MOD>
@java.lang.Override public com.google.common.base.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { <START_MOD>try (<END_MOD>java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt<START_MOD> = con.prepareStatement(( patch_set_id, file_name FROM account_patch_reviews APR1   + (((( account_id = ? AND change_id = ? AND patch_set_id =   +   MAX(patch_set_id) FROM account_patch_reviews APR2 WHERE   +   = APR2.account_id   +   APR1.change_id = APR2.change_id   +   patch_set_id <= ?) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); try (java.sql.ResultSet rs = stmt.executeQuery()) { if (rs.next()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = new com.google.gerrit.reviewdb.client.PatchSet.Id(psId.getParentKey(), rs.getInt("PATCH_SET_ID")); com.google.common.collect.ImmutableSet.Builder<java.lang.String> builder = com.google.common.collect.ImmutableSet.builder(); do { builder.add(rs.getString("FILE_NAME"))<END_MOD>; }<START_MOD> while (rs.next() ); return com.google.common.base.Optional.of(AccountPatchReviewStore.PatchSetWithReviewedFiles.create(id, builder.build())); } return com.google.common.base.Optional.absent(); } } catch (java.sql.SQLException e) { throw com.google.gerrit.server.schema.H2AccountPatchReviewStore.convertError("select", e); } }<END_MOD>
@java.lang.Override protected void configure() { if (<START_MOD>!(<END_MOD>com.google.gerrit.server.util.BouncyCastleUtil.havePGP())<START_MOD>)<END_MOD> {<START_MOD> com.google.gerrit.server.git.gpg.SignedPushModule.log.info(( PGP not installed; signed push verification is +   disabled return; }<END_MOD> com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); <START_MOD>factory(GerritPublicKeyChecker<END_MOD>.<START_MOD>Factory<END_MOD>.<START_MOD>class)<END_MOD>; }
<START_MOD>public com.google.inject.Key<?> getKey();<END_MOD>
private java.lang.String projectBaseName(java.lang.String project) { return project.substring((<START_MOD>(project.lastIndexOf('/'))<END_MOD> + 1)); }
static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.<START_MOD>trailingspace().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.<END_MOD>foldcode().getSafeUri(), group.addFinal(cb)); } }
<START_MOD>private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit())); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.reviewdb.client.PatchSet.Id id = ((idActive) == null) ? other.idActive : idActive; com.google.gerrit.client.changes.ChangeFileApi.getContent(id, path, new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction(id, result, path, style.replyBox(), null, icon); edit.onEdit(); } }); } }); return anchor; }<END_MOD>
@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.<START_MOD>LuceneQuerySource<END_MOD>(opts<START_MOD>.filterFields(IndexUtils::projectFields)<END_MOD>, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))<START_MOD>, this::toProjectData<END_MOD>); }
<START_MOD>public boolean isWip() { return wip; }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("message") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } }
public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>ProjectSubmitType<END_MOD> type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; }
@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = <START_MOD>groupBackend<END_MOD>.<START_MOD>membershipsOf<END_MOD>(state()); } else { effectiveGroups = com.google.gerrit.server.IdentifiedUser.registeredGroups; } } return effectiveGroups; }
<START_MOD>@java.lang.Deprecated <END_MOD>com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;
private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo) throws java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> { return <START_MOD>getHead<END_MOD>(repo<START_MOD>, "HEAD"<END_MOD>); }
<START_MOD>public java.lang.String getBase() { return base.getText(); }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.String get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { try { return input.getAuthor().getEmailAddress(); } catch ( e) { throw new <com.google.gerrit.server.index.e>com.google.gwtorm.server.OrmException(); } }<END_MOD>
com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.DeleteRef create(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource r);
<START_MOD>@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Comment.Key commentKey = rsrc.getComment().key; java.util.Optional<com.google.gerrit.reviewdb.client.Comment> maybeComment = commentsUtil.get(ctx.getDb(), ctx.getNotes(), commentKey); if (!(maybeComment.isPresent())) { return false; } com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctx.getChange().currentPatchSetId(); commentsUtil.deleteCommentByRewritingHistory(ctx.getDb(), ctx.getUpdate(psId), commentKey, rsrc.getPatchSet().getId(), newMessage); ctx.rewriteHistory(); return true; }<END_MOD>
private void checkPreconditions() { checkState((!(started)),   may only be used once <START_MOD>getClass().getSimpleName()); <END_MOD>}
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { <START_MOD>java.lang.Long def = 2 * 1000L; <END_MOD>org.<START_MOD>eclipse.jgit.lib.Config config = new<END_MOD> org.eclipse.jgit.lib.Config<START_MOD>(); java.lang.Long<END_MOD> t; config.setString("core", "dht", "timeout",   ms t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(500); config.setString("core", "dht", "timeout",   sec try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail( IllegalArgumentException } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo( time unit value: core.dht.timeout=5.2 sec } config.setString("core", "dht", "timeout",   min t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t).isEqualTo(60000); }
public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case "String" : headers.put(mh.value(), f.get(section).toString()); break; case "Integer" : headers.put(mh.value(), f.getInt(section)); break; case "Long" : headers.put(mh.value(), f.getLong(section)); break; case "Boolean" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).<START_MOD>timestamp(new java.util.Date()).<END_MOD>build(); } return amqpProperties; }
<START_MOD>private java.lang.String evaluate(java.lang.String parameterizedRef, java.lang.String userName) { if (parameterizedRef.contains("${")) { return evaluate(new com.google.gerrit.common.data.ParameterizedString(parameterizedRef), userName); } return parameterizedRef; }<END_MOD>
private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common<START_MOD>.kex<END_MOD>.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG14.Factory(), new org.apache.sshd.server.kex.DHG1.Factory())); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.<START_MOD>random.<END_MOD>Random> factory; if (cfg.getBoolean("sshd", null, "testUseInsecureRandom", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = new org.apache.sshd.common.random.BouncyCastleRandom.Factory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }
<START_MOD>public java.lang.String getGroups() { return groups; }<END_MOD>
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.<START_MOD>restapi.<END_MOD>project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private void initChangeRepo(<START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey project<END_MOD>) throws java.io.IOException { if ((changeRepo) == null) { <START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey fromUpdates = com.google.gerrit.server.notedb.NoteDbUpdateManager.projectFromUpdates(changeUpdates.values()); if (project == null) { checkArgument<END_MOD>((!(changeUpdates.isEmpty()))<START_MOD>,   one update or a project name is required project = fromUpdates; } else if (!(changeUpdates.isEmpty())) { checkArgument(project.equals(fromUpdates),   %s does not match project %s from update list project, fromUpdates); }<END_MOD> changeRepo = openRepo(<START_MOD>project); } }<END_MOD>
<START_MOD>@java.lang.Override public java.util.List<com.googlecode.prolog_cafe.lang.Term> call() throws java.lang.Exception { return evaluateImpl(); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD> diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);
@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if ("all".equalsIgnoreCase(value)) { context = com.google.gerrit.<START_MOD>extensions.common.DiffPreferencesInfo<END_MOD>.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format( is not a valid value for   value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); }<START_MOD> clearRange(); setRangeHighlight(false);<END_MOD> com.google.gerrit.common.changes.Side side = comment.side(); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this, side); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, side, ((comment.line()) - 1)); <START_MOD>getCm()<END_MOD>.focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink"<START_MOD>, null<END_MOD>); if (ret == null) { ret = pluginName; } return ret; }
public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } return owner || (canPerform(Permission.PUSH_TAG)); } else { return <START_MOD>false; } }<END_MOD>
<START_MOD>@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { reviewedTop.setReviewed((!(reviewedTop.isReviewed()))); }<END_MOD>
<START_MOD>private final com.googlesource.gerrit.plugins.quota.Module.Holder createWithBurstyRateLimiter(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(finder.firstMatching(limitsConfigType, userFactory.create(key))); }<END_MOD>
<START_MOD>private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getChangeSortedComments(java.lang.String changeId) throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> commentsMap = getPublishedComments(changeId); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : commentsMap.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo c : e.getValue()) { c.path = e.getKey(); comments.add(c); } } java.util.Collections.sort(comments, ( c1, c2) -> c1.id.compareTo(c2.id)); return comments; }<END_MOD>
<START_MOD>@com.google.common.annotations.VisibleForTesting static com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> parsePatterns(java.lang.Iterable<byte[]> patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((patterns != null), null); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> result = com.google.common.collect.ArrayListMultimap.create(); for (byte[] b : patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check(((parts.size()) == 2), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.create(parts.get(1))); } return result; }<END_MOD>
void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, <START_MOD>getChangeType()<END_MOD>); writeEnum(out, <START_MOD>getPatchType()<END_MOD>); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final <START_MOD>com.google.gerrit.server.patch.GwtOrmBaseEdit<END_MOD> e : edits) { write(out, e); if (e instanceof <START_MOD>com.google.gerrit.server.patch.GwtOrmReplaceEdit) { java.util.List<com.google.gerrit.server.patch.GwtOrmBaseEdit> intlEdits<END_MOD> = ((<START_MOD>com.google.gerrit.server.patch.GwtOrmReplaceEdit) (e)).getInternalEdits(<END_MOD>); writeVarInt32(out, <START_MOD>intlEdits<END_MOD>.size()); for (<START_MOD>com.google.gerrit.server.patch.GwtOrmBaseEdit<END_MOD> i : <START_MOD>intlEdits<END_MOD>) { write(out, i); } } else { writeVarInt32(out, 0); } } }
@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.<START_MOD>ProjectWatch.<END_MOD>Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn( notify watchers for new change err); } }
<START_MOD>public int executeBatch(java.sql.PreparedStatement ps) throws java.sql.SQLException { final int[] updateCounts = ps.executeBatch(); if (updateCounts == null) { throw new java.sql.SQLException("No rows affected"); } int totalUpdateCount = 0; for (int i = 0; i < (updateCounts.length); i++) { int updateCount = updateCounts[i]; if (updateCount > 0) { totalUpdateCount += updateCount; } } return totalUpdateCount; }<END_MOD>
private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException( pool has already been started } try { java.lang.System.setProperty("net.sf.ehcache.skipUpdateCheck", ("" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if (c != null) { <START_MOD>if (p.disk()) { <END_MOD>p.bind(new com.google.gerrit.ehcache.<START_MOD>PopulatingProtobufCache(eh, c, p.getKeyClass(), p.getValueClass(), p.getValueProvider())); } else { p.bind(new com.google.gerrit.ehcache.<END_MOD>PopulatingCache(eh, c)); } <START_MOD>} <END_MOD>else { <START_MOD>if (p.disk()) { <END_MOD>p.bind(new com.google.gerrit.ehcache.<START_MOD>SimpleProtobufCache(eh, p.getKeyClass(), p.getValueClass(), p.getValueProvider())); } else { p.bind(new com.google.gerrit.ehcache.<END_MOD>SimpleCache(eh)); } } } }<START_MOD> }<END_MOD>
@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.<START_MOD>reviewdb<END_MOD>.<START_MOD>client<END_MOD>.<START_MOD>RefNames<END_MOD>.editRefName(accountId, changeId, psId); assertEquals("refs/users/42/1000042/edit-56414/50", refName); }
@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace("${projectName}", <START_MOD>com.google.gwt.http.client.URL.encodeQueryString(<END_MOD>project.get())<START_MOD>)<END_MOD>; if (<START_MOD>(!(<END_MOD>panel.startsWith("/x/"))<START_MOD>) && (!(com.google.gerrit.client.Gerrit.isAbsolute(panel))))<END_MOD> { <START_MOD>com.google.gwt.http.client.UrlBuilder builder = new com.google.gwt.http.client.UrlBuilder(); builder.setProtocol(com.google.gwt.user.client.Window.Location.getProtocol()); builder.setHost(com.google.gwt.user.client.Window.Location.getHost()); java.lang.String port = com.google.gwt.user.client.Window.Location.getPort(); if ((port != null) && (!(port.isEmpty()))) { builder.setPort(java.lang.Integer.parseInt(port)); } <END_MOD>p<START_MOD> = (builder.buildString()) + p<END_MOD>; } getElement().setPropertyString("href", p); }
<START_MOD>static byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String pat) { return (((project.toString()) + ':') + pat).getBytes(java.nio.charset.StandardCharsets.UTF_8); }<END_MOD>
<START_MOD>@org.junit.Test public void testCreationOfFixIdForFixSuggestion() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().fixId().isNotEmpty(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).singleElement().singleFixSuggestion().fixId().isNotEqualTo(fixSuggestionInfo.fixId); }<END_MOD>
<START_MOD>@org.junit.Test public void reduceNot() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION)); }<END_MOD>
private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { <START_MOD>com.google.inject.ProvisionException e =<END_MOD> new com.google.inject.ProvisionException(java.lang.String.format(( providers bound for DynamicItem<%s> +   is not allowed; check the server configuration. type)); <START_MOD>e.printStackTrace(); throw e; <END_MOD>} else { return null; } }
<START_MOD>public java.lang.Boolean getEnabled() { return cfg.getBoolean(com.googlesource.gerrit.plugins.lfs.LfsConfigSection.LFS, namespace, com.googlesource.gerrit.plugins.lfs.LfsConfigSection.KEY_ENABLED, false); }<END_MOD>
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { <START_MOD>com.google.gerrit.common.data.ReviewResult result = null; <END_MOD>try { <START_MOD>result<END_MOD> = <START_MOD>deleteDraftFactory.create<END_MOD>(psid<START_MOD>).call(); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(result.getChangeId())); }<END_MOD> if (<START_MOD>(result.getErrors().size()) > 0<END_MOD>) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
<START_MOD>@java.lang.SuppressWarnings("unchecked") <END_MOD>@java.lang.Override public void execute() { try { <START_MOD>if (withResponse) { ((com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.HttpResponse<T>>) (cb)).onSuccess(com.google.gerrit.client.rpc.HttpResponse.wrap(res, data)); } else { <END_MOD>cb.onSuccess(data);<START_MOD> }<END_MOD> } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.<START_MOD>Failure<END_MOD> { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format( %-12s %-12s %-4s %s "Task", "State", "StartTime", "", "Command")); stdout.print("------------------------------------------------------------------------------\n"); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; <START_MOD>boolean viewAll; <END_MOD>try { <START_MOD>try { <END_MOD>tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } viewAll = <START_MOD>permissionBackend.user(<END_MOD>currentUser<START_MOD>).test(GlobalPermission.VIEW_QUEUE); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1,   unavailable e); }<END_MOD> long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format( %s queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }
<START_MOD>protected void initPageHeader() { }<END_MOD>
private org.asciidoctor.Options createOptions(<START_MOD>java.io.File base, <END_MOD>java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(<START_MOD>base<END_MOD>).toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.<START_MOD>AccountCommitValidator<END_MOD>(allUsers<START_MOD>, accountValidator<END_MOD>))); }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("viewport") void onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent e) { if (dragging) { int y = (e.getRelativeY(getElement())) - (startY); double top = java.lang.Math.max(0, (y / (ratio))); com.google.gerrit.client.diff.OverviewBar.log(((((("drag s:" + (startY)) + " y:") + y) + " top:") + top)); cmB.scrollToY(top); } }<END_MOD>
<START_MOD>private java.util.Set<com.google.gerrit.reviewdb.Change.Id> changesReferencingTr(final com.google.gerrit.reviewdb.ReviewDb db, final java.lang.String trackingId) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> resultChanges = new java.util.HashSet<com.google.gerrit.reviewdb.Change.Id>(); for (final com.google.gerrit.reviewdb.TrackingId tr : db.trackingIds().getTrackingId(new com.google.gerrit.reviewdb.TrackingId.Id(trackingId))) { resultChanges.add(tr.getChangeId()); } return resultChanges; }<END_MOD>
<START_MOD>public com.googlesource.gerrit.plugins.lfs.LfsConfigSection getForProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { org.eclipse.jgit.lib.Config cfg = projectCache.getAllProjects().getConfig("lfs.config").get(); java.util.Set<java.lang.String> namespaces = cfg.getSubsections(LfsConfigSection.LFS); java.lang.String p = project.get(); for (java.lang.String n : namespaces) { if (("?/*".equals(n)) || (n.endsWith("/?/*"))) { java.lang.String prefix = n.substring(0, ((n.length()) - 3)); java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + prefix) + "([^/]+)/.*$")).matcher(p); if (m.matches()) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n, ((prefix + (m.group(1))) + "/*")); } } else if (n.endsWith("/*")) { if (p.startsWith(n.substring(0, ((n.length()) - 1)))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.startsWith("^")) { if (p.matches(n.substring(1))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (p.equals(n)) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } return null; }<END_MOD>
<START_MOD>public static java.lang.String readFile(final java.io.File parentDir, final java.lang.String name) throws javax.servlet.ServletException { if (parentDir == null) { return null; } final java.io.File path = new java.io.File(parentDir, name); try { final java.io.InputStream in = new java.io.FileInputStream(path); try { final java.io.StringWriter w = new java.io.StringWriter(); final java.io.InputStreamReader r = new java.io.InputStreamReader(in, com.google.gerrit.server.HtmlDomUtil.ENC); final char[] buf = new char[512]; int n; while ((n = r.read(buf)) > 0) { w.write(buf, 0, n); } return w.toString(); } finally { in.close(); } } catch (java.io.FileNotFoundException e) { return null; } catch (java.io.IOException e) { throw new javax.servlet.ServletException(("Error reading " + path), e); } }<END_MOD>
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { res.setHeader("Expires",   01 Jan 1980 00:00:00 GMT res.setHeader("Pragma", "no-cache"); res.setHeader("Cache-Control",   must-revalidate com.google.gerrit.server.project.ListProjects impl = factory.get();<START_MOD> if (com.google.gerrit.httpd.rpc.project.ListProjectsServlet.acceptsJson(req)) { impl.setFormat(ListProjects.OutputFormat.JSON_COMPACT); }<END_MOD> com.google.gerrit.util.cli.CmdLineParser clp = parser.create(impl); try { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.String[]> parameterMap = req.getParameterMap(); clp.parseOptionMap(parameterMap); } catch (org.kohsuke.args4j.CmdLineException e) { if (!(clp.wasHelpRequestedByOption())) { res.setStatus(HttpServletResponse.SC_BAD_REQUEST); send(res, e.getMessage().getBytes("UTF-8")); return; } } byte[] data; if (clp.wasHelpRequestedByOption()) { java.io.StringWriter msg = new java.io.StringWriter(); clp.printDetailedUsage(req.getRequestURI(), msg); data = msg.toString().getBytes("UTF-8"); <START_MOD>res.setContentType("text/plain"); <END_MOD>} else { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); <START_MOD>if (<END_MOD>impl.<START_MOD>isFormatJson()) { res.setContentType(JsonUtil.JSON_TYPE); buf.write(")]}\'\n".getBytes("UTF-8")); } else { res.setContentType("text/plain"); } impl.<END_MOD>display(buf); data = buf.toByteArray(); } <START_MOD>res.setCharacterEncoding("UTF-8"); <END_MOD>if (com.google.gwt.user.server.rpc.RPCServletUtils.acceptsGzipEncoding(req)) { res.setHeader("Content-Encoding", "gzip"); data = com.google.gerrit.httpd.HtmlDomUtil.compress(data); } send(res, data); }
<START_MOD>public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.oauth.OAuthTokenCache.OAUTH_TOKENS, java.lang.String.class, com.google.gerrit.extensions.auth.oauth.OAuthToken.class); } }; }<END_MOD>
private void initSignatures() { setSignatureFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common<START_MOD>.signature<END_MOD>.Signature>>asList(new org.apache.sshd.common.signature.SignatureDSA.Factory(), new org.apache.sshd.common.signature.SignatureRSA.Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory())); }
private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); switch (changeStatus) { case NEW : setPatchSetAsDraft(); updateChange(); break; <START_MOD>case ABANDONED : case DRAFT : case MERGED : <END_MOD>default : sendUserInfo(( to set patch set as draft, change is   + (getStatusName(changeStatus)))); break; } }
<START_MOD>private com.google.gerrit.reviewdb.client.Change getChange(com.google.gerrit.extensions.common.ChangeInfo info) throws com.google.gwtorm.server.OrmException { return unwrap(db.get()).changes().get(new com.google.gerrit.reviewdb.client.Change.Id(info._number)); }<END_MOD>
private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith("/")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, null<END_MOD>), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }
<START_MOD>private org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.notedb.ChangeUpdate update) throws java.io.IOException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, project, repo); md.getCommitBuilder().setAuthor(new org.eclipse.jgit.lib.PersonIdent("Example User", "user@example.com")); md.getCommitBuilder().setCommitter(new org.eclipse.jgit.lib.PersonIdent("Gerrit Test", "test@gerrit.com")); return update.commit(md); }<END_MOD>
<START_MOD>private com.google.gwt.safehtml.shared.SafeHtml formatList(com.google.gwt.core.client.JsArrayString l) { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); int size = l.length(); for (int i = 0; i < size; i++) { sb.openSpan().addStyleName(style.includedInElement()).append(l.get(i)).closeSpan(); if (i < (size - 1)) { sb.append(", "); } } return sb; }<END_MOD>
<START_MOD>@java.lang.Override protected java.lang.String getRefName() { return com.google.gerrit.server.notedb.ChangeDraftNotesUtil.draftRefName(accountId, getChange().getId()); }<END_MOD>
<START_MOD>private void save(org.eclipse.jgit.lib.PersonIdent ident, java.lang.String msg) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.io.File path = getPath(); if (path == null) { throw new java.io.IOException(((project) + " does not exist.")); } try (org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository(path)) { inserter = repo.newObjectInserter(); reader = repo.newObjectReader(); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { org.eclipse.jgit.revwalk.RevTree srcTree = ((revision) != null) ? rw.parseTree(revision) : null; newTree = readTree(srcTree); org.eclipse.jgit.lib.CommitBuilder commit = new org.eclipse.jgit.lib.CommitBuilder(); commit.setAuthor(ident); commit.setCommitter(ident); commit.setMessage(msg); super.onSave(commit); org.eclipse.jgit.lib.ObjectId res = newTree.writeTree(inserter); if (res.equals(srcTree)) { return; } commit.setTreeId(res); if ((revision) != null) { commit.addParentId(revision); } org.eclipse.jgit.lib.ObjectId newRevision = inserter.insert(commit); updateRef(repo, ident, newRevision, ("commit: " + msg)); revision = newRevision; } finally { if ((inserter) != null) { inserter.close(); inserter = null; } if ((reader) != null) { reader.close(); reader = null; } } } }<END_MOD>
<START_MOD>void setIndentUnit(int indentunit) { cm.setOption("indentUnit", (Patch.COMMIT_MSG.equals(path) ? 2 : indentunit)); }<END_MOD>
@java.lang.Override protected void formatChange() { appendText(<START_MOD>velocifyFile<END_MOD>(<START_MOD>"NewChange.vm"<END_MOD>)); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter<START_MOD>.class); bind(com.google.gerrit.server.index.account.AccountIndexCollection.class); listener().to(com.google.gerrit.server.index.account.AccountIndexCollection.class); factory(AccountIndexer.Factory<END_MOD>.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); }
private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db<START_MOD>, com.google.gerrit.server.schema.UpdateUI ui<END_MOD>) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { <START_MOD>com.google.gerrit.reviewdb.client.Change.Status status = c.getStatus(); <END_MOD>if (<START_MOD>status == null) { ui.message((( migration of Change   + (c.getChangeId())) +   as it is not in an obsolete/unsupported state } else if (status<END_MOD>.isOpen()) { openByProject.put(c.getProject(), c.getId()); } } return openByProject; }
@java.lang.Override public com.google.gerrit.<START_MOD>extensions.common.DiffPreferencesInfo apply(com.google.gerrit.<END_MOD>server.account.<START_MOD>AccountResource rsrc, com.google.gerrit.extensions.common<END_MOD>.DiffPreferencesInfo <START_MOD>in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException( to members of Modify Accounts } if (in == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must be provided } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); <END_MOD>com.google.gerrit.server.<START_MOD>git.MetaDataUpdate md = metaDataUpdateFactory.create(allUsersName); com.google.gerrit.server.<END_MOD>account.<START_MOD>VersionedAccountPreferences prefs; com.google.gerrit.extensions.common.DiffPreferencesInfo out = new com.google.gerrit.extensions.common.DiffPreferencesInfo(); try { prefs =<END_MOD> com.google.gerrit.server.account.<START_MOD>VersionedAccountPreferences.forUser(accountId); prefs.load(md); storeSection(prefs.getConfig(), "diff", null, in); prefs.commit(md); loadSection(prefs.getConfig(), "diff", null, out); } finally<END_MOD> { <START_MOD>md.close();<END_MOD> } <START_MOD>return out<END_MOD>; }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.<START_MOD>getEvenIfMissing<END_MOD>(id).getAccount(), events.getWhen(), serverIdent); }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gwt.user.client.ui.UIObject.setVisible(form, false); suggestBox.setFocus(false); }<END_MOD>
<START_MOD>private void printElement(final java.io.PrintWriter stdout, com.google.gerrit.sshd.commands.ListProjects.TreeNode node, int level, boolean isLast, final com.google.gerrit.sshd.commands.ListProjects.TreeNode lastParentNode) { if ((node.getProject()) != null) { if (!(currentTabSeparator.equals(" "))) { final java.lang.String nodeProject = node.getProject().getName(); final java.lang.String lastParentProject = lastParentNode.getProject().getName(); if (nodeProject.equals(lastParentProject)) { currentTabSeparator = " "; } } if (level > 0) { stdout.print(java.lang.String.format((("%-" + (4 * level)) + "s"), currentTabSeparator)); } final java.lang.String prefix = (isLast) ? com.google.gerrit.sshd.commands.ListProjects.LAST_NODE_PREFIX : com.google.gerrit.sshd.commands.ListProjects.NODE_PREFIX; java.lang.String printout; if (node.isVisible()) { printout = prefix + (node.getProject().getName()); } else { printout = prefix + (com.google.gerrit.sshd.commands.ListProjects.NOT_VISIBLE_PROJECT); } stdout.println(printout); stdout.flush(); } if (node.isLeaf()) { return; } else { final java.util.List<com.google.gerrit.sshd.commands.ListProjects.TreeNode> children = node.getChildren(); ++level; for (com.google.gerrit.sshd.commands.ListProjects.TreeNode treeNode : children) { final boolean isLastIndex = (children.indexOf(treeNode)) == ((children.size()) - 1); printElement(stdout, treeNode, level, isLastIndex, lastParentNode); } } }<END_MOD>
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.<START_MOD>getEvenIfMissing<END_MOD>(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
<START_MOD>@java.lang.Override com.google.gerrit.client.diff.CommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { java.util.Map<java.lang.Integer, com.google.gerrit.client.diff.CommentGroup> map = map(side); com.google.gerrit.client.diff.CommentGroup existing = map.get(cmLinePlusOne); if (existing != null) { return existing; }<END_MOD> com.google.gerrit.client.diff.UnifiedCommentGroup <START_MOD>g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCmFromSide(side), side, cmLinePlusOne); map.put(cmLinePlusOne, g); mergedMap.put(cmLinePlusOne, g); if (isAttached()<END_MOD>) { <START_MOD>g.init(host.getDiffTable()); g.handleRedraw(); }<END_MOD> return <START_MOD>g<END_MOD>; }
<START_MOD>@java.lang.Override public java.lang.String toString() { return ((("(" + (a)) + " || ") + (b)) + ")"; }<END_MOD>
@org.junit.Before public void setUp() { <START_MOD>poolMock<END_MOD> = <START_MOD>new <END_MOD>com.ericsson.gerrit.plugins.eventslog.<START_MOD>EventHandlerTest<END_MOD>.<START_MOD>PoolMock(1); eventHandler = new com.ericsson.gerrit.plugins.eventslog.EventHandler(storeMock, poolMock<END_MOD>); }
<START_MOD>private javax.crypto.Cipher cipher(byte[] initVector, int mode) throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidParameterSpecException, javax.crypto.NoSuchPaddingException { javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec(initVector); javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance("AES/CBC/PKCS5PADDING"); java.security.AlgorithmParameters params = java.security.AlgorithmParameters.getInstance(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.ALGORITHM); params.init(spec); cipher.init(mode, key.get(), params); return cipher; }<END_MOD>
private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gwt.user.client.rpc.AsyncCallback<T> cb<START_MOD>, boolean withResponse<END_MOD>) { com.google.gerrit.client.rpc.RestApi.HttpCallback<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback(background, cb<START_MOD>, withResponse<END_MOD>); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }
@java.lang.Override public synchronized com.google.gerrit.metrics.Timer newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc) { checkArgument((!(desc.isGauge())),   must not be a gauge checkArgument((!(desc.isRate())),   must not be a rate checkArgument(desc.isCumulative(),   must be cumulative checkArgument(((desc.getTimeUnit()) != null),   must have a unit <START_MOD>define<END_MOD>(name, desc); return <START_MOD>newTimerImpl<END_MOD>(name); }
<START_MOD>private java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getIncludedGroups(java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> seedGroups) { java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> includedGroups = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); java.util.Queue<com.google.gerrit.reviewdb.AccountGroup.Id> groupQueue = new java.util.LinkedList<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); while ((groupQueue.size()) > 0) { com.google.gerrit.reviewdb.AccountGroup.Id id = groupQueue.remove(); try { for (final com.google.gerrit.reviewdb.AccountGroupIncludedGroup i : dbProvider.get().accountGroupIncludedGroups().byIncludedGroup(id)) { com.google.gerrit.reviewdb.AccountGroup.Id groupId = i.getGroupId(); if (!(includedGroups.contains(groupId))) { includedGroups.add(groupId); groupQueue.add(groupId); } } } catch (com.google.gwtorm.client.OrmException e) { com.google.gerrit.server.IdentifiedUser.log.warn("Cannot query included groups", e); } } return includedGroups; }<END_MOD>
<START_MOD>@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail("non-existing@example.com")).isEmpty(); java.util.Map<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id>> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }<END_MOD>
<START_MOD>private java.util.Set<java.lang.String> getAllowedUserIds() throws com.google.gwtorm.server.OrmException { java.util.Set<java.lang.String> result = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : db.accountExternalIds().byAccount(user.getAccountId())) { result.add(extId.getExternalId()); if (!(com.google.common.base.Strings.isNullOrEmpty(extId.getEmailAddress()))) { result.add(extId.getEmailAddress()); } } return result; }<END_MOD>
<START_MOD>@java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); handlerManager.fireEvent(new com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent(getRowItem(row).getName())); }<END_MOD>
private void scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne pushOp, int delay, java.util.concurrent.TimeUnit unit) { <START_MOD>postReplicationScheduledEvent<END_MOD>(pushOp); pool.schedule(pushOp, delay, unit); }
<START_MOD>@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { assume().that(isPrivateByDefault()).isFalse(); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change")).get(); assertThat(info.isPrivate).isNull(); }<END_MOD>
@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { <START_MOD>@java.lang.SuppressWarnings("deprecation") <END_MOD>com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }
@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey existingProject = new com.google.gerrit.reviewdb.client.Project.NameKey("p"); com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey("p1"); <START_MOD>createProject(child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey("p2"); createProject(child2.get()); createProject("p1.1", child1); <END_MOD>com.google.gerrit.acceptance.<START_MOD>RestResponse r = GET((("/projects/" + (allProjects<END_MOD>.get())<START_MOD>) + "/children/")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(new com.google.gerrit.reviewdb.client.Project.NameKey("All-Users"), existingProject, child1,<END_MOD> child2<START_MOD>),<END_MOD> com.google.gerrit.acceptance.<START_MOD>rest.project.ListChildProjectsIT.toProjectInfoList(<END_MOD>r)); }
<START_MOD>public java.util.List<com.google.gerrit.server.query.change.ChangeData> queryChanges(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> query) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return queryChanges(com.google.common.collect.ImmutableList.of(query)).get(0); }<END_MOD>
<START_MOD>public abstract com.google.gerrit.common.data.SubmitRequirement.Builder setFullReason(java.lang.String fullReason);<END_MOD>
<START_MOD>private void persistDiffPreferences() { com.google.gerrit.reviewdb.AccountDiffPreference diffPref = new com.google.gerrit.reviewdb.AccountDiffPreference(); diffPref.setIgnoreWhitespace(getIgnoreWhitespace().getCode()); diffPref.setTabSize(tabWidth.getIntValue()); diffPref.setLineLength(colWidth.getIntValue()); diffPref.setSyntaxHighlighting(syntaxHighlighting.getValue()); diffPref.setShowWhitespaceErrors(whitespaceErrors.getValue()); diffPref.setIntralineDifference(intralineDifference.getValue()); diffPref.setShowTabs(showTabs.getValue()); Util.ACCOUNT_SVC.changeDiffPreferences(diffPref, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { } }); }<END_MOD>
private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID <START_MOD>subgroupUuid<END_MOD> : groupDetail.<START_MOD>getSubgroups<END_MOD>()) { if (!(seenGroups.contains(<START_MOD>subgroupUuid<END_MOD>))) { members.putAll(getMembers(<START_MOD>subgroupUuid<END_MOD>, seenGroups)); } } } accountLoader.fill(); return members; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.<START_MOD>ReviewNotification<END_MOD> notifyHandling);
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int <START_MOD>batchThreads = this.<END_MOD>threads<START_MOD>; if (batchThreads <= 0) batchThreads<END_MOD> = config.getInt("index", null, "batchThreads", 0); if (<START_MOD>batchThreads<END_MOD> <= 0) { <START_MOD>batchThreads<END_MOD> = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(<START_MOD>batchThreads<END_MOD>, "Index-Batch")); }
private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int line, int cnt) { <START_MOD>addPaddingWidget(cm,<END_MOD> diffTable.style.padding()<START_MOD>,<END_MOD> <START_MOD>line, <END_MOD>cnt, Unit.EM); }
<START_MOD>public final Account.FieldName get() { return Account.FieldName.valueOf(getRaw()); }<END_MOD>
<START_MOD>void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, com.google.gerrit.sshd.DispatchCommand cmd) { final<END_MOD> java.lang.String <START_MOD>sid<END_MOD> = <START_MOD>extractSessionId(ctx)<END_MOD>; <START_MOD>final<END_MOD> <START_MOD>long<END_MOD> <START_MOD>created<END_MOD> = <START_MOD>extractCreated<END_MOD>(<START_MOD>ctx);<END_MOD> <START_MOD>auditService.dispatch(new<END_MOD> <START_MOD>com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx<END_MOD>)<START_MOD>, ("ssh:"<END_MOD> + (<START_MOD>extractWhat(cmd))), created, extractParameters(cmd), result)<END_MOD>); }
void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String <START_MOD>cmd<END_MOD>) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx), ("ssh:" + <START_MOD>cmd<END_MOD>), created, <START_MOD>null<END_MOD>, result)); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return <START_MOD>sort(<END_MOD>byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED<START_MOD>)<END_MOD>); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return <START_MOD>sort(<END_MOD>comments<START_MOD>)<END_MOD>; }
<START_MOD>private com.google.gerrit.common.data.SubmitTypeRecord logActionRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return actionRuleError("Error evaluating project action rules, check server log"); }<END_MOD>
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure {<START_MOD> if (!(loader.isRemoteInstallEnabled())) { throw die( installation is disabled }<END_MOD> if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die(   is required } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && ("-".equalsIgnoreCase(source))) { throw die( required when source is stdin } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if ( <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if ("-".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die(( read   + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die(( url   + (source))); } catch (java.io.IOException e) { throw die(( read   + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die( install plugin } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format( failed to install. Cause: %s e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }
<START_MOD>@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { java.lang.System.out.println("\ud83d\ude1b test"); com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id("<001a114da7ae26e2eb053fe0c29c@google.com>").from(new com.google.gerrit.server.mail.Address("Jonathan Nieder (Gerrit)", "noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com")).addTo(new com.google.gerrit.server.mail.Address("ekempin", "ekempin@google.com")).textContent(com.google.gerrit.server.mail.receive.data.QuotedPrintableHeaderMessage.textContent).subject("âme vulgaire").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0)); return expect.build(); }<END_MOD>
<START_MOD>@org.junit.Test public void multipleReviewers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(5); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, c.getOwner()); update.putReviewer(new com.google.gerrit.reviewdb.client.Account.Id(1234), ReviewerState.REVIEWER); update.putReviewer(new com.google.gerrit.reviewdb.client.Account.Id(2345), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = new com.google.gerrit.server.notedb.ChangeNotes(repo, c); assertEquals(com.google.common.collect.ImmutableMap.of(new com.google.gerrit.reviewdb.client.Account.Id(1234), ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2345), ReviewerState.REVIEWER), notes.getReviewers()); }<END_MOD>
private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(<START_MOD>((receiveConfig.privateByDefault) || (<END_MOD>magicBranch.isPrivate)<START_MOD>))<END_MOD>.setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData() { return com.googlesource.gerrit.plugins.quota.Publisher.KIND; }<END_MOD>
<START_MOD>@org.junit.Test <END_MOD>public void testListTables() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute( SEQUENCE cnt execute( TABLE foo (cnt INT) java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains("cnt")); assertTrue(s.contains("foo")); }
private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug( change {} merged c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; <START_MOD>com.google.gerrit.reviewdb.client.PatchSetApproval submitter; com.google.gerrit.reviewdb.client.PatchSet merged; <END_MOD>try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id <START_MOD>mergedId = commit.change().currentPatchSetId(); <END_MOD>merged = <START_MOD>db.patchSets().get(mergedId<END_MOD>); c = setMergedPatchSet(c.getId(), <START_MOD>mergedId); submitter = approvalsUtil.getSubmitter(db, commit.notes(), mergedId); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); } finally { db.rollback(); } sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), <END_MOD>merged<START_MOD>, db); } catch (com.google.gwtorm<END_MOD>.server.<START_MOD>OrmException ex) { logError(( run hook for submitted patch set   + (c.getId())), ex); } }<END_MOD> update<START_MOD>.commit(); }<END_MOD>
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { <START_MOD>try { <END_MOD>com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); <START_MOD>com.google.inject.Injector modulesInjector = injector;<END_MOD> if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { <START_MOD>modulesInjector = injector.createChildInjector(); <END_MOD>for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<<START_MOD>java.lang.Module<END_MOD>> <START_MOD>mClass = <END_MOD>((java.lang.Class<<START_MOD>java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<<END_MOD>com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return (<START_MOD>(<END_MOD>aId.equals(k.aId)) && (bId.equals(k.bId))<START_MOD>) && (ignoreWhitespace.equals(k.ignoreWhitespace))<END_MOD>; } return false; }
private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData>> extensions = <START_MOD>scanner<END_MOD>.scan(pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }
<START_MOD>@java.lang.Override public void createBranch(com.google.gerrit.extensions.api.projects.BranchInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { createBranchFactory.create(in.ref).apply(project, in); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot create branch", e); } }<END_MOD>
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case <START_MOD>READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_ACCESS : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_ACCESS : return isOwner(); case <END_MOD>SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm +   unsupported }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> result) { result.copyKeysIntoChildren("path"); files = result.values(); int index = 0; for (int i = 0; i < (result.size()); i++) { if (path.equals(files.get(i).path())) { index = i; } } setupNav(com.google.gerrit.client.diff.NavLinks2.Nav.PREV, (index == 0 ? null : files.get((index - 1)))); setupNav(com.google.gerrit.client.diff.NavLinks2.Nav.NEXT, (index == ((files.length()) - 1) ? null : files.get((index + 1)))); }<END_MOD>
public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn(( get patch list:   + (e.getMessage()))); } catch (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn( get patch list e); } }
<START_MOD>public void addEmail(com.google.gerrit.reviewdb.client.AccountGroup.UUID group) { groups.add(group); }<END_MOD>
@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try { <START_MOD>try (<END_MOD>java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into))<START_MOD>)<END_MOD> { ser.writeObject(from); ser.flush(); } } catch (java.io.IOException err) { throw new java.lang.RuntimeException( hash as Serializable err); } }
@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, "foo2",   b "b.txt",   content approve(changeId2); testRepo.reset("HEAD~2"); java.lang.String collidingChange = createChangeWithTopic(testRepo, "off_topic",   file b "b.txt", "garbage\ngarbage\ngarbage").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get("submit"); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo( whole topic assertThat(info.method).isEqualTo("POST"); assertThat(info.title).isEqualTo( <START_MOD>with<END_MOD>: 2 } else { noSubmitWholeTopicAssertions(actions, 1); } }
public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { <START_MOD>try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { <END_MOD>return asPatchSetAttribute(<START_MOD>db, <END_MOD>revWalk, patchSet); }<START_MOD> catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.events.EventFactory.log.error( open database connection e); return new com.google.gerrit.server.data.PatchSetAttribute(); } }<END_MOD>
public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase("gitweb"))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("?p=${project}.git;a=summary"); type.setRevision("?p=${project}.git;a=commit;h=${commit}"); type.setBranch("?p=${project}.git;a=shortlog;h=${branch}"); <START_MOD>type.setFileHistory("?p=${project}.git;a=history;hb=${branch};f=${file}"); <END_MOD>} else if (name.equalsIgnoreCase("cgit")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("${project}/summary"); type.setRevision("${project}/commit/?id=${commit}"); type.setBranch("${project}/log/?h=${branch}"); <START_MOD>type.setFileHistory("${project}/history/?hb=${branch};f=${file}"); <END_MOD>} else if (name.equalsIgnoreCase("custom")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }
<START_MOD>public com.google.gerrit.server.notedb.rebuild.SiteRebuilder setThreads(int threads) { executor = (threads > 1) ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, "RebuildChange")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService(); return this; }<END_MOD>
@java.lang.SuppressWarnings("unchecked") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.<START_MOD>setAllowFileRegexWithoutLucene<END_MOD>(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else <START_MOD>if ((p.getType()) == (com.google.gerrit.server.index.FieldType.FULL_TEXT)) { return fullTextQuery(p); } else <END_MOD>{ throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }
<START_MOD>private static boolean isSafe(org.spearce.jgit.lib.RepositoryConfig cfg, java.lang.String type, boolean d) { return cfg.getBoolean(com.google.gerrit.server.FileTypeRegistry.SECTION_MIMETYPE, type, com.google.gerrit.server.FileTypeRegistry.KEY_SAFE, d); }<END_MOD>
<START_MOD>abstract java.util.List<org.eclipse.jgit.diff.Edit> edits();<END_MOD>
public java.util.concurrent.Callable<java.lang.Void> reindexProject(com.google.gerrit.server.index.change.ChangeIndexer indexer, com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.git.MultiProgressMonitor.Task done, com.google.gerrit.server.git.MultiProgressMonitor.Task failed, java.io.PrintWriter verboseWriter) { return <START_MOD>() -><END_MOD> { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; }<START_MOD>; }<END_MOD>
<START_MOD>public static java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> sortChangeMessages(java.lang.Iterable<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessage) { return ChangeNotes.MESSAGE_BY_TIME.sortedCopy(changeMessage); }<END_MOD>
@com.google.gwtorm.client.Relation<START_MOD>(id = 26)<END_MOD> com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();
protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((<START_MOD>caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException<END_MOD>) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }
<START_MOD>@java.lang.Override protected void beforeTestServerStarts() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { setPluginConfigString("dbType", "h2"); setPluginConfigString("database", (((testSite) + "/db/") + "TestCiDB")); }<END_MOD>
private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc<START_MOD>, boolean cc<END_MOD>) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control)<START_MOD>, cc<END_MOD>); } return result; }
@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRepository(), ctx.getRevWalk(), priorCommitId, commitId); if (checkMergedInto) { <START_MOD>java.lang.String mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto); } } if (updateRef) { ctx.addRefUpdate(new <END_MOD>org.eclipse.jgit.<START_MOD>transport.ReceiveCommand(org.eclipse.jgit.<END_MOD>lib.<START_MOD>ObjectId.zeroId(), commitId<END_MOD>, patchSetId.toRefName())); } }
<START_MOD>private static boolean gtEq(com.google.gerrit.server.query.change.LabelPredicate p) { return LabelPredicate.Test.GT_EQ.equals(p); }<END_MOD>
public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gwt.user.client.rpc.AsyncCallback<<START_MOD>com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.client.changes.ChangeFileApi.FileContent<END_MOD>> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(com.google.gerrit.client.changes.ChangeFileApi.<START_MOD>decode<END_MOD>(cb)); }
private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); diffView.setEnabled(on); <START_MOD>loser.setEnabled(on); <END_MOD>}
private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append("\r").append(taskName).append(':'); if (!(tasks.isEmpty())) { boolean first = true; for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { int count = t.count; if (count == 0) { continue; } if (!first) { s.append(','); } else { first = false; } s.append(   <START_MOD>t.format(s); } } if ((spinnerState) != <END_MOD>(com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append( ( } return s; }
@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwner("refs/heads/x/*", uDev); assertOwner("refs/heads/x/y", uDev); assertOwner("refs/heads/x/y/*", uDev); assertNotOwner("refs/*", uDev); assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwner("refs/heads/x/y/*", uFix); assertOwner("refs/heads/x/y/bar", uFix); assertNotOwner("refs/heads/x/*", uFix); assertNotOwner("refs/heads/x/y", uFix); assertNotOwner("refs/*", uFix); assertNotOwner("refs/heads/master", uFix); }
<START_MOD>@org.junit.Test public void testByUUID() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID("d96b998f8a66ff433af50befb975d0e2bb6e0999"); com.google.gerrit.common.data.GroupReference groupReference = classUnderTest.byUUID(uuid); assertEquals(uuid, groupReference.getUUID()); assertEquals("Non-Interactive Users", groupReference.getName()); }<END_MOD>
<START_MOD>public java.lang.String[] getAllBasePaths() { java.util.List<java.lang.String> basePaths = new java.util.ArrayList<>(); for (java.lang.String subSection : cfg.getSubsections(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME)) { java.lang.String basePath = cfg.getString(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME, subSection, com.google.gerrit.server.config.RepositoryConfig.BASE_PATH_NAME); if (basePath != null) { basePaths.add(basePath); } } return basePaths.toArray(new java.lang.String[basePaths.size()]); }<END_MOD>
@java.lang.Override public java.lang.String toString() { <START_MOD>if ((runnable) instanceof com.google.common.util.concurrent.ListenableFutureTask<?>) { java.lang.String errorMessage; try { for (java.lang.reflect.Field field : com.google.common.util.concurrent.ListenableFutureTask.class.getSuperclass().getDeclaredFields()) { if (field.getType().isAssignableFrom(java.util.concurrent.Callable.class)) { field.setAccessible(true); <END_MOD>return <START_MOD>((java.util.concurrent.Callable<?>) (field.get(<END_MOD>runnable<START_MOD>))).toString(); } } errorMessage =   find wrapped Callable field } catch (java.lang.SecurityException | java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { errorMessage =   get call toString on Callable field } com.google.gerrit.server.git.WorkQueue.log.debug( get a proper name for ListenableFutureTask: {} errorMessage); } return runnable.toString(); }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { new com.google.gerrit.client.changes.CommitMessageBlock.EditCommitMessageActionDialog() { { message.setText(commitMessage); } @java.lang.Override public void onSend() { Util.MANAGE_SVC.editCommitMessage(patchSetId, getMessageText(), createCallback()); } }.center(); }<END_MOD>
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { if (itr.hasNext()) { <START_MOD>com.google.gerrit.httpd.AllRequestFilter filter = <END_MOD>itr.next()<START_MOD>; if (!(initializedFilters.contains(filter))) { initFilter(filter); } filter<END_MOD>.doFilter(req, res, this); } else { last.doFilter(req, res); } }
@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec( ls-groups assertTrue(result.contains("Administrators")); assertTrue(result.contains( Users assertTrue(result.contains( <START_MOD>Owners assertTrue(result.contains( <END_MOD>Users assertTrue(result.contains( Owners assertTrue(result.contains( Users session.close(); }
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && ((p.getRevision().get()) != null)) { if (java.util.Objects.equals(p.getRevision().get(), <START_MOD>getValue()<END_MOD>)) { return true; } } } return false; }
<START_MOD>@org.junit.Test public void toggleWorkInProgressState() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); gApi.changes().id(changeId).setWorkInProgress("Needs some refactoring"); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.wip).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains("Needs some refactoring"); gApi.changes().id(changeId).setReadyForReview("PTAL"); info = gApi.changes().id(changeId).get(); assertThat(info.wip).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains("PTAL"); }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception {<START_MOD> when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true);<END_MOD> servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()<START_MOD>, currentUserProviderMock<END_MOD>); }
<START_MOD>void setLineLength(int columns) { double w = columns * (getCharWidthPx()); columnMargin.getStyle().setMarginLeft(w, Style.Unit.PX); }<END_MOD>
public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return (((<START_MOD>(<END_MOD>conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && (<START_MOD>activeForProject(conf, projectName.get()))) && (<END_MOD>(((!(hasCriteria(conf, "skipGroup"))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No such account: " + (rsrc.getUser().getAccountId()))); } if (a.isActive()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } a.setActive(true); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""); }<END_MOD>
<START_MOD>private net.codemirror.lib.CodeMirror.RenderLineHandler resizeEmptyLine(final com.google.gerrit.common.changes.Side side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(final net.codemirror.lib.CodeMirror instance, final net.codemirror.lib.CodeMirror.LineHandle handle, final com.google.gwt.dom.client.Element element) { if (linePaddingWidgetMap.containsKey(handle)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper pair = linePaddingWidgetMap.get(handle); int myLineHeight = element.getOffsetHeight(); com.google.gwt.dom.client.Element otherPadding = pair.getElement(); if (!(pair.isCommon())) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, myLineHeight); } else { lineElementMap.put(handle, element); int otherLine = mapper.lineOnOther(side, instance.getLineNumber(handle)).getLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm(instance).getLineHandle(otherLine); if (lineElementMap.containsKey(other)) { com.google.gwt.dom.client.Element otherElement = lineElementMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingWidgetMap.get(other).getElement(); int delta = myLineHeight - (otherElement.getOffsetHeight()); if (delta >= 0) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, delta); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, 0); } else { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, 0); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, (-delta)); } } } } }); } } }; }<END_MOD>
<START_MOD>@org.junit.After public void cleanUp() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); try { com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, ((com.google.gerrit.reviewdb.client.RefNames.REFS_USERS_DEFAULT) + ":defaults")); } catch (org.eclipse.jgit.api.errors.TransportException e) { if (e.getMessage().equals((("Remote does not have " + (com.google.gerrit.reviewdb.client.RefNames.REFS_USERS_DEFAULT)) + " available for fetch."))) { return; } throw e; } allUsersRepo.reset("defaults"); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), allUsersRepo, "Delete default preferences", VersionedAccountPreferences.PREFERENCES, ""); push.rm(RefNames.REFS_USERS_DEFAULT).assertOkStatus(); }<END_MOD>
void deleteChecked() { final java.util.HashSet<<START_MOD>java.lang.Integer<END_MOD>> <START_MOD>sequenceNumbers<END_MOD> = new java.util.HashSet<<START_MOD>java.lang.Integer<END_MOD>>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { <START_MOD>sequenceNumbers<END_MOD>.add(<START_MOD>k.seq()); } } if (sequenceNumbers.isEmpty()) { updateDeleteButton(); } else { com.google.gerrit.client.account.AccountApi.deleteSshKeys("self", sequenceNumbers, <END_MOD>new com.google.gerrit.client.rpc.GerritCallback<com.google.<START_MOD>gerrit.client<END_MOD>.VoidResult>() { public void onSuccess(<START_MOD>com.google.gerrit.client.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { <END_MOD>final com.google.<START_MOD>gerrit.client.account.SshKeyInfo k<END_MOD> = getRowItem(row); if ((k != null) && (<START_MOD>sequenceNumbers<END_MOD>.contains(k.seq()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } <START_MOD>@java.lang.Override public void onFailure(java.lang.Throwable caught) { refreshSshKeys(); super.onFailure(caught); } }); } }<END_MOD>
private void preMerge(<START_MOD>final com.google.gerrit.reviewdb.client.Project.SubmitType submitType, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge<END_MOD>) throws com.google.gerrit.server.git.MergeException { final com.google.gerrit.server.git.SubmitStrategy strategy = createStrategy(<START_MOD>submitType<END_MOD>); mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }
void init(com.google.gerrit.client.diff.PreferencesAction pa<START_MOD>, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links<END_MOD>, java.util.List<com.google.gerrit.client.DiffWebLinkInfo> webLinks) { prefsAction = pa; prefsAction.setPartner(preferences); if (webLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : webLinks) { webLinksPanel.add(webLink.toAnchor()); } } <START_MOD>if (links != null) { for (com.google.gerrit.client.ui.InlineHyperlink link : links) { webLinksPanel.add(link); <END_MOD>}<START_MOD> } }<END_MOD>
public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); <START_MOD>fsHandler.assertCanDelete(rsrc); <END_MOD>} catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
<START_MOD>public void fromRange(com.google.gerrit.extensions.common.Comment.Range r) { range = ((range) == null) ? null : new com.google.gerrit.reviewdb.client.CommentRange(range.startLine, range.startCharacter, range.endLine, range.endCharacter); }<END_MOD>
@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); <START_MOD>factory(NotesBranchUtil.Factory.class); <END_MOD>} }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); }
public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : case DESCRIBE : case REFS : case LOG : break; default : checkState((path == null),   set path on %s view type); <START_MOD>break; } <END_MOD>this.path = <START_MOD>(<END_MOD>path<START_MOD> != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null<END_MOD>; return this; }
private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { <START_MOD>int startA = mapper.getLineA(); int startB = mapper.getLineB(); <END_MOD>com.google.<START_MOD>gwt.core<END_MOD>.client.<START_MOD>JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB);<END_MOD> mapper<START_MOD>.appendReplace(aLen, bLen); int endA = (<END_MOD>mapper.getLineA()<START_MOD>) - 1; int endB = (<END_MOD>mapper.getLineB()<START_MOD>) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk<END_MOD>(cmA, endA<START_MOD>,<END_MOD> endB<START_MOD>, bLen,<END_MOD> (aLen > 0)); } }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()),   <START_MOD>account<END_MOD> and groupControl do not match }
protected void postExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.postExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(<START_MOD>reloadButton); if ((<END_MOD>initialProgress<START_MOD>.getVisibility()) != (android.view.View.GONE)) { setGone(initialProgress); com.google.reviewit.util.TaskObserver.enableProgressBar(getWindow()); } if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp()<END_MOD>, <START_MOD>change); changeList.addView(changeEntry); addSeparator(changeList); } } else<END_MOD> { statusText.setText(getString(R.string.no_changes_match)); } }
private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { <START_MOD>org.eclipse.jgit.lib.Config pluginCfg = configFactory.getGlobalPluginConfig(pluginName); java.lang.String section = "s3"; java.lang.String region = pluginCfg.getString(section, null, "region"); java.lang.String bucket = pluginCfg.getString(section, null, "bucket"); java.lang.String storageClass = <END_MOD>com.google.<START_MOD>common.base.MoreObjects.firstNonNull(pluginCfg.getString(section, null, "storageClass"), "REDUCED_REDUNDANCY"); int expirationSeconds = pluginCfg.getInt(section, null, "expirationSeconds", 60); boolean disableSslVerify = pluginCfg.getBoolean(section, null, "disableSslVerify", false); com.google.<END_MOD>gerrit.server.config.PluginConfig cfg = configFactory.getFromGerritConfig(pluginName); java.lang.String <START_MOD>accessKey = cfg.getString("accessKey", null); java.lang.String secretKey = cfg.getString("secretKey", null); return new org.eclipse.jgit.lfs.server.s3.S3Config(<END_MOD>region<START_MOD>,<END_MOD> bucket<START_MOD>,<END_MOD> storageClass<START_MOD>,<END_MOD> accessKey<START_MOD>,<END_MOD> secretKey<START_MOD>,<END_MOD> expirationSeconds<START_MOD>,<END_MOD> disableSslVerify); }
private boolean areChangesSubmittable(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.canSubmit())) { return false; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error(( to get a ChangeControl for Change.Id   + (java.lang.String.valueOf(c.getId()))), e); return false; } } <START_MOD>for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.extensions.restapi.ResourceConflictException e) { <END_MOD>return <START_MOD>false; } } return <END_MOD>true; }
protected void displayPopup() { <START_MOD>calculatePopupCoordinates<END_MOD>(); <START_MOD>projectListPopup<END_MOD>.<START_MOD>display<END_MOD>(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } }
java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name<START_MOD>, @javax.annotation.Nullable com.google.gerrit.reviewdb.client.Project project<END_MOD>);
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try {<START_MOD> checkRequiresCapability();<END_MOD> super.service(req, res); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws<START_MOD> com.google.gerrit.extensions.restapi.BadRequestException,<END_MOD> com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.<START_MOD>gerrit.server.permissions.PermissionBackendException, com.google.<END_MOD>gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) <START_MOD>|| (input.noConfirmation)) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if<END_MOD> (!(<START_MOD>com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email<END_MOD>))) { throw new com.google.gerrit.extensions.restapi.<START_MOD>BadRequestException(<END_MOD> email address } if (<START_MOD>!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw<END_MOD> new com.google.gerrit.extensions.<START_MOD>restapi.MethodNotAllowedException( does not allow adding emails } return apply(rsrc.getUser(), input<END_MOD>); }
<START_MOD>@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if ((ssoUrl) != null) { java.lang.String token = com.google.gerrit.httpd.auth.openid.LoginForm.getToken(req); com.google.gerrit.httpd.auth.openid.SignInMode mode; if (PageLinks.REGISTER.equals(token)) { mode = SignInMode.REGISTER; token = com.google.gerrit.common.PageLinks.MINE; } else { mode = SignInMode.SIGN_IN; } discover(req, res, false, ssoUrl, false, token, mode); } else { boolean link = (req.getParameter("link")) != null; sendForm(req, res, link, null); } }<END_MOD>
private com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>ProjectSubmitType<END_MOD> getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }
@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); <START_MOD>alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { <END_MOD>updateRepoImpl(ctx); <START_MOD>} <END_MOD>com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { return; } else if (tipAfter == null) { logDebug( merge tip, no update to perform return; } checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }
private java.lang.String getLatestRemoteDiff() throws java.<START_MOD>lang<END_MOD>.<START_MOD>Exception<END_MOD> { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve("refs/heads/master~1^{tree}"); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve("refs/heads/master^{tree}"); return getLatestDiff(repo, oldTreeId, newTreeId); } }
<START_MOD>@java.lang.Override public void afterUpdateChange() throws com.google.gerrit.extensions.restapi.ResourceConflictException { commits.maybeFail("Error updating status"); }<END_MOD>
public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null<START_MOD>, null<END_MOD>); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail()<START_MOD>, acct.getPreferredUserName()<END_MOD>); }
<START_MOD>final native void add(java.lang.String k);<END_MOD>
<START_MOD>public java.util.Comparator<java.lang.String> nameComparator() { final java.util.Map<java.lang.String, java.lang.Integer> positions = positions(); return new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String left, java.lang.String right) { java.lang.Integer lp = positions.get(left); java.lang.Integer rp = positions.get(right); if (lp == rp) { return 0; } else if (lp == null) { return -1; } else if (rp == null) { return 1; } else { return lp - rp; } } }; }<END_MOD>
@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL<START_MOD>, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS<END_MOD>, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }
<START_MOD>public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy getDefaultCommentVisibilityStrategy() { if ((defaultCommentVisibilityStrategy) == null) { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.EXPAND_MOST_RECENT; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf(defaultCommentVisibilityStrategy); }<END_MOD>
public static void deleteEdit(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id<START_MOD>, project<END_MOD>).delete(cb); }
<START_MOD>private static java.lang.String recipientMapToString(java.util.Map<com.google.gerrit.acceptance.RecipientType, java.util.List<java.lang.String>> recipients) { java.lang.StringBuilder buf = new java.lang.StringBuilder(); buf.append('['); for (com.google.gerrit.acceptance.RecipientType type : com.google.common.collect.ImmutableList.of(com.google.gerrit.acceptance.TO, com.google.gerrit.acceptance.CC, com.google.gerrit.acceptance.BCC)) { buf.append('\n'); buf.append(type); buf.append(':'); java.lang.String delim = " "; for (java.lang.String r : recipients.get(type)) { buf.append(delim); buf.append(com.google.gerrit.acceptance.AbstractNotificationTest.stripUniqueSuffix(r)); delim = ", "; } } buf.append("\n]"); return buf.toString(); }<END_MOD>
static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException {<START_MOD> if (canonicalURL == null) { return ""; }<END_MOD> java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll("/$", ""); }
<START_MOD>private com.google.gerrit.server.events.DependencyAttribute newNeededBy(com.google.gerrit.reviewdb.Change c, com.google.gerrit.reviewdb.PatchSet ps) { return newDependencyAttribute(c, ps); }<END_MOD>
private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { <START_MOD>checkVisibility(cmd); <END_MOD>if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains("//"))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd,   valid ref continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); return com.google.common.collect.ImmutableMap.of("cloneUrl", desc.cloneUrl, "description", com.google.common.base.Strings.nullToEmpty(desc.description), "branches", getRefs(req, Constants.R_HEADS<START_MOD>, com.google.common.collect.Ordering.from(RefComparator.INSTANCE)<END_MOD>), "tags", getRefs(req, Constants.R_TAGS<START_MOD>, tagComparator(req)<END_MOD>)); }
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { <START_MOD>com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); <END_MOD>try { <START_MOD>if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { <END_MOD>java.lang.Class<<START_MOD>?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<<END_MOD>com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
private void showCLA(com.google.gerrit.<START_MOD>client.account.AgreementInfo<END_MOD> cla) { current = cla; java.lang.String url = cla.<START_MOD>url<END_MOD>(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith("http:"))) && (!(url.startsWith("https:")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader("Content-Type"); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals("text/html")) || (ct.startsWith("text/html;")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.<START_MOD>autoVerifyGroup<END_MOD>()) != null)); yesIAgreeBox.setText(""); submit.setEnabled(false); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format(( configured name '%s' for system <START_MOD>account<END_MOD> '%s' is ambiguous + (( with the name '%s' of existing <START_MOD>account<END_MOD> '%s'. +   Please remove/change the value for groups.%s.name in +   gerrit.config. groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); LabelInfo q = c.labels.get(Q.getName()); <START_MOD>assertThat<END_MOD>(q.all.size())<START_MOD>.isEqualTo(1)<END_MOD>; <START_MOD>assertThat<END_MOD>(q.disliked)<START_MOD>.isNull()<END_MOD>; <START_MOD>assertThat<END_MOD>(q.rejected)<START_MOD>.isNotNull()<END_MOD>; <START_MOD>assertThat<END_MOD>(q.blocking)<START_MOD>.isTrue()<END_MOD>; }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef("g-1",   = uuid-2 = g-2 java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(( with name 'g-1' has UUID 'uuid-1' in <START_MOD>'account.config'<END_MOD> but 'uuid-2' in <START_MOD>account<END_MOD>   +   notes warning( note of name 'g-1' claims to represent name of 'g-2' }
<START_MOD>@com.google.gwtorm.client.Query("") com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.ActiveSession> all() throws com.google.gwtorm.client.OrmException;<END_MOD>
private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(( (%s:%s - %s:%s) is not +   valid for the comment on %s range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }
<START_MOD>public org.parboiled.Rule cols() { org.parboiled.support.StringBuilderVar body = new org.parboiled.support.StringBuilderVar(); return NodeSequence(colsTag(), Newline(), oneOrMore(testNot(colsTag(), Newline()), Line(body)), colsTag(), Newline(), push(new com.google.gitiles.doc.ColsNode(parse(body).getChildren()))); }<END_MOD>
<START_MOD>private java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws com.google.gerrit.extensions.restapi.BadRequestException { if (input == null) { return java.util.Collections.emptySet(); } else { java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains(",")) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Hashtags may not contain commas"); } if (!(hashtag.trim().isEmpty())) { result.add(hashtag.trim()); } } return result; } }<END_MOD>
private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = new java.util.HashMap<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>>(); com.google.gerrit.common.data.AccessSection section = state.getConfig().getAccessSection(AccessSection.GLOBAL_CAPABILITIES); <START_MOD>if (section != null) { <END_MOD>for (com.google.gerrit.common.data.Permission permission : section.getPermissions()) { for (com.google.gerrit.common.data.PermissionRule rule : permission.getRules()) { if (matchGroup(rule.getGroup().getUUID())) { if (!(rule.getDeny())) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = permissions.get(permission.getName()); if (r == null) { r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(2); permissions.put(permission.getName(), r); } r.add(rule); } } } } } <START_MOD>} <END_MOD>return permissions; }
public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps<START_MOD>, true<END_MOD>); }
<START_MOD>public boolean getPreferIPv4() { return preferIPv4; }<END_MOD>
@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((caught<START_MOD> instanceof com.google.gwtjsonrpc.client.RemoteJsonException<END_MOD>) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } }
<START_MOD>private boolean canReadRef(java.lang.String ref) { try { return permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).test(RefPermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error("unable to check permissions", e); return false; } }<END_MOD>
<START_MOD>private <T> com.google.gerrit.client.rpc.HttpCallback<T> handleAdd(com.google.gerrit.client.rpc.HttpCallback<T> cb) { checkFinalAdded(); if (failed) { cb.onFailure(failedThrowable); return new com.google.gerrit.client.rpc.HttpCallback<T>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<T> result) { } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }; } com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl<T> w = new com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl(cb); callbacks.add(w); remaining.add(w); return w; }<END_MOD>
<START_MOD>void adjustGutters() { for (com.google.gerrit.client.diff.SidePanel.GutterWrapper info : gutters) { adjustGutter(info); } }<END_MOD>
public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = (cd != null) ? cd.reviewers().values() : approvalsUtil.getReviewers(db, <START_MOD>notes<END_MOD>).values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }
@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.<START_MOD>key<END_MOD>().<START_MOD>toString<END_MOD>()); }
public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups; if (((projects) != null) && (!(projects.isEmpty()))) { groups = getGroupsForProjects(); } else <START_MOD>if ((user) != null) { groups = getGroupsForUser(); } else <END_MOD>{ groups = groupCache.all(); } return createGroupList(filterGroups(groups)); }
@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ?   : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ?   : 1; int cmp = ai - bi; if (cmp == 0) <START_MOD>{ cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) <END_MOD>&& (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { <START_MOD>com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { <END_MOD>ai = (((com.google.gerrit.server.query.change.ChangeDataSource) (a)).hasChange()) ?   : 1; bi = (((com.google.gerrit.server.query.change.ChangeDataSource) (b)).hasChange()) ?   : 1; cmp = ai - bi; } <START_MOD>return cmp<END_MOD>; }
public boolean isOwner() {<START_MOD> if (!(group.hasOwnerGroupId())) { isOwner = false; } else<END_MOD> if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup g = groupCache.get(group.getOwnerGroupId()); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = (g != null) ? g.getGroupUUID() : null; isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; }
@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = <START_MOD>com.google.gerrit.server.account.AccountSshKey.create<END_MOD>(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.<START_MOD>valid<END_MOD>()).isFalse(); key = <START_MOD>com.google.gerrit.server.account.AccountSshKey.create(<END_MOD>new com.google.gerrit.server.account.AccountSshKey<START_MOD>.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create<END_MOD>(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, <START_MOD>1<END_MOD>), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.<START_MOD>valid<END_MOD>()).isTrue(); }
<START_MOD>public void evict(com.google.gerrit.reviewdb.Project.NameKey nameKey) { controls.remove(nameKey); }<END_MOD>
public void run() throws java.lang.Exception { ui.header( Code Review %s com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true,   '%s' site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die( by user } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(( make directory   + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.<START_MOD>mail_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.<END_MOD>static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, "gerrit.sh"); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); <START_MOD>extractMailExample("Merged.vm"); <END_MOD>if (!(ui.isBatch())) { java.lang.System.err.println(); } }
@java.lang.Override public void run() { try { java.<START_MOD>util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Output><END_MOD> content = <START_MOD>processor<END_MOD>.get(); if (<START_MOD>!(content.isPresent()<END_MOD>)) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug( content. Webhook [{}] skipped. url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content<START_MOD>.get().headers, content.get().body<END_MOD>); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error( to post: {} toString(), e); } } }
<START_MOD>private java.lang.String getCommentTimestamp() { return MailUtil.rfcDateformatter.print(new org.joda.time.DateTime(timestamp)); }<END_MOD>
private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case   : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : return <START_MOD>autoMerger<END_MOD>.<START_MOD>merge<END_MOD>(repo, walk, b, mergeStrategy<START_MOD>).getTree(<END_MOD>); default : return null; } }
public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { <START_MOD>if ((members.size()) == 1) { java.lang.String m = members.iterator().next(); new <END_MOD>com.google.gerrit.client.rpc.RestApi<START_MOD>((((com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)) + "/") + m)).put(cb); } else { com.google.gerrit.client.rpc.RestApi<END_MOD> call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); }<START_MOD> }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); <START_MOD>changeId = newChange(git, admin.getIdent()); ps = getCurrentPatchSet(changeId); amendChange(changeId); change = getChange(changeId); assertNotNull(ps); <END_MOD>java.lang.String <START_MOD>changeId2 = newChange2<END_MOD>(git, admin.getIdent()); <START_MOD>change2<END_MOD> = getChange(<START_MOD>changeId2); assertNotNull(change2); ps2<END_MOD> = getCurrentPatchSet(<START_MOD>changeId2<END_MOD>); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); }
<START_MOD>public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return filterLinks(fileLogLinks, new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.extensions.common.WebLinkInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo apply(com.google.gerrit.extensions.webui.WebLink webLink) { return ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); } }); }<END_MOD>
@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (<START_MOD>isSessionValid(req)) { chain.doFilter(request, response); } else<END_MOD> { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader("Content-Encoding", "gzip"); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } <START_MOD>}<END_MOD>
@java.lang.Override protected void onLoad() { super.onLoad(<START_MOD>); add(new com.google.gerrit.client.api.ExtensionPanel(com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN)<END_MOD>); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try { <START_MOD>try (<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()<START_MOD>)<END_MOD> { db.accountGroupMembersAudit().insert(auditInserts); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts( log add accounts to group event performed by user me, added, e); } }
@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + ".secure.config"; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(( load   + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(<START_MOD>java.util.Arrays.asList(<END_MOD>cfg.getStringList(section, subsection, name))<START_MOD>)<END_MOD>.transform(decode).toArray(java.lang.String.class) : null; }
@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, <START_MOD>new org.eclipse.jgit.revwalk.RevWalk(repo), <END_MOD>com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(( path too long:   + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.<START_MOD>getNativeKeyCode<END_MOD>()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } }
<START_MOD>private org.eclipse.jgit.lib.Config readProjectConfig() throws java.lang.Exception { git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec("refs/meta/config:refs/meta/config")).call(); testRepo.reset(RefNames.REFS_CONFIG); org.eclipse.jgit.revwalk.RevWalk rw = testRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(testRepo.getRepository().resolve("HEAD")); org.eclipse.jgit.revwalk.RevObject obj = rw.parseAny(testRepo.get(tree, "project.config")); org.eclipse.jgit.lib.ObjectLoader loader = rw.getObjectReader().open(obj); java.lang.String text = new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(text); return cfg; }<END_MOD>
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0),   <START_MOD>account<END_MOD> assertServerCommit(log.get(1), ( <START_MOD>account<END_MOD> + (((("\n" +   Account 1 <1@server-id> +   Account 2 <2@server-id> +   Group <x> +   Group <y> }
private void styleLastCommentCell(final int row, final int col<START_MOD>, boolean highlight<END_MOD>) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); <START_MOD>if (highlight) { fmt.addStyleName(row, col, Gerrit.RESOURCES.css().publishedFileCommentHolder()); <END_MOD>}<START_MOD> }<END_MOD>
public GroupDescription.Basic parse(java.lang.String id) { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(id); if (groupBackend.handles(uuid)) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(uuid); if (d != null) { return d; } } if (id.matches("^[1-9][0-9]*$")) { try { com.google.gerrit.reviewdb.client.AccountGroup.Id legacyId = AccountGroup.Id.parse(id); return groupControlFactory.controlFor(legacyId).getGroup(); } catch (java.lang.IllegalArgumentException invalidId) { } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { } } com.google.gerrit.common.data.GroupReference ref = com.google.gerrit.server.account.GroupBackends.findExactSuggestion(groupBackend, id); if (ref != null) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(ref.getUUID()); if (d != null) { return d; } } <START_MOD>return null; }<END_MOD>
public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); return loggedIn; }
<START_MOD>public void deleteDraftPatchSet(final com.google.gerrit.reviewdb.PatchSet.Id psid, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.patch.Action<com.google.gwtjsonrpc.client.VoidResult>() { public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if ((!(cc.isOwner())) || (!(cc.isVisible(db)))) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; } }); }<END_MOD>
@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? <START_MOD>andSourceFactory<END_MOD>.<START_MOD>create<END_MOD>(l) : super.and(l); }
<START_MOD>@com.google.gwt.uibinder.client.UiHandler("rebase") void onRebase(com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.change.RebaseAction.call(changeId, revision); }<END_MOD>
<START_MOD>@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), "").getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.server.group.db.GroupBundle newBundle = bundleFactory.fromNoteDb(repo, uuid); assertThat(newBundle.group()).isEqualTo(oldBundle.group()); assertThat(newBundle.members()).isEqualTo(oldBundle.members()); assertThat(newBundle.memberAudit()).isEqualTo(oldBundle.memberAudit()); assertThat(newBundle.byId()).isEqualTo(oldBundle.byId()); assertThat(newBundle.byIdAudit()).isEqualTo(oldBundle.byIdAudit()); } }<END_MOD>
<START_MOD>@<END_MOD>com.google.gerrit.<START_MOD>common<END_MOD>.<START_MOD>Nullable public abstract java<END_MOD>.<START_MOD>lang<END_MOD>.<START_MOD>Boolean<END_MOD> <START_MOD>_private<END_MOD>();
private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { <START_MOD>int<END_MOD> currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision()).<START_MOD>_number<END_MOD>(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1)).<START_MOD>_number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).<END_MOD>id()<START_MOD>.equals("edit")) {<END_MOD> currentlyViewedPatchSet = <START_MOD>(edit.basedOnPatchSet()) + "[edit]"; currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = <END_MOD>info.revision(revision).id(); <START_MOD>} <END_MOD>patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { <START_MOD>assert_().withFailureMessage<END_MOD>(( group   + g)<START_MOD>).that(<END_MOD>actual.remove(g))<START_MOD>.isTrue()<END_MOD>; } <START_MOD>assert_().withFailureMessage<END_MOD>(( groups:   + actual)<START_MOD>).that(<END_MOD>actual<START_MOD>)<END_MOD>.isEmpty(); }
<START_MOD>@java.lang.Override public java.lang.String format(com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg, java.lang.String raw) throws java.io.IOException { return Asciidoctor.Factory.create().convert(raw, new java.util.HashMap<java.lang.String, java.lang.Object>()); }<END_MOD>
public <START_MOD>com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval><END_MOD> copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException( patch set could not be found } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); <START_MOD>com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.PatchSetApproval> patchSetApprovals = db.patchSetApprovals().byPatchSet(source); <END_MOD>for (com.google.gerrit.reviewdb.client.PatchSetApproval a : <START_MOD>patchSetApprovals<END_MOD>) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if ((type.getCategory().isCopyMinScore()) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } <START_MOD>return patchSetApprovals; }<END_MOD>
<START_MOD>@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse rsp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.security.cert.X509Certificate[] certs = ((java.security.cert.X509Certificate[]) (req.getAttribute("javax.servlet.request.X509Certificate"))); java.lang.String name = certs[0].getSubjectDN().getName(); java.util.regex.Matcher m = com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.REGEX_USERID.matcher(name); java.lang.String userName = null; if (m.matches()) { userName = m.group(1); } else { throw new javax.servlet.ServletException("Couldn't extract username from your certificate"); } final com.google.gerrit.server.account.AuthRequest areq = com.google.gerrit.server.account.AuthRequest.forUser(userName); final com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { java.lang.String err = ("Unable to authenticate user \"" + userName) + "\""; com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.log.error(err, e); throw new javax.servlet.ServletException(err, e); } webSession.get().login(arsp, true); chain.doFilter(req, rsp); }<END_MOD>
<START_MOD>public abstract com.google.gwt.user.client.rpc.AsyncCallback<T> createCallback();<END_MOD>
public void <START_MOD>testFindReplace<END_MOD>() { final java.lang.String find = "find"; final java.lang.String replace = "replace"; final com.google.gwtexpui.safehtml.client.<START_MOD>RawFindReplace<END_MOD> a = new com.google.gwtexpui.safehtml.client.<START_MOD>RawFindReplace<END_MOD>(find, replace); assertSame(find, a.find()); assertSame(replace, a.replace()); assertEquals(((( =   + find) +   replace =   + replace), a.toString()); }
<START_MOD>public final native com.google.gwt.core.client.JsArrayInteger messageAuthorIds();<END_MOD>
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put("git.repositoriesFolder", repoManager.getBasePath().getAbsolutePath()); properties.put("realm.userService", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); properties.put("web.otherUrls", (((<START_MOD>(((<END_MOD>config.getGitHttpUrl()) +     + (config.getGitSshUrl())).trim())<START_MOD> +     + (properties.get("web.otherUrls"))))<END_MOD>; } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }
public static void delete(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, <START_MOD>project, <END_MOD>path).delete(cb); }
<START_MOD>private com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }<END_MOD>
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); if (!(permissionsOnly)) { final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(projectName); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch<START_MOD>); createProject(repo<END_MOD>); repoManager.setProjectDescription(projectName, projectDescription); final com.google.gerrit.reviewdb.Project.NameKey project = new com.google.gerrit.reviewdb.Project.NameKey(projectName); rq.replicateNewProject(project, branch); if (createEmptyCommit) { createEmptyCommit(repo, project, branch); } } finally { repo.close(); } } } catch (java.lang.Exception e) { p.print((( when trying to create project:   + (e.getMessage())) + "\n")); p.flush(); } } }); }
private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) { <START_MOD>java.lang.String parm = arg.substring(0, eqPos); <END_MOD>parms.put(<START_MOD>parm, (dcmd.isSensitiveParameters(parm) ? com.google.gerrit.sshd.SshLog.MASK : <END_MOD>arg.substring(<START_MOD>(<END_MOD>eqPos + 1<START_MOD>)<END_MOD>))); continue; } if (arg.startsWith("-")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, <START_MOD>(dcmd.isSensitiveParameters(paramName) ? com.google.gerrit.sshd.SshLog.MASK : arg)<END_MOD>); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }
<START_MOD>private com.google.gerrit.reviewdb.client.PatchSetInfo newPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, int psId) { com.google.gerrit.reviewdb.client.PatchSetInfo ps = new com.google.gerrit.reviewdb.client.PatchSetInfo(new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, psId)); ps.setSubject("Change subject"); return ps; }<END_MOD>
@java.lang.Override public java.util.concurrent.Future<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return <START_MOD>executor<END_MOD>.submit(task); }
@java.lang.Override public boolean shouldPublish() { return <START_MOD>(<END_MOD>config.isEnabled()<START_MOD>) && (config.shouldNotifyOnCommentAdded())<END_MOD>; }
<START_MOD>@org.junit.Test public void changeMessageOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(changeOwner.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); update.setChangeMessage("Just a little code change.\nTesting new line"); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals("Just a little code change.\nTesting new line", changeMessages.get(0)); }<END_MOD>
<START_MOD>@java.lang.Override public int compareTo(com.google.gerrit.server.index.change.AllChangesIndexer.ProjectHolder other) { return (other.size) < (this.size) ? -1 : 1; }<END_MOD>
public void stop() { if (started) { final java.util.List<com.google.gerrit.<START_MOD>extensions.events<END_MOD>.LifecycleListener> t = new java.util.ArrayList<com.google.gerrit.<START_MOD>extensions.events<END_MOD>.LifecycleListener>(listeners.keySet()); for (int i = (t.size()) - 1;   <= i; i--) { final com.google.gerrit.<START_MOD>extensions.events<END_MOD>.LifecycleListener obj = t.get(i); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn( to stop err); } } started = false; } }
private java.lang.String healthCheckAccess() throws java.<START_MOD>io<END_MOD>.<START_MOD>IOException<END_MOD> { <START_MOD>try<END_MOD> <START_MOD>{<END_MOD> new com.googlesource.gerrit.plugins.its.jira.JiraClient(getUrl()<START_MOD>,<END_MOD> getUsername(), getPassword())<START_MOD>.sysInfo()<END_MOD>; <START_MOD>} catch (java<END_MOD>.<START_MOD>net.URISyntaxException e) { throw new java.io.IOException<END_MOD>(<START_MOD>e<END_MOD>);<START_MOD> }<END_MOD> final java.lang.String result = ("{\"status\"=\"ok\",\"username\"=\"" + (getUsername())) + "\"}"; log.debug( on access result: {} result); return result; }
<START_MOD>@java.lang.Override public T next() { return get(((index)++)); }<END_MOD>
<START_MOD>public static void setEditPreferences(com.google.gerrit.extensions.common.EditPreferencesInfo p) { com.google.gerrit.client.Gerrit.editPrefs = p; }<END_MOD>
<START_MOD>@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals("*")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.repo.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + ":") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.repo.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }<END_MOD>
@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (<START_MOD>(<END_MOD>caller == (java.lang.Thread.currentThread())) <START_MOD>|| (magicBranch.edit)) <END_MOD>{ return<START_MOD> magicBranch.edit ? upsertEdit() :<END_MOD> insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }
private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.<START_MOD>gwt.user<END_MOD>.client.ui.<START_MOD>FlowPanel p, com.google.gerrit.client.ui.<END_MOD>InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.<START_MOD>client.changes.ChangeInfo change) { if (change.owner().has_avatar_info()) { p.insert(new com.google.gerrit.client.AvatarImage(com.google.gerrit.client.account.AccountInfo.create(0, person.name(), person.email())), 0); } name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), change.<END_MOD>status<START_MOD>()<END_MOD>)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }
<START_MOD>public boolean isSafeInline() { return isSafeInline; }<END_MOD>
void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>api<END_MOD>.<START_MOD>changes<END_MOD>.ChangeType.DELETED)) { setVisibleB((!hide)); } }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = <START_MOD>com.google.gerrit.server.account.GpgKeys.parseFingerprint(id.get(), getGpgExtIds(parent)); try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = java.nio.ByteBuffer.wrap(fp).getLong(((fp.length) - 8))<END_MOD>; for (<START_MOD>org.bouncycastle.openpgp.PGPPublicKeyRing keyRing<END_MOD> : <START_MOD>store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey<END_MOD>(parent<START_MOD>.getUser(), keyRing)<END_MOD>; } <START_MOD>} }<END_MOD> throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId<START_MOD>, final java.lang.String label<END_MOD>) throws com.google.gwtorm.server.OrmException { <START_MOD>try (final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { <END_MOD>return com.google.common.collect.FluentIterable.from(<START_MOD>com.google.gerrit.server.StarredChangesUtil.<END_MOD>getRefNames(<START_MOD>repo, <END_MOD>RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("/" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } })<START_MOD>.filter(new com.google.common.base.Predicate<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.gerrit.server.StarredChangesUtil.readLabels(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(accountId, changeId)).contains(label); } catch (java.io.IOException e) { com.google.gerrit.server.StarredChangesUtil.log.error(java.lang.String.format( query stars by account %d on change %d accountId.get(), changeId.get()), e); return false; } } }); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format( accounts that starred change %d failed changeId.get()), e); } }<END_MOD>
public final boolean isHttpPasswordSettingsEnabled() { if ((gitBasicAuthPolicy()) == (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP)) { return false; } return true; }
@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); <START_MOD>columnMarginA.getStyle().setHeight(height, Unit.PX); columnMarginB.getStyle().setHeight(height, Unit.PX); <END_MOD>cmA.refresh(); cmB.refresh(); } }<START_MOD>); setLineLength(prefs.lineLength()<END_MOD>); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }
<START_MOD>@org.junit.Test public void testUpsertTwoUpdateCountsAreNull() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { stubExecuteBatchNull(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE); java.sql.PreparedStatement insert = stubExecuteBatchOK(com.google.gwtorm.jdbc.TestJdbcAccess.INSERT, 1, 1); createClassUnderTest().upsert(twoRows); verifyIds(insert, 1, 2); }<END_MOD>
<START_MOD>@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockAttr); mockAttr.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }<END_MOD>
private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule<START_MOD>()); modules.add(new com.google.gerrit.server.index.Module()); modules.add(com.google.gerrit.lucene.LuceneChangeIndex.module<END_MOD>()); modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); }
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>com.google.gerrit.client.rpc.CallbackGroup cbg = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.access.AccessMap.get<END_MOD>(getProjectKey(), <START_MOD>cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.access.ProjectAccessInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.access.ProjectAccessInfo result) { isOwner = result.isOwner(); enableForm(); saveProject.setVisible(isOwner); } })); com.google.gerrit.client.projects.ProjectApi.getParent(getProjectKey(), cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Project.NameKey result) { parent = result; } })); com.google.gerrit.client.projects.ProjectApi.getConfig(getProjectKey(), cbg.add(<END_MOD>new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.<START_MOD>client.projects.ConfigInfo<END_MOD>>(this) { <START_MOD>@java.lang.Override <END_MOD>public void preDisplay(<START_MOD>com.google.gerrit.client.projects.ConfigInfo result) {<END_MOD> display(result); } })<START_MOD>); cbg.done()<END_MOD>; savedPanel = INFO; }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); <START_MOD>change.setWip(wip); <END_MOD>return change; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(<START_MOD>boolean publishOnCommentAdded, boolean ignoreWipPrivate<END_MOD>) throws java.lang.Exception { <START_MOD>com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-private", true)).thenReturn(ignoreWipPrivate); <END_MOD>return <START_MOD>new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME<END_MOD>); }
private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.<START_MOD>user<END_MOD>.client.CopyableLabel(""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }
<START_MOD>@org.junit.Test public void historicalAssigneesChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setAssignee(otherUserId); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); update = newUpdate(c, changeOwner); update.setAssignee(changeOwner.getAccountId()); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(otherUserId); update.commit(); update = newUpdate(c, changeOwner); update.deleteAssignee(); update.commit(); notes = newNotes(c); assertThat(notes.getHistoricalAssignees()).hasSize(2); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); <START_MOD>com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.log.info( trigger for %s:%s by %d. Config: %s resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); <END_MOD>update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
<START_MOD>public java.util.Collection<com.google.gerrit.common.data.SubscribeSection> getInheritedSubscribeSections(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { java.util.Collection<com.google.gerrit.common.data.SubscribeSection> ret = new java.util.ArrayList<>(); for (com.google.gerrit.server.project.ProjectState s : tree()) { ret.addAll(s.getConfig().getSubscribeSections(branch)); } return ret; }<END_MOD>
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { <START_MOD>com.google.gerrit.server.IdentifiedUser user; <END_MOD>who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (<START_MOD>supportAutomaticAccountActivityUpdate.get()) { user = genericUserFactory.create(act.getId()); if ((who.isActive()) && (<END_MOD>!(act.isActive()))<START_MOD>) { try { setInactiveFlag.activate(user); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e)<END_MOD> { throw new com.google.gerrit.server.account.AccountException( <START_MOD>to activate account. e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(user); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException( to deactivate account. e); } } } act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException( <END_MOD>error, account inactive } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException( error e); } }
<START_MOD>static void configure(org.eclipse.jgit.lib.Config config, java.lang.String port) { config.setEnum("index", null, "type", IndexType.ELASTICSEARCH); config.setString("index", null, "protocol", "http"); config.setString("index", null, "hostname", "localhost"); config.setString("index", null, "port", port); config.setString("index", null, "name", "gerrit"); config.setBoolean("index", "elasticsearch", "test", true); }<END_MOD>
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.<START_MOD>extensions.api<END_MOD>.access.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.<START_MOD>extensions.api<END_MOD>.access.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage( group names config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } <START_MOD>com.google.gerrit.server.project.GetAccess ga = new com.google.gerrit.server.project.GetAccess(groupControlFactory, allProjectsName, projectJson); <END_MOD>access.put(p, <START_MOD>ga.apply(<END_MOD>new com.google.gerrit.server.<START_MOD>project.ProjectResource(pc))); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return <END_MOD>access<START_MOD>; }<END_MOD>
private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted<START_MOD>, ((revertOf) != null ? new com.google.gerrit.reviewdb.client.Change.Id(revertOf) : null)<END_MOD>); }
<START_MOD>public com.google.gerrit.server.notedb.ChangeUpdate load(com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return load(change, com.google.gerrit.server.util.TimeUtil.nowTs()); }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("update") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); <START_MOD>if (com.google.gerrit.client.Gerrit.isSignedIn()) { persistDiffPreferences(); <END_MOD>}<START_MOD> }<END_MOD>
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted<START_MOD>, com.google.gerrit.gpg.PublicKeyStore store<END_MOD>) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing<START_MOD>, checker, store<END_MOD>); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }
<START_MOD>private java.lang.String getAuthenticateUsernameFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { final java.lang.String httpBasicAuth = getHttpBasicAuthenticationHeader(req); if (httpBasicAuth == null) { return ""; } if (isInvalidHttpAuthenticationHeader(httpBasicAuth)) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } java.lang.String oauthToken = org.apache.commons.lang.StringUtils.substringBefore(httpBasicAuth, ":"); java.lang.String oauthKeyword = org.apache.commons.lang.StringUtils.substringAfter(httpBasicAuth, ":"); if ((com.google.common.base.Strings.isNullOrEmpty(oauthToken)) || (com.google.common.base.Strings.isNullOrEmpty(oauthKeyword))) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } if (!(oauthKeyword.equalsIgnoreCase(com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GITHUB_X_OAUTH_BASIC))) { return ""; } boolean loginSuccessful = false; java.lang.String oauthLogin = null; try { oauthLogin = oauthCache.getLoginByAccessToken(new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken(oauthToken)); loginSuccessful = !(com.google.common.base.Strings.isNullOrEmpty(oauthLogin)); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.warn(("Login failed for OAuth token " + oauthToken), e); loginSuccessful = false; } if (!loginSuccessful) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_FORBIDDEN); return null; } try { java.lang.String httpPassword = getUserHttpPassword(oauthLogin, oauthToken); } catch (com.google.gwtorm.server.OrmException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.error(("Internal error whilst trying to access password for user " + oauthLogin)); } return oauthLogin; }<END_MOD>
<START_MOD>@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is MERGED", change._number)); createArbitraryEditFor(changeId); }<END_MOD>
private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common<START_MOD>.compression<END_MOD>.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(new org.apache.sshd.common.compression.CompressionNone.Factory()); if (enableCompression) { compressionFactories.add(new org.apache.sshd.common.compression.CompressionZlib.Factory()); } setCompressionFactories(compressionFactories); }
com.google.gerrit.server.CurrentUser getUser(java.lang.String auth<START_MOD>, java.lang.String project, java.lang.String operation) { if <END_MOD>(!(com.google.common.base.Strings.isNullOrEmpty(auth))) <START_MOD>{ if ((auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) <END_MOD>&& (<START_MOD>authCfg.isGitBasicAuth())) { return user.get(); } if (<END_MOD>auth.startsWith(com.googlesource.gerrit.plugins.lfs.<START_MOD>LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.verifyToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null<END_MOD>) { return <START_MOD>userFactory.create(acc); } } } } return anonymous<END_MOD>.get(); }
<START_MOD>@java.lang.Override public void start() { if (!(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.started)) { org.apache.log4j.Logger deleteLogger = org.apache.log4j.LogManager.getLogger(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.DELETE_LOG_NAME); deleteLogger.removeAllAppenders(); deleteLogger.addAppender(systemLog.createAsyncAppender(deleteLogger.getName(), new com.googlesource.gerrit.plugins.deleteproject.DeleteLogLayout())); deleteLogger.setAdditivity(false); com.googlesource.gerrit.plugins.deleteproject.DeleteLog.started = true; } }<END_MOD>
<START_MOD>private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id id = getChangeId(); java.util.List<org.eclipse.jgit.transport.ReceiveCommand> cmds; try { cmds = args.rebuilder.get().rebuild(args.db.get(), id); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } java.lang.String refName = com.google.gerrit.server.notedb.ChangeNoteUtil.changeRefName(id); for (org.eclipse.jgit.transport.ReceiveCommand cmd : cmds) { if (cmd.getRefName().equals(refName)) { org.eclipse.jgit.lib.ObjectId newId = cmd.getNewId(); if (org.eclipse.jgit.lib.ObjectId.zeroId().equals(newId)) { newId = null; } return com.google.gerrit.server.notedb.LoadHandle.create(new org.eclipse.jgit.revwalk.RevWalk(repo), newId); } } throw new java.lang.IllegalStateException(((((("expected rebuild(" + id) + ") to contain ref update for ") + refName) + "; got: ") + cmds)); }<END_MOD>
private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(<START_MOD>DraftPublishedEvent<END_MOD> event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.addAll(propertyAttributeExtractor.extractFrom(event.<START_MOD>uploader.get(), "uploader"<END_MOD>)); <START_MOD>return <END_MOD>extractFrom(((com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>events<END_MOD>.<START_MOD>PatchSetEvent)<END_MOD> (event<START_MOD>))<END_MOD>, <START_MOD>common<END_MOD>); }
<START_MOD>@org.junit.Test public void shouldFireOneReplicationEventWhenNothingToReplicate() { resetToStrict(pushResultProcessingMock); pushResultProcessingMock.onAllRefsReplicatedToAllNodes(0); replay(pushResultProcessingMock); replicationState.markAllPushTasksScheduled(); verify(pushResultProcessingMock); }<END_MOD>
void setupPrevNextFiles() { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; for (int i = (currIndex) - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((<START_MOD>(<END_MOD>prefs.skipDeleted()) && (curr.status().equals("D"))) <START_MOD>|| ((prefs.skipUncommented()) && (!(hasComments)))) <END_MOD>{ continue; } else { prevInfo = curr; break; } } for (int i = (currIndex) + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((<START_MOD>(<END_MOD>prefs.skipDeleted()) && (curr.status().equals("D"))) <START_MOD>|| ((prefs.skipUncommented()) && (!(hasComments)))) <END_MOD>{ continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }
<START_MOD>@java.lang.Override public synchronized void doFilter(javax.servlet.ServletRequest sreq, javax.servlet.ServletResponse sres, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (sres)); try { com.google.gerrit.httpd.raw.BuckBuildFilter.build(root, gen, com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET); } catch (com.google.gerrit.httpd.raw.BuckBuildFilter.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, e.why, res); return; } if (!(java.nio.file.Files.exists(zip))) { java.lang.String msg = "`buck build` did not produce " + (zip.toAbsolutePath()); com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, msg.getBytes(java.nio.charset.StandardCharsets.UTF_8), res); } com.google.gerrit.launcher.GerritLauncher.reloadZipFileSystem(zip); chain.doFilter(sreq, sres); }<END_MOD>
public Account.Id getNullableAccountId() { return <START_MOD>effectiveAccountId<END_MOD>; }
<START_MOD>private java.lang.String getPreviousRevision(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gerrit.extensions.restapi.RestApiException { ChangeInfo info = gApi.changes().id(psId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == ((psId.get()) - 1)) { return e.getKey(); } } return null; }<END_MOD>
@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return <START_MOD>changeUrl<END_MOD>; }
void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList<START_MOD>, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links<END_MOD>) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } <START_MOD>if (links != null) { com.google.gwt.user.client.ui.FlowPanel linkPanel = new com.google.gwt.user.client.ui.FlowPanel(); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } table.setWidget(0, 2, linkPanel); } }<END_MOD>
static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); <START_MOD>try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), "UTF-8")); <END_MOD>url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); }<START_MOD> catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException(( encoding for request URL   + url), e); } }<END_MOD>
<START_MOD>@java.lang.Override public void deleteMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete group members", e); } }<END_MOD>
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutName.Input input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gwtorm.server.OrmException { if (!(realm.allowsEdit(FieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("The realm doesn't allow editing names"); } if (input == null) { input = new com.google.gerrit.server.account.PutName.Input(); } com.google.gerrit.reviewdb.client.Account a = rsrc.getUser().getAccount(); a.setFullName(input.name); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.common.base.Strings.isNullOrEmpty(a.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : a.getFullName(); }<END_MOD>
@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws <START_MOD>com.google.gwtorm.server.OrmException, <END_MOD>java.<START_MOD>sql<END_MOD>.<START_MOD>SQLException<END_MOD> { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } catch (java.<START_MOD>sql<END_MOD>.<START_MOD>SQLException<END_MOD> e) { conn.rollback(); throw e; } finally { conn.setAutoCommit(true); } }
<START_MOD>java.lang.String isWip();<END_MOD>
@java.lang.Override public void initConfig(com.google.gerrit.pgm.init<START_MOD>.util<END_MOD>.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get("url"))) != null; database.string("URL", "url", null); guessDriver(database); database.string( class name "driver", null); database.string( username "username", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password("username", "password"); }
private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.PerformVisibleGroups performVisibleGroups = performVisibleGroupsFactory.create(); performVisibleGroups.setProjects(projects); performVisibleGroups.setOnlyVisibleToAll(visibleToAll); <START_MOD>performVisibleGroups.setGroupType(groupType); <END_MOD>final com.google.gerrit.common.data.GroupList visibleGroups = performVisibleGroups.getVisibleGroups(); for (final GroupDetail groupDetail : visibleGroups.getGroups()) { stdout.print(((groupDetail.group.getName()) + "\n")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }
<START_MOD>private void setReviewedAnchor() { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder text = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); text.append(PatchUtil.C.next()); text.append(com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.nextPatchLinkIcon())); com.google.gwt.user.client.ui.Anchor reviewedAnchor = new com.google.gwt.user.client.ui.Anchor(""); com.google.gwtexpui.safehtml.client.SafeHtml.set(reviewedAnchor, text); }<END_MOD>
<START_MOD>@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.client.OrmException, java.sql.SQLException { final java.util.List<com.google.gerrit.reviewdb.AccountGroup> allGroups = db.accountGroups().all().toList(); for (final com.google.gerrit.reviewdb.AccountGroup group : allGroups) { group.setVisibleToAll(false); } db.accountGroups().update(allGroups); }<END_MOD>
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception {<START_MOD> java.time.Instant when = java.time.Instant.now();<END_MOD> com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(<START_MOD>when, 1000<END_MOD>); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.<START_MOD>onTime<END_MOD>(<START_MOD>when.plusMillis(999)<END_MOD>)).isTrue(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(<START_MOD>sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); if (sshd) { modules.add(<END_MOD>sshInjector.getInstance(com.google.gerrit.httpd.<START_MOD>WebSshGlueModule.class)); modules.add(sshInjector.getInstance(com.google.inject.Module.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } return <END_MOD>sysInjector.<START_MOD>createChildInjector(modules<END_MOD>); }
private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.<START_MOD>amd.gerrit.plugins.manifestsubscription<END_MOD>.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { enabledManifestRepos.put(projectName, new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches)); stores.add(newStore); } } } }
<START_MOD>private native java.lang.String configuredSubmitTypeRaw();<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { final com.google.gerrit.reviewdb.client.Change.Id changeId = patchSetId.getParentKey(); final com.google.gerrit.server.project.ChangeControl control = changeControlFactory.validateFor(changeId); if (!(control.canAddPatchSet())) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } com.google.gerrit.server.ChangeUtil.editCommitMessage(patchSetId, currentUser, message, db, hooks, gitManager, patchSetInfoFactory, replication, myIdent); return changeDetailFactory.create(changeId).call(); }<END_MOD>
<START_MOD>private com.google.gerrit.server.account.AccountState getByUserName(com.google.gerrit.extensions.common.AccountInfo acc) { com.google.gerrit.server.account.AccountState a = accountCache.getByUsername(acc.username); if (a == null) { a = accountCache.getByUsername(localUser(acc)); } return a; }<END_MOD>
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws<START_MOD> com.google.gerrit.extensions.restapi.ResourceConflictException,<END_MOD> com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
<START_MOD>@org.junit.Test public void deleteEditRest() throws java.lang.Exception { com.google.gerrit.acceptance.RestResponse r = session.post(urlCreateEdit()); assertEquals(HttpStatus.SC_NO_CONTENT, r.getStatusCode()); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertTrue(edit.isPresent()); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, org.eclipse.jgit.lib.Constants.encode(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))); edit = editUtil.byChange(change); assertTrue(edit.isPresent()); session.delete(urlDeleteEdit()); assertEquals(HttpStatus.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }<END_MOD>
<START_MOD>@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.server.project.ProjectControl project) { java.util.SortedMap<java.lang.String, com.google.gerrit.common.data.GroupReference> matches = com.google.gerrit.server.group.SystemGroupBackend.names.tailMap(name); if (matches.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.common.data.GroupReference> r = new java.util.ArrayList(matches.size()); for (com.google.gerrit.common.data.GroupReference g : matches.values()) { if ((java.lang.String.CASE_INSENSITIVE_ORDER.compare(name, g.getName())) <= 0) { r.add(g); } else { break; } } return r; }<END_MOD>
<START_MOD>@java.lang.Override public boolean isCancelled() { return false; }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException<START_MOD>, java.io.IOException<END_MOD> { <START_MOD>com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(rsrc.getControl()); plcUtil.deleteComments(<END_MOD>db.get()<START_MOD>, update, <END_MOD>java.util.Collections.singleton(rsrc.getComment())<START_MOD>); update.commit(<END_MOD>); return com.google.gerrit.extensions.restapi.Response.none(); }
public final native <START_MOD>java.lang.Short<END_MOD> value();
@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } <START_MOD>org.eclipse.jgit.lib.FileMode mode = ent.getFileMode(); if ((org.eclipse.jgit.lib.FileMode.GITLINK) != mode) { <END_MOD>ent.setObjectId(content); }<START_MOD> else { ent.setLength(0); ent.setLastModified(0); try { org.eclipse.jgit.lib.ObjectId id = org.eclipse.jgit.lib.ObjectId.fromString(reader.open(content).getBytes(), 0); ent.setObjectId(id); } catch (org.eclipse.jgit.errors.LargeObjectException e) { e.printStackTrace(); } catch (org.eclipse.jgit.errors.MissingObjectException e) { e.printStackTrace(); } catch (java.io.IOException e) { e.printStackTrace(); } } }<END_MOD>
public static void main(final java.lang.String[] argv) throws com.google.gwtjsonrpc.server.XsrfException, com.google.gwtorm.client.OrmException, java.net.SocketException { <START_MOD>boolean slave = false; for (java.lang.String arg : argv) { if ("--slave".equals(arg)) { slave = true; } } <END_MOD>com.google.gerrit.server.ssh.GerritSshDaemon.startSshd(<START_MOD>slave<END_MOD>); }
<START_MOD>public void addProjectListPopupOnOpenRowHandler(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowHandler handler) { handlerManager.addHandler(com.google.gerrit.client.ui.ProjectListPopup.ProjectListPopupOnOpenRowEvent.getType(), handler); }<END_MOD>
public com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListCache getPatchListCache() { return patchListCache; }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { <START_MOD>if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info(java.lang.String.format( such project: %s. Index data might be stale. cd.project())); return false; } <END_MOD>throw new com.google.gwtorm.server.OrmException( to check permissions e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }
<START_MOD>public final java.util.Map<java.lang.String, java.lang.String> urlAliases() { java.util.Map<java.lang.String, java.lang.String> urlAliases = new java.util.HashMap<>(); for (java.lang.String k : com.google.gerrit.client.rpc.Natives.keys(_urlAliases())) { urlAliases.put(k, urlAlias(k)); } return urlAliases; }<END_MOD>
@org.junit.After public void tearDown() {<START_MOD> drop( address_id drop( cnt drop( addresses drop( foo drop( people<END_MOD> if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException( close database e); } } db = null; }
<START_MOD>@java.lang.Override @javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return sshInjector; }<END_MOD>
@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null<START_MOD>, com.google.gitiles.PaginatorFilters.everything()<END_MOD>); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }
<START_MOD>public<END_MOD> <START_MOD>static com<END_MOD>.<START_MOD>google<END_MOD>.<START_MOD>gerrit.server.account.AccountSshKey<END_MOD> <START_MOD>create<END_MOD>(<START_MOD>com.google.gerrit.server.account.AccountSshKey.Id<END_MOD> <START_MOD>id<END_MOD>, java.lang.String <START_MOD>sshPublicKey,<END_MOD> <START_MOD>boolean<END_MOD> <START_MOD>valid<END_MOD>) { return <START_MOD>new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setId(id).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (id.isValid()))).build()<END_MOD>; }
<START_MOD>static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.notedb.ChangeNoteCache.class); cache(com.google.gerrit.server.notedb.ChangeNoteCache.CHANGE_NOTES, com.google.gerrit.server.notedb.ChangeNoteCache.Key.class, com.google.gerrit.server.notedb.ChangeNotesState.class).maximumWeight(1000); } }; }<END_MOD>
com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in<START_MOD>, java.lang.String project<END_MOD>) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); <START_MOD>com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, in.getRevision().get()); commit.webLinks = (links.isEmpty()) ? null : links.toList(); <END_MOD>for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; <START_MOD>com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getPatchSetLinks(project, parent.id.get()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); <END_MOD>commit.parents.add(i); } return commit; }
private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>>(); for (java.lang.String pluginName : com.google.gerrit.client.rpc.Natives.keys(info.pluginConfigParameters())) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.Widget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(info.pluginConfigParameter(pluginName))) { if (<START_MOD>((<END_MOD>"STRING".equals(param.type())) <START_MOD>|| ("INT".equals(param.type()))) || ("LONG".equals(param.type()))) <END_MOD>{ com.google.gwtexpui.globalkey.client.NpTextBox textBox = new com.google.gwtexpui.globalkey.client.NpTextBox(); textBox.setValue(param.value()); g.add(((param.displayName()) != null ? param.displayName() : param.name()), textBox); saveEnabler.listenTo(textBox); widgetMap.put(param.name(), textBox); } } } enableForm(); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error(( send email for new change   + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return   newchange } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); <START_MOD>} }<END_MOD>
<START_MOD>private com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, com.google.gerrit.reviewdb.client.Account.Id account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }<END_MOD>
public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID <START_MOD>includedGroupUuid<END_MOD>) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(<START_MOD>includedGroupUuid<END_MOD>); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }
<START_MOD>public static java.lang.Module module() { return new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.ChangeIndex.class).to(com.google.gerrit.lucene.LuceneChangeIndex.class); listener().to(com.google.gerrit.lucene.LuceneChangeIndex.Lifecycle.class); } }; }<END_MOD>
<START_MOD>abstract com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> historicalAssignees();<END_MOD>
<START_MOD>void resetInputBoxes() { this.filterBox.setText(""); this.reviewerBox.setText(""); }<END_MOD>
@java.lang.Override void <START_MOD>clearLine<END_MOD>(com.google.gerrit.client.diff.DisplaySide side, int <START_MOD>line,<END_MOD> com.google.gerrit.client.diff.CommentGroup group<START_MOD>)<END_MOD> <START_MOD>{<END_MOD> <START_MOD>clearLineHelper<END_MOD>(side, <START_MOD>line, group<END_MOD>); if ((<START_MOD>mergedMap<END_MOD>.<START_MOD>get<END_MOD>(<START_MOD>line<END_MOD>))<START_MOD> == group<END_MOD>) { <START_MOD>mergedMap<END_MOD>.<START_MOD>remove<END_MOD>(<START_MOD>line<END_MOD>); } }
<START_MOD>@java.lang.Override public java.lang.Class<com.google.gerrit.server.group.PutMember.Input> inputType() { return com.google.gerrit.server.group.PutMember.Input.class; }<END_MOD>
public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }
<START_MOD>public native final boolean hasMaxPermittedValue();<END_MOD>
<START_MOD>@org.junit.Test public void keyRevokedByExpiredKeyBeforeExpirationIsRevoked() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add(keyRevokedByExpiredKeyBeforeExpiration()); add(com.google.gerrit.gpg.testutil.TestKeys.expiredKey()); save(); com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker().setStore(store); assertProblems(checker, k, "Key is revoked (retired and no longer valid): test9 not used"); checker.setEffectiveTime(com.google.gerrit.gpg.PublicKeyCheckerTest.parseDate("2005-08-01 13:00:00 -0400")); assertProblems(checker, k); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return CommentInfoMapper.INSTANCE.apply(putDraft.apply(draft, in).value()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot update draft", e); } }<END_MOD>
public static <START_MOD>java.util.Set<com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage> transformMessages<END_MOD>(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> <START_MOD>messages) { return new java.util.HashSet(com.google.common.collect.Collections2.transform(messages<END_MOD>, <START_MOD>new com.google.common.base.Function<END_MOD><com.google.gerrit.server.git.validators.CommitValidationMessage<START_MOD>, com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage<END_MOD>><START_MOD>(<END_MOD>) { <START_MOD>@java.lang.Override public com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage apply<END_MOD>(com.google.gerrit.server.git.validators.CommitValidationMessage <START_MOD>input<END_MOD>) { <START_MOD>return new com.googlesource.gerrit.plugins.uploadvalidator.ComparableCommitValidationMessage(input.getMessage(), input.isError())<END_MOD>; <START_MOD>} }))<END_MOD>; }
@java.lang.Override public com.google.gerrit.server<START_MOD>.restapi<END_MOD>.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>change.FileResource(rev, id.get()); }
<START_MOD>@org.junit.Test public void testParseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeForTest(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo("Patch Set 1:\nTest Message"); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo("mailMessageId=some id"); }<END_MOD>
public boolean hasAnyAccount() throws java.io.IOException { <START_MOD>java.util.concurrent.atomic.AtomicBoolean<END_MOD> <START_MOD>hasAnyAccount<END_MOD> = <START_MOD>new java<END_MOD>.<START_MOD>util.concurrent.atomic.AtomicBoolean<END_MOD>(<START_MOD>false<END_MOD>)<START_MOD>; readUserRefs(( r<END_MOD>)<START_MOD> -><END_MOD> { <START_MOD>hasAnyAccount.set<END_MOD>(<START_MOD>true<END_MOD>); return false; }<START_MOD>); return hasAnyAccount.get();<END_MOD> }
<START_MOD>@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { assertThat(com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))).reduce()).isEqualTo(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false)); }<END_MOD>
@com.google.gwt.uibinder.client.UiHandler("deleteEdit") void onDeleteEdit(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, <START_MOD>project, <END_MOD>publishEdit, rebaseEdit, deleteEdit); } }
private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.<START_MOD>getNativeKeyCode<END_MOD>()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }
<START_MOD>private boolean branchExists(final org.eclipse.jgit.transport.ReceiveCommand cmd) { java.lang.String branchName = cmd.getRefName(); if (!(com.google.gerrit.server.git.ReceiveCommits.isHead(cmd))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } int split = branchName.length(); while (!(rp.getAdvertisedRefs().containsKey(branchName))) { split = branchName.lastIndexOf('/', (split - 1)); if (split <= (Constants.R_REFS.length())) { return false; } branchName = branchName.substring(0, split); } return true; }<END_MOD>
void <START_MOD>setLineWidgetManager<END_MOD>(com.google.<START_MOD>gerrit<END_MOD>.client.<START_MOD>diff.CommentBoxManager<END_MOD> <START_MOD>manager<END_MOD>) { <START_MOD>widgetManager<END_MOD> = <START_MOD>manager<END_MOD>; }
<START_MOD>@org.junit.Test public void submitTypeIsUsedForSubmit() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.rest.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange("master", "CHERRY_PICK 1"); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).current().submit(); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log = log("master", 1); assertThat(log.get(0).getShortMessage()).isEqualTo("CHERRY_PICK 1"); assertThat(log.get(0).name()).isNotEqualTo(r.getCommit().name()); assertThat(log.get(0).getFullMessage()).contains(("Change-Id: " + (r.getChangeId()))); assertThat(log.get(0).getFullMessage()).contains("Reviewed-on: "); }<END_MOD>
@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0), iter.advance(1)); }
public static void main(java.lang.String[] args) throws java.lang.Exception { <START_MOD>com.google.gitiles.dev.DevServer srv = <END_MOD>new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile())<START_MOD>; if (((args.length) == 3) && ("-docroot".equals(args[0]))) { srv.setDocRoot(new java.io.File(args[1]), args[2]); } srv<END_MOD>.start(); }
<START_MOD>private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_VOTE)) { approvals.put(psId, parseVote(psId, commit, line)); } }<END_MOD>
com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(java.lang.String project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws <START_MOD>org<END_MOD>.<START_MOD>eclipse<END_MOD>.<START_MOD>jgit<END_MOD>.lfs.<START_MOD>errors<END_MOD>.<START_MOD>LfsException<END_MOD> { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug( lock for {} in project {} input.path, project); com.googlesource.gerrit.plugins.lfs.locks.<START_MOD>LfsProjectLocks<END_MOD> locks = projects.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.<START_MOD>createLock<END_MOD>(<START_MOD>user<END_MOD>, input); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }
<START_MOD>private void writeHeader(java.io.OutputStream out) { org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); java.lang.StringBuilder b = new java.lang.StringBuilder(); b.append("From ").append(commit.getId().getName()).append(" ").append(df.format(java.lang.Long.valueOf(java.lang.System.currentTimeMillis()))).append("\n"); b.append("From: ").append(author.getName()).append(" <").append(author.getEmailAddress()).append(">\n"); b.append("Date: ").append(df.format(author.getWhen())).append("\n"); b.append("Subject: [PATCH] ").append(commit.getShortMessage()); java.lang.String message = commit.getFullMessage().substring(commit.getShortMessage().length()); b.append(message).append("\n\n"); java.io.PrintWriter w = new java.io.PrintWriter(new java.io.OutputStreamWriter(out, com.google.common.base.Charsets.UTF_8)); w.print(b.toString()); w.flush(); }<END_MOD>
<START_MOD>com.google.gerrit.server.mail.DeleteReviewerSender create(com.google.gerrit.reviewdb.client.Change.Id id);<END_MOD>
@org.junit.Test public void noExternalIds() throws java.lang.Exception { db<START_MOD>.accountExternalIds().delete(db.accountExternalIds().byAccount(<END_MOD>user.getAccountId(<START_MOD>)<END_MOD>)); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD,   identities found for user; check http: checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD,   is not associated with any users <START_MOD>db.accountExternalIds()<END_MOD>.insert(<START_MOD>java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.AccountExternalId(user.getAccountId(), <END_MOD>com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey())))); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD,   identities found for user }
public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(getProject().getNameKey()); try { <START_MOD>return isMergedIntoVisibleRef(repo<END_MOD>, db, <START_MOD>rw, commit, <END_MOD>repo.getAllRefs()<START_MOD>);<END_MOD> } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format( verify permissions to commit object %s in repository %s commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; }<START_MOD> }<END_MOD>
<START_MOD>@java.lang.Override public void onBeanParseEnd(java.lang.String plugin, java.lang.Object bean) { com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand cmd = ((com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand) (bean)); cmd.setRunCount(runCount); }<END_MOD>
private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) {<START_MOD> if ((((ctl.canForgeAuthor()) && (ctl.canForgeCommitter())) && (ctl.canForgeGerritServerIdentity())) && (ctl.canUploadMerges())) { return; }<END_MOD> final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error( pack upload; one or more objects weren sent err); } }
<START_MOD>static void call(com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, java.lang.String project, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.ActionDialog(b, false, Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }<END_MOD>
<START_MOD>public com.google.common.base.Optional<java.lang.Boolean> isMergeable() throws com.google.gwtorm.server.OrmException { return mergeabilityCache.get(change()); }<END_MOD>
public void <START_MOD>migrate<END_MOD>() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException( not determine initial migration state } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(( has already progressed past the endpoint of the   mode state; +   NoteDb is already the primary storage for some changes } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException(( out of the following state is not supported: + (state.toText()))); } } }
@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0),   <START_MOD>account<END_MOD> assertCommit(log.get(1),   <START_MOD>account<END_MOD> Account 1 <1@server-id>   8 "8@server-id"); assertCommit(log.get(2),   <START_MOD>account<END_MOD> Account 1 <1@server-id>   8 "8@server-id"); assertCommit(log.get(3),   <START_MOD>account<END_MOD> Account 2 <2@server-id>   8 "8@server-id"); }
<START_MOD>public static com.google.gerrit.plugin.client.rpc.RestApi edit(int id) { return com.googlesource.gerrit.plugins.xdocs.client.ChangeApi.change(id).view("edit"); }<END_MOD>
private void setUp(<START_MOD>java.lang.Object target<END_MOD>) throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); <START_MOD>injector.injectMembers(target); <END_MOD>}
<START_MOD>@java.lang.Override protected void display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change) { java.lang.String frameIdA = "xdoc_sidebyside_diff_a_iframe"; com.google.gwt.user.client.ui.Frame frameA = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideA(), getFile())); frameA.getElement().setId(frameIdA); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameA, frameIdA); java.lang.String frameIdB = "xdoc_sidebyside_diff_b_iframe"; com.google.gwt.user.client.ui.Frame frameB = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideB(), getFile())); frameB.getElement().setId(frameIdB); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameB, frameIdB); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setVerticalAlignment(com.googlesource.gerrit.plugins.xdocs.client.ALIGN_MIDDLE); p.setStyleName("xdocs-sidebyside-panel"); p.add(frameA); p.add(frameB); add(p); }<END_MOD>
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }
private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().diffText()); <START_MOD>m.setStyleName(Gerrit.RESOURCES.css().fileLine()); <END_MOD>switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append("-"); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append("+"); m.append(text); break; } m.closeTd(); }
<START_MOD>@java.lang.Override protected boolean getDeleteCache() { return deleteCache; }<END_MOD>
private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { java.lang.String lineStr = getLine(<START_MOD>fileData, <END_MOD>side, line); cmts.append(<START_MOD>((((<END_MOD>   <START_MOD>+ line) +     + <END_MOD>lineStr<START_MOD>) + "\n")<END_MOD>); }
@com.google.gwtorm.client.Relation<START_MOD>(id = 10)<END_MOD> com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();
@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(( trailing double newline + "\n")); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(( patch set 1 + ((((("\n" +   trailing double newline + "\n") + "\n") + "\n") +   1 commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<<START_MOD>com.google.gerrit.reviewdb.client.ChangeMessage<END_MOD>> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(( trailing double newline + "\n"), changeMessages.get(0)<START_MOD>.getMessage()<END_MOD>); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { <START_MOD>java.util.Set<java.lang.String> listIndexes = dialect.listIndexes(schema.getConnection(), "changes"); for (java.lang.String index : listIndexes) { if (index.equalsIgnoreCase("changes_allOpen")) { stmt.executeUpdate(( INDEX   + index)); } if (index.equalsIgnoreCase("changes_allClosed")) { stmt.executeUpdate(( INDEX   + index)); } if (index.equalsIgnoreCase("changes_byBranchClosed")) { stmt.executeUpdate(( INDEX   + index)); } } <END_MOD>stmt.executeUpdate( INDEX changes_byProjectOpen if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate(( INDEX changes_byProjectOpen + ( ON changes (dest_project_name, last_updated_on) +   WHERE open = 'Y' } else { stmt.executeUpdate(( INDEX changes_byProjectOpen +   ON changes (open, dest_project_name, last_updated_on) } } }
<START_MOD>@java.lang.Override public int compare(com.google.gerrit.client.diff.DiffChunkInfo o1, com.google.gerrit.client.diff.DiffChunkInfo o2) { if ((o1.getSide()) == (o2.getSide())) { return (o1.getStart()) - (o2.getStart()); } else if ((o1.getSide()) == (DisplaySide.A)) { int comp = (mapper.lineOnOther(o1.getSide(), o1.getStart()).getLine()) - (o2.getStart()); return comp == 0 ? -1 : comp; } else { int comp = (o1.getStart()) - (mapper.lineOnOther(o2.getSide(), o2.getStart()).getLine()); return comp == 0 ? 1 : comp; } }<END_MOD>
private void savePluginSections(org.eclipse.jgit.lib.Config rc<START_MOD>, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups<END_MOD>) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { <START_MOD>java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (value.startsWith("Group[")) { com.google.gerrit.common.data.GroupReference ref = resolve(com.google.gerrit.common.data.GroupReference.fromString(value)); if ((ref.getUUID()) != null) { keepGroups.add(ref.getUUID()); <END_MOD>rc.<START_MOD>setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ref.toString()); } } rc.<END_MOD>setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
<START_MOD>public boolean isMandatory() { return isMandatory; }<END_MOD>
private void assertNoProblems(com.google.gerrit.server.<START_MOD>notedb<END_MOD>.<START_MOD>ChangeNotes<END_MOD> <START_MOD>notes<END_MOD>, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) <START_MOD>throws com.google.gerrit.server.project.NoSuchChangeException <END_MOD>{ assertThat(checker.check(<START_MOD>controlForNotes(notes)<END_MOD>, fix).problems()).isEmpty(); }
<START_MOD>public void setGroups(java.lang.String gs) { groups = gs; }<END_MOD>
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(<START_MOD>formatter<END_MOD>.<START_MOD>format<END_MOD>(now<START_MOD>()<END_MOD>.minusMillis(1)))).isFalse(); }
@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); <START_MOD>try { com.google.gerrit.server.mail.Watchers matching = getWatches<END_MOD>(<START_MOD>NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : matching.accounts) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user<END_MOD>); }<START_MOD> else { add(RecipientType.BCC, user); } } for (com.google.gerrit.server.mail.Address addr : matching.emails) { add(RecipientType.BCC, addr); } } catch (com.google.gwtorm.server.OrmException err) { } }<END_MOD>
private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); }
<START_MOD>public com.google.gerrit.acceptance.AbstractNotificationTest.NotificationsSubject reviewers(@com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.RecipientType type) { return receives(actual().participants.reviewer, type); }<END_MOD>
@java.lang.Override public <START_MOD>com.google.gerrit.reviewdb.client.<END_MOD>Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); }
@java.lang.Override protected void run() throws com.<START_MOD>google<END_MOD>.gerrit.<START_MOD>sshd<END_MOD>.<START_MOD>BaseCommand<END_MOD>.<START_MOD>UnloggedFailure<END_MOD> { try { checkPermission(); <START_MOD>} catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.google.gerrit.sshd.BaseCommand.UnloggedFailure((   + (err.getMessage()))); } <END_MOD>final com.googlesource.gerrit.plugins.verifystatus.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } }
@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = <START_MOD>remote<END_MOD>.<START_MOD>getEvents<END_MOD>(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }
<START_MOD>private java.lang.String makeChangeLink(com.google.gerrit.reviewdb.client.Patch.Key patch) { final java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(getGerritUrl()); sb.append("#/c/"); sb.append(patch.getParentKey().getParentKey().get()); sb.append("/"); sb.append(patch.getParentKey().get()); sb.append("/"); sb.append(patch.getFileName()); return sb.toString(); }<END_MOD>
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.<START_MOD>canBeSubmitted<END_MOD>(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
<START_MOD>private void displayParents(final java.util.List<com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo> parents) { if ((parents.size()) == 0) { infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, new com.google.gwt.user.client.ui.InlineLabel("Initial Commit")); return; } final com.google.gwt.user.client.ui.Grid parentsTable = new com.google.gwt.user.client.ui.Grid(parents.size(), 2); parentsTable.setStyleName(Gerrit.RESOURCES.css().parentsTable()); parentsTable.addStyleName(Gerrit.RESOURCES.css().noborder()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter ptfmt = parentsTable.getCellFormatter(); int row = 0; for (com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo parent : parents) { parentsTable.setWidget(row, 0, new com.google.gwt.user.client.ui.InlineLabel(parent.id.get())); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().noborder()); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().monospace()); parentsTable.setWidget(row, 1, new com.google.gwt.user.client.ui.InlineLabel(parent.shortMessage)); ptfmt.addStyleName(row, 1, Gerrit.RESOURCES.css().noborder()); row++; } infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, parentsTable); }<END_MOD>
<START_MOD>public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { ImmutableMap.Builder<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.ImmutableMap.builder(); for (com.google.gerrit.reviewdb.client.PatchSet ps : ChangeUtil.PS_ID_ORDER.sortedCopy(db.patchSets().byChange(notes.getChangeId()))) { result.put(ps.getId(), ps); } } return notes.load().getPatchSets(); }<END_MOD>
<START_MOD>public static <E extends java.lang.Enum<E>> com.google.gerrit.metrics.Field<E> ofEnum(java.lang.Class<E> enumType, java.lang.String name) { return new com.google.gerrit.metrics.Field<>(name, enumType); }<END_MOD>
<START_MOD>private void toAnchor(java.lang.String href, java.lang.String name) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(); a.setHref(href); a.setText(name); webLinkPanel.add(a); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.registration.DynamicSet<T>.ReloadableHandle replace(com.google.inject.Key<?> newKey, T newItem) { if (ref.compareAndSet(item, newItem)) { return new ReloadableHandle(ref, newKey, newItem); } return null; }<END_MOD>
@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); }
public static void publish(int id<START_MOD>, @com.google.gerrit.common.Nullable java.lang.String project<END_MOD>, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, <START_MOD>project, <END_MOD>commit, "publish").post(in, cb); }
@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0), iter.advance(3)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), <START_MOD>psUtil.latest(<END_MOD>db.get()<START_MOD>, rsrc.getNotes())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit<END_MOD>.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }
<START_MOD>public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals) { try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), message, newApprovals, oldApprovals); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error("Couldn't fire event", e); } }<END_MOD>
<START_MOD>java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id psId, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> incomingApprovals) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(db, ctl.getNotes(), psId); if (ps == null) { return java.util.Collections.emptyList(); } return getForPatchSet(db, ctl, ps, incomingApprovals); }<END_MOD>
private void enableForm(final boolean on) { delRight.setEnabled(on); rightEditor.enableForm(on); <START_MOD>changeParentButton.setEnabled(on); <END_MOD>}
<START_MOD>@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = "Error rendering final ChangeInfo"; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }<END_MOD>
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(<START_MOD>projectName, <END_MOD>ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((( rule in   + section) + (subsection != null ? "." + subsection : "")) + ".") + varName) +     + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((   + (ref.getName())) +   not in   + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }
private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.<START_MOD>exactRef<END_MOD>(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }
public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return   merge; cannot be formatted as a diff.] } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error( format patch e); return ""; } org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(<START_MOD>8192, <END_MOD>args.settings.maximumDiffSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error( open repository to format patch e); return ""; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return ""; } com.google.gerrit.server.mail.ChangeEmail.log.error( format patch e); return ""; } finally { git.close(); } } }
<START_MOD>public static void throwIfNotStaleFileHandle(java.nio.file.DirectoryIteratorException e) { if (!(com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(e.getCause()))) { throw e; } }<END_MOD>
private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if ( < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try { final java.io.InputStream in; in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize); try { readCgiHeaders(rsp, in); <START_MOD>try (<END_MOD>java.io.OutputStream out = rsp.getOutputStream()<START_MOD>)<END_MOD> { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } <START_MOD>} <END_MOD>finally { <START_MOD>in<END_MOD>.close(); } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if ( != status) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error(((( exit status ( + status) +   from   + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug( interrupted waiting for CGI to terminate } }
<START_MOD>private java.util.List<com.google.gerrit.common.data.SubmitRecord> ruleError(java.lang.String err, java.lang.Exception e) { if (logErrors) { com.google.gerrit.server.project.SubmitRuleEvaluator.log.error(err, e); return com.google.gerrit.server.project.SubmitRuleEvaluator.defaultRuleError(); } else { return com.google.gerrit.server.project.SubmitRuleEvaluator.createRuleError(err); } }<END_MOD>
public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<<START_MOD>java.lang.String<END_MOD>> allowedSchemes = com.google.gerrit.client.Gerrit.<START_MOD>getInfo().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.<END_MOD>getConfig().<START_MOD>getGitDaemonUrl()) != null)) && (allowedSchemes.contains("git"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); }<END_MOD> if (allowAnonymous && (<START_MOD>allowedSchemes.contains( http { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if (((<END_MOD>(com.google.gerrit.client.Gerrit.getConfig().<START_MOD>getSshdAddress<END_MOD>()) != null)<START_MOD> && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && <END_MOD>(allowedSchemes.contains(<START_MOD>"ssh"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName(<END_MOD>)) || (<START_MOD>com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (<END_MOD>allowedSchemes.contains(<START_MOD>"http"<END_MOD>))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren("name"); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.fromEdit(edit)); } <START_MOD>java.lang.String currentRevision<END_MOD> = <START_MOD>info.currentRevision(); boolean current<END_MOD> = <START_MOD>(currentRevision != null) && ((<END_MOD>revision<START_MOD>.get()) == (info.revision(<END_MOD>currentRevision)._number()<START_MOD>)<END_MOD>); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }
<START_MOD>@java.lang.Override public void rebase() throws com.google.gerrit.extensions.restapi.RestApiException { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }<END_MOD>
@com.google.gwtorm.client.PrimaryKey("name") com.google.gwtorm.data.<START_MOD>Person<END_MOD> get(com.google.gwtorm.data.<START_MOD>Person<END_MOD>.Key key) throws com.google.gwtorm.client.OrmException;
<START_MOD>public static void createChange(java.lang.String project, java.lang.String branch, java.lang.String subject, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.CreateChangeInput input = com.google.gerrit.client.changes.ChangeApi.CreateChangeInput.create(); input.project(com.google.gerrit.client.changes.ChangeApi.emptyToNull(project)); input.branch(com.google.gerrit.client.changes.ChangeApi.emptyToNull(branch)); input.subject(com.google.gerrit.client.changes.ChangeApi.emptyToNull(subject)); com.google.gerrit.client.changes.ChangeApi.call("create").post(input, cb); }<END_MOD>
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws<START_MOD> com.google.gerrit.extensions.restapi.ResourceConflictException,<END_MOD> com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
<START_MOD>@org.junit.Before public void setUp() { java.sql.Timestamp timestamp = new java.sql.Timestamp(com.ericsson.gerrit.plugins.eventslog.sql.SQLEntryTest.NOW); entry1 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name1", timestamp, "event1", java.lang.Integer.MAX_VALUE); entry2 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name2", timestamp, "event2", java.lang.Integer.MIN_VALUE); entry3 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name3", timestamp, "event3", 0); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) throws com.google.gwtorm.server.OrmException { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }<END_MOD>
public <START_MOD>com.google.gerrit.server.config.ScheduleConfig.Schedule<END_MOD> <START_MOD>schedule<END_MOD>() { if ((<START_MOD>schedule<END_MOD>) == null) { <START_MOD>schedule = loadSchedule<END_MOD>(); } return <START_MOD>schedule<END_MOD>; }
<START_MOD>private void addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountInfo> map, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.AccountInfo info, com.google.gerrit.server.change.SuggestReviewers.VisibilityControl visibilityControl) throws com.google.gwtorm.server.OrmException { if (map.containsKey(account.getId())) { return; } if (!(account.isActive())) { return; } if (visibilityControl.isVisible(account)) { map.put(account.getId(), info); } }<END_MOD>
<START_MOD>@org.junit.Test public void sshKeys() throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(1); com.google.gerrit.extensions.common.SshKeyInfo key = info.get(0); java.lang.String inital = com.google.gerrit.acceptance.AccountCreator.publicKey(admin.sshKey, admin.email); assertThat(key.sshPublicKey).isEqualTo(inital); java.lang.String newKey = com.google.gerrit.acceptance.AccountCreator.publicKey(com.google.gerrit.acceptance.AccountCreator.genSshKey(), admin.email); gApi.accounts().self().addSshKey(newKey); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(2); gApi.accounts().self().addSshKey(inital); assertThat(info).hasSize(2); }<END_MOD>
@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.git.UpdateException <START_MOD>| com.google.gerrit.server.permissions.PermissionBackendException <END_MOD>e) { throw new com.google.gerrit.extensions.restapi.RestApiException( set topic e); } }
<START_MOD>private void updateLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName, org.eclipse.jgit.lib.ObjectId oldObjectId, java.util.SortedSet<java.lang.String> labels) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(refName); u.setExpectedOldObjectId(oldObjectId); u.setForceUpdate(true); u.setNewObjectId(com.google.gerrit.server.StarredChangesUtil.writeLabels(repo, labels)); u.setRefLogIdent(serverIdent); u.setRefLogMessage("Update star labels", true); org.eclipse.jgit.lib.RefUpdate.Result result = u.update(rw); switch (result) { case NEW : case FORCED : case NO_CHANGE : case FAST_FORWARD : return; case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case REJECTED_CURRENT_BRANCH : case RENAMED : default : throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Update star labels on ref %s failed: %s", refName, result.name())); } } }<END_MOD>
@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(<START_MOD>tempFolder.getRoot().toPath()<END_MOD>); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.<START_MOD>ResourceConflictException, com.google.gerrit.extensions.restapi.<END_MOD>ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private static <START_MOD>com.google.gerrit.client.diff.SideBySide2.FileSize bucketFileSize<END_MOD>(com.google.gerrit.client.diff.DiffInfo <START_MOD>diff<END_MOD>) { <START_MOD>com.google.gerrit.client.diff.DiffInfo.FileMeta a = diff.meta_a(); com.google.gerrit.client.diff.DiffInfo.FileMeta b = diff.meta_b(); com.google.gerrit.client.diff.SideBySide2.FileSize[] sizes = com.google.gerrit.client.diff.SideBySide2.FileSize.values(); for (int i = (sizes.length) - 1;   <= i; i--) { com.google.gerrit.client.diff.SideBySide2.FileSize s = sizes[i]; if (((a != null) && ((s.lines) <= (a.lines()))) || ((b != null) && ((s.lines) <= (b.lines())))) { <END_MOD>return <START_MOD>s<END_MOD>; }<START_MOD> } return com.google.gerrit.client.diff.SideBySide2.FileSize.REASONABLE; }<END_MOD>
<START_MOD>@org.junit.Test public void byStatusPrefix() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); ins2.insert(); assertResultEquals(change1, queryOne("status:n")); assertResultEquals(change1, queryOne("status:ne")); assertResultEquals(change1, queryOne("status:new")); assertResultEquals(change1, queryOne("status:N")); assertResultEquals(change1, queryOne("status:nE")); assertResultEquals(change1, queryOne("status:neW")); try { query("status:newx"); } catch (com.google.gerrit.extensions.restapi.BadRequestException e) { } }<END_MOD>
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd<START_MOD>, com.google.common.collect.ListMultimap<java.lang.String, ?> parameters<END_MOD>) { if (dcmd == null) { return   was already destroyed } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); commandName.append(".").append(args[<START_MOD>1<END_MOD>]); <START_MOD>for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (key.toString().startsWith("$")) { commandName.append(".").append(value); } } } for (java.lang.String key : parameters.keys()) { for (java.lang.Object value : parameters.get(key)) { if (!(key.toString().startsWith("$"))) { commandName.append(".").append(key).append(".").append(value); } } <END_MOD>} return commandName.toString(); }
public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = <START_MOD>a.<END_MOD>changeControlFactory.controlFor(db, c, <START_MOD>a.<END_MOD>userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }
<START_MOD>private static com.google.gerrit.common.data.ApprovalType verifiedCategory() { com.google.gerrit.reviewdb.ApprovalCategory cat; java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals; cat = new com.google.gerrit.reviewdb.ApprovalCategory(new com.google.gerrit.reviewdb.ApprovalCategory.Id("VRIF"), "Verified"); cat.setPosition(((short) (1))); cat.setAbbreviatedName("V"); vals = new java.util.ArrayList<com.google.gerrit.reviewdb.ApprovalCategoryValue>(); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 1, "Verified")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 0, "No score")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, (-1), "Fails")); return new com.google.gerrit.common.data.ApprovalType(cat, vals); }<END_MOD>
@java.lang.Override public void onSuccess(java.lang.Void result) { if ((<START_MOD>(<END_MOD>prefs.syntaxHighlighting(<START_MOD>)) && (com.google.gerrit.client.diff.PreferencesBox.eq(mode, getSelectedMode())<END_MOD>)) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption("mode", mode); view.getCmFromSide(DisplaySide.B).setOption("mode", mode); } }); } }
public boolean canDelete() { if (<START_MOD>(!(isActive())) || (<END_MOD>GitRepositoryManager.REF_CONFIG.equals(refName<START_MOD>)<END_MOD>)) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { <START_MOD>upToChange<END_MOD>(); } }
@org.junit.Test <START_MOD>@com.google.gerrit.acceptance.TestProjectInput(submitType = com.google.gerrit.extensions.client.SubmitType.CHERRY_PICK) <END_MOD>public void <START_MOD>onlyContentMerged<END_MOD>() throws java.lang.Exception { <START_MOD>testRepo.branch("HEAD").commit().insertChangeId().message( commit").add("a.txt   contents   testRepo.git().push().setRemote("origin").setRefSpecs(new org.eclipse.jgit.transport.RefSpec("HEAD:refs/heads/master")).call(); com.google.gerrit.acceptance.PushOneCommit.Result cId = createChange(); approve(cId.getChangeId()); org.eclipse.jgit.revwalk.RevCommit commitId = cId.getCommit(); gApi.changes().id(cId.getChangeId()).current().submit(); org.eclipse.jgit.lib.ObjectId remoteId = getRemoteHead(); assertThat(remoteId).isNotEqualTo(commitId); com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput("master"<END_MOD>, <START_MOD>commitId.getName<END_MOD>(), <START_MOD>""); assertCreateSucceeds(in<END_MOD>); }
<START_MOD>private void fireEvent(com.google.gerrit.reviewdb.Project.NameKey projectName, com.google.gerrit.reviewdb.Branch.NameKey branchName, final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values()) { if (isVisibleTo(projectName, branchName, holder.user)) { holder.listener.onChangeEvent(event); } } }<END_MOD>
<START_MOD>public com.google.gerrit.httpd.ParsedToken decode(java.lang.String tokenString) throws com.google.gerrit.httpd.InvalidTokenException { com.google.gwtjsonrpc.server.ValidToken token; try { token = com.google.gerrit.httpd.SignedTokenRestTokenVerifier.restToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String payload; try { payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), "UTF-8"); } catch (java.io.UnsupportedEncodingException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } int colonPos = payload.indexOf(':'); if (colonPos == (-1)) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String user; try { user = payload.substring(0, colonPos); } catch (java.lang.IllegalArgumentException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } java.lang.String url = payload.substring((colonPos + 1)); return new com.google.gerrit.httpd.ParsedToken(user, url); }<END_MOD>
@java.lang.Override <START_MOD>int<END_MOD> <START_MOD>getCommentLine<END_MOD>(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne<START_MOD>) {<END_MOD> com.google.gerrit.client.diff.<START_MOD>UnifiedChunkManager.LineRegionInfo<END_MOD> <START_MOD>info<END_MOD> <START_MOD>=<END_MOD> <START_MOD>((<END_MOD>com.google.gerrit.client.diff.<START_MOD>Unified)<END_MOD> <START_MOD>(host)).getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); int line<END_MOD> = <START_MOD>info.line<END_MOD>; if ((<START_MOD>info<END_MOD>.<START_MOD>getSide<END_MOD>()) <START_MOD>!=<END_MOD> <START_MOD>side<END_MOD>) { <START_MOD>line = host<END_MOD>.<START_MOD>lineOnOther<END_MOD>(<START_MOD>info.getSide(), line).getLine(<END_MOD>); } <START_MOD>return line; <END_MOD>}
<START_MOD>@org.junit.Test public void projectChangeIdReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); }<END_MOD>
private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { <START_MOD>java.lang.String quote = p.replaceAll("\n\\s?>\\s?", "\n"); <END_MOD>if (<START_MOD>quote<END_MOD>.startsWith(   { <START_MOD>quote = quote<END_MOD>.substring(2); } else if (<START_MOD>quote<END_MOD>.startsWith( >   { <START_MOD>quote = quote<END_MOD>.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.<START_MOD>blocks = com.google.gerrit.server.mail.send.CommentFormatter.parse(quote<END_MOD>); return block; }
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutHashtags.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.hashtags))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Hashtags are required"); } com.google.gerrit.server.project.ChangeControl control = req.getControl(); com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(control); com.google.gerrit.server.notedb.ChangeNotes notes = control.getNotes().load(); java.util.Set<java.lang.String> oldHashtags = notes.getHashtags(); java.util.Set<java.lang.String> hashtags = new java.util.HashSet<java.lang.String>(); if (oldHashtags != null) { hashtags.addAll(oldHashtags); } hashtags.addAll(java.util.Arrays.asList(input.hashtags.split(","))); update.setHashtags(hashtags); update.commit(); return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChange(cd); }<END_MOD>
<START_MOD>private void decodeSubmitRecords(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, java.lang.String field, com.google.gerrit.server.project.SubmitRuleOptions opts, com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.server.index.change.ChangeField.parseSubmitRecordValues(com.google.gerrit.lucene.LuceneChangeIndex.fieldsToStrings(doc.get(field)), opts, cd); }<END_MOD>
<START_MOD>@org.junit.Test public void testGetEmailWhitelist() throws java.lang.Exception { }<END_MOD>
<START_MOD>@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((event.getNativeButton()) == (com.google.gwt.dom.client.NativeEvent.BUTTON_LEFT)) { onEdit(); } }<END_MOD>
<START_MOD>private void loadFileList(final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo base, final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts, final com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>> empty) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), (base != null ? base.name() : null), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments == null ? empty : comments.get(0)), (drafts == null ? empty : drafts.get(0))); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }<END_MOD>
@java.lang.Override protected void onUnload() { super.onUnload<START_MOD>(); saveAllDrafts<END_MOD>(); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); <START_MOD>accountsUpdateProvider.get<END_MOD>().update( General Preferences via API id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }
<START_MOD>@java.lang.Override public int weigh() { return (resource.length()) * 2; }<END_MOD>
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, <START_MOD>sampleServerIdent, <END_MOD>change.getProject(), change); }
<START_MOD>java.lang.String publishedFileCommentHolder();<END_MOD>
private com.google.gerrit.server.project.DashboardResource resource() throws<START_MOD> com.google.gerrit.extensions.restapi.ResourceConflictException,<END_MOD> com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
<START_MOD>@org.junit.Test public void content() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); assertEquals(com.google.gerrit.acceptance.PushOneCommit.FILE_CONTENT, gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).file("a.txt").content()); }<END_MOD>
<START_MOD>void insert(java.lang.String v) { int insertPos = getRowCount(); for (int row = 1; row < (getRowCount()); row++) { if ((v.compareTo(getText(row, 1))) <= 0) { insertPos = row; break; } } insertRow(insertPos); populate(insertPos, v); }<END_MOD>
<START_MOD>@org.junit.Test public void actionsETag() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); java.lang.String oldETag = checkETag(r2, null); current(r2).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(r2, oldETag); current(r1).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(r2, oldETag); current(r2).submit(); oldETag = checkETag(r2, oldETag); }<END_MOD>
@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accounts.create("other", "other@example.com", "other"); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).<START_MOD>noOneElse(<END_MOD>); }); }
<START_MOD>private void flush(java.util.List<java.lang.String> cacheNames) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { java.util.List<com.google.gerrit.server.config.CacheResource> cacheResources = new java.util.ArrayList<>(); for (java.lang.String n : cacheNames) { java.lang.String pluginName = "gerrit"; java.lang.String cacheName = n; int i = cacheName.lastIndexOf('-'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : ""; } com.google.common.cache.Cache<?, ?> cache = cacheMap.get(pluginName, cacheName); if (cache != null) { cacheResources.add(new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cache)); } else { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("cache %s not found", n)); } } for (com.google.gerrit.server.config.CacheResource rsrc : cacheResources) { flushCache.get().apply(rsrc, new com.google.gerrit.server.config.FlushCache.Input()); } }<END_MOD>
<START_MOD>private void testEnableSequences(java.lang.Integer builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef("refs/sequences/changes"); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings("deprecation") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }<END_MOD>
@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.<START_MOD>util.<END_MOD>Section databaseSection) { java.lang.String path = databaseSection.get("database"); if (path == null) { path = "db/ReviewDB"; databaseSection.set("database", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die( must be supplied for H2 } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(( create database.database   + (db.getAbsolutePath()))); } }
<START_MOD>private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((finished.getCount()) > 0), "already started %s upgrades, can't start %s", numExpected, a); out.add(a); finished.countDown(); }<END_MOD>
@java.lang.Override public com.google.gerrit.server.<START_MOD>restapi.<END_MOD>change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.<START_MOD>restapi.<END_MOD>change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override protected void onLoad() { super.onLoad(); <START_MOD>java.lang.String who = (mine) ? "self" : <END_MOD>ownerId<START_MOD>.toString(); com.google.gerrit.client.changes.ChangeList.query(<END_MOD>new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.<START_MOD>client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList><END_MOD>>(this) { @java.lang.Override protected void preDisplay(<START_MOD>com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList> result<END_MOD>) { display(<START_MOD>result<END_MOD>); } }<START_MOD>, ( owner: + who), ((( reviewer: + who) +   -owner: + who), (( owner: + who) +   age:1w limit:10<END_MOD> }
<START_MOD>@java.lang.Override public com.google.inject.Key<?> getKey() { return key; }<END_MOD>
@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson("/repo/+log", com.google.gitiles.LogServletTest.LOG, ""); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }
@java.lang.Override protected void doUpsert(final java.lang.Iterable<T> instances, final com.google.gwtorm.jdbc.JdbcTransaction txn) throws com.google.gwtorm.client.OrmException { if (!(instances.iterator().hasNext())) { return; } final java.lang.Iterable<T> inserts; try { java.sql.PreparedStatement ps = schema.getConnection().prepareStatement(getUpdateOneSql()); try { <START_MOD>if (!(schema.getDialect().canDetermineIndividualBatchUpdateCounts())) { <END_MOD>inserts = <START_MOD>attemptUpdatesIndividually(ps, instances); } else { inserts = <END_MOD>attemptUpdatesAsBatch(ps, instances); } <START_MOD>} <END_MOD>finally { ps.close(); } } catch (java.sql.SQLException e) { throw convertError("update", e); } doInsert(inserts, txn); }
<START_MOD>java.util.Set<com.google.gerrit.server.account.ExternalId> byEmail(java.lang.String email) throws java.io.IOException;<END_MOD>
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { <START_MOD>try<END_MOD> <START_MOD>(<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()<START_MOD>)<END_MOD> { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log( query database e); return null; } }
<START_MOD>private com.google.gerrit.reviewdb.client.PatchSet insertPatchSet(org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.extensions.common.ProblemInfo p = new com.google.gerrit.extensions.common.ProblemInfo(); p.message = "No patch set found for merged commit " + (commit.name()); if (!(user.get().isIdentifiedUser())) { p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = "Must be called by an identified user to insert new patch set"; return null; } try { com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(change, user.get()); com.google.gerrit.server.change.PatchSetInserter inserter = patchSetInserterFactory.create(repo, rw, ctl, commit); change = inserter.setValidatePolicy(ValidatePolicy.NONE).setRunHooks(false).setSendMail(false).setUploader(((com.google.gerrit.server.IdentifiedUser) (user)).getAccountId()).setMessage("Patch set for merged commit inserted by consistency checker").insert(); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIXED; p.outcome = "Inserted as patch set " + (change.currentPatchSetId().get()); return inserter.getPatchSet(); } catch (com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { warn(e); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = "Error inserting new patch set"; return null; } }<END_MOD>
private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); }<START_MOD> updateToken(info, base, rev);<END_MOD> com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.toString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, ( file list and inline comments failed:   + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }
<START_MOD>public<END_MOD> java.lang.String <START_MOD>normalizeDashboardRef(<END_MOD>java.lang.String <START_MOD>ref<END_MOD>) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { <START_MOD>return<END_MOD> (REFS_DASHBOARDS) + ref; } <START_MOD>return<END_MOD> ref; }
@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.<START_MOD>CONTENT<END_MOD>); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0)<START_MOD>, java.lang.Integer.valueOf(values.get(1))<END_MOD>)); }
com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(() <START_MOD>-><END_MOD> { return writer.addDocument(doc); }); }
<START_MOD>protected PushOneCommit.Result createChange(org.eclipse.jgit.api.Git git, java.lang.String topic) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent()); return push.to(git, ("refs/for/master/" + topic)); }<END_MOD>
<START_MOD>@java.lang.Override protected void run() { stdout.println("Branching manifest:"); stdout.println(manifestRepo); stdout.println(manifestCommitish); stdout.println(manifestPath); com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(manifestRepo); try { org.eclipse.jgit.lib.Repository repo = gitRepoManager.openRepository(p); org.eclipse.jgit.lib.ObjectId commitId = repo.resolve(manifestCommitish); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests vManifests = new com.amd.gerrit.plugins.manifestsubscription.VersionedManifests(manifestCommitish); vManifests.load(repo, commitId); com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest manifests = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(vManifests); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest = manifests.getCanonicalManifest(manifestPath); stdout.println(""); stdout.println((("Branch '" + (newBranch)) + "' will be created for the following projects:")); for (com.amd.gerrit.plugins.manifestsubscription.manifest.Project proj : manifest.getProject()) { stdout.print(proj.getRevision()); stdout.print("\t"); stdout.println(proj.getName()); } com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.branchManifest(gitRepoManager, manifest, newBranch); } catch (java.io.IOException e) { e.printStackTrace(stderr); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { e.printStackTrace(stderr); } catch (javax.xml.bind.JAXBException e) { e.printStackTrace(stderr); } catch (com.amd.gerrit.plugins.manifestsubscription.ManifestReadException e) { e.printStackTrace(stderr); } catch (org.eclipse.jgit.api.errors.GitAPIException e) { e.printStackTrace(stderr); } }<END_MOD>
<START_MOD>com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(args, change.getProject(), change, false).load(); }<END_MOD>
<START_MOD>private java.util.List<java.lang.Object> extractParams(final com.google.gerrit.common.audit.Audit note, final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call, com.google.gson.Gson gson) { final java.util.List<java.lang.Object> args = new java.util.ArrayList<java.lang.Object>(); final java.lang.Object[] params = call.getParams(); final int[] obfuscate = note.obfuscate(); for (int i = 0; i < (params.length); i++) { java.lang.Object param = params[i]; if ((obfuscate.length) > 0) { for (int id : obfuscate) { if (id == i) { param = "*****"; break; } } } args.add(param); } return args; }<END_MOD>
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", (   =   + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((( <START_MOD>account<END_MOD>   + (staff.getName())) +   not in   + (GroupList.FILE_NAME))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "accounts.visibility", value = "SAME_GROUP") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.<START_MOD>extensions.common<END_MOD>.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, "user2", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }
<START_MOD>@com.google.gerrit.common.Nullable abstract java.lang.Long timeoutMs();<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException( reviewer field } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId)<START_MOD>, input.cc()<END_MOD>); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must match URL } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); <START_MOD>if (((input.patchSet) != 0) && ((input.patchSet) != (change.currentPatchSetId().get()))) { throw new com.google.gerrit.extensions.restapi.RestApiException( delete the vote of a stale patch set } <END_MOD>try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
<START_MOD>private com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute> accountAttributeSupplier(final com.google.gerrit.reviewdb.client.Account account) { return com.google.common.base.Suppliers.memoize(new com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute>() { @java.lang.Override public com.google.gerrit.server.data.AccountAttribute get() { return eventFactory.asAccountAttribute(account); } }); }<END_MOD>
<START_MOD>public long getRefreshCookieAt() { return refreshCookieAt; }<END_MOD>
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), <START_MOD>com.google.common.base.Suppliers.memoize(() -> <END_MOD>accountConfig.getProjectWatches()<START_MOD>)<END_MOD>,<START_MOD> com.google.common.base.Suppliers.memoize(() -><END_MOD> accountConfig.getGeneralPreferences())<START_MOD>)<END_MOD>; }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery(<START_MOD>"label:CodE-RevieW=ok,account=Administrators"<END_MOD>, change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,user1"); assertQuery("label:CodE-RevieW=need,user"); }
public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder(); if (migration.<START_MOD>writeChanges()) { org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes(); if (treeId != null) { builder.setTreeId(treeId); } } batch.<END_MOD>write(<START_MOD>builder<END_MOD>); if (<START_MOD>(draftUpdate)<END_MOD> != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } }
@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.<START_MOD>DiffPreferencesInfo<END_MOD> diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }
<START_MOD>private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { keys.add(t.name().toLowerCase()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.NotesMigration.NOTEDB)) { checkArgument(keys.contains(t.toLowerCase()), "invalid notedb table: %s", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.NotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.NotesMigration.READ))), "invalid notedb key: %s.%s", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.READ, false); checkArgument((!(read && (!write))), "must have write enabled when read enabled: %s", t); } }<END_MOD>
@java.lang.Override public java.io.File get() { <START_MOD>synchronized(dataDir) { <END_MOD>if (!(ready)) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format( create %s for plugin %s dataDir.getAbsolutePath(), getName())); } ready = true; } } return dataDir; }
<START_MOD>public boolean needsCookieRefresh() { return (refreshCookieAt) <= (java.lang.System.currentTimeMillis()); }<END_MOD>
<START_MOD>private void flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.NoteDbUpdateManager manager, com.google.gerrit.server.notedb.ChangeRebuilderImpl.EventList<com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event> events, com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { if (events.isEmpty()) { return; } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(controlFactory.controlFor(notesFactory.createWithAutoRebuildingDisabled(change), events.getUser(db)), events.getWhen()); update.setPatchSetId(events.getPatchSetId()); for (com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event e : events) { e.apply(update); } manager.add(update); events.clear(); }<END_MOD>
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = "gerrit-gwtui"; java.lang.String target = "ui_" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = (("//" + pkg) + ":") + target; java.lang.String child = java.lang.String.format("%s/__gwt_binary_%s__", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + ".zip")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.<START_MOD>BuckBuildFilter.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.BuckBuildFilter.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckBuildFilter.displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.<END_MOD>RecompileGwtUiFilter.<START_MOD>unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, <END_MOD>res)<START_MOD>; }<END_MOD>
@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.GIT_UPDATED); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn( plugin did not finish startup before event state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update u : event.getUpdates()) { for (com.googlesource.gerrit.plugins.replication.Destination cfg : configs<START_MOD>.getDestinations()<END_MOD>) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(u.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, u.getRefName(), uri, state); } } } } state.markAllPushTasksScheduled(); }
<START_MOD>@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutName.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.auth.AuthException, com.google.gwtorm.server.OrmException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.server.auth.AuthException("Not group owner"); } if ((input == null) || ((com.google.common.base.Strings.emptyToNull(input.newName)) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("new name is missing"); } try { return performRenameGroupFactory.create().renameGroup(resource.toAccountGroup().getId(), input.newName).group.getName(); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } catch (com.google.gerrit.common.errors.InvalidNameException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } }<END_MOD>
<START_MOD>void clear() { countsByRef.clear(); }<END_MOD>
private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { final org.eclipse.jgit.lib.FileMode oldMode = fileHeader.getOldMode(); final org.eclipse.jgit.lib.FileMode newMode = fileHeader.getNewMode(); if ((<START_MOD>(aTree<END_MOD> == <START_MOD>null<END_MOD>) || (<START_MOD>(fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty(<END_MOD>))) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } <START_MOD>java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); <END_MOD>if (<START_MOD>edits<END_MOD>.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } <START_MOD>else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader,<END_MOD> edits, sizeDelta); } }
<START_MOD>@java.lang.Override public com.google.gerrit.common.data.ExtGroup get(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (com.google.gerrit.server.auth.ldap.LdapGroupBackend.isLdapUUID(uuid)) { com.google.gerrit.reviewdb.client.AccountGroup.ExternalNameKey ext = com.google.gerrit.server.auth.ldap.LdapGroupBackend.externalNameKey(uuid); for (com.google.gerrit.reviewdb.client.AccountGroup g : groupCache.get(ext)) { if ((g.getGroupUUID()) != null) { return com.google.gerrit.common.data.ExtGroups.forAccountGroup(g); } } return lookup(ext); } else { return internalBackend.get(uuid); } }<END_MOD>
<START_MOD>com.google.gerrit.server.changedetail.DeleteDraft create(com.google.gerrit.reviewdb.PatchSet.Id patchSetId);<END_MOD>
<START_MOD>private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), com.google.gerrit.acceptance.rest.project.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }<END_MOD>
public void <START_MOD>addSubgroups<END_MOD>(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> <START_MOD>subgroupUuids<END_MOD>) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> <START_MOD>newSubgroups<END_MOD> = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : <START_MOD>subgroupUuids<END_MOD>) { boolean <START_MOD>isSubgroup<END_MOD> = groups.<START_MOD>isSubgroup<END_MOD>(db, parentGroupUuid, includedGroupUuid); if (!<START_MOD>isSubgroup<END_MOD>) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); <START_MOD>newSubgroups<END_MOD>.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (<START_MOD>newSubgroups<END_MOD>.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), <START_MOD>newSubgroups<END_MOD>); } db.accountGroupById().insert(<START_MOD>newSubgroups<END_MOD>); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : <START_MOD>newSubgroups<END_MOD>) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }
void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (lineLastPublishedBoxMap.containsKey(handle)) { <START_MOD>java.util.List<com.google.gerrit.client.diff.PublishedBox> list = lineLastPublishedBoxMap.get(handle); <END_MOD>lineActiveBoxMap.put(handle, <START_MOD>list<END_MOD>.get(<START_MOD>((list.size()) - 1)<END_MOD>)); } }
private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if (<START_MOD>(<END_MOD>notes != null) <START_MOD>&& ((notes.revisionNoteMap) != null)) <END_MOD>{ org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return checkNotNull(<START_MOD>notes<END_MOD>.revisionNoteMap); } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }
private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { <START_MOD>if ((item.getUrl().startsWith("#")) && (((item.getTarget()) == null) || (item.getTarget().isEmpty()))) { com.google.gerrit.client.ui.LinkMenuItem a = new com.google.gerrit.client.ui.LinkMenuItem(item.getName(), item.getUrl().substring(1)); if ((item.getId()) != null) { a.getElement().setAttribute("id", item.getId()); } m.add(a); } else { <END_MOD>com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); atag.setTarget(item.getTarget()); if ((item.getId()) != null) { atag.getElement().setAttribute("id", item.getId()); } m.add(atag); }<START_MOD> }<END_MOD>
<START_MOD>private static java.util.List<com.google.gitiles.CommitJsonData.Diff> toJsonData(java.util.List<org.eclipse.jgit.diff.DiffEntry> diffEntries) { java.util.List<com.google.gitiles.CommitJsonData.Diff> result = com.google.common.collect.Lists.newArrayListWithCapacity(diffEntries.size()); for (org.eclipse.jgit.diff.DiffEntry de : diffEntries) { com.google.gitiles.CommitJsonData.Diff d = new com.google.gitiles.CommitJsonData.Diff(); d.type = de.getChangeType().name().toLowerCase(); d.oldId = de.getOldId().name(); d.oldMode = de.getOldMode().getBits(); d.oldPath = de.getOldPath(); d.newId = de.getNewId().name(); d.newMode = de.getNewMode().getBits(); d.newPath = de.getNewPath(); switch (de.getChangeType()) { case COPY : case RENAME : d.score = de.getScore(); break; default : break; } result.add(d); } return result; }<END_MOD>
@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.<START_MOD>gerrit.client.diff.SideBySide2<END_MOD>.enableScrolling(false); cmA.setOption("viewportMargin", 10); cmB.setOption("viewportMargin", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }
private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(<START_MOD>accountByEmailCache, <END_MOD>accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow(((( to get submit type for   + (cd.getId())) +     + (str.errorMessage))); } return str.type; }
<START_MOD>private java.util.SortedMap<java.lang.String, com.google.gerrit.extensions.common.GroupInfo> query(com.google.gerrit.server.api.groups.QueryRequest r) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.group.QueryGroups myQueryGroups = queryGroups.get(); myQueryGroups.setQuery(r.getQuery()); myQueryGroups.setLimit(r.getLimit()); myQueryGroups.setStart(r.getStart()); for (com.google.gerrit.extensions.client.ListGroupsOption option : r.getOptions()) { myQueryGroups.addOption(option); } return myQueryGroups.apply(TopLevelResource.INSTANCE); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot query groups", e); } }<END_MOD>
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ?   <START_MOD>account<END_MOD> :   <START_MOD>account<END_MOD> java.util.StringJoiner footerJoiner = new java.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
<START_MOD>@java.lang.Override protected void configure() { bind(com.google.gerrit.rules.PrologRules.class); factory(PrologEnvironment.Factory.class); }<END_MOD>
@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException( already exists } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException( must match input.name } createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.ResourceNotFoundException | <START_MOD>java.io.IOException | org.eclipse.jgit<END_MOD>.errors.<START_MOD>ConfigInvalidException<END_MOD> e) { throw new com.google.gerrit.extensions.restapi.RestApiException(( create project:   + (e.getMessage())), e); } }
<START_MOD>@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); hide(); }<END_MOD>
@java.lang.Override protected void configure() {<START_MOD> com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.PatchSetWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class);<END_MOD> bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); }
private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { <START_MOD>org.eclipse.jgit.util.TemporaryBuffer.Heap buf<END_MOD> = <START_MOD>com.google.gerrit.httpd.restapi.RestApiServlet.heap(com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE), com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize<END_MOD>(bin.getContentLength())); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }
@java.lang.Override public boolean apply(com.google.gerrit.<START_MOD>server<END_MOD>.<START_MOD>account<END_MOD>.<START_MOD>ExternalId<END_MOD> externalId) { return (externalId.isScheme(AccountExternalId.SCHEME_EXTERNAL)) && (externalId.<START_MOD>asAccountExternalId().<END_MOD>getSchemeRest().startsWith(OAuthWebFilter.GITHUB_EXT_ID)); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } <START_MOD>com.google.common.collect.ImmutableListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = notes.load().getApprovals(); if (approvals != null) { <END_MOD>return <START_MOD>approvals<END_MOD>.get(psId); }<START_MOD> return java.util.Collections.emptyList(); }<END_MOD>
<START_MOD>public com.google.gerrit.reviewdb.client.AccountSshKey getKey(int seq) { checkState(((keys) != null), "SSH keys not loaded yet"); com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key = keys.get(seq); return key.isPresent() ? key.get() : null; }<END_MOD>
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { <START_MOD>evictTagCache(cmd); <END_MOD>} else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.<START_MOD>Person<END_MOD>> all() throws com.google.gwtorm.client.OrmException;
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException( delete GPG key e); } }
<START_MOD>public void loadedActionPanel(final com.google.gerrit.common.data.PatchSetDetail detail) { if (!(patchSet.getId().equals(diffBaseId))) { actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); actionsPanel.setVisible(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(actionsPanel); } }<END_MOD>
<START_MOD>@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { return engine.trust(gerrit.PRED_commit_delta_4.commit_delta_modify); }<END_MOD>
<START_MOD>@org.junit.Test public void patchSetObjectMissingWithFix() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = insertChange(); com.google.gerrit.reviewdb.client.PatchSet ps1 = insertPatchSet(c); incrementPatchSet(c); com.google.gerrit.reviewdb.client.PatchSet ps2 = insertMissingPatchSet(c, "deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"); com.google.gerrit.extensions.api.changes.FixInput fix = new com.google.gerrit.extensions.api.changes.FixInput(); fix.deletePatchSetIfRefMissing = true; java.util.List<com.google.gerrit.extensions.common.ProblemInfo> problems = checker.check(c, fix).problems(); assertThat(problems).hasSize(1); com.google.gerrit.extensions.common.ProblemInfo p = problems.get(0); assertThat(p.message).isEqualTo("Object missing: patch set 2: deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"); assertThat(p.status).isEqualTo(ProblemInfo.Status.FIXED); assertThat(p.outcome).isEqualTo("Deleted patch set"); c = db.changes().get(c.getId()); assertThat(c.currentPatchSetId().get()).isEqualTo(1); assertThat(db.patchSets().get(ps1.getId())).isNotNull(); assertThat(db.patchSets().get(ps2.getId())).isNull(); }<END_MOD>
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn(   expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(<START_MOD>com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY<END_MOD>); assertEquals(0, events.size()); tearDown(); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((( user or <START_MOD>account<END_MOD> matches   + who) + "\".")); }
public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); <START_MOD>messageBlock<END_MOD>.<START_MOD>display<END_MOD>(info); }
public void testInheritRead_SingleBranchDeniesUpload() { <START_MOD>com.google.gerrit.server.project.Util.<END_MOD>grant(<START_MOD>util.getParentConfig()<END_MOD>, com.google.gerrit.server.project.READ, <START_MOD>com.google.gerrit.server.project.Util.REGISTERED<END_MOD>, "refs/*"); <START_MOD>com.google.gerrit.server.project.Util.<END_MOD>grant(<START_MOD>util.getParentConfig()<END_MOD>, com.google.gerrit.server.project.PUSH, <START_MOD>com.google.gerrit.server.project.Util.REGISTERED<END_MOD>, "refs/for/refs/*"); <START_MOD>com.google.gerrit.server.project.Util.<END_MOD>grant(local, com.google.gerrit.server.project.READ, <START_MOD>com.google.gerrit.server.project.Util.REGISTERED<END_MOD>, "refs/heads/foobar"); doNotInherit(local, com.google.gerrit.server.project.READ, "refs/heads/foobar"); doNotInherit(local, com.google.gerrit.server.project.PUSH, "refs/for/refs/heads/foobar"); com.google.gerrit.server.project.ProjectControl u = <START_MOD>util.<END_MOD>user(<START_MOD>local<END_MOD>); assertTrue( upload ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue( upload refs/heads/master u.controlForRef("refs/heads/master").canUpload()); assertFalse( refs/heads/foobar u.controlForRef("refs/heads/foobar").canUpload()); }
<START_MOD>@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is ABANDONED", change._number)); createArbitraryEditFor(changeId); }<END_MOD>
public void addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { java.<START_MOD>lang<END_MOD>.<START_MOD>Iterable<END_MOD><com.google.gerrit.reviewdb.client.PatchSetApproval> cells = <START_MOD>makeApprovals<END_MOD>(update, labelTypes, ps, <START_MOD>changeCtl<END_MOD>, <START_MOD>approvals<END_MOD>); db.patchSetApprovals().insert(cells); }
<START_MOD>public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> approvals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals, com.google.gerrit.extensions.common.AccountInfo remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(change, revision, approvals, oldApprovals, remover, when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteRemoved(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn("Error in event listener", e); } } }<END_MOD>
<START_MOD>private static void addUpdates(com.google.common.collect.ListMultimap<java.lang.String, ? extends com.google.gerrit.server.notedb.AbstractChangeUpdate> updates, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo or) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.lang.String refName : updates.keySet()) { org.eclipse.jgit.lib.ObjectId old = firstNonNull(or.cmds.getObjectId(or.repo, refName), org.eclipse.jgit.lib.ObjectId.zeroId()); org.eclipse.jgit.lib.ObjectId curr = old; for (com.google.gerrit.server.notedb.AbstractChangeUpdate u : updates.get(refName)) { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); if (!(curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId()))) { cb.setParentId(curr); } com.google.gerrit.server.notedb.AbstractChangeUpdate.Status r = u.apply(cb, or.ins); switch (r) { case OK : if ((cb.getTreeId()) == null) { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { cb.setTreeId(com.google.gerrit.server.notedb.NoteDbUpdateManager.emptyTree(or)); } else { org.eclipse.jgit.revwalk.RevCommit p = or.rw.parseCommit(curr); cb.setTreeId(p.getTree()); } } curr = or.ins.insert(cb); u.setResult(curr); break; case EMPTY : continue; case DELETE_REF : curr = org.eclipse.jgit.lib.ObjectId.zeroId(); u.setResult(curr); break; default : throw new java.lang.IllegalStateException(("unexpected update result " + r)); } } if (!(old.equals(curr))) { or.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(old, curr, refName)); } } }<END_MOD>
@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id<START_MOD>, project<END_MOD>)); } else { super.onFailure(err); } }
<START_MOD>private void createStarredChangesRefs(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId, com.google.gerrit.server.git.ChainedReceiveCommands allUsersCmds, org.eclipse.jgit.lib.Repository allUsersRepo) throws com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.lib.ObjectId emptyTree = com.google.gerrit.server.notedb.ChangeRebuilderImpl.emptyTree(allUsersRepo); for (com.google.gerrit.reviewdb.client.StarredChange starred : db.starredChanges().byChange(changeId)) { allUsersCmds.add(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), emptyTree, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(starred.getAccountId(), changeId))); } }<END_MOD>
@org.junit.Test public void postComment() throws java.lang.Exception { java.lang.String file = "file"; java.lang.String contents = "contents"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(),   subject file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); ReviewInput input = new ReviewInput(); ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION,   1 input.comments = new java.util.HashMap(); input.comments.put(comment.path, Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { <START_MOD>return<END_MOD> <START_MOD>getChange<END_MOD>(pr.getChangeId(), <START_MOD>ListChangesOption<END_MOD>.<START_MOD>DETAILED_LABELS<END_MOD>); }
<START_MOD>@java.lang.Override public java.lang.String getPluginName(java.io.File srcFile) { try { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.JarPluginProvider.getGerritJarPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)); } catch (java.io.IOException e) { throw new java.lang.IllegalArgumentException((("Invalid plugin file " + srcFile) + ": cannot get plugin name"), e); } }<END_MOD>
private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) <START_MOD>throws com.google.gwtorm.server.OrmException <END_MOD>{ return notesFactory.create(db, change); }
<START_MOD>private boolean canCherryPick(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { final org.eclipse.jgit.merge.ThreeWayMerger m = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(), useContentMerge); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException(("Cannot merge " + (toMerge.name())), e); } } return (com.google.gerrit.server.git.MergeUtil.canFastForward(mergeSorter, mergeTip, rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(mergeSorter, repo, useContentMerge, mergeTip, toMerge)); }<END_MOD>
<START_MOD>@org.junit.Test public void rebuildAutomaticallyWhenOnlyWritesEnabled() throws java.lang.Exception { notesMigration.setWriteChanges(true); notesMigration.setReadChanges(false); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getPatchSetId().getParentKey(); assertChangeUpToDate(true, id); notesMigration.setAllEnabled(false); gApi.changes().id(id.get()).topic(name("a-topic")); setInvalidNoteDbState(id); assertChangeUpToDate(false, id); notesMigration.setWriteChanges(true); assertThat(gApi.changes().id(id.get()).info().topic).isEqualTo(name("a-topic")); assertChangeUpToDate(true, id); com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.create(db, project, id); assertThat(notes.getPatchSets().isEmpty()); notesMigration.setReadChanges(true); com.google.gerrit.server.notedb.ChangeBundle actual = com.google.gerrit.server.notedb.ChangeBundle.fromNotes(plcUtil, notesFactory.create(dbProvider.get(), project, id)); com.google.gerrit.server.notedb.ChangeBundle expected = com.google.gerrit.server.notedb.ChangeBundle.fromReviewDb(unwrapDb(), id); assertThat(actual.differencesFrom(expected)).isEmpty(); }<END_MOD>
public com.google.gerrit.server.notedb.DraftCommentNotes getDraftComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { if (((draftCommentNotes) == null) || (!(author.equals(draftCommentNotes.getAuthor())))) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes(repoManager, allUsersRepo, <START_MOD>getChangeId<END_MOD>(), author); draftCommentNotes.load(); } return draftCommentNotes; }
public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { <START_MOD>return<END_MOD> <START_MOD>run<END_MOD>(projectNames<START_MOD>,<END_MOD> <START_MOD>gcConfig.getAggressive<END_MOD>(), <START_MOD>writer<END_MOD>); }
private java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> getDescriptions(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.util.Set<java.lang.String> branches) throws java.io.IOException { java.<START_MOD>lang.String prefix = com.google.gitiles.HostIndexServlet.getPrefix(req); java.<END_MOD>util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> descs; try { descs = getAccess(req).listRepositories(<START_MOD>prefix, <END_MOD>branches); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotEnabledException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException e) { res.sendError(com.google.gitiles.SC_UNAUTHORIZED); return null; } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (java.io.IOException err) { java.lang.String name = urls.getHostName(req); com.google.gitiles.HostIndexServlet.log.warn(( scan repositories + (name != null ?   for   + name : "")), err); res.sendError(com.google.gitiles.SC_SERVICE_UNAVAILABLE); return null; } <START_MOD>if ((prefix != null) && (<END_MOD>descs<START_MOD>.isEmpty())) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } return descs; }<END_MOD>
private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip<START_MOD>, toMerge.get(submitType)<END_MOD>), destBranch); }
<START_MOD>java.lang.String getAdminUrl() { return this.adminUrlRemote; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.util.List<java.lang.Object>> apply(java.util.List<com.google.gerrit.reviewdb.client.Change> changes) { java.util.List<com.google.common.util.concurrent.ListenableFuture<?>> result = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (final com.google.gerrit.reviewdb.client.Change c : changes) { if (reindex) { com.google.common.util.concurrent.ListenableFuture<java.lang.Boolean> b = executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force)); result.add(com.google.common.util.concurrent.Futures.transform(b, new com.google.common.util.concurrent.AsyncFunction<java.lang.Boolean, java.lang.Object>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(java.lang.Boolean indexUpdated) throws java.lang.Exception { if (!indexUpdated) { return ((com.google.common.util.concurrent.ListenableFuture<java.lang.Object>) (indexer.indexAsync(c.getId()))); } return com.google.common.util.concurrent.Futures.immediateFuture(null); } })); } else { result.add(executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force))); } } return com.google.common.util.concurrent.Futures.allAsList(result); }<END_MOD>
@org.junit.Test @com.google.gerrit.acceptance.<START_MOD>rest.change.<END_MOD>GerritConfigs({ @com.google.gerrit.acceptance.<START_MOD>rest.change.<END_MOD>GerritConfig(name = "addreviewer.maxAllowed", value = "2"), @com.google.gerrit.acceptance<START_MOD>.rest.change<END_MOD>.GerritConfig(name = "addreviewer.maxWithoutConfirmation", value = "1") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group("large"); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group("medium"); user( 0   Last0 largeGroup, mediumGroup); user( 1   Last1 largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, "test", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }
<START_MOD>@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.List<java.lang.Object> reviewers = new java.util.ArrayList<java.lang.Object>(); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.Change.Id changeId = rsrc.getChange().getId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval patchSetApproval : db.patchSetApprovals().byChange(changeId)) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(patchSetApproval.getAccountId()).getAccount(); reviewers.add(json.format(new com.google.gerrit.server.change.ReviewerResource(rsrc, account))); } return reviewers; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.client.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.ChangeUtil.rebaseChange(patchSetId, currentUser, db, rebasedPatchSetSenderFactory, hooks, gitManager, patchSetInfoFactory, replication, myIdent, changeControlFactory, approvalTypes); return changeDetailFactory.create(patchSetId.getParentKey()).call(); }<END_MOD>
public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--is-draft", (patchSet.isDraft() ? "true" : "false")); addArg(args, "--change-url", event.change.url); addArg(args, <START_MOD>"--change-owner", ((((event.change.owner.name) +   ( + (event.change.owner.email)) + ")")); addArg(args, <END_MOD>"--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, "--uploader", getDisplayName(uploader.getAccount())); addArg(args, "--commit", event.patchSet.revision); addArg(args, "--patchset", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }
@java.lang.Override public void run() { <START_MOD>try<END_MOD> <START_MOD>(<END_MOD>com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } <START_MOD>catch (com.google.gwtorm.server.OrmException e)<END_MOD> { <START_MOD>e<END_MOD>.<START_MOD>printStackTrace<END_MOD>()<START_MOD>; return<END_MOD>; } }
public abstract com.google.gerrit.server.<START_MOD>patchlib<END_MOD>.Text bText();
<START_MOD>public void testThreeLevelTreeWithSomeIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> op1 = new com.google.gerrit.server.query.change.IndexRewriteTest.OpPredicate("o1", "o1"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f21 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate("f21"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> f22 = new com.google.gerrit.server.query.change.IndexRewriteTest.FieldPredicate("f22"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> n1 = com.google.gerrit.server.query.Predicate.not(op1); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> o2 = com.google.gerrit.server.query.Predicate.or(f21, f22); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = com.google.gerrit.server.query.Predicate.and(n1, o2); assertEquals(2, in.getChildCount()); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite.rewrite(in); assertSame(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(n1, wrap(o2)), out.getChildren()); }<END_MOD>
public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { <START_MOD>accountInfoCache<END_MOD> = <START_MOD>new com.google.gerrit.server.change.AccountInfo.Cache<END_MOD>(db, <START_MOD>(!(options.contains(com.google.gerrit.server.change.DETAILED_ACCOUNTS)))); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded<END_MOD>(db, changes); com.google.gerrit.server.query.change.ChangeData.<START_MOD>ensureCurrentPatchSetLoaded<END_MOD>(db, changes); <START_MOD>com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); <END_MOD>res.add(toChangeInfo(changes)); } <START_MOD>accountInfoCache.fill(); return res<END_MOD>; }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug( {} successfully indexed id); <START_MOD>indexTs.update("account"); <END_MOD>}
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "suggest.from", value = "2") public void suggestReviewersNoResult3() throws java.io.IOException, java.lang.Exception, org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.<START_MOD>extensions<END_MOD>.<START_MOD>common<END_MOD>.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, "u", 6); assertEquals(reviewers.size(), 0); }
protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.<START_MOD>extensions.common.DiffPreferencesInfo dp = s.getDiffPrefs(); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify<END_MOD>.client.<START_MOD>PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(<END_MOD>dp<START_MOD>); f.setFileName(b.getPath()); f.setEditFilter(<END_MOD>PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }
private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final <START_MOD>com.google.gerrit.common.data.<END_MOD>UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { <START_MOD>b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb<END_MOD> = new com.google.<START_MOD>gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString><END_MOD>() { @java.lang.Override public void <START_MOD>onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught)<END_MOD>.center(); } @java.lang.Override public void <START_MOD>onSuccess(com.google.gerrit.client.rpc.NativeString msg<END_MOD>) { b.setEnabled(true); <START_MOD>if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } } }; <END_MOD>com.google.gerrit.client.rpc.<START_MOD>RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id<END_MOD>); if (<START_MOD>"PUT".equalsIgnoreCase(cmd.method)) {<END_MOD> api<START_MOD>.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else<END_MOD> if (<START_MOD>"DELETE"<END_MOD>.equalsIgnoreCase(cmd.method)) { api.<START_MOD>delete(cb); } else { api.post<END_MOD>(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }
<START_MOD>private void createEmptyCommit(final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.Project.NameKey project, final java.lang.String ref) throws java.io.IOException { org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter(); try { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(oi.insert(Constants.OBJ_TREE, new byte[]{ })); cb.setCommitter(currentUser.newCommitterIdent()); cb.setAuthor(cb.getCommitter()); cb.setMessage("Initial empty repository"); org.eclipse.jgit.lib.ObjectId id = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(Constants.HEAD); ru.setNewObjectId(id); final org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : rq.scheduleUpdate(project, ref); break; default : { final java.lang.String msg = (("Cannot create empty commit for " + (projectName)) + ": ") + (result.name()); com.google.gerrit.sshd.commands.CreateProject.log.error(msg); throw new java.io.IOException(result.name()); } } } catch (java.io.IOException e) { com.google.gerrit.sshd.commands.CreateProject.log.error(("Cannot create empty commit for " + (projectName)), e); throw e; } finally { oi.release(); } }<END_MOD>
<START_MOD>public com.google.gerrit.extensions.registration.DynamicItem<T> get() { return new com.google.gerrit.extensions.registration.DynamicItem<T>(com.google.gerrit.extensions.registration.DynamicItemProvider.find(injector, type)); }<END_MOD>
<START_MOD>com.google.gitiles.CommitData.Builder setArchiveFormat(com.google.gitiles.ArchiveFormat archiveFormat) { this.archiveFormat = checkNotNull(archiveFormat, "archiveFormat"); return this; }<END_MOD>
<START_MOD>@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource resource, com.google.gerrit.server.change.ChangeEdits.Post.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(resource.getChange()); if (!(edit.isPresent())) { edit = createEdit(resource.getChange()); } if ((((input != null) && (!(com.google.common.base.Strings.isNullOrEmpty(input.path)))) && ((input.restore) != null)) && (input.restore)) { editModifier.restoreFile(edit.get(), input.path); } return com.google.gerrit.extensions.restapi.Response.none(); }<END_MOD>
protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else <START_MOD>if (p instanceof com.google.gerrit.server.query.AnyPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else <END_MOD>{ throw new com.google.gerrit.server.query.QueryParseException(( create query for index:   + p)); } }
<START_MOD>@java.lang.Override public <END_MOD>void cancel() { canceled = true; }
public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackendConfig config = defaultBackend; if (!(com.google.common.base.Strings.isNullOrEmpty(backendName))) { config = backends.get(backendName); if (config == null) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } switch (config.type) { case FS : return <START_MOD>fsRepositories.getRepository<END_MOD>(config); case S3 : return <START_MOD>s3Repositories.getRepository<END_MOD>(config); default : throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); <START_MOD>factory(PerformUpdateParentsImpl.Factory.class); <END_MOD>}
<START_MOD>private void index(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String operation) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicInteger changeIdLock = getAndIncrementChangeIdLock(id); synchronized(changeIdLock) { if ("index".equals(operation)) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(id); } indexer.index(db, change); } com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug("Change {} successfully indexed", id); } else if ("delete".equals(operation)) { indexer.delete(id); com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug("Change {} successfully deleted from index", id); } } if ((changeIdLock.decrementAndGet()) == 0) { removeChangeIdLock(id); } }<END_MOD>
@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); <START_MOD>org.eclipse.jgit.revwalk.RevCommit commit = tr.commit().message("PS1").create(); update = newUpdate(c, changeOwner); update.setCommit(rw, commit); <END_MOD>update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); <START_MOD>com.google.gerrit.reviewdb.client.PatchSet ps = <END_MOD>notes.getCurrentPatchSet()<START_MOD>; assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(notes.getChange().getSubject()).isEqualTo("PS1"); assertThat(notes.getChange().getOriginalSubject()).isEqualTo("PS1"); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(changeOwner.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); incrementPatchSet(c); commit = tr.commit().message("PS2").create(<END_MOD>); update = newUpdate(c, <START_MOD>otherUser<END_MOD>); update.setCommit(<START_MOD>rw, <END_MOD>commit); update.commit(); notes = newNotes(c); <START_MOD>ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new <END_MOD>com.google.gerrit.reviewdb.client.PatchSet<START_MOD>.Id(c<END_MOD>.getId()<START_MOD>, 2)); assertThat(notes.getChange().getSubject()).isEqualTo("PS2"); assertThat(notes.getChange().getOriginalSubject()).isEqualTo("PS1"); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps<END_MOD>.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(<START_MOD>otherUser<END_MOD>.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); }
<START_MOD>public java.util.Map<K, V> getAll(java.lang.Iterable<? extends K> keys);<END_MOD>
private void postDeletion(com.google.gerrit.server<START_MOD>.restapi<END_MOD>.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
@java.lang.Override public void onReplaceByKeys(<START_MOD>org.eclipse.jgit.lib.ObjectId oldNotesRev, <END_MOD>org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(<START_MOD>oldNotesRev, <END_MOD>newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.values(), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }
@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug( connected. return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info( to {}... properties.getProperty("bootstrap.servers")); <START_MOD>java.lang.Thread.currentThread().setContextClassLoader(null); <END_MOD>producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info( established. }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); <START_MOD>if (changeDetail.getChange().getStatus().isClosed()) { java.lang.String cm = detail.getInfo().getMessage().trim(); java.lang.String cmWithoutChangeId = cm.substring(0, cm.lastIndexOf("Change-Id")); java.lang.String cmChangeId = cm.substring(cm.lastIndexOf("Change-Id")); <END_MOD>message.setText(Util.M.cherryPickedChangeDefaultMessage(<START_MOD>cmWithoutChangeId, <END_MOD>detail.<START_MOD>getPatchSet().getRevision().get(), cmChangeId)); } else { message.setText(detail.<END_MOD>getInfo().getMessage().trim()<START_MOD>); }<END_MOD> } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }
<START_MOD>private final native com.google.gwt.core.client.JsArray<com.google.gerrit.client.config.DownloadInfo.ArchiveFormatInfo> _archives();<END_MOD>
private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); <START_MOD>final com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> ownerGroups = getOwnerGroups(rc); <END_MOD>for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { <START_MOD>final<END_MOD> java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, <START_MOD>resolveOwnerGroups(<END_MOD>categoryRights, <START_MOD>ownerGroups), <END_MOD>category); } }