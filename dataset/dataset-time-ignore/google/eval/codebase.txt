
private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final org.bouncycastle.openpgp.PGPEncryptedDataGenerator cpk = new org.bouncycastle.openpgp.PGPEncryptedDataGenerator(org.bouncycastle.openpgp.PGPEncryptedData.CAST5, true, prng, "BC"); cpk.addMethod(dest); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk.open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add starred change"); } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } return com.google.gerrit.extensions.restapi.Response.none(); }
private java.util.Optional<com.google.gerrit.server.patch.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.patch.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }
@com.google.gwt.uibinder.client.UiHandler("save") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }

public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.schema.SchemaUpdater.unwrap(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot initialize schema", e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException("Cannot upgrade schema", e); } updateSystemConfig(db); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("only site administrators can flush %s", com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""); }
void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } draftUpdate.insertComment(c); }


void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectControl, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }
private static java.lang.String skip(final java.lang.String prefix, final java.lang.String in) { return in.substring(prefix.length()); }
void resizeCodeMirror() { int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + 5; if ((cmA) != null) { cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); } if ((cmB) != null) { cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); } diffTable.sidePanel.adjustGutters(cmB); }

@java.lang.Override public void run() { try { java.nio.file.Files.walkFileTree(gitDir, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn("Exception occured while trying to delete trash folders", e); } }
static boolean onTime(java.lang.String dateTime) { java.lang.String now = com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.now()); return (now.compareTo(dateTime)) <= 0; }
public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { for (index--; index > (-1); index--) { com.google.gerrit.client.ui.InlineHyperlink link = createLink(index, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); if (link != null) { return link; } } return null; }

void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(com.google.gerrit.common.data.GlobalCapability.isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } return rec; }
private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), "Project was deleted."); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn(("Cannot abandon changes for deleted project " + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn(("Cannot abandon changes for deleted project " + destProject), e); } }

@java.lang.Override public void visit(com.google.gitiles.doc.NamedAnchorNode node) { if (outputNamedAnchor) { html.open("a").attribute("name", node.name).close("a"); } }
@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(("Testing paragraph 1\n" + ((("\n" + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3"))); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(("Update patch set 1\n" + ((((((("\n" + "Testing paragraph 1\n") + "\n") + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3\n") + "\n") + "Patch-set: 1\n")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(("Testing paragraph 1\n" + ((("\n" + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3")), changeMessages.get(0)); }





@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { assertThat(args.getCommands().keySet()).contains("refs/heads/master"); try (org.eclipse.jgit.revwalk.RevWalk rw = args.newRevWalk()) { rw.parseBody(rw.parseCommit(args.getCommands().get("refs/heads/master").getNewId())); } catch (java.io.IOException e) { assertThat(e).isNull(); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException("time to fail"); } }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); if (newState == null) { return super.openHandle(repo, oldId); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.user(userProviderMock)).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }
@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); assertFalse("not owner", uDev.isOwner()); assertTrue("owns ref", uDev.isOwnerAnyRef()); com.google.gerrit.server.project.RefControlTest.assertOwner("refs/heads/x/*", uDev); com.google.gerrit.server.project.RefControlTest.assertOwner("refs/heads/x/y", uDev); com.google.gerrit.server.project.RefControlTest.assertOwner("refs/heads/x/y/*", uDev); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/*", uDev); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertFalse("not owner", uFix.isOwner()); assertTrue("owns ref", uFix.isOwnerAnyRef()); com.google.gerrit.server.project.RefControlTest.assertOwner("refs/heads/x/y/*", uFix); com.google.gerrit.server.project.RefControlTest.assertOwner("refs/heads/x/y/bar", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/heads/x/*", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/heads/x/y", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/*", uFix); com.google.gerrit.server.project.RefControlTest.assertNotOwner("refs/heads/master", uFix); }

public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject.RANGE_SUBJECT_FACTORY).that(range); }
private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.getConfig().canEdit(Account.FieldName.USER_NAME); }
public void onSuccess(final com.google.gerrit.client.data.UnifiedPatchDetail r) { if (isAttached()) { display(r); } }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Owner UUID of the group users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@java.lang.Override public void execute() { file.setFocus(true); }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, null).reset(project).reset(allUsers).build()) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache); }
public com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), rsrc.getControl()); cd.limitToPatchSets(com.google.common.collect.ImmutableList.of(rsrc.getPatchSet().getId())); return format(cd); }

private void updateHeadRemoteSsh(org.eclipse.jgit.transport.CredentialsProvider credsProvider, org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = (("cd " + quotedPath) + " && git symbolic-ref HEAD ") + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = com.googlesource.gerrit.plugins.replication.ReplicationQueue.newErrorBufferStream(); try { executeRemoteSsh(credsProvider, uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error(java.lang.String.format(("Error updating HEAD of remote repository at %s to %s:\n" + ((" Exception: %s\n" + " Command: %s\n") + " Output: %s")), uri, newHead, e, cmd, errStream), e); } }


@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { final com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); final java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = new java.util.ArrayList<com.google.gerrit.reviewdb.client.Branch>(); com.google.gerrit.reviewdb.client.Branch headBranch = null; com.google.gerrit.reviewdb.client.Branch configBranch = null; final java.util.Set<java.lang.String> targets = new java.util.HashSet<java.lang.String>(); final org.eclipse.jgit.lib.Repository db; try { db = repoManager.openRepository(projectName); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { return new com.google.gerrit.common.data.ListBranchesResult(branches, false, true); } try { final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = db.getAllRefs(); if (!(all.containsKey(Constants.HEAD))) { try { org.eclipse.jgit.lib.Ref head = db.getRef(Constants.HEAD); if (head != null) { all.put(Constants.HEAD, head); } } catch (java.io.IOException e) { } } for (final org.eclipse.jgit.lib.Ref ref : all.values()) { if (ref.isSymbolic()) { targets.add(ref.getTarget().getName()); } } for (final org.eclipse.jgit.lib.Ref ref : all.values()) { if (ref.isSymbolic()) { java.lang.String target = ref.getTarget().getName(); com.google.gerrit.server.project.RefControl targetRefControl = pctl.controlForRef(target); if (!(targetRefControl.isVisible())) { continue; } if (target.startsWith(Constants.R_HEADS)) { target = target.substring(Constants.R_HEADS.length()); } com.google.gerrit.reviewdb.client.Branch b = createBranch(ref.getName()); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(target)); if (Constants.HEAD.equals(ref.getName())) { b.setCanDelete(false); headBranch = b; } else { b.setCanDelete(targetRefControl.canDelete()); branches.add(b); } continue; } final com.google.gerrit.server.project.RefControl refControl = pctl.controlForRef(ref.getName()); if (refControl.isVisible()) { if (ref.getName().startsWith(Constants.R_HEADS)) { branches.add(createBranch(ref, refControl, targets)); } else if (GitRepositoryManager.REF_CONFIG.equals(ref.getName())) { configBranch = createBranch(ref, refControl, targets); } } } } finally { db.close(); } java.util.Collections.sort(branches, new java.util.Comparator<com.google.gerrit.reviewdb.client.Branch>() { @java.lang.Override public int compare(final com.google.gerrit.reviewdb.client.Branch a, final com.google.gerrit.reviewdb.client.Branch b) { return a.getName().compareTo(b.getName()); } }); if (configBranch != null) { branches.add(0, configBranch); } if (headBranch != null) { branches.add(0, headBranch); } return new com.google.gerrit.common.data.ListBranchesResult(branches, pctl.canAddRefs(), false); }

@org.kohsuke.args4j.Option(name = "-o", usage = "Output options per group") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { com.google.gerrit.server.project.Util.allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, "refs/*"); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch("branch1").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(id1))); repo.branch("branch1").update(parent1); assertTrue(pc.canReadCommit(db, rw, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, rw, rw.parseCommit(id1))); }

final void setState(com.google.gerrit.reviewdb.client.Project.State s) { setStateRaw(s.name()); }


@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return super.convertError(op, entity, err); } }
@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }

@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(new com.google.gerrit.server.account.AccountState(allUsersName, account, com.google.common.collect.ImmutableSet.of(), com.google.common.base.Suppliers.ofInstance(com.google.common.collect.ImmutableMap.of()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.GeneralPreferencesInfo.defaults()), com.google.common.base.Suppliers.ofInstance(com.google.gerrit.extensions.client.DiffPreferencesInfo.defaults())))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }




@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (com.google.gerrit.server.update.UpdateException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete assignee", e); } }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().removeCommentBox(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); getPaddingWidget().clear(); }





@org.junit.Test public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.RevisionApi revision = gApi.changes().id(r.getChangeId()).current(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput(); in.onBehalfOf = user.id.toString(); in.label("Not-A-Label", 5); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Not-A-Label\" is not a configured label"); revision.review(in); }
static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }
private com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == (-1))); if (index != null) { config = config.set("insertAt", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.LineWidgetElementPair(widget, div); }
@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.reviewdb.AccountGroup>> callback) { myGroupsFactory.create().to(callback); }


@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, oldCurrentPatchSet)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertFalse(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())); }
public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { if (in instanceof com.google.gerrit.server.query.change.ChangeStatusPredicate) { return java.util.EnumSet.of(((com.google.gerrit.server.query.change.ChangeStatusPredicate) (in)).getStatus()); } else if ((in.getClass()) == (com.google.gerrit.server.query.NotPredicate.class)) { return java.util.EnumSet.complementOf(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(0))); } else if ((in.getClass()) == (com.google.gerrit.server.query.OrPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.noneOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.addAll(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getClass()) == (com.google.gerrit.server.query.AndPredicate.class)) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = java.util.EnumSet.allOf(Change.Status.class); for (int i = 0; i < (in.getChildCount()); i++) { s.retainAll(com.google.gerrit.server.query.change.IndexRewriteImpl.getPossibleStatus(in.getChild(i))); } return s; } else if ((in.getChildCount()) == 0) { return java.util.EnumSet.allOf(Change.Status.class); } else { throw new java.lang.IllegalStateException(("Invalid predicate type in change index query: " + (in.getClass()))); } }
public com.google.gerrit.server.account.AccountSshKey.Id getKey() { return id; }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(change.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append(" ").append(p.getNewName()).append("\n"); } detail.append(java.text.MessageFormat.format(("" + ((("{0,choice,0#0 files|1#1 file|1<{0} files} changed, " + "{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), ") + "{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)") + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn("Cannot format change detail", err); return ""; } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isForceBlocked(Permission.PUSH)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }



@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) { if ("starred".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args, currentUser); } if ("watched".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, currentUser, false); } if ("visible".equalsIgnoreCase(value)) { return is_visible(); } if ("reviewed".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if ("owner".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if ("reviewer".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if ("mergeable".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }
public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format("Project %s has invalid notify %s filter \"%s\": %s", state.getProject().getName(), nc.getName(), nc.getFilter(), e.getMessage())); } } } } return matching; }
@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } }

@java.lang.Override protected void loadPrev() { Util.LIST_SVC.allQueryPrev(query, pos, pageSize, loadCallback()); }
@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, "refs/for/refs/*"); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/drafts/*"); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertTrue("can upload refs/heads/master", u.controlForRef("refs/heads/master").canUpload()); assertTrue("push is blocked to refs/drafts/master", u.controlForRef("refs/drafts/refs/heads/master").isBlocked(com.google.gerrit.server.project.PUSH)); }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { hide(); }

public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); default : throw new java.lang.IllegalArgumentException(("Invalid view type: " + view)); } }



@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
public static com.google.gerrit.server.patch.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.patch.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }


@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo("Code-Review"); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, 2000))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo("Code-Review"); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, 3000))); }
public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gerrit.server.account.NoSuchGroupException, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.canAdd(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }
private java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return ""; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append(","); } out.append(scope.getValue()); } return ("&" + "scope=") + (out.toString()); }

protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format("%s not equal %s", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }
private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get("Code-Review"); assertEquals((-1), ((int) (cr.defaultValue))); assertEquals(1, cr.all.size()); assertEquals("Administrator", cr.all.get(0).name); assertEquals(expected, cr.all.get(0).value.intValue()); }

@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); }

private void process(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp, java.lang.String operation) { rsp.setContentType("text/plain"); rsp.setCharacterEncoding("UTF-8"); java.lang.String path = req.getPathInfo(); java.lang.String changeId = path.substring(((path.lastIndexOf('/')) + 1)); com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(changeId); try { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.setForwardedEvent(true); index(id, operation); rsp.setStatus(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NO_CONTENT); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_CONFLICT, e.getMessage()); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.error("Unable to update change index", e); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = "Error trying to find a change \n"; com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.sendError(rsp, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.SC_NOT_FOUND, msg); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexChangeRestApiServlet.logger.debug(msg, e); } finally { com.ericsson.gerrit.plugins.highavailability.forwarder.Context.unsetForwardedEvent(); } }


@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();


public void display(final java.lang.String commitMessage) { com.google.gwtexpui.safehtml.client.SafeHtml msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitMessage); msg = msg.linkify(); msg = com.google.gerrit.client.ui.CommentLinkProcessor.apply(msg); msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openElement("p").append(msg).closeElement("p"); msg = msg.replaceAll("\n\n", "</p><p>"); msg = msg.replaceAll("\n", "<br />"); com.google.gwtexpui.safehtml.client.SafeHtml.set(description, msg); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); }
@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.FileInfo> files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); int index = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { index = i; break; } } com.google.gerrit.client.info.FileInfo nextInfo = (index == ((files.length()) - 1)) ? null : files.get((index + 1)); com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), (index == 0 ? null : files.get((index - 1)))); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }
private java.lang.String urlPublishEdit() { return ((("/changes/" + (change.getChangeId())) + "/edits/") + 0) + "/publish/"; }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, added, e); } }
@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(args.repo, toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(args.repo, args.inserter, args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }

@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message("listing all repositories ..."); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message("done"); ui.message(java.lang.String.format("creating reflog files for %s branches ...", RefNames.REFS_CONFIG)); for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { java.io.File metaConfigLog = new java.io.File(repo.getDirectory(), ("logs/" + (com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG))); if (metaConfigLog.exists()) { continue; } if ((!(metaConfigLog.getParentFile().mkdirs())) || (!(metaConfigLog.createNewFile()))) { throw new java.io.IOException(java.lang.String.format("Failed to create reflog for %s in repository %s", RefNames.REFS_CONFIG, project)); } org.eclipse.jgit.lib.ObjectId metaConfigId = repo.resolve(RefNames.REFS_CONFIG); if (metaConfigId != null) { try (java.io.PrintWriter writer = new java.io.PrintWriter(metaConfigLog, java.nio.charset.StandardCharsets.UTF_8.name())) { writer.print(org.eclipse.jgit.lib.ObjectId.zeroId().name()); writer.print(" "); writer.print(metaConfigId.name()); writer.print(" "); writer.print(serverUser.toExternalString()); writer.print("\t"); writer.print("create reflog"); writer.println(); } } } catch (java.io.IOException e) { ui.message(java.lang.String.format(("ERROR: Failed to create reflog file for the" + " %s branch in repository %s"), RefNames.REFS_CONFIG, project.get())); } } ui.message("done"); }
@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder("Patch Set ").append(psId.get()).append(": Cherry Picked").append("\n\n").append("This patchset was cherry picked to branch ").append(destBranch).append(" as commit ").append(cherryPickCommit.name()); com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString()); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }




@java.lang.Override public void onSuccess(final com.google.gerrit.client.projects.ProjectMap result) { projectsTab.display(result, subname); if (firstPopupLoad) { firstPopupLoad = false; displayPopup(); } }
@java.lang.Override public void log(java.lang.Exception reason, java.lang.String msg) { log(msg, reason); }
boolean canForceEditTopicName() { return canForcePerform(Permission.EDIT_TOPIC_NAME); }


@java.lang.Override protected void preDisplay(java.lang.String content) { setShowTabs(prefs.showTabs()); initEditor(content); }

void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug("Loading .gitmodules of {} for project {}", branch, project); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId id = repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(("Cannot open branch " + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(("Could not read .gitmodule file of super project: " + (branch.getParentKey())), e); } }
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("edit not permitted", denied); } }
private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException(("update failed: " + ru)); } return res; }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); boolean canDelete = perm.testOrFalse(RefPermission.DELETE); java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tag.getTaggerIdent()) : null), canDelete, (webLinks.isEmpty() ? null : webLinks)); } return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks)); }
private com.google.common.base.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return com.google.common.base.Optional.absent(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return com.google.common.base.Optional.absent(); } com.google.common.base.Optional<com.google.gerrit.server.patch.PatchList> p = getPatchList(c, ps); if (!(p.isPresent())) { return com.google.common.base.Optional.absent(); } return com.google.common.base.Optional.of(new com.google.gerrit.server.query.change.ChangeData.ChangedLines(p.get().getInsertions(), p.get().getDeletions())); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); HEAD(bb16a6); }



@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); modules.add(new com.google.gerrit.httpd.plugins.HttpPluginModule()); com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { modules.add(new com.google.gerrit.httpd.auth.openid.OpenIdModule()); } else if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OAUTH)) { modules.add(new com.google.gerrit.httpd.auth.oauth.OAuthModule()); } modules.add(sysInjector.getInstance(com.google.inject.Module.class)); return sysInjector.createChildInjector(modules); }
@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getParentCount()).isEqualTo(2); assertThat(head.getParent(0)).isEqualTo(oldHead); assertThat(head.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(serverIdent.get(), head.getCommitterIdent()); }
public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", com.google.gwt.http.client.URL.encodeQueryString(project.get())); return (baseUrl) + (pattern.replace(p)); }
private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set("readOnly", true).set("lineNumbers", true).set("tabSize", 2).set("value", diff.text_b()); if (((diff.meta_b()) != null) && ((diff.meta_b().content_type()) != null)) { cfg.set("mode", diff.meta_b().content_type()); } cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth("100%"); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }

@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupType(); initMemberList(); initExternal(); }
private int search(final java.lang.String fileName) { if (Patch.COMMIT_MSG.equals(fileName)) { return 0; } if ((isMerge) && (Patch.MERGE_LIST.equals(fileName))) { return 1; } int high = patches.length; int low = (isMerge) ? 2 : 1; while (low < high) { final int mid = (low + high) >>> 1; final int cmp = patches[mid].getNewName().compareTo(fileName); if (cmp < 0) { low = mid + 1; } else if (cmp == 0) { return mid; } else { high = mid; } } return -(low + 1); }

public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.findOkRecord(results).isPresent()) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : case OK : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }
@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, "refs/*"); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags(); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tag("tag").get(); }
private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.getKey(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel(((" (" + (job.getValue().duration())) + ")"))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }
com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(getLineMapper().lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }

public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId), "missing current patch set %s", psId.get()); }


@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); insert(ins1); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); insert(ins2); assertQuery("status:new", change1); assertQuery("status:NEW", change1); assertQuery("is:new", change1); assertQuery("status:merged", change2); assertQuery("is:merged", change2); }

@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = "test commit"; java.lang.String file = "a.txt"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, "first contents"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); review(r, 2); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, "second contents", r.getChangeId()); r = push.to(git, "refs/for/master"); assertApproval(r, 0); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.get(id).getGeneralPreferences(); }

@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message("Available plugins:\n"); for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message(" * %s version %s\n", plugin.name, plugin.version); } } else { ui.message("No plugins found.\n"); } return true; } } return false; }
public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); try { com.google.gerrit.reviewdb.client.PatchSet previousPatchSet = db.patchSets().get(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet.getRevision().get()); } } catch (com.google.gwtorm.server.OrmException e) { } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add(("added@" + occurrence)); } } } return current; }
@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); }
com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(); return changeRepo.cmds; }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.patch.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }
public void setChange(com.google.gerrit.reviewdb.client.Change.Id changeId) { this.changeId = changeId; }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); removeUsersThatIgnoredTheChange(); includeWatchers(NotifyType.NEW_PATCHSETS, (!(change.isPrivate()))); }
@java.lang.Override protected void configure() { final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>> groups = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>>() {}; core(groups, com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE).maxAge(1, java.util.concurrent.TimeUnit.HOURS).populateWith(LdapRealm.MemberLoader.class); final com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>> usernames = new com.google.inject.TypeLiteral<com.google.gerrit.server.cache.Cache<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>>() {}; core(usernames, com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE).populateWith(LdapRealm.UserLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); }

void setReviewed(boolean reviewed) { com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchId).view("files").id(fileId).view("reviewed"); if (reviewed) { api.put(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } else { api.delete(com.google.gerrit.client.rpc.CallbackGroup.<com.google.gerrit.client.changes.ReviewInfo>emptyCallback()); } toggleReviewedBox(reviewed); }
public void onSuccess(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); try (com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups ctx = new com.google.gerrit.acceptance.api.group.GroupRebuilderIT.BlockReviewDbUpdatesForGroups()) { com.google.gerrit.server.group.InternalGroup reviewDbGroup = groups.getGroup(db, new com.google.gerrit.reviewdb.client.AccountGroup.UUID(createdGroup.id)).get(); deleteGroupRefs(reviewDbGroup); assertThat(com.google.gerrit.acceptance.api.group.GroupRebuilderIT.removeRefState(rebuild(reviewDbGroup))).isEqualTo(roundToSecond(reviewDbGroup)); } }


@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>() { public void onSuccess(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); } }); }

@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); }
public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId)); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }
public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.reviewdb.client.AccountSshKey k = getRowItem(row); if ((k != null) && (ids.contains(k.getKey()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.reviewdb.client.AccountSshKey>emptyList()); } else { updateDeleteButton(); } }
@com.google.gwtorm.client.Relation com.google.gwtorm.data.AddressAccess addresses();
private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = "text=" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement("span"); h.setStyleName(ClippyResources.I.css().control()); h.openElement("object"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"); h.paramElement("movie", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement("FlashVars", flashVars); h.openElement("embed"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("wmode", "transparent"); h.setAttribute("type", "application/x-shockwave-flash"); h.setAttribute("src", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute("FlashVars", flashVars); h.closeSelf(); h.closeElement("object"); h.closeElement("span"); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }





@java.lang.Override public void stop() { if ((threadPool) != null) { threadPool.unregisterWorkQueue(); threadPool = null; } }

com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.Change change, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);
public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, "UTF-8"))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException("JVM lacks UTF-8 encoding", e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> output; if ((level) != null) { switch (level) { case PROJECT : output = projectDashboards(new com.google.gerrit.reviewdb.client.Project.NameKey(entityName)); break; default : throw new java.lang.IllegalStateException(("unsupported dashboard level: " + (level))); } } else { output = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(output, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }
@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2)); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); clearMarkers(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }

public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format("POST /oauth/token failed with status {0}", response.getCode())); } return parseAccessTokenResponse(response.getBody()); }


protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, ("refs/heads/" + branch)); } }
public static com.google.gerrit.client.rpc.RestApi hashtags(int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(changeId).view("hashtags"); }
@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo> results; results = query("status:closed"); assertEquals(2, results.size()); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); assertEquals(2, query("status:CLOSED").size()); assertEquals(2, query("status:c").size()); assertEquals(2, query("status:cl").size()); assertEquals(2, query("status:clo").size()); assertEquals(2, query("status:clos").size()); assertEquals(2, query("status:close").size()); assertEquals(2, query("status:closed").size()); results = query("is:closed"); assertEquals(2, results.size()); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }

public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if ((((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && ((comment.id()) == null)) && ((editArea.getValue().length()) == 0)) { removeUI(); return; } expandTimer.schedule(250); }
@java.lang.Override protected void onUnload() { super.onUnload(); if ((cm) != null) { cm.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); }
private java.lang.String problemsForSubmittingChanges(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error("Error checking if change is submittable", e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }
private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, ps, e.getKey(), e.getValue())); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { deferredTags.add(ref); } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { addVisibleTags(result, deferredTags); } return result; }
public java.lang.String getMessage(com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.reviewdb.client.Change.Id changeId = change.getId(); com.google.gerrit.reviewdb.client.PatchSet ps = db.get().patchSets().get(change.currentPatchSetId()); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(change.getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }

private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { com.google.gerrit.server.project.RefControl refControl = projectControlFactory.controlFor(ctx.getProject(), ctx.getUser()).controlForRef(refName); try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, refControl.getProjectControl().getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, refControl, new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } }
public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
private void initUserAuth(final org.apache.sshd.server.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(new org.apache.sshd.server.auth.gss.UserAuthGSS.Factory()); com.google.gerrit.sshd.SshDaemon.log.info(("Enabling kerberos with keytab " + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.log.error((("Keytab " + kerberosKeytab) + " does not exist or is not readable; further errors are possible")); } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = "host/" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = "host/localhost"; } } com.google.gerrit.sshd.SshDaemon.log.info(("Using kerberos principal " + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith("host/"))) { com.google.gerrit.sshd.SshDaemon.log.warn(("Host principal does not start with host/ " + "which most SSH clients will supply automatically")); } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(new org.apache.sshd.server.auth.UserAuthPublicKey.Factory()); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }
abstract java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm);


private static java.lang.String initSite() throws java.lang.Exception { java.text.DateFormat df = new java.text.SimpleDateFormat("yyyyMMddHHmmss"); java.lang.String path = "target/test_site_" + (df.format(new java.util.Date())); com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ "-d", path, "--batch", "--no-auto-start" }); if (rc != 0) { throw new java.lang.RuntimeException("Couldn't initialize site"); } return path; }

@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } update.insertComment(c); }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.hasNoHttpd(testDesc.getTestClass()))), null, null); }
public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--reviewer", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }
private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException("unsupported index.type"); } }

public static void loadSiteLib(java.nio.file.Path libdir) { try { com.google.gerrit.common.IoUtil.loadJARs(com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.ApprovalCategory.Id id = new com.google.gerrit.reviewdb.client.ApprovalCategory.Id(com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getId()); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }
private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError(("Cannot read merged patch set " + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }
private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.patch.Text aText = new com.google.gerrit.server.patch.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.Text bText = new com.google.gerrit.server.patch.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.patch.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }

protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( a) -> a.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }


private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug("Staging NoteDb update"); com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug("Ignoring MismatchedStateException while staging"); } return updateManager; }
@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(e.getMessage()); ex.initCause(e); throw ex; } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }
static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } }); } }


void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String body) throws com.google.gerrit.common.errors.EmailException;
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("Reloading project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("Updating project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Can't sync create group permissions", e); } } } }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); }
@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put("/groups/Administrators"); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }
@java.lang.Override public java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() { return null; } }; }

public boolean hasEmailAddress(java.lang.String email) { return getEmailAddresses().contains(email); }
@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); }
boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return (!(refs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, refs.values())); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(com.google.gerrit.server.git.ReceiveCommits.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(("I" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } com.google.gerrit.server.ChangeUtil.updated(change); return change; }
private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.RESTORE) + "(event,") + (info._row())) + ")")); } else { sb.setAttribute("href", ("#" + (url(info)))).setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.OPEN) + "(event,") + (info._row())) + ")")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }
public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = (com.google.common.base.Strings.isNullOrEmpty(user.getUserName())) ? "anonymous" : user.getUserName(); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }

@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "Registered Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("group 'Registered Users' already exists"); gApi.groups().create(newGroupName); }
private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); com.google.gerrit.client.changes.ChangeApi.reviewer(screen.getChangeId().get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(screen.getChangeId())); } } }); } }
@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.log.error("Cannot enumerate known projects", e); } }

@java.lang.Override public void visit(org.pegdown.ast.MailLinkNode node) { java.lang.String addr = node.getText(); html.open("a").attribute("href", ("mailto:" + addr)).appendAndEscape(addr).close("a"); }
private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> all = ctx.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); org.eclipse.jgit.lib.Ref firstRef = all.get(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : all.values()) { if (com.google.gerrit.server.git.ReplaceOp.isBranch(ref)) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn("Can't check for already submitted change", e); return null; } }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(bCommit); byId.removeAll(bCommit); } } for (org.eclipse.jgit.lib.ObjectId id : byId.keySet()) { getPathsAndIndex(id); } } finally { walk.close(); } return null; }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { org.eclipse.jgit.revwalk.RevFlag canMergeFlag = rw.newFlag("CAN_MERGE"); com.google.gerrit.server.git.CodeReviewCommit commit = rw.parseCommit(changeDataCache.getTestAgainst()); com.google.gerrit.server.git.strategy.SubmitStrategy strategy = args.submitStrategyFactory.create(submitType, db.get(), repo, rw, null, canMergeFlag, getAlreadyAccepted(repo, rw, commit), otherChange.getDest(), null); com.google.gerrit.server.git.CodeReviewCommit otherCommit = rw.parseCommit(other); otherCommit.add(canMergeFlag); conflicts = !(strategy.dryRun(commit, otherCommit)); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }
private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.patch.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }

static int getMinOwnerVoteLevel(com.google.gerrit.server.query.change.ChangeData changeData) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Project.NameKey project = changeData.change().getProject(); try { return ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) || (project == null) ? com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel : com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(project, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { com.googlesource.gerrit.plugins.findowners.Config.log.error(((("Cannot find project " + project) + " for ") + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(changeData))), e); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } }
private static com.google.gerrit.client.ui.Screen all(final java.lang.String token) { java.lang.String p; p = "all,abandoned,"; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("status:abandoned", com.google.gerrit.client.Dispatcher.skip(p, token)); } p = "all,merged,"; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("status:merged", com.google.gerrit.client.Dispatcher.skip(p, token)); } p = "all,open,"; if (token.startsWith(p)) { return com.google.gerrit.client.changes.QueryScreen.forQuery("status:open", com.google.gerrit.client.Dispatcher.skip(p, token)); } return new com.google.gerrit.client.NotFoundScreen(); }
@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.HEADERS, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }
@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if (!(isEnabled())) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf("://"); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append("${username}@"); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }
@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); submitWithConflict(change2.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); }
@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot abandon change", e); } }
private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canEditTopicName())) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); }
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }

public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); short vote = 0; try { createDownstreamMerges(mdsMergeInput); reviewInput.message = ("Automerging to " + (com.google.common.base.Joiner.on(", ").join(mdsMergeInput.dsBranchMap.keySet()))) + " succeeded!"; reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; vote = config.getMinAutomergeVote(); } labels.put(config.getAutomergeLabel(), vote); reviewInput.labels = labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }

private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isReadable(); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.server.change.ChangeJson.ChangeInfo actual) { assertEquals(message, expected.getId().get(), actual._number); }

@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws java.io.IOException { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; }




public final void timeFormat(com.google.gerrit.reviewdb.client.AccountGeneralPreferences.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); }
@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append("Available commands"); if (!(getName().isEmpty())) { usage.append(" of "); usage.append(getName()); } usage.append(" are:\n"); usage.append("\n"); for (java.lang.String name : com.google.common.collect.Sets.newTreeSet(commands.keySet())) { usage.append(" "); usage.append(name); usage.append("\n"); } usage.append("\n"); usage.append("See '"); if ((getName().indexOf(' ')) < 0) { usage.append(getName()); usage.append(' '); } usage.append("COMMAND --help\' for more information.\n"); usage.append("\n"); return usage.toString(); }
void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); }
@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.ProjectAccess projects();
public void setSubject(java.lang.String subject) { this.subject = subject; }
@com.google.gerrit.server.query.change.Rewrite("status:abandoned S=(sortkey_after:*) L=(limit:*)") public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named("S") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named("L") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s.getValue(), l.intValue()) { @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }


private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = "dev"; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(" | ")); btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); if ((com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()) != null) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(com.google.gerrit.client.Gerrit.C.reportBug(), com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()); a.setTarget("_blank"); a.setStyleName(""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(" | ")); btmmenu.add(a); } }


private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Change.Id id : cs.ids()) { try { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db, id); if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((("Change " + (cd.change().getChangeId())) + " is in state ") + (cd.change().getStatus()))); } else { records.put(cd.change().getId(), com.google.gerrit.server.git.MergeOp.checkSubmitRule(cd)); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + "\n")); problemChanges.add(id); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((((("The change could not be " + "submitted because it depends on change(s) ") + (problemChanges.toString())) + ", which could not be submitted ") + "because:\n") + reason)); } }
private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }

public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> projects = dst.keySet(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp op = new com.google.gerrit.server.git.SubmoduleOp.RepoOnlyOp(this, branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(projects), new com.google.gerrit.server.git.BatchUpdate.Listener()); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException("Cannot update gitlinks", e); } }
private void loadCommitData() throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); java.lang.String sha1 = db.patchSets().get(psId).getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }

void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content) { this.id = id; this.textArea = content; }
public java.lang.Iterable<com.google.gerrit.server.WebLinks.Link> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.server.WebLinks.Link> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.server.WebLinks.Link(webLink.getLinkName(), webLink.getPatchSetUrl(project, commit))); } return links; }



com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); info.parents.add(i); } return info; }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return db.patchComments().byPatchSet(psId).toList(); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return comments; }
@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("group " + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + " has no entry in name map")); }
public void onSuccess(final com.google.gerrit.client.reviewdb.Account result) { if (isAttached()) { display(result); } }
@org.junit.After public void cleanupIndex() { com.google.gerrit.elasticsearch.ElasticQueryChangesTest.node.client().admin().indices().prepareDelete("gerrit").execute(); com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes(); }
@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if ((side == (DisplaySide.A)) && (info.isEdit())) { info = chunks.get((res - 2)); } if ((info.getSide()) == side) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.getStart()); } } else { return line; } } }

private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (cd.changeControl().isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }

com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);
private java.lang.String link(final com.google.gerrit.reviewdb.client.Project item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.getNameKey(), ProjectScreen.INFO); }
public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("*:1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("*", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(":1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]", 80)); try { com.google.gerrit.server.util.SocketUtil.resolve("invalid.name.localdomain:12", 80); fail("did not throw exception"); } catch (java.lang.IllegalArgumentException e) { assertEquals("unknown host: invalid.name.localdomain:12", e.getMessage()); } }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Restored"); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append("\n\n"); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(db)), caller.getAccountId(), change.getLastUpdatedOn(), change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }
private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is already up to date."); } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException("The change could not be rebased due to a conflict during merge."); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); return ctx.getRevWalk().parseCommit(objectId); }



protected void bccWatchesNotifyAllComments() { if ((db) != null) { try { final com.google.gerrit.server.project.ProjectState ps = getProjectState(); if (ps != null) { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : db.accountProjectWatches().notifyAllComments(ps.getProject().getNameKey())) { add(RecipientType.BCC, w.getAccountId()); } } } catch (com.google.gwtorm.client.OrmException err) { } } }
@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete vote", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("invalid account configuration", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format("Validating update for account %s failed", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }

private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }
private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith("/"))) { to = "/" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "/"))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login") + to)); } else { showError(Util.C.invalidLogin()); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }
@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { com.google.gerrit.acceptance.SshSession s = new com.google.gerrit.acceptance.SshSession(server, user); s.exec("gerrit gc --all"); assertError(("One of the following capabilities is required to access this" + " resource: [runGC, maintainServer]"), s.getError()); s.close(); }

public void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (com.google.gerrit.server.account.WatchConfig watchConfig = open(accountId)) { java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Collection<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> projectWatches = watchConfig.getProjectWatches(); for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { projectWatches.remove(key); } commit(watchConfig); } }
public static com.google.gerrit.server.patch.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.patch.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.patch.PatchListKey.Algorithm.OPTIMIZED_DIFF); }
public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }
private void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format(("Cannot update HEAD of project on remote site %s." + (" Only local paths and SSH URLs are supported" + " for remote HEAD update.")), replicateURI)); } }
@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }
@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); }
@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(Constants.PROJECT_LIST); verifyResponseIsOK(); }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); return info; }

private void setIgnoreWhitespace(com.google.gerrit.reviewdb.client.AccountDiffPreference.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); }

private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText(("Change-Id: " + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append(": "); sb.append(info.subject()); } setWindowTitle(sb.toString()); }


void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } resizePaddingWidget(); }
private net.codemirror.lib.Configuration getConfig() { return net.codemirror.lib.Configuration.create().set("readOnly", false).set("cursorBlinkRate", 0).set("cursorHeight", 0.85).set("lineNumbers", true).set("tabSize", 4).set("lineWrapping", false).set("styleSelectedText", true).set("showTrailingSpace", true).set("keyMap", "default").set("mode", net.codemirror.lib.ModeInjector.getContentType(type)); }
public void dispatchDeleteGroupsFromGroup(com.google.gerrit.reviewdb.client.Account.Id actor, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupById> removed, java.sql.Timestamp removedOn) { for (com.google.gerrit.server.audit.GroupMemberAuditListener auditListener : groupMemberAuditListeners) { try { auditListener.onDeleteGroupsFromGroup(actor, removed, removedOn); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete groups from group event", e); } } }
@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Verified", ((short) (1))); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo("Code-Review"); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, 2000))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo("Verified"); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }
private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if (0 < cnt) { final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError("update", e); } return inserts; }



@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }
java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.statusCode = CommitMergeStatus.MISSING_DEPENDENCY; n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.statusCode) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; }
public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); return org.eclipse.jgit.util.Base64.encodeBytes(raw); }

@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }
public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if ((approvals) != null) { java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval>> map = approvalsMap(db); currentApprovals = map.get(c.currentPatchSetId()); if ((currentApprovals) == null) { currentApprovals = java.util.Collections.emptyList(); map.put(c.currentPatchSetId(), currentApprovals); } } else { currentApprovals = db.get().patchSetApprovals().byPatchSet(c.currentPatchSetId()).toList(); } } return currentApprovals; }

@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
com.google.gerrit.server.git.validators.MergeValidators create();
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = "initial set of users to become members of the group") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }


@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group", e); } }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), (("group id '" + groupId) + "'")); }




public static com.google.gerrit.pgm.init.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.ConsoleUI.getInstance(false); }
static java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve("gen").resolve("polygerrit-ui").resolve("polygerrit_components").resolve("polygerrit_components.bower_components.zip"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(json.toCommit(rsrc.getControl(), rw, commit, addLinks)); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }
@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);
public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { org.eclipse.jgit.merge.ThreeWayMerger m; if (useContentMerge) { if (useRecursiveMerge) { m = MergeStrategy.RECURSIVE.newMerger(repo, true); } else { m = MergeStrategy.RESOLVE.newMerger(repo, true); } } else { m = MergeStrategy.SIMPLE_TWO_WAY_IN_CORE.newMerger(repo); } m.setObjectInserter(new org.eclipse.jgit.lib.ObjectInserter.Filter() { @java.lang.Override protected org.eclipse.jgit.lib.ObjectInserter delegate() { return inserter; } @java.lang.Override public void flush() { } @java.lang.Override public void release() { } }); return m; }

@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.reviewdb.client.PatchSet patchSet = object.currentPatchSet(db); if (patchSet == null) { return false; } final com.google.gerrit.reviewdb.client.RevId revision = patchSet.getRevision(); if (revision == null) { return false; } final org.eclipse.jgit.lib.AnyObjectId objectId = org.eclipse.jgit.lib.ObjectId.fromString(revision.get()); if (objectId == null) { return false; } final com.google.gerrit.reviewdb.client.Change change = object.change(db); if (change == null) { return false; } final com.google.gerrit.reviewdb.client.Project.NameKey projectName = change.getProject(); if (projectName == null) { return false; } try { final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(projectName); try { final org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo); try { return rFilter.include(rw, rw.parseCommit(objectId)); } finally { rw.release(); } } finally { repo.close(); } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error((("Repository \"" + (projectName.get())) + "\" unknown."), e); } catch (org.eclipse.jgit.errors.MissingObjectException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((projectName.get()) + "\" commit does not exist."), e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((projectName.get()) + "\" revision is not a commit."), e); } catch (java.io.IOException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error((("Could not search for commit message in \"" + (projectName.get())) + "\" repository."), e); } return false; }

@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme getDownloadUrl() { if ((downloadUrl) == null) { return null; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme.valueOf(downloadUrl); }
@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(("ERROR: blocked keyword(s) found in file: foo.txt (Line: 1)" + " (found: myp4ssw0rd, foobar)"), ("ERROR: blocked keyword(s) found in file: bar.txt (Line: 5)" + " (found: $Id: foo bar$)")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@org.junit.Before public void setUp() throws java.lang.Exception { cfg = createMock(com.ericsson.gerrit.plugins.syncevents.Configuration.class); expect(cfg.getUrl()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL).anyTimes(); expect(cfg.getUser()).andReturn("user"); expect(cfg.getPassword()).andReturn("pass"); expect(cfg.getMaxTries()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES).anyTimes(); expect(cfg.getConnectionTimeout()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT).anyTimes(); expect(cfg.getSocketTimeout()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT).anyTimes(); expect(cfg.getRetryInterval()).andReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL).anyTimes(); replayAll(); httpClient = new com.ericsson.gerrit.plugins.syncevents.HttpClientProvider(cfg).get(); httpSession = new com.ericsson.gerrit.plugins.syncevents.HttpSession(httpClient, com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.URL); }

private static long initialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } else { com.google.gerrit.server.config.ScheduleConfig.log.info(java.text.MessageFormat.format("{0} schedule parameter \"{0}.{1}\" is not configured", section, keyStartTime)); } } catch (java.lang.IllegalArgumentException e2) { com.google.gerrit.server.config.ScheduleConfig.log.error(java.text.MessageFormat.format("Invalid {0} schedule parameter \"{0}.{1}\"", section, keyStartTime), e2); delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) throws com.google.gerrit.server.query.QueryParseException { if (query.startsWith("refs/")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_COMMIT.matcher(query).matches()) { return commit(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_EMAIL.matcher(query).find()) { try { return com.google.gerrit.server.query.Predicate.or(owner(query), reviewer(query)); } catch (com.google.gwtorm.server.OrmException err) { throw error("Cannot lookup user", err); } } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.PAT_LABEL.matcher(query).find()) { try { return label(query); } catch (com.google.gwtorm.server.OrmException err) { throw error("Cannot lookup user", err); } } else { final java.util.List<com.google.gerrit.server.query.change.ProjectPredicate> predicate = new java.util.ArrayList<com.google.gerrit.server.query.change.ProjectPredicate>(); for (com.google.gerrit.reviewdb.client.Project.NameKey name : args.projectCache.all()) { if (name.get().toLowerCase().contains(query.toLowerCase())) { predicate.add(new com.google.gerrit.server.query.change.ProjectPredicate(name.get())); } } if ((predicate.size()) == 1) { return predicate.get(0); } else if ((predicate.size()) > 1) { return com.google.gerrit.server.query.Predicate.or(predicate); } throw error(("Unsupported query:" + query)); } }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git.SubmoduleOp submoduleOp, boolean dryrun);
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Failed to grant read permissions on group branches", e); } }


private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if ((!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) { sb.append(((info.lines_inserted()) + (info.lines_deleted()))); } sb.closeTd(); }
private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId()); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange("Change 2", "a.txt", "other content"); submitWithConflict(change2.getChangeId()); assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }
private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); ctx.getDb().patchSetApprovals().delete(com.google.gerrit.server.git.strategy.SubmitStrategyOp.convertPatchSet(normalized.deleted(), psId)); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.deleted()) { update.removeApprovalFor(psa.getAccountId(), psa.getLabel()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.unchanged()) { if (includeUnchanged || (psa.isSubmit())) { logDebug(("Adding submit label " + psa)); update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }


@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.patch.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }

private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = "admin,group,"; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = "admin,project,"; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.NotFoundScreen(); } return new com.google.gerrit.client.NotFoundScreen(); } if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } return new com.google.gerrit.client.NotFoundScreen(); }





public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.server.git.SubmoduleOp sub = subOpProvider.get(); com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj);com.google.gerrit.server.git.MergeOpRepoManager orm = ormProvider.get()) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b, orm).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException("Project is subscribed by other projects."); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException("Project is subscribed by other projects."); } }
protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, java.io.IOException;
protected com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.SingleListChangeInfo> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.SingleListChangeInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.SingleListChangeInfo result) { display(result); } }; }


com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException, java.lang.InterruptedException { return writer.deleteDocuments(term); } }); }

@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError((("error: " + (e.getMessage())) + "\n")); } catch (java.lang.Exception e) { ok = false; writeError((("fatal: internal server error while approving " + patchSetId) + "\n")); com.google.gerrit.sshd.commands.ReviewCommand.log.error(("internal error while approving " + patchSetId)); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, ("one or more approvals failed;" + " review output above")); } }

@java.lang.Override public com.google.gerrit.reviewdb.client.Project.SubmitType apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = new com.google.gerrit.server.config.ScheduleConfig(rc, "a", "b", "i", "s", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInterval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.getInitialDelay()); s = new com.google.gerrit.server.config.ScheduleConfig(rc, "a", "b", "myInterval", "myStart", com.google.gerrit.server.config.ScheduleConfigTest.NOW); assertEquals(s.getInterval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.getInitialDelay(), ScheduleConfig.MISSING_CONFIG); }
@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); }

public boolean canSubmit() { return canPerform(Permission.SUBMIT); }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("Subsections for 'groups' in gerrit.config must be valid group" + " UUIDs. The following group UUIDs could not be resolved: ") + invalid) + " Please remove/fix these 'groups' subsections in") + " gerrit.config."))); } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Could not find group " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
@java.lang.SuppressWarnings("unchecked") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong("cache", def.name(), "memoryLimit", def.maximumWeight())); com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), "maxAge")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, "cache", def.name(), "maxAge", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }
@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson("/repo/+log", com.google.gitiles.LogServletTest.LOG, ""); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }


@org.junit.Test public void cannotMuteOwnChange() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("cannot mute own change"); gApi.changes().id(changeId).mute(true); }
private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { info.jsResourcePaths.add(java.lang.String.format("plugins/%s/%s", u.getPluginName(), u.getJavaScriptResourcePath())); } return info; }
private void copyFile() { java.nio.file.Path localPath = java.nio.file.Paths.get(localUrl.substring(com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_PREFIX.length())); java.io.File file = localPath.resolve(((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); java.io.File copyFile = localPath.resolve((((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(com.google.gerrit.common.TimeUtil.nowMs()))) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Could not copy local database file with timestamp", e); } }

public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }
private static void patch(java.lang.String token, com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : ""; } if (("".equals(panel)) || ("cm".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, baseId, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, baseId, id, side, line); } } else if ("sidebyside".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, baseId, id, side, line); } else if ("unified".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, baseId, id, side, line); } else if ("edit".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }

private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on("cursorActivity", updateActiveLine(cm)); cm.on("gutterClick", onGutterClick(cm)); cm.on("scroll", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on("viewportChange", adjustGutters(cm)); cm.on("renderLine", resizeEmptyLine(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'j'", moveCursorDown(cm, 1)).on("'k'", moveCursorDown(cm, (-1))).on("'u'", upToChange()).on("'r'", toggleReviewed()).on("'o'", toggleOpenBox(cm)).on("Enter", toggleOpenBox(cm)).on("'c'", insertNewDraft(cm))); }

public org.eclipse.jgit.lib.Config getFromPluginConfig(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); if (projectState == null) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } return projectState.getConfig((pluginName + ".config")).get(); }


boolean isDisabled() { return (permittedLimit) <= 0; }


boolean wouldPushRef(java.lang.String ref) { if ((!(replicatePermissions)) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : remote.getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; }
private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); bind(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); }
public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<java.lang.String> allowedSchemes = com.google.gerrit.client.Gerrit.getInfo().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && (allowedSchemes.contains("git"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && (allowedSchemes.contains("anonymous http"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && (allowedSchemes.contains("ssh"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (allowedSchemes.contains("http"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }
int findApproval(com.google.gerrit.server.account.AccountCache accountCache) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("findApproval db key = " + (db.key))); return findApproval(accountCache, db); }
private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revisionInfo = info.revision(revision); boolean current = ((info.status().isOpen()) && (revision.equals(info.current_revision()))) && (!(revisionInfo.is_edit())); if (revisionInfo.is_edit()) { statusText.setInnerText(Util.C.changeEdit()); } else if ((!current) && ((info.status()) == (com.google.gerrit.reviewdb.client.Change.Status.NEW))) { statusText.setInnerText(Util.C.notCurrent()); labels.setVisible(false); } else { statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); } labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initChangeAction(info); initRevisionsAction(info, revision); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } if (com.google.gerrit.client.Gerrit.isSignedIn()) { replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, commentLinkProcessor, reply, quickApprove); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } history.set(commentLinkProcessor, replyAction, changeId, info); if (current) { quickApprove.set(info, revision, replyAction); loadSubmitType(info.status(), isSubmittable(info)); } else { quickApprove.setVisible(false); setVisible(strategy, false); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append(": "); sb.append(info.subject()); } setWindowTitle(sb.toString()); }

public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getPatchSetUrl(project, commit), webLink.getTarget())); } return links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }

public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false); }
@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); java.lang.String gitmodules = ((("" + (("[submodule \"a\"]\n" + "path = a\n") + "url = ../")) + (p1.get())) + "\n") + "branch = master\n"; cfg.fromText(gitmodules); java.lang.String thisServer = com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER; com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(projectCache, cfg, thisServer, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, "master"), "a")); assertThat(res).containsExactlyElementsIn(expected); }
void setLimit(int n) { limit = n; }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index group", e); } }
public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }
static void fireOnCallStart() { for (final com.google.gwtjsonrpc.client.RpcStatusListener l : com.google.gwtjsonrpc.client.JsonUtil.listeners) { l.onCallStart(); } }
@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(com.google.gerrit.extensions.restapi.AuthException.class, "create not permitted for refs/heads/test"); }

public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { java.lang.String editRefPrefix = com.google.gerrit.reviewdb.client.RefNames.refsEditPrefix(user.getAccountId(), change.getId()); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(editRefPrefix); if (refs.isEmpty()) { return com.google.common.base.Optional.absent(); } org.eclipse.jgit.lib.Ref ref = com.google.common.collect.Iterables.getOnlyElement(refs.values()); try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }
private void setMissingHeader(final java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }
@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }

@com.google.gwt.uibinder.client.UiHandler("reply") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { if ((replyBox) == null) { com.google.gerrit.client.diff.DraftBox box = getDiffView().addReply(getOriginal(), "", false); registerReplyBox(box); } else { openReplyBox(); } }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); accountCache.evict(admin.id); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = setTopic(sdsMergeInput.sourceId, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = "recursive"; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug("Creating downstream merge for {}", sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) + " am: ") + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = "ours"; downstreamChangeInput.subject = ((sdsMergeInput.subject) + " skipped: ") + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug("Skipping merge for {} to {}", sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { org.eclipse.jgit.lib.Ref r = refs.get(c.currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }


private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.common.collect.FluentIterable.from(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)).transform(IndexableField::stringValue))); }


public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug("Beginning integration of {}", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug("Calculated to merge {}", cs); if (checkSubmitRules) { logDebug("Checking submit rules and state"); checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError("Merge Conflict", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Merge Conflict", e); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }

private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, com.google.gerrit.gpg.PublicKeyStore store, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys = store.get(sig.getKeyID()); if (!(keys.getKeyRings().hasNext())) { problems.add(("No public keys found for key ID " + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); return; } org.bouncycastle.openpgp.PGPPublicKey signer = com.google.gerrit.gpg.PublicKeyStore.getSigner(keys, sig, org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (signer == null) { problems.add((("Signature by " + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID()))) + " is not valid")); return; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(signer, sig.getKeyID()); if (!(result.isOk())) { java.lang.StringBuilder err = new java.lang.StringBuilder("Invalid public key ").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(signer)).append(":"); for (int i = 0; i < (result.getProblems().size()); i++) { err.append('\n').append(" ").append(result.getProblems().get(i)); } problems.add(err.toString()); } }
private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.change.LimitPredicate.getLimit(p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); }
@java.lang.Override protected void formatChange() { appendText(getNameFor(fromId)); appendText(((" has abandoned change " + (change.getKey().abbreviate())) + ":\n")); appendText("\n"); formatCoverLetter(); }

private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.Widget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.Widget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } } } return pluginConfigValues; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); }
void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error finishing pending Lucene writes", e); } try { writer.getIndexWriter().commit(); try { writer.getIndexWriter().close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error closing Lucene writer", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error closing Lucene directory", e); } }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-group")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("decription that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }

private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.Change, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(db.changes().getAsync(request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.reviewdb.client.Change, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.reviewdb.client.Change c = f.checkedGet(); if (c != null) { replaceByChange.get(c.getId()).change = c; } } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); }
private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request) { java.lang.String scopeRequested = request.getParameter("scope"); return com.google.common.base.Objects.firstNonNull(scopeRequested, "scopes"); }


@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(IndexRewriteImpl.BasicRewritesImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) { bind(com.google.common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else { install(new com.google.gerrit.server.index.IndexModule.IndexExecutorModule(threads)); } }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }



private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled(enabled); cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); }
public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(java.util.List<? extends com.google.gwtexpui.safehtml.client.FindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.lang.String html = this.asString(); for (com.google.gwtexpui.safehtml.client.FindReplace findReplace : findReplaceList) { html = html.replaceAll(findReplace.find(), findReplace.replace()); } return new com.google.gwtexpui.safehtml.client.SafeHtmlString(html); }

private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }
@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = control.getAccountGroup(); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); detail.setOwnerGroup(groupCache.get(group.getOwnerGroupId())); switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }
protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); Util.ACCOUNT_SVC.addProjectWatch(projectName, filter, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.data.AccountProjectWatchInfo>() { @java.lang.Override public void onSuccess(final com.google.gerrit.common.data.AccountProjectWatchInfo result) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""); watchesTab.insertWatch(result); } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); super.onFailure(caught); } }); }



public void evict(java.lang.String username) { self.remove(username); }



private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Cannot load %s with @Export(\"%s\")", def.className, def.exportedAsName), err); } com.google.gerrit.extensions.Export export = clazz.getAnnotation(com.google.gerrit.extensions.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format("In plugin %s asm incorrectly parsed %s with @Export(\"%s\")", pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("org.apache.sshd.server.Command", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("javax.servlet.http.HttpServlet", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); } } else { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Class %s with @Export(\"%s\") not supported", clazz.getName(), export.value())); } }
public long getInitialDelay() { return initialDelay; }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }

public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, new java.lang.String(a.value())); } else if (type == (java.lang.Integer.class)) { f.set(section, new java.lang.Integer(a.value())); } else if (type == (java.lang.Long.class)) { f.set(section, new java.lang.Long(a.value())); } else if (type == (java.lang.Boolean.class)) { f.set(section, new java.lang.Boolean(a.value())); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn("Exception during initialize: {}", f.getName()); } } return section; }

private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }

public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getOwners() { return owners; }

static void call(final com.google.gwt.user.client.ui.Button b, final java.lang.String project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }

void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.currentAssignee = ((info.assignee()) != null) ? info.assignee().name() : ""; assigneeLink.setText(currentAssignee); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(com.google.gerrit.client.Gerrit.isSignedIn()); }
public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).formatAsList(listComments(rsrc)); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.change.HasDraftByPredicate> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(new com.google.gerrit.server.query.change.HasDraftByPredicate(args, id)); } return com.google.gerrit.server.query.Predicate.or(p); }

private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }
@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getControl()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getControl(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error("error: cannot use --list with --all or --cache"); } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error("error: cannot combine --all and --cache"); } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains("all"))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.get().apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { java.util.List<java.lang.String> names = cacheNames(); for (java.lang.String n : caches) { if (!(names.contains(n))) { throw com.google.gerrit.sshd.commands.FlushCaches.error((("error: cache \"" + n) + "\" not recognized")); } } doBulkFlush(); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteDraftChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); }
private com.google.gerrit.server.change.RevisionResource onBehalfOf(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.project.ChangeControl caller = rsrc.getControl(); if (!(caller.canSubmit())) { throw new com.google.gerrit.extensions.restapi.AuthException("submit not permitted"); } if (!(caller.canSubmitAs())) { throw new com.google.gerrit.extensions.restapi.AuthException("submit on behalf of not permitted"); } com.google.gerrit.server.project.ChangeControl target = caller.forUser(accounts.parseOnBehalfOf(caller.getUser(), in.onBehalfOf)); if (!(target.getRefControl().isVisible())) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("on_behalf_of account %s cannot see destination ref", target.getUser().getAccountId())); } return new com.google.gerrit.server.change.RevisionResource(changes.parse(target), rsrc.getPatchSet()); }
private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(""); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); assigneeLink.setText(result.name()); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }

private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } org.bouncycastle.openpgp.PGPPublicKeyRing rkr = store.get(revoker.getFingerprint()); if ((rkr == null) || ((rkr.getPublicKey().getAlgorithm()) != (revoker.getAlgorithm()))) { continue; } revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), rkr.getPublicKey()); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }
@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if ("create_account".equals(req.getParameter("action"))) { res = create(); } else if ((req.getParameter("user_name")) != null) { res = byUserName(req.getParameter("user_name")); } else if ((req.getParameter("preferred_email")) != null) { res = byPreferredEmail(req.getParameter("preferred_email")); } else if ((req.getParameter("account_id")) != null) { res = byAccountId(req.getParameter("account_id")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(raw); } finally { out.close(); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append("/"); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); final java.io.Writer out = rsp.getWriter(); out.write("<html>"); out.write("<body>"); out.write("<h1>Account Not Found</h1>"); out.write("</body>"); out.write("</html>"); out.close(); } }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(change.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append(" ").append(p.getNewName()).append("\n"); } detail.append(java.text.MessageFormat.format(("" + ((("{0,choice,0#0 files|1#1 file|1<{0} files} changed, " + "{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), ") + "{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)") + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn("Cannot format change detail", err); return ""; } }
private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), cd); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case REMOVE_REVIEWER : return getRefControl().canRemoveReviewer(); case RESTORE : return canRestore(db()); case SUBMIT : return canSubmit(); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException("unavailable", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }

@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "a.txt", "content"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/for/master"); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "b.txt", "anotherContent"); r = push.to("refs/for/master"); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, "refs/for/master", false), "refs/for/master", "commit(s) already exists (as current patchset)"); }
private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey(); if (name.startsWith("changes/")) { continue; } if ((name.startsWith("users/")) && (name.contains("/edit"))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + (e.getKey()); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format("Failed to update %s, RefUpdate.Result = %s", targetRef, result)); } } }

public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> cb) { try { final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); cb.onSuccess(VoidResult.INSTANCE); } catch (com.google.gerrit.server.mail.EmailException e) { log.error(("Cannot send email verification message to " + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error(("Cannot send email verification message to " + address), e); cb.onFailure(e); } }

public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { com.google.gerrit.common.data.AccessSection a = accessSections.get(section.getName()); if (sectionsWithUnknownPermissions.contains(a)) { accessSections.remove(a); } else { a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } } }

private int find(java.util.List<T> list, java.lang.String p) { int r = java.util.Collections.binarySearch(com.google.common.collect.Lists.transform(list, this), p); return r < 0 ? -(r + 1) : r; }
private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.reviewdb.client.AccountDiffPreference.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError(("Error looking up patch set " + (control.getChange().currentPatchSetId()))); } com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if ((((c.getStatus()) == (Change.Status.DRAFT)) || (patchSet.isDraft())) && (!(allowDraft))) { return cannotSubmitDraft(); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s of %s has " + "no solution."), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }

@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.conflictingChanges("na")); getTab().setError(err.getMessage()); }

private static com.google.gerrit.gpg.CheckResult combine(com.google.gerrit.gpg.CheckResult sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; if (sigResult != null) { problems.addAll(sigResult.getProblems()); if ((sigResult.getStatus()) == (BAD)) { status = BAD; } else if ((sigResult.getStatus()) == (TRUSTED)) { status = TRUSTED; } } return com.google.gerrit.gpg.CheckResult.create(status, problems); }
protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException("no patchSet specified"); }

@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment = "> Quote line 1\n> Quote line 2\n > Quote line 3\n"; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertBlock(result, 0, BlockType.QUOTE, "Quote line 1\nQuote line 2\nQuote line 3"); }





private com.google.gwt.user.client.ui.Widget createSearchLink(java.lang.String projectName) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.ui.InlineHyperlink h = new com.google.gerrit.client.ui.InlineHyperlink(" ", com.google.gerrit.common.PageLinks.toChangeQuery(("project:" + projectName))); h.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(h.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(h.getElement())); return h; }
@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = "newProject"; com.google.gerrit.server.project.CreateProject.Input in = new com.google.gerrit.server.project.CreateProject.Input(); in.description = "Test description"; in.submitType = com.google.gerrit.reviewdb.client.Project.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.reviewdb.client.Project.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(("/projects/" + newProjectName), in); com.google.gerrit.server.project.ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(in.description, project.getDescription()); assertEquals(in.submitType, project.getSubmitType()); assertEquals(in.useContributorAgreements, project.getUseContributorAgreements()); assertEquals(in.useSignedOffBy, project.getUseSignedOffBy()); assertEquals(in.useContentMerge, project.getUseContentMerge()); assertEquals(in.requireChangeId, project.getRequireChangeID()); }
@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.GerritCallback<java.util.List<com.google.gerrit.client.reviewdb.Project>>() { public void onSuccess(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { if (isAttached()) { projects.display(result); projects.finishDisplay(true); } } }); }

private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { for (final com.google.gerrit.common.data.ApprovalType ct : com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes().getApprovalTypes()) { if (r.isAllowed(ct.getCategory().getId())) { initApprovalType(r, body, ct); } } }




@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); }




@java.lang.Override public com.google.gerrit.reviewdb.client.PatchSet update(com.google.gerrit.reviewdb.client.PatchSet ps) { java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return null; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return null; } ps.setGroups(groups); return ps; }

@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.query.change.IndexRewriteTest.Source(); }



@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru.getName()); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }
@java.lang.Override public void onShowView() { super.onShowView(); related.setMaxHeight(commit.getElement().getParentElement().getOffsetHeight()); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith("/c/"))) { scrollToPath(prior.substring(3)); } } startPoller(); }
private boolean isEmpty() { return ((((((approvals.isEmpty()) && (reviewers.isEmpty())) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && ((status) == null)) && ((submitRecords) == null)) && ((changeMessage) == null); }
public com.google.gerrit.common.data.LabelTypes getLabelTypes() { return getProjectControl().getLabelTypes(); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( a) -> a.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; }
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myConfig = result.config; com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } RpcStatus.INSTANCE = new com.google.gerrit.client.RpcStatus(); com.google.gerrit.client.config.ConfigServerApi.serverInfo(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.config.ServerInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.config.ServerInfo info) { com.google.gerrit.client.Gerrit.myServerInfo = info; onModuleLoad2(result); } }); }
public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.patch.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), "cannot set RevId for patch set %s on comment %s", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }


@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } voteDeleted.fire(change, ps, newApprovals, oldApprovals, input.notify, changeMessage.getMessage(), ctx.getUser().asIdentifiedUser().getAccount(), ctx.getWhen()); }
void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { com.google.gwt.core.client.GWT.log(("Error parsing history token: " + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }
public com.google.gerrit.server.patch.PatchListKey.Algorithm getAlgorithm() { return algorithm; }



@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1)); src.writeTo(e); e.flush(); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.reviewdb.client.AccountDiffPreference p = com.google.gerrit.client.Gerrit.getAccountDiffPreference(); if (p == null) { p = com.google.gerrit.reviewdb.client.AccountDiffPreference.createDefault(com.google.gerrit.client.Gerrit.getUserAccount().getId()); } result.copyTo(p); com.google.gerrit.client.Gerrit.setAccountDiffPreference(p); }

boolean wouldPushProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }
private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> readKeys(com.google.gerrit.server.account.PostGpgKeys.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Expected exactly one PUBLIC KEY BLOCK"); } keyRings.add(((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0)))); } } return keyRings; }



@com.google.common.annotations.VisibleForTesting public void start() { if ((dbInjector) == null) { dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }
public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); com.google.gwtexpui.clippy.client.CopyableLabel.setFlashEnabled(p.isUseFlashClipboard()); if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible(p.isShowSiteHeader()); } if ((com.google.gerrit.client.Gerrit.siteFooter) != null) { com.google.gerrit.client.Gerrit.siteFooter.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } }



@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; }

@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } emailReviewers(ctx.getProject(), currChange, del, changeMessage); try { hooks.doReviewerDeletedHook(currChange, reviewer, currPs, changeMessage.getMessage(), newApprovals, oldApprovals, dbProvider.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.DeleteReviewer.log.warn("ChangeHook.doCommentAddedHook delivery failed", e); } }
protected void bccStarredBy() { if (!(NotifyHandling.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn("Cannot BCC users that starred updated change", err); } }
private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = com.google.gerrit.server.project.RefControl.shortestExample(pattern); } else if (pattern.endsWith("/*")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, com.googlesource.gerrit.plugins.readonly.ReadOnly.READ_ONLY_MSG); return; } } chain.doFilter(request, response); }

@java.lang.Override public void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot post review", e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot post review", e); } }





private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }
private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChange() throws java.lang.Exception { return stageChange(this::stageReviewableWipChange); }

public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error("Couldn't fire event", e); } }
public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Specify one of m/r"); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }

void load(com.google.gerrit.server.project.ProjectCache cache) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug("Loading .gitmodules of {} for project {}", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(("Cannot open branch " + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(cache, bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(("Could not read .gitmodule file of super project: " + (branch.getParentKey())), e); } }


@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }


@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.BadRequestException { if (!(com.google.gerrit.server.config.PostCaches.Operation.LIST.equals(input.operation))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("unsupported operation: " + (input.operation))); } return listCaches.get().getCaches().keySet(); }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState; try { newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()).newState(); repo.scanForRepoChanges(); } catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } if (newState == null) { return super.openHandle(repo, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }

private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(base, patchSetId, info.path()); }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot index change", e); } }



public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { final java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id> seen = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(); result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (final com.google.gerrit.reviewdb.AccountGroup.Id myGroup : user.getEffectiveGroups()) { for (com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().ownedByGroup(myGroup)) { final com.google.gerrit.reviewdb.AccountGroup.Id id = group.getId(); if (!(seen.add(id))) { continue; } try { com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(id); if (c.isOwner()) { result.add(c.getAccountGroup()); } } catch (NoSuchGroupException e) { continue; } } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn(("NoSuchGroupException; ignoring group " + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }



@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }

private void renderHistory(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> messages = info.messages(); if (messages != null) { for (int i = 0; i < (messages.length()); i++) { history.add(new com.google.gerrit.client.change.Message(commentLinkProcessor, messages.get(i))); } } }


@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.RelativeDateFormatter.YEAR_IN_MILLIS, "in the future"); com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS, "in the future"); }

@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = start; } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(oldId, ((next) + (batchSize))); }
private java.util.List<com.google.gerrit.server.patch.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(RevertedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); factory(PerformCreateGroup.Factory.class); }

@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }



@java.lang.Override public WorkQueue.Executor get() { final com.google.gerrit.server.git.WorkQueue.Executor executor; executor = queues.createQueue(poolSize, "SSH-Worker"); final java.util.concurrent.ThreadFactory parent = executor.getThreadFactory(); executor.setThreadFactory(new java.util.concurrent.ThreadFactory() { @java.lang.Override public java.lang.Thread newThread(final java.lang.Runnable task) { final java.lang.Thread t = parent.newThread(task); t.setPriority(java.lang.Thread.MIN_PRIORITY); return t; } }); return executor; }
public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { if (!(readFromGit)) { return com.google.common.collect.FluentIterable.from(dbProvider.get().starredChanges().byChange(changeId)).transform(new com.google.common.base.Function<com.google.gerrit.reviewdb.client.StarredChange, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(com.google.gerrit.reviewdb.client.StarredChange in) { return in.getAccountId(); } }); } return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("/" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }
public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { return check(key, null, 0, false, null); }

@java.lang.Override public com.google.common.base.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { java.sql.Connection con = ds.getConnection(); java.sql.PreparedStatement stmt; }
@java.lang.Override protected void configure() { if (com.google.gerrit.server.util.BouncyCastleUtil.havePGP()) { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); } else { com.google.gerrit.server.git.gpg.SignedPushModule.log.info(("BouncyCastle PGP not installed; signed push verification is" + " disabled")); } }

private java.lang.String projectBaseName(java.lang.String project) { int i = project.lastIndexOf('/'); if (i < 0) { return project; } else { return project.substring((i + 1)); } }
static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.foldcode().getSafeUri(), group.addFinal(cb)); } }

@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneProjectIndex.QuerySource(opts, queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }

@com.google.gwt.uibinder.client.UiHandler("message") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } else if ((((lgtm) != null) && ((event.getCharCode()) == 'M')) && (message.getValue().equals("LGT"))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if (message.getValue().startsWith("LGTM")) { for (java.lang.Runnable r : lgtm) { r.run(); } } } }); } }
public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.reviewdb.client.Project.SubmitType type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; }
@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = realm.groups(state()); } else { effectiveGroups = groupMembershipFactory.create(com.google.gerrit.server.IdentifiedUser.registeredGroups); } } return effectiveGroups; }
com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;
private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return rw.parseCommit(repo.getRef(name).getObjectId()); } }


com.google.gerrit.server.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);

private void checkPreconditions() { checkState((!(started)), "SiteRebuilder may only be used once"); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { org.joda.time.Duration def = org.joda.time.Duration.standardSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); org.joda.time.Duration t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t.getMillis()).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("expected IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("Invalid time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "1 min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t.getMillis()).isEqualTo(60000); }
public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case "String" : headers.put(mh.value(), f.get(section).toString()); break; case "Integer" : headers.put(mh.value(), f.getInt(section)); break; case "Long" : headers.put(mh.value(), f.getLong(section)); break; case "Boolean" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).build(); } return amqpProperties; }

private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.KeyExchange>>asList(new org.apache.sshd.server.kex.DHG14.Factory(), new org.apache.sshd.server.kex.DHG1.Factory())); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Random> factory; if (cfg.getBoolean("sshd", null, "testUseInsecureRandom", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = new org.apache.sshd.common.random.BouncyCastleRandom.Factory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }

private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private void initChangeRepo() throws java.io.IOException { if ((changeRepo) == null) { checkState((!(changeUpdates.isEmpty()))); changeRepo = openRepo(changeUpdates.values().iterator().next().getProjectName()); } }


@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.reviewdb.client.AccountDiffPreference diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);
@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if ("all".equalsIgnoreCase(value)) { context = com.google.gerrit.reviewdb.client.AccountDiffPreference.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("\"%s\" is not a valid value for \"%s\"", value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.common.changes.Side side = comment.side(); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this, side); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, side, ((comment.line()) - 1)); cm.focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink"); if (ret == null) { ret = pluginName; } return ret; }
public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains("-----BEGIN PGP SIGNATURE-----\n")) { return owner || (canPerform(Permission.PUSH_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }




void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, changeType); writeEnum(out, patchType); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final org.eclipse.jgit.diff.Edit e : edits) { write(out, e); if (e instanceof org.eclipse.jgit.diff.ReplaceEdit) { org.eclipse.jgit.diff.ReplaceEdit r = ((org.eclipse.jgit.diff.ReplaceEdit) (e)); writeVarInt32(out, r.getInternalEdits().size()); for (org.eclipse.jgit.diff.Edit i : r.getInternalEdits()) { write(out, i); } } else { writeVarInt32(out, 0); } } }
@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn("Cannot notify watchers for new change", err); } }

private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException("Cache pool has already been started"); } try { java.lang.System.setProperty("net.sf.ehcache.skipUpdateCheck", ("" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if (c != null) { p.bind(new com.google.gerrit.ehcache.PopulatingCache(eh, c)); } else { p.bind(new com.google.gerrit.ehcache.SimpleCache(eh)); } } } }
@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.server.edit.ChangeEditUtil.editRefName(accountId, changeId, psId); assertEquals("refs/users/42/1000042/edit-56414/50", refName); }
@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace("${projectName}", project.get()); if (panel.startsWith("/x/")) { setTargetHistoryToken(p); } else if (com.google.gerrit.client.Gerrit.isAbsolute(panel)) { getElement().setPropertyString("href", p); } else { getElement().setPropertyString("href", com.google.gerrit.client.Gerrit.selfRedirect(p)); } }



private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { throw new com.google.inject.ProvisionException(java.lang.String.format(("Multiple providers bound for DynamicItem<%s>\n" + "This is not allowed; check the server configuration."), type)); } else { return null; } }

public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if (!(cc.isOwner())) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
@java.lang.Override public void execute() { try { cb.onSuccess(data); } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format("%-8s %-12s %-12s %-4s %s\n", "Task", "State", "StartTime", "", "Command")); stdout.print("------------------------------------------------------------------------------\n"); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; try { tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } boolean viewAll = currentUser.getCapabilities().canViewQueue(); long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format("Queue: %s\n", queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }

private org.asciidoctor.Options createOptions(java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(basedir); optionsBuilder.toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.server.project.RefControl refctl, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) { com.google.gerrit.server.IdentifiedUser user = refctl.getUser().asIdentifiedUser(); return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, refctl.getProjectControl().getProjectState()), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(refctl, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(refctl, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountValidator(allUsers))); }




@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { res.setHeader("Expires", "Fri, 01 Jan 1980 00:00:00 GMT"); res.setHeader("Pragma", "no-cache"); res.setHeader("Cache-Control", "no-cache, must-revalidate"); res.setContentType("text/plain"); res.setCharacterEncoding("UTF-8"); com.google.gerrit.server.project.ListProjects impl = factory.get(); com.google.gerrit.util.cli.CmdLineParser clp = parser.create(impl); try { @java.lang.SuppressWarnings("unchecked") java.util.Map<java.lang.String, java.lang.String[]> parameterMap = req.getParameterMap(); clp.parseOptionMap(parameterMap); } catch (org.kohsuke.args4j.CmdLineException e) { if (!(clp.wasHelpRequestedByOption())) { res.setStatus(HttpServletResponse.SC_BAD_REQUEST); send(res, e.getMessage().getBytes("UTF-8")); return; } } byte[] data; if (clp.wasHelpRequestedByOption()) { java.io.StringWriter msg = new java.io.StringWriter(); clp.printDetailedUsage(req.getRequestURI(), msg); data = msg.toString().getBytes("UTF-8"); } else { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); impl.display(buf); data = buf.toByteArray(); } if (com.google.gwt.user.server.rpc.RPCServletUtils.acceptsGzipEncoding(req)) { res.setHeader("Content-Encoding", "gzip"); data = com.google.gerrit.httpd.HtmlDomUtil.compress(data); } send(res, data); }

private void initSignatures() { setSignatureFactories(java.util.Arrays.<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Signature>>asList(new org.apache.sshd.common.signature.SignatureDSA.Factory(), new org.apache.sshd.common.signature.SignatureRSA.Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP256Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP384Factory(), new org.apache.sshd.common.signature.SignatureECDSA.NISTP521Factory())); }
private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); switch (changeStatus) { case NEW : setPatchSetAsDraft(); updateChange(); break; default : sendUserInfo(("Unable to set patch set as draft, change is " + (getStatusName(changeStatus)))); break; } }

private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith("/")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }





@java.lang.Override protected void formatChange() { formatSalutation(); formatChangeDetail(); appendText("\n"); appendText(((" " + (getPullUrl())) + "\n")); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); }
private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { if (c.getStatus().isOpen()) { openByProject.put(c.getProject(), c.getId()); } } return openByProject; }
@java.lang.Override public com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.SetDiffPreferences.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to members of Modify Accounts"); } if (input == null) { input = new com.google.gerrit.server.account.SetDiffPreferences.Input(); } com.google.gerrit.reviewdb.client.Account.Id accountId = rsrc.getUser().getAccountId(); com.google.gerrit.reviewdb.client.AccountDiffPreference p; db.get().accounts().beginTransaction(accountId); try { p = db.get().accountDiffPreferences().get(accountId); if (p == null) { p = new com.google.gerrit.reviewdb.client.AccountDiffPreference(accountId); } if ((input.context) != null) { p.setContext(input.context); } if ((input.ignoreWhitespace) != null) { p.setIgnoreWhitespace(input.ignoreWhitespace); } if ((input.expandAllComments) != null) { p.setExpandAllComments(input.expandAllComments); } if ((input.intralineDifference) != null) { p.setIntralineDifference(input.intralineDifference); } if ((input.lineLength) != null) { p.setLineLength(input.lineLength); } if ((input.manualReview) != null) { p.setManualReview(input.manualReview); } if ((input.retainHeader) != null) { p.setRetainHeader(input.retainHeader); } if ((input.showLineEndings) != null) { p.setShowLineEndings(input.showLineEndings); } if ((input.showTabs) != null) { p.setShowTabs(input.showTabs); } if ((input.showWhitespaceErrors) != null) { p.setShowWhitespaceErrors(input.showWhitespaceErrors); } if ((input.skipDeleted) != null) { p.setSkipDeleted(input.skipDeleted); } if ((input.skipUncommented) != null) { p.setSkipUncommented(input.skipUncommented); } if ((input.syntaxHighlighting) != null) { p.setSyntaxHighlighting(input.syntaxHighlighting); } if ((input.hideTopMenu) != null) { p.setHideTopMenu(input.hideTopMenu); } if ((input.autoHideDiffTableHeader) != null) { p.setAutoHideDiffTableHeader(input.autoHideDiffTableHeader); } if ((input.hideLineNumbers) != null) { p.setHideLineNumbers(input.hideLineNumbers); } if ((input.renderEntireFile) != null) { p.setRenderEntireFile(input.renderEntireFile); } if ((input.tabSize) != null) { p.setTabSize(input.tabSize); } if ((input.theme) != null) { p.setTheme(input.theme); } if ((input.hideEmptyPane) != null) { p.setHideEmptyPane(input.hideEmptyPane); } db.get().accountDiffPreferences().upsert(java.util.Collections.singleton(p)); db.get().commit(); } finally { db.get().rollback(); } return com.google.gerrit.server.account.GetDiffPreferences.DiffPreferencesInfo.parse(p); }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(accountCache.get(id).getAccount(), events.getWhen(), serverIdent); }


@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { com.google.gerrit.reviewdb.client.Account a = accountCache.get(fromId).getAccount(); java.lang.String fullName = a.getFullName(); java.lang.String userEmail = a.getPreferredEmail(); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
private com.google.gerrit.client.diff.UnifiedCommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { com.google.gerrit.client.diff.UnifiedCommentGroup w = map(side).get(cmLinePlusOne); if (w != null) { return w; } com.google.gerrit.client.diff.UnifiedCommentGroup g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCm(), side, cmLinePlusOne); if (side == (DisplaySide.A)) { sideA.put(cmLinePlusOne, g); } else { sideB.put(cmLinePlusOne, g); } if (isAttached()) { g.init(getDiffScreen().getDiffTable()); g.handleRedraw(); } return g; }

@org.junit.Before public void setUp() { storeMock = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.EventStore.class); }

private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gwt.user.client.rpc.AsyncCallback<T> cb) { com.google.gerrit.client.rpc.RestApi.HttpCallback<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpCallback(background, cb); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }
@java.lang.Override public synchronized com.google.gerrit.metrics.Timer newTimer(final java.lang.String name, com.google.gerrit.metrics.Description desc) { checkArgument((!(desc.isGauge())), "timer must not be a gauge"); checkArgument((!(desc.isRate())), "timer must not be a rate"); checkArgument(desc.isCumulative(), "timer must be cumulative"); checkArgument(((desc.getTimeUnit()) != null), "timer must have a unit"); checkNotDefined(name); descriptions.put(name, desc.getAnnotations()); final com.codahale.metrics.Timer metric = registry.timer(name); return new com.google.gerrit.metrics.Timer() { @java.lang.Override public void record(long value, java.util.concurrent.TimeUnit unit) { checkArgument((value >= 0), "timer delta must be >= 0"); metric.update(value, unit); } @java.lang.Override public void remove() { descriptions.remove(name); registry.remove(name); } }; }




private void scheduleTask(com.googlesource.gerrit.plugins.replication.PushOne pushOp, int delay, java.util.concurrent.TimeUnit unit) { postEvent(pushOp); pool.schedule(pushOp, delay, unit); }

@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.md5().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }
@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey existingProject = new com.google.gerrit.reviewdb.client.Project.NameKey("p"); com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey("p1"); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey("p2"); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, child2.get()); com.google.gerrit.acceptance.GitUtil.createProject(sshSession, "p1.1", child1); com.google.gerrit.acceptance.RestResponse r = GET((("/projects/" + (allProjects.get())) + "/children/")); assertThat(r.getStatusCode()).isEqualTo(HttpStatus.SC_OK); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjects(java.util.Arrays.asList(new com.google.gerrit.reviewdb.client.Project.NameKey("All-Users"), existingProject, child1, child2), com.google.gerrit.acceptance.rest.project.ListChildProjectsIT.toProjectInfoList(r)); }



private java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> getMembers(final com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) throws com.google.gwtorm.server.OrmException { seenGroups.add(groupUUID); final java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.extensions.common.AccountInfo> members = new java.util.HashMap<>(); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupUUID); if (group == null) { return java.util.Collections.emptyMap(); } final com.google.gerrit.common.data.GroupDetail groupDetail; try { groupDetail = groupDetailFactory.create(group.getGroupUUID()).call(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { return java.util.Collections.emptyMap(); } for (com.google.gerrit.reviewdb.client.Account.Id member : groupDetail.getMembers()) { if (!(members.containsKey(member))) { members.put(member, accountLoader.get(member)); } } if (recursive) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : groupDetail.getIncludes()) { if (!(seenGroups.contains(includedGroupUuid))) { members.putAll(getMembers(includedGroupUuid, seenGroups)); } } } accountLoader.fill(); return members; }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.ReviewInput.NotifyHandling notifyHandling);
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int threads = config.getInt("index", null, "batchThreads", 0); if (threads <= 0) { threads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, "Index-Batch")); }
private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int line, int cnt) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(diffTable.style.padding()); div.getStyle().setHeight(cnt, Unit.EM); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == 0)); cm.addLineWidget((line == 0 ? 0 : line - 1), div, config); }

private java.lang.String extractWhat(java.lang.String commandName, java.lang.String[] args) { java.lang.String result = commandName; if ("gerrit".equals(commandName)) { if ((args.length) > 1) result = ("gerrit" + ".") + (args[1]); } return result; }
void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String commandName, java.lang.String[] args) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); final java.lang.String what = extractWhat(commandName, args); auditService.dispatch(new com.google.gerrit.audit.AuditEvent(sid, extractCurrentUser(ctx), ("ssh:" + what), created, java.util.Arrays.asList(args), result)); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return comments; }

@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die("Argument \"-|URL\" is required"); } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && ("-".equalsIgnoreCase(source))) { throw die("--name required when source is stdin"); } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if (0 <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if ("-".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die(("cannot read " + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die(("invalid url " + (source))); } catch (java.io.IOException e) { throw die(("cannot read " + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die("cannot install plugin"); } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format("Plugin failed to install. Cause: %s", e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }


private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(magicBranch.isPrivate).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }

public void testListTables() throws com.google.gwtorm.client.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute("CREATE SEQUENCE cnt"); execute("CREATE TABLE foo (cnt INT)"); java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains("cnt")); assertTrue(s.contains("foo")); }
private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug("Setting change {} merged", c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id merged = commit.change().currentPatchSetId(); c = setMergedPatchSet(c.getId(), merged); com.google.gerrit.reviewdb.client.PatchSetApproval submitter = approvalsUtil.getSubmitter(db, commit.notes(), merged); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), db.patchSets().get(merged), db); } catch (com.google.gwtorm.server.OrmException ex) { logError(("Cannot run hook for submitted patch set " + (c.getId())), ex); } } } finally { db.rollback(); } indexer.index(db, c); update.commit(); }
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { com.google.gerrit.server.List<java.lang.Module> modules = new java.util.ArrayList(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return (aId.equals(k.aId)) && (bId.equals(k.bId)); } return false; }
private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData>> extensions = com.google.gerrit.server.plugins.JarScanner.scan(jarFile, pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.JarScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }

private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }

public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.patch.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.patch.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn(("Cannot get patch list: " + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn("Cannot get patch list", e); } }

@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try { java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into)); try { ser.writeObject(from); ser.flush(); } finally { ser.close(); } } catch (java.io.IOException err) { throw new java.lang.RuntimeException("Cannot hash as Serializable", err); } }
@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, "foo2", "touching b", "b.txt", "real content").getChangeId(); approve(changeId2); testRepo.reset("HEAD~2"); java.lang.String collidingChange = createChangeWithTopic(testRepo, "off_topic", "rewriting file b", "b.txt", "garbage\ngarbage\ngarbage").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get("submit"); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo("Submit whole topic"); assertThat(info.method).isEqualTo("POST"); assertThat(info.title).isEqualTo("See the \"Submitted Together\" tab for problems, specifically see: 2"); } else { noSubmitWholeTopicAssertions(actions, 1); } }
public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { return asPatchSetAttribute(revWalk, patchSet); }
public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase("gitweb"))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("?p=${project}.git;a=summary"); type.setRevision("?p=${project}.git;a=commit;h=${commit}"); type.setBranch("?p=${project}.git;a=shortlog;h=${branch}"); } else if (name.equalsIgnoreCase("cgit")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("${project}/summary"); type.setRevision("${project}/commit/?id=${commit}"); type.setBranch("${project}/log/?h=${branch}"); } else if (name.equalsIgnoreCase("custom")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }

@java.lang.SuppressWarnings("unchecked") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.setAllowFileRegex(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }


public java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.change.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; } @java.lang.Override public java.lang.String toString() { return "Index all changes of project " + (project.get()); } }; }

@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();
protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((isNoDifferences(caught)) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } } private boolean isNoDifferences(final java.lang.Throwable caught) { if (caught instanceof com.google.gerrit.client.rpc.NoDifferencesException) { return true; } return (caught instanceof com.google.gwtjsonrpc.client.RemoteJsonException) && (caught.getMessage().equals(NoDifferencesException.MESSAGE)); } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }

private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control)); } return result; }
@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRepository(), ctx.getRevWalk(), priorCommitId, commitId); if (checkMergedInto) { org.eclipse.jgit.lib.Ref mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto.getName()); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, patchSetId.toRefName())); } }

public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gwt.user.client.rpc.AsyncCallback<java.lang.String> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(com.google.gerrit.client.changes.ChangeFileApi.wrapper(cb)); }
private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); diffView.setEnabled(on); }
private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append("\r").append(taskName).append(':'); if (!(tasks.isEmpty())) { boolean first = true; for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { int count = t.count; if (count == 0) { continue; } if (!first) { s.append(','); } else { first = false; } s.append(' '); if (!(com.google.common.base.Strings.isNullOrEmpty(t.name))) { s.append(t.name).append(": "); } if ((t.total) == (com.google.gerrit.server.git.MultiProgressMonitor.UNKNOWN)) { s.append(count); } else { s.append(java.lang.String.format("%d%% (%d/%d)", ((count * 100) / (t.total)), count, t.total)); } } } if ((spinnerState) != (com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append(" (").append(spinnerState).append(')'); } return s; }
@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner("refs/heads/x/*", uDev); assertOwner("refs/heads/x/y", uDev); assertOwner("refs/heads/x/y/*", uDev); assertNotOwner("refs/*", uDev); assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner("refs/heads/x/y/*", uFix); assertOwner("refs/heads/x/y/bar", uFix); assertNotOwner("refs/heads/x/*", uFix); assertNotOwner("refs/heads/x/y", uFix); assertNotOwner("refs/*", uFix); assertNotOwner("refs/heads/master", uFix); }


@java.lang.Override public java.lang.String toString() { return runnable.toString(); }

@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { if (itr.hasNext()) { itr.next().doFilter(req, res, this); } else { last.doFilter(req, res); } }
@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec("gerrit ls-groups"); assertTrue(result.contains("Administrators")); assertTrue(result.contains("Anonymous Users")); assertTrue(result.contains("Non-Interactive Users")); assertTrue(result.contains("Project Owners")); assertTrue(result.contains("Registered Users")); session.close(); }
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { java.lang.String idStr = id.name(); for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && ((p.getRevision().get()) != null)) { if (java.util.Objects.equals(p.getRevision().get(), idStr)) { return true; } } } return false; }

@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(tempFolder.getRoot().toPath()); }

public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return (((conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && ((((!(hasCriteria(conf, "skipGroup"))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }



void deleteChecked() { final java.util.HashSet<com.google.gerrit.reviewdb.client.AccountSshKey.Id> ids = new java.util.HashSet<com.google.gerrit.reviewdb.client.AccountSshKey.Id>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { ids.add(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())); } } if (ids.isEmpty()) { updateDeleteButton(); } else { Util.ACCOUNT_SEC.deleteSshKeys(ids, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.common.VoidResult>() { public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } }); } }
private void preMerge() throws com.google.gerrit.server.git.MergeException { final com.google.gerrit.server.git.SubmitStrategy strategy = createStrategy(); mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }
void init(com.google.gerrit.client.diff.PreferencesAction pa, java.util.List<com.google.gerrit.client.DiffWebLinkInfo> webLinks) { prefsAction = pa; prefsAction.setPartner(preferences); if (webLinks != null) { for (com.google.gerrit.client.DiffWebLinkInfo webLink : webLinks) { webLinksPanel.add(webLink.toAnchor()); } } }
public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }

@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.cache.CachePool.class); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.ehcache.EhcachePoolImpl.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); } }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); }
public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : this.path = com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(checkNotNull(path)); break; case DESCRIBE : case REFS : case LOG : this.path = (path != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null; break; default : checkState((path == null), "cannot set path on %s view", type); this.path = path; break; } return this; }
private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { com.google.gerrit.client.diff.LineMapper mapper = getLineMapper(); int startA = mapper.getLineA(); int startB = mapper.getLineB(); com.google.gwt.core.client.JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB); mapper.appendReplace(aLen, bLen); int endA = (mapper.getLineA()) - 1; int endB = (mapper.getLineB()) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk(cmA, endA, endB, bLen, (aLen > 0)); } }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "Specified group and groupControl do not match"); }
protected void postExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.postExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(initialProgress, reloadButton); if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp(), change); changeList.addView(changeEntry); addSeparator(changeList); } } else { statusText.setText(getString(R.string.no_changes_match)); } }
private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { com.google.gerrit.server.config.PluginConfig cfg = configFactory.getFromGerritConfig(pluginName); java.lang.String region = cfg.getString("region", null); java.lang.String bucket = cfg.getString("bucket", null); java.lang.String storageClass = cfg.getString("storageClass", "REDUCED_REDUNDANCY"); java.lang.String accessKey = cfg.getString("accessKey", null); java.lang.String secretKey = cfg.getString("secretKey", null); int expirationSeconds = cfg.getInt("expirationSeconds", 60); boolean disableSslVerify = cfg.getBoolean("disableSslVerify", false); return new org.eclipse.jgit.lfs.server.s3.S3Config(region, bucket, storageClass, accessKey, secretKey, expirationSeconds, disableSslVerify); }
private boolean areChangesSubmittable(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.canSubmit())) { return false; } } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error(("Failed to get a ChangeControl for Change.Id " + (java.lang.String.valueOf(c.getId()))), e); return false; } } return true; }
protected void displayPopup() { popingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } popingUp = false; } }
java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name);
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try { super.service(req, res); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add email address"); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if ((input.noConfirmation) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to use no_confirmation"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }

private com.google.gerrit.reviewdb.client.Project.SubmitType getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }
@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); updateRepoImpl(ctx); com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { return; } else if (tipAfter == null) { logDebug("No merge tip, no update to perform"); return; } checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }
private java.lang.String getLatestRemoteDiff() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve("refs/heads/master~1^{tree}"); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve("refs/heads/master^{tree}"); return getLatestDiff(repo, oldTreeId, newTreeId); } }

public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail()); }


@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY)).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }

public static void deleteEdit(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(id).delete(cb); }

static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll("/$", ""); }

private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains("//"))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, "not valid ref"); continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); return com.google.common.collect.ImmutableMap.of("cloneUrl", desc.cloneUrl, "description", com.google.common.base.Strings.nullToEmpty(desc.description), "branches", getRefs(req, Constants.R_HEADS), "tags", getRefs(req, Constants.R_TAGS)); }
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { return injector.createChildInjector().getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
private void showCLA(final com.google.gerrit.common.data.ContributorAgreement cla) { current = cla; java.lang.String url = cla.getAgreementUrl(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith("http:"))) && (!(url.startsWith("https:")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader("Content-Type"); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals("text/html")) || (ct.startsWith("text/html;")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.getAutoVerify()) != null)); yesIAgreeBox.setText(""); submit.setEnabled(false); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format(("The configured name '%s' for system group '%s' is ambiguous" + ((" with the name '%s' of existing group '%s'." + " Please remove/change the value for groups.%s.name in") + " gerrit.config.")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); LabelInfo q = c.labels.get(Q.getName()); assertEquals(1, q.all.size()); assertNull(q.disliked); assertNotNull(q.rejected); assertTrue(q.blocking); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef("g-1", "[group]\n\tuuid = uuid-2\n\tname = g-2\n"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group " + "name notes")), warning("group note of name 'g-1' claims to represent name of 'g-2'")).inOrder(); }

private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format(("Range (%s:%s - %s:%s) is not" + " valid for the replacement of the robot comment on %s"), range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }


private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = new java.util.HashMap<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>>(); com.google.gerrit.common.data.AccessSection section = state.getConfig().getAccessSection(AccessSection.GLOBAL_CAPABILITIES); for (com.google.gerrit.common.data.Permission permission : section.getPermissions()) { for (com.google.gerrit.common.data.PermissionRule rule : permission.getRules()) { if (matchGroup(rule.getGroup().getUUID())) { if (!(rule.getDeny())) { java.util.List<com.google.gerrit.common.data.PermissionRule> r = permissions.get(permission.getName()); if (r == null) { r = new java.util.ArrayList<com.google.gerrit.common.data.PermissionRule>(2); permissions.put(permission.getName(), r); } r.add(rule); } } } } } return permissions; }
public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps); }

@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { if ((isNoDifferences(caught)) && (!isFirst)) { historyTable.enableAll(true); showPatch(false); } else { super.onFailure(caught); } } }



public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = (cd != null) ? cd.reviewers().values() : approvalsUtil.getReviewers(db, getChange().getId()).values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }
@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.getKey().get()); }
public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups; if (((projects) != null) && (!(projects.isEmpty()))) { groups = getGroupsForProjects(); } else { groups = groupCache.all(); } return createGroupList(filterGroups(groups)); }
@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int cmp = ai - bi; if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { ai = (((com.google.gerrit.server.query.change.ChangeDataSource) (a)).hasChange()) ? 0 : 1; bi = (((com.google.gerrit.server.query.change.ChangeDataSource) (b)).hasChange()) ? 0 : 1; cmp = ai - bi; } if (cmp == 0) { cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); } return cmp; }
public boolean isOwner() { if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup g = groupCache.get(group.getOwnerGroupId()); com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = (g != null) ? g.getGroupUUID() : null; isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; }
@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, (-1)), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 0), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isFalse(); key = new com.google.gerrit.server.account.AccountSshKey(new com.google.gerrit.server.account.AccountSshKey.Id(accountId, 1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.isValid()).isTrue(); }

public void run() throws java.lang.Exception { ui.header("Gerrit Code Review %s", com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true, "Create '%s'", site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die("aborted by user"); } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(("Cannot make directory " + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, "gerrit.sh"); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); if (!(ui.isBatch())) { java.lang.System.err.println(); } }
@java.lang.Override public void run() { try { java.lang.String content = body.get(); if (com.google.common.base.Strings.isNullOrEmpty(content)) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped.", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }

private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case 0 : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : return com.google.gerrit.server.patch.PatchListLoader.automerge(repo, walk, b, mergeStrategy); default : return null; } }
public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); }
@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); java.lang.String changeId = newChange(git, admin.getIdent()); change = getChange(changeId); ps = getCurrentPatchSet(changeId); assertNotNull(ps); changeId = newChange2(git, admin.getIdent()); change2 = getChange(changeId); assertNotNull(change2); ps2 = getCurrentPatchSet(changeId); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); }

@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (!(webSession.get().isSignedIn())) { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader("Content-Encoding", "gzip"); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } else { chain.doFilter(request, response); } }
@java.lang.Override protected void onLoad() { super.onLoad(); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try { com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { db.accountGroupMembersAudit().insert(auditInserts); } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, added, e); } }
@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + ".secure.config"; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(("Cannot load " + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(cfg.getStringList(section, subsection, name)).transform(codec::decode).toArray(java.lang.String.class) : null; }
@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(("ERROR: path too long: " + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } }

@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), "Create group"); assertServerCommit(log.get(1), ("Update group\n" + (((("\n" + "Add: Account 1 <1@server-id>\n") + "Add: Account 2 <2@server-id>\n") + "Add-group: Group <x>\n") + "Add-group: Group <y>"))); }
private void styleLastCommentCell(final int row, final int col) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); }
public GroupDescription.Basic parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(id); if (groupBackend.handles(uuid)) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(uuid); if (d != null) { return d; } } if (id.matches("^[1-9][0-9]*$")) { try { com.google.gerrit.reviewdb.client.AccountGroup.Id legacyId = AccountGroup.Id.parse(id); return groupControlFactory.controlFor(legacyId).getGroup(); } catch (java.lang.IllegalArgumentException invalidId) { } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { } } com.google.gerrit.common.data.GroupReference ref = com.google.gerrit.server.account.GroupBackends.findExactSuggestion(groupBackend, id); if (ref != null) { com.google.gerrit.common.data.GroupDescription.Basic d = groupBackend.get(ref.getUUID()); if (d != null) { return d; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); if (loggedIn) { try { myself = hub.getMyself(); } catch (java.lang.Throwable e) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.error("Connection to GitHub broken: logging out", e); logout(); loggedIn = false; } } return loggedIn; }

@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? new com.google.gerrit.server.query.change.AndSource(l) : super.and(l); }


public com.google.gerrit.server.git.ChangeReportFormatter.Input setWorkInProgress(boolean wip) { this.wip = wip; return this; }
private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { java.lang.String currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision()).id(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1)).id(); } java.lang.String currentlyViewedPatchSet = info.revision(revision).id(); patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assertTrue(("missing group " + g), actual.remove(g)); } assertTrue(("unexpected groups: " + actual), actual.isEmpty()); }

public void copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException("Previous patch set could not be found"); } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : db.patchSetApprovals().byPatchSet(source)) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if ((type.getCategory().isCopyMinScore()) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } }


public void testCreate() { final java.lang.String find = "find"; final java.lang.String replace = "replace"; final com.google.gwtexpui.safehtml.client.RegexFindReplace a = new com.google.gwtexpui.safehtml.client.RegexFindReplace(find, replace); assertSame(find, a.find()); assertSame(replace, a.replace()); assertEquals(((("find = " + find) + ", replace = ") + replace), a.toString()); }

@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put("git.repositoriesFolder", repoManager.getBasePath().getAbsolutePath()); properties.put("realm.userService", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); properties.put("web.otherUrls", (((config.getGitHttpUrl()) + " ") + (config.getGitSshUrl())).trim()); } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }
public static void delete(int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(id, path).delete(cb); }

@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); if (!(permissionsOnly)) { final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(projectName); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch); repoManager.setProjectDescription(projectName, projectDescription); final com.google.gerrit.reviewdb.Project.NameKey project = new com.google.gerrit.reviewdb.Project.NameKey(projectName); rq.replicateNewProject(project, branch); if (createEmptyCommit) { createEmptyCommit(repo, project, branch); } } finally { repo.close(); } } createProject(); } catch (java.lang.Exception e) { p.print((("Error when trying to create project: " + (e.getMessage())) + "\n")); p.flush(); } } }); }
private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) { parms.put(arg.substring(0, eqPos), arg.substring((eqPos + 1))); continue; } if (arg.startsWith("-")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, arg); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }

@java.lang.Override public java.util.concurrent.Future<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return workQueue.getDefaultQueue().submit(task); }
@java.lang.Override public boolean shouldPublish() { return config.isEnabled(); }


public void stop() { if (started) { final java.util.List<com.google.gerrit.lifecycle.LifecycleListener> t = new java.util.ArrayList<com.google.gerrit.lifecycle.LifecycleListener>(listeners.keySet()); for (int i = (t.size()) - 1; 0 <= i; i--) { final com.google.gerrit.lifecycle.LifecycleListener obj = t.get(i); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn("Failed to stop", err); } } started = false; } }
private java.lang.String healthCheckAccess() throws java.rmi.RemoteException { com.googlesource.gerrit.plugins.its.jira.JiraClient client = new com.googlesource.gerrit.plugins.its.jira.JiraClient(getUrl()); com.googlesource.gerrit.plugins.its.jira.JiraSession token = client.login(getUsername(), getPassword()); client.logout(token); final java.lang.String result = ("{\"status\"=\"ok\",\"username\"=\"" + (getUsername())) + "\"}"; log.debug("Healtheck on access result: {}", result); return result; }



@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }
private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }

void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED)) { setVisibleB((!hide)); } }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = null; for (com.google.gerrit.reviewdb.client.AccountExternalId extId : getGpgExtIds(parent)) { java.lang.String fpStr = extId.getSchemeRest(); if (!(fpStr.endsWith(str))) { continue; } else if (fp != null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("Multiple keys found for " + id)); } fp = com.google.common.io.BaseEncoding.base16().decode(fpStr); } if (fp == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = java.nio.ByteBuffer.wrap(fp).getLong(((fp.length) - 8)); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey(parent.getUser(), keyRing); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.lang.Iterable<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(getRefNames(RefNames.REFS_STARRED_CHANGES)).filter(new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String refPart) { return refPart.endsWith(("/" + (changeId.get()))); } }).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.fromRefPart(refPart); } }); }
public final boolean isHttpPasswordSettingsEnabled() { if ((isGitBasicAuth()) && ((gitBasicAuthPolicy()) == (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP))) { return false; } return true; }
@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }


private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.PROJECT_SVC.projectDetail(getProjectKey(), new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.ProjectDetail>(this) { public void preDisplay(final com.google.gerrit.common.data.ProjectDetail result) { enableForm(result.canModifyAgreements, result.canModifyDescription, result.canModifyMergeType, result.canModifyState, result.canModifyMaxObjectSizeLimit); saveProject.setVisible(((((result.canModifyAgreements) || (result.canModifyDescription)) || (result.canModifyMergeType)) || (result.canModifyState))); display(result); } }); savedPanel = INFO; }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); return change; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig() throws java.lang.Exception { return getConfig(true); }
private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.clippy.client.CopyableLabel(""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }

@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }

public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(db, who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }

@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.server.access.ListAccess.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); try (com.google.gerrit.server.git.MetaDataUpdate md = metaDataUpdateFactory.create(projectName)) { com.google.gerrit.server.project.ProjectControl pc = open(projectName); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); if (config.updateGroupNames(groupBackend)) { md.setMessage("Update group names\n"); config.commit(md); projectCache.evict(config.getProject()); pc = open(projectName); } else if (((config.getRevision()) != null) && (!(config.getRevision().equals(pc.getProjectState().getConfig().getRevision())))) { projectCache.evict(config.getProject()); pc = open(projectName); } access.put(p, new com.google.gerrit.server.access.ListAccess.ProjectAccessInfo(pc, config)); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(p); } } return access; }
private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted); }

@com.google.gwt.uibinder.client.UiHandler("update") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); }
private static java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }


private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(new org.apache.sshd.common.compression.CompressionNone.Factory()); if (enableCompression) { compressionFactories.add(new org.apache.sshd.common.compression.CompressionZlib.Factory()); } setCompressionFactories(compressionFactories); }
com.google.gerrit.server.CurrentUser getUser(java.lang.String auth) { if (((!(com.google.common.base.Strings.isNullOrEmpty(auth))) && (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX))) && (authCfg.isGitBasicAuth())) { return user.get(); } return anonymous.get(); }


private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(com.google.gerrit.server.events.ChangeAbandonedEvent event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.add(propertyFactory.create("event-type", event.type)); common.addAll(propertyAttributeExtractor.extractFrom(event.change)); common.addAll(propertyAttributeExtractor.extractFrom(event.abandoner, "abandoner")); common.addAll(propertyAttributeExtractor.extractFrom(event.patchSet)); common.add(propertyFactory.create("reason", event.reason)); com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId = newPatchSetId(event.change.number, event.patchSet.number); return issueExtractor.getIssueIds(event.change.project, event.patchSet.revision, patchSetId); }

void setupPrevNextFiles() { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; for (int i = (currIndex) - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((prefs.skipDeleted()) && (curr.status().equals("D"))) { continue; } else { prevInfo = curr; break; } } for (int i = (currIndex) + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if ((prefs.skipDeleted()) && (curr.status().equals("D"))) { continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }

public Account.Id getNullableAccountId() { return accountId; }

@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return "http://www.gravatar.com"; }
void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } }
static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); }


@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws java.lang.Exception { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } catch (java.lang.Exception e) { conn.rollback(); throw e; } finally { conn.setAutoCommit(true); } }

@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get("url"))) != null; database.string("URL", "url", null); guessDriver(database); database.string("Driver class name", "driver", null); database.string("Database username", "username", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password("username", "password"); }
private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.PerformVisibleGroups performVisibleGroups = performVisibleGroupsFactory.create(); performVisibleGroups.setProjects(projects); performVisibleGroups.setOnlyVisibleToAll(visibleToAll); final com.google.gerrit.common.data.GroupList visibleGroups = performVisibleGroups.getVisibleGroups(); for (final GroupDetail groupDetail : visibleGroups.getGroups()) { stdout.print(((groupDetail.group.getName()) + "\n")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }


@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(1); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.verify()).isTrue(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); if (sshd) { modules.add(sshInjector.getInstance(com.google.inject.Module.class)); } return sysInjector.createChildInjector(modules); }
private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.google.common.collect.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { enabledManifestRepos.put(projectName, new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches)); stores.add(newStore); } } } }



@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }



@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException { db.get().patchComments().delete(java.util.Collections.singleton(rsrc.getComment())); return com.google.gerrit.extensions.restapi.Response.none(); }
public final native short value();
@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } ent.setObjectId(content); }
public static void main(final java.lang.String[] argv) throws com.google.gwtjsonrpc.server.XsrfException, com.google.gwtorm.client.OrmException, java.net.SocketException { com.google.gerrit.server.ssh.GerritSshDaemon.startSshd(); }

public com.google.gerrit.server.patch.PatchListCache getPatchListCache() { return patchListCache; }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gwtorm.server.OrmException("unable to check permissions", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }

@org.junit.After public void tearDown() { if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException("Cannot close database", e); } } db = null; }

@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }
private java.lang.String getPublicKeyPart(int index, java.lang.String defaultValue) { java.lang.String s = getSshPublicKey(); if ((s != null) && ((s.length()) > 0)) { java.lang.String[] parts = s.split(" "); if ((parts.length) > index) { return parts[index]; } } return defaultValue; }

com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; commit.parents.add(i); } return commit; }
private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget>>(); for (java.lang.String pluginName : com.google.gerrit.client.rpc.Natives.keys(info.pluginConfigParameters())) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.Widget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.Widget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(info.pluginConfigParameter(pluginName))) { if ("STRING".equals(param.type())) { com.google.gwtexpui.globalkey.client.NpTextBox textBox = new com.google.gwtexpui.globalkey.client.NpTextBox(); textBox.setValue(param.value()); g.add(((param.displayName()) != null ? param.displayName() : param.name()), textBox); saveEnabler.listenTo(textBox); widgetMap.put(param.name(), textBox); } } } enableForm(); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error(("Cannot send email for new change " + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return "send-email newchange"; } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); if (((hashtags) != null) && ((hashtags.size()) > 0)) { hooks.doHashtagsChangedHook(change, accountCache.get(change.getOwner()).getAccount(), hashtags, null, hashtags, db); } if (((approvals) != null) && (!(approvals.isEmpty()))) { hooks.doCommentAddedHook(change, ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())).getAccount(), patchSet, null, approvals, db); } } }

public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.UUID> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID childGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(childGroupUuid); com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.Id> foundParentGroupIds = com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId).collect(toImmutableSet()); com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> existingParentGroups = db.accountGroups().get(foundParentGroupIds); return com.google.common.collect.Streams.stream(existingParentGroups).map(AccountGroup::getGroupUUID); }



@java.lang.Override void insertNewDraft(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { if (cmLinePlusOne == 0) { getDiffScreen().skipManager.ensureFirstLineIsVisible(); } com.google.gerrit.client.diff.CommentGroup group = group(side, cmLinePlusOne); if (0 < (group.getBoxCount())) { com.google.gerrit.client.diff.CommentBox last = group.getCommentBox(((group.getBoxCount()) - 1)); if (last instanceof com.google.gerrit.client.diff.DraftBox) { ((com.google.gerrit.client.diff.DraftBox) (last)).setEdit(true); } else { ((com.google.gerrit.client.diff.PublishedBox) (last)).doReply(); } } else { com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo info = host.getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); int line = info.line; if ((info.getSide()) != side) { line = host.lineOnOther(info.getSide(), line).getLine(); } addDraftBox(side, com.google.gerrit.client.changes.CommentInfo.create(getPath(), getStoredSideFromDisplaySide(side), (line + 1), null)).setEdit(true); } }

public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }



public static boolean compareCommitValidationMessage(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m1, java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m2) { for (com.google.gerrit.server.git.validators.CommitValidationMessage cvm1 : m1) { boolean found = false; for (com.google.gerrit.server.git.validators.CommitValidationMessage cvm2 : m2) { if (com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.compareCommitValidationMessage(cvm1, cvm2)) { found = true; } } if (!found) { return false; } } return true; }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }

public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_USERS).values()) { if (RefNames.REFS_USERS_DEFAULT.equals(ref.getName())) { continue; } return true; } return false; } }

@com.google.gwt.uibinder.client.UiHandler("deleteEdit") void onDeleteEdit(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(changeId, publishEdit, rebaseEdit, deleteEdit); } }
private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }

void setPadding(net.codemirror.lib.LineWidget widget, com.google.gwt.dom.client.Element element) { paddingWidget = widget; paddingWidgetEle = element; }

@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 1), iter.advance(1)); }
public static void main(java.lang.String[] args) throws java.lang.Exception { new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile()).start(); }

com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(java.lang.String project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.LfsLockExistsException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug("Create lock for {} in project {}", input.path, project); java.lang.String lockId = toLockId.apply(input.path); com.google.common.cache.Cache<java.lang.String, com.googlesource.gerrit.plugins.lfs.locks.LfsLock> locks = projects.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.getIfPresent(lockId); if (lock != null) { throw new com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.LfsLockExistsException(lock); } lock = new com.googlesource.gerrit.plugins.lfs.locks.LfsLock(lockId, input.path, now(), new com.googlesource.gerrit.plugins.lfs.locks.LfsLockOwner(user.getUserName())); locks.put(lockId, lock); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }


@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/settings/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(getProject().getNameKey()); try { com.google.gerrit.server.git.VisibleRefFilter filter = new com.google.gerrit.server.git.VisibleRefFilter(tagCache, changeCache, repo, this, db, true); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> visibleRefs = filter.filter(repo.getAllRefs(), true); if ((!(visibleRefs.isEmpty())) && (com.google.gerrit.server.change.IncludedInResolver.includedInOne(repo, rw, commit, visibleRefs.values()))) { return true; } } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); } return false; }

private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) { final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error("Invalid pack upload; one or more objects weren't sent", err); } }


public void autoRebuild() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkAutoRebuildPreconditions(); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException("Could not determine initial migration state"); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(("Migration has already progressed past the endpoint of the \"trial mode\" state;" + " NoteDb is already the primary storage for some changes")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException(("Migration out of the following state is not supported:\n" + (state.toText()))); } } }
@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Create group"); assertCommit(log.get(1), "Update group\n\nAdd: Account 1 <1@server-id>", "Account 8", "8@server-id"); assertCommit(log.get(2), "Update group\n\nRemove: Account 1 <1@server-id>", "Account 8", "8@server-id"); assertCommit(log.get(3), "Update group\n\nAdd: Account 2 <2@server-id>", "Account 8", "8@server-id"); }

private void setUp() throws java.lang.Exception { injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); }

public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }
private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.addStyleName(Gerrit.RESOURCES.css().diffText()); switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append("-"); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append("+"); m.append(text); break; } m.closeTd(); }

private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { cmts.append(("Line " + line)); try { final java.lang.String lineStr = fileData.getLine(side, line); cmts.append(": "); cmts.append(lineStr); } catch (java.lang.Throwable e) { } cmts.append("\n"); }
@com.google.gwtorm.client.Relation com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();
@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(("Testing trailing double newline\n" + "\n")); update.commit(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(("Update patch set 1\n" + ((((("\n" + "Testing trailing double newline\n") + "\n") + "\n") + "\n") + "Patch-set: 1\n")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals(("Testing trailing double newline\n" + "\n"), changeMessages.get(0)); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { stmt.executeUpdate("DROP INDEX changes_byProjectOpen"); if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate(("CREATE INDEX changes_byProjectOpen" + (" ON changes (dest_project_name, last_updated_on)" + " WHERE open = 'Y'"))); } else { stmt.executeUpdate(("CREATE INDEX changes_byProjectOpen" + " ON changes (open, dest_project_name, last_updated_on)")); } } }

private void savePluginSections(org.eclipse.jgit.lib.Config rc) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }

private void assertNoProblems(com.google.gerrit.server.project.ChangeControl ctl, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) { assertThat(checker.check(ctl, fix).problems()).isEmpty(); }

@org.junit.Test public void testExpiredTime() throws java.lang.Exception { org.joda.time.DateTime now = now(); assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsAuthToken.ISO.print(now.minusMillis(1)))).isFalse(); }
@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); bccWatchers(); }
private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); }

@java.lang.Override public Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); }
@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.verifystatus.commands.Failure { try { checkPermission(); final com.googlesource.gerrit.plugins.verifystatus.commands.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } } catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.googlesource.gerrit.plugins.verifystatus.commands.UnloggedFailure(("fatal: " + (err.getMessage()))); } }
@java.lang.Override public boolean shouldProcess() { java.lang.String[] wantedEvents = cfg.getStringList(Configuration.REMOTE, name, "event"); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }

private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.findOkRecord(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)).isPresent(); }





@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); }
public static void publish(int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(id, commit, "publish").post(in, cb); }
@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 3), iter.advance(3)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), db.get().patchSets().get(rsrc.getChange().currentPatchSetId())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }


private void enableForm(final boolean on) { delRight.setEnabled(on); rightEditor.enableForm(on); }

private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection != null ? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("group \"" + (ref.getName())) + "\" not in ") + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }
private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.getRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }
public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return "[Octopus merge; cannot be formatted as a diff.]\n"; } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot format patch", e); return ""; } org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(args.settings.maximumDiffSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot open repository to format patch", e); return ""; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return ""; } com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot format patch", e); return ""; } finally { git.close(); } } }

private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if (0 < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try { final java.io.InputStream in; in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize); try { readCgiHeaders(rsp, in); final java.io.OutputStream out = rsp.getOutputStream(); try { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } finally { out.close(); } } finally { in.close(); } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if (0 != status) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.error(((("Non-zero exit status (" + status) + ") from ") + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitWebServlet.log.debug("CGI: interrupted waiting for CGI to terminate"); } }

public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGeneralPreferences.DownloadScheme> allowedSchemes = com.google.gerrit.client.Gerrit.getConfig().getDownloadSchemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && ((allowedSchemes.contains(DownloadScheme.ANON_GIT)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && ((allowedSchemes.contains(DownloadScheme.ANON_HTTP)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && ((allowedSchemes.contains(DownloadScheme.SSH)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && ((allowedSchemes.contains(DownloadScheme.HTTP)) || (allowedSchemes.contains(DownloadScheme.DEFAULT_DOWNLOADS)))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren("name"); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.fromEdit(edit)); } HEAD((ec436a = "Fix updating of username from AccountManager")); int currentPatchSet = info.revision(info.currentRevision())._number(); java.lang.String currentRevision = info.current_revision(); boolean current = (currentRevision != null) && ((revision.get()) == (info.revision(currentRevision)._number())); BRANCH(4); com.google.gerrit.client.diff.bc067 Show; com.google.gerrit.client.diff.change status; draft(sets); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }

@com.google.gwtorm.client.PrimaryKey("name") com.google.gwtorm.data.TestPerson get(com.google.gwtorm.data.TestPerson.Key key) throws com.google.gwtorm.client.OrmException;

private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }


public long getInitialDelay() { if ((initialDelay) == null) { load(); } return initialDelay; }


@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.git.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot set topic", e); } }

@org.junit.Before public void setUp() throws java.lang.Exception { servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private static boolean isLargeFile(com.google.gerrit.client.diff.DiffInfo diffInfo) { return (((diffInfo.meta_a()) != null) && ((diffInfo.meta_a().lines()) > 500)) || (((diffInfo.meta_b()) != null) && ((diffInfo.meta_b().lines()) > 500)); }

private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return "Command was already destroyed"; } java.lang.StringBuilder commandName = new java.lang.StringBuilder(dcmd.getCommandName()); java.lang.String[] args = dcmd.getArguments(); for (int i = 1; i < (args.length); i++) { commandName.append(".").append(args[i]); } return commandName.toString(); }
public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }

@java.lang.Override public void onSuccess(java.lang.Void result) { if ((prefs.syntaxHighlighting()) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption("mode", mode); view.getCmFromSide(DisplaySide.B).setOption("mode", mode); } }); } }
public boolean canDelete() { if (GitRepositoryManager.REF_CONFIG.equals(refName)) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); } }
@org.junit.Test public void dryRunMerge_Conflicts() throws java.lang.Exception { changeInTwoBranches("a.txt", "a.txt"); com.google.gerrit.acceptance.RestResponse r = adminRestSession.get((("/projects/" + (project.get())) + "/branches/master/mergeable?source=branchA")); com.google.gerrit.extensions.common.MergeableInfo m = newGson().fromJson(r.getReader(), com.google.gerrit.extensions.common.MergeableInfo.class); assertThat(m.mergeable).isFalse(); assertThat(m.conflicts).containsExactly("a.txt"); }


@java.lang.Override void clearLine(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne, com.google.gerrit.client.diff.CommentGroup group) { java.util.SortedMap<java.lang.Integer, com.google.gerrit.client.diff.UnifiedCommentGroup> map = map(side); if ((map.get(cmLinePlusOne)) == group) { map.remove(cmLinePlusOne); } }

private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { if (p.startsWith("> ")) { p = p.substring(2); } else if (p.startsWith(" > ")) { p = p.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.text = p.replaceAll("\n\\s?>\\s", "\n").trim(); return block; }






@java.lang.Override protected void onUnload() { super.onUnload(); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); accountsUpdate.create().update("Set General Preferences via API", id, ( u) -> u.setGeneralPreferences(input)); return cache.get(id).getGeneralPreferences(); }

public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, change.getProject(), change); }

private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }



@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accounts.create("other", "other@example.com", "other"); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accounts.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).notTo(sc.starrer, other); }); }


@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.Section databaseSection) { java.lang.String path = databaseSection.get("database"); if (path == null) { path = "db/ReviewDB"; databaseSection.set("database", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die("database.database must be supplied for H2"); } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(("cannot create database.database " + (db.getAbsolutePath()))); } }

@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.LIST_SVC.forAccount(ownerId, new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.AccountDashboardInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.AccountDashboardInfo r) { display(r); } }); }

@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); repo.getRevWalk().parseBody(commit); Log log = buildJson("/repo/+log", com.google.gitiles.LogServletTest.LOG.getType(), ""); assertThat(log.log).hasSize(1); verifyJsonCommit(log.log.get(0), commit); assertThat(log.log.get(0).treeDiff).isNull(); }
@java.lang.Override protected void doUpsert(final java.lang.Iterable<T> instances, final com.google.gwtorm.jdbc.JdbcTransaction txn) throws com.google.gwtorm.client.OrmException { if (!(instances.iterator().hasNext())) { return; } final java.lang.Iterable<T> inserts; try { java.sql.PreparedStatement ps = schema.getConnection().prepareStatement(getUpdateOneSql()); try { inserts = attemptUpdatesAsBatch(ps, instances); } finally { ps.close(); } } catch (java.sql.SQLException e) { throw convertError("update", e); } doInsert(inserts, txn); }

private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try { final com.google.gerrit.reviewdb.server.ReviewDb db = schema.open(); try { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } finally { db.close(); } } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log("cannot query database", e); return null; } }

private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); } com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.toString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, ("Loading file list and inline comments failed: " + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectControl ctl, java.lang.String ref, java.lang.String path, com.google.gerrit.server.project.ProjectControl myCtl) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.AmbiguousObjectException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.IncorrectObjectTypeException { java.lang.String id = (ref + ":") + path; if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { ref = (REFS_DASHBOARDS) + ref; } try { permissionBackend.user(ctl.getUser()).project(ctl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } if (!(org.eclipse.jgit.lib.Repository.isValidRefName(ref))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(ctl.getProject().getNameKey())) { org.eclipse.jgit.lib.ObjectId objId = git.resolve(((ref + ":") + path)); if (objId == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } org.eclipse.jgit.lib.BlobBasedConfig cfg = new org.eclipse.jgit.lib.BlobBasedConfig(null, git, objId); return new com.google.gerrit.server.project.DashboardResource(myCtl, ref, path, cfg, false); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } }
@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(processor.process()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.BODY); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL, processor); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0))); }
com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException, java.lang.InterruptedException { return writer.addDocument(doc); } }); }




@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("[plugin \"somePlugin\"]\nkey1 = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((("project.config: group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "accounts.visibility", value = "SAME_GROUP") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, "user2", 2); assertTrue(reviewers.isEmpty()); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, "user2", 2); assertEquals(1, reviewers.size()); assertEquals("User2", com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name); }

@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("missing reviewer field"); } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId)); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }


public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { com.google.gerrit.reviewdb.client.Account account = accountConfig.getLoadedAccount().get(); return new com.google.gerrit.server.account.AccountState(allUsersName, account, ((extIdNotes.getRevision()) != null ? externalIds.byAccount(account.getId(), extIdNotes.getRevision()) : com.google.common.collect.ImmutableSet.of()), accountConfig.getProjectWatches(), accountConfig.getGeneralPreferences()); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,group=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,user1"); assertQuery("label:CodE-RevieW=need,user"); }
public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { org.eclipse.jgit.lib.CommitBuilder builder = new org.eclipse.jgit.lib.CommitBuilder(); if (migration.write()) { org.eclipse.jgit.lib.ObjectId treeId = storeCommentsInNotes(); if (treeId != null) { builder.setTreeId(treeId); } } batch.write(builder); if ((draftUpdate) != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } }
@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.reviewdb.client.AccountDiffPreference diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if (!(diffPref.getAccountId().equals(getAccountId()))) { throw new java.lang.IllegalArgumentException((((("diffPref.getAccountId() " + (diffPref.getAccountId())) + " doesn't match") + " the accountId of the signed in user ") + (getAccountId()))); } db.accountDiffPreferences().upsert(java.util.Collections.singleton(diffPref)); return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }

@java.lang.Override public java.io.File get() { if (!(ready)) { synchronized(dataDir) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format("Cannot create %s for plugin %s", dataDir.getAbsolutePath(), getName())); } ready = true; } } return dataDir; }


@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = "gerrit-gwtui"; java.lang.String target = "ui_" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = (("//" + pkg) + ":") + target; java.lang.String child = java.lang.String.format("%s/__gwt_binary_%s__", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + ".zip")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.RecompileGwtUiFilter.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.RecompileGwtUiFilter.BuildFailureException e) { displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.RecompileGwtUiFilter.unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, res); }
@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(ReplicationType.GIT_UPDATED); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn("Replication plugin did not finish startup before event", state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Update u : event.getUpdates()) { for (com.googlesource.gerrit.plugins.replication.Destination cfg : configs) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(u.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, u.getRefName(), uri, state); } } } } state.markAllPushTasksScheduled(); }


private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { final org.eclipse.jgit.lib.FileMode oldMode = fileHeader.getOldMode(); final org.eclipse.jgit.lib.FileMode newMode = fileHeader.getNewMode(); if ((oldMode == (org.eclipse.jgit.lib.FileMode.GITLINK)) || (newMode == (org.eclipse.jgit.lib.FileMode.GITLINK))) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, sizeDelta); } }



public void addIncludedGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> includedGroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newIncludedGroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : includedGroupUuids) { boolean isIncluded = groups.isIncluded(db, parentGroupUuid, includedGroupUuid); if (!isIncluded) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newIncludedGroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newIncludedGroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newIncludedGroups); } db.accountGroupById().insert(newIncludedGroups); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newIncludedGroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }
void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (lineLastPublishedBoxMap.containsKey(handle)) { lineActiveBoxMap.put(handle, lineLastPublishedBoxMap.get(handle)); } }
private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if (notes != null) { org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return checkNotNull(getNotes().revisionNoteMap); } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }
private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); atag.setTarget(item.getTarget()); if ((item.getId()) != null) { atag.getElement().setAttribute("id", item.getId()); } m.add(atag); }

@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.gwt.user.client.Window.enableScrolling(false); cmA.setOption("viewportMargin", 10); cmB.setOption("viewportMargin", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }
private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow(((("Failed to get submit type for " + (cd.getId())) + ": ") + (str.errorMessage))); } return str.type; }

private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? "Create group" : "Update group"; java.util.StringJoiner footerJoiner = new java.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }

@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Project already exists"); } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name must match input.name"); } createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (com.google.gerrit.extensions.restapi.BadRequestException | com.google.gerrit.extensions.restapi.UnprocessableEntityException | com.google.gerrit.extensions.restapi.ResourceNotFoundException | com.google.gerrit.common.errors.ProjectCreationFailedException | java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(("Cannot create project: " + (e.getMessage())), e); } }

@java.lang.Override protected void configure() { bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); }
private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { int max = 4 * (com.google.common.math.IntMath.divide(((int) (bin.getContentLength())), 3, java.math.RoundingMode.CEILING)); org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap(max); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }
@java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.AccountExternalId externalId) { return (externalId.isScheme(AccountExternalId.SCHEME_EXTERNAL)) && (externalId.getSchemeRest().startsWith(OAuthWebFilter.GITHUB_EXT_ID)); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } return notes.load().getApprovals().get(psId); }

private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gwtorm.data.TestPerson> all() throws com.google.gwtorm.client.OrmException;
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }



@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); java.lang.String genericQuery = "SELECT * FROM " + (com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn(" "); expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(genericQuery); assertEquals(0, events.size()); tearDown(); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("No user or group matches \"" + who) + "\".")); }
public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); com.google.gwtexpui.safehtml.client.SafeHtml msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(info.getMessage()); msg = msg.linkify(); msg = com.google.gerrit.client.ui.CommentLinkProcessor.apply(msg); msg = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().openElement("p").append(msg).closeElement("p"); msg = msg.replaceAll("\n\n", "</p><p>"); msg = msg.replaceAll("\n", "<br />"); com.google.gwtexpui.safehtml.client.SafeHtml.set(description, msg); }
public void testInheritRead_SingleBranchDeniesUpload() { grant(parent, com.google.gerrit.server.project.READ, registered, "refs/*"); grant(parent, com.google.gerrit.server.project.PUSH, registered, "refs/for/refs/*"); grant(local, com.google.gerrit.server.project.READ, registered, "refs/heads/foobar"); doNotInherit(local, com.google.gerrit.server.project.READ, "refs/heads/foobar"); doNotInherit(local, com.google.gerrit.server.project.PUSH, "refs/for/refs/heads/foobar"); com.google.gerrit.server.project.ProjectControl u = user(); assertTrue("can upload", ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue("can upload refs/heads/master", u.controlForRef("refs/heads/master").canUpload()); assertFalse("deny refs/heads/foobar", u.controlForRef("refs/heads/foobar").canUpload()); }

public void addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { if (!(approvals.isEmpty())) { com.google.gerrit.server.ApprovalsUtil.checkApprovals(approvals, changeCtl); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> cells = new java.util.ArrayList<>(approvals.size()); java.util.Date ts = update.getWhen(); for (java.util.Map.Entry<java.lang.String, java.lang.Short> vote : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(vote.getKey()); cells.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(ps.getId(), ps.getUploader(), lt.getLabelId()), vote.getValue(), ts)); update.putApproval(vote.getKey(), vote.getValue()); } db.patchSetApprovals().insert(cells); } }


@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id)); } else { super.onFailure(err); } }

@org.junit.Test public void postComment() throws java.lang.Exception { java.lang.String file = "file"; java.lang.String contents = "contents"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), "first subject", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); ReviewInput input = new ReviewInput(); ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION, 1, "comment 1"); input.comments = new java.util.HashMap(); input.comments.put(comment.path, Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.get((("/changes/" + (pr.getChangeId())) + "/detail")); assertEquals(HttpStatus.SC_OK, r.getStatusCode()); return newGson().fromJson(r.getReader(), com.google.gerrit.server.change.ChangeJson.ChangeInfo.class); }

private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) { return notesFactory.create(db, change); }


public com.google.gerrit.server.notedb.DraftCommentNotes getDraftComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { if (((draftCommentNotes) == null) || (!(author.equals(draftCommentNotes.getAuthor())))) { draftCommentNotes = new com.google.gerrit.server.notedb.DraftCommentNotes(repoManager, allUsersRepo, getChange(), author); draftCommentNotes.load(); } return draftCommentNotes; }
public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { com.google.gerrit.common.data.GarbageCollectionResult result = new com.google.gerrit.common.data.GarbageCollectionResult(); java.util.Set<com.google.gerrit.reviewdb.client.Project.NameKey> projectsToGc = gcQueue.addAll(projectNames); for (com.google.gerrit.reviewdb.client.Project.NameKey projectName : com.google.common.collect.Sets.difference(com.google.common.collect.Sets.newHashSet(projectNames), projectsToGc)) { result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.GC_ALREADY_SCHEDULED, projectName)); } for (com.google.gerrit.reviewdb.client.Project.NameKey p : projectsToGc) { org.eclipse.jgit.lib.Repository repo = null; try { repo = repoManager.openRepository(p); com.google.gerrit.server.git.GarbageCollection.logGcConfiguration(p, repo); com.google.gerrit.server.git.GarbageCollection.print(writer, (("collecting garbage for \"" + p) + "\":\n")); org.eclipse.jgit.api.GarbageCollectCommand gc = org.eclipse.jgit.api.Git.wrap(repo).gc(); com.google.gerrit.server.git.GarbageCollection.logGcInfo(p, "before:", gc.getStatistics()); gc.setProgressMonitor((writer != null ? new org.eclipse.jgit.lib.TextProgressMonitor(writer) : org.eclipse.jgit.lib.NullProgressMonitor.INSTANCE)); java.util.Properties statistics = gc.call(); com.google.gerrit.server.git.GarbageCollection.logGcInfo(p, "after: ", statistics); com.google.gerrit.server.git.GarbageCollection.print(writer, "done.\n\n"); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { com.google.gerrit.server.git.GarbageCollection.logGcError(writer, p, e); result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.REPOSITORY_NOT_FOUND, p)); } catch (java.lang.Exception e) { com.google.gerrit.server.git.GarbageCollection.logGcError(writer, p, e); result.addError(new com.google.gerrit.common.data.GarbageCollectionResult.Error(GarbageCollectionResult.Error.Type.GC_FAILED, p)); } finally { if (repo != null) { repo.close(); } gcQueue.gcFinished(p); } } return result; }
private java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> getDescriptions(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res, java.util.Set<java.lang.String> branches) throws java.io.IOException { java.util.Map<java.lang.String, com.google.gitiles.RepositoryDescription> descs; try { descs = getAccess(req).listRepositories(branches); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { res.sendError(com.google.gitiles.SC_NOT_FOUND); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotEnabledException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (org.eclipse.jgit.transport.resolver.ServiceNotAuthorizedException e) { res.sendError(com.google.gitiles.SC_UNAUTHORIZED); return null; } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { res.sendError(com.google.gitiles.SC_FORBIDDEN); return null; } catch (java.io.IOException err) { java.lang.String name = urls.getHostName(req); com.google.gitiles.HostIndexServlet.log.warn(("Cannot scan repositories" + (name != null ? " for " + name : "")), err); res.sendError(com.google.gitiles.SC_SERVICE_UNAVAILABLE); return null; } return descs; }
private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }


@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = "addreviewer.maxAllowed", value = "2"), @com.google.gerrit.acceptance.GerritConfig(name = "addreviewer.maxWithoutConfirmation", value = "1") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group("large"); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group("medium"); user("individual 0", "Test0 Last0", largeGroup, mediumGroup); user("individual 1", "Test1 Last1", largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, "test", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }


public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--is-draft", (patchSet.isDraft() ? "true" : "false")); addArg(args, "--change-url", event.change.url); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, "--uploader", getDisplayName(uploader.getAccount())); addArg(args, "--commit", event.patchSet.revision); addArg(args, "--patchset", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }
@java.lang.Override public void run() { final com.google.gerrit.reviewdb.server.ReviewDb db; try { db = database.open(); } catch (com.google.gwtorm.server.OrmException e) { e.printStackTrace(); return; } try { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } finally { db.close(); } }
public abstract com.google.gerrit.server.patch.Text bText();

public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); res.add(toChangeInfo(changes)); } if (!(accounts.isEmpty())) { for (com.google.gerrit.reviewdb.client.Account account : db.get().accounts().get(accounts.keySet())) { com.google.gerrit.server.events.AccountAttribute a = accounts.get(account.getId()); a.name = com.google.common.base.Strings.emptyToNull(account.getFullName()); } } return res; }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "suggest.from", value = "2") public void suggestReviewersNoResult3() throws java.io.IOException, java.lang.Exception, org.eclipse.jgit.api.errors.GitAPIException { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.server.change.SuggestReviewers.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, "u", 6); assertEquals(reviewers.size(), 0); }
protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.reviewdb.client.AccountDiffPreference dp = new com.google.gerrit.reviewdb.client.AccountDiffPreference(s.getDiffPrefs()); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.client.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }
private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { if (((cmd.confirmationMessage) != null) && (!(cmd.confirmationMessage.isEmpty()))) { com.google.gerrit.client.ConfirmationDialog confirmationDialog = new com.google.gerrit.client.ConfirmationDialog(cmd.title, new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(cmd.confirmationMessage), new com.google.gerrit.client.ConfirmationCallback() { @java.lang.Override public void onOk() { postProcessCommand(cmd, b); } }); confirmationDialog.center(); } else { postProcessCommand(cmd, b); } } private void postProcessCommand(final UiCommandDetail cmd, final com.google.gwt.user.client.ui.Button b) { b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught).center(); } @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString msg) { b.setEnabled(true); if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } } }; com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id); if ("PUT".equalsIgnoreCase(cmd.method)) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if ("DELETE".equalsIgnoreCase(cmd.method)) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }




protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FAKE_EMAIL_SENDER_SUBJECT_FACTORY).that(sender); }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else { throw new com.google.gerrit.server.query.QueryParseException(("cannot create query for index: " + p)); } }
void cancel() { canceled = true; }
public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackendConfig config = defaultBackend; if (!(com.google.common.base.Strings.isNullOrEmpty(backendName))) { config = backends.get(backendName); if (config == null) { throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } switch (config.type) { case FS : return fsRepoFactory.create(config); case S3 : return s3RepoFactory.create(config); default : throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.reviewdb.ReviewDb.class).toProvider(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class).in(com.google.inject.servlet.RequestScoped.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.account.AccountResolver.class); bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(GroupControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(ChangeQueryBuilder.Factory.class); factory(ReceiveCommits.Factory.class); factory(MergeOp.Factory.class); factory(AddReviewerSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(PublishComments.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(AbandonedSender.Factory.class); factory(CommentSender.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(RegisterNewEmailSender.Factory.class); }

@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getCurrentPatchSet()).isNull(); org.eclipse.jgit.lib.ObjectId commit = org.eclipse.jgit.lib.ObjectId.fromString("deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"); update = newUpdate(c, changeOwner); update.setCommit(commit); update.commit(); notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(changeOwner.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); incrementPatchSet(c); commit = org.eclipse.jgit.lib.ObjectId.fromString("badc0feebadc0feebadc0feebadc0feebadc0fee"); update = newUpdate(c, otherUser); update.setCommit(commit); update.commit(); notes = newNotes(c); ps = notes.getCurrentPatchSet(); assertThat(ps.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 2)); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps.getId()); assertThat(ps.getRevision().get()).isEqualTo(commit.name()); assertThat(ps.getUploader()).isEqualTo(otherUser.getAccountId()); assertThat(ps.getCreatedOn()).isEqualTo(update.getWhen()); }

private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(newNotesRev, ( m) -> { com.google.common.collect.Collections2.transform(m.values(), ( e) -> e.key()).removeAll(toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }
@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug("Already connected."); return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info("Connect to {}...", properties.getProperty("bootstrap.servers")); producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info("Connection established."); }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); message.setText(Util.M.cherryPickedChangeDefaultMessage(detail.getInfo().getMessage().trim(), detail.getPatchSet().getRevision().get())); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }

private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, categoryRights, category); } }