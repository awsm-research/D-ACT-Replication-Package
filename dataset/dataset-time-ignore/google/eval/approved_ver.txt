private void assertKeys(long keyId, com.google.gerrit.server.git.gpg.TestKey... expected) throws java.lang.Exception { java.util.Set<java.lang.String> expectedStrings = new java.util.TreeSet<>(); for (com.google.gerrit.server.git.gpg.TestKey k : expected) { expectedStrings.add(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(k.getPublicKey())); } org.bouncycastle.openpgp.PGPPublicKeyRingCollection actual = store.get(keyId); java.util.Set<java.lang.String> actualStrings = new java.util.TreeSet<>(); for (org.bouncycastle.openpgp.PGPPublicKeyRing k : actual) { actualStrings.add(com.google.gerrit.server.git.gpg.PublicKeyStore.keyToString(k.getPublicKey())); } assertEquals(expectedStrings, actualStrings); }
private byte[] encrypt(final java.lang.String name, final java.util.Date date, final byte[] rawText) throws java.io.IOException, java.security.NoSuchProviderException, org.bouncycastle.openpgp.PGPException { final byte[] zText = com.google.gerrit.server.contact.EncryptedContactStore.compress(name, date, rawText); final java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); final org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(buf); final java.io.OutputStream cout = cpk().open(aout, zText.length); cout.write(zText); cout.close(); aout.close(); return buf.toByteArray(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.StarredChanges.EmptyInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if ((self.get()) != (rsrc.getUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to add starred change"); } try { dbProvider.get().starredChanges().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.StarredChange(new com.google.gerrit.reviewdb.client.StarredChange.Key(rsrc.getUser().getAccountId(), change.getChange().getId())))); } catch (com.google.gwtorm.server.OrmDuplicateKeyException e) { return com.google.gerrit.extensions.restapi.Response.none(); } return com.google.gerrit.extensions.restapi.Response.none(); }
private java.util.Optional<com.google.gerrit.server.diff.PatchListEntry> getPatchListEntry(org.eclipse.jgit.lib.ObjectReader objectReader, org.eclipse.jgit.diff.DiffFormatter diffFormatter, org.eclipse.jgit.diff.DiffEntry diffEntry, org.eclipse.jgit.revwalk.RevTree treeA, org.eclipse.jgit.revwalk.RevTree treeB, java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) throws java.io.IOException { org.eclipse.jgit.patch.FileHeader fileHeader = toFileHeader(key.getNewId(), diffFormatter, diffEntry); long oldSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getOldMode(), diffEntry.getOldPath(), treeA); long newSize = com.google.gerrit.server.patch.PatchListLoader.getFileSize(objectReader, diffEntry.getNewMode(), diffEntry.getNewPath(), treeB); java.util.Set<org.eclipse.jgit.diff.Edit> contentEditsDueToRebase = com.google.gerrit.server.patch.PatchListLoader.getContentEdits(editsDueToRebase); com.google.gerrit.server.diff.PatchListEntry patchListEntry = com.google.gerrit.server.patch.PatchListLoader.newEntry(treeA, fileHeader, contentEditsDueToRebase, newSize, (newSize - oldSize)); if (com.google.gerrit.server.patch.EditTransformer.toEdits(patchListEntry).allMatch(editsDueToRebase::contains)) { return java.util.Optional.empty(); } return java.util.Optional.of(patchListEntry); }
@com.google.gwt.uibinder.client.UiHandler("save") void onSaveKeyPress(com.google.gwt.event.dom.client.KeyPressEvent e) { if ((e.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { e.stopPropagation(); } }
public static com.google.gerrit.extensions.common.GpgKeyInfo toJson(org.bouncycastle.openpgp.PGPPublicKey key, com.google.gerrit.gpg.CheckResult checkResult) throws java.io.IOException { com.google.gerrit.extensions.common.GpgKeyInfo info = new com.google.gerrit.extensions.common.GpgKeyInfo(); if (key != null) { info.id = com.google.gerrit.gpg.PublicKeyStore.keyIdToString(key.getKeyID()); info.fingerprint = com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()); @java.lang.SuppressWarnings("unchecked") java.util.Iterator<java.lang.String> userIds = key.getUserIDs(); info.userIds = com.google.common.collect.ImmutableList.copyOf(userIds); try (java.io.ByteArrayOutputStream out = new java.io.ByteArrayOutputStream(4096);org.bouncycastle.bcpg.ArmoredOutputStream aout = new org.bouncycastle.bcpg.ArmoredOutputStream(out)) { key.encode(aout); info.key = new java.lang.String(out.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); } } info.status = checkResult.getStatus(); info.problems = checkResult.getProblems(); return info; }
public void update(final com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { try (com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.reviewdb.server.ReviewDbUtil.unwrapDb(schema.open())) { final com.google.gerrit.server.schema.SchemaVersion u = updater.get(); final com.google.gerrit.reviewdb.client.CurrentSchemaVersion version = getSchemaVersion(db); if (version == null) { try { creator.create(db); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Cannot initialize schema", e); } } else { try { u.check(ui, version, db); } catch (java.sql.SQLException e) { throw new com.google.gwtorm.server.OrmException("Cannot upgrade schema", e); } updateSystemConfig(db); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.config.CacheResource rsrc, com.google.gerrit.server.config.FlushCache.Input input) throws com.google.gerrit.extensions.restapi.AuthException { if ((com.google.gerrit.server.config.FlushCache.WEB_SESSIONS.equals(rsrc.getName())) && (!(self.get().getCapabilities().canMaintainServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException(java.lang.String.format("only site maintainers can flush %s", com.google.gerrit.server.config.FlushCache.WEB_SESSIONS)); } rsrc.getCache().invalidateAll(); return com.google.gerrit.extensions.restapi.Response.ok(""); }
void applyDraft(com.google.gerrit.server.notedb.ChangeDraftUpdate draftUpdate) throws com.google.gwtorm.server.OrmException { if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } draftUpdate.insertComment(c); }
@java.lang.Override public AccountGroup.NameKey apply(java.lang.String name) { return new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(name); }
static final void put(com.google.gerrit.client.rpc.RestApi api, com.google.gwt.core.client.JavaScriptObject in, com.google.gwt.core.client.JavaScriptObject cb) { api.put(in, com.google.gerrit.client.api.ActionContext.wrap(cb)); }
void addOps(com.google.gerrit.server.update.BatchUpdate bu, @com.google.gerrit.common.Nullable com.google.gerrit.server.git.MultiProgressMonitor.Task progress) throws java.io.IOException { if (((magicBranch) != null) && ((magicBranch.edit) || (magicBranch.draft))) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ReceiveCommits.ReindexOnlyOp()); if ((prev) != null) { bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(prev)); } bu.addRepoOnlyOp(new com.google.gerrit.server.git.receive.ReceiveCommits.UpdateOneRefOp(cmd)); return; } org.eclipse.jgit.revwalk.RevWalk rw = rp.getRevWalk(); org.eclipse.jgit.revwalk.RevCommit newCommit = rw.parseCommit(newCommitId); rw.parseBody(newCommit); org.eclipse.jgit.revwalk.RevCommit priorCommit = revisions.inverse().get(priorPatchSet); replaceOp = replaceOpFactory.create(projectState, notes.getChange().getDest(), checkMergedInto, priorPatchSet, priorCommit, psId, newCommit, info, groups, magicBranch, rp.getPushCertificate()).setRequestScopePropagator(requestScopePropagator); bu.addOp(notes.getChangeId(), replaceOp); if (progress != null) { bu.addOp(notes.getChangeId(), new com.google.gerrit.server.git.receive.ChangeProgressOp(progress)); } }
public static void patch(java.lang.String token, final com.google.gerrit.reviewdb.Patch.Key id, final int patchIndex, final com.google.gerrit.common.data.PatchSetDetail patchSetDetail, final com.google.gerrit.client.changes.PatchTable patchTable, final java.lang.String panelType) { com.google.gwt.core.client.GWT.runAsync(new com.google.gerrit.client.Dispatcher.AsyncSplit(token) { public void onSuccess() { com.google.gerrit.client.Gerrit.display(token, select()); } private com.google.gerrit.client.ui.Screen select() { if (id != null) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : ""; } if ("".equals(panel)) { return new com.google.gerrit.client.patches.PatchScreen.SideBySide(id, patchIndex, patchSetDetail, patchTable); } else if ("unified".equals(panel)) { return new com.google.gerrit.client.patches.PatchScreen.Unified(id, patchIndex, patchSetDetail, patchTable); } } return new com.google.gerrit.client.NotFoundScreen(); } }); }
void resizeCodeMirror() { if ((cmA) == null) { return; } int h = (((com.google.gerrit.client.Gerrit.getHeaderFooterHeight()) + (reviewed.getOffsetHeight())) + (diffTable.getHeaderHeight())) + 10; cmA.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmA.refresh(); cmB.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - h)); cmB.refresh(); }
private void pushToGroupBranch(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String expectedError) throws java.lang.Exception { grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.CREATE, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); grant(project, ((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), Permission.PUSH, false, com.google.gerrit.acceptance.api.group.REGISTERED_USERS); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = cloneProject(project); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), repo, "Update group config", "group.config", "some content").setParents(com.google.common.collect.ImmutableList.of()).to(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name("foo")))); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } java.lang.String groupRefName = (com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + (name("bar")); createGroupBranch(project, groupRefName); com.google.gerrit.acceptance.GitUtil.fetch(repo, (groupRefName + ":groupRef")); repo.reset("groupRef"); r = pushFactory.create(db, admin.getIdent(), repo, "Update group config", "group.config", "some content").to(groupRefName); if (expectedError != null) { r.assertErrorStatus(expectedError); } else { r.assertOkStatus(); } }
@java.lang.Override public void run() { for (java.nio.file.Path folder : repoFolders) { if (java.nio.file.Files.notExists(folder)) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.debug("Base path {} does not exist", folder); continue; } try { java.nio.file.Files.walkFileTree(folder, new com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.TrashFolderRemover()); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.deleteproject.fs.DeleteTrashFolders.log.warn("Exception while trying to delete trash folders", e); } } }
static boolean onTime(java.lang.String dateTime) { return (com.googlesource.gerrit.plugins.lfs.LfsAuthToken.FORMAT.now().compareTo(dateTime)) <= 0; }
public com.google.gerrit.client.ui.InlineHyperlink getPreviousPatchLink(int index, com.google.gerrit.client.patches.PatchScreen.Type patchType) { int previousPatchIndex = getPreviousPatch(index, PREFERENCE_VALIDATOR); if (previousPatchIndex < 0) { return null; } com.google.gerrit.client.ui.InlineHyperlink link = createLink(previousPatchIndex, patchType, com.google.gwtexpui.safehtml.client.SafeHtml.asis(Util.C.prevPatchLinkIcon()), null); return link; }
public boolean canRead() { return (getProjectControl().getProject().getState().equals(Project.State.READ_ONLY)) || (canWrite()); }
void validateChanges(com.google.gerrit.server.git.ProjectConfig config, java.util.List<com.google.gerrit.common.data.AccessSection> removals, java.util.List<com.google.gerrit.common.data.AccessSection> additions) throws com.google.gerrit.common.errors.InvalidNameException, com.google.gerrit.extensions.restapi.BadRequestException { for (com.google.gerrit.common.data.AccessSection section : com.google.common.collect.Iterables.concat(additions, removals)) { boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(section.getName()); if (isGlobalCapabilities) { if (!(allProjects.equals(config.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot edit global capabilities for projects other than " + (allProjects.get()))); } } } for (com.google.gerrit.common.data.AccessSection section : additions) { java.lang.String name = section.getName(); boolean isGlobalCapabilities = AccessSection.GLOBAL_CAPABILITIES.equals(name); if (!isGlobalCapabilities) { if (!(com.google.gerrit.common.data.AccessSection.isValid(name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid section name"); } com.google.gerrit.server.project.RefPattern.validate(name); } else { for (com.google.gerrit.common.data.Permission p : section.getPermissions()) { if (!(isCapability(p.getName()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException((("Cannot add non-global capability " + (p.getName())) + " to global capabilities")); } } } } }
private com.google.gerrit.common.data.SubmitRecord toSubmitRecord() { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = status; rec.errorMessage = errorMessage; if ((labels) != null) { rec.labels = new java.util.ArrayList(labels.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredLabel label : labels) { com.google.gerrit.common.data.SubmitRecord.Label srl = new com.google.gerrit.common.data.SubmitRecord.Label(); srl.label = label.label; srl.status = label.status; srl.appliedBy = ((label.appliedBy) != null) ? new com.google.gerrit.reviewdb.client.Account.Id(label.appliedBy) : null; rec.labels.add(srl); } } if ((requirements) != null) { rec.requirements = new java.util.ArrayList(requirements.size()); for (com.google.gerrit.server.index.change.ChangeField.StoredSubmitRecord.StoredRequirement requirement : requirements) { com.google.gerrit.common.data.SubmitRequirement sr = new com.google.gerrit.common.data.SubmitRequirement(requirement.shortReason, requirement.fullReason, requirement.label); rec.requirements.add(sr); } } return rec; }
private void abandonAllOpenChangeForDeletedProject(com.google.gerrit.reviewdb.client.Project.NameKey destProject) { try { for (com.google.gerrit.server.query.change.ChangeData cd : internalChangeQuery.byProjectOpen(destProject)) { try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db, destProject, internalUserFactory.create(), ts)) { bu.setRequestId(submissionId); bu.addOp(cd.getId(), new com.google.gerrit.server.git.BatchUpdate.Op() { @java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = ctx.getChange(); if (!(change.getStatus().isOpen())) { return false; } change.setStatus(Change.Status.ABANDONED); com.google.gerrit.reviewdb.client.ChangeMessage msg = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), change.currentPatchSetId(), internalUserFactory.create(), change.getLastUpdatedOn(), ChangeMessagesUtil.TAG_MERGED, "Project was deleted."); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(change.currentPatchSetId()), msg); return true; } }); try { bu.execute(); } catch (com.google.gerrit.server.git.UpdateException | com.google.gerrit.extensions.restapi.RestApiException e) { logWarn(("Cannot abandon changes for deleted project " + destProject), e); } } } } catch (com.google.gwtorm.server.OrmException e) { logWarn(("Cannot abandon changes for deleted project " + destProject), e); } }
private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.reviewdb.client.Change.Status status) { name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), status)); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }
@java.lang.Override public void visit(org.commonmark.node.FencedCodeBlock node) { codeInPre(node.getInfo(), node.getLiteral()); }
@org.junit.Test public void changeMessageWithMultipleParagraphs() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(("Testing paragraph 1\n" + ((("\n" + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3"))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(("Update patch set 1\n" + ((((((("\n" + "Testing paragraph 1\n") + "\n") + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3\n") + "\n") + "Patch-set: 1\n")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.keySet().size()); com.google.gerrit.reviewdb.client.ChangeMessage cm1 = com.google.common.collect.Iterables.getOnlyElement(changeMessages.get(ps1)); assertEquals(("Testing paragraph 1\n" + ((("\n" + "Testing paragraph 2\n") + "\n") + "Testing paragraph 3")), cm1.getMessage()); assertEquals(changeOwner.getAccount().getId(), cm1.getAuthor()); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo delete(com.google.gerrit.extensions.api.changes.DeleteCommentInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { return deleteComment.apply(comment, input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete comment", e); } }
private static org.eclipse.jgit.revwalk.RevCommit lookupCommit(org.eclipse.jgit.lib.Repository repository, com.google.gerrit.reviewdb.client.PatchSet patchSet) throws java.io.IOException { org.eclipse.jgit.lib.ObjectId patchSetCommitId = com.google.gerrit.server.edit.ChangeEditModifier.getPatchSetCommitId(patchSet); try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { return revWalk.parseCommit(patchSetCommitId); } }
@org.junit.Test public void testConnectionTask() throws java.lang.Exception { eventsDb = new com.ericsson.gerrit.plugins.eventslog.SQLClient(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_DRIVER, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_PATH, com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.TEST_OPTIONS); localEventsDb = easyMock.createMock(com.ericsson.gerrit.plugins.eventslog.SQLClient.class); expect(localEventsDb.getAll()).andReturn(new java.util.ArrayList<com.ericsson.gerrit.plugins.eventslog.SQLEntry>()); org.easymock.EasyMock.replay(localEventsDb); store = new com.ericsson.gerrit.plugins.eventslog.SQLStore(pcFactoryMock, userProviderMock, cfgMock, eventsDb, localEventsDb, poolMock); eventsDb.createDBIfNotCreated(); poolMock.scheduleWithFixedDelay(store.new com.ericsson.gerrit.plugins.eventslog.CheckConnectionTask(), 0, 0, java.util.concurrent.TimeUnit.MILLISECONDS); easyMock.verifyAll(); }
private static long getDiskUsage(java.io.File dir) throws java.io.IOException { final org.apache.commons.lang.mutable.MutableLong size = new org.apache.commons.lang.mutable.MutableLong(); java.nio.file.Files.walkFileTree(dir.toPath(), new java.nio.file.SimpleFileVisitor<java.nio.file.Path>() { @java.lang.Override public java.nio.file.FileVisitResult visitFile(java.nio.file.Path path, java.nio.file.attribute.BasicFileAttributes attrs) throws java.io.IOException { if (attrs.isRegularFile()) { size.add(attrs.size()); } return java.nio.file.FileVisitResult.CONTINUE; } }); return size.longValue(); }
public static java.lang.String getSideBySidePreviewDiffUrl(java.lang.String changeId, java.lang.Integer patchSetIdA, int patchSetIdB, java.lang.String fileName) { java.lang.StringBuilder url = new java.lang.StringBuilder(); url.append("/x/"); url.append(com.google.gerrit.plugin.client.Plugin.get().getPluginName()); url.append("/c/"); url.append(changeId); url.append("/"); if (patchSetIdA != null) { url.append(patchSetIdA); url.append(".."); } url.append(patchSetIdB); url.append("/"); url.append(com.google.gwt.http.client.URL.encode(fileName)); return url.toString(); }
@java.lang.Override public void preBranchUpdate(com.google.gerrit.acceptance.rest.change.Arguments args) throws com.google.gerrit.server.validators.ValidationException { java.lang.String master = "refs/heads/master"; assertThat(args.getCommands()).containsKey(master); org.eclipse.jgit.transport.ReceiveCommand cmd = args.getCommands().get(master); org.eclipse.jgit.lib.ObjectId newMasterId = cmd.getNewId(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { assertThat(repo.exactRef(master).getObjectId()).isEqualTo(cmd.getOldId()); assertThat(args.getRef(master)).hasValue(newMasterId); args.getRevWalk().parseBody(args.getRevWalk().parseCommit(newMasterId)); } catch (java.io.IOException e) { throw new java.lang.AssertionError("failed checking new ref value", e); } projectsCalled.add(args.getProject().get()); if ((projectsCalled.size()) == 2) { throw new com.google.gerrit.server.validators.ValidationException("time to fail"); } }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState; try { newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); repo.scanForRepoChanges(); } catch (java.io.IOException e) { newState = recheckUpToDate(repo, e); } if (newState == null) { return super.openHandle(repo, oldId); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { when(permissionBackendMock.currentUser()).thenReturn(withUserMock); when(withUserMock.project(any(Project.NameKey.class))).thenReturn(forProjectMock); doThrow(new com.google.gerrit.server.permissions.PermissionBackendException("")).when(forProjectMock).check(ProjectPermission.ACCESS); setUpClient(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.sql.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); }
@org.junit.Test public void testBranchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = util.user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner("refs/heads/x/*", uDev); assertOwner("refs/heads/x/y", uDev); assertOwner("refs/heads/x/y/*", uDev); assertNotOwner("refs/*", uDev); assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = util.user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner("refs/heads/x/y/*", uFix); assertOwner("refs/heads/x/y/bar", uFix); assertNotOwner("refs/heads/x/*", uFix); assertNotOwner("refs/heads/x/y", uFix); assertNotOwner("refs/*", uFix); assertNotOwner("refs/heads/master", uFix); }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.project.GetAccess.LOG.warn(("NoSuchGroupException; ignoring group " + id), e); group = com.google.gerrit.server.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }
public static com.google.gerrit.extensions.client.RangeSubject assertThat(com.google.gerrit.extensions.client.Comment.Range range) { return assertAbout(com.google.gerrit.extensions.client.RangeSubject::new).that(range); }
private boolean canEditUserName() { return com.google.gerrit.client.Gerrit.info().auth().canEdit(Account.FieldName.USER_NAME); }
@java.lang.Override protected void preDisplay(final com.google.gerrit.client.data.UnifiedPatchDetail r) { display(r); }
@org.junit.Test public void ownerUuidOfNewGroupMustNotBeNull() throws java.lang.Exception { com.google.gerrit.server.group.db.InternalGroupCreation groupCreation = getPrefilledGroupCreationBuilder().build(); com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate = com.google.gerrit.server.group.db.InternalGroupUpdate.builder().setOwnerGroupUUID(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(null)).build(); com.google.gerrit.server.group.db.GroupConfig groupConfig = com.google.gerrit.server.group.db.GroupConfig.createForNewGroup(repository, groupCreation); groupConfig.setGroupUpdate(groupUpdate, com.google.gerrit.reviewdb.client.Account.Id::toString, com.google.gerrit.reviewdb.client.AccountGroup.UUID::get); try (com.google.gerrit.server.git.MetaDataUpdate metaDataUpdate = createMetaDataUpdate()) { expectedException.expectCause(instanceOf(org.eclipse.jgit.errors.ConfigInvalidException.class)); expectedException.expectMessage("Owner UUID of the group users-XYZ"); groupConfig.commit(metaDataUpdate); } }
@java.lang.Override public void execute() { if (fileName.isEmpty()) { file.setFocus(true); } else { content.setFocus(true); } }
@org.junit.Test public void accountEvictionIfUserBranchIsDeleted() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1); com.google.gerrit.reviewdb.client.Project.NameKey allUsers = new com.google.gerrit.reviewdb.client.Project.NameKey(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); org.eclipse.jgit.lib.Repository allUsersRepo = repoManager.createRepository(allUsers); com.google.gerrit.server.account.AccountCache accountCache = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.account.AccountCache.class); accountCache.evict(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountCache); com.google.gerrit.server.index.account.AccountIndexer accountIndexer = org.easymock.EasyMock.createNiceMock(com.google.gerrit.server.index.account.AccountIndexer.class); accountIndexer.index(accountId); org.easymock.EasyMock.expectLastCall(); org.easymock.EasyMock.replay(accountIndexer); try (com.google.gerrit.acceptance.ProjectResetter resetProject = builder(null, accountCache, accountIndexer, null).build(new com.google.gerrit.acceptance.ProjectResetter.Config().reset(project).reset(allUsers))) { createRef(com.google.gerrit.reviewdb.client.RefNames.refsUsers(new com.google.gerrit.reviewdb.client.Account.Id(2))); createRef(allUsersRepo, com.google.gerrit.reviewdb.client.RefNames.refsUsers(accountId)); } org.easymock.EasyMock.verify(accountCache, accountIndexer); }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo format(com.google.gerrit.server.query.change.ChangeData cd, com.google.common.base.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(has(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); com.google.gerrit.server.change.ChangeJson.ChangeInfo res = toChangeInfo(cd, limitToPsId); accountLoader.fill(); return res; }
public static com.google.gerrit.server.account.InternalAccountUpdate.Builder builder() { return new com.google.gerrit.server.account.InternalAccountUpdate.Builder.WrapperThatConvertsNullStringArgsToEmptyStrings(new com.google.gerrit.server.account.AutoValue_InternalAccountUpdate.Builder()); }
private void updateHeadRemoteSsh(org.eclipse.jgit.transport.URIish uri, java.lang.String newHead) { java.lang.String quotedPath = QuotedString.BOURNE.quote(uri.getPath()); java.lang.String cmd = (("cd " + quotedPath) + " && git symbolic-ref HEAD ") + (QuotedString.BOURNE.quote(newHead)); java.io.OutputStream errStream = sshHelper.newErrorBufferStream(); try { sshHelper.executeRemoteSsh(uri, cmd, errStream); } catch (java.io.IOException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.error(java.lang.String.format(("Error updating HEAD of remote repository at %s to %s:\n" + ((" Exception: %s\n" + " Command: %s\n") + " Output: %s")), uri, newHead, e, cmd, errStream), e); } }
@java.lang.Override public void execute() { message.setFocus(true); }
public static com.google.gerrit.server.git.ProjectConfig read(com.google.gerrit.server.git.MetaDataUpdate update) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.ProjectConfig r = new com.google.gerrit.server.git.ProjectConfig(update.getProjectName()); r.load(update); return r; }
@java.lang.Override public com.google.gerrit.common.data.ListBranchesResult call() throws com.google.gerrit.server.project.NoSuchProjectException, java.io.IOException { com.google.gerrit.server.project.ProjectControl pctl = projectControlFactory.validateFor(projectName, ((com.google.gerrit.server.project.ProjectControl.OWNER) | (com.google.gerrit.server.project.ProjectControl.VISIBLE))); try { java.util.List<com.google.gerrit.reviewdb.client.Branch> branches = com.google.common.collect.Lists.newArrayList(); java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branchInfos = listBranchesProvider.get().apply(new com.google.gerrit.server.project.ProjectResource(pctl)); for (com.google.gerrit.server.project.ListBranches.BranchInfo info : branchInfos) { com.google.gerrit.reviewdb.client.Branch b = new com.google.gerrit.reviewdb.client.Branch(new com.google.gerrit.reviewdb.client.Branch.NameKey(projectName, info.ref)); b.setRevision(new com.google.gerrit.reviewdb.client.RevId(info.revision)); b.setCanDelete(com.google.common.base.Objects.firstNonNull(info.canDelete, false)); branches.add(b); } return new com.google.gerrit.common.data.ListBranchesResult(branches, pctl.canAddRefs(), false); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchProjectException(projectName); } }
public com.google.gerrit.client.ui.CommentLinkProcessor getCommentLinkProcessor() { if ((commentLinkProcessor) == null) { commentLinkProcessor = new com.google.gerrit.client.ui.CommentLinkProcessor(info.commentlinks()); } return commentLinkProcessor; }
@org.kohsuke.args4j.Option(name = "-o", usage = "Output options per group") public void addOption(com.google.gerrit.extensions.client.ListGroupsOption o) { options.add(o); }
@org.junit.Test public void canReadAfterRollbackWithAllRefsVisible() throws java.lang.Exception { allow(project, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.REGISTERED_USERS, "refs/*"); org.eclipse.jgit.revwalk.RevCommit parent1 = repo.commit().create(); org.eclipse.jgit.lib.ObjectId id1 = repo.branch("branch1").commit().parent(parent1).create(); com.google.gerrit.server.project.ProjectControl pc = newProjectControl(); org.eclipse.jgit.revwalk.RevWalk rw = repo.getRevWalk(); org.eclipse.jgit.lib.Repository r = repo.getRepository(); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(id1))); repo.branch("branch1").update(parent1); assertTrue(pc.canReadCommit(db, r, rw.parseCommit(parent1))); assertFalse(pc.canReadCommit(db, r, rw.parseCommit(id1))); }
@org.junit.Test public void addReviewerToReviewableChangeInNoteDbBatch() throws java.lang.Exception { addReviewerToReviewableChangeInNoteDb(batch()); }
final void setState(com.google.gerrit.extensions.api.projects.ProjectState s) { setStateRaw(s.name()); }
com.google.gerrit.sshd.CommandMetaData.Mode runsAt() default com.google.gerrit.sshd.CommandMetaData.Mode.MASTER;
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.Ignore.Input input) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((rsrc.isUserOwner()) || (isIgnored(rsrc))) { return com.google.gerrit.extensions.restapi.Response.ok(""); } stars.ignore(self.get().getAccountId(), rsrc.getProject(), rsrc.getChange().getId()); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("failed to ignore change", e); } return null; }
@java.lang.Override public com.google.gwtorm.server.OrmException convertError(final java.lang.String op, final java.lang.String entity, final java.sql.SQLException err) { switch (getSQLStateInt(err)) { case 23505 : return new com.google.gwtorm.server.OrmDuplicateKeyException(entity, err); case 23514 : case 23503 : case 23502 : case 23001 : default : return super.convertError(op, entity, err); } }
@java.lang.Override public boolean dryRun(com.google.gerrit.server.git.CodeReviewCommit mergeTip, com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.IntegrationException { return args.mergeUtil.canCherryPick(args.mergeSorter, args.repo, mergeTip, args.rw, toMerge); }
@java.lang.Override public void move(java.lang.String destination) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.extensions.api.changes.MoveInput in = new com.google.gerrit.extensions.api.changes.MoveInput(); in.destination_branch = destination; move(in); }
@org.junit.Test public void refStateFieldValues() throws java.lang.Exception { com.google.gerrit.server.config.AllUsersName allUsersName = new com.google.gerrit.server.config.AllUsersName(com.google.gerrit.server.config.AllUsersNameProvider.DEFAULT); com.google.gerrit.reviewdb.client.Account account = new com.google.gerrit.reviewdb.client.Account(new com.google.gerrit.reviewdb.client.Account.Id(1), com.google.gerrit.common.TimeUtil.nowTs()); java.lang.String metaId = "0e39795bb25dc914118224995c53c5c36923a461"; account.setMetaId(metaId); java.util.List<java.lang.String> values = toStrings(AccountField.REF_STATE.get(com.google.gerrit.server.account.AccountState.forAccount(allUsersName, account))); assertThat(values).hasSize(1); java.lang.String expectedValue = ((((allUsersName.get()) + ":") + (com.google.gerrit.reviewdb.client.RefNames.refsUsers(account.getId()))) + ":") + metaId; assertThat(com.google.common.collect.Iterables.getOnlyElement(values)).isEqualTo(expectedValue); }
@java.lang.Override public java.util.List<com.google.gerrit.reviewdb.AccountExternalId> byAccountEmail(com.google.gerrit.reviewdb.Account.Id id, java.lang.String email) { java.util.List<com.google.gerrit.reviewdb.AccountExternalId> accIds = byAccountId.get(id).list; java.util.ArrayList<com.google.gerrit.reviewdb.AccountExternalId> out = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountExternalId>(accIds.size()); for (com.google.gerrit.reviewdb.AccountExternalId extId : accIds) { java.lang.String accEmail = extId.getEmailAddress(); if ((accEmail != null) && (accEmail.equals(email))) { out.add(extId); } } return out; }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { createFileCommentEditorOnSideA(); }
@java.lang.SuppressWarnings("unchecked") @java.lang.Override protected void run() throws java.net.MalformedURLException { if ((level) == (com.google.gerrit.sshd.commands.SetLoggingLevelCommand.LevelOption.RESET)) { com.google.gerrit.sshd.commands.SetLoggingLevelCommand.reset(); } else { for (java.util.Enumeration<org.apache.log4j.Logger> logger = org.apache.log4j.LogManager.getCurrentLoggers(); logger.hasMoreElements();) { org.apache.log4j.Logger log = logger.nextElement(); if (((name) == null) || (log.getName().contains(name))) { log.setLevel(org.apache.log4j.Level.toLevel(level.name())); } } } }
@java.lang.Override public java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(repository)) { revWalk.parseHeaders(currentCommit); try (org.eclipse.jgit.treewalk.TreeWalk treeWalk = org.eclipse.jgit.treewalk.TreeWalk.forPath(revWalk.getObjectReader(), currentFilePath, currentCommit.getTree())) { if (treeWalk == null) { return java.util.Collections.emptyList(); } org.eclipse.jgit.dircache.DirCacheEditor.DeletePath deletePathEdit = new org.eclipse.jgit.dircache.DirCacheEditor.DeletePath(currentFilePath); com.google.gerrit.server.edit.tree.AddPath addPathEdit = new com.google.gerrit.server.edit.tree.AddPath(newFilePath, treeWalk.getFileMode(0), treeWalk.getObjectId(0)); return java.util.Arrays.asList(deletePathEdit, addPathEdit); } } }
@java.lang.Override public com.google.gerrit.extensions.common.AccountInfo deleteAssignee() throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.AccountInfo> r = deleteAssignee.apply(change, null); return r.isNone() ? null : r.value(); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete assignee", e); } }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } com.google.gerrit.client.changes.CommentInfo info = getOriginal(); getDiffView().removeDraft(info.side(), ((info.line()) - 1)); removeFromParent(); getSelfWidget().clear(); com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); manager.resizePaddingWidget(); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions() throws com.google.gerrit.extensions.restapi.RestApiException { return revisionActions.apply(revision).value(); }
void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException;
private java.lang.String getChangeUrl(final com.google.gerrit.reviewdb.Change change) { if ((change != null) && ((getGerritUrl()) != null)) { final java.lang.StringBuilder r = new java.lang.StringBuilder(); r.append(getGerritUrl()); r.append(change.getChangeId()); return r.toString(); } return null; }
java.lang.Long getTime(final org.eclipse.jgit.revwalk.RevWalk walk, final org.eclipse.jgit.lib.ObjectId id) throws java.io.IOException { try { return cache.get(id, new java.util.concurrent.Callable<java.lang.Long>() { @java.lang.Override public java.lang.Long call() throws java.io.IOException { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(id); while (o instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (o)); org.eclipse.jgit.lib.PersonIdent ident = tag.getTaggerIdent(); if (ident != null) { return (ident.getWhen().getTime()) / 1000; } o = tag.getObject(); walk.parseHeaders(o); } if ((o.getType()) == (org.eclipse.jgit.lib.Constants.OBJ_COMMIT)) { return java.lang.Long.valueOf(((org.eclipse.jgit.revwalk.RevCommit) (o)).getCommitTime()); } return java.lang.Long.MIN_VALUE; } }); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e); } }
private void getApprovalNames() throws com.google.gwtorm.client.OrmException { optionList = new java.util.ArrayList<com.google.gerrit.server.ssh.commands.CmdOption>(); for (com.google.gerrit.client.data.ApprovalType type : approvalTypes.getApprovalTypes()) { java.lang.String usage = ""; final com.google.gerrit.client.reviewdb.ApprovalCategory category = type.getCategory(); usage = ("Score for " + (category.getName())) + "\n"; for (com.google.gerrit.client.reviewdb.ApprovalCategoryValue v : type.getValues()) { usage += (((java.lang.String.format("%4d", v.getValue())) + " - ") + (v.getName())) + "\n"; } optionList.add(new com.google.gerrit.server.ssh.commands.CmdOption(("--" + (category.getName().toLowerCase().replace(' ', '-'))), usage, category.getId().get(), type.getMin().getValue(), type.getMax().getValue(), category.getName())); } }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "change.strictLabels", value = "true") public void voteOnBehalfOfInvalidLabel() throws java.lang.Exception { allowCodeReviewOnBehalfOf(); java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput in = new com.google.gerrit.extensions.api.changes.ReviewInput().label("Not-A-Label", 5); in.onBehalfOf = user.id.toString(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage("label \"Not-A-Label\" is not a configured label"); gApi.changes().id(changeId).current().review(in); }
public static com.google.gerrit.server.query.change.ChangeData createForTest(com.google.gerrit.reviewdb.client.Change.Id id, int currentPatchSetId) { com.google.gerrit.server.query.change.ChangeData cd = new com.google.gerrit.server.query.change.ChangeData(null, null, null, null, null, null, null, null, null, null, null, null, null, id); cd.currentPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, currentPatchSetId)); return cd; }
private com.google.gerrit.client.diff.PaddingManager.PaddingWidgetWrapper addPaddingWidget(net.codemirror.lib.CodeMirror cm, java.lang.String style, int line, double height, com.google.gwt.dom.client.Style.Unit unit, java.lang.Integer index) { com.google.gwt.dom.client.Element div = com.google.gwt.user.client.DOM.createDiv(); div.setClassName(style); div.getStyle().setHeight(height, unit); net.codemirror.lib.Configuration config = net.codemirror.lib.Configuration.create().set("coverGutter", true).set("above", (line == (-1))); if (index != null) { config = config.set("insertAt", index); } net.codemirror.lib.LineWidget widget = cm.addLineWidget((line == (-1) ? 0 : line), div, config); return new com.google.gerrit.client.diff.PaddingManager.PaddingWidgetWrapper(widget, div); }
@java.lang.Override public void myGroups(final com.google.gwt.user.client.rpc.AsyncCallback<java.util.List<com.google.gerrit.common.data.GroupDetail>> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<java.util.List<com.google.gerrit.common.data.GroupDetail>>() { public java.util.List<com.google.gerrit.common.data.GroupDetail> run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetails = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (com.google.gerrit.reviewdb.AccountGroup group : myGroupsFactory.create().call()) { groupDetails.add(groupDetailFactory.create(group.getId()).call()); } return groupDetails; } }); }
private static <T> void replace(com.google.gerrit.server.plugins.Plugin newPlugin, com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> h, com.google.inject.Binding<T> b) { com.google.gerrit.extensions.registration.RegistrationHandle n = h.replace(b.getKey(), b.getProvider().get()); if (n != null) { newPlugin.add(n); } }
public com.google.gerrit.server.permissions.PermissionBackend.ForChange change(com.google.gerrit.server.query.change.ChangeData cd) { try { return ref(cd.change().getDest()).change(cd); } catch (com.google.gwtorm.server.OrmException e) { return com.google.gerrit.server.permissions.FailedPermissionBackend.change("unavailable", e); } }
@org.junit.Test public void publishEditRest() throws java.lang.Exception { com.google.gerrit.reviewdb.client.PatchSet oldCurrentPatchSet = getCurrentPatchSet(changeId); assertThat(modifier.createEdit(change, oldCurrentPatchSet)).isEqualTo(RefUpdate.Result.NEW); assertThat(modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW))).isEqualTo(RefUpdate.Result.FORCED); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.post(urlPublish()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); edit = editUtil.byChange(change); assertThat(edit.isPresent()).isFalse(); com.google.gerrit.reviewdb.client.PatchSet newCurrentPatchSet = getCurrentPatchSet(changeId); assertThat(oldCurrentPatchSet.getId().equals(newCurrentPatchSet.getId())).isFalse(); }
public static java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> getPossibleStatus(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { java.util.EnumSet<com.google.gerrit.reviewdb.client.Change.Status> s = com.google.gerrit.server.index.IndexRewriteImpl.extractStatus(in); return s != null ? s : java.util.EnumSet.allOf(com.google.gerrit.reviewdb.client.Change.Status.class); }
public static com.google.gerrit.server.account.AccountSshKey createInvalid(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey) { return com.google.gerrit.server.account.AccountSshKey.create(accountId, seq, sshPublicKey, false); }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(change.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.patch.PatchList patchList = getPatchList(); for (com.google.gerrit.server.patch.PatchListEntry p : patchList.getPatches()) { if (Patch.COMMIT_MSG.equals(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append(" ").append(p.getNewName()).append("\n"); } detail.append(java.text.MessageFormat.format(("" + ((("{0,choice,0#0 files|1#1 file|1<{0} files} changed, " + "{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), ") + "{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)") + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.ChangeEmail.log.warn("Cannot format change detail", err); return ""; } }
private boolean canDelete() { if (RefNames.REFS_CONFIG.equals(refName)) { return false; } switch (getUser().getAccessPath()) { case GIT : return (canPushWithForce()) || (canPerform(Permission.DELETE)); case JSON_RPC : case REST_API : case SSH_COMMAND : case UNKNOWN : case WEB_BROWSER : default : return ((((isOwner()) && (!(isBlocked(Permission.PUSH, false, true)))) || (canPushWithForce())) || (canPerform(Permission.DELETE))) || (projectControl.isAdmin()); } }
@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_PreconditionFailed() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put("/groups/Administrators"); assertEquals(HttpStatus.SC_PRECONDITION_FAILED, r.getStatusCode()); }
public void testReplaceOverlappingAtFirstCharFirstMatch() { com.google.gwtexpui.safehtml.client.SafeHtml o = com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.html("abcd"); com.google.gwtexpui.safehtml.client.RegexFindReplace ab1 = new com.google.gwtexpui.safehtml.client.RegexFindReplace("ab", "AB"); com.google.gwtexpui.safehtml.client.RegexFindReplace ab2 = new com.google.gwtexpui.safehtml.client.RegexFindReplace("[^cd][^cd]", "12"); assertEquals("ABcd", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab1, ab2)).asString()); assertEquals("12cd", o.replaceAll(com.google.gwtexpui.safehtml.client.SafeHtml_ReplaceTest.repls(ab2, ab1)).asString()); }
java.lang.String close();
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> is(java.lang.String value) throws com.google.gerrit.server.query.QueryParseException { if ("starred".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsStarredByPredicate(args); } if ("watched".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsWatchedByPredicate(args, false); } if ("visible".equalsIgnoreCase(value)) { return is_visible(); } if ("reviewed".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsReviewedPredicate(); } if ("owner".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.OwnerPredicate(self()); } if ("reviewer".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.ReviewerPredicate(self(), args.allowsDrafts); } if ("mergeable".equalsIgnoreCase(value)) { return new com.google.gerrit.server.query.change.IsMergeablePredicate(com.google.gerrit.server.query.change.ChangeQueryBuilder.schema(args.indexes), args.fillArgs); } try { return status(value); } catch (java.lang.IllegalArgumentException e) { } throw new java.lang.IllegalArgumentException(); }
public final com.google.gerrit.server.mail.ProjectWatch.Watchers getWatchers(com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType type) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = new com.google.gerrit.server.mail.ProjectWatch.Watchers(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> projectWatchers = new java.util.HashSet<com.google.gerrit.reviewdb.client.Account.Id>(); for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(project)) { if (w.isNotify(type)) { projectWatchers.add(w.getAccountId()); add(matching, w); } } for (com.google.gerrit.reviewdb.client.AccountProjectWatch w : args.db.get().accountProjectWatches().byProject(args.allProjectsName)) { if ((!(projectWatchers.contains(w.getAccountId()))) && (w.isNotify(type))) { add(matching, w); } } for (com.google.gerrit.server.project.ProjectState state : projectState.tree()) { for (com.google.gerrit.server.git.NotifyConfig nc : state.getConfig().getNotifyConfigs()) { if (nc.isNotify(type)) { try { add(matching, nc, state.getProject().getNameKey()); } catch (com.google.gerrit.server.query.QueryParseException e) { com.google.gerrit.server.mail.ProjectWatch.log.warn(java.lang.String.format("Project %s has invalid notify %s filter \"%s\"", state.getProject().getName(), nc.getName(), nc.getFilter()), e); } } } } return matching; }
@java.lang.Override public void preDisplay(final com.google.gerrit.common.data.ListBranchesResult result) { if (result.getNoRepository()) { branches.setVisible(false); addPanel.setVisible(false); delBranch.setVisible(false); com.google.gwt.user.client.ui.Label no = new com.google.gwt.user.client.ui.Label(Util.C.errorNoGitRepository()); no.setStyleName(Gerrit.RESOURCES.css().smallHeading()); add(no); } else { enableForm(true); display(result.getBranches()); addPanel.setVisible(result.getCanAdd()); } }
private static void alias(java.lang.String serverMime, java.lang.String toMime) { net.codemirror.mode.ModeInfo mode = net.codemirror.mode.ModeInfo.byMime.get(toMime); if (mode != null) { net.codemirror.mode.ModeInfo.byMime.put(serverMime, mode); } }
@java.lang.Override protected void loadPrev() { Util.LIST_SVC.allQueryPrev(query, pos, pageSize, loadCallback()); }
@org.junit.Test public void testBlockPushDrafts() { com.google.gerrit.server.project.Util.allow(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.REGISTERED_USERS, "refs/for/refs/*"); com.google.gerrit.server.project.Util.block(parent, com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.ANONYMOUS_USERS, "refs/drafts/*"); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertCanUpload("refs/heads/master", u); assertBlocked(com.google.gerrit.server.project.PUSH, "refs/drafts/refs/heads/master", u); }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { hide(); fileTable.registerKeys(); }
private void initAllUsers(org.eclipse.jgit.lib.Repository git) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git); md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(("Initialized Gerrit Code Review " + (com.google.gerrit.common.Version.getVersion()))); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.reviewdb.client.Project project = config.getProject(); project.setDescription("Individual user settings and preferences."); com.google.gerrit.common.data.AccessSection all = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_USER) + "*"), true); all.getPermission(Permission.READ, true).setExclusiveGroup(true); config.commit(md); }
public synchronized com.google.gitiles.BaseServlet getDefaultHandler(com.google.gitiles.GitilesView.Type view) { checkNotInitialized(); switch (view) { case HOST_INDEX : return new com.google.gitiles.HostIndexServlet(renderer, urls, accessFactory); case REPOSITORY_INDEX : return new com.google.gitiles.RepositoryIndexServlet(renderer, accessFactory, timeCache); case REFS : return new com.google.gitiles.RefServlet(renderer, timeCache); case REVISION : return new com.google.gitiles.RevisionServlet(renderer, linkifier()); case PATH : return new com.google.gitiles.PathServlet(renderer, urls); case DIFF : return new com.google.gitiles.DiffServlet(renderer, linkifier()); case LOG : return new com.google.gitiles.LogServlet(renderer, linkifier()); case DESCRIBE : return new com.google.gitiles.DescribeServlet(); case ARCHIVE : return new com.google.gitiles.ArchiveServlet(); default : throw new java.lang.IllegalArgumentException(("Invalid view type: " + view)); } }
public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase("gitweb"))) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("?p=${project}.git;a=summary"); type.setRevision("?p=${project}.git;a=commit;h=${commit}"); type.setBranch("?p=${project}.git;a=shortlog;h=${branch}"); } else if (name.equalsIgnoreCase("cgit")) { type = new com.google.gerrit.common.data.GitWebType(); type.setProject("${project}/summary"); type.setRevision("${project}/commit/?id=${commit}"); type.setBranch("${project}/log/?h=${branch}"); } else if (name.equalsIgnoreCase("custom")) { type = new com.google.gerrit.common.data.GitWebType(); } else { type = null; } return type; }
public java.lang.String getSideBContent() { return cmB.getValue(); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroup> get(java.lang.Iterable<com.google.gerrit.reviewdb.client.AccountGroup.Id> keys) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }
@java.lang.Override void onOneNodeReplicated(java.lang.String project, java.lang.String ref, org.eclipse.jgit.transport.URIish uri, com.googlesource.gerrit.plugins.replication.ReplicationState.RefPushResult status) { }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = parent.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.fullName(id.get())); if (ref == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } permissionBackend.user(user).project(project).ref((ref.isSymbolic() ? ref.getTarget().getName() : ref.getName())).check(RefPermission.READ); return new com.google.gerrit.server.project.BranchResource(parent.getProjectState(), parent.getUser(), ref); } catch (com.google.gerrit.extensions.restapi.AuthException notAllowed) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noRepo) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } }
public static com.google.gerrit.server.diff.PatchListKey againstParentNum(int parentNum, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace ws) { return new com.google.gerrit.server.diff.PatchListKey(parentNum, newId, ws, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }
@java.lang.Override public java.lang.String getAuthorizationUrl() { return oauth.getAuthorizationUrl(oauth.getScope(com.google.common.collect.Sets.newHashSet(config.getDefaultScopes())), null); }
private void deleteSshKeys(final java.util.List<java.lang.String> keys, final com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountSshKey> allKeys = db.accountSshKeys().byAccount(account.getId()); if (keys.contains("ALL")) { db.accountSshKeys().delete(allKeys); } else { java.util.List<com.google.gerrit.reviewdb.client.AccountSshKey> accountKeys = new java.util.ArrayList<com.google.gerrit.reviewdb.client.AccountSshKey>(); for (java.lang.String key : keys) { for (com.google.gerrit.reviewdb.client.AccountSshKey accountSshKey : allKeys) { if ((key.trim().equals(accountSshKey.getSshPublicKey())) || (accountSshKey.getComment().trim().equals(key))) { accountKeys.add(accountSshKey); } } } db.accountSshKeys().delete(accountKeys); } }
@org.junit.Test public void approvalsMultiplePatchSets() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); incrementPatchSet(c); update = newUpdate(c, changeOwner); update.putApproval("Code-Review", ((short) (1))); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps2 = c.currentPatchSetId(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals(); assertThat(psas).hasSize(2); com.google.gerrit.reviewdb.client.PatchSetApproval psa1 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps1)); assertThat(psa1.getPatchSetId()).isEqualTo(ps1); assertThat(psa1.getAccountId().get()).isEqualTo(1); assertThat(psa1.getLabel()).isEqualTo("Code-Review"); assertThat(psa1.getValue()).isEqualTo(((short) (-1))); assertThat(psa1.getGranted()).isEqualTo(truncate(after(c, 2000))); com.google.gerrit.reviewdb.client.PatchSetApproval psa2 = com.google.common.collect.Iterables.getOnlyElement(psas.get(ps2)); assertThat(psa2.getPatchSetId()).isEqualTo(ps2); assertThat(psa2.getAccountId().get()).isEqualTo(1); assertThat(psa2.getLabel()).isEqualTo("Code-Review"); assertThat(psa2.getValue()).isEqualTo(((short) (+1))); assertThat(psa2.getGranted()).isEqualTo(truncate(after(c, 4000))); }
public com.google.gerrit.common.data.GroupDetail run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.server.account.GroupControl control = groupControlFactory.validateFor(groupId); if ((control.getAccountGroup().getType()) != (AccountGroup.Type.INTERNAL)) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NameAlreadyUsedException()); } final com.google.gerrit.reviewdb.Account a = findAccount(nameOrEmail); if (!(a.isActive())) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.InactiveAccountException(a.getFullName())); } if (!(control.canAddMember(a.getId()))) { throw new com.google.gerrit.httpd.rpc.account.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } final com.google.gerrit.reviewdb.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.AccountGroupMember.Key(a.getId(), groupId); com.google.gerrit.reviewdb.AccountGroupMember m = db.accountGroupMembers().get(key); if (m == null) { m = new com.google.gerrit.reviewdb.AccountGroupMember(key); db.accountGroupMembersAudit().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.AccountGroupMemberAudit(m, getAccountId()))); db.accountGroupMembers().insert(java.util.Collections.singleton(m)); accountCache.evict(m.getAccountId()); } return groupDetailFactory.create(groupId).call(); }
public java.lang.String getScope(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { if ((scopes.size()) <= 0) { return ""; } java.lang.StringBuilder out = new java.lang.StringBuilder(); for (com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope scope : scopes) { if ((out.length()) > 0) { out.append(","); } out.append(scope.getValue()); } return out.toString(); }
private void putPreferred(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { for (EmailInfo e : getEmails.apply(rsrc)) { if (e.email.equals(email)) { putPreferred.apply(new com.google.gerrit.server.account.AccountResource.Email(user, email), null); return; } } stderr.println(("preferred email not found: " + email)); }
protected void assertRebase(org.eclipse.jgit.junit.TestRepository<?> testRepo, boolean contentMerge) throws java.io.IOException { org.eclipse.jgit.lib.Repository repo = testRepo.getRepository(); org.eclipse.jgit.revwalk.RevCommit localHead = getHead(repo); org.eclipse.jgit.revwalk.RevCommit remoteHead = getRemoteHead(); assert_().withFailureMessage(java.lang.String.format("%s not equal %s", localHead.name(), remoteHead.name())).that(localHead.getId()).isNotEqualTo(remoteHead.getId()); assertThat(remoteHead.getParentCount()).isEqualTo(1); if (!contentMerge) { assertThat(getLatestRemoteDiff()).isEqualTo(getLatestDiff(repo)); } assertThat(remoteHead.getShortMessage()).isEqualTo(localHead.getShortMessage()); }
private void doAssertApproval(int expected, ChangeInfo c) { LabelInfo cr = c.labels.get("Code-Review"); assertThat(((int) (cr.defaultValue))).isEqualTo((-1)); assertThat(cr.all).hasSize(1); assertThat(cr.all.get(0).name).isEqualTo("Administrator"); assertThat(cr.all.get(0).value.intValue()).isEqualTo(expected); }
private <T extends java.lang.Enum<?>> T getPluginConfigEnum(java.lang.String key, T defaultValue) { return getCurrentPluginConfig().getEnum(key, gerritConfig.getEnum(com.googlesource.gerrit.plugins.its.base.its.ItsConfig.PLUGIN, pluginName, key, defaultValue)); }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChangeInEditMode(revision.getParentKey())); } }
private java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> getDraftRefs(org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.client.Change.Id changeId) throws java.io.IOException { final java.lang.String suffix = "/" + (changeId.get()); return com.google.common.collect.Maps.filterKeys(repo.getRefDatabase().getRefs(RefNames.REFS_DRAFT_COMMENTS), new com.google.common.base.Predicate<java.lang.String>() { @java.lang.Override public boolean apply(java.lang.String input) { return input.endsWith(suffix); } }); }
@java.lang.Override Change.Id parse(java.lang.String id) { return Change.Id.parse(id); }
public com.google.gerrit.server.project.ThemeInfo getTheme() { com.google.gerrit.server.project.ThemeInfo theme = this.theme; if (theme == null) { synchronized(this) { theme = this.theme; if (theme == null) { theme = loadTheme(); this.theme = theme; } } } if (theme == (ThemeInfo.INHERIT)) { com.google.gerrit.server.project.ProjectState parent = com.google.common.collect.Iterables.getFirst(parents(), null); return parent != null ? parent.getTheme() : null; } return theme; }
public boolean isMaxValueRequired() { return requiresMaxValue; }
@com.google.gwtorm.client.Relation(id = 18) com.google.gerrit.reviewdb.AccountPatchReviewAccess accountPatchReviews();
@org.junit.Test public void addReviewerToWipChangeInReviewDbNotifyAllBatch() throws java.lang.Exception { addReviewerToWipChangeInReviewDbNotifyAll(batch()); }
@java.lang.Override protected void onSave(org.eclipse.jgit.lib.CommitBuilder commit) { if (approvals.isEmpty()) { return; } int ps = ((psId) != null) ? psId.get() : change.currentPatchSetId().get(); java.lang.StringBuilder msg = new java.lang.StringBuilder(); if ((subject) != null) { msg.append(subject); } else { msg.append("Update patch set ").append(ps); } msg.append("\n\n"); com.google.gerrit.server.notedb.ChangeUpdate.addFooter(msg, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_PATCH_SET, ps); for (java.util.Map.Entry<java.lang.String, java.lang.Short> e : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(e.getKey()); if (lt != null) { com.google.gerrit.server.notedb.ChangeUpdate.addFooter(msg, com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL, new com.google.gerrit.server.util.LabelVote(lt.getName(), e.getValue()).formatWithEquals()); } } commit.setMessage(msg.toString()); }
public void display(final java.lang.String commitMessage) { java.lang.String commitSummary = ""; java.lang.String commitBody = ""; java.lang.String[] splitCommitMessage = commitMessage.split("\n", 2); commitSummary = splitCommitMessage[0]; commitBody = splitCommitMessage[1]; if (commitBody.trim().isEmpty()) { commitBodyPre.setAttribute("style", "display: none;"); } com.google.gwtexpui.safehtml.client.SafeHtml commitSummaryLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitSummary); commitSummaryLinkified = commitSummaryLinkified.linkify(); commitSummaryLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitSummaryLinkified); com.google.gwtexpui.safehtml.client.SafeHtml commitBodyLinkified = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(commitBody); commitBodyLinkified = commitBodyLinkified.linkify(); commitBodyLinkified = com.google.gerrit.client.ui.CommentLinkProcessor.apply(commitBodyLinkified); commitSummaryPre.setInnerHTML(commitSummaryLinkified.asString()); commitBodyPre.setInnerHTML(commitBodyLinkified.asString()); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithFastForward() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(change.getCommit()); assertThat(head.getParent(0)).isEqualTo(oldHead); assertApproved(change.getChangeId()); assertCurrentRevision(change.getChangeId(), 1, head); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), head.getAuthorIdent()); assertPersonEquals(admin.getIdent(), head.getCommitterIdent()); assertRefUpdatedEvents(oldHead, head); assertChangeMergedEvents(change.getChangeId(), head.name()); }
@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(patchSetId, base, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.FileInfo> files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); setupPrevNextFiles(files, findCurrentFileIndex(files)); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(patchSetId).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }
private java.lang.String urlEdit2() { return ("/changes/" + (change2.getChangeId())) + "/edit/"; }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added, java.sql.Timestamp addedOn) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, addedOn); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = unwrapDb(schema.open())) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, added, e); } }
@java.lang.Override protected void updateRepoImpl(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.server.git.IntegrationException, java.io.IOException { args.rw.parseBody(toMerge); psId = com.google.gerrit.server.ChangeUtil.nextPatchSetId(ctx.getRepository(), toMerge.change().currentPatchSetId()); org.eclipse.jgit.revwalk.RevCommit mergeTip = args.mergeTip.getCurrentTip(); args.rw.parseBody(mergeTip); java.lang.String cherryPickCmtMsg = args.mergeUtil.createCommitMessageOnSubmit(toMerge, mergeTip); org.eclipse.jgit.lib.PersonIdent committer = args.caller.newCommitterIdent(ctx.getWhen(), args.serverIdent.getTimeZone()); try { newCommit = args.mergeUtil.createCherryPickFromCommit(ctx.getInserter(), ctx.getRepository().getConfig(), args.mergeTip.getCurrentTip(), toMerge, committer, cherryPickCmtMsg, args.rw, 0, false); } catch (com.google.gerrit.extensions.restapi.MergeConflictException mce) { toMerge.setStatusCode(CommitMergeStatus.PATH_CONFLICT); return; } catch (com.google.gerrit.server.git.MergeIdenticalTreeException mie) { toMerge.setStatusCode(com.google.gerrit.server.git.strategy.CommitMergeStatus.SKIPPED_IDENTICAL_TREE); return; } newCommit = amendGitlink(newCommit); newCommit.copyFrom(toMerge); newCommit.setPatchsetId(psId); newCommit.setStatusCode(CommitMergeStatus.CLEAN_PICK); args.mergeTip.moveTipTo(newCommit, newCommit); args.commitStatus.put(newCommit); ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, psId.toRefName())); patchSetInfo = args.patchSetInfoFactory.get(ctx.getRevWalk(), newCommit, psId); }
private void display(com.googlesource.gerrit.plugins.imagare.client.ConfigInfo info) { com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setStyleName("imagare-project-panel"); p.add(new com.google.gwt.user.client.ui.Label("Project:")); projectBox = new com.google.gwt.user.client.ui.TextBox(); projectBox.setValue(info.getDefaultProject()); p.add(projectBox); add(p); com.google.gwt.user.client.ui.HorizontalPanel buttons = new com.google.gwt.user.client.ui.HorizontalPanel(); add(buttons); saveButton = new com.google.gwt.user.client.ui.Button("Save"); saveButton.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doSave(); } }); buttons.add(saveButton); saveButton.setEnabled(false); new com.googlesource.gerrit.plugins.imagare.client.OnEditEnabler(saveButton, projectBox); projectBox.setFocus(true); saveButton.setEnabled(false); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException { if (!((repoManager) instanceof com.google.gerrit.server.git.LocalDiskRepositoryManager)) { return; } ui.message("listing all repositories ..."); java.util.SortedSet<com.google.gerrit.reviewdb.client.Project.NameKey> repoList = repoManager.list(); ui.message("done"); ui.message(java.lang.String.format("creating reflog files for %s branches ...", RefNames.REFS_CONFIG)); java.util.concurrent.ExecutorService executorPool = createExecutor(ui, repoList.size()); java.util.List<java.util.concurrent.Future<java.lang.Void>> futures = new java.util.ArrayList<>(); for (com.google.gerrit.reviewdb.client.Project.NameKey project : repoList) { java.util.concurrent.Callable<java.lang.Void> callable = new com.google.gerrit.server.schema.Schema_106.ReflogCreator(project); futures.add(executorPool.submit(callable)); } executorPool.shutdown(); try { for (java.util.concurrent.Future<java.lang.Void> future : futures) { try { future.get(); } catch (java.util.concurrent.ExecutionException e) { ui.message(e.getCause().getMessage()); } } ui.message("done"); } catch (java.lang.InterruptedException ex) { java.lang.String msg = java.lang.String.format(("Migration step 106 was interrupted. " + "Reflog created in %d of %d repositories only."), com.google.gerrit.server.schema.Schema_106.countDone(futures), repoList.size()); ui.message(msg); } }
@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder sb = new java.lang.StringBuilder("Patch Set ").append(psId.get()).append(": Cherry Picked").append("\n\n").append("This patchset was cherry picked to branch ").append(destBranch).append(" as commit ").append(cherryPickCommit.name()); com.google.gerrit.reviewdb.client.ChangeMessage changeMessage = com.google.gerrit.server.ChangeMessagesUtil.newMessage(ctx.getDb(), psId, ctx.getUser(), ctx.getWhen(), sb.toString(), ChangeMessagesUtil.TAG_CHERRY_PICK_CHANGE); cmUtil.addChangeMessage(ctx.getDb(), ctx.getUpdate(psId), changeMessage); return true; }
@java.lang.Override public void index(com.google.gerrit.reviewdb.client.Project.NameKey nameKey) throws java.io.IOException { for (com.google.gerrit.index.Index<?, com.google.gerrit.server.project.ProjectState> i : getWriteIndexes()) { i.replace(projectCache.get(nameKey)); } fireProjectIndexedEvent(nameKey.get()); }
@java.lang.Override public void clearReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement(("DELETE FROM account_patch_reviews " + "WHERE change_id = ? AND patch_set_id = ?"))) { stmt.setInt(1, psId.getParentKey().get()); stmt.setInt(2, psId.get()); stmt.executeUpdate(); } catch (java.sql.SQLException e) { throw convertError("delete", e); } }
@org.junit.Test public void testFailureAfterMaxTries() throws java.io.IOException { com.ericsson.gerrit.plugins.highavailability.Configuration cfg = mock(com.ericsson.gerrit.plugins.highavailability.Configuration.class); when(cfg.getMaxTries()).thenReturn(3); when(cfg.getRetryInterval()).thenReturn(10); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession httpSession = mock(com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpSession.class); when(httpSession.post(anyString(), anyString())).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")).thenReturn(new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.HttpResponseHandler.HttpResult(false, "Error")); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder forwarder = new com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder(httpSession, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarderTest.PLUGIN_NAME, cfg); assertThat(forwarder.evict(Constants.PROJECT_LIST, new java.lang.Object())).isFalse(); }
final void onResult(final java.lang.Object result) { cancel(); final R obj; try { obj = serializer.fromJson(result); } catch (java.lang.RuntimeException e) { callback.onFailure(e); return; } callback.onSuccess(obj); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ProjectMap result) { if ((!(firstPopupLoad)) && (!(popup.isShowing()))) { query = null; } else if ((query) == (this)) { query = null; showMap(result); } else { query.run(); } }
static javax.servlet.ServletContext create(com.google.gerrit.server.plugins.Plugin plugin, java.lang.String contextPath) { return ((javax.servlet.ServletContext) (java.lang.reflect.Proxy.newProxyInstance(com.google.gerrit.httpd.plugins.PluginServletContext.class.getClassLoader(), new java.lang.Class[]{ javax.servlet.ServletContext.class, com.google.gerrit.httpd.plugins.PluginServletContext.API.class }, new com.google.gerrit.httpd.plugins.PluginServletContext.Handler(plugin, contextPath)))); }
boolean canForceEditTopicName() { return canPerform(Permission.EDIT_TOPIC_NAME, false, true); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString result) { cb.onSuccess(result.asString()); }
public boolean canCreate(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; boolean admin; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); admin = getCurrentUser().getCapabilities().canAdministrateServer(); break; default : owner = false; admin = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { if (admin || (owner && (!(isBlocked(Permission.CREATE))))) { return true; } else if (!(canPerform(Permission.CREATE))) { return false; } else if (canUpdate()) { return true; } else if (isMergedIntoBranchOrTag(db, rw, ((org.eclipse.jgit.revwalk.RevCommit) (object)))) { return true; } return false; } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if (getCurrentUser().isIdentifiedUser()) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains("-----BEGIN PGP SIGNATURE-----\n")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<com.google.gerrit.client.rpc.NativeString> fc) { content = fc; if (prefs.syntaxHighlighting()) { injectMode(fc.getContentType(), modeCallback); } else { modeCallback.onSuccess(null); } }
private static boolean sameRestOfParents(org.eclipse.jgit.revwalk.RevCommit prior, org.eclipse.jgit.revwalk.RevCommit next) { java.util.Set<org.eclipse.jgit.revwalk.RevCommit> priorRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.allExceptFirstParent(prior.getParents()); java.util.Set<org.eclipse.jgit.revwalk.RevCommit> nextRestParents = com.google.gerrit.server.change.ChangeKindCacheImpl.Loader.allExceptFirstParent(next.getParents()); return priorRestParents.equals(nextRestParents); }
void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug("Loading .gitmodules of {} for project {}", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(("Cannot open branch " + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = subSecParserFactory.create(bbc, thisServer, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(("Could not read .gitmodule file of super project: " + (branch.getParentKey())), e); } }
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; } if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.account.AccountApi.self().view("preferences").get(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountPreferencesInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountPreferencesInfo prefs) { com.google.gerrit.client.Gerrit.myPrefs = prefs; onModuleLoad2(result); } }); } else { com.google.gerrit.client.Gerrit.myPrefs = com.google.gerrit.client.info.AccountPreferencesInfo.createDefault(); onModuleLoad2(result); } }
@java.lang.Override public com.google.gerrit.server.project.FileResource parse(com.google.gerrit.server.project.CommitResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { if (com.google.gerrit.reviewdb.client.Patch.isMagic(id.get())) { return new com.google.gerrit.server.project.FileResource(parent.getProjectState(), parent.getCommit(), id.get()); } return com.google.gerrit.server.project.FileResource.create(repoManager, parent.getProjectState(), parent.getCommit(), id.get()); }
private void assertCanEdit(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { if (!(currentUser.get().isIdentifiedUser())) { throw new com.google.gerrit.extensions.restapi.AuthException("Authentication required"); } try { permissionBackend.user(currentUser).database(reviewDb).change(notes).check(ChangePermission.ADD_PATCH_SET); projectCache.checkedGet(notes.getProjectName()).checkStatePermitsWrite(); } catch (com.google.gerrit.extensions.restapi.AuthException denied) { throw new com.google.gerrit.extensions.restapi.AuthException("edit not permitted", denied); } }
private RefUpdate.Result update(org.eclipse.jgit.lib.Repository repo, com.google.gerrit.server.IdentifiedUser me, java.lang.String refName, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId oldObjectId, org.eclipse.jgit.lib.ObjectId newEdit) throws java.io.IOException { org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setExpectedOldObjectId(oldObjectId); ru.setNewObjectId(newEdit); ru.setRefLogIdent(getRefLogIdent(me)); ru.setRefLogMessage("inline edit (amend)", false); ru.setForceUpdate(true); org.eclipse.jgit.lib.RefUpdate.Result res = ru.update(rw); if ((res != (RefUpdate.Result.NEW)) && (res != (RefUpdate.Result.FORCED))) { throw new java.io.IOException(("update failed: " + ru)); } return res; }
public static com.google.gerrit.extensions.api.projects.TagInfo createTagInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.WebLinks links) throws java.io.IOException, org.eclipse.jgit.errors.MissingObjectException { org.eclipse.jgit.revwalk.RevObject object = rw.parseAny(ref.getObjectId()); java.lang.Boolean canDelete = (perm.testOrFalse(RefPermission.DELETE)) ? true : null; java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> webLinks = links.getTagLinks(projectName.get(), ref.getName()); if (object instanceof org.eclipse.jgit.revwalk.RevTag) { org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), tag.getName(), tag.getObject().getName(), tag.getFullMessage().trim(), (tagger != null ? com.google.gerrit.server.CommonConverters.toGitPerson(tagger) : null), canDelete, (webLinks.isEmpty() ? null : webLinks), (tagger != null ? new java.sql.Timestamp(tagger.getWhen().getTime()) : null)); } java.sql.Timestamp timestamp = (object instanceof org.eclipse.jgit.revwalk.RevCommit) ? new java.sql.Timestamp(((org.eclipse.jgit.revwalk.RevCommit) (object)).getCommitterIdent().getWhen().getTime()) : null; return new com.google.gerrit.extensions.api.projects.TagInfo(ref.getName(), ref.getObjectId().getName(), canDelete, (webLinks.isEmpty() ? null : webLinks), timestamp); }
private java.util.Optional<com.google.gerrit.server.query.change.ChangeData.ChangedLines> computeChangedLines() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change c = change(); if (c == null) { return java.util.Optional.empty(); } com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); if (ps == null) { return java.util.Optional.empty(); } java.util.Optional<com.google.gerrit.server.patch.DiffSummary> ds = getDiffSummary(c, ps); if (ds.isPresent()) { return java.util.Optional.of(ds.get().getChangedLines()); } return java.util.Optional.empty(); }
@java.lang.Override public com.google.gerrit.server.project.ChildProjectResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource p = projectsCollection.parse(TopLevelResource.INSTANCE, id); for (com.google.gerrit.server.project.ProjectState pp : p.getProjectState().parents()) { if (parent.getNameKey().equals(pp.getProject().getNameKey())) { return new com.google.gerrit.server.project.ChildProjectResource(parent, p.getProjectState()); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> extractFrom(PatchSetAttribute patchSetAttribute) { java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> properties = com.google.common.collect.Sets.newHashSet(); properties.add(propertyFactory.create("revision", patchSetAttribute.revision)); properties.add(propertyFactory.create("patch-set-number", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("patchSetNumber", java.lang.String.valueOf(patchSetAttribute.number))); properties.add(propertyFactory.create("ref", patchSetAttribute.ref)); properties.add(propertyFactory.create("created-on", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("createdOn", patchSetAttribute.createdOn.toString())); properties.add(propertyFactory.create("parents", patchSetAttribute.parents.toString())); properties.add(propertyFactory.create("deletions", java.lang.Integer.toString(patchSetAttribute.sizeDeletions))); properties.add(propertyFactory.create("insertions", java.lang.Integer.toString(patchSetAttribute.sizeInsertions))); properties.addAll(extractFrom(patchSetAttribute.uploader, "uploader")); properties.addAll(extractFrom(patchSetAttribute.author, "author")); return properties; }
private void replicateProjectLocally(final org.eclipse.jgit.transport.URIish replicateURI, final java.lang.String head) { try { final org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.storage.file.FileRepository(replicateURI.getPath()); try { repo.create(true); final org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(head); } finally { repo.close(); } } catch (java.io.IOException e) { com.google.gerrit.server.git.PushReplication.log.error(("Failed to replicate project locally: " + (replicateURI.getPath()))); } }
private org.eclipse.jgit.revwalk.RevCommit commit(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, java.lang.String refName, org.eclipse.jgit.lib.ObjectId tree, org.eclipse.jgit.revwalk.RevCommit merge) throws java.io.IOException { rw.parseHeaders(merge); org.eclipse.jgit.lib.PersonIdent ident = new org.eclipse.jgit.lib.PersonIdent(gerritIdent, merge.getCommitterIdent().getWhen(), gerritIdent.getTimeZone()); org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setAuthor(ident); cb.setCommitter(ident); cb.setTreeId(tree); cb.setMessage((("Auto-merge of " + (merge.name())) + '\n')); for (org.eclipse.jgit.revwalk.RevCommit p : merge.getParents()) { cb.addParentId(p); } org.eclipse.jgit.lib.ObjectId commitId; try (org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { commitId = ins.insert(cb); ins.flush(); } org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(refName); ru.setNewObjectId(commitId); ru.disableRefLog(); ru.forceUpdate(); return rw.parseCommit(commitId); }
@java.lang.Override protected void setupSoyContext() { super.setupSoyContext(); soyContext.put("changeId", change.getKey().get()); soyContext.put("coverLetter", getCoverLetter()); soyContext.put("fromName", getNameFor(fromId)); soyContextEmailData.put("unifiedDiff", getUnifiedDiff()); soyContextEmailData.put("changeDetail", getChangeDetail()); soyContextEmailData.put("changeUrl", getChangeUrl()); soyContextEmailData.put("includeDiff", getIncludeDiff()); java.util.Map<java.lang.String, java.lang.String> changeData = new java.util.HashMap<>(); changeData.put("subject", change.getSubject()); changeData.put("originalSubject", change.getOriginalSubject()); changeData.put("ownerEmail", getNameEmailFor(change.getOwner())); soyContext.put("change", changeData); java.util.Map<java.lang.String, java.lang.Object> patchSetData = new java.util.HashMap<>(); patchSetData.put("patchSetId", patchSet.getPatchSetId()); patchSetData.put("refName", patchSet.getRefName()); soyContext.put("patchSet", patchSetData); }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); setListIdHeader(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); modules.add(com.google.gerrit.httpd.RequestContextFilter.module()); modules.add(com.google.gerrit.httpd.AllRequestFilter.module()); modules.add(com.google.gerrit.httpd.RequestMetricsFilter.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.inject.Module.class)); if ((sshInjector) != null) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } modules.add(com.google.gerrit.httpd.H2CacheBasedWebSession.module()); modules.add(new com.google.gerrit.httpd.plugins.HttpPluginModule()); com.google.gerrit.server.config.AuthConfig authConfig = cfgInjector.getInstance(com.google.gerrit.server.config.AuthConfig.class); if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OPENID)) { modules.add(new com.google.gerrit.httpd.auth.openid.OpenIdModule()); } else if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.client.AuthType.OAUTH)) { modules.add(new com.google.gerrit.httpd.auth.oauth.OAuthModule()); } modules.add(sysInjector.getInstance(com.google.inject.Module.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.raw.StaticModule.class)); return sysInjector.createChildInjector(modules); }
@org.junit.Test public void submitWithMergeIfFastForwardPossible() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange(); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit headAfterSubmit = getRemoteHead(); assertThat(headAfterSubmit.getParentCount()).isEqualTo(2); assertThat(headAfterSubmit.getParent(0)).isEqualTo(initialHead); assertThat(headAfterSubmit.getParent(1)).isEqualTo(change.getCommit()); assertSubmitter(change.getChangeId(), 1); assertPersonEquals(admin.getIdent(), headAfterSubmit.getAuthorIdent()); assertPersonEquals(serverIdent.get(), headAfterSubmit.getCommitterIdent()); assertRefUpdatedEvents(initialHead, headAfterSubmit); assertChangeMergedEvents(change.getChangeId(), headAfterSubmit.name()); }
public java.lang.String toProject(final com.google.gerrit.reviewdb.Project.NameKey project) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type.getProject()); final java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", encode(project.get())); return (baseUrl) + (pattern.replace(p)); }
private void display(com.google.gerrit.client.diff.DiffInfo diff) { net.codemirror.lib.Configuration cfg = net.codemirror.lib.Configuration.create().set("readOnly", true).set("lineNumbers", true).set("tabSize", 2).set("mode", com.google.gerrit.client.diff.CodeMirrorDemo.getContentType(diff.meta_b())).set("value", diff.text_b()); cm = net.codemirror.lib.CodeMirror.create(editorContainer.getElement(), cfg); cm.setWidth("100%"); cm.setHeight(((com.google.gwt.user.client.Window.getClientHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { cm.setHeight(((event.getHeight()) - (com.google.gerrit.client.diff.CodeMirrorDemo.HEADER_FOOTER))); cm.refresh(); } }); }
private void setStatus(com.google.gerrit.server.notedb.ChangeUpdate update) { java.lang.String msg = message.getMessage(); if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_ABANDONED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.ABANDONED); noteDbChange.setStatus(Change.Status.ABANDONED); return; } if (com.google.gerrit.server.notedb.ChangeRebuilderImpl.ChangeMessageEvent.STATUS_RESTORED_REGEXP.matcher(msg).matches()) { update.setStatus(Change.Status.NEW); noteDbChange.setStatus(Change.Status.NEW); } }
@java.lang.Override protected void onInitUI() { super.onInitUI(); initName(); initOwner(); initDescription(); initGroupOptions(); initGroupType(); initMemberList(); initExternal(); }
private int search(final java.lang.String fileName) { com.google.gerrit.server.patch.PatchListEntry want = com.google.gerrit.server.patch.PatchListEntry.empty(fileName); return java.util.Arrays.binarySearch(patches, 0, patches.length, want, com.google.gerrit.server.patch.PatchList.PATCH_CMP); }
boolean execute() { for (; ;) { try { (execCnt)++; tryOnce(); return true; } catch (com.ericsson.gerrit.plugins.highavailability.forwarder.rest.ForwardingException e) { if (!(e.isRecoverable())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error("Failed to {}", name, e); return false; } if ((execCnt) >= (cfg.getMaxTries())) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error("Failed to {}, after {} tries", name, cfg.getMaxTries()); return false; } logRetry(e); try { java.lang.Thread.sleep(cfg.getRetryInterval()); } catch (java.lang.InterruptedException ie) { com.ericsson.gerrit.plugins.highavailability.forwarder.rest.RestForwarder.log.error("{} was interrupted, giving up", name, ie); java.lang.Thread.currentThread().interrupt(); return false; } } } }
public static void checkSubmitRule(com.google.gerrit.server.query.change.ChangeData cd, boolean allowClosed) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet patchSet = cd.currentPatchSet(); if (patchSet == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("missing current patch set for change " + (cd.getId()))); } java.util.List<com.google.gerrit.common.data.SubmitRecord> results = com.google.gerrit.server.git.MergeOp.getSubmitRecords(cd, allowClosed); if (com.google.gerrit.common.data.SubmitRecord.allRecordsOK(results)) { return; } else if (results.isEmpty()) { throw new java.lang.IllegalStateException(java.lang.String.format("SubmitRuleEvaluator.evaluate for change %s returned empty list for %s in %s", cd.getId(), patchSet.getId(), cd.change().getProject().get())); } for (com.google.gerrit.common.data.SubmitRecord record : results) { switch (record.status) { case OK : break; case CLOSED : throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is closed"); case RULE_ERROR : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(("submit rule error: " + (record.errorMessage))); case NOT_READY : throw new com.google.gerrit.extensions.restapi.ResourceConflictException(com.google.gerrit.server.git.MergeOp.describeLabels(cd, record.labels)); case FORCED : default : throw new java.lang.IllegalStateException(java.lang.String.format("Unexpected SubmitRecord status %s for %s in %s", record.status, patchSet.getId().getId(), cd.change().getProject().get())); } } throw new java.lang.IllegalStateException(); }
@org.junit.Test public void listTagsOfNonVisibleProjectWithApi() throws java.lang.Exception { blockRead(project, "refs/*"); setApiUser(user); exception.expect(com.google.gerrit.extensions.restapi.ResourceNotFoundException.class); gApi.projects().name(project.get()).tags().get(); }
private void display(java.util.Map<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> jobs) { int row = 0; int column = 1; com.google.gwt.user.client.ui.Grid grid = new com.google.gwt.user.client.ui.Grid(row, column); for (java.util.Map.Entry<java.lang.String, com.googlesource.gerrit.plugins.verifystatus.client.VerificationInfo> job : jobs.entrySet()) { grid.insertRow(row); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); short vote = job.getValue().value(); if (vote > 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.greenCheck())); } else if (vote < 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.redNot())); } else if (vote == 0) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.warning())); } p.add(new com.google.gwt.user.client.ui.InlineHyperlink(job.getKey(), job.getValue().url())); p.add(new com.google.gwt.user.client.ui.InlineLabel(((" (" + (job.getValue().duration())) + ")"))); if (job.getValue().abstain()) { p.add(new com.google.gwt.user.client.ui.Image(VerifyStatusPlugin.RESOURCES.info())); } grid.setWidget(row, 0, p); row++; } add(grid); }
com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo getLineRegionInfoFromCmLine(int cmLine) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(DisplaySide.A, 0, 0, 0, cmLine, false), getDiffChunkComparatorCmLine()); if (res >= 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get(res); return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(info.start, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); int lineOnInfoSide = ((info.start) + cmLine) - (info.cmLine); if (lineOnInfoSide > (info.end)) { if ((info.side) == (DisplaySide.A)) { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineMapper.lineOnOther(DisplaySide.A, lineOnInfoSide).getLine(), com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(lineOnInfoSide, com.google.gerrit.client.diff.UnifiedChunkManager.displaySideToRegionType(info.side)); } } else { return new com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo(cmLine, com.google.gerrit.client.diff.UnifiedChunkManager.RegionType.COMMON); } } }
public void replace(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.ExternalId.Key> toDelete, java.util.Collection<com.google.gerrit.server.account.ExternalId> toAdd) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.ExternalIdsUpdate.checkSameAccount(toAdd, accountId); db.accountExternalIds().deleteKeys(Key.toAccountExternalIdKeys(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toAdd)); updateNoteMap(( o) -> { for (com.google.gerrit.server.account.ExternalId.Key extIdKey : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(o.rw(), o.noteMap(), accountId, extIdKey); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(o.rw(), o.ins(), o.noteMap(), extId); } }); }
public com.google.gerrit.reviewdb.client.PatchSet getCurrentPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change.currentPatchSetId(); return checkNotNull(patchSets.get(psId), "missing current patch set %s", psId.get()); }
private com.google.gerrit.common.data.GroupList createGroupList(final java.util.List<com.google.gerrit.reviewdb.AccountGroup> groups) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.util.List<com.google.gerrit.common.data.GroupDetail> groupDetailList = new java.util.ArrayList<com.google.gerrit.common.data.GroupDetail>(); for (final com.google.gerrit.reviewdb.AccountGroup group : groups) { groupDetailList.add(groupDetailFactory.create(group.getId()).call()); } return new com.google.gerrit.common.data.GroupList(groupDetailList, identifiedUser.get().getCapabilities().canCreateGroup()); }
private java.lang.String createChangeWithReview() throws java.lang.Exception { java.lang.String file = "gerrit-server/test.txt"; java.lang.String contents = "contents \nlorem \nipsum \nlorem"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, "first subject", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/for/master"); java.lang.String changeId = r.getChangeId(); ReviewInput input = new ReviewInput(); input.message = "I have two comments"; input.comments = new java.util.HashMap(); CommentInput c1 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 0, "comment on file"); CommentInput c2 = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newComment(file, Side.REVISION, 2, "inline comment"); input.comments.put(c1.path, ImmutableList.of(c1, c2)); revision(r).review(input); return changeId; }
@org.junit.Test public void byStatus() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testutil.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChangeWithStatus(repo, Change.Status.NEW); com.google.gerrit.reviewdb.client.Change change1 = insert(ins1); com.google.gerrit.server.change.ChangeInserter ins2 = newChangeWithStatus(repo, Change.Status.MERGED); com.google.gerrit.reviewdb.client.Change change2 = insert(ins2); assertQuery("status:new", change1); assertQuery("status:NEW", change1); assertQuery("is:new", change1); assertQuery("status:merged", change2); assertQuery("is:merged", change2); }
protected org.eclipse.jgit.junit.TestRepository<?> createProjectWithPush(java.lang.String name, @com.google.gerrit.common.Nullable com.google.gerrit.reviewdb.client.Project.NameKey parent) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey project = createProject(name, parent); grant(Permission.PUSH, project, "refs/heads/*"); grant(Permission.SUBMIT, project, "refs/for/refs/heads/*"); return cloneProject(project); }
@org.junit.Test public void noCopyMaxScoreOnRework() throws java.lang.Exception { java.lang.String subject = "test commit"; java.lang.String file = "a.txt"; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, user.getIdent(), subject, file, "first contents"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); revision(r).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); assertApproval(r, 2); push = pushFactory.create(db, user.getIdent(), subject, file, "second contents", r.getChangeId()); r = push.to(git, "refs/for/master"); assertApproval(r, 0); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProjectState().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountCache.maybeGet(id).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.googlesource.gerrit.plugins.serviceuser.ServiceUserResource rsrc, com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if (input == null) { input = new com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.Input(); } input.httpPassword = com.google.common.base.Strings.emptyToNull(input.httpPassword); java.lang.Boolean httpPasswordAllowed = getConfig.get().apply(new com.google.gerrit.server.config.ConfigResource()).allowHttpPassword; if ((input.generate) || ((input.httpPassword) == null)) { if (((httpPasswordAllowed == null) || (!httpPasswordAllowed)) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("not allowed to generate HTTP password"); } } else { if (!(self.get().getCapabilities().canAdministrateServer())) { throw new com.google.gerrit.extensions.restapi.AuthException(("not allowed to set HTTP password directly, " + "requires the Administrate Server permission")); } } java.lang.String newPassword = (input.generate) ? com.googlesource.gerrit.plugins.serviceuser.PutHttpPassword.generate() : input.httpPassword; return putHttpPassword.apply(rsrc.getUser(), newPassword); }
@java.lang.Override protected boolean beforeInit(com.google.gerrit.pgm.SiteInit init) throws java.lang.Exception { com.google.gerrit.pgm.util.ErrorLogFile.errorOnlyConsole(); if (!(skipPlugins)) { final java.util.List<com.google.gerrit.common.PluginData> plugins = com.google.gerrit.pgm.init.InitPlugins.listPluginsAndRemoveTempFiles(init.site, pluginsDistribution); com.google.gerrit.pgm.init.api.ConsoleUI ui = com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); if ((installAllPlugins) && (!(com.google.gerrit.pgm.Init.nullOrEmpty(installPlugins)))) { ui.message("Cannot use --install-plugin together with --install-all-plugins.\n"); return true; } verifyInstallPluginList(ui, plugins); if (listPlugins) { if (!(plugins.isEmpty())) { ui.message("Available plugins:\n"); for (com.google.gerrit.common.PluginData plugin : plugins) { ui.message(" * %s version %s\n", plugin.name, plugin.version); } } else { ui.message("No plugins found.\n"); } return true; } } return false; }
public java.util.Map<java.lang.String, java.util.Set<java.lang.String>> getIssueIds(java.lang.String projectName, java.lang.String commitId, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> current = getIssueIds(projectName, commitId); if (patchSetId != null) { java.util.Map<java.lang.String, java.util.Set<java.lang.String>> previous = com.google.common.collect.Maps.newHashMap(); if ((patchSetId.get()) != 1) { com.google.gerrit.reviewdb.client.PatchSet.Id previousPatchSetId = new com.google.gerrit.reviewdb.client.PatchSet.Id(patchSetId.getParentKey(), ((patchSetId.get()) - 1)); java.lang.String previousPatchSet = db.getRevision(previousPatchSetId); if (previousPatchSet != null) { previous = getIssueIds(projectName, previousPatchSet); } } for (java.lang.String issue : current.keySet()) { java.util.Set<java.lang.String> currentOccurrences = current.get(issue); java.util.Set<java.lang.String> previousOccurrences = previous.get(issue); java.util.Set<java.lang.String> newOccurrences; if ((previousOccurrences == null) || (previousOccurrences.isEmpty())) { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); } else { newOccurrences = com.google.common.collect.Sets.newHashSet(currentOccurrences); newOccurrences.removeAll(previousOccurrences); } for (java.lang.String occurrence : newOccurrences) { currentOccurrences.add(("added@" + occurrence)); } } } return current; }
@java.lang.Override protected void configure() { factory(LfsGetLocksAction.Factory.class); factory(LfsPutLocksAction.Factory.class); factory(LfsProjectLocks.Factory.class); install(com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.module()); }
com.google.gerrit.server.git.ChainedReceiveCommands getChangeCommands() throws java.io.IOException { initChangeRepo(); return changeRepo.cmds; }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { return com.google.gerrit.lucene.LuceneChangeIndex.timestampQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }
private com.google.gerrit.server.patch.PatchScriptBuilder newBuilder(com.google.gerrit.server.diff.PatchList list, org.eclipse.jgit.lib.Repository git) { final com.google.gerrit.server.patch.PatchScriptBuilder b = builderFactory.get(); b.setRepository(git, notes.getProjectName()); b.setChange(notes.getChange()); b.setDiffPrefs(diffPrefs); b.setTrees(list.getComparisonType(), list.getOldId(), list.getNewId()); return b; }
public void setChange(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id changeId) { this.project = project; this.changeId = changeId; }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); if ((fromId) != null) { reviewers.remove(fromId); } add(RecipientType.TO, reviewers); add(RecipientType.CC, extraCC); rcptToAuthors(RecipientType.CC); bccStarredBy(); includeWatchers(NotifyType.NEW_PATCHSETS, (((!(patchSet.isDraft())) && (!(change.isWorkInProgress()))) && (!(change.isPrivate())))); removeUsersThatIgnoredTheChange(); }
@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }
private void escape(java.lang.StringBuilder builder, java.lang.String string) { if (com.google.gerrit.gwtdebug.GerritDebugLauncher.__escape) { for (int i = 0; i < (string.length()); ++i) { char c = string.charAt(i); if (java.lang.Character.isISOControl(c)) { if (c == '\n') { builder.append('|'); } else if (c == '\r') { builder.append('<'); } else { builder.append('?'); } } else { builder.append(c); } } } else { builder.append(string); } }
void setReviewed(boolean reviewed) { checkBox.setValue(true, true); }
@java.lang.Override protected void preDisplay(final com.google.gerrit.client.changes.PatchSetPublishDetail result) { send.setEnabled(true); display(result); }
@org.junit.Test public void basicGroupProperties() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo createdGroup = gApi.groups().create(name("group")).get(); com.google.gerrit.server.group.db.GroupBundle reviewDbBundle = bundleFactory.fromReviewDb(db, new com.google.gerrit.reviewdb.client.AccountGroup.Id(createdGroup.groupId)); deleteGroupRefs(reviewDbBundle); assertMigratedCleanly(rebuild(reviewDbBundle), reviewDbBundle); }
@org.junit.Test(expected = com.google.gerrit.server.git.RepositoryCaseMismatchException.class) public void testNameCaseMismatchWithSymlink() throws java.lang.Exception { assume().that(((com.google.gerrit.server.util.HostPlatform.isWin32()) || (com.google.gerrit.server.util.HostPlatform.isMac()))).isTrue(); com.google.gerrit.reviewdb.client.Project.NameKey name = new com.google.gerrit.reviewdb.client.Project.NameKey("a"); repoManager.createRepository(name); createSymLink(name, "b.git"); repoManager.createRepository(new com.google.gerrit.reviewdb.client.Project.NameKey("B")); }
public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor("head").getLine(); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); cm.setActiveLine(line); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); if (info.isAligned()) { other.setActiveLine(oLine); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } }
@java.lang.Override protected void onLoad() { super.onLoad(); Util.ACCOUNT_SEC.myExternalIds(new com.google.gerrit.client.rpc.ScreenLoadCallback<java.util.List<com.google.gerrit.reviewdb.AccountExternalId>>(this) { public void preDisplay(final java.util.List<com.google.gerrit.reviewdb.AccountExternalId> result) { identites.display(result); } }); }
@java.lang.Override public com.google.gerrit.server.account.GetSshKeys.SshKeyInfo apply(com.google.gerrit.server.account.AccountResource.SshKey rsrc) { return new com.google.gerrit.server.account.GetSshKeys.SshKeyInfo(rsrc.getSshKey()); }
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change change = object.change(dbProvider); return (change != null) && (status.equals(change.getStatus())); }
public com.google.gerrit.client.patches.CommentDetail run(final com.google.gerrit.client.reviewdb.ReviewDb db) throws com.google.gerrit.client.rpc.BaseServiceImplementation.Failure, com.google.gwtorm.client.OrmException { validatePatchSetId(psa); validatePatchSetId(psb); me = com.google.gerrit.client.rpc.Common.getAccountId(); change = db.changes().get(changeId); patch = db.patches().get(patchKey); if ((((change) == null) || ((patch) == null)) || (!(canRead(change)))) { throw new com.google.gerrit.client.rpc.BaseServiceImplementation.Failure(new com.google.gerrit.client.rpc.NoSuchEntityException()); } final java.lang.String pn = patch.getFileName(); final com.google.gerrit.client.data.AccountInfoCacheFactory aic = new com.google.gerrit.client.data.AccountInfoCacheFactory(db); final com.google.gerrit.client.patches.CommentDetail r; r = new com.google.gerrit.client.patches.CommentDetail(psa, ((psb) != null ? psb : patchSetId)); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().published(changeId, pn)) { if (r.include(p)) { aic.want(p.getAuthor()); } } if ((me) != null) { aic.want(me); for (com.google.gerrit.client.reviewdb.PatchLineComment p : db.patchComments().draft(changeId, pn, me)) { r.include(p); } } r.setHistory(db.patches().history(changeId, pn).toList()); r.setAccountInfoCache(aic.create()); return r; }
public void onSuccess(final com.google.gwtjsonrpc.common.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (ids.contains(new com.google.gerrit.reviewdb.client.AccountSshKey.Id(com.google.gerrit.client.Gerrit.getUserAccount().getId(), k.seq())))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } }
@com.google.gwtorm.client.Relation(id = 2) com.google.gwtorm.data.AddressAccess addresses();
private void embedMovie() { if ((com.google.gwtexpui.clippy.client.CopyableLabel.flashEnabled) && (com.google.gwtexpui.user.client.UserAgent.hasFlash)) { final java.lang.String flashVars = "text=" + (com.google.gwt.http.client.URL.encodeQueryString(getText())); final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder h = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); h.openElement("div"); h.setStyleName(ClippyResources.I.css().control()); h.openElement("object"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("classid", "clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"); h.paramElement("movie", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.paramElement("FlashVars", flashVars); h.openElement("embed"); h.setWidth(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_WIDTH); h.setHeight(com.google.gwtexpui.clippy.client.CopyableLabel.SWF_HEIGHT); h.setAttribute("wmode", "transparent"); h.setAttribute("type", "application/x-shockwave-flash"); h.setAttribute("src", com.google.gwtexpui.clippy.client.CopyableLabel.swfUrl()); h.setAttribute("FlashVars", flashVars); h.closeSelf(); h.closeElement("object"); h.closeElement("div"); if ((swf) != null) { com.google.gwt.user.client.DOM.removeChild(getElement(), swf); } com.google.gwt.user.client.DOM.appendChild(getElement(), (swf = com.google.gwtexpui.safehtml.client.SafeHtml.parse(h))); } }
private java.util.List<com.google.gerrit.client.ui.InlineHyperlink> getLinks() { if ((revision.get()) > 0) { com.google.gerrit.client.ui.InlineHyperlink toUnifiedDiffLink = new com.google.gerrit.client.ui.InlineHyperlink(); toUnifiedDiffLink.setHTML(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.unifiedDiff())); toUnifiedDiffLink.setTargetHistoryToken(getUnifiedDiffUrl()); toUnifiedDiffLink.setTitle(PatchUtil.C.unifiedDiff()); return java.util.Collections.singletonList(toUnifiedDiffLink); } else { return java.util.Collections.emptyList(); } }
@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id("<001a114da7ae26e2eb053fe0c29c@google.com>").from(new com.google.gerrit.server.mail.Address("Jonathan Nieder (Gerrit)", "noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com")).addTo(new com.google.gerrit.server.mail.Address("ekempin", "ekempin@google.com")).textContent(com.google.gerrit.server.mail.receive.data.Base64HeaderMessage.textContent).subject("\ud83d\ude1b test").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0, org.joda.time.DateTimeZone.UTC)); return expect.build(); }
public void edit() { textPanel.removeFromParent(); textPanel = null; textLabel = null; editIcon.removeFromParent(); editIcon = null; startHandlers = null; editPanel.setVisible(true); }
void appendSubmittedBy(com.google.gerrit.reviewdb.Account user) { sb.append("Submitted-by: "); appendUserData(user); sb.append("\n"); }
@org.junit.Test public void testGetWebsessionSynchronize() throws java.lang.Exception { when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(true); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenReturn(false); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isFalse(); when(configMock.getBoolean(com.ericsson.gerrit.plugins.highavailability.Configuration.WEBSESSION_SECTION, com.ericsson.gerrit.plugins.highavailability.Configuration.SYNCHRONIZE_KEY, com.ericsson.gerrit.plugins.highavailability.Configuration.DEFAULT_SYNCHRONIZE)).thenThrow(new java.lang.IllegalArgumentException(com.ericsson.gerrit.plugins.highavailability.ConfigurationTest.ERROR_MESSAGE)); initializeConfiguration(); assertThat(configuration.websession().synchronize()).isTrue(); }
@java.lang.Override public void stop() { threadPool = null; }
public com.google.common.collect.ImmutableList<com.google.gerrit.server.events.RefEvent> getRefUpdates(java.lang.String project, java.lang.String refName, int expectedSize) { java.lang.String key = com.google.gerrit.acceptance.EventRecorder.key(RefUpdatedEvent.TYPE, project, refName); assertThat(recordedEvents).containsKey(key); java.util.Collection<com.google.gerrit.server.events.RefEvent> events = recordedEvents.get(key); assertThat(events).hasSize(expectedSize); return com.google.common.collect.ImmutableList.copyOf(events); }
com.googlesource.gerrit.plugins.reviewers.DefaultReviewers create(com.google.gerrit.reviewdb.client.Change change, java.util.Set<com.google.gerrit.reviewdb.client.Account> reviewers);
public void display(java.io.OutputStream out) { final java.io.PrintWriter stdout; try { stdout = new java.io.PrintWriter(new java.io.BufferedWriter(new java.io.OutputStreamWriter(out, "UTF-8"))); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.RuntimeException("JVM lacks UTF-8 encoding", e); } try { final java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo> dashboards; if ((level) != null) { switch (level) { case PROJECT : final com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(entityName); final com.google.gerrit.server.project.ProjectState projectState = projectCache.get(projectName); com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo defaultInfo = findProjectDefaultDashboard(projectState); if (defaultDashboard) { dashboards = com.google.common.collect.Maps.newTreeMap(); if (defaultInfo != null) { dashboards.put(defaultInfo.id, defaultInfo); } } else { dashboards = allDashboardsFor(projectState, (defaultInfo != null ? defaultInfo.id : null)); } break; default : throw new java.lang.IllegalStateException(("unsupported dashboard level: " + (level))); } } else { dashboards = com.google.common.collect.Maps.newTreeMap(); } format.newGson().toJson(dashboards, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, com.google.gerrit.server.dashboard.ListDashboards.DashboardInfo>>() {}.getType(), stdout); stdout.print('\n'); } finally { stdout.flush(); } }
@org.junit.Test public void getFileContentRest() throws java.lang.Exception { com.google.gerrit.server.change.ChangeEdits.Put.Input in = new com.google.gerrit.server.change.ChangeEdits.Put.Input(); in.content = com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW); assertThat(adminSession.putRaw(urlEditFile(), in.content).getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_NO_CONTENT); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); assertThat(modifier.modifyFile(edit.get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.RestSession.newRawInput(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2))).isEqualTo(RefUpdate.Result.FORCED); edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = adminSession.getJsonAccept(urlEditFile()); assertThat(r.getStatusCode()).isEqualTo(com.google.gerrit.acceptance.edit.SC_OK); assertThat(readContentFromJson(r)).isEqualTo(org.apache.commons.codec.binary.StringUtils.newStringUtf8(com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW2)); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.diff.DiffInfo diffInfo) { if ((id == (reloadVersionId)) && (isAttached())) { diff = diffInfo; operation(new java.lang.Runnable() { @java.lang.Override public void run() { skipManager.removeAll(); chunkManager.reset(); diffTable.sidePanel.clearDiffGutters(); setShowIntraline(prefs.intralineDifference()); render(diff); skipManager.render(prefs.context(), diff); } }); } }
private com.google.gerrit.server.project.SubmitRuleEvaluator makeEvaluator() { com.google.gerrit.server.query.change.ChangeData cd = com.google.gerrit.server.query.change.ChangeData.createForTest(project, new com.google.gerrit.reviewdb.client.Change.Id(1), 1); cd.setChange(com.google.gerrit.testing.TestChanges.newChange(project, admin.id)); return evaluatorFactory.create(cd); }
public com.googlesource.gerrit.plugins.cfoauth.AccessToken getAccessToken(java.lang.String authorizationCode) throws com.googlesource.gerrit.plugins.cfoauth.UAAClientException { org.scribe.model.OAuthRequest request = new org.scribe.model.OAuthRequest(POST, accessTokenEndpoint); request.addHeader(com.googlesource.gerrit.plugins.cfoauth.UAAClient.AUTHORIZATION_HEADER, clientCredentials); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.UAAClient.GRANT_TYPE, com.googlesource.gerrit.plugins.cfoauth.UAAClient.BY_AUTHORIZATION_CODE); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.CODE, authorizationCode); request.addBodyParameter(com.googlesource.gerrit.plugins.cfoauth.REDIRECT_URI, redirectUrl); org.scribe.model.Response response = request.send(); if ((response.getCode()) != (java.net.HttpURLConnection.HTTP_OK)) { throw new com.googlesource.gerrit.plugins.cfoauth.UAAClientException(java.text.MessageFormat.format("POST /oauth/token failed with status {0}", response.getCode())); } return parseAccessTokenResponse(response.getBody()); }
public boolean isStale(com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException, java.io.IOException { if (!(config.getBoolean("user", "readGroupsFromNoteDb", false))) { return false; } com.google.gerrit.server.index.group.GroupIndex i = indexes.getSearchIndex(); if (i == null) { return false; } if (!(i.getSchema().hasField(GroupField.REF_STATE))) { return false; } java.util.Optional<com.google.gerrit.index.query.FieldBundle> result = i.getRaw(id, com.google.gerrit.server.index.group.IndexedGroupQuery.createOptions(indexConfig, 0, 1, com.google.gerrit.server.index.group.StalenessChecker.FIELDS)); if (!(result.isPresent())) { return true; } try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(id)); org.eclipse.jgit.lib.ObjectId head = (ref == null) ? org.eclipse.jgit.lib.ObjectId.zeroId() : ref.getObjectId(); return !(head.equals(org.eclipse.jgit.lib.ObjectId.fromString(result.get().getValue(GroupField.REF_STATE), 0))); } }
@com.google.gwtexpui.clippy.client.Source("clipboard-16.png") com.google.gwt.resources.client.ImageResource clipboard();
protected org.eclipse.jgit.revwalk.RevCommit getRemoteHead(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String branch) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project)) { return getHead(repo, ("refs/heads/" + branch)); } }
public static com.google.gerrit.client.rpc.RestApi hashtags(@com.google.gerrit.common.Nullable java.lang.String project, int changeId) { return com.google.gerrit.client.changes.ChangeApi.change(project, changeId).view("hashtags"); }
@org.junit.Test public void byStatusClosed() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.MERGED); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.ABANDONED); ins2.insert(); com.google.gerrit.server.change.ChangeInserter ins3 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change3 = ins3.getChange(); change3.setStatus(Change.Status.NEW); ins3.insert(); java.util.List<com.google.gerrit.extensions.common.ChangeInfo> results; results = query("status:closed"); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); assertThat(query("status:CLOSED")).hasSize(2); assertThat(query("status:c")).hasSize(2); assertThat(query("status:cl")).hasSize(2); assertThat(query("status:clo")).hasSize(2); assertThat(query("status:clos")).hasSize(2); assertThat(query("status:close")).hasSize(2); assertThat(query("status:closed")).hasSize(2); results = query("is:closed"); assertThat(results).hasSize(2); assertResultEquals(change2, results.get(0)); assertResultEquals(change1, results.get(1)); }
@java.lang.Override public void renameFile(java.lang.String oldFilePath, java.lang.String newFilePath) { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }
public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPluginsAndRemoveTempFiles(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.PluginsDistribution pluginsDistribution) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, true, pluginsDistribution); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); onSave(); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); cm.focus(); return; } } expandTimer.schedule(250); }
@java.lang.Override protected void onUnload() { super.onUnload(); if ((cmBase) != null) { cmBase.getWrapperElement().removeFromParent(); } if ((cmEdit) != null) { cmEdit.getWrapperElement().removeFromParent(); } if ((resizeHandler) != null) { resizeHandler.removeHandler(); } if ((closeHandler) != null) { closeHandler.removeHandler(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); com.google.gerrit.client.JumpKeys.enable(true); }
private java.lang.String problemsForSubmittingChanges(com.google.gerrit.server.change.RevisionResource resource, java.util.List<com.google.gerrit.server.query.change.ChangeData> changeList, com.google.gerrit.server.IdentifiedUser identifiedUser) { try { if (!(mergeableProvider.get().apply(resource).mergeable)) { return com.google.gerrit.server.change.Submit.CLICK_FAILURE_TOOLTIP; } for (com.google.gerrit.server.query.change.ChangeData c : changeList) { if (!(c.isMergeable())) { return com.google.gerrit.server.change.Submit.CLICK_FAILURE_OTHER_TOOLTIP; } com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gwtorm.server.OrmException | java.io.IOException e) { com.google.gerrit.server.change.Submit.log.error("Error checking if change is submittable", e); throw new com.google.gwtorm.server.OrmRuntimeException("Could not determine problems for the change", e); } return null; }
private void renderComments(java.util.List<com.google.gerrit.client.changes.CommentInfo> list) { com.google.gerrit.client.ui.CommentLinkProcessor clp = history.getCommentLinkProcessor(); com.google.gerrit.reviewdb.client.PatchSet.Id ps = new com.google.gerrit.reviewdb.client.PatchSet.Id(history.getChangeId(), info._revisionNumber()); java.util.TreeMap<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> m = com.google.gerrit.client.change.Message.byPath(list); java.util.List<com.google.gerrit.client.changes.CommentInfo> l = m.remove(Patch.COMMIT_MSG); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.commitMessage(), l)); } l = m.remove(Patch.MERGE_LIST); if (l != null) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, Util.C.mergeList(), l)); } for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.client.changes.CommentInfo>> e : m.entrySet()) { comments.add(new com.google.gerrit.client.change.FileComments(clp, history.getProject(), ps, e.getKey(), e.getValue())); } }
@java.lang.Override public java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> filter(java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> visibleChanges = visibleChanges(); final java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> result = new java.util.HashMap<java.lang.String, org.eclipse.jgit.lib.Ref>(); final java.util.List<org.eclipse.jgit.lib.Ref> deferredTags = new java.util.ArrayList<org.eclipse.jgit.lib.Ref>(); for (org.eclipse.jgit.lib.Ref ref : refs.values()) { if (com.google.gerrit.reviewdb.PatchSet.isRef(ref.getName())) { if (visibleChanges.contains(Change.Id.fromRef(ref.getName()))) { result.put(ref.getName(), ref); } } else if (com.google.gerrit.server.git.VisibleRefFilter.isTag(ref)) { if ((ref.getObjectId()) != null) { deferredTags.add(ref); } } else if (projectCtl.controlForRef(ref.getLeaf().getName()).isVisible()) { result.put(ref.getName(), ref); } } if ((!(deferredTags.isEmpty())) && (!(result.isEmpty()))) { com.google.gerrit.server.git.TagMatcher tags = tagCache.get(projectName).matcher(db, result.values()); for (org.eclipse.jgit.lib.Ref tag : deferredTags) { if (tags.isReachable(tag)) { result.put(tag.getName(), tag); } } } return result; }
public java.lang.String getMessage(com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.reviewdb.client.Change.Id changeId = notes.getChangeId(); com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.current(db.get(), notes); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } try (org.eclipse.jgit.lib.Repository git = gitManager.openRepository(notes.getChange().getProject());org.eclipse.jgit.revwalk.RevWalk revWalk = new org.eclipse.jgit.revwalk.RevWalk(git)) { org.eclipse.jgit.revwalk.RevCommit commit = revWalk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get())); return commit.getFullMessage(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId, e); } }
private final native java.lang.String urlAliasToken(java.lang.String m);
private void validate(com.google.gerrit.server.update.RepoContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { if (!(validate)) { return; } com.google.gerrit.server.permissions.PermissionBackend.ForRef perm = permissionBackend.user(ctx.getUser()).project(ctx.getProject()).ref(refName); try { try (com.google.gerrit.server.events.CommitReceivedEvent event = new com.google.gerrit.server.events.CommitReceivedEvent(cmd, projectCache.checkedGet(ctx.getProject()).getProject(), change.getDest().get(), ctx.getRevWalk().getObjectReader(), commitId, ctx.getIdentifiedUser())) { commitValidatorsFactory.forGerritCommits(perm, new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getIdentifiedUser(), new com.google.gerrit.server.ssh.NoSshInfo(), ctx.getRevWalk()).validate(event); } } catch (com.google.gerrit.server.git.validators.CommitValidationException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getFullMessage()); } }
private void setTable(com.google.gerrit.client.change.FileTable.MyTable table) { clear(); add(table); this.table = table; if (register) { table.setRegisterKeys(true); } if ((reviewed) != null) { table.markReviewed(reviewed); reviewed = null; } if ((scrollToPath) != null) { table.scrollToPath(scrollToPath); scrollToPath = null; } }
public boolean isIdentityTrustable(java.util.Collection<com.google.gerrit.server.account.ExternalId> ids) { switch (getAuthType()) { case DEVELOPMENT_BECOME_ANY_ACCOUNT : case HTTP : case HTTP_LDAP : case LDAP : case LDAP_BIND : case CLIENT_SSL_CERT_LDAP : case CUSTOM_EXTENSION : case OAUTH : return true; case OPENID_SSO : return true; case OPENID : for (com.google.gerrit.server.account.ExternalId e : ids) { if (!(isTrusted(e))) { return false; } } return true; default : return false; } }
private void initUserAuth(final org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator pubkey, final org.apache.sshd.server.auth.gss.GSSAuthenticator kerberosAuthenticator, java.lang.String kerberosKeytab, java.lang.String kerberosPrincipal) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.server.auth.UserAuth>> authFactories = com.google.common.collect.Lists.newArrayList(); if (kerberosKeytab != null) { authFactories.add(UserAuthGSSFactory.INSTANCE); log.info(("Enabling kerberos with keytab " + kerberosKeytab)); if (!(new java.io.File(kerberosKeytab).canRead())) { com.google.gerrit.sshd.SshDaemon.sshDaemonLog.error((("Keytab " + kerberosKeytab) + " does not exist or is not readable; further errors are possible")); } kerberosAuthenticator.setKeytabFile(kerberosKeytab); if (kerberosPrincipal == null) { try { kerberosPrincipal = "host/" + (java.net.InetAddress.getLocalHost().getCanonicalHostName()); } catch (java.net.UnknownHostException e) { kerberosPrincipal = "host/localhost"; } } com.google.gerrit.sshd.SshDaemon.sshDaemonLog.info(("Using kerberos principal " + kerberosPrincipal)); if (!(kerberosPrincipal.startsWith("host/"))) { com.google.gerrit.sshd.SshDaemon.sshDaemonLog.warn(("Host principal does not start with host/ " + "which most SSH clients will supply automatically")); } kerberosAuthenticator.setServicePrincipalName(kerberosPrincipal); setGSSAuthenticator(kerberosAuthenticator); } authFactories.add(UserAuthPublicKeyFactory.INSTANCE); setUserAuthFactories(authFactories); setPublickeyAuthenticator(pubkey); }
java.lang.Runnable openCloseAll(final net.codemirror.lib.CodeMirror cm) { return new java.lang.Runnable() { @java.lang.Override public void run() { com.google.gerrit.client.diff.CommentGroup group = getCommentGroupOnActiveLine(cm); if (group != null) { group.openCloseAll(); } } }; }
private java.lang.String getInstanceName() { return args.instanceNameProvider.get(); }
public void writeStdOut(final java.lang.String message) { pushResultProcessing.writeStdOut(message); }
private static java.io.File initSite() throws java.lang.Exception { java.io.File tmp = com.google.gerrit.acceptance.TempFileUtil.createTempDirectory(); com.google.gerrit.pgm.Init init = new com.google.gerrit.pgm.Init(); int rc = init.main(new java.lang.String[]{ "-d", tmp.getPath(), "--batch", "--no-auto-start" }); if (rc != 0) { throw new java.lang.RuntimeException("Couldn't initialize site"); } return tmp; }
private void revision(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, int index, com.google.gerrit.client.changes.ChangeInfo.RevisionInfo r) { com.google.gerrit.client.changes.ChangeInfo.CommitInfo c = r.commit(); sb.openTr(); if (revision.equals(r.name())) { sb.setStyleName(style.current()); } sb.openTd().setStyleName(style.legacy_id()).append(r._number()).closeTd(); sb.openTd().setStyleName(style.commit()).openAnchor().setAttribute("href", ("#" + (url(r)))).setAttribute("onclick", ((((com.google.gerrit.client.change.RevisionsBox.OPEN) + "(event,") + index) + ")")).append(r.name().substring(0, 10)).closeAnchor().closeTd(); sb.openTd().append(com.google.gerrit.client.FormatUtil.shortFormatDayTime(c.committer().date())).closeTd(); java.lang.String an = ((c.author()) != null) ? c.author().name() : null; java.lang.String cn = ((c.committer()) != null) ? c.committer().name() : null; sb.openTd(); sb.append(an); if (((!("".equals(an))) && (!("".equals(cn)))) && (!(an.equals(cn)))) { sb.append(" / ").append(cn); } sb.closeTd(); sb.closeTr(); }
@java.lang.Override void apply(com.google.gerrit.server.notedb.ChangeUpdate update) throws com.google.gwtorm.server.OrmException { checkUpdate(update); if ((c.getRevId()) == null) { com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, cache, change, ps); } update.insertComment(c); }
static com.google.gerrit.acceptance.GerritServer.Description forTestClass(org.junit.runner.Description testDesc, java.lang.String configName) { return new com.google.gerrit.acceptance.AutoValue_GerritServer_Description(configName, true, (!(com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.NoHttpd.class, testDesc.getTestClass()))), com.google.gerrit.acceptance.GerritServer.Description.has(com.google.gerrit.acceptance.Sandboxed.class, testDesc.getTestClass()), null, null); }
public void doReviewerAddedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.Account account, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.ReviewerAddedEvent event = new com.google.gerrit.server.events.ReviewerAddedEvent(); final com.google.gerrit.server.account.AccountState owner = accountCache.get(change.getOwner()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.reviewer = eventFactory.asAccountAttribute(account); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--change-url", event.change.url); addArg(args, "--change-owner", getDisplayName(owner.getAccount())); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--reviewer", getDisplayName(account)); runHook(change.getProject(), reviewerAddedHook, args); }
private java.lang.Module getIndexModule() { switch (com.google.gerrit.server.index.IndexModule.getIndexType(dbInjector)) { case LUCENE : return com.google.gerrit.lucene.LuceneIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); case ELASTICSEARCH : return com.google.gerrit.elasticsearch.ElasticIndexModule.singleVersionWithExplicitVersions(com.google.common.collect.ImmutableMap.of(), threads); default : throw new java.lang.IllegalStateException("unsupported index.type"); } }
@java.lang.Override public void setReadyForReview(java.lang.String message) throws com.google.gerrit.extensions.restapi.RestApiException { try { setReady.apply(change, new com.google.gerrit.server.change.WorkInProgressOp.Input(message)); } catch (com.google.gerrit.server.update.UpdateException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot set ready for review state", e); } }
public static void loadSiteLib(java.nio.file.Path libdir) { try { java.util.List<java.nio.file.Path> jars = com.google.gerrit.common.SiteLibraryLoaderUtil.listJars(libdir); com.google.gerrit.common.IoUtil.loadJARs(jars); com.google.gerrit.common.SiteLibraryLoaderUtil.log.debug("Loaded site libraries: {}", com.google.gerrit.common.SiteLibraryLoaderUtil.jarList(jars)); } catch (java.io.IOException e) { com.google.gerrit.common.SiteLibraryLoaderUtil.log.error(("Error scanning lib directory " + libdir), e); } }
private com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId, com.google.gerrit.reviewdb.client.Account.Id reviewerId) { com.google.gerrit.reviewdb.client.PatchSetApproval.LabelId id = com.google.common.collect.Iterables.getLast(ctl.getLabelTypes().getLabelTypes()).getLabelId(); com.google.gerrit.reviewdb.client.PatchSetApproval dummyApproval = new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(patchSetId, reviewerId, id), ((short) (0))); dummyApproval.cache(ctl.getChange()); return dummyApproval; }
private com.google.gerrit.reviewdb.client.Change setMergedPatchSet(com.google.gerrit.reviewdb.client.Change.Id changeId, final com.google.gerrit.reviewdb.client.PatchSet.Id merged) throws com.google.gwtorm.server.OrmException { return db.changes().atomicUpdate(changeId, new com.google.gwtorm.server.AtomicUpdate<com.google.gerrit.reviewdb.client.Change>() { @java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change c) { c.setStatus(Change.Status.MERGED); c.setSubmissionId(submissionId); if (!(merged.equals(c.currentPatchSetId()))) { try { c.setCurrentPatchSet(patchSetInfoFactory.get(db, merged)); } catch (com.google.gerrit.server.patch.PatchSetInfoNotAvailableException e1) { logError(("Cannot read merged patch set " + merged), e1); } } com.google.gerrit.server.ChangeUtil.updated(c); return c; } }); }
private static java.util.List<org.eclipse.jgit.diff.Edit> intraline(java.lang.String a, java.lang.String b, org.eclipse.jgit.diff.Edit lines) throws java.lang.Exception { com.google.gerrit.server.diff.Text aText = new com.google.gerrit.server.diff.Text(a.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.Text bText = new com.google.gerrit.server.diff.Text(b.getBytes(java.nio.charset.StandardCharsets.UTF_8)); com.google.gerrit.server.diff.IntraLineDiff diff = com.google.gerrit.server.patch.IntraLineLoader.compute(aText, bText, com.google.common.collect.ImmutableList.of(lines)); assertThat(diff.getStatus()).isEqualTo(IntraLineDiff.Status.EDIT_LIST); java.util.List<org.eclipse.jgit.diff.Edit> actualEdits = diff.getEdits(); assertThat(actualEdits).hasSize(1); org.eclipse.jgit.diff.Edit actualEdit = actualEdits.get(0); assertThat(actualEdit.getBeginA()).isEqualTo(lines.getBeginA()); assertThat(actualEdit.getEndA()).isEqualTo(lines.getEndA()); assertThat(actualEdit.getBeginB()).isEqualTo(lines.getBeginB()); assertThat(actualEdit.getEndB()).isEqualTo(lines.getEndB()); assertThat(actualEdit).isInstanceOf(org.eclipse.jgit.diff.ReplaceEdit.class); return ((org.eclipse.jgit.diff.ReplaceEdit) (actualEdit)).getInternalEdits(); }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> sort(java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments) { java.util.Collections.sort(comments, ChangeNotes.PatchLineCommentComparator); return comments; }
protected void setUpDatabase() throws java.lang.Exception { try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); userId = accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId(); java.lang.String email = "user@example.com"; externalIdsUpdate.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createEmail(userId, email)); accountsUpdate.create().update(userId, ( u) -> u.setPreferredEmail(email)); user = userFactory.create(userId); requestContext.setContext(newRequestContext(userId)); }
public boolean isFromSource(com.google.gerrit.server.query.change.ChangeDataSource s) { return s == (returnedBySource); }
private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = cd.submitTypeRecord(); if (!(str.isOk())) { logErrorAndThrow(((("Failed to get submit type for " + (cd.getId())) + ": ") + (str.errorMessage))); } return str.type; }
private com.google.gerrit.server.notedb.NoteDbUpdateManager stageNoteDbUpdate(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, boolean deleted) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug("Staging NoteDb update"); com.google.gerrit.server.notedb.NoteDbUpdateManager updateManager = updateManagerFactory.create(ctx.getProject()).setChangeRepo(ctx.getRepository(), ctx.getRevWalk(), null, new com.google.gerrit.server.git.ChainedReceiveCommands(repo)); if (ctx.getUser().isIdentifiedUser()) { updateManager.setRefLogIdent(ctx.getUser().asIdentifiedUser().newRefLogIdent(ctx.getWhen(), tz)); } for (com.google.gerrit.server.notedb.ChangeUpdate u : ctx.updates.values()) { updateManager.add(u); } com.google.gerrit.reviewdb.client.Change c = ctx.getChange(); if (deleted) { updateManager.deleteChange(c.getId()); } try { updateManager.stageAndApplyDelta(c); } catch (com.google.gerrit.server.notedb.NoteDbUpdateManager.MismatchedStateException ex) { logDebug("Ignoring MismatchedStateException while staging"); } return updateManager; }
@java.lang.Override public void advertiseRefs(org.eclipse.jgit.transport.BaseReceivePack rp) throws org.eclipse.jgit.transport.ServiceMayNotContinueException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> oldRefs = rp.getAdvertisedRefs(); if (oldRefs == null) { try { oldRefs = rp.getRepository().getRefDatabase().getRefs(com.google.gerrit.server.git.ALL); } catch (org.eclipse.jgit.transport.ServiceMayNotContinueException e) { throw e; } catch (java.io.IOException e) { org.eclipse.jgit.transport.ServiceMayNotContinueException ex = new org.eclipse.jgit.transport.ServiceMayNotContinueException(); ex.initCause(e); throw ex; } } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> r = com.google.common.collect.Maps.newHashMapWithExpectedSize(oldRefs.size()); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : oldRefs.entrySet()) { java.lang.String name = e.getKey(); if (!(com.google.gerrit.server.git.ReceiveCommitsAdvertiseRefsHook.skip(name))) { r.put(name, e.getValue()); } } rp.setAdvertisedRefs(r, advertiseHistory(r.values(), rp)); }
@com.google.gwt.uibinder.client.UiHandler("editArea") void onKeyDown(com.google.gwt.event.dom.client.KeyDownEvent e) { if ((((e.isControlKeyDown()) || (e.isMetaKeyDown())) && (!(e.isAltKeyDown()))) && (!(e.isShiftKeyDown()))) { switch (e.getNativeKeyCode()) { case 's' : case 'S' : e.preventDefault(); save(null); return; } } else if (((e.getNativeKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE)) && (!(isDirty()))) { if (isNew()) { removeUI(); return; } else { setEdit(false); if (autoClosed) { setOpen(false); } getCm().focus(); return; } } expandTimer.schedule(250); }
static void call(com.google.gerrit.client.info.ChangeInfo changeInfo, com.google.gerrit.client.info.ChangeInfo.RevisionInfo revisionInfo) { if (com.google.gerrit.client.api.ChangeGlue.onSubmitChange(changeInfo, revisionInfo)) { final com.google.gerrit.reviewdb.client.Change.Id changeId = changeInfo.legacyId(); com.google.gerrit.client.changes.ChangeApi.submit(changeInfo.project(), changeId.get(), revisionInfo.name(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.SubmitInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.SubmitInfo result) { redisplay(); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); } else { super.onFailure(err); } redisplay(); } private void redisplay() { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeInfo.projectNameKey(), changeId)); } }); } }
@java.lang.Override public void onHashtagsEdited(com.google.gerrit.extensions.events.HashtagsEditedListener.Event ev) { try { hooks.doHashtagsChangedHook(getNotes(ev.getChange()).getChange(), getAccount(ev.getEditor()), new java.util.HashSet(ev.getAddedHashtags()), new java.util.HashSet(ev.getRemovedHashtags()), new java.util.HashSet(ev.getHashtags()), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error(("HashtagsChanged hook failed to run " + (ev.getChange()._number)), e); } }
void onRemoveDraftBox(com.google.gerrit.client.diff.DraftBox box) { boxes.remove(box); table.updateFileCommentVisibility(false); }
void send(com.google.gerrit.server.mail.Address from, java.util.Collection<com.google.gerrit.server.mail.Address> rcpt, java.util.Map<java.lang.String, com.google.gerrit.server.mail.EmailHeader> headers, java.lang.String body) throws com.google.gerrit.common.errors.EmailException;
@java.lang.Override public void postUpdate(com.google.gerrit.server.update.Context ctx) { java.lang.String refName = cmd.getRefName(); if ((cmd.getType()) == (ReceiveCommand.Type.UPDATE)) { logDebug("Updating tag cache on fast-forward of {}", cmd.getRefName()); tagCache.updateFastForward(project.getNameKey(), refName, cmd.getOldId(), cmd.getNewId()); } if (com.google.gerrit.server.git.receive.ReceiveCommits.isConfig(cmd)) { logDebug("Reloading project in cache"); try { projectCache.evict(project); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("Cannot evict from project cache, name key: " + (project.getName())), e); } com.google.gerrit.server.project.ProjectState ps = projectCache.get(project.getNameKey()); try { logDebug("Updating project description"); repo.setGitwebDescription(ps.getProject().getDescription()); } catch (java.io.IOException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.warn(("cannot update description of " + (project.getName())), e); } if (allProjectsName.equals(project.getNameKey())) { try { createGroupPermissionSyncer.syncIfNeeded(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { com.google.gerrit.server.git.receive.ReceiveCommits.log.error("Can't sync create group permissions", e); } } } }
@java.lang.Override protected void configureServlets() { install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(AddBranch.Factory.class); factory(ChangeProjectAccess.Factory.class); factory(CreateProjectHandler.Factory.class); factory(ChangeProjectSettings.Factory.class); factory(DeleteBranches.Factory.class); factory(ListBranches.Factory.class); factory(VisibleProjects.Factory.class); factory(VisibleProjectDetails.Factory.class); factory(ProjectAccessFactory.Factory.class); factory(ProjectDetailFactory.Factory.class); factory(SuggestParentCandidatesHandler.Factory.class); } }); rpc(com.google.gerrit.httpd.rpc.project.ProjectAdminServiceImpl.class); }
@org.junit.Test public void testCreateGroupWhenGroupAlreadyExists_Conflict() throws com.google.gwtorm.server.OrmException, com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.RestResponse r = session.put("/groups/Administrators"); assertEquals(HttpStatus.SC_CONFLICT, r.getStatusCode()); }
@java.lang.Override protected java.util.concurrent.Callable<?> deleteTask(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.common.util.concurrent.Callables.returning(null); }
@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> rewrite(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in) { return super.rewrite(indexRewrite.rewrite(in)); }
public boolean hasEmailAddress(java.lang.String email) { if (validEmails.contains(email)) { return true; } else if (((invalidEmails) != null) && (invalidEmails.contains(email))) { return false; } else if (realm.hasEmailAddress(this, email)) { validEmails.add(email); return true; } else if ((invalidEmails) == null) { invalidEmails = com.google.common.collect.Sets.newHashSetWithExpectedSize(4); } invalidEmails.add(email); return false; }
@java.lang.Override public void configure() { install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class)); expose(com.google.gerrit.server.git.AsyncReceiveCommits.Factory.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().build(ReceiveCommits.Factory.class)); }
boolean isMergedIntoVisibleRef(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Collection<org.eclipse.jgit.lib.Ref> unfilteredRefs) throws java.io.IOException { com.google.gerrit.server.git.VisibleRefFilter filter = refFilter.create(state, repo); java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> m = com.google.common.collect.Maps.newHashMapWithExpectedSize(unfilteredRefs.size()); for (org.eclipse.jgit.lib.Ref r : unfilteredRefs) { m.put(r.getName(), r); } java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = filter.filter(m, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change update(com.google.gerrit.reviewdb.client.Change change) { if (change.getStatus().isClosed()) { return null; } if (!(change.currentPatchSetId().equals(priorPatchSet))) { return change; } if (((magicBranch) != null) && ((magicBranch.topic) != null)) { change.setTopic(magicBranch.topic); } if (((change.getStatus()) == (Change.Status.DRAFT)) && (newPatchSet.isDraft())) { } else { change.setStatus(Change.Status.NEW); } change.setCurrentPatchSet(info); final java.util.List<java.lang.String> idList = newCommit.getFooterLines(com.google.gerrit.server.git.CHANGE_ID); if (idList.isEmpty()) { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(("I" + (newCommit.name())))); } else { change.setKey(new com.google.gerrit.reviewdb.client.Change.Key(idList.get(((idList.size()) - 1)).trim())); } com.google.gerrit.server.ChangeUtil.updated(change); return change; }
private void columnPath(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().pathColumn()).openAnchor(); java.lang.String path = info.path(); if (((mode) == (com.google.gerrit.client.change.FileTable.Mode.EDIT)) && (!(isEditable(info)))) { sb.setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.RESTORE) + "(event,") + (info._row())) + ")")); } else { sb.setAttribute("href", ("#" + (url(info)))).setAttribute("onclick", ((((com.google.gerrit.client.change.FileTable.OPEN) + "(event,") + (info._row())) + ")")); } if (Patch.COMMIT_MSG.equals(path)) { sb.append(Util.C.commitMessage()); } else if ((!(hasUser)) || (com.google.gerrit.client.Gerrit.getUserAccount().getGeneralPreferences().isMuteCommonPathPrefixes())) { int commonPrefixLen = commonPrefix(path); if (commonPrefixLen > 0) { sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().commonPrefix()).append(path.substring(0, commonPrefixLen)).closeSpan(); } sb.append(path.substring(commonPrefixLen)); lastPath = path; } else { sb.append(path); } sb.closeAnchor(); if ((info.old_path()) != null) { sb.br(); sb.openSpan().setStyleName(com.google.gerrit.client.change.FileTable.R.css().renameCopySource()).append(info.old_path()).closeSpan(); } sb.closeTd(); }
public com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSetApproval> approvals() throws com.google.gwtorm.server.OrmException { if ((allApprovals) == null) { if (!(lazyLoad)) { return com.google.common.collect.ImmutableListMultimap.of(); } allApprovals = approvalsUtil.byChange(db, notes()); } return allApprovals; }
private void throwUnauthorizedOp(java.lang.String op, com.google.gerrit.server.project.ProjectState state, com.google.gerrit.server.CurrentUser user) throws org.eclipse.jgit.lfs.errors.LfsUnauthorized { java.lang.String project = state.getProject().getName(); java.lang.String userName = user.getUserName().orElse("anonymous"); com.googlesource.gerrit.plugins.lfs.locks.LfsLocksAction.log.debug(java.lang.String.format("operation %s unauthorized for user %s on project %s", op, userName, project)); throw new org.eclipse.jgit.lfs.errors.LfsUnauthorized(op, project); }
@java.lang.Override public com.google.gerrit.extensions.api.changes.IncludedInInfo apply(com.google.gerrit.server.project.CommitResource rsrc) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = rsrc.getCommit(); com.google.gerrit.reviewdb.client.Project.NameKey project = rsrc.getProject().getProject().getNameKey(); return includedIn.apply(project, commit.getId().getName()); }
@org.junit.Test public void createDuplicateSystemGroupCaseSensitiveName_Conflict() throws java.lang.Exception { java.lang.String newGroupName = "Registered Users"; exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage("group 'Registered Users' already exists"); gApi.groups().create(newGroupName); }
private static void onRemoveReviewer(com.google.gwt.dom.client.NativeEvent event) { java.lang.Integer user = com.google.gerrit.client.change.Labels.getDataId(event); if (user != null) { final com.google.gerrit.client.change.ChangeScreen screen = com.google.gerrit.client.change.ChangeScreen.get(event); final com.google.gerrit.reviewdb.client.Change.Id changeId = screen.getPatchSetId().getParentKey(); com.google.gerrit.client.changes.ChangeApi.reviewer(changeId.get(), user).delete(new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JavaScriptObject>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject result) { if (screen.isCurrentView()) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(changeId)); } } }); } }
@java.lang.Override public void run() { try { for (com.google.gerrit.reviewdb.client.Project.NameKey nameKey : projectCache.all()) { replication.scheduleFullSync(nameKey, urlMatch, state); } } catch (java.lang.Exception e) { com.googlesource.gerrit.plugins.replication.PushAll.wrappedLog.error("Cannot enumerate known projects", e, state); } state.markAllPushTasksScheduled(); }
public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).formatAsList(listComments(rsrc)); }
private void visit(org.commonmark.ext.gfm.tables.TableRow node) { wrapChildren("tr", node); }
private org.eclipse.jgit.lib.Ref findMergedInto(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, java.lang.String first, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.RefDatabase refDatabase = ctx.getRepository().getRefDatabase(); org.eclipse.jgit.lib.Ref firstRef = refDatabase.exactRef(first); if ((firstRef != null) && (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, firstRef))) { return firstRef; } for (org.eclipse.jgit.lib.Ref ref : refDatabase.getRefs(Constants.R_HEADS).values()) { if (com.google.gerrit.server.git.ReplaceOp.isMergedInto(ctx.getRevWalk(), commit, ref)) { return ref; } } return null; } catch (java.io.IOException e) { com.google.gerrit.server.git.ReplaceOp.log.warn("Can't check for already submitted change", e); return null; } }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { try (org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter();org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(ins.newReader())) { for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(Constants.R_HEADS).values()) { org.eclipse.jgit.revwalk.RevObject o = walk.parseAny(ref.getObjectId()); if (o instanceof org.eclipse.jgit.revwalk.RevCommit) { walk.markStart(((org.eclipse.jgit.revwalk.RevCommit) (o))); } } org.eclipse.jgit.revwalk.RevCommit bCommit; while (((bCommit = walk.next()) != null) && (!(byId.isEmpty()))) { if (byId.containsKey(bCommit)) { getPathsAndIndex(walk, ins, bCommit); byId.removeAll(bCommit); } } for (org.eclipse.jgit.lib.ObjectId id : byId.keySet()) { getPathsAndIndex(walk, ins, id); } } return null; }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change otherChange = object.change(); if (otherChange == null) { return false; } if (!(otherChange.getDest().equals(c.getDest()))) { return false; } com.google.gerrit.extensions.client.SubmitType submitType = getSubmitType(object); if (submitType == null) { return false; } org.eclipse.jgit.lib.ObjectId other = org.eclipse.jgit.lib.ObjectId.fromString(object.currentPatchSet().getRevision().get()); com.google.gerrit.server.query.change.ConflictKey conflictsKey = new com.google.gerrit.server.query.change.ConflictKey(changeDataCache.getTestAgainst(), other, submitType, changeDataCache.getProjectState().isUseContentMerge()); java.lang.Boolean conflicts = args.conflictsCache.getIfPresent(conflictsKey); if (conflicts != null) { return conflicts; } try (org.eclipse.jgit.lib.Repository repo = args.repoManager.openRepository(otherChange.getProject());com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw = com.google.gerrit.server.git.CodeReviewCommit.newRevWalk(repo)) { conflicts = !(args.submitDryRun.run(submitType, repo, rw, otherChange.getDest(), changeDataCache.getTestAgainst(), other, getAlreadyAccepted(repo, rw))); args.conflictsCache.put(conflictsKey, conflicts); return conflicts; } catch (com.google.gerrit.server.git.IntegrationException | com.google.gerrit.server.project.NoSuchProjectException | java.io.IOException e) { throw new java.lang.IllegalStateException(e); } }
private org.eclipse.jgit.revwalk.RevObject aFor(com.google.gerrit.server.diff.PatchListKey key, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectInserter ins, org.eclipse.jgit.revwalk.RevCommit b) throws java.io.IOException { if ((key.getOldId()) != null) { return rw.parseAny(key.getOldId()); } switch (b.getParentCount()) { case 0 : return rw.parseAny(com.google.gerrit.server.patch.PatchListLoader.emptyTree(ins)); case 1 : { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(0); rw.parseBody(r); return r; } case 2 : if ((key.getParentNum()) != null) { org.eclipse.jgit.revwalk.RevCommit r = b.getParent(((key.getParentNum()) - 1)); rw.parseBody(r); return r; } return autoMerger.merge(repo, rw, ins, b, mergeStrategy); default : return null; } }
private com.google.gerrit.server.project.ProjectState newProjectState(com.google.gerrit.server.git.ProjectConfig local) { add(local); return all.get(local.getProject().getNameKey()); }
static int getMinOwnerVoteLevel(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.query.change.ChangeData c) throws com.google.gwtorm.server.OrmException { if (projectState == null) { com.googlesource.gerrit.plugins.findowners.Config.log.error(("Null projectState for change " + (com.googlesource.gerrit.plugins.findowners.Config.getChangeId(c)))); return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else if ((com.googlesource.gerrit.plugins.findowners.Config.config) == null) { return com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel; } else { return com.googlesource.gerrit.plugins.findowners.Config.config.getFromProjectConfigWithInheritance(projectState, com.googlesource.gerrit.plugins.findowners.Config.PLUGIN_NAME).getInt(com.googlesource.gerrit.plugins.findowners.Config.MIN_OWNER_VOTE_LEVEL, com.googlesource.gerrit.plugins.findowners.Config.minOwnerVoteLevel); } }
private static java.lang.String legacyAll(final java.lang.String token) { if (com.google.gerrit.client.Dispatcher.matchPrefix("all,abandoned,", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery("status:abandoned", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix("all,merged,", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery("status:merged", com.google.gerrit.client.Dispatcher.skip(token)); } if (com.google.gerrit.client.Dispatcher.matchPrefix("all,open,", token)) { return com.google.gerrit.common.PageLinks.toChangeQuery("status:open", com.google.gerrit.client.Dispatcher.skip(token)); } return null; }
@org.junit.Test public void rescheduleOnError() throws java.io.IOException { when(session.post(eq(remote), eq(content))).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.ERR_RESULT); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }
@java.lang.Override public java.lang.String getUrl(java.lang.String project) { if ((!(isEnabled())) || (!(userProvider.get().isIdentifiedUser()))) { return null; } final java.lang.StringBuilder r = new java.lang.StringBuilder(); if ((gitHttpUrl) != null) { r.append(gitHttpUrl); } else if ((canonicalWebUrl) != null) { java.lang.String base = canonicalWebUrl; int p = base.indexOf("://"); int s = base.indexOf('/', (p + 3)); if (s < 0) { s = base.length(); } java.lang.String host = base.substring((p + 3), s); r.append(base.substring(0, (p + 3))); r.append(userProvider.get().getUserName()); r.append("@"); r.append(host); r.append(base.substring(s)); } else { return null; } r.append(project); return r.toString(); }
@org.junit.Test public void submitTwoChangesWithFastForward_missingDependency() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange(); com.google.gerrit.reviewdb.client.Change.Id id1 = change1.getPatchSetId().getParentKey(); submitWithConflict(change2.getChangeId(), (((("The change could not be submitted because it depends on change(s) [" + id1) + "], which could not be submitted because:\n") + id1) + ": needs Code-Review;")); org.eclipse.jgit.revwalk.RevCommit head = getRemoteHead(); assertThat(head.getId()).isEqualTo(oldHead.getId()); }
@java.lang.Override public void abandon(com.google.gerrit.extensions.api.changes.AbandonInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { abandon.apply(change, in); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot abandon change", e); } }
private boolean canEditTopicName() { if (getChange().getStatus().isOpen()) { return ((((isOwner()) || (refControl.isOwner())) || (getProjectControl().isOwner())) || (refControl.canPerform(Permission.EDIT_TOPIC_NAME))) || (getProjectControl().isAdmin()); } return refControl.canForceEditTopicName(); }
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, revision)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(refName); ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : revision = rw.parseCommit(ru.getNewObjectId()); update.fireGitRefUpdatedEvent(ru); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult content() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getContent.apply(file); } catch (com.google.gerrit.server.project.NoSuchChangeException | java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot retrieve file content", e); } }
public void createMergesAndHandleConflicts(com.googlesource.gerrit.plugins.automerger.MultipleDownstreamMergeInput mdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.extensions.api.changes.ReviewInput reviewInput = new com.google.gerrit.extensions.api.changes.ReviewInput(); java.util.Map<java.lang.String, java.lang.Short> labels = new java.util.HashMap<java.lang.String, java.lang.Short>(); try { createDownstreamMerges(mdsMergeInput); reviewInput.message = ("Automerging to " + (com.google.common.base.Joiner.on(", ").join(mdsMergeInput.dsBranchMap.keySet()))) + " succeeded!"; reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; } catch (com.googlesource.gerrit.plugins.automerger.FailedMergeException e) { reviewInput.message = e.getDisplayString(); reviewInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; reviewInput.tag = com.googlesource.gerrit.plugins.automerger.DownstreamCreator.MERGE_CONFLICT_TAG; labels.put(config.getAutomergeLabel(), config.getMinAutomergeVote()); } reviewInput.labels = labels; gApi.changes().id(mdsMergeInput.sourceId).revision(mdsMergeInput.currentRevision).review(reviewInput); }
public AccountGroup.UUID getMember() { return getMemberDescription().getGroupUUID(); }
private boolean can(com.google.gerrit.server.permissions.ProjectPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case ACCESS : return ((!(isHidden())) && (isReadable())) || (isOwner()); case READ : return ((!(isHidden())) && (allRefsAreVisible())) || (isOwner()); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
protected void assertResultEquals(java.lang.String message, com.google.gerrit.reviewdb.client.Change expected, com.google.gerrit.extensions.common.ChangeInfo actual) { assert_().withFailureMessage(message).that(actual._number).isEqualTo(expected.getId().get()); }
private java.util.List<com.google.gerrit.extensions.api.projects.TagInfo> listTags() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listTags.apply(checkExists()); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot list tags", e); } }
@java.lang.Override protected void configure() { cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.MemberLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.USERNAME_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.base.Optional<com.google.gerrit.reviewdb.client.Account.Id>>() {}).loader(LdapRealm.UserLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUP_EXIST_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<java.lang.Boolean>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS).loader(LdapRealm.ExistenceLoader.class); cache(com.google.gerrit.server.auth.ldap.LdapModule.GROUPS_BYINCLUDE_CACHE, java.lang.String.class, new com.google.inject.TypeLiteral<com.google.common.collect.ImmutableSet<java.lang.String>>() {}).expireAfterWrite(1, java.util.concurrent.TimeUnit.HOURS); bind(com.google.gerrit.server.account.Realm.class).to(com.google.gerrit.server.auth.ldap.LdapRealm.class).in(Scopes.SINGLETON); bind(com.google.gerrit.server.auth.ldap.Helper.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.account.GroupBackend.class).to(com.google.gerrit.server.auth.ldap.LdapGroupBackend.class); }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.git.BatchUpdate.Context ctx) { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(commit), changeId, ctx.getUser().getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); patchSet.setCreatedOn(ctx.getWhen()); patchSet.setUploader(ctx.getUser().getAccountId()); return change; }
public void setSubmissionId(java.lang.String id) { this.submissionId = id; }
public boolean hasLegacyPermissions() { return hasLegacyPermissions; }
public java.util.List<com.google.gerrit.server.project.ChangeControl> find(com.google.gerrit.reviewdb.client.Change.Id id, com.google.gerrit.server.CurrentUser user) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.InternalChangeQuery query = queryProvider.get().setRequestedFields(com.google.common.collect.ImmutableSet.<java.lang.String>of()); return asChangeControls(query.byLegacyChangeId(id), user); }
@java.lang.Override public com.google.gerrit.server.project.GetConfig.ConfigInfo apply(com.google.gerrit.server.project.ProjectResource resource) { com.google.gerrit.server.project.GetConfig.ConfigInfo result = new com.google.gerrit.server.project.GetConfig.ConfigInfo(); com.google.gerrit.server.project.RefControl refConfig = resource.getControl().controlForRef(GitRepositoryManager.REF_CONFIG); com.google.gerrit.server.project.ProjectState project = resource.getControl().getProjectState(); if (refConfig.isVisible()) { result.useContributorAgreements = project.isUseContributorAgreements(); result.useContentMerge = project.isUseContentMerge(); result.useSignedOffBy = project.isUseSignedOffBy(); result.requireChangeId = project.isRequireChangeID(); } return result; }
public final void timeFormat(com.google.gerrit.extensions.client.GeneralPreferencesInfo.TimeFormat f) { timeFormatRaw((f != null ? f.toString() : null)); }
@java.lang.Override protected java.lang.String usage() { final java.lang.StringBuilder usage = new java.lang.StringBuilder(); usage.append("Available commands"); if (!(getName().isEmpty())) { usage.append(" of "); usage.append(getName()); } usage.append(" are:\n"); usage.append("\n"); int maxLength = -1; for (java.lang.String name : commands.keySet()) { maxLength = java.lang.Math.max(maxLength, name.length()); } java.lang.String format = ("%-" + maxLength) + "s %s"; for (java.lang.String name : com.google.common.collect.Sets.newTreeSet(commands.keySet())) { final com.google.gerrit.sshd.CommandProvider p = commands.get(name); usage.append(" "); usage.append(java.lang.String.format(format, name, com.google.common.base.Strings.nullToEmpty(p.getDescription()))); usage.append("\n"); } usage.append("\n"); usage.append("See '"); if ((getName().indexOf(' ')) < 0) { usage.append(getName()); usage.append(' '); } usage.append("COMMAND --help\' for more information.\n"); usage.append("\n"); return usage.toString(); }
void display(final com.google.gerrit.common.data.ProjectDetail result) { project = result.project; final boolean isall = com.google.gerrit.client.Gerrit.getConfig().getWildProject().equals(project.getNameKey()); projectOptionsPanel.setVisible((!isall)); agreementsPanel.setVisible((!isall)); useContributorAgreements.setVisible(com.google.gerrit.client.Gerrit.getConfig().isUseContributorAgreements()); descTxt.setText(project.getDescription()); useContributorAgreements.setValue(project.isUseContributorAgreements()); useSignedOffBy.setValue(project.isUseSignedOffBy()); useContentMerge.setValue(project.isUseContentMerge()); requireChangeID.setValue(project.isRequireChangeID()); setSubmitType(project.getSubmitType()); saveProject.setEnabled(false); }
@com.google.gwtorm.client.Relation(id = 19) com.google.gerrit.reviewdb.ProjectAccess projects();
void setSubject(java.lang.String subject) { this.subject = subject; }
@java.lang.SuppressWarnings("unchecked") @com.google.gerrit.server.query.change.Rewrite("status:abandoned S=(sortkey_after:*) L=(limit:*)") public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> r20_byAbandonedPrev(@com.google.inject.name.Named("S") final com.google.gerrit.server.query.change.SortKeyPredicate.After s, @com.google.inject.name.Named("L") final com.google.gerrit.server.query.IntPredicate<com.google.gerrit.server.query.change.ChangeData> l) { return new com.google.gerrit.server.query.change.ChangeQueryRewriter.PaginatedSource(50000, s, l.intValue()) { { init("r20_byAbandonedPrev", s, l); } @java.lang.Override com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.Change> scan(com.google.gerrit.reviewdb.ChangeAccess a, java.lang.String key, int limit) throws com.google.gwtorm.client.OrmException { return a.allClosedPrev(Change.Status.ABANDONED.getCode(), key, limit); } @java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.client.OrmException { return ((cd.change(dbProvider).getStatus()) == (Change.Status.ABANDONED)) && (s.match(cd)); } }; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeList result) { if ((result.length()) > 0) { getTab().setTitle(Resources.M.cherryPicks(result.length())); getTab().setChanges(info.project(), revision, convertChangeList(result)); } }
protected static javax.sql.DataSource createDataSource(java.lang.String url) { org.apache.commons.dbcp.BasicDataSource datasource = new org.apache.commons.dbcp.BasicDataSource(); if (url.contains("postgresql")) { datasource.setDriverClassName("org.postgresql.Driver"); } else if (url.contains("h2")) { datasource.setDriverClassName("org.h2.Driver"); } else if (url.contains("mysql")) { datasource.setDriverClassName("com.mysql.jdbc.Driver"); } datasource.setUrl(url); datasource.setMaxActive(50); datasource.setMinIdle(4); datasource.setMaxIdle(16); long evictIdleTimeMs = 1000 * 60; datasource.setMinEvictableIdleTimeMillis(evictIdleTimeMs); datasource.setTimeBetweenEvictionRunsMillis((evictIdleTimeMs / 2)); return datasource; }
private static void populateBottomMenu(com.google.gwt.user.client.ui.RootPanel btmmenu, com.google.gerrit.common.data.HostPageData hpd) { java.lang.String vs = hpd.version; if ((vs == null) || (vs.isEmpty())) { vs = "dev"; } btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(com.google.gerrit.client.Gerrit.C.keyHelp())); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(" | ")); btmmenu.add(new com.google.gwt.user.client.ui.InlineHTML(com.google.gerrit.client.Gerrit.M.poweredBy(vs))); final java.lang.String reportBugText = com.google.gerrit.client.Gerrit.getConfig().getReportBugText(); com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor((reportBugText == null ? com.google.gerrit.client.Gerrit.C.reportBug() : reportBugText), com.google.gerrit.client.Gerrit.getConfig().getReportBugUrl()); a.setTarget("_blank"); a.setStyleName(""); btmmenu.add(new com.google.gwt.user.client.ui.InlineLabel(" | ")); btmmenu.add(a); }
@java.lang.Override public com.google.gerrit.server.group.GroupInfo apply(com.google.gerrit.extensions.restapi.TopLevelResource resource, com.google.gerrit.server.group.CreateGroup.Input input) throws com.google.gerrit.common.errors.NameAlreadyUsedException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { final com.google.gerrit.server.IdentifiedUser me = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (!(me.getCapabilities().canCreateGroup())) { throw new com.google.gerrit.extensions.restapi.AuthException("Cannot create group"); } if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("group name missing"); } com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(new com.google.gerrit.reviewdb.client.AccountGroup.NameKey(input.name)); if (group != null) { return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); } try { group = performCreateGroupFactory.create().createGroup(input.name, null, visibleToAll, null, java.util.Collections.singleton(me.getAccountId()), null); } catch (com.google.gerrit.common.errors.PermissionDeniedException e) { throw new com.google.gerrit.extensions.restapi.AuthException(e.getMessage()); } return new com.google.gerrit.server.group.GroupInfo(com.google.gerrit.common.data.GroupDescriptions.forAccountGroup(group)); }
public static void deleteChange(int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.change(id).delete(cb); }
private void checkSubmitRulesAndState(com.google.gerrit.server.git.ChangeSet cs) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { java.lang.StringBuilder msgbuf = new java.lang.StringBuilder(); java.util.List<com.google.gerrit.reviewdb.client.Change.Id> problemChanges = new java.util.ArrayList<>(); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { try { if ((cd.change().getStatus()) != (Change.Status.NEW)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((("Change " + (cd.change().getChangeId())) + " is in state ") + (cd.change().getStatus()))); } else { com.google.gerrit.server.git.MergeOp.checkSubmitRule(cd); } } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { msgbuf.append(((e.getMessage()) + "\n")); problemChanges.add(cd.getId()); } } java.lang.String reason = msgbuf.toString(); if (!(reason.isEmpty())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(((((("The change could not be " + "submitted because it depends on change(s) ") + (problemChanges.toString())) + ", which could not be submitted ") + "because:\n") + reason)); } }
private void showTextBox() { if ((textBox) == null) { textBox = new com.google.gwt.user.client.ui.TextBox(); textBox.setText(getText()); textBox.setVisibleLength(visibleLen); textBox.setReadOnly(true); textBox.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(final com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.isControlKeyDown()) || (event.isMetaKeyDown())) { switch (event.getCharCode()) { case 'c' : case 'x' : com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { public void execute() { hideTextBox(); } }); break; } } } }); textBox.addBlurHandler(new com.google.gwt.event.dom.client.BlurHandler() { @java.lang.Override public void onBlur(final com.google.gwt.event.dom.client.BlurEvent event) { hideTextBox(); } }); content.insert(textBox, 1); } textLabel.setVisible(false); textBox.setVisible(true); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.user.client.Command() { @java.lang.Override public void execute() { textBox.selectAll(); textBox.setFocus(true); } }); }
public org.eclipse.jgit.lib.Config getEffective() { return config; }
public void updateSuperProjects() throws com.google.gerrit.server.git.SubmoduleException { com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Project.NameKey> projects = getProjectsInOrder(); if (projects == null) { return; } com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Branch.NameKey> dst = branchesByProject(); java.util.LinkedHashSet<com.google.gerrit.reviewdb.client.Project.NameKey> superProjects = new java.util.LinkedHashSet<>(); try { for (com.google.gerrit.reviewdb.client.Project.NameKey project : projects) { if (dst.containsKey(project)) { superProjects.add(project); orm.openRepo(project, false); orm.getRepo(project).resetUpdate(); for (com.google.gerrit.reviewdb.client.Branch.NameKey branch : dst.get(project)) { com.google.gerrit.server.git.SubmoduleOp.GitlinkOp op = new com.google.gerrit.server.git.SubmoduleOp.GitlinkOp(branch); orm.getRepo(project).getUpdate().addRepoOnlyOp(op); } } } com.google.gerrit.server.git.BatchUpdate.execute(orm.batchUpdates(superProjects), Listener.NONE); } catch (com.google.gerrit.extensions.restapi.RestApiException | com.google.gerrit.server.git.UpdateException | java.io.IOException | com.google.gerrit.server.project.NoSuchProjectException e) { throw new com.google.gerrit.server.git.SubmoduleException("Cannot update gitlinks", e); } }
private void loadCommitData() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException, org.eclipse.jgit.errors.RepositoryNotFoundException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = change().currentPatchSetId(); com.google.gerrit.reviewdb.client.PatchSet ps = db.patchSets().get(psId); if (ps == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(legacyId); } java.lang.String sha1 = ps.getRevision().get(); org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(change().getProject()); try { org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit c = walk.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(sha1)); commitMessage = c.getFullMessage(); commitFooters = c.getFooterLines(); } finally { walk.release(); } } finally { repo.close(); } }
public java.lang.String generate(org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.revwalk.RevCommit mergeTip, com.google.gerrit.server.project.ChangeControl ctl, java.lang.String current) { checkNotNull(original.getRawBuffer()); if (mergeTip != null) { checkNotNull(mergeTip.getRawBuffer()); } for (com.google.gerrit.server.git.ChangeMessageModifier changeMessageModifier : changeMessageModifiers) { current = changeMessageModifier.onSubmit(current, original, mergeTip, ctl); checkNotNull(current, ((changeMessageModifier.getClass().getName()) + ".OnSubmit returned null instead of new commit message")); } return current; }
void set(com.google.gerrit.reviewdb.client.PatchSet.Id id, com.google.gwtexpui.globalkey.client.NpTextArea content) { this.id = id; this.textArea = content; }
public java.lang.Iterable<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = com.google.common.collect.Lists.newArrayList(); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(new com.google.gerrit.extensions.common.WebLinkInfo(webLink.getLinkName(), webLink.getImageUrl(), webLink.getPatchSetUrl(project, commit))); } return links; }
private void authFromQueryParameter(java.lang.String accessToken) { key = new com.google.gerrit.httpd.WebSessionManager.Key(accessToken); val = manager.get(key); if ((val) != null) { okPaths.add(AccessPath.REST_API); } }
@org.junit.After public void tearDown() { com.google.gerrit.testutil.TestTimeUtil.useSystemTime(); }
private void logCanceledWhileRunningException(org.eclipse.jgit.errors.TransportException e) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info(((("Cannot replicate to " + (uri)) + ".") + " It was canceled while running"), e); }
com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.server.project.ChangeControl ctl, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit, boolean addLinks, boolean fillCommit) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = ctl.getProject().getNameKey(); com.google.gerrit.extensions.common.CommitInfo info = new com.google.gerrit.extensions.common.CommitInfo(); if (fillCommit) { info.commit = commit.name(); } info.parents = new java.util.ArrayList(commit.getParentCount()); info.author = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getAuthorIdent()); info.committer = com.google.gerrit.server.CommonConverters.toGitPerson(commit.getCommitterIdent()); info.subject = commit.getShortMessage(); info.message = commit.getFullMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, commit.name()); info.webLinks = (links.isEmpty()) ? null : links.toList(); } for (org.eclipse.jgit.revwalk.RevCommit parent : commit.getParents()) { rw.parseBody(parent); com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.name(); i.subject = parent.getShortMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getParentLinks(project, parent.name()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); } info.parents.add(i); } return info; }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(db.patchComments().byPatchSet(psId).toList()); } java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(publishedByPatchSet(db, notes, psId)); java.lang.Iterable<java.lang.String> filtered = getDraftRefs(notes.getChangeId()); for (java.lang.String refName : filtered) { com.google.gerrit.reviewdb.client.Account.Id account = Account.Id.fromRefPart(refName); if (account != null) { comments.addAll(draftByPatchSetAuthor(db, psId, account, notes)); } } return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }
@org.junit.Test public void missingNameEntry() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.RefRename ru = repo.renameRef(com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g1.id)), com.google.gerrit.reviewdb.client.RefNames.refsGroups(new com.google.gerrit.reviewdb.client.AccountGroup.UUID(com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID))); org.eclipse.jgit.lib.RefUpdate.Result result = ru.rename(); assertThat(result).isEqualTo(Result.RENAMED); } assertError((("group " + (com.google.gerrit.acceptance.api.group.GroupsConsistencyIT.BOGUS_UUID)) + " has no entry in name map")); }
@java.lang.Override protected void preDisplay(final com.google.gerrit.client.reviewdb.Account result) { display(result); }
@org.junit.After public void cleanupIndex() { if ((com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo) != null) { com.google.gerrit.elasticsearch.ElasticTestUtils.deleteIndexes(com.google.gerrit.elasticsearch.ElasticQueryChangesTest.nodeInfo.node, com.google.gerrit.elasticsearch.ElasticQueryChangesTest.INDEX_NAME); com.google.gerrit.elasticsearch.ElasticQueryChangesTest.createIndexes(); } }
@java.lang.Override int getCmLine(int line, com.google.gerrit.client.diff.DisplaySide side) { int res = java.util.Collections.binarySearch(chunks, new com.google.gerrit.client.diff.UnifiedDiffChunkInfo(side, line, 0, 0, false), getDiffChunkComparator()); if (res >= 0) { return chunks.get(res).getCmLine(); } else { res = (-res) - 1; if (res > 0) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo info = chunks.get((res - 1)); if (((side == (DisplaySide.A)) && (info.isEdit())) && ((info.getSide()) == (DisplaySide.B))) { com.google.gerrit.client.diff.UnifiedDiffChunkInfo delete = chunks.get((res - 2)); if (line <= (delete.getEnd())) { return ((delete.getCmLine()) + line) - (delete.getStart()); } else { return (((((delete.getCmLine()) + line) - (delete.getStart())) + (info.getEnd())) - (info.getStart())) + 1; } } else if (side == (info.getSide())) { return ((info.getCmLine()) + line) - (info.getStart()); } else { return ((info.getCmLine()) + (getLineMapper().lineOnOther(side, line).getLine())) - (info.getStart()); } } else { return line; } } }
@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> byGroup(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> revisions(com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.server.query.change.ChangeData cd, java.util.Map<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> map, java.util.Optional<com.google.gerrit.reviewdb.client.PatchSet.Id> limitToPsId, com.google.gerrit.extensions.common.ChangeInfo changeInfo) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> res = new java.util.LinkedHashMap<>(); try (org.eclipse.jgit.lib.Repository repo = openRepoIfNecessary(cd.project());org.eclipse.jgit.revwalk.RevWalk rw = newRevWalk(repo)) { for (com.google.gerrit.reviewdb.client.PatchSet in : map.values()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = in.getId(); boolean want = false; if (has(com.google.gerrit.server.change.ALL_REVISIONS)) { want = true; } else if (limitToPsId.isPresent()) { want = id.equals(limitToPsId.get()); } else { want = id.equals(cd.change().currentPatchSetId()); } if (want && (ctl.isPatchVisible(in, db.get()))) { res.put(in.getRevision().get(), toRevisionInfo(cd, in, repo, rw, false, changeInfo)); } } return res; } }
private com.google.gerrit.server.group.InternalGroup createGroupInNoteDbWithRetry(com.google.gerrit.server.group.db.InternalGroupCreation groupCreation, com.google.gerrit.server.group.db.InternalGroupUpdate groupUpdate) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try { return retryHelper.execute(RetryHelper.ActionType.GROUP_UPDATE, () -> createGroupInNoteDb(groupCreation, groupUpdate), com.google.gerrit.server.git.LockFailureException.class::isInstance); } catch (java.lang.Exception e) { com.google.common.base.Throwables.throwIfUnchecked(e); com.google.common.base.Throwables.throwIfInstanceOf(e, java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e, com.google.gwtorm.server.OrmDuplicateKeyException.class); throw new java.io.IOException(e); } }
com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit create(com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit edit, int shiftedAmount, java.lang.String adjustedFilePath);
private java.lang.String link(final com.google.gerrit.client.projects.ProjectInfo item) { return com.google.gerrit.client.Dispatcher.toProjectAdmin(item.name_key(), ProjectScreen.INFO); }
public void testResolve() throws java.net.UnknownHostException { assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve("*:1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("*", 80)); assertEquals(new java.net.InetSocketAddress(1234), com.google.gerrit.server.util.SocketUtil.resolve(":1234", 80)); assertEquals(new java.net.InetSocketAddress(80), com.google.gerrit.server.util.SocketUtil.resolve("", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("1:2:3:4:5:6:7:8"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[1:2:3:4:5:6:7:8]", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 1234), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]:1234", 80)); assertEquals(new java.net.InetSocketAddress(java.net.InetAddress.getByName("localhost"), 80), com.google.gerrit.server.util.SocketUtil.resolve("[localhost]", 80)); java.lang.String badname = "this-name-is-not-supposed-to-resolve-on-your-network"; try { com.google.gerrit.server.util.SocketUtil.resolve((badname + ":12"), 80); fail("did not throw exception"); } catch (java.lang.IllegalArgumentException e) { assertEquals((("unknown host: " + badname) + ":12"), e.getMessage()); } }
private com.google.gerrit.reviewdb.client.ChangeMessage newMessage(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { java.lang.StringBuilder msg = new java.lang.StringBuilder(); msg.append("Restored"); if (!(com.google.common.base.Strings.nullToEmpty(input.message).trim().isEmpty())) { msg.append("\n\n"); msg.append(input.message.trim()); } com.google.gerrit.reviewdb.client.ChangeMessage message = new com.google.gerrit.reviewdb.client.ChangeMessage(new com.google.gerrit.reviewdb.client.ChangeMessage.Key(change.getId(), com.google.gerrit.server.ChangeUtil.messageUUID(ctx.getDb())), caller.getAccountId(), ctx.getWhen(), change.currentPatchSetId()); message.setMessage(msg.toString()); return message; }
private org.eclipse.jgit.revwalk.RevCommit rebaseCommit(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx, org.eclipse.jgit.revwalk.RevCommit original, org.eclipse.jgit.lib.ObjectId base) throws com.google.gerrit.extensions.restapi.MergeConflictException, com.google.gerrit.extensions.restapi.ResourceConflictException, java.io.IOException { org.eclipse.jgit.revwalk.RevCommit parentCommit = original.getParent(0); if (base.equals(parentCommit)) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Change is already up to date."); } org.eclipse.jgit.merge.ThreeWayMerger merger = newMergeUtil().newThreeWayMerger(ctx.getRepository(), ctx.getInserter()); merger.setBase(parentCommit); merger.merge(original, base); if ((merger.getResultTreeId()) == null) { throw new com.google.gerrit.extensions.restapi.MergeConflictException("The change could not be rebased due to a conflict during merge."); } org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(merger.getResultTreeId()); cb.setParentId(base); cb.setAuthor(original.getAuthorIdent()); cb.setMessage(original.getFullMessage()); if ((committerIdent) != null) { cb.setCommitter(committerIdent); } else { cb.setCommitter(ctx.getUser().asIdentifiedUser().newCommitterIdent(ctx.getWhen(), ctx.getTimeZone())); } org.eclipse.jgit.lib.ObjectId objectId = ctx.getInserter().insert(cb); ctx.getInserter().flush(); return ctx.getRevWalk().parseCommit(objectId); }
private void ensurePermitted(com.google.gerrit.server.project.ChangeControl changeControl) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gwtorm.server.OrmException { if (!(changeControl.canAddPatchSet(reviewDb.get()))) { throw new com.google.gerrit.extensions.restapi.AuthException("Not allowed to edit a change."); } }
private com.google.gerrit.server.events.DependencyAttribute newDependsOn(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { com.google.gerrit.server.events.DependencyAttribute d = newDependencyAttribute(c, ps); d.isCurrentPatchSet = c.currPatchSetId().equals(ps.getId()); return d; }
public void run(java.lang.String section, java.lang.String key, java.lang.String password) throws java.lang.Exception { com.google.gerrit.pgm.init.api.Section passwordSection = sections.get(section, null); if (ui.isBatch()) { passwordSection.setSecure(key, password); } else { ui.header("Set password for [%s]", section); passwordSection.passwordForKey("Enter password", key); } }
protected void bccWatchesNotifyAllComments() { try { for (final com.google.gerrit.reviewdb.AccountProjectWatch w : getWatches()) { if (w.isNotifyAllComments()) { add(RecipientType.BCC, w.getAccountId()); } } } catch (com.google.gwtorm.client.OrmException err) { } }
@java.lang.Override public void deleteVote(com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteVote.apply(new com.google.gerrit.server.change.VoteResource(reviewer, input.label), input); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot delete vote", e); } }
@java.lang.Override public java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> onCommitReceived(CommitReceivedEvent receiveEvent) throws com.google.gerrit.server.git.validators.CommitValidationException { if (!(allUsers.equals(receiveEvent.project.getNameKey()))) { return java.util.Collections.emptyList(); } if (receiveEvent.command.getRefName().startsWith(MagicBranch.NEW_CHANGE)) { return java.util.Collections.emptyList(); } com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRef(receiveEvent.refName); if (accountId == null) { return java.util.Collections.emptyList(); } try { java.util.List<java.lang.String> errorMessages = accountValidator.validate(accountId, receiveEvent.revWalk, receiveEvent.command.getOldId(), receiveEvent.commit); if (!(errorMessages.isEmpty())) { throw new com.google.gerrit.server.git.validators.CommitValidationException("invalid account configuration", errorMessages.stream().map(( m) -> new com.google.gerrit.server.git.validators.CommitValidationMessage(m, true)).collect(java.util.stream.Collectors.toList())); } } catch (java.io.IOException e) { java.lang.String m = java.lang.String.format("Validating update for account %s failed", accountId.get()); com.google.gerrit.server.git.validators.CommitValidators.log.error(m, e); throw new com.google.gerrit.server.git.validators.CommitValidationException(m, e); } return java.util.Collections.emptyList(); }
java.util.Set<java.lang.String> getCheckedRefs() { java.util.Set<java.lang.String> refs = new java.util.HashSet<>(); for (int row = 1; row < (table.getRowCount()); row++) { com.google.gerrit.client.projects.TagInfo k = getRowItem(row); if (((k != null) && ((table.getWidget(row, 1)) instanceof com.google.gwt.user.client.ui.CheckBox)) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { refs.add(k.ref()); } } return refs; }
private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(null); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }
private void onLogin() { hideError(); final java.lang.String user = username.getText(); if ((user == null) || (user.equals(""))) { showError(Util.C.usernameRequired()); username.setFocus(true); return; } final java.lang.String pass = password.getText(); if ((pass == null) || (pass.equals(""))) { showError(Util.C.passwordRequired()); password.setFocus(true); return; } enable(false); Util.SVC.authenticate(user, pass, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.common.auth.userpass.LoginResult>() { public void onSuccess(final com.google.gerrit.common.auth.userpass.LoginResult result) { if (result.success) { java.lang.String to = token; if (!(to.startsWith("/"))) { to = "/" + to; } if ((result.isNew) && (!(token.startsWith(((com.google.gerrit.common.PageLinks.REGISTER) + "/"))))) { to = (com.google.gerrit.common.PageLinks.REGISTER) + to; } com.google.gwt.user.client.Window.Location.replace((((com.google.gwt.user.client.Window.Location.getPath()) + "login") + to)); } else { final java.lang.String message; switch (result.getError()) { case AUTHENTICATION_UNAVAILABLE : message = Util.M.authenticationUnavailable(result.getAuthType()); break; case INVALID_LOGIN : default : message = Util.C.invalidLogin(); } showError(message); enable(true); password.selectAll(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { password.setFocus(true); } }); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { super.onFailure(caught); enable(true); } }); }
@org.junit.Test public void testGcWithoutCapability_Error() throws java.lang.Exception { userSshSession.exec("gerrit gc --all"); assertThat(userSshSession.hasError()).isTrue(); java.lang.String error = userSshSession.getError(); assertThat(error).isNotNull(); assertError(("One of the following capabilities is required to access this" + " resource: [runGC, maintainServer]"), error); }
@org.kohsuke.args4j.Argument(index = 0, required = true, multiValued = true, metaVar = "COMMIT", usage = "changes to modify") void addChange(java.lang.String token) { try { changes.addAll(parseChangeId(token)); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { throw new java.lang.IllegalArgumentException(e.getMessage(), e); } catch (com.google.gwtorm.client.OrmException e) { throw new java.lang.IllegalArgumentException("database is down", e); } }
public synchronized void deleteProjectWatches(com.google.gerrit.reviewdb.client.Account.Id accountId, java.util.Collection<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey> projectWatchKeys) throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.server.account.WatchConfig watchConfig = read(accountId); java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.server.account.WatchConfig.NotifyType>> projectWatches = watchConfig.getProjectWatches(); boolean commit = false; for (com.google.gerrit.server.account.WatchConfig.ProjectWatchKey key : projectWatchKeys) { if ((projectWatches.remove(key)) != null) { commit = true; } } if (commit) { commit(watchConfig); } }
public static com.google.gerrit.server.diff.PatchListKey againstCommit(org.eclipse.jgit.lib.AnyObjectId otherCommitId, org.eclipse.jgit.lib.AnyObjectId newId, com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace whitespace) { return new com.google.gerrit.server.diff.PatchListKey(otherCommitId, newId, whitespace, com.google.gerrit.server.diff.PatchListKey.Algorithm.OPTIMIZED_DIFF); }
public static com.google.gerrit.server.patch.PatchListLoader.EditsDueToRebaseResult create(java.util.List<org.eclipse.jgit.diff.DiffEntry> relevantDiffEntries, com.google.common.collect.Multimap<java.lang.String, com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebasePerFilePath) { return new com.google.gerrit.server.patch.AutoValue_PatchListLoader_EditsDueToRebaseResult(relevantDiffEntries, editsDueToRebasePerFilePath); }
private void updateHead(org.eclipse.jgit.transport.URIish replicateURI, java.lang.String newHead) { if (!(replicateURI.isRemote())) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadLocally(replicateURI, newHead); } else if (com.googlesource.gerrit.plugins.replication.ReplicationQueue.isSSH(replicateURI)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.updateHeadRemoteSsh(replicateURI, newHead); } else { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.warn(java.lang.String.format(("Cannot update HEAD of project on remote site %s." + (" Only local paths and SSH URLs are supported" + " for remote HEAD update.")), replicateURI)); } }
@java.lang.Override public void onSuccess(com.googlesource.gerrit.plugins.verifystatus.client.ConfigInfo info) { if (info.showJobsSummaryPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK, new com.googlesource.gerrit.plugins.verifystatus.client.JobsSummaryPanel.Factory()); } if (info.showJobsPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel((info.showJobsBelowRelatedInfoBlock() ? com.google.gerrit.client.GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_RELATED_INFO_BLOCK : com.google.gerrit.client.GerritUiExtensionPoint.CHANGE_SCREEN_BELOW_CHANGE_INFO_BLOCK), new com.googlesource.gerrit.plugins.verifystatus.client.JobsPanel.Factory(info)); } if (info.showJobsDropDownPanel()) { com.google.gerrit.plugin.client.Plugin.get().panel(GerritUiExtensionPoint.CHANGE_SCREEN_HEADER_RIGHT_OF_POP_DOWNS, new com.googlesource.gerrit.plugins.verifystatus.client.JobsDropDownPanel.Factory(info)); } }
@java.lang.Override protected void onInitUI() { super.onInitUI(); setPageTitle(Util.C.groupListTitle()); groups = new com.google.gerrit.client.admin.GroupTable(true, com.google.gerrit.common.PageLinks.ADMIN_GROUPS); add(groups); final com.google.gwt.user.client.ui.VerticalPanel fp = new com.google.gwt.user.client.ui.VerticalPanel(); fp.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); fp.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); fp.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); fp.add(addNew); add(fp); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }
@org.junit.Test public void evictProjectList() throws java.lang.Exception { configureMocksFor(Constants.PROJECT_LIST); verifyResponseIsOK(); }
private com.google.gerrit.extensions.common.GerritInfo getGerritInfo(org.eclipse.jgit.lib.Config cfg, com.google.gerrit.server.config.AllProjectsName allProjectsName, com.google.gerrit.server.config.AllUsersName allUsersName) { com.google.gerrit.extensions.common.GerritInfo info = new com.google.gerrit.extensions.common.GerritInfo(); info.allProjects = allProjectsName.get(); info.allUsers = allUsersName.get(); info.reportBugUrl = cfg.getString("gerrit", null, "reportBugUrl"); info.reportBugText = cfg.getString("gerrit", null, "reportBugText"); info.docUrl = getDocUrl(cfg); info.docSearch = docSearcher.isAvailable(); info.editGpgKeys = com.google.gerrit.server.config.GetServerInfo.toBoolean(((enableSignedPush) && (cfg.getBoolean("gerrit", null, "editGpgKeys", true)))); info.webUis = java.util.EnumSet.noneOf(com.google.gerrit.extensions.client.UiType.class); if (gerritOptions.enableGwtUi()) { info.webUis.add(UiType.GWT); } if (gerritOptions.enablePolyGerrit()) { info.webUis.add(UiType.POLYGERRIT); } return info; }
public void setup() throws java.lang.Exception { org.powermock.api.easymock.PowerMock.mockStatic(com.vmware.gerrit.owners.common.JgitWrapper.class); db = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.reviewdb.server.ReviewDb.class); repository = org.powermock.api.easymock.PowerMock.createMock(org.eclipse.jgit.lib.Repository.class); resolver = org.powermock.api.easymock.PowerMock.createMock(com.google.gerrit.server.account.AccountResolver.class); parser = new com.vmware.gerrit.owners.common.ConfigurationParser(); resolvingEmailToAccountIdMocking(); }
private void setIgnoreWhitespace(com.google.gerrit.extensions.client.DiffPreferencesInfo.Whitespace s) { for (int i = 0; i < (ignoreWhitespace.getItemCount()); i++) { if (ignoreWhitespace.getValue(i).equals(s.name())) { ignoreWhitespace.setSelectedIndex(i); return; } } ignoreWhitespace.setSelectedIndex(0); }
private java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> getPathEdits(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = new java.util.LinkedList<>(); for (com.google.gerrit.server.edit.tree.TreeModification treeModification : treeModifications) { pathEdits.addAll(treeModification.getPathEdits(repository)); } return pathEdits; }
private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); statusText.setInnerText(com.google.gerrit.client.changes.Util.toLongString(info.status())); boolean current = (info.status().isOpen()) && (revision.equals(info.current_revision())); boolean canSubmit = labels.set(info, current); renderOwner(info); renderReviewers(info); renderActionTextDate(info); renderRevisions(info); renderHistory(info); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); changeIdText.setInnerText(java.lang.String.valueOf(info.legacy_id())); projectText.setInnerText(info.project()); branchText.setInnerText(info.branch()); idText.setText(("Change-Id: " + (info.change_id()))); idText.setPreviewText(info.change_id()); reload.set(info); topic.set(info); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); quickApprove.set(info, revision); if (com.google.gerrit.client.Gerrit.isSignedIn()) { initEditMessageAction(); replyAction = new com.google.gerrit.client.change.ReplyAction(info, revision, style, reply); if (topic.canEdit()) { keysAction.add(new com.google.gwtexpui.globalkey.client.KeyCommand(0, 't', Util.C.keyEditTopic()) { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { topic.onEdit(); } }); } } if (current) { loadMergeable(info.status(), canSubmit); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append(": "); sb.append(info.subject()); } setWindowTitle(sb.toString()); }
java.util.Map<com.google.gerrit.server.account.WatchConfig.ProjectWatchKey, java.util.Set<com.google.gerrit.reviewdb.client.AccountProjectWatch.NotifyType>> getProjectWatches() { checkLoaded(); return projectWatches; }
static boolean isActive(com.google.gerrit.server.config.PluginConfig cfg) { return (cfg.getStringList(com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator.KEY_CHECK_BLOCKED_KEYWORD_PATTERN).length) > 0; }
void setEdit(boolean edit) { if (edit) { setOpen(true); removeStyleName(draftStyle.view()); addStyleName(draftStyle.edit()); editArea.setText(contentPanelMessage.getText()); editArea.setFocus(true); } else { removeStyleName(draftStyle.edit()); addStyleName(draftStyle.view()); } resizePaddingWidget(); }
private net.codemirror.lib.Configuration getConfig() { return net.codemirror.lib.Configuration.create().set("readOnly", false).set("cursorBlinkRate", 0).set("cursorHeight", 0.85).set("lineNumbers", true).set("tabSize", 4).set("lineWrapping", false).set("styleSelectedText", true).set("showTrailingSpace", true).set("keyMap", "default").set("mode", type); }
public void dispatchDeleteSubgroups(com.google.gerrit.reviewdb.client.Account.Id actor, com.google.gerrit.reviewdb.client.AccountGroup.UUID updatedGroup, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> deletedSubgroups, java.sql.Timestamp deletedOn) { for (com.google.gerrit.server.audit.group.GroupAuditListener auditListener : groupAuditListeners) { try { com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent event = com.google.gerrit.server.audit.group.GroupSubgroupAuditEvent.create(actor, updatedGroup, deletedSubgroups, deletedOn); auditListener.onDeleteSubgroups(event); } catch (java.lang.RuntimeException e) { com.google.gerrit.server.audit.AuditService.log.error("failed to log delete groups from group event", e); } } }
@org.junit.Test public void approvalsOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putApproval("Verified", ((short) (1))); update.putApproval("Code-Review", ((short) (-1))); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertThat(notes.getApprovals().keySet()).containsExactly(c.currentPatchSetId()); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = notes.getApprovals().get(c.currentPatchSetId()); assertThat(psas).hasSize(2); assertThat(psas.get(0).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(0).getAccountId().get()).isEqualTo(1); assertThat(psas.get(0).getLabel()).isEqualTo("Code-Review"); assertThat(psas.get(0).getValue()).isEqualTo(((short) (-1))); assertThat(psas.get(0).getGranted()).isEqualTo(truncate(after(c, 2000))); assertThat(psas.get(1).getPatchSetId()).isEqualTo(c.currentPatchSetId()); assertThat(psas.get(1).getAccountId().get()).isEqualTo(1); assertThat(psas.get(1).getLabel()).isEqualTo("Verified"); assertThat(psas.get(1).getValue()).isEqualTo(((short) (1))); assertThat(psas.get(1).getGranted()).isEqualTo(psas.get(0).getGranted()); }
private java.util.Collection<T> attemptUpdateAsBatch(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { java.util.Collection<T> inserts = null; try { java.sql.PreparedStatement ps = null; try { int cnt = 0; java.util.List<T> allInstances = new java.util.ArrayList<>(); for (final T o : instances) { if (ps == null) { ps = schema.getConnection().prepareStatement(getUpdateOneSql()); } bindOneUpdate(ps, o); ps.addBatch(); allInstances.add(o); cnt++; } if (0 < cnt) { com.google.common.base.Preconditions.checkNotNull(ps); final int[] states = ps.executeBatch(); if (states == null) { inserts = allInstances; } else { int i = 0; for (T o : allInstances) { if (((states.length) <= i) || ((states[i]) != 1)) { if (inserts == null) { inserts = new java.util.ArrayList<>((cnt - i)); } inserts.add(o); } i++; } } } } finally { if (ps != null) { ps.close(); } } } catch (java.sql.SQLException e) { throw convertError("update", e); } return inserts; }
@org.junit.Test public void addedReviewersGetNotified() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo("Foo Bar", "foo.bar@gerritcodereview.com"); for (com.google.gerrit.extensions.client.ReviewerState state : com.google.common.collect.ImmutableList.of(ReviewerState.CC, ReviewerState.REVIEWER)) { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput input = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); input.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRfcAddressString(acc); input.state = state; gApi.changes().id(r.getChangeId()).addReviewer(input); java.util.List<com.google.gerrit.testutil.FakeEmailSender.Message> messages = sender.getMessages(); assertThat(messages).hasSize(1); assertThat(messages.get(0).rcpt()).containsExactly(com.google.gerrit.server.mail.Address.parse(input.reviewer)); sender.clear(); } }
@java.lang.Override public UiAction.Description getDescription(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.gerrit.reviewdb.client.PatchSet.Id current = rsrc.getChange().currentPatchSetId(); try { return new com.google.gerrit.extensions.webui.UiAction.Description().setTitle(java.lang.String.format("Publish Revision %d", rsrc.getPatchSet().getPatchSetId())).setVisible((((rsrc.getPatchSet().isDraft()) && (rsrc.getPatchSet().getId().equals(current))) && (rsrc.getControl().canPublish(dbProvider.get())))); } catch (com.google.gwtorm.server.OrmException e) { throw new java.lang.IllegalStateException(e); } }
private static java.util.Properties readAttributes() throws java.io.IOException { java.util.Properties attributes = new java.util.Properties(); try (java.io.InputStream in = com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getResourceAsStream("asciidoctor.properties")) { attributes.load(in); } return attributes; }
@java.lang.Override public synchronized void init(javax.servlet.FilterConfig config) throws javax.servlet.ServletException { super.init(config); setDefaultFields(config); for (com.google.gitiles.GitilesView.Type type : GitilesView.Type.values()) { if (!(servlets.containsKey(type))) { servlets.put(type, getDefaultHandler(type)); } } javax.servlet.Filter repositoryFilter = new org.eclipse.jgit.http.server.RepositoryFilter(resolver); javax.servlet.Filter viewFilter = new com.google.gitiles.ViewFilter(accessFactory, urls, visibilityCache); javax.servlet.Filter dispatchFilter = new com.google.gitiles.GitilesFilter.DispatchFilter(filters, servlets); org.eclipse.jgit.http.server.glue.ServletBinder root = serveRegex(com.google.gitiles.GitilesFilter.ROOT_REGEX).through(viewFilter); if ((gitwebRedirect) != null) { root.through(gitwebRedirect); } root.through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); serveRegex(com.google.gitiles.GitilesFilter.REPO_PATH_REGEX).through(repositoryFilter).through(viewFilter).through(dispatchFilter); initialized = true; }
public java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sort(java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> incoming) throws java.io.IOException { final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); final java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> sort = new java.util.HashSet<com.google.gerrit.server.git.CodeReviewCommit>(incoming); while (!(sort.isEmpty())) { final com.google.gerrit.server.git.CodeReviewCommit n = com.google.gerrit.server.git.RebaseSorter.removeOne(sort); rw.resetRetain(canMergeFlag); rw.markStart(n); for (org.eclipse.jgit.revwalk.RevCommit c : accepted) { rw.markUninteresting(c); } com.google.gerrit.server.git.CodeReviewCommit c; final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> contents = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); while ((c = ((com.google.gerrit.server.git.CodeReviewCommit) (rw.next()))) != null) { if ((!(c.has(canMergeFlag))) || (!(incoming.contains(c)))) { if ((n.missing) == null) { n.setStatusCode(CommitMergeStatus.MISSING_DEPENDENCY); n.missing = new java.util.ArrayList<com.google.gerrit.server.git.CodeReviewCommit>(); } n.missing.add(c); } else { contents.add(c); } } if ((n.getStatusCode()) == (CommitMergeStatus.MISSING_DEPENDENCY)) { continue; } sort.removeAll(contents); java.util.Collections.reverse(contents); sorted.removeAll(contents); sorted.addAll(contents); } return sorted; }
public static java.lang.String messageUUID(final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final byte[] raw = new byte[8]; com.google.gerrit.server.ChangeUtil.fill(raw, db); return com.google.common.base.CharMatcher.is('A').trimLeadingFrom(com.google.common.base.CharMatcher.is('=').trimTrailingFrom(org.eclipse.jgit.util.Base64.encodeBytes(raw))).replace('+', '.').replace('/', '-'); }
protected boolean includeAuthorInfo() { return false; }
@java.lang.Override protected com.google.gerrit.server.git.MergeTip _run(com.google.gerrit.server.git.CodeReviewCommit branchTip, java.util.Collection<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.CodeReviewCommit> sorted = args.mergeUtil.reduceToMinimalMerge(args.mergeSorter, toMerge); com.google.gerrit.server.git.MergeTip mergeTip; if (branchTip == null) { mergeTip = new com.google.gerrit.server.git.MergeTip(sorted.get(0), toMerge); branchTip = sorted.remove(0); } else { mergeTip = new com.google.gerrit.server.git.MergeTip(branchTip, toMerge); branchTip = args.mergeUtil.getFirstFastForward(branchTip, args.rw, sorted); } mergeTip.moveTipTo(branchTip, branchTip); while (!(sorted.isEmpty())) { com.google.gerrit.server.git.CodeReviewCommit mergedFrom = sorted.remove(0); org.eclipse.jgit.lib.PersonIdent serverIdent = args.serverIdent.get(); org.eclipse.jgit.lib.PersonIdent caller = args.caller.newCommitterIdent(serverIdent.getWhen(), serverIdent.getTimeZone()); branchTip = args.mergeUtil.mergeOneCommit(caller, serverIdent, args.repo, args.rw, args.inserter, args.canMergeFlag, args.destBranch, branchTip, mergedFrom); mergeTip.moveTipTo(branchTip, mergedFrom); } args.mergeUtil.markCleanMerges(args.rw, args.canMergeFlag, branchTip, args.alreadyAccepted); setRefLogIdent(); return mergeTip; }
public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> currentApprovals(com.google.inject.Provider<com.google.gerrit.reviewdb.server.ReviewDb> db) throws com.google.gwtorm.server.OrmException { if ((currentApprovals) == null) { com.google.gerrit.reviewdb.client.Change c = change(db); if (c == null) { currentApprovals = java.util.Collections.emptyList(); } else if (((approvals) != null) && (((limitedIds) == null) || (limitedIds.contains(c.currentPatchSetId())))) { return approvals.get(c.currentPatchSetId()); } else { currentApprovals = db.get().patchSetApprovals().byPatchSet(c.currentPatchSetId()).toList(); } } return currentApprovals; }
private void assertWriteGroupToReviewDbBlockedException(java.lang.Exception e) throws java.lang.Exception { java.lang.Throwable t = com.google.common.base.Throwables.getRootCause(e); assertThat(t).isInstanceOf(com.google.gwtorm.server.OrmException.class); assertThat(t.getMessage()).isEqualTo("Updates to groups in ReviewDb are blocked"); }
@java.lang.Override public void addEmail(com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), input.email); try { createEmailFactory.create(input.email).apply(rsrc, input); } catch (com.google.gerrit.common.errors.EmailException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot add email", e); } }
com.google.gerrit.server.git.validators.MergeValidators create();
@org.kohsuke.args4j.Option(name = "--member", aliases = { "-m" }, metaVar = "USERNAME", usage = "initial set of users to become members of the group") void addMember(com.google.gerrit.reviewdb.client.Account.Id id) { initialMembers.add(id); }
public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, com.google.gerrit.extensions.common.AccountInfo reviewer, java.lang.String message, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> newApprovals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.ReviewerDeleted.Event e = new com.google.gerrit.server.extensions.events.ReviewerDeleted.Event(change, revision, reviewer, message, newApprovals, oldApprovals); for (com.google.gerrit.extensions.events.ReviewerDeletedListener listener : listeners) { listener.onReviewerDeleted(e); } }
void showUpdates(com.google.gerrit.client.changes.ChangeInfo newInfo) { if ((!(isAttached())) || (newInfo.updated().equals(lastDisplayedUpdate))) { return; } com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> om = changeInfo.messages(); com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.MessageInfo> nm = newInfo.messages(); if (om == null) { om = com.google.gwt.core.client.JsArray.createArray().cast(); } if (nm == null) { nm = com.google.gwt.core.client.JsArray.createArray().cast(); } if ((updateAvailable) == null) { updateAvailable = new com.google.gerrit.client.change.UpdateAvailableBar() { @java.lang.Override void onShow() { reload.reload(); } void onIgnore(java.sql.Timestamp newTime) { lastDisplayedUpdate = newTime; } }; updateAvailable.addCloseHandler(new com.google.gwt.event.logical.shared.CloseHandler<com.google.gwt.user.client.ui.PopupPanel>() { @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { updateAvailable = null; } }); } updateAvailable.set(com.google.gerrit.client.rpc.Natives.asList(nm).subList(om.length(), nm.length()), newInfo.updated()); if (!(updateAvailable.isShowing())) { updateAvailable.popup(); } }
@java.lang.Override public com.google.gerrit.extensions.common.GroupInfo get() throws com.google.gerrit.extensions.restapi.RestApiException { try { return getGroup.apply(rsrc); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot retrieve group", e); } }
public java.util.Optional<com.google.gerrit.server.group.InternalGroup> byId(com.google.gerrit.reviewdb.client.AccountGroup.Id groupId) throws com.google.gwtorm.server.OrmException { return getOnlyGroup(com.google.gerrit.server.query.group.GroupPredicates.id(groupId), (("group id '" + groupId) + "'")); }
private com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus getRefStatus(java.lang.String project, java.lang.String ref) { if (!(statusByProjectRef.contains(project, ref))) { com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus refStatus = new com.googlesource.gerrit.plugins.replication.ReplicationState.RefReplicationStatus(project, ref); statusByProjectRef.put(project, ref, refStatus); return refStatus; } return statusByProjectRef.get(project, ref); }
private native final net.codemirror.lib.LineCharacter setCh(int ch);
public void setArchiveFormats(java.util.Set<com.google.gerrit.reviewdb.client.AccountGeneralPreferences.ArchiveFormat> formats) { archiveFormats = formats; }
@java.lang.Override protected void configure() { for (java.lang.Class<?> clazz : sysSingletons) { bind(clazz).in(Scopes.SINGLETON); } for (java.util.Map.Entry<com.google.inject.TypeLiteral<?>, java.lang.Class<?>> e : sysListen.entrySet()) { @java.lang.SuppressWarnings("unchecked") com.google.inject.TypeLiteral<java.lang.Object> type = ((com.google.inject.TypeLiteral<java.lang.Object>) (e.getKey())); @java.lang.SuppressWarnings("unchecked") java.lang.Class<java.lang.Object> impl = ((java.lang.Class<java.lang.Object>) (e.getValue())); java.lang.annotation.Annotation n = impl.getAnnotation(com.google.gerrit.extensions.annotations.Export.class); if (n == null) { n = impl.getAnnotation(javax.inject.Named.class); } if (n == null) { n = impl.getAnnotation(com.google.inject.name.Named.class); } if (n == null) { n = com.google.inject.internal.UniqueAnnotations.create(); } bind(type).annotatedWith(n).to(impl); } }
public static com.google.gerrit.pgm.init.api.ConsoleUI getInstance() { return com.google.gerrit.pgm.init.api.ConsoleUI.getInstance(false); }
private static java.nio.file.Path getZipPath(java.nio.file.Path buckOut) { if (buckOut == null) { return null; } return buckOut.resolve("gen").resolve("polygerrit-ui").resolve("polygerrit_components").resolve("polygerrit_components.bower_components.zip"); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> apply(com.google.gerrit.server.change.RevisionResource rsrc) throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey p = rsrc.getChange().getProject(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(p);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { java.lang.String rev = rsrc.getPatchSet().getRevision().get(); org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(org.eclipse.jgit.lib.ObjectId.fromString(rev)); rw.parseBody(commit); com.google.gerrit.extensions.common.CommitInfo info = json.create(ChangeJson.NO_OPTIONS).toCommit(rsrc.getControl(), rw, commit, addLinks); info.commit = commit.name(); com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.CommitInfo> r = com.google.gerrit.extensions.restapi.Response.ok(info); if (rsrc.isCacheable()) { r.caching(com.google.gerrit.extensions.restapi.CacheControl.PRIVATE(7, java.util.concurrent.TimeUnit.DAYS)); } return r; } }
@com.google.gerrit.common.auth.SignInRequired void addProjectWatch(java.lang.String projectName, java.lang.String filter, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.common.data.AccountProjectWatchInfo> callback);
public org.eclipse.jgit.merge.ThreeWayMerger newThreeWayMerger(final org.eclipse.jgit.lib.Repository repo, final org.eclipse.jgit.lib.ObjectInserter inserter) { return com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(repo, inserter, mergeStrategyName()); }
public boolean isSensitiveParameter(java.lang.String param) { return sensitiveParameters.contains(param); }
@java.lang.Override public boolean match(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevWalk rw, com.google.gerrit.server.query.change.Arguments args) { try { return rFilter.include(rw, rw.parseCommit(args.objectId)); } catch (org.eclipse.jgit.errors.MissingObjectException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((args.projectName.get()) + "\" commit does not exist."), e); } catch (org.eclipse.jgit.errors.IncorrectObjectTypeException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error(((args.projectName.get()) + "\" revision is not a commit."), e); } catch (java.io.IOException e) { com.google.gerrit.server.query.change.MessagePredicate.log.error((("Could not search for commit message in \"" + (args.projectName.get())) + "\" repository."), e); } return false; }
private void appendQuotedParent(java.lang.StringBuilder out, com.google.gerrit.reviewdb.client.PatchLineComment child) { com.google.gerrit.reviewdb.client.PatchLineComment parent; try { parent = args.db.get().patchComments().get(new com.google.gerrit.reviewdb.client.PatchLineComment.Key(child.getKey().getParentKey(), child.getParentUuid())); } catch (com.google.gwtorm.server.OrmException e) { parent = null; } if (parent != null) { java.lang.String msg = parent.getMessage().trim(); if ((msg.length()) > 75) { msg = msg.substring(0, 75); } int lf = msg.indexOf('\n'); if (lf > 0) { msg = msg.substring(0, lf); } out.append("> ").append(msg).append('\n'); } }
@org.junit.Test public void getExternalIDs() throws java.lang.Exception { java.util.Collection<com.google.gerrit.server.account.ExternalId> expectedIds = accountCache.get(user.getId()).getExternalIds(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> expectedIdInfos = new java.util.ArrayList<>(); for (com.google.gerrit.server.account.ExternalId id : expectedIds) { com.google.gerrit.extensions.common.AccountExternalIdInfo info = new com.google.gerrit.extensions.common.AccountExternalIdInfo(); info.identity = id.key().get(); info.emailAddress = id.email(); info.canDelete = (!(id.isScheme(com.google.gerrit.acceptance.rest.account.SCHEME_USERNAME))) ? true : null; info.trusted = true; expectedIdInfos.add(info); } com.google.gerrit.acceptance.RestResponse response = userRestSession.get("/accounts/self/external.ids"); response.assertOK(); java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo> results = newGson().fromJson(response.getReader(), new com.google.gson.reflect.TypeToken<java.util.List<com.google.gerrit.extensions.common.AccountExternalIdInfo>>() {}.getType()); java.util.Collections.sort(expectedIdInfos); java.util.Collections.sort(results); assertThat(results).containsExactlyElementsIn(expectedIdInfos); }
public java.lang.String getDownloadUrl() { if ((downloadUrl) != null) { switch (downloadUrl) { case "ANON_GIT" : return CoreDownloadSchemes.ANON_GIT; case "ANON_HTTP" : return CoreDownloadSchemes.ANON_HTTP; case "HTTP" : return CoreDownloadSchemes.HTTP; case "SSH" : return CoreDownloadSchemes.SSH; case "REPO_DOWNLOAD" : return CoreDownloadSchemes.REPO_DOWNLOAD; } } return downloadUrl; }
@org.junit.Test public void testKeywords() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(); com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator validator = new com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidator(null, new com.googlesource.gerrit.plugins.uploadvalidator.ContentTypeUtil(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.PATTERN_CACHE, null, null, null); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = validator.performValidation(repo, c, com.googlesource.gerrit.plugins.uploadvalidator.BlockedKeywordValidatorTest.getPatterns().values(), com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.EMPTY_PLUGIN_CONFIG); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(("ERROR: blocked keyword(s) found in: foo.txt (Line: 1)" + " (found: myp4ssw0rd, foobar)"), ("ERROR: blocked keyword(s) found in: bar.txt (Line: 5)" + " (found: $Id: foo bar$)"), (("ERROR: blocked keyword(s) found in: " + (com.google.gerrit.reviewdb.client.Patch.COMMIT_MSG)) + " (Line: 1) (found: foobar)")); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); }
@org.junit.Before public void setUp() throws java.lang.Exception { java.lang.String url = "http://localhost:" + (wireMockRule.port()); com.ericsson.gerrit.plugins.syncevents.Configuration cfg = mock(com.ericsson.gerrit.plugins.syncevents.Configuration.class); when(cfg.getUrl()).thenReturn(url); when(cfg.getUser()).thenReturn("user"); when(cfg.getPassword()).thenReturn("pass"); when(cfg.getMaxTries()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.MAX_TRIES); when(cfg.getConnectionTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getSocketTimeout()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.TIMEOUT); when(cfg.getRetryInterval()).thenReturn(com.ericsson.gerrit.plugins.syncevents.HttpSessionTest.RETRY_INTERVAL); httpSession = new com.ericsson.gerrit.plugins.syncevents.HttpSession(new com.ericsson.gerrit.plugins.syncevents.HttpClientProvider(cfg).get(), url); }
private com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> getDraftIds() { com.google.common.collect.Table<com.google.gerrit.reviewdb.client.Change.Id, com.google.gerrit.reviewdb.client.Account.Id, org.eclipse.jgit.lib.ObjectId> draftIds = com.google.common.collect.HashBasedTable.create(); if ((allUsersRepo) == null) { return draftIds; } for (org.eclipse.jgit.transport.ReceiveCommand cmd : allUsersRepo.cmds.getCommands().values()) { java.lang.String r = cmd.getRefName(); if (r.startsWith(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS)) { com.google.gerrit.reviewdb.client.Account.Id accountId = Account.Id.fromRefPart(r.substring(com.google.gerrit.server.notedb.REFS_DRAFT_COMMENTS.length())); com.google.gerrit.server.notedb.NoteDbUpdateManager.checkDraftRef((accountId != null), r); int s = r.lastIndexOf('/'); com.google.gerrit.server.notedb.NoteDbUpdateManager.checkDraftRef(((s >= 0) && (s < ((r.length()) - 1))), r); com.google.gerrit.reviewdb.client.Change.Id changeId = Change.Id.parse(r.substring((s + 1))); draftIds.put(changeId, accountId, cmd.getNewId()); } } return draftIds; }
private static long computeInitialDelay(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String keyStartTime, java.time.ZonedDateTime now, long interval) { long delay = com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG; java.lang.String start = rc.getString(section, subsection, keyStartTime); try { if (start != null) { java.time.format.DateTimeFormatter formatter = java.time.format.DateTimeFormatter.ofPattern("[E ]HH:mm").withLocale(java.util.Locale.US); java.time.LocalTime firstStartTime = java.time.LocalTime.parse(start, formatter); java.time.ZonedDateTime startTime = now.with(firstStartTime); try { java.time.DayOfWeek dayOfWeek = formatter.parse(start, java.time.DayOfWeek::from); startTime = startTime.with(dayOfWeek); } catch (java.time.format.DateTimeParseException ignored) { } startTime = startTime.truncatedTo(java.time.temporal.ChronoUnit.MINUTES); delay = (java.time.Duration.between(now, startTime).toMillis()) % interval; if (delay <= 0) { delay += interval; } } } catch (java.lang.IllegalArgumentException e2) { delay = com.google.gerrit.server.config.ScheduleConfig.INVALID_CONFIG; } return delay; }
@java.lang.Override protected com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> defaultField(java.lang.String query) { if (query.startsWith("refs/")) { return ref(query); } else if (com.google.gerrit.server.query.change.ChangeQueryBuilder.DEF_CHANGE.matcher(query).matches()) { return change(query); } java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> predicates = com.google.common.collect.Lists.newArrayListWithCapacity(9); try { predicates.add(commit(query)); } catch (java.lang.IllegalArgumentException e) { } try { predicates.add(owner(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(reviewer(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(file(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(label(query)); } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(message(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(comment(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } try { predicates.add(projects(query)); } catch (com.google.gerrit.server.query.QueryParseException e) { } predicates.add(ref(query)); predicates.add(branch(query)); predicates.add(topic(query)); return com.google.gerrit.server.query.Predicate.or(predicates); }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commitStatus, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> incoming, com.google.gerrit.server.util.RequestId submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling, com.google.common.collect.ListMultimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify, com.google.gerrit.server.git.SubmoduleOp submoduleOp, boolean dryrun);
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsersName);com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, allUsersName, git)) { md.getCommitBuilder().setAuthor(serverUser); md.getCommitBuilder().setCommitter(serverUser); md.setMessage(com.google.gerrit.server.schema.Schema_164.COMMIT_MSG); com.google.gerrit.server.git.ProjectConfig config = com.google.gerrit.server.git.ProjectConfig.read(md); com.google.gerrit.common.data.AccessSection groups = config.getAccessSection(((com.google.gerrit.reviewdb.client.RefNames.REFS_GROUPS) + "*"), true); com.google.gerrit.server.schema.AclUtil.grant(config, groups, Permission.READ, false, true, systemGroupBackend.getGroup(com.google.gerrit.server.schema.REGISTERED_USERS)); config.commit(md); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gwtorm.server.OrmException("Failed to grant read permissions on group branches", e); } }
@org.junit.Test public void testMatchesAny() throws java.util.concurrent.ExecutionException { java.lang.String[] patterns = new java.lang.String[]{ "text/*", "^application/(pdf|xml)", "application/zip" }; matchesAny("text/xml", patterns); matchesAny("text/html", patterns); matchesAny("text/plain", patterns); matchesAny("application/pdf", patterns); matchesAny("application/xml", patterns); matchesAny("application/zip", patterns); noMatch("foo/bar", patterns); noMatch("application/msword", patterns); }
@org.junit.Test public void testAccidentallyPushNewPatchSetDirectlyToBranchAndCantRecoverByPushingToRefsFor() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change.Id id = accidentallyPushNewPatchSetDirectlyToBranch(); com.google.gerrit.server.query.change.ChangeData cd = byChangeId(id); java.lang.String ps1Rev = com.google.common.collect.Iterables.getOnlyElement(cd.patchSets()).getRevision().get(); java.lang.String r = "refs/for/master"; com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, r, false), r, "no new changes"); cd = byChangeId(id); assertThat(cd.change().getStatus()).isEqualTo(Change.Status.NEW); assertThat(com.google.gerrit.acceptance.git.AbstractPushForReview.getPatchSetRevisions(cd)).containsExactlyEntriesIn(com.google.common.collect.ImmutableMap.of(1, ps1Rev)); }
private void columnDelta1(com.google.gwtexpui.safehtml.client.SafeHtmlBuilder sb, com.google.gerrit.client.diff.FileInfo info) { sb.openTd().setStyleName(com.google.gerrit.client.change.FileTable.R.css().deltaColumn1()); if ((!(Patch.COMMIT_MSG.equals(info.path()))) && (!(info.binary()))) { if (showChangeSizeBars) { sb.append(((info.lines_inserted()) + (info.lines_deleted()))); } else if (!(ChangeType.DELETED.matches(info.status()))) { if (ChangeType.ADDED.matches(info.status())) { sb.append(info.lines_inserted()).append(" lines"); } else { sb.append("+").append(info.lines_inserted()).append(", -").append(info.lines_deleted()); } } } sb.closeTd(); }
private void updateProjectConfig(com.google.gerrit.server.CurrentUser user, com.google.gerrit.server.git.ProjectConfig config, com.google.gerrit.server.git.MetaDataUpdate md, org.eclipse.jgit.lib.ObjectId base) throws java.io.IOException { org.eclipse.jgit.revwalk.RevCommit commit = config.commit(md); com.google.gerrit.reviewdb.client.Account account = (user.isIdentifiedUser()) ? user.asIdentifiedUser().getAccount() : null; gitRefUpdated.fire(config.getProject().getNameKey(), RefNames.REFS_CONFIG, base, commit.getId(), account); projectCache.evict(config.getProject()); hooks.doRefUpdatedHook(new com.google.gerrit.reviewdb.client.Branch.NameKey(config.getProject().getNameKey(), com.google.gerrit.reviewdb.client.RefNames.REFS_CONFIG), base, commit.getId(), user.asIdentifiedUser().getAccount()); }
@org.junit.Test @com.google.gerrit.acceptance.TestProjectInput(useContentMerge = com.google.gerrit.extensions.client.InheritableBoolean.TRUE) public void submitWithContentMerge_Conflict() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit initialHead = getRemoteHead(); com.google.gerrit.acceptance.PushOneCommit.Result change = createChange("Change 1", "a.txt", "content"); submit(change.getChangeId()); org.eclipse.jgit.revwalk.RevCommit oldHead = getRemoteHead(); testRepo.reset(initialHead); com.google.gerrit.acceptance.PushOneCommit.Result change2 = createChange("Change 2", "a.txt", "other content"); submitWithConflict(change2.getChangeId(), ((((("Cannot merge " + (change2.getCommitId().name())) + "\n") + "Change could not be merged due to a path conflict.\n\n") + "Please rebase the change locally and ") + "upload the rebased commit for review.")); assertThat(getRemoteHead()).isEqualTo(oldHead); assertCurrentRevision(change2.getChangeId(), 1, change2.getCommitId()); assertNoSubmitter(change2.getChangeId(), 1); }
private void saveApprovals(com.google.gerrit.server.git.LabelNormalizer.Result normalized, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx, com.google.gerrit.server.notedb.ChangeUpdate update, boolean includeUnchanged) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = update.getPatchSetId(); ctx.getDb().patchSetApprovals().upsert(SubmitStrategyOp.convertPatchSet(normalized.getNormalized(), psId)); ctx.getDb().patchSetApprovals().update(SubmitStrategyOp.zero(SubmitStrategyOp.convertPatchSet(normalized.deleted(), psId))); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.updated()) { update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.deleted()) { update.removeApprovalFor(psa.getAccountId(), psa.getLabel()); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : normalized.unchanged()) { if (includeUnchanged || (psa.isLegacySubmit())) { logDebug(("Adding submit label " + psa)); update.putApprovalFor(psa.getAccountId(), psa.getLabel(), psa.getValue()); } } }
com.google.gerrit.server.api.changes.ChangeApiImpl create(com.google.gerrit.server.change.ChangeResource change);
private void updateNoteMap(com.google.gerrit.server.account.ExternalIdsUpdate.MyConsumer<com.google.gerrit.server.account.ExternalIdsUpdate.OpenRepo> update) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { retryer.call(new com.google.gerrit.server.account.ExternalIdsUpdate.TryNoteMapUpdate(repo, rw, ins, update)); } catch (java.util.concurrent.ExecutionException | com.github.rholder.retry.RetryException e) { if ((e.getCause()) != null) { com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), java.io.IOException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), org.eclipse.jgit.errors.ConfigInvalidException.class); com.google.common.base.Throwables.throwIfInstanceOf(e.getCause(), com.google.gwtorm.server.OrmException.class); } throw new com.google.gwtorm.server.OrmException(e); } }
@java.lang.Override protected java.lang.String decode(int s, int e) { if ((charset) == null) { charset = com.google.gerrit.server.diff.Text.charset(content, null); } return org.eclipse.jgit.util.RawParseUtils.decode(charset, content, s, e); }
public com.google.gerrit.reviewdb.client.PatchSet current(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { return get(db, notes, notes.getChange().currentPatchSetId()); }
private com.google.gerrit.client.ui.Screen select() { java.lang.String p; p = "admin,group,uuid-"; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.UUID.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = "admin,group,"; if (token.startsWith(p)) return new com.google.gerrit.client.admin.AccountGroupScreen(AccountGroup.Id.parse(com.google.gerrit.client.Dispatcher.skip(p, token))); p = "admin,project,"; if (token.startsWith(p)) { p = com.google.gerrit.client.Dispatcher.skip(p, token); final int c = p.indexOf(','); final com.google.gerrit.reviewdb.Project.NameKey k = Project.NameKey.parse(p.substring(0, c)); final boolean isWild = k.equals(com.google.gerrit.client.Gerrit.getConfig().getWildProject()); p = p.substring((c + 1)); if (ProjectScreen.INFO.equals(p)) { return new com.google.gerrit.client.admin.ProjectInfoScreen(k); } if ((!isWild) && (ProjectScreen.BRANCH.equals(p))) { return new com.google.gerrit.client.admin.ProjectBranchesScreen(k); } if (ProjectScreen.ACCESS.equals(p)) { return new com.google.gerrit.client.admin.ProjectAccessScreen(k); } return new com.google.gerrit.client.NotFoundScreen(); } if (com.google.gerrit.client.ADMIN_GROUPS.equals(token)) { return new com.google.gerrit.client.admin.GroupListScreen(); } if (com.google.gerrit.client.ADMIN_PROJECTS.equals(token)) { return new com.google.gerrit.client.admin.ProjectListScreen(); } return new com.google.gerrit.client.NotFoundScreen(); }
private boolean isInvalidOrMissing(long interval, long initialDelay) { java.lang.String key = (section()) + ((subsection()) != null ? "." + (subsection()) : ""); if ((interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) && (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG))) { com.google.gerrit.server.config.ScheduleConfig.log.info("No schedule configuration for \"{}\".", key); return true; } if (interval == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyInterval()))); return true; } if (initialDelay == (com.google.gerrit.server.config.ScheduleConfig.MISSING_CONFIG)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Incomplete schedule configuration for \"{}\" is ignored. Missing value for \"{}\".", key, ((key + ".") + (keyStartTime()))); return true; } if ((interval <= 0) || (initialDelay < 0)) { com.google.gerrit.server.config.ScheduleConfig.log.error("Invalid schedule configuration for \"{}\" is ignored. ", key); return true; } return false; }
@org.junit.Test public void publishesWhenExpected() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
public java.lang.String getJiraUrl() { return jiraUrl; }
public final java.lang.String toBranch(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().branch()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put("project", encode(branch.getParentKey().get())); p.put("branch", encode(branch.get())); return (url()) + (pattern.replace(p)); }
java.lang.String getIndexFile() { return com.google.common.base.MoreObjects.firstNonNull(cfg.getString(com.googlesource.gerrit.plugins.xdocs.XDocConfig.SECTION_WEB, null, com.googlesource.gerrit.plugins.xdocs.XDocConfig.KEY_INDEX_FILE), com.googlesource.gerrit.plugins.xdocs.XDocConfig.DEFAULT_INDEX_FILE); }
public void assertCanDelete(com.google.gerrit.reviewdb.client.Project project) throws com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException { com.google.gerrit.reviewdb.client.Project.NameKey proj = project.getNameKey(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(proj);com.google.gerrit.server.git.MergeOpRepoManager orm = ormProvider.get()) { com.google.gerrit.server.git.SubmoduleOp sub = subOpFactory.create(orm); for (org.eclipse.jgit.lib.Ref ref : repo.getRefDatabase().getRefs(RefNames.REFS_HEADS).values()) { com.google.gerrit.reviewdb.client.Branch.NameKey b = new com.google.gerrit.reviewdb.client.Branch.NameKey(proj, ref.getName()); if (!(sub.superProjectSubscriptionsForSubmoduleBranch(b).isEmpty())) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException("Project is subscribed by other projects."); } } } catch (org.eclipse.jgit.errors.RepositoryNotFoundException e) { } catch (java.io.IOException e) { throw new com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException("Project is subscribed by other projects."); } }
protected abstract void runImpl() throws com.google.gerrit.sshd.Failure, java.io.IOException;
protected com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.SingleListChangeInfo> loadCallback() { return new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.common.data.SingleListChangeInfo>(this) { @java.lang.Override protected void preDisplay(final com.google.gerrit.common.data.SingleListChangeInfo result) { display(result); } }; }
@java.lang.Override public java.lang.String toString() { return name().toLowerCase().replace("_", "-"); }
private void authenticateAndRedirect(javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { com.google.gerrit.server.account.AuthRequest areq = new com.google.gerrit.server.account.AuthRequest(user.getExternalId()); areq.setUserName(user.getUserName()); areq.setEmailAddress(user.getEmailAddress()); areq.setDisplayName(user.getDisplayName()); com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { com.google.gerrit.httpd.auth.oauth.OAuthSession.log.error((("Unable to authenticate user \"" + (user)) + "\""), e); rsp.sendError(HttpServletResponse.SC_FORBIDDEN); return; } webSession.get().login(arsp, true); java.lang.String suffix = redirectUrl.substring(((OAuthWebFilter.GERRIT_LOGIN.length()) + 1)); suffix = java.net.URLDecoder.decode(suffix, java.nio.charset.StandardCharsets.UTF_8.name()); rsp.sendRedirect(suffix); }
com.google.common.util.concurrent.ListenableFuture<?> delete(final org.apache.lucene.index.Term term) { return submit(() -> writer.deleteDocuments(term)); }
@org.junit.Test public void parseAndPersistInlineComment() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), null, "Some Inline Comment", null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo("Patch Set 1:\n(1 comment)"); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo("mailMessageId=some id"); comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(3); assertThat(comments.get(2).message).isEqualTo("Some Inline Comment"); assertThat(comments.get(2).tag).isEqualTo("mailMessageId=some id"); assertThat(comments.get(2).inReplyTo).isEqualTo(comments.get(1).id); }
@java.lang.Override public void run() throws com.google.gerrit.sshd.commands.Failure { initOptionList(); parseCommandLine(); boolean ok = true; for (final com.google.gerrit.reviewdb.PatchSet.Id patchSetId : patchSetIds) { try { approveOne(patchSetId); } catch (com.google.gerrit.sshd.commands.UnloggedFailure e) { ok = false; writeError((("error: " + (e.getMessage())) + "\n")); } catch (java.lang.Exception e) { ok = false; writeError((("fatal: internal server error while approving " + patchSetId) + "\n")); com.google.gerrit.sshd.commands.ReviewCommand.log.error(("internal error while approving " + patchSetId)); } } if (!ok) { throw new com.google.gerrit.sshd.commands.UnloggedFailure(1, ("one or more approvals failed;" + " review output above")); } }
private com.google.gerrit.reviewdb.client.PatchSet parseBase(final java.lang.String base) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.PatchSet.Id basePatchSetId = PatchSet.Id.fromRef(base); if (basePatchSetId != null) { return db.patchSets().get(basePatchSetId); } com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; try { com.google.gerrit.reviewdb.client.Change.Id baseChangeId = Change.Id.parse(base); if (baseChangeId != null) { for (com.google.gerrit.reviewdb.client.PatchSet ps : db.patchSets().byChange(baseChangeId)) { if ((basePatchSet == null) || ((basePatchSet.getId().get()) < (ps.getId().get()))) { basePatchSet = ps; } } } } catch (java.lang.NumberFormatException e) { } if (basePatchSet == null) { for (com.google.gerrit.reviewdb.client.PatchSet ps : db.patchSets().byRevision(new com.google.gerrit.reviewdb.client.RevId(base))) { if ((basePatchSet == null) || ((basePatchSet.getId().get()) < (ps.getId().get()))) { basePatchSet = ps; } } } return basePatchSet; }
@java.lang.Override public com.google.gerrit.extensions.common.SubmitType apply(com.google.gerrit.server.change.RevisionResource resource) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException { return test.apply(resource, null); }
@org.junit.Test public void customKeys() { org.eclipse.jgit.lib.Config rc = new org.eclipse.jgit.lib.Config(); rc.setString("a", "b", "i", "1h"); rc.setString("a", "b", "s", "01:00"); com.google.gerrit.server.config.ScheduleConfig s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a").setSubsection("b").setKeyInterval("i").setKeyStartTime("s").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.interval()); assertEquals(com.google.gerrit.server.config.ScheduleConfigTest.ms(1, java.util.concurrent.TimeUnit.HOURS), s.initialDelay()); s = com.google.gerrit.server.config.ScheduleConfig.builder(rc, "a").setSubsection("b").setKeyInterval("myInterval").setKeyStartTime("myStart").setNow(com.google.gerrit.server.config.ScheduleConfigTest.NOW).build(); assertEquals(s.interval(), ScheduleConfig.MISSING_CONFIG); assertEquals(s.initialDelay(), ScheduleConfig.MISSING_CONFIG); }
@java.lang.Override public void onSuccess(com.google.gwt.core.client.JavaScriptObject msg) { if (com.google.gerrit.client.rpc.NativeString.is(msg)) { com.google.gerrit.client.rpc.NativeString str = ((com.google.gerrit.client.rpc.NativeString) (msg)); if (!(str.asString().isEmpty())) { com.google.gwt.user.client.Window.alert(str.asString()); } } com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(id)); }
@java.lang.Override protected void onLoad() throws java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { org.eclipse.jgit.lib.ObjectId rev = getRevision(); if (rev == null) { return; } approvals = com.google.common.collect.ArrayListMultimap.create(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(reader); walk.markStart(walk.parseCommit(rev)); for (org.eclipse.jgit.revwalk.RevCommit commit : walk) { parse(commit); } for (java.util.Collection<com.google.gerrit.reviewdb.client.PatchSetApproval> v : approvals.asMap().values()) { java.util.Collections.sort(((java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval>) (v)), com.google.gerrit.server.notedb.ChangeNotes.PSA_BY_TIME); } }
public boolean canSubmit() { if (GitRepositoryManager.REF_CONFIG.equals(refName)) { return getProjectControl().isOwner(); } return canPerform(Permission.SUBMIT); }
@java.lang.Override public void check() throws com.google.gerrit.server.StartupException { java.lang.String invalid = cfg.getSubsections("groups").stream().filter(( sub) -> { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(sub); com.google.gerrit.server.account.GroupBackend groupBackend = universalGroupBackend.backend(uuid); return (groupBackend == null) || ((groupBackend.get(uuid)) == null); }).map(( u) -> ("'" + u) + "'").collect(java.util.stream.Collectors.joining(",")); if (!(invalid.isEmpty())) { throw new com.google.gerrit.server.StartupException(java.lang.String.format((((("Subsections for 'groups' in gerrit.config must be valid group" + " UUIDs. The following group UUIDs could not be resolved: ") + invalid) + " Please remove/fix these 'groups' subsections in") + " gerrit.config."))); } }
private void recursivelyExpandGroups(final java.util.Set<java.lang.String> groupDNs, final com.google.gerrit.server.auth.ldap.Helper.LdapSchema schema, final javax.naming.directory.DirContext ctx, final java.lang.String groupDN) { if (((groupDNs.add(groupDN)) && ((schema.accountMemberField) != null)) && (schema.accountMemberExpandGroups)) { com.google.common.collect.ImmutableSet<java.lang.String> cachedParentsDNs = parentGroups.getIfPresent(groupDN); if (cachedParentsDNs == null) { com.google.common.collect.ImmutableSet.Builder<java.lang.String> dns = com.google.common.collect.ImmutableSet.builder(); try { final javax.naming.Name compositeGroupName = new javax.naming.CompositeName().add(groupDN); final javax.naming.directory.Attribute in = ctx.getAttributes(compositeGroupName, schema.accountMemberFieldArray).get(schema.accountMemberField); if (in != null) { final javax.naming.NamingEnumeration<?> groups = in.getAll(); try { while (groups.hasMore()) { dns.add(((java.lang.String) (groups.next()))); } } catch (javax.naming.PartialResultException e) { } } } catch (javax.naming.NamingException e) { LdapRealm.log.warn(("Could not find group " + groupDN), e); } cachedParentsDNs = dns.build(); parentGroups.put(groupDN, cachedParentsDNs); } for (java.lang.String dn : cachedParentsDNs) { recursivelyExpandGroups(groupDNs, schema, ctx, dn); } } }
@java.lang.SuppressWarnings("unchecked") <K, V> com.google.common.cache.CacheBuilder<K, V> create(com.google.gerrit.server.cache.CacheBinding<K, V> def, boolean unwrapValueHolder) { com.google.common.cache.CacheBuilder<K, V> builder = com.google.gerrit.server.cache.h2.DefaultCacheFactory.newCacheBuilder(); builder.recordStats(); builder.maximumWeight(cfg.getLong("cache", def.name(), "memoryLimit", def.maximumWeight())); builder.removalListener(forwardingRemovalListenerFactory.create(def.name())); com.google.common.cache.Weigher<K, V> weigher = def.weigher(); if ((weigher != null) && unwrapValueHolder) { final com.google.common.cache.Weigher<K, V> impl = weigher; weigher = ((com.google.common.cache.Weigher<K, V>) (new com.google.common.cache.Weigher<K, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V>>() { @java.lang.Override public int weigh(K key, com.google.gerrit.server.cache.h2.H2CacheImpl.ValueHolder<V> value) { return impl.weigh(key, value.value); } })); } else if (weigher == null) { weigher = com.google.gerrit.server.cache.h2.DefaultCacheFactory.unitWeight(); } builder.weigher(weigher); java.lang.Long age = def.expireAfterWrite(java.util.concurrent.TimeUnit.SECONDS); if (has(def.name(), "maxAge")) { builder.expireAfterWrite(com.google.gerrit.server.config.ConfigUtil.getTimeUnit(cfg, "cache", def.name(), "maxAge", (age != null ? age : 0), java.util.concurrent.TimeUnit.SECONDS), java.util.concurrent.TimeUnit.SECONDS); } else if (age != null) { builder.expireAfterWrite(age, java.util.concurrent.TimeUnit.SECONDS); } return builder; }
@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); Log response = buildJson(com.google.gitiles.LogServletTest.LOG, "/repo/+log"); assertThat(response.log).hasSize(1); verifyJsonCommit(response.log.get(0), commit); assertThat(response.log.get(0).treeDiff).isNull(); }
public static java.util.Set<java.lang.String> getEmails(java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> ids) { java.util.Set<java.lang.String> emails = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountExternalId id : ids) { if (id.isScheme(com.google.gerrit.server.account.SCHEME_MAILTO)) { emails.add(id.getSchemeRest()); } } return emails; }
public static com.google.gerrit.extensions.webui.UiResult redirectUrl(java.lang.String url) { com.google.gerrit.extensions.webui.UiResult r = new com.google.gerrit.extensions.webui.UiResult(); r.url = url; return r; }
@org.junit.Test public void cannotSetReviewedLabelForPatchSetThatAlreadyHasUnreviewedLabel() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); setApiUser(user); gApi.changes().id(changeId).markAsReviewed(false); assertThat(gApi.changes().id(changeId).get().reviewed).isNull(); exception.expect(com.google.gerrit.extensions.restapi.BadRequestException.class); exception.expectMessage((((((((("The labels " + (com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL)) + "/") + 1) + " and ") + (com.google.gerrit.server.StarredChangesUtil.UNREVIEWED_LABEL)) + "/") + 1) + " are mutually exclusive. Only one of them can be set.")); gApi.accounts().self().setStars(changeId, new com.google.gerrit.extensions.api.changes.StarsInput(com.google.common.collect.ImmutableSet.of(((com.google.gerrit.server.StarredChangesUtil.REVIEWED_LABEL) + "/1")))); }
private com.google.gerrit.extensions.common.PluginConfigInfo getPluginInfo() { com.google.gerrit.extensions.common.PluginConfigInfo info = new com.google.gerrit.extensions.common.PluginConfigInfo(); info.hasAvatars = com.google.gerrit.server.config.GetServerInfo.toBoolean(((avatar.get()) != null)); info.jsResourcePaths = new java.util.ArrayList(); info.htmlResourcePaths = new java.util.ArrayList(); for (com.google.gerrit.extensions.webui.WebUiPlugin u : plugins) { java.lang.String path = java.lang.String.format("plugins/%s/%s", u.getPluginName(), u.getJavaScriptResourcePath()); if (path.endsWith(".html")) { info.htmlResourcePaths.add(path); } else { info.jsResourcePaths.add(path); } } return info; }
private void copyFile() { java.io.File file = localPath.resolve(((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); java.io.File copyFile = localPath.resolve((((com.ericsson.gerrit.plugins.eventslog.SQLTable.TABLE_NAME) + (java.util.concurrent.TimeUnit.MILLISECONDS.toSeconds(com.google.gerrit.common.TimeUtil.nowMs()))) + (com.ericsson.gerrit.plugins.eventslog.SQLStore.H2_DB_SUFFIX))).toFile(); try { com.google.common.io.Files.copy(file, copyFile); } catch (java.io.IOException e) { com.ericsson.gerrit.plugins.eventslog.SQLStore.log.warn("Could not copy local database file with timestamp", e); } }
@com.google.inject.Inject(optional = true) void setSchemaFactory(com.google.gwtorm.server.SchemaFactory<com.google.gerrit.reviewdb.server.ReviewDb> dbFactory) { this.dbFactory = dbFactory; }
public java.util.Collection<com.google.gerrit.reviewdb.client.PatchSet> patchSets() throws com.google.gwtorm.server.OrmException { if ((patchSets) == null) { patchSets = psUtil.byChange(db, notes()); } return patchSets; }
private static void patch(java.lang.String token, com.google.gerrit.client.DiffObject base, com.google.gerrit.reviewdb.client.Patch.Key id, com.google.gerrit.client.diff.DisplaySide side, int line, java.lang.String panelType) { java.lang.String panel = panelType; if (panel == null) { int c = token.lastIndexOf(','); panel = (0 <= c) ? token.substring((c + 1)) : ""; } if (("".equals(panel)) || ("cm".equals(panel))) { if (com.google.gerrit.client.Dispatcher.preferUnified()) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } } else if ("sidebyside".equals(panel)) { com.google.gerrit.client.Dispatcher.codemirror(token, base, id, side, line); } else if ("unified".equals(panel)) { com.google.gerrit.client.Dispatcher.unified(token, base, id, side, line); } else if ("edit".equals(panel)) { if ((!(com.google.gerrit.reviewdb.client.Patch.isMagic(id.get()))) || (Patch.COMMIT_MSG.equals(id.get()))) { com.google.gerrit.client.Dispatcher.codemirrorForEdit(token, id, line); } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } } else { com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }
@java.lang.Override public void error(com.google.gerrit.server.git.ValidationError error) { com.google.gerrit.pgm.init.api.AllProjectsConfig.log.error(((("Error parsing file " + (com.google.gerrit.server.git.GroupList.FILE_NAME)) + ": ") + (error.getMessage()))); }
private void registerCmEvents(final net.codemirror.lib.CodeMirror cm) { cm.on("cursorActivity", updateActiveLine(cm)); cm.on("gutterClick", onGutterClick(cm)); cm.on("scroll", doScroll(cm)); scrollTimerA = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmA); } }; scrollTimerB = new com.google.gwt.user.client.Timer() { @java.lang.Override public void run() { fixScroll(cmB); } }; cm.on("renderLine", resizeLinePadding(getSideFromCm(cm))); cm.addKeyMap(net.codemirror.lib.KeyMap.create().on("'j'", moveCursorDown(cm, 1)).on("'k'", moveCursorDown(cm, (-1))).on("'u'", upToChange()).on("'r'", toggleReviewed()).on("'o'", toggleOpenBox(cm)).on("Enter", toggleOpenBox(cm)).on("'c'", insertNewDraft(cm))); }
public final native boolean has_line();
public org.eclipse.jgit.lib.Config getProjectPluginConfigWithInheritance(com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String pluginName) throws com.google.gerrit.server.project.NoSuchProjectException { return getPluginConfig(projectName, pluginName).getWithInheritance(); }
@java.lang.Override public void start() { try { server.httpd.start(); } catch (java.lang.Exception e) { throw new java.lang.IllegalStateException("Cannot start HTTP daemon", e); } }
@java.lang.Override public java.util.Collection<com.google.gerrit.reviewdb.client.AccountExternalId> byAccount(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return extIdsByAccount.get(com.google.gerrit.server.account.ExternalIdCacheImpl.AllKey.ALL).get(accountId); } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.account.ExternalIdCacheImpl.log.warn("Cannot list external ids", e); return java.util.Collections.emptySet(); } }
boolean isDisabled() { return (permittedLimit) <= 0; }
public final Project.NameKey name_key() { return new com.google.gerrit.reviewdb.client.Project.NameKey(name()); }
@com.google.auto.value.extension.memoized.Memoized public long interval() { return com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); }
boolean wouldPushRef(java.lang.String ref) { if ((!(config.replicatePermissions())) && (RefNames.REFS_CONFIG.equals(ref))) { return false; } for (org.eclipse.jgit.transport.RefSpec s : config.getRemoteConfig().getPushRefSpecs()) { if (s.matchSource(ref)) { return true; } } return false; }
private com.google.inject.Injector createSysInjector(final com.google.gerrit.pgm.Init.SiteInit init) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.pgm.util.ConsoleUI.class).toInstance(init.ui); bind(com.google.gerrit.pgm.init.InitFlags.class).toInstance(init.flags); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); bind(com.google.gerrit.server.git.GitProjectImporter.class); } }); return createDbInjector(com.google.gerrit.pgm.SINGLE_USER).createChildInjector(modules); }
public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); for (java.lang.String s : com.google.gerrit.client.Gerrit.info().download().schemes()) { com.google.gerrit.client.config.DownloadInfo.DownloadSchemeInfo scheme = com.google.gerrit.client.Gerrit.info().download().scheme(s); if ((scheme.isAuthRequired()) && (!allowAnonymous)) { continue; } com.google.gerrit.client.download.DownloadUrlLink.KnownScheme knownScheme = com.google.gerrit.client.download.DownloadUrlLink.KnownScheme.get(s); if (knownScheme != null) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(knownScheme.downloadScheme, knownScheme.text, scheme.getUrl(project))); } else { urls.add(new com.google.gerrit.client.download.DownloadUrlLink(s, scheme.getUrl(project))); } } return urls; }
int findApproval(com.google.gerrit.server.account.AccountCache accountCache, com.google.gerrit.server.account.Accounts accounts) throws com.google.gwtorm.server.OrmException { if (com.googlesource.gerrit.plugins.findowners.Checker.isExemptFromOwnerApproval(changeData)) { return 0; } com.googlesource.gerrit.plugins.findowners.OwnersDb db = com.googlesource.gerrit.plugins.findowners.Cache.getInstance().get(accountCache, accounts, repository, changeData); if ((db.getNumOwners()) <= 0) { return 0; } if ((minVoteLevel) <= 0) { minVoteLevel = com.googlesource.gerrit.plugins.findowners.Config.getMinOwnerVoteLevel(changeData); } com.googlesource.gerrit.plugins.findowners.Checker.log.trace(("findApproval db key = " + (db.key))); return findApproval(accountCache, db); }
private void renderChangeInfo(com.google.gerrit.client.changes.ChangeInfo info) { changeInfo = info; lastDisplayedUpdate = info.updated(); labels.set(info); renderOwner(info); renderActionTextDate(info); renderDiffBaseListBox(info); initReplyButton(info, revision); initIncludedInAction(info); initChangeAction(info); initDownloadAction(info, revision); initProjectLinks(info); initBranchLink(info); initEditMode(info, revision); actions.display(info, revision); star.setValue(info.starred()); permalink.setHref(com.google.gerrit.client.ui.ChangeLink.permalink(changeId)); permalink.setText(java.lang.String.valueOf(info.legacy_id())); topic.set(info, revision); commit.set(commentLinkProcessor, info, revision); related.set(info, revision); reviewers.set(info); if (com.google.gerrit.client.Gerrit.isNoteDbEnabled()) { hashtags.set(info); } else { setVisible(hashtagTableRow, false); } java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append(Util.M.changeScreenTitleId(info.id_abbreviated())); if ((info.subject()) != null) { sb.append(": "); sb.append(info.subject()); } setWindowTitle(sb.toString()); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo revInfo = info.revision(revision); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.actions.ActionInfo> actionMap = (revInfo.has_actions()) ? info.actions() : com.google.gerrit.client.rpc.NativeMap.<com.google.gerrit.client.actions.ActionInfo>create(); actionMap.copyKeysIntoChildren("id"); renderRevisionInfo(info, actionMap); }
@org.junit.Test public void convertFromCCToReviewer() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.extensions.common.AccountInfo acc = new com.google.gerrit.extensions.common.AccountInfo("Foo Bar", "foo.bar@gerritcodereview.com"); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.api.changes.AddReviewerInput addInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); addInput.reviewer = com.google.gerrit.acceptance.rest.change.ChangeReviewersByEmailIT.toRfcAddressString(acc); addInput.state = com.google.gerrit.extensions.client.ReviewerState.CC; gApi.changes().id(r.getChangeId()).addReviewer(addInput); com.google.gerrit.extensions.api.changes.AddReviewerInput modifyInput = new com.google.gerrit.extensions.api.changes.AddReviewerInput(); modifyInput.reviewer = addInput.reviewer; modifyInput.state = com.google.gerrit.extensions.client.ReviewerState.REVIEWER; gApi.changes().id(r.getChangeId()).addReviewer(modifyInput); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(r.getChangeId()).get(java.util.EnumSet.of(ListChangesOption.DETAILED_LABELS)); assertThat(info.reviewers).isEqualTo(com.google.common.collect.ImmutableMap.of(ReviewerState.REVIEWER, com.google.common.collect.ImmutableList.of(acc))); }
public java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> getPatchSetLinks(java.lang.String project, java.lang.String commit) { java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = new java.util.ArrayList<>(4); for (com.google.gerrit.extensions.webui.PatchSetWebLink webLink : patchSetLinks) { links.add(webLink.getPathSetWebLink(project, commit)); } return links; }
private com.google.gerrit.extensions.api.projects.BranchInfo createBranchInfo(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, org.eclipse.jgit.lib.Ref ref, com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.util.Set<java.lang.String> targets) { com.google.gerrit.extensions.api.projects.BranchInfo info = new com.google.gerrit.extensions.api.projects.BranchInfo(); info.ref = ref.getName(); info.revision = ((ref.getObjectId()) != null) ? ref.getObjectId().name() : null; info.canDelete = ((!(targets.contains(ref.getName()))) && (perm.testOrFalse(RefPermission.DELETE))) ? true : null; com.google.gerrit.server.project.BranchResource rsrc = new com.google.gerrit.server.project.BranchResource(projectState, user, ref); for (com.google.gerrit.extensions.webui.UiAction.Description d : uiActions.from(branchViews, rsrc)) { if ((info.actions) == null) { info.actions = new java.util.TreeMap(); } info.actions.put(d.getId(), new com.google.gerrit.extensions.common.ActionInfo(d)); } java.util.List<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getBranchLinks(projectState.getName(), ref.getName()); info.webLinks = (links.isEmpty()) ? null : links; return info; }
public void insertChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, org.eclipse.jgit.revwalk.RevCommit commit, com.google.gerrit.common.data.LabelTypes labelTypes, java.util.List<org.eclipse.jgit.revwalk.FooterLine> footerLines, com.google.gerrit.reviewdb.client.PatchSetInfo info, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> reviewers) throws com.google.gwtorm.server.OrmException { db.changes().beginTransaction(change.getId()); try { com.google.gerrit.server.ChangeUtil.insertAncestors(db, ps.getId(), commit); db.patchSets().insert(java.util.Collections.singleton(ps)); db.changes().insert(java.util.Collections.singleton(change)); com.google.gerrit.server.ChangeUtil.updateTrackingIds(db, change, trackingFooters, footerLines); approvalsUtil.addReviewers(db, labelTypes, change, ps, info, reviewers, java.util.Collections.<com.google.gerrit.reviewdb.client.Account.Id>emptySet()); db.commit(); } finally { db.rollback(); } gitRefUpdated.fire(change.getProject(), ps.getRefName(), org.eclipse.jgit.lib.ObjectId.zeroId(), commit); hooks.doPatchsetCreatedHook(change, ps, db); }
public static java.util.List<com.google.gerrit.pgm.init.InitPlugins.PluginData> listPlugins(com.google.gerrit.server.config.SitePaths site, com.google.gerrit.pgm.init.PluginsDistribution pluginsDistribution) throws java.io.IOException { return com.google.gerrit.pgm.init.InitPlugins.listPlugins(site, false, pluginsDistribution); }
@org.junit.Test public void testWithRelativeURI() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey p1 = createProject("a"); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText((((("" + (("[submodule \"a\"]\n" + "path = a\n") + "url = ../")) + (p1.get())) + "\n") + "branch = master\n")); com.google.gerrit.reviewdb.client.Branch.NameKey targetBranch = new com.google.gerrit.reviewdb.client.Branch.NameKey(new com.google.gerrit.reviewdb.client.Project.NameKey("project"), "master"); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> res = new com.google.gerrit.server.util.SubmoduleSectionParser(cfg, com.google.gerrit.acceptance.git.SubmoduleSectionParserIT.THIS_SERVER, targetBranch).parseAllSections(); java.util.Set<com.google.gerrit.reviewdb.client.SubmoduleSubscription> expected = com.google.common.collect.Sets.newHashSet(new com.google.gerrit.reviewdb.client.SubmoduleSubscription(targetBranch, new com.google.gerrit.reviewdb.client.Branch.NameKey(p1, "master"), "a")); assertThat(res).containsExactlyElementsIn(expected); }
public void setLimit(int n) { limitFromCaller = n; }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(rsrc, new com.google.gerrit.extensions.common.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index group", e); } }
public final void addOps(com.google.gerrit.server.update.BatchUpdate bu, java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.IntegrationException { java.util.List<com.google.gerrit.server.git.strategy.SubmitStrategyOp> ops = buildOps(toMerge); java.util.Set<com.google.gerrit.server.git.CodeReviewCommit> added = com.google.common.collect.Sets.newHashSetWithExpectedSize(ops.size()); for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { added.add(op.getCommit()); } java.util.List<com.google.gerrit.server.git.CodeReviewCommit> difference = new java.util.ArrayList(com.google.common.collect.Sets.difference(toMerge, added)); java.util.Collections.reverse(difference); for (com.google.gerrit.server.git.CodeReviewCommit c : difference) { bu.addOp(c.change().getId(), new com.google.gerrit.server.git.strategy.ImplicitIntegrateOp(args, c)); } for (com.google.gerrit.server.git.strategy.SubmitStrategyOp op : ops) { bu.addOp(op.getId(), op); } }
static void fireEvent(com.google.gwtjsonrpc.client.BaseRpcEvent<?> event) { com.google.gwtjsonrpc.client.JsonUtil.globalHandlers.fireEvent(event); event.call = null; }
@org.junit.Test public void createBranchByProjectOwnerCreateReferenceBlocked_Forbidden() throws java.lang.Exception { grantOwner(); blockCreateReference(); setApiUser(user); assertCreateFails(testBranch, com.google.gerrit.extensions.restapi.AuthException.class, "create not permitted for refs/heads/test"); }
@java.lang.Override public void onChange(com.google.gwt.event.dom.client.ChangeEvent event) { setEnabledForUseContentMerge(); }
public com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> byChange(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = gitManager.openRepository(change.getProject())) { int n = change.currentPatchSetId().get(); java.lang.String[] refNames = new java.lang.String[n]; for (int i = n; i > 0; i--) { refNames[(i - 1)] = com.google.gerrit.reviewdb.client.RefNames.refsEdit(user.getAccountId(), change.getId(), new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), i)); } org.eclipse.jgit.lib.Ref ref = repo.getRefDatabase().firstExactRef(refNames); if (ref == null) { return com.google.common.base.Optional.absent(); } try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit commit = rw.parseCommit(ref.getObjectId()); com.google.gerrit.reviewdb.client.PatchSet basePs = getBasePatchSet(change, ref); return com.google.common.base.Optional.of(new com.google.gerrit.server.edit.ChangeEdit(user, change, ref, commit, basePs)); } } }
private static void setMissingHeader(java.util.Map<java.lang.String, com.google.gerrit.server.mail.send.EmailHeader> hdrs, java.lang.String name, java.lang.String value) { if ((!(hdrs.containsKey(name))) || (hdrs.get(name).isEmpty())) { hdrs.put(name, new com.google.gerrit.server.mail.send.EmailHeader.String(value)); } }
@org.junit.Test public void oneReviewerMultipleTypes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(otherUser.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(com.google.gerrit.server.notedb.ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); update = newUpdate(c, otherUser); update.putReviewer(otherUser.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.CC); commit(update); notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(com.google.gerrit.server.notedb.ReviewerState.CC, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }
public void removeGroupMembers(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> accountIds) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.reviewdb.client.AccountGroup> foundGroup = groups.get(db, groupUuid); if (!(foundGroup.isPresent())) { return; } com.google.gerrit.reviewdb.client.AccountGroup group = foundGroup.get(); com.google.gerrit.reviewdb.client.AccountGroup.Id groupId = group.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupMember> membersToRemove = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.Account.Id accountId : accountIds) { boolean isMember = groups.isMember(db, group, accountId); if (isMember) { com.google.gerrit.reviewdb.client.AccountGroupMember.Key key = new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(accountId, groupId); membersToRemove.add(new com.google.gerrit.reviewdb.client.AccountGroupMember(key)); } } if (membersToRemove.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchDeleteAccountsFromGroup(currentUser.getAccountId(), membersToRemove); } db.accountGroupMembers().delete(membersToRemove); for (com.google.gerrit.reviewdb.client.AccountGroupMember member : membersToRemove) { accountCache.evict(member.getAccountId()); } }
@com.google.gwt.uibinder.client.UiHandler("reply") void onReply(com.google.gwt.event.dom.client.ClickEvent e) { e.stopPropagation(); doReply(); }
@org.junit.Test public void lookUpFromCacheByEmail() throws java.lang.Exception { assertEmail(byEmailCache.get(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(db, com.google.gerrit.server.account.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); assertEmail(byEmailCache.get(email), admin); assertThat(byEmailCache.get(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(byEmailCache.get(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(byEmailCache.get("non-existing@example.com")).isEmpty(); }
public void createSingleDownstreamMerge(com.googlesource.gerrit.plugins.automerger.SingleDownstreamMergeInput sdsMergeInput) throws com.google.gerrit.extensions.restapi.RestApiException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String currentTopic = getOrSetTopic(sdsMergeInput.changeNumber, sdsMergeInput.topic); com.google.gerrit.extensions.common.MergeInput mergeInput = new com.google.gerrit.extensions.common.MergeInput(); mergeInput.source = sdsMergeInput.currentRevision; mergeInput.strategy = "recursive"; com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug("Creating downstream merge for {}", sdsMergeInput.currentRevision); com.google.gerrit.extensions.common.ChangeInput downstreamChangeInput = new com.google.gerrit.extensions.common.ChangeInput(); downstreamChangeInput.project = sdsMergeInput.project; downstreamChangeInput.branch = sdsMergeInput.downstreamBranch; downstreamChangeInput.subject = ((sdsMergeInput.subject) + " am: ") + (sdsMergeInput.currentRevision.substring(0, 10)); downstreamChangeInput.topic = currentTopic; downstreamChangeInput.merge = mergeInput; downstreamChangeInput.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.NONE; if (!(sdsMergeInput.doMerge)) { mergeInput.strategy = "ours"; downstreamChangeInput.subject = ((sdsMergeInput.subject) + " skipped: ") + (sdsMergeInput.currentRevision.substring(0, 10)); com.googlesource.gerrit.plugins.automerger.DownstreamCreator.log.debug("Skipping merge for {} to {}", sdsMergeInput.currentRevision, sdsMergeInput.downstreamBranch); } com.google.gerrit.extensions.api.changes.ChangeApi downstreamChange = gApi.changes().create(downstreamChangeInput); updateVote(downstreamChange.get(), config.getAutomergeLabel(), config.getMaxAutomergeVote()); }
@java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.gerrit.reviewdb.server.ReviewDb db = sysInjector.getInstance(com.google.gerrit.reviewdb.server.ReviewDb.class); com.google.gerrit.server.git.GitRepositoryManager mgr = sysInjector.getInstance(com.google.gerrit.server.git.GitRepositoryManager.class); repo = mgr.openRepository(project); try { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getAllRefs(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().byProject(project)) { java.lang.String refName = c.currentPatchSetId().toRefName(); org.eclipse.jgit.lib.Ref r = refs.get(refName); if (r != null) { byId.put(r.getObjectId(), new com.google.gerrit.server.query.change.ChangeData(c)); } else { fail((((("Failed to index change " + (c.getId())) + " (") + refName) + " not found)"), true, null); } } walk(); } finally { repo.close(); org.eclipse.jgit.lib.RepositoryCache.close(repo); } return null; }
public boolean isReachableFrom(com.google.gerrit.server.project.ProjectState state, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevCommit commit, java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs) { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { refs = refFilter.create(state, repo).filter(refs, true); return com.google.gerrit.server.change.IncludedInResolver.includedInAny(repo, rw, commit, refs.values()); } catch (java.io.IOException e) { com.google.gerrit.server.project.CommitsCollection.log.error(java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), state.getProject().getNameKey()), e); return false; } }
public <T> java.util.concurrent.Callable<T> scope(com.google.gerrit.server.util.RequestContext requestContext, java.util.concurrent.Callable<T> callable) { final com.google.gerrit.server.git.PerThreadRequestScope.Context ctx = new com.google.gerrit.server.git.PerThreadRequestScope.Context(); final java.util.concurrent.Callable<T> wrapped = context(requestContext, cleanup(callable)); return new java.util.concurrent.Callable<T>() { @java.lang.Override public T call() throws java.lang.Exception { com.google.gerrit.server.git.PerThreadRequestScope.Context old = com.google.gerrit.server.git.PerThreadRequestScope.current.get(); com.google.gerrit.server.git.PerThreadRequestScope.current.set(ctx); try { return wrapped.call(); } finally { com.google.gerrit.server.git.PerThreadRequestScope.current.set(old); } } }; }
private void decodeReviewers(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, com.google.gerrit.server.query.change.ChangeData cd) { cd.setReviewers(com.google.gerrit.server.index.change.ChangeField.parseReviewerFieldValues(com.google.common.collect.FluentIterable.from(doc.get(com.google.gerrit.lucene.LuceneChangeIndex.REVIEWER_FIELD)).transform(IndexableField::stringValue))); }
private native final net.codemirror.lib.LineCharacter setLine(int line);
@java.lang.Override void onRefReplicatedToAllNodes(java.lang.String project, java.lang.String ref, int nodesCount) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); sb.append("Replication of "); sb.append(project); sb.append(" ref "); sb.append(ref); sb.append(" completed to "); sb.append(nodesCount); sb.append(" nodes, "); writeStdOut(sb.toString()); }
public void merge(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.IdentifiedUser caller, boolean checkSubmitRules) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException { updateSubmissionId(change); this.db = db; logDebug("Beginning integration of {}", change); try { com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.completeChangeSet(db, change); logDebug("Calculated to merge {}", cs); if (checkSubmitRules) { logDebug("Checking submit rules and state"); checkSubmitRulesAndState(cs); } try { integrateIntoHistory(cs, caller); } catch (com.google.gerrit.server.git.IntegrationException e) { logError("Merge Conflict", e); throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } }
private static java.lang.String encoding(javax.servlet.http.HttpServletRequest req) { return com.google.common.base.MoreObjects.firstNonNull(req.getCharacterEncoding(), java.nio.charset.StandardCharsets.UTF_8.name()); }
private void checkSignature(org.bouncycastle.openpgp.PGPSignature sig, org.eclipse.jgit.transport.PushCertificate cert, org.bouncycastle.openpgp.PGPPublicKeyRingCollection keys, java.util.List<java.lang.String> problems) { java.util.List<java.lang.String> deferredProblems = new java.util.ArrayList<>(); boolean anyKeys = false; for (org.bouncycastle.openpgp.PGPPublicKeyRing kr : keys) { org.bouncycastle.openpgp.PGPPublicKey k = kr.getPublicKey(); anyKeys = true; try { sig.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), k); sig.update(org.eclipse.jgit.lib.Constants.encode(cert.toText())); if (!(sig.verify())) { deferredProblems.add(("Signature not valid with public key: " + (com.google.gerrit.gpg.PublicKeyStore.keyToString(k)))); continue; } com.google.gerrit.gpg.CheckResult result = publicKeyChecker.check(k); if (result.isOk()) { return; } java.lang.StringBuilder err = new java.lang.StringBuilder("Invalid public key ").append(com.google.gerrit.gpg.PublicKeyStore.keyToString(k)).append(":"); for (java.lang.String problem : result.getProblems()) { err.append("\n ").append(problem); } problems.add(err.toString()); return; } catch (org.bouncycastle.openpgp.PGPException e) { deferredProblems.add(((("Error checking signature with public key " + (com.google.gerrit.gpg.PublicKeyStore.keyToString(k))) + ": ") + (e.getMessage()))); } } if (!anyKeys) { problems.add(("No public keys found for key ID " + (com.google.gerrit.gpg.PublicKeyStore.keyIdToString(sig.getKeyID())))); } else { problems.addAll(deferredProblems); } }
private int getEffectiveLimit(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) { java.util.List<java.lang.Integer> possibleLimits = new java.util.ArrayList<>(4); possibleLimits.add(getBackendSupportedLimit()); possibleLimits.add(getPermittedLimit()); if ((limitFromCaller) > 0) { possibleLimits.add(limitFromCaller); } java.lang.Integer limitFromPredicate = com.google.gerrit.server.query.LimitPredicate.getLimit(com.google.gerrit.server.query.change.ChangeQueryBuilder.FIELD_LIMIT, p); if (limitFromPredicate != null) { possibleLimits.add(limitFromPredicate); } return com.google.common.collect.Ordering.natural().min(possibleLimits); }
@java.lang.Override protected void formatChange() throws com.google.gerrit.server.mail.EmailException { appendText(velocifyFile("Abandoned.vm")); }
java.util.List<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> getReviewerFilterSections() { com.google.common.collect.ImmutableList.Builder<com.googlesource.gerrit.plugins.reviewers.ReviewerFilterSection> b = com.google.common.collect.ImmutableList.builder(); for (java.lang.String f : cfg.getSubsections(com.googlesource.gerrit.plugins.reviewers.ReviewersConfig.SECTION_FILTER)) { b.add(newReviewerFilterSection(f)); } return b.build(); }
private java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> getPluginConfigValues() { java.util.Map<java.lang.String, java.util.Map<java.lang.String, java.lang.String>> pluginConfigValues = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, java.lang.String>>(pluginConfigWidgets.size()); for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>> e : pluginConfigWidgets.entrySet()) { java.util.Map<java.lang.String, java.lang.String> values = new java.util.HashMap<java.lang.String, java.lang.String>(e.getValue().size()); pluginConfigValues.put(e.getKey(), values); for (java.util.Map.Entry<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> e2 : e.getValue().entrySet()) { com.google.gwt.user.client.ui.FocusWidget widget = e2.getValue(); if (widget instanceof com.google.gwt.user.client.ui.TextBox) { values.put(e2.getKey(), ((com.google.gwt.user.client.ui.TextBox) (widget)).getValue().trim()); } else if (widget instanceof com.google.gwt.user.client.ui.CheckBox) { values.put(e2.getKey(), java.lang.Boolean.toString(((com.google.gwt.user.client.ui.CheckBox) (widget)).getValue())); } else if (widget instanceof com.google.gwt.user.client.ui.ListBox) { com.google.gwt.user.client.ui.ListBox listBox = ((com.google.gwt.user.client.ui.ListBox) (widget)); java.lang.String value = listBox.getValue(listBox.getSelectedIndex()); values.put(e2.getKey(), value); } } } return pluginConfigValues; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); }
void close() { reopenThread.close(); try { searcherManager.maybeRefreshBlocking(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error finishing pending Lucene writes", e); } try { writer.getIndexWriter().close(); } catch (org.apache.lucene.store.AlreadyClosedException e) { } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error closing Lucene writer", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.SubIndex.log.warn("error closing Lucene directory", e); } }
@org.junit.Test public void byDefaultField() throws java.lang.Exception { com.google.gerrit.extensions.common.GroupInfo group1 = createGroup(name("foo-group")); com.google.gerrit.extensions.common.GroupInfo group2 = createGroup(name("group2")); com.google.gerrit.extensions.common.GroupInfo group3 = createGroupWithDescription(name("group3"), ("decription that contains foo and the UUID of group2: " + (group2.id))); assertQuery("non-existing"); assertQuery("foo", group1, group3); assertQuery(group2.id, group2, group3); }
private static org.eclipse.jgit.storage.file.FileBasedConfig loadConfig(@com.google.gerrit.common.Nullable org.eclipse.jgit.lib.Config base, java.nio.file.Path path) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(base, path.toFile(), org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.inject.ProvisionException(e.getMessage(), e); } return cfg; }
private void readChangesForReplace() throws com.google.gwtorm.server.OrmException { java.util.List<com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException>> futures = com.google.common.collect.Lists.newArrayListWithCapacity(replaceByChange.size()); for (com.google.gerrit.server.git.ReceiveCommits.ReplaceRequest request : replaceByChange.values()) { futures.add(notesFactory.createAsync(changeUpdateExector, db, project.getNameKey(), request.ontoChange)); } for (com.google.common.util.concurrent.CheckedFuture<com.google.gerrit.server.notedb.ChangeNotes, com.google.gwtorm.server.OrmException> f : futures) { com.google.gerrit.server.notedb.ChangeNotes notes = f.checkedGet(); if ((notes.getChange()) != null) { replaceByChange.get(notes.getChangeId()).change = notes.getChange(); } } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } }
private java.lang.String getScopesKey(javax.servlet.http.HttpServletRequest request, javax.servlet.http.HttpServletResponse response) { java.lang.String scopeRequested = request.getParameter("scope"); if (scopeRequested == null) { scopeRequested = getScopesKeyFromCookie(request); } if (scopeRequested != null) { javax.servlet.http.Cookie scopeCookie = new javax.servlet.http.Cookie("scope", scopeRequested); scopeCookie.setPath("/"); scopeCookie.setMaxAge(((int) (com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.SCOPE_COOKIE_NEVER_EXPIRES))); response.addCookie(scopeCookie); } return com.google.common.base.Objects.firstNonNull(scopeRequested, "scopes"); }
private void setOurs() throws com.google.gerrit.server.git.CodeReviewNoteCreationException, java.io.IOException { if ((baseCommit) != null) { ours = org.eclipse.jgit.notes.NoteMap.read(db.newObjectReader(), baseCommit); } else { ours = org.eclipse.jgit.notes.NoteMap.newEmptyMap(); } java.lang.StringBuilder message = new java.lang.StringBuilder("Update notes for submitted changes\n\n"); for (com.google.gerrit.server.git.CodeReviewCommit c : commits) { org.eclipse.jgit.lib.ObjectId noteContent = createNoteContent(c); if (ours.contains(c)) { org.eclipse.jgit.notes.DefaultNoteMerger noteMerger = new org.eclipse.jgit.notes.DefaultNoteMerger(); org.eclipse.jgit.notes.Note newNote = new org.eclipse.jgit.notes.Note(c, noteContent); noteContent = noteMerger.merge(null, newNote, base.getNote(c), reader, inserter).getData(); } ours.set(c, noteContent); message.append("* ").append(c.getShortMessage()).append("\n"); } if ((baseCommit) != null) { oursCommit = createCommit(ours, author, message.toString(), baseCommit); } else { oursCommit = createCommit(ours, author, message.toString()); } }
@java.lang.Override public com.google.gerrit.server.plugins.PluginContentScanner getContentScanner() { return PluginContentScanner.EMPTY; }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.query.change.ChangeQueryRewriter.class).to(com.google.gerrit.server.index.IndexRewriteImpl.class); bind(IndexRewriteImpl.BasicRewritesImpl.class); bind(com.google.gerrit.server.index.IndexCollection.class); listener().to(com.google.gerrit.server.index.IndexCollection.class); install(new com.google.inject.assistedinject.FactoryModuleBuilder().implement(com.google.gerrit.server.index.ChangeIndexer.class, com.google.gerrit.server.index.ChangeIndexerImpl.class).build(ChangeIndexer.Factory.class)); if ((indexExecutor) != null) { bind(com.google.common.util.concurrent.ListeningScheduledExecutorService.class).annotatedWith(com.google.gerrit.server.index.IndexExecutor.class).toInstance(indexExecutor); } else { install(new com.google.gerrit.server.index.IndexModule.IndexExecutorModule(threads)); } }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { return cd.submitRecords(ChangeField.SUBMIT_RULE_OPTIONS_STRICT).stream().anyMatch(( r) -> r.status == (status)); }
@java.lang.Override public void deleteEmail(java.lang.String email) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.account.AccountResource.Email rsrc = new com.google.gerrit.server.account.AccountResource.Email(account.getUser(), email); try { deleteEmail.apply(rsrc, null); } catch (com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete email", e); } }
public java.lang.String toFile(java.lang.String project, java.lang.String commit, java.lang.String file) { java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<java.lang.String, java.lang.String>(); p.put("project", encode(project)); p.put("commit", encode(commit)); p.put("file", encode(file)); com.google.gerrit.common.data.ParameterizedString pattern = ((file == null) || (file.isEmpty())) ? new com.google.gerrit.common.data.ParameterizedString(type.getRootTree()) : new com.google.gerrit.common.data.ParameterizedString(type.getFile()); return (baseUrl) + (pattern.replace(p)); }
private void init() { if (!(intialized)) { intialized = true; if (!(initialize(com.google.gerrit.rules.PrologEnvironment.PACKAGE_LIST))) { throw new com.googlecode.prolog_cafe.lang.SystemException("Prolog initialization failed"); } } }
public void addAllReviewers(com.google.gerrit.server.data.ChangeAttribute a, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals = db.get().patchSetApprovals().byChange(change.getId()).toList(); if (!(approvals.isEmpty())) { a.allReviewers = com.google.common.collect.Lists.newArrayList(); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> seen = com.google.common.collect.Sets.newHashSet(); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : approvals) { com.google.gerrit.reviewdb.client.Account.Id id = psa.getAccountId(); if (!(seen.contains(id))) { seen.add(id); a.allReviewers.add(asAccountAttribute(id)); } } } }
private void enable(boolean enabled) { commitMessage.setEnabled(enabled); commit.setEnabled((enabled ? !(access.getOwnerOf().isEmpty()) : false)); review.setEnabled((enabled ? access.canUpload() : false)); cancel1.setEnabled(enabled); cancel2.setEnabled(enabled); }
public com.google.gwtexpui.safehtml.client.SafeHtml replaceAll(final java.util.List<com.google.gwtexpui.safehtml.client.RegexFindReplace> findReplaceList) { if (findReplaceList == null) { return this; } java.util.List<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement> repls = new java.util.ArrayList<com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement>(findReplaceList.size()); java.lang.StringBuilder pat = new java.lang.StringBuilder(); java.util.Iterator<com.google.gwtexpui.safehtml.client.RegexFindReplace> it = findReplaceList.iterator(); while (it.hasNext()) { com.google.gwtexpui.safehtml.client.RegexFindReplace fr = it.next(); repls.add(new com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement(fr.find(), fr.replace())); pat.append(fr.find()); if (it.hasNext()) { pat.append('|'); } } java.lang.StringBuilder result = new java.lang.StringBuilder(); com.google.gwt.regexp.shared.RegExp re = com.google.gwt.regexp.shared.RegExp.compile(pat.toString(), "g"); java.lang.String orig = asString(); int index = 0; com.google.gwt.regexp.shared.MatchResult mat; while ((mat = re.exec(orig)) != null) { java.lang.String g = mat.getGroup(0); for (com.google.gwtexpui.safehtml.client.SafeHtml.RegExpReplacement repl : repls) { if ((repl.re.exec(g)) != null) { result.append(orig.substring(index, mat.getIndex())); result.append(repl.re.replace(g, repl.repl)); index = (mat.getIndex()) + (g.length()); break; } } } result.append(orig.substring(index, orig.length())); return com.google.gwtexpui.safehtml.client.SafeHtml.asis(result.toString()); }
private java.lang.Runnable updateActiveLine(final net.codemirror.lib.CodeMirror cm) { final net.codemirror.lib.CodeMirror other = otherCM(cm); return new java.lang.Runnable() { public void run() { if (cm.hasActiveLine()) { cm.removeLineClass(cm.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); cm.removeLineClass(cm.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } if (other.hasActiveLine()) { other.removeLineClass(other.getActiveLine(), LineClassWhere.WRAP, diffTable.style.activeLine()); other.removeLineClass(other.getActiveLine(), LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } int line = cm.getCursor("head").getLine(); com.google.gerrit.client.diff.LineMapper.LineOnOtherInfo info = mapper.lineOnOther((cm == (cmA) ? com.google.gerrit.common.changes.Side.PARENT : com.google.gerrit.common.changes.Side.REVISION), line); int oLine = info.getLine(); cm.setActiveLine(line); cm.addLineClass(line, LineClassWhere.WRAP, diffTable.style.activeLine()); cm.addLineClass(line, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); if (info.isAligned()) { other.setActiveLine(oLine); other.addLineClass(oLine, LineClassWhere.WRAP, diffTable.style.activeLine()); other.addLineClass(oLine, LineClassWhere.BACKGROUND, diffTable.style.activeLineBg()); } } }; }
private java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store, com.google.gerrit.server.IdentifiedUser user) throws java.io.IOException { com.google.gerrit.gpg.GerritPublicKeyChecker checker = checkerFactory.create(user); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); com.google.gerrit.gpg.CheckResult result = checker.check(key, store); com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(key, result); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }
@java.lang.Override public com.google.gerrit.common.data.GroupDetail call() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException { control = groupControl.validateFor(groupId); final com.google.gerrit.reviewdb.client.AccountGroup group = groupCache.get(groupId); final com.google.gerrit.common.data.GroupDetail detail = new com.google.gerrit.common.data.GroupDetail(); detail.setGroup(group); com.google.gerrit.common.data.GroupDescription.Basic ownerGroup = groupBackend.get(group.getOwnerGroupUUID()); if (ownerGroup != null) { detail.setOwnerGroup(com.google.gerrit.common.data.GroupReference.forGroup(ownerGroup)); } switch (group.getType()) { case INTERNAL : detail.setMembers(loadMembers()); detail.setIncludes(loadIncludes()); break; } detail.setAccounts(aic.create()); detail.setCanModify(control.isOwner()); detail.setGroups(gic.create()); return detail; }
protected void doAddNew() { final java.lang.String projectName = nameBox.getText().trim(); if ("".equals(projectName)) { return; } java.lang.String filter = filterTxt.getText(); if (((filter == null) || (filter.isEmpty())) || (filter.equals(Util.C.defaultFilter()))) { filter = null; } addNew.setEnabled(false); nameBox.setEnabled(false); filterTxt.setEnabled(false); final com.google.gerrit.client.account.ProjectWatchInfo projectWatchInfo = com.google.gwt.core.client.JavaScriptObject.createObject().cast(); projectWatchInfo.project(projectName); projectWatchInfo.filter(filterTxt.getText()); com.google.gerrit.client.account.AccountApi.updateWatchedProject("self", projectWatchInfo, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo>>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArray<com.google.gerrit.client.account.ProjectWatchInfo> watchedProjects) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); nameBox.setText(""); watchesTab.insertWatch(projectWatchInfo); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { addNew.setEnabled(true); nameBox.setEnabled(true); filterTxt.setEnabled(true); super.onFailure(caught); } }); }
private void insertArchive() { java.util.List<com.google.gwt.user.client.ui.Anchor> formats = new java.util.ArrayList<>(com.google.gerrit.client.change.DownloadBox.ARCHIVE.length); for (java.lang.String f : com.google.gerrit.client.change.DownloadBox.ARCHIVE) { com.google.gwt.user.client.ui.Anchor archive = new com.google.gwt.user.client.ui.Anchor(f); archive.setHref(new com.google.gerrit.client.rpc.RestApi("/changes/").id(psId.getParentKey().get()).view("revisions").id(revision).view("archive").addParameter("format", f).url()); formats.add(archive); } com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); java.util.Iterator<com.google.gwt.user.client.ui.Anchor> it = formats.iterator(); while (it.hasNext()) { com.google.gwt.user.client.ui.Anchor a = it.next(); p.add(a); if (it.hasNext()) { com.google.gwt.user.client.ui.InlineLabel spacer = new com.google.gwt.user.client.ui.InlineLabel("|"); spacer.setStyleName(Gerrit.RESOURCES.css().downloadBoxSpacer()); p.add(spacer); } } insertCommand("Archive", p); }
public com.google.gwtjsonrpc.client.VoidResult run(final com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.account.Failure, com.google.gwtorm.client.OrmException { final com.google.gerrit.reviewdb.AccountGroup group = db.accountGroups().get(groupId); assertAmGroupOwner(db, group); group.setVisibleToAll(groupOptions.isVisibleToAll()); db.accountGroups().update(java.util.Collections.singleton(group)); groupCache.evict(group); return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
private boolean isOpen() { return getStyleName().contains(style.open()); }
public void evict(java.lang.String username) { self.remove(username); }
protected com.google.gerrit.acceptance.AbstractNotificationTest.StagedPreChange stagePreChange(java.lang.String ref, @com.google.gerrit.common.Nullable com.google.gerrit.acceptance.AbstractNotificationTest.PushOptionGenerator pushOptionGenerator, com.google.gerrit.server.account.WatchConfig.NotifyType... watches) throws java.lang.Exception { return new com.google.gerrit.acceptance.AbstractNotificationTest.StagedPreChange(ref, pushOptionGenerator, com.google.common.collect.ImmutableList.copyOf(watches)); }
protected java.lang.String name(java.lang.String name) { return (resourcePrefix) + name; }
public void deleteAll(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { delete(db, com.google.gerrit.server.account.ExternalId.from(db.accountExternalIds().byAccount(accountId).toList())); }
private void export(com.google.gerrit.server.plugins.AutoRegisterModules.ClassData def) throws com.google.gerrit.server.plugins.InvalidPluginException { java.lang.Class<?> clazz; try { clazz = java.lang.Class.forName(def.className, false, classLoader); } catch (java.lang.ClassNotFoundException err) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Cannot load %s with @Export(\"%s\")", def.className, def.exportedAsName), err); } com.google.gerrit.extensions.annotations.Export export = clazz.getAnnotation(com.google.gerrit.extensions.annotations.Export.class); if (export == null) { PluginLoader.log.warn(java.lang.String.format("In plugin %s asm incorrectly parsed %s with @Export(\"%s\")", pluginName, clazz.getName(), def.exportedAsName)); return; } if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("org.apache.sshd.server.Command", clazz)) { if ((sshGen) != null) { sshGen.export(export, clazz); } } else if (com.google.gerrit.server.plugins.PluginGuiceEnvironment.is("javax.servlet.http.HttpServlet", clazz)) { if ((httpGen) != null) { httpGen.export(export, clazz); listen(clazz, clazz); } } else { int cnt = sysListen.size(); listen(clazz, clazz); if (cnt == (sysListen.size())) { throw new com.google.gerrit.server.plugins.InvalidPluginException(java.lang.String.format("Class %s with @Export(\"%s\") not supported", clazz.getName(), export.value())); } } }
@com.google.auto.value.extension.memoized.Memoized public long initialDelay() { long interval = interval(); if (interval <= 0) { return interval; } return com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); }
private java.util.Collection<com.google.gerrit.server.project.ProjectState> tree(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.server.permissions.PermissionBackendException { java.util.Map<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.project.ProjectState> tree = new java.util.LinkedHashMap<>(); for (com.google.gerrit.server.project.ProjectState ps : rsrc.getProjectState().tree()) { tree.put(ps.getNameKey(), ps); } tree.keySet().retainAll(permissionBackend.user(user).filter(ProjectPermission.ACCESS, tree.keySet())); return tree.values(); }
private native void notifyNewChanges(boolean b);
public static final <T extends com.googlesource.gerrit.plugins.rabbitmq.config.section.Section> T initialize(T section) { java.lang.reflect.Field[] fs = section.getClass().getFields(); for (java.lang.reflect.Field f : fs) { try { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.Default a = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.Default.class); java.lang.Class<?> type = f.getType(); if (type == (java.lang.String.class)) { f.set(section, a.value()); } else if (type == (java.lang.Integer.class)) { f.set(section, java.lang.Integer.valueOf(a.value())); } else if (type == (java.lang.Long.class)) { f.set(section, java.lang.Long.valueOf(a.value())); } else if (type == (java.lang.Boolean.class)) { f.set(section, java.lang.Boolean.valueOf(a.value())); } } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.section.Sections.LOGGER.warn("Exception during initialize: {}", f.getName()); } } return section; }
public final java.lang.String toFileHistory(com.google.gerrit.reviewdb.client.Branch.NameKey branch, java.lang.String file) { com.google.gerrit.common.data.ParameterizedString pattern = new com.google.gerrit.common.data.ParameterizedString(type().fileHistory()); java.util.Map<java.lang.String, java.lang.String> p = new java.util.HashMap<>(); p.put("project", encode(branch.getParentKey().get())); p.put("branch", encode(branch.get())); p.put("file", encode(file)); return (url()) + (pattern.replace(p)); }
private static com.google.gerrit.server.notedb.ChangeNotes.Factory.ScanResult scanChangeIds(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromPs = com.google.common.collect.ImmutableSet.builder(); com.google.common.collect.ImmutableSet.Builder<com.google.gerrit.reviewdb.client.Change.Id> fromMeta = com.google.common.collect.ImmutableSet.builder(); for (org.eclipse.jgit.lib.Ref r : repo.getRefDatabase().getRefs(RefNames.REFS_CHANGES).values()) { com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.fromRef(r.getName()); if (id != null) { (r.getName().endsWith(RefNames.META_SUFFIX) ? fromMeta : fromPs).add(id); } } return new com.google.gerrit.server.notedb.AutoValue_ChangeNotes_Factory_ScanResult(fromPs.build(), fromMeta.build()); }
boolean isVisibleA() { return visibleA; }
public java.util.Set<com.google.gerrit.reviewdb.AccountGroup.UUID> getOwners() { if (((!(localOwners.isEmpty())) || (isSpecialWildProject())) || ((project.getParent()) == null)) { return localOwners; } final com.google.gerrit.server.project.ProjectState parent = projectCache.get(project.getParent()); if (parent != null) { return parent.getOwners(); } return java.util.Collections.emptySet(); }
@java.lang.Override public int hashCode() { return uuid.hashCode(); }
static void call(final com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Project.NameKey project, final java.lang.String branch, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, final boolean enabled) { b.setEnabled(false); new com.google.gerrit.client.ui.RebaseDialog(project, branch, id, enabled) { @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.rebase(project.get(), id.get(), revision, getBase(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } @java.lang.Override public void onClose(com.google.gwt.event.logical.shared.CloseEvent<com.google.gwt.user.client.ui.PopupPanel> event) { super.onClose(event); b.setEnabled(true); } }.center(); }
public boolean getCookieSecure() { return cookieSecure; }
void set(com.google.gerrit.client.info.ChangeInfo info) { this.changeId = info.legacyId(); this.canEdit = (info.hasActions()) && (info.actions().containsKey("assignee")); assigneeLink.setText(((info.assignee()) != null ? info.assignee().name() : "")); assigneeSuggestOracle.setChange(changeId); editAssigneeIcon.setVisible(canEdit); }
public java.util.List<com.google.gerrit.extensions.common.CommentInfo> getComments(com.google.gerrit.server.change.RevisionResource rsrc) throws com.google.gwtorm.server.OrmException { return commentJson.get().setFillAccounts(includeAuthorInfo()).newCommentFormatter().formatAsList(listComments(rsrc)); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> draftby(java.lang.String who) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = parseAccount(who); java.util.List<com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { p.add(draftby(id)); } return com.google.gerrit.server.query.Predicate.or(p); }
public void commit(com.google.gerrit.reviewdb.server.ReviewDb db, java.lang.String commitMessage) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((toDelete.isEmpty()) && (toAdd.isEmpty())) { return; } db.accountExternalIds().delete(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toDelete)); db.accountExternalIds().insert(com.google.gerrit.server.account.ExternalId.toAccountExternalIds(toAdd)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo);org.eclipse.jgit.lib.ObjectInserter ins = repo.newObjectInserter()) { org.eclipse.jgit.lib.ObjectId rev = com.google.gerrit.server.account.ExternalIds.readRevision(repo); org.eclipse.jgit.notes.NoteMap noteMap = com.google.gerrit.server.account.ExternalIds.readNoteMap(rw, rev); for (com.google.gerrit.server.account.ExternalId extId : toDelete) { com.google.gerrit.server.account.ExternalIdsUpdate.remove(rw, noteMap, extId); } for (com.google.gerrit.server.account.ExternalId extId : toAdd) { com.google.gerrit.server.account.ExternalIdsUpdate.insert(rw, ins, noteMap, extId); } com.google.gerrit.server.account.ExternalIdsUpdate.commit(repo, rw, ins, rev, noteMap, commitMessage, serverIdent, serverIdent); } toAdd.clear(); toDelete.clear(); }
private void doSave() { enableForm(false); saveProject.setEnabled(false); com.google.gerrit.client.projects.ProjectApi.setConfig(getProjectKey(), descTxt.getText().trim(), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contributorAgreements), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(contentMerge), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(signedOffBy), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(newChangeForAllNotInTarget), com.google.gerrit.client.admin.ProjectInfoScreen.getBool(requireChangeID), maxObjectSizeLimit.getText().trim(), com.google.gerrit.extensions.common.SubmitType.valueOf(submitType.getValue(submitType.getSelectedIndex())), com.google.gerrit.extensions.api.projects.ProjectState.valueOf(state.getValue(state.getSelectedIndex())), getPluginConfigValues(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.projects.ConfigInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.projects.ConfigInfo result) { enableForm(); display(result); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableForm(); super.onFailure(caught); } }); }
@java.lang.Override protected com.google.gerrit.extensions.common.ChangeInfo applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.extensions.api.changes.AbandonInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gerrit.server.update.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { req.permissions().database(dbProvider).check(ChangePermission.ABANDON); com.google.gerrit.extensions.api.changes.NotifyHandling notify = ((input.notify) == null) ? defaultNotify(req.getChange()) : input.notify; com.google.gerrit.reviewdb.client.Change change = abandon(updateFactory, req.getNotes(), req.getUser(), input.message, notify, notifyUtil.resolveAccounts(input.notifyDetails)); return json.noOptions().format(change); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { try { if (list) { if ((all) || ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error("error: cannot use --list with --all or --cache"); } doList(); return; } if ((all) && ((caches.size()) > 0)) { throw com.google.gerrit.sshd.commands.FlushCaches.error("error: cannot combine --all and --cache"); } else if (((!(all)) && ((caches.size()) == 1)) && (caches.contains("all"))) { caches.clear(); all = true; } else if ((!(all)) && (caches.isEmpty())) { all = true; } if (all) { postCaches.apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH_ALL)); } else { postCaches.apply(new com.google.gerrit.server.config.ConfigResource(), new com.google.gerrit.server.config.PostCaches.Input(FLUSH, caches)); } } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw die(e.getMessage()); } }
private void deleteDraftPatchSet(com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { psUtil.delete(ctx.getDb(), ctx.getUpdate(patchSet.getId()), patchSet); accountPatchReviewStore.get().clearReviewed(psId); if ((com.google.gerrit.server.notedb.NoteDbChangeState.PrimaryStorage.of(ctx.getChange())) == (REVIEW_DB)) { com.google.gerrit.reviewdb.server.ReviewDb db = com.google.gerrit.server.change.DeleteChangeOp.unwrap(ctx.getDb()); db.changeMessages().delete(db.changeMessages().byPatchSet(psId)); db.patchComments().delete(db.patchComments().byPatchSet(psId)); db.patchSetApprovals().delete(db.patchSetApprovals().byPatchSet(psId)); } }
private com.google.gerrit.server.IdentifiedUser onBehalfOf(com.google.gerrit.server.change.RevisionResource rsrc, com.google.gerrit.extensions.api.changes.SubmitInput in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.permissions.PermissionBackend.ForChange perm = rsrc.permissions().database(dbProvider); perm.check(ChangePermission.SUBMIT); perm.check(ChangePermission.SUBMIT_AS); com.google.gerrit.server.CurrentUser caller = rsrc.getUser(); com.google.gerrit.server.IdentifiedUser submitter = accounts.parseOnBehalfOf(caller, in.onBehalfOf); try { perm.user(submitter).check(ChangePermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("on_behalf_of account %s cannot see change", submitter.getAccountId())); } return submitter; }
private void editAssignee(final java.lang.String assignee) { if (assignee.isEmpty()) { com.google.gerrit.client.changes.ChangeApi.deleteAssignee(changeId.get(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(null); } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } else { com.google.gerrit.client.changes.ChangeApi.setAssignee(changeId.get(), assignee, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.info.AccountInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.info.AccountInfo result) { onCloseForm(); setAssignee(result); com.google.gerrit.client.change.Reviewers reviewers = getReviewers(); if (reviewers != null) { reviewers.updateReviewerList(); } } @java.lang.Override public void onFailure(java.lang.Throwable err) { if (isSigninFailure(err)) { new com.google.gerrit.client.NotSignedInDialog().center(); } else { com.google.gwt.user.client.ui.UIObject.setVisible(error, true); error.setInnerText((err instanceof com.google.gwt.user.client.rpc.StatusCodeException ? ((com.google.gwt.user.client.rpc.StatusCodeException) (err)).getEncodedResponse() : err.getMessage())); } } }); } }
public java.lang.String toSubmodules() { java.lang.StringBuffer buf = new java.lang.StringBuffer(); sortByPath(); for (com.googlesource.gerrit.plugins.supermanifest.JiriProjects.Project p : projects) { buf.append(p.toSubmodules()); buf.append("\n"); } return buf.toString(); }
private void checkRevocations(org.bouncycastle.openpgp.PGPPublicKey key, java.util.List<org.bouncycastle.openpgp.PGPSignature> revocations, java.util.Map<java.lang.Long, org.bouncycastle.bcpg.sig.RevocationKey> revokers, java.util.List<java.lang.String> problems) throws java.io.IOException, org.bouncycastle.openpgp.PGPException { for (org.bouncycastle.openpgp.PGPSignature revocation : revocations) { org.bouncycastle.bcpg.sig.RevocationKey revoker = revokers.get(revocation.getKeyID()); if (revoker == null) { continue; } byte[] rfp = revoker.getFingerprint(); org.bouncycastle.openpgp.PGPPublicKeyRing revokerKeyRing = store.get(rfp); if (revokerKeyRing == null) { com.google.gerrit.gpg.PublicKeyChecker.log.info((((("Key " + (com.google.gerrit.gpg.Fingerprint.toString(key.getFingerprint()))) + " is revoked by ") + (com.google.gerrit.gpg.Fingerprint.toString(rfp))) + ", which is not in the store. Assuming revocation is valid.")); problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); continue; } org.bouncycastle.openpgp.PGPPublicKey rk = revokerKeyRing.getPublicKey(); if ((rk.getAlgorithm()) != (revoker.getAlgorithm())) { continue; } if (!(checkBasic(rk, revocation.getCreationTime()).isOk())) { continue; } revocation.init(new org.bouncycastle.openpgp.operator.bc.BcPGPContentVerifierBuilderProvider(), rk); if (revocation.verifyCertification(key)) { problems.add(com.google.gerrit.gpg.PublicKeyChecker.reasonToString(com.google.gerrit.gpg.PublicKeyChecker.getRevocationReason(revocation))); } } }
@java.lang.Override protected void doPost(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException, javax.servlet.ServletException { com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); final com.google.gerrit.server.account.AuthResult res; if ("create_account".equals(req.getParameter("action"))) { res = create(); } else if ((req.getParameter("user_name")) != null) { res = byUserName(req.getParameter("user_name")); } else if ((req.getParameter("preferred_email")) != null) { res = byPreferredEmail(req.getParameter("preferred_email")); } else if ((req.getParameter("account_id")) != null) { res = byAccountId(req.getParameter("account_id")); } else { byte[] raw; try { raw = prepareHtmlOutput(); } catch (com.google.gwtorm.server.OrmException e) { throw new javax.servlet.ServletException(e); } rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); rsp.setContentLength(raw.length); try (java.io.OutputStream out = rsp.getOutputStream()) { out.write(raw); } return; } if (res != null) { webSession.get().login(res, false); final java.lang.StringBuilder rdr = new java.lang.StringBuilder(); rdr.append(req.getContextPath()); rdr.append("/"); if (res.isNew()) { rdr.append(('#' + (com.google.gerrit.common.PageLinks.REGISTER))); } else { rdr.append(com.google.gerrit.httpd.LoginUrlToken.getToken(req)); } rsp.sendRedirect(rdr.toString()); } else { rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC.name()); try (java.io.Writer out = rsp.getWriter()) { out.write("<html>"); out.write("<body>"); out.write("<h1>Account Not Found</h1>"); out.write("</body>"); out.write("</html>"); } } }
public java.lang.String getChangeDetail() { try { java.lang.StringBuilder detail = new java.lang.StringBuilder(); if ((patchSetInfo) != null) { detail.append(patchSetInfo.getMessage().trim()).append("\n"); } else { detail.append(change.getSubject().trim()).append("\n"); } if ((patchSet) != null) { detail.append("---\n"); com.google.gerrit.server.diff.PatchList patchList = getPatchList(); for (com.google.gerrit.server.diff.PatchListEntry p : patchList.getPatches()) { if (com.google.gerrit.reviewdb.client.Patch.isMagic(p.getNewName())) { continue; } detail.append(p.getChangeType().getCode()).append(" ").append(p.getNewName()).append("\n"); } detail.append(java.text.MessageFormat.format(("" + ((("{0,choice,0#0 files|1#1 file|1<{0} files} changed, " + "{1,choice,0#0 insertions|1#1 insertion|1<{1} insertions}(+), ") + "{2,choice,0#0 deletions|1#1 deletion|1<{2} deletions}(-)") + "\n")), ((patchList.getPatches().size()) - 1), patchList.getInsertions(), patchList.getDeletions())); detail.append("\n"); } return detail.toString(); } catch (java.lang.Exception err) { com.google.gerrit.server.mail.send.ChangeEmail.log.warn("Cannot format change detail", err); return ""; } }
private boolean can(com.google.gerrit.server.permissions.ChangePermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { try { switch (perm) { case READ : return isVisible(db(), changeData()); case ABANDON : return canAbandon(db()); case DELETE : return canDelete(db(), getChange().getStatus()); case ADD_PATCH_SET : return canAddPatchSet(db()); case EDIT_ASSIGNEE : return canEditAssignee(); case EDIT_DESCRIPTION : return canEditDescription(); case EDIT_HASHTAGS : return canEditHashtags(); case EDIT_TOPIC_NAME : return canEditTopicName(); case REBASE : return canRebase(db()); case RESTORE : return canRestore(db()); case SUBMIT : return getRefControl().canSubmit(isOwner()); case REMOVE_REVIEWER : case SUBMIT_AS : return getRefControl().canPerform(perm.permissionName().get()); } } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.server.permissions.PermissionBackendException("unavailable", e); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
@java.lang.Override public java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo>> robotComments() throws com.google.gerrit.extensions.restapi.RestApiException { try { return listChangeRobotComments.apply(change); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot get robot comments", e); } }
@org.junit.Test public void pushSameCommitTwice() throws java.lang.Exception { com.google.gerrit.server.git.ProjectConfig config = projectCache.checkedGet(project).getConfig(); config.getProject().setCreateNewChangeForAllNotInTarget(InheritableBoolean.TRUE); saveProjectConfig(project, config); com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "a.txt", "content"); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to("refs/for/master"); r.assertOkStatus(); push = pushFactory.create(db, admin.getIdent(), testRepo, PushOneCommit.SUBJECT, "b.txt", "anotherContent"); r = push.to("refs/for/master"); r.assertOkStatus(); com.google.gerrit.acceptance.GitUtil.assertPushRejected(com.google.gerrit.acceptance.GitUtil.pushHead(testRepo, "refs/for/master", false), "refs/for/master", "commit(s) already exists (as current patchset)"); }
private void updateNonChangeRefs(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(ConfigureRepositoryStep.R_IMPORTS); for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Ref> e : refs.entrySet()) { java.lang.String name = e.getKey(); if (name.startsWith("imports/")) { continue; } if (name.startsWith("cache-automerge/")) { continue; } if (name.startsWith("changes/")) { continue; } if ((name.startsWith("users/")) && (name.contains("/edit"))) { continue; } java.lang.String targetRef = (org.eclipse.jgit.lib.Constants.R_REFS) + name; org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(targetRef); ru.setNewObjectId(e.getValue().getObjectId()); org.eclipse.jgit.lib.RefUpdate.Result result = ru.forceUpdate(); switch (result) { case NEW : case FAST_FORWARD : case FORCED : case NO_CHANGE : break; default : throw new java.io.IOException(java.lang.String.format("Failed to update %s, RefUpdate.Result = %s", targetRef, result)); } } }
@org.junit.Test public void replacementStringOfFixReplacementIsAcceptedAsIs() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().onlyReplacement().replacement().isEqualTo(fixReplacementInfo.replacement); }
public void registerEmail(final java.lang.String address, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.reviewdb.Account> cb) { if ((authConfig.getAuthType()) == (com.google.gerrit.reviewdb.AuthType.DEVELOPMENT_BECOME_ANY_ACCOUNT)) { try { accountManager.link(user.get().getAccountId(), com.google.gerrit.server.account.AuthRequest.forEmail(address)); cb.onSuccess(user.get().getAccount()); } catch (com.google.gerrit.server.account.AccountException e) { cb.onFailure(e); } } else { try { final com.google.gerrit.server.mail.RegisterNewEmailSender sender; sender = registerNewEmailFactory.create(address); sender.send(); } catch (com.google.gerrit.server.mail.EmailException e) { log.error(("Cannot send email verification message to " + address), e); cb.onFailure(e); } catch (java.lang.RuntimeException e) { log.error(("Cannot send email verification message to " + address), e); cb.onFailure(e); } } }
public Patch.Key getPatchKey() { return key; }
public void remove(com.google.gerrit.common.data.AccessSection section) { if (section != null) { java.lang.String name = section.getName(); if (sectionsWithUnknownPermissions.contains(name)) { com.google.gerrit.common.data.AccessSection a = accessSections.get(name); a.setPermissions(new java.util.ArrayList<com.google.gerrit.common.data.Permission>()); } else { accessSections.remove(name); } } }
@org.kohsuke.args4j.Option(name = "--format", metaVar = "FMT", usage = "Output display format") void setFormat(com.google.gerrit.server.query.change.QueryProcessor.OutputFormat format) { processor.setOutput(out, format); }
private static int find(java.util.List<java.lang.String> list, java.lang.String p) { int r = java.util.Collections.binarySearch(list, p); return r < 0 ? -(r + 1) : r; }
private void initContext(com.google.gwt.user.client.ui.ListBox context) { for (final short v : com.google.gerrit.extensions.client.DiffPreferencesInfo.CONTEXT_CHOICES) { final java.lang.String label; if (v == (com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT)) { label = Util.C.contextWholeFile(); } else { label = Util.M.lines(v); } context.addItem(label, java.lang.String.valueOf(v)); } }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> evaluate() { com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if (!(allowDraft)) { if ((c.getStatus()) == (Change.Status.DRAFT)) { return cannotSubmitDraft(); } try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError(("Error looking up patch set " + (control.getChange().currentPatchSetId()))); } if (patchSet.isDraft()) { return cannotSubmitDraft(); } } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s of %s has " + "no solution."), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
public static com.google.gerrit.server.index.FieldDef.Builder<java.lang.Integer> intRange(java.lang.String name) { return new com.google.gerrit.server.index.FieldDef.Builder(FieldType.INTEGER_RANGE, name).stored(); }
@java.lang.Override public void onFailure(java.lang.Throwable err) { getTab().setTitle(Resources.M.cherryPicks(Resources.C.notAvailable())); getTab().setError(err.getMessage()); }
private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); if (httpd) { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); } else { modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.server.config.CanonicalWebUrlProvider.class; } }); } if (!(slave)) { modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); } return cfgInjector.createChildInjector(modules); }
private static com.google.gerrit.gpg.PushCertificateChecker.Result combine(com.google.gerrit.gpg.PushCertificateChecker.Result sigResult, java.util.List<com.google.gerrit.gpg.CheckResult> results) { java.util.List<java.lang.String> problems = new java.util.ArrayList<>(); boolean bad = false; for (com.google.gerrit.gpg.CheckResult result : results) { problems.addAll(result.getProblems()); bad |= (result.getStatus()) == (BAD); } com.google.gerrit.extensions.common.GpgKeyInfo.Status status = (bad) ? BAD : OK; org.bouncycastle.openpgp.PGPPublicKey key; if (sigResult != null) { key = sigResult.getPublicKey(); com.google.gerrit.gpg.CheckResult cr = sigResult.getCheckResult(); problems.addAll(cr.getProblems()); if ((cr.getStatus()) == (BAD)) { status = BAD; } else if ((!bad) && ((cr.getStatus()) == (TRUSTED))) { status = TRUSTED; } } else { key = null; } return new com.google.gerrit.gpg.PushCertificateChecker.Result(key, com.google.gerrit.gpg.CheckResult.create(status, problems)); }
protected com.google.gerrit.server.patch.PatchList getPatchList() throws com.google.gerrit.server.patch.PatchListNotAvailableException { if ((patchSet) != null) { return args.patchListCache.get(change, patchSet); } throw new com.google.gerrit.server.patch.PatchListNotAvailableException("no patchSet specified"); }
public void setAccountsToNotify(com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> accountsToNotify) { this.accountsToNotify = checkNotNull(accountsToNotify); }
@org.junit.Test public void testParseMultiLineQuote() { java.lang.String comment = "> Quote line 1\n> Quote line 2\n > Quote line 3\n"; java.util.List<com.google.gerrit.server.mail.send.CommentFormatter.Block> result = com.google.gerrit.server.mail.send.CommentFormatter.parse(comment); assertThat(result).hasSize(1); assertQuoteBlock(result, 0, 1); assertBlock(result.get(0).quotedBlocks, 0, BlockType.PARAGRAPH, "Quote line 1\nQuote line 2\nQuote line 3\n"); }
public java.lang.String replacePathSeparator(java.lang.String urlSegment) { if ('/' != (pathSeparator)) { return urlSegment.replace('/', pathSeparator); } return urlSegment; }
public java.lang.String shortReason() { return shortReason; }
private com.google.common.base.Optional<com.google.gerrit.server.patch.FileList> getFileList(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { java.lang.Integer psId = ps.getId().get(); if ((fileLists) == null) { fileLists = new java.util.HashMap(); } com.google.common.base.Optional<com.google.gerrit.server.patch.FileList> r = fileLists.get(psId); if (r == null) { if (!(lazyLoad)) { return com.google.common.base.Optional.absent(); } try { r = com.google.common.base.Optional.of(patchListCache.getFileList(c, ps)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { r = com.google.common.base.Optional.absent(); } fileLists.put(psId, r); } return r; }
@java.lang.Override public void onLoad(com.google.gerrit.plugin.client.screen.Screen screen) { screen.setPageTitle("Reviewers"); screen.show(new com.googlesource.gerrit.plugins.reviewers.client.ReviewersScreen(screen.getToken())); }
@org.junit.Test public void publishesWhenRework() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.REWORK; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(true)); }
private com.google.gwt.user.client.ui.Widget createSearchLink(final com.google.gerrit.client.projects.ProjectInfo projectInfo) { com.google.gwt.user.client.ui.Image image = new com.google.gwt.user.client.ui.Image(Gerrit.RESOURCES.queryProjectLink()); com.google.gerrit.client.ui.InlineHyperlink h; if ((projectInfo.defaultDashboard()) != null) { h = new com.google.gerrit.client.ui.InlineHyperlink(" ", com.google.gerrit.common.PageLinks.toProjectDashboard(projectInfo.name_key(), projectInfo.defaultDashboard())); } else { h = new com.google.gerrit.client.ui.InlineHyperlink(" ", com.google.gerrit.common.PageLinks.toChangeQuery(com.google.gerrit.common.PageLinks.projectQuery(projectInfo.name_key()))); } h.setTitle(Util.C.projectListQueryLink()); com.google.gwt.user.client.DOM.insertBefore(h.getElement(), image.getElement(), com.google.gwt.user.client.DOM.getFirstChild(h.getElement())); return h; }
@org.junit.Test public void testCreateProjectWithProperties() throws java.io.IOException { final java.lang.String newProjectName = "newProject"; com.google.gerrit.extensions.api.projects.ProjectInput in = new com.google.gerrit.extensions.api.projects.ProjectInput(); in.description = "Test description"; in.submitType = com.google.gerrit.extensions.common.SubmitType.CHERRY_PICK; in.useContributorAgreements = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useSignedOffBy = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.useContentMerge = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; in.requireChangeId = com.google.gerrit.extensions.common.InheritableBoolean.TRUE; com.google.gerrit.acceptance.RestResponse r = adminSession.put(("/projects/" + newProjectName), in); com.google.gerrit.server.project.ProjectJson.ProjectInfo p = newGson().fromJson(r.getReader(), com.google.gerrit.server.project.ProjectJson.ProjectInfo.class); assertEquals(newProjectName, p.name); com.google.gerrit.reviewdb.client.Project project = projectCache.get(new com.google.gerrit.reviewdb.client.Project.NameKey(newProjectName)).getProject(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertProjectInfo(project, p); assertEquals(in.description, project.getDescription()); assertEquals(in.submitType, project.getSubmitType()); assertEquals(in.useContributorAgreements, project.getUseContributorAgreements()); assertEquals(in.useSignedOffBy, project.getUseSignedOffBy()); assertEquals(in.useContentMerge, project.getUseContentMerge()); assertEquals(in.requireChangeId, project.getRequireChangeID()); }
@java.lang.Override public void onLoad() { if ((projects) == null) { initUI(); } Util.PROJECT_SVC.ownedProjects(new com.google.gerrit.client.rpc.ScreenLoadCallback<java.util.List<com.google.gerrit.client.reviewdb.Project>>(this) { @java.lang.Override protected void preDisplay(final java.util.List<com.google.gerrit.client.reviewdb.Project> result) { projects.display(result); projects.finishDisplay(true); } }); }
@java.lang.Override public com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> byIncludeUUID(com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }
private void initApprovals(final com.google.gerrit.common.data.PatchSetPublishDetail r, final com.google.gwt.user.client.ui.Panel body) { com.google.gerrit.common.data.ApprovalTypes types = com.google.gerrit.client.Gerrit.getConfig().getApprovalTypes(); for (com.google.gerrit.common.data.ApprovalType type : types.getApprovalTypes()) { java.lang.String permission = com.google.gerrit.common.data.Permission.forLabel(type.getCategory().getLabelName()); com.google.gerrit.common.data.PermissionRange range = r.getRange(permission); if ((range != null) && (!(range.isEmpty()))) { initApprovalType(r, body, type, range); } } for (com.google.gerrit.common.data.PermissionRange range : r.getLabels()) { if ((!(range.isEmpty())) && ((types.byLabel(range.getLabel())) == null)) { } } }
@java.lang.Override public com.google.gerrit.client.admin.PermissionEditor create(int index) { com.google.gerrit.client.admin.PermissionEditor subEditor = new com.google.gerrit.client.admin.PermissionEditor(readOnly, value); permissionContainer.insert(subEditor, index); return subEditor; }
public static com.google.gerrit.client.account.Preferences create(com.google.gerrit.reviewdb.client.AccountGeneralPreferences in, java.util.List<com.google.gerrit.client.extensions.TopMenuItem> myMenus) { com.google.gerrit.client.account.Preferences p = createObject().cast(); if (in == null) { in = com.google.gerrit.reviewdb.client.AccountGeneralPreferences.createDefault(); } p.changesPerPage(in.getMaximumPageSize()); p.showSiteHeader(in.isShowSiteHeader()); p.useFlashClipboard(in.isUseFlashClipboard()); p.downloadScheme(in.getDownloadUrl()); p.downloadCommand(in.getDownloadCommand()); p.copySelfOnEmail(in.isCopySelfOnEmails()); p.dateFormat(in.getDateFormat()); p.timeFormat(in.getTimeFormat()); p.reversePatchSetOrder(in.isReversePatchSetOrder()); p.showUsernameInReviewCategory(in.isShowUsernameInReviewCategory()); p.relativeDateInChangeTable(in.isRelativeDateInChangeTable()); p.sizeBarInChangeTable(in.isSizeBarInChangeTable()); p.commentVisibilityStrategy(in.getCommentVisibilityStrategy()); p.diffView(in.getDiffView()); p.changeScreen(in.getChangeScreen()); p.setMyMenus(myMenus); return p; }
@org.junit.Test public void parsePatchSetGroups() throws java.lang.Exception { assertParseSucceeds(("Update change\n" + ((((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n") + "Subject: Change subject\n") + "Groups: a,b,c\n"))); assertParseFails(("Update change\n" + (((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Subject: Change subject\n") + "Groups: a,b,c\n"))); assertParseFails(("Update change\n" + (((((("\n" + "Patch-set: 1\n") + "Branch: refs/heads/master\n") + "Commit: abcd1234abcd1234abcd1234abcd1234abcd1234\n") + "Subject: Change subject\n") + "Groups: a,b,c\n") + "Groups: d,e,f\n"))); }
private static org.eclipse.jgit.errors.ConfigInvalidException invalidConfig(java.lang.String noteId, java.lang.String message) { return new org.eclipse.jgit.errors.ConfigInvalidException(java.lang.String.format("Invalid external id config for note %s: %s", noteId, message)); }
@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts(java.lang.String query) throws com.google.gerrit.extensions.restapi.RestApiException { return suggestAccounts().withQuery(query); }
public boolean shouldPublishOnChangeMerged() { return publishOnChangeMerged; }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { upToChange().run(); }
private boolean isDuplicate(com.google.gerrit.reviewdb.client.ChangeMessage msg) { try { com.google.gerrit.reviewdb.client.ChangeMessage last = com.google.common.collect.Iterables.getLast(db.changeMessages().byChange(msg.getPatchSetId().getParentKey()), null); if (last != null) { long lastMs = last.getWrittenOn().getTime(); long msgMs = msg.getWrittenOn().getTime(); if (((com.google.common.base.Objects.equal(last.getAuthor(), msg.getAuthor())) && (com.google.common.base.Objects.equal(last.getMessage(), msg.getMessage()))) && ((msgMs - lastMs) < (com.google.gerrit.server.git.MergeOp.DUPLICATE_MESSAGE_INTERVAL))) { return true; } } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.git.MergeOp.log.warn("Cannot check previous merge failure message", err); } return false; }
@org.junit.Test public void testAsText() throws java.lang.Exception { java.lang.String text = ((com.google.gerrit.server.git.DestinationListTest.HEADER_PROPER) + "#\n") + (com.google.gerrit.server.git.DestinationListTest.F_PROPER); com.google.gerrit.server.git.DestinationList dl = new com.google.gerrit.server.git.DestinationList(); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL, com.google.gerrit.server.git.DestinationListTest.F_SIMPLE, null); java.lang.String asText = dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL); assertThat(text).isEqualTo(asText); dl.parseLabel(com.google.gerrit.server.git.DestinationListTest.LABEL2, asText, null); assertThat(text).isEqualTo(dl.asText(com.google.gerrit.server.git.DestinationListTest.LABEL2)); }
@java.lang.Override public boolean updateChange(com.google.gerrit.server.git.BatchUpdate.ChangeContext ctx) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(ctx.getDb(), ctx.getNotes(), psId); java.util.List<java.lang.String> oldGroups = ps.getGroups(); if (oldGroups == null) { if ((groups) == null) { return false; } } else if (com.google.common.collect.Sets.newHashSet(oldGroups).equals(groups)) { return false; } psUtil.setGroups(ctx.getDb(), ctx.getUpdate(psId), ps, groups); return true; }
@org.junit.Test public void enableSequencesWithGap() throws java.lang.Exception { testEnableSequences((-1), 502, "512"); }
@java.lang.Override public com.google.gerrit.server.query.change.ChangeDataSource getSource(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { return new com.google.gerrit.server.index.IndexRewriteTest.Source(p); }
private void sendMarkdownAsHtml(java.util.jar.JarFile jar, java.util.jar.JarEntry entry, java.lang.String pluginName, com.google.gerrit.httpd.plugins.HttpPluginServlet.ResourceKey key, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { byte[] rawmd = com.google.gerrit.httpd.plugins.HttpPluginServlet.readWholeEntry(jar, entry); java.lang.String encoding = null; java.util.jar.Attributes atts = entry.getAttributes(); if (atts != null) { encoding = com.google.common.base.Strings.emptyToNull(atts.getValue("Character-Encoding")); } java.lang.String txtmd = org.eclipse.jgit.util.RawParseUtils.decode(java.nio.charset.Charset.forName((encoding != null ? encoding : "UTF-8")), rawmd); long time = entry.getTime(); if (0 < time) { res.setDateHeader("Last-Modified", time); } sendMarkdownAsHtml(txtmd, pluginName, key, res); }
@java.lang.Override public void onChangeAbandoned(com.google.gerrit.extensions.events.ChangeAbandonedListener.Event ev) { try { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(ev.getChange()); hooks.doChangeAbandonedHook(notes.getChange(), getAccount(ev.getAbandoner()), getPatchSet(notes, ev.getRevision()), ev.getReason(), db.get()); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.common.ChangeHookApiListener.log.error(("ChangeAbandoned hook failed to run " + (ev.getChange()._number)), e); } }
@org.junit.Test public void sendNotificationAfterPersistingComments() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); assertThat(comments).hasSize(2); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields().from(user.emailAddress).textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); sender.clear(); mailProcessor.process(b.build()); assertNotifyTo(admin); }
@java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId expected) throws java.io.IOException { if (com.google.common.base.Objects.equal(src, expected)) { return revision; } org.eclipse.jgit.lib.RefUpdate ru = db.updateRef(getRefName()); if (expected != null) { ru.setExpectedOldObjectId(expected); } else { ru.setExpectedOldObjectId(org.eclipse.jgit.lib.ObjectId.zeroId()); } ru.setNewObjectId(src); ru.disableRefLog(); inserter.flush(); switch (ru.update(rw)) { case NEW : case FAST_FORWARD : revision = rw.parseCommit(ru.getNewObjectId()); update.replicate(ru); return revision; default : throw new java.io.IOException(((((("Cannot update " + (ru.getName())) + " in ") + (db.getDirectory())) + ": ") + (ru.getResult()))); } }
@java.lang.Override public void onShowView() { super.onShowView(); related.setMaxHeight(commit.getElement().getParentElement().getOffsetHeight()); if (openReplyBox) { onReply(); } else { java.lang.String prior = com.google.gerrit.client.Gerrit.getPriorView(); if ((prior != null) && (prior.startsWith("/c/"))) { scrollToPath(prior.substring(3)); } } startPoller(); }
private boolean isEmpty() { return (((((((approvals.isEmpty()) && ((changeMessage) == null)) && (commentsForBase.isEmpty())) && (commentsForPs.isEmpty())) && (reviewers.isEmpty())) && ((status) == null)) && ((subject) == null)) && ((submitRecords) == null); }
public com.google.gerrit.common.data.LabelTypes getLabelTypes() { java.lang.String destBranch = getChange().getDest().get(); java.util.List<com.google.gerrit.common.data.LabelType> all = getProjectControl().getLabelTypes().getLabelTypes(); java.util.List<com.google.gerrit.common.data.LabelType> r = com.google.common.collect.Lists.newArrayListWithCapacity(all.size()); for (com.google.gerrit.common.data.LabelType l : all) { java.util.List<java.lang.String> refs = l.getRefPatterns(); if (refs == null) { r.add(l); } else { for (java.lang.String refPattern : refs) { if ((com.google.gerrit.common.data.RefConfigSection.isValid(refPattern)) && (match(destBranch, refPattern))) { r.add(l); break; } } } } return new com.google.gerrit.common.data.LabelTypes(r); }
public com.google.gerrit.extensions.restapi.Response<java.lang.String> apply(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.extensions.common.NameInput input) throws com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (input == null) { input = new com.google.gerrit.extensions.common.NameInput(); } if (!(realm.allowsEdit(AccountFieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow editing name"); } java.lang.String newName = input.name; com.google.gerrit.reviewdb.client.Account account = accountsUpdate.create().update(user.getAccountId(), ( u) -> u.setFullName(newName)); if (account == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } return com.google.common.base.Strings.isNullOrEmpty(account.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : com.google.gerrit.extensions.restapi.Response.ok(account.getFullName()); }
@java.lang.Override public com.google.gerrit.server.api.accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException { return new com.google.gerrit.server.api.accounts.SuggestAccountsRequest() { @java.lang.Override public java.util.List<com.google.gerrit.extensions.common.AccountInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException { return com.google.gerrit.server.api.accounts.AccountsImpl.this.suggestAccounts(this); } }; }
@java.lang.Override public void onSuccess(final com.google.gerrit.common.data.HostPageData result) { com.google.gwt.dom.client.Document.get().getElementById("gerrit_hostpagedata").removeFromParent(); com.google.gerrit.client.Gerrit.myTheme = result.theme; com.google.gerrit.client.Gerrit.isNoteDbEnabled = result.isNoteDbEnabled; if ((result.account) != null) { com.google.gerrit.client.Gerrit.myAccount = result.account; com.google.gerrit.client.Gerrit.xGerritAuth = result.xGerritAuth; } if ((result.accountDiffPref) != null) { com.google.gerrit.client.Gerrit.myAccountDiffPref = result.accountDiffPref; com.google.gerrit.client.Gerrit.applyUserPreferences(); } onModuleLoad2(result); }
public static void setCommentRevId(com.google.gerrit.reviewdb.client.Comment c, com.google.gerrit.server.diff.PatchListCache cache, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gwtorm.server.OrmException { checkArgument(((c.key.patchSetId) == (ps.getId().get())), "cannot set RevId for patch set %s on comment %s", ps.getId(), c); if ((c.revId) == null) { try { if ((com.google.gerrit.extensions.client.Side.fromShort(c.side)) == (com.google.gerrit.extensions.client.Side.PARENT)) { if ((c.side) < 0) { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, (-(c.side)))); } else { c.revId = org.eclipse.jgit.lib.ObjectId.toString(cache.getOldId(change, ps, null)); } } else { c.revId = ps.getRevision().get(); } } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gwtorm.server.OrmException(e); } } }
public com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> resolveAccounts(@com.google.gerrit.common.Nullable java.util.Map<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> notifyDetails) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { if (com.google.gerrit.server.change.NotifyUtil.isNullOrEmpty(notifyDetails)) { return com.google.common.collect.ImmutableListMultimap.of(); } com.google.common.collect.Multimap<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.reviewdb.client.Account.Id> m = null; for (java.util.Map.Entry<com.google.gerrit.extensions.api.changes.RecipientType, com.google.gerrit.extensions.api.changes.NotifyInfo> e : notifyDetails.entrySet()) { java.util.List<java.lang.String> accounts = e.getValue().accounts; if (accounts != null) { if (m == null) { m = com.google.common.collect.ArrayListMultimap.create(); } m.putAll(e.getKey(), find(dbProvider.get(), accounts)); } } return m != null ? m : com.google.common.collect.ImmutableListMultimap.of(); }
private com.google.gerrit.reviewdb.client.AccountSshKey addKey(java.lang.String pub) throws com.google.gerrit.common.errors.InvalidSshKeyException { checkLoaded(); int seq = (keys.size()) + 1; com.google.gerrit.reviewdb.client.AccountSshKey.Id keyId = new com.google.gerrit.reviewdb.client.AccountSshKey.Id(accountId, seq); com.google.gerrit.reviewdb.client.AccountSshKey key = sshKeyCreator.create(keyId, pub); keys.add(com.google.common.base.Optional.of(key)); return key; }
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { if ((changeMessage) == null) { return; } com.google.gerrit.server.IdentifiedUser user = ctx.getIdentifiedUser(); if ((input.notify.compareTo(NotifyHandling.NONE)) > 0) { try { com.google.gerrit.server.mail.ReplyToChangeSender cm = deleteVoteSenderFactory.create(ctx.getProject(), change.getId()); cm.setFrom(user.getAccountId()); cm.setChangeMessage(changeMessage.getMessage(), ctx.getWhen()); cm.setNotify(input.notify); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.DeleteVote.log.error(("Cannot email update for change " + (change.getId())), e); } } commentAdded.fire(change, ps, user.getAccount(), changeMessage.getMessage(), newApprovals, oldApprovals, ctx.getWhen()); }
void display(java.lang.String token) { assert token != null; try { try { if (com.google.gerrit.client.Dispatcher.matchPrefix(com.google.gerrit.client.Dispatcher.RELOAD_UI, token)) { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = true; token = com.google.gerrit.client.Dispatcher.skip(token); } com.google.gerrit.client.Dispatcher.select(token); } finally { com.google.gerrit.client.Dispatcher.wasStartedByReloadUI = false; } } catch (java.lang.RuntimeException err) { com.google.gwt.core.client.GWT.log(("Error parsing history token: " + token), err); com.google.gerrit.client.Gerrit.display(token, new com.google.gerrit.client.NotFoundScreen()); } }
public com.google.gerrit.server.diff.PatchListKey.Algorithm getAlgorithm() { return algorithm; }
@java.lang.Override public boolean dryRun(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { return (com.google.gerrit.server.git.MergeUtil.canFastForward(args.mergeSorter, mergeTip, args.rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(args.mergeSorter, args.repo, args.useContentMerge, mergeTip, toMerge)); }
@org.junit.Before public void setup() { config = new org.eclipse.jgit.lib.Config(); config.setString("database", null, "hostname", "my.host"); hana = new com.google.gerrit.server.schema.HANA(config); }
public com.google.gerrit.server.notedb.BatchMetaDataUpdate openUpdateInBatch(org.eclipse.jgit.lib.BatchRefUpdate bru) throws java.io.IOException { if (migration.write()) { load(); com.google.gerrit.server.git.MetaDataUpdate md = updateFactory.create(getProjectName(), getUser(), bru); md.setAllowEmpty(true); return super.openUpdate(md); } return new com.google.gerrit.server.notedb.BatchMetaDataUpdate() { @java.lang.Override public void write(org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public void write(com.google.gerrit.server.git.VersionedMetaData config, org.eclipse.jgit.lib.CommitBuilder commit) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit createRef(java.lang.String refName) { return null; } @java.lang.Override public void removeRef(java.lang.String refName) { } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commit() { return null; } @java.lang.Override public org.eclipse.jgit.revwalk.RevCommit commitAt(org.eclipse.jgit.lib.ObjectId revision) { return null; } @java.lang.Override public void close() { } }; }
@java.lang.Override public void writeTo(java.io.OutputStream out) throws java.io.IOException { try (java.io.OutputStreamWriter w = new java.io.OutputStreamWriter(out, java.nio.charset.StandardCharsets.ISO_8859_1);java.io.OutputStream e = com.google.common.io.BaseEncoding.base64().encodingStream(w)) { src.writeTo(e); e.flush(); } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.account.DiffPreferences result) { com.google.gerrit.extensions.client.DiffPreferencesInfo p = com.google.gerrit.client.Gerrit.getDiffPreferences(); result.copyTo(p); com.google.gerrit.client.Gerrit.setDiffPreferences(p); }
static com.google.gerrit.acceptance.GerritServer start() throws java.lang.Exception { final java.lang.String sitePath = com.google.gerrit.acceptance.GerritServer.initSite(); final java.util.concurrent.CyclicBarrier serverStarted = new java.util.concurrent.CyclicBarrier(2); final com.google.gerrit.pgm.Daemon daemon = new com.google.gerrit.pgm.Daemon(new java.lang.Runnable() { public void run() { try { serverStarted.await(); } catch (java.lang.InterruptedException e) { throw new java.lang.RuntimeException(e); } catch (java.util.concurrent.BrokenBarrierException e) { throw new java.lang.RuntimeException(e); } } }); java.util.concurrent.ExecutorService daemonService = java.util.concurrent.Executors.newSingleThreadExecutor(); daemonService.submit(new java.util.concurrent.Callable<java.lang.Void>() { public java.lang.Void call() throws java.lang.Exception { int rc = daemon.main(new java.lang.String[]{ "-d", sitePath, "--headless" }); if (rc != 0) { serverStarted.reset(); } return null; } }); serverStarted.await(); java.lang.System.out.println("Gerrit Server Started"); com.google.inject.Injector i = com.google.gerrit.acceptance.GerritServer.createTestInjector(daemon); return new com.google.gerrit.acceptance.GerritServer(i, daemon, daemonService); }
boolean wouldPushProject(final com.google.gerrit.reviewdb.client.Project.NameKey project) { if (!(isVisible(project))) { return false; } if ((projects.length) < 1) { return true; } java.lang.String projectName = project.get(); for (final java.lang.String projectMatch : projects) { if (com.googlesource.gerrit.plugins.replication.Destination.isRE(projectMatch)) { if (projectName.matches(projectMatch)) { return true; } } else if (com.googlesource.gerrit.plugins.replication.Destination.isWildcard(projectMatch)) { if (projectName.startsWith(projectMatch.substring(0, ((projectMatch.length()) - 1)))) { return true; } } else { if (projectName.equals(projectMatch)) { return true; } } } return false; }
private java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> readKeysToAdd(com.google.gerrit.server.account.PostGpgKeys.Input input, java.util.Set<com.google.gerrit.server.git.gpg.Fingerprint> toRemove) throws com.google.gerrit.extensions.restapi.BadRequestException, java.io.IOException { if (((input.add) == null) || (input.add.isEmpty())) { return com.google.common.collect.ImmutableList.of(); } java.util.List<org.bouncycastle.openpgp.PGPPublicKeyRing> keyRings = new java.util.ArrayList<>(input.add.size()); for (java.lang.String armored : input.add) { try (java.io.InputStream in = new java.io.ByteArrayInputStream(armored.getBytes(java.nio.charset.StandardCharsets.UTF_8));org.bouncycastle.bcpg.ArmoredInputStream ain = new org.bouncycastle.bcpg.ArmoredInputStream(in)) { @java.lang.SuppressWarnings("unchecked") java.util.List<java.lang.Object> objs = com.google.common.collect.Lists.newArrayList(new org.bouncycastle.openpgp.bc.BcPGPObjectFactory(ain)); if (((objs.size()) != 1) || (!((objs.get(0)) instanceof org.bouncycastle.openpgp.PGPPublicKeyRing))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Expected exactly one PUBLIC KEY BLOCK"); } org.bouncycastle.openpgp.PGPPublicKeyRing keyRing = ((org.bouncycastle.openpgp.PGPPublicKeyRing) (objs.get(0))); if (toRemove.contains(new com.google.gerrit.server.git.gpg.Fingerprint(keyRing.getPublicKey().getFingerprint()))) { throw new com.google.gerrit.extensions.restapi.BadRequestException(("Cannot both add and delete key: " + (keyToString(keyRing.getPublicKey())))); } keyRings.add(keyRing); } } return keyRings; }
@java.lang.Override public com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.extensions.restapi.TopLevelResource> list() throws com.google.gerrit.extensions.restapi.ResourceNotFoundException { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.BinaryResult apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); java.lang.String m = (edit.isPresent()) ? edit.get().getEditCommit().getFullMessage() : changeUtil.getMessage(rsrc.getChange()); return com.google.gerrit.extensions.restapi.BinaryResult.create(m).base64(); }
@org.junit.Test public void pushAccountConfigToUserBranchForReviewIsRejectedOnSubmitIfPreferredEmailIsInvalid() throws java.lang.Exception { java.lang.String userRef = com.google.gerrit.reviewdb.client.RefNames.refsUsers(admin.id); org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> allUsersRepo = cloneProject(allUsers); com.google.gerrit.acceptance.GitUtil.fetch(allUsersRepo, (userRef + ":userRef")); allUsersRepo.reset("userRef"); java.lang.String noEmail = "no.email"; org.eclipse.jgit.lib.Config ac = getAccountConfig(allUsersRepo); ac.setString(AccountConfig.ACCOUNT, null, AccountConfig.KEY_PREFERRED_EMAIL, noEmail); com.google.gerrit.acceptance.PushOneCommit.Result r = pushFactory.create(db, admin.getIdent(), allUsersRepo, "Update account config", AccountConfig.ACCOUNT_CONFIG, ac.toText()).to(((com.google.gerrit.server.util.MagicBranch.NEW_CHANGE) + userRef)); r.assertOkStatus(); accountIndexedCounter.assertNoReindex(); assertThat(r.getChange().change().getDest().get()).isEqualTo(userRef); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("invalid account configuration: invalid preferred email '%s' for account '%s'", noEmail, admin.id)); gApi.changes().id(r.getChangeId()).current().submit(); }
@com.google.common.annotations.VisibleForTesting public void start() throws java.io.IOException { if ((dbInjector) == null) { dbInjector = createDbInjector(com.google.gerrit.pgm.MULTI_USER); } cfgInjector = createCfgInjector(); sysInjector = createSysInjector(); sysInjector.getInstance(com.google.gerrit.server.plugins.PluginGuiceEnvironment.class).setDbCfgInjector(dbInjector, cfgInjector); manager.add(dbInjector, cfgInjector, sysInjector); if (!(consoleLog)) { manager.add(com.google.gerrit.pgm.util.ErrorLogFile.start(getSitePath(), cfgInjector.getInstance(com.google.inject.Key.get(org.eclipse.jgit.lib.Config.class, com.google.gerrit.server.config.GerritServerConfig.class)))); } sshd &= !(sshdOff()); if (sshd) { initSshd(); } if (com.google.common.base.MoreObjects.firstNonNull(httpd, true)) { initHttpd(); } manager.start(); }
public static void applyUserPreferences() { if ((com.google.gerrit.client.Gerrit.myAccount) != null) { final com.google.gerrit.reviewdb.client.AccountGeneralPreferences p = com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences(); com.google.gwtexpui.clippy.client.CopyableLabel.setFlashEnabled(p.isUseFlashClipboard()); if ((com.google.gerrit.client.Gerrit.siteHeader) != null) { com.google.gerrit.client.Gerrit.siteHeader.setVisible(p.isShowSiteHeader()); } if ((com.google.gerrit.client.Gerrit.siteFooter) != null) { com.google.gerrit.client.Gerrit.siteFooter.setVisible(p.isShowSiteHeader()); } com.google.gerrit.client.FormatUtil.setPreferences(com.google.gerrit.client.Gerrit.myAccount.getGeneralPreferences()); } }
private static java.lang.String safeFileName(java.lang.String fileName, final java.lang.String suffix) { final int slash = fileName.lastIndexOf('/'); if (slash >= 0) { fileName = fileName.substring((slash + 1)); } final java.lang.StringBuilder r = new java.lang.StringBuilder(fileName.length()); for (int i = 0; i < (fileName.length()); i++) { final char c = fileName.charAt(i); if ((((c == '_') || (c == '-')) || (c == '.')) || (c == '@')) { r.append(c); } else if (('0' <= c) && (c <= '9')) { r.append(c); } else if (('A' <= c) && (c <= 'Z')) { r.append(c); } else if (('a' <= c) && (c <= 'z')) { r.append(c); } else if ((((c == ' ') || (c == '\n')) || (c == '\r')) || (c == '\t')) { r.append('-'); } else { r.append('_'); } } fileName = r.toString(); final int ext = fileName.lastIndexOf('.'); if (ext <= 0) { return (fileName + "_") + suffix; } else { return (((fileName.substring(0, ext)) + "_") + suffix) + (fileName.substring(ext)); } }
private boolean createHAReplicaSite(org.eclipse.jgit.storage.file.FileBasedConfig pluginConfig) throws java.lang.Exception { ui.header("HA replica site setup"); ui.message(("It is possible to create a copy of the master site and configure both sites to run\n" + ((((("in HA mode as peers. This is possible when the directory where the copy will be\n" + "created is accessible from this machine\n") + "\n") + "NOTE: This step is optional. If you want to create the other site manually, or\n") + "if the other site needs to be created in a directory not accessible from this\n") + "machine then please skip this step.\n"))); if (ui.yesno(true, "Create a HA replica site")) { java.lang.String replicaPath = ui.readString("ha/1", "Location of the HA replica"); java.nio.file.Path replica = site.site_path.resolve(java.nio.file.Paths.get(replicaPath)); if (java.nio.file.Files.exists(replica)) { ui.message("%s already exists, exiting", replica); return true; } config.save(); setupLocalHAReplica.run(new com.google.gerrit.server.config.SitePaths(replica), pluginConfig); return true; } return false; }
@java.lang.Override protected void configure() { install(new com.google.gerrit.server.schema.SchemaVersion.Module()); bind(java.io.File.class).annotatedWith(com.google.gerrit.server.config.SitePath.class).toInstance(new java.io.File(".")); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.setString("gerrit", null, "basePath", "git"); cfg.setString("user", null, "name", "Gerrit Code Review"); cfg.setString("user", null, "email", "gerrit@localhost"); bind(org.eclipse.jgit.lib.Config.class).annotatedWith(com.google.gerrit.server.config.GerritServerConfig.class).toInstance(cfg); bind(org.eclipse.jgit.lib.PersonIdent.class).annotatedWith(com.google.gerrit.server.GerritPersonIdent.class).toProvider(com.google.gerrit.server.GerritPersonIdentProvider.class); bind(com.google.gerrit.server.git.GitRepositoryManager.class).to(com.google.gerrit.server.git.LocalDiskRepositoryManager.class); }
@java.lang.Override public java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> iterator() { return new java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey>() { private java.util.Iterator<com.google.gerrit.reviewdb.client.Project.NameKey> itr = src.iterator(); private Project.NameKey next; @java.lang.Override public boolean hasNext() { if ((next) != null) { return true; } if (!(itr.hasNext())) { return false; } com.google.gerrit.reviewdb.client.Project.NameKey r = itr.next(); if (r.get().startsWith(pfx)) { next = r; return true; } else { itr = java.util.Collections.<com.google.gerrit.reviewdb.client.Project.NameKey>emptyList().iterator(); return false; } } @java.lang.Override public Project.NameKey next() { if (!(hasNext())) { throw new java.util.NoSuchElementException(); } com.google.gerrit.reviewdb.client.Project.NameKey r = next; next = null; return r; } @java.lang.Override public void remove() { throw new java.lang.UnsupportedOperationException(); } }; }
void userApprovals(java.util.Set<com.google.gerrit.client.reviewdb.Change.Id> cids, com.google.gerrit.client.reviewdb.Account.Id aid, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.data.ApprovalSummarySet> callback);
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) { emailReviewers(ctx.getProject(), currChange, del, changeMessage); reviewerDeleted.fire(currChange, currPs, reviewer, ctx.getAccount(), changeMessage.getMessage(), newApprovals, oldApprovals, ctx.getWhen()); }
protected void bccStarredBy() { if (!(NotifyHandling.ALL.equals(notify))) { return; } try { com.google.common.collect.Multimap<com.google.gerrit.reviewdb.client.Account.Id, java.lang.String> stars = args.starredChangesUtil.byChangeFromIndex(change.getId()); for (java.util.Map.Entry<com.google.gerrit.reviewdb.client.Account.Id, java.util.Collection<java.lang.String>> e : stars.asMap().entrySet()) { if (e.getValue().contains(StarredChangesUtil.DEFAULT_LABEL)) { super.add(RecipientType.BCC, e.getKey()); } if (e.getValue().contains(StarredChangesUtil.IGNORE_LABEL)) { com.google.gerrit.server.account.AccountState accountState = args.accountCache.get(e.getKey()); if (accountState != null) { removeUser(accountState.getAccount()); } } } } catch (com.google.gwtorm.server.OrmException | com.google.gerrit.server.project.NoSuchChangeException err) { com.google.gerrit.server.mail.ChangeEmail.log.warn("Cannot BCC users that starred updated change", err); } }
private int distance(java.lang.String pattern) { java.lang.String example; if (com.google.gerrit.server.project.RefControl.isRE(pattern)) { example = com.google.gerrit.server.project.RefControl.shortestExample(pattern); } else if (pattern.endsWith("/*")) { example = (pattern.substring(0, ((pattern.length()) - 1))) + '1'; } else if (pattern.equals(getRefName())) { return 0; } else { return java.lang.Math.max(pattern.length(), getRefName().length()); } return org.apache.commons.lang.StringUtils.getLevenshteinDistance(example, getRefName()); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse response, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if ((request instanceof javax.servlet.http.HttpServletRequest) && (response instanceof javax.servlet.http.HttpServletResponse)) { java.lang.String method = ((javax.servlet.http.HttpServletRequest) (request)).getMethod(); if (((method == "POST") || (method == "PUT")) || (method == "DELETE")) { ((javax.servlet.http.HttpServletResponse) (response)).sendError(com.googlesource.gerrit.plugins.readonly.SC_SERVICE_UNAVAILABLE, message); return; } } chain.doFilter(request, response); }
public int getStartCharacter() { return startCharacter; }
@java.lang.Override public void review(com.google.gerrit.extensions.api.changes.ReviewInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { review.get().apply(revision, in); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot post review", e); } catch (java.io.IOException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot post review", e); } }
private org.eclipse.jgit.patch.FileHeader toFileHeader(com.google.gerrit.server.patch.PatchListKey key, final org.eclipse.jgit.diff.DiffFormatter diffFormatter, final org.eclipse.jgit.diff.DiffEntry diffEntry) throws java.io.IOException { java.util.concurrent.Future<org.eclipse.jgit.patch.FileHeader> result = diffExecutor.submit(new java.util.concurrent.Callable<org.eclipse.jgit.patch.FileHeader>() { @java.lang.Override public org.eclipse.jgit.patch.FileHeader call() throws java.io.IOException { return diffFormatter.toFileHeader(diffEntry); } }); try { return result.get(timeoutMillis, java.util.concurrent.TimeUnit.MILLISECONDS); } catch (java.lang.InterruptedException | java.util.concurrent.TimeoutException e) { com.google.gerrit.server.patch.PatchListLoader.log.warn(((((((((((((timeoutMillis) + " ms timeout reached for Diff loader") + " in project ") + (key.projectKey.get())) + " on commit ") + (key.getNewId())) + " on path ") + (diffEntry.getNewPath())) + " comparing ") + (diffEntry.getOldId())) + "..") + (diffEntry.getNewId()))); result.cancel(true); return toFileHeaderWithoutMyersDiff(diffFormatter, diffEntry); } catch (java.util.concurrent.ExecutionException e) { com.google.common.base.Throwables.propagateIfInstanceOf(e.getCause(), java.io.IOException.class); throw new java.io.IOException(e.getMessage(), e.getCause()); } }
java.lang.String projectDescription();
public static void daemonStart(final java.lang.String[] argv) throws java.lang.Exception { if ((com.google.gerrit.launcher.GerritLauncher.daemonClassLoader) != null) { throw new java.lang.IllegalStateException("daemonStart can be called only once per JVM instance"); } final java.lang.ClassLoader cl = com.google.gerrit.launcher.GerritLauncher.libClassLoader(false); java.lang.Thread.currentThread().setContextClassLoader(cl); com.google.gerrit.launcher.GerritLauncher.daemonClassLoader = cl; java.lang.String[] daemonArgv = new java.lang.String[(argv.length) + 1]; daemonArgv[0] = "daemon"; for (int i = 0; i < (argv.length); i++) { daemonArgv[(i + 1)] = argv[i]; } int res = com.google.gerrit.launcher.GerritLauncher.invokeProgram(cl, daemonArgv); if (res != 0) { throw new java.lang.Exception(("Unexpected return value: " + res)); } }
private org.eclipse.jgit.lib.PersonIdent toCommitterIdent(final com.google.gerrit.reviewdb.client.PatchSetApproval audit) { if (audit != null) { return args.identifiedUserFactory.create(audit.getAccountId()).newCommitterIdent(audit.getGranted(), args.myIdent.getTimeZone()); } return args.myIdent; }
@org.junit.Test public void testDefaultSubmitTypeForStarFilter() { configureDefaultSubmitType("*", SubmitType.CHERRY_PICK); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).isEqualTo(SubmitType.CHERRY_PICK); configureDefaultSubmitType("*", SubmitType.FAST_FORWARD_ONLY); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).isEqualTo(SubmitType.FAST_FORWARD_ONLY); configureDefaultSubmitType("*", SubmitType.REBASE_IF_NECESSARY); assertThat(repoCfg.getDefaultSubmitType(new com.google.gerrit.reviewdb.client.Project.NameKey("someProject"))).isEqualTo(SubmitType.REBASE_IF_NECESSARY); }
private void newPatchSet() { com.google.gerrit.reviewdb.client.PatchSet.Id id = com.google.gerrit.server.ChangeUtil.nextPatchSetId(allRefs, change.currentPatchSetId()); newPatchSet = new com.google.gerrit.reviewdb.client.PatchSet(id); newPatchSet.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); newPatchSet.setUploader(currentUser.getAccountId()); newPatchSet.setRevision(com.google.gerrit.server.git.ReceiveCommits.toRevId(newCommit)); newPatchSet.setGroups(groups); if ((rp.getPushCertificate()) != null) { newPatchSet.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } if (((magicBranch) != null) && (magicBranch.draft)) { newPatchSet.setDraft(true); } info = patchSetInfoFactory.get(newCommit, newPatchSet.getId()); cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), newCommit, newPatchSet.getRefName()); }
private com.google.gerrit.acceptance.server.mail.StagedChange stageReviewableWipChangeWithExtraReviewer() throws java.lang.Exception { return stageChangeWithExtraReviewer(this::stageReviewableWipChange); }
void export(com.google.gerrit.extensions.annotations.Export export, java.lang.Class<?> type) throws com.google.gerrit.server.plugins.InvalidPluginException;
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.reviewdb.client.Account restorer, java.lang.String reason, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } try { com.google.gerrit.server.extensions.events.ChangeRestored.Event event = new com.google.gerrit.server.extensions.events.ChangeRestored.Event(util.changeInfo(change), util.revisionInfo(change.getProject(), ps), util.accountInfo(restorer), reason, when); for (com.google.gerrit.extensions.events.ChangeRestoredListener l : listeners) { try { l.onChangeRestored(event); } catch (java.lang.Exception e) { util.logEventListenerError(this, l, e); } } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.warn(("Couldn't fire event: " + (e.getMessage()))); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException | com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.extensions.events.ChangeRestored.log.error("Couldn't fire event", e); } }
public java.util.List<com.google.gerrit.extensions.common.GroupInfo> get() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gwtorm.server.OrmException { if (!(com.google.common.base.Strings.isNullOrEmpty(suggest))) { return suggestGroups(); } if ((!(com.google.common.base.Strings.isNullOrEmpty(matchSubstring))) && (!(com.google.common.base.Strings.isNullOrEmpty(matchRegex)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Specify one of m/r"); } if ((ownedBy) != null) { return getGroupsOwnedBy(ownedBy); } if (owned) { return getGroupsOwnedBy(((user) != null ? userFactory.create(user) : identifiedUser.get())); } if ((user) != null) { return accountGetGroups.apply(new com.google.gerrit.server.account.AccountResource(userFactory.create(user))); } return getAllGroups(); }
@java.lang.Override public int hashCode() { return java.util.Objects.hash(shortReason, fullReason, label); }
void load() throws java.io.IOException { com.google.gerrit.reviewdb.client.Project.NameKey project = branch.getParentKey(); logDebug("Loading .gitmodules of {} for project {}", branch, project); try { orm.openRepo(project, false); } catch (com.google.gerrit.server.project.NoSuchProjectException e) { throw new java.io.IOException(e); } OpenRepo or = orm.getRepo(project); ObjectId id = or.repo.resolve(branch.get()); if (id == null) { throw new java.io.IOException(("Cannot open branch " + (branch.get()))); } org.eclipse.jgit.revwalk.RevCommit commit = or.rw.parseCommit(id); org.eclipse.jgit.treewalk.TreeWalk tw = org.eclipse.jgit.treewalk.TreeWalk.forPath(or.repo, com.google.gerrit.server.git.GitModules.GIT_MODULES, commit.getTree()); if ((tw == null) || (((tw.getRawMode(0)) & (org.eclipse.jgit.lib.FileMode.TYPE_MASK)) != (org.eclipse.jgit.lib.FileMode.TYPE_FILE))) { return; } try { org.eclipse.jgit.lib.BlobBasedConfig bbc = new org.eclipse.jgit.lib.BlobBasedConfig(null, or.repo, commit, com.google.gerrit.server.git.GitModules.GIT_MODULES); subscriptions = new com.google.gerrit.server.util.SubmoduleSectionParser(bbc, canonicalWebUrl, branch).parseAllSections(); } catch (org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(("Could not read .gitmodule file of super project: " + (branch.getParentKey())), e); } }
private boolean isNoteDbEnabled(org.eclipse.jgit.lib.Config cfg) { return migration.readChanges(); }
@java.lang.Override public Iterable<java.lang.Integer> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { Set<com.google.gerrit.reviewdb.client.Account.Id> reviewedBy = input.reviewedBy(); if (reviewedBy.isEmpty()) { return com.google.common.collect.ImmutableSet.of(com.google.gerrit.server.index.NOT_REVIEWED); } List<java.lang.Integer> result = new com.google.gerrit.server.index.ArrayList<>(reviewedBy.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : reviewedBy) { result.add(id.get()); } return result; }
@java.lang.Override protected void onLoad() { com.google.gerrit.client.diff.DiffApi.list(Project.NameKey.asStringOrNull(projectKey), patchSetId, base.asPatchSetId(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.info.FileInfo> result) { files = result.values(); com.google.gerrit.client.info.FileInfo.sortFileInfoByPath(files); fileNumber.setInnerText(java.lang.Integer.toString(((com.google.gerrit.client.rpc.Natives.asList(files).indexOf(result.get(path))) + 1))); fileCount.setInnerText(java.lang.Integer.toString(files.length())); } }); if (com.google.gerrit.client.Gerrit.isSignedIn()) { com.google.gerrit.client.changes.ChangeApi.revision(Project.NameKey.asStringOrNull(projectKey), patchSetId).view("files").addParameterTrue("reviewed").get(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JsArrayString>() { @java.lang.Override public void onSuccess(com.google.gwt.core.client.JsArrayString result) { boolean b = com.google.gerrit.client.rpc.Natives.asList(result).contains(path); reviewed.setValue(b, false); if ((!b) && ((reviewedState) == (com.google.gerrit.client.diff.Header.ReviewedState.AUTO_REVIEW))) { postAutoReviewed(); } reviewedState = com.google.gerrit.client.diff.Header.ReviewedState.LOADED; } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }); } }
@java.lang.Override @com.google.gerrit.common.Nullable public com.google.inject.Injector getSshInjector() { return null; }
public void setChangeId(java.lang.String changeId) throws com.google.gwtorm.server.OrmException { if ((notes) == null) { notes = getChangeNotes().load(); } checkArgument(notes.getChange().getKey().get().equals(changeId), "The Change-Id was already set to %s, so we cannot set this Change-Id: %s", notes.getChange().getKey(), changeId); this.changeId = changeId; }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.config.ConfigResource rsrc, com.google.gerrit.server.config.PostCaches.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException { if ((input == null) || ((input.operation) == null)) { throw new com.google.gerrit.extensions.restapi.BadRequestException("operation must be specified"); } switch (input.operation) { case FLUSH_ALL : for (DynamicMap.Entry<com.google.common.cache.Cache<?, ?>> e : cacheMap) { com.google.gerrit.server.config.CacheResource cacheResource = new com.google.gerrit.server.config.CacheResource(e.getPluginName(), e.getExportName(), e.getProvider()); if (FlushCache.WEB_SESSIONS.equals(cacheResource.getName())) { continue; } flushCache.apply(cacheResource, null); } return com.google.gerrit.extensions.restapi.Response.ok(""); default : throw new com.google.gerrit.extensions.restapi.BadRequestException(("unsupported operation: " + (input.operation))); } }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.lib.ObjectId oldId) throws java.io.IOException { com.google.gerrit.reviewdb.client.Change.Id cid = getChangeId(); com.google.gerrit.reviewdb.server.ReviewDb db = args.db.get(); com.google.gerrit.server.notedb.ChangeRebuilder rebuilder = args.rebuilder.get(); try { com.google.gerrit.server.notedb.NoteDbUpdateManager manager = rebuilder.stage(db, cid); if (manager == null) { return super.openHandle(repo, oldId); } com.google.gerrit.server.notedb.NoteDbUpdateManager.Result r = manager.stageAndApplyDelta(change); try { rebuilder.execute(db, cid, manager); repo.scanForRepoChanges(); } catch (com.google.gwtorm.server.OrmException | java.io.IOException e) { rebuildResult = checkNotNull(r); checkNotNull(r.newState()); checkNotNull(r.staged()); return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newStagedRevWalk(repo, r.staged().changeObjects()), r.newState().getChangeMetaId()); } return com.google.gerrit.server.notedb.LoadHandle.create(com.google.gerrit.server.notedb.ChangeNotesCommit.newRevWalk(repo), r.newState().getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo, oldId); } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } }
@java.lang.Override public com.google.gerrit.extensions.common.TagInfo apply(com.google.gerrit.server.project.TagResource resource) { return resource.getTagInfo(); }
private java.lang.String url(com.google.gerrit.client.info.FileInfo info) { return (diffScreenType) == (com.google.gerrit.extensions.client.GeneralPreferencesInfo.DiffView.UNIFIED_DIFF) ? com.google.gerrit.client.Dispatcher.toUnified(projectKey, base, patchSetId, info.path()) : com.google.gerrit.client.Dispatcher.toSideBySide(projectKey, base, patchSetId, info.path()); }
@java.lang.Override public void index() throws com.google.gerrit.extensions.restapi.RestApiException { try { index.apply(change, new com.google.gerrit.server.change.Index.Input()); } catch (java.lang.Exception e) { throw com.google.gerrit.server.api.ApiUtil.asRestApiException("Cannot index change", e); } }
private static java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> getApprovalsForLabel(java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> approvals, com.google.gerrit.common.data.LabelType t) { return approvals.stream().filter(( input) -> input.getLabel().equals(t.getLabelId().get())).collect(toImmutableList()); }
private static java.lang.String toHex(int i) { java.lang.String hex = java.lang.Integer.toHexString(i); return (hex.length()) == 1 ? "0" + hex : hex; }
private Account.Id getSubmitter(com.google.gerrit.client.reviewdb.Change c) { com.google.gerrit.client.reviewdb.ChangeApproval submitter = null; try { final java.util.List<com.google.gerrit.client.reviewdb.ChangeApproval> approvals = schema.changeApprovals().byChange(c.getId()).toList(); for (com.google.gerrit.client.reviewdb.ChangeApproval a : approvals) { if (((a.getValue()) > 0) && (ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { if ((submitter == null) || ((a.getGranted().compareTo(submitter.getGranted())) > 0)) { submitter = a; } } } } catch (com.google.gwtorm.client.OrmException e) { } return submitter != null ? submitter.getAccountId() : null; }
public java.util.List<com.google.gerrit.reviewdb.AccountGroup> run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gwtorm.client.OrmException { final com.google.gerrit.server.IdentifiedUser user = identifiedUser.get(); final java.util.List<com.google.gerrit.reviewdb.AccountGroup> result; if (user.isAdministrator()) { result = db.accountGroups().all().toList(); } else { result = new java.util.ArrayList<com.google.gerrit.reviewdb.AccountGroup>(); for (final com.google.gerrit.reviewdb.AccountGroup group : db.accountGroups().all().toList()) { final com.google.gerrit.server.account.GroupControl c = groupControlFactory.controlFor(group); if (c.isVisible()) { result.add(c.getAccountGroup()); } } } java.util.Collections.sort(result, new java.util.Comparator<com.google.gerrit.reviewdb.AccountGroup>() { public int compare(final com.google.gerrit.reviewdb.AccountGroup a, final com.google.gerrit.reviewdb.AccountGroup b) { return a.getName().compareTo(b.getName()); } }); return result; }
private com.google.gerrit.extensions.common.GroupInfo loadGroup(java.util.Map<com.google.gerrit.reviewdb.client.AccountGroup.UUID, com.google.gerrit.extensions.common.GroupInfo> visibleGroups, com.google.gerrit.reviewdb.client.AccountGroup.UUID id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.extensions.common.GroupInfo group = visibleGroups.get(id); if (group == null) { try { com.google.gerrit.server.account.GroupControl control = groupControlFactory.controlFor(id); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; if (control.isVisible()) { group = groupJson.format(control.getGroup()); group.id = null; } } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { com.google.gerrit.server.restapi.project.GetAccess.LOG.warn(("NoSuchGroupException; ignoring group " + id), e); group = com.google.gerrit.server.restapi.project.GetAccess.INVISIBLE_SENTINEL; } visibleGroups.put(id, group); } return group; }
private org.eclipse.jgit.dircache.DirCache createNewTree(org.eclipse.jgit.lib.Repository repository) throws java.io.IOException { org.eclipse.jgit.dircache.DirCache newTree = readBaseTree(repository); java.util.List<org.eclipse.jgit.dircache.DirCacheEditor.PathEdit> pathEdits = getPathEdits(repository); com.google.gerrit.server.edit.tree.TreeCreator.applyPathEdits(newTree, pathEdits); return newTree; }
@org.junit.AfterClass public static void restoreTime() { org.joda.time.DateTimeUtils.setCurrentMillisSystem(); }
@org.junit.Test public void nonStrictLabelWithInvalidLabelPerDefault() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); com.google.gerrit.extensions.api.changes.ReviewInput input = com.google.gerrit.extensions.api.changes.ReviewInput.approve().label("Code-Style", 1); gApi.changes().id(changeId).current().review(input); java.util.Map<java.lang.String, java.lang.Short> votes = gApi.changes().id(changeId).current().reviewer(admin.email).votes(); assertThat(votes.keySet()).containsExactly("Code-Review"); assertThat(votes.values()).containsExactly(((short) (2))); }
@java.lang.Override protected com.google.gerrit.extensions.restapi.Response<java.lang.String> applyImpl(com.google.gerrit.server.update.BatchUpdate.Factory updateFactory, com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.SetPrivateOp.Input input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.update.UpdateException { if (!(canDeletePrivate(rsrc).value())) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to unmark private"); } if (!(rsrc.getChange().isPrivate())) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("change is not private"); } com.google.gerrit.server.change.SetPrivateOp op = new com.google.gerrit.server.change.SetPrivateOp(cmUtil, false, input); try (com.google.gerrit.server.update.BatchUpdate u = updateFactory.create(dbProvider.get(), rsrc.getProject(), rsrc.getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { u.addOp(rsrc.getId(), op).execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
private java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource> newLoader(final java.nio.file.Path p) { return new java.util.concurrent.Callable<com.google.gerrit.httpd.raw.ResourceServlet.Resource>() { @java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(java.nio.file.Files.getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } catch (java.nio.file.NoSuchFileException e) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } } }; }
private void renderCommitSubject(com.google.gerrit.client.changes.ChangeInfo info) { com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev = info.revision(revision); java.lang.String sub = rev.commit().subject(); commitSubjectText.setInnerSafeHtml(commentLinkProcessor.apply(new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder().append(sub).linkify())); }
private static boolean isAbsolute(java.lang.String url) { return url.matches("^https?://.*"); }
public com.google.gerrit.extensions.registration.ReloadableRegistrationHandle<T> set(com.google.inject.Key<T> key, com.google.inject.Provider<T> impl, java.lang.String pluginName) { final com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T> item = new com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T>(impl, pluginName); while (!(ref.compareAndSet(null, item))) { com.google.gerrit.extensions.registration.DynamicItem.NamedProvider<T> old = ref.get(); if (old != null) { throw new com.google.inject.ProvisionException(java.lang.String.format("%s already provided by %s, ignoring plugin %s", this.key.getTypeLiteral(), old.pluginName, pluginName)); } } return new ReloadableHandle(key, item); }
@org.junit.Test public void testFuture() { com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-100), com.google.gerrit.client.RelativeDateFormatter.YEAR_IN_MILLIS, "in the future"); com.google.gerrit.client.RelativeDateFormatterTest.assertFormat((-1), com.google.gerrit.client.RelativeDateFormatter.SECOND_IN_MILLIS, "in the future"); }
public com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject to(com.google.gerrit.acceptance.TestAccount... accounts) { return rcpt(com.google.gerrit.acceptance.TO, accounts); }
@java.lang.Override public RefUpdate.Result call() throws java.lang.Exception { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); afterReadRef.run(); org.eclipse.jgit.lib.ObjectId oldId; if (ref == null) { oldId = org.eclipse.jgit.lib.ObjectId.zeroId(); next = seed.get(); } else { oldId = ref.getObjectId(); next = parse(oldId); } return store(repo, rw, oldId, ((next) + (batchSize))); }
private java.util.List<com.google.gerrit.server.diff.PatchListEntry> getCurrentPatches(java.lang.String changeId) throws java.lang.Exception { return patchListCache.get(getKey(null, getCurrentRevisionId(changeId)), project).getPatches(); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(MetaDataUpdate.User.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.ApprovalsUtil.class); bind(com.google.gerrit.server.project.PerRequestProjectControlCache.class).in(com.google.inject.servlet.RequestScoped.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(AccountControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(SubmoduleOp.Factory.class); factory(MergeOp.Factory.class); factory(CreateCodeReviewNotes.Factory.class); install(new com.google.gerrit.server.git.AsyncReceiveCommits.Module()); factory(AddReviewer.Factory.class); factory(AddReviewerSender.Factory.class); factory(CommitMessageEditedSender.Factory.class); factory(CreateChangeSender.Factory.class); factory(DeleteDraftPatchSet.Factory.class); factory(PublishDraft.Factory.class); factory(ReplacePatchSetSender.Factory.class); factory(RebasedPatchSetSender.Factory.class); factory(RemoveReviewer.Factory.class); factory(MergedSender.Factory.class); factory(MergeFailSender.Factory.class); factory(PerformCreateGroup.Factory.class); factory(PerformRenameGroup.Factory.class); factory(GroupDetailFactory.Factory.class); factory(GroupMembers.Factory.class); factory(CreateProject.Factory.class); factory(SuggestParentCandidates.Factory.class); factory(BanCommit.Factory.class); factory(CommitValidators.Factory.class); }
@java.lang.Override public java.lang.String getName() { return "repoSize"; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicMap<com.google.gerrit.extensions.restapi.RestView<com.google.gerrit.server.access.AccessResource>> views() { return views; }
@java.lang.Override public boolean isVisibleTo(com.google.gerrit.reviewdb.client.Account account) throws com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser who = identifiedUserFactory.create(dbProvider, account.getId()); return rsrc.getControl().forUser(who).isRefVisible(); }
public final native java.lang.String foreach();
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.httpd.rpc.account.AccountCapabilitiesServlet.Impl impl = factory.get(); if (acceptsJson(req)) { impl.format = com.google.gerrit.server.OutputFormat.JSON_COMPACT; } if (paramParser.parse(impl, req, res)) { impl.compute(); java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); java.io.OutputStreamWriter out = new java.io.OutputStreamWriter(buf, "UTF-8"); if (impl.format.isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.account.JSON_TYPE); buf.write(com.google.gerrit.httpd.rpc.account.JSON_MAGIC); impl.format.newGson().toJson(impl.have, new com.google.gson.reflect.TypeToken<java.util.Map<java.lang.String, java.lang.Object>>() {}.getType(), out); out.flush(); buf.write('\n'); } else { res.setContentType("text/plain"); for (java.util.Map.Entry<java.lang.String, java.lang.Object> e : impl.have.entrySet()) { out.write(e.getKey()); if (!((e.getValue()) instanceof java.lang.Boolean)) { out.write(": "); out.write(e.getValue().toString()); } out.write('\n'); } out.flush(); } res.setCharacterEncoding("UTF-8"); send(req, res, buf.toByteArray()); } }
@java.lang.Override public WorkQueue.Executor get() { com.google.gerrit.server.git.WorkQueue.Executor executor; if (user.isBatchUser()) { executor = queues.getBatchQueue(); } else { executor = queues.getInteractiveQueue(); } return executor; }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> byChange(com.google.gerrit.reviewdb.client.Change.Id changeId) throws com.google.gwtorm.server.OrmException { return com.google.common.collect.FluentIterable.from(getRefNames(com.google.gerrit.reviewdb.client.RefNames.refsStarredChangesPrefix(changeId))).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.parse(refPart); } }).toSet(); }
public final com.google.gerrit.gpg.CheckResult check(org.bouncycastle.openpgp.PGPPublicKey key) { if (((store) == null) && ((trusted) != null)) { throw new java.lang.IllegalStateException("PublicKeyStore is required"); } return check(key, 0, true, ((trusted) != null ? new java.util.HashSet<com.google.gerrit.gpg.Fingerprint>() : null)); }
@java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request req, com.google.gwt.http.client.Response res) { int status = res.getStatusCode(); if (status != 200) { RpcStatus.INSTANCE.onRpcComplete(); if (((400 <= status) && (status < 600)) && (com.google.gerrit.client.rpc.RestApi.isTextBody(res))) { cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException(res.getText(), status, null)); } else { cb.onFailure(new com.google.gwt.user.client.rpc.StatusCodeException(status, res.getStatusText())); } return; } if (!(com.google.gerrit.client.rpc.RestApi.isJsonBody(res))) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } java.lang.String json = res.getText(); if (!(json.startsWith(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC))) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } json = json.substring(com.google.gerrit.client.rpc.RestApi.JSON_MAGIC.length()); if ((wasGet) && (json.startsWith("{\"_authkey\":"))) { this.resendPost(cb, json); return; } T data; try { data = com.google.gerrit.client.rpc.Natives.<T>parseJSON(json); } catch (java.lang.RuntimeException e) { RpcStatus.INSTANCE.onRpcComplete(); cb.onFailure(new com.google.gwtjsonrpc.client.RemoteJsonException("Invalid JSON")); return; } cb.onSuccess(data); RpcStatus.INSTANCE.onRpcComplete(); }
@java.lang.Override public java.util.Optional<com.google.gerrit.server.schema.PatchSetWithReviewedFiles> findReviewed(com.google.gerrit.reviewdb.client.PatchSet.Id psId, com.google.gerrit.reviewdb.client.Account.Id accountId) throws com.google.gwtorm.server.OrmException { try (java.sql.Connection con = ds.getConnection();java.sql.PreparedStatement stmt = con.prepareStatement(("SELECT patch_set_id, file_name FROM account_patch_reviews APR1 " + (((("WHERE account_id = ? AND change_id = ? AND patch_set_id = " + "(SELECT MAX(patch_set_id) FROM account_patch_reviews APR2 WHERE ") + "APR1.account_id = APR2.account_id ") + "AND APR1.change_id = APR2.change_id ") + "AND patch_set_id <= ?)")))) { stmt.setInt(1, accountId.get()); stmt.setInt(2, psId.getParentKey().get()); stmt.setInt(3, psId.get()); try (java.sql.ResultSet rs = stmt.executeQuery()) { if (rs.next()) { com.google.gerrit.reviewdb.client.PatchSet.Id id = new com.google.gerrit.reviewdb.client.PatchSet.Id(psId.getParentKey(), rs.getInt("PATCH_SET_ID")); com.google.common.collect.ImmutableSet.Builder<java.lang.String> builder = com.google.common.collect.ImmutableSet.builder(); do { builder.add(rs.getString("FILE_NAME")); } while (rs.next() ); return java.util.Optional.of(AccountPatchReviewStore.PatchSetWithReviewedFiles.create(id, builder.build())); } return java.util.Optional.empty(); } } catch (java.sql.SQLException e) { throw com.google.gerrit.server.schema.H2AccountPatchReviewStore.convertError("select", e); } }
@java.lang.Override protected void configure() { if (!(com.google.gerrit.server.util.BouncyCastleUtil.havePGP())) { com.google.gerrit.server.git.gpg.SignedPushModule.log.info(("BouncyCastle PGP not installed; signed push verification is" + " disabled")); return; } bind(com.google.gerrit.server.git.gpg.PublicKeyChecker.class).to(com.google.gerrit.server.git.gpg.GerritPublicKeyChecker.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.server.git.ReceivePackInitializer.class).to(com.google.gerrit.server.git.gpg.SignedPushModule.Initializer.class); }
public com.google.inject.Key<T> getKey();
private static java.lang.String projectBaseName(java.lang.String project) { return project.substring(((project.lastIndexOf('/')) + 1)); }
static void initLibrary(com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void> cb) { if (net.codemirror.lib.Loader.isLibLoaded()) { cb.onSuccess(null); } else { com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); net.codemirror.lib.Loader.injectCss(Lib.I.css()); net.codemirror.lib.Loader.injectScript(Lib.I.js().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.mark_selection().getSafeUri(), group.add(com.google.gerrit.client.rpc.CallbackGroup.<java.lang.Void>emptyCallback())); net.codemirror.lib.Loader.injectScript(Addons.I.trailingspace().getSafeUri(), group.addFinal(cb)); } }
private com.google.gwt.user.client.ui.Widget createEditIcon() { com.google.gwt.user.client.ui.Anchor anchor = new com.google.gwt.user.client.ui.Anchor(new com.google.gwt.user.client.ui.ImageResourceRenderer().render(Gerrit.RESOURCES.edit())); anchor.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { final com.google.gerrit.reviewdb.client.PatchSet.Id id = ((idActive) == null) ? other.idActive : idActive; com.google.gerrit.client.changes.ChangeFileApi.getContent(id, path, new com.google.gerrit.client.rpc.GerritCallback<java.lang.String>() { @java.lang.Override public void onSuccess(java.lang.String result) { com.google.gerrit.client.change.EditFileAction edit = new com.google.gerrit.client.change.EditFileAction(id, result, path, style.replyBox(), null, icon); edit.onEdit(); } }); } }); anchor.setTitle(PatchUtil.C.edit()); return anchor; }
@java.lang.Override public com.google.gerrit.index.query.DataSource<com.google.gerrit.server.project.ProjectData> getSource(com.google.gerrit.index.query.Predicate<com.google.gerrit.server.project.ProjectData> p, com.google.gerrit.index.QueryOptions opts) throws com.google.gerrit.index.query.QueryParseException { return new com.google.gerrit.lucene.LuceneQuerySource(opts.filterFields(IndexUtils::projectFields), queryBuilder.toQuery(p), new org.apache.lucene.search.Sort(new org.apache.lucene.search.SortField(com.google.gerrit.lucene.LuceneProjectIndex.NAME_SORT_FIELD, SortField.Type.STRING, false))); }
public boolean isWorkInProgress() { return workInProgress; }
@com.google.gwt.uibinder.client.UiHandler("message") void onMessageKey(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((((event.getCharCode()) == '\n') || ((event.getCharCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER))) && (event.isControlKeyDown())) { event.preventDefault(); event.stopPropagation(); onSend(null); } else if ((((lgtm) != null) && ((event.getCharCode()) == 'M')) && (message.getValue().equals("LGT"))) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { lgtm.run(); } }); } }
public static com.google.gerrit.common.data.SubmitTypeRecord OK(com.google.gerrit.extensions.common.SubmitType type) { com.google.gerrit.common.data.SubmitTypeRecord r = new com.google.gerrit.common.data.SubmitTypeRecord(); r.status = com.google.gerrit.common.data.SubmitTypeRecord.Status.OK; r.type = type; return r; }
@java.lang.Override public com.google.gerrit.server.account.GroupMembership getEffectiveGroups() { if ((effectiveGroups) == null) { if (authConfig.isIdentityTrustable(state().getExternalIds())) { effectiveGroups = groupBackend.membershipsOf(this); } else { effectiveGroups = com.google.gerrit.server.IdentifiedUser.registeredGroups; } } return effectiveGroups; }
com.google.gerrit.extensions.api.accounts.Accounts.SuggestAccountsRequest suggestAccounts() throws com.google.gerrit.extensions.restapi.RestApiException;
private org.eclipse.jgit.revwalk.RevCommit getHead(org.eclipse.jgit.lib.Repository repo, java.lang.String name) throws java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { return rw.parseCommit(repo.getRef(name).getObjectId()); } }
public java.lang.String getBase() { return cb.getValue() ? base.getText() : null; }
@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.query.change.ChangeData input, com.google.gerrit.server.index.FillArgs args) throws com.google.gwtorm.server.OrmException { return getAuthorParts(input); }
com.google.gerrit.server.restapi.project.DeleteRef create(com.google.gerrit.server.project.ProjectResource r);
@java.lang.Override public boolean updateChange(com.google.gerrit.server.update.ChangeContext ctx) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = ctx.getChange().currentPatchSetId(); commentsUtil.deleteCommentByRewritingHistory(ctx.getDb(), ctx.getUpdate(psId), rsrc.getComment().key, rsrc.getPatchSet().getId(), newMessage); return true; }
public com.google.gerrit.server.notedb.rebuild.NoteDbMigrator build() { return new com.google.gerrit.server.notedb.rebuild.NoteDbMigrator(sitePaths, schemaFactory, updateManagerFactory, rebuilder, bundleReader, ((threads) > 1 ? com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(threads, "RebuildChange")) : com.google.common.util.concurrent.MoreExecutors.newDirectExecutorService()), projects, changes, progressOut, trial, forceRebuild); }
@org.junit.Test public void getDurationReturnsDuration() throws java.lang.Exception { java.time.Duration def = java.time.Duration.ofSeconds(2); org.eclipse.jgit.lib.Config config = new org.eclipse.jgit.lib.Config(); java.time.Duration t; config.setString("core", "dht", "timeout", "500 ms"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t.toMillis()).isEqualTo(500); config.setString("core", "dht", "timeout", "5.2 sec"); try { com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); fail("expected IllegalArgumentException"); } catch (java.lang.IllegalArgumentException e) { assertThat(e).hasMessageThat().isEqualTo("Invalid time unit value: core.dht.timeout=5.2 sec"); } config.setString("core", "dht", "timeout", "1 min"); t = com.google.gitiles.ConfigUtil.getDuration(config, "core", "dht", "timeout", def); assertThat(t.toMillis()).isEqualTo(60000); }
public AMQP.BasicProperties getBasicProperties() { if ((amqpProperties) == null) { java.util.Map<java.lang.String, java.lang.Object> headers = new java.util.HashMap<>(); for (com.googlesource.gerrit.plugins.rabbitmq.config.section.Section section : properties.getSections()) { for (java.lang.reflect.Field f : section.getClass().getFields()) { if (f.isAnnotationPresent(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class)) { com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader mh = f.getAnnotation(com.googlesource.gerrit.plugins.rabbitmq.annotation.MessageHeader.class); try { switch (f.getType().getSimpleName()) { case "String" : headers.put(mh.value(), f.get(section).toString()); break; case "Integer" : headers.put(mh.value(), f.getInt(section)); break; case "Long" : headers.put(mh.value(), f.getLong(section)); break; case "Boolean" : headers.put(mh.value(), f.getBoolean(section)); break; default : break; } } catch (java.lang.Exception ex) { com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.LOGGER.info(ex.getMessage()); } } } } com.googlesource.gerrit.plugins.rabbitmq.config.section.Message message = properties.getSection(com.googlesource.gerrit.plugins.rabbitmq.config.section.Message.class); amqpProperties = new com.rabbitmq.client.AMQP.BasicProperties.Builder().appId(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.EVENT_APPID).contentEncoding(CharEncoding.UTF_8).contentType(com.googlesource.gerrit.plugins.rabbitmq.config.AMQProperties.CONTENT_TYPE_JSON).deliveryMode(message.deliveryMode).priority(message.priority).headers(headers).timestamp(new java.util.Date(com.google.gerrit.server.util.TimeUtil.nowMs())).build(); } return amqpProperties; }
private java.lang.String expand(java.lang.String parameterizedRef, java.lang.String userName) { if (parameterizedRef.contains("${")) { return expand(new com.google.gerrit.common.data.ParameterizedString(parameterizedRef), userName); } return parameterizedRef; }
private void initProviderBouncyCastle(org.eclipse.jgit.lib.Config cfg) { setKeyExchangeFactories(NamedFactory.Utils.setUpTransformedFactories(true, java.util.Collections.unmodifiableList(java.util.Arrays.asList(BuiltinDHFactories.dhg14, BuiltinDHFactories.dhg1)), ServerBuilder.DH2KEX)); org.apache.sshd.common.NamedFactory<org.apache.sshd.common.random.Random> factory; if (cfg.getBoolean("sshd", null, "testUseInsecureRandom", false)) { factory = new com.google.gerrit.sshd.SshDaemon.InsecureBouncyCastleRandom.Factory(); } else { factory = org.apache.sshd.common.util.SecurityUtils.getRandomFactory(); } setRandomFactory(new org.apache.sshd.common.random.SingletonRandomFactory(factory)); }
public java.util.List<java.lang.String> getGroups() { return com.google.gerrit.reviewdb.client.PatchSet.splitGroups(groups); }
private java.util.List<com.google.gerrit.extensions.api.projects.BranchInfo> allBranches(com.google.gerrit.server.project.ProjectResource rsrc) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { java.util.List<org.eclipse.jgit.lib.Ref> refs; try (org.eclipse.jgit.lib.Repository db = repoManager.openRepository(rsrc.getNameKey())) { java.util.Collection<org.eclipse.jgit.lib.Ref> heads = db.getRefDatabase().getRefs(Constants.R_HEADS).values(); refs = new java.util.ArrayList(((heads.size()) + 3)); refs.addAll(heads); refs.addAll(db.getRefDatabase().exactRef(Constants.HEAD, RefNames.REFS_CONFIG, RefNames.REFS_USERS_DEFAULT).values()); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException noGitRepository) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } return toBranchInfo(rsrc, refs); }
private void initChangeRepo() throws java.io.IOException { if ((changeRepo) == null) { changeRepo = openRepo(projectName); } }
public java.util.List<com.google.gerrit.common.data.SubmitRecord> canSubmit() { try { initPatchSet(); } catch (com.google.gwtorm.server.OrmException e) { return ruleError(("Error looking up patch set " + (control.getChange().currentPatchSetId()))); } com.google.gerrit.reviewdb.client.Change c = control.getChange(); if ((!(allowClosed)) && (c.getStatus().isClosed())) { com.google.gerrit.common.data.SubmitRecord rec = new com.google.gerrit.common.data.SubmitRecord(); rec.status = SubmitRecord.Status.CLOSED; return java.util.Collections.singletonList(rec); } if ((((c.getStatus()) == (Change.Status.DRAFT)) || (patchSet.isDraft())) && (!(allowDraft))) { return cannotSubmitDraft(); } java.util.List<com.googlecode.prolog_cafe.lang.Term> results; try { results = evaluateImpl("locate_submit_rule", "can_submit", "locate_submit_filter", "filter_submit_results", control.getCurrentUser()); } catch (com.google.gerrit.server.project.RuleEvalException e) { return ruleError(e.getMessage(), e); } if (results.isEmpty()) { return ruleError(java.lang.String.format(("Submit rule '%s' for change %s of %s has " + "no solution."), getSubmitRule(), cd.getId(), getProjectName())); } return resultsToSubmitRecord(getSubmitRule(), results); }
@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroup get(com.google.gerrit.reviewdb.client.AccountGroup.Id id) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }
@com.google.gerrit.common.audit.Audit void patchSetDetail2(com.google.gerrit.reviewdb.client.PatchSet.Id baseId, com.google.gerrit.reviewdb.client.PatchSet.Id key, com.google.gerrit.extensions.client.DiffPreferencesInfo diffPrefs, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gerrit.common.data.PatchSetDetail> callback);
@java.lang.Override public final int parseArguments(final org.kohsuke.args4j.spi.Parameters params) throws org.kohsuke.args4j.CmdLineException { final java.lang.String value = params.getParameter(0); short context; if ("all".equalsIgnoreCase(value)) { context = com.google.gerrit.extensions.client.DiffPreferencesInfo.WHOLE_FILE_CONTEXT; } else { try { context = java.lang.Short.parseShort(value, 10); if (context < 0) { throw new java.lang.NumberFormatException(); } } catch (java.lang.NumberFormatException e) { throw new org.kohsuke.args4j.CmdLineException(owner, java.lang.String.format("\"%s\" is not a valid value for \"%s\"", value, ((org.kohsuke.args4j.NamedOptionDef) (option)).name())); } } setter.addValue(context); return 1; }
private void removeUI() { if ((replyToBox) != null) { replyToBox.unregisterReplyBox(); } clearRange(); setRangeHighlight(false); removeFromParent(); if (!(getCommentInfo().has_line())) { parent.removeFileCommentBox(this); return; } com.google.gerrit.client.diff.PaddingManager manager = getPaddingManager(); manager.remove(this); parent.removeDraft(this, ((comment.line()) - 1)); getCm().focus(); getSelfWidgetWrapper().getWidget().clear(); getGutterWrapper().remove(); com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { resizePaddingWidget(); } }); }
public java.lang.String getCommentLinkName() { java.lang.String ret; ret = getPluginConfigString("commentlink"); if (ret == null) { ret = pluginName; } return ret; }
public boolean canCreate(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevObject object) { if (!(canWrite())) { return false; } boolean owner; switch (getCurrentUser().getAccessPath()) { case REST_API : case JSON_RPC : owner = isOwner(); break; default : owner = false; } if (object instanceof org.eclipse.jgit.revwalk.RevCommit) { return owner || (canPerform(Permission.CREATE)); } else if (object instanceof org.eclipse.jgit.revwalk.RevTag) { final org.eclipse.jgit.revwalk.RevTag tag = ((org.eclipse.jgit.revwalk.RevTag) (object)); try { rw.parseBody(tag); } catch (java.io.IOException e) { return false; } final org.eclipse.jgit.lib.PersonIdent tagger = tag.getTaggerIdent(); if (tagger != null) { boolean valid; if ((getCurrentUser()) instanceof com.google.gerrit.server.IdentifiedUser) { final com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); final java.lang.String addr = tagger.getEmailAddress(); valid = user.getEmailAddresses().contains(addr); } else { valid = false; } if (((!valid) && (!owner)) && (!(canForgeCommitter()))) { return false; } } if (tag.getFullMessage().contains("-----BEGIN PGP SIGNATURE-----\n")) { return owner || (canPerform(Permission.PUSH_SIGNED_TAG)); } else { return owner || (canPerform(Permission.PUSH_TAG)); } } else { return false; } }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { toggleReviewed().run(); }
@java.lang.Override public final com.googlesource.gerrit.plugins.quota.Module.Holder load(com.google.gerrit.reviewdb.client.Account.Id key) throws java.lang.Exception { return createWithBurstyRateLimiter(key); }
private java.util.List<com.google.gerrit.extensions.common.CommentInfo> getChangeSortedComments(java.lang.String changeId) throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = new java.util.ArrayList<>(); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> commentsMap = getPublishedComments(changeId); for (java.util.Map.Entry<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> e : commentsMap.entrySet()) { for (com.google.gerrit.extensions.common.CommentInfo c : e.getValue()) { c.path = e.getKey(); comments.add(c); } } comments.sort(java.util.Comparator.comparing(( c) -> c.id)); return comments; }
public static com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> parsePatterns(java.lang.Iterable<byte[]> patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((patterns != null), null); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern> result = com.google.common.collect.ArrayListMultimap.create(); for (byte[] b : patterns) { com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check((b != null), null); java.lang.String s = new java.lang.String(b, java.nio.charset.StandardCharsets.UTF_8); java.util.List<java.lang.String> parts = com.google.common.base.Splitter.on(':').splitToList(s); com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.check(((parts.size()) == 2), s); result.put(new com.google.gerrit.reviewdb.client.Project.NameKey(parts.get(0)), com.google.gerrit.server.index.change.StalenessChecker.RefStatePattern.create(parts.get(1))); } return result; }
void writeTo(final java.io.OutputStream out) throws java.io.IOException { writeEnum(out, getChangeType()); writeEnum(out, getPatchType()); writeString(out, oldName); writeString(out, newName); writeBytes(out, header); writeVarInt32(out, edits.size()); for (final com.google.gerrit.prettify.common.LineEdit e : edits) { write(out, e); if ((e.getEdits()) != null) { java.util.List<com.google.gerrit.prettify.common.BaseEdit> intlEdits = e.getEdits(); writeVarInt32(out, intlEdits.size()); for (com.google.gerrit.prettify.common.BaseEdit i : intlEdits) { write(out, i); } } else { writeVarInt32(out, 0); } } }
@java.lang.Override protected void init() throws com.google.gerrit.common.errors.EmailException { super.init(); try { com.google.gerrit.server.mail.ProjectWatch.Watchers matching = getWatchers(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : com.google.common.collect.Iterables.concat(matching.to.accounts, matching.cc.accounts, matching.bcc.accounts)) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } } add(RecipientType.TO, matching.to); add(RecipientType.CC, matching.cc); add(RecipientType.BCC, matching.bcc); } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn("Cannot notify watchers for new change", err); } includeWatchers(NotifyType.NEW_PATCHSETS); }
public static com.google.gwtorm.schema.sql.SqlDialect getDialectFor(java.sql.Connection c) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.lang.String url = c.getMetaData().getURL(); for (com.google.gwtorm.schema.sql.SqlDialect d : com.google.gwtorm.schema.sql.SqlDialect.DIALECTS) { if (d.handles(url, c)) { return d.refine(c); } } throw new com.google.gwtorm.server.OrmException(("No dialect known for " + url)); }
private void start() { synchronized(lock) { if ((manager) != null) { throw new java.lang.IllegalStateException("Cache pool has already been started"); } try { java.lang.System.setProperty("net.sf.ehcache.skipUpdateCheck", ("" + true)); } catch (java.lang.SecurityException e) { } manager = new net.sf.ehcache.CacheManager(new com.google.gerrit.ehcache.EhcachePoolImpl.Factory().toConfiguration()); for (com.google.gerrit.server.cache.CacheProvider<?, ?> p : caches.values()) { net.sf.ehcache.Ehcache eh = manager.getEhcache(p.getName()); com.google.gerrit.server.cache.EntryCreator<?, ?> c = p.getEntryCreator(); if ((c != null) && (p.disk())) { c = new com.google.gerrit.ehcache.ProtobufEntryCreator(c, p.getKeyClass(), p.getValueClass()); } com.google.gerrit.server.cache.Cache m; if (c != null) { m = new com.google.gerrit.ehcache.PopulatingCache(eh, c); } else { m = new com.google.gerrit.ehcache.SimpleCache(eh); } if (p.disk()) { m = new com.google.gerrit.ehcache.ProtobufCache(m, p.getKeyClass(), p.getValueClass(), p.getValueProvider()); } p.bind(m); } } }
@org.junit.Test public void changeEditRef() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id accountId = new com.google.gerrit.reviewdb.client.Account.Id(1000042); com.google.gerrit.reviewdb.client.Change.Id changeId = new com.google.gerrit.reviewdb.client.Change.Id(56414); com.google.gerrit.reviewdb.client.PatchSet.Id psId = new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, 50); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsEdit(accountId, changeId, psId); assertEquals("refs/users/42/1000042/edit-56414/50", refName); }
@java.lang.Override protected void onScreenLoad(com.google.gerrit.reviewdb.client.Project.NameKey project) { java.lang.String p = panel.replace("${projectName}", com.google.gwt.http.client.URL.encodeQueryString(project.get())); if ((!(panel.startsWith("/x/"))) && (!(com.google.gerrit.client.Gerrit.isAbsolute(panel)))) { com.google.gwt.http.client.UrlBuilder builder = new com.google.gwt.http.client.UrlBuilder(); builder.setProtocol(com.google.gwt.user.client.Window.Location.getProtocol()); builder.setHost(com.google.gwt.user.client.Window.Location.getHost()); java.lang.String port = com.google.gwt.user.client.Window.Location.getPort(); if ((port != null) && (!(port.isEmpty()))) { builder.setPort(java.lang.Integer.parseInt(port)); } builder.setPath(com.google.gwt.user.client.Window.Location.getPath()); p = (builder.buildString()) + p; } getElement().setPropertyString("href", p); }
byte[] toByteArray(com.google.gerrit.reviewdb.client.Project.NameKey project) { return (((project.toString()) + ':') + (pattern())).getBytes(java.nio.charset.StandardCharsets.UTF_8); }
@org.junit.Test public void fixIdIsGeneratedForFixSuggestion() throws java.lang.Exception { assume().that(notesMigration.enabled()).isTrue(); addRobotComment(changeId, withFixRobotCommentInput); java.util.List<com.google.gerrit.extensions.common.RobotCommentInfo> robotCommentInfos = getRobotComments(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().fixId().isNotEmpty(); com.google.gerrit.acceptance.api.revision.RobotCommentInfoSubject.assertThatList(robotCommentInfos).onlyElement().onlyFixSuggestion().fixId().isNotEqualTo(fixSuggestionInfo.fixId); }
@org.junit.Test public void reduceNot_ReduceIrrelevant() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true)); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }
private static <T> com.google.inject.Provider<T> find(com.google.inject.Injector src, com.google.inject.TypeLiteral<T> type) { java.util.List<com.google.inject.Binding<T>> bindings = src.findBindingsByType(type); if ((bindings != null) && ((bindings.size()) == 1)) { return bindings.get(0).getProvider(); } else if ((bindings != null) && ((bindings.size()) > 1)) { throw new com.google.inject.ProvisionException(java.lang.String.format(("Multiple providers bound for DynamicItem<%s>\n" + "This is not allowed; check the server configuration."), type)); } else { return null; } }
public boolean isEnabled() { return cfg.getBoolean(com.googlesource.gerrit.plugins.lfs.LfsConfigSection.LFS, namespace, com.googlesource.gerrit.plugins.lfs.LfsConfigSection.KEY_ENABLED, false); }
public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { com.google.gerrit.common.data.ReviewResult result = null; try { result = deleteDraftPatchSetFactory.create(psid).call(); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(result.getChangeId())); } if ((result.getErrors().size()) > 0) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; }
@java.lang.Override public void execute() { try { cb.onSuccess(new com.google.gerrit.client.rpc.HttpResponse(res, type, data)); } finally { if (!(background)) { RpcStatus.INSTANCE.onRpcComplete(); } } }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.Failure { maxCommandWidth = (wide) ? java.lang.Integer.MAX_VALUE : (((((columns) - 8) - 12) - 12) - 4) - 4; stdout.print(java.lang.String.format("%-8s %-12s %-12s %-4s %s\n", "Task", "State", "StartTime", "", "Command")); stdout.print("------------------------------------------------------------------------------\n"); java.util.List<com.google.gerrit.server.config.ListTasks.TaskInfo> tasks; try { tasks = listTasks.apply(new com.google.gerrit.server.config.ConfigResource()); } catch (com.google.gerrit.extensions.restapi.AuthException e) { throw die(e); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.sshd.commands.Failure(1, "permission backend unavailable", e); } boolean viewAll = permissionBackend.user(currentUser).testOrFalse(GlobalPermission.VIEW_QUEUE); long now = com.google.gerrit.common.TimeUtil.nowMs(); if (groupByQueue) { com.google.common.collect.ListMultimap<java.lang.String, com.google.gerrit.server.config.ListTasks.TaskInfo> byQueue = byQueue(tasks); for (java.lang.String queueName : byQueue.keySet()) { com.google.gerrit.server.git.WorkQueue.Executor e = workQueue.getExecutor(queueName); stdout.print(java.lang.String.format("Queue: %s\n", queueName)); print(byQueue.get(queueName), now, viewAll, e.getCorePoolSize()); } } else { print(tasks, now, viewAll, 0); } }
private void initPageHeader() { final com.google.gwt.user.client.ui.HorizontalPanel hp = new com.google.gwt.user.client.ui.HorizontalPanel(); hp.setStyleName(Gerrit.RESOURCES.css().projectFilterPanel()); final com.google.gwt.user.client.ui.Label filterLabel = new com.google.gwt.user.client.ui.Label(Util.C.projectFilter()); filterLabel.setStyleName(Gerrit.RESOURCES.css().projectFilterLabel()); hp.add(filterLabel); filterTxt = new com.google.gwtexpui.globalkey.client.NpTextBox(); filterTxt.setValue(subname); filterTxt.addKeyUpHandler(new com.google.gwt.event.dom.client.KeyUpHandler() { @java.lang.Override public void onKeyUp(com.google.gwt.event.dom.client.KeyUpEvent event) { subname = filterTxt.getValue(); refresh(); } }); hp.add(filterTxt); add(hp); }
private org.asciidoctor.Options createOptions(java.io.File base, java.io.File outputFile) { org.asciidoctor.OptionsBuilder optionsBuilder = org.asciidoctor.OptionsBuilder.options(); optionsBuilder.backend(backend).docType(AsciiDoctor.DOCTYPE).eruby(AsciiDoctor.ERUBY).safe(SafeMode.UNSAFE).baseDir(base).toFile(outputFile); org.asciidoctor.AttributesBuilder attributesBuilder = org.asciidoctor.AttributesBuilder.attributes(); attributesBuilder.attributes(getAttributes()); if ((revnumber) != null) { attributesBuilder.attribute(AsciiDoctor.REVNUMBER_NAME, revnumber); } optionsBuilder.attributes(attributesBuilder.get()); return optionsBuilder.get(); }
public com.google.gerrit.server.git.validators.CommitValidators forGerritCommits(com.google.gerrit.server.permissions.PermissionBackend.ForRef perm, com.google.gerrit.reviewdb.client.Branch.NameKey branch, com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.server.ssh.SshInfo sshInfo, org.eclipse.jgit.revwalk.RevWalk rw) throws java.io.IOException { return new com.google.gerrit.server.git.validators.CommitValidators(com.google.common.collect.ImmutableList.of(new com.google.gerrit.server.git.validators.CommitValidators.UploadMergesPermissionValidator(perm), new com.google.gerrit.server.git.validators.CommitValidators.AmendedGerritMergeCommitValidationListener(perm, gerritIdent), new com.google.gerrit.server.git.validators.CommitValidators.AuthorUploaderValidator(user, perm, canonicalWebUrl), new com.google.gerrit.server.git.validators.CommitValidators.SignedOffByValidator(user, perm, projectCache.checkedGet(branch.getParentKey())), new com.google.gerrit.server.git.validators.CommitValidators.ChangeIdValidator(projectCache.checkedGet(branch.getParentKey()), user, canonicalWebUrl, installCommitMsgHookCommand, sshInfo), new com.google.gerrit.server.git.validators.CommitValidators.ConfigValidator(branch, user, rw, allUsers), new com.google.gerrit.server.git.validators.CommitValidators.PluginCommitValidationListener(pluginValidators), new com.google.gerrit.server.git.validators.CommitValidators.ExternalIdUpdateListener(allUsers, externalIdsConsistencyChecker), new com.google.gerrit.server.git.validators.CommitValidators.AccountCommitValidator(allUsers, accountValidator))); }
@com.google.gwt.uibinder.client.UiHandler("viewport") void onMouseMove(com.google.gwt.event.dom.client.MouseMoveEvent e) { if (dragging) { int y = (e.getRelativeY(getElement())) - (startY); cmB.scrollToY(java.lang.Math.max(0, (y / (ratio)))); e.preventDefault(); e.stopPropagation(); } }
private java.util.Set<com.google.gerrit.reviewdb.Change.Id> changesReferencingTr(final com.google.gerrit.reviewdb.ReviewDb db, final java.lang.String trackingId) throws com.google.gwtorm.client.OrmException { final java.util.Set<com.google.gerrit.reviewdb.Change.Id> resultChanges = new java.util.HashSet<com.google.gerrit.reviewdb.Change.Id>(); for (final com.google.gerrit.reviewdb.TrackingId tr : db.trackingIds().byTrackingId(new com.google.gerrit.reviewdb.TrackingId.Id(trackingId))) { resultChanges.add(tr.getChangeId()); } return resultChanges; }
public com.googlesource.gerrit.plugins.lfs.LfsConfigSection getForProject(com.google.gerrit.reviewdb.client.Project.NameKey project) { org.eclipse.jgit.lib.Config cfg = projectCache.getAllProjects().getConfig(((pluginName) + ".config")).get(); java.util.Set<java.lang.String> namespaces = cfg.getSubsections(LfsConfigSection.LFS); java.lang.String p = project.get(); for (java.lang.String n : namespaces) { if (("?/*".equals(n)) || (n.endsWith("/?/*"))) { java.lang.String prefix = n.substring(0, ((n.length()) - 3)); java.util.regex.Matcher m = java.util.regex.Pattern.compile((("^" + prefix) + "([^/]+)/.*$")).matcher(p); if (m.matches()) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.endsWith("/*")) { if (p.startsWith(n.substring(0, ((n.length()) - 1)))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (n.startsWith("^")) { if (p.matches(n.substring(1))) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } else if (p.equals(n)) { return new com.googlesource.gerrit.plugins.lfs.LfsConfigSection(cfg, n); } } return null; }
public static java.lang.String readFile(final java.io.File parentDir, final java.lang.String name) throws javax.servlet.ServletException { if (parentDir == null) { return null; } final java.io.File path = new java.io.File(parentDir, name); try { final java.io.InputStream in = new java.io.FileInputStream(path); try { final java.lang.StringBuilder w = new java.lang.StringBuilder(); final java.io.InputStreamReader r = new java.io.InputStreamReader(in, com.google.gerrit.server.HtmlDomUtil.ENC); final char[] buf = new char[512]; int n; while ((n = r.read(buf)) > 0) { w.append(buf, 0, n); } return w.toString(); } finally { in.close(); } } catch (java.io.FileNotFoundException e) { return null; } catch (java.io.IOException e) { throw new javax.servlet.ServletException(("Error reading " + path), e); } }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { com.google.gerrit.server.project.ListProjects impl = factory.get(); if (acceptsJson(req)) { impl.setFormat(OutputFormat.JSON_COMPACT); } if (paramParser.parse(impl, req, res)) { java.io.ByteArrayOutputStream buf = new java.io.ByteArrayOutputStream(); if (impl.getFormat().isJson()) { res.setContentType(com.google.gerrit.httpd.rpc.project.JSON_TYPE); buf.write(com.google.gerrit.httpd.rpc.project.JSON_MAGIC); } else { res.setContentType("text/plain"); } impl.display(buf); res.setCharacterEncoding("UTF-8"); send(req, res, buf.toByteArray()); } }
public static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { persist(com.google.gerrit.server.auth.oauth.OAuthTokenCache.OAUTH_TOKENS, java.lang.String.class, com.google.gerrit.extensions.auth.oauth.OAuthToken.class); } }; }
private void initSignatures() { setSignatureFactories(org.apache.sshd.common.BaseBuilder.setUpDefaultSignatures(true)); }
private void updatePatchSet() throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Change.Status changeStatus = parentChange.getStatus(); if (changeStatus == (Change.Status.NEW)) { setPatchSetAsDraft(); updateChange(); } else { sendUserInfo(("Unable to set patch set as draft, change is " + (getStatusName(changeStatus)))); } }
private com.google.gerrit.reviewdb.client.Change getChange(com.google.gerrit.extensions.common.ChangeInfo info) throws com.google.gwtorm.server.OrmException { return getNotes(info).getChange(); }
private com.google.inject.Key<javax.servlet.http.HttpServlet> directChangeById() { return key(new javax.servlet.http.HttpServlet() { private static final long serialVersionUID = 1L; @java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { try { java.lang.String idString = req.getPathInfo(); if (idString.endsWith("/")) { idString = idString.substring(0, ((idString.length()) - 1)); } com.google.gerrit.reviewdb.client.Change.Id id = Change.Id.parse(idString); com.google.gerrit.httpd.UrlModule.toGerrit(com.google.gerrit.common.PageLinks.toChange(null, id), req, rsp); } catch (java.lang.IllegalArgumentException err) { rsp.sendError(HttpServletResponse.SC_NOT_FOUND); } } }); }
private org.eclipse.jgit.revwalk.RevCommit commit(com.google.gerrit.server.notedb.ChangeUpdate update) throws java.io.IOException { com.google.gerrit.server.git.MetaDataUpdate md = new com.google.gerrit.server.git.MetaDataUpdate(com.google.gerrit.server.extensions.events.GitReferenceUpdated.DISABLED, project, repo); java.sql.Timestamp ts = com.google.gerrit.server.util.TimeUtil.nowTs(); md.getCommitBuilder().setAuthor(new org.eclipse.jgit.lib.PersonIdent("Example User", "user@example.com", ts, com.google.gerrit.server.notedb.ChangeNotesTest.TZ)); md.getCommitBuilder().setCommitter(new org.eclipse.jgit.lib.PersonIdent("Gerrit Test", "notthis@email.com", ts, com.google.gerrit.server.notedb.ChangeNotesTest.TZ)); return update.commit(md); }
private com.google.gwt.safehtml.shared.SafeHtml formatList(com.google.gwt.core.client.JsArrayString l) { com.google.gwtexpui.safehtml.client.SafeHtmlBuilder html = new com.google.gwtexpui.safehtml.client.SafeHtmlBuilder(); int size = l.length(); for (int i = 0; i < size; i++) { html.openSpan().addStyleName(style.includedInElement()).append(l.get(i)).closeSpan(); if (i < (size - 1)) { html.append(", "); } } return html; }
@java.lang.Override protected java.lang.String getRefName() { return com.google.gerrit.reviewdb.client.RefNames.refsDraftComments(accountId, getChange().getId()); }
private void save(org.eclipse.jgit.lib.PersonIdent ident, java.lang.String msg) throws java.io.IOException { java.io.File path = getPath(); if (path == null) { throw new java.io.IOException(((project) + " does not exist.")); } try (org.eclipse.jgit.lib.Repository repo = new org.eclipse.jgit.internal.storage.file.FileRepository(path);org.eclipse.jgit.lib.ObjectInserter i = repo.newObjectInserter();org.eclipse.jgit.lib.ObjectReader r = repo.newObjectReader();org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(reader)) { inserter = i; reader = r; org.eclipse.jgit.revwalk.RevTree srcTree = ((revision) != null) ? rw.parseTree(revision) : null; newTree = readTree(srcTree); org.eclipse.jgit.lib.CommitBuilder commit = new org.eclipse.jgit.lib.CommitBuilder(); commit.setAuthor(ident); commit.setCommitter(ident); commit.setMessage(msg); onSave(commit); org.eclipse.jgit.lib.ObjectId res = newTree.writeTree(inserter); if (res.equals(srcTree)) { return; } commit.setTreeId(res); if ((revision) != null) { commit.addParentId(revision); } org.eclipse.jgit.lib.ObjectId newRevision = inserter.insert(commit); updateRef(repo, ident, newRevision, ("commit: " + msg)); revision = newRevision; } finally { inserter = null; reader = null; } }
void setIndentUnit(int indent) { cm.setOption("indentUnit", (Patch.COMMIT_MSG.equals(path) ? 2 : indent)); }
@java.lang.Override protected void formatChange() throws com.google.gerrit.server.mail.EmailException { appendText(velocifyFile("NewChange.vm")); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.index.change.IndexRewriter.class); bind(com.google.gerrit.server.index.account.AccountIndexCollection.class); listener().to(com.google.gerrit.server.index.account.AccountIndexCollection.class); bind(com.google.gerrit.server.index.change.ChangeIndexCollection.class); listener().to(com.google.gerrit.server.index.change.ChangeIndexCollection.class); factory(ChangeIndexer.Factory.class); }
private com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> getOpenChangesByProject(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { com.google.common.collect.SetMultimap<com.google.gerrit.reviewdb.client.Project.NameKey, com.google.gerrit.reviewdb.client.Change.Id> openByProject = com.google.common.collect.HashMultimap.create(); for (com.google.gerrit.reviewdb.client.Change c : db.changes().all()) { com.google.gerrit.reviewdb.client.Change.Status status = c.getStatus(); if ((status != null) && (status.isClosed())) { continue; } openByProject.put(c.getProject(), c.getId()); } return openByProject; }
@java.lang.Override public com.google.gerrit.extensions.client.DiffPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.DiffPreferencesInfo in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException, org.eclipse.jgit.errors.RepositoryNotFoundException { if (((self.get()) != (rsrc.getUser())) && (!(self.get().getCapabilities().canModifyAccount()))) { throw new com.google.gerrit.extensions.restapi.AuthException("restricted to members of Modify Accounts"); } if (in == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("input must be provided"); } com.google.gerrit.reviewdb.client.Account.Id userId = rsrc.getUser().getAccountId(); com.google.gerrit.extensions.client.DiffPreferencesInfo n = (readFromGit) ? com.google.gerrit.server.account.GetDiffPreferences.readFromGit(userId, gitMgr, allUsersName, in) : merge(com.google.gerrit.server.account.GetDiffPreferences.initFromDb(db.get().accountDiffPreferences().get(userId)), in); com.google.gerrit.extensions.client.DiffPreferencesInfo out = writeToGit(n, userId); writeToDb(n, userId); return out; }
private org.eclipse.jgit.lib.PersonIdent newAuthorIdent(com.google.gerrit.server.notedb.rebuild.EventList<?> events) { com.google.gerrit.reviewdb.client.Account.Id id = events.getAccountId(); if (id == null) { return new org.eclipse.jgit.lib.PersonIdent(serverIdent, events.getWhen()); } return changeNoteUtil.newIdent(id, events.getWhen(), serverIdent); }
@com.google.gwt.uibinder.client.UiHandler("cancel") void onCancel(com.google.gwt.event.dom.client.ClickEvent e) { openForm.setVisible(true); com.google.gwt.user.client.ui.UIObject.setVisible(form, false); suggestBox.setFocus(false); }
private void printElement(final java.io.PrintWriter stdout, com.google.gerrit.sshd.commands.ListProjects.TreeNode node, int level, boolean isLast, final com.google.gerrit.sshd.commands.ListProjects.TreeNode lastParentNode) { if ((node.getProject()) != null) { if (!(currentTabSeparator.equals(" "))) { final java.lang.String nodeProject = node.getProject().getName(); final java.lang.String lastParentProject = lastParentNode.getProject().getName(); if (nodeProject.equals(lastParentProject)) { currentTabSeparator = " "; } } if (level > 0) { stdout.print(java.lang.String.format((("%-" + (4 * level)) + "s"), currentTabSeparator)); } final java.lang.String prefix = (isLast) ? com.google.gerrit.sshd.commands.ListProjects.LAST_NODE_PREFIX : com.google.gerrit.sshd.commands.ListProjects.NODE_PREFIX; java.lang.String printout; if (node.isVisible()) { printout = prefix + (node.getProject().getName()); } else { printout = prefix + (com.google.gerrit.sshd.commands.ListProjects.NOT_VISIBLE_PROJECT); } stdout.print((printout + "\n")); } if (node.isLeaf()) { return; } else { final java.util.List<com.google.gerrit.sshd.commands.ListProjects.TreeNode> children = node.getChildren(); ++level; for (com.google.gerrit.sshd.commands.ListProjects.TreeNode treeNode : children) { final boolean isLastIndex = (children.indexOf(treeNode)) == ((children.size()) - 1); printElement(stdout, treeNode, level, isLastIndex, lastParentNode); } } }
@java.lang.Override public com.google.gerrit.server.mail.Address from(com.google.gerrit.reviewdb.client.Account.Id fromId) { java.lang.String senderName; if (fromId != null) { java.util.Optional<com.google.gerrit.reviewdb.client.Account> a = accountCache.maybeGet(fromId).map(AccountState::getAccount); java.lang.String fullName = a.map(Account::getFullName).orElse(null); java.lang.String userEmail = a.map(Account::getPreferredEmail).orElse(null); if (canRelay(userEmail)) { return new com.google.gerrit.server.mail.Address(fullName, userEmail); } if ((fullName == null) || ("".equals(fullName.trim()))) { fullName = anonymousCowardName; } senderName = nameRewriteTmpl.replace("user", fullName).toString(); } else { senderName = serverAddress.getName(); } java.lang.String senderEmail; com.google.gerrit.common.data.ParameterizedString senderEmailPattern = new com.google.gerrit.common.data.ParameterizedString(serverAddress.getEmail()); if (senderEmailPattern.getParameterNames().isEmpty()) { senderEmail = senderEmailPattern.getRawPattern(); } else { senderEmail = senderEmailPattern.replace("userHash", com.google.gerrit.server.mail.send.FromAddressGeneratorProvider.hashOf(senderName)).toString(); } return new com.google.gerrit.server.mail.Address(senderName, senderEmail); }
@java.lang.Override com.google.gerrit.client.diff.CommentGroup group(com.google.gerrit.client.diff.DisplaySide side, int cmLinePlusOne) { java.util.Map<java.lang.Integer, com.google.gerrit.client.diff.CommentGroup> map = map(side); com.google.gerrit.client.diff.CommentGroup existing = map.get(cmLinePlusOne); if (existing != null) { return existing; } com.google.gerrit.client.diff.UnifiedCommentGroup g = new com.google.gerrit.client.diff.UnifiedCommentGroup(this, host.getCmFromSide(side), side, cmLinePlusOne); map.put(cmLinePlusOne, g); if (mergedMap.containsKey(cmLinePlusOne)) { duplicates.put(cmLinePlusOne, mergedMap.remove(cmLinePlusOne)); } mergedMap.put(cmLinePlusOne, g); if (isAttached()) { g.init(host.getDiffTable()); g.handleRedraw(); } return g; }
@java.lang.Override public java.lang.String toString() { return ((("(" + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + " || ") + (com.google.gerrit.extensions.conditions.BooleanCondition.maybeTrim(a, getClass()))) + ")"; }
@org.junit.Before public void setUp() { java.util.concurrent.ScheduledThreadPoolExecutor poolMock = new com.ericsson.gerrit.plugins.eventslog.EventHandlerTest.PoolMock(); eventHandler = new com.ericsson.gerrit.plugins.eventslog.EventHandler(storeMock, poolMock); }
private javax.crypto.Cipher cipher(byte[] initVector, int mode) throws java.security.InvalidAlgorithmParameterException, java.security.InvalidKeyException, java.security.NoSuchAlgorithmException, java.security.spec.InvalidParameterSpecException, javax.crypto.NoSuchPaddingException { javax.crypto.spec.IvParameterSpec spec = new javax.crypto.spec.IvParameterSpec(initVector); javax.crypto.Cipher cipher = javax.crypto.Cipher.getInstance("AES/CBC/PKCS5PADDING"); java.security.AlgorithmParameters params = java.security.AlgorithmParameters.getInstance(com.googlesource.gerrit.plugins.lfs.fs.LfsFsRequestAuthorizer.ALGORITHM); params.init(spec); cipher.init(mode, key, params); return cipher; }
private <T extends com.google.gwt.core.client.JavaScriptObject> void send(com.google.gwt.http.client.RequestBuilder.Method method, com.google.gerrit.client.rpc.HttpCallback<T> cb) { com.google.gerrit.client.rpc.RestApi.HttpImpl<T> httpCallback = new com.google.gerrit.client.rpc.RestApi.HttpImpl(background, cb); try { if (!(background)) { RpcStatus.INSTANCE.onRpcStart(); } request(method).sendRequest(null, httpCallback); } catch (com.google.gwt.http.client.RequestException e) { httpCallback.onError(null, e); } }
@java.lang.Override public synchronized com.google.gerrit.metrics.Timer0 newTimer(java.lang.String name, com.google.gerrit.metrics.Description desc) { com.google.gerrit.metrics.dropwizard.DropWizardMetricMaker.checkTimerDescription(desc); define(name, desc); return newTimerImpl(name); }
private java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> getIncludedGroups(java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> seedGroups) { java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> includes = new java.util.HashSet<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); java.util.Queue<com.google.gerrit.reviewdb.AccountGroup.Id> groupQueue = new java.util.LinkedList<com.google.gerrit.reviewdb.AccountGroup.Id>(seedGroups); while ((groupQueue.size()) > 0) { com.google.gerrit.reviewdb.AccountGroup.Id id = groupQueue.remove(); for (final com.google.gerrit.reviewdb.AccountGroup.Id groupId : groupIncludeCache.getByInclude(id)) { if (includes.add(groupId)) { groupQueue.add(groupId); } } } return java.util.Collections.unmodifiableSet(includes); }
@org.junit.Test public void lookUpByEmail() throws java.lang.Exception { assertEmail(accounts.byEmail(admin.email), admin); java.lang.String email = "foo.bar@example.com"; externalIdsUpdateFactory.create().insert(com.google.gerrit.server.account.externalids.ExternalId.createWithEmail(ExternalId.Key.parse("foo:bar"), admin.id, email)); assertEmail(accounts.byEmail(email), admin); assertThat(accounts.byEmail(admin.email.toUpperCase(java.util.Locale.US))).isEmpty(); assertThat(accounts.byEmail(admin.email.substring(0, admin.email.indexOf('@')))).isEmpty(); assertThat(accounts.byEmail("non-existing@example.com")).isEmpty(); com.google.common.collect.ImmutableSetMultimap<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id> byEmails = accounts.byEmails(admin.email, user.email); assertEmail(byEmails.get(admin.email), admin); assertEmail(byEmails.get(user.email), user); }
private java.util.Set<java.lang.String> getAllowedUserIds() { com.google.gerrit.server.IdentifiedUser user = userProvider.get(); java.util.Set<java.lang.String> result = new java.util.HashSet<>(); result.addAll(user.getEmailAddresses()); for (com.google.gerrit.reviewdb.client.AccountExternalId extId : user.state().getExternalIds()) { result.add(extId.getExternalId()); } return result; }
@java.lang.Override protected void onOpenRow(final int row) { super.onOpenRow(row); openRow(getRowItem(row).name()); }
public int getMaxRetries() { return config.getMaxRetries(); }
@org.junit.Test public void createChangeWithPrivateByDefaultDisabled() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().create(new com.google.gerrit.extensions.common.ChangeInput(project.get(), "master", "empty change")).get(); assertThat(info.isPrivate).isNull(); }
@java.lang.Override public java.lang.String getETag(com.google.gerrit.server.change.RevisionResource rsrc) { com.google.common.hash.Hasher h = com.google.common.hash.Hashing.murmur3_128().newHasher(); com.google.gerrit.server.CurrentUser user = rsrc.getControl().getUser(); try { rsrc.getChangeResource().prepareETag(h, user); h.putBoolean(com.google.gerrit.server.change.Submit.wholeTopicEnabled(config)); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.server.git.ChangeSet cs = mergeSuperSet.get().completeChangeSet(db, rsrc.getChange(), user); for (com.google.gerrit.server.query.change.ChangeData cd : cs.changes()) { changeResourceFactory.create(cd.changeControl()).prepareETag(h, user); } h.putBoolean(cs.furtherHiddenChanges()); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gwtorm.server.OrmRuntimeException(e); } return h.hash().toString(); }
@org.junit.Test public void listChildren() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey child1 = new com.google.gerrit.reviewdb.client.Project.NameKey("p1"); createProject(child1.get()); com.google.gerrit.reviewdb.client.Project.NameKey child2 = new com.google.gerrit.reviewdb.client.Project.NameKey("p2"); createProject(child2.get()); com.google.gerrit.reviewdb.client.Project.NameKey child1_1 = new com.google.gerrit.reviewdb.client.Project.NameKey("p1.1"); createProject(child1_1.get(), child1); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertThatNameList(gApi.projects().name(allProjects.get()).children()).containsExactly(allUsers, project, child1, child2).inOrder(); com.google.gerrit.acceptance.rest.project.ProjectAssert.assertThatNameList(gApi.projects().name(child1.get()).children()).containsExactly(child1_1); }
public com.google.gerrit.server.query.change.QueryResult queryChanges(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> query) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { return queryChanges(com.google.common.collect.ImmutableList.of(query)).get(0); }
@java.lang.Override public boolean equals(java.lang.Object o) { if ((this) == o) { return true; } if (o instanceof com.google.gerrit.common.data.SubmitRequirement) { com.google.gerrit.common.data.SubmitRequirement that = ((com.google.gerrit.common.data.SubmitRequirement) (o)); return ((java.util.Objects.equals(shortReason, that.shortReason)) && (java.util.Objects.equals(fullReason, that.fullReason))) && (java.util.Objects.equals(label, that.label)); } return false; }
private void persistDiffPreferences() { setEnabled(false); final com.google.gerrit.reviewdb.AccountDiffPreference diffPref = new com.google.gerrit.reviewdb.AccountDiffPreference(com.google.gerrit.client.Gerrit.getUserAccount().getId()); diffPref.setIgnoreWhitespace(getIgnoreWhitespace()); diffPref.setTabSize(tabWidth.getIntValue()); diffPref.setLineLength(colWidth.getIntValue()); diffPref.setSyntaxHighlighting(syntaxHighlighting.getValue()); diffPref.setShowWhitespaceErrors(whitespaceErrors.getValue()); diffPref.setIntralineDifference(intralineDifference.getValue()); diffPref.setShowTabs(showTabs.getValue()); diffPref.setContext(getContext()); Util.ACCOUNT_SVC.changeDiffPreferences(diffPref, new com.google.gerrit.client.rpc.GerritCallback<com.google.gwtjsonrpc.client.VoidResult>() { @java.lang.Override public void onSuccess(com.google.gwtjsonrpc.client.VoidResult result) { com.google.gerrit.client.Gerrit.setAccountDiffPreference(diffPref); setEnabled(true); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { setEnabled(true); } }); }
private java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> getMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> seenGroups) { seenGroups.add(groupUUID); java.util.Optional<com.google.gerrit.server.group.InternalGroup> internalGroup = groupCache.get(groupUUID); if (!(internalGroup.isPresent())) { return com.google.common.collect.ImmutableSet.of(); } com.google.gerrit.server.group.InternalGroup group = internalGroup.get(); com.google.gerrit.server.account.GroupControl groupControl = groupControlFactory.controlFor(new com.google.gerrit.server.group.InternalGroupDescription(group)); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> directMembers = group.getMembers().stream().filter(groupControl::canSeeMember).collect(toImmutableSet()); java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> indirectMembers = new java.util.HashSet<>(); if ((recursive) && (groupControl.canSeeGroup())) { for (com.google.gerrit.reviewdb.client.AccountGroup.UUID subgroupUuid : group.getSubgroups()) { if (!(seenGroups.contains(subgroupUuid))) { indirectMembers.addAll(getMembers(subgroupUuid, seenGroups)); } } } return com.google.common.collect.Sets.union(directMembers, indirectMembers); }
com.google.gerrit.server.git.strategy.SubmitStrategy.Arguments create(com.google.gerrit.extensions.client.SubmitType submitType, com.google.gerrit.reviewdb.client.Branch.NameKey destBranch, com.google.gerrit.server.git.MergeOp.CommitStatus commits, com.google.gerrit.server.git.CodeReviewCommit.CodeReviewRevWalk rw, com.google.gerrit.server.IdentifiedUser caller, com.google.gerrit.server.git.MergeTip mergeTip, org.eclipse.jgit.lib.ObjectInserter inserter, org.eclipse.jgit.lib.Repository repo, org.eclipse.jgit.revwalk.RevFlag canMergeFlag, com.google.gerrit.reviewdb.server.ReviewDb db, java.util.Set<org.eclipse.jgit.revwalk.RevCommit> alreadyAccepted, java.lang.String submissionId, com.google.gerrit.extensions.api.changes.NotifyHandling notifyHandling);
@com.google.inject.Provides @com.google.inject.Singleton @com.google.gerrit.server.index.IndexExecutor(BATCH) com.google.common.util.concurrent.ListeningExecutorService getBatchIndexExecutor(@com.google.gerrit.server.config.GerritServerConfig org.eclipse.jgit.lib.Config config, com.google.gerrit.server.git.WorkQueue workQueue) { if ((batchExecutor) != null) { return batchExecutor; } int batchThreads = this.threads; if (batchThreads <= 0) { batchThreads = config.getInt("index", null, "batchThreads", 0); } if (batchThreads <= 0) { batchThreads = java.lang.Runtime.getRuntime().availableProcessors(); } return com.google.common.util.concurrent.MoreExecutors.listeningDecorator(workQueue.createQueue(batchThreads, "Index-Batch")); }
private void insertEmptyLines(net.codemirror.lib.CodeMirror cm, int nextLine, int cnt) { addPaddingWidget(cm, diffTable.style.padding(), (nextLine - 1), cnt, Unit.EM); }
final Account.FieldName get() { return Account.FieldName.valueOf(getRaw()); }
void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, com.google.gerrit.sshd.DispatchCommand cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.SshAuditEvent(sid, extractCurrentUser(ctx), extractWhat(cmd), created, extractParameters(cmd), result)); }
void audit(com.google.gerrit.sshd.SshScope.Context ctx, java.lang.Object result, java.lang.String cmd) { final java.lang.String sid = extractSessionId(ctx); final long created = extractCreated(ctx); auditService.dispatch(new com.google.gerrit.audit.SshAuditEvent(sid, extractCurrentUser(ctx), cmd, created, null, result)); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> publishedByChange(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readComments())) { return com.google.gerrit.server.PatchLineCommentsUtil.sort(com.google.gerrit.server.PatchLineCommentsUtil.byCommentStatus(db.patchComments().byChange(notes.getChangeId()), Status.PUBLISHED)); } notes.load(); java.util.List<com.google.gerrit.reviewdb.client.PatchLineComment> comments = com.google.common.collect.Lists.newArrayList(); comments.addAll(notes.getBaseComments().values()); comments.addAll(notes.getPatchSetComments().values()); return com.google.gerrit.server.PatchLineCommentsUtil.sort(comments); }
private com.google.gerrit.common.data.SubmitTypeRecord logTypeRuleError(java.lang.String err) { com.google.gerrit.server.project.ChangeControl.log.error(err); return typeRuleError("Error evaluating project type rules, check server log"); }
@java.lang.Override protected void run() throws com.google.gerrit.sshd.commands.UnloggedFailure { if (!(loader.isRemoteAdminEnabled())) { throw die("remote installation is disabled"); } if (com.google.common.base.Strings.isNullOrEmpty(source)) { throw die("Argument \"-|URL\" is required"); } if ((com.google.common.base.Strings.isNullOrEmpty(name)) && ("-".equalsIgnoreCase(source))) { throw die("--name required when source is stdin"); } if (com.google.common.base.Strings.isNullOrEmpty(name)) { int s = source.lastIndexOf('/'); if (0 <= s) { name = source.substring((s + 1)); } else { name = source; } } java.io.InputStream data; if ("-".equalsIgnoreCase(source)) { data = in; } else if ((new java.io.File(source).isFile()) && (source.equals(new java.io.File(source).getAbsolutePath()))) { try { data = new java.io.FileInputStream(new java.io.File(source)); } catch (java.io.FileNotFoundException e) { throw die(("cannot read " + (source))); } } else { try { data = new java.net.URL(source).openStream(); } catch (java.net.MalformedURLException e) { throw die(("invalid url " + (source))); } catch (java.io.IOException e) { throw die(("cannot read " + (source))); } } try { loader.installPluginFromStream(name, data); } catch (java.io.IOException e) { throw die("cannot install plugin"); } catch (com.google.gerrit.server.plugins.PluginInstallException e) { e.printStackTrace(stderr); java.lang.String msg = java.lang.String.format("Plugin failed to install. Cause: %s", e.getMessage()); throw die(msg); } finally { try { data.close(); } catch (java.io.IOException err) { } } }
@java.lang.Override public com.google.gerrit.server.mail.receive.MailMessage expectedMailMessage() { java.lang.System.out.println("\ud83d\ude1b test"); com.google.gerrit.server.mail.receive.MailMessage.Builder expect = com.google.gerrit.server.mail.receive.MailMessage.builder(); expect.id("<001a114da7ae26e2eb053fe0c29c@google.com>").from(new com.google.gerrit.server.mail.Address("Jonathan Nieder (Gerrit)", "noreply-gerritcodereview-CtTy0igsBrnvL7dKoWEIEg@google.com")).addTo(new com.google.gerrit.server.mail.Address("ekempin", "ekempin@google.com")).textContent(com.google.gerrit.server.mail.receive.data.QuotedPrintableHeaderMessage.textContent).subject("âme vulgaire").dateReceived(new org.joda.time.DateTime(2016, 10, 25, 9, 11, 35, 0, org.joda.time.DateTimeZone.UTC)); return expect.build(); }
@org.junit.Test public void multipleReviewers() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.CHANGE_OWNER.getId(), ReviewerState.REVIEWER); update.putReviewer(com.google.gerrit.server.notedb.ChangeNotesTest.OTHER_ACCOUNT.getId(), ReviewerState.REVIEWER); commit(update); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); assertEquals(com.google.common.collect.ImmutableSetMultimap.of(ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(1), ReviewerState.REVIEWER, new com.google.gerrit.reviewdb.client.Account.Id(2)), notes.getReviewers()); }
private void setChangeId(int id) { changeId = new com.google.gerrit.reviewdb.client.Change.Id(id); ins = changeInserterFactory.create(changeId, commit, refName).setTopic(magicBranch.topic).setPrivate(((magicBranch.isPrivate) || ((receiveConfig.privateByDefault) && (!(magicBranch.removePrivate))))).setWorkInProgress(magicBranch.workInProgress).setValidate(false); if (magicBranch.draft) { ins.setDraft(magicBranch.draft); } else if (magicBranch.merged) { ins.setStatus(Change.Status.MERGED); } cmd = new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commit, ins.getPatchSetId().toRefName()); if ((rp.getPushCertificate()) != null) { ins.setPushCertificate(rp.getPushCertificate().toTextWithSignature()); } }
@java.lang.Override public com.google.gerrit.extensions.events.UsageDataPublishedListener.MetaData getMetaData() { return com.googlesource.gerrit.plugins.quota.Publisher.REPO_SIZE; }
@org.junit.Test public void testListTables() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { assertTrue(dialect.listTables(db).isEmpty()); execute("CREATE SEQUENCE cnt"); execute("CREATE TABLE foo (cnt INT)"); java.util.Set<java.lang.String> s = dialect.listTables(db); assertEquals(1, s.size()); assertFalse(s.contains("cnt")); assertTrue(s.contains("foo")); }
private void setMerged(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.ChangeMessage msg) throws com.google.gwtorm.server.OrmException, java.io.IOException { logDebug("Setting change {} merged", c.getId()); com.google.gerrit.server.notedb.ChangeUpdate update = null; com.google.gerrit.reviewdb.client.PatchSetApproval submitter; com.google.gerrit.reviewdb.client.PatchSet merged; try { db.changes().beginTransaction(c.getId()); com.google.gerrit.server.git.CodeReviewCommit commit = commits.get(c.getId()); com.google.gerrit.reviewdb.client.PatchSet.Id mergedId = commit.change().currentPatchSetId(); merged = db.patchSets().get(mergedId); c = setMergedPatchSet(c.getId(), mergedId); submitter = approvalsUtil.getSubmitter(db, commit.notes(), mergedId); com.google.gerrit.server.project.ChangeControl control = commit.getControl(); update = updateFactory.create(control, c.getLastUpdatedOn()); if (msg != null) { cmUtil.addChangeMessage(db, update, msg); } db.commit(); } finally { db.rollback(); } update.commit(); sendMergedEmail(c, submitter); indexer.index(db, c); if (submitter != null) { try { hooks.doChangeMergedHook(c, accountCache.get(submitter.getAccountId()).getAccount(), merged, db); } catch (com.google.gwtorm.server.OrmException ex) { logError(("Cannot run hook for submitted patch set " + (c.getId())), ex); } } }
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { try { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); com.google.inject.Injector modulesInjector = injector; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { modulesInjector = injector.createChildInjector(); for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { java.lang.Class<java.lang.Module> mClass = ((java.lang.Class<java.lang.Module>) (loader.loadClass(moduleName))); modules.add(modulesInjector.getInstance(mClass)); } } return modulesInjector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
@java.lang.Override public boolean equals(final java.lang.Object o) { if (o instanceof com.google.gerrit.server.patch.IntraLineDiffKey) { final com.google.gerrit.server.patch.IntraLineDiffKey k = ((com.google.gerrit.server.patch.IntraLineDiffKey) (o)); return ((aId.equals(k.aId)) && (bId.equals(k.bId))) && ((ignoreWhitespace) == (k.ignoreWhitespace)); } return false; }
private void scan() throws com.google.gerrit.server.plugins.InvalidPluginException { java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>, java.lang.Iterable<com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData>> extensions = scanner.scan(pluginName, java.util.Arrays.asList(com.google.gerrit.extensions.annotations.Export.class, com.google.gerrit.extensions.annotations.Listen.class)); for (com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData export : extensions.get(com.google.gerrit.extensions.annotations.Export.class)) { export(export); } for (com.google.gerrit.server.plugins.PluginContentScanner.ExtensionMetaData listener : extensions.get(com.google.gerrit.extensions.annotations.Listen.class)) { listen(listener); } }
@java.lang.Override public com.google.gerrit.extensions.api.projects.BranchApi branch(java.lang.String ref) { return branchApi.create(project, ref); }
private boolean can(com.google.gerrit.server.permissions.RefPermission perm) throws com.google.gerrit.server.permissions.PermissionBackendException { switch (perm) { case READ : return isVisible(); case CREATE : return canPerform(perm.permissionName().get()); case DELETE : return canDelete(); case UPDATE : return canUpdate(); case FORCE_UPDATE : return canForceUpdate(); case FORGE_AUTHOR : return canForgeAuthor(); case FORGE_COMMITTER : return canForgeCommitter(); case FORGE_SERVER : return canForgeGerritServerIdentity(); case MERGE : return canUploadMerges(); case CREATE_CHANGE : return canUpload(); case UPDATE_BY_SUBMIT : return projectControl.controlForRef(("refs/for/" + (getRefName()))).canSubmit(true); case READ_PRIVATE_CHANGES : return canViewPrivateChanges(); case READ_CONFIG : return projectControl.controlForRef(RefNames.REFS_CONFIG).canPerform(RefPermission.READ.name()); case WRITE_CONFIG : return isOwner(); case SKIP_VALIDATION : return ((((canForgeAuthor()) && (canForgeCommitter())) && (canForgeGerritServerIdentity())) && (canUploadMerges())) && (!(projectControl.getProjectState().isUseSignedOffBy())); } throw new com.google.gerrit.server.permissions.PermissionBackendException((perm + " unsupported")); }
@java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> result) { result.copyKeysIntoChildren("path"); com.google.gwt.core.client.JsArray<com.google.gerrit.client.diff.FileInfo> files = result.values(); com.google.gerrit.client.diff.FileInfo.sortFileInfoByPath(files); int index = 0; for (int i = 0; i < (files.length()); i++) { if (path.equals(files.get(i).path())) { index = i; } } setupNav('[', PatchUtil.C.previousFileHelp(), (index == 0 ? null : files.get((index - 1)))); setupNav(']', PatchUtil.C.nextFileHelp(), (index == ((files.length()) - 1) ? null : files.get((index + 1)))); }
public void addPatchSetFileNames(com.google.gerrit.server.data.PatchSetAttribute patchSetAttribute, com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet) { try { com.google.gerrit.server.diff.PatchList patchList = patchListCache.get(change, patchSet); for (com.google.gerrit.server.diff.PatchListEntry patch : patchList.getPatches()) { if ((patchSetAttribute.files) == null) { patchSetAttribute.files = new java.util.ArrayList(); } com.google.gerrit.server.data.PatchAttribute p = new com.google.gerrit.server.data.PatchAttribute(); p.file = patch.getNewName(); p.fileOld = patch.getOldName(); p.type = patch.getChangeType(); p.deletions -= patch.getDeletions(); p.insertions = patch.getInsertions(); patchSetAttribute.files.add(p); } } catch (com.google.gerrit.server.patch.PatchListObjectTooLargeException e) { com.google.gerrit.server.events.EventFactory.log.warn(("Cannot get patch list: " + (e.getMessage()))); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { com.google.gerrit.server.events.EventFactory.log.warn("Cannot get patch list", e); } }
public void addEmail(com.google.gerrit.common.data.GroupReference group) { groups.add(group); }
@java.lang.Override public void funnel(K from, com.google.common.hash.PrimitiveSink into) { try (java.io.ObjectOutputStream ser = new java.io.ObjectOutputStream(new com.google.gerrit.server.cache.h2.H2CacheImpl.SinkOutputStream(into))) { ser.writeObject(from); ser.flush(); } catch (java.io.IOException err) { throw new java.lang.RuntimeException("Cannot hash as Serializable", err); } }
@org.junit.Test public void revisionActionsTwoChangesInTopic_conflicting() throws java.lang.Exception { java.lang.String changeId = createChangeWithTopic().getChangeId(); approve(changeId); java.lang.String changeId2 = createChangeWithTopic(testRepo, "foo2", "touching b", "b.txt", "real content").getChangeId(); approve(changeId2); testRepo.reset("HEAD~2"); java.lang.String collidingChange = createChangeWithTopic(testRepo, "off_topic", "rewriting file b", "b.txt", "garbage\ngarbage\ngarbage").getChangeId(); gApi.changes().id(collidingChange).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(collidingChange).current().submit(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ActionInfo> actions = getActions(changeId); commonActionsAssertions(actions); if (isSubmitWholeTopicEnabled()) { com.google.gerrit.extensions.common.ActionInfo info = actions.get("submit"); assertThat(info.enabled).isNull(); assertThat(info.label).isEqualTo("Submit whole topic"); assertThat(info.method).isEqualTo("POST"); assertThat(info.title).isEqualTo("Problems with change(s): 2"); } else { noSubmitWholeTopicAssertions(actions, 1); } }
public com.google.gerrit.server.data.PatchSetAttribute asPatchSetAttribute(org.eclipse.jgit.revwalk.RevWalk revWalk, com.google.gerrit.reviewdb.client.PatchSet patchSet) { return asPatchSetAttribute(revWalk, patchSet); }
public static com.google.gerrit.common.data.GitWebType fromName(final java.lang.String name) { final com.google.gerrit.common.data.GitWebType type; if (((name == null) || (name.isEmpty())) || (name.equalsIgnoreCase("gitweb"))) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName("gitweb"); type.setProject("?p=${project}.git;a=summary"); type.setRevision("?p=${project}.git;a=commit;h=${commit}"); type.setBranch("?p=${project}.git;a=shortlog;h=${branch}"); type.setFileHistory("?p=${project}.git;a=history;hb=${branch};f=${file}"); } else if (name.equalsIgnoreCase("cgit")) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName("cgit"); type.setProject("${project}/summary"); type.setRevision("${project}/commit/?id=${commit}"); type.setBranch("${project}/log/?h=${branch}"); type.setFileHistory("${project}/log/${file}?h=${branch}"); } else if (name.equalsIgnoreCase("custom")) { type = new com.google.gerrit.common.data.GitWebType(); type.setLinkName("gitweb"); } else if (name.equalsIgnoreCase("disabled")) { type = null; } else { type = null; } return type; }
public com.google.gerrit.server.notedb.rebuild.SiteRebuilder.Builder setThreads(int threads) { this.threads = threads; return this; }
@java.lang.SuppressWarnings("unchecked") private boolean filterMatch(com.google.gerrit.server.CurrentUser user, java.lang.String filter) throws com.google.gerrit.server.query.QueryParseException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.query.change.ChangeQueryBuilder qb; com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> p = null; if (user == null) { qb = args.queryBuilder.create(args.anonymousUser); } else { qb = args.queryBuilder.create(user); p = qb.is_visible(); } if (filter != null) { qb.setAllowFileRegex(true); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> filterPredicate = qb.parse(filter); if (p == null) { p = filterPredicate; } else { p = com.google.gerrit.server.query.Predicate.and(filterPredicate, p); } p = args.queryRewriter.get().rewrite(p); } return p == null ? true : p.match(changeData); }
private org.apache.lucene.search.Query fieldQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) throws com.google.gerrit.server.query.QueryParseException { if ((p.getType()) == (com.google.gerrit.server.index.FieldType.INTEGER)) { return intQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.TIMESTAMP)) { return com.google.gerrit.lucene.LuceneChangeIndex.timestampQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.EXACT)) { return exactQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.PREFIX)) { return prefixQuery(p); } else if ((p.getType()) == (com.google.gerrit.server.index.FieldType.FULL_TEXT)) { return fullTextQuery(p); } else if (p instanceof com.google.gerrit.server.query.change.SortKeyPredicate) { return com.google.gerrit.lucene.LuceneChangeIndex.sortKeyQuery(((com.google.gerrit.server.query.change.SortKeyPredicate) (p))); } else { throw com.google.gerrit.lucene.LuceneChangeIndex.badFieldType(p.getType()); } }
private static boolean isSafe(org.spearce.jgit.lib.RepositoryConfig cfg, java.lang.String type, boolean def) { return cfg.getBoolean(com.google.gerrit.server.FileTypeRegistry.SECTION_MIMETYPE, type, com.google.gerrit.server.FileTypeRegistry.KEY_SAFE, def); }
public abstract java.util.List<org.eclipse.jgit.diff.Edit> edits();
public java.util.concurrent.Callable<java.lang.Void> reindexProject(final com.google.gerrit.server.index.change.ChangeIndexer indexer, final com.google.gerrit.reviewdb.client.Project.NameKey project, final com.google.gerrit.server.git.MultiProgressMonitor.Task done, final com.google.gerrit.server.git.MultiProgressMonitor.Task failed, final java.io.PrintWriter verboseWriter) { return new java.util.concurrent.Callable<java.lang.Void>() { @java.lang.Override public java.lang.Void call() throws java.lang.Exception { com.google.common.collect.ListMultimap<org.eclipse.jgit.lib.ObjectId, com.google.gerrit.server.query.change.ChangeData> byId = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { java.util.Map<java.lang.String, org.eclipse.jgit.lib.Ref> refs = repo.getRefDatabase().getRefs(com.google.gerrit.server.index.change.ALL); for (com.google.gerrit.server.notedb.ChangeNotes cn : notesFactory.scan(repo, db, project)) { org.eclipse.jgit.lib.Ref r = refs.get(cn.getChange().currentPatchSetId().toRefName()); if (r != null) { byId.put(r.getObjectId(), changeDataFactory.create(db, cn)); } } new com.google.gerrit.server.index.change.AllChangesIndexer.ProjectIndexer(indexer, byId, repo, done, failed, verboseWriter).call(); } catch (org.eclipse.jgit.errors.RepositoryNotFoundException rnfe) { com.google.gerrit.server.index.change.AllChangesIndexer.log.error(rnfe.getMessage()); } return null; } @java.lang.Override public java.lang.String toString() { return "Index all changes of project " + (project.get()); } }; }
private static java.util.List<com.google.gerrit.reviewdb.client.ChangeMessage> sortChangeMessages(java.lang.Iterable<com.google.gerrit.reviewdb.client.ChangeMessage> changeMessage) { return ChangeNotes.MESSAGE_BY_TIME.sortedCopy(changeMessage); }
@com.google.gwtorm.client.Relation(id = 27) com.google.gerrit.reviewdb.TrackingIdAccess trackingIds();
protected void refresh(final boolean isFirst) { final int rpcseq = ++(rpcSequence); script = null; comments = null; PatchUtil.DETAIL_SVC.patchScript(patchKey, idSideA, idSideB, scriptSettings, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.data.PatchScript>() { public void onSuccess(final com.google.gerrit.client.data.PatchScript result) { if ((rpcSequence) == rpcseq) { script = result; onResult(); } } @java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { super.onFailure(caught); } } }); PatchUtil.DETAIL_SVC.patchComments(patchKey, idSideA, idSideB, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.patches.CommentDetail>() { public void onSuccess(final com.google.gerrit.client.patches.CommentDetail result) { if ((rpcSequence) == rpcseq) { comments = result; onResult(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { if ((!(isNoSuchEntity(caught))) && ((rpcSequence) == rpcseq)) { super.onFailure(caught); } } }); }
@java.lang.Override protected void beforeTestServerStarts() throws java.lang.Exception { java.lang.String url = "jdbc:h2:mem:TestCiDB;DB_CLOSE_DELAY=-1"; java.util.Properties p = new java.util.Properties(); p.setProperty("driver", "org.h2.Driver"); p.setProperty("url", url); setPluginConfigString("dbType", "h2"); setPluginConfigString("dbUrl", url); com.google.gwtorm.jdbc.SimpleDataSource sds = new com.google.gwtorm.jdbc.SimpleDataSource(p); try (java.sql.Connection c = sds.getConnection();java.sql.Statement s = c.createStatement()) { s.executeUpdate(com.googlesource.gerrit.plugins.verifystatus.VerifyStatusIT.CREATE_TABLE); s.execute(com.googlesource.gerrit.plugins.verifystatus.VerifyStatusIT.DELETE_TABLE); } }
private com.google.gerrit.extensions.api.changes.AddReviewerResult putAccount(java.lang.String reviewer, com.google.gerrit.server.change.ReviewerResource rsrc, com.google.gerrit.extensions.client.ReviewerState state) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account member = rsrc.getReviewerUser().getAccount(); com.google.gerrit.server.project.ChangeControl control = rsrc.getReviewerControl(); com.google.gerrit.extensions.api.changes.AddReviewerResult result = new com.google.gerrit.extensions.api.changes.AddReviewerResult(reviewer); if (isValidReviewer(member, control)) { addReviewers(rsrc.getChangeResource(), result, com.google.common.collect.ImmutableMap.of(member.getId(), control), state); } return result; }
@java.lang.Override public void updateRepo(com.google.gerrit.server.update.RepoContext ctx) throws java.lang.Exception { commit = ctx.getRevWalk().parseCommit(commitId); ctx.getRevWalk().parseBody(commit); changeKind = changeKindCache.getChangeKind(projectControl.getProject().getNameKey(), ctx.getRevWalk(), ctx.getRepoView().getConfig(), priorCommitId, commitId); if (checkMergedInto) { java.lang.String mergedInto = com.google.gerrit.server.git.ReplaceOp.findMergedInto(ctx, dest.get(), commit); if (mergedInto != null) { mergedByPushOp = mergedByPushOpFactory.create(requestScopePropagator, patchSetId, mergedInto); } } if (updateRef) { ctx.addRefUpdate(new org.eclipse.jgit.transport.ReceiveCommand(org.eclipse.jgit.lib.ObjectId.zeroId(), commitId, patchSetId.toRefName())); } }
private org.apache.lucene.search.Query prefixQuery(com.google.gerrit.server.index.IndexPredicate<com.google.gerrit.server.query.change.ChangeData> p) { return new org.apache.lucene.search.PrefixQuery(new org.apache.lucene.index.Term(p.getField().getName(), p.getValue())); }
public static void getContent(com.google.gerrit.reviewdb.client.PatchSet.Id id, java.lang.String filename, com.google.gerrit.client.rpc.HttpCallback<com.google.gerrit.client.rpc.NativeString> cb) { com.google.gerrit.client.changes.ChangeFileApi.contentEditOrPs(id, filename).get(cb); }
private void enable(final boolean on) { showSiteHeader.setEnabled(on); useFlashClipboard.setEnabled(on); copySelfOnEmails.setEnabled(on); reversePatchSetOrder.setEnabled(on); showUsernameInReviewCategory.setEnabled(on); maximumPageSize.setEnabled(on); dateFormat.setEnabled(on); timeFormat.setEnabled(on); relativeDateInChangeTable.setEnabled(on); commentVisibilityStrategy.setEnabled(on); changeScreen.setEnabled(on); diffView.setEnabled(on); }
private java.lang.StringBuilder format() { java.lang.StringBuilder s = new java.lang.StringBuilder().append("\r").append(taskName).append(':'); int firstLength = s.length(); for (com.google.gerrit.server.git.MultiProgressMonitor.Task t : tasks) { t.format(s, ((s.length()) == firstLength)); } if ((spinnerState) != (com.google.gerrit.server.git.MultiProgressMonitor.NO_SPINNER)) { s.append(" (").append(spinnerState).append(')'); } return s; }
@org.junit.Test public void branchDelegation2() { com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.ADMIN, "refs/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, com.google.gerrit.server.project.Util.DEVS, "refs/heads/x/*"); com.google.gerrit.server.project.Util.allow(local, com.google.gerrit.server.project.OWNER, fixers, "refs/heads/x/y/*"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.OWNER, "refs/heads/x/y/*"); com.google.gerrit.server.project.ProjectControl uDev = user(local, com.google.gerrit.server.project.Util.DEVS); assertNotOwner(uDev); assertOwnerAnyRef(uDev); assertOwner("refs/heads/x/*", uDev); assertOwner("refs/heads/x/y", uDev); assertOwner("refs/heads/x/y/*", uDev); assertNotOwner("refs/*", uDev); assertNotOwner("refs/heads/master", uDev); com.google.gerrit.server.project.ProjectControl uFix = user(local, fixers); assertNotOwner(uFix); assertOwnerAnyRef(uFix); assertOwner("refs/heads/x/y/*", uFix); assertOwner("refs/heads/x/y/bar", uFix); assertNotOwner("refs/heads/x/*", uFix); assertNotOwner("refs/heads/x/y", uFix); assertNotOwner("refs/*", uFix); assertNotOwner("refs/heads/master", uFix); }
@org.junit.Test public void testByUUID() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID("d96b998f8a66ff433af50befb975d0e2bb6e0999"); com.google.gerrit.common.data.GroupReference groupReference = groupList.byUUID(uuid); assertEquals(uuid, groupReference.getUUID()); assertEquals("Non-Interactive Users", groupReference.getName()); }
public java.util.List<java.nio.file.Path> getAllBasePaths() { java.util.List<java.nio.file.Path> basePaths = new java.util.ArrayList<>(); for (java.lang.String subSection : cfg.getSubsections(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME)) { java.lang.String basePath = cfg.getString(com.google.gerrit.server.config.RepositoryConfig.SECTION_NAME, subSection, com.google.gerrit.server.config.RepositoryConfig.BASE_PATH_NAME); if (basePath != null) { basePaths.add(java.nio.file.Paths.get(basePath)); } } return basePaths; }
@java.lang.Override public java.lang.String toString() { if ((runnable) instanceof com.google.common.util.concurrent.ListenableFutureTask<?>) { java.lang.String errorMessage; try { for (java.lang.reflect.Field field : com.google.common.util.concurrent.ListenableFutureTask.class.getSuperclass().getDeclaredFields()) { if (field.getType().isAssignableFrom(java.util.concurrent.Callable.class)) { field.setAccessible(true); return ((java.util.concurrent.Callable<?>) (field.get(runnable))).toString(); } } errorMessage = "Cannot find wrapped Callable field"; } catch (java.lang.SecurityException | java.lang.IllegalArgumentException | java.lang.IllegalAccessException e) { errorMessage = "Cannot call toString on Callable field"; } com.google.gerrit.server.git.WorkQueue.log.debug("Cannot get a proper name for ListenableFutureTask: {}", errorMessage); } return runnable.toString(); }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { new com.google.gerrit.client.ui.CommentedActionDialog<com.google.gerrit.common.data.ChangeDetail>(Util.C.titleEditCommitMessage(), Util.C.headingEditCommitMessage(), new com.google.gerrit.client.changes.ChangeDetailCache.IgnoreErrorCallback() {}) { { message.setCharacterWidth(80); message.setVisibleLines(20); message.setText(commitMessage); } @java.lang.Override public void onSend() { Util.MANAGE_SVC.createNewPatchSet(patchSetId, getMessageText(), createCallback()); } }.center(); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse res) throws java.io.IOException, javax.servlet.ServletException { while (itr.hasNext()) { com.google.gerrit.httpd.AllRequestFilter filter = itr.next(); if ((initializedFilters.contains(filter)) || (initFilterIfNeeded(filter))) { filter.doFilter(req, res, this); return; } } last.doFilter(req, res); }
@org.junit.Test public void systemGroupsCreated_ssh() throws com.jcraft.jsch.JSchException, java.io.IOException { com.google.gerrit.acceptance.SshSession session = new com.google.gerrit.acceptance.SshSession(server, admin); java.lang.String result = session.exec("gerrit ls-groups"); assertTrue(result.contains("Administrators")); assertTrue(result.contains("Anonymous Users")); assertTrue(result.contains("Change Owner")); assertTrue(result.contains("Non-Interactive Users")); assertTrue(result.contains("Project Owners")); assertTrue(result.contains("Registered Users")); session.close(); }
@java.lang.Override public boolean match(final com.google.gerrit.server.query.change.ChangeData object) throws com.google.gwtorm.server.OrmException { java.lang.String id = getValue().toLowerCase(); for (com.google.gerrit.reviewdb.client.PatchSet p : object.patchSets()) { if (((p.getRevision()) != null) && (java.util.Objects.equals(p.getRevision().get(), id))) { return true; } } return false; }
@org.junit.Test public void toggleWorkInProgressState() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); java.lang.String changeId = r.getChangeId(); gApi.changes().id(changeId).setWorkInProgress("Needs some refactoring"); com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains("Needs some refactoring"); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_WIP); gApi.changes().id(changeId).setReadyForReview("PTAL"); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).contains("PTAL"); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_READY); gApi.changes().id(changeId).setWorkInProgress(); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isTrue(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).isEqualTo("Set Work In Progress"); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_WIP); gApi.changes().id(changeId).setReadyForReview(); info = gApi.changes().id(changeId).get(); assertThat(info.workInProgress).isFalse(); assertThat(com.google.common.collect.Iterables.getLast(info.messages).message).isEqualTo("Set Ready For Review"); assertThat(com.google.common.collect.Iterables.getLast(info.messages).tag).contains(ChangeMessagesUtil.TAG_SET_READY); }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock); }
void setLineLength(int length) { cm.extras().lineLength((Patch.COMMIT_MSG.equals(path) ? 72 : length)); }
public boolean isEnabledForRef(com.google.gerrit.server.IdentifiedUser user, com.google.gerrit.reviewdb.client.Project.NameKey projectName, java.lang.String refName, java.lang.String validatorOp) { com.google.gerrit.server.config.PluginConfig conf = configFactory.get(projectName); return (((((conf != null) && (isValidConfig(conf, projectName))) && (activeForRef(conf, refName))) && (activeForEmail(conf, user.getAccount().getPreferredEmail()))) && (activeForProject(conf, projectName.get()))) && ((((!(hasCriteria(conf, "skipGroup"))) || (!(canSkipValidation(conf, validatorOp)))) || (!(canSkipRef(conf, refName)))) || (!(canSkipGroup(conf, user)))); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutActive.Input input) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException("account not found"); } if (a.isActive()) { return com.google.gerrit.extensions.restapi.Response.ok(""); } a.setActive(true); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.gerrit.extensions.restapi.Response.created(""); }
private net.codemirror.lib.CodeMirror.RenderLineHandler resizeEmptyLine(final com.google.gerrit.common.changes.Side side) { return new net.codemirror.lib.CodeMirror.RenderLineHandler() { @java.lang.Override public void handle(final net.codemirror.lib.CodeMirror instance, final net.codemirror.lib.CodeMirror.LineHandle handle, final com.google.gwt.dom.client.Element element) { if (linePaddingWidgetMap.containsKey(handle)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { com.google.gerrit.client.diff.PaddingManager.LinePaddingWidgetWrapper wrapper = linePaddingWidgetMap.get(handle); int myLineHeight = element.getOffsetHeight(); com.google.gwt.dom.client.Element otherPadding = wrapper.getElement(); if (!(wrapper.isCommon())) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, myLineHeight); } else { lineElementMap.put(handle, element); int otherLine = mapper.lineOnOther(side, instance.getLineNumber(handle)).getLine(); net.codemirror.lib.CodeMirror.LineHandle other = otherCm(instance).getLineHandle(otherLine); if (lineElementMap.containsKey(other)) { com.google.gwt.dom.client.Element otherElement = lineElementMap.get(other); com.google.gwt.dom.client.Element myPadding = linePaddingWidgetMap.get(other).getElement(); int delta = myLineHeight - (otherElement.getOffsetHeight()); if (delta >= 0) { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, delta); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, 0); } else { com.google.gerrit.client.diff.SideBySide2.setHeightInPx(otherPadding, 0); com.google.gerrit.client.diff.SideBySide2.setHeightInPx(myPadding, (-delta)); } } } } }); } } }; }
@org.junit.After public void cleanUp() throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(allUsers)) { if ((git.exactRef(RefNames.REFS_USERS_DEFAULT)) != null) { org.eclipse.jgit.lib.RefUpdate u = git.updateRef(RefNames.REFS_USERS_DEFAULT); u.setForceUpdate(true); assertThat(u.delete()).isEqualTo(RefUpdate.Result.FORCED); } } accountCache.evictAll(); }
void deleteChecked() { final java.util.HashSet<java.lang.Integer> sequenceNumbers = new java.util.HashSet<java.lang.Integer>(); for (int row = 1; row < (table.getRowCount()); row++) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (((com.google.gwt.user.client.ui.CheckBox) (table.getWidget(row, 1))).getValue())) { sequenceNumbers.add(k.seq()); } } if (sequenceNumbers.isEmpty()) { updateDeleteButton(); } else { com.google.gerrit.client.account.AccountApi.deleteSshKeys("self", sequenceNumbers, new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.VoidResult>() { public void onSuccess(com.google.gerrit.client.VoidResult result) { for (int row = 1; row < (table.getRowCount());) { final com.google.gerrit.client.account.SshKeyInfo k = getRowItem(row); if ((k != null) && (sequenceNumbers.contains(k.seq()))) { table.removeRow(row); } else { row++; } } if ((table.getRowCount()) == 1) { display(java.util.Collections.<com.google.gerrit.client.account.SshKeyInfo>emptyList()); } else { updateDeleteButton(); } } @java.lang.Override public void onFailure(java.lang.Throwable caught) { refreshSshKeys(); updateDeleteButton(); super.onFailure(caught); } }); } }
private void preMerge(final com.google.gerrit.server.git.SubmitStrategy strategy, final java.util.List<com.google.gerrit.server.git.CodeReviewCommit> toMerge) throws com.google.gerrit.server.git.MergeException { mergeTip = strategy.run(branchTip, toMerge); refLogIdent = strategy.getRefLogIdent(); commits.putAll(strategy.getNewCommits()); }
void init(com.google.gerrit.client.diff.PreferencesAction pa, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links) { prefsAction = pa; prefsAction.setPartner(preferences); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } }
public void assertCanDelete(com.google.gerrit.server.project.ProjectResource rsrc, com.googlesource.gerrit.plugins.deleteproject.DeleteProject.Input input) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gwtorm.server.OrmException { try { pcHandler.assertCanDelete(rsrc); dbHandler.assertCanDelete(rsrc.getControl().getProject()); fsHandler.assertCanDelete(rsrc, (input == null ? false : input.preserve)); } catch (com.googlesource.gerrit.plugins.deleteproject.CannotDeleteProjectException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
public void fromRange(com.google.gerrit.extensions.common.Comment.Range r) { range = (r == null) ? null : new com.google.gerrit.reviewdb.client.CommentRange(range.startLine, range.startCharacter, range.endLine, range.endCharacter); }
@java.lang.Override protected void configure() { install(com.google.gerrit.server.schema.SchemaVersionCheck.module()); bind(com.google.gerrit.common.data.ApprovalTypes.class).toProvider(com.google.gerrit.server.config.ApprovalTypesProvider.class).in(Scopes.SINGLETON); bind(java.lang.String.class).annotatedWith(com.google.gerrit.server.config.CanonicalWebUrl.class).toProvider(com.google.gerrit.server.config.CanonicalWebUrlProvider.class).in(Scopes.SINGLETON); install(com.google.gerrit.server.account.AccountCacheImpl.module()); install(com.google.gerrit.server.account.GroupCacheImpl.module()); install(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); install(new com.google.gerrit.server.config.FactoryModule() { @java.lang.Override protected void configure() { factory(CreateCodeReviewNotes.Factory.class); factory(NotesBranchUtil.Factory.class); } }); install(new com.google.gerrit.lifecycle.LifecycleModule() { @java.lang.Override protected void configure() { listener().to(LocalDiskRepositoryManager.Lifecycle.class); } }); }
public com.google.gitiles.GitilesView.Builder setPathPart(java.lang.String path) { switch (type) { case PATH : case DIFF : checkState((path != null), "cannot set null path on %s view", type); break; case DESCRIBE : case REFS : case LOG : break; default : checkState((path == null), "cannot set path on %s view", type); break; } this.path = (path != null) ? com.google.gitiles.GitilesView.maybeTrimLeadingAndTrailingSlash(path) : null; return this; }
private void render(com.google.gerrit.client.diff.DiffInfo.Region region, java.lang.String diffColor) { int startA = lineMapper.getLineA(); int startB = lineMapper.getLineB(); com.google.gwt.core.client.JsArrayString a = region.a(); com.google.gwt.core.client.JsArrayString b = region.b(); int aLen = (a != null) ? a.length() : 0; int bLen = (b != null) ? b.length() : 0; java.lang.String color = ((a == null) || (b == null)) ? diffColor : SideBySideTable.style.intralineBg(); colorLines(cmA, color, startA, aLen); colorLines(cmB, color, startB, bLen); markEdit(cmA, startA, a, region.editA()); markEdit(cmB, startB, b, region.editB()); addPadding(cmA, ((startA + aLen) - 1), (bLen - aLen)); addPadding(cmB, ((startB + bLen) - 1), (aLen - bLen)); addGutterTag(region, startA, startB); lineMapper.appendReplace(aLen, bLen); int endA = (lineMapper.getLineA()) - 1; int endB = (lineMapper.getLineB()) - 1; if (aLen > 0) { addDiffChunk(cmB, endB, endA, aLen, (bLen > 0)); } if (bLen > 0) { addDiffChunk(cmA, endA, endB, bLen, (aLen > 0)); } }
private static void checkSameGroup(com.google.gerrit.common.data.GroupDescription.Internal group, com.google.gerrit.server.account.GroupControl groupControl) { checkState(group.equals(groupControl.getGroup()), "Specified group and groupControl do not match"); }
@java.lang.Override protected void onPostExecute(com.google.reviewit.ReviewChangesFragment.ChangeListData changeListData) { super.onPostExecute(changeListData); if ((getActivity()) == null) { return; } getActivity().invalidateOptionsMenu(); setInvisible(progress); setGone(initialProgress, reloadButton); if ((changeListData.error) != null) { statusText.setText(changeListData.error); return; } if (!(changeListData.changeList.isEmpty())) { setGone(statusText); for (com.google.reviewit.app.Change change : changeListData.changeList) { com.google.reviewit.widget.ChangeEntry changeEntry = new com.google.reviewit.widget.ChangeEntry(getContext()); changeEntry.init(getApp(), change); changeList.addView(changeEntry); addSeparator(changeList); } } else { statusText.setText(getString(R.string.no_changes_match)); } }
private static org.eclipse.jgit.lfs.server.s3.S3Config getS3Config(com.google.gerrit.server.config.PluginConfigFactory configFactory, java.lang.String pluginName) { org.eclipse.jgit.lib.Config config = configFactory.getGlobalPluginConfig(pluginName); java.lang.String section = LfsBackend.S3.name(); java.lang.String region = config.getString(section, null, "region"); java.lang.String bucket = config.getString(section, null, "bucket"); java.lang.String storageClass = com.google.common.base.MoreObjects.firstNonNull(config.getString(section, null, "storageClass"), "REDUCED_REDUNDANCY"); int expirationSeconds = config.getInt(section, null, "expirationSeconds", 60); boolean disableSslVerify = config.getBoolean(section, null, "disableSslVerify", false); com.google.gerrit.server.config.PluginConfig pluginCfg = configFactory.getFromGerritConfig(pluginName); java.lang.String accessKey = pluginCfg.getString("s3AccessKey", null); java.lang.String secretKey = pluginCfg.getString("s3SecretKey", null); return new org.eclipse.jgit.lfs.server.s3.S3Config(region, bucket, storageClass, accessKey, secretKey, expirationSeconds, disableSslVerify); }
private java.lang.String problemsForSubmittingChanges(java.util.List<com.google.gerrit.server.query.change.ChangeData> changes, com.google.gerrit.server.IdentifiedUser identifiedUser) { for (com.google.gerrit.server.query.change.ChangeData c : changes) { try { com.google.gerrit.server.project.ChangeControl changeControl = c.changeControl().forUser(identifiedUser); if (!(changeControl.isVisible(dbProvider.get()))) { return com.google.gerrit.server.change.Submit.BLOCKED_HIDDEN_TOPIC_TOOLTIP; } if (!(changeControl.canSubmit())) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } checkSubmitRule(c, c.currentPatchSet(), false); } catch (com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.change.Submit.log.error("Error checking if change is submittable", e); throw new com.google.gwtorm.server.OrmRuntimeException(e); } catch (com.google.gerrit.extensions.restapi.ResourceConflictException e) { return com.google.gerrit.server.change.Submit.BLOCKED_TOPIC_TOOLTIP; } } return null; }
protected void displayPopup() { popingUp = true; if (firstPopupLoad) { populateProjects(); } else { popup.setPopupPositionAndShow(popupPosition); com.google.gwtexpui.globalkey.client.GlobalKey.dialog(popup); com.google.gwtexpui.globalkey.client.GlobalKey.addApplication(popup, new com.google.gwtexpui.globalkey.client.HidePopupPanelCommand(0, com.google.gwt.event.dom.client.KeyCodes.KEY_ESCAPE, popup)); projectsTab.setRegisterKeys(true); projectsTab.finishDisplay(); if ((regWindowResize) == null) { regWindowResize = com.google.gwt.user.client.Window.addResizeHandler(this); } popingUp = false; } }
java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, @javax.annotation.Nullable com.google.gerrit.server.project.ProjectControl project);
@java.lang.Override protected void service(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException, javax.servlet.ServletException { com.google.gerrit.httpd.RestApiServlet.noCache(res); try { checkRequiresCapability(); super.service(req, res); } catch (com.google.gerrit.httpd.RestApiServlet.RequireCapabilityException err) { res.setStatus(HttpServletResponse.SC_FORBIDDEN); com.google.gerrit.httpd.RestApiServlet.noCache(res); com.google.gerrit.httpd.RestApiServlet.sendText(req, res, err.getMessage()); } catch (java.lang.Error err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } catch (java.lang.RuntimeException err) { com.google.gerrit.httpd.RestApiServlet.handleError(err, req, res); } }
@java.lang.Override public com.google.gerrit.server.project.BranchResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.lang.String branchName = id.get(); if ((!(branchName.startsWith(Constants.R_REFS))) && (!(branchName.equals(Constants.HEAD)))) { branchName = (org.eclipse.jgit.lib.Constants.R_HEADS) + branchName; } java.util.List<com.google.gerrit.server.project.ListBranches.BranchInfo> branches = list.get().apply(parent); for (com.google.gerrit.server.project.ListBranches.BranchInfo b : branches) { if (branchName.equals(b.ref)) { return new com.google.gerrit.server.project.BranchResource(parent.getControl(), b); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EmailInfo> apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.api.accounts.EmailInput input) throws com.google.gerrit.common.errors.EmailException, com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (((self.get()) != (rsrc.getUser())) || (input.noConfirmation)) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } if (input == null) { input = new com.google.gerrit.extensions.api.accounts.EmailInput(); } if (!(com.google.gerrit.server.mail.send.OutgoingEmailValidator.isValid(email))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("invalid email address"); } if (!(realm.allowsEdit(AccountFieldName.REGISTER_NEW_EMAIL))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("realm does not allow adding emails"); } return apply(rsrc.getUser(), input); }
@java.lang.Override protected void doGet(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse res) throws java.io.IOException { if ((ssoUrl) != null) { java.lang.String token = com.google.gerrit.httpd.auth.openid.LoginForm.getToken(req); com.google.gerrit.httpd.auth.openid.SignInMode mode; if (PageLinks.REGISTER.equals(token)) { mode = SignInMode.REGISTER; token = com.google.gerrit.common.PageLinks.MINE; } else { mode = SignInMode.SIGN_IN; } discover(req, res, false, ssoUrl, false, token, mode); } else { java.lang.String id = com.google.common.base.Strings.nullToEmpty(req.getParameter("id")).trim(); if (!(id.isEmpty())) { doPost(req, res); } else { boolean link = (req.getParameter("link")) != null; sendForm(req, res, link, null); } } }
private com.google.gerrit.extensions.common.SubmitType getSubmitType(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { try { final com.google.gerrit.common.data.SubmitTypeRecord r = args.changeControlGenericFactory.controlFor(change, args.userFactory.create(change.getOwner())).getSubmitTypeRecord(db.get(), cd.currentPatchSet(), cd); if ((r.status) != (SubmitTypeRecord.Status.OK)) { return null; } return r.type; } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return null; } }
@java.lang.Override public final void updateRepo(com.google.gerrit.server.git.BatchUpdate.RepoContext ctx) throws java.lang.Exception { logDebug("{}#updateRepo for change {}", getClass().getSimpleName(), toMerge.change().getId()); com.google.gerrit.server.git.CodeReviewCommit tipBefore = args.mergeTip.getCurrentTip(); alreadyMerged = getAlreadyMergedCommit(ctx); if ((alreadyMerged) == null) { updateRepoImpl(ctx); } else { logDebug("Already merged as {}", alreadyMerged.name()); } com.google.gerrit.server.git.CodeReviewCommit tipAfter = args.mergeTip.getCurrentTip(); if (java.util.Objects.equals(tipBefore, tipAfter)) { logDebug("Did not move tip", getClass().getSimpleName()); return; } else if (tipAfter == null) { logDebug("No merge tip, no update to perform"); return; } logDebug("Moved tip from {} to {}", tipBefore, tipAfter); checkProjectConfig(ctx, tipAfter); command = new org.eclipse.jgit.transport.ReceiveCommand(firstNonNull(tipBefore, org.eclipse.jgit.lib.ObjectId.zeroId()), tipAfter, getDest().get()); ctx.addRefUpdate(command); }
private java.lang.String getLatestRemoteDiff() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(project);org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.ObjectId oldTreeId = repo.resolve("refs/heads/master~1^{tree}"); org.eclipse.jgit.lib.ObjectId newTreeId = repo.resolve("refs/heads/master^{tree}"); return getLatestDiff(repo, oldTreeId, newTreeId); } }
@java.lang.Override public void afterUpdateChanges() throws com.google.gerrit.extensions.restapi.ResourceConflictException { commits.maybeFail("Error updating status"); }
public static com.google.gerrit.client.account.AccountInfo asInfo(com.google.gerrit.common.data.AccountInfo acct) { if (acct == null) { return com.google.gerrit.client.account.AccountInfo.create(0, null, null, null); } return com.google.gerrit.client.account.AccountInfo.create(((acct.getId()) != null ? acct.getId().get() : 0), acct.getFullName(), acct.getPreferredEmail(), acct.getUsername()); }
static com.google.gerrit.client.account.AccountApi.GpgKeysInput add(java.lang.String key) { return com.google.gerrit.client.account.AccountApi.GpgKeysInput.createAdd(com.google.gerrit.client.rpc.Natives.arrayOf(key)); }
public java.util.Comparator<java.lang.String> nameComparator() { final java.util.Map<java.lang.String, java.lang.Integer> positions = positions(); return new java.util.Comparator<java.lang.String>() { @java.lang.Override public int compare(java.lang.String left, java.lang.String right) { int lp = position(left); int rp = position(right); int cmp = lp - rp; if (cmp == 0) { cmp = left.compareTo(right); } return cmp; } private int position(java.lang.String name) { java.lang.Integer p = positions.get(name); return p != null ? p : positions.size(); } }; }
@org.junit.Test public void rescheduleOnRecoverableException() throws java.io.IOException { when(session.post(eq(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL), eq(content))).thenThrow(java.io.IOException.class); task.run(); verify(executor, times(1)).schedule(task, com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL, java.util.concurrent.TimeUnit.MILLISECONDS); }
public com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy getCommentVisibilityStrategy() { if ((commentVisibilityStrategy) == null) { return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.EXPAND_MOST_RECENT; } return com.google.gerrit.reviewdb.client.AccountGeneralPreferences.CommentVisibilityStrategy.valueOf(commentVisibilityStrategy); }
public static void deleteEdit(@com.google.gerrit.common.Nullable java.lang.String project, int id, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gerrit.client.changes.ChangeApi.edit(project, id).delete(cb); }
private static java.lang.String recipientMapToString(java.util.Map<com.google.gerrit.acceptance.RecipientType, java.util.List<java.lang.String>> recipients, java.util.function.Function<java.lang.String, java.lang.String> emailToName) { java.lang.StringBuilder buf = new java.lang.StringBuilder(); buf.append('['); for (com.google.gerrit.acceptance.RecipientType type : com.google.common.collect.ImmutableList.of(com.google.gerrit.acceptance.TO, com.google.gerrit.acceptance.CC, com.google.gerrit.acceptance.BCC)) { buf.append('\n'); buf.append(type); buf.append(':'); java.lang.String delim = " "; for (java.lang.String r : recipients.get(type)) { buf.append(delim); buf.append(emailToName.apply(r)); delim = ", "; } } buf.append("\n]"); return buf.toString(); }
static java.lang.String computeCanonicalPath(java.lang.String canonicalURL) throws java.net.URISyntaxException { if (com.google.common.base.Strings.isNullOrEmpty(canonicalURL)) { return ""; } java.net.URI uri = new java.net.URI(canonicalURL); return uri.getPath().replaceAll("/$", ""); }
private com.google.gerrit.server.events.DependencyAttribute newNeededBy(com.google.gerrit.reviewdb.client.Change c, com.google.gerrit.reviewdb.client.PatchSet ps) { return newDependencyAttribute(c, ps); }
private void parseCommands(final java.util.Collection<org.eclipse.jgit.transport.ReceiveCommand> commands) { for (final org.eclipse.jgit.transport.ReceiveCommand cmd : commands) { if ((cmd.getResult()) != (org.eclipse.jgit.transport.ReceiveCommand.Result.NOT_ATTEMPTED)) { continue; } if ((!(org.eclipse.jgit.lib.Repository.isValidRefName(cmd.getRefName()))) || (cmd.getRefName().contains("//"))) { com.google.gerrit.server.git.ReceiveCommits.reject(cmd, "not valid ref"); continue; } if (cmd.getRefName().startsWith(com.google.gerrit.server.git.ReceiveCommits.NEW_CHANGE)) { parseNewChangeCommand(cmd); continue; } final java.util.regex.Matcher m = com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()); if (m.matches()) { final com.google.gerrit.reviewdb.Change.Id changeId = Change.Id.parse(m.group(1)); parseReplaceCommand(cmd, changeId); continue; } switch (cmd.getType()) { case CREATE : parseCreate(cmd); continue; case UPDATE : parseUpdate(cmd); continue; case DELETE : parseDelete(cmd); continue; case UPDATE_NONFASTFORWARD : parseRewind(cmd); continue; } com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.common.annotations.VisibleForTesting java.util.Map<java.lang.String, ?> buildData(javax.servlet.http.HttpServletRequest req) throws java.io.IOException { com.google.gitiles.RepositoryDescription desc = accessFactory.forRequest(req).getRepositoryDescription(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(org.eclipse.jgit.http.server.ServletUtils.getRepository(req)); java.util.List<java.util.Map<java.lang.String, java.lang.String>> tags; try { tags = getRefs(req, Constants.R_TAGS, tagComparator(walk)); } finally { walk.release(); } return com.google.common.collect.ImmutableMap.of("cloneUrl", desc.cloneUrl, "description", com.google.common.base.Strings.nullToEmpty(desc.description), "branches", getRefs(req, Constants.R_HEADS, com.google.common.collect.Ordering.from(RefComparator.INSTANCE)), "tags", tags); }
@java.lang.SuppressWarnings("unchecked") public com.google.gerrit.server.DynamicOptions.DynamicBean getDynamicBean(java.lang.Object bean, com.google.gerrit.server.DynamicOptions.DynamicBean dynamicBean) { java.lang.ClassLoader coreCl = getClass().getClassLoader(); java.lang.ClassLoader beanCl = bean.getClass().getClassLoader(); java.lang.ClassLoader loader = beanCl; if (beanCl != coreCl) { java.lang.ClassLoader dynamicBeanCl = dynamicBean.getClass().getClassLoader(); if (beanCl != dynamicBeanCl) { loader = new com.google.gerrit.server.plugins.DelegatingClassLoader(beanCl, dynamicBeanCl); } } java.lang.String className = null; if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ClassNameProvider) { className = ((com.google.gerrit.server.DynamicOptions.ClassNameProvider) (dynamicBean)).getClassName(); } else if (loader != beanCl) { className = dynamicBean.getClass().getCanonicalName(); } if (className != null) { java.util.List<java.lang.Module> modules = new java.util.ArrayList<>(); try { if (dynamicBean instanceof com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) { for (java.lang.String moduleName : ((com.google.gerrit.server.DynamicOptions.ModulesClassNamesProvider) (dynamicBean)).getModulesClassNames()) { try { java.lang.Class<?> moduleClass = loader.loadClass(moduleName); modules.add(((java.lang.Module) (moduleClass.getConstructor().newInstance()))); } catch (java.lang.NoSuchMethodException | java.lang.InstantiationException | java.lang.IllegalAccessException | java.lang.reflect.InvocationTargetException e) { com.google.gerrit.server.DynamicOptions.log.error(("ERROR loading/instantiating module " + moduleName), e); } } } return injector.createChildInjector(modules).getInstance(((java.lang.Class<com.google.gerrit.server.DynamicOptions.DynamicBean>) (loader.loadClass(className)))); } catch (java.lang.ClassNotFoundException e) { throw new java.lang.RuntimeException(e); } } return dynamicBean; }
private void showCLA(com.google.gerrit.client.info.AgreementInfo cla) { current = cla; java.lang.String url = cla.url(); if ((url != null) && ((url.length()) > 0)) { agreementGroup.setVisible(true); agreementHtml.setText(Gerrit.C.rpcStatusWorking()); if ((!(url.startsWith("http:"))) && (!(url.startsWith("https:")))) { url = (com.google.gwt.core.client.GWT.getHostPageBaseURL()) + url; } final com.google.gwt.http.client.RequestBuilder rb = new com.google.gwt.http.client.RequestBuilder(com.google.gwt.http.client.RequestBuilder.GET, url); rb.setCallback(new com.google.gwt.http.client.RequestCallback() { @java.lang.Override public void onError(com.google.gwt.http.client.Request request, java.lang.Throwable exception) { new com.google.gerrit.client.ErrorDialog(exception).center(); } @java.lang.Override public void onResponseReceived(com.google.gwt.http.client.Request request, com.google.gwt.http.client.Response response) { final java.lang.String ct = response.getHeader("Content-Type"); if ((((response.getStatusCode()) == 200) && (ct != null)) && ((ct.equals("text/html")) || (ct.startsWith("text/html;")))) { agreementHtml.setHTML(response.getText()); } else { new com.google.gerrit.client.ErrorDialog(response.getStatusText()).center(); } } }); try { rb.send(); } catch (com.google.gwt.http.client.RequestException e) { new com.google.gerrit.client.ErrorDialog(e).show(); } } else { agreementGroup.setVisible(false); } finalGroup.setVisible(((cla.autoVerifyGroup()) != null)); yesIAgreeBox.setText(""); submit.setEnabled(false); }
private static java.lang.String getAmbiguousNameMessage(java.lang.String groupName, com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUuid, com.google.gerrit.reviewdb.client.AccountGroup.UUID systemGroupUuid) { return java.lang.String.format(("The configured name '%s' for system group '%s' is ambiguous" + ((" with the name '%s' of existing group '%s'." + " Please remove/change the value for groups.%s.name in") + " gerrit.config.")), groupName, systemGroupUuid.get(), groupName, groupUuid.get(), systemGroupUuid.get()); }
@org.junit.Test public void customLabelMaxWithBlock_NegativeVoteBlock() throws java.lang.Exception { saveLabelConfig(); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); revision(r).review(new com.google.gerrit.extensions.api.changes.ReviewInput().label(Q.getName(), (-1))); ChangeInfo c = get(r.getChangeId()); com.google.gerrit.extensions.common.LabelInfo q = c.labels.get(Q.getName()); assertThat(q.all).hasSize(1); assertThat(q.disliked).isNull(); assertThat(q.rejected).isNotNull(); assertThat(q.blocking).isTrue(); }
@org.junit.Test public void groupNameNoteHasDifferentNameAndUUID() throws java.lang.Exception { updateGroupNamesRef("g-1", "[group]\n\tuuid = uuid-2\n\tname = g-2\n"); java.util.List<com.google.gerrit.extensions.api.config.ConsistencyCheckInfo.ConsistencyProblemInfo> problems = com.google.gerrit.server.group.db.GroupsNoteDbConsistencyChecker.checkWithGroupNameNotes(allUsersRepo, "g-1", new com.google.gerrit.reviewdb.client.AccountGroup.UUID("uuid-1")); assertThat(problems).containsExactly(warning(("group with name 'g-1' has UUID 'uuid-1' in 'group.config' but 'uuid-2' in group " + "name notes")), warning("group note of name 'g-1' claims to represent name of 'g-2'")).inOrder(); }
@com.google.gwtorm.client.Query com.google.gwtorm.client.ResultSet<com.google.gerrit.reviewdb.ActiveSession> all() throws com.google.gwtorm.client.OrmException;
private void ensureRangeIsValid(java.lang.String commentPath, com.google.gerrit.extensions.client.Comment.Range range) throws com.google.gerrit.extensions.restapi.BadRequestException { if (range == null) { return; } if (!(range.isValid())) { throw new com.google.gerrit.extensions.restapi.BadRequestException(java.lang.String.format("Range (%s:%s - %s:%s) is not valid for the comment on %s", range.startLine, range.startCharacter, range.endLine, range.endCharacter, commentPath)); } }
public org.parboiled.Rule cols() { org.parboiled.support.StringBuilderVar body = new org.parboiled.support.StringBuilderVar(); return NodeSequence(colsTag(), Newline(), oneOrMore(testNot(colsTag(), Newline()), Line(body)), colsTag(), Newline(), push(new com.google.gitiles.doc.ColsNode(parse(body)))); }
private java.util.Set<java.lang.String> extractTags(java.util.Set<java.lang.String> input) throws java.lang.IllegalArgumentException { if (input == null) { return java.util.Collections.emptySet(); } else { java.util.HashSet<java.lang.String> result = new java.util.HashSet<>(); for (java.lang.String hashtag : input) { if (hashtag.contains(",")) { throw new java.lang.IllegalArgumentException("Hashtags may not contain commas"); } if (!(hashtag.trim().isEmpty())) { result.add(hashtag.trim()); } } return result; } }
private java.util.Map<java.lang.String, java.util.List<com.google.gerrit.common.data.PermissionRule>> permissions() { if ((permissions) == null) { permissions = indexPermissions(); } return permissions; }
public com.google.gerrit.extensions.common.RevisionInfo revisionInfo(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.PatchSet ps) throws com.google.gerrit.server.GpgException, com.google.gerrit.server.patch.PatchListNotAvailableException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.query.change.ChangeData cd = changeDataFactory.create(db.get(), project, ps.getId().getParentKey()); com.google.gerrit.server.project.ChangeControl ctl = cd.changeControl(); return changeJson.getRevisionInfo(ctl, ps); }
private static java.lang.String getString(org.eclipse.jgit.lib.Config cfg, java.lang.String section, java.lang.String subSection, java.lang.String name, java.lang.String defaultValue) { java.lang.String value = cfg.getString(section, subSection, name); return value == null ? defaultValue : value; }
@java.lang.Override public void onFailure(final java.lang.Throwable caught) { if ((rpcSequence) == rpcseq) { super.onFailure(caught); } }
private boolean canReadRef(java.lang.String ref) { try { permissionBackend.user(user).project(projectCtl.getProject().getNameKey()).ref(ref).check(RefPermission.READ); } catch (com.google.gerrit.extensions.restapi.AuthException e) { return false; } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { com.google.gerrit.server.git.VisibleRefFilter.log.error("unable to check permissions", e); return false; } return true; }
private <T> com.google.gerrit.client.rpc.HttpCallback<T> handleAdd(com.google.gerrit.client.rpc.HttpCallback<T> cb) { if (failed) { cb.onFailure(failedThrowable); return new com.google.gerrit.client.rpc.HttpCallback<T>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.HttpResponse<T> result) { } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } }; } com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl<T> w = new com.google.gerrit.client.rpc.CallbackGroup.HttpCallbackImpl(cb); callbacks.add(w); remaining.add(w); return w; }
void adjustGutters(net.codemirror.lib.CodeMirror cmB) { this.cmB = cmB; com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { for (com.google.gerrit.client.diff.SidePanel.GutterWrapper info : gutters) { adjustGutter(info); } } }); }
public boolean isReviewer(com.google.gerrit.reviewdb.server.ReviewDb db, @com.google.gerrit.common.Nullable com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (getCurrentUser().isIdentifiedUser()) { java.util.Collection<com.google.gerrit.reviewdb.client.Account.Id> results = changeData(db, cd).reviewers().values(); com.google.gerrit.server.IdentifiedUser user = ((com.google.gerrit.server.IdentifiedUser) (getCurrentUser())); return results.contains(user.getAccountId()); } return false; }
@java.lang.Override public Iterable<java.lang.String> get(com.google.gerrit.server.account.AccountState input, com.google.gerrit.server.index.account.FillArgs args) { return com.google.common.collect.Iterables.transform(input.getExternalIds(), ( id) -> id.key().get()); }
public com.google.gerrit.common.data.GroupList get() throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.client.OrmException { final java.lang.Iterable<com.google.gerrit.reviewdb.AccountGroup> groups = groupCache.all(); return createGroupList(filterGroups(groups)); }
@java.lang.Override public int compare(com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> a, com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> b) { int ai = (a instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int bi = (b instanceof com.google.gerrit.server.query.change.ChangeDataSource) ? 0 : 1; int cmp = ai - bi; if (cmp == 0) { cmp = (a.getCost()) - (b.getCost()); } if (((cmp == 0) && (a instanceof com.google.gerrit.server.query.change.ChangeDataSource)) && (b instanceof com.google.gerrit.server.query.change.ChangeDataSource)) { com.google.gerrit.server.query.change.ChangeDataSource as = ((com.google.gerrit.server.query.change.ChangeDataSource) (a)); com.google.gerrit.server.query.change.ChangeDataSource bs = ((com.google.gerrit.server.query.change.ChangeDataSource) (b)); cmp = (as.getCardinality()) - (bs.getCardinality()); if (cmp == 0) { cmp = (as.hasChange() ? 0 : 1) - (bs.hasChange() ? 0 : 1); } } return cmp; }
public boolean isOwner() { com.google.gerrit.reviewdb.client.AccountGroup accountGroup = com.google.gerrit.common.data.GroupDescriptions.toAccountGroup(group); if (accountGroup == null) { isOwner = false; } else if ((isOwner) == null) { com.google.gerrit.reviewdb.client.AccountGroup.UUID ownerUUID = accountGroup.getOwnerGroupUUID(); isOwner = (getCurrentUser().getEffectiveGroups().contains(ownerUUID)) || (getCurrentUser().getCapabilities().canAdministrateServer()); } return isOwner; }
@org.junit.Test public void validity() throws java.lang.Exception { com.google.gerrit.server.account.AccountSshKey key = com.google.gerrit.server.account.AccountSshKey.create(accountId, (-1), com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 0, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isFalse(); key = com.google.gerrit.server.account.AccountSshKey.create(accountId, 1, com.google.gerrit.server.account.AuthorizedKeysTest.KEY1); assertThat(key.valid()).isTrue(); }
public void evict(com.google.gerrit.reviewdb.Project project) { projectCache.evict(project); controls.remove(project.getNameKey()); }
public void run() throws java.lang.Exception { ui.header("Gerrit Code Review %s", com.google.gerrit.pgm.init.InitUtil.version()); if (site.isNew) { if (!(ui.yesno(true, "Create '%s'", site.site_path.getCanonicalPath()))) { throw com.google.gerrit.pgm.init.InitUtil.die("aborted by user"); } if ((!(site.site_path.isDirectory())) && (!(site.site_path.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(("Cannot make directory " + (site.site_path))); } flags.deleteOnFailure = true; } com.google.gerrit.pgm.init.InitUtil.mkdir(site.bin_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.etc_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.lib_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.logs_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.mail_dir); com.google.gerrit.pgm.init.InitUtil.mkdir(site.static_dir); for (com.google.gerrit.pgm.init.InitStep step : steps) { step.run(); } com.google.gerrit.pgm.init.InitUtil.savePublic(flags.cfg); com.google.gerrit.pgm.init.InitUtil.saveSecure(flags.sec); if (!(site.replication_config.exists())) { site.replication_config.createNewFile(); } com.google.gerrit.pgm.init.InitUtil.extract(site.gerrit_sh, com.google.gerrit.pgm.Init.class, "gerrit.sh"); com.google.gerrit.pgm.init.InitUtil.chmod(493, site.gerrit_sh); extractMailExample("ChangeSubject.vm"); extractMailExample("Merged.vm"); if (!(ui.isBatch())) { java.lang.System.err.println(); } }
@java.lang.Override public void run() { try { java.util.Optional<com.googlesource.gerrit.plugins.webhooks.EventProcessor.Request> content = processor.get(); if (!(content.isPresent())) { com.googlesource.gerrit.plugins.webhooks.PostTask.log.debug("No content. Webhook [{}] skipped.", url); return; } (execCnt)++; com.googlesource.gerrit.plugins.webhooks.HttpResponseHandler.HttpResult result = session.post(url, content.get()); if ((!(result.successful)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(result.message); reschedule(); } } catch (java.io.IOException e) { if ((isRecoverable(e)) && ((execCnt) < (cfg.getMaxTries()))) { logRetry(e); reschedule(); } else { com.googlesource.gerrit.plugins.webhooks.PostTask.log.error("Failed to post: {}", toString(), e); } } }
private java.lang.String getCommentTimestamp() { return MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(timestamp.toInstant(), java.time.ZoneId.of("UTC"))); }
private org.eclipse.jgit.revwalk.RevTree aFor(org.eclipse.jgit.revwalk.RevCommit b, org.eclipse.jgit.revwalk.RevWalk walk) throws java.io.IOException { switch (b.getParentCount()) { case 0 : return walk.parseTree(emptyTree()); case 1 : org.eclipse.jgit.revwalk.RevCommit a = b.getParent(0); walk.parseBody(a); return walk.parseTree(a.getTree()); case 2 : org.eclipse.jgit.revwalk.RevCommit am = autoMerger.merge(repo, walk, b, mergeStrategy); return am == null ? null : am.getTree(); default : return null; } }
public static void addMembers(com.google.gerrit.reviewdb.client.AccountGroup.UUID groupUUID, java.util.Set<java.lang.String> members, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.groups.MemberInfo>> cb) { if ((members.size()) == 1) { com.google.gerrit.client.groups.GroupApi.addMember(groupUUID, members.iterator().next(), new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.groups.MemberInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.groups.MemberInfo result) { cb.onSuccess(com.google.gerrit.client.rpc.NativeList.of(result)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { cb.onFailure(caught); } }); } else { com.google.gerrit.client.rpc.RestApi call = new com.google.gerrit.client.rpc.RestApi(com.google.gerrit.client.groups.GroupApi.membersBase(groupUUID)); com.google.gerrit.client.groups.GroupApi.MemberInput input = com.google.gerrit.client.groups.GroupApi.MemberInput.create(); for (java.lang.String member : members) { input.add_member(member); } call.data(input).put(cb); } }
@org.junit.Before public void setUp() throws java.lang.Exception { db = reviewDbProvider.open(); changeId = newChange(git, admin.getIdent()); ps = getCurrentPatchSet(changeId); amendChange(git, admin.getIdent(), changeId); change = getChange(changeId); assertNotNull(ps); java.lang.String changeId2 = newChange2(git, admin.getIdent()); change2 = getChange(changeId2); assertNotNull(change2); ps2 = getCurrentPatchSet(changeId2); assertNotNull(ps2); session = new com.google.gerrit.acceptance.RestSession(server, admin); atrScope.set(atrScope.newContext(reviewDbProvider, sshSession, identifiedUserFactory.create(com.google.inject.util.Providers.of(db), admin.getId()))); final long clockStepMs = java.util.concurrent.TimeUnit.MILLISECONDS.convert(1, java.util.concurrent.TimeUnit.SECONDS); final java.util.concurrent.atomic.AtomicLong clockMs = new java.util.concurrent.atomic.AtomicLong(new org.joda.time.DateTime(2009, 9, 30, 17, 0, 0).getMillis()); org.joda.time.DateTimeUtils.setCurrentMillisProvider(new org.joda.time.DateTimeUtils.MillisProvider() { @java.lang.Override public long getMillis() { return clockMs.getAndAdd(clockStepMs); } }); }
public com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> getFileHistoryLinks(final java.lang.String project, final java.lang.String revision, final java.lang.String file) { return filterLinks(fileHistoryLinks, new com.google.common.base.Function<com.google.gerrit.extensions.webui.WebLink, com.google.gerrit.extensions.common.WebLinkInfo>() { @java.lang.Override public com.google.gerrit.extensions.common.WebLinkInfo apply(com.google.gerrit.extensions.webui.WebLink webLink) { return ((com.google.gerrit.extensions.webui.FileHistoryWebLink) (webLink)).getFileHistoryWebLink(project, revision, file); } }); }
@java.lang.Override public void doFilter(final javax.servlet.ServletRequest request, final javax.servlet.ServletResponse response, final javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { if (isSessionValid(((javax.servlet.http.HttpServletRequest) (request)))) { chain.doFilter(request, response); } else { final javax.servlet.http.HttpServletRequest req = ((javax.servlet.http.HttpServletRequest) (request)); final javax.servlet.http.HttpServletResponse rsp = ((javax.servlet.http.HttpServletResponse) (response)); final byte[] tosend; if (com.google.gwtjsonrpc.server.RPCServletUtils.acceptsGzipEncoding(req)) { rsp.setHeader("Content-Encoding", "gzip"); tosend = signInGzip; } else { tosend = signInRaw; } com.google.gwtexpui.server.CacheHeaders.setNotCacheable(rsp); rsp.setContentType("text/html"); rsp.setCharacterEncoding(HtmlDomUtil.ENC); rsp.setContentLength(tosend.length); final java.io.OutputStream out = rsp.getOutputStream(); try { out.write(tosend); } finally { out.close(); } } }
@java.lang.Override protected void onLoad() { super.onLoad(); add(new com.google.gerrit.client.api.ExtensionPanel(com.google.gerrit.client.GerritUiExtensionPoint.PROFILE_SCREEN_BOTTOM)); display(com.google.gerrit.client.Gerrit.getUserAccount()); display(); }
@java.lang.Override public void onAddAccountsToGroup(com.google.gerrit.reviewdb.client.Account.Id me, java.util.Collection<com.google.gerrit.reviewdb.client.AccountGroupMember> added) { java.util.List<com.google.gerrit.reviewdb.client.AccountGroupMemberAudit> auditInserts = com.google.common.collect.Lists.newLinkedList(); for (com.google.gerrit.reviewdb.client.AccountGroupMember m : added) { com.google.gerrit.reviewdb.client.AccountGroupMemberAudit audit = new com.google.gerrit.reviewdb.client.AccountGroupMemberAudit(m, me, com.google.gerrit.common.TimeUtil.nowTs()); auditInserts.add(audit); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { db.accountGroupMembersAudit().insert(auditInserts); } catch (com.google.gwtorm.server.OrmException e) { logOrmExceptionForAccounts("Cannot log add accounts to group event performed by user", me, added, e); } }
@java.lang.Override public synchronized java.lang.String[] getListForPlugin(java.lang.String pluginName, java.lang.String section, java.lang.String subsection, java.lang.String name) { org.eclipse.jgit.storage.file.FileBasedConfig cfg = null; if (pluginSec.containsKey(pluginName)) { cfg = pluginSec.get(pluginName); } else { java.lang.String filename = pluginName + ".secure.config"; java.io.File pluginConfigFile = site.etc_dir.resolve(filename).toFile(); if (pluginConfigFile.exists()) { cfg = new org.eclipse.jgit.storage.file.FileBasedConfig(pluginConfigFile, org.eclipse.jgit.util.FS.DETECTED); try { cfg.load(); pluginSec.put(pluginName, cfg); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.lang.RuntimeException(("Cannot load " + filename), e); } } } return cfg != null ? com.google.common.collect.FluentIterable.from(java.util.Arrays.asList(cfg.getStringList(section, subsection, name))).transform(codec.decodeFun).toArray(java.lang.String.class) : null; }
@org.junit.Test public void testAddTooLongPath() throws java.lang.Exception { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.revwalk.RevCommit c = makeCommit(rw); java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> m = com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidator.performValidation(repo, c, rw, com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.getMaxPathLength()); java.util.Set<java.lang.String> expected = com.google.common.collect.ImmutableSet.of(("ERROR: path too long: " + (com.googlesource.gerrit.plugins.uploadvalidator.MaxPathLengthValidatorTest.TOO_LONG))); assertThat(com.googlesource.gerrit.plugins.uploadvalidator.TestUtils.transformMessages(m)).containsExactlyElementsIn(expected); } }
@java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { confirmSetUserName(); } }
private org.eclipse.jgit.lib.Config readProjectConfig() throws java.lang.Exception { git().fetch().setRefSpecs(new org.eclipse.jgit.transport.RefSpec((((REFS_CONFIG) + ":") + (REFS_CONFIG)))).call(); testRepo.reset(RefNames.REFS_CONFIG); org.eclipse.jgit.revwalk.RevWalk rw = testRepo.getRevWalk(); org.eclipse.jgit.revwalk.RevTree tree = rw.parseTree(testRepo.getRepository().resolve("HEAD")); org.eclipse.jgit.revwalk.RevObject obj = rw.parseAny(testRepo.get(tree, "project.config")); org.eclipse.jgit.lib.ObjectLoader loader = rw.getObjectReader().open(obj); java.lang.String text = new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8); org.eclipse.jgit.lib.Config cfg = new org.eclipse.jgit.lib.Config(); cfg.fromText(text); return cfg; }
@org.junit.Test public void membersAndSubgroups() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 1), member(g, 2)).byId(byId(g, "x"), byId(g, "y")).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(2); assertServerCommit(log.get(0), "Create group"); assertServerCommit(log.get(1), ("Update group\n" + (((("\n" + "Add: Account 1 <1@server-id>\n") + "Add: Account 2 <2@server-id>\n") + "Add-group: Group <x>\n") + "Add-group: Group <y>"))); }
private void styleLastCommentCell(final int row, final int col) { final com.google.gwt.user.client.ui.HTMLTable.CellFormatter fmt = table.getCellFormatter(); fmt.removeStyleName((row - 1), col, Gerrit.RESOURCES.css().commentPanelLast()); fmt.setStyleName(row, col, Gerrit.RESOURCES.css().commentHolder()); fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentPanelLast()); if (!(fmt.getStyleName(row, (col - 1)).contains(Gerrit.RESOURCES.css().commentHolder()))) { fmt.addStyleName(row, col, Gerrit.RESOURCES.css().commentHolderLeftmost()); } }
public GroupDescription.Basic parse(java.lang.String id) throws com.google.gerrit.extensions.restapi.UnprocessableEntityException { com.google.gerrit.common.data.GroupDescription.Basic group = _parse(id); if ((group == null) || (!(groupControlFactory.controlFor(group).isVisible()))) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("Group Not Found: %s", id)); } return group; }
public boolean isLoggedIn(java.util.Set<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope> scopes) { boolean loggedIn = ((scopesSet.equals(scopes)) && ((token) != null)) && ((hub) != null); if (loggedIn && ((myself) == null)) { try { myself = hub.getMyself(); } catch (java.lang.Throwable e) { com.googlesource.gerrit.plugins.github.oauth.GitHubLogin.log.error("Connection to GitHub broken: logging out", e); logout(); loggedIn = false; } } return loggedIn; }
public void deleteDraftPatchSet(final com.google.gerrit.reviewdb.PatchSet.Id psid, final com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwtjsonrpc.client.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.patch.Action<com.google.gwtjsonrpc.client.VoidResult>() { public com.google.gwtjsonrpc.client.VoidResult run(com.google.gerrit.reviewdb.ReviewDb db) throws com.google.gerrit.httpd.rpc.patch.Failure, com.google.gwtorm.client.OrmException { try { final com.google.gerrit.server.project.ChangeControl cc = changeControlFactory.validateFor(psid.getParentKey()); if (!(cc.isOwner())) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new com.google.gerrit.common.errors.NoSuchEntityException()); } com.google.gerrit.server.ChangeUtil.deleteDraftPatchSet(psid, gitManager, replication, patchSetInfoFactory, db); } catch (NoSuchChangeException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(new NoSuchChangeException(psid.getParentKey())); } catch (PatchSetInfoNotAvailableException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } catch (IOException e) { throw new com.google.gerrit.httpd.rpc.patch.Failure(e); } return com.google.gwtjsonrpc.client.VoidResult.INSTANCE; } }); }
@java.lang.Override public com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> and(java.util.Collection<? extends com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> l) { return com.google.gerrit.server.query.change.ChangeQueryRewriter.hasSource(l) ? andSourceFactory.create(l) : new com.google.gerrit.server.query.change.PrefetchableAndPredicate(l); }
@com.google.gwt.uibinder.client.UiHandler("star") void onToggleStar(com.google.gwt.event.logical.shared.ValueChangeEvent<java.lang.Boolean> e) { com.google.gerrit.client.changes.StarredChanges.toggleStar(changeId, e.getValue()); }
@org.junit.Test public void rebuild() throws java.lang.Exception { assume().that(groupsMigration.writeToNoteDb()).isTrue(); assume().that(groupsMigration.readFromNoteDb()).isFalse(); com.google.gerrit.extensions.common.GroupInfo g = gApi.groups().create(name("group")).get(); com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid = new com.google.gerrit.reviewdb.client.AccountGroup.UUID(g.id); java.lang.String refName = com.google.gerrit.reviewdb.client.RefNames.refsGroups(uuid); org.eclipse.jgit.lib.ObjectId oldId; com.google.gerrit.server.group.db.GroupBundle oldBundle; try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { oldId = repo.exactRef(refName).getObjectId(); oldBundle = bundleFactory.fromNoteDb(repo, uuid); new org.eclipse.jgit.junit.TestRepository(repo).delete(refName); } assertThat(adminRestSession.postOK((("/groups/" + uuid) + "/rebuild"), com.google.gerrit.acceptance.rest.group.GroupsIT.input(null)).getEntityContent()).isEqualTo("No differences between ReviewDb and NoteDb"); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { org.eclipse.jgit.lib.Ref ref = repo.exactRef(refName); assertThat(ref).isNotNull(); assertThat(ref.getObjectId()).isNotEqualTo(oldId); com.google.gerrit.acceptance.rest.group.GroupsIT.assertNoDifferences(oldBundle, bundleFactory.fromNoteDb(repo, uuid)); } }
@com.google.gerrit.common.Nullable public abstract java.lang.Boolean isPrivate();
private void initRevisionsAction(com.google.gerrit.client.changes.ChangeInfo info, java.lang.String revision) { int currentPatchSet; if (((info.current_revision()) != null) && (info.revisions().containsKey(info.current_revision()))) { currentPatchSet = info.revision(info.current_revision())._number(); } else { com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.ChangeInfo.RevisionInfo> revList = info.revisions().values(); com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(revList); currentPatchSet = revList.get(((revList.length()) - 1))._number(); } java.lang.String currentlyViewedPatchSet; if (info.revision(revision).id().equals("edit")) { currentlyViewedPatchSet = Resources.M.editPatchSet(com.google.gerrit.client.changes.ChangeInfo.RevisionInfo.findEditParent(info.revisions().values())); currentPatchSet = (info.revisions().values().length()) - 1; } else { currentlyViewedPatchSet = info.revision(revision).id(); } patchSetsText.setInnerText(Resources.M.patchSets(currentlyViewedPatchSet, currentPatchSet)); patchSetsAction = new com.google.gerrit.client.change.PatchSetsAction(info.legacy_id(), revision, style, headerLine, patchSets); }
public static void assertGroups(java.lang.Iterable<java.lang.String> expected, java.util.Set<java.lang.String> actual) { for (java.lang.String g : expected) { assert_().withFailureMessage(("missing group " + g)).that(actual.remove(g)).isTrue(); } assert_().withFailureMessage(("unexpected groups: " + actual)).that(((java.lang.Iterable<?>) (actual))).isEmpty(); }
@java.lang.Override public java.lang.String format(com.googlesource.gerrit.plugins.xdocs.ConfigSection cfg, java.lang.String raw) throws java.io.IOException { return Asciidoctor.Factory.create(com.googlesource.gerrit.plugins.xdocs.formatter.AsciidoctorFormatter.class.getClassLoader()).convert(raw, new java.util.HashMap<java.lang.String, java.lang.Object>()); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> copyVetosToLatestPatchSet(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.PatchSet.Id source; if ((change.getNumberOfPatchSets()) > 1) { source = new com.google.gerrit.reviewdb.client.PatchSet.Id(change.getId(), ((change.getNumberOfPatchSets()) - 1)); } else { throw new java.io.IOException("Previous patch set could not be found"); } com.google.gerrit.reviewdb.client.PatchSet.Id dest = change.currPatchSetId(); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> patchSetApprovals = db.patchSetApprovals().byChange(change.getId()).toList(); for (com.google.gerrit.reviewdb.client.PatchSetApproval a : patchSetApprovals) { if (!(ApprovalCategory.SUBMIT.equals(a.getCategoryId()))) { final com.google.gerrit.common.data.ApprovalType type = approvalTypes.byId(a.getCategoryId()); if (((a.getPatchSetId().equals(source)) && (type.getCategory().isCopyMinScore())) && (type.isMaxNegative(a))) { db.patchSetApprovals().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.client.PatchSetApproval(dest, a))); } } } return patchSetApprovals; }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest req, javax.servlet.ServletResponse rsp, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.security.cert.X509Certificate[] certs = ((java.security.cert.X509Certificate[]) (req.getAttribute("javax.servlet.request.X509Certificate"))); if ((certs == null) || ((certs.length) == 0)) { throw new javax.servlet.ServletException("Couldn't get the attribute javax.servlet.request.X509Certificate from the request"); } java.lang.String name = certs[0].getSubjectDN().getName(); java.util.regex.Matcher m = com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.REGEX_USERID.matcher(name); java.lang.String userName; if (m.matches()) { userName = m.group(1); } else { throw new javax.servlet.ServletException("Couldn't extract username from your certificate"); } final com.google.gerrit.server.account.AuthRequest areq = com.google.gerrit.server.account.AuthRequest.forUser(userName); final com.google.gerrit.server.account.AuthResult arsp; try { arsp = accountManager.authenticate(areq); } catch (com.google.gerrit.server.account.AccountException e) { java.lang.String err = ("Unable to authenticate user \"" + userName) + "\""; com.google.gerrit.httpd.auth.container.HttpsClientSslCertAuthFilter.log.error(err, e); throw new javax.servlet.ServletException(err, e); } webSession.get().login(arsp, true); chain.doFilter(req, rsp); }
public com.google.gwt.user.client.rpc.AsyncCallback<T> createCallback() { return new com.google.gerrit.client.rpc.GerritCallback<T>() { @java.lang.Override public void onSuccess(T result) { sent = true; if ((callback) != null) { callback.onSuccess(result); } hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }; }
public void testFindReplace() { final java.lang.String find = "find"; final java.lang.String replace = "replace"; final com.google.gwtexpui.safehtml.client.RawFindReplace a = new com.google.gwtexpui.safehtml.client.RawFindReplace(find, replace); assertEquals(find, a.pattern().getSource()); assertEquals(replace, a.replace(find)); assertEquals(((("find = " + find) + ", replace = ") + replace), a.toString()); }
private final native java.sql.Timestamp _get_cts();
@java.lang.Override public void init(javax.servlet.FilterConfig filterConfig) throws javax.servlet.ServletException { showGitBlitBanner(); try { java.io.InputStream resin = getClass().getResourceAsStream(com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.GITBLIT_GERRIT_PROPERTIES); java.util.Properties properties = null; try { properties = new java.util.Properties(); properties.load(resin); properties.put("git.repositoriesFolder", repoManager.getBasePath().getAbsolutePath()); properties.put("realm.userService", com.googlesource.gerrit.plugins.gitblit.auth.GerritToGitBlitUserService.class.getName()); if ((properties.get("web.otherUrls")) != null) { properties.put("web.otherUrls", ((((((config.getGitHttpUrl()) + " ") + (config.getGitSshUrl())).trim()) + " ") + (properties.get("web.otherUrls")))); } else { properties.put("web.otherUrls", (((config.getGitHttpUrl()) + " ") + (config.getGitSshUrl())).trim()); } } finally { resin.close(); } com.gitblit.IStoredSettings settings = new com.googlesource.gerrit.plugins.gitblit.app.GitBlitSettings(properties); com.gitblit.GitBlit.self().configureContext(settings, repoManager.getBasePath(), false); com.gitblit.GitBlit.self().contextInitialized(new javax.servlet.ServletContextEvent(filterConfig.getServletContext())); super.init(new com.googlesource.gerrit.plugins.gitblit.GerritWicketFilter.CustomFilterConfig(filterConfig)); } catch (java.lang.Exception e) { throw new javax.servlet.ServletException(e); } }
public static void delete(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String path, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.VoidResult> cb) { com.google.gerrit.client.changes.ChangeEditApi.editFile(project, id, path).delete(cb); }
private static com.googlecode.prolog_cafe.lang.Term makeTerm(java.lang.String status, com.googlecode.prolog_cafe.lang.StructureTerm labels) { return new com.googlecode.prolog_cafe.lang.StructureTerm(status, labels); }
@java.lang.Override public void start(final org.apache.sshd.server.Environment env) { startThread(new com.google.gerrit.sshd.commands.CommandRunnable() { @java.lang.Override public void run() throws java.lang.Exception { java.io.PrintWriter p = toPrintWriter(out); parseCommandLine(); try { validateParameters(); nameKey = new com.google.gerrit.reviewdb.Project.NameKey(projectName); final org.eclipse.jgit.lib.Repository repo = repoManager.createRepository(nameKey); try { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(Constants.HEAD); u.disableRefLog(); u.link(branch); createProject(); repoManager.setProjectDescription(nameKey, projectDescription); if (createEmptyCommit) { createEmptyCommit(repo, nameKey, branch); } rq.replicateNewProject(nameKey, branch); } finally { repo.close(); } } catch (java.lang.Exception e) { p.print((("Error when trying to create project: " + (e.getMessage())) + "\n")); p.flush(); } } }); }
private com.google.common.collect.ListMultimap<java.lang.String, ?> extractParameters(com.google.gerrit.sshd.DispatchCommand dcmd) { if (dcmd == null) { return com.google.common.collect.MultimapBuilder.hashKeys(0).arrayListValues(0).build(); } java.lang.String[] cmdArgs = dcmd.getArguments(); java.lang.String paramName = null; int argPos = 0; com.google.common.collect.ListMultimap<java.lang.String, java.lang.String> parms = com.google.common.collect.MultimapBuilder.hashKeys().arrayListValues().build(); for (int i = 2; i < (cmdArgs.length); i++) { java.lang.String arg = cmdArgs[i]; if (arg.equals("--")) { for (i++; i < (cmdArgs.length); i++) { parms.put(("$" + (argPos++)), cmdArgs[i]); } break; } int eqPos = arg.indexOf('='); if ((arg.startsWith("--")) && (eqPos > 0)) { java.lang.String param = arg.substring(0, eqPos); java.lang.String value = ((auditMask) && (dcmd.isSensitiveParameter(param))) ? com.google.gerrit.sshd.SshLog.MASK : arg.substring((eqPos + 1)); parms.put(param, value); continue; } if (arg.startsWith("-")) { if (paramName != null) { parms.put(paramName, null); } paramName = arg; continue; } if (paramName == null) { parms.put(("$" + (argPos++)), arg); } else { parms.put(paramName, ((auditMask) && (dcmd.isSensitiveParameter(paramName)) ? com.google.gerrit.sshd.SshLog.MASK : arg)); paramName = null; } } if (paramName != null) { parms.put(paramName, null); } return parms; }
private static java.sql.Timestamp after(com.google.gerrit.reviewdb.client.Change c, long millis) { return new java.sql.Timestamp(((c.getCreatedOn().getTime()) + millis)); }
@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<?> index(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.server.util.RequestScopePropagator prop) { java.lang.Runnable task = new com.google.gerrit.server.index.ChangeIndexerImpl.Task(change); if (prop != null) { task = prop.wrap(task); } return executor.submit(task); }
@java.lang.Override public boolean shouldPublish() { return (config.isEnabled()) && (config.shouldPublishOnCommentAdded()); }
@org.junit.Test public void changeMessageOnePatchSet() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.putReviewer(changeOwner.getAccount().getId(), com.google.gerrit.server.notedb.ReviewerState.REVIEWER); update.setChangeMessage("Just a little code change.\n"); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); java.util.List<java.lang.String> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.size()); assertEquals("Just a little code change.\n", changeMessages.get(0)); }
@java.lang.Override public int compareTo(com.google.gerrit.server.index.change.AllChangesIndexer.ProjectHolder other) { return com.google.common.collect.ComparisonChain.start().compare(other.size, size).compare(other.name.get(), name.get()).result(); }
public void stop() { for (int i = (handles.size()) - 1; 0 <= i; i--) { handles.get(i).remove(); } handles.clear(); for (int i = startedIndex; 0 <= i; i--) { com.google.gerrit.extensions.events.LifecycleListener obj = listeners.get(i).get(); try { obj.stop(); } catch (java.lang.Throwable err) { org.slf4j.LoggerFactory.getLogger(obj.getClass()).warn("Failed to stop", err); } startedIndex = i - 1; } }
private java.lang.String healthCheckAccess() throws java.io.IOException { client().sysInfo(); final java.lang.String result = ("{\"status\"=\"ok\",\"username\"=\"" + (getUsername())) + "\"}"; log.debug("Healtheck on access result: {}", result); return result; }
@java.lang.Override public T get(int index) { return this.get(index); }
public static void setEditPreferences(com.google.gerrit.extensions.client.EditPreferencesInfo p) { com.google.gerrit.client.Gerrit.editPrefs = p; }
@java.lang.Override public void update(com.googlesource.gerrit.plugins.supermanifest.SuperManifestRefUpdatedListener.GerritRemoteReader reader, com.googlesource.gerrit.plugins.supermanifest.ConfigEntry c, java.lang.String srcRef) throws java.lang.Exception { org.eclipse.jgit.lib.Repository destRepo = reader.openRepository(c.getDestRepoKey().toString()); org.eclipse.jgit.lib.Repository srcRepo = reader.openRepository(c.getSrcRepoKey().toString()); org.eclipse.jgit.gitrepo.RepoCommand cmd = new org.eclipse.jgit.gitrepo.RepoCommand(destRepo); if (c.getDestBranch().equals("*")) { cmd.setTargetBranch(srcRef.substring(com.googlesource.gerrit.plugins.supermanifest.REFS_HEADS.length())); } else { cmd.setTargetBranch(c.getDestBranch()); } java.io.InputStream manifestStream = new java.io.ByteArrayInputStream(com.googlesource.gerrit.plugins.supermanifest.Utils.readBlob(srcRepo, ((srcRef + ":") + (c.getXmlPath())))); cmd.setAuthor(serverIdent).setRecordRemoteBranch(true).setRecordSubmoduleLabels(c.isRecordSubmoduleLabels()).setInputStream(manifestStream).setRecommendShallow(true).setRemoteReader(reader).setTargetURI(c.getDestRepoKey().toString()).setURI(c.getBaseUri().toString()); cmd.setIncludedFileReader(new com.googlesource.gerrit.plugins.supermanifest.RepoUpdater.GerritIncludeReader(srcRepo, srcRef)); cmd.call(); }
@java.lang.Override public PatchSet.Id call() throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { try { if (magicBranch.edit) { return upsertEdit(); } else if (caller == (java.lang.Thread.currentThread())) { return insertPatchSet(db); } else { com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open(); try { return insertPatchSet(db); } finally { db.close(); } } } finally { synchronized(replaceProgress) { replaceProgress.update(1); } } }
private static void formatLink(com.google.gerrit.client.changes.ChangeInfo.GitPerson person, com.google.gwt.user.client.ui.FlowPanel p, com.google.gerrit.client.ui.InlineHyperlink name, com.google.gwt.dom.client.Element date, com.google.gerrit.client.changes.ChangeInfo change) { if (change.owner().has_avatar_info()) { com.google.gerrit.client.AvatarImage avatar; if (change.owner().email().equals(person.email())) { avatar = new com.google.gerrit.client.AvatarImage(change.owner()); } else { avatar = new com.google.gerrit.client.AvatarImage(com.google.gerrit.client.account.AccountInfo.create(0, person.name(), person.email())); } p.insert(avatar, 0); } name.setText(com.google.gerrit.client.change.CommitBox.renderName(person)); name.setTargetHistoryToken(com.google.gerrit.common.PageLinks.toAccountQuery(com.google.gerrit.client.change.CommitBox.owner(person), change.status())); date.setInnerText(com.google.gerrit.client.FormatUtil.mediumFormat(person.date())); }
private static void addChildren(java.util.Map<java.lang.String, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment>> parentMap, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment> children, java.util.List<com.google.gerrit.client.reviewdb.PatchLineComment> outResult) { if (children != null) { for (com.google.gerrit.client.reviewdb.PatchLineComment c : children) { outResult.add(c); com.google.gerrit.client.patches.CommentDetail.addChildren(parentMap, parentMap.get(c.getKey().get()), outResult); } } }
void setHideEmptyPane(boolean hide) { if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.ADDED)) { setVisibleA((!hide)); } else if ((changeType) == (com.google.gerrit.reviewdb.client.Patch.ChangeType.DELETED)) { setVisibleB((!hide)); } }
@java.lang.Override public com.google.gerrit.server.account.AccountResource.GpgKey parse(com.google.gerrit.server.account.AccountResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException, java.io.IOException, org.bouncycastle.openpgp.PGPException { com.google.gerrit.server.account.GpgKeys.checkEnabled(); java.lang.String str = CharMatcher.WHITESPACE.removeFrom(id.get()).toUpperCase(); if ((((str.length()) != 8) && ((str.length()) != 40)) || (!(com.google.common.base.CharMatcher.anyOf("0123456789ABCDEF").matchesAllOf(str)))) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } byte[] fp = com.google.gerrit.server.account.GpgKeys.parseFingerprint(id.get(), getGpgExtIds(parent)); try (com.google.gerrit.server.git.gpg.PublicKeyStore store = storeProvider.get()) { long keyId = com.google.gerrit.server.account.GpgKeys.keyId(fp); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : store.get(keyId)) { org.bouncycastle.openpgp.PGPPublicKey key = keyRing.getPublicKey(); if (java.util.Arrays.equals(key.getFingerprint(), fp)) { return new com.google.gerrit.server.account.AccountResource.GpgKey(parent.getUser(), keyRing); } } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
public java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> byChange(final com.google.gerrit.reviewdb.client.Change.Id changeId, final java.lang.String label) throws com.google.gwtorm.server.OrmException { try (final org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsers)) { return com.google.common.collect.FluentIterable.from(com.google.gerrit.server.StarredChangesUtil.getRefNames(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChangesPrefix(changeId))).transform(new com.google.common.base.Function<java.lang.String, com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public Account.Id apply(java.lang.String refPart) { return Account.Id.parse(refPart); } }).filter(new com.google.common.base.Predicate<com.google.gerrit.reviewdb.client.Account.Id>() { @java.lang.Override public boolean apply(com.google.gerrit.reviewdb.client.Account.Id accountId) { try { return com.google.gerrit.server.StarredChangesUtil.readLabels(repo, com.google.gerrit.reviewdb.client.RefNames.refsStarredChanges(changeId, accountId)).contains(label); } catch (java.io.IOException e) { com.google.gerrit.server.StarredChangesUtil.log.error(java.lang.String.format("Cannot query stars by account %d on change %d", accountId.get(), changeId.get()), e); return false; } } }).toSet(); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Get accounts that starred change %d failed", changeId.get()), e); } }
public final boolean isHttpPasswordSettingsEnabled() { return (gitBasicAuthPolicy()) != (com.google.gerrit.extensions.client.GitBasicAuthPolicy.LDAP); }
@java.lang.Override public void onShowView() { super.onShowView(); com.google.gwt.user.client.Window.enableScrolling(false); if (prefs.hideTopMenu()) { com.google.gerrit.client.Gerrit.setHeaderVisible(false); } resizeHandler = com.google.gwt.user.client.Window.addResizeHandler(new com.google.gwt.event.logical.shared.ResizeHandler() { @java.lang.Override public void onResize(com.google.gwt.event.logical.shared.ResizeEvent event) { resizeCodeMirror(); } }); final int height = getCodeMirrorHeight(); operation(new java.lang.Runnable() { @java.lang.Override public void run() { cmA.setHeight(height); cmB.setHeight(height); cmA.refresh(); cmB.refresh(); } }); setLineLength(prefs.lineLength()); diffTable.sidePanel.adjustGutters(cmB); if (((startLine) == 0) && ((diff.meta_b()) != null)) { com.google.gerrit.client.diff.DiffChunkInfo d = chunkManager.getFirst(); if (d != null) { startSide = d.getSide(); startLine = (d.getStart()) + 1; } } if (((startSide) != null) && ((startLine) > 0)) { int line = (startLine) - 1; net.codemirror.lib.CodeMirror cm = getCmFromSide(startSide); if ((cm.lineAtHeight((height - 20))) < line) { cm.scrollToY(((cm.heightAtLine(line, "local")) - (0.5 * height))); } cm.setCursor(net.codemirror.lib.LineCharacter.create(line)); cm.focus(); } else { cmA.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmA.focus(); } if ((com.google.gerrit.client.Gerrit.isSignedIn()) && (prefs.autoReview())) { header.autoReview(); } prefetchNextFile(); }
@org.junit.Test public void testUpsertTwoUpdateCountsAreNull() throws com.google.gwtorm.server.OrmException, java.sql.SQLException { java.sql.PreparedStatement update = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.UPDATE, null); java.sql.PreparedStatement insert = stubStatementWithUpdateCounts(com.google.gwtorm.jdbc.TestJdbcAccess.INSERT, 1, 1); createClassUnderTest().upsert(twoRows); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(update); com.google.gwtorm.jdbc.TestJdbcAccess.assertUsedBatchingOnly(insert); com.google.gwtorm.jdbc.TestJdbcAccess.assertExpectedIdsUsed(insert, 1, 2); }
@org.junit.Test public void doesNotPublishWhenNoCodeChange() throws java.lang.Exception { com.cisco.gerrit.plugins.slack.config.ProjectConfig config = getConfig(); mockEvent.change = com.google.common.base.Suppliers.ofInstance(mockChange); mockEvent.patchSet = com.google.common.base.Suppliers.ofInstance(mockPatchSet); mockPatchSet.kind = com.google.gerrit.extensions.client.ChangeKind.NO_CODE_CHANGE; com.cisco.gerrit.plugins.slack.message.MessageGenerator messageGenerator; messageGenerator = com.cisco.gerrit.plugins.slack.message.MessageGeneratorFactory.newInstance(mockEvent, config); assertThat(messageGenerator.shouldPublish(), is(false)); }
private com.google.inject.Injector createSysInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.git.WorkQueue.Module()); modules.add(new com.google.gerrit.common.ChangeHookRunner.Module()); modules.add(new com.google.gerrit.server.git.ReceiveCommitsExecutorModule()); modules.add(new com.google.gerrit.server.patch.IntraLineWorkerPool.Module()); modules.add(cfgInjector.getInstance(com.google.gerrit.server.config.GerritGlobalModule.class)); modules.add(new com.google.gerrit.server.cache.h2.DefaultCacheFactory.Module()); modules.add(new com.google.gerrit.server.mail.SmtpEmailSender.Module()); modules.add(new com.google.gerrit.server.mail.SignedTokenEmailTokenVerifier.Module()); modules.add(new com.google.gerrit.server.plugins.PluginModule()); if (com.google.gerrit.lucene.LuceneIndexModule.isEnabled(cfgInjector)) { modules.add(new com.google.gerrit.lucene.LuceneIndexModule()); } else { modules.add(new com.google.gerrit.server.index.NoIndexModule()); } modules.add(new com.google.gerrit.server.config.CanonicalWebUrlModule() { @java.lang.Override protected java.lang.Class<? extends com.google.inject.Provider<java.lang.String>> provider() { return com.google.gerrit.httpd.HttpCanonicalWebUrlProvider.class; } }); modules.add(com.google.gerrit.sshd.SshKeyCacheImpl.module()); modules.add(new com.google.gerrit.server.config.MasterNodeStartup()); modules.add(new com.google.inject.AbstractModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.httpd.GerritUiOptions.class).toInstance(new com.google.gerrit.httpd.GerritUiOptions(false)); } }); return cfgInjector.createChildInjector(modules); }
@java.lang.Override protected void onLoad() { super.onLoad(); com.google.gerrit.reviewdb.client.Project.NameKey project = getProjectKey(); com.google.gerrit.client.rpc.CallbackGroup cbg = new com.google.gerrit.client.rpc.CallbackGroup(); com.google.gerrit.client.access.AccessMap.get(project, cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.access.ProjectAccessInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.access.ProjectAccessInfo result) { isOwner = result.isOwner(); enableForm(); saveProject.setVisible(isOwner); } })); com.google.gerrit.client.projects.ProjectApi.getParent(project, cbg.add(new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.reviewdb.client.Project.NameKey>() { @java.lang.Override public void onSuccess(com.google.gerrit.reviewdb.client.Project.NameKey result) { parent = result; } })); com.google.gerrit.client.projects.ProjectApi.getConfig(project, cbg.addFinal(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.projects.ConfigInfo>(this) { @java.lang.Override public void preDisplay(com.google.gerrit.client.projects.ConfigInfo result) { display(result); } })); savedPanel = INFO; }
@java.lang.Override public com.google.gerrit.reviewdb.client.Change createChange(com.google.gerrit.server.update.Context ctx) throws java.io.IOException { change = new com.google.gerrit.reviewdb.client.Change(com.google.gerrit.server.change.ChangeInserter.getChangeKey(ctx.getRevWalk(), commitId), changeId, ctx.getAccountId(), new com.google.gerrit.reviewdb.client.Branch.NameKey(ctx.getProject(), refName), ctx.getWhen()); change.setStatus(com.google.common.base.MoreObjects.firstNonNull(status, Change.Status.NEW)); change.setTopic(topic); change.setPrivate(isPrivate); change.setWorkInProgress(workInProgress); return change; }
private com.cisco.gerrit.plugins.slack.config.ProjectConfig getConfig(boolean publishOnCommentAdded, boolean ignoreWorkInProgressPatchSet, boolean ignorePrivatePatchSet) throws java.lang.Exception { com.google.gerrit.reviewdb.client.Project.NameKey projectNameKey; projectNameKey = Project.NameKey.parse(com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); when(mockConfigFactory.getFromProjectConfigWithInheritance(projectNameKey, ProjectConfig.CONFIG_NAME)).thenReturn(mockPluginConfig); when(mockPluginConfig.getBoolean("enabled", false)).thenReturn(true); when(mockPluginConfig.getString("webhookurl", "")).thenReturn("https://webook/"); when(mockPluginConfig.getString("channel", "general")).thenReturn("testchannel"); when(mockPluginConfig.getString("username", "gerrit")).thenReturn("testuser"); when(mockPluginConfig.getString("ignore", "")).thenReturn("^WIP.*"); when(mockPluginConfig.getBoolean("publish-on-comment-added", true)).thenReturn(publishOnCommentAdded); when(mockPluginConfig.getBoolean("ignore-wip-patch-set", true)).thenReturn(ignoreWorkInProgressPatchSet); when(mockPluginConfig.getBoolean("ignore-private-patch-set", true)).thenReturn(ignorePrivatePatchSet); return new com.cisco.gerrit.plugins.slack.config.ProjectConfig(mockConfigFactory, com.cisco.gerrit.plugins.slack.message.CommentAddedMessageGeneratorTest.PROJECT_NAME); }
private void initUUID() { final com.google.gwt.user.client.ui.VerticalPanel groupUUIDPanel = new com.google.gwt.user.client.ui.VerticalPanel(); groupUUIDPanel.setStyleName(Gerrit.RESOURCES.css().groupUUIDPanel()); groupUUIDPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingGroupUUID())); groupUUIDLabel = new com.google.gwtexpui.clippy.client.CopyableLabel(""); groupUUIDPanel.add(groupUUIDLabel); add(groupUUIDPanel); }
@org.junit.Test public void pastAssigneesChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(otherUserId)); update.commit(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(changeOwner.getAccountId())); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.fromNullable(otherUserId)); update.commit(); update = newUpdate(c, changeOwner); update.setAssignee(com.google.common.base.Optional.absent()); update.commit(); notes = newNotes(c); assertThat(notes.getPastAssignees()).hasSize(2); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.project.BranchResource resource, com.google.gerrit.extensions.api.projects.BranchInput input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException, org.eclipse.jgit.errors.ConfigInvalidException { permissionBackend.user(identifiedUser).check(GlobalPermission.ADMINISTRATE_SERVER); info("manual trigger for %s:%s by %d. Config: %s", resource.getBranchKey().getParentKey().get(), resource.getBranchKey().get(), identifiedUser.get().getAccountId().get(), configurationToString()); update(resource.getProjectState().getProject().getName(), resource.getRef(), false); return com.google.gerrit.extensions.restapi.Response.none(); }
public java.util.Collection<com.google.gerrit.common.data.SubscribeSection> getSubscribeSections(com.google.gerrit.reviewdb.client.Branch.NameKey branch) { java.util.Collection<com.google.gerrit.common.data.SubscribeSection> ret = new java.util.ArrayList<>(); for (com.google.gerrit.server.project.ProjectState s : tree()) { ret.addAll(s.getConfig().getSubscribeSections(branch)); } return ret; }
public com.google.gerrit.server.account.AuthResult authenticate(com.google.gerrit.server.account.AuthRequest who) throws com.google.gerrit.server.account.AccountException, java.io.IOException { who = realm.authenticate(who); try { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.server.account.externalids.ExternalId id = externalIds.get(who.getExternalIdKey()); if (id == null) { return create(db, who); } com.google.gerrit.reviewdb.client.Account act = byIdCache.get(id.accountId()).getAccount(); if ((autoUpdateAccountActiveStatus) && (who.authProvidesAccountActiveStatus())) { if ((who.isActive()) && (!(act.isActive()))) { try { setInactiveFlag.activate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { throw new com.google.gerrit.server.account.AccountException(("Unable to activate account " + (act.getId())), e); } } else if ((!(who.isActive())) && (act.isActive())) { try { setInactiveFlag.deactivate(act.getId()); act = byIdCache.get(id.accountId()).getAccount(); } catch (com.google.gerrit.extensions.restapi.RestApiException e) { throw new com.google.gerrit.server.account.AccountException(("Unable to deactivate account " + (act.getId())), e); } } } if (!(act.isActive())) { throw new com.google.gerrit.server.account.AccountException("Authentication error, account inactive"); } update(who, id); return new com.google.gerrit.server.account.AuthResult(id.accountId(), who.getExternalIdKey(), false); } } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.server.account.AccountException("Authentication error", e); } }
static void configure(org.eclipse.jgit.lib.Config config, java.lang.String port) { config.setEnum("index", null, "type", IndexType.ELASTICSEARCH); config.setString("index", null, "protocol", "http"); config.setString("index", null, "hostname", "localhost"); config.setString("index", null, "port", port); config.setBoolean("index", "elasticsearch", "test", true); }
@java.lang.Override public java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> apply(com.google.gerrit.extensions.restapi.TopLevelResource resource) throws com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, java.io.IOException { java.util.Map<java.lang.String, com.google.gerrit.extensions.api.access.ProjectAccessInfo> access = com.google.common.collect.Maps.newTreeMap(); for (java.lang.String p : projects) { com.google.gerrit.reviewdb.client.Project.NameKey projectName = new com.google.gerrit.reviewdb.client.Project.NameKey(p); access.put(p, getAccess.apply(projectName)); } return access; }
private com.google.gerrit.server.notedb.ChangeNotesState buildState() { return com.google.gerrit.server.notedb.ChangeNotesState.create(tip.copy(), id, new com.google.gerrit.reviewdb.client.Change.Key(changeId), createdOn, lastUpdatedOn, ownerId, branch, buildCurrentPatchSetId(), subject, topic, originalSubject, submissionId, ((assignee) != null ? assignee.orElse(null) : null), status, com.google.common.collect.Sets.newLinkedHashSet(com.google.common.collect.Lists.reverse(pastAssignees)), hashtags, patchSets, buildApprovals(), com.google.gerrit.server.ReviewerSet.fromTable(com.google.common.collect.Tables.transpose(reviewers)), com.google.gerrit.server.ReviewerByEmailSet.fromTable(com.google.common.collect.Tables.transpose(reviewersByEmail)), pendingReviewers, pendingReviewersByEmail, allPastReviewers, buildReviewerUpdates(), submitRecords, buildAllMessages(), buildMessagesByPatchSet(), comments, readOnlyUntil, isPrivate, workInProgress, hasReviewStarted, revertOf); }
public com.google.gerrit.server.notedb.ChangeUpdate create(com.google.gerrit.reviewdb.client.Change change) { return create(change, com.google.gerrit.server.util.TimeUtil.nowTs()); }
@com.google.gwt.uibinder.client.UiHandler("update") void onUpdate(com.google.gwt.event.dom.client.ClickEvent event) { update(); }
private static java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> toJson(java.util.Collection<org.bouncycastle.openpgp.PGPPublicKeyRing> keys, java.util.Set<com.google.gerrit.gpg.Fingerprint> deleted, com.google.gerrit.gpg.PublicKeyStore store) throws java.io.IOException { com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker(); java.util.Map<java.lang.String, com.google.gerrit.extensions.common.GpgKeyInfo> infos = com.google.common.collect.Maps.newHashMapWithExpectedSize(((keys.size()) + (deleted.size()))); for (org.bouncycastle.openpgp.PGPPublicKeyRing keyRing : keys) { com.google.gerrit.extensions.common.GpgKeyInfo info = com.google.gerrit.gpg.server.GpgKeys.toJson(keyRing, checker, store); infos.put(info.id, info); info.id = null; } for (com.google.gerrit.gpg.Fingerprint fp : deleted) { infos.put(com.google.gerrit.gpg.PublicKeyStore.keyIdToString(fp.getId()), new com.google.gerrit.extensions.common.GpgKeyInfo()); } return infos; }
private com.googlesource.gerrit.plugins.github.oauth.OAuthCookie getAuthenticationCookieFromGitRequestUsingOAuthToken(javax.servlet.http.HttpServletRequest req, javax.servlet.http.HttpServletResponse rsp) throws java.io.IOException { final java.lang.String httpBasicAuth = getHttpBasicAuthenticationHeader(req); if (httpBasicAuth == null) { return OAuthCookie.ANONYMOUS; } if (isInvalidHttpAuthenticationHeader(httpBasicAuth)) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } java.lang.String oauthToken = org.apache.commons.lang.StringUtils.substringBefore(httpBasicAuth, ":"); java.lang.String oauthKeyword = org.apache.commons.lang.StringUtils.substringAfter(httpBasicAuth, ":"); if ((com.google.common.base.Strings.isNullOrEmpty(oauthToken)) || (com.google.common.base.Strings.isNullOrEmpty(oauthKeyword))) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_UNAUTHORIZED); return null; } if (!(oauthKeyword.equalsIgnoreCase(com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.GITHUB_X_OAUTH_BASIC))) { return OAuthCookie.ANONYMOUS; } boolean loginSuccessful = false; java.lang.String oauthLogin = null; try { oauthLogin = oauthCache.getLoginByAccessToken(new com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.AccessToken(oauthToken)); loginSuccessful = !(com.google.common.base.Strings.isNullOrEmpty(oauthLogin)); } catch (java.util.concurrent.ExecutionException e) { com.googlesource.gerrit.plugins.github.oauth.OAuthGitFilter.log.warn(("Login failed for OAuth token " + oauthToken), e); loginSuccessful = false; } if (!loginSuccessful) { rsp.sendError(com.googlesource.gerrit.plugins.github.oauth.SC_FORBIDDEN); return null; } return cookieProvider.getFromUser(oauthLogin, "", "", new java.util.TreeSet<com.googlesource.gerrit.plugins.github.oauth.OAuthProtocol.Scope>()); }
@org.junit.Test public void editCannotBeCreatedOnMergedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(changeId).current().submit(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is merged", change._number)); createArbitraryEditFor(changeId); }
private void initCompression(boolean enableCompression) { java.util.List<org.apache.sshd.common.NamedFactory<org.apache.sshd.common.compression.Compression>> compressionFactories = com.google.common.collect.Lists.newArrayList(); compressionFactories.add(BuiltinCompressions.none); if (enableCompression) { compressionFactories.add(BuiltinCompressions.zlib); } setCompressionFactories(compressionFactories); }
com.google.gerrit.server.CurrentUser getUser(java.lang.String auth, java.lang.String project, java.lang.String operation) { if (!(com.google.common.base.Strings.isNullOrEmpty(auth))) { if ((auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsAuthUserProvider.BASIC_AUTH_PREFIX)) && (authCfg.isGitBasicAuth())) { return user.get(); } if (auth.startsWith(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX)) { com.google.common.base.Optional<java.lang.String> user = sshAuth.getUserFromValidToken(auth.substring(com.googlesource.gerrit.plugins.lfs.LfsSshRequestAuthorizer.SSH_AUTH_PREFIX.length()), project, operation); if (user.isPresent()) { com.google.gerrit.server.account.AccountState acc = accounts.getByUsername(user.get()); if (acc != null) { return userFactory.create(acc); } } } } return anonymous.get(); }
@java.lang.Override public void start() { if (!(started)) { org.apache.log4j.Logger deleteLogger = org.apache.log4j.LogManager.getLogger(com.googlesource.gerrit.plugins.deleteproject.DeleteLog.DELETE_LOG_NAME); deleteLogger.removeAllAppenders(); deleteLogger.addAppender(systemLog.createAsyncAppender(deleteLogger.getName(), new com.googlesource.gerrit.plugins.deleteproject.DeleteLogLayout())); deleteLogger.setAdditivity(false); started = true; } }
private com.google.gerrit.server.notedb.LoadHandle rebuildAndOpen(org.eclipse.jgit.lib.Repository repo) throws java.io.IOException { try { com.google.gerrit.server.notedb.NoteDbChangeState newState = args.rebuilder.get().rebuild(args.db.get(), getChangeId()); if (newState == null) { return super.openHandle(repo); } repo.scanForRepoChanges(); return com.google.gerrit.server.notedb.LoadHandle.create(new org.eclipse.jgit.revwalk.RevWalk(repo), newState.getChangeMetaId()); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { return super.openHandle(repo); } catch (com.google.gwtorm.server.OrmException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new java.io.IOException(e); } }
private java.util.Map<java.lang.String, java.util.Set<java.lang.String>> extractFrom(RefUpdatedEvent event, java.util.Set<com.googlesource.gerrit.plugins.its.base.workflow.Property> common) { common.add(propertyFactory.create("event-type", event.type)); common.addAll(propertyAttributeExtractor.extractFrom(event.submitter.get(), "submitter")); common.addAll(propertyAttributeExtractor.extractFrom(event.refUpdate.get())); return issueExtractor.getIssueIds(event.refUpdate.get().project, event.refUpdate.get().newRev); }
@org.junit.Test public void shouldFireOneReplicationEventWhenNothingToReplicate() { resetToDefault(pushResultProcessingMock); pushResultProcessingMock.onAllRefsReplicatedToAllNodes(0); replay(pushResultProcessingMock); replicationState.markAllPushTasksScheduled(); verify(pushResultProcessingMock); }
void setupPrevNextFiles(com.google.gerrit.client.diff.CommentsCollections comments) { com.google.gerrit.client.info.FileInfo prevInfo = null; com.google.gerrit.client.info.FileInfo nextInfo = null; int currIndex = findCurrentFileIndex(files); for (int i = currIndex - 1; i >= 0; i--) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (shouldSkipFile(curr, comments)) { continue; } else { prevInfo = curr; break; } } for (int i = currIndex + 1; i < (files.length()); i++) { com.google.gerrit.client.info.FileInfo curr = files.get(i); if (shouldSkipFile(curr, comments)) { continue; } else { nextInfo = curr; break; } } com.google.gwtexpui.globalkey.client.KeyCommand p = setupNav(prev, '[', PatchUtil.C.previousFileHelp(), prevInfo); com.google.gwtexpui.globalkey.client.KeyCommand n = setupNav(next, ']', PatchUtil.C.nextFileHelp(), nextInfo); if ((p != null) && (n != null)) { keys.pair(p, n); } nextPath = (nextInfo != null) ? nextInfo.path() : null; }
@java.lang.Override public synchronized void doFilter(javax.servlet.ServletRequest sreq, javax.servlet.ServletResponse sres, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { javax.servlet.http.HttpServletResponse res = ((javax.servlet.http.HttpServletResponse) (sres)); try { com.google.gerrit.httpd.raw.BuckUtils.build(root, gen, com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET); } catch (com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckUtils.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, e.why, res); return; } if (!(java.nio.file.Files.exists(zip))) { java.lang.String msg = "`buck build` did not produce " + (zip.toAbsolutePath()); com.google.gerrit.httpd.raw.BuckUtils.displayFailure(com.google.gerrit.httpd.raw.RebuildBowerComponentsFilter.TARGET, msg.getBytes(java.nio.charset.StandardCharsets.UTF_8), res); } com.google.gerrit.launcher.GerritLauncher.reloadZipFileSystem(zip); chain.doFilter(sreq, sres); }
public Account.Id getNullableAccountId() { return accountId; }
@java.lang.Override public java.lang.String getRevision(com.google.gerrit.reviewdb.client.PatchSet.Id patchSetId) { try { com.google.gerrit.extensions.common.ChangeInfo info = gApi.changes().id(patchSetId.getParentKey().get()).get(java.util.EnumSet.of(ListChangesOption.ALL_REVISIONS)); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.extensions.common.RevisionInfo> e : info.revisions.entrySet()) { if ((e.getValue()._number) == (patchSetId.get())) { return e.getKey(); } } return null; } catch (com.google.gerrit.extensions.restapi.RestApiException e) { } return null; }
@java.lang.Override public java.lang.String getChangeAvatarUrl(com.google.gerrit.server.IdentifiedUser forUser) { return changeAvatarUrl; }
void display(int patchIndex, com.google.gerrit.client.patches.PatchScreen.Type type, com.google.gerrit.client.changes.PatchTable fileList, java.util.List<com.google.gerrit.client.ui.InlineHyperlink> links) { if (fileList != null) { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, fileList.getPreviousPatchLink(patchIndex, type)); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, fileList.getNextPatchLink(patchIndex, type)); } else { setupNav(com.google.gerrit.client.patches.NavLinks.Nav.PREV, null); setupNav(com.google.gerrit.client.patches.NavLinks.Nav.NEXT, null); } com.google.gwt.user.client.ui.FlowPanel linkPanel = new com.google.gwt.user.client.ui.FlowPanel(); for (com.google.gerrit.client.ui.InlineHyperlink link : links) { linkPanel.add(link); } table.setWidget(0, 2, linkPanel); }
static java.lang.String computeFromRequest(javax.servlet.http.HttpServletRequest req) { java.lang.StringBuffer url = req.getRequestURL(); try { url = new java.lang.StringBuffer(java.net.URLDecoder.decode(url.toString(), java.nio.charset.StandardCharsets.UTF_8.name())); url.setLength(((url.length()) - (req.getServletPath().length()))); if ((url.charAt(((url.length()) - 1))) != '/') { url.append('/'); } return url.toString(); } catch (java.io.UnsupportedEncodingException e) { throw new java.lang.IllegalStateException(("Unsupported encoding for request URL " + url), e); } }
@java.lang.Override public void removeMembers(java.lang.String... members) throws com.google.gerrit.extensions.restapi.RestApiException { try { deleteMembers.apply(rsrc, AddMembers.Input.fromMembers(java.util.Arrays.asList(members))); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot remove group members", e); } }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.server.account.PutName.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { com.google.gerrit.server.IdentifiedUser s = ((com.google.gerrit.server.IdentifiedUser) (self.get())); if (((s.getAccountId().get()) != (rsrc.getUser().getAccountId().get())) && (!(self.get().getCapabilities().canAdministrateServer()))) { throw new com.google.gerrit.extensions.restapi.AuthException("not allowed to change name"); } if (!(realm.allowsEdit(FieldName.FULL_NAME))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("The realm doesn't allow editing names"); } if (input == null) { input = new com.google.gerrit.server.account.PutName.Input(); } com.google.gerrit.reviewdb.client.Account a = dbProvider.get().accounts().get(rsrc.getUser().getAccountId()); if (a == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(("No such account: " + (rsrc.getUser().getAccountId()))); } a.setFullName(input.name); dbProvider.get().accounts().update(java.util.Collections.singleton(a)); byIdCache.evict(a.getId()); return com.google.common.base.Strings.isNullOrEmpty(a.getFullName()) ? com.google.gerrit.extensions.restapi.Response.none() : a.getFullName(); }
@java.lang.Override public void delete(com.google.gerrit.reviewdb.client.Project project) throws com.google.gwtorm.server.OrmException { java.sql.Connection conn = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection(); try { conn.setAutoCommit(false); try { atomicDelete(project); conn.commit(); } finally { conn.setAutoCommit(true); } } catch (java.sql.SQLException e) { try { conn.rollback(); } catch (java.sql.SQLException ex) { throw new com.google.gwtorm.server.OrmException(ex); } throw new com.google.gwtorm.server.OrmException(e); } }
java.lang.String isWorkInProgress();
@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.api.Section database) { boolean hasUrl = (com.google.common.base.Strings.emptyToNull(database.get("url"))) != null; database.string("URL", "url", null); guessDriver(database); database.string("Driver class name", "driver", null); database.string("Database username", "username", (hasUrl ? null : com.google.gerrit.pgm.init.InitUtil.username())); database.password("username", "password"); }
private void display() throws com.google.gerrit.sshd.commands.Failure { final java.io.PrintWriter stdout = toPrintWriter(out); try { final com.google.gerrit.server.account.VisibleGroups visibleGroups = visibleGroupsFactory.create(); visibleGroups.setProjects(projects); visibleGroups.setOnlyVisibleToAll(visibleToAll); visibleGroups.setGroupType(groupType); final com.google.gerrit.common.data.GroupList groupList = visibleGroups.get(); for (final GroupDetail groupDetail : groupList.getGroups()) { stdout.print(((groupDetail.group.getName()) + "\n")); } } catch (com.google.gwtorm.client.OrmException e) { throw die(e); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw die(e); } finally { stdout.flush(); } }
boolean isReviewed() { return checkBox.getValue(); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.client.OrmException, java.sql.SQLException { db.approvalCategoryValues().insert(java.util.Collections.singleton(new com.google.gerrit.reviewdb.ApprovalCategoryValue(new com.google.gerrit.reviewdb.ApprovalCategoryValue.Id(com.google.gerrit.reviewdb.ApprovalCategory.READ, ((short) (3))), "Upload merges permission"))); java.sql.Statement stmt = ((com.google.gwtorm.jdbc.JdbcSchema) (db)).getConnection().createStatement(); try { stmt.execute(((("UPDATE ref_rights SET max_value = 3" + " WHERE category_id = '") + (ApprovalCategory.READ.get())) + "' AND max_value = 2")); } finally { stmt.close(); } }
@org.junit.Test public void testTokenOnTime() throws java.lang.Exception { java.time.Instant when = java.time.Instant.now(); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken token = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(when, 1L); com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier verifier = new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestTokenVerifier(token); assertThat(verifier.onTime(when.plusMillis(999))).isTrue(); }
private com.google.inject.Injector createWebInjector() { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(com.google.gerrit.httpd.CacheBasedWebSession.module()); modules.add(com.google.gerrit.server.contact.HttpContactStoreConnection.module()); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.WebModule.class)); modules.add(sysInjector.getInstance(com.google.gerrit.httpd.GitOverHttpModule.class)); if (sshd) { modules.add(sshInjector.getInstance(com.google.gerrit.httpd.WebSshGlueModule.class)); modules.add(new com.google.gerrit.pgm.http.jetty.ProjectQoSFilter.Module()); } else { modules.add(new com.google.gerrit.server.ssh.NoSshModule()); } return sysInjector.createChildInjector(modules); }
private void loadStoreFromProjectConfig(java.lang.String projectName, com.google.gerrit.server.git.ProjectConfig config) throws java.io.IOException, javax.xml.bind.JAXBException, org.eclipse.jgit.errors.ConfigInvalidException { java.lang.String newStore = config.getPluginConfig(pluginName).getString(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_STORE); if (newStore != null) { newStore = newStore.trim(); if (!(newStore.isEmpty())) { java.util.Set<java.lang.String> branches = com.amd.gerrit.plugins.manifestsubscription.Sets.newHashSet(config.getPluginConfig(pluginName).getStringList(com.amd.gerrit.plugins.manifestsubscription.ManifestSubscription.KEY_BRANCH)); if ((branches.size()) > 0) { com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig ppc = new com.amd.gerrit.plugins.manifestsubscription.PluginProjectConfig(newStore, branches); enabledManifestSource.put(projectName, ppc); com.google.gerrit.reviewdb.client.Project.NameKey nameKey = new com.google.gerrit.reviewdb.client.Project.NameKey(projectName); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests versionedManifests; for (java.lang.String branch : branches) { versionedManifests = parseManifests(nameKey, branch); processManifestChange(versionedManifests, projectName, branch); } } } } }
private native final java.lang.String configuredValueRaw();
@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { final com.google.gerrit.reviewdb.client.Change.Id changeId = patchSetId.getParentKey(); final com.google.gerrit.server.project.ChangeControl control = changeControlFactory.validateFor(changeId); if (!(control.canAddPatchSet())) { throw new com.google.gerrit.server.project.InvalidChangeOperationException(("Not allowed to add new Patch Sets to: " + (changeId.toString()))); } com.google.gerrit.server.ChangeUtil.editCommitMessage(patchSetId, currentUser, message, db, hooks, gitManager, patchSetInfoFactory, replication, myIdent); return changeDetailFactory.create(changeId).call(); }
private void addToImportedUsersGroup(com.google.gerrit.reviewdb.client.Account.Id id) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.AccountGroup group = getImportedUsersGroup(); com.google.gerrit.reviewdb.client.AccountGroupMember member = new com.google.gerrit.reviewdb.client.AccountGroupMember(new com.google.gerrit.reviewdb.client.AccountGroupMember.Key(id, group.getId())); db.get().accountGroupMembers().insert(java.util.Collections.singleton(member)); }
@java.lang.Override public com.google.gerrit.server.project.ProjectResource parse(com.google.gerrit.extensions.restapi.TopLevelResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException { com.google.gerrit.server.project.ProjectResource rsrc = _parse(id.get(), true); if (rsrc == null) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } return rsrc; }
@org.junit.Test public void deleteEditRest() throws java.lang.Exception { assertEquals(RefUpdate.Result.NEW, modifier.createEdit(change, ps)); assertEquals(RefUpdate.Result.FORCED, modifier.modifyFile(editUtil.byChange(change).get(), com.google.gerrit.acceptance.edit.ChangeEditIT.FILE_NAME, com.google.gerrit.acceptance.edit.ChangeEditIT.CONTENT_NEW)); com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(change); com.google.gerrit.acceptance.RestResponse r = session.delete(urlEdit()); assertEquals(com.google.gerrit.acceptance.edit.SC_NO_CONTENT, r.getStatusCode()); edit = editUtil.byChange(change); assertFalse(edit.isPresent()); }
@java.lang.Override public java.util.Collection<com.google.gerrit.common.data.GroupReference> suggest(java.lang.String name, com.google.gerrit.server.project.ProjectControl project) { java.lang.String nameLC = name.toLowerCase(java.util.Locale.US); java.util.SortedMap<java.lang.String, com.google.gerrit.common.data.GroupReference> matches = com.google.gerrit.server.group.SystemGroupBackend.names.tailMap(nameLC); if (matches.isEmpty()) { return java.util.Collections.emptyList(); } java.util.List<com.google.gerrit.common.data.GroupReference> r = new java.util.ArrayList(matches.size()); for (java.util.Map.Entry<java.lang.String, com.google.gerrit.common.data.GroupReference> e : matches.entrySet()) { if (e.getKey().startsWith(nameLC)) { r.add(e.getValue()); } else { break; } } return r; }
@java.lang.Override public void beforeRefresh() throws java.io.IOException { }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.server.change.CommentInfo> apply(com.google.gerrit.server.change.DraftResource rsrc, com.google.gerrit.server.change.DeleteDraft.Input input) throws com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(rsrc.getControl()); com.google.gerrit.reviewdb.client.PatchLineComment c = rsrc.getComment(); com.google.gerrit.server.PatchLineCommentsUtil.setCommentRevId(c, patchListCache, rsrc.getChange(), rsrc.getPatchSet()); plcUtil.deleteComments(db.get(), update, java.util.Collections.singleton(c)); update.commit(); return com.google.gerrit.extensions.restapi.Response.none(); }
public final native short value();
@java.lang.Override public void apply(org.eclipse.jgit.dircache.DirCacheEntry ent) { try { if ((ent.getFileMode()) == (org.eclipse.jgit.lib.FileMode.GITLINK)) { ent.setLength(0); ent.setLastModified(0); ent.setObjectId(org.eclipse.jgit.lib.ObjectId.fromString(com.google.common.io.ByteStreams.toByteArray(content.getInputStream()), 0)); } else { if ((ent.getRawMode()) == 0) { ent.setFileMode(FileMode.REGULAR_FILE); } ent.setObjectId(com.google.gerrit.server.edit.ChangeEditModifier.toBlob(ins, content)); } } catch (java.io.IOException e) { ioe.set(e); } catch (org.eclipse.jgit.errors.InvalidObjectIdException e) { icoe.set(new com.google.gerrit.server.project.InvalidChangeOperationException(("Invalid object id in submodule link: " + (e.getMessage())))); icoe.get().initCause(e); } }
private com.google.inject.Injector createSshInjector(final com.google.inject.Injector sysInjector) { final java.util.List<java.lang.Module> modules = new java.util.ArrayList<java.lang.Module>(); modules.add(new com.google.gerrit.server.ssh.SshModule()); if (slave) { modules.add(new com.google.gerrit.server.ssh.commands.SlaveCommandModule()); } else { modules.add(new com.google.gerrit.server.ssh.commands.MasterCommandModule()); } return sysInjector.createChildInjector(modules); }
protected void onMovePointerTo(java.lang.String projectName) { }
public com.google.gerrit.server.diff.PatchListCache getPatchListCache() { return patchListCache; }
@java.lang.Override public boolean match(com.google.gerrit.server.query.change.ChangeData cd) throws com.google.gwtorm.server.OrmException { if (cd.fastIsVisibleTo(user)) { return true; } com.google.gerrit.reviewdb.client.Change change = cd.change(); if (change == null) { return false; } com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.createFromIndexedChange(change); boolean visible; try { visible = permissionBackend.user(user).indexedChange(cd, notes).database(db).test(ChangePermission.READ); } catch (com.google.gerrit.server.permissions.PermissionBackendException e) { if ((e.getCause()) instanceof com.google.gerrit.server.project.NoSuchProjectException) { com.google.gerrit.server.query.change.ChangeIsVisibleToPredicate.logger.info("No such project: {}", cd.project()); return false; } throw new com.google.gwtorm.server.OrmException("unable to check permissions", e); } if (visible) { cd.cacheVisibleTo(user); return true; } return false; }
public final java.util.Map<java.lang.String, java.lang.String> urlAliases() { java.util.Map<java.lang.String, java.lang.String> urlAliases = new java.util.HashMap<>(); for (java.lang.String k : com.google.gerrit.client.rpc.Natives.keys(_urlAliases())) { urlAliases.put(k, urlAliasToken(k)); } return urlAliases; }
@org.junit.After public void tearDown() { drop("SEQUENCE address_id"); drop("SEQUENCE cnt"); drop("TABLE addresses"); drop("TABLE foo"); drop("TABLE bar"); drop("TABLE people"); if ((executor) != null) { executor.close(); } executor = null; if ((db) != null) { try { db.close(); } catch (java.sql.SQLException e) { throw new java.lang.RuntimeException("Cannot close database", e); } } db = null; }
@javax.annotation.Nullable public com.google.inject.Injector getSshInjector() { return sshInjector; }
@org.junit.Test public void moreThanOnePage() throws java.lang.Exception { java.util.List<org.eclipse.jgit.revwalk.RevCommit> commits = linearCommits(5); walk.markStart(commits.get(4)); com.google.gitiles.Paginator p = new com.google.gitiles.Paginator(walk, 3, null); assertEquals(com.google.common.collect.ImmutableList.of(commits.get(4), commits.get(3), commits.get(2)), com.google.common.collect.ImmutableList.copyOf(p)); assertNull(p.getPreviousStart()); assertEquals(commits.get(1), p.getNextStart()); }
public static com.google.gerrit.server.account.AccountSshKey create(com.google.gerrit.reviewdb.client.Account.Id accountId, int seq, java.lang.String sshPublicKey, boolean valid) { return new com.google.gerrit.server.account.AutoValue_AccountSshKey.Builder().setAccountId(accountId).setSeq(seq).setSshPublicKey(com.google.gerrit.server.account.AccountSshKey.stripOffNewLines(sshPublicKey)).setValid((valid && (seq > 0))).build(); }
static java.lang.Module module() { return new com.google.gerrit.server.cache.CacheModule() { @java.lang.Override protected void configure() { bind(com.google.gerrit.server.notedb.ChangeNotesCache.class); cache(com.google.gerrit.server.notedb.ChangeNotesCache.CACHE_NAME, com.google.gerrit.server.notedb.ChangeNotesCache.Key.class, com.google.gerrit.server.notedb.ChangeNotesState.class).maximumWeight(1000); } }; }
com.google.gerrit.extensions.common.CommitInfo toCommit(com.google.gerrit.reviewdb.client.PatchSet in, com.google.gerrit.reviewdb.client.Project.NameKey project, boolean addLinks) throws com.google.gerrit.server.patch.PatchSetInfoNotAvailableException { com.google.gerrit.reviewdb.client.PatchSetInfo info = patchSetInfoFactory.get(db.get(), in.getId()); com.google.gerrit.extensions.common.CommitInfo commit = new com.google.gerrit.extensions.common.CommitInfo(); commit.parents = com.google.common.collect.Lists.newArrayListWithCapacity(info.getParents().size()); commit.author = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getAuthor()); commit.committer = com.google.gerrit.server.change.ChangeJson.toGitPerson(info.getCommitter()); commit.subject = info.getSubject(); commit.message = info.getMessage(); if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> links = webLinks.getPatchSetLinks(project, in.getRevision().get()); commit.webLinks = (links.isEmpty()) ? null : links.toList(); } for (ParentInfo parent : info.getParents()) { com.google.gerrit.extensions.common.CommitInfo i = new com.google.gerrit.extensions.common.CommitInfo(); i.commit = parent.id.get(); i.subject = parent.shortMessage; if (addLinks) { com.google.common.collect.FluentIterable<com.google.gerrit.extensions.common.WebLinkInfo> parentLinks = webLinks.getPatchSetLinks(project, parent.id.get()); i.webLinks = (parentLinks.isEmpty()) ? null : parentLinks.toList(); } commit.parents.add(i); } return commit; }
private void initPluginOptions(com.google.gerrit.client.projects.ConfigInfo info) { pluginOptionsPanel.clear(); pluginConfigWidgets = new java.util.HashMap<java.lang.String, java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>>(); for (java.lang.String pluginName : info.pluginConfig().keySet()) { java.util.Map<java.lang.String, com.google.gwt.user.client.ui.FocusWidget> widgetMap = new java.util.HashMap<java.lang.String, com.google.gwt.user.client.ui.FocusWidget>(); pluginConfigWidgets.put(pluginName, widgetMap); com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid g = new com.google.gerrit.client.admin.ProjectInfoScreen.LabeledWidgetsGrid(); g.addHeader(new com.google.gerrit.client.ui.SmallHeading(Util.M.pluginProjectOptionsTitle(pluginName))); pluginOptionsPanel.add(g); com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo> pluginConfig = info.pluginConfig(pluginName); pluginConfig.copyKeysIntoChildren("name"); for (com.google.gerrit.client.projects.ConfigInfo.ConfigParameterInfo param : com.google.gerrit.client.rpc.Natives.asList(pluginConfig.values())) { com.google.gwt.user.client.ui.FocusWidget w; if ("STRING".equals(param.type())) { w = renderTextBox(g, param, false); } else if (("INT".equals(param.type())) || ("LONG".equals(param.type()))) { w = renderTextBox(g, param, true); } else { continue; } widgetMap.put(param.name(), w); } } enableForm(); }
@java.lang.Override public void postUpdate(com.google.gerrit.server.git.BatchUpdate.Context ctx) throws com.google.gwtorm.server.OrmException { if (sendMail) { java.lang.Runnable sender = new java.lang.Runnable() { @java.lang.Override public void run() { try { com.google.gerrit.server.mail.CreateChangeSender cm = createChangeSenderFactory.create(change.getId()); cm.setFrom(change.getOwner()); cm.setPatchSet(patchSet, patchSetInfo); cm.addReviewers(reviewers); cm.addExtraCC(extraCC); cm.send(); } catch (java.lang.Exception e) { com.google.gerrit.server.change.ChangeInserter.log.error(("Cannot send email for new change " + (change.getId())), e); } } @java.lang.Override public java.lang.String toString() { return "send-email newchange"; } }; if ((requestScopePropagator) != null) { workQueue.getDefaultQueue().submit(requestScopePropagator.wrap(sender)); } else { sender.run(); } } if (runHooks) { com.google.gerrit.reviewdb.server.ReviewDb db = ctx.getDb(); hooks.doPatchsetCreatedHook(change, patchSet, db); if (((approvals) != null) && (!(approvals.isEmpty()))) { hooks.doCommentAddedHook(change, ((com.google.gerrit.server.IdentifiedUser) (refControl.getCurrentUser())).getAccount(), patchSet, null, approvals, db); } } }
private static com.googlecode.prolog_cafe.lang.StructureTerm makeLabel(java.lang.String name, java.lang.String status, TestAccount account) { com.googlecode.prolog_cafe.lang.StructureTerm user = new com.googlecode.prolog_cafe.lang.StructureTerm("user", new com.googlecode.prolog_cafe.lang.IntegerTerm(account.id.get())); return new com.googlecode.prolog_cafe.lang.StructureTerm("label", new com.googlecode.prolog_cafe.lang.StructureTerm(name), new com.googlecode.prolog_cafe.lang.StructureTerm(status, user)); }
public java.util.stream.Stream<com.google.gerrit.reviewdb.client.AccountGroup.Id> getParentGroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid) throws com.google.gwtorm.server.OrmException { com.google.gwtorm.server.ResultSet<com.google.gerrit.reviewdb.client.AccountGroupById> accountGroupByIds = db.accountGroupById().byIncludeUUID(includedGroupUuid); return com.google.common.collect.Streams.stream(accountGroupByIds).map(AccountGroupById::getGroupId); }
@java.lang.Override public void stop() { try { searcherManager.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn("error closing Lucene searcher", e); } try { writer.close(true); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn("error closing Lucene writer", e); } try { dir.close(); } catch (java.io.IOException e) { com.google.gerrit.lucene.LuceneChangeIndex.log.warn("error closing Lucene directory", e); } }
abstract com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> pastAssignees();
void reset() { clear(); rEntries = new java.util.HashSet<>(); }
@java.lang.Override void clearLine(com.google.gerrit.client.diff.DisplaySide side, int line, com.google.gerrit.client.diff.CommentGroup group) { super.clearLine(side, line, group); if ((mergedMap.get(line)) == group) { mergedMap.remove(line); if (duplicates.containsKey(line)) { mergedMap.put(line, duplicates.remove(line)); } } }
@java.lang.Override public java.lang.Class<com.google.gerrit.server.group.PutMembers.Input> inputType() { return com.google.gerrit.server.group.PutMembers.Input.class; }
public java.util.List<java.lang.String> currentFilePaths() throws com.google.gwtorm.server.OrmException, java.io.IOException { if ((currentFiles) == null) { if (!(lazyLoad)) { return java.util.Collections.emptyList(); } java.util.Optional<com.google.gerrit.server.diff.DiffSummary> p = getDiffSummary(); currentFiles = p.map(DiffSummary::getPaths).orElse(java.util.Collections.emptyList()); } return currentFiles; }
public native final short min();
@org.junit.Test public void keyRevokedByExpiredKeyBeforeExpirationIsRevoked() throws java.lang.Exception { com.google.gerrit.gpg.testutil.TestKey k = add(keyRevokedByExpiredKeyBeforeExpiration()); add(expiredKey()); save(); com.google.gerrit.gpg.PublicKeyChecker checker = new com.google.gerrit.gpg.PublicKeyChecker().setStore(store); assertProblems(checker, k, "Key is revoked (retired and no longer valid): test9 not used"); checker.setEffectiveTime(com.google.gerrit.gpg.PublicKeyCheckerTest.parseDate("2005-08-01 13:00:00 -0400")); assertProblems(checker, k); }
@java.lang.Override public com.google.gerrit.extensions.common.CommentInfo update(com.google.gerrit.extensions.api.changes.DraftInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { return putDraft.apply(draft, in).value(); } catch (java.io.IOException | com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot update draft", e); } }
public static java.util.List<java.lang.String> transformMessages(java.util.List<com.google.gerrit.server.git.validators.CommitValidationMessage> messages) { return com.google.common.collect.Lists.transform(messages, new com.google.common.base.Function<com.google.gerrit.server.git.validators.CommitValidationMessage, java.lang.String>() { @java.lang.Override public java.lang.String apply(com.google.gerrit.server.git.validators.CommitValidationMessage input) { java.lang.String pre = (input.isError()) ? "ERROR: " : "MSG: "; return pre + (input.getMessage()); } }); }
@java.lang.Override public com.google.gerrit.server.change.FileResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) { return new com.google.gerrit.server.change.FileResource(rev, id.get()); }
@org.junit.Test public void parseAndPersistChangeMessage() throws java.lang.Exception { java.lang.String changeId = createChangeWithReview(); com.google.gerrit.extensions.common.ChangeInfo changeInfo = gApi.changes().id(changeId).get(); java.util.List<com.google.gerrit.extensions.common.CommentInfo> comments = gApi.changes().id(changeId).current().commentsAsList(); java.lang.String ts = MailUtil.rfcDateformatter.format(java.time.ZonedDateTime.ofInstant(comments.get(0).updated.toInstant(), java.time.ZoneId.of("UTC"))); com.google.gerrit.server.mail.receive.MailMessage.Builder b = messageBuilderWithDefaultFields(); java.lang.String txt = com.google.gerrit.acceptance.server.mail.MailProcessorIT.newPlaintextBody(((((canonicalWebUrl.get()) + "#/c/") + (changeInfo._number)) + "/1"), "Test Message", null, null, null); b.textContent((txt + (com.google.gerrit.acceptance.server.mail.MailProcessorIT.textFooterForChange(changeId, ts)))); mailProcessor.process(b.build()); java.util.Collection<com.google.gerrit.extensions.common.ChangeMessageInfo> messages = gApi.changes().id(changeId).get().messages; assertThat(messages).hasSize(3); assertThat(com.google.common.collect.Iterables.getLast(messages).message).isEqualTo("Patch Set 1:\nTest Message"); assertThat(com.google.common.collect.Iterables.getLast(messages).tag).isEqualTo("mailMessageId=some id"); }
public boolean hasAnyAccount() throws java.io.IOException { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allUsersName)) { return com.google.gerrit.server.account.Accounts.hasAnyAccount(repo); } }
@org.junit.Test public void reduceComplexTreeToSingleValue() throws java.lang.Exception { com.google.gerrit.extensions.conditions.BooleanCondition nonReduced = com.google.gerrit.extensions.conditions.BooleanCondition.and(com.google.gerrit.extensions.conditions.BooleanCondition.or(com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION, com.google.gerrit.extensions.conditions.BooleanConditionTest.NO_TRIVIAL_EVALUATION), com.google.gerrit.extensions.conditions.BooleanCondition.not(com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(true))); com.google.gerrit.extensions.conditions.BooleanCondition reduced = com.google.gerrit.extensions.conditions.BooleanCondition.valueOf(false); assertEquals(nonReduced.reduce(), reduced); }
@com.google.gwt.uibinder.client.UiHandler("deleteEdit") void onDeleteEdit(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if (com.google.gwt.user.client.Window.confirm(Resources.C.deleteChangeEdit())) { com.google.gerrit.client.change.EditActions.deleteEdit(getProject(), changeId, publishEdit, rebaseEdit, deleteEdit); } }
private void addCreateGroupPanel() { com.google.gwt.user.client.ui.VerticalPanel addPanel = new com.google.gwt.user.client.ui.VerticalPanel(); addPanel.setStyleName(Gerrit.RESOURCES.css().addSshKeyPanel()); addPanel.add(new com.google.gerrit.client.ui.SmallHeading(Util.C.headingCreateGroup())); addTxt = new com.google.gwtexpui.globalkey.client.NpTextBox() { @java.lang.Override public void onBrowserEvent(com.google.gwt.user.client.Event event) { super.onBrowserEvent(event); if ((event.getTypeInt()) == (com.google.gwt.user.client.Event.ONPASTE)) { com.google.gwt.core.client.Scheduler.get().scheduleDeferred(new com.google.gwt.core.client.Scheduler.ScheduledCommand() { @java.lang.Override public void execute() { if ((addTxt.getValue().trim().length()) != 0) { addNew.setEnabled(true); } } }); } } }; addTxt.sinkEvents(Event.ONPASTE); addTxt.setVisibleLength(60); addTxt.addKeyPressHandler(new com.google.gwt.event.dom.client.KeyPressHandler() { @java.lang.Override public void onKeyPress(com.google.gwt.event.dom.client.KeyPressEvent event) { if ((event.getNativeEvent().getKeyCode()) == (com.google.gwt.event.dom.client.KeyCodes.KEY_ENTER)) { doCreateGroup(); } } }); addPanel.add(addTxt); addNew = new com.google.gwt.user.client.ui.Button(Util.C.buttonCreateGroup()); addNew.setEnabled(false); addNew.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { doCreateGroup(); } }); addPanel.add(addNew); add(addPanel); new com.google.gerrit.client.ui.OnEditEnabler(addNew, addTxt); }
private java.lang.String buildError(com.google.gerrit.server.git.ReceiveCommits.Error error, java.util.List<java.lang.String> branches) { java.lang.StringBuilder sb = new java.lang.StringBuilder(); if ((branches.size()) == 1) { sb.append("Branch ").append(branches.get(0)).append(":\n"); sb.append(error.get()); return sb.toString(); } sb.append("Branches"); java.lang.String delim = " "; for (java.lang.String branch : branches) { sb.append(delim).append(branch); delim = ", "; } return sb.append(":\n").append(error.get()).toString(); }
void setPaddingManager(com.google.gerrit.client.diff.PaddingManager manager) { widgetManager = manager; }
@org.junit.Test public void submitTypeIsUsedForSubmit() throws java.lang.Exception { setRulesPl(com.google.gerrit.acceptance.api.change.SubmitTypeRuleIT.SUBMIT_TYPE_FROM_SUBJECT); com.google.gerrit.acceptance.PushOneCommit.Result r = createChange("master", "CHERRY_PICK 1"); gApi.changes().id(r.getChangeId()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); gApi.changes().id(r.getChangeId()).current().submit(); java.util.List<org.eclipse.jgit.revwalk.RevCommit> log = log("master", 1); assertThat(log.get(0).getShortMessage()).isEqualTo("CHERRY_PICK 1"); assertThat(log.get(0).name()).isNotEqualTo(r.getCommit().name()); assertThat(log.get(0).getFullMessage()).contains(("Change-Id: " + (r.getChangeId()))); assertThat(log.get(0).getFullMessage()).contains("Reviewed-on: "); }
@org.junit.Test public void testSimpleAdvance() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 1), iter.advance(1)); }
public static void main(java.lang.String[] args) throws java.lang.Exception { new com.google.gitiles.dev.DevServer(com.google.gitiles.GitilesConfig.defaultFile()).start(); }
private void parse(org.eclipse.jgit.revwalk.RevCommit commit) throws org.eclipse.jgit.errors.ConfigInvalidException { com.google.gerrit.reviewdb.client.PatchSet.Id psId = parsePatchSetId(commit); com.google.gerrit.reviewdb.client.Account.Id accountId = parseIdent(commit); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> psas = approvals.get(psId); java.util.Map<java.lang.String, com.google.gerrit.reviewdb.client.PatchSetApproval> curr = com.google.common.collect.Maps.newHashMapWithExpectedSize(psas.size()); for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : psas) { if (psa.getAccountId().equals(accountId)) { curr.put(psa.getLabel(), psa); } } for (java.lang.String line : commit.getFooterLines(com.google.gerrit.server.notedb.ChangeNoteUtil.FOOTER_LABEL)) { com.google.gerrit.reviewdb.client.PatchSetApproval psa = parseApproval(psId, accountId, commit, line); if (!(curr.containsKey(psa.getLabel()))) { curr.put(psa.getLabel(), psa); psas.add(psa); } } }
com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse createLock(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.server.CurrentUser user, com.googlesource.gerrit.plugins.lfs.locks.LfsCreateLockInput input) throws org.eclipse.jgit.lfs.errors.LfsException { com.googlesource.gerrit.plugins.lfs.locks.LfsLocksHandler.log.debug("Create lock for {} in project {}", input.path, project); com.googlesource.gerrit.plugins.lfs.locks.LfsProjectLocks locks = projectLocks.getUnchecked(project); com.googlesource.gerrit.plugins.lfs.locks.LfsLock lock = locks.createLock(user, input); return new com.googlesource.gerrit.plugins.lfs.locks.LfsLockResponse(lock); }
private void appendHeader(java.lang.StringBuilder b, org.eclipse.jgit.revwalk.RevCommit commit) { org.eclipse.jgit.lib.PersonIdent author = commit.getAuthorIdent(); b.append("From ").append(commit.getId().getName()).append(" ").append(df.format(java.lang.Long.valueOf(java.lang.System.currentTimeMillis()))).append("\n"); b.append("From: ").append(author.getName()).append(" <").append(author.getEmailAddress()).append(">\n"); b.append("Date: ").append(df.format(author.getWhen())).append("\n"); b.append("Subject: [PATCH] ").append(commit.getShortMessage()); java.lang.String message = commit.getFullMessage().substring(commit.getShortMessage().length()); b.append(message).append("\n\n"); }
@java.lang.Override com.google.gerrit.server.mail.DeleteReviewerSender create(com.google.gerrit.reviewdb.client.Project.NameKey project, com.google.gerrit.reviewdb.client.Change.Id change);
@org.junit.Test public void noExternalIds() throws java.lang.Exception { com.google.gerrit.server.account.ExternalIdsUpdate externalIdsUpdate = externalIdsUpdateFactory.create(); externalIdsUpdate.deleteAll(db, user.getAccountId()); reloadUser(); com.google.gerrit.gpg.testutil.TestKey key = validKeyWithSecondUserId(); com.google.gerrit.gpg.PublicKeyChecker checker = checkerFactory.create(user, store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user; check http://test/#/settings/web-identities"); checker = checkerFactory.create().setStore(store).disableTrust(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "Key is not associated with any users"); externalIdsUpdate.insert(db, com.google.gerrit.server.account.ExternalId.create(com.google.gerrit.gpg.GerritPublicKeyChecker.toExtIdKey(key.getPublicKey()), user.getAccountId())); reloadUser(); assertProblems(checker.check(key.getPublicKey()), Status.BAD, "No identities found for user"); }
public boolean canReadCommit(com.google.gerrit.reviewdb.server.ReviewDb db, org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.revwalk.RevCommit commit) { try { org.eclipse.jgit.lib.Repository repo = openRepository(); try { return isMergedIntoVisibleRef(repo, db, rw, commit, repo.getAllRefs()); } finally { repo.close(); } } catch (java.io.IOException e) { java.lang.String msg = java.lang.String.format("Cannot verify permissions to commit object %s in repository %s", commit.name(), getProject().getNameKey()); com.google.gerrit.server.project.ProjectControl.log.error(msg, e); return false; } }
@java.lang.Override public void onBeanParseEnd(java.lang.String plugin, java.lang.Object bean) { com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand cmd = ((com.googlesource.gerrit.plugins.examples.adminsshcommand.AdminExampleCommand) (bean)); if (countSet) { cmd.setCount(count); } }
private void validateNewCommits(com.google.gerrit.server.project.RefControl ctl, org.eclipse.jgit.transport.ReceiveCommand cmd) { if ((((((((ctl.canForgeAuthor()) && (ctl.canForgeCommitter())) && (ctl.canForgeGerritServerIdentity())) && (ctl.canUploadMerges())) && (!(project.isUseSignedOffBy()))) && (com.google.common.collect.Iterables.isEmpty(rejectCommits))) && (!(GitRepositoryManager.REF_CONFIG.equals(ctl.getRefName())))) && (!((com.google.gerrit.server.util.MagicBranch.isMagicBranch(cmd.getRefName())) || (com.google.gerrit.server.git.ReceiveCommits.NEW_PATCHSET.matcher(cmd.getRefName()).matches())))) { return; } final org.eclipse.jgit.revwalk.RevWalk walk = rp.getRevWalk(); walk.reset(); walk.sort(RevSort.NONE); try { walk.markStart(walk.parseCommit(cmd.getNewId())); for (org.eclipse.jgit.lib.ObjectId id : existingObjects()) { try { walk.markUninteresting(walk.parseCommit(id)); } catch (java.io.IOException e) { continue; } } org.eclipse.jgit.revwalk.RevCommit c; while ((c = walk.next()) != null) { if (!(validCommit(ctl, cmd, c))) { break; } } } catch (java.io.IOException err) { cmd.setResult(com.google.gerrit.server.git.REJECTED_MISSING_OBJECT); com.google.gerrit.server.git.ReceiveCommits.log.error("Invalid pack upload; one or more objects weren't sent", err); } }
static void call(com.google.gwt.user.client.ui.Button b, final com.google.gerrit.reviewdb.client.Change.Id id, final java.lang.String revision, java.lang.String project, final java.lang.String commitSubject) { b.setEnabled(false); new com.google.gerrit.client.ui.ActionDialog(b, false, Util.C.revertChangeTitle(), Util.C.headingRevertMessage()) { { sendButton.setText(Util.C.buttonRevertChangeSend()); message.setText(Util.M.revertChangeDefaultMessage(commitSubject, revision)); } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.revert(id.get(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; hide(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange2(result.legacy_id())); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }
public boolean isMergeable() throws com.google.gwtorm.server.OrmException { if ((mergeable) == null) { com.google.gerrit.reviewdb.client.Change c = change(); if ((c.getStatus()) == (Change.Status.MERGED)) { mergeable = true; } else { com.google.gerrit.reviewdb.client.PatchSet ps = currentPatchSet(); org.eclipse.jgit.lib.Repository repo = null; try { repo = repoManager.openRepository(c.getProject()); org.eclipse.jgit.lib.Ref ref = repo.getRef(c.getDest().get()); com.google.gerrit.common.data.SubmitTypeRecord rec = new com.google.gerrit.server.project.SubmitRuleEvaluator(this).getSubmitType(); if ((rec.status) != (SubmitTypeRecord.Status.OK)) { throw new com.google.gwtorm.server.OrmException(("Error in mergeability check: " + (rec.errorMessage))); } java.lang.String mergeStrategy = mergeUtilFactory.create(projectCache.get(c.getProject())).mergeStrategyName(); mergeable = mergeabilityCache.get(org.eclipse.jgit.lib.ObjectId.fromString(ps.getRevision().get()), ref, rec.type, mergeStrategy, c.getDest(), repo, db); } catch (java.io.IOException e) { throw new com.google.gwtorm.server.OrmException(e); } finally { if (repo != null) { repo.close(); } } } } return mergeable; }
public void migrate() throws com.google.gwtorm.server.OrmException, java.io.IOException { checkState(((changes.isEmpty()) && (projects.isEmpty())), "cannot set changes or projects during auto-migration; call rebuild() instead"); java.util.Optional<com.google.gerrit.server.notedb.NotesMigrationState> maybeState = loadState(); if (!(maybeState.isPresent())) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException("Could not determine initial migration state"); } com.google.gerrit.server.notedb.NotesMigrationState state = maybeState.get(); if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) > 0)) { throw new com.google.gerrit.server.notedb.rebuild.MigrationException(("Migration has already progressed past the endpoint of the \"trial mode\" state;" + " NoteDb is already the primary storage for some changes")); } boolean rebuilt = false; while ((state.compareTo(NotesMigrationState.NOTE_DB_UNFUSED)) < 0) { if ((trial) && ((state.compareTo(NotesMigrationState.READ_WRITE_NO_SEQUENCE)) >= 0)) { return; } switch (state) { case REVIEW_DB : state = turnOnWrites(state); break; case WRITE : state = rebuildAndEnableReads(state); rebuilt = true; break; case READ_WRITE_NO_SEQUENCE : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = enableSequences(); break; case READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY : if ((forceRebuild) && (!rebuilt)) { state = rebuildAndEnableReads(state); rebuilt = true; } state = setNoteDbPrimary(); break; case READ_WRITE_WITH_SEQUENCE_NOTE_DB_PRIMARY : state = disableReviewDb(); break; case NOTE_DB_UNFUSED : break; case NOTE_DB : default : throw new com.google.gerrit.server.notedb.rebuild.MigrationException(("Migration out of the following state is not supported:\n" + (state.toText()))); } } }
@org.junit.Test public void memberAuditLegacyRemoved() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup g = newGroup("a"); com.google.gerrit.server.group.db.GroupBundle b = com.google.gerrit.server.group.db.GroupRebuilderTest.builder().group(g).members(member(g, 2)).memberAudit(addAndLegacyRemoveMember(g, 1, 8, com.google.gerrit.common.TimeUtil.nowTs()), addMember(g, 2, 8, com.google.gerrit.common.TimeUtil.nowTs())).build(); rebuilder.rebuild(repo, b, null); assertMigratedCleanly(reload(g), b); com.google.common.collect.ImmutableList<com.google.gerrit.extensions.common.CommitInfo> log = log(g); assertThat(log).hasSize(4); assertServerCommit(log.get(0), "Create group"); assertCommit(log.get(1), "Update group\n\nAdd: Account 1 <1@server-id>", "Account 8", "8@server-id"); assertCommit(log.get(2), "Update group\n\nRemove: Account 1 <1@server-id>", "Account 8", "8@server-id"); assertCommit(log.get(3), "Update group\n\nAdd: Account 2 <2@server-id>", "Account 8", "8@server-id"); }
private static com.google.gerrit.plugin.client.rpc.RestApi edit(int id) { return com.googlesource.gerrit.plugins.xdocs.client.ChangeApi.change(id).view("edit"); }
private void setUp(java.lang.Object target) throws java.lang.Exception { com.google.inject.Injector injector = com.google.inject.Guice.createInjector(new com.google.gerrit.testing.InMemoryModule()); injector.injectMembers(this); lifecycle = new com.google.gerrit.lifecycle.LifecycleManager(); lifecycle.add(injector); lifecycle.start(); try (com.google.gerrit.reviewdb.server.ReviewDb underlyingDb = inMemoryDatabase.getDatabase().open()) { schemaCreator.create(underlyingDb); } db = schemaFactory.open(); setApiUser(accountManager.authenticate(com.google.gerrit.server.account.AuthRequest.forUser("user")).getAccountId()); injector.injectMembers(target); }
@java.lang.Override protected void display(com.googlesource.gerrit.plugins.xdocs.client.ChangeInfo change) { java.lang.String frameIdA = "xdoc_sidebyside_diff_a_iframe"; com.google.gwt.user.client.ui.Frame frameA = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideA(), getPath())); frameA.getElement().setId(frameIdA); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameA, frameIdA); java.lang.String frameIdB = "xdoc_sidebyside_diff_b_iframe"; com.google.gwt.user.client.ui.Frame frameB = new com.google.gwt.user.client.ui.Frame(com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.getUrl(change.project(), getRevisionSideB(), getPath())); frameB.getElement().setId(frameIdB); com.googlesource.gerrit.plugins.xdocs.client.XDocScreen.resize(frameB, frameIdB); com.google.gwt.user.client.ui.HorizontalPanel p = new com.google.gwt.user.client.ui.HorizontalPanel(); p.setVerticalAlignment(com.googlesource.gerrit.plugins.xdocs.client.ALIGN_MIDDLE); p.setStyleName("xdocs-sidebyside-panel"); p.add(frameA); p.add(frameB); add(p); }
public com.google.gerrit.extensions.common.GroupInfo format(com.google.gerrit.server.group.GroupResource rsrc) throws com.google.gwtorm.server.OrmException { return createGroupInfo(rsrc.getGroup(), rsrc::getControl); }
private void appendLineText(final com.google.gwtexpui.safehtml.client.SafeHtmlBuilder m, boolean syntaxHighlighting, final com.google.gerrit.client.patches.PatchLine.Type type, final com.google.gerrit.prettify.common.SparseHtmlFile src, final int i) { final com.google.gwtexpui.safehtml.client.SafeHtml text = src.getSafeHtmlLine(i); m.openTd(); m.setStyleName(Gerrit.RESOURCES.css().fileLine()); m.addStyleName(Gerrit.RESOURCES.css().diffText()); switch (type) { case Type.CONTEXT : m.addStyleName(Gerrit.RESOURCES.css().diffTextCONTEXT()); m.nbsp(); m.append(text); break; case Type.DELETE : m.addStyleName(Gerrit.RESOURCES.css().diffTextDELETE()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineDELETE()); } m.append("-"); m.append(text); break; case Type.INSERT : m.addStyleName(Gerrit.RESOURCES.css().diffTextINSERT()); if (syntaxHighlighting) { m.addStyleName(Gerrit.RESOURCES.css().fileLineINSERT()); } m.append("+"); m.append(text); break; } m.closeTd(); }
@java.lang.Override protected boolean getDeleteCaches() { return deleteCaches; }
private void appendFileLine(java.lang.StringBuilder cmts, com.google.gerrit.server.patch.PatchFile fileData, short side, int line) { java.lang.String lineStr = getLine(fileData, side, line); cmts.append("Line ").append(line).append(": ").append(lineStr).append("\n"); }
@com.google.gwtorm.client.Relation(id = 11) com.google.gerrit.reviewdb.AccountGroupNameAccess accountGroupNames();
@org.junit.Test public void changeMessageWithTrailingDoubleNewline() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, changeOwner); update.setChangeMessage(("Testing trailing double newline\n" + "\n")); update.commit(); com.google.gerrit.reviewdb.client.PatchSet.Id ps1 = c.currentPatchSetId(); org.eclipse.jgit.revwalk.RevWalk walk = new org.eclipse.jgit.revwalk.RevWalk(repo); try { org.eclipse.jgit.revwalk.RevCommit commit = walk.parseCommit(update.getRevision()); walk.parseBody(commit); assertEquals(("Update patch set 1\n" + ((((("\n" + "Testing trailing double newline\n") + "\n") + "\n") + "\n") + "Patch-set: 1\n")), commit.getFullMessage()); } finally { walk.release(); } com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.common.collect.ListMultimap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.ChangeMessage> changeMessages = notes.getChangeMessages(); assertEquals(1, changeMessages.keySet().size()); com.google.gerrit.reviewdb.client.ChangeMessage cm1 = com.google.common.collect.Iterables.getOnlyElement(changeMessages.get(ps1)); assertEquals(("Testing trailing double newline\n" + "\n"), cm1.getMessage()); assertEquals(changeOwner.getAccount().getId(), cm1.getAuthor()); }
@java.lang.Override protected void migrateData(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.schema.UpdateUI ui) throws com.google.gwtorm.server.OrmException, java.sql.SQLException { com.google.gwtorm.jdbc.JdbcSchema schema = ((com.google.gwtorm.jdbc.JdbcSchema) (db)); com.google.gwtorm.schema.sql.SqlDialect dialect = schema.getDialect(); try (java.sql.Statement stmt = schema.getConnection().createStatement()) { java.util.regex.Pattern pattern = java.util.regex.Pattern.compile("^changes_(allOpen|allClosed|byBranchClosed)$", java.util.regex.Pattern.CASE_INSENSITIVE); java.util.Set<java.lang.String> listIndexes = dialect.listIndexes(schema.getConnection(), "changes"); for (java.lang.String index : listIndexes) { if (pattern.matcher(index).matches()) { stmt.executeUpdate(("DROP INDEX " + index)); } } stmt.executeUpdate("DROP INDEX changes_byProjectOpen"); if (dialect instanceof com.google.gwtorm.schema.sql.DialectPostgreSQL) { stmt.executeUpdate(("CREATE INDEX changes_byProjectOpen" + (" ON changes (dest_project_name, last_updated_on)" + " WHERE open = 'Y'"))); } else { stmt.executeUpdate(("CREATE INDEX changes_byProjectOpen" + " ON changes (open, dest_project_name, last_updated_on)")); } } }
@java.lang.Override public int compare(com.google.gerrit.client.diff.DiffChunkInfo a, com.google.gerrit.client.diff.DiffChunkInfo b) { if ((a.getSide()) == (b.getSide())) { return (a.getStart()) - (b.getStart()); } else if ((a.getSide()) == (DisplaySide.A)) { int comp = (mapper.lineOnOther(a.getSide(), a.getStart()).getLine()) - (b.getStart()); return comp == 0 ? -1 : comp; } else { int comp = (a.getStart()) - (mapper.lineOnOther(b.getSide(), b.getStart()).getLine()); return comp == 0 ? 1 : comp; } }
private void savePluginSections(org.eclipse.jgit.lib.Config rc, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> keepGroups) { java.util.List<java.lang.String> existing = com.google.common.collect.Lists.newArrayList(rc.getSubsections(com.google.gerrit.server.git.ProjectConfig.PLUGIN)); for (java.lang.String name : existing) { rc.unsetSection(com.google.gerrit.server.git.ProjectConfig.PLUGIN, name); } for (java.util.Map.Entry<java.lang.String, org.eclipse.jgit.lib.Config> e : pluginConfigs.entrySet()) { java.lang.String plugin = e.getKey(); org.eclipse.jgit.lib.Config pluginConfig = e.getValue(); for (java.lang.String name : pluginConfig.getNames(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin)) { java.lang.String value = pluginConfig.getString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name); if (value.startsWith("Group[")) { com.google.gerrit.common.data.GroupReference ref = resolve(com.google.gerrit.common.data.GroupReference.fromString(value)); if ((ref.getUUID()) != null) { keepGroups.add(ref.getUUID()); pluginConfig.setString(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, ref.toString()); } } rc.setStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name, java.util.Arrays.asList(pluginConfig.getStringList(com.google.gerrit.server.git.ProjectConfig.PLUGIN, plugin, name))); } } }
public boolean isRequired() { return isRequired; }
private void assertNoProblems(com.google.gerrit.server.notedb.ChangeNotes notes, @com.google.gerrit.common.Nullable com.google.gerrit.extensions.api.changes.FixInput fix) throws java.lang.Exception { assertThat(checker.check(controlForNotes(notes), fix).problems()).isEmpty(); }
public void setGroups(java.lang.Iterable<java.lang.String> groups) { this.groups = com.google.gerrit.reviewdb.client.PatchSet.joinGroups(groups); }
@org.junit.Test public void testExpiredTime() throws java.lang.Exception { assertThat(Verifier.onTime(com.googlesource.gerrit.plugins.lfs.LfsDateTime.format(now().minusMillis(1)))).isFalse(); }
@java.lang.Override protected void init() throws com.google.gerrit.server.mail.EmailException { super.init(); try { com.google.gerrit.server.mail.Watchers matching = getWatches(NotifyType.NEW_CHANGES); for (com.google.gerrit.reviewdb.client.Account.Id user : matching.accounts) { if (isOwnerOfProjectOrBranch(user)) { add(RecipientType.TO, user); } else { add(RecipientType.BCC, user); } } for (com.google.gerrit.server.mail.Address addr : matching.emails) { add(RecipientType.BCC, addr); } } catch (com.google.gwtorm.server.OrmException err) { com.google.gerrit.server.mail.CreateChangeSender.log.warn("Cannot BCC watchers for new change", err); } }
private static java.util.Set<org.eclipse.jgit.diff.Edit> getContentEdits(java.util.Set<com.google.gerrit.server.patch.EditTransformer.ContextAwareEdit> editsDueToRebase) { return editsDueToRebase.stream().map(ContextAwareEdit::toEdit).filter(java.util.Optional::isPresent).map(java.util.Optional::get).collect(java.util.stream.Collectors.toSet()); }
public com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject cc(com.google.gerrit.acceptance.TestAccount... accounts) { return rcpt(com.google.gerrit.acceptance.CC, accounts); }
@java.lang.Override public Account.Id apply(com.google.gerrit.extensions.common.AccountInfo account) { return new com.google.gerrit.reviewdb.client.Account.Id(account._accountId); }
@java.lang.Override protected void run() throws com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure { try { checkPermission(); } catch (com.google.gerrit.common.errors.PermissionDeniedException err) { throw new com.googlesource.gerrit.plugins.verifystatus.UnloggedFailure(("fatal: " + (err.getMessage()))); } final com.googlesource.gerrit.plugins.verifystatus.VerifyStatusQueryShell shell = factory.create(in, out); shell.setOutputFormat(format); if ((query) != null) { shell.execute(query); } else { shell.run(); } }
protected boolean shouldProcess(com.google.gerrit.server.events.ProjectEvent event, com.googlesource.gerrit.plugins.webhooks.RemoteConfig remote) { java.lang.String[] wantedEvents = remote.getEvents(); if ((wantedEvents.length) == 0) { return true; } for (java.lang.String type : wantedEvents) { if ((!(com.google.common.base.Strings.isNullOrEmpty(type))) && (type.equals(event.getType()))) { return true; } } return false; }
private java.lang.String makeLink(com.google.gerrit.reviewdb.client.Patch.Key patch) { java.lang.String url = getGerritUrl(); if (url == null) { return null; } com.google.gerrit.reviewdb.client.PatchSet.Id ps = patch.getParentKey(); com.google.gerrit.reviewdb.client.Change.Id c = ps.getParentKey(); return new java.lang.StringBuilder().append(url).append("#/c/").append(c).append('/').append(ps.get()).append('/').append(com.google.gwtorm.client.KeyUtil.encode(patch.get())).toString(); }
private boolean submittable(com.google.gerrit.server.query.change.ChangeData cd) { return com.google.gerrit.common.data.SubmitRecord.allRecordsOK(cd.submitRecords(com.google.gerrit.server.change.ChangeJson.SUBMIT_RULE_OPTIONS_STRICT)); }
private void displayParents(final java.util.List<com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo> parents) { if ((parents.size()) == 0) { infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, new com.google.gwt.user.client.ui.InlineLabel(Util.C.initialCommit())); return; } final com.google.gwt.user.client.ui.Grid parentsTable = new com.google.gwt.user.client.ui.Grid(parents.size(), 2); parentsTable.setStyleName(Gerrit.RESOURCES.css().parentsTable()); parentsTable.addStyleName(Gerrit.RESOURCES.css().noborder()); final com.google.gwt.user.client.ui.HTMLTable.CellFormatter ptfmt = parentsTable.getCellFormatter(); int row = 0; for (com.google.gerrit.reviewdb.PatchSetInfo.ParentInfo parent : parents) { parentsTable.setWidget(row, 0, new com.google.gwt.user.client.ui.InlineLabel(parent.id.get())); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().noborder()); ptfmt.addStyleName(row, 0, Gerrit.RESOURCES.css().monospace()); parentsTable.setWidget(row, 1, new com.google.gwt.user.client.ui.InlineLabel(parent.shortMessage)); ptfmt.addStyleName(row, 1, Gerrit.RESOURCES.css().noborder()); row++; } infoTable.setWidget(com.google.gerrit.client.changes.PatchSetComplexDisclosurePanel.R_PARENTS, 1, parentsTable); }
public com.google.common.collect.ImmutableMap<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> byChangeAsMap(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes) throws com.google.gwtorm.server.OrmException { if (!(migration.readChanges())) { ImmutableMap.Builder<com.google.gerrit.reviewdb.client.PatchSet.Id, com.google.gerrit.reviewdb.client.PatchSet> result = com.google.common.collect.ImmutableMap.builder(); for (com.google.gerrit.reviewdb.client.PatchSet ps : ChangeUtil.PS_ID_ORDER.sortedCopy(db.patchSets().byChange(notes.getChangeId()))) { result.put(ps.getId(), ps); } return result.build(); } return notes.load().getPatchSets(); }
public static <E extends java.lang.Enum<E>> com.google.gerrit.metrics.Field<E> ofEnum(java.lang.Class<E> enumType, java.lang.String name) { return com.google.gerrit.metrics.Field.ofEnum(enumType, name, null); }
private com.google.gwt.user.client.ui.Anchor toAnchor(java.lang.String href, java.lang.String name) { com.google.gwt.user.client.ui.Anchor a = new com.google.gwt.user.client.ui.Anchor(); a.setHref(href); a.setText(name); return a; }
@java.lang.Override public com.google.gerrit.extensions.registration.DynamicSet<T>.ReloadableHandle replace(com.google.inject.Key<T> newKey, T newItem) { if (ref.compareAndSet(item, newItem)) { return new ReloadableHandle(ref, newKey, newItem); } return null; }
@java.lang.Override public com.google.gerrit.httpd.raw.ResourceServlet.Resource call() throws java.io.IOException { try { return new com.google.gerrit.httpd.raw.ResourceServlet.Resource(getLastModifiedTime(p), com.google.gerrit.httpd.raw.ResourceServlet.contentType(p.toString()), java.nio.file.Files.readAllBytes(p)); } catch (java.nio.file.NoSuchFileException e) { return com.google.gerrit.httpd.raw.ResourceServlet.Resource.NOT_FOUND; } }
public static void publish(@com.google.gerrit.common.Nullable java.lang.String project, int id, java.lang.String commit, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gwt.core.client.JavaScriptObject> cb) { com.google.gwt.core.client.JavaScriptObject in = com.google.gwt.core.client.JavaScriptObject.createObject(); com.google.gerrit.client.changes.ChangeApi.call(project, id, commit, "publish").post(in, cb); }
@org.junit.Test public void testEndsBeforeNewline() { com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator iter = new com.google.gerrit.client.diff.CodeMirrorDemo.EditIterator(lines, 0); assertLineChsEqual(net.codemirror.lib.LineCharacter.create(0, 3), iter.advance(3)); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.server.change.ChangeEdits.DeleteFile.Input in) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getChange()); if (edit.isPresent()) { editUtil.delete(edit.get()); } else { editModifier.createEdit(rsrc.getChange(), psUtil.current(db.get(), rsrc.getNotes())); edit = editUtil.byChange(rsrc.getChange()); editModifier.deleteFile(edit.get(), path); } return com.google.gerrit.extensions.restapi.Response.none(); }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<com.google.gerrit.extensions.common.EditInfo> apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException { java.util.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(rsrc.getNotes(), rsrc.getUser()); if (!(edit.isPresent())) { return com.google.gerrit.extensions.restapi.Response.none(); } com.google.gerrit.extensions.common.EditInfo editInfo = editJson.toEditInfo(edit.get(), downloadCommands); if (list) { com.google.gerrit.reviewdb.client.PatchSet basePatchSet = null; if ((base) != null) { com.google.gerrit.server.change.RevisionResource baseResource = revisions.parse(rsrc, com.google.gerrit.extensions.restapi.IdString.fromDecoded(base)); basePatchSet = baseResource.getPatchSet(); } try { editInfo.files = fileInfoJson.toFileInfoMap(rsrc.getChange(), edit.get().getEditCommit(), basePatchSet); } catch (com.google.gerrit.server.diff.PatchListNotAvailableException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(e.getMessage()); } } return com.google.gerrit.extensions.restapi.Response.ok(editInfo); }
public void fire(com.google.gerrit.reviewdb.client.Change change, com.google.gerrit.reviewdb.client.PatchSet patchSet, com.google.gerrit.reviewdb.client.Account reviewer, java.lang.String message, java.util.Map<java.lang.String, java.lang.Short> newApprovals, java.util.Map<java.lang.String, java.lang.Short> oldApprovals, java.sql.Timestamp ts) { if (!(listeners.iterator().hasNext())) { return; } try { fire(util.changeInfo(change), util.revisionInfo(change.getProject(), patchSet), util.accountInfo(reviewer), message, util.approvals(reviewer, newApprovals, ts), util.approvals(reviewer, oldApprovals, ts)); } catch (com.google.gerrit.server.patch.PatchListNotAvailableException | com.google.gerrit.server.GpgException | java.io.IOException | com.google.gwtorm.server.OrmException e) { com.google.gerrit.server.extensions.events.ReviewerDeleted.log.error("Couldn't fire event", e); } }
java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> getForPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.project.ChangeControl ctl, com.google.gerrit.reviewdb.client.PatchSet.Id psId, java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> dontCopy) throws com.google.gwtorm.server.OrmException { com.google.gerrit.reviewdb.client.PatchSet ps = psUtil.get(db, ctl.getNotes(), psId); if (ps == null) { return java.util.Collections.emptyList(); } return getForPatchSet(db, ctl, ps, dontCopy); }
private void displayReadOnly(com.google.gerrit.common.data.ProjectAccess access) { this.access = access; java.util.Map<java.lang.String, java.lang.String> allCapabilities = new java.util.HashMap<java.lang.String, java.lang.String>(); for (com.google.gerrit.client.config.CapabilityInfo c : com.google.gerrit.client.rpc.Natives.asList(capabilityMap.values())) { allCapabilities.put(c.id(), c.name()); } this.access.setCapabilities(allCapabilities); accessEditor.setEditing(false); com.google.gwt.user.client.ui.UIObject.setVisible(editTools, ((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); edit.setEnabled(((!(access.getOwnerOf().isEmpty())) || (access.canUpload()))); cancel1.setVisible(false); com.google.gwt.user.client.ui.UIObject.setVisible(commitTools, false); driver.edit(access); }
@java.lang.Override public com.google.gerrit.server.change.CheckResult apply(com.google.gerrit.server.change.ChangeResource rsrc) { com.google.gerrit.server.change.CheckResult result = new com.google.gerrit.server.change.CheckResult(); result.messages = checkerProvider.get().check(rsrc.getChange()); try { result.change = json.format(rsrc); } catch (com.google.gwtorm.server.OrmException e) { java.lang.String msg = "Error rendering final ChangeInfo"; com.google.gerrit.server.change.Check.log.warn(msg, e); result.messages.add(msg); result.change = com.google.gerrit.server.change.Check.basicChangeInfo(rsrc.getChange()); } return result; }
private void loadPermissionRules(org.eclipse.jgit.lib.Config rc, java.lang.String section, java.lang.String subsection, java.lang.String varName, java.util.Map<java.lang.String, com.google.gerrit.common.data.GroupReference> groupsByName, com.google.gerrit.common.data.Permission perm, boolean useRange) { for (java.lang.String ruleString : rc.getStringList(section, subsection, varName)) { com.google.gerrit.common.data.PermissionRule rule; try { rule = com.google.gerrit.common.data.PermissionRule.fromString(ruleString, useRange); } catch (java.lang.IllegalArgumentException notRule) { error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, (((((("Invalid rule in " + section) + (subsection != null ? "." + subsection : "")) + ".") + varName) + ": ") + (notRule.getMessage())))); continue; } com.google.gerrit.common.data.GroupReference ref = groupsByName.get(rule.getGroup().getName()); if (ref == null) { ref = rule.getGroup(); groupsByName.put(ref.getName(), ref); error(new com.google.gerrit.server.git.ValidationError(com.google.gerrit.server.git.ProjectConfig.PROJECT_CONFIG, ((("group \"" + (ref.getName())) + "\" not in ") + (com.google.gerrit.server.git.ProjectConfig.GROUP_LIST)))); } rule.setGroup(ref); perm.add(rule); } }
private java.util.List<org.eclipse.jgit.lib.Ref> getBranchRefs(com.google.gerrit.reviewdb.client.Project.NameKey projectName, com.google.gerrit.server.project.ProjectControl projectControl) { org.eclipse.jgit.lib.Ref[] result = new org.eclipse.jgit.lib.Ref[showBranch.size()]; try (org.eclipse.jgit.lib.Repository git = repoManager.openRepository(projectName)) { for (int i = 0; i < (showBranch.size()); i++) { org.eclipse.jgit.lib.Ref ref = git.findRef(showBranch.get(i)); if ((((ref != null) && ((ref.getObjectId()) != null)) && (projectControl.controlForRef(ref.getLeaf().getName()).isVisible())) || ((all) && (projectControl.isOwner()))) { result[i] = ref; } } } catch (java.io.IOException ioe) { } return java.util.Arrays.asList(result); }
public java.lang.String getUnifiedDiff() { com.google.gerrit.server.patch.PatchList patchList; try { patchList = getPatchList(); if ((patchList.getOldId()) == null) { return "[Octopus merge; cannot be formatted as a diff.]\n"; } } catch (com.google.gerrit.server.patch.PatchListNotAvailableException e) { com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot format patch", e); return ""; } int maxSize = args.settings.maximumDiffSize; org.eclipse.jgit.util.TemporaryBuffer.Heap buf = new org.eclipse.jgit.util.TemporaryBuffer.Heap(java.lang.Math.min(com.google.gerrit.server.mail.ChangeEmail.HEAP_EST_SIZE, maxSize), maxSize); try (org.eclipse.jgit.diff.DiffFormatter fmt = new org.eclipse.jgit.diff.DiffFormatter(buf)) { org.eclipse.jgit.lib.Repository git; try { git = args.server.openRepository(change.getProject()); } catch (java.io.IOException e) { com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot open repository to format patch", e); return ""; } try { fmt.setRepository(git); fmt.setDetectRenames(true); fmt.format(patchList.getOldId(), patchList.getNewId()); return org.eclipse.jgit.util.RawParseUtils.decode(buf.toByteArray()); } catch (java.io.IOException e) { if (org.eclipse.jgit.internal.JGitText.get().inMemoryBufferLimitExceeded.equals(e.getMessage())) { return ""; } com.google.gerrit.server.mail.ChangeEmail.log.error("Cannot format patch", e); return ""; } finally { git.close(); } } }
public static boolean isStaleFileHandleInCausalChain(java.lang.Throwable throwable) { while (throwable != null) { if ((throwable instanceof java.io.IOException) && (com.googlesource.gerrit.plugins.events.fsstore.Nfs.isStaleFileHandle(((java.io.IOException) (throwable))))) { return true; } throwable = throwable.getCause(); } return false; }
private void exec(final javax.servlet.http.HttpServletRequest req, final javax.servlet.http.HttpServletResponse rsp, final com.google.gerrit.server.project.ProjectControl project) throws java.io.IOException { final java.lang.Process proc = java.lang.Runtime.getRuntime().exec(new java.lang.String[]{ gitwebCgi.toAbsolutePath().toString() }, makeEnv(req, project), gitwebCgi.toAbsolutePath().getParent().toFile()); copyStderrToLog(proc.getErrorStream()); if (0 < (req.getContentLength())) { copyContentToCGI(req, proc.getOutputStream()); } else { proc.getOutputStream().close(); } try (java.io.InputStream in = new java.io.BufferedInputStream(proc.getInputStream(), bufferSize)) { readCgiHeaders(rsp, in); try (java.io.OutputStream out = rsp.getOutputStream()) { final byte[] buf = new byte[bufferSize]; int n; while ((n = in.read(buf)) > 0) { out.write(buf, 0, n); } } } catch (java.io.IOException e) { proc.destroy(); return; } try { proc.waitFor(); final int status = proc.exitValue(); if (0 != status) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.error(((("Non-zero exit status (" + status) + ") from ") + (gitwebCgi))); if (!(rsp.isCommitted())) { rsp.sendError(500); } } } catch (java.lang.InterruptedException ie) { com.google.gerrit.httpd.gitweb.GitwebServlet.log.debug("CGI: interrupted waiting for CGI to terminate"); } }
private java.util.List<com.google.gerrit.common.data.SubmitRecord> ruleError(java.lang.String err) { return ruleError(err, null); }
public static java.util.List<com.google.gerrit.client.download.DownloadUrlLink> createDownloadUrlLinks(java.lang.String project, boolean allowAnonymous) { java.util.List<com.google.gerrit.client.download.DownloadUrlLink> urls = new java.util.ArrayList<>(); java.util.Set<java.lang.String> allowedSchemes = com.google.gerrit.client.Gerrit.info().download().schemes(); if ((allowAnonymous && ((com.google.gerrit.client.Gerrit.getConfig().getGitDaemonUrl()) != null)) && (allowedSchemes.contains("git"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonGitLink(project)); } if (allowAnonymous && (allowedSchemes.contains("anonymous http"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.AnonHttpLink(project)); } if ((((com.google.gerrit.client.Gerrit.getConfig().getSshdAddress()) != null) && (com.google.gerrit.client.download.DownloadUrlLink.hasUserName())) && (allowedSchemes.contains("ssh"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.SshLink(project)); } if (((com.google.gerrit.client.download.DownloadUrlLink.hasUserName()) || (com.google.gerrit.client.download.DownloadUrlLink.siteReliesOnHttp())) && (allowedSchemes.contains("http"))) { urls.add(new com.google.gerrit.client.download.DownloadUrlLink.HttpLink(project, allowAnonymous)); } return urls; }
@java.lang.Override public void onSuccess(com.google.gerrit.client.info.ChangeInfo info) { changeStatus = info.status(); info.revisions().copyKeysIntoChildren("name"); if ((edit) != null) { edit.setName(edit.commit().commit()); info.setEdit(edit); info.revisions().put(edit.name(), com.google.gerrit.client.info.ChangeInfo.RevisionInfo.fromEdit(edit)); } java.lang.String currentRevision = info.currentRevision(); boolean current = (currentRevision != null) && ((revision.get()) == (info.revision(currentRevision)._number())); com.google.gwt.core.client.JsArray<com.google.gerrit.client.info.ChangeInfo.RevisionInfo> list = info.revisions().values(); com.google.gerrit.client.info.ChangeInfo.RevisionInfo.sortRevisionInfoByNumber(list); diffTable.set(prefs, list, diff, ((edit) != null), current, changeStatus.isOpen(), diff.binary()); header.setChangeInfo(info); }
@java.lang.Override public void rebase() { throw new com.google.gerrit.extensions.restapi.NotImplementedException(); }
@com.google.gwtorm.server.PrimaryKey("name") com.google.gwtorm.data.Person get(com.google.gwtorm.data.Person.Key key) throws com.google.gwtorm.server.OrmException;
public static void createChange(java.lang.String project, java.lang.String branch, java.lang.String subject, com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.changes.ChangeInfo> cb) { com.google.gerrit.client.changes.ChangeApi.CreateChangeInput input = com.google.gerrit.client.changes.ChangeApi.CreateChangeInput.create(); input.project(com.google.gerrit.client.changes.ChangeApi.emptyToNull(project)); input.branch(com.google.gerrit.client.changes.ChangeApi.emptyToNull(branch)); input.subject(com.google.gerrit.client.changes.ChangeApi.emptyToNull(subject)); new com.google.gerrit.client.rpc.RestApi("/changes/").post(input, cb); }
private com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectState projectState, com.google.gerrit.server.CurrentUser user, java.lang.String id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { java.util.List<java.lang.String> p = com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(':').limit(2).split(id)); java.lang.String ref = com.google.gerrit.extensions.restapi.Url.encode(p.get(0)); java.lang.String path = com.google.gerrit.extensions.restapi.Url.encode(p.get(1)); return dashboards.parse(new com.google.gerrit.server.project.ProjectResource(projectState, user), com.google.gerrit.extensions.restapi.IdString.fromUrl(((ref + ':') + path))); }
@org.junit.Before public void setUp() { java.sql.Timestamp timestamp = new java.sql.Timestamp(com.ericsson.gerrit.plugins.eventslog.sql.SQLEntryTest.NOW); entry1 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name1", timestamp, "event1", java.lang.Integer.MAX_VALUE); entry2 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name2", timestamp, "event2", java.lang.Integer.MIN_VALUE); entry3 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name3", timestamp, "event3", 0); entry4 = new com.ericsson.gerrit.plugins.eventslog.sql.SQLEntry("name4", timestamp, "event4", java.lang.Integer.MAX_VALUE); }
@java.lang.Override public com.google.gerrit.reviewdb.client.AccountGroupMember get(com.google.gerrit.reviewdb.client.AccountGroupMember.Key key) { throw new java.lang.UnsupportedOperationException(com.google.gerrit.reviewdb.server.DisallowReadFromGroupsReviewDbWrapper.MSG); }
@com.google.auto.value.extension.memoized.Memoized public com.google.gerrit.server.config.ScheduleConfig.Schedule schedule() { long interval = com.google.gerrit.server.config.ScheduleConfig.computeInterval(config(), section(), subsection(), keyInterval()); long initialDelay; if (interval > 0) { initialDelay = com.google.gerrit.server.config.ScheduleConfig.computeInitialDelay(config(), section(), subsection(), keyStartTime(), now(), interval); } else { initialDelay = interval; } return com.google.gerrit.server.config.ScheduleConfig.Schedule.create(interval, initialDelay); }
private void addSuggestion(java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, com.google.gerrit.server.account.AccountInfo> map, com.google.gerrit.reviewdb.client.Account account, com.google.gerrit.server.account.AccountInfo info, com.google.gerrit.server.change.SuggestReviewers.VisibilityControl visibilityControl) throws com.google.gwtorm.server.OrmException { if ((((!(map.containsKey(account.getId()))) && (account.isActive())) && (visibilityControl.isVisibleTo(account))) && (accountControlFactory.get().canSee(account))) { map.put(account.getId(), info); } }
@org.junit.Test public void sshKeys() throws java.lang.Exception { java.util.List<com.google.gerrit.extensions.common.SshKeyInfo> info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(1); com.google.gerrit.extensions.common.SshKeyInfo key = info.get(0); java.lang.String inital = com.google.gerrit.acceptance.AccountCreator.publicKey(admin.sshKey, admin.email); assertThat(key.sshPublicKey).isEqualTo(inital); java.lang.String newKey = com.google.gerrit.acceptance.AccountCreator.publicKey(com.google.gerrit.acceptance.AccountCreator.genSshKey(), admin.email); gApi.accounts().self().addSshKey(newKey); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(2); gApi.accounts().self().addSshKey(inital); info = gApi.accounts().self().listSshKeys(); assertThat(info).hasSize(3); }
@java.lang.Override public void topic(java.lang.String topic) throws com.google.gerrit.extensions.restapi.RestApiException { com.google.gerrit.server.change.PutTopic.Input in = new com.google.gerrit.server.change.PutTopic.Input(); in.topic = topic; try { putTopic.apply(change, in); } catch (com.google.gerrit.server.update.UpdateException | com.google.gerrit.server.permissions.PermissionBackendException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot set topic", e); } }
private void updateLabels(org.eclipse.jgit.lib.Repository repo, java.lang.String refName, org.eclipse.jgit.lib.ObjectId oldObjectId, java.util.SortedSet<java.lang.String> labels) throws com.google.gwtorm.server.OrmException, java.io.IOException { try (org.eclipse.jgit.revwalk.RevWalk rw = new org.eclipse.jgit.revwalk.RevWalk(repo)) { org.eclipse.jgit.lib.RefUpdate u = repo.updateRef(refName); u.setExpectedOldObjectId(oldObjectId); u.setForceUpdate(true); u.setNewObjectId(com.google.gerrit.server.StarredChangesUtil.writeLabels(repo, labels)); u.setRefLogIdent(serverIdent); u.setRefLogMessage("Update star labels", true); org.eclipse.jgit.lib.RefUpdate.Result result = u.update(rw); switch (result) { case NEW : case FORCED : case NO_CHANGE : case FAST_FORWARD : return; case IO_FAILURE : case LOCK_FAILURE : case NOT_ATTEMPTED : case REJECTED : case REJECTED_CURRENT_BRANCH : case RENAMED : throw new com.google.gwtorm.server.OrmException(java.lang.String.format("Update star labels on ref %s failed: %s", refName, result.name())); } } }
@org.junit.Before public void setUp() throws java.lang.Exception { when(currentUserProviderMock.get()).thenReturn(currentUserMock); when(currentUserMock.getCapabilities()).thenReturn(capabilityControlMock); when(capabilityControlMock.canAdministrateServer()).thenReturn(true); servlet = new com.ericsson.gerrit.plugins.highavailability.health.HealthServlet(currentUserProviderMock, tempFolder.getRoot().toPath()); }
@java.lang.Override public com.google.gerrit.server.project.DashboardResource parse(com.google.gerrit.server.project.ProjectResource parent, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { parent.getProjectState().checkStatePermitsRead(); if (com.google.gerrit.server.restapi.project.DashboardsCollection.isDefaultDashboard(id)) { return com.google.gerrit.server.project.DashboardResource.projectDefault(parent.getProjectState(), parent.getUser()); } com.google.gerrit.extensions.api.projects.DashboardInfo info; try { info = com.google.gerrit.server.restapi.project.DashboardsCollection.newDashboardInfo(id.get()); } catch (com.google.gerrit.server.restapi.project.DashboardsCollection.InvalidDashboardId e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } for (com.google.gerrit.server.project.ProjectState ps : parent.getProjectState().tree()) { try { return parse(ps, parent.getProjectState(), parent.getUser(), info); } catch (org.eclipse.jgit.errors.AmbiguousObjectException | org.eclipse.jgit.errors.ConfigInvalidException | org.eclipse.jgit.errors.IncorrectObjectTypeException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); } catch (com.google.gerrit.extensions.restapi.ResourceNotFoundException e) { continue; } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
private static com.google.gerrit.client.diff.SideBySide2.FileSize bucketFileSize(com.google.gerrit.client.diff.DiffInfo diff) { com.google.gerrit.client.diff.DiffInfo.FileMeta a = diff.meta_a(); com.google.gerrit.client.diff.DiffInfo.FileMeta b = diff.meta_b(); com.google.gerrit.client.diff.SideBySide2.FileSize[] sizes = com.google.gerrit.client.diff.SideBySide2.FileSize.values(); for (int i = (sizes.length) - 1; 0 <= i; i--) { com.google.gerrit.client.diff.SideBySide2.FileSize s = sizes[i]; if (((a != null) && ((s.lines) <= (a.lines()))) || ((b != null) && ((s.lines) <= (b.lines())))) { return s; } } return com.google.gerrit.client.diff.SideBySide2.FileSize.SMALL; }
@org.junit.Test public void byStatusPrefix() throws java.lang.Exception { org.eclipse.jgit.junit.TestRepository<org.eclipse.jgit.internal.storage.dfs.InMemoryRepository> repo = createProject("repo"); com.google.gerrit.server.change.ChangeInserter ins1 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change1 = ins1.getChange(); change1.setStatus(Change.Status.NEW); ins1.insert(); com.google.gerrit.server.change.ChangeInserter ins2 = newChange(repo, null, null, null, null); com.google.gerrit.reviewdb.client.Change change2 = ins2.getChange(); change2.setStatus(Change.Status.MERGED); ins2.insert(); assertResultEquals(change1, queryOne("status:n")); assertResultEquals(change1, queryOne("status:ne")); assertResultEquals(change1, queryOne("status:new")); assertResultEquals(change1, queryOne("status:N")); assertResultEquals(change1, queryOne("status:nE")); assertResultEquals(change1, queryOne("status:neW")); assertBadQuery("status:nx"); assertBadQuery("status:newx"); }
private java.lang.String extractWhat(com.google.gerrit.sshd.DispatchCommand dcmd, boolean hideSensitive) { if (dcmd == null) { return "Command was already destroyed"; } return hideSensitive ? dcmd.getFormattedMaskedArguments(".") : extractWhat(dcmd); }
public com.google.gerrit.server.project.ChangeControl changeControl() throws com.google.gwtorm.server.OrmException { if ((changeControl) == null) { com.google.gerrit.reviewdb.client.Change c = change(); try { changeControl = changeControlFactory.controlFor(db, c, userFactory.create(c.getOwner())); } catch (com.google.gerrit.server.project.NoSuchChangeException e) { throw new com.google.gwtorm.server.OrmException(e); } } return changeControl; }
private static com.google.gerrit.common.data.ApprovalType verifiedCategory() { com.google.gerrit.reviewdb.ApprovalCategory cat = com.google.gerrit.rules.common.CommonRulesTest.category(1, "VRIF", "Verified"); java.util.List<com.google.gerrit.reviewdb.ApprovalCategoryValue> vals = com.google.gerrit.rules.common.CommonRulesTest.newList(); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 1, "Verified")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, 0, "No score")); vals.add(com.google.gerrit.rules.common.CommonRulesTest.value(cat, (-1), "Fails")); return new com.google.gerrit.common.data.ApprovalType(cat, vals); }
@java.lang.Override public void onSuccess(java.lang.Void result) { if (((prefs.syntaxHighlighting()) && (java.util.Objects.equals(mode, getSelectedMode()))) && (view.isAttached())) { view.operation(new java.lang.Runnable() { @java.lang.Override public void run() { view.getCmFromSide(DisplaySide.A).setOption("mode", mode); view.getCmFromSide(DisplaySide.B).setOption("mode", mode); } }); } }
public boolean canDelete() { if ((!(canWrite())) || (GitRepositoryManager.REF_CONFIG.equals(refName))) { return false; } switch (getCurrentUser().getAccessPath()) { case WEB_UI : return (isOwner()) || (canPushWithForce()); case GIT : return canPushWithForce(); default : return false; } }
@com.google.gwt.uibinder.client.UiHandler("close") void onClose(@java.lang.SuppressWarnings("unused") com.google.gwt.event.dom.client.ClickEvent e) { if ((cm.isClean(generation)) || (com.google.gwt.user.client.Window.confirm(EditConstants.I.cancelUnsavedChanges()))) { upToChange(); } }
@org.junit.Test public void onlyContentMerged() throws java.lang.Exception { testRepo.branch("HEAD").commit().insertChangeId().message("first commit").add("a.txt", "a contents ").create(); testRepo.git().push().setRemote("origin").setRefSpecs(new org.eclipse.jgit.transport.RefSpec("HEAD:refs/heads/master")).call(); com.google.gerrit.acceptance.PushOneCommit.Result cId = createChange(); org.eclipse.jgit.revwalk.RevCommit commitId = cId.getCommit(); com.google.gerrit.extensions.api.changes.CherryPickInput cpi = new com.google.gerrit.extensions.api.changes.CherryPickInput(); cpi.destination = "master"; cpi.message = "cherry pick the commit"; com.google.gerrit.extensions.api.changes.ChangeApi orig = gApi.changes().id(cId.getChangeId()); com.google.gerrit.extensions.api.changes.ChangeApi cherry = orig.current().cherryPick(cpi); cherry.current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); cherry.current().submit(); org.eclipse.jgit.lib.ObjectId remoteId = getRemoteHead(); assertThat(remoteId).isNotEqualTo(commitId); com.google.gerrit.extensions.common.ChangeInput in = newMergeChangeInput("master", commitId.getName(), ""); assertCreateSucceeds(in); }
private void fireEvent(com.google.gerrit.reviewdb.Branch.NameKey branchName, final com.google.gerrit.server.events.ChangeEvent event) { for (com.google.gerrit.common.ChangeHookRunner.ChangeListenerHolder holder : listeners.values()) { if (isVisibleTo(branchName, holder.user)) { holder.listener.onChangeEvent(event); } } }
@java.lang.Override public void verify(com.google.gerrit.reviewdb.client.Account.Id user, java.lang.String url, java.lang.String tokenString) throws com.google.gerrit.httpd.InvalidTokenException { com.google.gwtjsonrpc.server.ValidToken token; try { token = restToken.checkToken(tokenString, null); } catch (com.google.gwtjsonrpc.server.XsrfException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } if (((token == null) || ((token.getData()) == null)) || (token.getData().isEmpty())) { throw new com.google.gerrit.httpd.InvalidTokenException(); } java.lang.String payload; try { payload = new java.lang.String(org.eclipse.jgit.util.Base64.decode(token.getData()), "UTF-8"); } catch (java.io.UnsupportedEncodingException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } int colonPos = payload.indexOf(':'); if (colonPos == (-1)) { throw new com.google.gerrit.httpd.InvalidTokenException(); } com.google.gerrit.reviewdb.client.Account.Id tokenUser; try { tokenUser = Account.Id.parse(payload.substring(0, colonPos)); } catch (java.lang.IllegalArgumentException err) { throw new com.google.gerrit.httpd.InvalidTokenException(err); } java.lang.String tokenUrl = payload.substring((colonPos + 1)); if ((!(tokenUser.equals(user))) || (!(tokenUrl.equals(url)))) { throw new com.google.gerrit.httpd.InvalidTokenException(); } }
@java.lang.Override com.google.gerrit.client.diff.CommentGroup getCommentGroupOnActiveLine(net.codemirror.lib.CodeMirror cm) { com.google.gerrit.client.diff.CommentGroup group = null; if (cm.extras().hasActiveLine()) { int cmLinePlusOne = (cm.getLineNumber(cm.extras().activeLine())) + 1; com.google.gerrit.client.diff.UnifiedChunkManager.LineRegionInfo info = ((com.google.gerrit.client.diff.Unified) (host)).getLineRegionInfoFromCmLine((cmLinePlusOne - 1)); com.google.gerrit.client.diff.CommentGroup forSide = map(info.getSide()).get(cmLinePlusOne); group = (forSide == null) ? map(info.getSide().otherSide()).get(cmLinePlusOne) : forSide; } return group; }
@org.junit.Test public void projectChangeNumberReturnsChange() throws java.lang.Exception { com.google.gerrit.extensions.api.changes.ChangeApi cApi = gApi.changes().id(project.get(), changeInfo._number); assertThat(cApi.get().changeId).isEqualTo(changeInfo.changeId); }
private static com.google.gerrit.server.mail.send.CommentFormatter.Block makeQuote(java.lang.String p) { java.lang.String quote = p.replaceAll("\n\\s?>\\s?", "\n"); if (quote.startsWith("> ")) { quote = quote.substring(2); } else if (quote.startsWith(" > ")) { quote = quote.substring(3); } com.google.gerrit.server.mail.send.CommentFormatter.Block block = new com.google.gerrit.server.mail.send.CommentFormatter.Block(); block.type = com.google.gerrit.server.mail.send.CommentFormatter.BlockType.QUOTE; block.quotedBlocks = com.google.gerrit.server.mail.send.CommentFormatter.parse(quote); return block; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<java.util.Set<java.lang.String>> apply(com.google.gerrit.server.change.ChangeResource req, com.google.gerrit.server.change.PutHashtags.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.hashtags))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("Hashtags are required"); } com.google.gerrit.server.project.ChangeControl control = req.getControl(); if (!(control.canEditHashtags())) { throw new com.google.gerrit.extensions.restapi.AuthException("Editing hashtags not permitted"); } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(control); com.google.gerrit.server.notedb.ChangeNotes notes = control.getNotes().load(); java.util.Set<java.lang.String> oldHashtags = notes.getHashtags(); java.util.Set<java.lang.String> hashtags = new java.util.HashSet<java.lang.String>(); if (oldHashtags != null) { hashtags.addAll(oldHashtags); } hashtags.addAll(com.google.common.collect.Lists.newArrayList(com.google.common.base.Splitter.on(com.google.common.base.CharMatcher.anyOf(",;")).trimResults().split(input.hashtags))); update.setHashtags(hashtags); update.commit(); return com.google.gerrit.extensions.restapi.Response.ok(hashtags); }
@java.lang.Override public com.google.gerrit.server.permissions.PermissionBackend.ForChange user(com.google.gerrit.server.CurrentUser user) { return getUser().equals(user) ? this : forUser(user).asForChange(cd, db); }
private void decodeSubmitRecords(com.google.common.collect.Multimap<java.lang.String, org.apache.lucene.index.IndexableField> doc, java.lang.String field, com.google.gerrit.server.project.SubmitRuleOptions opts, com.google.gerrit.server.query.change.ChangeData cd) { com.google.gerrit.server.index.change.ChangeField.parseSubmitRecords(com.google.common.collect.Collections2.transform(doc.get(field), ( f) -> f.binaryValue().utf8ToString()), opts, cd); }
@org.junit.Test public void testEmailNullNotListed() throws java.lang.Exception { assertThat(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistValidator.performValidation(com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailNullNotListed, com.googlesource.gerrit.plugins.uploadvalidator.EmailDomainWhitelistTest.emailDomainWhitelist)).isFalse(); }
@java.lang.Override public void onClick(com.google.gwt.event.dom.client.ClickEvent event) { if ((enabled) && ((event.getNativeButton()) == (com.google.gwt.dom.client.NativeEvent.BUTTON_LEFT))) { edit(); } }
private void loadFileList(final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo base, final com.google.gerrit.client.changes.ChangeInfo.RevisionInfo rev, final java.sql.Timestamp myLastReply, com.google.gerrit.client.rpc.CallbackGroup group, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments, final java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> drafts) { com.google.gerrit.client.diff.DiffApi.list(changeId.get(), (base != null ? base.name() : null), rev.name(), group.add(new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo>>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeMap<com.google.gerrit.client.diff.FileInfo> m) { files.set((base != null ? new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, base._number()) : null), new com.google.gerrit.reviewdb.client.PatchSet.Id(changeId, rev._number()), style, reply, fileTableMode, ((edit) != null)); files.setValue(m, myLastReply, (comments != null ? comments.get(0) : null), (drafts != null ? drafts.get(0) : null)); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { } })); }
@java.lang.Override protected void onUnload() { super.onUnload(); saveAllDrafts(null); removeKeyHandlerRegs(); if ((resizeHandler) != null) { resizeHandler.removeHandler(); resizeHandler = null; } if ((cmA) != null) { cmA.getWrapperElement().removeFromParent(); } if ((cmB) != null) { cmB.getWrapperElement().removeFromParent(); } com.google.gwt.user.client.Window.enableScrolling(true); com.google.gerrit.client.Gerrit.setHeaderVisible(true); }
@java.lang.Override public com.google.gerrit.extensions.client.GeneralPreferencesInfo apply(com.google.gerrit.server.account.AccountResource rsrc, com.google.gerrit.extensions.client.GeneralPreferencesInfo input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if ((self.get()) != (rsrc.getUser())) { permissionBackend.user(self).check(GlobalPermission.MODIFY_ACCOUNT); } checkDownloadScheme(input.downloadScheme); com.google.gerrit.server.account.Preferences.validateMy(input.my); com.google.gerrit.reviewdb.client.Account.Id id = rsrc.getUser().getAccountId(); return accountsUpdateProvider.get().update("Set General Preferences via API", id, ( u) -> u.setGeneralPreferences(input)).map(AccountState::getGeneralPreferences).orElseThrow(() -> new com.google.gerrit.extensions.restapi.ResourceNotFoundException(com.google.gerrit.extensions.restapi.IdString.fromDecoded(id.toString()))); }
public java.lang.String asString() { java.lang.StringBuilder b = new java.lang.StringBuilder(); b.append(com.google.gerrit.extensions.restapi.IdString.fromDecoded(project.get()).encoded()); b.append("/"); b.append(((resource) != null ? com.google.gerrit.extensions.restapi.IdString.fromDecoded(resource).encoded() : "")); b.append("/"); b.append(((revId) != null ? revId.name() : "")); return b.toString(); }
public com.google.gerrit.server.notedb.ChangeNotes createFromIndexedChange(com.google.gerrit.reviewdb.client.Change change) { return new com.google.gerrit.server.notedb.ChangeNotes(repoManager, migration, allUsers, change.getProject(), change); }
java.lang.String cellsNextToFileComment();
private com.google.gerrit.server.project.DashboardResource resource() throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.permissions.PermissionBackendException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { return dashboards.parse(project, com.google.gerrit.extensions.restapi.IdString.fromDecoded(id)); }
@org.junit.Test public void content() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.extensions.restapi.BinaryResult bin = gApi.changes().id(r.getChangeId()).revision(r.getCommit().name()).file(com.google.gerrit.acceptance.PushOneCommit.FILE_NAME).content(); java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream(); bin.writeTo(os); java.lang.String res = new java.lang.String(os.toByteArray(), java.nio.charset.StandardCharsets.UTF_8); assertThat(res).isEqualTo(com.google.gerrit.acceptance.PushOneCommit.FILE_CONTENT); }
void insert(java.lang.String v) { int insertPos = getRowCount(); for (int row = 1; row < (getRowCount()); row++) { int compareResult = v.compareTo(getText(row, 1)); if (compareResult < 0) { insertPos = row; break; } else if (compareResult == 0) { return; } } insertRow(insertPos); populate(insertPos, v); }
@org.junit.Test public void actionsETag() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r1 = createChange(); com.google.gerrit.acceptance.PushOneCommit.Result r2 = createChange(); java.lang.String oldETag = checkETag(getRevisionActions, r2, null); current(r2).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(getRevisionActions, r2, oldETag); current(r1).review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); oldETag = checkETag(getRevisionActions, r2, oldETag); current(r2).submit(); oldETag = checkETag(getRevisionActions, r2, oldETag); }
@org.junit.Test public void addReviewerToReviewableChangeByOtherInNoteDb() throws java.lang.Exception { assume().that(notesMigration.readChanges()).isTrue(); com.google.gerrit.acceptance.TestAccount other = accountCreator.create("other", "other@example.com", "other"); forAll(( adder) -> { com.google.gerrit.acceptance.server.mail.StagedChange sc = stageReviewableChange(); com.google.gerrit.acceptance.TestAccount reviewer = accountCreator.create("added", "added@example.com", "added"); addReviewer(adder, sc.changeId, other, reviewer.email); assertThat(sender).sent("newchange", sc).to(reviewer).cc(sc.owner, sc.reviewer).cc(sc.reviewerByEmail, sc.ccerByEmail).noOneElse(); }); }
private void flush(java.util.List<java.lang.String> cacheNames) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.UnprocessableEntityException { java.util.List<com.google.gerrit.server.config.CacheResource> cacheResources = new java.util.ArrayList<>(cacheNames.size()); for (java.lang.String n : cacheNames) { java.lang.String pluginName = "gerrit"; java.lang.String cacheName = n; int i = cacheName.lastIndexOf('-'); if (i != (-1)) { pluginName = cacheName.substring(0, i); cacheName = ((cacheName.length()) > (i + 1)) ? cacheName.substring((i + 1)) : ""; } com.google.common.cache.Cache<?, ?> cache = cacheMap.get(pluginName, cacheName); if (cache != null) { cacheResources.add(new com.google.gerrit.server.config.CacheResource(pluginName, cacheName, cache)); } else { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.lang.String.format("cache %s not found", n)); } } for (com.google.gerrit.server.config.CacheResource rsrc : cacheResources) { flushCache.apply(rsrc, null); } }
private void testEnableSequences(int builderOption, int expectedFirstId, java.lang.String expectedRefValue) throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change.Id id = r.getChange().getId(); assertThat(id.get()).isEqualTo(1); migrate(( b) -> b.setSequenceGap(builderOption).setStopAtStateForTesting(com.google.gerrit.acceptance.server.notedb.READ_WRITE_WITH_SEQUENCE_REVIEW_DB_PRIMARY)); assertThat(sequences.nextChangeId()).isEqualTo(expectedFirstId); assertThat(sequences.nextChangeId()).isEqualTo((expectedFirstId + 1)); try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(allProjects);org.eclipse.jgit.lib.ObjectReader reader = repo.newObjectReader()) { org.eclipse.jgit.lib.Ref ref = repo.exactRef("refs/sequences/changes"); assertThat(ref).isNotNull(); org.eclipse.jgit.lib.ObjectLoader loader = reader.open(ref.getObjectId()); assertThat(loader.getType()).isEqualTo(Constants.OBJ_BLOB); assertThat(new java.lang.String(loader.getCachedBytes(), java.nio.charset.StandardCharsets.UTF_8)).isEqualTo(expectedRefValue); } try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { @java.lang.SuppressWarnings("deprecation") int nextFromReviewDb = db.nextChangeId(); assertThat(nextFromReviewDb).isEqualTo(3); } }
@java.lang.Override public void initConfig(com.google.gerrit.pgm.init.api.Section databaseSection) { java.lang.String path = databaseSection.get("database"); if (path == null) { path = "db/ReviewDB"; databaseSection.set("database", path); } java.io.File db = site.resolve(path); if (db == null) { throw com.google.gerrit.pgm.init.InitUtil.die("database.database must be supplied for H2"); } db = db.getParentFile(); if ((!(db.exists())) && (!(db.mkdirs()))) { throw com.google.gerrit.pgm.init.InitUtil.die(("cannot create database.database " + (db.getAbsolutePath()))); } }
private synchronized void finish(com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt a, java.util.List<com.google.gerrit.acceptance.pgm.ReindexIT.UpgradeAttempt> out) { checkState(((readyToStart.getCount()) == 0), "shouldn't be finishing upgrade before starting"); checkState(((finished.getCount()) > 0), "already finished %s upgrades, can't finish %s", numExpected, a); out.add(a); finished.countDown(); }
@java.lang.Override public com.google.gerrit.server.change.RobotCommentResource parse(com.google.gerrit.server.change.RevisionResource rev, com.google.gerrit.extensions.restapi.IdString id) throws com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { java.lang.String uuid = id.get(); com.google.gerrit.server.notedb.ChangeNotes notes = rev.getNotes(); for (com.google.gerrit.reviewdb.client.RobotComment c : commentsUtil.robotCommentsByPatchSet(notes, rev.getPatchSet().getId())) { if (uuid.equals(c.key.uuid)) { return new com.google.gerrit.server.change.RobotCommentResource(rev, c); } } throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(id); }
@java.lang.Override protected void onLoad() { super.onLoad(); java.lang.String who = (mine) ? "self" : ownerId.toString(); com.google.gerrit.client.changes.ChangeList.query(new com.google.gerrit.client.rpc.ScreenLoadCallback<com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList>>(this) { @java.lang.Override protected void preDisplay(com.google.gerrit.client.rpc.NativeList<com.google.gerrit.client.changes.ChangeList> result) { display(result); } }, ("is:open owner:" + who), ((("is:open reviewer:" + who) + " -owner:") + who), (("is:closed owner:" + who) + " -age:1w limit:10")); }
@java.lang.Override public com.google.inject.Key<T> getKey() { return key; }
@org.junit.Test public void basicLog() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit commit = repo.branch("HEAD").commit().create(); Log response = buildJson("/repo/+log", com.google.gitiles.LogServletTest.LOG, ""); assertThat(response.log).hasSize(1); verifyJsonCommit(response.log.get(0), commit); assertThat(response.log.get(0).treeDiff).isNull(); }
private java.util.Collection<T> attemptUpdate(final java.lang.Iterable<T> instances) throws com.google.gwtorm.server.OrmException { if (schema.getDialect().canDetermineIndividualBatchUpdateCounts()) { return attemptUpdateAsBatch(instances); } else { return attemptUpdatesIndividually(instances); } }
java.util.Set<com.google.gerrit.server.account.externalids.ExternalId> byEmail(java.lang.String email) throws java.io.IOException;
private com.google.gerrit.server.account.AuthResult byUserName(final java.lang.String userName) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schema.open()) { com.google.gerrit.reviewdb.client.AccountExternalId.Key key = new com.google.gerrit.reviewdb.client.AccountExternalId.Key(SCHEME_USERNAME, userName); return auth(db.accountExternalIds().get(key)); } catch (com.google.gwtorm.server.OrmException e) { getServletContext().log("cannot query database", e); return null; } }
private com.google.gerrit.reviewdb.client.PatchSet insertPatchSet(org.eclipse.jgit.revwalk.RevCommit commit) { com.google.gerrit.extensions.common.ProblemInfo p = problem(("No patch set found for merged commit " + (commit.name()))); if (!(user.get().isIdentifiedUser())) { p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = "Must be called by an identified user to insert new patch set"; return null; } try { com.google.gerrit.server.project.ChangeControl ctl = changeControlFactory.controlFor(change, user.get()); com.google.gerrit.server.change.PatchSetInserter inserter = patchSetInserterFactory.create(repo, rw, ctl, commit); change = inserter.setValidatePolicy(ValidatePolicy.NONE).setRunHooks(false).setSendMail(false).setAllowClosed(true).setUploader(((com.google.gerrit.server.IdentifiedUser) (user.get())).getAccountId()).setMessage("Patch set for merged commit inserted by consistency checker").insert(); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIXED; p.outcome = "Inserted as patch set " + (change.currentPatchSetId().get()); return inserter.getPatchSet(); } catch (com.google.gerrit.server.project.InvalidChangeOperationException | com.google.gwtorm.server.OrmException | java.io.IOException | com.google.gerrit.server.project.NoSuchChangeException e) { warn(e); p.status = com.google.gerrit.extensions.common.ProblemInfo.Status.FIX_FAILED; p.outcome = "Error inserting new patch set"; return null; } }
private void loadConfigInfo(final com.google.gerrit.client.info.ChangeInfo info, com.google.gerrit.client.DiffObject base) { final com.google.gerrit.client.info.ChangeInfo.RevisionInfo rev = info.revision(revision); if ((base.isAutoMerge()) && (!(initCurrentRevision(info).isMerge()))) { com.google.gerrit.client.Gerrit.display(getToken(), new com.google.gerrit.client.NotFoundScreen()); } updateToken(info, base, rev); com.google.gerrit.client.info.ChangeInfo.RevisionInfo baseRev = resolveRevisionOrPatchSetId(info, base.asString(), null); com.google.gerrit.client.rpc.CallbackGroup group = new com.google.gerrit.client.rpc.CallbackGroup(); java.sql.Timestamp lastReply = com.google.gerrit.client.change.ChangeScreen.myLastReply(info); if (rev.isEdit()) { com.google.gerrit.client.info.ChangeInfo.RevisionInfo p = com.google.gerrit.client.info.ChangeInfo.RevisionInfo.findEditParentRevision(info.revisions().values()); java.util.List<com.google.gerrit.client.rpc.NativeMap<com.google.gwt.core.client.JsArray<com.google.gerrit.client.changes.CommentInfo>>> comments = loadComments(p, group); loadFileList(base, baseRev, rev, lastReply, group, comments, null); } else { loadDiff(base, baseRev, rev, lastReply, group); } group.addListener(new com.google.gwt.user.client.rpc.AsyncCallback<java.lang.Void>() { @java.lang.Override public void onSuccess(java.lang.Void result) { loadConfigInfo(info, rev); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { com.google.gerrit.client.change.ChangeScreen.logger.log(java.util.logging.Level.SEVERE, ("Loading file list and inline comments failed: " + (caught.getMessage()))); loadConfigInfo(info, rev); } }); group.done(); }
public static java.lang.String normalizeDashboardRef(java.lang.String ref) { if (!(ref.startsWith(com.google.gerrit.server.project.REFS_DASHBOARDS))) { return (REFS_DASHBOARDS) + ref; } return ref; }
@org.junit.Before public void setup() { when(cfg.getRetryInterval()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.RETRY_INTERVAL); when(cfg.getMaxTries()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.MAX_TRIES); when(remote.getUrl()).thenReturn(com.googlesource.gerrit.plugins.webhooks.PostTaskTest.WEBHOOK_URL); when(processor.process(eq(projectCreated), eq(remote))).thenReturn(java.util.Optional.of(content)); task = new com.googlesource.gerrit.plugins.webhooks.PostTask(executor, session, cfg, processor, projectCreated, remote); }
@java.lang.Override protected java.util.Optional<com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken> createToken(java.util.List<java.lang.String> values) { return java.util.Optional.of(new com.googlesource.gerrit.plugins.lfs.LfsAuthTokenTest.TestToken(values.get(0), java.lang.Long.valueOf(values.get(1)))); }
com.google.common.util.concurrent.ListenableFuture<?> insert(final org.apache.lucene.document.Document doc) { return submit(() -> writer.addDocument(doc)); }
protected PushOneCommit.Result createChange(org.eclipse.jgit.api.Git git, java.lang.String subject, java.lang.String fileName, java.lang.String content, java.lang.String topic) throws java.io.IOException, org.eclipse.jgit.api.errors.GitAPIException { com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), subject, fileName, content); return push.to(git, ("refs/for/master/" + topic)); }
@java.lang.Override protected void run() { stdout.println("Branching manifest:"); stdout.println(manifestRepo); stdout.println(manifestCommitish); stdout.println(manifestPath); com.google.gerrit.reviewdb.client.Project.NameKey p = new com.google.gerrit.reviewdb.client.Project.NameKey(manifestRepo); try { org.eclipse.jgit.lib.Repository repo = gitRepoManager.openRepository(p); org.eclipse.jgit.lib.ObjectId commitId = repo.resolve(manifestCommitish); com.amd.gerrit.plugins.manifestsubscription.VersionedManifests vManifests = new com.amd.gerrit.plugins.manifestsubscription.VersionedManifests(manifestCommitish); vManifests.load(repo, commitId); com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest manifests = new com.amd.gerrit.plugins.manifestsubscription.CanonicalManifest(vManifests); com.amd.gerrit.plugins.manifestsubscription.manifest.Manifest manifest = manifests.getCanonicalManifest(manifestPath); stdout.println(""); stdout.println((("Branch '" + (newBranch)) + "' will be created for the following projects:")); for (com.amd.gerrit.plugins.manifestsubscription.manifest.Project proj : manifest.getProject()) { stdout.print(proj.getRevision()); stdout.print("\t"); stdout.println(proj.getName()); } com.amd.gerrit.plugins.manifestsubscription.VersionedManifests.branchManifest(gitRepoManager, manifest, newBranch); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException | com.amd.gerrit.plugins.manifestsubscription.ManifestReadException | javax.xml.bind.JAXBException | org.eclipse.jgit.api.errors.GitAPIException e) { e.printStackTrace(stderr); } }
public com.google.gerrit.server.notedb.ChangeNotes createWithAutoRebuildingDisabled(com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return new com.google.gerrit.server.notedb.ChangeNotes(args, change.getProject(), change, false).load(); }
private java.util.List<java.lang.Object> extractParams(final com.google.gerrit.common.audit.Audit note, final com.google.gerrit.httpd.rpc.GerritJsonServlet.GerritCall call) { java.util.List<java.lang.Object> args = com.google.common.collect.Lists.newArrayList(java.util.Arrays.asList(call.getParams())); for (int idx : note.obfuscate()) { args.set(idx, "*****"); } return args; }
@org.junit.Test public void readPluginConfigGroupReferenceNotInGroupsFile() throws java.lang.Exception { org.eclipse.jgit.revwalk.RevCommit rev = tr.commit().add("groups", com.google.gerrit.server.git.ProjectConfigTest.group(developers)).add("project.config", ("[plugin \"somePlugin\"]\nkey1 = " + (staff.toConfigValue()))).create(); update(rev); com.google.gerrit.server.git.ProjectConfig cfg = read(rev); assertThat(cfg.getValidationErrors()).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(cfg.getValidationErrors()).getMessage()).isEqualTo(((("project.config: group \"" + (staff.getName())) + "\" not in ") + (GroupList.FILE_NAME))); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "accounts.visibility", value = "SAME_GROUP") public void suggestReviewersSameGroupVisibility() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; reviewers = suggestReviewers(changeId, "user2", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo("User2"); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user1), changeId, "user2", 2); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user2), changeId, "user2", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo("User2"); reviewers = suggestReviewers(new com.google.gerrit.acceptance.RestSession(server, user3), changeId, "user2", 2); assertThat(reviewers).hasSize(1); assertThat(com.google.common.collect.Iterables.getOnlyElement(reviewers).account.name).isEqualTo("User2"); }
@com.google.gerrit.common.Nullable abstract java.time.Duration timeout();
@java.lang.Override public com.google.gerrit.extensions.api.changes.AddReviewerResult apply(com.google.gerrit.server.change.ChangeResource rsrc, com.google.gerrit.extensions.api.changes.AddReviewerInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException, com.google.gwtorm.server.OrmException, java.io.IOException { if ((input.reviewer) == null) { throw new com.google.gerrit.extensions.restapi.BadRequestException("missing reviewer field"); } try { com.google.gerrit.reviewdb.client.Account.Id accountId = accounts.parse(input.reviewer).getAccountId(); return putAccount(input.reviewer, reviewerFactory.create(rsrc, accountId), input.state()); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e) { try { return putGroup(rsrc, input); } catch (com.google.gerrit.extensions.restapi.UnprocessableEntityException e2) { throw new com.google.gerrit.extensions.restapi.UnprocessableEntityException(java.text.MessageFormat.format(com.google.gerrit.server.change.ChangeMessages.get().reviewerNotFound, input.reviewer)); } } }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.VoteResource rsrc, com.google.gerrit.extensions.api.changes.DeleteVoteInput input) throws com.google.gerrit.extensions.restapi.RestApiException, com.google.gerrit.server.git.UpdateException { if (input == null) { input = new com.google.gerrit.extensions.api.changes.DeleteVoteInput(); } if (((input.label) != null) && (!(rsrc.getLabel().equals(input.label)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("label must match URL"); } if ((input.notify) == null) { input.notify = com.google.gerrit.extensions.api.changes.NotifyHandling.ALL; } com.google.gerrit.server.change.ReviewerResource r = rsrc.getReviewer(); com.google.gerrit.reviewdb.client.Change change = r.getChange(); if (((r.getRevisionResource()) != null) && (!(r.getRevisionResource().isCurrent()))) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException("Cannot delete vote on non-current patch set"); } try (com.google.gerrit.server.git.BatchUpdate bu = batchUpdateFactory.create(db.get(), change.getProject(), r.getControl().getUser(), com.google.gerrit.common.TimeUtil.nowTs())) { bu.addOp(change.getId(), new com.google.gerrit.server.change.DeleteVote.Op(r.getReviewerUser().getAccountId(), rsrc.getLabel(), input)); bu.execute(); } return com.google.gerrit.extensions.restapi.Response.none(); }
private com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute> accountAttributeSupplier(final com.google.gerrit.extensions.common.AccountInfo account) { return com.google.common.base.Suppliers.memoize(new com.google.common.base.Supplier<com.google.gerrit.server.data.AccountAttribute>() { @java.lang.Override public com.google.gerrit.server.data.AccountAttribute get() { return eventFactory.asAccountAttribute(new com.google.gerrit.reviewdb.client.Account.Id(account._accountId)); } }); }
public java.sql.Timestamp getRefreshCookieAt() { return refreshCookieAt; }
public com.google.gerrit.server.account.AccountState getAccount() throws java.io.IOException { return com.google.gerrit.server.account.AccountState.fromAccountConfig(allUsersName, externalIds, accountConfig, extIdNotes).get(); }
@org.junit.Test public void submitRecords() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Account.Id user1 = createAccount("user1"); org.eclipse.jgit.junit.TestRepository<com.google.gerrit.testing.InMemoryRepositoryManager.Repo> repo = createProject("repo"); com.google.gerrit.reviewdb.client.Change change1 = insert(repo, newChange(repo)); com.google.gerrit.reviewdb.client.Change change2 = insert(repo, newChange(repo)); gApi.changes().id(change1.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.approve()); requestContext.setContext(newRequestContext(user1)); gApi.changes().id(change2.getId().get()).current().review(com.google.gerrit.extensions.api.changes.ReviewInput.recommend()); requestContext.setContext(newRequestContext(user.getAccountId())); assertQuery("is:submittable", change1); assertQuery("-is:submittable", change2); assertQuery("submittable:ok", change1); assertQuery("submittable:not_ready", change2); assertQuery("label:CodE-RevieW=ok", change1); assertQuery("label:CodE-RevieW=ok,user=user", change1); assertQuery("label:CodE-RevieW=ok,Administrators", change1); assertQuery("label:CodE-RevieW=ok,group=Administrators", change1); assertQuery("label:CodE-RevieW=ok,owner", change1); assertQuery("label:CodE-RevieW=ok,user1"); assertQuery("label:CodE-RevieW=need", change2); assertQuery("label:CodE-RevieW=need,user1"); assertQuery("label:CodE-RevieW=need,user"); }
public org.eclipse.jgit.revwalk.RevCommit commit() throws java.io.IOException { com.google.gerrit.server.notedb.BatchMetaDataUpdate batch = openUpdate(); try { writeCommit(batch); if ((draftUpdate) != null) { draftUpdate.commit(); } org.eclipse.jgit.revwalk.RevCommit c = batch.commit(); return c; } catch (com.google.gwtorm.server.OrmException e) { throw new java.io.IOException(e); } finally { batch.close(); } }
@java.lang.Override public void changeDiffPreferences(final com.google.gerrit.extensions.client.DiffPreferencesInfo diffPref, com.google.gwtjsonrpc.common.AsyncCallback<com.google.gwtjsonrpc.common.VoidResult> callback) { run(callback, new com.google.gerrit.httpd.rpc.account.Action<com.google.gwtjsonrpc.common.VoidResult>() { @java.lang.Override public com.google.gwtjsonrpc.common.VoidResult run(com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { if (!(getUser().isIdentifiedUser())) { throw new java.lang.IllegalArgumentException("Not authenticated"); } com.google.gerrit.server.IdentifiedUser me = getUser().asIdentifiedUser(); try { setDiff.apply(new com.google.gerrit.server.account.AccountResource(me), diffPref); } catch (AuthException | BadRequestException | ConfigInvalidException | IOException e) { throw new com.google.gwtorm.server.OrmException("Cannot save diff preferences", e); } return com.google.gwtjsonrpc.common.VoidResult.INSTANCE; } }); }
private static void checkConfig(org.eclipse.jgit.lib.Config cfg) { java.util.Set<java.lang.String> keys = new java.util.HashSet<>(); for (com.google.gerrit.server.notedb.NotesMigration.Table t : com.google.gerrit.server.notedb.NotesMigration.Table.values()) { keys.add(t.key()); } for (java.lang.String t : cfg.getSubsections(com.google.gerrit.server.notedb.NotesMigration.NOTEDB)) { checkArgument(keys.contains(t.toLowerCase()), "invalid notedb table: %s", t); for (java.lang.String key : cfg.getNames(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t)) { java.lang.String lk = key.toLowerCase(); checkArgument(((lk.equals(com.google.gerrit.server.notedb.NotesMigration.WRITE)) || (lk.equals(com.google.gerrit.server.notedb.NotesMigration.READ))), "invalid notedb key: %s.%s", t, key); } boolean write = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.WRITE, false); boolean read = cfg.getBoolean(com.google.gerrit.server.notedb.NotesMigration.NOTEDB, t, com.google.gerrit.server.notedb.NotesMigration.READ, false); checkArgument((!(read && (!write))), "must have write enabled when read enabled: %s", t); } }
@java.lang.Override public java.io.File get() { if (!(ready)) { synchronized(dataDir) { if (!(ready)) { if ((!(dataDir.exists())) && (!(dataDir.mkdirs()))) { throw new com.google.inject.ProvisionException(java.lang.String.format("Cannot create %s for plugin %s", dataDir.getAbsolutePath(), getName())); } ready = true; } } } return dataDir; }
private java.sql.Timestamp now() { return new java.sql.Timestamp(java.lang.System.currentTimeMillis()); }
private void flushEventsToUpdate(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.NoteDbUpdateManager manager, com.google.gerrit.server.notedb.ChangeRebuilderImpl.EventList<com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event> events, com.google.gerrit.reviewdb.client.Change change) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { if (events.isEmpty()) { return; } com.google.gerrit.server.notedb.ChangeUpdate update = updateFactory.create(controlFactory.controlFor(notesFactory.createWithAutoRebuildingDisabled(change), events.getUser(db)), events.getWhen()); update.setAllowWriteToNewRef(true); update.setPatchSetId(events.getPatchSetId()); for (com.google.gerrit.server.notedb.ChangeRebuilderImpl.Event e : events) { e.apply(update); } manager.add(update); events.clear(); }
@java.lang.Override public void doFilter(javax.servlet.ServletRequest request, javax.servlet.ServletResponse res, javax.servlet.FilterChain chain) throws java.io.IOException, javax.servlet.ServletException { java.lang.String pkg = "gerrit-gwtui"; java.lang.String target = "ui_" + (rule.select(((javax.servlet.http.HttpServletRequest) (request)))); if ((gwtuiRecompile) || (!(uaInitialized.contains(target)))) { java.lang.String rule = (("//" + pkg) + ":") + target; java.lang.String child = java.lang.String.format("%s/__gwt_binary_%s__", pkg, target); java.io.File zip = gen.resolve(child).resolve((target + ".zip")).toFile(); synchronized(this) { try { com.google.gerrit.httpd.raw.BuckUtils.build(root, gen, rule); } catch (com.google.gerrit.httpd.raw.BuckUtils.BuildFailureException e) { com.google.gerrit.httpd.raw.BuckUtils.displayFailure(rule, e.why, ((javax.servlet.http.HttpServletResponse) (res))); return; } if ((!(target.equals(lastTarget))) || ((lastTime) != (zip.lastModified()))) { lastTarget = target; lastTime = zip.lastModified(); com.google.gerrit.httpd.raw.RecompileGwtUiFilter.unpack(zip, unpackedWar.toFile()); } } uaInitialized.add(target); } chain.doFilter(request, res); }
@java.lang.Override public void onGitReferenceUpdated(com.google.gerrit.extensions.events.GitReferenceUpdatedListener.Event event) { com.googlesource.gerrit.plugins.replication.ReplicationState state = new com.googlesource.gerrit.plugins.replication.ReplicationState(new com.googlesource.gerrit.plugins.replication.PushResultProcessing.GitUpdateProcessing(changeHooks, database)); if (!(running)) { com.googlesource.gerrit.plugins.replication.ReplicationQueue.wrappedLog.warn("Replication plugin did not finish startup before event", state); return; } com.google.gerrit.reviewdb.client.Project.NameKey project = new com.google.gerrit.reviewdb.client.Project.NameKey(event.getProjectName()); for (com.googlesource.gerrit.plugins.replication.Destination cfg : config.getDestinations()) { if ((cfg.wouldPushProject(project)) && (cfg.wouldPushRef(event.getRefName()))) { for (org.eclipse.jgit.transport.URIish uri : cfg.getURIs(project, null)) { cfg.schedule(project, event.getRefName(), uri, state); } } } state.markAllPushTasksScheduled(); }
@java.lang.Override public java.lang.String apply(com.google.gerrit.server.group.GroupResource resource, com.google.gerrit.server.group.PutName.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.BadRequestException, com.google.gerrit.extensions.restapi.MethodNotAllowedException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.extensions.restapi.ResourceNotFoundException, com.google.gwtorm.server.OrmException { if ((resource.toAccountGroup()) == null) { throw new com.google.gerrit.extensions.restapi.MethodNotAllowedException(); } else if (!(resource.getControl().isOwner())) { throw new com.google.gerrit.extensions.restapi.AuthException("Not group owner"); } else if ((input == null) || (com.google.common.base.Strings.isNullOrEmpty(input.name))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name is required"); } try { return performRenameGroupFactory.create().renameGroup(resource.toAccountGroup().getId(), input.name).group.getName(); } catch (com.google.gerrit.common.errors.NoSuchGroupException e) { throw new com.google.gerrit.extensions.restapi.ResourceNotFoundException(); } catch (com.google.gerrit.common.errors.InvalidNameException e) { throw new com.google.gerrit.extensions.restapi.BadRequestException(e.getMessage()); } catch (com.google.gerrit.common.errors.NameAlreadyUsedException e) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException(e.getMessage()); } }
void clear() { countsByProjectRefs.clear(); }
private com.google.gerrit.server.patch.PatchListEntry newEntry(org.eclipse.jgit.revwalk.RevTree aTree, org.eclipse.jgit.patch.FileHeader fileHeader, long sizeDelta) { if (((aTree == null) || ((fileHeader.getPatchType()) != (org.eclipse.jgit.patch.FileHeader.PatchType.UNIFIED))) || (fileHeader.getHunks().isEmpty())) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } java.util.List<org.eclipse.jgit.diff.Edit> edits = fileHeader.toEditList(); if (edits.isEmpty()) { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, java.util.Collections.<org.eclipse.jgit.diff.Edit>emptyList(), sizeDelta); } else { return new com.google.gerrit.server.patch.PatchListEntry(fileHeader, edits, sizeDelta); } }
@java.lang.Override public GroupDescription.Basic get(final com.google.gerrit.reviewdb.client.AccountGroup.UUID uuid) { if (!(handles(uuid))) { return null; } java.lang.String groupDn = uuid.get().substring(com.google.gerrit.server.auth.ldap.Helper.LDAP_UUID.length()); com.google.gerrit.server.CurrentUser user = userProvider.get(); if ((!(user instanceof com.google.gerrit.server.IdentifiedUser)) || (!(membershipsOf(((com.google.gerrit.server.IdentifiedUser) (user))).contains(uuid)))) { try { if (!(existsCache.get(groupDn))) { return null; } } catch (java.util.concurrent.ExecutionException e) { com.google.gerrit.server.auth.ldap.LdapGroupBackend.log.warn(java.lang.String.format("Cannot lookup group %s in LDAP", groupDn), e); return null; } } final java.lang.String name = (com.google.gerrit.server.auth.ldap.LdapGroupBackend.LDAP_NAME) + (com.google.gerrit.server.auth.ldap.LdapGroupBackend.cnFor(groupDn)); return new com.google.gerrit.common.data.GroupDescription.Basic() { @java.lang.Override public AccountGroup.UUID getGroupUUID() { return uuid; } @java.lang.Override public java.lang.String getName() { return name; } @java.lang.Override public boolean isVisibleToAll() { return true; } }; }
com.google.gerrit.server.changedetail.DeleteDraftPatchSet create(com.google.gerrit.reviewdb.PatchSet.Id patchSetId);
private java.util.Optional<java.lang.String> readProjectConfig(java.lang.String projectName) throws java.lang.Exception { try (org.eclipse.jgit.lib.Repository repo = repoManager.openRepository(new com.google.gerrit.reviewdb.client.Project.NameKey(projectName))) { org.eclipse.jgit.junit.TestRepository<?> tr = new org.eclipse.jgit.junit.TestRepository(repo); org.eclipse.jgit.revwalk.RevWalk rw = tr.getRevWalk(); org.eclipse.jgit.lib.Ref ref = repo.exactRef(RefNames.REFS_CONFIG); if (ref == null) { return java.util.Optional.empty(); } org.eclipse.jgit.lib.ObjectLoader obj = rw.getObjectReader().open(tr.get(rw.parseTree(ref.getObjectId()), com.google.gerrit.acceptance.rest.project.PROJECT_CONFIG), Constants.OBJ_BLOB); return java.util.Optional.of(new java.lang.String(obj.getCachedBytes(java.lang.Integer.MAX_VALUE), java.nio.charset.StandardCharsets.UTF_8)); } }
public void addSubgroups(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.AccountGroup.UUID parentGroupUuid, java.util.Set<com.google.gerrit.reviewdb.client.AccountGroup.UUID> subgroupUuids) throws com.google.gerrit.common.errors.NoSuchGroupException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.reviewdb.client.AccountGroup parentGroup = groups.getExistingGroup(db, parentGroupUuid); com.google.gerrit.reviewdb.client.AccountGroup.Id parentGroupId = parentGroup.getId(); java.util.Set<com.google.gerrit.reviewdb.client.AccountGroupById> newSubgroups = new java.util.HashSet<>(); for (com.google.gerrit.reviewdb.client.AccountGroup.UUID includedGroupUuid : subgroupUuids) { boolean isSubgroup = groups.isSubgroup(db, parentGroupUuid, includedGroupUuid); if (!isSubgroup) { com.google.gerrit.reviewdb.client.AccountGroupById.Key key = new com.google.gerrit.reviewdb.client.AccountGroupById.Key(parentGroupId, includedGroupUuid); newSubgroups.add(new com.google.gerrit.reviewdb.client.AccountGroupById(key)); } } if (newSubgroups.isEmpty()) { return; } if ((currentUser) != null) { auditService.dispatchAddGroupsToGroup(currentUser.getAccountId(), newSubgroups); } db.accountGroupById().insert(newSubgroups); groupCache.evict(parentGroup.getGroupUUID(), parentGroup.getId(), parentGroup.getNameKey()); for (com.google.gerrit.reviewdb.client.AccountGroupById newIncludedGroup : newSubgroups) { groupIncludeCache.evictParentGroupsOf(newIncludedGroup.getIncludeUUID()); } groupIncludeCache.evictSubgroupsOf(parentGroupUuid); }
void removeDraft(com.google.gerrit.client.diff.DraftBox box, int line) { net.codemirror.lib.CodeMirror.LineHandle handle = getCmFromSide(box.getSide()).getLineHandle(line); lineActiveBoxMap.remove(handle); if (linePublishedBoxesMap.containsKey(handle)) { java.util.List<com.google.gerrit.client.diff.PublishedBox> list = linePublishedBoxesMap.get(handle); lineActiveBoxMap.put(handle, list.get(((list.size()) - 1))); } }
private com.google.gerrit.server.notedb.RevisionNoteMap getRevisionNoteMap(org.eclipse.jgit.revwalk.RevWalk rw, org.eclipse.jgit.lib.ObjectId curr) throws com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (curr.equals(org.eclipse.jgit.lib.ObjectId.zeroId())) { return com.google.gerrit.server.notedb.RevisionNoteMap.emptyMap(); } if (migration.readChanges()) { com.google.gerrit.server.notedb.ChangeNotes notes = getNotes(); if ((notes != null) && ((notes.revisionNoteMap) != null)) { org.eclipse.jgit.lib.ObjectId idFromNotes = firstNonNull(notes.load().getRevision(), org.eclipse.jgit.lib.ObjectId.zeroId()); if (idFromNotes.equals(curr)) { return notes.revisionNoteMap; } } } org.eclipse.jgit.notes.NoteMap noteMap = org.eclipse.jgit.notes.NoteMap.read(rw.getObjectReader(), rw.parseCommit(curr)); return com.google.gerrit.server.notedb.RevisionNoteMap.parse(noteUtil, getId(), rw.getObjectReader(), noteMap, false); }
private static void addExtensionLink(com.google.gerrit.client.ui.LinkMenuBar m, com.google.gerrit.client.extensions.TopMenuItem item) { if ((item.getUrl().startsWith("#")) && (((item.getTarget()) == null) || (item.getTarget().isEmpty()))) { com.google.gerrit.client.ui.LinkMenuItem a = new com.google.gerrit.client.ui.LinkMenuItem(item.getName(), item.getUrl().substring(1)); if ((item.getId()) != null) { a.getElement().setAttribute("id", item.getId()); } m.add(a); } else { com.google.gwt.user.client.ui.Anchor atag = com.google.gerrit.client.Gerrit.anchor(item.getName(), (com.google.gerrit.client.Gerrit.isAbsolute(item.getUrl()) ? item.getUrl() : com.google.gerrit.client.Gerrit.selfRedirect(item.getUrl()))); if (((item.getTarget()) != null) && (!(item.getTarget().isEmpty()))) { atag.setTarget(item.getTarget()); } if ((item.getId()) != null) { atag.getElement().setAttribute("id", item.getId()); } m.add(atag); } }
private static java.util.List<com.google.gitiles.CommitJsonData.Diff> toJsonData(DiffList dl) { java.util.List<com.google.gitiles.CommitJsonData.Diff> result = com.google.common.collect.Lists.newArrayListWithCapacity(dl.entries.size()); for (org.eclipse.jgit.diff.DiffEntry de : dl.entries) { com.google.gitiles.CommitJsonData.Diff d = new com.google.gitiles.CommitJsonData.Diff(); d.type = de.getChangeType().name().toLowerCase(); d.oldId = de.getOldId().name(); d.oldMode = de.getOldMode().getBits(); d.oldPath = de.getOldPath(); d.newId = de.getNewId().name(); d.newMode = de.getNewMode().getBits(); d.newPath = de.getNewPath(); switch (de.getChangeType()) { case COPY : case RENAME : d.score = de.getScore(); break; default : break; } result.add(d); } return result; }
@java.lang.Override public void onShowView() { super.onShowView(); handlers.add(com.google.gwtexpui.user.client.UserAgent.addDialogVisibleHandler(new com.google.gwtexpui.user.client.DialogVisibleHandler() { @java.lang.Override public void onDialogVisible(com.google.gwtexpui.user.client.DialogVisibleEvent event) { diffTable.getElement().getStyle().setVisibility((event.isVisible() ? Style.Visibility.HIDDEN : Style.Visibility.VISIBLE)); } })); resizeCodeMirror(); com.google.gwt.user.client.Window.enableScrolling(false); cmA.setOption("viewportMargin", 10); cmB.setOption("viewportMargin", 10); cmB.setCursor(net.codemirror.lib.LineCharacter.create(0)); cmB.focus(); prefetchNextFile(); }
private com.google.gerrit.extensions.client.SubmitType submitType(com.google.gerrit.server.query.change.ChangeData cd, com.google.gerrit.reviewdb.client.PatchSet ps, boolean visible) throws com.google.gwtorm.server.OrmException { if (!visible) { return cd.changeControl().getProject().getSubmitType(); } com.google.gerrit.common.data.SubmitTypeRecord str = (ps == (cd.currentPatchSet())) ? cd.submitTypeRecord() : new com.google.gerrit.server.project.SubmitRuleEvaluator(accountCache, accounts, cd).setPatchSet(ps).getSubmitType(); if (!(str.isOk())) { logErrorAndThrow(((("Failed to get submit type for " + (cd.getId())) + ": ") + (str.errorMessage))); } return str.type; }
private java.util.List<com.google.gerrit.extensions.common.GroupInfo> query(com.google.gerrit.server.api.groups.QueryRequest r) throws com.google.gerrit.extensions.restapi.RestApiException { try { com.google.gerrit.server.group.QueryGroups myQueryGroups = queryGroups.get(); myQueryGroups.setQuery(r.getQuery()); myQueryGroups.setLimit(r.getLimit()); myQueryGroups.setStart(r.getStart()); for (com.google.gerrit.extensions.client.ListGroupsOption option : r.getOptions()) { myQueryGroups.addOption(option); } return myQueryGroups.apply(TopLevelResource.INSTANCE); } catch (com.google.gwtorm.server.OrmException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot query groups", e); } }
private java.lang.String createCommitMessage(com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id> originalMembers, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.Account.Id>> updatedMembers, com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> originalSubgroups, java.util.Optional<com.google.common.collect.ImmutableSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID>> updatedSubgroups) { java.lang.String summaryLine = (groupCreation.isPresent()) ? "Create group" : "Update group"; java.util.StringJoiner footerJoiner = new java.util.StringJoiner("\n", "\n\n", ""); footerJoiner.setEmptyValue(""); getCommitFooterForRename().ifPresent(footerJoiner::add); updatedMembers.ifPresent(( newMembers) -> getCommitFootersForMemberModifications(originalMembers, newMembers).forEach(footerJoiner::add)); updatedSubgroups.ifPresent(( newSubgroups) -> getCommitFootersForSubgroupModifications(originalSubgroups, newSubgroups).forEach(footerJoiner::add)); java.lang.String footer = footerJoiner.toString(); return summaryLine + footer; }
@java.lang.Override protected void configure() { factory(PrologEnvironment.Factory.class); }
@java.lang.Override public com.google.gerrit.extensions.api.projects.ProjectApi create(com.google.gerrit.extensions.api.projects.ProjectInput in) throws com.google.gerrit.extensions.restapi.RestApiException { try { if ((name) == null) { throw new com.google.gerrit.extensions.restapi.ResourceConflictException("Project already exists"); } if (((in.name) != null) && (!(name.equals(in.name)))) { throw new com.google.gerrit.extensions.restapi.BadRequestException("name must match input.name"); } checkRequiresCapability(user, null, com.google.gerrit.server.project.CreateProject.class); createProjectFactory.get().create(name).apply(TopLevelResource.INSTANCE, in); return projectApi.create(projects.parse(name)); } catch (java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException(("Cannot create project: " + (e.getMessage())), e); } }
@java.lang.Override public void onSuccess(com.google.gerrit.client.VoidResult result) { com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(id.getParentKey())); hide(); }
@java.lang.Override protected void configure() { com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.BranchWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileHistoryWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.FileWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.PatchSetWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); com.google.gerrit.extensions.registration.DynamicSet.bind(binder(), com.google.gerrit.extensions.webui.ProjectWebLink.class).to(com.googlesource.gerrit.plugins.gitiles.GitilesWeblinks.class); bind(GitilesAccess.Factory.class).to(GerritGitilesAccess.Factory.class); bind(new com.google.inject.TypeLiteral<org.eclipse.jgit.transport.resolver.RepositoryResolver<javax.servlet.http.HttpServletRequest>>() {}).to(com.googlesource.gerrit.plugins.gitiles.Resolver.class); listener().to(com.googlesource.gerrit.plugins.gitiles.Module.Lifecycle.class); }
private static com.google.gerrit.extensions.restapi.BinaryResult base64(com.google.gerrit.extensions.restapi.BinaryResult bin) throws java.io.IOException { int maxSize = com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(bin.getContentLength()); int estSize = java.lang.Math.min(com.google.gerrit.httpd.restapi.RestApiServlet.base64MaxSize(com.google.gerrit.httpd.restapi.RestApiServlet.HEAP_EST_SIZE), maxSize); org.eclipse.jgit.util.TemporaryBuffer.Heap buf = com.google.gerrit.httpd.restapi.RestApiServlet.heap(estSize, maxSize); java.io.OutputStream encoded = com.google.common.io.BaseEncoding.base64().encodingStream(new java.io.OutputStreamWriter(buf, java.nio.charset.StandardCharsets.ISO_8859_1)); bin.writeTo(encoded); encoded.close(); return com.google.gerrit.httpd.restapi.RestApiServlet.asBinaryResult(buf); }
@java.lang.Override public boolean apply(com.google.gerrit.server.account.ExternalId externalId) { return externalId.key().get().startsWith(IdentifiedUserGitHubLoginProvider.EXTERNAL_ID_PREFIX); }
public java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> byPatchSet(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeNotes notes, com.google.gerrit.reviewdb.client.PatchSet.Id psId) throws com.google.gwtorm.server.OrmException { if (!(migration.readPatchSetApprovals())) { return com.google.gerrit.server.ApprovalsUtil.sortApprovals(db.patchSetApprovals().byPatchSet(psId)); } return notes.load().getApprovals().get(psId); }
private com.google.gerrit.reviewdb.client.AccountSshKey getKey(int seq) { checkLoaded(); com.google.common.base.Optional<com.google.gerrit.reviewdb.client.AccountSshKey> key = keys.get((seq - 1)); return key.orNull(); }
private void parseDelete(final org.eclipse.jgit.transport.ReceiveCommand cmd) { com.google.gerrit.server.project.RefControl ctl = projectControl.controlForRef(cmd.getRefName()); if (ctl.canDelete()) { } else { com.google.gerrit.server.git.ReceiveCommits.reject(cmd); } }
@com.google.gwtorm.server.Query com.google.gwtorm.server.ResultSet<com.google.gwtorm.data.Person> all() throws com.google.gwtorm.server.OrmException;
@java.lang.Override public void delete() throws com.google.gerrit.extensions.restapi.RestApiException { try { delete.apply(rsrc, new com.google.gerrit.gpg.server.DeleteGpgKey.Input()); } catch (org.bouncycastle.openpgp.PGPException | com.google.gwtorm.server.OrmException | java.io.IOException | org.eclipse.jgit.errors.ConfigInvalidException e) { throw new com.google.gerrit.extensions.restapi.RestApiException("Cannot delete GPG key", e); } }
public void loadActionPanel(final com.google.gerrit.common.data.PatchSetDetail detail) { if (!(patchSet.getId().equals(diffBaseId))) { actionsPanel = new com.google.gwt.user.client.ui.FlowPanel(); actionsPanel.setStyleName(Gerrit.RESOURCES.css().patchSetActions()); actionsPanel.setVisible(true); if (com.google.gerrit.client.Gerrit.isSignedIn()) { if (changeDetail.canEdit()) { populateReviewAction(); if (changeDetail.isCurrentPatchSet(detail)) { populateActions(detail); } } if (detail.getPatchSet().isDraft()) { if (changeDetail.canPublish()) { populatePublishAction(); } if ((changeDetail.canDeleteDraft()) && ((changeDetail.getPatchSets().size()) > 1)) { populateDeleteDraftPatchSetAction(); } } } populateDiffAllActions(detail); body.add(actionsPanel); } }
@java.lang.Override public com.googlecode.prolog_cafe.lang.Operation exec(com.googlecode.prolog_cafe.lang.Prolog engine) { return engine.trust(gerrit.PRED_commit_delta_4.commit_delta_empty); }
@org.junit.Test public void patchSetObjectAndRefMissingWithFix() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = insertChange(); com.google.gerrit.reviewdb.client.PatchSet ps = newPatchSet(c.currentPatchSetId(), org.eclipse.jgit.lib.ObjectId.fromString("deadbeefdeadbeefdeadbeefdeadbeefdeadbeef"), userId); db.patchSets().insert(java.util.Collections.singleton(ps)); java.lang.String refName = ps.getId().toRefName(); java.util.List<com.google.gerrit.extensions.common.ProblemInfo> problems = checker.check(c, new com.google.gerrit.extensions.api.changes.FixInput()).problems(); com.google.gerrit.extensions.common.ProblemInfo p = problems.get(0); assertThat(p.message).isEqualTo(("Ref missing: " + refName)); assertThat(p.status).isNull(); }
@org.junit.Test public void notReturnEventWithNoVisibilityInfo() throws java.lang.Exception { setUpClient(); com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent mockEvent = new com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.MockEvent(); com.google.gerrit.reviewdb.client.Project.NameKey projectMock = easyMock.createMock(Project.NameKey.class); easyMock.resetAll(); expect(projectMock.get()).andStubReturn(" "); expect(pcFactoryMock.controlFor(org.easymock.EasyMock.anyObject(Project.NameKey.class), org.easymock.EasyMock.anyObject(com.google.gerrit.server.CurrentUser.class))).andThrow(new java.io.IOException()); easyMock.replayAll(); store.storeEvent(mockEvent); java.util.List<java.lang.String> events = store.queryChangeEvents(com.ericsson.gerrit.plugins.eventslog.SQLStoreTest.GENERIC_QUERY); assertThat(events).isEmpty(); tearDown(); }
@com.google.gerrit.server.query.change.Operator public com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData> visibleto(java.lang.String who) throws com.google.gerrit.index.query.QueryParseException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.ConfigInvalidException { if (isSelf(who)) { return is_visible(); } java.util.Set<com.google.gerrit.reviewdb.client.Account.Id> m = args.accountResolver.findAll(who); if (!(m.isEmpty())) { java.util.List<com.google.gerrit.index.query.Predicate<com.google.gerrit.server.query.change.ChangeData>> p = com.google.common.collect.Lists.newArrayListWithCapacity(m.size()); for (com.google.gerrit.reviewdb.client.Account.Id id : m) { return visibleto(args.userFactory.create(id)); } return com.google.gerrit.index.query.Predicate.or(p); } java.util.Collection<com.google.gerrit.common.data.GroupReference> suggestions = args.groupBackend.suggest(who, null); if (!(suggestions.isEmpty())) { java.util.HashSet<com.google.gerrit.reviewdb.client.AccountGroup.UUID> ids = new java.util.HashSet<>(); for (com.google.gerrit.common.data.GroupReference ref : suggestions) { ids.add(ref.getUUID()); } return visibleto(new com.google.gerrit.server.query.change.SingleGroupUser(ids)); } throw error((("No user or group matches \"" + who) + "\".")); }
public void display(final com.google.gerrit.reviewdb.Change chg, final com.google.gerrit.reviewdb.PatchSetInfo info, final com.google.gerrit.common.data.AccountInfoCache acc) { infoBlock.display(chg, acc); messageBlock.display(info.getMessage()); }
public void testInheritRead_SingleBranchDeniesUpload() { com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, "refs/*"); com.google.gerrit.server.project.Util.grant(util.getParentConfig(), com.google.gerrit.server.project.PUSH, com.google.gerrit.server.project.Util.REGISTERED, "refs/for/refs/*"); com.google.gerrit.server.project.Util.grant(local, com.google.gerrit.server.project.READ, com.google.gerrit.server.project.Util.REGISTERED, "refs/heads/foobar"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.READ, "refs/heads/foobar"); com.google.gerrit.server.project.Util.doNotInherit(local, com.google.gerrit.server.project.PUSH, "refs/for/refs/heads/foobar"); com.google.gerrit.server.project.ProjectControl u = util.user(local); assertTrue("can upload", ((u.canPushToAtLeastOneRef()) == (com.google.gerrit.common.data.Capable.OK))); assertTrue("can upload refs/heads/master", u.controlForRef("refs/heads/master").canUpload()); assertFalse("deny refs/heads/foobar", u.controlForRef("refs/heads/foobar").canUpload()); }
@org.junit.Test public void editCannotBeCreatedOnAbandonedChange() throws java.lang.Exception { com.google.gerrit.extensions.common.ChangeInfo change = gApi.changes().id(changeId).get(); gApi.changes().id(changeId).abandon(); exception.expect(com.google.gerrit.extensions.restapi.ResourceConflictException.class); exception.expectMessage(java.lang.String.format("change %s is abandoned", change._number)); createArbitraryEditFor(changeId); }
public java.lang.Iterable<com.google.gerrit.reviewdb.client.PatchSetApproval> addApprovals(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.server.notedb.ChangeUpdate update, com.google.gerrit.common.data.LabelTypes labelTypes, com.google.gerrit.reviewdb.client.PatchSet ps, com.google.gerrit.server.project.ChangeControl changeCtl, java.util.Map<java.lang.String, java.lang.Short> approvals) throws com.google.gwtorm.server.OrmException { if (approvals.isEmpty()) { return java.util.Collections.emptyList(); } com.google.gerrit.server.ApprovalsUtil.checkApprovals(approvals, changeCtl); java.util.List<com.google.gerrit.reviewdb.client.PatchSetApproval> cells = new java.util.ArrayList<>(approvals.size()); java.util.Date ts = update.getWhen(); for (java.util.Map.Entry<java.lang.String, java.lang.Short> vote : approvals.entrySet()) { com.google.gerrit.common.data.LabelType lt = labelTypes.byLabel(vote.getKey()); cells.add(new com.google.gerrit.reviewdb.client.PatchSetApproval(new com.google.gerrit.reviewdb.client.PatchSetApproval.Key(ps.getId(), ps.getUploader(), lt.getLabelId()), vote.getValue(), ts)); } for (com.google.gerrit.reviewdb.client.PatchSetApproval psa : cells) { update.putApproval(psa.getLabel(), psa.getValue()); } db.patchSetApprovals().insert(cells); return cells; }
public void fire(com.google.gerrit.extensions.common.ChangeInfo change, com.google.gerrit.extensions.common.RevisionInfo revision, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> approvals, java.util.Map<java.lang.String, com.google.gerrit.extensions.common.ApprovalInfo> oldApprovals, com.google.gerrit.extensions.api.changes.NotifyHandling notify, java.lang.String message, com.google.gerrit.extensions.common.AccountInfo remover, java.sql.Timestamp when) { if (!(listeners.iterator().hasNext())) { return; } com.google.gerrit.server.extensions.events.VoteDeleted.Event event = new com.google.gerrit.server.extensions.events.VoteDeleted.Event(change, revision, approvals, oldApprovals, notify, message, remover, when); for (com.google.gerrit.extensions.events.VoteDeletedListener l : listeners) { try { l.onVoteDeleted(event); } catch (java.lang.Exception e) { com.google.gerrit.server.extensions.events.VoteDeleted.log.warn("Error in event listener", e); } } }
private static void addUpdates(com.google.common.collect.ListMultimap<java.lang.String, ? extends com.google.gerrit.server.notedb.AbstractChangeUpdate> updates, com.google.gerrit.server.notedb.NoteDbUpdateManager.OpenRepo or) throws com.google.gwtorm.server.OrmException, java.io.IOException { for (java.lang.String refName : updates.keySet()) { org.eclipse.jgit.lib.ObjectId old = firstNonNull(or.cmds.getObjectId(or.repo, refName), org.eclipse.jgit.lib.ObjectId.zeroId()); org.eclipse.jgit.lib.ObjectId curr = old; for (com.google.gerrit.server.notedb.AbstractChangeUpdate u : updates.get(refName)) { org.eclipse.jgit.lib.ObjectId next = u.apply(or.rw, or.ins, curr); if (next == null) { continue; } curr = next; } if (!(old.equals(curr))) { or.cmds.add(new org.eclipse.jgit.transport.ReceiveCommand(old, curr, refName)); } } }
@java.lang.Override public void onFailure(java.lang.Throwable err) { com.google.gerrit.client.change.ChangeActions.setEnabled(true, draftButtons); if (com.google.gerrit.client.change.SubmitFailureDialog.isConflict(err)) { new com.google.gerrit.client.change.SubmitFailureDialog(err.getMessage()).center(); com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(project, id)); } else { super.onFailure(err); } }
private com.google.gerrit.server.notedb.NoteDbChangeState execute(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change.Id changeId, com.google.gerrit.server.notedb.NoteDbUpdateManager manager) throws com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.gerrit.server.notedb.NoteDbChangeState result; db.changes().beginTransaction(changeId); try { com.google.gerrit.reviewdb.client.Change change = db.changes().get(changeId); if (change == null) { throw new com.google.gerrit.server.project.NoSuchChangeException(changeId); } result = com.google.gerrit.server.notedb.NoteDbChangeState.applyDelta(change, manager.stage().get(changeId)); checkNotNull(result, "expected new NoteDbChangeState when rebuilding change %s", changeId); db.changes().update(java.util.Collections.singleton(change)); db.commit(); } finally { db.rollback(); } manager.execute(); return result; }
@org.junit.Test public void postComment() throws java.lang.Exception { for (java.lang.Integer line : lines) { java.lang.String file = "file"; java.lang.String contents = "contents " + line; com.google.gerrit.acceptance.PushOneCommit push = pushFactory.create(db, admin.getIdent(), "first subject", file, contents); com.google.gerrit.acceptance.PushOneCommit.Result r = push.to(git, "refs/for/master"); java.lang.String changeId = r.getChangeId(); java.lang.String revId = r.getCommit().getName(); com.google.gerrit.extensions.api.changes.ReviewInput input = new com.google.gerrit.extensions.api.changes.ReviewInput(); com.google.gerrit.extensions.api.changes.ReviewInput.CommentInput comment = newCommentInfo(file, Side.REVISION, line, "comment 1"); input.comments = new java.util.HashMap(); input.comments.put(comment.path, com.google.common.collect.Lists.newArrayList(comment)); revision(r).review(input); java.util.Map<java.lang.String, java.util.List<com.google.gerrit.extensions.common.CommentInfo>> result = getPublishedComments(changeId, revId); assertThat(result).isNotEmpty(); com.google.gerrit.extensions.common.CommentInfo actual = com.google.common.collect.Iterables.getOnlyElement(result.get(comment.path)); com.google.gerrit.acceptance.server.change.CommentsIT.assertCommentInfo(comment, actual); } }
private com.google.gerrit.server.change.ChangeJson.ChangeInfo getChange(com.google.gerrit.acceptance.PushOneCommit.Result pr) throws java.io.IOException { return getChange(pr.getChangeId(), com.google.gerrit.acceptance.server.project.DETAILED_LABELS); }
@java.lang.Override public java.lang.String getPluginName(java.io.File srcFile) { try { return com.google.common.base.Objects.firstNonNull(com.google.gerrit.server.plugins.JarPluginProvider.getJarPluginName(srcFile), com.google.gerrit.server.plugins.PluginLoader.nameOf(srcFile)); } catch (java.io.IOException e) { throw new java.lang.IllegalArgumentException((("Invalid plugin file " + srcFile) + ": cannot get plugin name"), e); } }
private com.google.gerrit.server.notedb.ChangeNotes newNotes(com.google.gerrit.reviewdb.server.ReviewDb db, com.google.gerrit.reviewdb.client.Change change) throws com.google.gwtorm.server.OrmException { return notesFactory.create(db, change.getProject(), change.getId()); }
private boolean canCherryPick(final com.google.gerrit.server.git.CodeReviewCommit mergeTip, final com.google.gerrit.server.git.CodeReviewCommit toMerge) throws com.google.gerrit.server.git.MergeException { if (mergeTip == null) { return true; } if ((toMerge.getParentCount()) == 0) { return false; } if ((toMerge.getParentCount()) == 1) { try { final org.eclipse.jgit.merge.ThreeWayMerger m = com.google.gerrit.server.git.MergeUtil.newThreeWayMerger(args.repo, com.google.gerrit.server.git.MergeUtil.createDryRunInserter(), args.useContentMerge); m.setBase(toMerge.getParent(0)); return m.merge(mergeTip, toMerge); } catch (java.io.IOException e) { throw new com.google.gerrit.server.git.MergeException(("Cannot merge " + (toMerge.name())), e); } } return (com.google.gerrit.server.git.MergeUtil.canFastForward(args.mergeSorter, mergeTip, args.rw, toMerge)) || (com.google.gerrit.server.git.MergeUtil.canMerge(args.mergeSorter, args.repo, args.useContentMerge, mergeTip, toMerge)); }
@org.junit.Test public void skipPatchSetsGreaterThanCurrentPatchSet() throws java.lang.Exception { com.google.gerrit.acceptance.PushOneCommit.Result r = createChange(); com.google.gerrit.reviewdb.client.Change change = r.getChange().change(); com.google.gerrit.reviewdb.client.Change.Id id = change.getId(); com.google.gerrit.reviewdb.client.PatchSet badPs = new com.google.gerrit.reviewdb.client.PatchSet(new com.google.gerrit.reviewdb.client.PatchSet.Id(id, ((change.currentPatchSetId().get()) + 1))); badPs.setCreatedOn(com.google.gerrit.common.TimeUtil.nowTs()); badPs.setUploader(new com.google.gerrit.reviewdb.client.Account.Id(12345)); badPs.setRevision(new com.google.gerrit.reviewdb.client.RevId("deadbeefdeadbeefdeadbeefdeadbeefdeadbeef")); db.patchSets().insert(java.util.Collections.singleton(badPs)); indexer.index(db, change.getProject(), id); checker.rebuildAndCheckChanges(id); notesMigration.setAllEnabled(true); com.google.gerrit.server.notedb.ChangeNotes notes = notesFactory.create(db, project, id); assertThat(notes.getPatchSets().keySet()).containsExactly(change.currentPatchSetId()); }
public com.google.common.collect.Table<com.google.gerrit.reviewdb.client.PatchSet.Id, java.lang.String, com.google.gerrit.reviewdb.client.PatchLineComment> getDraftPsComments(com.google.gerrit.reviewdb.client.Account.Id author) throws com.google.gwtorm.server.OrmException { loadDraftComments(author); return draftCommentNotes.getDraftPsComments(); }
public com.google.gerrit.common.data.GarbageCollectionResult run(java.util.List<com.google.gerrit.reviewdb.client.Project.NameKey> projectNames, java.io.PrintWriter writer) { return run(projectNames, gcConfig.isAggressive(), writer); }
private com.google.template.soy.data.SoyMapData toSoyMapData(com.google.gitiles.RepositoryDescription desc, @javax.annotation.Nullable java.lang.String prefix, com.google.gitiles.GitilesView view) { return new com.google.template.soy.data.SoyMapData("name", com.google.gitiles.HostIndexServlet.stripPrefix(prefix, desc.name), "description", com.google.common.base.Strings.nullToEmpty(desc.description), "url", com.google.gitiles.GitilesView.repositoryIndex().copyFrom(view).setRepositoryName(desc.name).toUrl()); }
private com.google.gerrit.server.git.SubmitStrategy createStrategy(final com.google.gerrit.reviewdb.client.Project.SubmitType submitType) throws com.google.gerrit.server.git.MergeException, com.google.gerrit.server.project.NoSuchProjectException { return submitStrategyFactory.create(submitType, db, repo, rw, inserter, canMergeFlag, getAlreadyAccepted(branchTip), destBranch); }
java.lang.String[] getAdminUrls() { return this.adminUrls; }
@java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.util.List<java.lang.Object>> apply(java.util.List<com.google.gerrit.reviewdb.client.Change> changes) { java.util.List<com.google.common.util.concurrent.ListenableFuture<?>> result = com.google.common.collect.Lists.newArrayListWithCapacity(changes.size()); for (final com.google.gerrit.reviewdb.client.Change c : changes) { com.google.common.util.concurrent.ListenableFuture<java.lang.Boolean> b = executor.submit(new com.google.gerrit.server.change.MergeabilityChecker.Task(c, force)); if (reindex) { result.add(com.google.common.util.concurrent.Futures.transform(b, new com.google.common.util.concurrent.AsyncFunction<java.lang.Boolean, java.lang.Object>() { @java.lang.SuppressWarnings("unchecked") @java.lang.Override public com.google.common.util.concurrent.ListenableFuture<java.lang.Object> apply(java.lang.Boolean indexUpdated) throws java.lang.Exception { if (!indexUpdated) { return ((com.google.common.util.concurrent.ListenableFuture<java.lang.Object>) (indexer.indexAsync(c.getId()))); } return com.google.common.util.concurrent.Futures.immediateFuture(null); } })); } else { result.add(b); } } return com.google.common.util.concurrent.Futures.allAsList(result); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfigs({ @com.google.gerrit.acceptance.GerritConfig(name = "addreviewer.maxAllowed", value = "2"), @com.google.gerrit.acceptance.GerritConfig(name = "addreviewer.maxWithoutConfirmation", value = "1") }) public void suggestReviewersGroupSizeConsiderations() throws java.lang.Exception { com.google.gerrit.reviewdb.client.AccountGroup largeGroup = group("large"); com.google.gerrit.reviewdb.client.AccountGroup mediumGroup = group("medium"); user("individual 0", "Test0 Last0", largeGroup, mediumGroup); user("individual 1", "Test1 Last1", largeGroup); java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers; com.google.gerrit.extensions.common.SuggestedReviewerInfo reviewer; reviewers = suggestReviewers(changeId, "test", 10); assertThat(reviewers).hasSize(2); reviewer = reviewers.get(0); assertThat(reviewer.count).isEqualTo(1); assertThat(reviewer.confirm).isNull(); reviewers = suggestReviewers(changeId, largeGroup.getName(), 10); assertThat(reviewers).isEmpty(); reviewers = suggestReviewers(changeId, mediumGroup.getName(), 10); assertThat(reviewers).hasSize(1); reviewer = reviewers.get(0); assertThat(reviewer.group.name).isEqualTo(mediumGroup.getName()); assertThat(reviewer.count).isEqualTo(2); assertThat(reviewer.confirm).isTrue(); }
@java.lang.Override public java.lang.Object apply(com.google.gerrit.server.change.ChangeResource rsrc) throws com.google.gerrit.extensions.restapi.BadRequestException, com.google.gwtorm.server.OrmException { java.util.Map<com.google.gerrit.reviewdb.client.Account.Id, java.lang.Object> reviewers = com.google.common.collect.Maps.newLinkedHashMap(); com.google.gerrit.reviewdb.server.ReviewDb db = dbProvider.get(); com.google.gerrit.reviewdb.client.Change.Id changeId = rsrc.getChange().getId(); for (com.google.gerrit.reviewdb.client.PatchSetApproval patchSetApproval : db.patchSetApprovals().byChange(changeId)) { com.google.gerrit.reviewdb.client.Account.Id accountId = patchSetApproval.getAccountId(); if (!(reviewers.containsKey(accountId))) { com.google.gerrit.reviewdb.client.Account account = accountCache.get(accountId).getAccount(); reviewers.put(accountId, json.format(new com.google.gerrit.server.change.ReviewerResource(rsrc, account))); } } return reviewers.values(); }
@java.lang.Override public com.google.gerrit.common.data.ChangeDetail call() throws com.google.gerrit.common.errors.NoSuchEntityException, com.google.gerrit.server.mail.EmailException, com.google.gerrit.server.patch.PatchSetInfoNotAvailableException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gerrit.server.project.NoSuchChangeException, com.google.gwtorm.server.OrmException, java.io.IOException, org.eclipse.jgit.errors.IncorrectObjectTypeException, org.eclipse.jgit.errors.MissingObjectException { com.google.gerrit.server.ChangeUtil.rebaseChange(patchSetId, currentUser, db, rebasedPatchSetSenderFactory, hooks, gitManager, patchSetInfoFactory, replication, myIdent, changeControlFactory, approvalTypes); return changeDetailFactory.create(patchSetId.getParentKey()).call(); }
public void doPatchsetCreatedHook(final com.google.gerrit.reviewdb.client.Change change, final com.google.gerrit.reviewdb.client.PatchSet patchSet, final com.google.gerrit.reviewdb.server.ReviewDb db) throws com.google.gwtorm.server.OrmException { final com.google.gerrit.server.events.PatchSetCreatedEvent event = new com.google.gerrit.server.events.PatchSetCreatedEvent(); final com.google.gerrit.server.account.AccountState uploader = accountCache.get(patchSet.getUploader()); final com.google.gerrit.server.account.AccountState owner = accountCache.get(change.getOwner()); event.change = eventFactory.asChangeAttribute(change); event.patchSet = eventFactory.asPatchSetAttribute(patchSet); event.uploader = eventFactory.asAccountAttribute(uploader.getAccount()); fireEvent(change, event, db); final java.util.List<java.lang.String> args = new java.util.ArrayList<java.lang.String>(); addArg(args, "--change", event.change.id); addArg(args, "--is-draft", (patchSet.isDraft() ? "true" : "false")); addArg(args, "--change-url", event.change.url); addArg(args, "--change-owner", getDisplayName(owner.getAccount())); addArg(args, "--project", event.change.project); addArg(args, "--branch", event.change.branch); addArg(args, "--topic", event.change.topic); addArg(args, "--uploader", getDisplayName(uploader.getAccount())); addArg(args, "--commit", event.patchSet.revision); addArg(args, "--patchset", event.patchSet.number); runHook(change.getProject(), patchsetCreatedHook, args); }
@java.lang.Override public void run() { try (com.google.gerrit.reviewdb.server.ReviewDb db = database.open()) { for (; ;) { final com.google.gerrit.reviewdb.client.AccountExternalId extId = next(); if (extId == null) { break; } convertLocalUserToLowerCase(db, extId); synchronized(monitor) { monitor.update(1); } } } catch (com.google.gwtorm.server.OrmException e) { e.printStackTrace(); } }
public abstract com.google.gerrit.server.diff.Text bText();
public void testThreeLevelTreeWithSomeIndexPredicates() throws java.lang.Exception { com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> in = parse("-branch:a (file:b OR file:c)"); com.google.gerrit.server.query.Predicate<com.google.gerrit.server.query.change.ChangeData> out = rewrite(in); assertEquals(com.google.gerrit.server.query.AndPredicate.class, out.getClass()); assertEquals(com.google.common.collect.ImmutableList.of(in.getChild(0), wrap(in.getChild(1))), out.getChildren()); }
public java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> formatList2(java.util.List<java.util.List<com.google.gerrit.server.query.change.ChangeData>> in) throws com.google.gwtorm.server.OrmException { accountLoader = accountLoaderFactory.create(options.contains(com.google.gerrit.server.change.DETAILED_ACCOUNTS)); java.util.List<java.util.List<com.google.gerrit.server.change.ChangeJson.ChangeInfo>> res = com.google.common.collect.Lists.newArrayListWithCapacity(in.size()); for (java.util.List<com.google.gerrit.server.query.change.ChangeData> changes : in) { com.google.gerrit.server.query.change.ChangeData.ensureChangeLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentPatchSetLoaded(db, changes); com.google.gerrit.server.query.change.ChangeData.ensureCurrentApprovalsLoaded(db, changes); res.add(toChangeInfo(changes)); } accountLoader.fill(); return res; }
@java.lang.Override void index(com.google.gerrit.reviewdb.client.Account.Id id, com.ericsson.gerrit.plugins.highavailability.forwarder.rest.Operation operation) throws java.io.IOException { indexer.index(id); com.ericsson.gerrit.plugins.highavailability.forwarder.rest.IndexAccountRestApiServlet.logger.debug("Account {} successfully indexed", id); updateIndexTs(java.time.LocalDateTime.now()); }
@org.junit.Test @com.google.gerrit.acceptance.GerritConfig(name = "suggest.from", value = "2") public void suggestReviewersNoResult3() throws java.lang.Exception { java.lang.String changeId = createChange().getChangeId(); java.util.List<com.google.gerrit.extensions.common.SuggestedReviewerInfo> reviewers = suggestReviewers(changeId, "u", 6); assertThat(reviewers).isEmpty(); }
protected com.google.gerrit.prettify.client.SparseHtmlFile getSparseHtmlFileB(com.google.gerrit.common.data.PatchScript s) { com.google.gerrit.extensions.client.DiffPreferencesInfo dp = s.getDiffPrefs(); com.google.gerrit.prettify.common.SparseFileContent b = s.getB(); com.google.gerrit.prettify.client.PrettyFormatter f = ClientSideFormatter.FACTORY.get(); f.setDiffPrefs(dp); f.setFileName(b.getPath()); f.setEditFilter(PrettyFormatter.B); f.setEditList(s.getEdits()); if ((s.getA().isWholeFile()) && (!(b.isWholeFile()))) { b = b.apply(s.getA(), s.getEdits()); } f.format(b); return f; }
private void populateCommands(final com.google.gerrit.common.data.PatchSetDetail detail) { for (final com.google.gerrit.common.data.UiCommandDetail cmd : detail.getCommands()) { final com.google.gwt.user.client.ui.Button b = new com.google.gwt.user.client.ui.Button(); b.setText(cmd.label); b.setEnabled(cmd.enabled); b.setTitle(cmd.title); b.addClickHandler(new com.google.gwt.event.dom.client.ClickHandler() { @java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString> cb = new com.google.gwt.user.client.rpc.AsyncCallback<com.google.gerrit.client.rpc.NativeString>() { @java.lang.Override public void onFailure(java.lang.Throwable caught) { b.setEnabled(true); new com.google.gerrit.client.ErrorDialog(caught).center(); } @java.lang.Override public void onSuccess(com.google.gerrit.client.rpc.NativeString msg) { b.setEnabled(true); if ((msg != null) && (!(msg.asString().isEmpty()))) { com.google.gwt.user.client.Window.alert(msg.asString()); } com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(patchSet.getId())); } }; com.google.gerrit.client.rpc.RestApi api = com.google.gerrit.client.changes.ChangeApi.revision(patchSet.getId()).view(cmd.id); if ("PUT".equalsIgnoreCase(cmd.method)) { api.put(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } else if ("DELETE".equalsIgnoreCase(cmd.method)) { api.delete(cb); } else { api.post(com.google.gwt.core.client.JavaScriptObject.createObject(), cb); } } }); actionsPanel.add(b); } }
private void createEmptyCommit(final org.eclipse.jgit.lib.Repository repo, final com.google.gerrit.reviewdb.Project.NameKey project, final java.lang.String ref) throws java.io.IOException { org.eclipse.jgit.lib.ObjectInserter oi = repo.newObjectInserter(); try { org.eclipse.jgit.lib.CommitBuilder cb = new org.eclipse.jgit.lib.CommitBuilder(); cb.setTreeId(oi.insert(Constants.OBJ_TREE, new byte[]{ })); cb.setCommitter(serverIdent); cb.setAuthor(cb.getCommitter()); cb.setMessage("Initial empty repository"); org.eclipse.jgit.lib.ObjectId id = oi.insert(cb); oi.flush(); org.eclipse.jgit.lib.RefUpdate ru = repo.updateRef(Constants.HEAD); ru.setNewObjectId(id); final org.eclipse.jgit.lib.RefUpdate.Result result = ru.update(); switch (result) { case NEW : rq.scheduleUpdate(project, ref); break; default : { throw new java.io.IOException(result.name()); } } } catch (java.io.IOException e) { com.google.gerrit.sshd.commands.CreateProject.log.error(("Cannot create empty commit for " + (projectName)), e); throw e; } finally { oi.release(); } }
public com.google.gerrit.extensions.registration.DynamicItem<T> get() { return new com.google.gerrit.extensions.registration.DynamicItem<T>(key, com.google.gerrit.extensions.registration.DynamicItemProvider.find(injector, type), "gerrit"); }
com.google.gitiles.CommitData.Builder setArchiveFormat(@javax.annotation.Nullable com.google.gitiles.ArchiveFormat archiveFormat) { this.archiveFormat = archiveFormat; return this; }
@java.lang.Override public com.google.gerrit.extensions.restapi.Response<?> apply(com.google.gerrit.server.change.ChangeResource resource, com.google.gerrit.server.change.ChangeEdits.Post.Input input) throws com.google.gerrit.extensions.restapi.AuthException, com.google.gerrit.extensions.restapi.ResourceConflictException, com.google.gerrit.server.project.InvalidChangeOperationException, com.google.gwtorm.server.OrmException, java.io.IOException { com.google.common.base.Optional<com.google.gerrit.server.edit.ChangeEdit> edit = editUtil.byChange(resource.getChange()); if (!(edit.isPresent())) { edit = createEdit(resource.getChange()); } if ((input != null) && (!(com.google.common.base.Strings.isNullOrEmpty(input.restorePath)))) { editModifier.restoreFile(edit.get(), input.restorePath); } return com.google.gerrit.extensions.restapi.Response.none(); }
protected static com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject assertThat(com.google.gerrit.testutil.FakeEmailSender sender) { return assertAbout(com.google.gerrit.acceptance.AbstractNotificationTest.FakeEmailSenderSubject::new).that(sender); }
public org.apache.lucene.search.Query toQuery(com.google.gerrit.server.query.Predicate<V> p) throws com.google.gerrit.server.query.QueryParseException { if (p instanceof com.google.gerrit.server.query.AndPredicate) { return and(p); } else if (p instanceof com.google.gerrit.server.query.OrPredicate) { return or(p); } else if (p instanceof com.google.gerrit.server.query.NotPredicate) { return not(p); } else if (p instanceof com.google.gerrit.server.index.IndexPredicate) { return fieldQuery(((com.google.gerrit.server.index.IndexPredicate<V>) (p))); } else if (p instanceof com.google.gerrit.server.query.PostFilterPredicate) { return new org.apache.lucene.search.MatchAllDocsQuery(); } else { throw new com.google.gerrit.server.query.QueryParseException(("cannot create query for index: " + p)); } }
@java.lang.Override public void cancel() { com.googlesource.gerrit.plugins.replication.ReplicationQueue.repLog.info("Replication {} was canceled", getURI()); canceledByReplication(); pool.pushWasCanceled(this); }
public org.eclipse.jgit.lfs.server.LargeFileRepository get(com.google.gerrit.reviewdb.client.Project.NameKey project, java.lang.String backendName) throws org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound { com.googlesource.gerrit.plugins.lfs.LfsBackend backend; if (com.google.common.base.Strings.isNullOrEmpty(backendName)) { backend = defaultBackend; } else { backend = backends.get(backendName); if (backend == null) { com.googlesource.gerrit.plugins.lfs.LfsRepositoryResolver.log.error(java.lang.String.format(("Project %s is configured with not existing" + " backend %s"), project, (com.google.common.base.Strings.isNullOrEmpty(backendName) ? com.googlesource.gerrit.plugins.lfs.LfsBackend.DEFAULT : backendName))); throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); } } org.eclipse.jgit.lfs.server.LargeFileRepository repository = cache.get(backend); if (repository != null) { return repository; } com.googlesource.gerrit.plugins.lfs.LfsRepositoryResolver.log.error(java.lang.String.format(("Project %s is configured with not existing" + " backend %s of type %s"), project, (com.google.common.base.Strings.isNullOrEmpty(backendName) ? com.googlesource.gerrit.plugins.lfs.LfsBackend.DEFAULT : backendName), backend.type)); throw new org.eclipse.jgit.lfs.errors.LfsRepositoryNotFound(project.get()); }
@java.lang.Override protected void configure() { bind(com.google.gerrit.server.RequestCleanup.class).in(com.google.inject.servlet.RequestScoped.class); bind(com.google.gerrit.server.config.RequestScopedReviewDbProvider.class); bind(IdentifiedUser.RequestFactory.class).in(com.google.gerrit.server.config.SINGLETON); bind(com.google.gerrit.server.project.PerRequestProjectControlCache.class).in(com.google.inject.servlet.RequestScoped.class); bind(ChangeControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); bind(ProjectControl.Factory.class).in(com.google.gerrit.server.config.SINGLETON); factory(SubmoduleOp.Factory.class); factory(MergeOp.Factory.class); factory(DeleteDraftPatchSet.Factory.class); factory(PublishDraft.Factory.class); factory(RemoveReviewer.Factory.class); factory(SuggestParentCandidates.Factory.class); factory(BanCommit.Factory.class); }
private void index(com.google.gerrit.reviewdb.client.Change.Id id, java.lang.String operation) throws com.google.gwtorm.server.OrmException, java.io.IOException { java.util.concurrent.atomic.AtomicInteger changeIdLock = getAndIncrementChangeIdLock(id); synchronized(changeIdLock) { if ("index".equals(operation)) { try (com.google.gerrit.reviewdb.server.ReviewDb db = schemaFactory.open()) { com.google.gerrit.reviewdb.client.Change change = db.changes().get(id); if (change == null) { indexer.delete(id); return; } indexer.index(db, change); } com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug("Change {} successfully indexed", id); } if ("delete".equals(operation)) { indexer.delete(id); com.ericsson.gerrit.plugins.syncindex.SyncIndexRestApiServlet.logger.debug("Change {} successfully deleted from index", id); } } if ((changeIdLock.decrementAndGet()) == 0) { removeChangeIdLock(id); } }
@org.junit.Test public void patchSetChangeNotes() throws java.lang.Exception { com.google.gerrit.reviewdb.client.Change c = newChange(); com.google.gerrit.server.notedb.ChangeNotes notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps1 = notes.getCurrentPatchSet(); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps1.getId()); assertThat(notes.getChange().getSubject()).isEqualTo("Change subject"); assertThat(notes.getChange().getOriginalSubject()).isEqualTo("Change subject"); assertThat(ps1.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 1)); assertThat(ps1.getUploader()).isEqualTo(changeOwner.getAccountId()); incrementPatchSet(c); org.eclipse.jgit.revwalk.RevCommit commit = tr.commit().message("PS2").create(); com.google.gerrit.server.notedb.ChangeUpdate update = newUpdate(c, otherUser); update.setCommit(rw, commit); update.commit(); notes = newNotes(c); com.google.gerrit.reviewdb.client.PatchSet ps2 = notes.getCurrentPatchSet(); assertThat(ps2.getId()).isEqualTo(new com.google.gerrit.reviewdb.client.PatchSet.Id(c.getId(), 2)); assertThat(notes.getChange().getSubject()).isEqualTo("PS2"); assertThat(notes.getChange().getOriginalSubject()).isEqualTo("Change subject"); assertThat(notes.getChange().currentPatchSetId()).isEqualTo(ps2.getId()); assertThat(ps2.getRevision().get()).isNotEqualTo(ps1.getRevision()); assertThat(ps2.getRevision().get()).isEqualTo(commit.name()); assertThat(ps2.getUploader()).isEqualTo(otherUser.getAccountId()); assertThat(ps2.getCreatedOn()).isEqualTo(update.getWhen()); }
public java.util.Map<K, V> getAll(java.lang.Iterable<K> keys);
private void postDeletion(com.google.gerrit.server.project.ProjectResource project, org.eclipse.jgit.transport.ReceiveCommand cmd) { referenceUpdated.fire(project.getNameKey(), cmd, identifiedUser.get().getAccount()); }
@java.lang.Override public void onReplaceByKeys(org.eclipse.jgit.lib.ObjectId oldNotesRev, org.eclipse.jgit.lib.ObjectId newNotesRev, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId.Key> toRemove, java.util.Collection<com.google.gerrit.server.account.externalids.ExternalId> toAdd) throws java.io.IOException { updateCache(oldNotesRev, newNotesRev, ( m) -> { removeKeys(m.values(), toRemove); for (com.google.gerrit.server.account.externalids.ExternalId extId : toAdd) { m.put(extId.accountId(), extId); } }); }
@java.lang.Override public void connect() { if (isOpen()) { com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.debug("Already connected."); return; } com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info("Connect to {}...", properties.getProperty("bootstrap.servers")); setConnectionClassLoader(); producer = new org.apache.kafka.clients.producer.KafkaProducer(properties); com.googlesource.gerrit.plugins.kafka.session.type.KafkaSession.LOGGER.info("Connection established."); }
@java.lang.Override public void onClick(final com.google.gwt.event.dom.client.ClickEvent event) { b.setEnabled(false); new com.google.gerrit.client.ui.CherryPickDialog(b, changeDetail.getChange().getProject()) { { sendButton.setText(Util.C.buttonCherryPickChangeSend()); if (changeDetail.getChange().getStatus().isClosed()) { message.setText(Util.M.cherryPickedChangeDefaultMessage(detail.getInfo().getMessage().trim(), detail.getPatchSet().getRevision().get())); } else { message.setText(detail.getInfo().getMessage().trim()); } } @java.lang.Override public void onSend() { com.google.gerrit.client.changes.ChangeApi.cherrypick(changeDetail.getChange().getChangeId(), patchSet.getRevision().get(), getDestinationBranch(), getMessageText(), new com.google.gerrit.client.rpc.GerritCallback<com.google.gerrit.client.changes.ChangeInfo>() { @java.lang.Override public void onSuccess(com.google.gerrit.client.changes.ChangeInfo result) { sent = true; com.google.gerrit.client.Gerrit.display(com.google.gerrit.common.PageLinks.toChange(new com.google.gerrit.reviewdb.client.Change.Id(result._number()))); hide(); } @java.lang.Override public void onFailure(java.lang.Throwable caught) { enableButtons(true); super.onFailure(caught); } }); } }.center(); }
private final native com.google.gwt.core.client.JsArrayString _archives();
private void computeAllowed() { final java.util.Set<com.google.gerrit.reviewdb.AccountGroup.Id> am = user.getEffectiveGroups(); final com.google.gerrit.server.project.ProjectState pe = projectCache.get(change.getProject()); for (com.google.gerrit.reviewdb.ApprovalCategory.Id category : approvalTypes.getApprovalCategories()) { com.google.gerrit.server.project.RefControl rc = pe.controlFor(user).controlForRef(change.getDest()); java.util.List<com.google.gerrit.reviewdb.RefRight> categoryRights = rc.getApplicableRights(category); computeAllowed(am, categoryRights, category); } }